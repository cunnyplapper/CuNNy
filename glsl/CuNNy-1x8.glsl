// CuNNy 1x8
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

// FSR EASU mpv | modified
// Copyright (c) 2021 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// FidelityFX FSR v1.0.2 by AMD
// ported to mpv by agyild

//!DESC CuNNy-EASU
//!HOOK LUMA
//!BIND LUMA
//!SAVE easu
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
//!COMPONENTS 1

float APrxLoRcpF1(float a) {
	return uintBitsToFloat(uint(0x7ef07ebb) - floatBitsToUint(a));
}

float APrxLoRsqF1(float a) {
	return uintBitsToFloat(uint(0x5f347d74) - (floatBitsToUint(a) >> uint(1)));
}

float AMin3F1(float x, float y, float z) {
	return min(x, min(y, z));
}

float AMax3F1(float x, float y, float z) {
	return max(x, max(y, z));
}

void tap(inout float aC, inout float aW, vec2 off, vec2 dir, vec2 len,
         float lob, float clp, float c){
	vec2 v;
	v.x = (off.x * ( dir.x)) + (off.y * dir.y);
	v.y = (off.x * (-dir.y)) + (off.y * dir.x);
	v *= len;
	float d2 = v.x * v.x + v.y * v.y;
	d2 = min(d2, clp);
	float wB = float(2.0 / 5.0) * d2 + -1.0;
	float wA = lob * d2 + -1.0;
	wB *= wB;
	wA *= wA;
	wB = float(25.0 / 16.0) * wB + float(-(25.0 / 16.0 - 1.0));
	float w = wB * wA;
	aC += c * w;
	aW += w;
}

void set(inout vec2 dir, inout float len, vec2 pp, bool biS, bool biT,
         bool biU, bool biV, float lA, float lB, float lC, float lD, float lE){
	float w = 0.0;
	if (biS)
		w = (1.0 - pp.x) * (1.0 - pp.y);
	if (biT)
		w =        pp.x  * (1.0 - pp.y);
	if (biU)
		w = (1.0 - pp.x) *        pp.y;
	if (biV)
		w =        pp.x  *        pp.y;
	float dc = lD - lC;
	float cb = lC - lB;
	float lenX = max(abs(dc), abs(cb));
	lenX = APrxLoRcpF1(lenX);
	float dirX = lD - lB;
	lenX = clamp(abs(dirX) * lenX, 0.0, 1.0);
	lenX *= lenX;
	float ec = lE - lC;
	float ca = lC - lA;
	float lenY = max(abs(ec), abs(ca));
	lenY = APrxLoRcpF1(lenY);
	float dirY = lE - lA;
	lenY = clamp(abs(dirY) * lenY, 0.0, 1.0);
	lenY *= lenY;
	dir += vec2(dirX, dirY) * w;
	len += dot(vec2(w), vec2(lenX, lenY));
}

vec4 hook() {
	vec4 pix = vec4(0.0, 0.0, 0.0, 1.0);
	vec2 pp = LUMA_pos * LUMA_size - vec2(0.5);
	vec2 fp = floor(pp);
	pp -= fp;
#if (defined(LUMA_gather) && (__VERSION__ >= 400 || (GL_ES && __VERSION__ >= 310)))
	vec4 bczzL = LUMA_gather(vec2((fp + vec2(1.0, -1.0)) * LUMA_pt), 0);
	vec4 ijfeL = LUMA_gather(vec2((fp + vec2(0.0,  1.0)) * LUMA_pt), 0);
	vec4 klhgL = LUMA_gather(vec2((fp + vec2(2.0,  1.0)) * LUMA_pt), 0);
	vec4 zzonL = LUMA_gather(vec2((fp + vec2(1.0,  3.0)) * LUMA_pt), 0);
#else
	float b = LUMA_tex(vec2((fp + vec2(0.5, -0.5)) * LUMA_pt)).r;
	float c = LUMA_tex(vec2((fp + vec2(1.5, -0.5)) * LUMA_pt)).r;
	float e = LUMA_tex(vec2((fp + vec2(-0.5, 0.5)) * LUMA_pt)).r;
	float f = LUMA_tex(vec2((fp + vec2( 0.5, 0.5)) * LUMA_pt)).r;
	float g = LUMA_tex(vec2((fp + vec2( 1.5, 0.5)) * LUMA_pt)).r;
	float h = LUMA_tex(vec2((fp + vec2( 2.5, 0.5)) * LUMA_pt)).r;
	float i = LUMA_tex(vec2((fp + vec2(-0.5, 1.5)) * LUMA_pt)).r;
	float j = LUMA_tex(vec2((fp + vec2( 0.5, 1.5)) * LUMA_pt)).r;
	float k = LUMA_tex(vec2((fp + vec2( 1.5, 1.5)) * LUMA_pt)).r;
	float l = LUMA_tex(vec2((fp + vec2( 2.5, 1.5)) * LUMA_pt)).r;
	float n = LUMA_tex(vec2((fp + vec2(0.5, 2.5) ) * LUMA_pt)).r;
	float o = LUMA_tex(vec2((fp + vec2(1.5, 2.5) ) * LUMA_pt)).r;
	vec4 bczzL = vec4(b, c, 0.0, 0.0);
	vec4 ijfeL = vec4(i, j, f, e);
	vec4 klhgL = vec4(k, l, h, g);
	vec4 zzonL = vec4(0.0, 0.0, o, n);
#endif
	float bL = bczzL.x;
	float cL = bczzL.y;
	float iL = ijfeL.x;
	float jL = ijfeL.y;
	float fL = ijfeL.z;
	float eL = ijfeL.w;
	float kL = klhgL.x;
	float lL = klhgL.y;
	float hL = klhgL.z;
	float gL = klhgL.w;
	float oL = zzonL.z;
	float nL = zzonL.w;
	vec2 dir = vec2(0.0);
	float len = 0.0;
	set(dir, len, pp, true, false, false, false, bL, eL, fL, gL, jL);
	set(dir, len, pp, false, true, false, false, cL, fL, gL, hL, kL);
	set(dir, len, pp, false, false, true, false, fL, iL, jL, kL, nL);
	set(dir, len, pp, false, false, false, true, gL, jL, kL, lL, oL);
	vec2 dir2 = dir * dir;
	float dirR = dir2.x + dir2.y;
	bool zro = dirR < float(1.0 / 32768.0);
	dirR = APrxLoRsqF1(dirR);
	dirR = zro ? 1.0 : dirR;
	dir.x = zro ? 1.0 : dir.x;
	dir *= vec2(dirR);
	len = len * 0.5;
	len *= len;
	float stretch = (dir.x * dir.x + dir.y * dir.y) * APrxLoRcpF1(max(abs(dir.x), abs(dir.y)));
	vec2 len2 = vec2(1.0 + (stretch - 1.0) * len, 1.0 + -0.5 * len);
	float lob = 0.5 + float((1.0 / 4.0 - 0.04) - 0.5) * len;
	float clp = APrxLoRcpF1(lob);
	float aC = 0.0;
	float aW = 0.0;
	tap(aC, aW, vec2( 0.0,-1.0) - pp, dir, len2, lob, clp, bL);
	tap(aC, aW, vec2( 1.0,-1.0) - pp, dir, len2, lob, clp, cL);
	tap(aC, aW, vec2(-1.0, 1.0) - pp, dir, len2, lob, clp, iL);
	tap(aC, aW, vec2( 0.0, 1.0) - pp, dir, len2, lob, clp, jL);
	tap(aC, aW, vec2( 0.0, 0.0) - pp, dir, len2, lob, clp, fL);
	tap(aC, aW, vec2(-1.0, 0.0) - pp, dir, len2, lob, clp, eL);
	tap(aC, aW, vec2( 1.0, 1.0) - pp, dir, len2, lob, clp, kL);
	tap(aC, aW, vec2( 2.0, 1.0) - pp, dir, len2, lob, clp, lL);
	tap(aC, aW, vec2( 2.0, 0.0) - pp, dir, len2, lob, clp, hL);
	tap(aC, aW, vec2( 1.0, 0.0) - pp, dir, len2, lob, clp, gL);
	tap(aC, aW, vec2( 1.0, 2.0) - pp, dir, len2, lob, clp, oL);
	tap(aC, aW, vec2( 0.0, 2.0) - pp, dir, len2, lob, clp, nL);
	pix.r = aC / aW;
	float min1 = min(AMin3F1(fL, gL, jL), kL);
	float max1 = max(AMax3F1(fL, gL, jL), kL);
	pix.r = clamp(pix.r, min1, max1);
	pix.r = clamp(pix.r, 0.0, 1.0);
	return pix;
}

//!DESC CuNNy-1x8-up:0
//!HOOK LUMA
//!BIND LUMA
//!SAVE up_0
//!WIDTH LUMA.w
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#define l0(x, y) LUMA_texOff(vec2(x, y))
vec4 hook() {
	vec4 r = vec4(0.0);
	r += vec4(0.1850585639476776, 0.0052183219231665134, -0.18585993349552155, 0.042652543634176254) * l0(-1.0, -1.0);
	r += vec4(0.2086624801158905, 0.014026268385350704, -0.031847599893808365, 0.15869133174419403) * l0(0.0, -1.0);
	r += vec4(-0.05261225253343582, 0.38456496596336365, 0.221731498837471, -0.03529280424118042) * l0(1.0, -1.0);
	r += vec4(-0.036483585834503174, 0.008078917860984802, -0.1752665787935257, 0.10784874111413956) * l0(-1.0, 0.0);
	r += vec4(-0.062340062111616135, -4.842462294618599e-05, -0.034447379410266876, -0.25666287541389465) * l0(0.0, 0.0);
	r += vec4(-0.008927814662456512, -0.41113290190696716, 0.19482767581939697, -0.018189527094364166) * l0(1.0, 0.0);
	r += vec4(-0.13720080256462097, -0.016180559992790222, 0.08117254823446274, 0.009762182831764221) * l0(-1.0, 1.0);
	r += vec4(-0.1766461431980133, 0.0057236310094594955, 0.00580225745216012, 0.2722909450531006) * l0(0.0, 1.0);
	r += vec4(0.07958094775676727, 0.009791488759219646, -0.07641599327325821, 0.09643526375293732) * l0(1.0, 1.0);
	r += vec4(-0.00242024683393538, -0.0009560980251990259, 0.004111635033041239, 0.012521349824965);
	return max(r, 0.0);
}

//!DESC CuNNy-1x8-up:1
//!HOOK LUMA
//!BIND LUMA
//!SAVE up_1
//!WIDTH LUMA.w
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#define l0(x, y) LUMA_texOff(vec2(x, y))
vec4 hook() {
	vec4 r = vec4(0.0);
	r += vec4(0.07836941629648209, -0.007312506437301636, 0.0788574144244194, -0.004170526750385761) * l0(-1.0, -1.0);
	r += vec4(-0.07260607182979584, 0.017764832824468613, 0.01081069651991129, -0.006718927063047886) * l0(0.0, -1.0);
	r += vec4(-0.005412611179053783, -0.008456194773316383, 0.08471725136041641, 0.012295498512685299) * l0(1.0, -1.0);
	r += vec4(0.3330078125, -0.007735892664641142, 0.07320473343133926, 0.010904340073466301) * l0(-1.0, 0.0);
	r += vec4(-0.36826634407043457, -0.38319557905197144, -0.5926953554153442, -0.34082087874412537) * l0(0.0, 0.0);
	r += vec4(0.012505684979259968, 0.017760613933205605, 0.10600055009126663, 0.3388671875) * l0(1.0, 0.0);
	r += vec4(-0.03157554194331169, 0.013888445682823658, 0.0183109138160944, -0.00609390577301383) * l0(-1.0, 1.0);
	r += vec4(0.05960617586970329, 0.36224880814552307, 0.16952915489673615, 0.009793655946850777) * l0(0.0, 1.0);
	r += vec4(-0.0077112638391554356, -0.0057426514104008675, 0.015803074464201927, -0.011690530925989151) * l0(1.0, 1.0);
	r += vec4(0.0027837587986141443, 0.003744127694517374, 0.012300017289817333, 2.5080291379708797e-05);
	return max(r, 0.0);
}

//!DESC CuNNy-1x8-conv1:0
//!HOOK LUMA
//!BIND up_0
//!BIND up_1
//!SAVE conv1_0
//!WIDTH LUMA.w
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#define l0(x, y) up_0_texOff(vec2(x, y))
#define l1(x, y) up_1_texOff(vec2(x, y))
vec4 hook() {
	vec4 r = vec4(0.0);
	r += mat4(-0.01218674797564745, 0.03236239776015282, -0.03701930120587349, -0.017393307760357857, 0.22443565726280212, 0.1393224447965622, 0.013736432418227196, 0.07754287868738174, -0.12348297983407974, -0.06038747355341911, -0.04694465547800064, 0.0018858449766412377, -0.25356146693229675, -0.08227025717496872, -0.10382051765918732, -0.010943913832306862) * l0(-1.0, -1.0);
	r += mat4(-0.17193496227264404, -0.07290706783533096, -0.015116000548005104, 0.08121824264526367, 0.2415601760149002, 0.13039341568946838, -0.06827735155820847, 0.18798646330833435, 0.01020063180476427, -0.06824205815792084, -0.06012057885527611, 0.03852354362607002, 0.4912109971046448, -0.010759253054857254, -0.055713482201099396, -0.005806401371955872) * l0(0.0, -1.0);
	r += mat4(-0.14794854819774628, -0.12342572212219238, -0.001549736363813281, -0.18211308121681213, 0.00866797287017107, 0.04819612205028534, 0.01325171533972025, -0.01300762314349413, -0.07309284806251526, -0.03043878823518753, -0.012460852041840553, 0.036279674619436264, -0.06495337933301926, 0.06921900808811188, -0.1029815524816513, -0.0004353872500360012) * l0(1.0, -1.0);
	r += mat4(-0.016216494143009186, 0.042808648198843, 0.009559781290590763, 0.046576596796512604, 0.03489505872130394, 0.42799216508865356, -0.009931552223861217, -0.048248063772916794, -0.03137294948101044, -0.056902430951595306, -0.018242118880152702, -0.024835940450429916, -0.08561477065086365, -0.2209569811820984, -0.053549930453300476, -0.10819640010595322) * l0(-1.0, 0.0);
	r += mat4(-0.17374759912490845, -0.34282296895980835, -0.04842408373951912, 0.09357497841119766, 0.42870646715164185, 0.35981619358062744, -0.028941316530108452, 0.23215238749980927, -0.2669195234775543, -0.19384852051734924, -0.023948809131979942, -0.06860537827014923, -0.14175909757614136, 0.3487265110015869, -0.09872319549322128, -0.005454665049910545) * l0(0.0, 0.0);
	r += mat4(-0.10560819506645203, 0.2095431685447693, -0.09221985191106796, -0.4082964062690735, 0.01879606954753399, 0.01919214241206646, -0.05079016089439392, -0.056009288877248764, -0.044150013476610184, -0.12741735577583313, -0.01670132391154766, -0.025949904695153236, 0.06016412377357483, -0.08399726450443268, -0.021169785410165787, 0.1427392214536667) * l0(1.0, 0.0);
	r += mat4(-0.001639038440771401, 0.016835886985063553, 0.016594331711530685, 0.00483466824516654, -0.03234700858592987, -0.1786094605922699, -0.03743381053209305, 0.019898736849427223, -0.028455380350351334, -0.10864228010177612, -0.008839495480060577, -0.032159361988306046, 0.024174336344003677, -0.1124381273984909, -0.036718349903821945, 0.023872192949056625) * l0(-1.0, 1.0);
	r += mat4(0.00877099297940731, -0.16552700102329254, 0.03717005252838135, 0.04970530420541763, 0.11762701719999313, -0.8105471134185791, -0.048152681440114975, 0.7380868792533875, -0.01313646137714386, -0.08908600360155106, 0.02682896889746189, -0.08228179812431335, -0.022947220131754875, 0.02083415351808071, -0.09966882318258286, 0.059335578233003616) * l0(0.0, 1.0);
	r += mat4(-0.018389716744422913, 0.0956045538187027, 0.0448044091463089, -0.10033149272203445, -0.0057122125290334225, -0.019088029861450195, -0.062435295432806015, -0.1528446525335312, -0.03704889863729477, 0.2446882277727127, -0.030010076239705086, -0.40313979983329773, -0.004517892841249704, 0.06002075970172882, -0.11591687053442001, -0.10203877836465836) * l0(1.0, 1.0);
	r += mat4(-0.04358156770467758, 0.012795683927834034, 0.0030792439356446266, 0.018137196078896523, 0.0647793561220169, 0.2430267333984375, 0.06068871170282364, 0.014345045201480389, -0.00860476866364479, 0.029494265094399452, -0.019868379458785057, 0.025950834155082703, -0.4235297441482544, 0.07892033457756042, 0.05218856409192085, -0.06029145419597626) * l1(-1.0, -1.0);
	r += mat4(0.34578752517700195, 0.2880876362323761, -0.05873559042811394, -0.0013619905803352594, 0.6855500936508179, 0.17917923629283905, 0.002307278336957097, -0.01928202249109745, 0.07919179648160934, -0.27103346586227417, -0.0006078467122279108, -0.10984722524881363, 0.16303710639476776, 0.1528947353363037, -0.013296320103108883, 0.023517340421676636) * l1(0.0, -1.0);
	r += mat4(0.1891695261001587, 0.2646481394767761, -0.06592142581939697, 0.2172916829586029, -0.024182219058275223, -0.2822265923023224, 0.032515574246644974, 0.27626273036003113, -0.1188569888472557, -0.05165742710232735, 0.04792981222271919, -0.2219599485397339, 0.06953848898410797, 0.07911329716444016, 0.028310751542448997, 0.09739610552787781) * l1(1.0, -1.0);
	r += mat4(0.017020083963871002, -0.08640699088573456, -0.06290126591920853, 0.0020636736880987883, 0.09647973626852036, 0.17445045709609985, -0.11810073256492615, 0.05789564549922943, 0.006420295685529709, -0.047578126192092896, -0.06653779000043869, -0.056731127202510834, -0.13512100279331207, 0.2593561112880707, -0.011335069313645363, 0.21141543984413147) * l1(-1.0, 0.0);
	r += mat4(0.12746459245681763, 0.5529170036315918, 0.00870218314230442, 0.07445751130580902, 0.2045881152153015, 0.03652789443731308, 0.036259014159440994, -0.09222320467233658, -0.008108577691018581, -0.18883349001407623, 0.05639424920082092, 0.0024625861551612616, 0.4292508065700531, 0.9238284826278687, 0.002552678342908621, 1.3802883625030518) * l1(0.0, 0.0);
	r += mat4(-0.10788503289222717, -0.8346661329269409, -0.02030535228550434, -0.7919298410415649, -0.08708671480417252, 0.08611950278282166, -0.038699306547641754, -0.985923171043396, 0.029863474890589714, 0.11939774453639984, -0.00544077530503273, 0.6749661564826965, 0.10469918698072433, -0.09206821024417877, -0.0013278407277539372, 0.062411997467279434) * l1(1.0, 0.0);
	r += mat4(0.015386885032057762, 0.07883824408054352, -0.02463887818157673, 0.011067291721701622, -0.004468662664294243, 0.11114007979631424, 0.08019713312387466, 0.0015645548701286316, -0.003547084517776966, 0.04927409440279007, -0.08870729804039001, 0.0071364943869411945, -0.01418557669967413, -0.06578566879034042, -0.049052249640226364, -0.13422875106334686) * l1(-1.0, 1.0);
	r += mat4(0.06740585714578629, 0.36753660440444946, 0.004394468851387501, 0.11417605727910995, 0.007500065490603447, -0.1075301319360733, 0.0075617446564137936, 0.008014459162950516, -0.003183952532708645, -0.04088427126407623, 0.025905240327119827, -0.0173997413367033, 0.1280040144920349, -0.4627339839935303, -0.08493681252002716, -0.03310933709144592) * l1(0.0, 1.0);
	r += mat4(-0.053109120577573776, -0.23711265623569489, 0.013087134808301926, -0.16160042583942413, 0.010767294093966484, -0.12054485082626343, 0.01964760571718216, 0.10053589195013046, -0.03522828221321106, 0.2221626192331314, 0.0016453848220407963, -0.06702298671007156, 0.05675981938838959, -0.25683239102363586, -0.02381734922528267, -0.2568839192390442) * l1(1.0, 1.0);
	r += vec4(-0.0038695812691003084, -0.0018089603399857879, -0.026560550555586815, 0.0016741504659876227);
	return max(r, 0.0);
}

//!DESC CuNNy-1x8-conv1:1
//!HOOK LUMA
//!BIND up_0
//!BIND up_1
//!SAVE conv1_1
//!WIDTH LUMA.w
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#define l0(x, y) up_0_texOff(vec2(x, y))
#define l1(x, y) up_1_texOff(vec2(x, y))
vec4 hook() {
	vec4 r = vec4(0.0);
	r += mat4(-0.07773523777723312, -0.017410673201084137, 0.04113846644759178, -0.0494033582508564, -0.05903104320168495, 0.08157062530517578, 0.165524423122406, -0.15970559418201447, -0.05936974659562111, -0.02455800585448742, -0.08666493743658066, -0.010943034663796425, -0.1479780524969101, -0.03691595792770386, -0.01840019039809704, -0.011869887821376324) * l0(-1.0, -1.0);
	r += mat4(0.08130201697349548, -0.09838990122079849, -0.1625983566045761, -0.02529977634549141, -0.00723725650459528, -0.08652357012033463, 0.06314003467559814, -0.23752887547016144, -0.07936520129442215, -0.05257115513086319, -0.02852371521294117, 0.11303260177373886, 0.18071025609970093, -0.0666501596570015, -0.07980120182037354, 0.21153400838375092) * l0(0.0, -1.0);
	r += mat4(0.046003080904483795, -0.19177526235580444, -0.27441295981407166, 0.21826289594173431, 0.00596994673833251, 0.017591599375009537, -0.018135517835617065, -0.007739583496004343, -0.005570011213421822, -0.08861766010522842, -0.059824515134096146, -0.004587671719491482, 0.16421382129192352, 0.19306574761867523, 0.19551149010658264, -0.09982787817716599) * l0(1.0, -1.0);
	r += mat4(0.050612352788448334, 0.08207514882087708, 0.08174435794353485, -0.22411800920963287, 0.45833122730255127, 0.6775822639465332, 0.6466736793518066, -1.9466643333435059, -0.08266805857419968, -0.0007303724996745586, 0.19286593794822693, -0.09350775927305222, -0.25108441710472107, -0.06082191318273544, 0.1632828712463379, -0.0635199323296547) * l0(-1.0, 0.0);
	r += mat4(-0.40565505623817444, -0.3818359076976776, -0.3876974880695343, 0.08209133893251419, 0.5327941179275513, 0.5253898501396179, 0.44238194823265076, -0.26398423314094543, -0.29002436995506287, -0.48126986622810364, -0.5760355591773987, -0.14091746509075165, -0.035409748554229736, -0.09851127117872238, -0.2931136190891266, 0.06250620633363724) * l0(0.0, 0.0);
	r += mat4(-0.4345705211162567, -0.46372950077056885, -0.43846380710601807, -0.010594384744763374, -0.008873912505805492, -0.00030977389542385936, -0.022300636395812035, -0.08032163232564926, -0.09394443780183792, 0.20135165750980377, 0.07399837672710419, 0.14306266605854034, -0.06660766154527664, 0.02570311538875103, -0.03384364768862724, 0.2296752631664276) * l0(1.0, 0.0);
	r += mat4(-0.08520279079675674, 0.050161492079496384, 0.10872519761323929, 0.034519776701927185, -0.1721474975347519, 0.13970957696437836, 0.25200527906417847, 0.9588980674743652, -0.0723499283194542, 0.03995320200920105, 0.05870416760444641, -0.015295039862394333, 0.11367953568696976, 0.15576186776161194, 0.16566304862499237, -0.12646645307540894) * l0(-1.0, 1.0);
	r += mat4(0.22899915277957916, -0.0027769897133111954, -0.022061092779040337, -0.345498263835907, 0.07097270339727402, 0.12377585470676422, -0.09702246636152267, 0.507465660572052, -0.31440770626068115, -0.39715102314949036, -0.4029408097267151, -0.19762594997882843, -0.00971858948469162, -0.08572296798229218, -0.12939433753490448, -0.13763177394866943) * l0(0.0, 1.0);
	r += mat4(0.03865012526512146, -0.04578794538974762, -0.06217322126030922, -0.2649245262145996, 0.0067871613427996635, -0.08063546568155289, -0.039886586368083954, -0.009765266440808773, 0.021290838718414307, -0.009500712156295776, 0.03734620288014412, -0.08313817530870438, 0.015589915215969086, -0.05164483189582825, -0.004160462412983179, -0.08618100732564926) * l0(1.0, 1.0);
	r += mat4(0.040808361023664474, 0.025350403040647507, -0.27103695273399353, -0.0064491829834878445, 0.34782010316848755, 0.141502246260643, 0.15517352521419525, -0.12465071678161621, 0.10991164296865463, 0.08581069111824036, 0.04402555525302887, 0.04749918356537819, -0.2007296234369278, 0.03453138470649719, 0.12422667443752289, 0.050550613552331924) * l1(-1.0, -1.0);
	r += mat4(0.48734015226364136, 0.3974605202674866, 0.3097459673881531, -0.2509775161743164, -0.20850017666816711, -0.044373925775289536, 0.021402593702077866, 0.02085109055042267, -0.24139241874217987, -0.17956042289733887, -0.2519623339176178, 0.3612978756427765, 0.31622248888015747, 0.38445281982421875, 0.4462854266166687, -0.23019132018089294) * l1(0.0, -1.0);
	r += mat4(-0.01301294844597578, 0.09797633439302444, 0.24835851788520813, -0.19576212763786316, -0.28279805183410645, -0.2919933795928955, -0.45800796151161194, -0.03938857465982437, 0.17554190754890442, 0.07933276146650314, 0.18805725872516632, 0.1380252093076706, -0.02283734269440174, -0.5131955146789551, -0.04806113243103027, -0.09316826611757278) * l1(1.0, -1.0);
	r += mat4(0.01933039166033268, -0.03402024507522583, -1.0428175926208496, 0.005870027467608452, 0.23409345746040344, 0.044062912464141846, 0.040760572999715805, 0.4248046576976776, -0.17379648983478546, -0.09197341650724411, -0.7037262320518494, -0.09837651997804642, 0.673828125, 0.6660155653953552, 0.34278208017349243, -0.22656778991222382) * l1(-1.0, 0.0);
	r += mat4(-0.09399305284023285, -0.3134625554084778, 0.33109986782073975, 0.560559093952179, 0.6815291047096252, 0.25878894329071045, 0.16259312629699707, -0.14569540321826935, -0.7697991728782654, -0.6095609664916992, -0.8368340730667114, -0.3210661709308624, 0.5761635303497314, 0.9288265705108643, 0.9148508310317993, 0.021570343524217606) * l1(0.0, 0.0);
	r += mat4(-0.10995618253946304, -0.2939456105232239, -0.3386578857898712, 0.25212424993515015, 0.20634092390537262, 0.08933848887681961, 0.2954385280609131, -0.3665364384651184, -0.1683932989835739, -0.5237243175506592, -0.10727006196975708, 0.017895931378006935, -0.016892163082957268, -0.7558518052101135, -0.09776242077350616, -0.018327875062823296) * l1(1.0, 0.0);
	r += mat4(-0.08789528161287308, -0.034550853073596954, -0.2427181601524353, 0.12970255315303802, -0.22632494568824768, -0.14598418772220612, -0.14619745314121246, 0.34910106658935547, 0.22021310031414032, 0.1873365193605423, 0.2623480260372162, -0.16357412934303284, -0.16353468596935272, -0.07149184495210648, 0.06176944077014923, 0.4965331554412842) * l1(-1.0, 1.0);
	r += mat4(0.028411654755473137, 0.15478594601154327, -0.009494682773947716, -0.03267137333750725, -0.7401919364929199, 0.0008303927606903017, 0.03132681921124458, 0.3202827572822571, -0.9230866432189941, -0.052734844386577606, -0.05649325251579285, -0.5046672821044922, 0.13908261060714722, 0.2016066610813141, 0.15585684776306152, 0.42856040596961975) * l1(0.0, 1.0);
	r += mat4(-0.06274763494729996, -0.050893012434244156, 0.03402833640575409, -0.11973603814840317, -0.14110501110553741, -0.06454741954803467, -0.12413659691810608, 0.30563053488731384, 0.18694819509983063, 0.24267567694187164, 0.2423011064529419, -0.18424250185489655, -0.011561860330402851, -0.0990842878818512, -0.0074917711317539215, 0.058724042028188705) * l1(1.0, 1.0);
	r += vec4(0.0008321527275256813, 0.0006634986493736506, -0.0004527151177171618, -0.004667758475989103);
	return max(r, 0.0);
}

//!DESC CuNNy-1x8-down:0
//!HOOK LUMA
//!BIND conv1_0
//!BIND conv1_1
//!SAVE down_0
//!WIDTH LUMA.w
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#define l0(x, y) conv1_0_texOff(vec2(x, y))
#define l1(x, y) conv1_1_texOff(vec2(x, y))
vec4 hook() {
	vec4 r = vec4(0.0);
	r += mat4(-0.011294093914330006, 0.0140902791172266, 0.001950439065694809, 0.024465788155794144, 0.004856887273490429, -0.08080630004405975, -0.10895753651857376, 0.059699416160583496, 0.07081673294305801, -0.00495221558958292, 0.07106765359640121, -0.03003673069179058, -0.0780775398015976, -0.06641687452793121, -0.0999172255396843, -0.09808239340782166) * l0(-1.0, -1.0);
	r += mat4(0.0018514804542064667, 0.005448583047837019, -0.01401728205382824, -0.00756863784044981, -0.07928065210580826, 0.08863762021064758, -0.029345065355300903, -0.14405055344104767, 0.02505420707166195, -0.09918829798698425, -0.07246291637420654, 0.022347882390022278, -0.024399874731898308, -0.14794905483722687, -0.0006120662437751889, -0.07966030389070511) * l0(0.0, -1.0);
	r += mat4(0.0006359271937981248, -0.01540411077439785, 0.001149293384514749, -0.010937180370092392, 0.08955852687358856, 0.04393218085169792, 0.04455576837062836, 0.05073649808764458, -0.07489518076181412, 0.06289206445217133, 0.008659714832901955, 0.07300129532814026, -0.00104959262534976, 0.004156667739152908, -0.007336792536079884, -0.015366097912192345) * l0(1.0, -1.0);
	r += mat4(0.21337856352329254, 0.1391604244709015, 0.1899261325597763, -0.047736965119838715, -0.17922325432300568, -0.22317001223564148, 0.10717254132032394, -0.20955973863601685, 0.035961851477622986, -0.01076032780110836, -0.04289691895246506, 0.042406998574733734, 0.5622441172599792, 0.440438449382782, 0.45019927620887756, 0.3447267711162567) * l0(-1.0, 0.0);
	r += mat4(0.13698279857635498, 0.08618170768022537, 0.13134765625, 0.2978520691394806, -0.5644530057907104, -0.27830544114112854, -0.3603226840496063, 0.2842286229133606, 0.0071460478939116, 0.03372356295585632, 0.061537109315395355, -0.030117301270365715, -0.235862597823143, -0.11012288928031921, -0.18579255044460297, -0.10224068909883499) * l0(0.0, 0.0);
	r += mat4(-0.036228738725185394, 0.08276403695344925, -0.019351961091160774, 0.011803532019257545, 0.17626938223838806, 0.026165764778852463, 0.21435518562793732, 0.020602243021130562, -0.057296037673950195, 0.004175770562142134, -0.048411883413791656, 0.07451529800891876, 0.02102765627205372, -0.013458139263093472, 0.010119818150997162, -0.040754325687885284) * l0(1.0, 0.0);
	r += mat4(-0.05553283542394638, 0.17571289837360382, -0.15868782997131348, 0.2341526299715042, 0.11465044319629669, 0.04264785721898079, 0.018401725217700005, -0.01706864684820175, 0.02243831939995289, -0.0075340885668993, -0.02263185940682888, -0.024162642657756805, -0.155391663312912, -0.0974167212843895, 0.040776342153549194, 0.08759298920631409) * l0(-1.0, 1.0);
	r += mat4(-0.17706768214702606, -0.5542919039726257, -0.24560746550559998, -0.8300791382789612, 0.15283171832561493, 0.18112796545028687, -0.022876111790537834, -0.06147950887680054, 0.0009128222591243684, 0.015288973227143288, -0.058969054371118546, -0.016427399590611458, 0.027993997558951378, -0.0321047343313694, 0.004938464146107435, -0.08610783517360687) * l0(0.0, 1.0);
	r += mat4(0.037787776440382004, 0.11414481699466705, 0.01166712585836649, 0.149902805685997, -0.015022514387965202, 0.06468923389911652, 0.06713870912790298, 0.18854646384716034, 0.04947802051901817, 0.002225608564913273, 0.037985872477293015, 0.07758894562721252, -0.03331945464015007, -0.02445904165506363, -0.017551777884364128, 0.02374648116528988) * l0(1.0, 1.0);
	r += mat4(0.09401290863752365, 0.013616464100778103, 0.007990107871592045, 0.046676795929670334, -0.1458507478237152, -0.017765579745173454, 0.09714537113904953, 0.0739831030368805, -0.007727405056357384, -0.009963657706975937, -0.034885257482528687, -0.04793359339237213, 0.024019965901970863, 0.01435304619371891, -0.15884196758270264, 0.01531047374010086) * l1(-1.0, -1.0);
	r += mat4(0.3181529641151428, 0.3401467800140381, -0.5136716365814209, -0.36230701208114624, -0.14108209311962128, -0.17732346057891846, 0.24016273021697998, 0.21009530127048492, -0.07665565609931946, -0.03769107535481453, 0.1381872147321701, 0.12646251916885376, 0.46416035294532776, 0.23227594792842865, -0.6053466796875, -0.5117173790931702) * l1(0.0, -1.0);
	r += mat4(-0.020819460973143578, -0.0020720320753753185, 0.05618419870734215, -0.17387913167476654, -0.07936279475688934, -0.04303118214011192, -0.06741181015968323, -0.006029736250638962, 0.009175903163850307, -0.07429433614015579, 0.05236778035759926, 0.04284954071044922, -0.015601595863699913, 0.21202413737773895, 0.08178440481424332, -0.24732233583927155) * l1(1.0, -1.0);
	r += mat4(-0.2963120937347412, 0.18965086340904236, 0.17358416318893433, 0.10716477036476135, 0.6386721134185791, -0.43306928873062134, 0.07135555893182755, -0.31822657585144043, -0.22230081260204315, 0.321297287940979, -0.08083365112543106, 0.192568838596344, -0.020233118906617165, 0.04776570945978165, -0.015529308468103409, -0.05676283314824104) * l1(-1.0, 0.0);
	r += mat4(-0.9589940905570984, -0.8852918148040771, 1.1837272644042969, 0.9028847813606262, -0.7877169251441956, 1.3895487785339355, -0.8378922343254089, 0.22626176476478577, 1.1660460233688354, -0.7871102690696716, 0.27913951873779297, -0.6744163036346436, -0.29832908511161804, -0.34866443276405334, 0.6752876043319702, 0.3525508642196655) * l1(0.0, 0.0);
	r += mat4(0.01921224035322666, -0.4756041169166565, -0.044534556567668915, 0.3913991451263428, 0.37599998712539673, -0.2676308751106262, 0.14208948612213135, -0.15037313103675842, -0.2827940881252289, 0.7050786018371582, -0.24681119620800018, 0.18207107484340668, 0.08091042935848236, 0.04270428046584129, -0.07258972525596619, 0.30457478761672974) * l1(1.0, 0.0);
	r += mat4(0.08445528149604797, -0.1735924929380417, 0.028483016416430473, 0.018361898139119148, -0.01745370216667652, -0.0599433109164238, 0.2403445541858673, -0.3994145095348358, -0.013601448386907578, 0.048313625156879425, -0.15615877509117126, 0.20878496766090393, 0.014604892581701279, -0.020200567319989204, 0.012491157278418541, -0.0018637620378285646) * l1(-1.0, 1.0);
	r += mat4(0.48860418796539307, 0.48769843578338623, -0.4699067175388336, -0.3175598382949829, -0.22887739539146423, 0.04836852476000786, -0.6437064409255981, 0.8395508527755737, 0.03001115843653679, -0.18327675759792328, 0.7043756246566772, -0.5605607628822327, 0.05770488455891609, 0.08863203227519989, -0.038951579481363297, 0.02240506000816822) * l1(0.0, 1.0);
	r += mat4(-0.09970087558031082, 0.2202463001012802, 0.06231289356946945, -0.060197506099939346, 0.036555215716362, 0.005523681640625, 0.24366432428359985, -0.207241490483284, -0.04291030392050743, -0.05682709068059921, -0.20700719952583313, 0.2763722836971283, 0.002154299523681402, 0.008546383120119572, 0.034999214112758636, -0.00680583855137229) * l1(1.0, 1.0);
	r += vec4(1.9812020468634728e-08, 2.4729411407520274e-08, -5.126726154713879e-09, 6.979233191373169e-09);
	return tanh(r);
}

//!DESC CuNNy-1x8-shuffle
//!HOOK LUMA
//!BIND down_0
//!BIND easu
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 1
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
vec4 hook() {
	vec4 r = vec4(0.0);
	vec2 f = fract(down_0_pos * down_0_size);
	ivec2 i = ivec2(f * vec2(2.0));
	r.r = down_0_tex((vec2(0.5) - f) * down_0_pt + down_0_pos)[2*i.y + i.x];
	r.r += easu_tex(easu_pos).r;
	r.a = 1.0;
	return clamp(r, 0.0, 1.0);
}
