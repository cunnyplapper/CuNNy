// CuNNy 1x8 RCAS
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

// FSR mpv | modified
// Copyright (c) 2021 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// FidelityFX FSR v1.0.2 by AMD
// ported to mpv by agyild

//!DESC CuNNy-EASU
//!HOOK LUMA
//!BIND LUMA
//!SAVE easu
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
//!COMPONENTS 1

float APrxLoRcpF1(float a) {
	return uintBitsToFloat(uint(0x7ef07ebb) - floatBitsToUint(a));
}

float APrxLoRsqF1(float a) {
	return uintBitsToFloat(uint(0x5f347d74) - (floatBitsToUint(a) >> uint(1)));
}

float AMin3F1(float x, float y, float z) {
	return min(x, min(y, z));
}

float AMax3F1(float x, float y, float z) {
	return max(x, max(y, z));
}

void tap(inout float aC, inout float aW, vec2 off, vec2 dir, vec2 len,
         float lob, float clp, float c){
	vec2 v;
	v.x = (off.x * ( dir.x)) + (off.y * dir.y);
	v.y = (off.x * (-dir.y)) + (off.y * dir.x);
	v *= len;
	float d2 = v.x * v.x + v.y * v.y;
	d2 = min(d2, clp);
	float wB = float(2.0 / 5.0) * d2 + -1.0;
	float wA = lob * d2 + -1.0;
	wB *= wB;
	wA *= wA;
	wB = float(25.0 / 16.0) * wB + float(-(25.0 / 16.0 - 1.0));
	float w = wB * wA;
	aC += c * w;
	aW += w;
}

void set(inout vec2 dir, inout float len, vec2 pp, bool biS, bool biT,
         bool biU, bool biV, float lA, float lB, float lC, float lD, float lE){
	float w = 0.0;
	if (biS)
		w = (1.0 - pp.x) * (1.0 - pp.y);
	if (biT)
		w =        pp.x  * (1.0 - pp.y);
	if (biU)
		w = (1.0 - pp.x) *        pp.y;
	if (biV)
		w =        pp.x  *        pp.y;
	float dc = lD - lC;
	float cb = lC - lB;
	float lenX = max(abs(dc), abs(cb));
	lenX = APrxLoRcpF1(lenX);
	float dirX = lD - lB;
	lenX = clamp(abs(dirX) * lenX, 0.0, 1.0);
	lenX *= lenX;
	float ec = lE - lC;
	float ca = lC - lA;
	float lenY = max(abs(ec), abs(ca));
	lenY = APrxLoRcpF1(lenY);
	float dirY = lE - lA;
	lenY = clamp(abs(dirY) * lenY, 0.0, 1.0);
	lenY *= lenY;
	dir += vec2(dirX, dirY) * w;
	len += dot(vec2(w), vec2(lenX, lenY));
}

vec4 hook() {
	vec4 pix = vec4(0.0, 0.0, 0.0, 1.0);
	vec2 pp = LUMA_pos * LUMA_size - vec2(0.5);
	vec2 fp = floor(pp);
	pp -= fp;
#if (defined(LUMA_gather) && (__VERSION__ >= 400 || (GL_ES && __VERSION__ >= 310)))
	vec4 bczzL = LUMA_gather(vec2((fp + vec2(1.0, -1.0)) * LUMA_pt), 0);
	vec4 ijfeL = LUMA_gather(vec2((fp + vec2(0.0,  1.0)) * LUMA_pt), 0);
	vec4 klhgL = LUMA_gather(vec2((fp + vec2(2.0,  1.0)) * LUMA_pt), 0);
	vec4 zzonL = LUMA_gather(vec2((fp + vec2(1.0,  3.0)) * LUMA_pt), 0);
#else
	float b = LUMA_tex(vec2((fp + vec2(0.5, -0.5)) * LUMA_pt)).r;
	float c = LUMA_tex(vec2((fp + vec2(1.5, -0.5)) * LUMA_pt)).r;
	float e = LUMA_tex(vec2((fp + vec2(-0.5, 0.5)) * LUMA_pt)).r;
	float f = LUMA_tex(vec2((fp + vec2( 0.5, 0.5)) * LUMA_pt)).r;
	float g = LUMA_tex(vec2((fp + vec2( 1.5, 0.5)) * LUMA_pt)).r;
	float h = LUMA_tex(vec2((fp + vec2( 2.5, 0.5)) * LUMA_pt)).r;
	float i = LUMA_tex(vec2((fp + vec2(-0.5, 1.5)) * LUMA_pt)).r;
	float j = LUMA_tex(vec2((fp + vec2( 0.5, 1.5)) * LUMA_pt)).r;
	float k = LUMA_tex(vec2((fp + vec2( 1.5, 1.5)) * LUMA_pt)).r;
	float l = LUMA_tex(vec2((fp + vec2( 2.5, 1.5)) * LUMA_pt)).r;
	float n = LUMA_tex(vec2((fp + vec2(0.5, 2.5) ) * LUMA_pt)).r;
	float o = LUMA_tex(vec2((fp + vec2(1.5, 2.5) ) * LUMA_pt)).r;
	vec4 bczzL = vec4(b, c, 0.0, 0.0);
	vec4 ijfeL = vec4(i, j, f, e);
	vec4 klhgL = vec4(k, l, h, g);
	vec4 zzonL = vec4(0.0, 0.0, o, n);
#endif
	float bL = bczzL.x;
	float cL = bczzL.y;
	float iL = ijfeL.x;
	float jL = ijfeL.y;
	float fL = ijfeL.z;
	float eL = ijfeL.w;
	float kL = klhgL.x;
	float lL = klhgL.y;
	float hL = klhgL.z;
	float gL = klhgL.w;
	float oL = zzonL.z;
	float nL = zzonL.w;
	vec2 dir = vec2(0.0);
	float len = 0.0;
	set(dir, len, pp, true, false, false, false, bL, eL, fL, gL, jL);
	set(dir, len, pp, false, true, false, false, cL, fL, gL, hL, kL);
	set(dir, len, pp, false, false, true, false, fL, iL, jL, kL, nL);
	set(dir, len, pp, false, false, false, true, gL, jL, kL, lL, oL);
	vec2 dir2 = dir * dir;
	float dirR = dir2.x + dir2.y;
	bool zro = dirR < float(1.0 / 32768.0);
	dirR = APrxLoRsqF1(dirR);
	dirR = zro ? 1.0 : dirR;
	dir.x = zro ? 1.0 : dir.x;
	dir *= vec2(dirR);
	len = len * 0.5;
	len *= len;
	float stretch = (dir.x * dir.x + dir.y * dir.y) * APrxLoRcpF1(max(abs(dir.x), abs(dir.y)));
	vec2 len2 = vec2(1.0 + (stretch - 1.0) * len, 1.0 + -0.5 * len);
	float lob = 0.5 + float((1.0 / 4.0 - 0.04) - 0.5) * len;
	float clp = APrxLoRcpF1(lob);
	float aC = 0.0;
	float aW = 0.0;
	tap(aC, aW, vec2( 0.0,-1.0) - pp, dir, len2, lob, clp, bL);
	tap(aC, aW, vec2( 1.0,-1.0) - pp, dir, len2, lob, clp, cL);
	tap(aC, aW, vec2(-1.0, 1.0) - pp, dir, len2, lob, clp, iL);
	tap(aC, aW, vec2( 0.0, 1.0) - pp, dir, len2, lob, clp, jL);
	tap(aC, aW, vec2( 0.0, 0.0) - pp, dir, len2, lob, clp, fL);
	tap(aC, aW, vec2(-1.0, 0.0) - pp, dir, len2, lob, clp, eL);
	tap(aC, aW, vec2( 1.0, 1.0) - pp, dir, len2, lob, clp, kL);
	tap(aC, aW, vec2( 2.0, 1.0) - pp, dir, len2, lob, clp, lL);
	tap(aC, aW, vec2( 2.0, 0.0) - pp, dir, len2, lob, clp, hL);
	tap(aC, aW, vec2( 1.0, 0.0) - pp, dir, len2, lob, clp, gL);
	tap(aC, aW, vec2( 1.0, 2.0) - pp, dir, len2, lob, clp, oL);
	tap(aC, aW, vec2( 0.0, 2.0) - pp, dir, len2, lob, clp, nL);
	pix.r = aC / aW;
	float min1 = min(AMin3F1(fL, gL, jL), kL);
	float max1 = max(AMax3F1(fL, gL, jL), kL);
	pix.r = clamp(pix.r, min1, max1);
	pix.r = clamp(pix.r, 0.0, 1.0);
	return pix;
}

//!DESC CuNNy-RCAS
//!HOOK LUMA
//!BIND easu
//!SAVE rcas
//!WIDTH easu.w
//!HEIGHT easu.h
//!COMPONENTS 1

// CuNNy: do not change unless changed during training as well
#define SHARPNESS 2.0
#define FSR_RCAS_LIMIT (0.25 - (1.0 / 16.0))

float APrxMedRcpF1(float a) {
	float b = uintBitsToFloat(uint(0x7ef19fff) - floatBitsToUint(a));
	return b * (-b * a + 2.0);
}

float AMax3F1(float x, float y, float z) {
	return max(x, max(y, z)); 
}


float AMin3F1(float x, float y, float z) {
	return min(x, min(y, z));
}

vec4 hook() {
#if (defined(easu_gather) && (__VERSION__ >= 400 || (GL_ES && __VERSION__ >= 310)))
	vec3 bde = easu_gather(easu_pos + easu_pt * vec2(-0.5), 0).xyz;
	float b = bde.z;
	float d = bde.x;
	float e = bde.y;
	vec2 fh = easu_gather(easu_pos + easu_pt * vec2(0.5), 0).zx;
	float f = fh.x;
	float h = fh.y;
#else
	float b = easu_texOff(vec2( 0.0, -1.0)).r;
	float d = easu_texOff(vec2(-1.0,  0.0)).r;
	float e = easu_tex(easu_pos).r;
	float f = easu_texOff(vec2(1.0, 0.0)).r;
	float h = easu_texOff(vec2(0.0, 1.0)).r;
#endif
	float mn1L = min(AMin3F1(b, d, f), h);
	float mx1L = max(AMax3F1(b, d, f), h);
	vec2 peakC = vec2(1.0, -1.0 * 4.0);
	float hitMinL = min(mn1L, e) / (4.0 * mx1L);
	float hitMaxL = (peakC.x - max(mx1L, e)) / (4.0 * mn1L + peakC.y);
	float lobeL = max(-hitMinL, hitMaxL);
	float lobe = max(float(-FSR_RCAS_LIMIT), min(lobeL, 0.0)) * exp2(-clamp(float(SHARPNESS), 0.0, 2.0));
	float nz = 0.25 * b + 0.25 * d + 0.25 * f + 0.25 * h - e;
	nz = clamp(abs(nz) * APrxMedRcpF1(AMax3F1(AMax3F1(b, d, e), f, h) - AMin3F1(AMin3F1(b, d, e), f, h)), 0.0, 1.0);
	nz = -0.5 * nz + 1.0;
	lobe *= nz;
	float rcpL = APrxMedRcpF1(4.0 * lobe + 1.0);
	vec4 pix = vec4(0.0, 0.0, 0.0, 1.0);
	pix.r = float((lobe * b + lobe * d + lobe * h + lobe * f + e) * rcpL);
	return pix;
}

//!DESC CuNNy-1x8-up:0
//!HOOK LUMA
//!BIND LUMA
//!SAVE up_0
//!WIDTH LUMA.w
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#define l0(x, y) LUMA_texOff(vec2(x, y)).r
vec4 hook() {
	vec4 r = vec4(0.0);
	r += vec4(0.0037333478685468435, -0.016099411994218826, -0.061858512461185455, 0.013425588607788086) * l0(-1.0, -1.0);
	r += vec4(-0.05969247967004776, -0.23140479624271393, -0.4287109375, 0.016052260994911194) * l0(0.0, -1.0);
	r += vec4(0.03538593277335167, -0.06282006204128265, 0.03459979221224785, -0.014244494028389454) * l0(1.0, -1.0);
	r += vec4(0.0142716309055686, -0.09414288401603699, 0.10018034279346466, -0.3896484076976776) * l0(-1.0, 0.0);
	r += vec4(0.3004635274410248, 0.509730875492096, 0.2577615976333618, -0.003686780808493495) * l0(0.0, 0.0);
	r += vec4(-0.05252313241362572, -0.014168973080813885, 0.051665619015693665, 0.002223796211183071) * l0(1.0, 0.0);
	r += vec4(-0.38547906279563904, -0.06977711617946625, 0.006278760265558958, 0.37271615862846375) * l0(-1.0, 1.0);
	r += vec4(0.12066230922937393, -0.0078525859862566, 0.018615759909152985, 0.000965612125582993) * l0(0.0, 1.0);
	r += vec4(0.014203145168721676, 0.012586543336510658, 0.005658057983964682, 0.002798863220959902) * l0(1.0, 1.0);
	r += vec4(0.004334204830229282, 0.010775217786431313, 0.019455181434750557, 0.004255175124853849);
	return max(r, 0.0);
}

//!DESC CuNNy-1x8-up:1
//!HOOK LUMA
//!BIND LUMA
//!SAVE up_1
//!WIDTH LUMA.w
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#define l0(x, y) LUMA_texOff(vec2(x, y)).r
vec4 hook() {
	vec4 r = vec4(0.0);
	r += vec4(-0.023391583934426308, 0.02008751779794693, -0.036889173090457916, -0.024253742769360542) * l0(-1.0, -1.0);
	r += vec4(0.016295872628688812, -0.018123505637049675, 0.159302219748497, 0.015341720543801785) * l0(0.0, -1.0);
	r += vec4(-0.10304860770702362, 0.02044108882546425, -0.04056406393647194, -0.022761572152376175) * l0(1.0, -1.0);
	r += vec4(0.09615028649568558, -0.03444330021739006, 0.17919930815696716, 0.09918393939733505) * l0(-1.0, 0.0);
	r += vec4(0.4892578125, 0.42245158553123474, 0.013429432176053524, 0.22704370319843292) * l0(0.0, 0.0);
	r += vec4(-0.14710716903209686, -0.42871010303497314, -0.34073469042778015, 0.09887682646512985) * l0(1.0, 0.0);
	r += vec4(-0.18697890639305115, 0.00798128079622984, 0.11059562116861343, 0.15575341880321503) * l0(-1.0, 1.0);
	r += vec4(-0.09895426779985428, -0.010289660654962063, 0.09815383702516556, -0.3837197422981262) * l0(0.0, 1.0);
	r += vec4(-0.006235912442207336, 0.017665833234786987, -0.15446634590625763, 0.03977946937084198) * l0(1.0, 1.0);
	r += vec4(-0.006754984147846699, 0.005993143189698458, 0.00505908764898777, 0.008572067134082317);
	return max(r, 0.0);
}

//!DESC CuNNy-1x8-conv1:0
//!HOOK LUMA
//!BIND up_0
//!BIND up_1
//!SAVE conv1_0
//!WIDTH LUMA.w
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#define l0(x, y) up_0_texOff(vec2(x, y))
#define l1(x, y) up_1_texOff(vec2(x, y))
vec4 hook() {
	vec4 r = vec4(0.0);
	r += mat4(-0.0026727744843810797, -0.004501227755099535, 0.21384482085704803, -0.2918972373008728, -0.04936770349740982, 0.08967390656471252, 0.01725945621728897, 0.0260927714407444, 0.07153279334306717, -0.10815651714801788, -0.003274430288001895, -0.042413339018821716, 0.015716740861535072, -0.05854049697518349, 0.03845898434519768, 0.08959232270717621) * l0(-1.0, -1.0);
	r += mat4(-0.25474461913108826, -0.30215737223625183, -0.003327094716951251, -0.18493126332759857, -0.0750325471162796, 0.5449219346046448, -0.17519430816173553, -0.07886523008346558, 0.0014298544265329838, -0.13051174581050873, 0.05702825263142586, -0.0128638269379735, -0.21274974942207336, -0.31933510303497314, -0.17280331254005432, -0.5013688802719116) * l0(0.0, -1.0);
	r += mat4(0.09104050695896149, -0.2348780483007431, -0.5189172029495239, 0.18767055869102478, -0.14932847023010254, -0.296563059091568, 0.22114603221416473, -0.17871247231960297, 0.0856248065829277, -0.13268466293811798, -0.04309024289250374, 0.09055418521165848, 0.5931645631790161, 0.6538552641868591, 0.07807140052318573, -0.1880699098110199) * l0(1.0, -1.0);
	r += mat4(-0.07226366549730301, 0.12116558849811554, 0.3071746826171875, -0.14795416593551636, -0.07966436445713043, 0.008568861521780491, -0.31839680671691895, 0.5996097326278687, 0.3095706105232239, 0.23318049311637878, 0.3935569226741791, -0.01677880808711052, -0.12062404304742813, -0.017202045768499374, 0.3610053062438965, -0.014287933707237244) * l0(-1.0, 0.0);
	r += mat4(0.029816292226314545, 0.03362511098384857, -0.15757574141025543, -0.017496930435299873, 0.08349653333425522, -0.002414434216916561, 0.08465798944234848, -0.22018441557884216, -0.20683608949184418, 0.06188773363828659, -0.2133631855249405, -0.3028225004673004, -0.5741115212440491, 0.026437383145093918, 0.33174726366996765, -0.5251064300537109) * l0(0.0, 0.0);
	r += mat4(0.4174072742462158, 0.3349608778953552, -0.40855321288108826, 0.36915284395217896, 0.02181331254541874, -0.07552573829889297, -0.03977791965007782, -0.042641110718250275, 0.09199286997318268, -0.3677377998828888, 0.07234398275613785, 0.15087862312793732, 0.372864693403244, -0.0028125818353146315, 0.2647078037261963, 0.6658780574798584) * l0(1.0, 0.0);
	r += mat4(-0.12419009208679199, 0.07353322207927704, 0.4130343198776245, -0.2871110141277313, 0.028849173337221146, -0.07524650543928146, -0.12681493163108826, 0.1779123842716217, 0.5136716961860657, 0.06728432327508926, -0.2749609053134918, 0.3271481990814209, 5.47715462744236e-05, 0.00828462652862072, 0.02079373225569725, 0.00859303493052721) * l0(-1.0, 1.0);
	r += mat4(0.1274065524339676, -0.01459848415106535, -0.0015994985587894917, 0.0840274915099144, -0.30728012323379517, 0.16456064581871033, -0.03033454902470112, -0.3788091838359833, -0.8362990021705627, 0.06188014894723892, -0.30793771147727966, 0.03554531931877136, -0.15471839904785156, -0.013115603476762772, 0.2547624707221985, -0.10736331343650818) * l0(0.0, 1.0);
	r += mat4(0.01854374259710312, 0.028659220784902573, -0.1093345433473587, 0.019741399213671684, 0.10476990044116974, 0.06228557601571083, -0.15139922499656677, -0.0465971864759922, -0.16543704271316528, -0.1694696992635727, 0.1458851397037506, -0.063722163438797, 0.100576251745224, 0.09121789783239365, -0.4485340416431427, -0.039174970239400864) * l0(1.0, 1.0);
	r += mat4(0.006841476075351238, -0.19933344423770905, -0.38353386521339417, 0.21435672044754028, -0.14525701105594635, -0.5303040146827698, 0.467729389667511, -0.2024173140525818, 0.07243112474679947, 0.008233648724853992, -0.09611958265304565, 0.05114297568798065, 0.07446407526731491, 0.026723846793174744, 0.3739628791809082, -0.021992603316903114) * l1(-1.0, -1.0);
	r += mat4(-0.05876893550157547, 0.42042413353919983, 0.16237422823905945, 0.07845129072666168, 0.2911413311958313, 0.34012606739997864, -0.25890493392944336, 0.32899361848831177, 0.0012071633245795965, 0.25172844529151917, -0.18586888909339905, -0.143334299325943, -0.02324453555047512, 0.24469855427742004, -0.13549183309078217, 0.32632842659950256) * l1(0.0, -1.0);
	r += mat4(0.08564100414514542, 0.1556849479675293, -0.20053823292255402, 0.08687092363834381, 0.09111834317445755, 0.22439689934253693, -0.13106167316436768, 0.1264648139476776, -0.005809968337416649, -0.15869225561618805, 0.07211370021104813, -0.14649048447608948, 0.2598680853843689, 0.4863978624343872, -0.02337825857102871, -0.02049827203154564) * l1(1.0, -1.0);
	r += mat4(0.05357101559638977, -0.13264712691307068, -0.4345705211162567, 0.06731496751308441, -0.22577083110809326, -0.01669069565832615, 0.28994011878967285, 0.10842353850603104, -0.16064737737178802, -0.08026895672082901, -0.37598326802253723, -0.10016606003046036, -0.13800546526908875, 0.011369546875357628, 0.23326624929904938, -0.06762006878852844) * l1(-1.0, 0.0);
	r += mat4(-0.21435992419719696, -0.1115698292851448, 0.3700844943523407, -0.3435942232608795, 0.7764461636543274, -0.07216808944940567, -0.31347668170928955, 0.4892542362213135, -0.4641644060611725, -0.22415009140968323, 0.3832073211669922, -0.3603231906890869, -0.2035740315914154, -0.2067563682794571, -0.3837769329547882, -0.19358575344085693) * l1(0.0, 0.0);
	r += mat4(-0.11000203341245651, 0.02643798291683197, 0.28175321221351624, -0.001334024709649384, 0.11205828189849854, 0.11840488761663437, -0.2588765621185303, 0.0035820635966956615, -0.05029662698507309, -0.02779071405529976, 0.16526056826114655, 0.05422990396618843, 0.16845612227916718, 0.18113867938518524, 0.08277389407157898, 0.06594289094209671) * l1(1.0, 0.0);
	r += mat4(0.1928706020116806, -0.006080571096390486, -0.6386713981628418, 0.2796817123889923, -0.11948390305042267, -0.015461382456123829, 0.852824866771698, -0.0845629945397377, 0.09354881942272186, 0.010957690887153149, -0.2485334724187851, 0.056742746382951736, -0.09608417004346848, 0.09605300426483154, 0.00019559194333851337, -0.1534719318151474) * l1(-1.0, 1.0);
	r += mat4(-0.05765813961625099, -0.1512182503938675, 0.1173628717660904, 0.07348504662513733, -0.07811099290847778, -0.12651550769805908, -0.31152504682540894, 0.14098554849624634, 0.10054177045822144, 0.034466374665498734, -0.04290084168314934, 0.05151285231113434, 0.05918697640299797, 0.06834200024604797, -0.03335632383823395, -0.015426850877702236) * l1(0.0, 1.0);
	r += mat4(-0.15771234035491943, -0.09171342104673386, 0.27190878987312317, -0.051166683435440063, 0.1411527395248413, 0.05041050538420677, -0.30371055006980896, 0.13193346560001373, -0.020916534587740898, 0.032966356724500656, 0.03978132829070091, -0.08715785294771194, -0.010168049484491348, 0.06894458085298538, -0.09133750200271606, 0.005108571145683527) * l1(1.0, 1.0);
	r += vec4(-0.008941172622144222, -0.22259415686130524, -0.005923151038587093, -0.003430327633395791);
	return max(r, 0.0);
}

//!DESC CuNNy-1x8-conv1:1
//!HOOK LUMA
//!BIND up_0
//!BIND up_1
//!SAVE conv1_1
//!WIDTH LUMA.w
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#define l0(x, y) up_0_texOff(vec2(x, y))
#define l1(x, y) up_1_texOff(vec2(x, y))
vec4 hook() {
	vec4 r = vec4(0.0);
	r += mat4(-0.03229335695505142, -0.2548828125, 0.14111414551734924, 0.013129905797541142, 0.13737130165100098, 0.18996186554431915, -0.05623684823513031, -0.214227557182312, -0.13332398235797882, -0.08569678664207458, 0.04236634075641632, 0.015854252502322197, 0.11635401099920273, 0.020805561915040016, 0.0031295556109398603, -0.07259020209312439) * l0(-1.0, -1.0);
	r += mat4(-0.3449363112449646, 0.28112468123435974, -0.10865779221057892, 0.041983604431152344, 0.7597663402557373, -0.6068573594093323, 0.10651344805955887, -0.25354477763175964, -0.3100994825363159, 0.02042287215590477, -0.012671336531639099, -0.02816220559179783, 0.27564316987991333, 0.17236916720867157, 0.13717208802700043, -0.08021853119134903) * l0(0.0, -1.0);
	r += mat4(-0.44154542684555054, 0.023252392187714577, 0.054485537111759186, 0.0007238707039505243, 0.017765261232852936, -0.19414933025836945, -0.0031847194768488407, -0.15733622014522552, -0.25098761916160583, 0.09229031950235367, -0.07156404107809067, -0.02972353808581829, -16.864776611328125, -0.10282807797193527, -0.2211020290851593, -0.011675545945763588) * l0(1.0, -1.0);
	r += mat4(0.18067504465579987, 0.19499194622039795, 0.28803884983062744, 0.03173472732305527, -0.15460069477558136, -0.031049711629748344, -0.36789190769195557, -0.1408977508544922, -0.2436569333076477, 0.11315856128931046, 0.178708016872406, -0.029238270595669746, -0.071046382188797, -0.05261211469769478, 0.2073938101530075, -0.047223906964063644) * l0(-1.0, 0.0);
	r += mat4(0.4087488055229187, 0.46060311794281006, 0.0069869402796030045, -0.0037284819409251213, -1.0959359407424927, 0.08782076835632324, -0.05188211798667908, -0.1930350363254547, -0.37323078513145447, 0.015619027428328991, 0.12646616995334625, -0.1220354288816452, 0.39951252937316895, 0.21357639133930206, 1.0429688692092896, 0.009892922826111317) * l0(0.0, 0.0);
	r += mat4(0.13682109117507935, 0.15380994975566864, -0.20873942971229553, 0.02153703384101391, 0.10419972985982895, 0.568359375, 0.01479452196508646, -0.18862640857696533, -0.13292892277240753, -0.20253793895244598, -0.0619850791990757, -0.014046315103769302, 0.4421771168708801, 0.11013583838939667, -0.3387953042984009, -0.01295938529074192) * l0(1.0, 0.0);
	r += mat4(-0.12744347751140594, -0.09291651844978333, 0.1507771909236908, 0.04024041071534157, -0.07489758729934692, 0.009519019164144993, -0.15602049231529236, -0.1702030748128891, -0.13489866256713867, -0.22219310700893402, -0.8189428448677063, -0.026732705533504486, 0.009178685955703259, -0.12247171998023987, 0.013570333831012249, -0.007592389360070229) * l0(-1.0, 1.0);
	r += mat4(-0.11004638671875, -0.35460370779037476, 0.009771442040801048, -0.03922275826334953, -0.16417963802814484, 0.19218599796295166, 0.4983670711517334, -0.12166532874107361, -0.20528605580329895, -0.3076733350753784, 0.16085253655910492, -0.015246998518705368, 0.015503805130720139, -0.053748149424791336, 0.08534935861825943, 0.030539054423570633) * l0(0.0, 1.0);
	r += mat4(-0.07314648479223251, -0.4228190779685974, 0.039240822196006775, 0.014795909635722637, 0.050088342279195786, 0.10959086567163467, -0.006187494844198227, -0.06707468628883362, 0.06808735430240631, 0.07720528542995453, -0.14778561890125275, -0.016721859574317932, -0.05526506528258324, -1.0928384065628052, -0.11108530312776566, -0.005088087636977434) * l0(1.0, 1.0);
	r += mat4(0.06586150079965591, -0.0318891778588295, -0.1635758876800537, -0.03134264051914215, -0.19286808371543884, 0.20140190422534943, 0.4797581434249878, -0.023068493232131004, 0.012529277242720127, 0.023318620398640633, -0.16785205900669098, -0.0368511825799942, 0.14791138470172882, -0.08710354566574097, 0.00553257018327713, -0.07137290388345718) * l1(-1.0, -1.0);
	r += mat4(0.051490429788827896, 0.06359776109457016, 0.12552763521671295, -0.08079910278320312, -0.4240448474884033, 0.3776485323905945, -0.19433164596557617, 0.016972078010439873, -0.3986540138721466, -0.02981903962790966, -0.11525528132915497, 0.012296784669160843, 0.17478950321674347, 0.3220982551574707, -0.05539041385054588, -0.03227079659700394) * l1(0.0, -1.0);
	r += mat4(0.08180579543113708, 0.06112362816929817, 0.08227746933698654, -0.045384641736745834, -0.11503753811120987, 0.08661544322967529, -0.2290007621049881, 0.009382106363773346, 0.06781931966543198, -0.03540348634123802, 0.034337349236011505, -0.007292453199625015, -0.09220444411039352, -0.06924744695425034, -0.0726458951830864, -0.051032714545726776) * l1(1.0, -1.0);
	r += mat4(0.049672458320856094, 0.024214299395680428, -0.2309495061635971, -0.024467164650559425, 0.1705600917339325, -0.2070433795452118, 0.6576665043830872, -0.041431985795497894, -0.16619063913822174, -0.2083432674407959, -0.18026933073997498, 0.035241637378931046, -0.0701177790760994, -0.013335337862372398, 0.1797439455986023, -0.028899013996124268) * l1(-1.0, 0.0);
	r += mat4(-0.39402198791503906, -0.9149200916290283, -0.2808118760585785, 0.03506030887365341, 0.46755942702293396, 0.38976213335990906, -0.8174889087677002, -0.003243724349886179, -0.6127806305885315, -0.7636688947677612, 0.3966461420059204, -0.04071026295423508, -0.11138855665922165, -0.2974463999271393, 0.08422824740409851, 0.010102520696818829) * l1(0.0, 0.0);
	r += mat4(-0.10594239085912704, -0.46388235688209534, 0.35013219714164734, -0.05026591569185257, 0.06832332909107208, 0.1675175130367279, -0.09795442968606949, -0.024609966203570366, -0.050927598029375076, -0.05328613147139549, -0.03080601617693901, 0.023864272981882095, 0.0008458775701001287, -0.12350587546825409, -0.06982880085706711, 0.06656405329704285) * l1(1.0, 0.0);
	r += mat4(0.2896694242954254, 0.17334960401058197, -0.2587960958480835, -0.011038568802177906, -0.04601016640663147, -0.11941191554069519, 0.3067006468772888, -0.052231695502996445, 0.18094678223133087, 0.10009535402059555, -0.14458993077278137, -0.021484671160578728, 0.09234771877527237, 0.12665650248527527, 0.06763523072004318, 0.08009521663188934) * l1(-1.0, 1.0);
	r += mat4(-0.3132268190383911, 0.43646690249443054, -0.18334916234016418, -0.026293879374861717, 0.45603829622268677, -0.3505881726741791, -0.30170467495918274, -0.03375743702054024, 0.09850320219993591, 0.47740185260772705, -0.15801411867141724, -0.007965718396008015, -0.15174363553524017, 0.2239445000886917, -0.0603901706635952, 0.039175424724817276) * l1(0.0, 1.0);
	r += mat4(-0.299808531999588, -0.22803151607513428, 0.18090283870697021, 0.015860440209507942, 0.19761596620082855, -0.07571714371442795, -0.17529445886611938, -0.00480066379532218, -0.05436420813202858, 0.13330049812793732, -0.0003877572889905423, -0.002351257484406233, -0.12924686074256897, -0.10972590744495392, -0.09002954512834549, 0.033355820924043655) * l1(1.0, 1.0);
	r += vec4(0.004616782069206238, -0.01168714091181755, 0.0022219561506062746, -0.050503719598054886);
	return max(r, 0.0);
}

//!DESC CuNNy-1x8-down
//!HOOK LUMA
//!BIND conv1_0
//!BIND conv1_1
//!SAVE down
//!WIDTH LUMA.w
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#define l0(x, y) conv1_0_texOff(vec2(x, y))
#define l1(x, y) conv1_1_texOff(vec2(x, y))
vec4 hook() {
	vec4 r = vec4(0.0);
	r += mat4(0.031195012852549553, -0.03577248007059097, 0.04869645833969116, 0.0010843349155038595, 0.11995818465948105, -0.009752104058861732, -0.0005035475478507578, -0.023699264973402023, -0.08227583020925522, 0.01435479149222374, 0.00021043249580543488, 0.019279979169368744, -0.05291610211133957, 0.05825573578476906, -0.04288389906287193, -0.02262943796813488) * l0(-1.0, -1.0);
	r += mat4(-0.17861349880695343, 0.0819677785038948, -0.11059585958719254, 0.006515511777251959, -0.17226897180080414, -0.010980271734297276, 0.05387132987380028, 0.09829685091972351, 0.5543262958526611, -0.19792048633098602, 0.20382122695446014, -0.06633906066417694, 0.19534118473529816, -0.15089373290538788, 0.10945780575275421, 0.006404431536793709) * l0(0.0, -1.0);
	r += mat4(0.04214086756110191, -0.06518472731113434, 0.004079859238117933, -0.003397942055016756, -0.05710369721055031, -0.01247674971818924, -0.01551097258925438, 0.005947727244347334, -0.6393339037895203, 0.5886905193328857, -0.08394305408000946, 0.20334647595882416, -0.028658168390393257, 0.11897272616624832, -0.045287735760211945, -0.03361865505576134) * l0(1.0, -1.0);
	r += mat4(0.23694615066051483, -0.13758490979671478, 0.1928844302892685, -0.1397462636232376, 0.2291165292263031, -0.05893523618578911, 0.04454702511429787, -9.443838280276395e-07, -0.01903281919658184, 0.020522862672805786, -0.08315994590520859, 0.023353280499577522, -0.19072094559669495, 0.15785539150238037, -0.11837051808834076, 0.22119149565696716) * l0(-1.0, 0.0);
	r += mat4(0.14697358012199402, 0.736492395401001, -0.0016347032506018877, 0.6210144758224487, 0.38047370314598083, 0.48416268825531006, -0.3368658125400543, -0.1959422528743744, 0.3221665024757385, -0.04941825196146965, 0.701171875, -0.18144848942756653, -0.11452239006757736, -0.7561184763908386, -0.06896626949310303, -0.7247986793518066) * l0(0.0, 0.0);
	r += mat4(0.013446485623717308, -0.06665973365306854, 0.010464493185281754, -0.12134867161512375, -0.005411611869931221, 0.11744361370801926, -0.011261199600994587, -0.035364147275686264, -0.08172286301851273, 0.1035166010260582, -0.6933621764183044, 0.43109527230262756, -0.10147663205862045, 0.04847252741456032, -0.04113804176449776, 0.13720716536045074) * l0(1.0, 0.0);
	r += mat4(0.03396384045481682, 0.042853713035583496, 0.034652918577194214, -0.05297568440437317, 0.3932119905948639, -0.041583575308322906, 0.5349109172821045, -0.11142199486494064, -8.535207598470151e-06, -0.0037837123963981867, -0.007677663117647171, 0.0048140669241547585, -0.012171355076134205, -0.02095152996480465, -0.052080314606428146, 0.06860874593257904) * l0(-1.0, 1.0);
	r += mat4(-0.15123715996742249, -0.03718234971165657, -0.1459980458021164, 0.08326325565576553, 0.08397702872753143, 0.27616119384765625, 0.6020911931991577, 0.8850030303001404, 0.019463762640953064, -0.004784812219440937, -0.05912579596042633, -0.02061600796878338, 0.08272560685873032, 0.04915935546159744, 0.19775930047035217, -0.045803673565387726) * l0(0.0, 1.0);
	r += mat4(0.006639953702688217, -0.015205253846943378, -0.0023269508965313435, -0.08145251125097275, 0.02164774388074875, 0.0817832201719284, 0.01760474592447281, 0.28231728076934814, -0.04982845112681389, 0.06961486488580704, 0.032594624906778336, 0.0752837061882019, -7.169899618020281e-05, -0.03283582627773285, -0.0014707857044413686, 0.07935259491205215) * l0(1.0, 1.0);
	r += mat4(-0.5920819640159607, -0.07996033877134323, 0.24669291079044342, 0.09131793677806854, 0.03721069172024727, -0.020491594448685646, -0.1125655546784401, 0.02982357330620289, -0.007242738269269466, -0.029246393591165543, -0.004028812050819397, -0.011978894472122192, 0.055216364562511444, 0.04608383774757385, 0.117881640791893, -0.10858596116304398) * l1(-1.0, -1.0);
	r += mat4(-0.05269370973110199, -0.5434674620628357, 0.34482017159461975, 0.4277440011501312, 0.46397560834884644, 0.2682238817214966, -0.06826110184192657, -0.2735168933868408, -0.06712128221988678, 0.09141305834054947, 0.03845006600022316, -0.0006339678075164557, 0.0032907789573073387, -0.01680825464427471, 0.06022259220480919, 0.04232281446456909) * l1(0.0, -1.0);
	r += mat4(0.04347663000226021, 0.1922854334115982, -0.20876489579677582, -0.0323491245508194, -0.006669677793979645, 0.19889388978481293, 0.008821171708405018, 0.05446616932749748, 0.20010104775428772, -0.2096461057662964, -0.0029730808455497026, -0.060355961322784424, -0.008293261751532555, -0.01853981614112854, -0.02766544371843338, 0.005630062893033028) * l1(1.0, -1.0);
	r += mat4(0.6114172339439392, -0.02281474880874157, -0.254192978143692, -0.12007235735654831, -0.14254911243915558, -0.038040436804294586, 0.556265115737915, -0.028639910742640495, 0.08337091654539108, -0.0073349252343177795, 0.019593659788370132, -0.02855670638382435, -0.060016930103302, 0.023063063621520996, 0.01457397174090147, 0.07791326940059662) * l1(-1.0, 0.0);
	r += mat4(0.4502945840358734, 1.2523754835128784, -1.2117319107055664, -0.8223689198493958, -0.9717064499855042, -0.6858473420143127, 0.33809906244277954, 1.0742290019989014, -0.7427311539649963, 0.03418862447142601, -0.7832722663879395, 0.08112306147813797, 0.020748376846313477, -0.036906175315380096, 0.024703001603484154, -0.1257811039686203) * l1(0.0, 0.0);
	r += mat4(0.14719203114509583, 0.10971353203058243, 0.2195468246936798, -0.3078908324241638, 0.18405145406723022, -0.21893265843391418, 0.08591455221176147, -0.05880441889166832, 0.48151150345802307, -0.2626958191394806, 0.46979662775993347, -0.436805784702301, -0.13111287355422974, 0.06596072018146515, 0.021118510514497757, -0.08207923173904419) * l1(1.0, 0.0);
	r += mat4(-0.12646546959877014, 0.0013934207381680608, 0.07945586740970612, -0.04589502885937691, 0.19679246842861176, 0.040787748992443085, -0.3810907304286957, -0.031145203858613968, -0.03906695917248726, 0.000517111096996814, 0.020928164944052696, -0.0070131500251591206, 0.13686330616474152, -0.02292119897902012, 0.05404548719525337, 0.07474071532487869) * l1(-1.0, 1.0);
	r += mat4(-0.18882279098033905, -0.25973761081695557, 0.4655051529407501, 0.3209637999534607, 0.16161665320396423, 0.3127973973751068, -0.12853549420833588, -0.5070394277572632, 0.07053174078464508, 0.009511880576610565, -0.029964124783873558, 0.048671655356884, 0.025393199175596237, 0.059610895812511444, 0.04526090621948242, -0.027025876566767693) * l1(0.0, 1.0);
	r += mat4(-0.03357110172510147, 0.0007767106872051954, -0.051266755908727646, 0.22122468054294586, -0.13565418124198914, -0.09009912610054016, 0.01304711401462555, 0.12744273245334625, -0.0945064127445221, -0.05893482640385628, 0.10078459233045578, -0.05371047183871269, 0.15005652606487274, -0.16602164506912231, -0.023603541776537895, 0.03316711634397507) * l1(1.0, 1.0);
	r += vec4(-1.4955960025986315e-08, -7.840164073513733e-09, -1.5430503097491055e-08, -6.3133076544374944e-09);
	return tanh(r);
}

//!DESC CuNNy-1x8-shuffle
//!HOOK LUMA
//!BIND down
//!BIND rcas
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 1
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
vec4 hook() {
	vec4 r = vec4(0.0);
	vec2 f = fract(down_pos * down_size);
	ivec2 i = ivec2(f * vec2(2.0));
	r.r = down_tex((vec2(0.5) - f) * down_pt + down_pos)[2*i.y + i.x];
	r.r += rcas_tex(rcas_pos).r;
	r.a = 1.0;
	return clamp(r, 0.0, 1.0);
}
