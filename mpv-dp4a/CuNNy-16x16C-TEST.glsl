// CuNNy 16x16C TEST
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

// FSR mpv | modified
// Copyright (c) 2021 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// FidelityFX FSR v1.0.2 by AMD
// ported to mpv by agyild

//!DESC CuNNy-16x16C-TEST-EASU
//!HOOK LUMA
//!BIND LUMA
//!SAVE easu
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
//!COMPONENTS 1

float APrxLoRcpF1(float a) {
	return uintBitsToFloat(uint(0x7ef07ebb) - floatBitsToUint(a));
}

float APrxLoRsqF1(float a) {
	return uintBitsToFloat(uint(0x5f347d74) - (floatBitsToUint(a) >> uint(1)));
}

float AMin3F1(float x, float y, float z) {
	return min(x, min(y, z));
}

float AMax3F1(float x, float y, float z) {
	return max(x, max(y, z));
}

void tap(inout float aC, inout float aW, vec2 off, vec2 dir, vec2 len,
         float lob, float clp, float c){
	vec2 v;
	v.x = (off.x * ( dir.x)) + (off.y * dir.y);
	v.y = (off.x * (-dir.y)) + (off.y * dir.x);
	v *= len;
	float d2 = v.x * v.x + v.y * v.y;
	d2 = min(d2, clp);
	float wB = float(2.0 / 5.0) * d2 + -1.0;
	float wA = lob * d2 + -1.0;
	wB *= wB;
	wA *= wA;
	wB = float(25.0 / 16.0) * wB + float(-(25.0 / 16.0 - 1.0));
	float w = wB * wA;
	aC += c * w;
	aW += w;
}

void set(inout vec2 dir, inout float len, vec2 pp, bool biS, bool biT,
         bool biU, bool biV, float lA, float lB, float lC, float lD, float lE){
	float w = 0.0;
	if (biS)
		w = (1.0 - pp.x) * (1.0 - pp.y);
	if (biT)
		w =        pp.x  * (1.0 - pp.y);
	if (biU)
		w = (1.0 - pp.x) *        pp.y;
	if (biV)
		w =        pp.x  *        pp.y;
	float dc = lD - lC;
	float cb = lC - lB;
	float lenX = max(abs(dc), abs(cb));
	lenX = APrxLoRcpF1(lenX);
	float dirX = lD - lB;
	lenX = clamp(abs(dirX) * lenX, 0.0, 1.0);
	lenX *= lenX;
	float ec = lE - lC;
	float ca = lC - lA;
	float lenY = max(abs(ec), abs(ca));
	lenY = APrxLoRcpF1(lenY);
	float dirY = lE - lA;
	lenY = clamp(abs(dirY) * lenY, 0.0, 1.0);
	lenY *= lenY;
	dir += vec2(dirX, dirY) * w;
	len += dot(vec2(w), vec2(lenX, lenY));
}

vec4 hook() {
	vec4 pix = vec4(0.0, 0.0, 0.0, 1.0);
	vec2 pp = LUMA_pos * LUMA_size - vec2(0.5);
	vec2 fp = floor(pp);
	pp -= fp;
#if (defined(LUMA_gather) && (__VERSION__ >= 400 || (GL_ES && __VERSION__ >= 310)))
	vec4 bczzL = LUMA_gather(vec2((fp + vec2(1.0, -1.0)) * LUMA_pt), 0);
	vec4 ijfeL = LUMA_gather(vec2((fp + vec2(0.0,  1.0)) * LUMA_pt), 0);
	vec4 klhgL = LUMA_gather(vec2((fp + vec2(2.0,  1.0)) * LUMA_pt), 0);
	vec4 zzonL = LUMA_gather(vec2((fp + vec2(1.0,  3.0)) * LUMA_pt), 0);
#else
	float b = LUMA_tex(vec2((fp + vec2(0.5, -0.5)) * LUMA_pt)).r;
	float c = LUMA_tex(vec2((fp + vec2(1.5, -0.5)) * LUMA_pt)).r;
	float e = LUMA_tex(vec2((fp + vec2(-0.5, 0.5)) * LUMA_pt)).r;
	float f = LUMA_tex(vec2((fp + vec2( 0.5, 0.5)) * LUMA_pt)).r;
	float g = LUMA_tex(vec2((fp + vec2( 1.5, 0.5)) * LUMA_pt)).r;
	float h = LUMA_tex(vec2((fp + vec2( 2.5, 0.5)) * LUMA_pt)).r;
	float i = LUMA_tex(vec2((fp + vec2(-0.5, 1.5)) * LUMA_pt)).r;
	float j = LUMA_tex(vec2((fp + vec2( 0.5, 1.5)) * LUMA_pt)).r;
	float k = LUMA_tex(vec2((fp + vec2( 1.5, 1.5)) * LUMA_pt)).r;
	float l = LUMA_tex(vec2((fp + vec2( 2.5, 1.5)) * LUMA_pt)).r;
	float n = LUMA_tex(vec2((fp + vec2(0.5, 2.5) ) * LUMA_pt)).r;
	float o = LUMA_tex(vec2((fp + vec2(1.5, 2.5) ) * LUMA_pt)).r;
	vec4 bczzL = vec4(b, c, 0.0, 0.0);
	vec4 ijfeL = vec4(i, j, f, e);
	vec4 klhgL = vec4(k, l, h, g);
	vec4 zzonL = vec4(0.0, 0.0, o, n);
#endif
	float bL = bczzL.x;
	float cL = bczzL.y;
	float iL = ijfeL.x;
	float jL = ijfeL.y;
	float fL = ijfeL.z;
	float eL = ijfeL.w;
	float kL = klhgL.x;
	float lL = klhgL.y;
	float hL = klhgL.z;
	float gL = klhgL.w;
	float oL = zzonL.z;
	float nL = zzonL.w;
	vec2 dir = vec2(0.0);
	float len = 0.0;
	set(dir, len, pp, true, false, false, false, bL, eL, fL, gL, jL);
	set(dir, len, pp, false, true, false, false, cL, fL, gL, hL, kL);
	set(dir, len, pp, false, false, true, false, fL, iL, jL, kL, nL);
	set(dir, len, pp, false, false, false, true, gL, jL, kL, lL, oL);
	vec2 dir2 = dir * dir;
	float dirR = dir2.x + dir2.y;
	bool zro = dirR < float(1.0 / 32768.0);
	dirR = APrxLoRsqF1(dirR);
	dirR = zro ? 1.0 : dirR;
	dir.x = zro ? 1.0 : dir.x;
	dir *= vec2(dirR);
	len = len * 0.5;
	len *= len;
	float stretch = (dir.x * dir.x + dir.y * dir.y) * APrxLoRcpF1(max(abs(dir.x), abs(dir.y)));
	vec2 len2 = vec2(1.0 + (stretch - 1.0) * len, 1.0 + -0.5 * len);
	float lob = 0.5 + float((1.0 / 4.0 - 0.04) - 0.5) * len;
	float clp = APrxLoRcpF1(lob);
	float aC = 0.0;
	float aW = 0.0;
	tap(aC, aW, vec2( 0.0,-1.0) - pp, dir, len2, lob, clp, bL);
	tap(aC, aW, vec2( 1.0,-1.0) - pp, dir, len2, lob, clp, cL);
	tap(aC, aW, vec2(-1.0, 1.0) - pp, dir, len2, lob, clp, iL);
	tap(aC, aW, vec2( 0.0, 1.0) - pp, dir, len2, lob, clp, jL);
	tap(aC, aW, vec2( 0.0, 0.0) - pp, dir, len2, lob, clp, fL);
	tap(aC, aW, vec2(-1.0, 0.0) - pp, dir, len2, lob, clp, eL);
	tap(aC, aW, vec2( 1.0, 1.0) - pp, dir, len2, lob, clp, kL);
	tap(aC, aW, vec2( 2.0, 1.0) - pp, dir, len2, lob, clp, lL);
	tap(aC, aW, vec2( 2.0, 0.0) - pp, dir, len2, lob, clp, hL);
	tap(aC, aW, vec2( 1.0, 0.0) - pp, dir, len2, lob, clp, gL);
	tap(aC, aW, vec2( 1.0, 2.0) - pp, dir, len2, lob, clp, oL);
	tap(aC, aW, vec2( 0.0, 2.0) - pp, dir, len2, lob, clp, nL);
	pix.r = aC / aW;
	float min1 = min(AMin3F1(fL, gL, jL), kL);
	float max1 = max(AMax3F1(fL, gL, jL), kL);
	pix.r = clamp(pix.r, min1, max1);
	pix.r = clamp(pix.r, 0.0, 1.0);
	return pix;
}


//!DESC CuNNy-16x16C-TEST-in
//!HOOK LUMA
//!COMPUTE 16 16 8 8
//!BIND LUMA
//!SAVE in
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) F(LUMA_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(1, 1) + ivec2(0, 0)) + vec2(0.5)) * LUMA_pt).r)
shared F g[1][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			g[0][ay][ax] = l0(x - 1, y - 1);
		}
	}
	barrier();
	F s[3][3][1];
	V4 r0 = V4(0.0);
	V4 r1 = V4(0.0);
	V4 r2 = V4(0.0);
	V4 r3 = V4(0.0);
	s[0][0][0] = g[0][xy.y+0][xy.x+0];
	s[0][1][0] = g[0][xy.y+0][xy.x+1];
	s[0][2][0] = g[0][xy.y+0][xy.x+2];
	s[1][0][0] = g[0][xy.y+1][xy.x+0];
	s[1][1][0] = g[0][xy.y+1][xy.x+1];
	s[1][2][0] = g[0][xy.y+1][xy.x+2];
	s[2][0][0] = g[0][xy.y+2][xy.x+0];
	s[2][1][0] = g[0][xy.y+2][xy.x+1];
	s[2][2][0] = g[0][xy.y+2][xy.x+2];
	r0 += V4(-1.795e-01, 1.399e-02, -1.166e-02, 4.663e-02) * s[0][0][0];
	r1 += V4(4.197e-02, -4.430e-02, -1.049e-01, 8.859e-02) * s[0][0][0];
	r2 += V4(1.399e-02, 1.865e-02, -4.663e-03, -6.994e-03) * s[0][0][0];
	r3 += V4(-1.119e-01, -8.160e-02, -2.471e-01, -3.963e-02) * s[0][0][0];
	r0 += V4(4.663e-02, -1.865e-01, 3.497e-02, 1.679e-01) * s[0][1][0];
	r1 += V4(2.098e-02, -1.725e-01, 1.632e-01, -1.189e-01) * s[0][1][0];
	r2 += V4(-4.197e-02, -2.798e-02, 1.072e-01, 9.326e-03) * s[0][1][0];
	r3 += V4(4.430e-02, -5.829e-02, -6.295e-02, 3.077e-01) * s[0][1][0];
	r0 += V4(-6.994e-03, 6.295e-02, -1.166e-02, -4.896e-02) * s[0][2][0];
	r1 += V4(-4.663e-02, -4.663e-03, 4.430e-02, -5.829e-02) * s[0][2][0];
	r2 += V4(-6.994e-03, -1.259e-01, 6.295e-02, 1.632e-02) * s[0][2][0];
	r3 += V4(8.160e-02, 3.031e-02, .0, -9.559e-02) * s[0][2][0];
	r0 += V4(-8.859e-02, 1.189e-01, 1.539e-01, 4.663e-02) * s[1][0][0];
	r1 += V4(-1.026e-01, -2.098e-02, .0, 1.422e-01) * s[1][0][0];
	r2 += V4(-1.632e-02, -3.264e-02, 2.331e-03, 1.399e-02) * s[1][0][0];
	r3 += V4(8.859e-02, 1.166e-02, 1.376e-01, 1.399e-02) * s[1][0][0];
	r0 += V4(2.098e-02, 1.049e-01, 4.663e-03, -1.329e-01) * s[1][1][0];
	r1 += V4(-3.264e-02, 2.704e-01, -1.376e-01, -1.725e-01) * s[1][1][0];
	r2 += V4(-2.308e-01, 1.585e-01, 9.559e-02, -3.497e-02) * s[1][1][0];
	r3 += V4(-2.052e-01, -2.098e-02, -7.461e-02, -5.129e-02) * s[1][1][0];
	r0 += V4(-1.515e-01, 7.227e-02, -1.166e-01, 2.331e-02) * s[1][2][0];
	r1 += V4(-3.031e-02, -2.331e-03, -1.026e-01, 1.003e-01) * s[1][2][0];
	r2 += V4(-3.264e-02, 4.197e-02, -1.842e-01, 1.539e-01) * s[1][2][0];
	r3 += V4(9.326e-03, 3.031e-02, 7.694e-02, -1.212e-01) * s[1][2][0];
	r0 += V4(1.562e-01, -9.093e-02, 5.129e-02, -1.679e-01) * s[2][0][0];
	r1 += V4(1.166e-02, 1.632e-02, -1.306e-01, 1.632e-02) * s[2][0][0];
	r2 += V4(-6.295e-02, -3.031e-02, -1.399e-02, -3.963e-02) * s[2][0][0];
	r3 += V4(1.166e-02, 3.730e-02, 1.399e-02, 3.264e-02) * s[2][0][0];
	r0 += V4(-2.844e-01, 1.655e-01, -1.632e-02, 3.031e-02) * s[2][1][0];
	r1 += V4(6.994e-02, -9.093e-02, 8.859e-02, -5.829e-02) * s[2][1][0];
	r2 += V4(-9.326e-03, -5.362e-02, 2.565e-02, 4.663e-03) * s[2][1][0];
	r3 += V4(4.896e-02, 9.792e-02, 6.295e-02, 5.829e-02) * s[2][1][0];
	r0 += V4(-6.761e-02, -1.842e-01, -9.093e-02, 4.663e-02) * s[2][2][0];
	r1 += V4(1.632e-02, 9.326e-03, -9.326e-02, 4.896e-02) * s[2][2][0];
	r2 += V4(1.166e-02, -3.264e-02, -6.528e-02, -9.093e-02) * s[2][2][0];
	r3 += V4(-1.399e-02, -2.331e-02, -1.003e-01, -1.072e-01) * s[2][2][0];
	r0 += V4(1.119e-02, -5.620e-02, 1.691e-02, -5.485e-03);
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(3.324e-04, -5.867e-04, 5.363e-02, -8.777e-04);
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 += V4(1.360e-02, 1.065e-02, 3.652e-03, -4.676e-02);
	imageStore(out_image, opos + ivec2(0, 1), vec4(r2));
	r3 += V4(9.054e-04, 6.889e-03, 3.333e-02, -1.462e-02);
	imageStore(out_image, opos + ivec2(1, 1), vec4(r3));
}

//!DESC CuNNy-16x16C-TEST-conv1
//!HOOK LUMA
//!COMPUTE 16 16 8 8
//!BIND in
//!BIND LUMA
//!SAVE conv1
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_spirv_intrinsics : require
#extension GL_EXT_control_flow_attributes : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) ivec4(r.x + dp4(s, a, 0), r.y + dp4(s, b, 0), r.z + dp4(s, c, 0), r.w + dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	[[unroll]] for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		[[unroll]] for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(2, 2) + ivec2(1, 1)) * in_pt;
			r = in_gather(p, 0);
			g = in_gather(p, 1);
			b = in_gather(p, 2);
			a = in_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.00000000e+00;
			vec4 v2 = vec4(r.z, g.z, b.z, a.z) * 1.00000000e+00;
			vec4 v4 = vec4(r.x, g.x, b.x, a.x) * 1.00000000e+00;
			vec4 v6 = vec4(r.y, g.y, b.y, a.y) * 1.00000000e+00;
			vec4 v1 = max(-v0, vec4(0));
			v0 = max(v0, vec4(0));
			vec4 v3 = max(-v2, vec4(0));
			v2 = max(v2, vec4(0));
			vec4 v5 = max(-v4, vec4(0));
			v4 = max(v4, vec4(0));
			vec4 v7 = max(-v6, vec4(0));
			v6 = max(v6, vec4(0));
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s[2][3][3];
	ivec4 r0 = ivec4(0);
	ivec4 r1 = ivec4(0);
	ivec4 r2 = ivec4(0);
	ivec4 r3 = ivec4(0);
	s[0][0][0] = G[0][xy.y+0][xy.x+0]; s[0][0][1] = G[0][xy.y+0][xy.x+1];
	s[0][0][2] = G[0][xy.y+0][xy.x+2]; s[0][1][0] = G[0][xy.y+1][xy.x+0];
	s[0][1][1] = G[0][xy.y+1][xy.x+1]; s[0][1][2] = G[0][xy.y+1][xy.x+2];
	s[0][2][0] = G[0][xy.y+2][xy.x+0]; s[0][2][1] = G[0][xy.y+2][xy.x+1];
	s[0][2][2] = G[0][xy.y+2][xy.x+2]; s[1][0][0] = G[1][xy.y+0][xy.x+0];
	s[1][0][1] = G[1][xy.y+0][xy.x+1]; s[1][0][2] = G[1][xy.y+0][xy.x+2];
	s[1][1][0] = G[1][xy.y+1][xy.x+0]; s[1][1][1] = G[1][xy.y+1][xy.x+1];
	s[1][1][2] = G[1][xy.y+1][xy.x+2]; s[1][2][0] = G[1][xy.y+2][xy.x+0];
	s[1][2][1] = G[1][xy.y+2][xy.x+1]; s[1][2][2] = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0xF3EFF208, 0xF7F5F5F4, 0x08EE111E, 0x011C10FF);
	r1 = D(r1, s[0][0][0], 0x08F6FB13, 0x15F2FDF7, 0xFB0904E6, 0x040B12FE);
	r2 = D(r2, s[0][0][0], 0xFFEB0709, 0xF5030A43, 0xFBF50FE3, 0xF908FA12);
	r3 = D(r3, s[0][0][0], 0x0706F3F5, 0x0C0A08FA, 0xFA031417, 0xF6F9FEE2);
	r0 = D(r0, s[0][0][1], 0xF3FF1C18, 0x0AE5EBF6, 0xF70F12D6, 0xFAFBFEFA);
	r1 = D(r1, s[0][0][1], 0x0920FB47, 0x0111E5B8, 0xFCF406F3, 0xF80BFA35);
	r2 = D(r2, s[0][0][1], 0xED02EDF7, 0xE6FAF7BE, 0xF6000BFA, 0xFD00FF20);
	r3 = D(r3, s[0][0][1], 0x080D07EB, 0x03F6F4F7, 0x0005EB12, 0x06F5FDEE);
	r0 = D(r0, s[0][0][2], 0x0AF3F3E3, 0x02F41107, 0xFC0D0CE6, 0xFB1202F8);
	r1 = D(r1, s[0][0][2], 0x0A0018D1, 0xFF02FEFD, 0xF90DF9BB, 0xF6FEF738);
	r2 = D(r2, s[0][0][2], 0xF6ED08F4, 0xF1120BCC, 0xFFF50134, 0x1B0600D5);
	r3 = D(r3, s[0][0][2], 0xF90BEA0D, 0xF70603E1, 0x06FA0B02, 0xFEFD0609);
	r0 = D(r0, s[0][1][0], 0xFA00120F, 0x120402EF, 0xF8FB031D, 0xF2091233);
	r1 = D(r1, s[0][1][0], 0xFAE9FA10, 0xFFF90FCE, 0x0808F6E3, 0x09060723);
	r2 = D(r2, s[0][1][0], 0xF30E0B22, 0x12F7000F, 0xEFFE05F0, 0xF60E0CFD);
	r3 = D(r3, s[0][1][0], 0xE80508E5, 0xFD01FC06, 0x03060219, 0x00060CFB);
	r0 = D(r0, s[0][1][1], 0xFCFB0E2C, 0xF3E3F7DD, 0x1712E2FA, 0x0A130C47);
	r1 = D(r1, s[0][1][1], 0x06190E17, 0x100812EC, 0xFAFBFCB1, 0xFEED0BE6);
	r2 = D(r2, s[0][1][1], 0x0E18FB10, 0x03040EFE, 0xFE06F441, 0x1D02FB43);
	r3 = D(r3, s[0][1][1], 0xFB100306, 0xF6F9FFD5, 0x0307F511, 0xE50E0D18);
	r0 = D(r0, s[0][1][2], 0xEB0E1206, 0xF2FB0604, 0x0F08F913, 0xF3010B45);
	r1 = D(r1, s[0][1][2], 0x02FFE1D2, 0xF902FAFB, 0xFA03FED6, 0x0AF7F30B);
	r2 = D(r2, s[0][1][2], 0xF2FEFA31, 0xF7102204, 0x190311CA, 0xFAFC0601);
	r3 = D(r3, s[0][1][2], 0x1E14FC02, 0x06FC08CD, 0xFAEAF220, 0xF108FE16);
	r0 = D(r0, s[0][2][0], 0x0FFA0847, 0x06FBF3E9, 0x070A021B, 0x0F03FAD8);
	r1 = D(r1, s[0][2][0], 0x040C0AE9, 0x00FF03EA, 0x08FD09FA, 0x020710FE);
	r2 = D(r2, s[0][2][0], 0xF0F4FA1E, 0xF90B07D7, 0xFF06FA11, 0x02070DF5);
	r3 = D(r3, s[0][2][0], 0x1109F717, 0x06FD010E, 0xFF02FA11, 0xFEFAF311);
	r0 = D(r0, s[0][2][1], 0x12FBF81C, 0x010C08B6, 0x09FB011B, 0xFAFFF8EF);
	r1 = D(r1, s[0][2][1], 0xF6FBFDCC, 0xF505FA0D, 0x03FB0BED, 0x05F212ED);
	r2 = D(r2, s[0][2][1], 0x10FAFAF4, 0x00FCF405, 0x17FDF2DF, 0x0AF10BE7);
	r3 = D(r3, s[0][2][1], 0x0605F9E5, 0xEEFD0BED, 0xF4FD1203, 0x06FFFA2C);
	r0 = D(r0, s[0][2][2], 0x03FFFA26, 0xFAEF04DA, 0xFAF8063C, 0x0AEBFD1C);
	r1 = D(r1, s[0][2][2], 0xF6FAF815, 0x0CFF1004, 0x040105DF, 0x1F061408);
	r2 = D(r2, s[0][2][2], 0x07F1F0EA, 0xFB0AF912, 0xFBEDFB2A, 0x03F008CA);
	r3 = D(r3, s[0][2][2], 0xF3FDF8E9, 0x0802FAF6, 0x03F2FE13, 0xEFFC12DB);
	r0 = D(r0, s[1][0][0], 0x05010F04, 0x07FBFAF8, 0xF405FE06, 0x100BFC00);
	r1 = D(r1, s[1][0][0], 0xF5100506, 0x040B1202, 0x03F507FA, 0xFA031800);
	r2 = D(r2, s[1][0][0], 0xEF08F4FE, 0xFB040FFC, 0xF3FEFF04, 0x0FF3F106);
	r3 = D(r3, s[1][0][0], 0x10141703, 0x04060005, 0x03F7ECFD, 0xF9E70500);
	r0 = D(r0, s[1][0][1], 0xFAF90C09, 0xEE070806, 0x1B04FAFE, 0x0C030103);
	r1 = D(r1, s[1][0][1], 0x10FB14FC, 0xFA0B0E00, 0x05EFFD0B, 0xF90012F9);
	r2 = D(r2, s[1][0][1], 0xE91700F8, 0xE4090AF7, 0xFFF2010C, 0x12ECFDF4);
	r3 = D(r3, s[1][0][1], 0x040BE009, 0x0307100B, 0x06FD11F2, 0xE4EAE600);
	r0 = D(r0, s[1][0][2], 0x06F315F1, 0x09F90006, 0x05F7F10A, 0xEE0C0C06);
	r1 = D(r1, s[1][0][2], 0x000C0001, 0x19FA0D02, 0x10ECF2FA, 0xFEEEFCFD);
	r2 = D(r2, s[1][0][2], 0x0D04F3F5, 0xFF0B01FF, 0x0107FA09, 0xFA08F902);
	r3 = D(r3, s[1][0][2], 0x0F040BFA, 0xFFF90417, 0xDEFEFAFE, 0xEE0CF1FA);
	r0 = D(r0, s[1][1][0], 0xFC05F607, 0xED00FDF4, 0x12F0FE03, 0x061C1006);
	r1 = D(r1, s[1][1][0], 0xFF03FAFF, 0xFEF806FA, 0x0112FEF9, 0xFD06070C);
	r2 = D(r2, s[1][1][0], 0xFFF8EE02, 0xF80C0D04, 0x17090907, 0xF2F7F304);
	r3 = D(r3, s[1][1][0], 0x021AFC06, 0x0712090A, 0xFCF800EF, 0x0818F3F3);
	r0 = D(r0, s[1][1][1], 0xF6F0FA0F, 0x0602FAFF, 0x07FD0209, 0xF12305F9);
	r1 = D(r1, s[1][1][1], 0xFA1DFE02, 0xF717080D, 0x09FBE5FC, 0x1CFD0406);
	r2 = D(r2, s[1][1][1], 0xFD120CFB, 0x0F150601, 0x0EE21703, 0xECEE0403);
	r3 = D(r3, s[1][1][1], 0x040AF5F7, 0x020A0A18, 0xFCF310E3, 0x1713F106);
	r0 = D(r0, s[1][1][2], 0x12F80605, 0xFFE200FF, 0xF80B0BF9, 0xFE1110FA);
	r1 = D(r1, s[1][1][2], 0x020D08F3, 0x010912FA, 0xF91AEFEE, 0xF904F80F);
	r2 = D(r2, s[1][1][2], 0xFE05F2FF, 0x00EEFB05, 0xF0FAF60C, 0x0505FE06);
	r3 = D(r3, s[1][1][2], 0xF2F2F802, 0x01FFFDFB, 0x000805EA, 0xC90D0506);
	r0 = D(r0, s[1][2][0], 0x01F2FD00, 0x06FD0002, 0x0FF40303, 0x050110F8);
	r1 = D(r1, s[1][2][0], 0xFB0A07F9, 0x04F414F9, 0xEF13FF05, 0x12F5FF01);
	r2 = D(r2, s[1][2][0], 0xFAFAFF10, 0xF7120701, 0xF5080600, 0x0D0CF309);
	r3 = D(r3, s[1][2][0], 0xFC11FDFE, 0x0107FEFB, 0xFDFCFDF7, 0x0004000E);
	r0 = D(r0, s[1][2][1], 0x01F41202, 0x07EC03FF, 0x08F804F8, 0xF90D0A07);
	r1 = D(r1, s[1][2][1], 0x0C0007F1, 0x0901FF0A, 0xF01003ED, 0x0D0202F5);
	r2 = D(r2, s[1][2][1], 0x061304FA, 0xF9110D01, 0x040D0FF9, 0x00FA0AFC);
	r3 = D(r3, s[1][2][1], 0xFB070601, 0x030CFE03, 0x1A06E201, 0xFB0207EE);
	r0 = D(r0, s[1][2][2], 0x00F806FA, 0xFD00FA0C, 0x1A0700F4, 0xFFFB06F1);
	r1 = D(r1, s[1][2][2], 0x12F4F70C, 0x1005F8F8, 0x0D0905FB, 0x1305FCF5);
	r2 = D(r2, s[1][2][2], 0xF6F8FAF6, 0xF0F406FC, 0xFF0A06FC, 0x170905FC);
	r3 = D(r3, s[1][2][2], 0x120708FC, 0xF5FF0302, 0x02FF0315, 0x0707F103);
	s[0][0][0] = G[2][xy.y+0][xy.x+0]; s[0][0][1] = G[2][xy.y+0][xy.x+1];
	s[0][0][2] = G[2][xy.y+0][xy.x+2]; s[0][1][0] = G[2][xy.y+1][xy.x+0];
	s[0][1][1] = G[2][xy.y+1][xy.x+1]; s[0][1][2] = G[2][xy.y+1][xy.x+2];
	s[0][2][0] = G[2][xy.y+2][xy.x+0]; s[0][2][1] = G[2][xy.y+2][xy.x+1];
	s[0][2][2] = G[2][xy.y+2][xy.x+2]; s[1][0][0] = G[3][xy.y+0][xy.x+0];
	s[1][0][1] = G[3][xy.y+0][xy.x+1]; s[1][0][2] = G[3][xy.y+0][xy.x+2];
	s[1][1][0] = G[3][xy.y+1][xy.x+0]; s[1][1][1] = G[3][xy.y+1][xy.x+1];
	s[1][1][2] = G[3][xy.y+1][xy.x+2]; s[1][2][0] = G[3][xy.y+2][xy.x+0];
	s[1][2][1] = G[3][xy.y+2][xy.x+1]; s[1][2][2] = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0xF60101DA, 0x01FFFCFD, 0x11EE1206, 0xFB0CFBFA);
	r1 = D(r1, s[0][0][0], 0x1800FC1C, 0xF9F50716, 0xE9E2F9FB, 0x11F3060C);
	r2 = D(r2, s[0][0][0], 0xF71B13EB, 0xFC100607, 0x0CF90AFD, 0xF001FADE);
	r3 = D(r3, s[0][0][0], 0xFAFA0AFA, 0x08050202, 0x01F60505, 0x02EE03E2);
	r0 = D(r0, s[0][0][1], 0xF904F6F4, 0xFBF30A14, 0xFA061223, 0x0012FFFA);
	r1 = D(r1, s[0][0][1], 0x1D02DE0C, 0xFAEE01F1, 0xFF05F00C, 0x06FA0A0E);
	r2 = D(r2, s[0][0][1], 0x000005D5, 0x09FE0517, 0xFE08EC04, 0xF4FE09E3);
	r3 = D(r3, s[0][0][1], 0xFF0214F7, 0x0102F9FD, 0x0AF917DC, 0xFAFC05F8);
	r0 = D(r0, s[0][0][2], 0x03F1FBF9, 0xECF4FE12, 0x02FB0E0A, 0xF0FE12F5);
	r1 = D(r1, s[0][0][2], 0x0AE9FE1D, 0xEE01E32A, 0xEF06F907, 0x06EF1723);
	r2 = D(r2, s[0][0][2], 0xE808F504, 0x060B1233, 0x09FB0EEF, 0xFFFC10E9);
	r3 = D(r3, s[0][0][2], 0x0EECF710, 0x0000F205, 0xFA02FE0A, 0xFC02FDFA);
	r0 = D(r0, s[0][1][0], 0xFAFE17ED, 0x050CFEF6, 0x070506FF, 0xF512FA11);
	r1 = D(r1, s[0][1][0], 0x03FF0B07, 0x08EC0BEB, 0xEB07FDFD, 0xE9121CFA);
	r2 = D(r2, s[0][1][0], 0x0D001708, 0xF9F1FF12, 0x13011CF2, 0xEE09FE0C);
	r3 = D(r3, s[0][1][0], 0xF6F90908, 0x04FFFBF6, 0xEE120B09, 0x02F90BFB);
	r0 = D(r0, s[0][1][1], 0xEF052FFB, 0x10F403F3, 0xEE071E08, 0x0914FBFC);
	r1 = D(r1, s[0][1][1], 0x00D8F8E2, 0x1302C0F2, 0x05F6DE02, 0xFBF90D2D);
	r2 = D(r2, s[0][1][1], 0x1D26E303, 0xEFE51709, 0x0EEA17FE, 0xFA2BEDFE);
	r3 = D(r3, s[0][1][1], 0xEEE718F1, 0xFAFB0500, 0x1E0BDC12, 0xD5022708);
	r0 = D(r0, s[0][1][2], 0x10FC1509, 0xE4F5FE02, 0x040C1705, 0xF61F090D);
	r1 = D(r1, s[0][1][2], 0xFB0AF8FD, 0xFAF806F4, 0xEEFDDCF7, 0xFA1FF1F4);
	r2 = D(r2, s[0][1][2], 0x01FCFB0F, 0x08F9E8F9, 0x041001F9, 0xF012F112);
	r3 = D(r3, s[0][1][2], 0x0BF2FD13, 0x010C0AFA, 0xF2092BFF, 0x0B0BF3EC);
	r0 = D(r0, s[0][2][0], 0xF6F4FA18, 0xFD05FAFA, 0xFBEE03F4, 0xF1E6E2EE);
	r1 = D(r1, s[0][2][0], 0xFDEC0621, 0x0001F7FD, 0x04FD0AB0, 0xF6FD080A);
	r2 = D(r2, s[0][2][0], 0x04ECFDF0, 0x0BFE0F0A, 0x0C0BFB12, 0xFA010420);
	r3 = D(r3, s[0][2][0], 0x0A19EF08, 0xFAF003FF, 0x15EF0C09, 0xFE030401);
	r0 = D(r0, s[0][2][1], 0x04F7ED18, 0x0406F209, 0x11F40A10, 0x1508E9FB);
	r1 = D(r1, s[0][2][1], 0xF20B070D, 0x0CE90811, 0xECE5E206, 0x0C03EBEF);
	r2 = D(r2, s[0][2][1], 0xF3F0FCF4, 0x08E409FE, 0x001DFA04, 0xF30C1118);
	r3 = D(r3, s[0][2][1], 0x0609F511, 0x01FE0C02, 0x0BF01005, 0xF615E50D);
	r0 = D(r0, s[0][2][2], 0xECF5FBF3, 0xFCF30DEE, 0xF905FE01, 0xFE1210F6);
	r1 = D(r1, s[0][2][2], 0x07F912FE, 0x160DF72C, 0xEF10FBFA, 0x12FE0900);
	r2 = D(r2, s[0][2][2], 0x09FAE51D, 0xFD0CF5ED, 0x02091C0D, 0xFC08FD1D);
	r3 = D(r3, s[0][2][2], 0xFD0405FB, 0xF7FDF1F7, 0xED0516F7, 0xE6F5F606);
	r0 = D(r0, s[1][0][0], 0x09030309, 0xF8F80F02, 0x0DFDFF09, 0xFAFA0D08);
	r1 = D(r1, s[1][0][0], 0x0207FAFF, 0x0501FBFC, 0xFD0DF9F4, 0x0900F910);
	r2 = D(r2, s[1][0][0], 0x000CEE06, 0xFBFFF907, 0xFCFA0604, 0x00F9FFF6);
	r3 = D(r3, s[1][0][0], 0x0B000700, 0x05FEF3FF, 0x03FAFA06, 0xFCF8FBF0);
	r0 = D(r0, s[1][0][1], 0x04F814EE, 0x06FE0805, 0x12FDF910, 0x0FF6FAF1);
	r1 = D(r1, s[1][0][1], 0xD803FBFA, 0xF7160400, 0xF7F40701, 0xF5020D03);
	r2 = D(r2, s[1][0][1], 0x0006FFFB, 0xFCF10101, 0x1202FF05, 0x0301FF12);
	r3 = D(r3, s[1][0][1], 0x060109F4, 0xFC1606F6, 0x010C0609, 0x02060706);
	r0 = D(r0, s[1][0][2], 0xF8060DF3, 0x0E0DF6F6, 0xF6000D0A, 0x05FE0607);
	r1 = D(r1, s[1][0][2], 0x09FD0300, 0x0E04FDFC, 0xFAFEFDF7, 0x05080A0E);
	r2 = D(r2, s[1][0][2], 0xFE07F3FE, 0xE0F6FAFB, 0x0506FB00, 0xFDFC0AFC);
	r3 = D(r3, s[1][0][2], 0xFFFA03FD, 0xFA05FD01, 0x05F902FC, 0xFAF800FD);
	r0 = D(r0, s[1][1][0], 0x0005FA06, 0xEDFB00F5, 0x00EDFC0D, 0xFD04EB05);
	r1 = D(r1, s[1][1][0], 0x100EFC0D, 0x05FFFFFE, 0xFFFEF709, 0xFCFA0403);
	r2 = D(r2, s[1][1][0], 0x1AFD040E, 0x05FC09F0, 0xFBFDF3FB, 0xFCFAEDF2);
	r3 = D(r3, s[1][1][0], 0x0106F70E, 0xFA04FDFB, 0x0F0200FD, 0xF60DFDF7);
	r0 = D(r0, s[1][1][1], 0xF90DF400, 0xFA05EB06, 0x13EC1FF2, 0x0009FE11);
	r1 = D(r1, s[1][1][1], 0xE804FE03, 0xEBF805F9, 0xFD01F70D, 0xE50B0502);
	r2 = D(r2, s[1][1][1], 0xDF0211F5, 0xFE090503, 0x0A07020E, 0x010BFD03);
	r3 = D(r3, s[1][1][1], 0x0D06E2FE, 0xFA050204, 0xF0F71E06, 0x080FEE06);
	r0 = D(r0, s[1][1][2], 0xF407F9FC, 0x0D0DF4FD, 0xF7FA08FA, 0xF104EDED);
	r1 = D(r1, s[1][1][2], 0x1901F8FA, 0x1200F603, 0xEC01FA04, 0x0FFB03FE);
	r2 = D(r2, s[1][1][2], 0xFD04F90C, 0xEDF9F4FA, 0x00F30306, 0x10FAFFFF);
	r3 = D(r3, s[1][1][2], 0xEFFF0504, 0xF802040A, 0x01FCFFFE, 0xEFF31908);
	r0 = D(r0, s[1][2][0], 0x060B0EFF, 0x01FA10F6, 0x060306FD, 0x020604FD);
	r1 = D(r1, s[1][2][0], 0x0007FD0C, 0x060602FE, 0x020D05F9, 0xFC060EF6);
	r2 = D(r2, s[1][2][0], 0x0E05F4FE, 0x12061000, 0xF3EF0EEF, 0xF90406FD);
	r3 = D(r3, s[1][2][0], 0xF3FD05F9, 0x0B10FBFA, 0x06FD0403, 0x03FA08FE);
	r0 = D(r0, s[1][2][1], 0x00FE0A06, 0xF8F10006, 0xF1F704F3, 0x0208FDFF);
	r1 = D(r1, s[1][2][1], 0x03F30E04, 0xE704FBF7, 0x08FC05EE, 0x06F402FB);
	r2 = D(r2, s[1][2][1], 0xF5FDF7FC, 0x0F0B0706, 0xFFE70CFB, 0xF6F70F04);
	r3 = D(r3, s[1][2][1], 0xEEF20D00, 0x0306FDFD, 0xFD06FF01, 0x03FE0606);
	r0 = D(r0, s[1][2][2], 0x000611FE, 0x070004FE, 0xF5F8F2FA, 0x0AFA07F9);
	r1 = D(r1, s[1][2][2], 0x03F509FD, 0x0203EF0A, 0xFEF4FAFD, 0x0E0307FF);
	r2 = D(r2, s[1][2][2], 0x0003FA00, 0x06020B0D, 0x06EE04EE, 0xF8030600);
	r3 = D(r3, s[1][2][2], 0x0607FAFA, 0xFCFE06FD, 0x0BF4FDFB, 0xFCFCF912);
	s[0][0][0] = G[4][xy.y+0][xy.x+0]; s[0][0][1] = G[4][xy.y+0][xy.x+1];
	s[0][0][2] = G[4][xy.y+0][xy.x+2]; s[0][1][0] = G[4][xy.y+1][xy.x+0];
	s[0][1][1] = G[4][xy.y+1][xy.x+1]; s[0][1][2] = G[4][xy.y+1][xy.x+2];
	s[0][2][0] = G[4][xy.y+2][xy.x+0]; s[0][2][1] = G[4][xy.y+2][xy.x+1];
	s[0][2][2] = G[4][xy.y+2][xy.x+2]; s[1][0][0] = G[5][xy.y+0][xy.x+0];
	s[1][0][1] = G[5][xy.y+0][xy.x+1]; s[1][0][2] = G[5][xy.y+0][xy.x+2];
	s[1][1][0] = G[5][xy.y+1][xy.x+0]; s[1][1][1] = G[5][xy.y+1][xy.x+1];
	s[1][1][2] = G[5][xy.y+1][xy.x+2]; s[1][2][0] = G[5][xy.y+2][xy.x+0];
	s[1][2][1] = G[5][xy.y+2][xy.x+1]; s[1][2][2] = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0x2AFE131C, 0xF8060611, 0xB50204D8, 0x0505D3D7);
	r1 = D(r1, s[0][0][0], 0x00F121F4, 0x2209F01C, 0x0FF5DB38, 0x1B091911);
	r2 = D(r2, s[0][0][0], 0xF4060111, 0x14FD0318, 0xD1FBF8CA, 0x04FCD207);
	r3 = D(r3, s[0][0][0], 0xEE090E3B, 0xFBF6FA14, 0xFA0B0CFF, 0x1F051A2B);
	r0 = D(r0, s[0][0][1], 0x26F516E3, 0xF9EF02EC, 0x0A0AEA0C, 0x1105F13F);
	r1 = D(r1, s[0][0][1], 0xFAEE06E5, 0xFAEEF4D8, 0xE600E4E0, 0xFAF61A17);
	r2 = D(r2, s[0][0][1], 0xF7F41F04, 0x05F5FFF4, 0x0F0FFAD8, 0x1104F3E2);
	r3 = D(r3, s[0][0][1], 0xE1F1F0F3, 0xF1FBFDDC, 0xF5FAFF11, 0xE8061117);
	r0 = D(r0, s[0][0][2], 0x1E02FBE4, 0xEE0DE8EB, 0xFF060FED, 0x080A0611);
	r1 = D(r1, s[0][0][2], 0xF3072DEB, 0x0E08EAD2, 0xF0F8F6CC, 0x1B0410F6);
	r2 = D(r2, s[0][0][2], 0x1D12EE09, 0xF5F1FF2E, 0xF5FEF8C9, 0x000707BE);
	r3 = D(r3, s[0][0][2], 0xE400FFE4, 0xFA0008DA, 0x01FDFF19, 0x0805F9EE);
	r0 = D(r0, s[0][1][0], 0x07F40736, 0x07F0FEFD, 0x1E00DCFA, 0x16012366);
	r1 = D(r1, s[0][1][0], 0x410526D3, 0xE110D708, 0xD6F8E4FA, 0xE5F10E1C);
	r2 = D(r2, s[0][1][0], 0x05090106, 0x0F05DF14, 0xF1FF06DF, 0xE9F30602);
	r3 = D(r3, s[0][1][0], 0x1FF719F0, 0x1401EDED, 0xDDFFE302, 0x2B03EC0A);
	r0 = D(r0, s[0][1][1], 0x02FE1140, 0x23E617FA, 0xF01216A6, 0xF5FB297F);
	r1 = D(r1, s[0][1][1], 0xE8F9053C, 0x2FEAB39F, 0xE003DDB8, 0x19FC1FE6);
	r2 = D(r2, s[0][1][1], 0x1703D027, 0xF90EC325, 0xEEF90BDE, 0xEBFEF722);
	r3 = D(r3, s[0][1][1], 0xCF0710E6, 0x14F7ECC1, 0xF0FBCD4B, 0xEB0E2004);
	r0 = D(r0, s[0][1][2], 0xFEF90A35, 0xF811F119, 0xF0020FA4, 0xDC05115C);
	r1 = D(r1, s[0][1][2], 0xFA02E340, 0x11FD15CD, 0xFAF6D8C9, 0x1EFE0DCA);
	r2 = D(r2, s[0][1][2], 0x1CFDEF0D, 0xE707F018, 0x06050E17, 0x0D0D27F6);
	r3 = D(r3, s[0][1][2], 0x21F50CFF, 0x04FF0CD1, 0x1603FF15, 0xEE01C326);
	r0 = D(r0, s[0][2][0], 0xFE0605EE, 0x08F412D2, 0xF2FCF620, 0x1E0C19FA);
	r1 = D(r1, s[0][2][0], 0x0400F9C7, 0x0B040BB0, 0x020D05F1, 0xFC0D07ED);
	r2 = D(r2, s[0][2][0], 0xFD082103, 0x04F6FCF0, 0xEA070F07, 0x0702EEFF);
	r3 = D(r3, s[0][2][0], 0x190AF108, 0x0D050403, 0x0A060408, 0x0903FCE6);
	r0 = D(r0, s[0][2][1], 0xEFFEFE15, 0xF1FC0BD3, 0xDBF7FCD2, 0x2C01D22A);
	r1 = D(r1, s[0][2][1], 0xE3FB03F2, 0xFBEE16D8, 0xFA00F1DA, 0xE20700F1);
	r2 = D(r2, s[0][2][1], 0xF30CFF10, 0xD70716E0, 0x09F7DB3C, 0xFA01E936);
	r3 = D(r3, s[0][2][1], 0xFCF4F812, 0xF6FAFEE9, 0x18F1060D, 0xFE09EE23);
	r0 = D(r0, s[0][2][2], 0xF40BFA0E, 0x00071BE8, 0x060007F1, 0x08F6E8F4);
	r1 = D(r1, s[0][2][2], 0xFBFAEECF, 0xFDFE1E2B, 0xFA000DC9, 0x10FDE7D5);
	r2 = D(r2, s[0][2][2], 0x1109050C, 0xF70425D5, 0xFD03F233, 0xF9030618);
	r3 = D(r3, s[0][2][2], 0x1BFFDF1E, 0x1106FAD0, 0xFD0CED01, 0x04FEF31B);
	r0 = D(r0, s[1][0][0], 0x09F9F9F5, 0x0AF003FC, 0xED0C0100, 0x040AFF0A);
	r1 = D(r1, s[1][0][0], 0x16070D10, 0x0819F6FC, 0x0BF1FCF5, 0x0DFB0EFA);
	r2 = D(r2, s[1][0][0], 0xFC0A0BFB, 0xF1FDF705, 0x03030715, 0x0FFE04F5);
	r3 = D(r3, s[1][0][0], 0x010E0A08, 0xF30CFB01, 0xF901FEF3, 0x01FFFAFA);
	r0 = D(r0, s[1][0][1], 0x08010DF9, 0x02000C0A, 0x0204FD0D, 0xEDFEFDFF);
	r1 = D(r1, s[1][0][1], 0x04FA0904, 0xFB0609F3, 0xFFF208FE, 0xFB0D10FB);
	r2 = D(r2, s[1][0][1], 0xFC1904FC, 0xFF030404, 0x02EFF2FA, 0x0F0BFDFF);
	r3 = D(r3, s[1][0][1], 0xF8F1FD04, 0x06F50D03, 0xFD1107F3, 0xFB0608FA);
	r0 = D(r0, s[1][0][2], 0x030705F7, 0x04F705FF, 0xF4F6FDFD, 0xFA000C07);
	r1 = D(r1, s[1][0][2], 0xF901FCFB, 0x03FBF6F9, 0xFEFAFEEE, 0x1300F4F4);
	r2 = D(r2, s[1][0][2], 0xFA0506F9, 0x02F40606, 0x05FD01FD, 0xF8FDF9FC);
	r3 = D(r3, s[1][0][2], 0xF802F900, 0x0AFEF00B, 0xF606FD0F, 0x04FAEBF1);
	r0 = D(r0, s[1][1][0], 0xFC06F304, 0xFEFEFCF4, 0x0E05FE05, 0x04FC0014);
	r1 = D(r1, s[1][1][0], 0x1A160A19, 0xF706EEF9, 0xFC000902, 0x00FBF405);
	r2 = D(r2, s[1][1][0], 0x17EEF505, 0x0617FE02, 0xF50A0807, 0x06FE06FA);
	r3 = D(r3, s[1][1][0], 0xFA12F803, 0xF7FD0A07, 0xF3F3EEF5, 0x0112FA04);
	r0 = D(r0, s[1][1][1], 0xFCF6EFFF, 0xF9FAF20B, 0x040B0506, 0xFB04F0F7);
	r1 = D(r1, s[1][1][1], 0xFD0CFCF6, 0x03F8F7F5, 0x022406EE, 0xFDFC0EF7);
	r2 = D(r2, s[1][1][1], 0x0A1200FD, 0xFDFAFA05, 0xFFF9F501, 0xF6030BF4);
	r3 = D(r3, s[1][1][1], 0x03F5E404, 0xFA00FD07, 0x0D05FD04, 0x0DFFFF03);
	r0 = D(r0, s[1][1][2], 0x1DFA0501, 0xFAFAFA03, 0x030900F7, 0x0BEE0613);
	r1 = D(r1, s[1][1][2], 0xF1FE06FA, 0xF9FCFA0D, 0xFF1601F9, 0xF3F20206);
	r2 = D(r2, s[1][1][2], 0xF00D0EF9, 0x0602FAF8, 0xF7F7EE02, 0xF30100FB);
	r3 = D(r3, s[1][1][2], 0xF6F2FCF1, 0x05150010, 0xF202F600, 0x060803F6);
	r0 = D(r0, s[1][2][0], 0xF9F001FF, 0xF7EE0C01, 0x0D060DFD, 0x060EF108);
	r1 = D(r1, s[1][2][0], 0x05F9FE02, 0x09FF0306, 0x020DFE03, 0xFA0606F1);
	r2 = D(r2, s[1][2][0], 0xFAF911FB, 0x1601FF01, 0x062312EF, 0x02FE05F1);
	r3 = D(r3, s[1][2][0], 0x041C060C, 0xFE09FDF8, 0xF31C06FD, 0x07181009);
	r0 = D(r0, s[1][2][1], 0xFFF30004, 0xFBDA05F2, 0x06F80306, 0x050A0E12);
	r1 = D(r1, s[1][2][1], 0x01EF07FA, 0x06EEEF0D, 0xFA03FF12, 0xFA08FCFB);
	r2 = D(r2, s[1][2][1], 0xFC1EFAFD, 0xFB0D03FB, 0xFBFD04EE, 0xE9EE13FA);
	r3 = D(r3, s[1][2][1], 0x06F8FC0D, 0xF9FD0503, 0x08FF0603, 0xF91AF009);
	r0 = D(r0, s[1][2][2], 0xFA0CFB06, 0xFD05FF08, 0xEF17FCFE, 0xF3030E02);
	r1 = D(r1, s[1][2][2], 0xF4F2FA01, 0x090304FA, 0x011FF706, 0xFE040907);
	r2 = D(r2, s[1][2][2], 0xEF0C0E08, 0xFF11EA0A, 0x0606F401, 0xF8F0FA0C);
	r3 = D(r3, s[1][2][2], 0xFEFEFBFB, 0x0AF60503, 0x050BFEF4, 0xFA0C0FFE);
	s[0][0][0] = G[6][xy.y+0][xy.x+0]; s[0][0][1] = G[6][xy.y+0][xy.x+1];
	s[0][0][2] = G[6][xy.y+0][xy.x+2]; s[0][1][0] = G[6][xy.y+1][xy.x+0];
	s[0][1][1] = G[6][xy.y+1][xy.x+1]; s[0][1][2] = G[6][xy.y+1][xy.x+2];
	s[0][2][0] = G[6][xy.y+2][xy.x+0]; s[0][2][1] = G[6][xy.y+2][xy.x+1];
	s[0][2][2] = G[6][xy.y+2][xy.x+2]; s[1][0][0] = G[7][xy.y+0][xy.x+0];
	s[1][0][1] = G[7][xy.y+0][xy.x+1]; s[1][0][2] = G[7][xy.y+0][xy.x+2];
	s[1][1][0] = G[7][xy.y+1][xy.x+0]; s[1][1][1] = G[7][xy.y+1][xy.x+1];
	s[1][1][2] = G[7][xy.y+1][xy.x+2]; s[1][2][0] = G[7][xy.y+2][xy.x+0];
	s[1][2][1] = G[7][xy.y+2][xy.x+1]; s[1][2][2] = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0x06FE031A, 0xF9F7FA10, 0xF2F5060E, 0x05160AF1);
	r1 = D(r1, s[0][0][0], 0xF8F10DF5, 0xF7F90CFB, 0x1510F9E4, 0x11E5080F);
	r2 = D(r2, s[0][0][0], 0xF7FDFAFC, 0x00F707E9, 0x050006F9, 0xF9F9FCEA);
	r3 = D(r3, s[0][0][0], 0xF2040100, 0xE903F1F0, 0x06F50402, 0x180311E3);
	r0 = D(r0, s[0][0][1], 0x08F9041E, 0x121205F6, 0xEDED0A17, 0x0D05FEE4);
	r1 = D(r1, s[0][0][1], 0xFD07FAD3, 0xFE00FEE0, 0xF3060F09, 0xE90EF9F9);
	r2 = D(r2, s[0][0][1], 0xF0F30F07, 0xF5FE04EC, 0x01FA040F, 0x0701FFFA);
	r3 = D(r3, s[0][0][1], 0xFF12080F, 0xF4FF07F0, 0x05F4FF05, 0x060108DF);
	r0 = D(r0, s[0][0][2], 0x0411061E, 0x0B13060C, 0xFF09EF0A, 0x060003EB);
	r1 = D(r1, s[0][0][2], 0xFFD30118, 0x0809FE03, 0xF70E020A, 0xFFDAFA18);
	r2 = D(r2, s[0][0][2], 0x01040000, 0x1104FD06, 0x05F60C04, 0xF90301DF);
	r3 = D(r3, s[0][0][2], 0xFDFAF500, 0x0505040C, 0x04FE0606, 0xF9FAF300);
	r0 = D(r0, s[0][1][0], 0x21F1F210, 0x0412F919, 0xEF060002, 0xC706F9E9);
	r1 = D(r1, s[0][1][0], 0xD72007F9, 0x05FF0215, 0xEEFCFBF7, 0x0FF9F80C);
	r2 = D(r2, s[0][1][0], 0x08FEF9F0, 0xFFF9FF01, 0x180FFFF3, 0x06E618F3);
	r3 = D(r3, s[0][1][0], 0xFCF6FFF8, 0xFF19FA13, 0xFBF9F405, 0xF11BF903);
	r0 = D(r0, s[0][1][1], 0x02030304, 0xEEEFFFFB, 0x120EFCF8, 0x060AFC0B);
	r1 = D(r1, s[0][1][1], 0xEA0502EB, 0x07FA061E, 0xED03FEF9, 0x050D0409);
	r2 = D(r2, s[0][1][1], 0x11011E1C, 0xEAEDFCF0, 0x09F4EFE4, 0x13FB0402);
	r3 = D(r3, s[0][1][1], 0xE703F8EA, 0xE50212EA, 0x06150913, 0xEB0607DC);
	r0 = D(r0, s[0][1][2], 0xFBF419FE, 0x01EFFB07, 0x0016F0F8, 0xF110FD13);
	r1 = D(r1, s[0][1][2], 0xFC08FAD8, 0x04EC0501, 0x00FBF8ED, 0x0611F6FA);
	r2 = D(r2, s[0][1][2], 0x0605FA1E, 0xF00604FA, 0x02FAEB0E, 0xEFD90EE1);
	r3 = D(r3, s[0][1][2], 0x06F90C0F, 0x14E6FFFD, 0xF2EAFAFB, 0x010C06FD);
	r0 = D(r0, s[0][2][0], 0xE3060217, 0x03FFFAEC, 0xEEFA06EF, 0xE4FAF83A);
	r1 = D(r1, s[0][2][0], 0xEEE10706, 0x1503001A, 0x05000108, 0x18F507F1);
	r2 = D(r2, s[0][2][0], 0xEB070BEE, 0x06E208F9, 0x08F30CFE, 0x08FEFC0E);
	r3 = D(r3, s[0][2][0], 0xF80306FC, 0x0503F80B, 0xFFFBFAE5, 0xE1F3FC07);
	r0 = D(r0, s[0][2][1], 0x00070506, 0x1BEEFBFA, 0xEE1201F5, 0x0A27EEFE);
	r1 = D(r1, s[0][2][1], 0xF7E20117, 0x06F6F2FB, 0x0626FAF4, 0x0EFA020F);
	r2 = D(r2, s[0][2][1], 0xE606F502, 0x0CF9F10D, 0x1CF7F8F4, 0xFAFB08F5);
	r3 = D(r3, s[0][2][1], 0xF3F8F3EE, 0x010CFD08, 0xF4120606, 0x01FEFC17);
	r0 = D(r0, s[0][2][2], 0xEF11EDF8, 0x0C06031C, 0xE7F2FA13, 0xFD07041D);
	r1 = D(r1, s[0][2][2], 0x03EEFCFD, 0xF41802C7, 0xFF0F03F0, 0x08FEF20E);
	r2 = D(r2, s[0][2][2], 0xFAFFFCED, 0xF2FDE4F9, 0x000BFCF5, 0x09F7FA08);
	r3 = D(r3, s[0][2][2], 0xF9FF0412, 0x14E9FFEF, 0x00120504, 0xF102FE01);
	r0 = D(r0, s[1][0][0], 0xFCF11E09, 0x0206FBF3, 0xFD01EFF3, 0xF6000101);
	r1 = D(r1, s[1][0][0], 0x16FBEC03, 0x0206EFFC, 0x05020E05, 0xFD00F505);
	r2 = D(r2, s[1][0][0], 0xF7FE1FFB, 0xF40AF6FE, 0x12FEFE00, 0xF2010B06);
	r3 = D(r3, s[1][0][0], 0xFE06E309, 0x080205FB, 0xF2090606, 0xFFF801FF);
	r0 = D(r0, s[1][0][1], 0xEAFEF3F1, 0x02FAEFF4, 0xE41BF402, 0xFDF01605);
	r1 = D(r1, s[1][0][1], 0xF2F50EFA, 0x0FFBE400, 0xF2F8F2F9, 0x0603E001);
	r2 = D(r2, s[1][0][1], 0x0512170B, 0x03FA16F4, 0x0E06EA01, 0xF40A0100);
	r3 = D(r3, s[1][0][1], 0xFC01E1FD, 0x0C090009, 0x0208FE07, 0xF7060DF1);
	r0 = D(r0, s[1][0][2], 0xF2F5F6F2, 0x03F60600, 0xFA06F1FA, 0xF6F8E6F9);
	r1 = D(r1, s[1][0][2], 0xF9100D11, 0x0708F500, 0x0BFD16FA, 0x0312F804);
	r2 = D(r2, s[1][0][2], 0xE3FC0909, 0xFEF31BFA, 0xFAFAE708, 0x0CEEF6FE);
	r3 = D(r3, s[1][0][2], 0xFCFD1909, 0xFDFAEB00, 0x0805FB04, 0x06FAF805);
	r0 = D(r0, s[1][1][0], 0x07FC18FF, 0xF6EF0401, 0x0708DF08, 0x000404FA);
	r1 = D(r1, s[1][1][0], 0x0707010D, 0xFA1001FF, 0x0104FA06, 0x03F9F802);
	r2 = D(r2, s[1][1][0], 0xFC050512, 0xF404E605, 0x03FBDAFD, 0x060BFAF4);
	r3 = D(r3, s[1][1][0], 0x08031004, 0x01FB02EF, 0xFE0D07FF, 0x0100EA06);
	r0 = D(r0, s[1][1][1], 0x20FA121A, 0x0E00FB04, 0xD809E908, 0xF7FAFE0E);
	r1 = D(r1, s[1][1][1], 0x03FAFCE8, 0x08FE01FA, 0xF50E0101, 0x1906E8F3);
	r2 = D(r2, s[1][1][1], 0xE30A0CFC, 0xE3FFE9F6, 0xFD11F712, 0xF2FE10F9);
	r3 = D(r3, s[1][1][1], 0x09091006, 0x11F7FB05, 0x09FCFCF8, 0x0605FD0C);
	r0 = D(r0, s[1][1][2], 0x0BEF02FB, 0xFD06ED06, 0xFE0BF001, 0xF504F402);
	r1 = D(r1, s[1][1][2], 0xFAFAEFF4, 0xFEF406F2, 0x14FF10F3, 0xFC0605FE);
	r2 = D(r2, s[1][1][2], 0xFAF60B03, 0x00F3FFEA, 0x0910E606, 0xFC0418F6);
	r3 = D(r3, s[1][1][2], 0xF5EBEEF3, 0xF30B130F, 0x07040508, 0xF107F000);
	r0 = D(r0, s[1][2][0], 0xFA00F4FA, 0xECF1FB03, 0xFA00F906, 0xE6FDEBF8);
	r1 = D(r1, s[1][2][0], 0x0DFAF908, 0xFA16E9FF, 0x04F9F606, 0xFA00FA01);
	r2 = D(r2, s[1][2][0], 0x0A0200F9, 0xF90BFA08, 0xF6FEECFC, 0x00060AEF);
	r3 = D(r3, s[1][2][0], 0x0507FEFE, 0xFD0113F9, 0xEE0E040D, 0xFC0CFA06);
	r0 = D(r0, s[1][2][1], 0xFDFBFF0E, 0x03160BFE, 0xF4FD0300, 0x14030AFA);
	r1 = D(r1, s[1][2][1], 0x02ED08FA, 0xF70D2F06, 0x02F8F912, 0x0C08FAF2);
	r2 = D(r2, s[1][2][1], 0xF9FAF10A, 0xF505210E, 0xECFBF9F6, 0xF9FC07FC);
	r3 = D(r3, s[1][2][1], 0xF0F507F4, 0xFA0CECFF, 0x09FDEC0A, 0xEA0715FD);
	r0 = D(r0, s[1][2][2], 0xF3FF1A06, 0x08001406, 0x11FA06F3, 0x03FD0302);
	r1 = D(r1, s[1][2][2], 0x0409E6E9, 0x0BFA1203, 0x06F9F8FA, 0x04070A0E);
	r2 = D(r2, s[1][2][2], 0xF0161F0D, 0xE307010B, 0xFA0003FF, 0x000A0906);
	r3 = D(r3, s[1][2][2], 0x060202F8, 0xFF10080F, 0xF909FB06, 0x00FFEDFF);
	vec4 f0 = vec4(r0) * 6.20001240e-05;
	f0 += vec4(-7.153e-02, 7.147e-02, 1.489e-02, -1.337e-01);
	imageStore(out_image, opos + ivec2(0, 0), vec4(f0));
	vec4 f1 = vec4(r1) * 6.20001240e-05;
	f1 += vec4(3.356e-02, 4.584e-03, 1.401e-01, -3.674e-02);
	imageStore(out_image, opos + ivec2(1, 0), vec4(f1));
	vec4 f2 = vec4(r2) * 6.20001240e-05;
	f2 += vec4(1.438e-02, 3.034e-02, -9.725e-03, 4.333e-02);
	imageStore(out_image, opos + ivec2(0, 1), vec4(f2));
	vec4 f3 = vec4(r3) * 6.20001240e-05;
	f3 += vec4(1.618e-02, -6.531e-02, 9.136e-03, 1.136e-02);
	imageStore(out_image, opos + ivec2(1, 1), vec4(f3));
}

//!DESC CuNNy-16x16C-TEST-conv2
//!HOOK LUMA
//!COMPUTE 16 16 8 8
//!BIND conv1
//!BIND LUMA
//!SAVE conv2
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_spirv_intrinsics : require
#extension GL_EXT_control_flow_attributes : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) ivec4(r.x + dp4(s, a, 0), r.y + dp4(s, b, 0), r.z + dp4(s, c, 0), r.w + dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	[[unroll]] for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		[[unroll]] for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(2, 2) + ivec2(1, 1)) * conv1_pt;
			r = conv1_gather(p, 0);
			g = conv1_gather(p, 1);
			b = conv1_gather(p, 2);
			a = conv1_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.00000000e+00;
			vec4 v2 = vec4(r.z, g.z, b.z, a.z) * 1.00000000e+00;
			vec4 v4 = vec4(r.x, g.x, b.x, a.x) * 1.00000000e+00;
			vec4 v6 = vec4(r.y, g.y, b.y, a.y) * 1.00000000e+00;
			vec4 v1 = max(-v0, vec4(0));
			v0 = max(v0, vec4(0));
			vec4 v3 = max(-v2, vec4(0));
			v2 = max(v2, vec4(0));
			vec4 v5 = max(-v4, vec4(0));
			v4 = max(v4, vec4(0));
			vec4 v7 = max(-v6, vec4(0));
			v6 = max(v6, vec4(0));
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s[2][3][3];
	ivec4 r0 = ivec4(0);
	ivec4 r1 = ivec4(0);
	ivec4 r2 = ivec4(0);
	ivec4 r3 = ivec4(0);
	s[0][0][0] = G[0][xy.y+0][xy.x+0]; s[0][0][1] = G[0][xy.y+0][xy.x+1];
	s[0][0][2] = G[0][xy.y+0][xy.x+2]; s[0][1][0] = G[0][xy.y+1][xy.x+0];
	s[0][1][1] = G[0][xy.y+1][xy.x+1]; s[0][1][2] = G[0][xy.y+1][xy.x+2];
	s[0][2][0] = G[0][xy.y+2][xy.x+0]; s[0][2][1] = G[0][xy.y+2][xy.x+1];
	s[0][2][2] = G[0][xy.y+2][xy.x+2]; s[1][0][0] = G[1][xy.y+0][xy.x+0];
	s[1][0][1] = G[1][xy.y+0][xy.x+1]; s[1][0][2] = G[1][xy.y+0][xy.x+2];
	s[1][1][0] = G[1][xy.y+1][xy.x+0]; s[1][1][1] = G[1][xy.y+1][xy.x+1];
	s[1][1][2] = G[1][xy.y+1][xy.x+2]; s[1][2][0] = G[1][xy.y+2][xy.x+0];
	s[1][2][1] = G[1][xy.y+2][xy.x+1]; s[1][2][2] = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0xF1F6EF06, 0x0801F0F8, 0xF8050F01, 0xFCF8FB07);
	r1 = D(r1, s[0][0][0], 0xE80BED02, 0xF3EE04FD, 0x0607FF06, 0xF401ECFD);
	r2 = D(r2, s[0][0][0], 0x0A060204, 0xEA04FAFA, 0xF40FF20B, 0xE8F9F6FF);
	r3 = D(r3, s[0][0][0], 0xFF0104F5, 0x0B0BF806, 0xEFF91003, 0x001DEFFB);
	r0 = D(r0, s[0][0][1], 0xEFF3F800, 0x0302FCEF, 0x09F30810, 0x0802FD06);
	r1 = D(r1, s[0][0][1], 0x0BF6F7F8, 0x0C15FA0A, 0x1E03FAF4, 0x04FD0310);
	r2 = D(r2, s[0][0][1], 0x030700FD, 0xFAF3F6FD, 0xFBF8F1FD, 0x32F1FDF6);
	r3 = D(r3, s[0][0][1], 0xF1FC07FE, 0xFA0FED01, 0x16040318, 0x0B100006);
	r0 = D(r0, s[0][0][2], 0x150BF7FB, 0x120D01FD, 0x04060203, 0x01F0F206);
	r1 = D(r1, s[0][0][2], 0x270F0A08, 0x060503FC, 0xF508FCEE, 0x16E3FFFC);
	r2 = D(r2, s[0][0][2], 0x011100FD, 0xE3FFF5FD, 0xF3FEF600, 0xFFEFFFFD);
	r3 = D(r3, s[0][0][2], 0xF2110605, 0xF30102FF, 0x11F40408, 0xE2080315);
	r0 = D(r0, s[0][1][0], 0x0A01FEF8, 0x020A09FD, 0xF604F107, 0xFCFE04FA);
	r1 = D(r1, s[0][1][0], 0x1F140006, 0xF80D0202, 0xE0F90AF4, 0x270C06F8);
	r2 = D(r2, s[0][1][0], 0x0302F10D, 0xEC0605FA, 0x0B0BF505, 0x10FDF3F5);
	r3 = D(r3, s[0][1][0], 0xFCE7FCFB, 0x24FF0308, 0x0901EDF9, 0x0314FDE4);
	r0 = D(r0, s[0][1][1], 0xF211F8F3, 0xDE08FAFF, 0xFDFBEC01, 0x02FF1100);
	r1 = D(r1, s[0][1][1], 0x0E0EEF0D, 0xF627ED11, 0x080AEAEE, 0xEFFC03FF);
	r2 = D(r2, s[0][1][1], 0x1BFB0A08, 0x32ED08EA, 0xF002FB00, 0x2DFA0206);
	r3 = D(r3, s[0][1][1], 0x08FEF8F8, 0xF900FFFC, 0xFAF5FA0C, 0x1A0A0F04);
	r0 = D(r0, s[0][1][2], 0x010A08FF, 0x0AF902F3, 0xFC050003, 0x1306F30E);
	r1 = D(r1, s[0][1][2], 0xF3F4F8DE, 0x050FF4EE, 0xDE040AEF, 0x2709FAEE);
	r2 = D(r2, s[0][1][2], 0x0F04040B, 0x1901F801, 0xE40308F2, 0x1AF6FA01);
	r3 = D(r3, s[0][1][2], 0xF50F09EC, 0xFDFEFCF0, 0xDC01F311, 0xEC0BF805);
	r0 = D(r0, s[0][2][0], 0xF3FFF8FE, 0x030D08F3, 0xF5060D04, 0x0703FD0B);
	r1 = D(r1, s[0][2][0], 0x01F109EF, 0xFC0E00FD, 0xFC0FF4F6, 0x07FF080D);
	r2 = D(r2, s[0][2][0], 0x0D0206FD, 0xFDFF000A, 0xF701FF03, 0xF80DFFF3);
	r3 = D(r3, s[0][2][0], 0xE7FFFFF6, 0x01FCF60F, 0x0304080D, 0x0703F9E2);
	r0 = D(r0, s[0][2][1], 0xF7FC0AF8, 0xEFFAFFEC, 0xFDFC0DFF, 0xF6FF03EC);
	r1 = D(r1, s[0][2][1], 0xE3FB0C05, 0xFE11FD01, 0xEEF401F3, 0xFDF9FDFE);
	r2 = D(r2, s[0][2][1], 0xDEF21BFA, 0xEAFCFCF4, 0xFFFA0400, 0xE7080EF8);
	r3 = D(r3, s[0][2][1], 0xF6F2FA03, 0xFBF3F30A, 0xFDFD1010, 0x2804F7EF);
	r0 = D(r0, s[0][2][2], 0x1CF8FFF5, 0xFA04F8F6, 0xEC06040A, 0x1F04ECFB);
	r1 = D(r1, s[0][2][2], 0xF20803EE, 0xF7E60801, 0x01F60FEF, 0x0AF3FD01);
	r2 = D(r2, s[0][2][2], 0xEA0B0209, 0x010304FF, 0x031103FD, 0xEA0D01F5);
	r3 = D(r3, s[0][2][2], 0x0C0D07F0, 0xF8F60908, 0x0F09FFFB, 0x1DFB0F0D);
	r0 = D(r0, s[1][0][0], 0xFF16FF01, 0x0B0F09FE, 0xFDFE0502, 0x04FC06F6);
	r1 = D(r1, s[1][0][0], 0x0601F7F4, 0xF7FFF7FA, 0xEE0B0AF5, 0xFBF80B00);
	r2 = D(r2, s[1][0][0], 0xF8061408, 0xFFF406F3, 0x04FDF4FC, 0xF30B0301);
	r3 = D(r3, s[1][0][0], 0x0104F604, 0x01FD0FFD, 0xFFF304FA, 0x1611F10A);
	r0 = D(r0, s[1][0][1], 0x03FBF3F2, 0x04FC0CF8, 0xF407FE03, 0xF4FF1C08);
	r1 = D(r1, s[1][0][1], 0x0A06D904, 0x010608FE, 0xFF0D0BFF, 0xF5FBF602);
	r2 = D(r2, s[1][0][1], 0x0D0F0103, 0xF70F0FFD, 0xFB0302F8, 0x0903050A);
	r3 = D(r3, s[1][0][1], 0x01FEFCF3, 0x04FF140B, 0x10F2FCF1, 0xED16F817);
	r0 = D(r0, s[1][0][2], 0xFDF7FFF6, 0xF7F604F5, 0x09F5FBFE, 0x03FC01EE);
	r1 = D(r1, s[1][0][2], 0x03F6F5FA, 0x030B0904, 0xFD02100F, 0x03F9FEF7);
	r2 = D(r2, s[1][0][2], 0xF8F61509, 0x0CFB0EF8, 0x08F8030B, 0xF6FC05FC);
	r3 = D(r3, s[1][0][2], 0x080703F3, 0xF600F5F5, 0xE401FCF7, 0x1508FAF3);
	r0 = D(r0, s[1][1][0], 0xF9F2EFFF, 0xFE10F4F1, 0xFA030908, 0xFE06FCFA);
	r1 = D(r1, s[1][1][0], 0x0FFA0BFA, 0xF6FFFF0E, 0xFD15F403, 0x00F000F2);
	r2 = D(r2, s[1][1][0], 0xFDF914FF, 0x01E5FBF3, 0x05F60107, 0x0307FAFC);
	r3 = D(r3, s[1][1][0], 0xFC06FDF6, 0xF6F50101, 0x0BEEFF0E, 0x08160104);
	r0 = D(r0, s[1][1][1], 0x00F9F7FA, 0x030BFCE9, 0x15070B12, 0x020605FB);
	r1 = D(r1, s[1][1][1], 0xF7F90900, 0x0004E7FA, 0xFB0401FF, 0xF2F5FD03);
	r2 = D(r2, s[1][1][1], 0xF80EF8EC, 0xF319FDE2, 0x0FF4FFFF, 0x000EF8EE);
	r3 = D(r3, s[1][1][1], 0xF9FBFC0B, 0xFCFA03FC, 0x07080407, 0xF1FFFA08);
	r0 = D(r0, s[1][1][2], 0xF5F3EF04, 0xF50D0B0A, 0x0205040D, 0xEEF8F7EC);
	r1 = D(r1, s[1][1][2], 0x16041105, 0xF6FA0228, 0x02001506, 0xFCF2F60C);
	r2 = D(r2, s[1][1][2], 0x0706F8F8, 0x010DF9F1, 0xFAFAFA0A, 0xFEFCFCF8);
	r3 = D(r3, s[1][1][2], 0x02FCF612, 0x0607FFF2, 0xFA0305F8, 0x110DFFFF);
	r0 = D(r0, s[1][2][0], 0xFFF8FEF5, 0xF900F3F8, 0x05080804, 0xFC04030A);
	r1 = D(r1, s[1][2][0], 0xF4FC0EF3, 0x0803FF03, 0xFC08F913, 0xFEFCEE08);
	r2 = D(r2, s[1][2][0], 0xFF050102, 0x09FFFFF0, 0xFFF7F905, 0xFC13F103);
	r3 = D(r3, s[1][2][0], 0xF7FC02FC, 0xFBF40600, 0xF4EFF608, 0x0211F7FC);
	r0 = D(r0, s[1][2][1], 0x0003FA08, 0x140A07EA, 0x0A1FF5FD, 0xFF03FEFD);
	r1 = D(r1, s[1][2][1], 0xF61DFB04, 0xFDFF03EB, 0xF91103F6, 0xFD0BEA05);
	r2 = D(r2, s[1][2][1], 0x0808F210, 0x030416FE, 0xFD08FA05, 0x16F6F505);
	r3 = D(r3, s[1][2][1], 0xFEF8F0FE, 0x020CF104, 0x07F6FF02, 0x0107ECFF);
	r0 = D(r0, s[1][2][2], 0xF5FDFAFF, 0xFAFDFDFF, 0x08F30100, 0x01EC0B03);
	r1 = D(r1, s[1][2][2], 0xF1FFFCFC, 0x080BF6E8, 0x04F81103, 0xFD0EFAF7);
	r2 = D(r2, s[1][2][2], 0x07F10408, 0xF7EFFF08, 0x03080004, 0x11EE00FF);
	r3 = D(r3, s[1][2][2], 0xFAF30101, 0xF7FD04F1, 0xF1EF100D, 0xECFC0AF4);
	s[0][0][0] = G[2][xy.y+0][xy.x+0]; s[0][0][1] = G[2][xy.y+0][xy.x+1];
	s[0][0][2] = G[2][xy.y+0][xy.x+2]; s[0][1][0] = G[2][xy.y+1][xy.x+0];
	s[0][1][1] = G[2][xy.y+1][xy.x+1]; s[0][1][2] = G[2][xy.y+1][xy.x+2];
	s[0][2][0] = G[2][xy.y+2][xy.x+0]; s[0][2][1] = G[2][xy.y+2][xy.x+1];
	s[0][2][2] = G[2][xy.y+2][xy.x+2]; s[1][0][0] = G[3][xy.y+0][xy.x+0];
	s[1][0][1] = G[3][xy.y+0][xy.x+1]; s[1][0][2] = G[3][xy.y+0][xy.x+2];
	s[1][1][0] = G[3][xy.y+1][xy.x+0]; s[1][1][1] = G[3][xy.y+1][xy.x+1];
	s[1][1][2] = G[3][xy.y+1][xy.x+2]; s[1][2][0] = G[3][xy.y+2][xy.x+0];
	s[1][2][1] = G[3][xy.y+2][xy.x+1]; s[1][2][2] = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0x0AE7010A, 0x0A1AFDF7, 0xEEF6EB03, 0xF8010301);
	r1 = D(r1, s[0][0][0], 0x19F608EF, 0xF4E70508, 0x03FD000E, 0x09FB03FD);
	r2 = D(r2, s[0][0][0], 0xED04000E, 0x0FEF0EF8, 0x07160BFE, 0xFA0704F3);
	r3 = D(r3, s[0][0][0], 0x090EF5F6, 0xF8F607FE, 0xFDFC06F9, 0x03190B05);
	r0 = D(r0, s[0][0][1], 0x00E50BFF, 0x08FC0003, 0x03FAFF04, 0x0AFA08FE);
	r1 = D(r1, s[0][0][1], 0x00090609, 0x0BFCF41A, 0x122CFB05, 0x03F8FCFE);
	r2 = D(r2, s[0][0][1], 0xF1EBF5FE, 0xF5010FFF, 0xFE0C03F8, 0x0519F800);
	r3 = D(r3, s[0][0][1], 0x1DFDFF0B, 0x0BF60801, 0x0412EFF1, 0x01F20F02);
	r0 = D(r0, s[0][0][2], 0x04FD08E7, 0x05F10BF3, 0xFDF10A03, 0xFDEC01FF);
	r1 = D(r1, s[0][0][2], 0x0C030B07, 0xF1FD02FA, 0x0C0912F3, 0xFAFBF903);
	r2 = D(r2, s[0][0][2], 0x01010B08, 0xFEFEF511, 0x04010D09, 0x0311FB14);
	r3 = D(r3, s[0][0][2], 0xFCF608F8, 0xFB0AFB01, 0x0109F50B, 0x0A16FC03);
	r0 = D(r0, s[0][1][0], 0xEDFA01FF, 0xFA03F90D, 0x0AF0FD08, 0xFCF10F03);
	r1 = D(r1, s[0][1][0], 0xF8D4ED10, 0xFB00FEFF, 0xFAEE0404, 0x0A06F501);
	r2 = D(r2, s[0][1][0], 0x0304ECFF, 0xF8F6F9F1, 0x08FF0507, 0xFB0106FC);
	r3 = D(r3, s[0][1][0], 0xF8EF09F5, 0x0BE8030B, 0xFB11FBFF, 0x0804EEF7);
	r0 = D(r0, s[0][1][1], 0xEAF10205, 0x09F2F9F7, 0xFA0D0EF0, 0x0807F603);
	r1 = D(r1, s[0][1][1], 0x0603F51B, 0xFF0D01EE, 0x0820FAFB, 0x08080808);
	r2 = D(r2, s[0][1][1], 0x1606F8F4, 0x0C1100FD, 0x0EF1F60D, 0x0DFBEE0D);
	r3 = D(r3, s[0][1][1], 0x0AE516F9, 0x0107F101, 0xF2EBF202, 0xFCF30AF8);
	r0 = D(r0, s[0][1][2], 0xFD22F4FC, 0x0008F9FD, 0x0A07F8F2, 0x05120401);
	r1 = D(r1, s[0][1][2], 0x0D27FBFE, 0x0B00060D, 0xF1FEFDEC, 0xFF0010FD);
	r2 = D(r2, s[0][1][2], 0xF4EAFBF3, 0x18041208, 0xFDF6FB09, 0xFC230AFF);
	r3 = D(r3, s[0][1][2], 0x00FAEC09, 0x01FD08FF, 0x0003FAF8, 0xFFF2FA03);
	r0 = D(r0, s[0][2][0], 0xF406F6EC, 0xF3030D01, 0xF6EC0F06, 0x08010306);
	r1 = D(r1, s[0][2][0], 0x0500FDF8, 0x0612F6FC, 0x0FF5020B, 0xE5EE0108);
	r2 = D(r2, s[0][2][0], 0x0312F9FC, 0x0C03FCF2, 0x0204FDF5, 0xFFF2F0FF);
	r3 = D(r3, s[0][2][0], 0xFCFEFA08, 0xFDF303FC, 0xEEF30F06, 0x06F004F1);
	r0 = D(r0, s[0][2][1], 0x08E80215, 0xF8FCF914, 0x0B14F6F2, 0x00F3FDFB);
	r1 = D(r1, s[0][2][1], 0xF71C03FA, 0xFDFC01F2, 0xF6180603, 0xFF09F0FB);
	r2 = D(r2, s[0][2][1], 0x19FD14EE, 0xF8FDFC09, 0x0EF6030A, 0x04EE0D07);
	r3 = D(r3, s[0][2][1], 0x06FAF4F1, 0x01F3FD03, 0x14FE0B06, 0xEB0904FC);
	r0 = D(r0, s[0][2][2], 0xF914F2FE, 0xFDF90008, 0x020C0803, 0xFAFFF5F8);
	r1 = D(r1, s[0][2][2], 0xF4E8FFF3, 0x04000A08, 0xF2FAF3F5, 0xFA07F9FF);
	r2 = D(r2, s[0][2][2], 0xF6060604, 0x04FDFAFF, 0x0109040B, 0x0AF4FFFA);
	r3 = D(r3, s[0][2][2], 0xF8ECFE0A, 0xFF0709F8, 0x03F90B06, 0xF804FDFF);
	r0 = D(r0, s[1][0][0], 0x12060FFD, 0xF00C0A13, 0x0BFA04F8, 0xFDF50805);
	r1 = D(r1, s[1][0][0], 0x15EF10FD, 0x01080401, 0xF5FEF80A, 0x0A06F1FC);
	r2 = D(r2, s[1][0][0], 0xFE05F800, 0x0DF6E713, 0xFFE501FD, 0x04FDDBFF);
	r3 = D(r3, s[1][0][0], 0xF80618F7, 0xFAECFDFD, 0xEE1BDBEC, 0x05F6FB17);
	r0 = D(r0, s[1][0][1], 0x0D060AFA, 0xFFF0F1F2, 0xF2FC0904, 0x0A0BF40D);
	r1 = D(r1, s[1][0][1], 0x18040B11, 0x0304FF06, 0x1DFC31F7, 0xE80AF914);
	r2 = D(r2, s[1][0][1], 0xFB1DFA0A, 0xF1F9ECD7, 0x04F813F9, 0xF8FA14FA);
	r3 = D(r3, s[1][0][1], 0x060F04DE, 0x01FD050F, 0x1819EEF8, 0x01F5F30B);
	r0 = D(r0, s[1][0][2], 0xFCF3ECED, 0xF514E727, 0x0F07E80A, 0xFA0A0406);
	r1 = D(r1, s[1][0][2], 0x12FEE6F8, 0xFCFFF902, 0xFAFDE908, 0xFFF1141B);
	r2 = D(r2, s[1][0][2], 0x06F619DD, 0x0B060FF4, 0xFFFAFA06, 0xEDFBF804);
	r3 = D(r3, s[1][0][2], 0x0F0006FE, 0xF9EFF818, 0xFE1FE4F3, 0xF9EE1DD9);
	r0 = D(r0, s[1][1][0], 0x06020907, 0x0EEA0104, 0x100419EA, 0xF70DEFF7);
	r1 = D(r1, s[1][1][0], 0x1FFD02F8, 0x03F9F8F9, 0xFAFDE31B, 0x0B1919F8);
	r2 = D(r2, s[1][1][0], 0x04F314FC, 0x0A00FD11, 0x0B03F001, 0x0E06FD10);
	r3 = D(r3, s[1][1][0], 0x0601FEF0, 0x0DFF04FC, 0xFFFE0111, 0xFF040218);
	r0 = D(r0, s[1][1][1], 0x06FD03F8, 0x0406DCEE, 0xF1FBD3E5, 0xF1000D01);
	r1 = D(r1, s[1][1][1], 0xF5142435, 0x0A09161B, 0xECF3BCE6, 0xF5F6E5E2);
	r2 = D(r2, s[1][1][1], 0xF50AF3F0, 0x06F310FF, 0xEA092501, 0x080A0BF4);
	r3 = D(r3, s[1][1][1], 0xF503E118, 0xFAEEFDF3, 0x04FDF1E5, 0x080AFFFC);
	r0 = D(r0, s[1][1][2], 0xF0011DEF, 0xF001F814, 0x06FEFA06, 0xF60326E6);
	r1 = D(r1, s[1][1][2], 0xF9EFFAFD, 0xF6010213, 0x0DF904E6, 0x07FF0212);
	r2 = D(r2, s[1][1][2], 0xF101F80F, 0xF307FA00, 0x0002E2FF, 0xFCFE00EF);
	r3 = D(r3, s[1][1][2], 0x03100800, 0xFDF8EAF3, 0x04060BE8, 0x01FFF9E9);
	r0 = D(r0, s[1][2][0], 0x00F50216, 0x12FEE016, 0xF80DF4F8, 0x04FF1910);
	r1 = D(r1, s[1][2][0], 0xF80604FF, 0x06FC0509, 0x01080722, 0x18070A08);
	r2 = D(r2, s[1][2][0], 0x0FFEEB03, 0xF1010501, 0x0D06070C, 0x1503E808);
	r3 = D(r3, s[1][2][0], 0x07080DE6, 0xFF011103, 0xFC0105EE, 0x0706E201);
	r0 = D(r0, s[1][2][1], 0xF40418EE, 0x01F3E718, 0xFBF81301, 0x05190101);
	r1 = D(r1, s[1][2][1], 0x00FF1203, 0xF0070A1C, 0x00FCE7BF, 0xF601FEFE);
	r2 = D(r2, s[1][2][1], 0xF507F2F5, 0xFC04F3E3, 0xF6F51301, 0x0108D305);
	r3 = D(r3, s[1][2][1], 0xF103EAEF, 0xF4FF14FE, 0xFDEE16F6, 0xFC0104E6);
	r0 = D(r0, s[1][2][2], 0xF404E604, 0xF506182C, 0xFD0A0BEA, 0x00F8E3E0);
	r1 = D(r1, s[1][2][2], 0xE20B0816, 0xFC010843, 0xF807FD01, 0xFCFD0008);
	r2 = D(r2, s[1][2][2], 0x01F6E8D0, 0xF4FE0CE7, 0xF90BFD05, 0x0312F91E);
	r3 = D(r3, s[1][2][2], 0xFD0BFEFC, 0xFAFB0807, 0x03FA180A, 0x05FDEAF0);
	s[0][0][0] = G[4][xy.y+0][xy.x+0]; s[0][0][1] = G[4][xy.y+0][xy.x+1];
	s[0][0][2] = G[4][xy.y+0][xy.x+2]; s[0][1][0] = G[4][xy.y+1][xy.x+0];
	s[0][1][1] = G[4][xy.y+1][xy.x+1]; s[0][1][2] = G[4][xy.y+1][xy.x+2];
	s[0][2][0] = G[4][xy.y+2][xy.x+0]; s[0][2][1] = G[4][xy.y+2][xy.x+1];
	s[0][2][2] = G[4][xy.y+2][xy.x+2]; s[1][0][0] = G[5][xy.y+0][xy.x+0];
	s[1][0][1] = G[5][xy.y+0][xy.x+1]; s[1][0][2] = G[5][xy.y+0][xy.x+2];
	s[1][1][0] = G[5][xy.y+1][xy.x+0]; s[1][1][1] = G[5][xy.y+1][xy.x+1];
	s[1][1][2] = G[5][xy.y+1][xy.x+2]; s[1][2][0] = G[5][xy.y+2][xy.x+0];
	s[1][2][1] = G[5][xy.y+2][xy.x+1]; s[1][2][2] = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0x0DF90F22, 0xFA04ECD0, 0xF5030412, 0xF108FA08);
	r1 = D(r1, s[0][0][0], 0x0BF6F6D5, 0x0D020D20, 0xE211FC29, 0xF000FE41);
	r2 = D(r2, s[0][0][0], 0xEE09F0F1, 0x17F2FD29, 0xFDE8ECEA, 0xFAFF0A1E);
	r3 = D(r3, s[0][0][0], 0x0EF9FAE4, 0xEE0B02F6, 0xF4FDF620, 0x00FCFAF5);
	r0 = D(r0, s[0][0][1], 0x19FA01F3, 0x0A06FD0F, 0xFF17F9F6, 0xE411FF05);
	r1 = D(r1, s[0][0][1], 0x110B04F5, 0x0F120AF6, 0xF308F72E, 0xF503FA12);
	r2 = D(r2, s[0][0][1], 0x150E011B, 0xF3E1FDEA, 0xF60BF916, 0x0F0601EF);
	r3 = D(r3, s[0][0][1], 0x2216F8EE, 0xFAFFF808, 0xF2F5F403, 0xE0EC120C);
	r0 = D(r0, s[0][0][2], 0xEC0C0B21, 0xF30D1229, 0xF40D0702, 0xEEFEF819);
	r1 = D(r1, s[0][0][2], 0xF2E503E8, 0xEC1705EA, 0x1403FF1C, 0x0806E9E0);
	r2 = D(r2, s[0][0][2], 0xEEFE102B, 0x01F50403, 0x0111FC0A, 0x24060BEB);
	r3 = D(r3, s[0][0][2], 0xF818F219, 0xEE0F0615, 0xECF8FD3C, 0x120FF40F);
	r0 = D(r0, s[0][1][0], 0x010504E8, 0xF6F5F50D, 0xE2FB01E3, 0xFDFDFD24);
	r1 = D(r1, s[0][1][0], 0xF802F922, 0x0D04020C, 0xFA040B03, 0xF4EC0715);
	r2 = D(r2, s[0][1][0], 0xEBFDF829, 0x0803013F, 0xFA01F3EE, 0x08FEFD09);
	r3 = D(r3, s[0][1][0], 0x0AF10140, 0xECF9FC11, 0x03F3FD0B, 0xF2080AEF);
	r0 = D(r0, s[0][1][1], 0x04FD044A, 0xE7EE1523, 0x16EFFFF9, 0xEA07FC0B);
	r1 = D(r1, s[0][1][1], 0x16100415, 0x1109F8F2, 0xFBFDF315, 0x15F3FA33);
	r2 = D(r2, s[0][1][1], 0x0AF3F1F7, 0x030705E8, 0xEE0501AC, 0xF9FDF81E);
	r3 = D(r3, s[0][1][1], 0x3212F632, 0x09FCF9FF, 0xFCFA0D02, 0xE3ECF8F6);
	r0 = D(r0, s[0][1][2], 0x19FA0D0B, 0x09F50009, 0xF7ED0812, 0xFFFD02DB);
	r1 = D(r1, s[0][1][2], 0x0D01130A, 0xF004F832, 0xEFF706FC, 0x0BF90A16);
	r2 = D(r2, s[0][1][2], 0xF701FDE9, 0xF1FA06D9, 0x0B0AF306, 0x0AF0FCFD);
	r3 = D(r3, s[0][1][2], 0xE1F9FCEE, 0x030AF81D, 0xFAFC0B20, 0x1108F4F4);
	r0 = D(r0, s[0][2][0], 0xDC07F60B, 0xF202F3F8, 0x0F0904EB, 0xFA00FFF0);
	r1 = D(r1, s[0][2][0], 0xF30C0AFF, 0xF8F9EF00, 0x13FD0DB5, 0x0602FFDC);
	r2 = D(r2, s[0][2][0], 0x0DFFFF18, 0xDE0DF814, 0x1703061B, 0x01F50317);
	r3 = D(r3, s[0][2][0], 0xEE0A0600, 0xF80307F8, 0xEFFA0BC2, 0xEE06F70E);
	r0 = D(r0, s[0][2][1], 0xFBF8FE16, 0xF702F31B, 0xEEEF03F7, 0x03F1032B);
	r1 = D(r1, s[0][2][1], 0x06040822, 0x01FD00FF, 0x0601FDE4, 0xE5F804F6);
	r2 = D(r2, s[0][2][1], 0x0C04FBE0, 0x07F3F5EE, 0x0AFDF301, 0x0AF90004);
	r3 = D(r3, s[0][2][1], 0x0DF20403, 0x06F7ED00, 0xEE02FD03, 0x08FDFA16);
	r0 = D(r0, s[0][2][2], 0x0E0108F2, 0xEC00000F, 0x0401FD0B, 0x0009F30B);
	r1 = D(r1, s[0][2][2], 0xFDFD01D4, 0x01F20612, 0x1DF7FDEF, 0xFDFC08E3);
	r2 = D(r2, s[0][2][2], 0xFC04F4FC, 0xEDFC03F3, 0x0F060CEF, 0xEF04F303);
	r3 = D(r3, s[0][2][2], 0xEAFFFE08, 0xF6040502, 0xEDFD0414, 0x0AF504E7);
	r0 = D(r0, s[1][0][0], 0xFDED1DF5, 0xFD0A0BFC, 0xFE06FBEC, 0xFC0D0804);
	r1 = D(r1, s[1][0][0], 0xFDFC1C0D, 0xFFFFFFF6, 0x08110114, 0x05FAFD04);
	r2 = D(r2, s[1][0][0], 0x0F0DFA0A, 0x0900FFF1, 0xFA0BFEFC, 0x16FD08FA);
	r3 = D(r3, s[1][0][0], 0x02FC04F6, 0xED0A03F6, 0x06FC110E, 0xF9F1FDE2);
	r0 = D(r0, s[1][0][1], 0x06F11B07, 0x060B04F6, 0x04E70B03, 0x0112FAF6);
	r1 = D(r1, s[1][0][1], 0x08070D06, 0x011DF905, 0x06FEFEF2, 0xFDE7F7FD);
	r2 = D(r2, s[1][0][1], 0xFA00FC04, 0x0DF714EE, 0xFD070B07, 0xF6FEFEF7);
	r3 = D(r3, s[1][0][1], 0xFFFEEE08, 0x01FD03EA, 0x101E11FB, 0x0CF1F2E3);
	r0 = D(r0, s[1][0][2], 0xF3F80806, 0xFF1803FD, 0x0101FDF6, 0xFD0DFC03);
	r1 = D(r1, s[1][0][2], 0xF30B09F5, 0x000DEE05, 0xF60F0F09, 0x0A11FF08);
	r2 = D(r2, s[1][0][2], 0x020B0BFF, 0x0807F5FB, 0x0B03F6EA, 0xFBFC0FF4);
	r3 = D(r3, s[1][0][2], 0x02FA0B0A, 0xFA100301, 0x010A02FE, 0xEEF80009);
	r0 = D(r0, s[1][1][0], 0x130F07ED, 0xFD07F103, 0xFFFAF602, 0x020A04F5);
	r1 = D(r1, s[1][1][0], 0x0FFF07F8, 0xF801F803, 0x0EE7EEF9, 0x02F9F30D);
	r2 = D(r2, s[1][1][0], 0x1405F504, 0xFCEEFDFD, 0x09FB02FB, 0x0CFFFF06);
	r3 = D(r3, s[1][1][0], 0xFDF40706, 0x08020201, 0xFC05F8FB, 0xFF040612);
	r0 = D(r0, s[1][1][1], 0x05080602, 0xFC0719FF, 0xEB0F00F1, 0xFCF8F8F2);
	r1 = D(r1, s[1][1][1], 0x08120801, 0xF8EE0BF9, 0xF1FF01E4, 0x0607F601);
	r2 = D(r2, s[1][1][1], 0x0A02EFEE, 0xF5F71209, 0xFCF3FAFD, 0x01DA01FE);
	r3 = D(r3, s[1][1][1], 0xFD130704, 0xFE000B06, 0xFF10F6FC, 0x11F2E301);
	r0 = D(r0, s[1][1][2], 0xFCF5EE01, 0xFBED0008, 0xFA0ADB11, 0xFF15F801);
	r1 = D(r1, s[1][1][2], 0xF713F6F8, 0xF51205FD, 0xF8FAF100, 0x120FFF0E);
	r2 = D(r2, s[1][1][2], 0x04110107, 0x01010C06, 0xF4FBF3F7, 0xF6F6080C);
	r3 = D(r3, s[1][1][2], 0x0F0B0300, 0xF6050301, 0xFC0BFF0B, 0xFA0308F3);
	r0 = D(r0, s[1][2][0], 0x03060D02, 0x0803FFFA, 0xFBF5F90F, 0x00FC00FB);
	r1 = D(r1, s[1][2][0], 0xFEE204F7, 0x08F50309, 0xED0505FC, 0xFEFAFD00);
	r2 = D(r2, s[1][2][0], 0x00070212, 0xFFF805FA, 0x00FAF500, 0x0106F618);
	r3 = D(r3, s[1][2][0], 0xFAFAFFF8, 0xFC06EFFF, 0x01FDFCEA, 0xFFF0FDFC);
	r0 = D(r0, s[1][2][1], 0xF7FAF800, 0xF8040A02, 0x0804FF06, 0x03FAFA03);
	r1 = D(r1, s[1][2][1], 0x0E070406, 0x0807FF0A, 0xFDF81108, 0x01060BFE);
	r2 = D(r2, s[1][2][1], 0xF805FDFB, 0xFAF9FC02, 0x12FD00FC, 0xFCFD0305);
	r3 = D(r3, s[1][2][1], 0xFD08ED04, 0xFE090BFF, 0xFDFF0A06, 0xFDF40601);
	r0 = D(r0, s[1][2][2], 0xF91408FB, 0x01141108, 0xF5FF0206, 0xF9FB1400);
	r1 = D(r1, s[1][2][2], 0x0109FCFF, 0x0DFBEFF6, 0x04FF0601, 0x04F3E306);
	r2 = D(r2, s[1][2][2], 0xFD14FD00, 0xF00C04FE, 0x03F60408, 0x07070301);
	r3 = D(r3, s[1][2][2], 0xF9E902F7, 0x0FFC03F7, 0xFCFC04FB, 0xF6FF0902);
	s[0][0][0] = G[6][xy.y+0][xy.x+0]; s[0][0][1] = G[6][xy.y+0][xy.x+1];
	s[0][0][2] = G[6][xy.y+0][xy.x+2]; s[0][1][0] = G[6][xy.y+1][xy.x+0];
	s[0][1][1] = G[6][xy.y+1][xy.x+1]; s[0][1][2] = G[6][xy.y+1][xy.x+2];
	s[0][2][0] = G[6][xy.y+2][xy.x+0]; s[0][2][1] = G[6][xy.y+2][xy.x+1];
	s[0][2][2] = G[6][xy.y+2][xy.x+2]; s[1][0][0] = G[7][xy.y+0][xy.x+0];
	s[1][0][1] = G[7][xy.y+0][xy.x+1]; s[1][0][2] = G[7][xy.y+0][xy.x+2];
	s[1][1][0] = G[7][xy.y+1][xy.x+0]; s[1][1][1] = G[7][xy.y+1][xy.x+1];
	s[1][1][2] = G[7][xy.y+1][xy.x+2]; s[1][2][0] = G[7][xy.y+2][xy.x+0];
	s[1][2][1] = G[7][xy.y+2][xy.x+1]; s[1][2][2] = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0xFCF5FA0C, 0x003DFDF8, 0xFBCD0D08, 0x04070700);
	r1 = D(r1, s[0][0][0], 0xF301F4FE, 0xF50311FA, 0x091D0207, 0x0834FC0A);
	r2 = D(r2, s[0][0][0], 0xFA0B04FA, 0xF400F70B, 0x12D20704, 0xFCFA01F9);
	r3 = D(r3, s[0][0][0], 0x030B08F7, 0xF705F906, 0xD0D2F302, 0xF4EEFCFD);
	r0 = D(r0, s[0][0][1], 0x151C0504, 0x060BEFF8, 0xF9FAFD12, 0x03110CFE);
	r1 = D(r1, s[0][0][1], 0x01F802F8, 0x11EC0601, 0xF105F5F8, 0xEE3DFDFC);
	r2 = D(r2, s[0][0][1], 0x05FFF50B, 0x0DF8F5FE, 0xF3D60BFB, 0xFBFFFE03);
	r3 = D(r3, s[0][0][1], 0xF60AFC06, 0xFF18F604, 0xF8B4FD0F, 0xE0F1FF11);
	r0 = D(r0, s[0][0][2], 0x1007FBFF, 0xEE03FBFA, 0x0AEC0704, 0xF62B0501);
	r1 = D(r1, s[0][0][2], 0x03DFFF00, 0xFDFD020A, 0x1ADFF809, 0xF62B0B06);
	r2 = D(r2, s[0][0][2], 0x05EAFCFD, 0xE4100DF6, 0xE3EBFB07, 0xFFEA0116);
	r3 = D(r3, s[0][0][2], 0xF0EAFCF7, 0xFC20FEFC, 0xE8EC04FC, 0x0D120301);
	r0 = D(r0, s[0][1][0], 0x2E0204FD, 0xF3240104, 0x1B15F602, 0x02FA0403);
	r1 = D(r1, s[0][1][0], 0x140B040C, 0x19050102, 0x2BD51105, 0x24F8EA0B);
	r2 = D(r2, s[0][1][0], 0x0BECF7FA, 0xEAF30608, 0x0CDF03F5, 0x2B0FF211);
	r3 = D(r3, s[0][1][0], 0xFD29EA01, 0x0D0CECFA, 0xE7E4F5F4, 0xF5EA0807);
	r0 = D(r0, s[0][1][1], 0xE2450400, 0xF82BFD06, 0xEF2BFBEE, 0xF4FD02FB);
	r1 = D(r1, s[0][1][1], 0xE71E0400, 0x2BE3FD09, 0xFAF0F0FB, 0x1927EAF6);
	r2 = D(r2, s[0][1][1], 0xF80F06E0, 0xE01604F6, 0x0BB4F617, 0x08FFFC09);
	r3 = D(r3, s[0][1][1], 0xC233F3F1, 0xEE26FD06, 0xD7CC06FB, 0x07D0FBF2);
	r0 = D(r0, s[0][1][2], 0x1B1CF9F3, 0x1411FCFD, 0x0AECFDEB, 0x2E0F080D);
	r1 = D(r1, s[0][1][2], 0x0AEEF10A, 0xFCF600F4, 0xFDEC00F5, 0xF6140101);
	r2 = D(r2, s[0][1][2], 0x1DFEFD0E, 0xFDFDEC00, 0x08EFF3FF, 0x1B0CF8FB);
	r3 = D(r3, s[0][1][2], 0xFD18F301, 0xF516030A, 0xF2DF0313, 0xF51B04F2);
	r0 = D(r0, s[0][2][0], 0xACD7FC04, 0xEA000004, 0x44FB0EF8, 0x39FBFBFD);
	r1 = D(r1, s[0][2][0], 0x4D2CFAEF, 0x0FFF0601, 0x0AEA0AF8, 0x1414030D);
	r2 = D(r2, s[0][2][0], 0xF2FCFF0B, 0x05E1EE02, 0x12F70403, 0x1FEE0D04);
	r3 = D(r3, s[0][2][0], 0xF619F303, 0x40FBF0EF, 0xEAEAF212, 0xB8E8060A);
	r0 = D(r0, s[0][2][1], 0x3E2DF3EE, 0xF51D0EEE, 0x32F20006, 0x37FB03F8);
	r1 = D(r1, s[0][2][1], 0xFD11F604, 0xD1FFEF04, 0xE0030307, 0xEB09F40A);
	r2 = D(r2, s[0][2][1], 0xF81E010F, 0xFB100C0A, 0xF7F1FE09, 0x10F3140D);
	r3 = D(r3, s[0][2][1], 0xE506FA00, 0x0B1CF606, 0x1A0A040A, 0xE2E00019);
	r0 = D(r0, s[0][2][2], 0xFFE0F108, 0xFFFAFAF5, 0xF10B0408, 0xEE0A0406);
	r1 = D(r1, s[0][2][2], 0x0B0B0B01, 0x07FCF508, 0xF5200611, 0x1916F604);
	r2 = D(r2, s[0][2][2], 0xD7E7F403, 0x0F07FDFD, 0xE10103FD, 0x11E908F7);
	r3 = D(r3, s[0][2][2], 0xE3E6090B, 0x180BEF01, 0x01DDF8EF, 0xEB04F401);
	r0 = D(r0, s[1][0][0], 0xEB0B04E8, 0x0BFB0318, 0xFD060AFD, 0xFF0A0016);
	r1 = D(r1, s[1][0][0], 0xFFF8D2EA, 0xFC06EF0C, 0xFBFDF70B, 0xF3091BFF);
	r2 = D(r2, s[1][0][0], 0x01FA190B, 0xF60311F2, 0x0A050315, 0xF70F2BFD);
	r3 = D(r3, s[1][0][0], 0x03FBD50D, 0x10F80D09, 0xFE0AED0D, 0xFAFDFDFA);
	r0 = D(r0, s[1][0][1], 0xF30DFB05, 0xEEFDF610, 0xFE0614FB, 0x06FE270E);
	r1 = D(r1, s[1][0][1], 0x030F09E8, 0xFD0FF307, 0x13F2F2EC, 0x0403FD1E);
	r2 = D(r2, s[1][0][1], 0xEF0AFDEE, 0xF2F61314, 0x03FFEC02, 0xFCE507FE);
	r3 = D(r3, s[1][0][1], 0x0CF1F6EF, 0xFD0DF60A, 0xF8FA02F2, 0x0DF80018);
	r0 = D(r0, s[1][0][2], 0xFC00051D, 0x01FCFA06, 0xFEFAF815, 0x0908F801);
	r1 = D(r1, s[1][0][2], 0x0201FF1E, 0x00EA020C, 0x08FF1706, 0xFA05F8F9);
	r2 = D(r2, s[1][0][2], 0x0E0408E8, 0x03F606F1, 0x08FD0016, 0xEF06FB0A);
	r3 = D(r3, s[1][0][2], 0xFE0A03ED, 0x03FFFEFB, 0x01EAEAE8, 0x080300F6);
	r0 = D(r0, s[1][1][0], 0x060A2202, 0x01F60DF1, 0x06F420FF, 0xF8F60C04);
	r1 = D(r1, s[1][1][0], 0xFF0606EF, 0xF501FD04, 0xFC0FC4F3, 0xFA081BEF);
	r2 = D(r2, s[1][1][0], 0xED0317EC, 0x0914F501, 0x0600CEFA, 0x08F32DF3);
	r3 = D(r3, s[1][1][0], 0xEFF22FFC, 0x07FF1209, 0xFA0BF8EA, 0x0101DC01);
	r0 = D(r0, s[1][1][1], 0x0F04FE12, 0x10050AFA, 0x13F81135, 0x0B08FD06);
	r1 = D(r1, s[1][1][1], 0xFB03E3F5, 0xF80B04F1, 0xEFF1F11B, 0xFE0A0403);
	r2 = D(r2, s[1][1][1], 0xF8F9E203, 0x04070411, 0xF103ECF8, 0xFD03180B);
	r3 = D(r3, s[1][1][1], 0x0DFA1410, 0xF5FC1811, 0xF5EF01F6, 0xECF9FFF6);
	r0 = D(r0, s[1][1][2], 0xEFFAFA13, 0x0301F40A, 0xF2F0EC0D, 0xEE08EA04);
	r1 = D(r1, s[1][1][2], 0xEC02FA0B, 0x1EEDEFEC, 0x0803FA11, 0xF3F6F822);
	r2 = D(r2, s[1][1][2], 0xFF13E4FB, 0x01F80E05, 0x040606F1, 0x0F0A0F16);
	r3 = D(r3, s[1][1][2], 0x03060613, 0x03F200F6, 0xFE0004FD, 0xFDFAFFE5);
	r0 = D(r0, s[1][2][0], 0x08F8E8F9, 0x0300EFF1, 0x15F5EC01, 0x08041D04);
	r1 = D(r1, s[1][2][0], 0x0D082006, 0x0400160D, 0x1412F127, 0x06FD0E01);
	r2 = D(r2, s[1][2][0], 0x06F813FC, 0x1212F6F6, 0x02F9F812, 0x0204FFE9);
	r3 = D(r3, s[1][2][0], 0x0C0A0E08, 0x04030614, 0x08EB04F6, 0xFA08DEF7);
	r0 = D(r0, s[1][2][1], 0x0305060A, 0xFA1501FB, 0xFC11200B, 0x01FF0106);
	r1 = D(r1, s[1][2][1], 0xFF080BFA, 0x03060FF5, 0x0104EC1C, 0x12FC0EEF);
	r2 = D(r2, s[1][2][1], 0x07FED9F2, 0x0305E008, 0x100CFAFC, 0x0803C913);
	r3 = D(r3, s[1][2][1], 0xF8FCEC08, 0xF6FA0F03, 0xF7FC0BF1, 0xF80601F5);
	r0 = D(r0, s[1][2][2], 0xFF0BF8F6, 0xFC1B11FF, 0xFF080D0E, 0x0D07FDFC);
	r1 = D(r1, s[1][2][2], 0x0AFD0F03, 0xF3F903EC, 0xFDFD040D, 0x050D06FF);
	r2 = D(r2, s[1][2][2], 0x060A04FA, 0xF806F803, 0x03051904, 0x06F3E6FA);
	r3 = D(r3, s[1][2][2], 0x06F7EE06, 0x0F080AF6, 0x070EFCF7, 0x0B090F07);
	vec4 f0 = vec4(r0) * 6.20001240e-05;
	f0 += vec4(7.772e-02, 2.211e-02, -1.420e-02, -1.944e-01);
	imageStore(out_image, opos + ivec2(0, 0), vec4(f0));
	vec4 f1 = vec4(r1) * 6.20001240e-05;
	f1 += vec4(-5.194e-02, -3.604e-02, 1.222e-02, 4.252e-02);
	imageStore(out_image, opos + ivec2(1, 0), vec4(f1));
	vec4 f2 = vec4(r2) * 6.20001240e-05;
	f2 += vec4(2.301e-02, 1.155e-01, -1.158e-02, -9.110e-02);
	imageStore(out_image, opos + ivec2(0, 1), vec4(f2));
	vec4 f3 = vec4(r3) * 6.20001240e-05;
	f3 += vec4(7.635e-02, 1.026e-01, 7.399e-02, 4.627e-02);
	imageStore(out_image, opos + ivec2(1, 1), vec4(f3));
}

//!DESC CuNNy-16x16C-TEST-conv3
//!HOOK LUMA
//!COMPUTE 16 16 8 8
//!BIND conv2
//!BIND LUMA
//!SAVE conv3
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_spirv_intrinsics : require
#extension GL_EXT_control_flow_attributes : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) ivec4(r.x + dp4(s, a, 0), r.y + dp4(s, b, 0), r.z + dp4(s, c, 0), r.w + dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	[[unroll]] for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		[[unroll]] for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(2, 2) + ivec2(1, 1)) * conv2_pt;
			r = conv2_gather(p, 0);
			g = conv2_gather(p, 1);
			b = conv2_gather(p, 2);
			a = conv2_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.00000000e+00;
			vec4 v2 = vec4(r.z, g.z, b.z, a.z) * 1.00000000e+00;
			vec4 v4 = vec4(r.x, g.x, b.x, a.x) * 1.00000000e+00;
			vec4 v6 = vec4(r.y, g.y, b.y, a.y) * 1.00000000e+00;
			vec4 v1 = max(-v0, vec4(0));
			v0 = max(v0, vec4(0));
			vec4 v3 = max(-v2, vec4(0));
			v2 = max(v2, vec4(0));
			vec4 v5 = max(-v4, vec4(0));
			v4 = max(v4, vec4(0));
			vec4 v7 = max(-v6, vec4(0));
			v6 = max(v6, vec4(0));
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s[2][3][3];
	ivec4 r0 = ivec4(0);
	ivec4 r1 = ivec4(0);
	ivec4 r2 = ivec4(0);
	ivec4 r3 = ivec4(0);
	s[0][0][0] = G[0][xy.y+0][xy.x+0]; s[0][0][1] = G[0][xy.y+0][xy.x+1];
	s[0][0][2] = G[0][xy.y+0][xy.x+2]; s[0][1][0] = G[0][xy.y+1][xy.x+0];
	s[0][1][1] = G[0][xy.y+1][xy.x+1]; s[0][1][2] = G[0][xy.y+1][xy.x+2];
	s[0][2][0] = G[0][xy.y+2][xy.x+0]; s[0][2][1] = G[0][xy.y+2][xy.x+1];
	s[0][2][2] = G[0][xy.y+2][xy.x+2]; s[1][0][0] = G[1][xy.y+0][xy.x+0];
	s[1][0][1] = G[1][xy.y+0][xy.x+1]; s[1][0][2] = G[1][xy.y+0][xy.x+2];
	s[1][1][0] = G[1][xy.y+1][xy.x+0]; s[1][1][1] = G[1][xy.y+1][xy.x+1];
	s[1][1][2] = G[1][xy.y+1][xy.x+2]; s[1][2][0] = G[1][xy.y+2][xy.x+0];
	s[1][2][1] = G[1][xy.y+2][xy.x+1]; s[1][2][2] = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0xFBFDFF0A, 0xF019F610, 0x15FDFB04, 0x1AFF010B);
	r1 = D(r1, s[0][0][0], 0xE409F410, 0xF4F3FCF9, 0x04F50BF6, 0x1204FB0A);
	r2 = D(r2, s[0][0][0], 0x1A00FFFA, 0xF700F400, 0xFEFAEBFC, 0xF6F40205);
	r3 = D(r3, s[0][0][0], 0x03EEF0FA, 0x08FBF101, 0xFB06F9F3, 0x0BFBF60B);
	r0 = D(r0, s[0][0][1], 0x070002FF, 0xF6150DFB, 0xF6030E03, 0x22F3FFF9);
	r1 = D(r1, s[0][0][1], 0x080002F2, 0xF8FCFC0C, 0xFBF4FDF1, 0xEA0E06F4);
	r2 = D(r2, s[0][0][1], 0x08FAFBF4, 0xFBF0F50D, 0x0303E8F7, 0xEEE60BF8);
	r3 = D(r3, s[0][0][1], 0x00F3EEFC, 0x0FFEF6FD, 0xFB00F606, 0x17FFF1F8);
	r0 = D(r0, s[0][0][2], 0xFA16FB03, 0x0101EF05, 0x110811FA, 0xEEF811FF);
	r1 = D(r1, s[0][0][2], 0x05010316, 0xFF0513F7, 0x050A0502, 0xEAFE0D03);
	r2 = D(r2, s[0][0][2], 0x09F30809, 0x0604F2F5, 0x0208070A, 0x03F8F710);
	r3 = D(r3, s[0][0][2], 0xFCFB02F1, 0x0AF304FE, 0xFE06F80B, 0x0BFF01F6);
	r0 = D(r0, s[0][1][0], 0xE6FFEBFD, 0x0005FBEE, 0x14F3FFFB, 0xFA01F902);
	r1 = D(r1, s[0][1][0], 0xFA00F205, 0xFEFB11FA, 0x0A051AF0, 0x1808FE00);
	r2 = D(r2, s[0][1][0], 0xFBFDF80D, 0xEA07E51D, 0x01E9F20D, 0x01FE0BFF);
	r3 = D(r3, s[0][1][0], 0xFCFA0206, 0x01150AF3, 0xE4FB06FF, 0x0A05F700);
	r0 = D(r0, s[0][1][1], 0x10030402, 0xF8F903E6, 0xFEF7EFE6, 0x080A0006);
	r1 = D(r1, s[0][1][1], 0x06F7EF04, 0xF30EF6FD, 0xFE0A110B, 0xF8FC0C11);
	r2 = D(r2, s[0][1][1], 0x09F30905, 0xF7FA0D15, 0x06F1F7F9, 0xE6F10A0F);
	r3 = D(r3, s[0][1][1], 0xF4110B0D, 0x05E3F5FD, 0xFCFF0819, 0x1803080F);
	r0 = D(r0, s[0][1][2], 0xFAF90DF6, 0x0BF3F901, 0xFFF517FB, 0xFC08F703);
	r1 = D(r1, s[0][1][2], 0xF90BEDE5, 0x03F50503, 0x1A1105FE, 0xF8F005F6);
	r2 = D(r2, s[0][1][2], 0xF7071201, 0xFD0AF8FA, 0x150AF402, 0x11F307FA);
	r3 = D(r3, s[0][1][2], 0xFBF80202, 0xFE03EEEF, 0xFC0105F3, 0x0202F704);
	r0 = D(r0, s[0][2][0], 0xF60EFEFD, 0x060005FF, 0xF9FFEE0A, 0x02FE0807);
	r1 = D(r1, s[0][2][0], 0xE10406EE, 0x19FA0CFB, 0xF9FF02F6, 0x1A03FB12);
	r2 = D(r2, s[0][2][0], 0xFFFB0E0A, 0x0BFC0709, 0xF80801FB, 0xF7F600FD);
	r3 = D(r3, s[0][2][0], 0xFCFBFA0A, 0xE804FBF6, 0xF60113ED, 0x060408FC);
	r0 = D(r0, s[0][2][1], 0x05FF09FA, 0x06FC10FE, 0xEBFBEB0D, 0xF90602EF);
	r1 = D(r1, s[0][2][1], 0x0006F8FB, 0xFEEEF8F7, 0x0EF41AEF, 0xF8FEF00A);
	r2 = D(r2, s[0][2][1], 0x0DF6F90E, 0xF3F1F7FA, 0x0405FA09, 0xEEF60003);
	r3 = D(r3, s[0][2][1], 0xFB0BFB09, 0x150319F5, 0xF4F609FB, 0x17F7FFF7);
	r0 = D(r0, s[0][2][2], 0x1205F617, 0xFDFEF80C, 0xFCF8E807, 0xFB050504);
	r1 = D(r1, s[0][2][2], 0xFDF2FC01, 0xEEF51106, 0x0C0503F9, 0xEFFFFF01);
	r2 = D(r2, s[0][2][2], 0x080DFDF3, 0xF0000010, 0xF800F507, 0xF80102F5);
	r3 = D(r3, s[0][2][2], 0x0E050508, 0xEEFFF60A, 0xF6FCFDF6, 0x09FDFFFC);
	r0 = D(r0, s[1][0][0], 0xFB1A07F3, 0x19040BF9, 0xE5E80209, 0xF7F2FFF1);
	r1 = D(r1, s[1][0][0], 0x0AFBF400, 0x0E000203, 0x140505F1, 0xF3F6F800);
	r2 = D(r2, s[1][0][0], 0xFCF3FC05, 0x0406FDFA, 0x0104F4FB, 0xF9F9F811);
	r3 = D(r3, s[1][0][0], 0xFB030105, 0x07FE0905, 0x04FD0100, 0x050506FC);
	r0 = D(r0, s[1][0][1], 0x0213000A, 0x0806EE10, 0x03DFF40E, 0x03E9FF0E);
	r1 = D(r1, s[1][0][1], 0x01120205, 0xF2F6F306, 0x0AF9FF04, 0x0A0BFC13);
	r2 = D(r2, s[1][0][1], 0x0AD70813, 0xF90501F9, 0x0500FBFC, 0xFBDCFBFF);
	r3 = D(r3, s[1][0][1], 0xF311FEF8, 0xFDF7F819, 0x051F1603, 0x27FFFB09);
	r0 = D(r0, s[1][0][2], 0xFA12FE07, 0x000E01F3, 0xF80AF6F8, 0x07F80806);
	r1 = D(r1, s[1][0][2], 0x05E8F504, 0x00F5FB01, 0x0DEAFA0E, 0x0829EE07);
	r2 = D(r2, s[1][0][2], 0x00F8F7FF, 0x09FE07F6, 0x01E9F400, 0xF607F807);
	r3 = D(r3, s[1][0][2], 0xF6EEFC0E, 0x05140DF8, 0xF30F11FB, 0xFC0A000E);
	r0 = D(r0, s[1][1][0], 0x0BFF01FF, 0xF7FD0602, 0x0FFB0705, 0xFA0609F5);
	r1 = D(r1, s[1][1][0], 0xF202F5E5, 0x15DF0106, 0x0DEB0705, 0xFB1DF6F8);
	r2 = D(r2, s[1][1][0], 0xF6F91100, 0xE8EF0AF4, 0x0609FD1A, 0xF8FE080A);
	r3 = D(r3, s[1][1][0], 0x05F4FDF9, 0x00DFF3FD, 0x02FAFB0A, 0x03FA04FF);
	r0 = D(r0, s[1][1][1], 0x011A12E9, 0x002DF208, 0x0F1B0D0D, 0x060209FB);
	r1 = D(r1, s[1][1][1], 0x050AFEF3, 0x0CEEFAFE, 0xFDFC01FA, 0x002300F6);
	r2 = D(r2, s[1][1][1], 0x020B0806, 0xF4EF0209, 0xF61901FB, 0x04F604FC);
	r3 = D(r3, s[1][1][1], 0x10DEF6FB, 0xFC38FC0F, 0xF7F2F6FA, 0x1F0401F9);
	r0 = D(r0, s[1][1][2], 0xFD3406F1, 0xFD1C07FD, 0x100FF505, 0x06EBEFFA);
	r1 = D(r1, s[1][1][2], 0xF8E6F808, 0x03FC0BFF, 0xF80200F3, 0x19010AFD);
	r2 = D(r2, s[1][1][2], 0x02FC05FC, 0x0AEE1200, 0xFD05FAFF, 0xF2FDFEFD);
	r3 = D(r3, s[1][1][2], 0x0BFEF7F7, 0xFA07F802, 0x06F50104, 0x02F007FD);
	r0 = D(r0, s[1][2][0], 0x04E9FA06, 0xF60FEE0F, 0xFBED010C, 0x00F9FFFE);
	r1 = D(r1, s[1][2][0], 0x08F50707, 0xEB0A100F, 0xF90C06F3, 0xF2FA0BF0);
	r2 = D(r2, s[1][2][0], 0xFF06F600, 0x0408EFF1, 0x15E50406, 0x1402071E);
	r3 = D(r3, s[1][2][0], 0xDC00FF05, 0x0CF00F01, 0xFF05FA03, 0x0500F4FB);
	r0 = D(r0, s[1][2][1], 0x15F4FB0F, 0xFE0EF4EF, 0x01FCFFFB, 0xFD000AF0);
	r1 = D(r1, s[1][2][1], 0xF6F1F100, 0xFF0F0CFA, 0xFC1A0004, 0x0500FBFF);
	r2 = D(r2, s[1][2][1], 0x00FE0403, 0xEA07FB05, 0x02E30AFE, 0x05F110FC);
	r3 = D(r3, s[1][2][1], 0xF704F606, 0xF1F10A00, 0x03FBFC09, 0x0E0B020E);
	r0 = D(r0, s[1][2][2], 0xF325ECF7, 0x000004EE, 0x0004FC09, 0x0001FCFD);
	r1 = D(r1, s[1][2][2], 0x010A030A, 0xF8F5EBF5, 0x02FFF7F7, 0x0AF61214);
	r2 = D(r2, s[1][2][2], 0x0AFB0EF8, 0xF3FE01F3, 0xFE0AFDFE, 0x00F1FE0E);
	r3 = D(r3, s[1][2][2], 0xF900F3FF, 0x05FFFBEE, 0xFA070A0F, 0xF400FDFC);
	s[0][0][0] = G[2][xy.y+0][xy.x+0]; s[0][0][1] = G[2][xy.y+0][xy.x+1];
	s[0][0][2] = G[2][xy.y+0][xy.x+2]; s[0][1][0] = G[2][xy.y+1][xy.x+0];
	s[0][1][1] = G[2][xy.y+1][xy.x+1]; s[0][1][2] = G[2][xy.y+1][xy.x+2];
	s[0][2][0] = G[2][xy.y+2][xy.x+0]; s[0][2][1] = G[2][xy.y+2][xy.x+1];
	s[0][2][2] = G[2][xy.y+2][xy.x+2]; s[1][0][0] = G[3][xy.y+0][xy.x+0];
	s[1][0][1] = G[3][xy.y+0][xy.x+1]; s[1][0][2] = G[3][xy.y+0][xy.x+2];
	s[1][1][0] = G[3][xy.y+1][xy.x+0]; s[1][1][1] = G[3][xy.y+1][xy.x+1];
	s[1][1][2] = G[3][xy.y+1][xy.x+2]; s[1][2][0] = G[3][xy.y+2][xy.x+0];
	s[1][2][1] = G[3][xy.y+2][xy.x+1]; s[1][2][2] = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0x04F710F1, 0x180B060E, 0xDCF8FDFD, 0xEFF90A07);
	r1 = D(r1, s[0][0][0], 0x080BF3FB, 0xFE0BF7FA, 0xFB050007, 0xF7F4FB04);
	r2 = D(r2, s[0][0][0], 0x1106FC01, 0x05F70502, 0xFFF9020B, 0xFFFE0001);
	r3 = D(r3, s[0][0][0], 0x02FC0001, 0xF605080B, 0x06050A0F, 0xF1FBF8F1);
	r0 = D(r0, s[0][0][1], 0xF7F50504, 0x0D0A0C24, 0x04FEF809, 0x05F10503);
	r1 = D(r1, s[0][0][1], 0xEEEE051A, 0xEE02F600, 0x070D0AF1, 0x0E07090A);
	r2 = D(r2, s[0][0][1], 0x0A050DF2, 0xF4F1F5F1, 0xF4F40106, 0xFDFB12DB);
	r3 = D(r3, s[0][0][1], 0x0B01051C, 0xF218F410, 0x0EFE0C02, 0x12F80704);
	r0 = D(r0, s[0][0][2], 0xE6F2FB03, 0x04F60401, 0xEBF402EB, 0xF800F4F8);
	r1 = D(r1, s[0][0][2], 0x17F10004, 0xE20DF50C, 0xFCF80004, 0x091C00F6);
	r2 = D(r2, s[0][0][2], 0xF2FB0303, 0x06000005, 0xF1FA0411, 0x0A0A0501);
	r3 = D(r3, s[0][0][2], 0x02F80302, 0x0801F1F0, 0x000301F5, 0x0B040AFE);
	r0 = D(r0, s[0][1][0], 0x060505FF, 0x0A0000F5, 0xFEFBFB01, 0xF80EF80F);
	r1 = D(r1, s[0][1][0], 0x11F4F7E8, 0x020707F0, 0xFAF4FCFB, 0x09FBF20C);
	r2 = D(r2, s[0][1][0], 0xF30D020B, 0xFF070FF4, 0xFBF7F3F8, 0xF1F2FCF5);
	r3 = D(r3, s[0][1][0], 0x05F6FB01, 0x05F3F6CE, 0xFFFF2003, 0xFC020A08);
	r0 = D(r0, s[0][1][1], 0x1809FDF5, 0xF0ED14FB, 0x03E91214, 0xFE080408);
	r1 = D(r1, s[0][1][1], 0x1405FA10, 0x1800FCE7, 0xFE0C17F3, 0xF8030106);
	r2 = D(r2, s[0][1][1], 0xE9FD0EF3, 0xF112E905, 0xEF11150B, 0xED060019);
	r3 = D(r3, s[0][1][1], 0x1AFFF612, 0x01FE10FC, 0xF00BF505, 0x11F8FDF5);
	r0 = D(r0, s[0][1][2], 0x07080EFC, 0x08080602, 0x03F70311, 0xF30309D5);
	r1 = D(r1, s[0][1][2], 0x10FC06FB, 0xE809FF01, 0xF4F601FB, 0x0318F0F6);
	r2 = D(r2, s[0][1][2], 0x00110412, 0xF9FAF0F8, 0x0912FA1C, 0xFD04060C);
	r3 = D(r3, s[0][1][2], 0xF1F8F8F8, 0x050407F6, 0x0CFE0005, 0x02FE0900);
	r0 = D(r0, s[0][2][0], 0xFF160AFE, 0xF8F802FE, 0xF20AF802, 0xE8F4F7F2);
	r1 = D(r1, s[0][2][0], 0xF30CEAF3, 0xF5ED0614, 0xF9FDF9FE, 0xFAFDF9F5);
	r2 = D(r2, s[0][2][0], 0xF907F60F, 0x04FFF6F1, 0x0EE514FD, 0x0EFEF6FD);
	r3 = D(r3, s[0][2][0], 0x03FBF903, 0xE4F60BFA, 0xFB0A05F5, 0xF9FAFFFF);
	r0 = D(r0, s[0][2][1], 0x0BF3F5FB, 0x0AF50DF7, 0x05F4051C, 0x0FFF090B);
	r1 = D(r1, s[0][2][1], 0x05020F22, 0xF700F510, 0xE7070FEC, 0xF7F70217);
	r2 = D(r2, s[0][2][1], 0xE5031111, 0x02FBFBFF, 0x0BFFF806, 0xF40A0400);
	r3 = D(r3, s[0][2][1], 0xF6FB02EF, 0x05EDFD25, 0xF6FD00F9, 0x0A0C050F);
	r0 = D(r0, s[0][2][2], 0x2EFDFBF0, 0x180405F7, 0xFDFDF5FC, 0xF7F0FCEC);
	r1 = D(r1, s[0][2][2], 0x06F609FD, 0xEA0FF7FE, 0xFD0B0AEA, 0xFB020109);
	r2 = D(r2, s[0][2][2], 0xFAFE0FFE, 0x091501F5, 0x0A02FCF6, 0x14FD071A);
	r3 = D(r3, s[0][2][2], 0x0CF2F607, 0x0AFB04D2, 0xFD070912, 0xF6050AFD);
	r0 = D(r0, s[1][0][0], 0xF60500F1, 0xF7FB08EF, 0x0F0200F8, 0xF60A0BFD);
	r1 = D(r1, s[1][0][0], 0xEFF7F5FA, 0xF5FDF804, 0xF7F411FB, 0x000AF9FB);
	r2 = D(r2, s[1][0][0], 0xF0FB0509, 0x0206FF00, 0x05F100FB, 0xF6FF05F6);
	r3 = D(r3, s[1][0][0], 0xF7FCF704, 0xEE07FB03, 0x0408F4EF, 0x0A0CFE05);
	r0 = D(r0, s[1][0][1], 0xFF0A09F7, 0x05F505FF, 0xFFFC0000, 0xFF07F70D);
	r1 = D(r1, s[1][0][1], 0x081A1405, 0x03FB0115, 0x0CFBF905, 0xEC05EA00);
	r2 = D(r2, s[1][0][1], 0x00FB0108, 0x06DC060A, 0x06050A02, 0x0305EE0D);
	r3 = D(r3, s[1][0][1], 0x02FD05F4, 0xF10B0C00, 0xF5FFE70A, 0x05FB09F7);
	r0 = D(r0, s[1][0][2], 0xEE16FB00, 0xFC030909, 0x010404F9, 0xF6EAF5FD);
	r1 = D(r1, s[1][0][2], 0x00FCFA0A, 0xFBFEFC00, 0x0310FBF8, 0xE8F200F4);
	r2 = D(r2, s[1][0][2], 0x0E0B0A0F, 0xF6F91200, 0xFB0C02F9, 0x05F401EC);
	r3 = D(r3, s[1][0][2], 0xFDE500F2, 0xFA00FD00, 0xFC0E030C, 0x00F5F6FC);
	r0 = D(r0, s[1][1][0], 0x07000AF8, 0x02FE1FFD, 0xF604F008, 0x0205010A);
	r1 = D(r1, s[1][1][0], 0xFA1BF606, 0x13F8F102, 0xF7FB020B, 0x1A000DFD);
	r2 = D(r2, s[1][1][0], 0x000000FB, 0x0BFEE905, 0x00070205, 0x000AEFFC);
	r3 = D(r3, s[1][1][0], 0x12F1FFFB, 0xFC00DDFE, 0x02F9F5FE, 0xF8FB05FB);
	r0 = D(r0, s[1][1][1], 0xF10F14FC, 0xFD250AF9, 0xFF2EEB02, 0xFDF5F5FE);
	r1 = D(r1, s[1][1][1], 0xEEF1FBF0, 0xF5041AFD, 0x0B070908, 0x0A12E3FF);
	r2 = D(r2, s[1][1][1], 0xF206F1F8, 0xF0EBEFE9, 0x0A050A01, 0x0AF5F0F6);
	r3 = D(r3, s[1][1][1], 0xF4F60800, 0x1519F7FF, 0x00F50002, 0xF60806FE);
	r0 = D(r0, s[1][1][2], 0xFBFB03F4, 0x02F907FF, 0xF9F8F9F8, 0x04FEFB03);
	r1 = D(r1, s[1][1][2], 0x090FFBFE, 0x0C040A14, 0x04FF05F1, 0xEEE1FA0F);
	r2 = D(r2, s[1][1][2], 0xF9F5FBF9, 0x09110F07, 0xFC0B0711, 0xFFFE05FA);
	r3 = D(r3, s[1][1][2], 0x0120FC0A, 0xFF0912FE, 0x03F90AF6, 0x0D00F207);
	r0 = D(r0, s[1][2][0], 0x03F8FBFB, 0xFE09140C, 0x07EE0000, 0xFFFF08FD);
	r1 = D(r1, s[1][2][0], 0x0100F9FF, 0x000501FE, 0x030311F7, 0x020506F6);
	r2 = D(r2, s[1][2][0], 0xF9000AFC, 0x0AF0FBED, 0x03F80601, 0x02FEF704);
	r3 = D(r3, s[1][2][0], 0xFEF5050C, 0x0000EA0B, 0x03F600FF, 0x00FF03F6);
	r0 = D(r0, s[1][2][1], 0x1A060FFF, 0x0AF20501, 0xFF0AF908, 0xF9FAE802);
	r1 = D(r1, s[1][2][1], 0x0006E409, 0xFB1108F7, 0x0A0BFD12, 0x010A0002);
	r2 = D(r2, s[1][2][1], 0xFDFD05FD, 0xEC091302, 0xFB030200, 0xFD03F6F8);
	r3 = D(r3, s[1][2][1], 0x06F0FA05, 0x0511FD00, 0xFC0602EE, 0xFDFCF702);
	r0 = D(r0, s[1][2][2], 0x0FF3FC03, 0xF6F10708, 0x01F904FD, 0x050C0605);
	r1 = D(r1, s[1][2][2], 0xFD20010C, 0x01F40AF7, 0xF606FC09, 0x06F80903);
	r2 = D(r2, s[1][2][2], 0x060CF9FF, 0x06FBFD00, 0x02F8F60C, 0xF406FB01);
	r3 = D(r3, s[1][2][2], 0xFEFE08F6, 0x05F1FE09, 0xFAFC05FD, 0x06FEF7FD);
	s[0][0][0] = G[4][xy.y+0][xy.x+0]; s[0][0][1] = G[4][xy.y+0][xy.x+1];
	s[0][0][2] = G[4][xy.y+0][xy.x+2]; s[0][1][0] = G[4][xy.y+1][xy.x+0];
	s[0][1][1] = G[4][xy.y+1][xy.x+1]; s[0][1][2] = G[4][xy.y+1][xy.x+2];
	s[0][2][0] = G[4][xy.y+2][xy.x+0]; s[0][2][1] = G[4][xy.y+2][xy.x+1];
	s[0][2][2] = G[4][xy.y+2][xy.x+2]; s[1][0][0] = G[5][xy.y+0][xy.x+0];
	s[1][0][1] = G[5][xy.y+0][xy.x+1]; s[1][0][2] = G[5][xy.y+0][xy.x+2];
	s[1][1][0] = G[5][xy.y+1][xy.x+0]; s[1][1][1] = G[5][xy.y+1][xy.x+1];
	s[1][1][2] = G[5][xy.y+1][xy.x+2]; s[1][2][0] = G[5][xy.y+2][xy.x+0];
	s[1][2][1] = G[5][xy.y+2][xy.x+1]; s[1][2][2] = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0x0A000600, 0xECFFFBFB, 0x06FBFEFC, 0x05180F11);
	r1 = D(r1, s[0][0][0], 0xEDFEFFF6, 0xF30EF7F9, 0xFDFDF808, 0xF80A060B);
	r2 = D(r2, s[0][0][0], 0xFBF40501, 0xF9F30A02, 0xF005FB06, 0x0401F800);
	r3 = D(r3, s[0][0][0], 0xF8F5FBEC, 0xF1000DF6, 0xE800F6F9, 0xFFEDF80A);
	r0 = D(r0, s[0][0][1], 0xEE000AFB, 0xF601FEFC, 0x05FCFDFA, 0xF1F7FCFE);
	r1 = D(r1, s[0][0][1], 0x0B031204, 0x08FE07F2, 0x0EEE0208, 0x0606F5E5);
	r2 = D(r2, s[0][0][1], 0x01FEFAFF, 0x060EFCF6, 0xFCF700F3, 0xFFFD070F);
	r3 = D(r3, s[0][0][1], 0x0B0AFE05, 0xFF13FBFB, 0xFBF3FDEB, 0x0600FBFB);
	r0 = D(r0, s[0][0][2], 0xE60AFA0E, 0x0201F301, 0xFBF3F1F6, 0x07FB0DFC);
	r1 = D(r1, s[0][0][2], 0x020AF4F9, 0xFC050700, 0xFEF30B04, 0x0FFD050C);
	r2 = D(r2, s[0][0][2], 0xFC0300FA, 0xFD010801, 0xF602F00B, 0x2203F80C);
	r3 = D(r3, s[0][0][2], 0x0E05F005, 0xFA15160B, 0x12FDFF04, 0x09F8FD00);
	r0 = D(r0, s[0][1][0], 0x03F406F1, 0xEFFB1015, 0x07EA1502, 0x05FC0A02);
	r1 = D(r1, s[0][1][0], 0xE5FE0EFE, 0xF7FD07FA, 0x080009FA, 0x07F8FE05);
	r2 = D(r2, s[0][1][0], 0x1509FD01, 0xE4F5F2F1, 0xF4080AFA, 0x05F808E1);
	r3 = D(r3, s[0][1][0], 0xF0FE02F0, 0x04EEEB06, 0xFAFF000D, 0x06FF01EF);
	r0 = D(r0, s[0][1][1], 0xF6030AF8, 0xF0111200, 0x0D0C1106, 0x01FDDCFA);
	r1 = D(r1, s[0][1][1], 0x161017FA, 0x0AF71803, 0x0E0808F6, 0x030F10F2);
	r2 = D(r2, s[0][1][1], 0x11FD04F6, 0xFB07F104, 0x0E0A03EF, 0x04F60402);
	r3 = D(r3, s[0][1][1], 0xFB000806, 0x1A02EAF9, 0xEB00FFF4, 0x35FBFA02);
	r0 = D(r0, s[0][1][2], 0xDC00F9FA, 0xF2F4F303, 0x0603FB0A, 0x0F0608F6);
	r1 = D(r1, s[0][1][2], 0x15F4FD08, 0x04F70F02, 0xF40703FD, 0x0EF62005);
	r2 = D(r2, s[0][1][2], 0x06061105, 0xE7FAFD04, 0x13FF0A06, 0x28F00C02);
	r3 = D(r3, s[0][1][2], 0x1F0F07FE, 0x1BFC0007, 0x08F30700, 0x09000AFC);
	r0 = D(r0, s[0][2][0], 0x2903EF05, 0x060405F3, 0xE70CFD07, 0xF0FCF902);
	r1 = D(r1, s[0][2][0], 0x19030CEA, 0x03F5FF0C, 0x19FCFE0A, 0xF109FBFE);
	r2 = D(r2, s[0][2][0], 0xEA12F6F8, 0x04FBF807, 0xF307F80A, 0xF806000A);
	r3 = D(r3, s[0][2][0], 0xFB030705, 0xE6F0040B, 0x0A0303F9, 0xF402FB03);
	r0 = D(r0, s[0][2][1], 0x09050009, 0xD5F3F9FB, 0x08FD0D05, 0x1FFEF609);
	r1 = D(r1, s[0][2][1], 0xDA110900, 0x0EFF05F0, 0xCEFA1AF5, 0x03F20006);
	r2 = D(r2, s[0][2][1], 0x2406FD01, 0xFC070506, 0x0605FD01, 0xCF0FFF02);
	r3 = D(r3, s[0][2][1], 0xF1080507, 0xD8F407F7, 0xF6030504, 0xF009F3FB);
	r0 = D(r0, s[0][2][2], 0xF2FF09F9, 0xE100FAF7, 0x15F5FEFD, 0x0FF6F301);
	r1 = D(r1, s[0][2][2], 0x0A07FD06, 0x1302E8FA, 0xCB04190B, 0x11FF11F4);
	r2 = D(r2, s[0][2][2], 0x11F813F6, 0xE4F806E9, 0xDFF9FBF1, 0xDB06F80D);
	r3 = D(r3, s[0][2][2], 0x13FEF304, 0xEE0002FB, 0x150602FE, 0xF303F10E);
	r0 = D(r0, s[1][0][0], 0xF2FEF6FF, 0xF7F7EC19, 0xEA11FBFB, 0x03F90305);
	r1 = D(r1, s[1][0][0], 0x091A072E, 0xFBE60A02, 0xFB01020F, 0x0AE4FAFA);
	r2 = D(r2, s[1][0][0], 0x011612FF, 0xFEF811F9, 0x15F90ADE, 0x010CFFE6);
	r3 = D(r3, s[1][0][0], 0x14EE081D, 0xFC0BFE10, 0xF425FDFE, 0xF609FE10);
	r0 = D(r0, s[1][0][1], 0x000308F9, 0xF805E9F5, 0x0C100014, 0x0C0A00FE);
	r1 = D(r1, s[1][0][1], 0xFEE1070B, 0x031A050C, 0xF323EDEA, 0x091018EA);
	r2 = D(r2, s[1][0][1], 0x06F6EE0C, 0x06F70105, 0x04F60014, 0x00FEFFEC);
	r3 = D(r3, s[1][0][1], 0xF7FDF3FB, 0x06E5FFF7, 0x050E02EA, 0xF6170506);
	r0 = D(r0, s[1][0][2], 0x0FFEFFE0, 0x0307F5F8, 0xFFF8FD08, 0x0018FDE6);
	r1 = D(r1, s[1][0][2], 0x07090FFB, 0xFC011A0C, 0x0406FBF8, 0xFAFD09EE);
	r2 = D(r2, s[1][0][2], 0xFC0006F9, 0x02F3F8F7, 0xFA0CFCF0, 0x0B12F700);
	r3 = D(r3, s[1][0][2], 0xFFF8FAFB, 0x0C0D0400, 0x04E3F2F0, 0xF9FC0B05);
	r0 = D(r0, s[1][1][0], 0x0B090019, 0xFB030001, 0x123607F1, 0xFCD9F9F5);
	r1 = D(r1, s[1][1][0], 0x08141A10, 0x03F1FEFB, 0xF7F70AF4, 0xF50B01F1);
	r2 = D(r2, s[1][1][0], 0x01FC03F9, 0x0CFCF6FC, 0xEE19EEE4, 0x030B08F9);
	r3 = D(r3, s[1][1][0], 0xF6000C08, 0x010F02FE, 0x05F3F60A, 0x030EFF1A);
	r0 = D(r0, s[1][1][1], 0x0CECF101, 0xF6DAF4ED, 0xFBEBF004, 0x06F11004);
	r1 = D(r1, s[1][1][1], 0xEFFFF904, 0x022007EB, 0x05E806FD, 0x09EAED0B);
	r2 = D(r2, s[1][1][1], 0xF9CEFD1C, 0xEC0FFCFB, 0xF7F7FB14, 0x0EC714FA);
	r3 = D(r3, s[1][1][1], 0x0237F6EE, 0x04D703F3, 0xF1FCF9F5, 0xF4E00E03);
	r0 = D(r0, s[1][1][2], 0xFEF5F418, 0xFB010606, 0xF21A03F8, 0x0014EB01);
	r1 = D(r1, s[1][1][2], 0xED1509FF, 0x01101002, 0x060AF6FB, 0x051502FB);
	r2 = D(r2, s[1][1][2], 0x04F005FB, 0xF810020E, 0xF4F70EF6, 0x07E904FF);
	r3 = D(r3, s[1][1][2], 0xF502F30A, 0x1002F5FD, 0xF8EFF4EE, 0xF9EAF709);
	r0 = D(r0, s[1][2][0], 0xFE150724, 0x04FA0007, 0x07E2F5F9, 0x0401F911);
	r1 = D(r1, s[1][2][0], 0xF9F00F11, 0xF317FEF6, 0xFC0505FC, 0xFCF60A03);
	r2 = D(r2, s[1][2][0], 0xF516FAF6, 0x1023F4F1, 0x05EEFD35, 0x060514FC);
	r3 = D(r3, s[1][2][0], 0xF3F7F1E1, 0x0D0700F2, 0xF7E9FF04, 0x060DF4F1);
	r0 = D(r0, s[1][2][1], 0xFDF8F0E9, 0xFB0CFEF8, 0x0200E806, 0x0112090A);
	r1 = D(r1, s[1][2][1], 0x00E617FD, 0xF10EFF07, 0xFDFB0016, 0xF7F1F40A);
	r2 = D(r2, s[1][2][1], 0x04E70800, 0xFB0F0207, 0xF925FAF6, 0xF61111E9);
	r3 = D(r3, s[1][2][1], 0xFC03FB09, 0xFB2B13FF, 0xFBF20AF5, 0xFDFE0B0D);
	r0 = D(r0, s[1][2][2], 0x020AF5F6, 0x051DE1FF, 0xF10F0509, 0x001A0AFB);
	r1 = D(r1, s[1][2][2], 0x0DEBFE00, 0x0B201101, 0x0A0205FD, 0xF105000F);
	r2 = D(r2, s[1][2][2], 0x100AF706, 0xFA19F3FA, 0x1212FF03, 0x0B11FEEC);
	r3 = D(r3, s[1][2][2], 0x0AFF0004, 0xF904F904, 0x04E305FF, 0x11EC09FD);
	s[0][0][0] = G[6][xy.y+0][xy.x+0]; s[0][0][1] = G[6][xy.y+0][xy.x+1];
	s[0][0][2] = G[6][xy.y+0][xy.x+2]; s[0][1][0] = G[6][xy.y+1][xy.x+0];
	s[0][1][1] = G[6][xy.y+1][xy.x+1]; s[0][1][2] = G[6][xy.y+1][xy.x+2];
	s[0][2][0] = G[6][xy.y+2][xy.x+0]; s[0][2][1] = G[6][xy.y+2][xy.x+1];
	s[0][2][2] = G[6][xy.y+2][xy.x+2]; s[1][0][0] = G[7][xy.y+0][xy.x+0];
	s[1][0][1] = G[7][xy.y+0][xy.x+1]; s[1][0][2] = G[7][xy.y+0][xy.x+2];
	s[1][1][0] = G[7][xy.y+1][xy.x+0]; s[1][1][1] = G[7][xy.y+1][xy.x+1];
	s[1][1][2] = G[7][xy.y+1][xy.x+2]; s[1][2][0] = G[7][xy.y+2][xy.x+0];
	s[1][2][1] = G[7][xy.y+2][xy.x+1]; s[1][2][2] = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0xFFEDFD04, 0x03E40A17, 0xF8F6E002, 0xF0F90909);
	r1 = D(r1, s[0][0][0], 0x1501F1F9, 0xF9100110, 0x0110FB14, 0xFEF4F6F2);
	r2 = D(r2, s[0][0][0], 0xFEF91013, 0x0BF6FD06, 0xFB08FD03, 0x1408FD17);
	r3 = D(r3, s[0][0][0], 0xFAF206F8, 0xF5E60801, 0x02EE0601, 0x00070D00);
	r0 = D(r0, s[0][0][1], 0x020E08FA, 0x00DC0DFC, 0x0513FF0C, 0x03F7E9F6);
	r1 = D(r1, s[0][0][1], 0x01FB0006, 0x0011070D, 0xFFE418F4, 0x0304F808);
	r2 = D(r2, s[0][0][1], 0xFEFCFAEB, 0xF70200FE, 0x0303EEFA, 0xF7FFFBFF);
	r3 = D(r3, s[0][0][1], 0xFCE60B0A, 0xF9050DFC, 0xF8FEFD00, 0x0B060710);
	r0 = D(r0, s[0][0][2], 0x0B02F9F6, 0xFBDBE8EC, 0x06EBEAF6, 0x1106041E);
	r1 = D(r1, s[0][0][2], 0xF2030E03, 0x2138EA0D, 0xFF03F211, 0x17110106);
	r2 = D(r2, s[0][0][2], 0x040AFCF5, 0x02FB0602, 0x09FFEB06, 0x0FEAFD03);
	r3 = D(r3, s[0][0][2], 0x0CE8FAFB, 0x0701FF11, 0xFDF4EBF6, 0xFBFC17E5);
	r0 = D(r0, s[0][1][0], 0x02ED19FB, 0x08F0D31F, 0xFD140102, 0x0AF90005);
	r1 = D(r1, s[0][1][0], 0x0F0101F1, 0xFFEE0E06, 0x0004FB0E, 0xEFFFFBF1);
	r2 = D(r2, s[0][1][0], 0x0705FFF8, 0xFF05F7DE, 0xF5F018FD, 0x09F8F7FC);
	r3 = D(r3, s[0][1][0], 0xFF0A0011, 0xFFD1EA07, 0x0009FC03, 0x07E0FFF9);
	r0 = D(r0, s[0][1][1], 0xFBE8FBFF, 0x17F3F6F7, 0xF70F1400, 0xFE0AF6EF);
	r1 = D(r1, s[0][1][1], 0x0FFAFCFB, 0xEE032501, 0xFB0DFBF9, 0xF60409E6);
	r2 = D(r2, s[0][1][1], 0x07FDF5E0, 0x0A3CFD07, 0xF6FC00F1, 0x020C05EC);
	r3 = D(r3, s[0][1][1], 0x07FC0B1B, 0x0EFAF60F, 0xF6F9090D, 0xF30019FB);
	r0 = D(r0, s[0][1][2], 0x02F60FF8, 0x0105EBEA, 0x09FF0AFD, 0xFD0A10FE);
	r1 = D(r1, s[0][1][2], 0x020706FE, 0xFFFCEC00, 0xFFE9F7F4, 0x070D05F8);
	r2 = D(r2, s[0][1][2], 0xFD12FC06, 0xF70DFD02, 0xFDF5F90C, 0xF6FEE7F3);
	r3 = D(r3, s[0][1][2], 0x050F0906, 0x03FC02F6, 0x070902F9, 0x0C030F01);
	r0 = D(r0, s[0][2][0], 0x02EAE6ED, 0x0C15ECF9, 0xEB020BF3, 0x04E808FA);
	r1 = D(r1, s[0][2][0], 0x0703050F, 0xFD0B1703, 0x000B0100, 0x0DF4FD00);
	r2 = D(r2, s[0][2][0], 0xFBFBFC12, 0x0A08FC06, 0xF4DCFB10, 0xF8F9FB10);
	r3 = D(r3, s[0][2][0], 0x0D060BF2, 0xFF0DF7EA, 0x00020608, 0xFBFF04FE);
	r0 = D(r0, s[0][2][1], 0x03EC0403, 0xFDE60BFC, 0x0A18F90C, 0xFB0212F5);
	r1 = D(r1, s[0][2][1], 0x00F6F7FB, 0x041604F7, 0x0708F3E6, 0x00EDFBFD);
	r2 = D(r2, s[0][2][1], 0xFB0505F9, 0x0916EEF2, 0x07DFF306, 0x04091914);
	r3 = D(r3, s[0][2][1], 0xFED71AEC, 0x08390411, 0x0002FD11, 0xFD0C0BFB);
	r0 = D(r0, s[0][2][2], 0xFAD400F8, 0x060FD6FD, 0x03F8EDEC, 0x14FFFAF7);
	r1 = D(r1, s[0][2][2], 0xFBF509F2, 0xEDF0F302, 0xF4F6E9FA, 0x080C0FEF);
	r2 = D(r2, s[0][2][2], 0xE603F305, 0xF1FCED15, 0x0A04F702, 0xF5EBF911);
	r3 = D(r3, s[0][2][2], 0x0B0205FB, 0xEE1EF8EA, 0xF90D0305, 0xF90B0EFC);
	r0 = D(r0, s[1][0][0], 0xFB0803FA, 0x08FFFAF0, 0xFD0103F8, 0xF20F0FFE);
	r1 = D(r1, s[1][0][0], 0x00FF05F4, 0x18000203, 0x00FE04F5, 0x0E0A0E07);
	r2 = D(r2, s[1][0][0], 0x010E0BF5, 0xFDF5FBF1, 0x0600050D, 0x07ECFFF6);
	r3 = D(r3, s[1][0][0], 0xFDF9FC0D, 0xF203F501, 0xEC0AF9FA, 0xFFFBF805);
	r0 = D(r0, s[1][0][1], 0x02FD0402, 0x0D0401FD, 0x070501FB, 0x070A040A);
	r1 = D(r1, s[1][0][1], 0x1D05F7EB, 0xFAFFF00A, 0xF805FB05, 0x1DFD060C);
	r2 = D(r2, s[1][0][1], 0xF103FD0D, 0x07FBF80A, 0xEDF80303, 0xFAF00607);
	r3 = D(r3, s[1][0][1], 0x24FEFCF5, 0xF804FA0F, 0xEBFDF4F2, 0xFF020BF8);
	r0 = D(r0, s[1][0][2], 0xF90D030F, 0xEE0AFD05, 0xF90F060B, 0x0611FD09);
	r1 = D(r1, s[1][0][2], 0x04FFEF0E, 0xEEF90AFC, 0xFEF7FCFE, 0xFBFB00FE);
	r2 = D(r2, s[1][0][2], 0x09091504, 0x170BF407, 0xFCFAFF04, 0x0CEF0EF8);
	r3 = D(r3, s[1][0][2], 0x0CFDFBFF, 0x12020901, 0x0702F6F7, 0x00000500);
	r0 = D(r0, s[1][1][0], 0x0210F7FE, 0x0103FDE9, 0xFB0602F1, 0xF7020502);
	r1 = D(r1, s[1][1][0], 0x0AFF130E, 0x0F17FB01, 0x0AEE07F4, 0x01110109);
	r2 = D(r2, s[1][1][0], 0x0CF00F00, 0x02FEFEF9, 0x0F0CFEF4, 0x10030017);
	r3 = D(r3, s[1][1][0], 0x0C01F9FC, 0xF50A05E9, 0xF901FEF6, 0x000511FF);
	r0 = D(r0, s[1][1][1], 0x04ED17F9, 0x030FFE07, 0xFA00F90A, 0x05F90510);
	r1 = D(r1, s[1][1][1], 0xEA0A0504, 0x13F1F101, 0xFB0FFAF6, 0xFBF5FC1A);
	r2 = D(r2, s[1][1][1], 0xEE001604, 0xF4F20AF8, 0x06F812FD, 0xF6FEFFFF);
	r3 = D(r3, s[1][1][1], 0x350002F5, 0x1D040F12, 0xFFF901FB, 0x1A020A05);
	r0 = D(r0, s[1][1][2], 0xF0E40518, 0x0FF20A05, 0x0EF4030C, 0x11F90516);
	r1 = D(r1, s[1][1][2], 0xFB0BFEF9, 0xE6000004, 0xF7081AFE, 0x070DF5F1);
	r2 = D(r2, s[1][1][2], 0xFAFFFCF9, 0x06FEFFF8, 0x110F0306, 0xFF020002);
	r3 = D(r3, s[1][1][2], 0x00FCF4FD, 0xE104040F, 0xF80AF2F3, 0xF2F40D04);
	r0 = D(r0, s[1][2][0], 0xFD0DF6F1, 0xEA010CF3, 0x13FAF005, 0xF9FD02F4);
	r1 = D(r1, s[1][2][0], 0x1BF60216, 0xFFF80A06, 0xF9FB06FB, 0x07030800);
	r2 = D(r2, s[1][2][0], 0x050A0EFC, 0x0905F50B, 0xFD0EF401, 0x06080308);
	r3 = D(r3, s[1][2][0], 0xFA00FBFE, 0x0D02F501, 0x10F6FCF8, 0x0209F6FC);
	r0 = D(r0, s[1][2][1], 0xE1F102F2, 0x08080EF2, 0xF5F309EC, 0xFFF4FAFB);
	r1 = D(r1, s[1][2][1], 0x05090306, 0x01F6FE13, 0xF4120100, 0xFBFBF609);
	r2 = D(r2, s[1][2][1], 0x05F80806, 0xFD04FA0D, 0x17100BFA, 0x0A10F8FB);
	r3 = D(r3, s[1][2][1], 0x000FFF09, 0xFE02EAFB, 0x01F8F004, 0xFF010503);
	r0 = D(r0, s[1][2][2], 0x10000810, 0xFDF00DFD, 0x000DFF01, 0x0507F3FA);
	r1 = D(r1, s[1][2][2], 0x02EB03FE, 0xE90AFA05, 0x0103060A, 0xFD030013);
	r2 = D(r2, s[1][2][2], 0x02FB0601, 0xFD0503F7, 0x11FC0504, 0xEE0C06F1);
	r3 = D(r3, s[1][2][2], 0x0205F901, 0xF9F1020C, 0x0504FE01, 0x07F60CFD);
	vec4 f0 = vec4(r0) * 6.20001240e-05;
	f0 += vec4(-8.528e-02, -9.901e-02, 8.708e-03, -9.775e-03);
	imageStore(out_image, opos + ivec2(0, 0), vec4(f0));
	vec4 f1 = vec4(r1) * 6.20001240e-05;
	f1 += vec4(-5.995e-02, 4.236e-02, -6.524e-02, -6.295e-02);
	imageStore(out_image, opos + ivec2(1, 0), vec4(f1));
	vec4 f2 = vec4(r2) * 6.20001240e-05;
	f2 += vec4(-7.271e-02, 1.334e-01, -1.042e-01, 3.767e-02);
	imageStore(out_image, opos + ivec2(0, 1), vec4(f2));
	vec4 f3 = vec4(r3) * 6.20001240e-05;
	f3 += vec4(3.494e-02, -1.122e-02, 6.616e-02, -1.803e-01);
	imageStore(out_image, opos + ivec2(1, 1), vec4(f3));
}

//!DESC CuNNy-16x16C-TEST-conv4
//!HOOK LUMA
//!COMPUTE 16 16 8 8
//!BIND conv3
//!BIND LUMA
//!SAVE conv4
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_spirv_intrinsics : require
#extension GL_EXT_control_flow_attributes : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) ivec4(r.x + dp4(s, a, 0), r.y + dp4(s, b, 0), r.z + dp4(s, c, 0), r.w + dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	[[unroll]] for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		[[unroll]] for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(2, 2) + ivec2(1, 1)) * conv3_pt;
			r = conv3_gather(p, 0);
			g = conv3_gather(p, 1);
			b = conv3_gather(p, 2);
			a = conv3_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.00000000e+00;
			vec4 v2 = vec4(r.z, g.z, b.z, a.z) * 1.00000000e+00;
			vec4 v4 = vec4(r.x, g.x, b.x, a.x) * 1.00000000e+00;
			vec4 v6 = vec4(r.y, g.y, b.y, a.y) * 1.00000000e+00;
			vec4 v1 = max(-v0, vec4(0));
			v0 = max(v0, vec4(0));
			vec4 v3 = max(-v2, vec4(0));
			v2 = max(v2, vec4(0));
			vec4 v5 = max(-v4, vec4(0));
			v4 = max(v4, vec4(0));
			vec4 v7 = max(-v6, vec4(0));
			v6 = max(v6, vec4(0));
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s[2][3][3];
	ivec4 r0 = ivec4(0);
	ivec4 r1 = ivec4(0);
	ivec4 r2 = ivec4(0);
	ivec4 r3 = ivec4(0);
	s[0][0][0] = G[0][xy.y+0][xy.x+0]; s[0][0][1] = G[0][xy.y+0][xy.x+1];
	s[0][0][2] = G[0][xy.y+0][xy.x+2]; s[0][1][0] = G[0][xy.y+1][xy.x+0];
	s[0][1][1] = G[0][xy.y+1][xy.x+1]; s[0][1][2] = G[0][xy.y+1][xy.x+2];
	s[0][2][0] = G[0][xy.y+2][xy.x+0]; s[0][2][1] = G[0][xy.y+2][xy.x+1];
	s[0][2][2] = G[0][xy.y+2][xy.x+2]; s[1][0][0] = G[1][xy.y+0][xy.x+0];
	s[1][0][1] = G[1][xy.y+0][xy.x+1]; s[1][0][2] = G[1][xy.y+0][xy.x+2];
	s[1][1][0] = G[1][xy.y+1][xy.x+0]; s[1][1][1] = G[1][xy.y+1][xy.x+1];
	s[1][1][2] = G[1][xy.y+1][xy.x+2]; s[1][2][0] = G[1][xy.y+2][xy.x+0];
	s[1][2][1] = G[1][xy.y+2][xy.x+1]; s[1][2][2] = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0xFE0606FC, 0x06FC0C00, 0x070C0007, 0x0ACFFF08);
	r1 = D(r1, s[0][0][0], 0xFCE7F806, 0x0E1901FF, 0xFF050EF8, 0x0DE6FF01);
	r2 = D(r2, s[0][0][0], 0xF4FF0113, 0xFAFDFAFF, 0xF60300F9, 0x04DC0511);
	r3 = D(r3, s[0][0][0], 0xFFEBFEF8, 0xF7140408, 0x03FFF6FD, 0x000EF808);
	r0 = D(r0, s[0][0][1], 0x00011B01, 0xF4ED0311, 0xFC17FAFC, 0xF6FFEA17);
	r1 = D(r1, s[0][0][1], 0xEF05FC1F, 0x01130D00, 0xFEF707FF, 0xF52315FF);
	r2 = D(r2, s[0][0][1], 0x041504F7, 0x062AF4F6, 0xFFFBFFEE, 0xFE04EF19);
	r3 = D(r3, s[0][0][1], 0xFE010606, 0xF5FC2DFF, 0xFDE2F201, 0xFCEF0B05);
	r0 = D(r0, s[0][0][2], 0x0033FC06, 0xFB0C12F7, 0x0E4DFD06, 0xFFCCE904);
	r1 = D(r1, s[0][0][2], 0xEF0DF1F6, 0xF9FCEF12, 0x0122ED0B, 0x082CF406);
	r2 = D(r2, s[0][0][2], 0xFF0A0908, 0x0E0D19FF, 0x021E060B, 0xFAF4F503);
	r3 = D(r3, s[0][0][2], 0x081805FF, 0xFD14EE03, 0x00F2FF0E, 0x09350C01);
	r0 = D(r0, s[0][1][0], 0xFC0FFF01, 0x01152203, 0x13172305, 0x1707FF03);
	r1 = D(r1, s[0][1][0], 0x00FDEBE7, 0x0DF10603, 0xE9F707F9, 0x0C11F4F7);
	r2 = D(r2, s[0][1][0], 0x04091201, 0xF8E2E805, 0xE91AF813, 0x11F00103);
	r3 = D(r3, s[0][1][0], 0xFE0A03EF, 0x0008FBF7, 0xF20F0FFA, 0x08FE10F9);
	r0 = D(r0, s[0][1][1], 0xEF2FFFFD, 0xFFFF1BEB, 0x06E4100C, 0x122CFAFA);
	r1 = D(r1, s[0][1][1], 0x1DE610F6, 0xF80BF6F2, 0xFD2FF80F, 0x01C3F501);
	r2 = D(r2, s[0][1][1], 0x055611FC, 0x17EBE700, 0xF96302F3, 0xFF03F411);
	r3 = D(r3, s[0][1][1], 0xFFB402F6, 0xEE3DF203, 0x01DCF400, 0x17381CEB);
	r0 = D(r0, s[0][1][2], 0x03C80904, 0x042D0C04, 0x052B0B10, 0xF3030CEC);
	r1 = D(r1, s[0][1][2], 0xFF19F8FD, 0xFE1FFDFF, 0x0900ED14, 0xFE04FE00);
	r2 = D(r2, s[0][1][2], 0xF6D1EDF1, 0x0234EFF2, 0x03E7EF08, 0xF8F5EFFF);
	r3 = D(r3, s[0][1][2], 0x0600FDF2, 0xFAE4EC08, 0xEF13EE07, 0xF4CCEFF1);
	r0 = D(r0, s[0][2][0], 0xF01DFF01, 0x0A0701FF, 0x0FED0E0A, 0x100408FF);
	r1 = D(r1, s[0][2][0], 0xF8F7170A, 0x05FB1007, 0xFF14F6FB, 0x020506FE);
	r2 = D(r2, s[0][2][0], 0x0AF6F60B, 0xEB2DFAFB, 0x11190B07, 0xF91213E7);
	r3 = D(r3, s[0][2][0], 0x030CFDFA, 0x0806EEEB, 0x05050106, 0xF60605F4);
	r0 = D(r0, s[0][2][1], 0xF2110CF9, 0x01F6F8F9, 0xF93DF4FF, 0x020A0510);
	r1 = D(r1, s[0][2][1], 0x0607EB01, 0xFEE701FE, 0x0105FC03, 0xEDEA0104);
	r2 = D(r2, s[0][2][1], 0xFFFDFFF6, 0x00DCFCF8, 0xFF0801F2, 0xED3B2306);
	r3 = D(r3, s[0][2][1], 0xF6FEFD03, 0xF2FE0502, 0xFAFAEE0C, 0x1315FA06);
	r0 = D(r0, s[0][2][2], 0xF80812F9, 0xF61E0E03, 0x01FD05FB, 0x07DE1A08);
	r1 = D(r1, s[0][2][2], 0x09FD06EB, 0x040EFBFF, 0x01360107, 0x06EA05FF);
	r2 = D(r2, s[0][2][2], 0xFE0A0C0B, 0x05FE03FE, 0xF2F9070C, 0xFF13FA02);
	r3 = D(r3, s[0][2][2], 0xF9EBFB03, 0xFB020DFD, 0x0708FE01, 0x03E9E508);
	r0 = D(r0, s[1][0][0], 0x03F606FD, 0x01F701F6, 0x1900000B, 0x04F8F805);
	r1 = D(r1, s[1][0][0], 0x130C0A0E, 0xFAFC1108, 0x1C0A0AED, 0xFC080BFD);
	r2 = D(r2, s[1][0][0], 0xFB0A02FA, 0x03020AF5, 0x17FF06ED, 0x0B0606FF);
	r3 = D(r3, s[1][0][0], 0x0B0103FD, 0xE9F40AF1, 0xF4EF0106, 0x01030008);
	r0 = D(r0, s[1][0][1], 0x05F601F9, 0x02001701, 0xFAF40AFA, 0x0F03F90C);
	r1 = D(r1, s[1][0][1], 0x15FBF005, 0xFD0318F8, 0x0A06FAF5, 0x04FD00F6);
	r2 = D(r2, s[1][0][1], 0xF8110105, 0xFDFDF60E, 0x1806010C, 0xF8F6FF10);
	r3 = D(r3, s[1][0][1], 0x011006F4, 0xFD080A01, 0xFF070820, 0x0901FFF5);
	r0 = D(r0, s[1][0][2], 0x01020112, 0x08050308, 0xF2F608FD, 0x080A0AF7);
	r1 = D(r1, s[1][0][2], 0xFAFDF0F2, 0x1103F901, 0x05F6FC01, 0x0F010307);
	r2 = D(r2, s[1][0][2], 0x0100FB02, 0xFF0303FD, 0xFD03F107, 0xFD01FA08);
	r3 = D(r3, s[1][0][2], 0xF606F6FF, 0xFE080308, 0xF90FF304, 0x000D00FE);
	r0 = D(r0, s[1][1][0], 0xEEF417ED, 0xFCF7F60A, 0xF7F10107, 0x0406F9EF);
	r1 = D(r1, s[1][1][0], 0x03E21C09, 0xFB09FD01, 0xFA080BF4, 0xE5030C0A);
	r2 = D(r2, s[1][1][0], 0xF3FDFC01, 0xFD160AFB, 0x170CF500, 0xF805030F);
	r3 = D(r3, s[1][1][0], 0xF9F1000C, 0xE402FFE3, 0x02FCEFF7, 0x0AFC07FF);
	r0 = D(r0, s[1][1][1], 0xFFF5FD04, 0x090EF70C, 0x02FDFC12, 0x15EFF7FF);
	r1 = D(r1, s[1][1][1], 0x060A0A0A, 0x010F0601, 0xED00F60E, 0x040808F2);
	r2 = D(r2, s[1][1][1], 0x0207E609, 0xFE0EFA06, 0x0EF8DEFD, 0xFDFB0A0A);
	r3 = D(r3, s[1][1][1], 0x080008EC, 0x05F4F717, 0x1208FAFA, 0x2210F108);
	r0 = D(r0, s[1][1][2], 0x01E919FC, 0x020601FC, 0xF2FF01FD, 0xFAFDF907);
	r1 = D(r1, s[1][1][2], 0xF901EF05, 0xEF03FAFB, 0xF3E5FBFC, 0xFBEE06F8);
	r2 = D(r2, s[1][1][2], 0x0E0510F2, 0xF0F8F5FD, 0xFA04040A, 0xF90BEE08);
	r3 = D(r3, s[1][1][2], 0xF9021003, 0xFA0EED08, 0x01F90106, 0x0DEF17FC);
	r0 = D(r0, s[1][2][0], 0x0EEBFE0A, 0xF4F70CF8, 0xF80BFF05, 0xFF06FA02);
	r1 = D(r1, s[1][2][0], 0xE70EFF0C, 0x0C05F6F6, 0x0E08FC0D, 0xFD09FBFA);
	r2 = D(r2, s[1][2][0], 0x0BFA06FF, 0x19F2F903, 0xF80BFDFC, 0x1DFA0A06);
	r3 = D(r3, s[1][2][0], 0x04070502, 0xE6040303, 0x0EF3F505, 0xF9F80915);
	r0 = D(r0, s[1][2][1], 0xFE11F30C, 0x00FC01FF, 0xF4FBFF09, 0x0EF5FB06);
	r1 = D(r1, s[1][2][1], 0xFCE701F9, 0xF703FC03, 0x0D0E0B14, 0x0A02FFF7);
	r2 = D(r2, s[1][2][1], 0x1308FD07, 0x0D03F70B, 0xFC0302F8, 0xFF0A0E0A);
	r3 = D(r3, s[1][2][1], 0x06F80401, 0x0FF70106, 0xFF06F4EF, 0xF6F4110F);
	r0 = D(r0, s[1][2][2], 0xFAF909F4, 0x15151209, 0xE60CF00F, 0x0203FC03);
	r1 = D(r1, s[1][2][2], 0xF612F406, 0x02F9F4FF, 0x02040CF6, 0xF2040808);
	r2 = D(r2, s[1][2][2], 0xE5F90101, 0xF1F80403, 0x07F913FC, 0x13FF08FF);
	r3 = D(r3, s[1][2][2], 0x06FDF8F8, 0xFE060A03, 0xF606030D, 0x08070F05);
	s[0][0][0] = G[2][xy.y+0][xy.x+0]; s[0][0][1] = G[2][xy.y+0][xy.x+1];
	s[0][0][2] = G[2][xy.y+0][xy.x+2]; s[0][1][0] = G[2][xy.y+1][xy.x+0];
	s[0][1][1] = G[2][xy.y+1][xy.x+1]; s[0][1][2] = G[2][xy.y+1][xy.x+2];
	s[0][2][0] = G[2][xy.y+2][xy.x+0]; s[0][2][1] = G[2][xy.y+2][xy.x+1];
	s[0][2][2] = G[2][xy.y+2][xy.x+2]; s[1][0][0] = G[3][xy.y+0][xy.x+0];
	s[1][0][1] = G[3][xy.y+0][xy.x+1]; s[1][0][2] = G[3][xy.y+0][xy.x+2];
	s[1][1][0] = G[3][xy.y+1][xy.x+0]; s[1][1][1] = G[3][xy.y+1][xy.x+1];
	s[1][1][2] = G[3][xy.y+1][xy.x+2]; s[1][2][0] = G[3][xy.y+2][xy.x+0];
	s[1][2][1] = G[3][xy.y+2][xy.x+1]; s[1][2][2] = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0x00040113, 0xFCF7F5EA, 0xF40EFFFE, 0x1608F8FE);
	r1 = D(r1, s[0][0][0], 0xF703FC01, 0x19030908, 0x020317EE, 0xFDFCF8F1);
	r2 = D(r2, s[0][0][0], 0x1007EDFC, 0x060AFDF2, 0xFF05060B, 0xFDFA0310);
	r3 = D(r3, s[0][0][0], 0x0508FF04, 0x0301FAF2, 0xF60CFCFA, 0x08FDFC03);
	r0 = D(r0, s[0][0][1], 0x060304F4, 0xFB070AEF, 0x130201F8, 0x1BF60FFD);
	r1 = D(r1, s[0][0][1], 0x120603ED, 0xFD080615, 0xFE07F701, 0x08FA0604);
	r2 = D(r2, s[0][0][1], 0xF8FD24E7, 0xF9F0F4E1, 0xFD0A1D08, 0xFC06F401);
	r3 = D(r3, s[0][0][1], 0xFBF403FB, 0xF2F90C06, 0xFF030F22, 0xFBED0011);
	r0 = D(r0, s[0][0][2], 0x00070E12, 0xF6F407D5, 0x03F801F2, 0xFAEF0306);
	r1 = D(r1, s[0][0][2], 0x031202FE, 0x0B0EF8F2, 0x0AF8FA06, 0x0BFA03FA);
	r2 = D(r2, s[0][0][2], 0xFEFAFFF6, 0x01F4F515, 0x0511080E, 0x02040A07);
	r3 = D(r3, s[0][0][2], 0xEF010200, 0xFFFA01F0, 0xF0F2F813, 0xFFFE02E9);
	r0 = D(r0, s[0][1][0], 0xEDF8FE04, 0x0DF809FC, 0x02030C01, 0x0D080014);
	r1 = D(r1, s[0][1][0], 0xEBF20501, 0x0BF20919, 0xDCF82EFC, 0x03FDF8FA);
	r2 = D(r2, s[0][1][0], 0x090C11FF, 0xEB151115, 0xFF0018E9, 0x18FEF3ED);
	r3 = D(r3, s[0][1][0], 0xF2F1FDF8, 0x1411F8FF, 0x090311F2, 0x0DF2F9FD);
	r0 = D(r0, s[0][1][1], 0x1101F20A, 0x031510E8, 0xFA0E10EF, 0x17F8E9FB);
	r1 = D(r1, s[0][1][1], 0xF6F407E3, 0x20F203E8, 0xEF0DF406, 0xF40306FF);
	r2 = D(r2, s[0][1][1], 0x1AFF06FD, 0xECF8FCFF, 0x0AF9F420, 0xEEFF06E2);
	r3 = D(r3, s[0][1][1], 0xEFFF0AF8, 0x040811F4, 0xF8001503, 0x0201000B);
	r0 = D(r0, s[0][1][2], 0x01F50803, 0x01FAF503, 0xF6010807, 0x0CED000E);
	r1 = D(r1, s[0][1][2], 0x0BFEFE15, 0xFDFFFCEF, 0xF8FAFDFF, 0xF5020C00);
	r2 = D(r2, s[0][1][2], 0x050D01F5, 0x0603F70E, 0x05FE0102, 0x07F2F610);
	r3 = D(r3, s[0][1][2], 0x080606FE, 0x0D06FEFD, 0xF800F3FA, 0xF8F20820);
	r0 = D(r0, s[0][2][0], 0xFD0AE909, 0xFC110713, 0xFDF80B16, 0x11F8000C);
	r1 = D(r1, s[0][2][0], 0xFE11F8F6, 0xF5FD01F1, 0xE10806FB, 0x170705EB);
	r2 = D(r2, s[0][2][0], 0xF40E01F4, 0x0700FAEC, 0xE7F40F06, 0x09F5EB06);
	r3 = D(r3, s[0][2][0], 0x0401F607, 0x110D01F4, 0x070312FE, 0x10F4E601);
	r0 = D(r0, s[0][2][1], 0x06F608EF, 0xF30906EF, 0xFFF2ED16, 0x06FFFF15);
	r1 = D(r1, s[0][2][1], 0xFA15F9F6, 0xFD010303, 0xF605010A, 0x080107FA);
	r2 = D(r2, s[0][2][1], 0xFDF8F4FD, 0xFBF604FD, 0x150C02EC, 0xFD05F8FF);
	r3 = D(r3, s[0][2][1], 0x02010418, 0x070607EF, 0x090708E9, 0x01F7030C);
	r0 = D(r0, s[0][2][2], 0xFE06F806, 0xF106FAF4, 0x0001FC11, 0x0308000E);
	r1 = D(r1, s[0][2][2], 0xF5EF0307, 0xF308FA0F, 0x04FFFC09, 0x02FAF8F8);
	r2 = D(r2, s[0][2][2], 0x06FD01EC, 0x0A0306E7, 0x050801FE, 0x09FAF202);
	r3 = D(r3, s[0][2][2], 0x00FD0CFA, 0xF4FFF703, 0xED08FB06, 0x01F6F808);
	r0 = D(r0, s[1][0][0], 0x00E71405, 0xF8FDF1FF, 0xFFF406F9, 0xFFF50306);
	r1 = D(r1, s[1][0][0], 0x0005FC0A, 0xF5FE0301, 0x0CEDF803, 0x00FA0306);
	r2 = D(r2, s[1][0][0], 0xFDFD17FA, 0x11F4F001, 0x02ED030B, 0xF811FE03);
	r3 = D(r3, s[1][0][0], 0x08DEFEFD, 0xF4FF08F2, 0xFF0BEBF3, 0xF3040106);
	r0 = D(r0, s[1][0][1], 0xFEF60604, 0xF202FDEE, 0x09E41709, 0x03F50BFE);
	r1 = D(r1, s[1][0][1], 0xEB20FB0D, 0xFFF8FAF3, 0xFFF8FA03, 0x01101BFD);
	r2 = D(r2, s[1][0][1], 0x1601F9FE, 0x00ECF2F0, 0x08F3FA11, 0xF7F4FC01);
	r3 = D(r3, s[1][0][1], 0xF210FA06, 0xFFF00105, 0xF8090E09, 0xFDF50108);
	r0 = D(r0, s[1][0][2], 0x0CFAF5EF, 0xFFF8FFF2, 0x0627F4FE, 0x0307EEF7);
	r1 = D(r1, s[1][0][2], 0x03E70306, 0x0D08F40C, 0xFE0A03FF, 0xFAF40203);
	r2 = D(r2, s[1][0][2], 0xFD03F2FA, 0x04F8FDFA, 0x04FA0201, 0x08FAF0F5);
	r3 = D(r3, s[1][0][2], 0x0509F1FF, 0x06F8FB0D, 0xFD0310FB, 0xF20BFD02);
	r0 = D(r0, s[1][1][0], 0xFA0708FA, 0xFBFDFE0D, 0xFDFD0FF1, 0x1BFA0C04);
	r1 = D(r1, s[1][1][0], 0x08FDEBF7, 0xFAFDF5FF, 0xFAF2F600, 0x0C030EF8);
	r2 = D(r2, s[1][1][0], 0xFF10010A, 0x1305F30F, 0xF607EA0B, 0x040E0AFA);
	r3 = D(r3, s[1][1][0], 0xF6FAF6FC, 0xEDFA0A08, 0xFBF5F307, 0x09F00807);
	r0 = D(r0, s[1][1][1], 0xF3FB0109, 0xF50EF4F5, 0x14F40AFD, 0x06FDEF08);
	r1 = D(r1, s[1][1][1], 0xF2FA040A, 0x02F8F202, 0xE7EB0A0A, 0xE90D00FB);
	r2 = D(r2, s[1][1][1], 0xFD0600FA, 0x01E3E506, 0xE0F0FFEA, 0x0106E206);
	r3 = D(r3, s[1][1][1], 0x13FEFFFE, 0xFDFB0BEA, 0x1CFE0FF2, 0xF4FAFAFF);
	r0 = D(r0, s[1][1][2], 0x06F9F8F6, 0xE90709F3, 0xFDF0F607, 0xF812EF00);
	r1 = D(r1, s[1][1][2], 0xFA080703, 0x06F6F8F9, 0x01F606F8, 0x08020303);
	r2 = D(r2, s[1][1][2], 0x0B06FEF6, 0x0DFF04FC, 0x021503F4, 0x03E91104);
	r3 = D(r3, s[1][1][2], 0xFA0F00FC, 0x03FA04FF, 0x0C0DF50D, 0xFCFFE6FB);
	r0 = D(r0, s[1][2][0], 0x04FFFCFC, 0xECEF140B, 0x0D11F30B, 0x0CFD0E0A);
	r1 = D(r1, s[1][2][0], 0x0AFF1FFA, 0xFAF2FCFB, 0xEDFAEDFF, 0xEFF70E13);
	r2 = D(r2, s[1][2][0], 0x08F50CFF, 0xFDFDFF00, 0x0EEFFFF8, 0x0EF5F8FF);
	r3 = D(r3, s[1][2][0], 0x0501F3FF, 0x00FFFD06, 0x0CFB06FB, 0x0A06EF03);
	r0 = D(r0, s[1][2][1], 0x0ADFFA05, 0xF20AFA05, 0xF1F61106, 0x0701F2FF);
	r1 = D(r1, s[1][2][1], 0xF7FE00FD, 0x1A0B0317, 0xFD010803, 0xFA0C0106);
	r2 = D(r2, s[1][2][1], 0xE3060D06, 0x0509FF02, 0xF4EC0314, 0x0C10F5F0);
	r3 = D(r3, s[1][2][1], 0xF4F7FC01, 0xFB1F03F0, 0x1CF7030A, 0xEEF111FF);
	r0 = D(r0, s[1][2][2], 0x17F80303, 0xF90C05F2, 0x0AF50109, 0x02EBFD11);
	r1 = D(r1, s[1][2][2], 0x070CF2F4, 0xFC0AFE01, 0xF30C08FD, 0xFAFF0AFF);
	r2 = D(r2, s[1][2][2], 0xF701FDF4, 0x00E90F04, 0x04030AED, 0x0EF20906);
	r3 = D(r3, s[1][2][2], 0x010A03F8, 0x080B06FB, 0xFBF90207, 0xF0FDFBF7);
	s[0][0][0] = G[4][xy.y+0][xy.x+0]; s[0][0][1] = G[4][xy.y+0][xy.x+1];
	s[0][0][2] = G[4][xy.y+0][xy.x+2]; s[0][1][0] = G[4][xy.y+1][xy.x+0];
	s[0][1][1] = G[4][xy.y+1][xy.x+1]; s[0][1][2] = G[4][xy.y+1][xy.x+2];
	s[0][2][0] = G[4][xy.y+2][xy.x+0]; s[0][2][1] = G[4][xy.y+2][xy.x+1];
	s[0][2][2] = G[4][xy.y+2][xy.x+2]; s[1][0][0] = G[5][xy.y+0][xy.x+0];
	s[1][0][1] = G[5][xy.y+0][xy.x+1]; s[1][0][2] = G[5][xy.y+0][xy.x+2];
	s[1][1][0] = G[5][xy.y+1][xy.x+0]; s[1][1][1] = G[5][xy.y+1][xy.x+1];
	s[1][1][2] = G[5][xy.y+1][xy.x+2]; s[1][2][0] = G[5][xy.y+2][xy.x+0];
	s[1][2][1] = G[5][xy.y+2][xy.x+1]; s[1][2][2] = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0x08E4F005, 0xF3FAF2F5, 0x0705090A, 0xFBF91901);
	r1 = D(r1, s[0][0][0], 0xFFF60203, 0xFA05EF10, 0x0315FEF7, 0x0415EFF3);
	r2 = D(r2, s[0][0][0], 0x03F20313, 0x0204E600, 0xF301F6F7, 0x0319EFFA);
	r3 = D(r3, s[0][0][0], 0x03F6FC01, 0x030CFD0A, 0xF5FC09FA, 0xF608F80A);
	r0 = D(r0, s[0][0][1], 0x0CE710FD, 0x0AED04FF, 0xFCFEFB01, 0xEEE9030B);
	r1 = D(r1, s[0][0][1], 0x031DF817, 0x020C0F03, 0xEBEFF008, 0x0311ED0F);
	r2 = D(r2, s[0][0][1], 0xF6F30006, 0x0007FCFF, 0xFFF3F4EF, 0x0B070101);
	r3 = D(r3, s[0][0][1], 0x06F4E1F5, 0xFAF218F4, 0x07FF07F3, 0x06FDF801);
	r0 = D(r0, s[0][0][2], 0xFFFFED01, 0x09E3FDFB, 0x04150107, 0x03F81108);
	r1 = D(r1, s[0][0][2], 0x01FBFCFB, 0xF80AFCFA, 0xFDF50CF8, 0xFC19FD01);
	r2 = D(r2, s[0][0][2], 0x03FA1302, 0x04FD1108, 0x0CEDF9FD, 0x00F90806);
	r3 = D(r3, s[0][0][2], 0x09F701EC, 0xFB09F506, 0x0308F500, 0xF80BEB01);
	r0 = D(r0, s[0][1][0], 0xFDF910EB, 0xFF25050E, 0xFF011101, 0x080C0306);
	r1 = D(r1, s[0][1][0], 0xF4E8FAFF, 0x13050700, 0x0315F5E7, 0x09080005);
	r2 = D(r2, s[0][1][0], 0x11F61006, 0x0117FAFF, 0x0F0A17FD, 0x000217F6);
	r3 = D(r3, s[0][1][0], 0x050506F7, 0x0AF906FE, 0x01050802, 0xF2FDF208);
	r0 = D(r0, s[0][1][1], 0x0BF2F605, 0x110A04FB, 0xFBF20201, 0xFB100111);
	r1 = D(r1, s[0][1][1], 0xFDF40C03, 0xFB15F2F6, 0x01030008, 0xFFECFDFC);
	r2 = D(r2, s[0][1][1], 0x0611EFFD, 0xF80AFDFD, 0xF40DDE09, 0xFAF2FDF5);
	r3 = D(r3, s[0][1][1], 0xFBFD0AFA, 0xFC02EFF8, 0xFA0A11FD, 0xFC010608);
	r0 = D(r0, s[0][1][2], 0xF913FF0C, 0x05FFFF15, 0x01F2F917, 0xF2F610F8);
	r1 = D(r1, s[0][1][2], 0x00EEF708, 0x01FB0905, 0x0FFA0DFF, 0x02F618FB);
	r2 = D(r2, s[0][1][2], 0x0C0006FE, 0x000F1003, 0xFD000401, 0xEDF8FAFE);
	r3 = D(r3, s[0][1][2], 0xF8FDF901, 0xF90DFEF4, 0xEBF6F8F8, 0x01EAF3FA);
	r0 = D(r0, s[0][2][0], 0xF8F3FC10, 0xF70C0B03, 0x0B0AFD0C, 0xFFFE01FC);
	r1 = D(r1, s[0][2][0], 0x0FF201F8, 0x0106FFF7, 0x0213F7F8, 0xF6020603);
	r2 = D(r2, s[0][2][0], 0xFAFF0C02, 0x0511F304, 0xF3021307, 0xEF130808);
	r3 = D(r3, s[0][2][0], 0xFDFDF1FD, 0x0EFBF6FA, 0x05FDFDFF, 0x0BF8FAFF);
	r0 = D(r0, s[0][2][1], 0x0AFDF6F0, 0xF6E61200, 0xFD0300FC, 0xFD01EC01);
	r1 = D(r1, s[0][2][1], 0xFCF8F9FA, 0xF410EBFE, 0xFDFAFC08, 0xFAF7F4EE);
	r2 = D(r2, s[0][2][1], 0x03080A06, 0x110BFBF6, 0x1214F812, 0xED04190E);
	r3 = D(r3, s[0][2][1], 0xF9FFE9E9, 0x0608FA0B, 0xFBF409F8, 0x03080A08);
	r0 = D(r0, s[0][2][2], 0xEF0AF708, 0xFE0AF608, 0xFB070D02, 0xFFFE0AF6);
	r1 = D(r1, s[0][2][2], 0x01EC0408, 0xFAFBF601, 0x0A12F20C, 0xFDFA0500);
	r2 = D(r2, s[0][2][2], 0xFD080905, 0x0407FFFF, 0x0A020805, 0x0C080AF9);
	r3 = D(r3, s[0][2][2], 0x0AFDF1F2, 0xF7060001, 0xF803FA03, 0x0AE7F4F6);
	r0 = D(r0, s[1][0][0], 0x03180C0C, 0x0AFF0FFA, 0xF60508F9, 0x05F1FD0E);
	r1 = D(r1, s[1][0][0], 0x000A08F6, 0xED010E05, 0xFEFE0B18, 0xF4FB0AEB);
	r2 = D(r2, s[1][0][0], 0x06F311F3, 0x070815F9, 0xFAFFFE03, 0xF1FA09F2);
	r3 = D(r3, s[1][0][0], 0xF60AFD05, 0x0C0AF6E9, 0x02FF0708, 0x090E03FF);
	r0 = D(r0, s[1][0][1], 0x0A12F606, 0xF403F501, 0xF6100BDD, 0x07F8F7FB);
	r1 = D(r1, s[1][0][1], 0x22F706F9, 0x26F0E0FD, 0xFF0EFFFD, 0x04F813FD);
	r2 = D(r2, s[1][0][1], 0xF406F805, 0xEDF1080A, 0xF6180611, 0xEFF60107);
	r3 = D(r3, s[1][0][1], 0xFA03FA0B, 0xFC0EF515, 0x0300ED0C, 0x17F4FF02);
	r0 = D(r0, s[1][0][2], 0xF60309FC, 0xED14FD06, 0x0FFBF400, 0xF401E913);
	r1 = D(r1, s[1][0][2], 0xFBF6FC13, 0x0001FFF7, 0xEC07EFFA, 0xEE07150A);
	r2 = D(r2, s[1][0][2], 0x1BF40CFA, 0x0EFFF8FB, 0xFA0A0002, 0xFBF601F6);
	r3 = D(r3, s[1][0][2], 0xF4EEF20D, 0x0E0F0E0C, 0x07010600, 0x010306FD);
	r0 = D(r0, s[1][1][0], 0x09F2F81E, 0xFF0105FF, 0x0BFFFAED, 0xF70AFBFD);
	r1 = D(r1, s[1][1][0], 0xF806F9EF, 0xF20600F2, 0x0812FAFF, 0xF205F8EE);
	r2 = D(r2, s[1][1][0], 0x0C040D04, 0x0E0AFD11, 0x0CFDF80B, 0x0408F80B);
	r3 = D(r3, s[1][1][0], 0x0F02FD0B, 0x14F5FED6, 0xF001FD00, 0xE90706F7);
	r0 = D(r0, s[1][1][1], 0xF6F00EFB, 0xFD03E9EE, 0xFE0803F2, 0x0CF6FEF9);
	r1 = D(r1, s[1][1][1], 0x01FFFA12, 0xE01109F8, 0xE8F905F6, 0x06F40AF5);
	r2 = D(r2, s[1][1][1], 0x03EB1EF6, 0xFF0A0613, 0xFD0312EF, 0xE6F4F8FF);
	r3 = D(r3, s[1][1][1], 0x0308E608, 0x06020A15, 0xFEF9F9F2, 0xFC0AF8ED);
	r0 = D(r0, s[1][1][2], 0x01E8FDE3, 0x01F403F6, 0x060CF50C, 0x0FFB0CFD);
	r1 = D(r1, s[1][1][2], 0x05000601, 0xECF1F6F4, 0xDAFFFBEB, 0x0706EB0E);
	r2 = D(r2, s[1][1][2], 0x08FB0105, 0xE70602FD, 0x00F601FA, 0xF5E90A08);
	r3 = D(r3, s[1][1][2], 0x05F702FE, 0xFA020E0F, 0xF9030411, 0xF101F511);
	r0 = D(r0, s[1][2][0], 0x01FA0CE9, 0x0EF10BFF, 0x13FFF406, 0xF4FFF417);
	r1 = D(r1, s[1][2][0], 0xFA0DFFF3, 0xF408FF17, 0x25F6FC01, 0x03FD01F9);
	r2 = D(r2, s[1][2][0], 0x0B03FD09, 0x06FFFF04, 0x0C06EF04, 0x01FD0BFF);
	r3 = D(r3, s[1][2][0], 0x0700F40E, 0x1402F3F4, 0xFC0101F8, 0xF20D0C0C);
	r0 = D(r0, s[1][2][1], 0x080700FB, 0x06FFFFFF, 0xF6F507F4, 0x03010104);
	r1 = D(r1, s[1][2][1], 0xF90903E0, 0xFDF6FBE3, 0x18FBFD09, 0x050A0613);
	r2 = D(r2, s[1][2][1], 0x00FD0308, 0x08F5F7F8, 0xE201ED0C, 0x0FFEF608);
	r3 = D(r3, s[1][2][1], 0x1708FE14, 0x0603FFF2, 0xF8F60305, 0xF7FAE6F8);
	r0 = D(r0, s[1][2][2], 0x21FA0CEB, 0x06F20708, 0x0EF6F90D, 0xF80CF803);
	r1 = D(r1, s[1][2][2], 0x0909F8FA, 0x010206F4, 0xF20600F9, 0x0CFD050A);
	r2 = D(r2, s[1][2][2], 0x05F1FF08, 0xEAF8FDEF, 0x02F5FEF9, 0xF5F3FD01);
	r3 = D(r3, s[1][2][2], 0x09F6F706, 0x0B06FFF3, 0x0603FF06, 0xEB09F01C);
	s[0][0][0] = G[6][xy.y+0][xy.x+0]; s[0][0][1] = G[6][xy.y+0][xy.x+1];
	s[0][0][2] = G[6][xy.y+0][xy.x+2]; s[0][1][0] = G[6][xy.y+1][xy.x+0];
	s[0][1][1] = G[6][xy.y+1][xy.x+1]; s[0][1][2] = G[6][xy.y+1][xy.x+2];
	s[0][2][0] = G[6][xy.y+2][xy.x+0]; s[0][2][1] = G[6][xy.y+2][xy.x+1];
	s[0][2][2] = G[6][xy.y+2][xy.x+2]; s[1][0][0] = G[7][xy.y+0][xy.x+0];
	s[1][0][1] = G[7][xy.y+0][xy.x+1]; s[1][0][2] = G[7][xy.y+0][xy.x+2];
	s[1][1][0] = G[7][xy.y+1][xy.x+0]; s[1][1][1] = G[7][xy.y+1][xy.x+1];
	s[1][1][2] = G[7][xy.y+1][xy.x+2]; s[1][2][0] = G[7][xy.y+2][xy.x+0];
	s[1][2][1] = G[7][xy.y+2][xy.x+1]; s[1][2][2] = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0x06EFF60E, 0x011CF008, 0xCF17EDE7, 0x00E711E1);
	r1 = D(r1, s[0][0][0], 0x29F00D0A, 0xF30C1811, 0xF708FA09, 0xF61910F6);
	r2 = D(r2, s[0][0][0], 0x00171A06, 0x1600F915, 0x110CEAF2, 0x1C0A1CF4);
	r3 = D(r3, s[0][0][0], 0xEDF802FD, 0xEBFF0E08, 0xFAF7F60A, 0x03EB0E00);
	r0 = D(r0, s[0][0][1], 0xFE04F61D, 0xE208F1F9, 0xEF0A19E4, 0xEF040C03);
	r1 = D(r1, s[0][0][1], 0xCC03EFFB, 0xE1F41AF0, 0xEC01ECDC, 0xF8080AE7);
	r2 = D(r2, s[0][0][1], 0xFF00F5FB, 0x0CFC03E7, 0x2A0801ED, 0xECE102FB);
	r3 = D(r3, s[0][0][1], 0xE80EFEFF, 0x06020A04, 0xEFFDFF1F, 0xFDEFEA0B);
	r0 = D(r0, s[0][0][2], 0xFAFD0E04, 0xE4FBE717, 0xE4110AE7, 0x071F06FC);
	r1 = D(r1, s[0][0][2], 0xF4ED06FD, 0xFDF801F8, 0x05F20C0B, 0xFDFD15E7);
	r2 = D(r2, s[0][0][2], 0xF9F0F30C, 0xEB07FC04, 0xF6141DF6, 0xEBFDF8FE);
	r3 = D(r3, s[0][0][2], 0xEB0603E1, 0x18F41306, 0xF7F20315, 0xF6F604E7);
	r0 = D(r0, s[0][1][0], 0x13EEDE04, 0x1618F4F8, 0xF8FC10ED, 0xF1F10724);
	r1 = D(r1, s[0][1][0], 0x0F130BFD, 0xF80AFDDC, 0x0E0EF61C, 0xEF08F611);
	r2 = D(r2, s[0][1][0], 0x27F2F7F7, 0xFD0D0120, 0xFFF0F50D, 0x15040700);
	r3 = D(r3, s[0][1][0], 0xF608FE12, 0xFF091105, 0x111AFCF3, 0x130108EF);
	r0 = D(r0, s[0][1][1], 0xFCF902F8, 0x150AFACC, 0xEF05FCE0, 0xF4F6EFEB);
	r1 = D(r1, s[0][1][1], 0x0119E7E2, 0xE2FFF2D9, 0xF9FDF8EE, 0xEA13E00D);
	r2 = D(r2, s[0][1][1], 0xFD10FBE2, 0xF40BFA02, 0xF7061401, 0x1401EF08);
	r3 = D(r3, s[0][1][1], 0xEF14F82F, 0xE1FFF719, 0xFA110617, 0x19F6FCBC);
	r0 = D(r0, s[0][1][2], 0x1AF8E415, 0xE1F7EFF5, 0xE1FFFDEA, 0x0C14F2F7);
	r1 = D(r1, s[0][1][2], 0x04E9EFDF, 0xEA010AD4, 0xFC03F106, 0x130CF60C);
	r2 = D(r2, s[0][1][2], 0x12FA0002, 0xEF031311, 0xF4F8FE1C, 0xF90210F9);
	r3 = D(r3, s[0][1][2], 0x010C1807, 0xF915FD27, 0xF8ED2906, 0x1301F8F4);
	r0 = D(r0, s[0][2][0], 0xF0FAFD11, 0x26ECFD06, 0x09FFF202, 0xE40CFC02);
	r1 = D(r1, s[0][2][0], 0x0D0901ED, 0xDFF8F503, 0xF817F813, 0xE4100502);
	r2 = D(r2, s[0][2][0], 0x1B06FF03, 0xCD13F917, 0x04FFF8FB, 0x1C03F9F4);
	r3 = D(r3, s[0][2][0], 0xE711F60F, 0xC207FB0C, 0x2DFFFAF9, 0x1EEDFFFA);
	r0 = D(r0, s[0][2][1], 0xF9DBFBEB, 0x0CE517F6, 0xEB0301E0, 0xDDF707EB);
	r1 = D(r1, s[0][2][1], 0xEE0FF4D5, 0x03EE02FA, 0xFBFA09F2, 0xEE1105F6);
	r2 = D(r2, s[0][2][1], 0x1511FAF7, 0x010EFBED, 0x1E00110C, 0x16E90D01);
	r3 = D(r3, s[0][2][1], 0xE301F806, 0xEF0DFD11, 0x0AFC0307, 0x19FBFEF6);
	r0 = D(r0, s[0][2][2], 0xE3091506, 0xDE1104F4, 0xE708F40C, 0xF713F8FF);
	r1 = D(r1, s[0][2][2], 0xF6FB0FEB, 0x03F0F7F8, 0x03F002FD, 0xFF0B03E6);
	r2 = D(r2, s[0][2][2], 0x0BFDFDFA, 0xDCFAF306, 0x05FCFC09, 0x22DEF801);
	r3 = D(r3, s[0][2][2], 0xF4FA03E7, 0xF4FD0403, 0xEAF60D26, 0xF3FD13FD);
	r0 = D(r0, s[1][0][0], 0xFCFF0306, 0x17010610, 0xF303EBFD, 0xFD0101F8);
	r1 = D(r1, s[1][0][0], 0xEEF4F2F8, 0xF102FA02, 0x06FAFFFF, 0x03F70503);
	r2 = D(r2, s[1][0][0], 0xF6ECE903, 0x03F0F9F9, 0x01FFFA0C, 0x0A0A1C0A);
	r3 = D(r3, s[1][0][0], 0xFEF401FF, 0x170EF70B, 0x06030901, 0xF60C06FA);
	r0 = D(r0, s[1][0][1], 0x0AF409F7, 0xEF0800F6, 0xEEFD0EF9, 0x05EF0EF8);
	r1 = D(r1, s[1][0][1], 0x0A02F8FA, 0xF9EDF404, 0x0308EEFE, 0xF608EA01);
	r2 = D(r2, s[1][0][1], 0xF20D02FF, 0x02020503, 0xF3FB17F6, 0x08F5F001);
	r3 = D(r3, s[1][0][1], 0xFBFC0CF1, 0xFDFF06F2, 0xF502F209, 0x06070E00);
	r0 = D(r0, s[1][0][2], 0xF70C07F1, 0x09FFF4F8, 0x11010AF8, 0xF7EE0FF2);
	r1 = D(r1, s[1][0][2], 0x07060906, 0xFA0320FA, 0x0606FF0E, 0x05071301);
	r2 = D(r2, s[1][0][2], 0x0A060E0A, 0x0907020A, 0x03F8F8EB, 0x01FFFCFE);
	r3 = D(r3, s[1][0][2], 0xF8F8FE0D, 0xFAFD06FF, 0xFFFAE60B, 0xFCFEF20A);
	r0 = D(r0, s[1][1][0], 0x0AF2F206, 0xF6FE030F, 0x06EFF2FE, 0xEF1501EF);
	r1 = D(r1, s[1][1][0], 0x0AFEF0F7, 0xFDF0F8F9, 0xF4FF09FF, 0x06F80BFF);
	r2 = D(r2, s[1][1][0], 0x0A0A0202, 0x03FCFF01, 0x06EF0B06, 0xFF050211);
	r3 = D(r3, s[1][1][0], 0xF602FFFE, 0xF6F9FE0E, 0xFC0800FB, 0x0F08FC02);
	r0 = D(r0, s[1][1][1], 0x08FA01FD, 0xF4FCF403, 0xFEF60AF4, 0xF201F203);
	r1 = D(r1, s[1][1][1], 0x06100100, 0xF60309E4, 0x0313FBFF, 0x03EDFAF4);
	r2 = D(r2, s[1][1][1], 0xF20607FF, 0x03F403F1, 0x03FDFD06, 0x15FD04FE);
	r3 = D(r3, s[1][1][1], 0x0A0103F4, 0xF7FE0208, 0x120C0E11, 0x030CFE0E);
	r0 = D(r0, s[1][1][2], 0xF2F70CF7, 0x0DF8FCF4, 0xFF00EFFA, 0xEFEDEFF6);
	r1 = D(r1, s[1][1][2], 0x1EF80A0D, 0x09070AFF, 0xF8070204, 0xF6FA06EE);
	r2 = D(r2, s[1][1][2], 0xED04FEF0, 0xF6F8F507, 0x070805F8, 0xFAFD0511);
	r3 = D(r3, s[1][1][2], 0xF2F6F812, 0x08F60906, 0xFA0D07F0, 0xFFE5FBFD);
	r0 = D(r0, s[1][2][0], 0x0106F6F5, 0x09040A03, 0xF5EF00FD, 0x050903FA);
	r1 = D(r1, s[1][2][0], 0xFDFBFE04, 0x0B06000D, 0x03FC0300, 0x00F31100);
	r2 = D(r2, s[1][2][0], 0x1207F3F8, 0xFAFD10F5, 0x0E15FE0A, 0xF0F60901);
	r3 = D(r3, s[1][2][0], 0xF4E4FAFF, 0x0D091100, 0x0D1311FB, 0x060205FE);
	r0 = D(r0, s[1][2][1], 0xF9030304, 0xFDF6FFFB, 0xFFFB0307, 0xFD07FF0E);
	r1 = D(r1, s[1][2][1], 0x01F4FE08, 0xF60400F4, 0x03FAFC04, 0xF6EFF9FA);
	r2 = D(r2, s[1][2][1], 0x0BF7040A, 0x141AFD04, 0xF60B00F8, 0xF90304FD);
	r3 = D(r3, s[1][2][1], 0x03F6FDF4, 0xF210F901, 0xF5FA0312, 0xF10A0306);
	r0 = D(r0, s[1][2][2], 0x0DFC0300, 0x06FFF800, 0x040CFFF8, 0x0CFDF6FA);
	r1 = D(r1, s[1][2][2], 0x0A0C00FA, 0x0806F701, 0x01FF04FA, 0xFE03FD03);
	r2 = D(r2, s[1][2][2], 0x0F0800F6, 0xEE00FC01, 0xFA030AF5, 0xFF0EF905);
	r3 = D(r3, s[1][2][2], 0xFF08F700, 0x0102F7F7, 0x1116FA04, 0x06F2F303);
	vec4 f0 = vec4(r0) * 6.20001240e-05;
	f0 += vec4(3.626e-02, 1.801e-03, 1.505e-02, -1.113e-02);
	imageStore(out_image, opos + ivec2(0, 0), vec4(f0));
	vec4 f1 = vec4(r1) * 6.20001240e-05;
	f1 += vec4(-2.735e-02, 7.023e-02, 8.673e-03, 7.848e-02);
	imageStore(out_image, opos + ivec2(1, 0), vec4(f1));
	vec4 f2 = vec4(r2) * 6.20001240e-05;
	f2 += vec4(-1.370e-01, 3.211e-02, -1.061e-02, -8.031e-02);
	imageStore(out_image, opos + ivec2(0, 1), vec4(f2));
	vec4 f3 = vec4(r3) * 6.20001240e-05;
	f3 += vec4(8.410e-02, 1.389e-02, -6.144e-02, -1.925e-02);
	imageStore(out_image, opos + ivec2(1, 1), vec4(f3));
}

//!DESC CuNNy-16x16C-TEST-conv5
//!HOOK LUMA
//!COMPUTE 16 16 8 8
//!BIND conv4
//!BIND LUMA
//!SAVE conv5
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_spirv_intrinsics : require
#extension GL_EXT_control_flow_attributes : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) ivec4(r.x + dp4(s, a, 0), r.y + dp4(s, b, 0), r.z + dp4(s, c, 0), r.w + dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	[[unroll]] for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		[[unroll]] for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(2, 2) + ivec2(1, 1)) * conv4_pt;
			r = conv4_gather(p, 0);
			g = conv4_gather(p, 1);
			b = conv4_gather(p, 2);
			a = conv4_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.00000000e+00;
			vec4 v2 = vec4(r.z, g.z, b.z, a.z) * 1.00000000e+00;
			vec4 v4 = vec4(r.x, g.x, b.x, a.x) * 1.00000000e+00;
			vec4 v6 = vec4(r.y, g.y, b.y, a.y) * 1.00000000e+00;
			vec4 v1 = max(-v0, vec4(0));
			v0 = max(v0, vec4(0));
			vec4 v3 = max(-v2, vec4(0));
			v2 = max(v2, vec4(0));
			vec4 v5 = max(-v4, vec4(0));
			v4 = max(v4, vec4(0));
			vec4 v7 = max(-v6, vec4(0));
			v6 = max(v6, vec4(0));
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s[2][3][3];
	ivec4 r0 = ivec4(0);
	ivec4 r1 = ivec4(0);
	ivec4 r2 = ivec4(0);
	ivec4 r3 = ivec4(0);
	s[0][0][0] = G[0][xy.y+0][xy.x+0]; s[0][0][1] = G[0][xy.y+0][xy.x+1];
	s[0][0][2] = G[0][xy.y+0][xy.x+2]; s[0][1][0] = G[0][xy.y+1][xy.x+0];
	s[0][1][1] = G[0][xy.y+1][xy.x+1]; s[0][1][2] = G[0][xy.y+1][xy.x+2];
	s[0][2][0] = G[0][xy.y+2][xy.x+0]; s[0][2][1] = G[0][xy.y+2][xy.x+1];
	s[0][2][2] = G[0][xy.y+2][xy.x+2]; s[1][0][0] = G[1][xy.y+0][xy.x+0];
	s[1][0][1] = G[1][xy.y+0][xy.x+1]; s[1][0][2] = G[1][xy.y+0][xy.x+2];
	s[1][1][0] = G[1][xy.y+1][xy.x+0]; s[1][1][1] = G[1][xy.y+1][xy.x+1];
	s[1][1][2] = G[1][xy.y+1][xy.x+2]; s[1][2][0] = G[1][xy.y+2][xy.x+0];
	s[1][2][1] = G[1][xy.y+2][xy.x+1]; s[1][2][2] = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0xF700FF01, 0x1FFD01FC, 0x05FEF212, 0xFBFB0302);
	r1 = D(r1, s[0][0][0], 0x01E7030B, 0xFBFF05F4, 0xF707F6F7, 0x020203F0);
	r2 = D(r2, s[0][0][0], 0x020D030C, 0x04F5FB18, 0x04020107, 0xF5FEFE08);
	r3 = D(r3, s[0][0][0], 0xFD0DF1F1, 0x041A0807, 0x0F00F1F5, 0x04FC0101);
	r0 = D(r0, s[0][0][1], 0xF9EDFEFF, 0xFE07F417, 0xFD0B0401, 0x0705FFF5);
	r1 = D(r1, s[0][0][1], 0xFE01FDFF, 0xF1F7FFE5, 0x00FD08FE, 0x0304F5E6);
	r2 = D(r2, s[0][0][1], 0xF802FF13, 0xF5F50702, 0xFCF9FEF7, 0x08020AFE);
	r3 = D(r3, s[0][0][1], 0x0B010C14, 0x0CF50DFE, 0x08140DFB, 0x02F70403);
	r0 = D(r0, s[0][0][2], 0x04001004, 0xFDFCF6FF, 0xFBEF01EA, 0x030009F4);
	r1 = D(r1, s[0][0][2], 0xFA0502FE, 0x0C0607F5, 0xFC07F4F6, 0x02FFFE0C);
	r2 = D(r2, s[0][0][2], 0xFDFCFB1A, 0x06EDF110, 0x02FC1001, 0xF9010009);
	r3 = D(r3, s[0][0][2], 0x0D070BFE, 0x000AF8F3, 0x020102FE, 0xF509F7E7);
	r0 = D(r0, s[0][1][0], 0xEC02080A, 0x24FCF700, 0x24F516F5, 0x0CFF1AFE);
	r1 = D(r1, s[0][1][0], 0x12FE011A, 0x0B04F707, 0x02FB0F01, 0x02F80D03);
	r2 = D(r2, s[0][1][0], 0x03F008FF, 0x00F6F8F9, 0xFCF8F103, 0xF507040D);
	r3 = D(r3, s[0][1][0], 0xEBE8F7E6, 0xEBF50003, 0x2AFBF0F4, 0xFC0308F6);
	r0 = D(r0, s[0][1][1], 0x0E090FE9, 0x0D040414, 0x17FDFA0B, 0x02040AFF);
	r1 = D(r1, s[0][1][1], 0xFB09F51B, 0xF9FCE60D, 0xF103F50D, 0xF3EC0B11);
	r2 = D(r2, s[0][1][1], 0x10090EF4, 0xDC0D070F, 0x1A02F30A, 0x0DF70014);
	r3 = D(r3, s[0][1][1], 0xFF07FE0A, 0x06F7F9EA, 0x0AFFF4EF, 0xEF03FFF2);
	r0 = D(r0, s[0][1][2], 0xFDF707F5, 0x0509FE0B, 0x060B10EB, 0xFE06F103);
	r1 = D(r1, s[0][1][2], 0xFAFDFE0C, 0xFA02FB0A, 0x0304FEFC, 0xF90E1FFC);
	r2 = D(r2, s[0][1][2], 0x13FFF207, 0xF8F5EF00, 0x0811F523, 0xF50DFBFD);
	r3 = D(r3, s[0][1][2], 0x120EF90A, 0xF402F4FB, 0x0DF6040C, 0x01FB08FD);
	r0 = D(r0, s[0][2][0], 0x12010014, 0x020506F9, 0x10FDF2EC, 0x07000505);
	r1 = D(r1, s[0][2][0], 0xFFFB0800, 0x070B08FB, 0x100A05F7, 0xED020A02);
	r2 = D(r2, s[0][2][0], 0x1508FC04, 0xF2E9FFFB, 0xFC050A0E, 0xFEF8F5F9);
	r3 = D(r3, s[0][2][0], 0xF4FBF7FA, 0xE9FCFAED, 0x150A10FF, 0x0D0C05FC);
	r0 = D(r0, s[0][2][1], 0x0C0B0101, 0xFF04020A, 0xF90E0E0C, 0x04F517F3);
	r1 = D(r1, s[0][2][1], 0xFA0400EF, 0x09FCF9FD, 0x04FD040D, 0xE9FC0FFF);
	r2 = D(r2, s[0][2][1], 0xE20FFB05, 0x110FF2F4, 0x180B1606, 0x06F5ECEC);
	r3 = D(r3, s[0][2][1], 0x040DF5F0, 0x07F903F6, 0xFDF60EEF, 0x021002FA);
	r0 = D(r0, s[0][2][2], 0xFDFDFA0F, 0x0F0FF7F4, 0xF50505F9, 0xF40602E4);
	r1 = D(r1, s[0][2][2], 0x05FF0C0D, 0x030714EC, 0xF8F507ED, 0xFDF80303);
	r2 = D(r2, s[0][2][2], 0xFD090C00, 0xDFFA02FA, 0x0A04F303, 0x05FF000C);
	r3 = D(r3, s[0][2][2], 0x0AF0020D, 0x04FCFFEE, 0x0905F70C, 0xEFF7050F);
	r0 = D(r0, s[1][0][0], 0xFFF913FB, 0x0CFE0AF4, 0x0F020C0C, 0x0313F9E6);
	r1 = D(r1, s[1][0][0], 0x07FD1809, 0x00F8F909, 0xF40EFBF8, 0x100BF808);
	r2 = D(r2, s[1][0][0], 0x00010403, 0x02051401, 0x06FA0AF8, 0xF6F4FFEE);
	r3 = D(r3, s[1][0][0], 0xF8E5F9F9, 0xFEF40C01, 0x04FE080B, 0x090AF4EF);
	r0 = D(r0, s[1][0][1], 0xF30502FC, 0xED061905, 0x002417FB, 0xECF1F9FB);
	r1 = D(r1, s[1][0][1], 0xF4FD11F9, 0x0AF6F518, 0x00041108, 0xFD0003FA);
	r2 = D(r2, s[1][0][1], 0xF4F0110D, 0xF0EFF00D, 0x09F70902, 0xFA0203F8);
	r3 = D(r3, s[1][0][1], 0x1802F4FD, 0xFB04FC06, 0x0FF9F4F8, 0x0D0EF901);
	r0 = D(r0, s[1][0][2], 0xF8F705FB, 0x04F4FD0F, 0x041300FF, 0x0AFD0A09);
	r1 = D(r1, s[1][0][2], 0xF9E8FDF9, 0x03F4F1FB, 0xFB0CF8FF, 0x01FD0400);
	r2 = D(r2, s[1][0][2], 0x04F80DF9, 0xFCEC02EC, 0xFEFB030D, 0xFD0BF705);
	r3 = D(r3, s[1][0][2], 0xEF03FF0E, 0xF413FF03, 0xFC00F40F, 0xFFF7F30D);
	r0 = D(r0, s[1][1][0], 0x0E0C00F7, 0x0A04FC14, 0xFF250FF6, 0xEE02F8F6);
	r1 = D(r1, s[1][1][0], 0xF31CF5FD, 0xFE0901FE, 0xF303FB1B, 0xF2FBF7FD);
	r2 = D(r2, s[1][1][0], 0x0BF20EFC, 0xFD000200, 0x0B0B00FC, 0xF7EFF200);
	r3 = D(r3, s[1][1][0], 0xF9F30905, 0x0401FAF2, 0x10110B0B, 0xFA0A0B10);
	r0 = D(r0, s[1][1][1], 0xEBF5EF03, 0xF7DDE1EB, 0x040519FF, 0xEFD70407);
	r1 = D(r1, s[1][1][1], 0xEF0410F1, 0xF31809F8, 0xFD0803F6, 0xE30909E9);
	r2 = D(r2, s[1][1][1], 0x1109F807, 0xFDEC0904, 0xFF121304, 0xF707F3FA);
	r3 = D(r3, s[1][1][1], 0xFC14F9EE, 0x06E80109, 0x0D0B0700, 0xF318000C);
	r0 = D(r0, s[1][1][2], 0x07F6010D, 0xF50603F6, 0xFF10FEFF, 0x01FE01EF);
	r1 = D(r1, s[1][1][2], 0x1A0CF00A, 0x081702F3, 0x09FEEAF0, 0xF8F12019);
	r2 = D(r2, s[1][1][2], 0xFE0AFDF0, 0x0910F501, 0xF90B0DFF, 0x0CF9FAFC);
	r3 = D(r3, s[1][1][2], 0xFB0BFCFF, 0xFC0803F9, 0xF50BFCF3, 0x0419F5FB);
	r0 = D(r0, s[1][2][0], 0x0400EDFB, 0xF10B1102, 0xF7F70E0A, 0xF709FEF1);
	r1 = D(r1, s[1][2][0], 0x07F2F809, 0x00E108ED, 0x04FD0401, 0x0413F7FC);
	r2 = D(r2, s[1][2][0], 0xFCF604F9, 0x0014F4FD, 0x04F8FB08, 0x0AF902FA);
	r3 = D(r3, s[1][2][0], 0x050BFC04, 0xF5FEFFF1, 0x0A1FFBF9, 0x07F60EF9);
	r0 = D(r0, s[1][2][1], 0x03F6FB01, 0xF60815FA, 0xFFE7F0F5, 0xE6FA0D0F);
	r1 = D(r1, s[1][2][1], 0xEEF30E0B, 0xF8F705FE, 0x010EF0FB, 0xE1FE08EC);
	r2 = D(r2, s[1][2][1], 0xFD01FE04, 0xED01F505, 0x0D05F805, 0x0C0E0C15);
	r3 = D(r3, s[1][2][1], 0x1107FD0A, 0x0DF514FF, 0x030AFD03, 0x07FCFF00);
	r0 = D(r0, s[1][2][2], 0x1119FAF9, 0x02F50EFF, 0x00F5F703, 0x11EE0AEA);
	r1 = D(r1, s[1][2][2], 0x01F2F606, 0x0AF3FD02, 0x0C07FDF9, 0xFEFAFE0B);
	r2 = D(r2, s[1][2][2], 0x12180803, 0x0AFBF3F5, 0xFEF907FD, 0xF2F20CFF);
	r3 = D(r3, s[1][2][2], 0xFFFE0A0F, 0xFCFE0C09, 0x0AF91310, 0x09EEFBF3);
	s[0][0][0] = G[2][xy.y+0][xy.x+0]; s[0][0][1] = G[2][xy.y+0][xy.x+1];
	s[0][0][2] = G[2][xy.y+0][xy.x+2]; s[0][1][0] = G[2][xy.y+1][xy.x+0];
	s[0][1][1] = G[2][xy.y+1][xy.x+1]; s[0][1][2] = G[2][xy.y+1][xy.x+2];
	s[0][2][0] = G[2][xy.y+2][xy.x+0]; s[0][2][1] = G[2][xy.y+2][xy.x+1];
	s[0][2][2] = G[2][xy.y+2][xy.x+2]; s[1][0][0] = G[3][xy.y+0][xy.x+0];
	s[1][0][1] = G[3][xy.y+0][xy.x+1]; s[1][0][2] = G[3][xy.y+0][xy.x+2];
	s[1][1][0] = G[3][xy.y+1][xy.x+0]; s[1][1][1] = G[3][xy.y+1][xy.x+1];
	s[1][1][2] = G[3][xy.y+1][xy.x+2]; s[1][2][0] = G[3][xy.y+2][xy.x+0];
	s[1][2][1] = G[3][xy.y+2][xy.x+1]; s[1][2][2] = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0x0AF800FE, 0xFEFBF606, 0x000D0100, 0xF9FBF8FD);
	r1 = D(r1, s[0][0][0], 0x120EFD03, 0x010601FE, 0x0400050E, 0xFBF1F906);
	r2 = D(r2, s[0][0][0], 0x08190201, 0x02070107, 0xFDF90404, 0xFD0109FF);
	r3 = D(r3, s[0][0][0], 0x00FBF2F8, 0xF2E80BFB, 0x08090803, 0x05F2FC03);
	r0 = D(r0, s[0][0][1], 0x0607FFFE, 0xF10BFFFE, 0xF904060D, 0x0000F7E7);
	r1 = D(r1, s[0][0][1], 0x07150503, 0xFF0103ED, 0xFEFCFA0C, 0xFD07F413);
	r2 = D(r2, s[0][0][1], 0xF1070AFE, 0xF814000E, 0xFD0502F6, 0xF9FAFCEC);
	r3 = D(r3, s[0][0][1], 0xF9FA070B, 0x04F5F4F7, 0xF8FFFFEB, 0xFCD8FD0D);
	r0 = D(r0, s[0][0][2], 0xF406FBFF, 0xF7FEF5F0, 0x03F70C04, 0xFCFCFEED);
	r1 = D(r1, s[0][0][2], 0xF5FDF9FB, 0x0508FEFD, 0xFEFEF7F9, 0x15F2020C);
	r2 = D(r2, s[0][0][2], 0xFB170A05, 0xFC05F019, 0x07FE0800, 0x0004FF08);
	r3 = D(r3, s[0][0][2], 0x0303FFFB, 0x0009000F, 0x0104FD0B, 0xFFE80B0A);
	r0 = D(r0, s[0][1][0], 0x0707060F, 0x09F7FFF4, 0xECF60107, 0xFF150BF1);
	r1 = D(r1, s[0][1][0], 0xF2FBFB02, 0xF90DFCFF, 0xFE0C03FF, 0xF8FEFE0E);
	r2 = D(r2, s[0][1][0], 0x02FDFFEE, 0xFDFD03FF, 0x10EEF403, 0xEC10FFEC);
	r3 = D(r3, s[0][1][0], 0xF2020B0B, 0x0DFEFFF8, 0xF7FC0219, 0x13F5F5F0);
	r0 = D(r0, s[0][1][1], 0xE7080900, 0xF5050616, 0x0A0205F0, 0x080705F4);
	r1 = D(r1, s[0][1][1], 0xFF0A0E03, 0x080E0CF1, 0x000404F8, 0x01FEFE01);
	r2 = D(r2, s[0][1][1], 0x0C08FC0E, 0xFE1011F4, 0x16FF08F6, 0xEC09F702);
	r3 = D(r3, s[0][1][1], 0xFBFE0307, 0x080B0E07, 0xE302F511, 0xF8F9FD14);
	r0 = D(r0, s[0][1][2], 0xE60E11FA, 0xF4E503EA, 0xFFF4FAEC, 0x17FA0F03);
	r1 = D(r1, s[0][1][2], 0x11F218FA, 0xFBFCFBF2, 0x0D0316F8, 0x05E3FEF0);
	r2 = D(r2, s[0][1][2], 0x0B1B03F7, 0xF208F9F9, 0xF70CFEF9, 0xF31BF20D);
	r3 = D(r3, s[0][1][2], 0xF4FA01FE, 0xFD100EF4, 0xFEF90E0B, 0x02FD0BFE);
	r0 = D(r0, s[0][2][0], 0x040000F9, 0xFCEB0B18, 0x0002F803, 0x00E20EFC);
	r1 = D(r1, s[0][2][0], 0x04FAF6F5, 0xFA0EF5FC, 0x060401FA, 0x02FE04F8);
	r2 = D(r2, s[0][2][0], 0x020FF3FE, 0xFBF7FE0A, 0xF5070DFC, 0xF40B0DFD);
	r3 = D(r3, s[0][2][0], 0xF9FDF6FC, 0xFC020BF3, 0x00E708FB, 0xFDFFF302);
	r0 = D(r0, s[0][2][1], 0x0502F6E5, 0x01F8FD10, 0xF7EDF9F1, 0x0E180D09);
	r1 = D(r1, s[0][2][1], 0xFCF5F608, 0x0903FE04, 0x0400F6F0, 0xFDFB1505);
	r2 = D(r2, s[0][2][1], 0x06FEF9FC, 0x051503FF, 0xF0F0FE0D, 0x030C09F4);
	r3 = D(r3, s[0][2][1], 0x06FDEA05, 0x050BFB0A, 0xEAFA01FE, 0xF605FCE4);
	r0 = D(r0, s[0][2][2], 0xF90708FC, 0x0E02FCFA, 0xFE01F0FE, 0x00F710FB);
	r1 = D(r1, s[0][2][2], 0xF9FBFA05, 0xF6F5F9F4, 0x030407F5, 0xF8FD0CFA);
	r2 = D(r2, s[0][2][2], 0x00EB0410, 0x06F6F4F9, 0xED0A010D, 0xFBFDEF10);
	r3 = D(r3, s[0][2][2], 0x01FF0300, 0xF00CF30B, 0x00E8F813, 0x11FE0300);
	r0 = D(r0, s[1][0][0], 0xF605E917, 0x02F0FF02, 0x030B06FE, 0x000903F3);
	r1 = D(r1, s[1][0][0], 0x000D190B, 0xF3F704F8, 0x07F8F106, 0x1103FB04);
	r2 = D(r2, s[1][0][0], 0xF6030602, 0xFF0BF1EF, 0x0FFDF5FF, 0xF308F4FF);
	r3 = D(r3, s[1][0][0], 0x06FFF702, 0x0601EE09, 0xF9020A13, 0x0BF8EDF6);
	r0 = D(r0, s[1][0][1], 0xF7121900, 0x0207FA01, 0x0703FCFF, 0xF20801F1);
	r1 = D(r1, s[1][0][1], 0x0C140400, 0x16F200EB, 0xF60400FF, 0xF8F9FE07);
	r2 = D(r2, s[1][0][1], 0x1FF90308, 0x08141904, 0xF4081308, 0x0608F80D);
	r3 = D(r3, s[1][0][1], 0x02F6F2F2, 0xFD01F405, 0x0700F110, 0x0CF2FB06);
	r0 = D(r0, s[1][0][2], 0x04F6FF0B, 0x09F700FF, 0x050201F4, 0xF8F90BE6);
	r1 = D(r1, s[1][0][2], 0xFFF61000, 0xF10411FD, 0xFB03F9F6, 0xF40DE107);
	r2 = D(r2, s[1][0][2], 0x01FC09FB, 0x062126FB, 0x0C02E8F8, 0x0E0CF807);
	r3 = D(r3, s[1][0][2], 0xF8FF13EE, 0x060009EF, 0x0A0F0909, 0x07F20BFF);
	r0 = D(r0, s[1][1][0], 0xFDFCFAFE, 0xFD030EFD, 0x0403DDFC, 0x0EEDD9FF);
	r1 = D(r1, s[1][1][0], 0x02182DFC, 0xFC10F7FC, 0xF1FA08F5, 0x0CFBEDF1);
	r2 = D(r2, s[1][1][0], 0x05151705, 0x0702E6FE, 0xF9FC090C, 0xFDFBF6FE);
	r3 = D(r3, s[1][1][0], 0x0CF8010A, 0x0207FF0A, 0xFCF8F8F2, 0xEEF9050A);
	r0 = D(r0, s[1][1][1], 0x02F5D6F1, 0x0B17E3FA, 0xF7EA0BF4, 0x18ECF8F4);
	r1 = D(r1, s[1][1][1], 0x10F7F905, 0x0416F113, 0xDC06F908, 0xFBE7FC1E);
	r2 = D(r2, s[1][1][1], 0xFEF710F0, 0xFA080D01, 0x0005060E, 0x27000409);
	r3 = D(r3, s[1][1][1], 0x28F0FD01, 0xFD1109F8, 0x06F4110A, 0x11FE0EFB);
	r0 = D(r0, s[1][1][2], 0x11F0E904, 0xFB0CFFF3, 0xE8060409, 0xF6FE00FF);
	r1 = D(r1, s[1][1][2], 0xFBFBFE03, 0xF60CEB1A, 0xFC0AF1FE, 0x0211F711);
	r2 = D(r2, s[1][1][2], 0xFBEB18EF, 0xFD13040A, 0x19F80BF9, 0x19FC0CFE);
	r3 = D(r3, s[1][1][2], 0x0B0F0306, 0x0C1007F2, 0xF8020607, 0x06E7FC0F);
	r0 = D(r0, s[1][2][0], 0xF7070704, 0x18FEFFF6, 0xF0031DFF, 0x0C0107F5);
	r1 = D(r1, s[1][2][0], 0xF4F40A0E, 0x1010E3FF, 0x03020305, 0x05080503);
	r2 = D(r2, s[1][2][0], 0xFD00F407, 0x090C19F8, 0xF605E5FC, 0x1101FB00);
	r3 = D(r3, s[1][2][0], 0xF805E70A, 0x0E04F502, 0x080C0AFC, 0xFBF80AFB);
	r0 = D(r0, s[1][2][1], 0xF9F800F1, 0x0A05F209, 0xFF0BFEFC, 0x10FBFAF8);
	r1 = D(r1, s[1][2][1], 0xF9FEF302, 0xFB0D1DE6, 0xF80909F4, 0xE400FDFA);
	r2 = D(r2, s[1][2][1], 0xEB0CF81A, 0xFC091508, 0xFE0811FF, 0xE0010311);
	r3 = D(r3, s[1][2][1], 0xEC03EEF9, 0xF2FEFC0A, 0xFDFEF4F5, 0xFD020EFE);
	r0 = D(r0, s[1][2][2], 0x0607E2F6, 0x0AF8EE02, 0xFCF9E4F4, 0x07F903FF);
	r1 = D(r1, s[1][2][2], 0xF9FCEEFE, 0xF7F40403, 0xF6FCEF00, 0x13FD0312);
	r2 = D(r2, s[1][2][2], 0x0307FD05, 0xFB1504FE, 0x14F912FA, 0xF004F509);
	r3 = D(r3, s[1][2][2], 0xFB0901FC, 0x0116FE03, 0x06F4F704, 0xFAF2EC00);
	s[0][0][0] = G[4][xy.y+0][xy.x+0]; s[0][0][1] = G[4][xy.y+0][xy.x+1];
	s[0][0][2] = G[4][xy.y+0][xy.x+2]; s[0][1][0] = G[4][xy.y+1][xy.x+0];
	s[0][1][1] = G[4][xy.y+1][xy.x+1]; s[0][1][2] = G[4][xy.y+1][xy.x+2];
	s[0][2][0] = G[4][xy.y+2][xy.x+0]; s[0][2][1] = G[4][xy.y+2][xy.x+1];
	s[0][2][2] = G[4][xy.y+2][xy.x+2]; s[1][0][0] = G[5][xy.y+0][xy.x+0];
	s[1][0][1] = G[5][xy.y+0][xy.x+1]; s[1][0][2] = G[5][xy.y+0][xy.x+2];
	s[1][1][0] = G[5][xy.y+1][xy.x+0]; s[1][1][1] = G[5][xy.y+1][xy.x+1];
	s[1][1][2] = G[5][xy.y+1][xy.x+2]; s[1][2][0] = G[5][xy.y+2][xy.x+0];
	s[1][2][1] = G[5][xy.y+2][xy.x+1]; s[1][2][2] = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0xE9FF00F6, 0x1400FEFF, 0x07ED130A, 0x0C0206F2);
	r1 = D(r1, s[0][0][0], 0x0CF20009, 0x02FFFD03, 0x05FF08F8, 0x130B09EA);
	r2 = D(r2, s[0][0][0], 0x1C00FE04, 0x0D03010E, 0xF603010C, 0x05090502);
	r3 = D(r3, s[0][0][0], 0xFDFD0CFC, 0x08F7FB02, 0x1AF407FF, 0x1A09FDFE);
	r0 = D(r0, s[0][0][1], 0xEF04020B, 0x1FF4FEF9, 0xF10F0704, 0x0E0BFFE5);
	r1 = D(r1, s[0][0][1], 0x0F03000A, 0x06FDEFFE, 0xF20202F8, 0x181100F4);
	r2 = D(r2, s[0][0][1], 0x020DF901, 0xE8F10119, 0x07FFFDF7, 0x18090EFD);
	r3 = D(r3, s[0][0][1], 0x08FEFAFD, 0xF3F016F7, 0x04FDF70E, 0xFFFEF7FD);
	r0 = D(r0, s[0][0][2], 0x0307050A, 0xFD08040A, 0xD9FBF20C, 0xF5FBFAFA);
	r1 = D(r1, s[0][0][2], 0x0700EF10, 0xFE11F9F2, 0x24F2F8F6, 0x03FBFEFC);
	r2 = D(r2, s[0][0][2], 0xF2FD0FF7, 0xE10502FA, 0x0E04FC08, 0x0EF7F304);
	r3 = D(r3, s[0][0][2], 0xF3080806, 0x01FFFF15, 0x01FF0516, 0x00F5F20C);
	r0 = D(r0, s[0][1][0], 0x04070A01, 0x08F90103, 0x0F1BEEF0, 0xFB0FFAED);
	r1 = D(r1, s[0][1][0], 0xF40C1304, 0x0C0201F8, 0xEEFE00F2, 0xFEF9FBFD);
	r2 = D(r2, s[0][1][0], 0xF100FBF3, 0xFBFF0409, 0xF80E02FD, 0x04F804E8);
	r3 = D(r3, s[0][1][0], 0x080BF608, 0x0E040A06, 0xFCFF1EF3, 0x00030310);
	r0 = D(r0, s[0][1][1], 0xDA031C04, 0x09FBE511, 0xFD030CFD, 0x0511FFF5);
	r1 = D(r1, s[0][1][1], 0x16F8FC09, 0xDF1DED11, 0x01FD19FD, 0xFE1DDD13);
	r2 = D(r2, s[0][1][1], 0xE5FC0CEE, 0xF1111101, 0x21E907E9, 0x20050207);
	r3 = D(r3, s[0][1][1], 0x19140129, 0x09F4FD0B, 0xF4FF0BF7, 0xF0E111F3);
	r0 = D(r0, s[0][1][2], 0xFB0501EA, 0xE608F7FE, 0x16F40416, 0x0FEF0EF6);
	r1 = D(r1, s[0][1][2], 0x11EF0916, 0x0FFBFDF8, 0xE4F5FFDD, 0x0A03FDFB);
	r2 = D(r2, s[0][1][2], 0x00F1F2FC, 0xF909F9E4, 0xFF22EC15, 0xDE12FA02);
	r3 = D(r3, s[0][1][2], 0xF70A04F4, 0x16050903, 0xFC021109, 0x0105130C);
	r0 = D(r0, s[0][2][0], 0xF8FA0403, 0x080100F6, 0xFBF90404, 0x120F03FE);
	r1 = D(r1, s[0][2][0], 0x1107FBF0, 0x00010110, 0x0201FB07, 0xE0FC0707);
	r2 = D(r2, s[0][2][0], 0xE5ED0406, 0x1D1C0814, 0xF4FF0705, 0x0BF4FFFE);
	r3 = D(r3, s[0][2][0], 0x1000F500, 0xFC000809, 0xF90B0610, 0x03080002);
	r0 = D(r0, s[0][2][1], 0xEBF60805, 0x1102FDF8, 0xE3F711FB, 0xED0E10EF);
	r1 = D(r1, s[0][2][1], 0xF5010908, 0x0BE5F5F3, 0x0006F5EF, 0xFAF203F1);
	r2 = D(r2, s[0][2][1], 0xF5E807F5, 0xF504FB07, 0x00F90205, 0x13FCFE14);
	r3 = D(r3, s[0][2][1], 0x0C02FAFF, 0x230E04ED, 0xF109080A, 0xF4FE0B00);
	r0 = D(r0, s[0][2][2], 0xEFF904FE, 0x070FF402, 0x0405F9FE, 0x02F9EE0C);
	r1 = D(r1, s[0][2][2], 0xF1FC0810, 0xF40005FE, 0x020508FA, 0x02F7FE15);
	r2 = D(r2, s[0][2][2], 0x11FAF8F7, 0xFBFB0B07, 0xEC0D00E3, 0x18F5F2ED);
	r3 = D(r3, s[0][2][2], 0x16050C0B, 0xF804F0FD, 0xF2F10AFA, 0x04FFFCFD);
	r0 = D(r0, s[1][0][0], 0x0BF8050F, 0xF006EDF5, 0xFE19FDF7, 0xFE03F1F1);
	r1 = D(r1, s[1][0][0], 0xFD01F4FD, 0xFCFE03FE, 0x05FD090B, 0xFBFCFF13);
	r2 = D(r2, s[1][0][0], 0xF6F4FDF1, 0x0203FF02, 0xFB080CF9, 0x05FBFC03);
	r3 = D(r3, s[1][0][0], 0xFFFBF6F5, 0x0EFD0B00, 0xF005070D, 0xF30018F2);
	r0 = D(r0, s[1][0][1], 0x040A0903, 0xFF0E11F9, 0x19E8F302, 0xFE0AFCFF);
	r1 = D(r1, s[1][0][1], 0xF4F6FE1B, 0xFF16FD00, 0x0DFB05FD, 0xF5FFFEFE);
	r2 = D(r2, s[1][0][1], 0x02F9FB0A, 0x04FEF3FA, 0x06FE140A, 0x040D03F9);
	r3 = D(r3, s[1][0][1], 0x01E50809, 0xFBF6FAF9, 0xF5FCFE11, 0xF512F80B);
	r0 = D(r0, s[1][0][2], 0x060100FF, 0x08FD110D, 0x0FFE0903, 0x00F8FEFB);
	r1 = D(r1, s[1][0][2], 0x01F7F513, 0xF7FEF6F8, 0x0309FBEF, 0x01FB01F7);
	r2 = D(r2, s[1][0][2], 0xFFE717FC, 0xFFFF0810, 0x02F100FD, 0x0404F504);
	r3 = D(r3, s[1][0][2], 0x08F2FCFC, 0x011007FA, 0xF3FD02FD, 0x000B0CF7);
	r0 = D(r0, s[1][1][0], 0x09120706, 0x09F4F5FE, 0x08F30E08, 0x02010B07);
	r1 = D(r1, s[1][1][0], 0xFC07EF03, 0xF10BFAF9, 0x0A07FEF1, 0x06FA0E0D);
	r2 = D(r2, s[1][1][0], 0x03FAFB05, 0xF3150509, 0xF90B0402, 0xF708E908);
	r3 = D(r3, s[1][1][0], 0xFB0AF807, 0x0C07FF0C, 0xFF000A00, 0x0F03EEF9);
	r0 = D(r0, s[1][1][1], 0xF2F8F2ED, 0x0AEF01FB, 0x02E90003, 0x0B04F401);
	r1 = D(r1, s[1][1][1], 0x02FC050A, 0x08F805E2, 0x0104F3EA, 0xFFF606EE);
	r2 = D(r2, s[1][1][1], 0xF802F8FD, 0x0118F4FF, 0xE4F9F717, 0xFC06FC01);
	r3 = D(r3, s[1][1][1], 0x03010E04, 0xFB1CFF09, 0xFF0DFC01, 0xF8220018);
	r0 = D(r0, s[1][1][2], 0x07F217FE, 0xFEFBE70E, 0xE504E0FD, 0xF708F20D);
	r1 = D(r1, s[1][1][2], 0xF8F6FF0A, 0xFC05F3FA, 0x09F8F8F1, 0x0817FB06);
	r2 = D(r2, s[1][1][2], 0xF1FAFCFF, 0x02110BFC, 0x0BF0ECFB, 0x1A020B11);
	r3 = D(r3, s[1][1][2], 0x04060005, 0xF80D12F2, 0xE40DF7FD, 0xFE030EF9);
	r0 = D(r0, s[1][2][0], 0x07FD0911, 0x00FAF204, 0x06FEF60B, 0xFC0A0FF5);
	r1 = D(r1, s[1][2][0], 0xF9FDFE01, 0x03F9F3FD, 0xF40AF5FB, 0x080004FD);
	r2 = D(r2, s[1][2][0], 0xFDFFF600, 0xFC08FF12, 0x01050A04, 0xF80CF9FB);
	r3 = D(r3, s[1][2][0], 0x04FCFCFD, 0x10000913, 0xF7030AFC, 0x03020008);
	r0 = D(r0, s[1][2][1], 0xFCF2FEF5, 0xF1FA05F7, 0x00FEFD16, 0xFFF80414);
	r1 = D(r1, s[1][2][1], 0xF4030511, 0xF61CE8F9, 0x07FCFEF4, 0x0108EEFD);
	r2 = D(r2, s[1][2][1], 0x0C07F8F7, 0xF713FBF8, 0x0904FDF8, 0x020BF703);
	r3 = D(r3, s[1][2][1], 0x12060A1A, 0xF100FC04, 0x0BEA0008, 0x0BFCFC09);
	r0 = D(r0, s[1][2][2], 0x0CF40401, 0x0EF31009, 0x05011200, 0xF7FEF407);
	r1 = D(r1, s[1][2][2], 0x13F7FE06, 0xFCF0F8FC, 0xFCF809FD, 0x030D0CF7);
	r2 = D(r2, s[1][2][2], 0xF8FF0907, 0x07040405, 0x0BF6F7ED, 0x02FC01F9);
	r3 = D(r3, s[1][2][2], 0xF411F60B, 0x0015F509, 0x0F03F9F5, 0xF8F910FD);
	s[0][0][0] = G[6][xy.y+0][xy.x+0]; s[0][0][1] = G[6][xy.y+0][xy.x+1];
	s[0][0][2] = G[6][xy.y+0][xy.x+2]; s[0][1][0] = G[6][xy.y+1][xy.x+0];
	s[0][1][1] = G[6][xy.y+1][xy.x+1]; s[0][1][2] = G[6][xy.y+1][xy.x+2];
	s[0][2][0] = G[6][xy.y+2][xy.x+0]; s[0][2][1] = G[6][xy.y+2][xy.x+1];
	s[0][2][2] = G[6][xy.y+2][xy.x+2]; s[1][0][0] = G[7][xy.y+0][xy.x+0];
	s[1][0][1] = G[7][xy.y+0][xy.x+1]; s[1][0][2] = G[7][xy.y+0][xy.x+2];
	s[1][1][0] = G[7][xy.y+1][xy.x+0]; s[1][1][1] = G[7][xy.y+1][xy.x+1];
	s[1][1][2] = G[7][xy.y+1][xy.x+2]; s[1][2][0] = G[7][xy.y+2][xy.x+0];
	s[1][2][1] = G[7][xy.y+2][xy.x+1]; s[1][2][2] = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0xFDFF0712, 0x02000CE8, 0xFCF9F6FD, 0x0CFD0EFD);
	r1 = D(r1, s[0][0][0], 0xF1FD05F4, 0x0DFDF71D, 0xF5F90B08, 0x0F07FBFE);
	r2 = D(r2, s[0][0][0], 0x0302020A, 0xF4FE10F3, 0x04F8FB0C, 0xEF1106FC);
	r3 = D(r3, s[0][0][0], 0xF9FCED05, 0x0BFF01F6, 0xEE08F7FD, 0x01FFFFFD);
	r0 = D(r0, s[0][0][1], 0xFC04070B, 0xF802FCFA, 0xFF02FBFB, 0xFB06F909);
	r1 = D(r1, s[0][0][1], 0x1401FA05, 0x0600F501, 0x06FC0209, 0x0CFE10F6);
	r2 = D(r2, s[0][0][1], 0x170201F1, 0xF7F200F9, 0xEF0EF211, 0xF206F9F1);
	r3 = D(r3, s[0][0][1], 0xFE0D0501, 0x000FFEFA, 0xF1090F16, 0x06FBF7EA);
	r0 = D(r0, s[0][0][2], 0x07FF0AF5, 0xF40FFD0D, 0xF2FB1504, 0xFC13FEFB);
	r1 = D(r1, s[0][0][2], 0xFCFCFF03, 0x09FD050E, 0xFDFA0C1A, 0xF90EFF0E);
	r2 = D(r2, s[0][0][2], 0x0F0009F6, 0x150300FB, 0x0902FE07, 0xFE00FB03);
	r3 = D(r3, s[0][0][2], 0xF9F5FC0A, 0xF7040102, 0xF1F60702, 0x0701F4FA);
	r0 = D(r0, s[0][1][0], 0x0D09F508, 0x0CFBF1F3, 0xFE1721F9, 0x05FBF804);
	r1 = D(r1, s[0][1][0], 0x05F7050D, 0xF7050B16, 0x0CF5FE09, 0xFE02FAF5);
	r2 = D(r2, s[0][1][0], 0x040AFAF6, 0x0708EEFC, 0x00FC000E, 0xF6ED0411);
	r3 = D(r3, s[0][1][0], 0xEC0208FB, 0x0C0DEDF8, 0xFE080108, 0x040FFE07);
	r0 = D(r0, s[0][1][1], 0x04FC0AF5, 0x0EFA16FC, 0x03FDEDF2, 0xF8FE05FD);
	r1 = D(r1, s[0][1][1], 0xFFF7F60E, 0x170002E8, 0xF80A08F6, 0x190B1DEE);
	r2 = D(r2, s[0][1][1], 0x0AF8ED01, 0x04F9F003, 0xEC0C0C08, 0xFF04F8FB);
	r3 = D(r3, s[0][1][1], 0xFDF1FAE4, 0x0402F6F0, 0xF2FBFD1C, 0xEF0C0616);
	r0 = D(r0, s[0][1][2], 0x1A0805EB, 0x09F5110F, 0x0DF3FC0B, 0x0CFC00EF);
	r1 = D(r1, s[0][1][2], 0x08F6F5E4, 0xF9F902ED, 0x0708050B, 0xFB061513);
	r2 = D(r2, s[0][1][2], 0xFDECFAFB, 0x0408FE09, 0xEBFCF3F6, 0x04FC0001);
	r3 = D(r3, s[0][1][2], 0xEC0D02F3, 0x01F90909, 0x05FBF508, 0x0A00FFF0);
	r0 = D(r0, s[0][2][0], 0xF1FDF801, 0x0215000B, 0x0CF8F004, 0xFD00FD0D);
	r1 = D(r1, s[0][2][0], 0x000D04F9, 0x020AEF0D, 0xF7060AF7, 0x08F5F0F8);
	r2 = D(r2, s[0][2][0], 0x09F6FE0D, 0x050CFD03, 0x0706F507, 0xFF07FC0B);
	r3 = D(r3, s[0][2][0], 0x08010108, 0x050AEDF7, 0xF9000BFE, 0x03FCFE0E);
	r0 = D(r0, s[0][2][1], 0x02FCFCEC, 0xF002FE01, 0x04F7050B, 0xF50AF70C);
	r1 = D(r1, s[0][2][1], 0xF9ECF900, 0x0E05F206, 0xFDFBFE06, 0x03FB06E5);
	r2 = D(r2, s[0][2][1], 0x0DF0FB07, 0xF709EA03, 0x090A09FB, 0xFEFB04FE);
	r3 = D(r3, s[0][2][1], 0xFA0BFD15, 0x07FAF503, 0x1102F401, 0xFF06061C);
	r0 = D(r0, s[0][2][2], 0xF7F9050F, 0xFEFAFEFE, 0xFC0008FB, 0xF7F201FE);
	r1 = D(r1, s[0][2][2], 0xFB04080B, 0xFDF3F6F0, 0x030A0700, 0x03FE100A);
	r2 = D(r2, s[0][2][2], 0xFCFB0901, 0xFB04E803, 0xFBF9FAE7, 0xF8F10409);
	r3 = D(r3, s[0][2][2], 0xFE040704, 0xF2FDF220, 0x0014F5FE, 0x09FCF80F);
	r0 = D(r0, s[1][0][0], 0x00F60808, 0x09FCFD04, 0xF5F3FDFE, 0xFA1B0702);
	r1 = D(r1, s[1][0][0], 0xFFF4F3FF, 0xFEFD10F9, 0xFBFC03F2, 0xF9080703);
	r2 = D(r2, s[1][0][0], 0xFBF0E9FE, 0x20F6F607, 0x060408F6, 0xF6F204F8);
	r3 = D(r3, s[1][0][0], 0x0307FCFA, 0x17FF0D0C, 0xFDEC03FB, 0xFFF80A07);
	r0 = D(r0, s[1][0][1], 0x13FEF600, 0xFBF4120A, 0xEB000706, 0xF416F409);
	r1 = D(r1, s[1][0][1], 0xF908FC07, 0x0BF807F7, 0xF604FA00, 0x0F01FB04);
	r2 = D(r2, s[1][0][1], 0x0310FD13, 0x0B07F903, 0x05E40B01, 0xF2060000);
	r3 = D(r3, s[1][0][1], 0xFCE6F610, 0xFE070203, 0x1DED10FA, 0x0508F702);
	r0 = D(r0, s[1][0][2], 0x04020400, 0xF60B25F4, 0x13F51003, 0xFF0D01FE);
	r1 = D(r1, s[1][0][2], 0xF807DB00, 0x04F2F90A, 0xF0100BF5, 0xF5FD05EF);
	r2 = D(r2, s[1][0][2], 0x2004F7FB, 0xF201F8FC, 0x020AFFFE, 0xEF0DF305);
	r3 = D(r3, s[1][0][2], 0x08F1F3F5, 0x060003FC, 0x0203FE03, 0x00FEF702);
	r0 = D(r0, s[1][1][0], 0x08F20800, 0xF60C0F0A, 0x0410EE0E, 0x0E0002FE);
	r1 = D(r1, s[1][1][0], 0x03FFF00B, 0x0311F6F1, 0xFCFE00FA, 0x0D14F90F);
	r2 = D(r2, s[1][1][0], 0x0F09FA02, 0x0101F603, 0xF90BF8F6, 0x0110F0FC);
	r3 = D(r3, s[1][1][0], 0x1B06FDFC, 0x0B050106, 0xF006F708, 0xF9F70509);
	r0 = D(r0, s[1][1][1], 0xE6190209, 0xFAEFFCF9, 0xFD03100B, 0xF305050A);
	r1 = D(r1, s[1][1][1], 0x0001FD01, 0x02E9E0F5, 0xF81BF5FA, 0xF513FC13);
	r2 = D(r2, s[1][1][1], 0x1A050BFF, 0x2311E5FB, 0x0AF3FEF8, 0xF3081607);
	r3 = D(r3, s[1][1][1], 0xFF0CFC0F, 0xF313EF0E, 0xFEFA0403, 0x150016FD);
	r0 = D(r0, s[1][1][2], 0xFB0B0A0C, 0xEAF8150D, 0xF1021408, 0xFFFC0D06);
	r1 = D(r1, s[1][1][2], 0xFD01E608, 0xF3140FFC, 0x0A1305EF, 0xF20BFDF5);
	r2 = D(r2, s[1][1][2], 0xFEF6F4F8, 0x0407FD09, 0xECF1F1FD, 0xF7FDEC06);
	r3 = D(r3, s[1][1][2], 0x05F7FC04, 0xFF0CF9FF, 0xEDFE07FC, 0x10060109);
	r0 = D(r0, s[1][2][0], 0x01010F0D, 0x03FDFD00, 0x020411FB, 0xFC0E06FD);
	r1 = D(r1, s[1][2][0], 0xF708F716, 0xF90209F1, 0x000007F6, 0x04FA0B07);
	r2 = D(r2, s[1][2][0], 0xFCFB01FD, 0xFCFAF302, 0x03FC01F8, 0xFFFC04F4);
	r3 = D(r3, s[1][2][0], 0xF30E03F7, 0x09FEFC06, 0x0505F8FE, 0x010F08F9);
	r0 = D(r0, s[1][2][1], 0xF906F603, 0xFAE00700, 0x0306E7F7, 0xF50D020A);
	r1 = D(r1, s[1][2][1], 0x02F8000C, 0x031DF900, 0xF9FEFBF9, 0x0B080F02);
	r2 = D(r2, s[1][2][1], 0x0A01F9F3, 0x0309EEFB, 0x03F1F0F7, 0xFBF70808);
	r3 = D(r3, s[1][2][1], 0x02050B09, 0x130BF3FF, 0xFDFDFCE3, 0xF80D1500);
	r0 = D(r0, s[1][2][2], 0x10F5EAF9, 0xFE090CF7, 0x160317F8, 0x0FFB0C1F);
	r1 = D(r1, s[1][2][2], 0x05EFE508, 0x0909F900, 0xF104F8EF, 0x0018FFFD);
	r2 = D(r2, s[1][2][2], 0x01021004, 0x03030103, 0x1506010C, 0xF3EA1C02);
	r3 = D(r3, s[1][2][2], 0xF20B0502, 0x0C02F4FE, 0xF9F1F8FE, 0xF80109F3);
	vec4 f0 = vec4(r0) * 6.20001240e-05;
	f0 += vec4(-3.938e-02, -1.857e-02, -4.797e-02, -7.015e-03);
	imageStore(out_image, opos + ivec2(0, 0), vec4(f0));
	vec4 f1 = vec4(r1) * 6.20001240e-05;
	f1 += vec4(-9.155e-02, 7.205e-02, 1.038e-01, -2.249e-03);
	imageStore(out_image, opos + ivec2(1, 0), vec4(f1));
	vec4 f2 = vec4(r2) * 6.20001240e-05;
	f2 += vec4(2.704e-02, -2.562e-02, 1.378e-02, 1.273e-02);
	imageStore(out_image, opos + ivec2(0, 1), vec4(f2));
	vec4 f3 = vec4(r3) * 6.20001240e-05;
	f3 += vec4(-1.336e-02, -6.102e-02, -2.140e-02, -5.459e-02);
	imageStore(out_image, opos + ivec2(1, 1), vec4(f3));
}

//!DESC CuNNy-16x16C-TEST-conv6
//!HOOK LUMA
//!COMPUTE 16 16 8 8
//!BIND conv5
//!BIND LUMA
//!SAVE conv6
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_spirv_intrinsics : require
#extension GL_EXT_control_flow_attributes : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) ivec4(r.x + dp4(s, a, 0), r.y + dp4(s, b, 0), r.z + dp4(s, c, 0), r.w + dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	[[unroll]] for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		[[unroll]] for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(2, 2) + ivec2(1, 1)) * conv5_pt;
			r = conv5_gather(p, 0);
			g = conv5_gather(p, 1);
			b = conv5_gather(p, 2);
			a = conv5_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.00000000e+00;
			vec4 v2 = vec4(r.z, g.z, b.z, a.z) * 1.00000000e+00;
			vec4 v4 = vec4(r.x, g.x, b.x, a.x) * 1.00000000e+00;
			vec4 v6 = vec4(r.y, g.y, b.y, a.y) * 1.00000000e+00;
			vec4 v1 = max(-v0, vec4(0));
			v0 = max(v0, vec4(0));
			vec4 v3 = max(-v2, vec4(0));
			v2 = max(v2, vec4(0));
			vec4 v5 = max(-v4, vec4(0));
			v4 = max(v4, vec4(0));
			vec4 v7 = max(-v6, vec4(0));
			v6 = max(v6, vec4(0));
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s[2][3][3];
	ivec4 r0 = ivec4(0);
	ivec4 r1 = ivec4(0);
	ivec4 r2 = ivec4(0);
	ivec4 r3 = ivec4(0);
	s[0][0][0] = G[0][xy.y+0][xy.x+0]; s[0][0][1] = G[0][xy.y+0][xy.x+1];
	s[0][0][2] = G[0][xy.y+0][xy.x+2]; s[0][1][0] = G[0][xy.y+1][xy.x+0];
	s[0][1][1] = G[0][xy.y+1][xy.x+1]; s[0][1][2] = G[0][xy.y+1][xy.x+2];
	s[0][2][0] = G[0][xy.y+2][xy.x+0]; s[0][2][1] = G[0][xy.y+2][xy.x+1];
	s[0][2][2] = G[0][xy.y+2][xy.x+2]; s[1][0][0] = G[1][xy.y+0][xy.x+0];
	s[1][0][1] = G[1][xy.y+0][xy.x+1]; s[1][0][2] = G[1][xy.y+0][xy.x+2];
	s[1][1][0] = G[1][xy.y+1][xy.x+0]; s[1][1][1] = G[1][xy.y+1][xy.x+1];
	s[1][1][2] = G[1][xy.y+1][xy.x+2]; s[1][2][0] = G[1][xy.y+2][xy.x+0];
	s[1][2][1] = G[1][xy.y+2][xy.x+1]; s[1][2][2] = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0xFE0304FF, 0x09120607, 0xF7FA01FF, 0x0DFCFBFA);
	r1 = D(r1, s[0][0][0], 0xFAFE02F7, 0xFEFFF5FD, 0xFD020BFB, 0x01FB0605);
	r2 = D(r2, s[0][0][0], 0xF700F705, 0x01F60FF6, 0x050F00FC, 0x03040204);
	r3 = D(r3, s[0][0][0], 0xF61EF605, 0xF108F505, 0xF9F105F2, 0xFDFC0301);
	r0 = D(r0, s[0][0][1], 0x170208FA, 0xF7F7FFF8, 0x00FC0206, 0x0003FBFB);
	r1 = D(r1, s[0][0][1], 0x05EC0102, 0xF80507FB, 0xF80C040B, 0x12FA1006);
	r2 = D(r2, s[0][0][1], 0x020C06FC, 0x0100E9F0, 0x05F8FF06, 0x01F91604);
	r3 = D(r3, s[0][0][1], 0xFAFE0302, 0xF70CFC00, 0xF2040406, 0xFB0C0614);
	r0 = D(r0, s[0][0][2], 0x0905FA06, 0x08FD08EF, 0x06FD0903, 0x0C0BFB0E);
	r1 = D(r1, s[0][0][2], 0xFAFE1202, 0xFE090307, 0xF8010909, 0xEAFAF403);
	r2 = D(r2, s[0][0][2], 0x060306FD, 0xFE0AF8FB, 0xF3040C1D, 0x1209FA08);
	r3 = D(r3, s[0][0][2], 0xF8080BF7, 0xE6090705, 0xFC06F501, 0xFF1704EE);
	r0 = D(r0, s[0][1][0], 0x05FD0C05, 0xF71200F1, 0x0C000BFA, 0xFE0504F1);
	r1 = D(r1, s[0][1][0], 0xFDFEF80A, 0xF3FEFB01, 0x060EF504, 0x0503000D);
	r2 = D(r2, s[0][1][0], 0x02080F09, 0xFAFFF802, 0xFE09F801, 0x08FC0E11);
	r3 = D(r3, s[0][1][0], 0xFDF51402, 0x08ECFBF6, 0x14201203, 0x000B0F0E);
	r0 = D(r0, s[0][1][1], 0xFC0BF3FE, 0xFEF3F405, 0x05F7FCFB, 0xFF070EEE);
	r1 = D(r1, s[0][1][1], 0x07181100, 0xFBF9EE08, 0x0E19FDF0, 0x05110E04);
	r2 = D(r2, s[0][1][1], 0x04F9FD00, 0x0FF7EE07, 0xFE090005, 0xF708FF01);
	r3 = D(r3, s[0][1][1], 0xE109EE0C, 0x07FD0406, 0x0109E812, 0x05161009);
	r0 = D(r0, s[0][1][2], 0xFBF50907, 0xF2F224F3, 0x00FAFBF9, 0xF9F3FD00);
	r1 = D(r1, s[0][1][2], 0x0300F303, 0x0EFAF50A, 0xF8FF0BF1, 0xF00809FE);
	r2 = D(r2, s[0][1][2], 0x03E705E7, 0xF4F30215, 0xFBF616F9, 0x0CF8F6EB);
	r3 = D(r3, s[0][1][2], 0x03F7EAFD, 0x0203FBFD, 0xFF130304, 0xFA1A09EC);
	r0 = D(r0, s[0][2][0], 0xFEF7F104, 0x0EF206F4, 0xFA08FB02, 0x070D02F6);
	r1 = D(r1, s[0][2][0], 0xEF191509, 0x02FA07FE, 0x01FC09F5, 0x0BFAF7F8);
	r2 = D(r2, s[0][2][0], 0xFC08FAF8, 0x120FF8F7, 0xF7010B0C, 0xFBF6E406);
	r3 = D(r3, s[0][2][0], 0x02F104F5, 0xF4F50C05, 0x03F9FC03, 0xFA0704F1);
	r0 = D(r0, s[0][2][1], 0x040916F5, 0x0C00E908, 0x06FA15FE, 0x080AF9F3);
	r1 = D(r1, s[0][2][1], 0xE90CF503, 0x01F106F0, 0xF20602EE, 0x0300FBFB);
	r2 = D(r2, s[0][2][1], 0xFDFFEB09, 0x0007F6F5, 0xECF2F911, 0xF80800FC);
	r3 = D(r3, s[0][2][1], 0x06FF1709, 0x0FF808F6, 0x05FAFE03, 0x14F5EA08);
	r0 = D(r0, s[0][2][2], 0xFA030C09, 0x09FC0BF8, 0xFEFDF800, 0xEB090F06);
	r1 = D(r1, s[0][2][2], 0x0E11F500, 0x171707F7, 0xFE00FCFE, 0xF0080BFA);
	r2 = D(r2, s[0][2][2], 0xFB13F802, 0xF5FA0EFB, 0x05F8EF05, 0x08010405);
	r3 = D(r3, s[0][2][2], 0xFF00F80B, 0x05F104FE, 0xF7FDFBFE, 0x0605EE03);
	r0 = D(r0, s[1][0][0], 0x04031712, 0x1AFE06FE, 0x02010003, 0xF602FEF4);
	r1 = D(r1, s[1][0][0], 0xFA000F05, 0xEEFBFBFA, 0x0DF1F2FF, 0xE4F7FEFE);
	r2 = D(r2, s[1][0][0], 0x0C000802, 0x0902FE04, 0x0EF40006, 0xFBF9FDFE);
	r3 = D(r3, s[1][0][0], 0x00080FFC, 0x02F7F5F1, 0xF805FBFC, 0x0F090DF7);
	r0 = D(r0, s[1][0][1], 0x000200FB, 0x10EFF0F5, 0xFCF9FAFE, 0x0905FEFE);
	r1 = D(r1, s[1][0][1], 0xF3FE0AED, 0x04FC08ED, 0x08FD15ED, 0xE0FD0A00);
	r2 = D(r2, s[1][0][1], 0x02FD0A09, 0x2B0AF706, 0xF30900F4, 0xF20CEFFD);
	r3 = D(r3, s[1][0][1], 0xFDFEF807, 0x03F9F70C, 0xFE0DE1F7, 0x02FFF500);
	r0 = D(r0, s[1][0][2], 0x08F0FE03, 0x0401F2FA, 0xFC08FF02, 0xFA0207F7);
	r1 = D(r1, s[1][0][2], 0x020AFFF8, 0xFBF908EE, 0x20050105, 0xF806FBF5);
	r2 = D(r2, s[1][0][2], 0xFD00F5FA, 0x0C0AECFB, 0x0C0103FB, 0x05040A00);
	r3 = D(r3, s[1][0][2], 0xFBFBFA09, 0xFDF4F20B, 0x05FCFEFE, 0x0511FB0B);
	r0 = D(r0, s[1][1][0], 0xFDF21619, 0x08030604, 0xE6FD0D04, 0xF40FF1F8);
	r1 = D(r1, s[1][1][0], 0x0910F8F5, 0x020A0F08, 0xFE0308FD, 0xE510F5F8);
	r2 = D(r2, s[1][1][0], 0x05FDFD00, 0x0B030101, 0xED110E05, 0x0003FBFC);
	r3 = D(r3, s[1][1][0], 0x0D08FC02, 0xF3090C00, 0xF8FE05FF, 0xFD140DFA);
	r0 = D(r0, s[1][1][1], 0xFF091C09, 0xF4120EFE, 0x12ECF815, 0x090F02EA);
	r1 = D(r1, s[1][1][1], 0xEEF8FDFD, 0xFD0717FA, 0xF30CF81B, 0xE609ECE0);
	r2 = D(r2, s[1][1][1], 0xE0F4EE0F, 0x0FFD0B13, 0xE3F10304, 0xE7FD07F3);
	r3 = D(r3, s[1][1][1], 0x0EFEF2F8, 0x15EC0912, 0x230912F1, 0x0F010229);
	r0 = D(r0, s[1][1][2], 0xFE05F60A, 0x0AF712F4, 0xF4F8FD13, 0x0909F702);
	r1 = D(r1, s[1][1][2], 0xF60BF50F, 0xDCF105CF, 0xE609F1F6, 0xF50B0903);
	r2 = D(r2, s[1][1][2], 0xFE00FE15, 0x0BFB0FFE, 0xEA01EE01, 0xFBFCFD06);
	r3 = D(r3, s[1][1][2], 0xF315EE22, 0x0AFE0801, 0x05070F00, 0x0502FB0D);
	r0 = D(r0, s[1][2][0], 0x0505FEFF, 0xFB0FF804, 0xFB000005, 0x00140804);
	r1 = D(r1, s[1][2][0], 0x110709DE, 0xFE0EFA13, 0xF80B03FE, 0xE9130509);
	r2 = D(r2, s[1][2][0], 0x110D0807, 0xFBFDFCF1, 0xFE060502, 0x06120905);
	r3 = D(r3, s[1][2][0], 0x01F2FBF7, 0x0CF6EF0E, 0xE016FB19, 0xFF100BF6);
	r0 = D(r0, s[1][2][1], 0xF70017F8, 0xFB0AE9E8, 0x001E020D, 0xDE0EF70E);
	r1 = D(r1, s[1][2][1], 0x0E1504D6, 0xFC15FDF2, 0x06000500, 0x0D0603FB);
	r2 = D(r2, s[1][2][1], 0x08FCFDFB, 0xEBF3F519, 0xF2DDFF0D, 0xF6F60515);
	r3 = D(r3, s[1][2][1], 0x05EA1806, 0x19EBEEFF, 0x06F8FD0A, 0x0304F504);
	r0 = D(r0, s[1][2][2], 0x050905F7, 0xFAFCFEEF, 0xF3F90906, 0x17F1FF0E);
	r1 = D(r1, s[1][2][2], 0x15EE00EE, 0x0CFC01F2, 0x0204F803, 0x0A010300);
	r2 = D(r2, s[1][2][2], 0x110FFE05, 0x0CFEE4F7, 0xF6110009, 0xFA0C0804);
	r3 = D(r3, s[1][2][2], 0x0EF717F7, 0xF5F3FB1A, 0x00001009, 0x0C0207FB);
	s[0][0][0] = G[2][xy.y+0][xy.x+0]; s[0][0][1] = G[2][xy.y+0][xy.x+1];
	s[0][0][2] = G[2][xy.y+0][xy.x+2]; s[0][1][0] = G[2][xy.y+1][xy.x+0];
	s[0][1][1] = G[2][xy.y+1][xy.x+1]; s[0][1][2] = G[2][xy.y+1][xy.x+2];
	s[0][2][0] = G[2][xy.y+2][xy.x+0]; s[0][2][1] = G[2][xy.y+2][xy.x+1];
	s[0][2][2] = G[2][xy.y+2][xy.x+2]; s[1][0][0] = G[3][xy.y+0][xy.x+0];
	s[1][0][1] = G[3][xy.y+0][xy.x+1]; s[1][0][2] = G[3][xy.y+0][xy.x+2];
	s[1][1][0] = G[3][xy.y+1][xy.x+0]; s[1][1][1] = G[3][xy.y+1][xy.x+1];
	s[1][1][2] = G[3][xy.y+1][xy.x+2]; s[1][2][0] = G[3][xy.y+2][xy.x+0];
	s[1][2][1] = G[3][xy.y+2][xy.x+1]; s[1][2][2] = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0x00FE08F8, 0x00FC0E03, 0x05FDF501, 0x02F80BFD);
	r1 = D(r1, s[0][0][0], 0xF5FE130B, 0x00FA1F10, 0x04F506E5, 0xF406FD08);
	r2 = D(r2, s[0][0][0], 0x060112FD, 0xF4EDFEFB, 0x08F40AF4, 0x040805F9);
	r3 = D(r3, s[0][0][0], 0x07F40802, 0x0D030E0A, 0x03120519, 0x050407F9);
	r0 = D(r0, s[0][0][1], 0x0CFEFDEB, 0x08FB1AE7, 0xF91012EF, 0x04FA0512);
	r1 = D(r1, s[0][0][1], 0xF506F1F8, 0xFAFF1909, 0x03F82013, 0xF8010403);
	r2 = D(r2, s[0][0][1], 0x03080608, 0x03091A06, 0x0FF90002, 0xF700E204);
	r3 = D(r3, s[0][0][1], 0x09F202EF, 0xFC0D0807, 0x00FBF9F2, 0xE90FFAFA);
	r0 = D(r0, s[0][0][2], 0x06072005, 0xFB04F701, 0x011202F5, 0xFD0BFE06);
	r1 = D(r1, s[0][0][2], 0x03FEFE03, 0xFFF400F9, 0xFFE7FB0E, 0xFE000505);
	r2 = D(r2, s[0][0][2], 0x0103F6FC, 0x09040BF8, 0x0CFD00FD, 0xF8F2F7F9);
	r3 = D(r3, s[0][0][2], 0x0306FE04, 0xFDF413FA, 0x01FAF114, 0x0B000FFB);
	r0 = D(r0, s[0][1][0], 0xEC06FA08, 0x0304120B, 0xFAE51500, 0x07081304);
	r1 = D(r1, s[0][1][0], 0x02F4E6F1, 0xF7FBFB06, 0xFDF6F4FE, 0x0AFD1207);
	r2 = D(r2, s[0][1][0], 0x18FCFCEF, 0xEFEEF406, 0x220B1505, 0xEDF2EFFD);
	r3 = D(r3, s[0][1][0], 0xF0031401, 0xFAF20C03, 0x08032608, 0x0AEDFA03);
	r0 = D(r0, s[0][1][1], 0xFC13E7F8, 0xECF5F8FD, 0xFAF40BFC, 0xF70FE2EA);
	r1 = D(r1, s[0][1][1], 0x080A172D, 0xDDF90A06, 0x0413F50B, 0x09FA18F4);
	r2 = D(r2, s[0][1][1], 0x190A0E01, 0x1D100F10, 0x0201E717, 0x0BF5FD0F);
	r3 = D(r3, s[0][1][1], 0x090C1808, 0x0307FDF5, 0xEEF8F7DC, 0x0F0904FB);
	r0 = D(r0, s[0][1][2], 0xFCF3FFEF, 0x0602F0F4, 0xF8FCFD00, 0xF40917F3);
	r1 = D(r1, s[0][1][2], 0x0406020A, 0xFA05FA06, 0xFF01040B, 0xFC04000E);
	r2 = D(r2, s[0][1][2], 0xF702E6FA, 0x08060212, 0xF9FCF7FA, 0xFFFE04FC);
	r3 = D(r3, s[0][1][2], 0x081206FC, 0x08010003, 0x0207FA05, 0xF7E811EF);
	r0 = D(r0, s[0][2][0], 0x00FBF4FE, 0xF6FB04FE, 0x04E7FCF9, 0x0F020324);
	r1 = D(r1, s[0][2][0], 0x0708F2EC, 0x03051206, 0xEE08FB04, 0x03001900);
	r2 = D(r2, s[0][2][0], 0x11F4110A, 0xF70D07E7, 0x11FCEC03, 0x0B02FDF7);
	r3 = D(r3, s[0][2][0], 0x090101F5, 0xFBF90501, 0x08FE1608, 0x06F61109);
	r0 = D(r0, s[0][2][1], 0xE9040301, 0x1A0EFF05, 0x06E411F0, 0x12EF0DE9);
	r1 = D(r1, s[0][2][1], 0x0D1CF002, 0xF1F8F802, 0xF50FF8ED, 0xF70303EA);
	r2 = D(r2, s[0][2][1], 0x06FE060C, 0x030BF31C, 0xF600F203, 0xF503F5F8);
	r3 = D(r3, s[0][2][1], 0xF0090AFD, 0x0A040B03, 0x1BF80DE6, 0xED05F807);
	r0 = D(r0, s[0][2][2], 0x0304F6FF, 0x04F6120E, 0x070F04FC, 0xFCFCF2F6);
	r1 = D(r1, s[0][2][2], 0x05031015, 0xF80300FD, 0x0B04FA0E, 0xFE0302F2);
	r2 = D(r2, s[0][2][2], 0x0608F1ED, 0xFBFF00F5, 0x01F9E4FB, 0x0A07FBF2);
	r3 = D(r3, s[0][2][2], 0xF4E91103, 0xF4FB1C03, 0xF7FDEED8, 0x0EFB0809);
	r0 = D(r0, s[1][0][0], 0xFAFD03F5, 0x120B1115, 0x00F8FEFA, 0x0A0806FB);
	r1 = D(r1, s[1][0][0], 0x08FE03F2, 0xF5FE03FE, 0x0CFA0216, 0x11F606F5);
	r2 = D(r2, s[1][0][0], 0xF3060600, 0x03051A06, 0x0110030D, 0x0210EF03);
	r3 = D(r3, s[1][0][0], 0xFDFE00F9, 0x0EECFD06, 0x0B00F7FC, 0xFD05140E);
	r0 = D(r0, s[1][0][1], 0xE9FDF5FF, 0x0B050212, 0x06F2F401, 0x0A170803);
	r1 = D(r1, s[1][0][1], 0x01080202, 0xDEFFFDFA, 0xF10EF203, 0xF0F3F509);
	r2 = D(r2, s[1][0][1], 0xF5F802F7, 0x0F09FE03, 0x1205F7FE, 0x0B0211F7);
	r3 = D(r3, s[1][0][1], 0xFD0E07FD, 0x0EFBF0F3, 0xFEFB0112, 0x19FD1202);
	r0 = D(r0, s[1][0][2], 0xF4FFF805, 0x02FA0B00, 0xF6F9FCFD, 0x01F40006);
	r1 = D(r1, s[1][0][2], 0x0FFC0308, 0xEF05FC00, 0xFC120501, 0xFBFE04FB);
	r2 = D(r2, s[1][0][2], 0xEFFB03FC, 0x0804EF00, 0xFD05F0FE, 0x0B020401);
	r3 = D(r3, s[1][0][2], 0xFA040203, 0xEF06FD08, 0xF709F00B, 0xF804F8FB);
	r0 = D(r0, s[1][1][0], 0xFBFA0200, 0xE6EBFBF9, 0x08E2F20B, 0x1A07FEF2);
	r1 = D(r1, s[1][1][0], 0x120E0903, 0x12FB0DFE, 0x0FF60A04, 0x0A08F8F3);
	r2 = D(r2, s[1][1][0], 0xF1FF0705, 0x0F15030B, 0xF104FBFD, 0x070B0213);
	r3 = D(r3, s[1][1][0], 0x0EEAF90F, 0xE3F4FE0F, 0x230702E9, 0x050B0200);
	r0 = D(r0, s[1][1][1], 0xF5FE1AF4, 0xF105F502, 0x0EEE020E, 0x23FB10F3);
	r1 = D(r1, s[1][1][1], 0xFCF8F8FF, 0x15FA0609, 0x07F509FD, 0xF4F70803);
	r2 = D(r2, s[1][1][1], 0xF1F7F1F2, 0x00FCF7F7, 0x0E07FFFC, 0xF812EEEE);
	r3 = D(r3, s[1][1][1], 0x02FBFB00, 0xE4010509, 0x23FE0CEF, 0xFEFEF702);
	r0 = D(r0, s[1][1][2], 0x050CF3FD, 0xE7FD1105, 0x1DEF0014, 0xF7F4F4F2);
	r1 = D(r1, s[1][1][2], 0x1003FDF1, 0xF9FC0000, 0x13F2FCF4, 0xFA0B0D05);
	r2 = D(r2, s[1][1][2], 0x12F7F9F6, 0x0908F7FD, 0xF817F8FD, 0xEF00F8FE);
	r3 = D(r3, s[1][1][2], 0x16F5F906, 0xF801F7F5, 0x06F5EAF5, 0xFC15EF07);
	r0 = D(r0, s[1][2][0], 0x06FC000F, 0x021203F5, 0xFBE8FC0E, 0x030A07F8);
	r1 = D(r1, s[1][2][0], 0xFDF00602, 0x10FF00FE, 0x08F6FEFE, 0xFF030B07);
	r2 = D(r2, s[1][2][0], 0xFF0E0E05, 0xFBFD0111, 0xF1030E00, 0xF5FBFD0B);
	r3 = D(r3, s[1][2][0], 0x02F701FA, 0xEC03FE07, 0x040202FB, 0x03000610);
	r0 = D(r0, s[1][2][1], 0x08FB0201, 0xE5FF0E08, 0xF8F1041D, 0x070C040E);
	r1 = D(r1, s[1][2][1], 0xEFED04FD, 0xF50309FD, 0xFEFAFC05, 0x0208FA0E);
	r2 = D(r2, s[1][2][1], 0xF9F508FE, 0x03EE01FE, 0x270AF3F6, 0x0EF501FF);
	r3 = D(r3, s[1][2][1], 0x0EF51508, 0xFC0106F8, 0xEB010EF9, 0x08FDFF02);
	r0 = D(r0, s[1][2][2], 0xFF070700, 0x00FBFE00, 0x02FFFE06, 0x0A08FB05);
	r1 = D(r1, s[1][2][2], 0x0404FEFB, 0xFAF308F4, 0xFB060BFA, 0xF7FB02FE);
	r2 = D(r2, s[1][2][2], 0x06030200, 0x06EEFA04, 0xFCF5FA0B, 0xF70BFA12);
	r3 = D(r3, s[1][2][2], 0xFA0E10F2, 0x02F20917, 0x1609E303, 0x00FC0D11);
	s[0][0][0] = G[4][xy.y+0][xy.x+0]; s[0][0][1] = G[4][xy.y+0][xy.x+1];
	s[0][0][2] = G[4][xy.y+0][xy.x+2]; s[0][1][0] = G[4][xy.y+1][xy.x+0];
	s[0][1][1] = G[4][xy.y+1][xy.x+1]; s[0][1][2] = G[4][xy.y+1][xy.x+2];
	s[0][2][0] = G[4][xy.y+2][xy.x+0]; s[0][2][1] = G[4][xy.y+2][xy.x+1];
	s[0][2][2] = G[4][xy.y+2][xy.x+2]; s[1][0][0] = G[5][xy.y+0][xy.x+0];
	s[1][0][1] = G[5][xy.y+0][xy.x+1]; s[1][0][2] = G[5][xy.y+0][xy.x+2];
	s[1][1][0] = G[5][xy.y+1][xy.x+0]; s[1][1][1] = G[5][xy.y+1][xy.x+1];
	s[1][1][2] = G[5][xy.y+1][xy.x+2]; s[1][2][0] = G[5][xy.y+2][xy.x+0];
	s[1][2][1] = G[5][xy.y+2][xy.x+1]; s[1][2][2] = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0xFB0E00FE, 0xFCFB11FB, 0x070E0E0B, 0x03080005);
	r1 = D(r1, s[0][0][0], 0x08F2F4F7, 0x0709FB05, 0x02F0F5F8, 0xF4F70208);
	r2 = D(r2, s[0][0][0], 0xFB03FEFA, 0x0EF1FF01, 0x0DF5FBF4, 0xFE0306F3);
	r3 = D(r3, s[0][0][0], 0x030209EF, 0xFBF90E09, 0x060E0A09, 0xF702ED0B);
	r0 = D(r0, s[0][0][1], 0x17F7FA12, 0x02F301F1, 0x080FF706, 0xFAFBF606);
	r1 = D(r1, s[0][0][1], 0x00F908F2, 0x08FB0602, 0x04F4EE06, 0xFBFDF6EB);
	r2 = D(r2, s[0][0][1], 0xFDF50500, 0x01EFF500, 0x07F3000C, 0x08080A11);
	r3 = D(r3, s[0][0][1], 0x01FCFEF7, 0x02F4FCF6, 0xEEFDF8F6, 0xF7F8F803);
	r0 = D(r0, s[0][0][2], 0x02010906, 0x00F4F501, 0x07FF0D08, 0xFA0309FF);
	r1 = D(r1, s[0][0][2], 0x000609F4, 0xFFFEFD01, 0x0CF6FE04, 0x03FA0503);
	r2 = D(r2, s[0][0][2], 0x0406FC02, 0xF9F5FAFE, 0x0603F20C, 0xFE05FBFA);
	r3 = D(r3, s[0][0][2], 0xF20218FA, 0x01FF170A, 0x0501EB06, 0xFFF702E9);
	r0 = D(r0, s[0][1][0], 0x12080202, 0xED0FFCF4, 0x0508FB04, 0xEF010601);
	r1 = D(r1, s[0][1][0], 0xFB02E905, 0xFDF9FEFD, 0x01EC0306, 0xFAFB10F8);
	r2 = D(r2, s[0][1][0], 0x100004F9, 0x08FFF6F6, 0x02FCF700, 0x0110FE08);
	r3 = D(r3, s[0][1][0], 0xF6F8F708, 0xECF00411, 0xF811EDEF, 0xE0F4FDFA);
	r0 = D(r0, s[0][1][1], 0xF806E706, 0xF5FCF1F5, 0xF411FEFB, 0xE9FCEFFA);
	r1 = D(r1, s[0][1][1], 0xDFF8F7F8, 0xFD020E00, 0xF4EC1E11, 0x06E70AFB);
	r2 = D(r2, s[0][1][1], 0xD1E11908, 0xFCF4FE0D, 0x02020E13, 0x0CF10503);
	r3 = D(r3, s[0][1][1], 0x1CF4F7F3, 0x0203F5FD, 0xE50919F7, 0xFE0308F1);
	r0 = D(r0, s[0][1][2], 0x03ED070E, 0xF202FF0B, 0xFD0CFEF6, 0x00F71FFB);
	r1 = D(r1, s[0][1][2], 0xEB111402, 0xFB0BF202, 0xF108FBFF, 0xF7FCF800);
	r2 = D(r2, s[0][1][2], 0xE602F708, 0xF0FAF90B, 0xF8EAF801, 0x15FAEBF1);
	r3 = D(r3, s[0][1][2], 0x22F1FCFE, 0xEE04E90B, 0x08010002, 0x0CFCF00C);
	r0 = D(r0, s[0][2][0], 0x0CF9EFF6, 0xFBFEFF07, 0xFD05F9FA, 0x08F605EE);
	r1 = D(r1, s[0][2][0], 0x00020C11, 0xFF060204, 0xF601FCF8, 0x0C0CF9FD);
	r2 = D(r2, s[0][2][0], 0xFF0402F4, 0xEDFAFA09, 0x0711FB01, 0xEF09F1FE);
	r3 = D(r3, s[0][2][0], 0xFFEBFBFB, 0xEA0EF605, 0x0D0B0DFE, 0xF30BF1FB);
	r0 = D(r0, s[0][2][1], 0xE9EEF801, 0x05FD04ED, 0xF90DFFF9, 0x080003F5);
	r1 = D(r1, s[0][2][1], 0xEE09F1F8, 0xFB0E080F, 0xFAFFF502, 0x07000A09);
	r2 = D(r2, s[0][2][1], 0xF90815FA, 0xEE040E11, 0xEEEE1104, 0x06050A0C);
	r3 = D(r3, s[0][2][1], 0x04F2E40E, 0x0902F1EE, 0x09FE1AF9, 0xE2FDFFFE);
	r0 = D(r0, s[0][2][2], 0x050408F4, 0x04FBF3FD, 0x0E01FD07, 0xEFF3FB00);
	r1 = D(r1, s[0][2][2], 0x0C0405FD, 0x00070A02, 0x000003FB, 0xF2FBF20B);
	r2 = D(r2, s[0][2][2], 0x080B02F1, 0x01FCFD00, 0xF500F205, 0x00020607);
	r3 = D(r3, s[0][2][2], 0x09F201EC, 0xF9FE0414, 0x0301EBFB, 0xEBFE01FB);
	r0 = D(r0, s[1][0][0], 0x08140D0D, 0x03F9F705, 0x09090A00, 0xE6FDFB22);
	r1 = D(r1, s[1][0][0], 0x04FC0612, 0x05E8FB04, 0xFA0DFC06, 0xF5F3FAFE);
	r2 = D(r2, s[1][0][0], 0x0810F102, 0xFC0806F3, 0x0102F405, 0x03F80605);
	r3 = D(r3, s[1][0][0], 0x06F2F106, 0x06F8FB0A, 0x0006F418, 0xFCEEED03);
	r0 = D(r0, s[1][0][1], 0xF80B03FA, 0x0FE70D05, 0x02FA0600, 0xFDDD07FE);
	r1 = D(r1, s[1][0][1], 0xFDFBE705, 0xF4FF0E09, 0xE2020FEF, 0x11F5F90C);
	r2 = D(r2, s[1][0][1], 0xF5040F0F, 0xF402FEFD, 0xFFFAF612, 0x050905F4);
	r3 = D(r3, s[1][0][1], 0x0AF21CF2, 0x1BF4F602, 0xF907FB14, 0xFAE90208);
	r0 = D(r0, s[1][0][2], 0x000700FF, 0x02FA08FE, 0xFDFB0FFA, 0xFE020F01);
	r1 = D(r1, s[1][0][2], 0x04020FF7, 0x01FB1105, 0x040202EF, 0x05060808);
	r2 = D(r2, s[1][0][2], 0x06F6FAF0, 0x08F0F8FA, 0x0DF9FA14, 0x00F60814);
	r3 = D(r3, s[1][0][2], 0xFDF7FEF2, 0x01F3F302, 0x060CF017, 0xFCEE0F03);
	r0 = D(r0, s[1][1][0], 0x14FBF117, 0xED0000F5, 0x050E0803, 0x061106EE);
	r1 = D(r1, s[1][1][0], 0x1C03EC12, 0xFF07EA12, 0xF209ECFD, 0xF40AEF15);
	r2 = D(r2, s[1][1][0], 0xFD0CF503, 0x0BE30012, 0xFA0FF906, 0xF907EE00);
	r3 = D(r3, s[1][1][0], 0x06ED05FD, 0xFDF511F3, 0x130100EC, 0x0008EAE1);
	r0 = D(r0, s[1][1][1], 0x0AFAF70E, 0xF1EDF5F8, 0xFD06EBFE, 0xF4F20A18);
	r1 = D(r1, s[1][1][1], 0xE61BFD10, 0xF9E603F2, 0xFEF0F1FB, 0xF319FC09);
	r2 = D(r2, s[1][1][1], 0xFE230E0C, 0xF8140502, 0xF1FD0A0E, 0xEB13F607);
	r3 = D(r3, s[1][1][1], 0xF1E4F006, 0x0BE8F8F7, 0x14E7FFEF, 0xF3FDFCFE);
	r0 = D(r0, s[1][1][2], 0xF5FF03F9, 0xF6FD0FE4, 0xFBF40303, 0xFCF9F406);
	r1 = D(r1, s[1][1][2], 0x09FC0005, 0xECF4FFF7, 0x05F7FCFE, 0xF506FA1B);
	r2 = D(r2, s[1][1][2], 0xFAF4040C, 0xF412F90E, 0x0605F21A, 0xF9FE03F1);
	r3 = D(r3, s[1][1][2], 0x00EE061A, 0x110109FA, 0x000DF6F0, 0x02FE0CF4);
	r0 = D(r0, s[1][2][0], 0x0208F2FF, 0x000A01F9, 0x050F0009, 0xF4011AF7);
	r1 = D(r1, s[1][2][0], 0xFDDA0201, 0x12FDFA18, 0x020CF407, 0x0710FF11);
	r2 = D(r2, s[1][2][0], 0x0402F2F0, 0xF21C0C05, 0xF9EF000A, 0x0909FF0F);
	r3 = D(r3, s[1][2][0], 0x09E6050E, 0x07021407, 0xF9F802FB, 0x03030000);
	r0 = D(r0, s[1][2][1], 0x0909FE15, 0x0505F105, 0x01FEE31C, 0x02E701F8);
	r1 = D(r1, s[1][2][1], 0xF001F0FC, 0x01F5F5E3, 0xFD09050C, 0xFA05FC08);
	r2 = D(r2, s[1][2][1], 0xFEFE09F3, 0xF8F90204, 0xF5F60604, 0xFDFFF905);
	r3 = D(r3, s[1][2][1], 0x0F04EAF8, 0x02F50915, 0x09F7EFFF, 0xF709F709);
	r0 = D(r0, s[1][2][2], 0x0302F800, 0xF6F502E1, 0xFD0C0601, 0xFAFCFAF1);
	r1 = D(r1, s[1][2][2], 0xFC09020A, 0xFBFB0CF6, 0x07091506, 0x0DFC1011);
	r2 = D(r2, s[1][2][2], 0xF2FDF806, 0x05FEFC05, 0xF9030217, 0xF80000FD);
	r3 = D(r3, s[1][2][2], 0xFD10F813, 0xFB000D01, 0x05F0080B, 0xF900EBFB);
	s[0][0][0] = G[6][xy.y+0][xy.x+0]; s[0][0][1] = G[6][xy.y+0][xy.x+1];
	s[0][0][2] = G[6][xy.y+0][xy.x+2]; s[0][1][0] = G[6][xy.y+1][xy.x+0];
	s[0][1][1] = G[6][xy.y+1][xy.x+1]; s[0][1][2] = G[6][xy.y+1][xy.x+2];
	s[0][2][0] = G[6][xy.y+2][xy.x+0]; s[0][2][1] = G[6][xy.y+2][xy.x+1];
	s[0][2][2] = G[6][xy.y+2][xy.x+2]; s[1][0][0] = G[7][xy.y+0][xy.x+0];
	s[1][0][1] = G[7][xy.y+0][xy.x+1]; s[1][0][2] = G[7][xy.y+0][xy.x+2];
	s[1][1][0] = G[7][xy.y+1][xy.x+0]; s[1][1][1] = G[7][xy.y+1][xy.x+1];
	s[1][1][2] = G[7][xy.y+1][xy.x+2]; s[1][2][0] = G[7][xy.y+2][xy.x+0];
	s[1][2][1] = G[7][xy.y+2][xy.x+1]; s[1][2][2] = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0x03F41300, 0x05FD0009, 0x0502010D, 0xF7F9F800);
	r1 = D(r1, s[0][0][0], 0xE702FEFD, 0x0E17FEF5, 0x1003FA09, 0xF711F706);
	r2 = D(r2, s[0][0][0], 0xFFFE06F7, 0xEF110A0E, 0x09FBFBFB, 0x03F30202);
	r3 = D(r3, s[0][0][0], 0x07F305FF, 0x0708020E, 0x0404EF0A, 0xFAECFF03);
	r0 = D(r0, s[0][0][1], 0xECF305FF, 0xF90608FE, 0x05FEF3FE, 0x0102010A);
	r1 = D(r1, s[0][0][1], 0xFB1B0309, 0x110BFBF5, 0xEFF70500, 0x0903FA02);
	r2 = D(r2, s[0][0][1], 0x0500FA04, 0xFFF8040D, 0xF4FC0400, 0x0304FF0B);
	r3 = D(r3, s[0][0][1], 0xF01A0600, 0xF6F1010C, 0x02F10F01, 0x06E805EE);
	r0 = D(r0, s[0][0][2], 0x0EFD07FC, 0x05F20309, 0x0702FE04, 0x110300F6);
	r1 = D(r1, s[0][0][2], 0x070FF503, 0x161102FF, 0x0704FA10, 0x0007FEFA);
	r2 = D(r2, s[0][0][2], 0x03030E10, 0x0AFC15FB, 0xF6080400, 0x00F9FFFF);
	r3 = D(r3, s[0][0][2], 0xF10E0002, 0x04EEFD03, 0xF20309FA, 0x0605FD02);
	r0 = D(r0, s[0][1][0], 0x0D1308ED, 0x09F5EC09, 0x0202FFFD, 0x030610FA);
	r1 = D(r1, s[0][1][0], 0x0FFD0804, 0x12090E0A, 0x0115F2FB, 0x07F8F2FC);
	r2 = D(r2, s[0][1][0], 0x08FBFB02, 0xF3F901EF, 0x0A0803FC, 0x161106FE);
	r3 = D(r3, s[0][1][0], 0x0B0C0DF6, 0xFD02FA0B, 0x06FAF4F5, 0xFD0D0505);
	r0 = D(r0, s[0][1][1], 0xF1F40B0A, 0x0EF4F8D8, 0xEBFA0AEF, 0x08EF15F2);
	r1 = D(r1, s[0][1][1], 0xED16F903, 0x19F5F702, 0xFCF80FF7, 0xDFE803FE);
	r2 = D(r2, s[0][1][1], 0x0CFE0201, 0x14F4030D, 0x050404FB, 0xF0FC0215);
	r3 = D(r3, s[0][1][1], 0xE9F50208, 0xF2EB07F8, 0xF9FDF3FD, 0x020C01EB);
	r0 = D(r0, s[0][1][2], 0xEEF90200, 0x0FF7FAFB, 0x04FA01FF, 0x08EDF500);
	r1 = D(r1, s[0][1][2], 0x0CFDFEEB, 0xFC1D0203, 0x02D702F8, 0xF30BFF0B);
	r2 = D(r2, s[0][1][2], 0xF5F90BD9, 0xE90C0BF2, 0x00FA02F4, 0x00F3F80B);
	r3 = D(r3, s[0][1][2], 0x1DEB0F12, 0x0B0FF4FD, 0xF7FB07F1, 0xFFEFFA01);
	r0 = D(r0, s[0][2][0], 0xF7051002, 0x01100006, 0xFC0EFB08, 0xF7FEF5F8);
	r1 = D(r1, s[0][2][0], 0xFDEF0305, 0x0FFA0DFD, 0x0FE6FD00, 0x0B0CFA07);
	r2 = D(r2, s[0][2][0], 0x05070300, 0x00F1FEFF, 0xF90E0004, 0x00070FFA);
	r3 = D(r3, s[0][2][0], 0xFBFBFB02, 0xF7140203, 0x19FD09F2, 0xFDEEFC03);
	r0 = D(r0, s[0][2][1], 0x13E510F9, 0x030BF812, 0xFD03FEF7, 0x06EBFCF5);
	r1 = D(r1, s[0][2][1], 0xFA0F0CF9, 0x0800F20B, 0xFD0E04EF, 0xFEFEFF09);
	r2 = D(r2, s[0][2][1], 0x16FDF808, 0xFF06F2EE, 0x0BF603EC, 0x15050CFE);
	r3 = D(r3, s[0][2][1], 0x04FF0BFE, 0xF5F90302, 0x1A0100F8, 0x0E00F2FA);
	r0 = D(r0, s[0][2][2], 0xFD02FD03, 0xFFFBFA02, 0xFEECF9FC, 0xF4FAF204);
	r1 = D(r1, s[0][2][2], 0x13F20EF7, 0xEA0A0617, 0x02FF0107, 0x070504FA);
	r2 = D(r2, s[0][2][2], 0xF3090E0F, 0xF9FBFC00, 0x0D100FFB, 0x02020908);
	r3 = D(r3, s[0][2][2], 0xED140CFE, 0x0B0AF7FC, 0xF1EF0308, 0xFFE40CFA);
	r0 = D(r0, s[1][0][0], 0xF60AF800, 0xFEFAF705, 0xFE0002FB, 0xFDFE0BFD);
	r1 = D(r1, s[1][0][0], 0x0F0000FC, 0x000A0502, 0x00FDFB02, 0x0C09FC0C);
	r2 = D(r2, s[1][0][0], 0x05F90A06, 0x080EF4FD, 0x0AF8F5F7, 0x060412F3);
	r3 = D(r3, s[1][0][0], 0x0C020005, 0xF8F0EF02, 0xFF06D6F5, 0xF8F30804);
	r0 = D(r0, s[1][0][1], 0x0008E4E8, 0xF1FD0509, 0x0AF30F02, 0x0B00DDF6);
	r1 = D(r1, s[1][0][1], 0x0500F4FC, 0xF10504FE, 0xFFF8E4F8, 0xFEFF10F7);
	r2 = D(r2, s[1][0][1], 0xFAFBF401, 0xFBFAFD07, 0xFBFFEC00, 0xFFF7E003);
	r3 = D(r3, s[1][0][1], 0xFF180D08, 0xF50309F2, 0x0202EA0B, 0x070FF3F8);
	r0 = D(r0, s[1][0][2], 0xFBFAE703, 0x000408F2, 0xFD010401, 0x00FE1204);
	r1 = D(r1, s[1][0][2], 0x0E0D0B0E, 0xFDFDF7FD, 0xFD0B0B00, 0x05FBF0F4);
	r2 = D(r2, s[1][0][2], 0x050207FB, 0xF8021D00, 0xFA090000, 0xFD03FF01);
	r3 = D(r3, s[1][0][2], 0xF7102405, 0x0AF505FF, 0x01FC0700, 0xF6F1FAFA);
	r0 = D(r0, s[1][1][0], 0xFF090FFF, 0x07EF0005, 0x0A01F317, 0x050ACF09);
	r1 = D(r1, s[1][1][0], 0xF3FA0400, 0xFAFBFB01, 0x00040611, 0x121608F9);
	r2 = D(r2, s[1][1][0], 0xFE0310F3, 0x06ECFCF4, 0xF2060611, 0xFEFFF305);
	r3 = D(r3, s[1][1][0], 0xF8ECF6F6, 0xEEFB1708, 0x1AF515F9, 0x07020801);
	r0 = D(r0, s[1][1][1], 0xEAE803FE, 0xFA12F806, 0x050AE60B, 0xEBF7F2F1);
	r1 = D(r1, s[1][1][1], 0x0802FAF4, 0xE4080909, 0xF6EBE602, 0x0605EFFD);
	r2 = D(r2, s[1][1][1], 0x2003F0F5, 0x00FFF1EE, 0x00FE0A0B, 0x12F801EF);
	r3 = D(r3, s[1][1][1], 0x12FFFB01, 0x030E0101, 0xFDF50FF5, 0xFB11F4E6);
	r0 = D(r0, s[1][1][2], 0x0BFE08F2, 0xF1FDFFFA, 0x0CFFFB0A, 0x04E6EFF9);
	r1 = D(r1, s[1][1][2], 0xF5040D0C, 0xFD0E1CFB, 0xF308F50C, 0xFA0E091E);
	r2 = D(r2, s[1][1][2], 0xF3F5F302, 0xFF0DF4E6, 0xFDFA1405, 0x09FCFB08);
	r3 = D(r3, s[1][1][2], 0xECFBEBF2, 0x05F8FE11, 0x06FDF61D, 0xF8EC20F9);
	r0 = D(r0, s[1][2][0], 0x1A000010, 0x00F0F208, 0xF5FC0A06, 0xFAFDFEEA);
	r1 = D(r1, s[1][2][0], 0xF7141210, 0xFE05F405, 0xF1FD0507, 0xF4FAF30C);
	r2 = D(r2, s[1][2][0], 0x0C03EB04, 0xFBF1FE02, 0x02070703, 0x05080800);
	r3 = D(r3, s[1][2][0], 0xF10F15E9, 0x03F9FDFD, 0xFEFAF2FE, 0xF6F5F203);
	r0 = D(r0, s[1][2][1], 0xE4F7EDFF, 0xFE0FFB0E, 0x0EFEF003, 0x070F12FA);
	r1 = D(r1, s[1][2][1], 0x0F04E6FF, 0xF8F10E04, 0xF10BF800, 0x04F50DFE);
	r2 = D(r2, s[1][2][1], 0x090E0BFE, 0xF5F9F10B, 0x050BFEEC, 0xF012E6F7);
	r3 = D(r3, s[1][2][1], 0xF2EAFBFE, 0xFC01FD0A, 0xF6090FE8, 0xF6F9E7FB);
	r0 = D(r0, s[1][2][2], 0x04070B04, 0xFAFD1507, 0x010FFB03, 0x09F70700);
	r1 = D(r1, s[1][2][2], 0x02F6E7FD, 0xFD0AFDF7, 0xF400F50A, 0xFA01020E);
	r2 = D(r2, s[1][2][2], 0x0308F9FE, 0x04060EEF, 0x0B0315F7, 0xF607FA08);
	r3 = D(r3, s[1][2][2], 0x0B030815, 0xF513F70E, 0x03FA16F7, 0xFE0E06F3);
	vec4 f0 = vec4(r0) * 6.20001240e-05;
	f0 += vec4(-6.458e-03, 3.830e-02, 6.984e-02, 7.017e-03);
	imageStore(out_image, opos + ivec2(0, 0), vec4(f0));
	vec4 f1 = vec4(r1) * 6.20001240e-05;
	f1 += vec4(4.316e-03, 3.462e-02, 1.287e-02, 2.895e-03);
	imageStore(out_image, opos + ivec2(1, 0), vec4(f1));
	vec4 f2 = vec4(r2) * 6.20001240e-05;
	f2 += vec4(2.124e-02, -8.918e-04, -1.917e-03, 2.364e-02);
	imageStore(out_image, opos + ivec2(0, 1), vec4(f2));
	vec4 f3 = vec4(r3) * 6.20001240e-05;
	f3 += vec4(2.891e-03, 3.101e-02, 8.782e-03, -1.757e-02);
	imageStore(out_image, opos + ivec2(1, 1), vec4(f3));
}

//!DESC CuNNy-16x16C-TEST-conv7
//!HOOK LUMA
//!COMPUTE 16 16 8 8
//!BIND conv6
//!BIND LUMA
//!SAVE conv7
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_spirv_intrinsics : require
#extension GL_EXT_control_flow_attributes : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) ivec4(r.x + dp4(s, a, 0), r.y + dp4(s, b, 0), r.z + dp4(s, c, 0), r.w + dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	[[unroll]] for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		[[unroll]] for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(2, 2) + ivec2(1, 1)) * conv6_pt;
			r = conv6_gather(p, 0);
			g = conv6_gather(p, 1);
			b = conv6_gather(p, 2);
			a = conv6_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.00000000e+00;
			vec4 v2 = vec4(r.z, g.z, b.z, a.z) * 1.00000000e+00;
			vec4 v4 = vec4(r.x, g.x, b.x, a.x) * 1.00000000e+00;
			vec4 v6 = vec4(r.y, g.y, b.y, a.y) * 1.00000000e+00;
			vec4 v1 = max(-v0, vec4(0));
			v0 = max(v0, vec4(0));
			vec4 v3 = max(-v2, vec4(0));
			v2 = max(v2, vec4(0));
			vec4 v5 = max(-v4, vec4(0));
			v4 = max(v4, vec4(0));
			vec4 v7 = max(-v6, vec4(0));
			v6 = max(v6, vec4(0));
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s[2][3][3];
	ivec4 r0 = ivec4(0);
	ivec4 r1 = ivec4(0);
	ivec4 r2 = ivec4(0);
	ivec4 r3 = ivec4(0);
	s[0][0][0] = G[0][xy.y+0][xy.x+0]; s[0][0][1] = G[0][xy.y+0][xy.x+1];
	s[0][0][2] = G[0][xy.y+0][xy.x+2]; s[0][1][0] = G[0][xy.y+1][xy.x+0];
	s[0][1][1] = G[0][xy.y+1][xy.x+1]; s[0][1][2] = G[0][xy.y+1][xy.x+2];
	s[0][2][0] = G[0][xy.y+2][xy.x+0]; s[0][2][1] = G[0][xy.y+2][xy.x+1];
	s[0][2][2] = G[0][xy.y+2][xy.x+2]; s[1][0][0] = G[1][xy.y+0][xy.x+0];
	s[1][0][1] = G[1][xy.y+0][xy.x+1]; s[1][0][2] = G[1][xy.y+0][xy.x+2];
	s[1][1][0] = G[1][xy.y+1][xy.x+0]; s[1][1][1] = G[1][xy.y+1][xy.x+1];
	s[1][1][2] = G[1][xy.y+1][xy.x+2]; s[1][2][0] = G[1][xy.y+2][xy.x+0];
	s[1][2][1] = G[1][xy.y+2][xy.x+1]; s[1][2][2] = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0xE802FBFF, 0x0CF6F8F6, 0x08061FF4, 0x1503E5FE);
	r1 = D(r1, s[0][0][0], 0xFA020FFE, 0x0E041209, 0xE50D03FF, 0x1507E504);
	r2 = D(r2, s[0][0][0], 0xFF07F006, 0xEE031601, 0xE3FA130C, 0xFF042805);
	r3 = D(r3, s[0][0][0], 0xF0F20CFD, 0x0012FA04, 0xD70CF5FA, 0x03FB1DFC);
	r0 = D(r0, s[0][0][1], 0xF4FEF3FA, 0x00FFFE0C, 0xF4032AFD, 0x110107F7);
	r1 = D(r1, s[0][0][1], 0x18F42E01, 0x09F3F901, 0x05E4FCFD, 0xF404F200);
	r2 = D(r2, s[0][0][1], 0xE409FC02, 0x090F16F4, 0xDDF407F6, 0xD6041802);
	r3 = D(r3, s[0][0][1], 0xF20C0FF2, 0x05F3F007, 0x0CF6DA03, 0xF204D305);
	r0 = D(r0, s[0][0][2], 0x1FF804FD, 0x0007F001, 0xE0011301, 0x06FE0D04);
	r1 = D(r1, s[0][0][2], 0x04FC0D04, 0x09010412, 0x02080203, 0x09FD0DFF);
	r2 = D(r2, s[0][0][2], 0x08FCE504, 0xECFD03F8, 0xEC010EF7, 0xD8F209F8);
	r3 = D(r3, s[0][0][2], 0xFBFCF401, 0x08051FF4, 0x1210F200, 0xE10C11FD);
	r0 = D(r0, s[0][1][0], 0xEE091210, 0xE8F908F4, 0xF7F7FE05, 0x08080BFD);
	r1 = D(r1, s[0][1][0], 0x230301F7, 0xF009FCF6, 0x1A18F108, 0x1909EFF7);
	r2 = D(r2, s[0][1][0], 0xE815E707, 0x06041102, 0xE209FEF8, 0x13011EFC);
	r3 = D(r3, s[0][1][0], 0xF7F512F4, 0xEFF11C07, 0xE8F5D8FE, 0x0402FC07);
	r0 = D(r0, s[0][1][1], 0xF00215F8, 0x16EC110B, 0x0FF31C01, 0xF9FE11F8);
	r1 = D(r1, s[0][1][1], 0x0802E5FE, 0x010801F0, 0xF50F040B, 0x1A0F0AFC);
	r2 = D(r2, s[0][1][1], 0xF8F5F201, 0xFD05F805, 0xE0FDE0F9, 0xEA0239E5);
	r3 = D(r3, s[0][1][1], 0x040BEA0B, 0xE90B0602, 0x070204F5, 0xE0FC0FFA);
	r0 = D(r0, s[0][1][2], 0xF000EDF4, 0x0009FF16, 0xEAF503FC, 0x0AFEF803);
	r1 = D(r1, s[0][1][2], 0x04FDFEFD, 0xF3F8F702, 0x06FFF503, 0xF5F915F2);
	r2 = D(r2, s[0][1][2], 0xECF4FFED, 0x01F80803, 0xEF07E202, 0x010E01FE);
	r3 = D(r3, s[0][1][2], 0x09FCF8FD, 0x0F020812, 0x2004E311, 0x1FFF0409);
	r0 = D(r0, s[0][2][0], 0xF30C0FFD, 0x02090209, 0x0CFD00F2, 0x260206FA);
	r1 = D(r1, s[0][2][0], 0xF602ECF3, 0x0D07F7FE, 0xFEFE08FA, 0x09F0030E);
	r2 = D(r2, s[0][2][0], 0xE2FAF9FD, 0xF7F6FD02, 0xFB04F70C, 0xF2FE0D04);
	r3 = D(r3, s[0][2][0], 0xD6F71A08, 0xFEFDFFFC, 0xDF08EFFE, 0xF7031CFC);
	r0 = D(r0, s[0][2][1], 0xEDFEECFE, 0xE6F5F802, 0x0A01F6FE, 0x0D040306);
	r1 = D(r1, s[0][2][1], 0x0CF80302, 0x06FAE1EB, 0x060BF706, 0x12FAE504);
	r2 = D(r2, s[0][2][1], 0xEB06F705, 0xE9031EF0, 0x0E072101, 0x01F91808);
	r3 = D(r3, s[0][2][1], 0xFA010CED, 0x19FD0301, 0x01F3D9E9, 0xEBF110F0);
	r0 = D(r0, s[0][2][2], 0xDB00F6EB, 0x0703E0F1, 0xF9F90EFC, 0x130C1109);
	r1 = D(r1, s[0][2][2], 0xEF0A14FE, 0xF608F0FF, 0x0CFE08FC, 0x05FFF7FF);
	r2 = D(r2, s[0][2][2], 0xDD08F5F4, 0xF3F80EFA, 0xE9FF21FC, 0xEDF84103);
	r3 = D(r3, s[0][2][2], 0xEDFDFC16, 0x03F52BF4, 0xF702F90C, 0x0400F603);
	r0 = D(r0, s[1][0][0], 0x06FC01F3, 0x011E0104, 0xF8F60D19, 0x070B0602);
	r1 = D(r1, s[1][0][0], 0x0502FCFD, 0xFFFC02FC, 0x0105FC03, 0xFE11F201);
	r2 = D(r2, s[1][0][0], 0xFC140303, 0xFEF80FF3, 0x00F905F0, 0x04090412);
	r3 = D(r3, s[1][0][0], 0xF6ECF60D, 0x0300FEEC, 0xF7DB030C, 0x0BF40408);
	r0 = D(r0, s[1][0][1], 0xFBF402F0, 0x000703F3, 0x09F0F903, 0xFD18FE0C);
	r1 = D(r1, s[1][0][1], 0xF516FAF0, 0x020703F5, 0xFD28F7FF, 0xFC0A060C);
	r2 = D(r2, s[1][0][1], 0xEB040EFE, 0x0BF801FF, 0xFAF3FCF7, 0x0CFAF517);
	r3 = D(r3, s[1][0][1], 0xF3F400FE, 0xF52101EB, 0xF80E0713, 0xF807F7EA);
	r0 = D(r0, s[1][0][2], 0xFC00F50B, 0x00F0F804, 0xFFDC0301, 0xFD1807FF);
	r1 = D(r1, s[1][0][2], 0xF8FF01FB, 0xF501FE02, 0xFE09F500, 0xF2F7FFED);
	r2 = D(r2, s[1][0][2], 0xFC04FA0A, 0x000DF9F8, 0xFEF8FDF4, 0x00FDF4EE);
	r3 = D(r3, s[1][0][2], 0xF5110603, 0xFD12F430, 0xFA0FFF22, 0x01040202);
	r0 = D(r0, s[1][1][0], 0xF0F9FCF7, 0x09F4FDF4, 0xFFE8F715, 0xFF130404);
	r1 = D(r1, s[1][1][0], 0xF9070601, 0xFDE2FC01, 0x0229FAF8, 0x020B0F0E);
	r2 = D(r2, s[1][1][0], 0x0904FDFC, 0xF0E8FEF2, 0x06070402, 0xFB0C040D);
	r3 = D(r3, s[1][1][0], 0xFBEBFFF4, 0x0109F901, 0xF0FEFE0D, 0x01F9F526);
	r0 = D(r0, s[1][1][1], 0x09F7F7F5, 0xEBE0F60F, 0x02F7000A, 0x142401FD);
	r1 = D(r1, s[1][1][1], 0x110318E9, 0xF5E5ED04, 0x0633FBFD, 0x01F5F41D);
	r2 = D(r2, s[1][1][1], 0xFD02FF05, 0x00F7F5E2, 0xF6EB0AD8, 0x080CE61A);
	r3 = D(r3, s[1][1][1], 0xF8F90302, 0x12FE030D, 0xF4F0FC01, 0xF5F007F1);
	r0 = D(r0, s[1][1][2], 0xFEF002ED, 0x0BFA00F7, 0xFFF1F204, 0xF81100EE);
	r1 = D(r1, s[1][1][2], 0x06F3F3F5, 0x04190BEE, 0xF8FDFFF9, 0xFDFC04F8);
	r2 = D(r2, s[1][1][2], 0xF008F91F, 0xF2F5F300, 0xF3FAF0F7, 0xF0FE0D10);
	r3 = D(r3, s[1][1][2], 0xF703F4F5, 0x010103FD, 0xFC17130E, 0xF813F408);
	r0 = D(r0, s[1][2][0], 0xFD26FC02, 0x0C01FAE4, 0x0D01021E, 0xFF0EF015);
	r1 = D(r1, s[1][2][0], 0x02090206, 0x0207FC01, 0x081E08FE, 0xEF0300F2);
	r2 = D(r2, s[1][2][0], 0x0E0401EE, 0xFE0606FF, 0xFCFA1102, 0xFF070906);
	r3 = D(r3, s[1][2][0], 0x061107F5, 0x03EEF915, 0xFB09FFF9, 0xF10DF2F4);
	r0 = D(r0, s[1][2][1], 0x053310F2, 0x0D0305EE, 0x00F41213, 0x0601FEFE);
	r1 = D(r1, s[1][2][1], 0x03EFE6F9, 0x131A0217, 0xF8180FFF, 0xF2100111);
	r2 = D(r2, s[1][2][1], 0xFBEB02F6, 0xFB070B16, 0xFCF9FE02, 0xF703FB1A);
	r3 = D(r3, s[1][2][1], 0x02F80C09, 0xF7F2FE05, 0xFEF90918, 0x07ED0208);
	r0 = D(r0, s[1][2][2], 0x0EFD07CE, 0xFE09FA0C, 0xFCE903F9, 0xFD120807);
	r1 = D(r1, s[1][2][2], 0x04FCF304, 0xFEF7EF04, 0x0A12FAE5, 0x07FA02FC);
	r2 = D(r2, s[1][2][2], 0xFFF30F06, 0xF91A040F, 0xF904FBF0, 0x02FE04F7);
	r3 = D(r3, s[1][2][2], 0xFCECF5E7, 0x06FF070E, 0x020CFEED, 0x02FCF5EB);
	s[0][0][0] = G[2][xy.y+0][xy.x+0]; s[0][0][1] = G[2][xy.y+0][xy.x+1];
	s[0][0][2] = G[2][xy.y+0][xy.x+2]; s[0][1][0] = G[2][xy.y+1][xy.x+0];
	s[0][1][1] = G[2][xy.y+1][xy.x+1]; s[0][1][2] = G[2][xy.y+1][xy.x+2];
	s[0][2][0] = G[2][xy.y+2][xy.x+0]; s[0][2][1] = G[2][xy.y+2][xy.x+1];
	s[0][2][2] = G[2][xy.y+2][xy.x+2]; s[1][0][0] = G[3][xy.y+0][xy.x+0];
	s[1][0][1] = G[3][xy.y+0][xy.x+1]; s[1][0][2] = G[3][xy.y+0][xy.x+2];
	s[1][1][0] = G[3][xy.y+1][xy.x+0]; s[1][1][1] = G[3][xy.y+1][xy.x+1];
	s[1][1][2] = G[3][xy.y+1][xy.x+2]; s[1][2][0] = G[3][xy.y+2][xy.x+0];
	s[1][2][1] = G[3][xy.y+2][xy.x+1]; s[1][2][2] = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0xFA0C0201, 0x1015FC01, 0x01F91502, 0xF4F8FDFF);
	r1 = D(r1, s[0][0][0], 0x0415F9F7, 0xF8FF0603, 0x07FDF0F7, 0x02F7FF03);
	r2 = D(r2, s[0][0][0], 0xF9F700F4, 0xF0FC0501, 0xFAFEF5F0, 0x0702EB04);
	r3 = D(r3, s[0][0][0], 0xF10FE5FC, 0x09FAFB06, 0xF5F50B0C, 0x0F15F2FA);
	r0 = D(r0, s[0][0][1], 0xF8010810, 0xF01E03FD, 0x0209FEFB, 0xF6FD0B02);
	r1 = D(r1, s[0][0][1], 0x0504F806, 0x08FDF304, 0x11F505F3, 0xFF1CF706);
	r2 = D(r2, s[0][0][1], 0x0C0812FD, 0xF6FEFC03, 0x08F812F4, 0xFC0108F8);
	r3 = D(r3, s[0][0][1], 0xF7EEF5F4, 0xFD0714FA, 0xF50CF408, 0x17030607);
	r0 = D(r0, s[0][0][2], 0x0003FE02, 0x0B0A07FD, 0xF6EF0903, 0x03F70801);
	r1 = D(r1, s[0][0][2], 0x08060000, 0xFFFC0203, 0xFDF80706, 0x0709F803);
	r2 = D(r2, s[0][0][2], 0xFCF9FAFF, 0xF00EF5FF, 0x0709FCF6, 0xEEEB1005);
	r3 = D(r3, s[0][0][2], 0xF7FCFDF9, 0xE9F004F5, 0xF7E903FE, 0xFEFC07FC);
	r0 = D(r0, s[0][1][0], 0xFB000608, 0x0016EA11, 0xF9DB1200, 0xFAF703F5);
	r1 = D(r1, s[0][1][0], 0xF1080CFF, 0xFB020411, 0x0216F1F6, 0xFD03EE08);
	r2 = D(r2, s[0][1][0], 0x0102FB0B, 0x041013FF, 0x061DDEF8, 0x1205ED08);
	r3 = D(r3, s[0][1][0], 0x0B0CEB03, 0x00F8F5EB, 0x06F20FF5, 0x11120E00);
	r0 = D(r0, s[0][1][1], 0x11F5F50C, 0xF80BEF12, 0xFE09F911, 0x13EDE4FD);
	r1 = D(r1, s[0][1][1], 0x0923ED1A, 0xF2F7F803, 0xFA200204, 0xF1FAE50B);
	r2 = D(r2, s[0][1][1], 0xF8EBF5F9, 0xE10FFBFE, 0xF7072AFA, 0xFC01F7F7);
	r3 = D(r3, s[0][1][1], 0x0E0AF6F4, 0x0204F210, 0x03FC07FF, 0xFDFE0DFF);
	r0 = D(r0, s[0][1][2], 0x0209E903, 0x04110604, 0xF5FAFF08, 0xFCF4FB06);
	r1 = D(r1, s[0][1][2], 0x022EFAF0, 0xF9FFFCF9, 0x0513F5FE, 0x02F1E9FC);
	r2 = D(r2, s[0][1][2], 0x07FE0415, 0x0D12F801, 0xF81B0A04, 0x071208FD);
	r3 = D(r3, s[0][1][2], 0x11F7FEFD, 0xF413E908, 0xF912F4F4, 0x060A0EFE);
	r0 = D(r0, s[0][2][0], 0x04F9FAED, 0x04FCE8E4, 0xFCEF01F0, 0xF6F50402);
	r1 = D(r1, s[0][2][0], 0xF7F302FC, 0x04F8F206, 0xFE060013, 0x0A0DFE1C);
	r2 = D(r2, s[0][2][0], 0x0605FC0B, 0xF4F8FE06, 0xF0F9FD10, 0x08FEFC03);
	r3 = D(r3, s[0][2][0], 0x09090108, 0xF609F70E, 0xF91CF20B, 0x0B01F3FF);
	r0 = D(r0, s[0][2][1], 0xF7EBF3FF, 0x040506FC, 0xF90904F4, 0xF8080302);
	r1 = D(r1, s[0][2][1], 0xFB0CFE04, 0x10F5FBF8, 0xEEF7FFFC, 0x010C0807);
	r2 = D(r2, s[0][2][1], 0xFB1DFDFE, 0x04FCF206, 0xFDFB0001, 0xFEF9FEFA);
	r3 = D(r3, s[0][2][1], 0x09ED0B0C, 0x0CDF17FC, 0xF30F0010, 0x1611F204);
	r0 = D(r0, s[0][2][2], 0x03FFFB01, 0x0110FEFD, 0x06120DFF, 0xF9E806FC);
	r1 = D(r1, s[0][2][2], 0x09FCF5FE, 0x0E0DFAFC, 0x0102F805, 0x0A02FB09);
	r2 = D(r2, s[0][2][2], 0x01FFFAF7, 0x020CFEFF, 0x0E080804, 0x04EBFFFD);
	r3 = D(r3, s[0][2][2], 0xFD0B07FF, 0x16FC0901, 0xFDF902FE, 0x02090204);
	r0 = D(r0, s[1][0][0], 0x070604FF, 0x03F30C01, 0xF7F70103, 0xFBF80C01);
	r1 = D(r1, s[1][0][0], 0x0702F6F7, 0xFD020D03, 0xFCFFF513, 0xF9FEF6F1);
	r2 = D(r2, s[1][0][0], 0x0B04ED14, 0x06FD11FE, 0x0407FD03, 0x02F0F8ED);
	r3 = D(r3, s[1][0][0], 0x0112F0FE, 0xF8020702, 0x07FC11EB, 0xF2FFF404);
	r0 = D(r0, s[1][0][1], 0x080510FE, 0x0102EAF0, 0x0B020E07, 0xFA01FE02);
	r1 = D(r1, s[1][0][1], 0xF6060803, 0xFCFB0002, 0x0C02FE02, 0xFEFAFC1F);
	r2 = D(r2, s[1][0][1], 0x0E01F512, 0x0609F809, 0xFD02F20D, 0x0419FEF3);
	r3 = D(r3, s[1][0][1], 0x050AF408, 0x0E09F2F1, 0xFE0BFFF6, 0x1201F9E1);
	r0 = D(r0, s[1][0][2], 0x07FEFC06, 0xF302F9EE, 0x060A04F6, 0x090508FB);
	r1 = D(r1, s[1][0][2], 0x07FBF7F0, 0xFE05F8E9, 0x02FDFDFF, 0x07020C03);
	r2 = D(r2, s[1][0][2], 0xFEFF0C21, 0xFDFD0414, 0x08FFF5FF, 0x0309FF01);
	r3 = D(r3, s[1][0][2], 0xEEFF0CEE, 0x0906FD07, 0x0EF804FA, 0x07F6F7ED);
	r0 = D(r0, s[1][1][0], 0xFDFCF926, 0x0203F6F8, 0x080501E6, 0xF703070B);
	r1 = D(r1, s[1][1][0], 0x0B0812EA, 0xF90A0DF2, 0x00FD0AFC, 0x0B0D1CFB);
	r2 = D(r2, s[1][1][0], 0xFE01FD03, 0xF30CFF06, 0x01EBF3FB, 0x01FEF7F4);
	r3 = D(r3, s[1][1][0], 0xECF908ED, 0x0BFBFC0C, 0xF3090910, 0xFE0904FD);
	r0 = D(r0, s[1][1][1], 0xFF0312EE, 0x03FDF309, 0x02FCF0E8, 0xE50202E7);
	r1 = D(r1, s[1][1][1], 0xDAF70B06, 0x0E180CF3, 0x1509EFED, 0x1700FCF9);
	r2 = D(r2, s[1][1][1], 0x0108FDFD, 0x0614E60D, 0x1AF7F808, 0x0BF611EF);
	r3 = D(r3, s[1][1][1], 0x10FAF8DF, 0x0108FEC4, 0x11050E18, 0x030EED08);
	r0 = D(r0, s[1][1][2], 0xEAFF020D, 0x0202FAEA, 0x0A03F60D, 0xEF0B0CFC);
	r1 = D(r1, s[1][1][2], 0xE900F013, 0x03FFFCFE, 0x0FFEF3F5, 0xFB05F9F9);
	r2 = D(r2, s[1][1][2], 0x0DF904F9, 0x020DF702, 0x1302FEEF, 0xFAF9ED19);
	r3 = D(r3, s[1][1][2], 0x0E0DFF0C, 0xF3FA031A, 0x11F01508, 0xFBFFF2F7);
	r0 = D(r0, s[1][2][0], 0x020CF616, 0xEC0BFDF8, 0x070E0313, 0x03FBFDFB);
	r1 = D(r1, s[1][2][0], 0xF705FA08, 0xF31BEAF8, 0xFEF8FFFE, 0x05FF00EA);
	r2 = D(r2, s[1][2][0], 0xFE03FDF2, 0xF8FFF304, 0xFFFB10E8, 0x0401F1FB);
	r3 = D(r3, s[1][2][0], 0x0907FEEE, 0x09F4F807, 0x07FA03D5, 0xFE12F7F9);
	r0 = D(r0, s[1][2][1], 0xF81003E2, 0x0317F705, 0x0BFC19FA, 0xFAF602EF);
	r1 = D(r1, s[1][2][1], 0xFDF7F4FF, 0xF323FBFA, 0xFB0D0CF0, 0xFD07010D);
	r2 = D(r2, s[1][2][1], 0xFD010916, 0x020EFCEF, 0xF1FC0215, 0x000BFEF9);
	r3 = D(r3, s[1][2][1], 0xF9020CE5, 0xFAF507FF, 0xFF0CFB2A, 0xF808EBE4);
	r0 = D(r0, s[1][2][2], 0xFF03FD1A, 0xF204FCEC, 0x0303FFF5, 0xFF060104);
	r1 = D(r1, s[1][2][2], 0xF208FE17, 0xF80B03FD, 0x1006F5FD, 0x05020210);
	r2 = D(r2, s[1][2][2], 0xF503F000, 0x070301FE, 0xFCEAFC0A, 0xFBF6F7EB);
	r3 = D(r3, s[1][2][2], 0x06061007, 0xFD090221, 0x06F11103, 0xF7FFFCE2);
	s[0][0][0] = G[4][xy.y+0][xy.x+0]; s[0][0][1] = G[4][xy.y+0][xy.x+1];
	s[0][0][2] = G[4][xy.y+0][xy.x+2]; s[0][1][0] = G[4][xy.y+1][xy.x+0];
	s[0][1][1] = G[4][xy.y+1][xy.x+1]; s[0][1][2] = G[4][xy.y+1][xy.x+2];
	s[0][2][0] = G[4][xy.y+2][xy.x+0]; s[0][2][1] = G[4][xy.y+2][xy.x+1];
	s[0][2][2] = G[4][xy.y+2][xy.x+2]; s[1][0][0] = G[5][xy.y+0][xy.x+0];
	s[1][0][1] = G[5][xy.y+0][xy.x+1]; s[1][0][2] = G[5][xy.y+0][xy.x+2];
	s[1][1][0] = G[5][xy.y+1][xy.x+0]; s[1][1][1] = G[5][xy.y+1][xy.x+1];
	s[1][1][2] = G[5][xy.y+1][xy.x+2]; s[1][2][0] = G[5][xy.y+2][xy.x+0];
	s[1][2][1] = G[5][xy.y+2][xy.x+1]; s[1][2][2] = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0x01FA0B02, 0x080006FE, 0x050FFDF8, 0x0307F9FB);
	r1 = D(r1, s[0][0][0], 0xF40A12FD, 0xFCF308FA, 0xF808EFFE, 0x060B060D);
	r2 = D(r2, s[0][0][0], 0x0A081101, 0xFD010209, 0xFD091F02, 0x0DFD0404);
	r3 = D(r3, s[0][0][0], 0x0408F805, 0x0508FCFB, 0x04F40402, 0xFD0F1AFE);
	r0 = D(r0, s[0][0][1], 0xFC02F704, 0x0707070A, 0x0CFF03FA, 0x0107E2F5);
	r1 = D(r1, s[0][0][1], 0x01F81503, 0xF80BFF02, 0x07FDEF02, 0x09FE11F4);
	r2 = D(r2, s[0][0][1], 0xF70608F5, 0xFB0203FE, 0xF7F51516, 0xE407E9FC);
	r3 = D(r3, s[0][0][1], 0xF9FDFE12, 0xF5FAF0E8, 0x0B05FDFD, 0xFFF8FCF7);
	r0 = D(r0, s[0][0][2], 0x09FD1301, 0x0BEF0302, 0xF712FDFF, 0x09EF0CFC);
	r1 = D(r1, s[0][0][2], 0xF9F8FD03, 0x01F9F901, 0xFB04EE06, 0x0104EA02);
	r2 = D(r2, s[0][0][2], 0xFEFF19FF, 0xFEFA1104, 0xF6F90C10, 0x02010A00);
	r3 = D(r3, s[0][0][2], 0x04FF0BFC, 0x0200EF0A, 0xFEF807F3, 0x0B040C10);
	r0 = D(r0, s[0][1][0], 0x08022603, 0x0BFEF90C, 0x0804F8E8, 0xFDF9FFEF);
	r1 = D(r1, s[0][1][0], 0xF5001308, 0xF3FEFDFD, 0x0A05F3F8, 0x05F3230A);
	r2 = D(r2, s[0][1][0], 0xFE06120B, 0xF9FF0DFF, 0xFFF11707, 0x050D0402);
	r3 = D(r3, s[0][1][0], 0x02FD0B12, 0xFC05F5F4, 0x06F406FC, 0x06EF11F3);
	r0 = D(r0, s[0][1][1], 0xEFFEF20E, 0x01F2E80E, 0xFE0C12F8, 0x0B12FCF1);
	r1 = D(r1, s[0][1][1], 0x18030B0A, 0xEB0CE203, 0xE9EE0FFB, 0xEC01E5FA);
	r2 = D(r2, s[0][1][1], 0x1904F707, 0x0504FAF4, 0x030D16FF, 0xFDFDE810);
	r3 = D(r3, s[0][1][1], 0xF30501FF, 0x06FA0B0C, 0x050C231B, 0x041502F8);
	r0 = D(r0, s[0][1][2], 0xF30103FE, 0x09F901FF, 0xFA02F915, 0xFEFF0006);
	r1 = D(r1, s[0][1][2], 0xF20E0309, 0xF204030B, 0xF207EAF7, 0xF209FDF6);
	r2 = D(r2, s[0][1][2], 0x0007FA12, 0xFFFF0304, 0x0F0A1205, 0xFDFD16F8);
	r3 = D(r3, s[0][1][2], 0xFA0C0006, 0x041C0E08, 0xFF120D0C, 0xF2FFE909);
	r0 = D(r0, s[0][2][0], 0x020E07F7, 0x0301EDF5, 0xFB13EA09, 0x0708FC0B);
	r1 = D(r1, s[0][2][0], 0xFF07FAF6, 0x0B08FFF8, 0xFF0605FC, 0xFEF82404);
	r2 = D(r2, s[0][2][0], 0xFD03120E, 0x0206FEFC, 0xFFFA0D17, 0x011104FA);
	r3 = D(r3, s[0][2][0], 0xFAFF04F8, 0x0204F412, 0x03EF0300, 0xFA080FF3);
	r0 = D(r0, s[0][2][1], 0x0703F402, 0xFBFFF9FA, 0xF4EE06FE, 0x0B1202F8);
	r1 = D(r1, s[0][2][1], 0xFE07F7FE, 0x1BF5EFFD, 0xFDF103FC, 0x01EFF416);
	r2 = D(r2, s[0][2][1], 0xF4FD02F6, 0x09FD06FE, 0x03070EF6, 0xFAFE09FF);
	r3 = D(r3, s[0][2][1], 0x0101FE0A, 0xF7F1F60D, 0x0CFA0802, 0x0004EFFF);
	r0 = D(r0, s[0][2][2], 0xF903F606, 0x05F6F805, 0xFCFD05FC, 0xFF06FCFB);
	r1 = D(r1, s[0][2][2], 0xFDFB02FF, 0x04030705, 0x10F715FC, 0x03F30108);
	r2 = D(r2, s[0][2][2], 0xEFFA0903, 0x09F1F9FF, 0x04FB0804, 0xF40312FD);
	r3 = D(r3, s[0][2][2], 0x010406FD, 0xFF04F702, 0x00FEF8F9, 0xFA040B0C);
	r0 = D(r0, s[1][0][0], 0x0D080BFE, 0x0107FDFA, 0x09FCFB14, 0xEFEF06FD);
	r1 = D(r1, s[1][0][0], 0xF40E0413, 0x06FE0DF7, 0x0100F503, 0xFF160E0C);
	r2 = D(r2, s[1][0][0], 0xF8FDFE06, 0xF30904FF, 0xE8060A0D, 0x04FDF9F9);
	r3 = D(r3, s[1][0][0], 0xEBEFFE06, 0xDBF8FC11, 0x08E9FEED, 0x02031105);
	r0 = D(r0, s[1][0][1], 0xF31704ED, 0x021302FC, 0xEDFEF806, 0x06EB02E9);
	r1 = D(r1, s[1][0][1], 0xFF0B070B, 0x110A0310, 0xDFF2FEE8, 0xF311F6FC);
	r2 = D(r2, s[1][0][1], 0xFF011212, 0xF7100C0C, 0xEE0A0101, 0x181A03F7);
	r3 = D(r3, s[1][0][1], 0xF90500EF, 0x02E41106, 0xEFE7F318, 0x10FCF61B);
	r0 = D(r0, s[1][0][2], 0x06F60302, 0xF011FEFC, 0xF2EFFE07, 0xF10DFCEC);
	r1 = D(r1, s[1][0][2], 0xFD130521, 0xFE020706, 0xFD0901FE, 0x02E801F9);
	r2 = D(r2, s[1][0][2], 0xF3FF021D, 0x030FFF0C, 0xE6FE1215, 0x02180004);
	r3 = D(r3, s[1][0][2], 0xFB0FFC0C, 0x0B08FD00, 0x09F607FF, 0xE91302F2);
	r0 = D(r0, s[1][1][0], 0xF4FB0809, 0x06F2FAE9, 0x09040BEE, 0xF6F9F2F7);
	r1 = D(r1, s[1][1][0], 0xFB01FE07, 0x0F1501FA, 0xF6010615, 0xF90FEDE1);
	r2 = D(r2, s[1][1][0], 0xFF0E07ED, 0x0B1E0D09, 0x1019FD0F, 0xF4F2010C);
	r3 = D(r3, s[1][1][0], 0x0B180101, 0x06FAFF08, 0xF100FD0D, 0x09F90314);
	r0 = D(r0, s[1][1][1], 0xF71412F7, 0x23070805, 0xFFF7F80C, 0xE4EAFFED);
	r1 = D(r1, s[1][1][1], 0xEBF6F0FF, 0x0911FE09, 0x0EF40306, 0x06EE03F1);
	r2 = D(r2, s[1][1][1], 0xF50C1313, 0x031F0A26, 0xF50CF20E, 0xEB2801F6);
	r3 = D(r3, s[1][1][1], 0x100405F9, 0xFE050303, 0x01F0F202, 0xFAFD0322);
	r0 = D(r0, s[1][1][2], 0x0D010EF5, 0xF10CF5FC, 0x03F30A02, 0xF8FD06F8);
	r1 = D(r1, s[1][1][2], 0x11081309, 0xFFEB0402, 0xFDDF00F5, 0x04DDFFFC);
	r2 = D(r2, s[1][1][2], 0x080B032A, 0xF8100106, 0xEB081416, 0x0DEFFEF4);
	r3 = D(r3, s[1][1][2], 0x15F102FC, 0x16F4010C, 0x11020202, 0xEB0BFA03);
	r0 = D(r0, s[1][2][0], 0xF3020106, 0x03FD0215, 0x13E9FAF1, 0xFAF8FBFF);
	r1 = D(r1, s[1][2][0], 0xFEF4FF05, 0xFCF5FA18, 0xFC07FDFE, 0xFD0C0403);
	r2 = D(r2, s[1][2][0], 0x0407F7F9, 0xF507130B, 0x07070101, 0xFF030A17);
	r3 = D(r3, s[1][2][0], 0x04E8F1F9, 0x08F001EF, 0xF00817EF, 0xF30DFD06);
	r0 = D(r0, s[1][2][1], 0xFC1A00EA, 0x16EA08FC, 0x11F3F8E5, 0xF0FDFFF5);
	r1 = D(r1, s[1][2][1], 0x09F700F4, 0xE8F2F6F7, 0xFE1CE9F9, 0x03250816);
	r2 = D(r2, s[1][2][1], 0x040BF311, 0xF3120612, 0xFE1EF40D, 0x0206FA04);
	r3 = D(r3, s[1][2][1], 0x04EB03F5, 0x0B0EF903, 0xF908081C, 0xF7010910);
	r0 = D(r0, s[1][2][2], 0x100D0D03, 0xF6FA03F9, 0xFDEAF70A, 0xF90AFCFB);
	r1 = D(r1, s[1][2][2], 0xFCF5FF02, 0xF515FA04, 0xFAFDF1F7, 0x0BFC06FF);
	r2 = D(r2, s[1][2][2], 0x1206002A, 0xF015030B, 0x0811171E, 0x0103060B);
	r3 = D(r3, s[1][2][2], 0x0BF50501, 0x1AF402FC, 0xF214F4F6, 0xE9141014);
	s[0][0][0] = G[6][xy.y+0][xy.x+0]; s[0][0][1] = G[6][xy.y+0][xy.x+1];
	s[0][0][2] = G[6][xy.y+0][xy.x+2]; s[0][1][0] = G[6][xy.y+1][xy.x+0];
	s[0][1][1] = G[6][xy.y+1][xy.x+1]; s[0][1][2] = G[6][xy.y+1][xy.x+2];
	s[0][2][0] = G[6][xy.y+2][xy.x+0]; s[0][2][1] = G[6][xy.y+2][xy.x+1];
	s[0][2][2] = G[6][xy.y+2][xy.x+2]; s[1][0][0] = G[7][xy.y+0][xy.x+0];
	s[1][0][1] = G[7][xy.y+0][xy.x+1]; s[1][0][2] = G[7][xy.y+0][xy.x+2];
	s[1][1][0] = G[7][xy.y+1][xy.x+0]; s[1][1][1] = G[7][xy.y+1][xy.x+1];
	s[1][1][2] = G[7][xy.y+1][xy.x+2]; s[1][2][0] = G[7][xy.y+2][xy.x+0];
	s[1][2][1] = G[7][xy.y+2][xy.x+1]; s[1][2][2] = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0x14FCF3FD, 0x26F50116, 0x0B07FA07, 0x250BF708);
	r1 = D(r1, s[0][0][0], 0x1EEE00E9, 0x05FEFA02, 0xEDF00DE0, 0x5601F80C);
	r2 = D(r2, s[0][0][0], 0x120308F9, 0x090407FB, 0x09F908F3, 0xF3050EFD);
	r3 = D(r3, s[0][0][0], 0x070200F6, 0x0EFEE20D, 0xF4F1ED07, 0x13F90DED);
	r0 = D(r0, s[0][0][1], 0xE608040B, 0x41FFF305, 0xF9030DFD, 0xEEFFFB06);
	r1 = D(r1, s[0][0][1], 0x06F80CDC, 0xFE030506, 0xCAEC06D1, 0xF4FAFCFC);
	r2 = D(r2, s[0][0][1], 0xEBF80BEB, 0x38000306, 0xEBF3FC09, 0xFCFCEEFC);
	r3 = D(r3, s[0][0][1], 0xDDEF15F0, 0xFCF51903, 0x05FFFA17, 0x34F2F514);
	r0 = D(r0, s[0][0][2], 0x2D0BFB06, 0x0BFEF2F5, 0xF3F2F503, 0xF910FD06);
	r1 = D(r1, s[0][0][2], 0x08080A04, 0x1C020BFB, 0xFDF8030C, 0xE60BFF01);
	r2 = D(r2, s[0][0][2], 0x04F3FFEC, 0x0407EE09, 0x1FF30400, 0xE4FE0602);
	r3 = D(r3, s[0][0][2], 0xF9F80EF3, 0xCE0308F2, 0xE8F4FAE6, 0x42F812FA);
	r0 = D(r0, s[0][1][0], 0xF7FA08EF, 0x26F90804, 0xD305FF04, 0xFCF4FCFF);
	r1 = D(r1, s[0][1][0], 0x2A04F0FA, 0xF40104FA, 0x2FF7EE08, 0x1600F905);
	r2 = D(r2, s[0][1][0], 0xE5FF0EF9, 0x1F010302, 0x23EE29E5, 0x0601031C);
	r3 = D(r3, s[0][1][0], 0x33EA1F02, 0x1BF80BF3, 0xE8E6FBFC, 0x24F8EB02);
	r0 = D(r0, s[0][1][1], 0x030D12FC, 0x22F002E8, 0xEA0EF1F5, 0xE1000EF9);
	r1 = D(r1, s[0][1][1], 0x0EFDF229, 0xE4FE02EE, 0xEC0811EF, 0xE411FEEE);
	r2 = D(r2, s[0][1][1], 0xE6F8FDDF, 0x2716EA09, 0xF2F4FCFB, 0x0004EC18);
	r3 = D(r3, s[0][1][1], 0x10E90A07, 0xFED71311, 0x15EA21FE, 0xDA07F9E8);
	r0 = D(r0, s[0][1][2], 0x15EAF5EB, 0x1CFE1912, 0x2402EBED, 0xE20EFAF3);
	r1 = D(r1, s[0][1][2], 0x0D0F072E, 0xEFFBFC08, 0x09FDFE16, 0xD208EE0E);
	r2 = D(r2, s[0][1][2], 0x1D0301E0, 0x06FF0216, 0xF705F501, 0xEFFF0812);
	r3 = D(r3, s[0][1][2], 0x0FFB0511, 0x1609F5F3, 0x23070421, 0x49FF070D);
	r0 = D(r0, s[0][2][0], 0x26F9FC06, 0x3AF6010A, 0x09030909, 0xFE05FC06);
	r1 = D(r1, s[0][2][0], 0x3D02EF04, 0x20FDF3F8, 0xFCFDF9FD, 0xFCFC0209);
	r2 = D(r2, s[0][2][0], 0x1602FBFD, 0x0DFC19FA, 0x18FDF3FD, 0x020612FA);
	r3 = D(r3, s[0][2][0], 0xFDF3FE05, 0xF3000307, 0x0A060501, 0x3CEFF9F3);
	r0 = D(r0, s[0][2][1], 0xEAFA0203, 0x1702FF08, 0xFE0701F2, 0xE30915FB);
	r1 = D(r1, s[0][2][1], 0x060C040C, 0x2B01E514, 0xF20C0108, 0x06030AFF);
	r2 = D(r2, s[0][2][1], 0xFC0D01FC, 0xFDFAFF07, 0xFA050AFB, 0xECF506F4);
	r3 = D(r3, s[0][2][1], 0x06F813F6, 0xE3EFF501, 0x2912FE0B, 0x4BE51514);
	r0 = D(r0, s[0][2][2], 0x19F700EF, 0x030318FC, 0xF806F7E6, 0xF71103E8);
	r1 = D(r1, s[0][2][2], 0x0A0BF812, 0xEB08F7FE, 0x2103FC1B, 0xF206F314);
	r2 = D(r2, s[0][2][2], 0x09F0E9DE, 0x07F90B11, 0x06F505ED, 0xC9F1F904);
	r3 = D(r3, s[0][2][2], 0x120FFC04, 0x2B040415, 0x1F01F81C, 0x30EE05F5);
	r0 = D(r0, s[1][0][0], 0xFEFC00EF, 0x1000FD0D, 0xFEFB00FB, 0x0208FF05);
	r1 = D(r1, s[1][0][0], 0xF0EE0D0C, 0xFD0D0204, 0x07040DF3, 0xF2FE0106);
	r2 = D(r2, s[1][0][0], 0x02FEF4F4, 0xFAFB08F2, 0x09F2FD11, 0x0411F111);
	r3 = D(r3, s[1][0][0], 0x02F9EEFE, 0x041014F9, 0x08FDF2F0, 0x01E905F9);
	r0 = D(r0, s[1][0][1], 0x0200FAFE, 0x01F0E9FF, 0xFEFEF408, 0x0407FA0C);
	r1 = D(r1, s[1][0][1], 0xFE060CF2, 0xFFF5FC01, 0x01080E07, 0x04F9FB03);
	r2 = D(r2, s[1][0][1], 0xFEFD03F4, 0xF9FF0702, 0x04F4FFFB, 0xF9FD0D06);
	r3 = D(r3, s[1][0][1], 0x08ED0203, 0x06FE13F7, 0xF9F8FE06, 0xFC0115F0);
	r0 = D(r0, s[1][0][2], 0x05FE02F7, 0x04F50301, 0x0803F906, 0x03F4FE0A);
	r1 = D(r1, s[1][0][2], 0xF90107F9, 0xFCFAFEF9, 0xFC1806F3, 0xFF01F307);
	r2 = D(r2, s[1][0][2], 0x10FE01FF, 0xF8F8FC02, 0xFFEDF506, 0x04010304);
	r3 = D(r3, s[1][0][2], 0xF20BFC07, 0xFF0E08F9, 0xFF100AF3, 0x11F3FA09);
	r0 = D(r0, s[1][1][0], 0x07070305, 0x03000BF2, 0xF30A0EFE, 0xFD0CF7F9);
	r1 = D(r1, s[1][1][0], 0x09F5F50D, 0x01F8F9F7, 0xF0FDFEFC, 0xF7F70B02);
	r2 = D(r2, s[1][1][0], 0x0BED03FF, 0x0B0703F9, 0xFCFE020B, 0x0409FC01);
	r3 = D(r3, s[1][1][0], 0x0306FA04, 0xFC0203FB, 0x0407F202, 0xFAF4FB0C);
	r0 = D(r0, s[1][1][1], 0x00F1F603, 0x01F6F709, 0x0406F7F9, 0x021403F9);
	r1 = D(r1, s[1][1][1], 0xFDFFDCEA, 0x10F1FA06, 0x0801FA10, 0xF4FBFE0C);
	r2 = D(r2, s[1][1][1], 0xF1FC0B00, 0xFAFDFAFE, 0xF70CF0F2, 0x06F0FA10);
	r3 = D(r3, s[1][1][1], 0x02FF0602, 0xF50107F9, 0x1F1BF5F8, 0x05010A0A);
	r0 = D(r0, s[1][1][2], 0xFE1CFC05, 0x04F902FB, 0xF5E9F801, 0xFCFE090C);
	r1 = D(r1, s[1][1][2], 0xFEF80807, 0xFEFA0706, 0x09E20EFC, 0xFA040DFE);
	r2 = D(r2, s[1][1][2], 0x03D90605, 0x03FA0212, 0x09FA0109, 0xF2F3F30C);
	r3 = D(r3, s[1][1][2], 0xFF0CFD03, 0xFFFEF61F, 0xF4130B07, 0xFAE211EE);
	r0 = D(r0, s[1][2][0], 0x03F910F7, 0x0017FEF5, 0xF90BFCF7, 0xF50B08F0);
	r1 = D(r1, s[1][2][0], 0xFF0BF505, 0xFEF70101, 0x02FAFE09, 0xF5F3F515);
	r2 = D(r2, s[1][2][0], 0x07EEF407, 0xF5F7FE08, 0x07FD02FC, 0x0412F9F2);
	r3 = D(r3, s[1][2][0], 0x0707FAF8, 0x04F80DFA, 0xFEE501FD, 0x0909E202);
	r0 = D(r0, s[1][2][1], 0xF706FBFC, 0xF813F8FA, 0xF1FAFFFC, 0x0C0A0903);
	r1 = D(r1, s[1][2][1], 0x07F70B03, 0xF90C0EFA, 0xFD01F807, 0x04051008);
	r2 = D(r2, s[1][2][1], 0xF9EE0EFC, 0x030204FE, 0x15E616F7, 0x0400F0FE);
	r3 = D(r3, s[1][2][1], 0x110502FE, 0xFE0706FE, 0xE506FFFE, 0x06F80EF7);
	r0 = D(r0, s[1][2][2], 0x010804F8, 0xFB0BFCFC, 0x01F5F904, 0xFEFA0305);
	r1 = D(r1, s[1][2][2], 0x01020401, 0x01FA08FF, 0x00F3FAFF, 0x090107F5);
	r2 = D(r2, s[1][2][2], 0x07F8FD0E, 0x0C07060B, 0xFFF10603, 0x0F030911);
	r3 = D(r3, s[1][2][2], 0xF8F1F706, 0xF5F5FA07, 0x06FD0BF9, 0x06FB05F7);
	vec4 f0 = vec4(r0) * 6.20001240e-05;
	f0 += vec4(1.569e-02, -2.430e-02, 3.097e-02, -1.071e-02);
	imageStore(out_image, opos + ivec2(0, 0), vec4(f0));
	vec4 f1 = vec4(r1) * 6.20001240e-05;
	f1 += vec4(3.113e-02, -1.698e-02, -2.487e-02, -1.328e-02);
	imageStore(out_image, opos + ivec2(1, 0), vec4(f1));
	vec4 f2 = vec4(r2) * 6.20001240e-05;
	f2 += vec4(1.096e-03, -2.900e-02, -6.233e-03, -2.252e-02);
	imageStore(out_image, opos + ivec2(0, 1), vec4(f2));
	vec4 f3 = vec4(r3) * 6.20001240e-05;
	f3 += vec4(-6.589e-03, -3.454e-02, 9.408e-03, -3.902e-03);
	imageStore(out_image, opos + ivec2(1, 1), vec4(f3));
}

//!DESC CuNNy-16x16C-TEST-conv8
//!HOOK LUMA
//!COMPUTE 16 16 8 8
//!BIND conv7
//!BIND LUMA
//!SAVE conv8
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_spirv_intrinsics : require
#extension GL_EXT_control_flow_attributes : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) ivec4(r.x + dp4(s, a, 0), r.y + dp4(s, b, 0), r.z + dp4(s, c, 0), r.w + dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	[[unroll]] for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		[[unroll]] for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(2, 2) + ivec2(1, 1)) * conv7_pt;
			r = conv7_gather(p, 0);
			g = conv7_gather(p, 1);
			b = conv7_gather(p, 2);
			a = conv7_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.00000000e+00;
			vec4 v2 = vec4(r.z, g.z, b.z, a.z) * 1.00000000e+00;
			vec4 v4 = vec4(r.x, g.x, b.x, a.x) * 1.00000000e+00;
			vec4 v6 = vec4(r.y, g.y, b.y, a.y) * 1.00000000e+00;
			vec4 v1 = max(-v0, vec4(0));
			v0 = max(v0, vec4(0));
			vec4 v3 = max(-v2, vec4(0));
			v2 = max(v2, vec4(0));
			vec4 v5 = max(-v4, vec4(0));
			v4 = max(v4, vec4(0));
			vec4 v7 = max(-v6, vec4(0));
			v6 = max(v6, vec4(0));
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s[2][3][3];
	ivec4 r0 = ivec4(0);
	ivec4 r1 = ivec4(0);
	ivec4 r2 = ivec4(0);
	ivec4 r3 = ivec4(0);
	s[0][0][0] = G[0][xy.y+0][xy.x+0]; s[0][0][1] = G[0][xy.y+0][xy.x+1];
	s[0][0][2] = G[0][xy.y+0][xy.x+2]; s[0][1][0] = G[0][xy.y+1][xy.x+0];
	s[0][1][1] = G[0][xy.y+1][xy.x+1]; s[0][1][2] = G[0][xy.y+1][xy.x+2];
	s[0][2][0] = G[0][xy.y+2][xy.x+0]; s[0][2][1] = G[0][xy.y+2][xy.x+1];
	s[0][2][2] = G[0][xy.y+2][xy.x+2]; s[1][0][0] = G[1][xy.y+0][xy.x+0];
	s[1][0][1] = G[1][xy.y+0][xy.x+1]; s[1][0][2] = G[1][xy.y+0][xy.x+2];
	s[1][1][0] = G[1][xy.y+1][xy.x+0]; s[1][1][1] = G[1][xy.y+1][xy.x+1];
	s[1][1][2] = G[1][xy.y+1][xy.x+2]; s[1][2][0] = G[1][xy.y+2][xy.x+0];
	s[1][2][1] = G[1][xy.y+2][xy.x+1]; s[1][2][2] = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0x0502F109, 0x0808F6F4, 0xF809F8F1, 0x08FB00F1);
	r1 = D(r1, s[0][0][0], 0x09FC00FF, 0x0CFBFFFB, 0x00FCFD05, 0x0FFA0102);
	r2 = D(r2, s[0][0][0], 0xF800F2F8, 0x060702EF, 0x09F100FA, 0xFEFB02F8);
	r3 = D(r3, s[0][0][0], 0x000DFAFA, 0xF60E0703, 0xFE0EFFF7, 0x0115050E);
	r0 = D(r0, s[0][0][1], 0x01F6FE07, 0xFD08FFED, 0x030B06F0, 0x06E61201);
	r1 = D(r1, s[0][0][1], 0x12F90906, 0x010C10FA, 0x0C12FE0A, 0xF3FD030A);
	r2 = D(r2, s[0][0][1], 0xF804FAFE, 0x05EA090B, 0xF7FB0402, 0xFD100D05);
	r3 = D(r3, s[0][0][1], 0x030BFBFD, 0xFD020319, 0x0010F1F8, 0xF6080D02);
	r0 = D(r0, s[0][0][2], 0xFEF2EF10, 0xFB0005FB, 0x02010A01, 0x04FA0804);
	r1 = D(r1, s[0][0][2], 0x05030CFD, 0xF800F10E, 0xF80EF0FD, 0xF1F51306);
	r2 = D(r2, s[0][0][2], 0xF1070FF8, 0x03050300, 0x092605FD, 0xFFF503EC);
	r3 = D(r3, s[0][0][2], 0x050C00FC, 0x050B0AFA, 0x08F30006, 0xF51405F4);
	r0 = D(r0, s[0][1][0], 0x0D090309, 0xF5FA02F8, 0xFFFDFA08, 0x0713F50F);
	r1 = D(r1, s[0][1][0], 0x05F2F503, 0x02F508FA, 0xFFFC16F1, 0xF7FF0502);
	r2 = D(r2, s[0][1][0], 0xF708E8FC, 0x0E08F60B, 0x0FF6FF0A, 0x03FFFF02);
	r3 = D(r3, s[0][1][0], 0xFB13F40D, 0xFE0CFAFD, 0xF5F01DFA, 0xFAFD0A09);
	r0 = D(r0, s[0][1][1], 0xF7F50711, 0xFA03F70D, 0xF40416F9, 0x01FE020F);
	r1 = D(r1, s[0][1][1], 0x0D0DFF01, 0xEBEA16F2, 0x16060709, 0xEF13FA0E);
	r2 = D(r2, s[0][1][1], 0xF207FDFB, 0x0302F9F0, 0xF50018F7, 0x06F3F80B);
	r3 = D(r3, s[0][1][1], 0x0008E5F6, 0x05F50F02, 0xF314F3FF, 0x0710FA07);
	r0 = D(r0, s[0][1][2], 0x0112EFFB, 0xF8F90209, 0xEBFAFEFA, 0xFFF4FC0C);
	r1 = D(r1, s[0][1][2], 0xFDF40202, 0x0DFEECFE, 0x02FEFF0C, 0x02100FF1);
	r2 = D(r2, s[0][1][2], 0xF3F6F4F8, 0xF7E7FEF2, 0xF3F71607, 0x0B141301);
	r3 = D(r3, s[0][1][2], 0xFFE503F3, 0xFDFD10F9, 0xF7F3EB00, 0x05F62000);
	r0 = D(r0, s[0][2][0], 0xFDEF09FE, 0x05030301, 0xFB03FDF2, 0xFF01FA0A);
	r1 = D(r1, s[0][2][0], 0x090DEEFE, 0xF9FA0C06, 0x0DF00201, 0x01FAF007);
	r2 = D(r2, s[0][2][0], 0xF106FBF7, 0x03F402EB, 0x07FAF509, 0x1B00100C);
	r3 = D(r3, s[0][2][0], 0xF00B0001, 0xF3EFFE00, 0x0AF708FF, 0xF90AF402);
	r0 = D(r0, s[0][2][1], 0xFC21F208, 0x100F070D, 0xF60DFCFB, 0xED0DEDFA);
	r1 = D(r1, s[0][2][1], 0xFD0D0502, 0xF4071AF5, 0x00070C07, 0xE7FB0A05);
	r2 = D(r2, s[0][2][1], 0xF702F902, 0x02F11200, 0x01F8FDF5, 0x06020809);
	r3 = D(r3, s[0][2][1], 0xF8190102, 0xF10DFB08, 0x080FF70B, 0xF3060AFB);
	r0 = D(r0, s[0][2][2], 0x0302F502, 0x10FAFA05, 0xFB00FA0A, 0x08FAFEFF);
	r1 = D(r1, s[0][2][2], 0xEF09FDFB, 0x0B0DF6FC, 0x070B0308, 0xF61200EE);
	r2 = D(r2, s[0][2][2], 0xF5F2F9FB, 0x10F620F9, 0x020602FF, 0x0EFE09F8);
	r3 = D(r3, s[0][2][2], 0x0701F807, 0x04FEF001, 0x0CEDFB05, 0xFF03FFF8);
	r0 = D(r0, s[1][0][0], 0xFE031203, 0x02FEF719, 0x0EFF0001, 0xFFFE0D06);
	r1 = D(r1, s[1][0][0], 0xF2FE00FE, 0x0106FFE0, 0x0405F203, 0xFAFE0205);
	r2 = D(r2, s[1][0][0], 0x05F703FF, 0xFAFE09FD, 0x0DFFFC0A, 0x080201F7);
	r3 = D(r3, s[1][0][0], 0x0002F70E, 0xFE00F2E9, 0x0606F9F5, 0xF5030F02);
	r0 = D(r0, s[1][0][1], 0xFADDF91A, 0xFB05F9F5, 0x0206E803, 0xFCF90EF9);
	r1 = D(r1, s[1][0][1], 0xFA0E14E7, 0xFEFEF9F9, 0x1300EB14, 0x06EC07F5);
	r2 = D(r2, s[1][0][1], 0x06010503, 0xFBFFFFE1, 0xF9F6F01A, 0xFFF505E6);
	r3 = D(r3, s[1][0][1], 0x0A0A00F9, 0xFEFB02F1, 0xFD00FC15, 0x05FEFA0D);
	r0 = D(r0, s[1][0][2], 0x01FFFF05, 0x03050006, 0x05FB0608, 0xF005FD0B);
	r1 = D(r1, s[1][0][2], 0x0B020302, 0x07FDFC08, 0x00FCFEED, 0x0BF2EE1E);
	r2 = D(r2, s[1][0][2], 0x0EEBF9F6, 0x0AF2FAFE, 0xF9EA0004, 0x07F20618);
	r3 = D(r3, s[1][0][2], 0xF9FDFF08, 0x040C0DF1, 0x03F2F803, 0xF5E9030A);
	r0 = D(r0, s[1][1][0], 0xFD060104, 0x06F3F903, 0xF8030BF6, 0xFB070000);
	r1 = D(r1, s[1][1][0], 0xF205020B, 0xF1F915E3, 0x00F6FB08, 0x07FFF6FD);
	r2 = D(r2, s[1][1][0], 0x060807E3, 0xF712100F, 0x0AFF0016, 0xF9FC08FE);
	r3 = D(r3, s[1][1][0], 0x020702F9, 0x01FF07E2, 0x0D01EEFB, 0x00F800EB);
	r0 = D(r0, s[1][1][1], 0xF0F3F7FC, 0x02E9F20D, 0x07F3F71D, 0xF5FBF208);
	r1 = D(r1, s[1][1][1], 0xECF6FAEE, 0xFB0DF905, 0xDDF50B00, 0xF5FEFFE7);
	r2 = D(r2, s[1][1][1], 0xF6F8F6F6, 0x06FF05F5, 0x110AF606, 0xE5FE01FA);
	r3 = D(r3, s[1][1][1], 0x05FBF90D, 0xF61400E3, 0x0AEEF8F1, 0xF3FB1A0E);
	r0 = D(r0, s[1][1][2], 0xFAECFF02, 0xFD01F409, 0xF208EE08, 0x13EFEE0A);
	r1 = D(r1, s[1][1][2], 0xFF0DEB05, 0xEA020AF7, 0x0602F7EE, 0xF7F60708);
	r2 = D(r2, s[1][1][2], 0x02F900F2, 0x0D0BFCFF, 0x070D0BFE, 0x08FC02F3);
	r3 = D(r3, s[1][1][2], 0xFF0D0801, 0xFB06DF06, 0x0DFAFCFA, 0xFFFDFC04);
	r0 = D(r0, s[1][2][0], 0x07040303, 0xEAFAF307, 0xFAFC0609, 0x0FFCFF10);
	r1 = D(r1, s[1][2][0], 0xF0100802, 0x010D03E7, 0xF2FCF4FF, 0xFEFFFE00);
	r2 = D(r2, s[1][2][0], 0x090F0209, 0xFB08FB01, 0x00F104FB, 0x010A10FB);
	r3 = D(r3, s[1][2][0], 0x04F3FB09, 0x060402F9, 0xFE05FDF8, 0x08001006);
	r0 = D(r0, s[1][2][1], 0x16FE03FE, 0x08FCF50B, 0xF7F5F402, 0x0C01F708);
	r1 = D(r1, s[1][2][1], 0xF4F60609, 0x030804F9, 0xEBF901FF, 0x0310080A);
	r2 = D(r2, s[1][2][1], 0x1006000E, 0x0808F803, 0xFA040AFD, 0xFE0C1103);
	r3 = D(r3, s[1][2][1], 0xF8F9F3F6, 0x08F803F7, 0x0B02FEFF, 0x0CFC00FB);
	r0 = D(r0, s[1][2][2], 0x00FCF7F7, 0xF70803F8, 0xF808FF09, 0xFD0F020E);
	r1 = D(r1, s[1][2][2], 0xF6FCEEFF, 0xFDFB0AF4, 0x0801F900, 0x10F3FB0D);
	r2 = D(r2, s[1][2][2], 0x04FF0100, 0xFC03F3F9, 0xFD0203FB, 0x0D0B0E1C);
	r3 = D(r3, s[1][2][2], 0x080005F7, 0x0016FBFA, 0x0210F0F9, 0xF4030AFE);
	s[0][0][0] = G[2][xy.y+0][xy.x+0]; s[0][0][1] = G[2][xy.y+0][xy.x+1];
	s[0][0][2] = G[2][xy.y+0][xy.x+2]; s[0][1][0] = G[2][xy.y+1][xy.x+0];
	s[0][1][1] = G[2][xy.y+1][xy.x+1]; s[0][1][2] = G[2][xy.y+1][xy.x+2];
	s[0][2][0] = G[2][xy.y+2][xy.x+0]; s[0][2][1] = G[2][xy.y+2][xy.x+1];
	s[0][2][2] = G[2][xy.y+2][xy.x+2]; s[1][0][0] = G[3][xy.y+0][xy.x+0];
	s[1][0][1] = G[3][xy.y+0][xy.x+1]; s[1][0][2] = G[3][xy.y+0][xy.x+2];
	s[1][1][0] = G[3][xy.y+1][xy.x+0]; s[1][1][1] = G[3][xy.y+1][xy.x+1];
	s[1][1][2] = G[3][xy.y+1][xy.x+2]; s[1][2][0] = G[3][xy.y+2][xy.x+0];
	s[1][2][1] = G[3][xy.y+2][xy.x+1]; s[1][2][2] = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0x0EFE0BFE, 0xF20B00F2, 0x07FA080D, 0x0BF3F908);
	r1 = D(r1, s[0][0][0], 0x04EB12FC, 0x0810F908, 0xF018F3FD, 0xFA11F502);
	r2 = D(r2, s[0][0][0], 0x011A0207, 0xEE0203FD, 0xF5F304ED, 0xF203FB01);
	r3 = D(r3, s[0][0][0], 0xFDF3F305, 0x0CFF000E, 0x0117F303, 0x0E170A05);
	r0 = D(r0, s[0][0][1], 0x010606F9, 0xF1FD0BF3, 0xFFF7010D, 0x03EFE8F8);
	r1 = D(r1, s[0][0][1], 0xFCF3F403, 0xF209F5F8, 0xFC140DF9, 0xF2140EF9);
	r2 = D(r2, s[0][0][1], 0x0CF90BFB, 0xF602F5F7, 0xFEEC041C, 0xFDF8FFF6);
	r3 = D(r3, s[0][0][1], 0xF6F6F71C, 0x0FFC0205, 0x0308000E, 0x04080DE6);
	r0 = D(r0, s[0][0][2], 0x0106EDED, 0x010D05E9, 0xF7040102, 0x0EF7F0F4);
	r1 = D(r1, s[0][0][2], 0xFFFA00F9, 0xFAF90013, 0xED0D0300, 0xE711F6F4);
	r2 = D(r2, s[0][0][2], 0xFBFDFB01, 0xF3F706F9, 0x08030A0B, 0x01FB01FD);
	r3 = D(r3, s[0][0][2], 0x081AF1F9, 0xF7060A0B, 0x03FCFF0B, 0x02ED08FE);
	r0 = D(r0, s[0][1][0], 0xF51101F9, 0x08020803, 0x08F50306, 0xFAEFFDFE);
	r1 = D(r1, s[0][1][0], 0xFEFD0A00, 0xFF09F6F3, 0xF3E9F8F9, 0x07FFF8FE);
	r2 = D(r2, s[0][1][0], 0x08090802, 0xEBD6F1FD, 0xF8020C09, 0xFEF5FFEF);
	r3 = D(r3, s[0][1][0], 0x091AF212, 0x060C010B, 0x061D02EE, 0x04F8F5F7);
	r0 = D(r0, s[0][1][1], 0x0CFC04F7, 0xEB020711, 0xF507EAE5, 0xF826F1FA);
	r1 = D(r1, s[0][1][1], 0xFCFDF7EF, 0xE808DCEB, 0xF207FE09, 0x0C0F09FA);
	r2 = D(r2, s[0][1][1], 0x11FC02FA, 0xE5FEE817, 0x060316F3, 0xF1180107);
	r3 = D(r3, s[0][1][1], 0xF619E303, 0xF7160402, 0xFF0203F7, 0xFB05F3FA);
	r0 = D(r0, s[0][1][2], 0x09F7FBE7, 0xF7FA05FB, 0x00F1F6FD, 0xE7140EEF);
	r1 = D(r1, s[0][1][2], 0x00FC0908, 0x10F8FEF6, 0xF7F9F103, 0xFC14FCF9);
	r2 = D(r2, s[0][1][2], 0x07FB0B06, 0x0A02030A, 0x06EE0E0A, 0x09EDFFFD);
	r3 = D(r3, s[0][1][2], 0xFE03F610, 0x0AF80306, 0xFA0D02FB, 0x0814FAED);
	r0 = D(r0, s[0][2][0], 0xFB0DFC07, 0xFB0AF7FF, 0xE80B04F5, 0x03050B07);
	r1 = D(r1, s[0][2][0], 0x051E02F0, 0x0AFDFCFA, 0xFBE80100, 0xFA12FBF8);
	r2 = D(r2, s[0][2][0], 0x02FFFEF7, 0xF3050808, 0xF503FE09, 0x06FEFDF7);
	r3 = D(r3, s[0][2][0], 0x05F5FAFF, 0x0B0007FE, 0x0BFDF902, 0xF80E02F2);
	r0 = D(r0, s[0][2][1], 0x11070B08, 0x04E50915, 0xF50D03F1, 0xFFF6FEFC);
	r1 = D(r1, s[0][2][1], 0xFC0D0302, 0x07F8F5FA, 0xF90BF802, 0x011202FC);
	r2 = D(r2, s[0][2][1], 0x07FEFEFE, 0x07FD0809, 0xF4041409, 0x0FFB01FA);
	r3 = D(r3, s[0][2][1], 0x05E002F5, 0x02F20702, 0x09F0FF09, 0xF4FD0A04);
	r0 = D(r0, s[0][2][2], 0xF8F104F9, 0xFAFCFD07, 0xFA12FF0B, 0x02FAFF05);
	r1 = D(r1, s[0][2][2], 0xF50BFBF2, 0x0F04F706, 0xFF0CFD0A, 0x05000B01);
	r2 = D(r2, s[0][2][2], 0xFE0C01FF, 0x09FAFEFE, 0xF711FFFD, 0x00F1F814);
	r3 = D(r3, s[0][2][2], 0xFB0EFA00, 0x00FF01F7, 0x01FF0408, 0xFAFD09F4);
	r0 = D(r0, s[1][0][0], 0x14F9FAF8, 0xED100DF7, 0x0B1111ED, 0x07170B08);
	r1 = D(r1, s[1][0][0], 0x0C0606F9, 0x01F5FFEE, 0xF5F3F40F, 0x0805F408);
	r2 = D(r2, s[1][0][0], 0xFEFEF902, 0x130EF405, 0x01FE1803, 0x12FA06FE);
	r3 = D(r3, s[1][0][0], 0x0E030903, 0xF6F900F6, 0x0DF3F607, 0x0207FE0A);
	r0 = D(r0, s[1][0][1], 0xFDEAFA02, 0x070006FB, 0xFA0115F7, 0xF800EEFE);
	r1 = D(r1, s[1][0][1], 0x060FFEFB, 0x0CFBFDF7, 0xF7F7D512, 0x07FDF0FF);
	r2 = D(r2, s[1][0][1], 0x060BF705, 0xFBF4F50D, 0xFE0222F7, 0xFE05F5F8);
	r3 = D(r3, s[1][0][1], 0x050716F4, 0xFE08F615, 0x07000501, 0xED0EF115);
	r0 = D(r0, s[1][0][2], 0xFCFFFEFC, 0x00090B03, 0xFC060AFE, 0xFE0F0B00);
	r1 = D(r1, s[1][0][2], 0x01FD04F2, 0x07FDFCF8, 0x01F6EB0D, 0x0608E7FF);
	r2 = D(r2, s[1][0][2], 0x130302F7, 0xF90200FF, 0xFEFA0803, 0xFD0C07FD);
	r3 = D(r3, s[1][0][2], 0xFBFD1000, 0x090A07F1, 0x0507FAFF, 0xF709ED0E);
	r0 = D(r0, s[1][1][0], 0x0A0C11F6, 0xEE07FD0E, 0xFC0302EA, 0x04F907EE);
	r1 = D(r1, s[1][1][0], 0x06F9FFF2, 0x050201FC, 0xFB06F70B, 0x03EEF901);
	r2 = D(r2, s[1][1][0], 0xFE0A0601, 0x0A071200, 0x08120001, 0x01F90209);
	r3 = D(r3, s[1][1][0], 0x020AFDF8, 0x1013FDF3, 0xFFF2F711, 0x0506FF01);
	r0 = D(r0, s[1][1][1], 0xF4000DF0, 0x010005E8, 0x04FBF317, 0xEFE90701);
	r1 = D(r1, s[1][1][1], 0xFE05EBE8, 0x2409F9F7, 0x0F0306F6, 0x1310FCF6);
	r2 = D(r2, s[1][1][1], 0x0D09F919, 0x16E410F6, 0x02F5020E, 0xF2F7F5FA);
	r3 = D(r3, s[1][1][1], 0xFD0E0602, 0x15FD0705, 0x0603030C, 0x11FA02ED);
	r0 = D(r0, s[1][1][2], 0xEFFEF5FF, 0x01EF1701, 0x1300020B, 0xF003F9F8);
	r1 = D(r1, s[1][1][2], 0x0B13F9E3, 0xFAFAF601, 0xF802F308, 0x120DFAFE);
	r2 = D(r2, s[1][1][2], 0x090504FC, 0xED090608, 0x0DF801F2, 0xFB0EF6FC);
	r3 = D(r3, s[1][1][2], 0xFDFD0402, 0x06160AF4, 0x0BFB01FF, 0x0DFA04F8);
	r0 = D(r0, s[1][2][0], 0x0B0103F8, 0xED000506, 0x07F4FEEB, 0x06F9FFF9);
	r1 = D(r1, s[1][2][0], 0x04FD0D07, 0x0A09FA03, 0xFB0E00F3, 0x080B050A);
	r2 = D(r2, s[1][2][0], 0xFBF90D01, 0xF6030208, 0xF0000A02, 0xFD090910);
	r3 = D(r3, s[1][2][0], 0x0300FFF5, 0xFFF90702, 0x00FB0908, 0x0AFBF908);
	r0 = D(r0, s[1][2][1], 0x03FF01FA, 0xF310FCF3, 0xFD050104, 0x0D07F005);
	r1 = D(r1, s[1][2][1], 0x0309F8F0, 0xFEF6FA18, 0x0AFFFDF4, 0x080EFBF7);
	r2 = D(r2, s[1][2][1], 0xFDFEFA01, 0xFDF2090B, 0xFCEEFAF5, 0x0112FD0D);
	r3 = D(r3, s[1][2][1], 0xF10D090B, 0x010408FE, 0xF8030207, 0xFEF9F900);
	r0 = D(r0, s[1][2][2], 0xF703FBF4, 0xE7031407, 0x01FFFF03, 0xF904FFFF);
	r1 = D(r1, s[1][2][2], 0xFE050303, 0x0E060503, 0x020A0007, 0xFF04F0FA);
	r2 = D(r2, s[1][2][2], 0x0108FFFF, 0x02FB0F06, 0x02F10FFC, 0x0A05FBF8);
	r3 = D(r3, s[1][2][2], 0xF509FD06, 0xF60B020A, 0x080506FC, 0x04FC01F8);
	s[0][0][0] = G[4][xy.y+0][xy.x+0]; s[0][0][1] = G[4][xy.y+0][xy.x+1];
	s[0][0][2] = G[4][xy.y+0][xy.x+2]; s[0][1][0] = G[4][xy.y+1][xy.x+0];
	s[0][1][1] = G[4][xy.y+1][xy.x+1]; s[0][1][2] = G[4][xy.y+1][xy.x+2];
	s[0][2][0] = G[4][xy.y+2][xy.x+0]; s[0][2][1] = G[4][xy.y+2][xy.x+1];
	s[0][2][2] = G[4][xy.y+2][xy.x+2]; s[1][0][0] = G[5][xy.y+0][xy.x+0];
	s[1][0][1] = G[5][xy.y+0][xy.x+1]; s[1][0][2] = G[5][xy.y+0][xy.x+2];
	s[1][1][0] = G[5][xy.y+1][xy.x+0]; s[1][1][1] = G[5][xy.y+1][xy.x+1];
	s[1][1][2] = G[5][xy.y+1][xy.x+2]; s[1][2][0] = G[5][xy.y+2][xy.x+0];
	s[1][2][1] = G[5][xy.y+2][xy.x+1]; s[1][2][2] = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0x0B00F8F9, 0xFFFA03F7, 0x02000502, 0x0009F312);
	r1 = D(r1, s[0][0][0], 0xF20BED0D, 0xFF0807FF, 0x040A01F7, 0x02050603);
	r2 = D(r2, s[0][0][0], 0x05FCF700, 0x01FD0509, 0xF7080903, 0xFFFAFD09);
	r3 = D(r3, s[0][0][0], 0xFB00FA04, 0xFA03F503, 0x010216F0, 0x0112F6F8);
	r0 = D(r0, s[0][0][1], 0x000F0009, 0xF612F7F8, 0x03050413, 0x0510F901);
	r1 = D(r1, s[0][0][1], 0x0E13FA09, 0xEA05FC02, 0xF6FB03FF, 0xFF0BF407);
	r2 = D(r2, s[0][0][1], 0x090C0704, 0xF60405F1, 0xFCFE0205, 0xFB0406ED);
	r3 = D(r3, s[0][0][1], 0x08FAF208, 0x0BFBFD01, 0xF3030805, 0xFA010EF9);
	r0 = D(r0, s[0][0][2], 0xFF06F6F2, 0xF20601F5, 0x0808FDFF, 0xFEFDFBFD);
	r1 = D(r1, s[0][0][2], 0xFD0F0FF1, 0x00000DFA, 0xF7F9F707, 0xFAF9F5FB);
	r2 = D(r2, s[0][0][2], 0xFF040AF6, 0xFEEEEFF8, 0xF80EFD07, 0xFDF6000C);
	r3 = D(r3, s[0][0][2], 0x010401F6, 0xFD060604, 0x00F902FE, 0xFF0B100C);
	r0 = D(r0, s[0][1][0], 0x1908FFFE, 0x03030602, 0x0DF104FB, 0x01F30402);
	r1 = D(r1, s[0][1][0], 0x0810FB04, 0x0309F502, 0xEC090EFE, 0xFB05F7F3);
	r2 = D(r2, s[0][1][0], 0x1E01F1FF, 0xF9FBF302, 0x10EBFBF4, 0xFEFB0B03);
	r3 = D(r3, s[0][1][0], 0x0BF00704, 0xE8F70AFC, 0xF6090FFC, 0x00FB000F);
	r0 = D(r0, s[0][1][1], 0x10FFF000, 0xFBFF08FA, 0x101A04F8, 0xEF10EEF3);
	r1 = D(r1, s[0][1][1], 0xFBF50005, 0xE320F5FD, 0x04F3F5F9, 0x020208F1);
	r2 = D(r2, s[0][1][1], 0x18020116, 0xFE18EEFF, 0x1B07F7F7, 0x0507F300);
	r3 = D(r3, s[0][1][1], 0xFAF108FB, 0xFD00030D, 0xE4110EFF, 0xF7F9FFEE);
	r0 = D(r0, s[0][1][2], 0xFA030009, 0xFA120406, 0x000A1509, 0xFF000801);
	r1 = D(r1, s[0][1][2], 0xE7F5F4FD, 0xF805F200, 0xF60609FB, 0x02080EF5);
	r2 = D(r2, s[0][1][2], 0x06F9FBFD, 0xF7F9F70A, 0x160BFB06, 0xFA03F80A);
	r3 = D(r3, s[0][1][2], 0x01020FFE, 0xF80312FE, 0xFD0B0102, 0x19050703);
	r0 = D(r0, s[0][2][0], 0x1003F5F2, 0xF3FD03FC, 0xEAF4F906, 0xF50CF0F3);
	r1 = D(r1, s[0][2][0], 0xFBFD100C, 0xF406FE07, 0x02F9FF0F, 0xEFEE0906);
	r2 = D(r2, s[0][2][0], 0xF50200F9, 0xFC0CF208, 0x08FEF800, 0xFFFD010A);
	r3 = D(r3, s[0][2][0], 0x0500FCFD, 0x12FC0201, 0x06FBFFF6, 0x0E06FE09);
	r0 = D(r0, s[0][2][1], 0x0307FE03, 0xE70E00F0, 0x040304F9, 0x180B0108);
	r1 = D(r1, s[0][2][1], 0xED03FE07, 0xE716FFFD, 0xF108F1FB, 0x08F1F7FB);
	r2 = D(r2, s[0][2][1], 0x02F81500, 0xF30BF9FC, 0x0602E412, 0x2B160304);
	r3 = D(r3, s[0][2][1], 0x0DFB0706, 0xFFF0F806, 0xFF070705, 0x0A19F7FB);
	r0 = D(r0, s[0][2][2], 0xFAFDFBF8, 0xFBFBFEF1, 0x0EFE03FC, 0x0FFC0200);
	r1 = D(r1, s[0][2][2], 0xFF060605, 0xFEFD0AF7, 0xF7F8FFFF, 0xFA03F8F5);
	r2 = D(r2, s[0][2][2], 0x0EF7FB02, 0xFA09FB00, 0x0A05F5FF, 0x1615FEF7);
	r3 = D(r3, s[0][2][2], 0xE50000FB, 0x030CF701, 0x14F8000A, 0x15050200);
	r0 = D(r0, s[1][0][0], 0x0CFBF518, 0x02050502, 0x00F9FA03, 0x040CF4E2);
	r1 = D(r1, s[1][0][0], 0x04FFEFF1, 0x01F4F3FA, 0xF9FE0A0C, 0xFDF700F1);
	r2 = D(r2, s[1][0][0], 0x0B0008E3, 0xF9FEFA0A, 0x09FF0110, 0x09FBFDF1);
	r3 = D(r3, s[1][0][0], 0x03F8FC0E, 0x02F206F1, 0xFCFD061B, 0x050B05F7);
	r0 = D(r0, s[1][0][1], 0xFDFDEE0C, 0xF50B0503, 0x030AED00, 0x080E0611);
	r1 = D(r1, s[1][0][1], 0x0012080C, 0xFE130404, 0xFD0AF402, 0x05FAF408);
	r2 = D(r2, s[1][0][1], 0xFDFFEAF8, 0x120CFDFB, 0x00000008, 0xF90607F7);
	r3 = D(r3, s[1][0][1], 0x100212FA, 0xFC09F603, 0x0B01F6ED, 0x06FAF6FC);
	r0 = D(r0, s[1][0][2], 0xFF09EA10, 0xF9FFFE18, 0xF70BFFF6, 0xF701130A);
	r1 = D(r1, s[1][0][2], 0xF3010AF2, 0x0204F0E3, 0x010CFDED, 0xFE08041B);
	r2 = D(r2, s[1][0][2], 0xF006FD0E, 0x05040B0B, 0xFBDFF8F6, 0x0D0909F6);
	r3 = D(r3, s[1][0][2], 0xFFF00309, 0x03FAFFF0, 0x06FFEAF9, 0xE9020B0B);
	r0 = D(r0, s[1][1][0], 0xF7FE0900, 0x0F0E0DEE, 0xF7FEECF6, 0xE809F711);
	r1 = D(r1, s[1][1][0], 0xFC04FB03, 0xF602FAF9, 0x1403FCEA, 0xF8FA0613);
	r2 = D(r2, s[1][1][0], 0x08FE1115, 0x060A0209, 0xF3020A0B, 0x01F2ED11);
	r3 = D(r3, s[1][1][0], 0xFF000509, 0x0DE80C0E, 0x03F805FC, 0x090B02FD);
	r0 = D(r0, s[1][1][1], 0xF10E0FEA, 0xFF161206, 0x08FAF3EF, 0x07ED0010);
	r1 = D(r1, s[1][1][1], 0x0DFA0612, 0x01E80E07, 0xFB060EEC, 0x09E9F603);
	r2 = D(r2, s[1][1][1], 0xF30B00ED, 0xED020710, 0x0401000F, 0x0BFDF612);
	r3 = D(r3, s[1][1][1], 0x0FE404FD, 0xFDF012FD, 0x16FB0B01, 0x12EFFDFD);
	r0 = D(r0, s[1][1][2], 0xF5F9FAF3, 0x06060812, 0xFA04FB20, 0xF1F708F6);
	r1 = D(r1, s[1][1][2], 0xFD030C03, 0xFB17F6FC, 0x02040D0C, 0xF80AF303);
	r2 = D(r2, s[1][1][2], 0x1310FAFA, 0x12FE11FA, 0xF8F9F219, 0xFFFAE7FC);
	r3 = D(r3, s[1][1][2], 0x030BFAEC, 0x06F609F7, 0x0AE9FCEE, 0x020212E3);
	r0 = D(r0, s[1][2][0], 0xFD030008, 0xFA0AFA0D, 0xFFFB01F5, 0x09051709);
	r1 = D(r1, s[1][2][0], 0xFA08F5E7, 0x070C0701, 0xF901FEF5, 0xFA0AFBFE);
	r2 = D(r2, s[1][2][0], 0xFFFB0D0F, 0x0111040F, 0xFE08090D, 0x1104F805);
	r3 = D(r3, s[1][2][0], 0x04F601F3, 0x02FDFCF0, 0xFC03FA0F, 0xFD0005EF);
	r0 = D(r0, s[1][2][1], 0x04071501, 0x01070712, 0x1DEDF705, 0x01FC0211);
	r1 = D(r1, s[1][2][1], 0x07040D0D, 0x02F1111B, 0xFAF2FF00, 0xF20607FF);
	r2 = D(r2, s[1][2][1], 0x03FB070D, 0x0B1005FE, 0x040A0EF6, 0xF803F30D);
	r3 = D(r3, s[1][2][1], 0xF8FA0400, 0xFEF90401, 0xFBF90400, 0x09FE200C);
	r0 = D(r0, s[1][2][2], 0x0EF51009, 0xFB15021B, 0xF7F502E2, 0x1001F0F0);
	r1 = D(r1, s[1][2][2], 0xFF031707, 0xF701F9FE, 0xFAFD08F2, 0x0A18F806);
	r2 = D(r2, s[1][2][2], 0x00F90504, 0xFD0D08FF, 0x0DFB0819, 0x0605F82C);
	r3 = D(r3, s[1][2][2], 0x07020704, 0xFC000201, 0x00F9FDEB, 0x010BF700);
	s[0][0][0] = G[6][xy.y+0][xy.x+0]; s[0][0][1] = G[6][xy.y+0][xy.x+1];
	s[0][0][2] = G[6][xy.y+0][xy.x+2]; s[0][1][0] = G[6][xy.y+1][xy.x+0];
	s[0][1][1] = G[6][xy.y+1][xy.x+1]; s[0][1][2] = G[6][xy.y+1][xy.x+2];
	s[0][2][0] = G[6][xy.y+2][xy.x+0]; s[0][2][1] = G[6][xy.y+2][xy.x+1];
	s[0][2][2] = G[6][xy.y+2][xy.x+2]; s[1][0][0] = G[7][xy.y+0][xy.x+0];
	s[1][0][1] = G[7][xy.y+0][xy.x+1]; s[1][0][2] = G[7][xy.y+0][xy.x+2];
	s[1][1][0] = G[7][xy.y+1][xy.x+0]; s[1][1][1] = G[7][xy.y+1][xy.x+1];
	s[1][1][2] = G[7][xy.y+1][xy.x+2]; s[1][2][0] = G[7][xy.y+2][xy.x+0];
	s[1][2][1] = G[7][xy.y+2][xy.x+1]; s[1][2][2] = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0x03070206, 0x03EEF7F9, 0x02030204, 0x05FAEBF7);
	r1 = D(r1, s[0][0][0], 0x0206F70B, 0xFEFFFC0F, 0x06FBF9FE, 0x030A00F6);
	r2 = D(r2, s[0][0][0], 0xFC0AF6F1, 0xFA06FB01, 0xF507F1F9, 0xF902FA05);
	r3 = D(r3, s[0][0][0], 0x040101FE, 0xF70A0306, 0x0907FB01, 0x0EFFE6F5);
	r0 = D(r0, s[0][0][1], 0xFB120211, 0x0FEBE8FD, 0xFC0AFEFD, 0xEF00EFF4);
	r1 = D(r1, s[0][0][1], 0x12FA0314, 0xFA02F306, 0x0003FD0B, 0x0207FE00);
	r2 = D(r2, s[0][0][1], 0xFEF3F909, 0x01EB01F2, 0x04F20103, 0xFAEAFB01);
	r3 = D(r3, s[0][0][1], 0x05FDFBFE, 0x020107FA, 0x06F8F100, 0x0607F3E9);
	r0 = D(r0, s[0][0][2], 0x0F09090C, 0x0208130F, 0x0214030A, 0xF6100FF5);
	r1 = D(r1, s[0][0][2], 0xFD06F204, 0x0705FA09, 0x0AF300FA, 0xF6FA1201);
	r2 = D(r2, s[0][0][2], 0xF8F700F6, 0x00FE0000, 0x0DFEF7FB, 0xFEFB0AFA);
	r3 = D(r3, s[0][0][2], 0xF5060A04, 0xF912FFFC, 0xFF05FFED, 0x1109FAEB);
	r0 = D(r0, s[0][1][0], 0x0BFB00FB, 0x060004FB, 0xF1FEF6FF, 0xF4041C0D);
	r1 = D(r1, s[0][1][0], 0xFF04F6F9, 0x12FB05F7, 0xF70108F3, 0x07F9FE09);
	r2 = D(r2, s[0][1][0], 0xF6FAF601, 0x01FFFDF9, 0x050D0F03, 0xF7F7020A);
	r3 = D(r3, s[0][1][0], 0xFDF8F70B, 0xF50AF2FE, 0x02FE06EF, 0x00FEFFFE);
	r0 = D(r0, s[0][1][1], 0xFEE902FE, 0xF503020F, 0xEA0FF7F5, 0xFFF40515);
	r1 = D(r1, s[0][1][1], 0xFEF813F7, 0xF0F407F8, 0xF60606FA, 0xFAEDF70C);
	r2 = D(r2, s[0][1][1], 0x02F1FE02, 0x0E0A1007, 0x06020EF9, 0xF707070C);
	r3 = D(r3, s[0][1][1], 0xFEF6FBF2, 0x02FC11FD, 0x0AFD03D3, 0x01EEEB01);
	r0 = D(r0, s[0][1][2], 0xFB0F030B, 0x00080B0C, 0xFD0A0FFA, 0x1300FAEE);
	r1 = D(r1, s[0][1][2], 0x0100F7F7, 0xFC000B07, 0x02FD03F8, 0xF8FA0616);
	r2 = D(r2, s[0][1][2], 0x02FFFFF5, 0x0A03F8FF, 0x00E9080B, 0xFB05F714);
	r3 = D(r3, s[0][1][2], 0x0501F811, 0x0BFAFF0A, 0xFEF909F3, 0x03070702);
	r0 = D(r0, s[0][2][0], 0x020DFDF2, 0x00F10A0A, 0x07FD05F7, 0xFC10F20C);
	r1 = D(r1, s[0][2][0], 0xFB02FE0B, 0x010006FE, 0x01FA11F2, 0xF5060807);
	r2 = D(r2, s[0][2][0], 0x09F7F3FE, 0x05000FF9, 0x0A020803, 0x0FFAF506);
	r3 = D(r3, s[0][2][0], 0xF8FAE9F5, 0x020403ED, 0x00000D00, 0x12F2F502);
	r0 = D(r0, s[0][2][1], 0xEDFDED06, 0x081203FB, 0x06FEEF0A, 0x0AF50EF1);
	r1 = D(r1, s[0][2][1], 0x07FA0607, 0xF90DFEF0, 0x070AF5FE, 0xFEFCFEEB);
	r2 = D(r2, s[0][2][1], 0x0BF6FAFD, 0x08F6FCFA, 0x0BF00200, 0x05F9FC01);
	r3 = D(r3, s[0][2][1], 0xFF1104F9, 0xFAF9F5F4, 0x01F902E5, 0xE607F6F4);
	r0 = D(r0, s[0][2][2], 0x01F8060F, 0x0206F606, 0x060BF307, 0xF10DFAFC);
	r1 = D(r1, s[0][2][2], 0x18FBF707, 0x010204F6, 0x23F809F9, 0xF505FAFE);
	r2 = D(r2, s[0][2][2], 0x0AFB00F6, 0xDEFEF9FC, 0x01F4FE19, 0xF60F0CF9);
	r3 = D(r3, s[0][2][2], 0x0F00FF0C, 0x0812F607, 0x0B0105FB, 0xEB01F816);
	r0 = D(r0, s[1][0][0], 0xFBF4FBF7, 0x0A0905F5, 0xF90008FD, 0x160803FD);
	r1 = D(r1, s[1][0][0], 0xF70401F6, 0xEE0006FC, 0xFD0E0502, 0xFDFE12FF);
	r2 = D(r2, s[1][0][0], 0x06F400F9, 0x07FE03FE, 0x00EFFA03, 0xF2F911F6);
	r3 = D(r3, s[1][0][0], 0x0C0806F9, 0xFF05FAF9, 0xF305F9F5, 0x0DFFFFF9);
	r0 = D(r0, s[1][0][1], 0xF0FFF9FB, 0xEE061212, 0xFF030103, 0x061E050A);
	r1 = D(r1, s[1][0][1], 0x0306F607, 0xF5F2FD04, 0x110F11E9, 0xF3E7F5FE);
	r2 = D(r2, s[1][0][1], 0xFEFEF100, 0x0A1900FF, 0x09E3F606, 0x0617FFF1);
	r3 = D(r3, s[1][0][1], 0xFC020F19, 0xF715F507, 0xFB16FCEE, 0x08FAFDF9);
	r0 = D(r0, s[1][0][2], 0xF8F5FDF6, 0x02090D07, 0xFBFF0007, 0x031002FB);
	r1 = D(r1, s[1][0][2], 0xFA05F202, 0xF7F5FCFD, 0x030E11F9, 0xFEFD01F5);
	r2 = D(r2, s[1][0][2], 0x0107F509, 0x010D0EEF, 0xFAEBFAF9, 0x03FEF1FE);
	r3 = D(r3, s[1][0][2], 0x0EF30005, 0xFE001208, 0xF90903F9, 0x0D01E5FE);
	r0 = D(r0, s[1][1][0], 0xE90809FE, 0x1A05F402, 0x03070FF6, 0x0405F105);
	r1 = D(r1, s[1][1][0], 0xF0FBFD06, 0xF3FA0D09, 0x030D160D, 0x0BF1EF09);
	r2 = D(r2, s[1][1][0], 0x10FB0A01, 0x05EBF707, 0xFAF8FDFB, 0xF5F808FA);
	r3 = D(r3, s[1][1][0], 0xF616FF00, 0xED03F7F3, 0xF4050806, 0x10F0F108);
	r0 = D(r0, s[1][1][1], 0x12FCF8F9, 0xEFF40A10, 0xFB1C0607, 0xF909E6F3);
	r1 = D(r1, s[1][1][1], 0xFC06F31B, 0x0509FD0C, 0xF2050F09, 0x00F513EA);
	r2 = D(r2, s[1][1][1], 0xF5F7FB01, 0x02F20201, 0x00E8F304, 0x02EFF1FE);
	r3 = D(r3, s[1][1][1], 0x11151108, 0x1513E1EE, 0xF5F00105, 0xEB0BEEFE);
	r0 = D(r0, s[1][1][2], 0xF8F3F3E9, 0x0EF6F0FD, 0x0818F606, 0x0806EBF1);
	r1 = D(r1, s[1][1][2], 0xF207FF05, 0x0816FCFA, 0x06FF06FB, 0xE7F4F9F1);
	r2 = D(r2, s[1][1][2], 0x0A030007, 0xF5FF1404, 0xFBFDF702, 0xE7FA0F00);
	r3 = D(r3, s[1][1][2], 0x09020306, 0xF2060F00, 0x0518FA01, 0x21FEE8FF);
	r0 = D(r0, s[1][2][0], 0xFA090507, 0x1D10FC0D, 0xF3FCF0FB, 0x02080607);
	r1 = D(r1, s[1][2][0], 0xF806F4FA, 0x181703F7, 0xFE020004, 0x020407F5);
	r2 = D(r2, s[1][2][0], 0xF8FE06F8, 0x0308FDFD, 0xF3EDF0FE, 0x06FBF7FD);
	r3 = D(r3, s[1][2][0], 0x07FF19FF, 0xEFFAF8F9, 0xEE0DFAFF, 0xF3FAF1FA);
	r0 = D(r0, s[1][2][1], 0x12090A0D, 0xEF08F513, 0xF1FBF609, 0xED1205FF);
	r1 = D(r1, s[1][2][1], 0xF0EFF709, 0xFA000B1A, 0x07FC0FFD, 0x1DF6F9FF);
	r2 = D(r2, s[1][2][1], 0xFF030FF5, 0x100508FA, 0xFDF7FC07, 0x07060C09);
	r3 = D(r3, s[1][2][1], 0xF8F5FBF5, 0xFD0F02FD, 0x02160101, 0x0DF608FA);
	r0 = D(r0, s[1][2][2], 0x010407F7, 0xFB0703EE, 0x0A0D0000, 0x060A08F2);
	r1 = D(r1, s[1][2][2], 0xFEF3FFF3, 0x191B06FA, 0x030A03FC, 0x0AF80901);
	r2 = D(r2, s[1][2][2], 0xFDF7FEF7, 0x0EF406FE, 0xFD11FFFC, 0xF318F217);
	r3 = D(r3, s[1][2][2], 0x0EF705FD, 0xF2FB07FE, 0xF00505F7, 0x040CFBFB);
	vec4 f0 = vec4(r0) * 6.20001240e-05;
	f0 += vec4(-2.070e-02, 3.793e-03, 5.111e-03, 8.065e-03);
	imageStore(out_image, opos + ivec2(0, 0), vec4(f0));
	vec4 f1 = vec4(r1) * 6.20001240e-05;
	f1 += vec4(1.300e-02, 2.943e-02, -3.920e-02, 7.008e-02);
	imageStore(out_image, opos + ivec2(1, 0), vec4(f1));
	vec4 f2 = vec4(r2) * 6.20001240e-05;
	f2 += vec4(-2.173e-03, -1.824e-02, -1.527e-02, -1.873e-03);
	imageStore(out_image, opos + ivec2(0, 1), vec4(f2));
	vec4 f3 = vec4(r3) * 6.20001240e-05;
	f3 += vec4(2.020e-02, 2.932e-02, -3.257e-03, 6.744e-03);
	imageStore(out_image, opos + ivec2(1, 1), vec4(f3));
}

//!DESC CuNNy-16x16C-TEST-conv9
//!HOOK LUMA
//!COMPUTE 16 16 8 8
//!BIND conv8
//!BIND LUMA
//!SAVE conv9
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_spirv_intrinsics : require
#extension GL_EXT_control_flow_attributes : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) ivec4(r.x + dp4(s, a, 0), r.y + dp4(s, b, 0), r.z + dp4(s, c, 0), r.w + dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	[[unroll]] for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		[[unroll]] for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(2, 2) + ivec2(1, 1)) * conv8_pt;
			r = conv8_gather(p, 0);
			g = conv8_gather(p, 1);
			b = conv8_gather(p, 2);
			a = conv8_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.00000000e+00;
			vec4 v2 = vec4(r.z, g.z, b.z, a.z) * 1.00000000e+00;
			vec4 v4 = vec4(r.x, g.x, b.x, a.x) * 1.00000000e+00;
			vec4 v6 = vec4(r.y, g.y, b.y, a.y) * 1.00000000e+00;
			vec4 v1 = max(-v0, vec4(0));
			v0 = max(v0, vec4(0));
			vec4 v3 = max(-v2, vec4(0));
			v2 = max(v2, vec4(0));
			vec4 v5 = max(-v4, vec4(0));
			v4 = max(v4, vec4(0));
			vec4 v7 = max(-v6, vec4(0));
			v6 = max(v6, vec4(0));
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s[2][3][3];
	ivec4 r0 = ivec4(0);
	ivec4 r1 = ivec4(0);
	ivec4 r2 = ivec4(0);
	ivec4 r3 = ivec4(0);
	s[0][0][0] = G[0][xy.y+0][xy.x+0]; s[0][0][1] = G[0][xy.y+0][xy.x+1];
	s[0][0][2] = G[0][xy.y+0][xy.x+2]; s[0][1][0] = G[0][xy.y+1][xy.x+0];
	s[0][1][1] = G[0][xy.y+1][xy.x+1]; s[0][1][2] = G[0][xy.y+1][xy.x+2];
	s[0][2][0] = G[0][xy.y+2][xy.x+0]; s[0][2][1] = G[0][xy.y+2][xy.x+1];
	s[0][2][2] = G[0][xy.y+2][xy.x+2]; s[1][0][0] = G[1][xy.y+0][xy.x+0];
	s[1][0][1] = G[1][xy.y+0][xy.x+1]; s[1][0][2] = G[1][xy.y+0][xy.x+2];
	s[1][1][0] = G[1][xy.y+1][xy.x+0]; s[1][1][1] = G[1][xy.y+1][xy.x+1];
	s[1][1][2] = G[1][xy.y+1][xy.x+2]; s[1][2][0] = G[1][xy.y+2][xy.x+0];
	s[1][2][1] = G[1][xy.y+2][xy.x+1]; s[1][2][2] = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0x0EFF0EEC, 0xFEF9FBF9, 0x080D0300, 0x020301F7);
	r1 = D(r1, s[0][0][0], 0x0001FCF0, 0xF90B070B, 0xF719F321, 0xF20BFDE6);
	r2 = D(r2, s[0][0][0], 0x0402F510, 0xF3FF060F, 0xEB1E0021, 0x04F800FF);
	r3 = D(r3, s[0][0][0], 0x0BEF00D8, 0xFB02FF06, 0x02F80A18, 0x07E906E7);
	r0 = D(r0, s[0][0][1], 0xFFFC0306, 0xFEF00800, 0xF7F404F6, 0x02FA0BF6);
	r1 = D(r1, s[0][0][1], 0xFC0705DA, 0x09FE0029, 0xFB00F3F8, 0xE9F20B0D);
	r2 = D(r2, s[0][0][1], 0x050205F1, 0xFEF70AF5, 0x0FFE03F8, 0x00160005);
	r3 = D(r3, s[0][0][1], 0x02FB02FD, 0x0308F811, 0xF707F1F9, 0x04E5FFE5);
	r0 = D(r0, s[0][0][2], 0x0BE90C00, 0xF502FEFD, 0x08F500F7, 0xE6F305FE);
	r1 = D(r1, s[0][0][2], 0x01010A00, 0xF8FCF610, 0xEDF6F100, 0x0200FB06);
	r2 = D(r2, s[0][0][2], 0xEAF8F707, 0xF7FAFEFB, 0x0EF80CFA, 0xFB1F0B04);
	r3 = D(r3, s[0][0][2], 0xF4FE06FF, 0xF00D0100, 0x0206FAF6, 0xFFE9F8EB);
	r0 = D(r0, s[0][1][0], 0x01050CF0, 0x0B08090E, 0x06000602, 0xFF0E100F);
	r1 = D(r1, s[0][1][0], 0xFA0E0304, 0x0CF70F0E, 0x0707F304, 0xE41AF6DC);
	r2 = D(r2, s[0][1][0], 0x0208FC20, 0x070702FF, 0xED08F91A, 0x040405F6);
	r3 = D(r3, s[0][1][0], 0x06FA03E2, 0x06FA08FF, 0x0104021A, 0x040AFCF7);
	r0 = D(r0, s[0][1][1], 0x0B110311, 0xF9E80CFC, 0xE7DD0C1D, 0xF501FDEF);
	r1 = D(r1, s[0][1][1], 0xEF0505F5, 0x1CF90012, 0xFF0DE90E, 0x05FFF6EE);
	r2 = D(r2, s[0][1][1], 0x00F90718, 0xFB03011C, 0x0BE802D0, 0xF417E721);
	r3 = D(r3, s[0][1][1], 0x02FD00EE, 0xFCF40209, 0x1427F5E5, 0xF8EBFDF9);
	r0 = D(r0, s[0][1][2], 0xFFF10D0E, 0xF7EAEA03, 0x0300FE00, 0xFC0610FD);
	r1 = D(r1, s[0][1][2], 0xF8FE1107, 0x01FB0F05, 0xF7F5EFF3, 0xE3E805FA);
	r2 = D(r2, s[0][1][2], 0xF1F50F01, 0x07FCF512, 0x050300F9, 0xE7F100F7);
	r3 = D(r3, s[0][1][2], 0xF00507FF, 0x05090B03, 0xFB0CF700, 0x00EA0D01);
	r0 = D(r0, s[0][2][0], 0x02000DFC, 0x03F40E01, 0x06FF01EC, 0xF202FEFA);
	r1 = D(r1, s[0][2][0], 0x03011FF3, 0xF8F6FFF6, 0xF9FBFA07, 0xEFF1F8ED);
	r2 = D(r2, s[0][2][0], 0x0B1206F4, 0xF5FDF30A, 0xF50002E9, 0x05100EF9);
	r3 = D(r3, s[0][2][0], 0x02050C09, 0xFDFC0009, 0x11EE0103, 0xF4FDFFFA);
	r0 = D(r0, s[0][2][1], 0x081100F1, 0xFBF802ED, 0x011504F9, 0xF60705F8);
	r1 = D(r1, s[0][2][1], 0xF4FF0206, 0xFF0404FB, 0x0608100B, 0xF215FE05);
	r2 = D(r2, s[0][2][1], 0xFE0A0507, 0xFE01FAF7, 0x05F1E8F5, 0x070E12FF);
	r3 = D(r3, s[0][2][1], 0x070AFD09, 0xF6FCFBEA, 0xFEFDF7FF, 0x01EFFBED);
	r0 = D(r0, s[0][2][2], 0x02F201F5, 0xF00808F9, 0x0C0A0BEF, 0xF60703F8);
	r1 = D(r1, s[0][2][2], 0xF505030E, 0xF40609FA, 0xFD02FC05, 0x0410030E);
	r2 = D(r2, s[0][2][2], 0x0C0F0909, 0x0105040C, 0xF70A0E16, 0xFD00160B);
	r3 = D(r3, s[0][2][2], 0xFFF70C04, 0x00FDFB05, 0xFFF5EB0F, 0xFCED03FA);
	r0 = D(r0, s[1][0][0], 0xF3FB0A0A, 0xFB03F707, 0x060EFAFB, 0xF701F1F8);
	r1 = D(r1, s[1][0][0], 0xFAFF0A06, 0xFF0602F6, 0xFEF907F3, 0xF9F12607);
	r2 = D(r2, s[1][0][0], 0x0BF2F0FD, 0xFC070AFB, 0x00F103F2, 0x00FDF801);
	r3 = D(r3, s[1][0][0], 0xF8F10B02, 0xFFFBF3FD, 0x0506FB0A, 0xFEFB0D04);
	r0 = D(r0, s[1][0][1], 0x04FEF4EB, 0xED05F2F2, 0x0E07F709, 0xF708F3F3);
	r1 = D(r1, s[1][0][1], 0xEA000507, 0x06FB0E07, 0xFEF9F904, 0x0A0BF405);
	r2 = D(r2, s[1][0][1], 0xE4F6F6FE, 0xFC0A030F, 0xE3FFFBFD, 0xFBFB0500);
	r3 = D(r3, s[1][0][1], 0xFFFFF6FF, 0x03FC05FE, 0x05070702, 0xFA13F3FF);
	r0 = D(r0, s[1][0][2], 0xFDF9F8F6, 0xEE0706FE, 0x0703F106, 0x050909FF);
	r1 = D(r1, s[1][0][2], 0xFDFBFBFA, 0x04F0FFFC, 0xF2000406, 0xFBFCFDF8);
	r2 = D(r2, s[1][0][2], 0xF9F900EC, 0xFDFDFFFC, 0xF90E1001, 0xFF04F6EB);
	r3 = D(r3, s[1][0][2], 0x020AFDF0, 0x070B010A, 0xFFFFF202, 0x07090A02);
	r0 = D(r0, s[1][1][0], 0xF505EEF1, 0xF50708F2, 0x0CFCF800, 0xF201EDFD);
	r1 = D(r1, s[1][1][0], 0xF2F4070A, 0x0202FA07, 0x020001F8, 0x000204F3);
	r2 = D(r2, s[1][1][0], 0xF5FCFCEF, 0xFFFAF30C, 0x08F8F8F8, 0x07FDFB0D);
	r3 = D(r3, s[1][1][0], 0xFFF40411, 0xFBF4F5F8, 0xFA0EFEF8, 0xFDF5FE03);
	r0 = D(r0, s[1][1][1], 0xFEFBFDFF, 0xE0FEF2F3, 0x280DD60D, 0x02F8F9FB);
	r1 = D(r1, s[1][1][1], 0x06F7F700, 0x03FD0F08, 0xFFF50BFF, 0xFAFEFB0A);
	r2 = D(r2, s[1][1][1], 0x091100FC, 0x01FDFAE2, 0x02000312, 0x01030800);
	r3 = D(r3, s[1][1][1], 0x030B02E9, 0x050CFE00, 0xE0FBF100, 0x02FB0000);
	r0 = D(r0, s[1][1][2], 0x070AFDEA, 0xEA0A09FA, 0x03F40401, 0x0803F405);
	r1 = D(r1, s[1][1][2], 0x090CF0FB, 0x11FBF006, 0xFDFB08FE, 0x09FD010B);
	r2 = D(r2, s[1][1][2], 0x1114F50B, 0xF6FC10EE, 0x00F3F412, 0xF9FAF5F3);
	r3 = D(r3, s[1][1][2], 0x0401FCEF, 0x04FEF802, 0xFCF30FF7, 0x0FFFEEFF);
	r0 = D(r0, s[1][2][0], 0xF4060501, 0xFC01F3F4, 0x0310FBFA, 0x01FEF60C);
	r1 = D(r1, s[1][2][0], 0xF30412FD, 0x0008F206, 0x050AF000, 0x010C0701);
	r2 = D(r2, s[1][2][0], 0x0107F910, 0x14FC0302, 0xFEF8EC03, 0xFFFCF2F8);
	r3 = D(r3, s[1][2][0], 0xF7F1F603, 0x01FEFD01, 0xFEFB010E, 0xFEF3FEFD);
	r0 = D(r0, s[1][2][1], 0xFDFA0DF8, 0xFC0A0407, 0x13FEF9FC, 0x0EF50F02);
	r1 = D(r1, s[1][2][1], 0xFD040703, 0x180509F6, 0xF8EDFAFE, 0xF4EFFCF6);
	r2 = D(r2, s[1][2][1], 0x0D07FB04, 0x0C0B120C, 0xFF080500, 0x00FE00F3);
	r3 = D(r3, s[1][2][1], 0xF1E700FB, 0xF7FAFD09, 0x08F1ED10, 0xF4FE01FE);
	r0 = D(r0, s[1][2][2], 0xF7F917F6, 0x0000FD09, 0x020509FE, 0xFAF5F514);
	r1 = D(r1, s[1][2][2], 0x01070400, 0xFEFCF900, 0xF303E603, 0xECFE0400);
	r2 = D(r2, s[1][2][2], 0x0501FD07, 0x0400F302, 0xFF04F401, 0x0209000A);
	r3 = D(r3, s[1][2][2], 0x01F5F2FF, 0x07F8FFF6, 0xEEFAFC02, 0xFDFDFF04);
	s[0][0][0] = G[2][xy.y+0][xy.x+0]; s[0][0][1] = G[2][xy.y+0][xy.x+1];
	s[0][0][2] = G[2][xy.y+0][xy.x+2]; s[0][1][0] = G[2][xy.y+1][xy.x+0];
	s[0][1][1] = G[2][xy.y+1][xy.x+1]; s[0][1][2] = G[2][xy.y+1][xy.x+2];
	s[0][2][0] = G[2][xy.y+2][xy.x+0]; s[0][2][1] = G[2][xy.y+2][xy.x+1];
	s[0][2][2] = G[2][xy.y+2][xy.x+2]; s[1][0][0] = G[3][xy.y+0][xy.x+0];
	s[1][0][1] = G[3][xy.y+0][xy.x+1]; s[1][0][2] = G[3][xy.y+0][xy.x+2];
	s[1][1][0] = G[3][xy.y+1][xy.x+0]; s[1][1][1] = G[3][xy.y+1][xy.x+1];
	s[1][1][2] = G[3][xy.y+1][xy.x+2]; s[1][2][0] = G[3][xy.y+2][xy.x+0];
	s[1][2][1] = G[3][xy.y+2][xy.x+1]; s[1][2][2] = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0xF40A0402, 0x13FCF7FD, 0xE8F9FCFF, 0xFC0808FB);
	r1 = D(r1, s[0][0][0], 0x120A0605, 0xEFF6F5FC, 0x151AF012, 0xF109FBFC);
	r2 = D(r2, s[0][0][0], 0x20FEEF00, 0x0BF7FAFD, 0x0C0D0400, 0xE4E607F9);
	r3 = D(r3, s[0][0][0], 0xFDF9FE00, 0xE3FCEF00, 0xFB05000A, 0xE5040E02);
	r0 = D(r0, s[0][0][1], 0xEC130012, 0x0F0C0B05, 0x10F8DD0A, 0xFD000501);
	r1 = D(r1, s[0][0][1], 0x0214FCFD, 0xF9E90EFC, 0x32FDF504, 0xF8FF00FF);
	r2 = D(r2, s[0][0][1], 0xFBEB03FC, 0x18020A08, 0xFE16EEFF, 0x0E080B06);
	r3 = D(r3, s[0][0][1], 0xFB0F0802, 0x17FCFB0D, 0x02FBF5F9, 0xF7F9ECF0);
	r0 = D(r0, s[0][0][2], 0xF5DD09FE, 0x01050A00, 0x0418E60D, 0xF906F804);
	r1 = D(r1, s[0][0][2], 0xFBF206FD, 0x0B0FF8F6, 0x0602F804, 0x0E120508);
	r2 = D(r2, s[0][0][2], 0x09000402, 0xFFF8FBF4, 0x0BF40AF6, 0xF7F2060B);
	r3 = D(r3, s[0][0][2], 0xFF0FFF03, 0x000A1910, 0xF005FE03, 0xF000F713);
	r0 = D(r0, s[0][1][0], 0xF402F004, 0x1509F6F9, 0xE7F913F3, 0xE9FBF9FC);
	r1 = D(r1, s[0][1][0], 0xF902F405, 0x02EE0005, 0xFA0605FC, 0x0BF7E5FB);
	r2 = D(r2, s[0][1][0], 0x01F8FD01, 0xECEEF709, 0x04F5E6F8, 0x0200FCFF);
	r3 = D(r3, s[0][1][0], 0xFCFDF703, 0x29011203, 0x09FF0012, 0xFBF0FC00);
	r0 = D(r0, s[0][1][1], 0xF901ECF9, 0xEE2600FF, 0x0E07FCF2, 0x09F5FBF8);
	r1 = D(r1, s[0][1][1], 0xFA0200FB, 0xF2E004F9, 0xE315F9FE, 0x04F21FFD);
	r2 = D(r2, s[0][1][1], 0xF0040CFC, 0x0506F809, 0xF0F80FFB, 0x0B0511F1);
	r3 = D(r3, s[0][1][1], 0xFF050C09, 0xBA06FAF5, 0xF203F4F8, 0x001CF203);
	r0 = D(r0, s[0][1][2], 0x0CFB00FC, 0xFCF7F301, 0x02F6F605, 0x05FA0902);
	r1 = D(r1, s[0][1][2], 0xEDEFFF04, 0xFDFCF7F1, 0xF2070CFE, 0xFB0AF515);
	r2 = D(r2, s[0][1][2], 0x050E0BFA, 0x0A02FCE6, 0x0902FC01, 0xEFFBFF0E);
	r3 = D(r3, s[0][1][2], 0xE5FC0509, 0x0D18FC11, 0xE7FAFCFE, 0x04FEF409);
	r0 = D(r0, s[0][2][0], 0x0D0008FB, 0x05E70C07, 0xF91900FF, 0x031904FB);
	r1 = D(r1, s[0][2][0], 0xF5FB0BFE, 0xFAFE0103, 0xF90BFA00, 0x100EFA0B);
	r2 = D(r2, s[0][2][0], 0x020CFCFC, 0xFBF40000, 0x0D060802, 0xF1F6FE00);
	r3 = D(r3, s[0][2][0], 0x051208FC, 0x01F2F504, 0xFE000AFB, 0x0EFF0405);
	r0 = D(r0, s[0][2][1], 0x0B0B0202, 0xFCFAFEFE, 0xE9100902, 0x041205F3);
	r1 = D(r1, s[0][2][1], 0xFC080512, 0x05FCF9FF, 0xF206F6EE, 0xECFD07F1);
	r2 = D(r2, s[0][2][1], 0xE602FEF2, 0xFAFD07F6, 0xF9FAFB01, 0x091D0A06);
	r3 = D(r3, s[0][2][1], 0xFAF30304, 0x120DFA02, 0xFB0BFC02, 0x0E07F403);
	r0 = D(r0, s[0][2][2], 0x0100020B, 0x0D00070E, 0x0002000B, 0xF7070C04);
	r1 = D(r1, s[0][2][2], 0x0AF3FF05, 0x070CFDFA, 0x0414FD02, 0x1716F8FE);
	r2 = D(r2, s[0][2][2], 0xF1FEFBFF, 0xF4F70604, 0xFE041104, 0x11FE0915);
	r3 = D(r3, s[0][2][2], 0x06F707FA, 0xFE15F105, 0x0900F8FE, 0x0C021301);
	r0 = D(r0, s[1][0][0], 0xFE06050E, 0xF8000606, 0x040E05F8, 0xFB14FCFC);
	r1 = D(r1, s[1][0][0], 0xFEF7FEEF, 0xF8FBF906, 0xF51305F9, 0xFDFF17EC);
	r2 = D(r2, s[1][0][0], 0xFBF9FC11, 0x060B00F9, 0x0207FD01, 0x0AFEF70D);
	r3 = D(r3, s[1][0][0], 0xFBF90703, 0xFC01FCFD, 0xFF0F05FE, 0x030406ED);
	r0 = D(r0, s[1][0][1], 0xF607120D, 0x0504F4F2, 0x000608F8, 0x070AF80E);
	r1 = D(r1, s[1][0][1], 0xFB0F140F, 0x11FF1300, 0xFF00EBFE, 0xF5EF040D);
	r2 = D(r2, s[1][0][1], 0xFFFDE5EB, 0xF9F112F4, 0xFE07F0F6, 0xFEFDF9FF);
	r3 = D(r3, s[1][0][1], 0xF4FB0DE6, 0xF815F3F6, 0xFF06F5FE, 0xFA02FC07);
	r0 = D(r0, s[1][0][2], 0xFC04010B, 0xFD03FB03, 0x03F7FBF8, 0x04020800);
	r1 = D(r1, s[1][0][2], 0x00020607, 0x0104F2FC, 0xF80CF1F1, 0x06FA03F8);
	r2 = D(r2, s[1][0][2], 0x06F700FF, 0x06FBF902, 0xFA0D0005, 0x1201EAF2);
	r3 = D(r3, s[1][0][2], 0x07010BFF, 0xFD050A02, 0x07F9F0F3, 0xFE0C09FB);
	r0 = D(r0, s[1][1][0], 0xFBFB0105, 0xF109ED03, 0x010C0C06, 0xFF00FCFD);
	r1 = D(r1, s[1][1][0], 0xFEF005FD, 0xFE00F8FD, 0xFD09FD00, 0x0700010A);
	r2 = D(r2, s[1][1][0], 0xEE091905, 0x0EFDF1F5, 0xF6110F07, 0x10F80000);
	r3 = D(r3, s[1][1][0], 0x0207FCF0, 0xFBFFF6E6, 0x07110E05, 0x08F802FC);
	r0 = D(r0, s[1][1][1], 0xFEFAF704, 0x0CFCF4E9, 0x00F20616, 0xF9140A27);
	r1 = D(r1, s[1][1][1], 0x0B03FEFF, 0x0615110E, 0xFBECFC01, 0x0F13F3FA);
	r2 = D(r2, s[1][1][1], 0x06EF060D, 0x05F9FAE7, 0x0F0AEFF4, 0xFB040D07);
	r3 = D(r3, s[1][1][1], 0x0CF9F1E2, 0x01030AF9, 0xF901EDFC, 0x02EE1200);
	r0 = D(r0, s[1][1][2], 0xFAF00D0A, 0x0703FAF5, 0xF5FEF511, 0x05110406);
	r1 = D(r1, s[1][1][2], 0x0C0700F6, 0xFA060909, 0xFD100200, 0xF70E1CF6);
	r2 = D(r2, s[1][1][2], 0xFB030E00, 0x10040503, 0x0A1B0509, 0x12F0F3FA);
	r3 = D(r3, s[1][1][2], 0x07EF02F4, 0xF60D03F0, 0x02F6F6FD, 0x13FBFEEC);
	r0 = D(r0, s[1][2][0], 0xF403FC07, 0xF6F9FBF9, 0x06F6F6F4, 0xFD04FD0D);
	r1 = D(r1, s[1][2][0], 0xF708000A, 0x0CF9F1FB, 0x0700FDFF, 0xFB050CE6);
	r2 = D(r2, s[1][2][0], 0x0006FD0D, 0x12090AF7, 0x0001FEF3, 0x070C0407);
	r3 = D(r3, s[1][2][0], 0x01040107, 0x000102F0, 0xFF0C03F6, 0xF2080203);
	r0 = D(r0, s[1][2][1], 0xFEFDFE0A, 0xF2FAFD03, 0x0DFB0705, 0xF215FA05);
	r1 = D(r1, s[1][2][1], 0x01FF04FE, 0x080AF707, 0xF7F90501, 0xFF060D08);
	r2 = D(r2, s[1][2][1], 0x0503F404, 0x08130400, 0x07F707FE, 0xF900FE0B);
	r3 = D(r3, s[1][2][1], 0xEF01F8F2, 0xFB0AF4FE, 0xFC0207E8, 0xFFE510FF);
	r0 = D(r0, s[1][2][2], 0xF90200FA, 0x0000F503, 0x0101F7FE, 0xFC0AFFFD);
	r1 = D(r1, s[1][2][2], 0xFF020C05, 0x0D040114, 0x080402F8, 0x01030400);
	r2 = D(r2, s[1][2][2], 0xFE08F7FF, 0x0D060704, 0x0808F1F7, 0xF102E807);
	r3 = D(r3, s[1][2][2], 0xF10CEE00, 0x1302FFFB, 0xFB020BF9, 0xF8FBF200);
	s[0][0][0] = G[4][xy.y+0][xy.x+0]; s[0][0][1] = G[4][xy.y+0][xy.x+1];
	s[0][0][2] = G[4][xy.y+0][xy.x+2]; s[0][1][0] = G[4][xy.y+1][xy.x+0];
	s[0][1][1] = G[4][xy.y+1][xy.x+1]; s[0][1][2] = G[4][xy.y+1][xy.x+2];
	s[0][2][0] = G[4][xy.y+2][xy.x+0]; s[0][2][1] = G[4][xy.y+2][xy.x+1];
	s[0][2][2] = G[4][xy.y+2][xy.x+2]; s[1][0][0] = G[5][xy.y+0][xy.x+0];
	s[1][0][1] = G[5][xy.y+0][xy.x+1]; s[1][0][2] = G[5][xy.y+0][xy.x+2];
	s[1][1][0] = G[5][xy.y+1][xy.x+0]; s[1][1][1] = G[5][xy.y+1][xy.x+1];
	s[1][1][2] = G[5][xy.y+1][xy.x+2]; s[1][2][0] = G[5][xy.y+2][xy.x+0];
	s[1][2][1] = G[5][xy.y+2][xy.x+1]; s[1][2][2] = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0x0407FE00, 0xF603FFFE, 0xF0FDFFF4, 0x0BFDFAFD);
	r1 = D(r1, s[0][0][0], 0x030AFD0B, 0xF4FB04F3, 0x03F40BF2, 0xF20FF8FF);
	r2 = D(r2, s[0][0][0], 0x0BFFEBF3, 0x05010C02, 0xF5FBF3FA, 0xFC04FBF4);
	r3 = D(r3, s[0][0][0], 0xFF010105, 0x09FE050D, 0xFE05FE00, 0xFBFB040F);
	r0 = D(r0, s[0][0][1], 0x01FEFEFE, 0xFE000AF6, 0x0005F100, 0x07FC0905);
	r1 = D(r1, s[0][0][1], 0x0E03E7FC, 0xF50211FE, 0xF903F1F4, 0xFAECF1E4);
	r2 = D(r2, s[0][0][1], 0xFF09E8FD, 0x0500FEF8, 0x04010A00, 0x02F7F3F9);
	r3 = D(r3, s[0][0][1], 0x0804FAF0, 0xFA02FF08, 0xF5FDF503, 0x040802FC);
	r0 = D(r0, s[0][0][2], 0xFAFCFC00, 0xF8010400, 0x06FBF100, 0xFDF4F60E);
	r1 = D(r1, s[0][0][2], 0xF0EAF2FC, 0x03FE1200, 0x04FFF501, 0xFF0BFCFF);
	r2 = D(r2, s[0][0][2], 0xF3FA03E5, 0x0200FF02, 0x0AF80302, 0x01F9FEF5);
	r3 = D(r3, s[0][0][2], 0xF5FB08FA, 0x0410FAFC, 0xED02F9F8, 0x020404FC);
	r0 = D(r0, s[0][1][0], 0x0301FC02, 0xF60203FD, 0x07F1FE0C, 0xFC09FF07);
	r1 = D(r1, s[0][1][0], 0x0A01F3FA, 0x07FD0315, 0x04F8F50B, 0xF904FDFE);
	r2 = D(r2, s[0][1][0], 0x02FCEE05, 0xFDFAEFFB, 0x15F9FC04, 0x070CFC0C);
	r3 = D(r3, s[0][1][0], 0xF00209F3, 0xFDF808FD, 0x01F8FE05, 0x02061000);
	r0 = D(r0, s[0][1][1], 0x0F04FFF5, 0x0AEF11F9, 0xFB00E90C, 0xFAFAEF0E);
	r1 = D(r1, s[0][1][1], 0x0003F8EB, 0x08FBF3FB, 0xF601F204, 0xFB090103);
	r2 = D(r2, s[0][1][1], 0x17FCFE06, 0x08F505FA, 0xF6F415F9, 0x0402F9F3);
	r3 = D(r3, s[0][1][1], 0x090721FD, 0xF4FE020B, 0xEFFFF814, 0x02F91C09);
	r0 = D(r0, s[0][1][2], 0x00FC1018, 0xF2FEF40C, 0x060AFC06, 0xFEFCEF04);
	r1 = D(r1, s[0][1][2], 0x08FFEE11, 0x030DE8FF, 0x01FC04F9, 0x0BF5F9FB);
	r2 = D(r2, s[0][1][2], 0x09FCF3F2, 0xFD07F80E, 0x06FA0804, 0x06EA05F8);
	r3 = D(r3, s[0][1][2], 0xFA040006, 0x000607FF, 0xE90D01FD, 0xF8F50DFF);
	r0 = D(r0, s[0][2][0], 0xFDF4FDFE, 0x060F12FA, 0x00060004, 0x0800FC02);
	r1 = D(r1, s[0][2][0], 0xFBFBF7FB, 0xFD06F900, 0x0904FE08, 0x08F7F705);
	r2 = D(r2, s[0][2][0], 0x0EF905F6, 0x0A0A020E, 0xFDFEED00, 0x010B07F9);
	r3 = D(r3, s[0][2][0], 0x03FB08F6, 0xFA000411, 0x08EFF9F9, 0xF6FCFC04);
	r0 = D(r0, s[0][2][1], 0xFCF718F2, 0xF810FB01, 0x0416F4E4, 0x0000EDF7);
	r1 = D(r1, s[0][2][1], 0x08F20D12, 0x0409F006, 0xFE0BF90F, 0x02EEFDF5);
	r2 = D(r2, s[0][2][1], 0x0605FCFC, 0x0004FDF3, 0xF4FCF6FC, 0xFEFDFAFD);
	r3 = D(r3, s[0][2][1], 0x0B0A0E04, 0x03F6FF02, 0x04080A0C, 0xEAF40001);
	r0 = D(r0, s[0][2][2], 0x00F91608, 0x0A03F511, 0xF90403FB, 0x040408F1);
	r1 = D(r1, s[0][2][2], 0x00F0FDF7, 0x0106F4FE, 0x0E030FFC, 0xFF11FE09);
	r2 = D(r2, s[0][2][2], 0xFF110108, 0x0009F509, 0x0A130005, 0x07FE040B);
	r3 = D(r3, s[0][2][2], 0xF9F40DE9, 0x0200FFFA, 0xFAF0F815, 0x04F60016);
	r0 = D(r0, s[1][0][0], 0x10FBFAF3, 0xCC010CFE, 0x26030500, 0xF0FAFD08);
	r1 = D(r1, s[1][0][0], 0x0EFBFAF8, 0xFFFC0116, 0x02160300, 0xFDFCF4FD);
	r2 = D(r2, s[1][0][0], 0x2C0E08FA, 0xD9F400F6, 0xFE040500, 0xFCF904FC);
	r3 = D(r3, s[1][0][0], 0x04F2F906, 0x230BFAFE, 0xF9FA0101, 0x02FCF7F9);
	r0 = D(r0, s[1][0][1], 0x2DFBEBFA, 0xE1F9FA07, 0x0AFE02FE, 0xDDF6FBF7);
	r1 = D(r1, s[1][0][1], 0xF50D0D00, 0x0CFEE9FF, 0x05F3FF02, 0xFBFA041D);
	r2 = D(r2, s[1][0][1], 0xCC1AFAEE, 0xF4F9010E, 0xF204FBF2, 0xD9090703);
	r3 = D(r3, s[1][0][1], 0xEE0DFF16, 0xDAFE02F0, 0xE703F503, 0xCAE41915);
	r0 = D(r0, s[1][0][2], 0x2311F7FD, 0xDD00FF00, 0xFE0905FB, 0xDCD908FD);
	r1 = D(r1, s[1][0][2], 0x0D110213, 0xF5F5FBF3, 0xE7090405, 0xFA0B0601);
	r2 = D(r2, s[1][0][2], 0x0405FCFC, 0xEEF60401, 0x0A0C19FC, 0xE80CECF6);
	r3 = D(r3, s[1][0][2], 0xE9F509FF, 0x1AFFF912, 0xFDF60303, 0x01F9180B);
	r0 = D(r0, s[1][1][0], 0x1901FC00, 0x07061400, 0x030BEEFA, 0xDD0DFAF4);
	r1 = D(r1, s[1][1][0], 0xFEF10806, 0xFFF5FE07, 0x09FC0BF9, 0xF7F3FCF3);
	r2 = D(r2, s[1][1][0], 0x48FCFF07, 0x2807FC04, 0xEFFAFA09, 0x14FE0307);
	r3 = D(r3, s[1][1][0], 0x2DE90307, 0xE6FD00FF, 0xD9FF09FA, 0xF603F404);
	r0 = D(r0, s[1][1][1], 0x15F80100, 0xD61DF701, 0x0817E8F3, 0xE701FD05);
	r1 = D(r1, s[1][1][1], 0x1E1F0D05, 0x03ECEE05, 0xF61AF90A, 0x010506F4);
	r2 = D(r2, s[1][1][1], 0xFD080000, 0xCBFBF909, 0xFA1BDDFF, 0x26FA09F7);
	r3 = D(r3, s[1][1][1], 0xEC09FB17, 0xF00BF801, 0xD00FFA01, 0xFF111AEC);
	r0 = D(r0, s[1][1][2], 0x140B0400, 0x1101FBF5, 0x0F00FBF8, 0xEFFCF4FA);
	r1 = D(r1, s[1][1][2], 0xF3FF06F1, 0x1A060304, 0x0BF5FCF3, 0xEC040102);
	r2 = D(r2, s[1][1][2], 0x15F8EF07, 0xDA00F8FC, 0x1C050808, 0x1C19F7F2);
	r3 = D(r3, s[1][1][2], 0x0A0306FE, 0xF9FAE704, 0xCBFA0D02, 0x090901F0);
	r0 = D(r0, s[1][2][0], 0xFB050002, 0xE1F6FD01, 0x1303F0FE, 0xEFEAF8F9);
	r1 = D(r1, s[1][2][0], 0xFC1108F7, 0xFEF1020E, 0xFCF2FBF6, 0xF4EEF808);
	r2 = D(r2, s[1][2][0], 0x00FD020F, 0x01FB040B, 0xF8FE0000, 0xF5FA0C06);
	r3 = D(r3, s[1][2][0], 0x06F30803, 0xEDEAFFF6, 0xF3020506, 0x0006FBFE);
	r0 = D(r0, s[1][2][1], 0x160009F7, 0x12F70811, 0x06FC0308, 0xD4E5FFE9);
	r1 = D(r1, s[1][2][1], 0xEDFDFCF2, 0x02F4FFF2, 0x0706F4EB, 0xF4EAF6FD);
	r2 = D(r2, s[1][2][1], 0xF2FD06FE, 0xF2F5F507, 0x06F4F803, 0x19F601FD);
	r3 = D(r3, s[1][2][1], 0xD80603FE, 0x0CFD05EC, 0x0C0E0007, 0x0011FF08);
	r0 = D(r0, s[1][2][2], 0x07EBFFF1, 0x0F0D04F9, 0xFA050DF8, 0xEAFF00FD);
	r1 = D(r1, s[1][2][2], 0x07FA0208, 0x05040600, 0xFA00EEF5, 0xFCF201FD);
	r2 = D(r2, s[1][2][2], 0x11070904, 0xFCF1FAFD, 0xF3150103, 0xFD010101);
	r3 = D(r3, s[1][2][2], 0xEEF509F9, 0xF9FD03FC, 0x000DF509, 0xF60C03FD);
	s[0][0][0] = G[6][xy.y+0][xy.x+0]; s[0][0][1] = G[6][xy.y+0][xy.x+1];
	s[0][0][2] = G[6][xy.y+0][xy.x+2]; s[0][1][0] = G[6][xy.y+1][xy.x+0];
	s[0][1][1] = G[6][xy.y+1][xy.x+1]; s[0][1][2] = G[6][xy.y+1][xy.x+2];
	s[0][2][0] = G[6][xy.y+2][xy.x+0]; s[0][2][1] = G[6][xy.y+2][xy.x+1];
	s[0][2][2] = G[6][xy.y+2][xy.x+2]; s[1][0][0] = G[7][xy.y+0][xy.x+0];
	s[1][0][1] = G[7][xy.y+0][xy.x+1]; s[1][0][2] = G[7][xy.y+0][xy.x+2];
	s[1][1][0] = G[7][xy.y+1][xy.x+0]; s[1][1][1] = G[7][xy.y+1][xy.x+1];
	s[1][1][2] = G[7][xy.y+1][xy.x+2]; s[1][2][0] = G[7][xy.y+2][xy.x+0];
	s[1][2][1] = G[7][xy.y+2][xy.x+1]; s[1][2][2] = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0xF70908FB, 0xF8010600, 0x0D0207FD, 0x02FC03F3);
	r1 = D(r1, s[0][0][0], 0x02F002FB, 0x01FB0006, 0xFD0204EF, 0xFEF5F411);
	r2 = D(r2, s[0][0][0], 0x0801FE09, 0xFBFB0009, 0xFF020FF8, 0x0CFC0407);
	r3 = D(r3, s[0][0][0], 0xFBFAFB00, 0xFDF802E7, 0x03040F07, 0xFD06FAFA);
	r0 = D(r0, s[0][0][1], 0xFCF707FF, 0x0A030806, 0xFF00F4FC, 0x01080206);
	r1 = D(r1, s[0][0][1], 0x03FFFC00, 0x06090E02, 0x000DF7F9, 0xF904FB0D);
	r2 = D(r2, s[0][0][1], 0xFAFD08EC, 0x050007FD, 0x030908F5, 0x00FAF002);
	r3 = D(r3, s[0][0][1], 0x04F801F7, 0x0412FAFF, 0xFA0F0AF6, 0x05FDFD00);
	r0 = D(r0, s[0][0][2], 0x0B091B08, 0x020902FD, 0xFD030603, 0x03F30A0A);
	r1 = D(r1, s[0][0][2], 0xFEFFF608, 0xFC0A00F6, 0xFE160D08, 0xFA03F804);
	r2 = D(r2, s[0][0][2], 0x050401FF, 0xFEF3FF03, 0xFDFD010F, 0x03F9F703);
	r3 = D(r3, s[0][0][2], 0x01FE010A, 0x02060A0A, 0xFF1B0EFA, 0x0307F8FC);
	r0 = D(r0, s[0][1][0], 0x0E1200FC, 0x0AF4EDFF, 0xF9FD02FC, 0x07060407);
	r1 = D(r1, s[0][1][0], 0xF310EC00, 0x010601FF, 0x0FF90900, 0xFC04F602);
	r2 = D(r2, s[0][1][0], 0xFE01FEEE, 0x04F0F6F8, 0xF10A0307, 0x0AFC0000);
	r3 = D(r3, s[0][1][0], 0x0003F6FC, 0xF8021211, 0x0E0201FD, 0x07FF08FF);
	r0 = D(r0, s[0][1][1], 0x01E904F2, 0x1910FF0B, 0x01050FE7, 0x0A1A0008);
	r1 = D(r1, s[0][1][1], 0xF60402D8, 0xF6040316, 0x06090DF3, 0x081EDE16);
	r2 = D(r2, s[0][1][1], 0xF2EB0BED, 0x03F60002, 0x04EA0CF5, 0x05FBF4FD);
	r3 = D(r3, s[0][1][1], 0x1FFDFA01, 0x000DF6FE, 0x0CFEFB08, 0x12F8FAEA);
	r0 = D(r0, s[0][1][2], 0x06EFFEFC, 0xFD0B0003, 0x00E500FF, 0x0D06FFFD);
	r1 = D(r1, s[0][1][2], 0x040FFAFE, 0x0600F40B, 0x080E0615, 0x0406F902);
	r2 = D(r2, s[0][1][2], 0xEFF1FBEB, 0x06E50905, 0x01E2FC0C, 0x0201E203);
	r3 = D(r3, s[0][1][2], 0x0500F405, 0x0011FA04, 0xFD110400, 0x09050BF7);
	r0 = D(r0, s[0][2][0], 0xF8020802, 0x08F9FA0C, 0x0D01FBF6, 0xFEF70009);
	r1 = D(r1, s[0][2][0], 0xF5F303F3, 0x12F8FE03, 0xFA07FB09, 0xFEFB1002);
	r2 = D(r2, s[0][2][0], 0x000D0801, 0x07FD0408, 0x0CF60FFB, 0x14000705);
	r3 = D(r3, s[0][2][0], 0x070302F9, 0x02FEFF06, 0x0BF70DFC, 0xFEF903FF);
	r0 = D(r0, s[0][2][1], 0xFB01F5FB, 0x0EF3FB08, 0x060BFA02, 0x15FA02F6);
	r1 = D(r1, s[0][2][1], 0x06FD0801, 0x020E06FF, 0xFF00FA0E, 0x03F80310);
	r2 = D(r2, s[0][2][1], 0x0D0005F2, 0xEFFE0902, 0xFAFB02FA, 0xF8FFF505);
	r3 = D(r3, s[0][2][1], 0xFA0AFCF8, 0x0AFDF9F7, 0x1101FF11, 0x1600F7FD);
	r0 = D(r0, s[0][2][2], 0xF60D0A02, 0x0BF9F8FA, 0xF7F0FDF4, 0x02FAFB05);
	r1 = D(r1, s[0][2][2], 0x0010FB0F, 0x00FE00E7, 0xF505FC0C, 0x06F9FD01);
	r2 = D(r2, s[0][2][2], 0x12FB00F0, 0x04FF0703, 0x07FA0AFA, 0xFC20FFF5);
	r3 = D(r3, s[0][2][2], 0xFB0500F6, 0xFF07FAFA, 0x0EFA0811, 0x0C0B04FC);
	r0 = D(r0, s[1][0][0], 0x07F80706, 0x0201F9FB, 0x07F308F9, 0x0304F50C);
	r1 = D(r1, s[1][0][0], 0xF40F0405, 0x00FD0206, 0x060200FB, 0xED0710F4);
	r2 = D(r2, s[1][0][0], 0x00F5F3F3, 0xFB02FAFF, 0x01FF0B07, 0xEE001800);
	r3 = D(r3, s[1][0][0], 0x09FC1000, 0x0503E205, 0xFE04FCF2, 0x14FBFE00);
	r0 = D(r0, s[1][0][1], 0xF30CFB06, 0x0000F814, 0xFF0005FA, 0x05FEEEF0);
	r1 = D(r1, s[1][0][1], 0xEA0C0FF0, 0x09E2F9F8, 0x01F805FC, 0xFE06FC0C);
	r2 = D(r2, s[1][0][1], 0x0CFAFFFF, 0x0200FB00, 0xEAF6E520, 0xFA080103);
	r3 = D(r3, s[1][0][1], 0x0F000000, 0x00F61611, 0x0712FFFB, 0x050001F6);
	r0 = D(r0, s[1][0][2], 0xFB0FE3E7, 0x0405F506, 0x0AF3F5FF, 0xF8080CF6);
	r1 = D(r1, s[1][0][2], 0xF310F913, 0x0DFBDE12, 0xF9FF010E, 0xFE0D0E0E);
	r2 = D(r2, s[1][0][2], 0xF6F5F305, 0x000F00FA, 0xFB00100F, 0xFEFFEA07);
	r3 = D(r3, s[1][0][2], 0x07F5F9ED, 0x07ECEE15, 0xF4F502FF, 0x08041205);
	r0 = D(r0, s[1][1][0], 0xFFF3FAFF, 0xECFD06FF, 0x28F8E7F8, 0xF6FADAF8);
	r1 = D(r1, s[1][1][0], 0x0C00FDF2, 0x0FF8FF12, 0xF9061A07, 0x1BFC0910);
	r2 = D(r2, s[1][1][0], 0xFA08FD03, 0x06F20104, 0x1AFDF1F1, 0x00FDFF04);
	r3 = D(r3, s[1][1][0], 0x110802F0, 0x0A0A0303, 0xFEFC0AFF, 0x15080517);
	r0 = D(r0, s[1][1][1], 0x0C0EEE03, 0x00F9FDF8, 0xF206FFFB, 0x17FB07F2);
	r1 = D(r1, s[1][1][1], 0x120AF50C, 0x03FA06FD, 0xF40CF202, 0xF50621F1);
	r2 = D(r2, s[1][1][1], 0xF3FCFE0D, 0x0F0CE3FC, 0xEF11F0F4, 0xF5F7F91C);
	r3 = D(r3, s[1][1][1], 0xF50B0AFE, 0x0811F809, 0xFF08FAFE, 0xE9000A15);
	r0 = D(r0, s[1][1][2], 0xF911F6EE, 0x0607F7FD, 0x0CFCEEF3, 0x000608F1);
	r1 = D(r1, s[1][1][2], 0xE7F60207, 0x00F816F2, 0xFA04ED0B, 0x00F3F809);
	r2 = D(r2, s[1][1][2], 0xFBF5F5FD, 0xFC00030C, 0x0C0D0306, 0xFFF901F9);
	r3 = D(r3, s[1][1][2], 0xFC10FCFF, 0x0DFF1207, 0x03FCFB12, 0x0101FEF8);
	r0 = D(r0, s[1][2][0], 0x0204FFEF, 0xF7030DFE, 0x0602FCFC, 0x0A04FD12);
	r1 = D(r1, s[1][2][0], 0xF1FCF8FC, 0xF40501FB, 0x06FC180C, 0x060F25FB);
	r2 = D(r2, s[1][2][0], 0x17F8FF03, 0xF006F605, 0x0906FDFE, 0xFD15F5F8);
	r3 = D(r3, s[1][2][0], 0x1801F3F2, 0x10FD0908, 0xFD010001, 0xF40BFA10);
	r0 = D(r0, s[1][2][1], 0xEE0A1B0A, 0x04FCF10D, 0x0905EED9, 0x02FEF018);
	r1 = D(r1, s[1][2][1], 0xDF0D09F9, 0x2107DDFB, 0xF6ED120B, 0xFAFEFEFA);
	r2 = D(r2, s[1][2][1], 0x1303FA07, 0x0404F3F5, 0x06F8FA08, 0x1404F7FA);
	r3 = D(r3, s[1][2][1], 0x080014FC, 0xFDF6FBF0, 0x06F00A1C, 0xEAFF0011);
	r0 = D(r0, s[1][2][2], 0x0B15EFE2, 0xF500F108, 0xFCE405FF, 0xFCFC01FA);
	r1 = D(r1, s[1][2][2], 0xF20804FE, 0xFBF3000A, 0xFE010316, 0x0604F400);
	r2 = D(r2, s[1][2][2], 0x040901FF, 0xFF100604, 0x040FFBF6, 0xFE04F402);
	r3 = D(r3, s[1][2][2], 0x0303F4F0, 0x130C03F3, 0x09FEE319, 0x04F7E301);
	vec4 f0 = vec4(r0) * 6.20001240e-05;
	f0 += vec4(1.666e-02, -9.039e-03, -5.915e-03, 3.314e-02);
	imageStore(out_image, opos + ivec2(0, 0), vec4(f0));
	vec4 f1 = vec4(r1) * 6.20001240e-05;
	f1 += vec4(2.717e-02, -1.471e-02, 5.398e-02, -9.215e-03);
	imageStore(out_image, opos + ivec2(1, 0), vec4(f1));
	vec4 f2 = vec4(r2) * 6.20001240e-05;
	f2 += vec4(2.707e-02, 1.718e-02, -2.303e-02, -2.275e-02);
	imageStore(out_image, opos + ivec2(0, 1), vec4(f2));
	vec4 f3 = vec4(r3) * 6.20001240e-05;
	f3 += vec4(3.411e-02, 1.122e-02, 2.240e-02, 2.845e-03);
	imageStore(out_image, opos + ivec2(1, 1), vec4(f3));
}

//!DESC CuNNy-16x16C-TEST-conv10
//!HOOK LUMA
//!COMPUTE 16 16 8 8
//!BIND conv9
//!BIND LUMA
//!SAVE conv10
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_spirv_intrinsics : require
#extension GL_EXT_control_flow_attributes : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) ivec4(r.x + dp4(s, a, 0), r.y + dp4(s, b, 0), r.z + dp4(s, c, 0), r.w + dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	[[unroll]] for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		[[unroll]] for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(2, 2) + ivec2(1, 1)) * conv9_pt;
			r = conv9_gather(p, 0);
			g = conv9_gather(p, 1);
			b = conv9_gather(p, 2);
			a = conv9_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.00000000e+00;
			vec4 v2 = vec4(r.z, g.z, b.z, a.z) * 1.00000000e+00;
			vec4 v4 = vec4(r.x, g.x, b.x, a.x) * 1.00000000e+00;
			vec4 v6 = vec4(r.y, g.y, b.y, a.y) * 1.00000000e+00;
			vec4 v1 = max(-v0, vec4(0));
			v0 = max(v0, vec4(0));
			vec4 v3 = max(-v2, vec4(0));
			v2 = max(v2, vec4(0));
			vec4 v5 = max(-v4, vec4(0));
			v4 = max(v4, vec4(0));
			vec4 v7 = max(-v6, vec4(0));
			v6 = max(v6, vec4(0));
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s[2][3][3];
	ivec4 r0 = ivec4(0);
	ivec4 r1 = ivec4(0);
	ivec4 r2 = ivec4(0);
	ivec4 r3 = ivec4(0);
	s[0][0][0] = G[0][xy.y+0][xy.x+0]; s[0][0][1] = G[0][xy.y+0][xy.x+1];
	s[0][0][2] = G[0][xy.y+0][xy.x+2]; s[0][1][0] = G[0][xy.y+1][xy.x+0];
	s[0][1][1] = G[0][xy.y+1][xy.x+1]; s[0][1][2] = G[0][xy.y+1][xy.x+2];
	s[0][2][0] = G[0][xy.y+2][xy.x+0]; s[0][2][1] = G[0][xy.y+2][xy.x+1];
	s[0][2][2] = G[0][xy.y+2][xy.x+2]; s[1][0][0] = G[1][xy.y+0][xy.x+0];
	s[1][0][1] = G[1][xy.y+0][xy.x+1]; s[1][0][2] = G[1][xy.y+0][xy.x+2];
	s[1][1][0] = G[1][xy.y+1][xy.x+0]; s[1][1][1] = G[1][xy.y+1][xy.x+1];
	s[1][1][2] = G[1][xy.y+1][xy.x+2]; s[1][2][0] = G[1][xy.y+2][xy.x+0];
	s[1][2][1] = G[1][xy.y+2][xy.x+1]; s[1][2][2] = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0x06F90309, 0x0103FB08, 0x0BF5E713, 0xFFFAF9FD);
	r1 = D(r1, s[0][0][0], 0x09F3FDF8, 0xF509F10A, 0xF800190A, 0x06FF0708);
	r2 = D(r2, s[0][0][0], 0x0FFF0102, 0x060213FC, 0x02FA040E, 0xFEFF1301);
	r3 = D(r3, s[0][0][0], 0x040A0FFC, 0x10F9F1FC, 0x05F1FEF7, 0x1EF8F505);
	r0 = D(r0, s[0][0][1], 0x00FD00FF, 0x12FC00ED, 0x00F50501, 0x02F9E4F2);
	r1 = D(r1, s[0][0][1], 0xFFFBF10B, 0x0804D6F3, 0x11000501, 0x0605F10F);
	r2 = D(r2, s[0][0][1], 0xF9F00FED, 0x050309EF, 0xF402FC02, 0xE6FFF2FA);
	r3 = D(r3, s[0][0][1], 0x14EBEDF2, 0xF3060602, 0x06E902ED, 0x01FCF80B);
	r0 = D(r0, s[0][0][2], 0xF0FB0A09, 0x00F702FC, 0x040AF508, 0x03FC140A);
	r1 = D(r1, s[0][0][2], 0x04F909FA, 0x01F402F3, 0xFC13F703, 0x0CF6FF00);
	r2 = D(r2, s[0][0][2], 0xFA040DFD, 0xFEFEF2FD, 0xFC0E0308, 0xFCF8FC0D);
	r3 = D(r3, s[0][0][2], 0x09FFFBF0, 0x0EFCFCFC, 0xFEFCE400, 0x08FB2102);
	r0 = D(r0, s[0][1][0], 0xF5041702, 0x0206FA0D, 0xF6F70409, 0xFBF7EEFD);
	r1 = D(r1, s[0][1][0], 0xFF06F7FE, 0x0FEFF705, 0xF3F515F3, 0xFFFF06F7);
	r2 = D(r2, s[0][1][0], 0x08FC040A, 0xF80BF2ED, 0xFD0B1100, 0xFC1711EF);
	r3 = D(r3, s[0][1][0], 0x02FC0902, 0x1C0200FC, 0xF8EDF8FC, 0x00F51702);
	r0 = D(r0, s[0][1][1], 0x01F1FB00, 0x11070001, 0x0701FC0B, 0xF7FC1B01);
	r1 = D(r1, s[0][1][1], 0x00FEFCED, 0x0C08DBF2, 0xFAF1F1EC, 0xFA02FCF3);
	r2 = D(r2, s[0][1][1], 0x0DFAEB01, 0xFF0708F3, 0xFDEB07FA, 0xF0E00FFE);
	r3 = D(r3, s[0][1][1], 0x041203FF, 0x06D7F90D, 0x0FFC0AF6, 0x0BF1F702);
	r0 = D(r0, s[0][1][2], 0x0CFC0DF7, 0xFF12FDF9, 0xFAFD02F8, 0xFE05000A);
	r1 = D(r1, s[0][1][2], 0xFAF802F8, 0x0107F8F7, 0xFD02FE01, 0x090200FE);
	r2 = D(r2, s[0][1][2], 0xFE110303, 0xFF0B13FD, 0xFDEA00F6, 0xF7F2070A);
	r3 = D(r3, s[0][1][2], 0xF30DFDFA, 0xFCF60E06, 0x05F6F913, 0x09F50BFA);
	r0 = D(r0, s[0][2][0], 0x02F3080E, 0xF7F8F5F4, 0xF402F4F3, 0x0304EFFD);
	r1 = D(r1, s[0][2][0], 0x06FFF6F7, 0xF6FE080F, 0xFE0D0BFB, 0xFF030B17);
	r2 = D(r2, s[0][2][0], 0x060BFDF2, 0xFC02F90B, 0xFDFD0301, 0xF2F1FC04);
	r3 = D(r3, s[0][2][0], 0x08031100, 0xF8FBFAEB, 0x06FA0A00, 0x050DFA06);
	r0 = D(r0, s[0][2][1], 0x0AFEE3F7, 0x08FF0204, 0xFD01FC03, 0x08EDFB0B);
	r1 = D(r1, s[0][2][1], 0x02F704FF, 0x08FAEBF7, 0xFB00F6F1, 0x021009F9);
	r2 = D(r2, s[0][2][1], 0xFA06E104, 0x06030404, 0xF3F1F9F5, 0x02F004FF);
	r3 = D(r3, s[0][2][1], 0x020901ED, 0xFBEEFAF5, 0xF413F5F6, 0xFAF8F309);
	r0 = D(r0, s[0][2][2], 0xFE0EFCFE, 0x07FA01FB, 0x060B02FF, 0xFA0EF8FF);
	r1 = D(r1, s[0][2][2], 0xF51100FC, 0x00EBFEFE, 0xF504FEFC, 0x02F5FDFD);
	r2 = D(r2, s[0][2][2], 0xFE060006, 0xFC0B09FE, 0x04020209, 0xF8F4E902);
	r3 = D(r3, s[0][2][2], 0x0400FAF7, 0xF6F40CFB, 0x03F4FA07, 0x17ECF9F9);
	r0 = D(r0, s[1][0][0], 0x0C0B07FF, 0x040305FE, 0x07050F01, 0xF2090B02);
	r1 = D(r1, s[1][0][0], 0xFB0505FF, 0x09FA06F5, 0xF6FFFFFD, 0x020101F1);
	r2 = D(r2, s[1][0][0], 0xFFFDFA04, 0xF2F7FCED, 0xFA01F605, 0x15FAF5FF);
	r3 = D(r3, s[1][0][0], 0x0408FE03, 0xF3FF0201, 0xFD11F7FC, 0x0E041010);
	r0 = D(r0, s[1][0][1], 0xEEF60BED, 0xE3FEF90B, 0xF3051F02, 0x00F70815);
	r1 = D(r1, s[1][0][1], 0x1209090B, 0xF10B0906, 0x16FD02F7, 0x0BFCFBEC);
	r2 = D(r2, s[1][0][1], 0xFDFAF909, 0x02EE0303, 0x0BFE0E0A, 0x0904010C);
	r3 = D(r3, s[1][0][1], 0xFFFB0B0B, 0x0C04F1FE, 0xFAFFFA04, 0xF9FDFF04);
	r0 = D(r0, s[1][0][2], 0x0FF9FB0A, 0xFE0D0200, 0x0CF5FCFE, 0xFEFF08F8);
	r1 = D(r1, s[1][0][2], 0x0D020812, 0xFCFC08FA, 0x040006FC, 0x08FF03FC);
	r2 = D(r2, s[1][0][2], 0x000BF500, 0x030A0604, 0x070D01F8, 0xF00F0901);
	r3 = D(r3, s[1][0][2], 0xFFFDFA0B, 0x07FB0805, 0x0AFB15FF, 0xFF06060D);
	r0 = D(r0, s[1][1][0], 0xF902F1F8, 0xFC0704FC, 0xFE0CF706, 0xFFF90502);
	r1 = D(r1, s[1][1][0], 0x0BFEF6FB, 0xF606FDFD, 0x0BFF040C, 0xF80D080C);
	r2 = D(r2, s[1][1][0], 0xEF01F804, 0x0600100C, 0xF1F9FF06, 0x02F0FF0F);
	r3 = D(r3, s[1][1][0], 0xF404FF0D, 0xEFFFFB02, 0xE706F5F8, 0xFA02F206);
	r0 = D(r0, s[1][1][1], 0xFCF70CF9, 0xE3FA05FD, 0xEFFFF4FE, 0x11E8ED0A);
	r1 = D(r1, s[1][1][1], 0x0309FC05, 0xF8FE1005, 0x0B180609, 0x0700FCE7);
	r2 = D(r2, s[1][1][1], 0xF4FC0F00, 0x10ECF304, 0x0616FC17, 0x0DE0FCFB);
	r3 = D(r3, s[1][1][1], 0x00ED09F9, 0xFD08F600, 0xEA110503, 0xFA0FF7EE);
	r0 = D(r0, s[1][1][2], 0xFA060405, 0xDBFCFE0A, 0x00030A04, 0xF8FEF5FE);
	r1 = D(r1, s[1][1][2], 0x2108F5F8, 0x0F03FE06, 0x13080607, 0x050B0200);
	r2 = D(r2, s[1][1][2], 0xFA0001F8, 0x0D02E8F3, 0x0FF7030B, 0xFF15130B);
	r3 = D(r3, s[1][1][2], 0x18F40BF7, 0x1C07EF08, 0x000509F1, 0xF8F8EA18);
	r0 = D(r0, s[1][2][0], 0x00030706, 0x02FE0408, 0x1106060A, 0x0702FE05);
	r1 = D(r1, s[1][2][0], 0xEEFE04FB, 0x0BFCEAF8, 0x0004FEF7, 0xFFF5F6FD);
	r2 = D(r2, s[1][2][0], 0x030409F9, 0xF50708EE, 0x020900FC, 0xF7FF00FD);
	r3 = D(r3, s[1][2][0], 0x09F8FC00, 0x0CFBFB0B, 0x0BFEEF04, 0x04001503);
	r0 = D(r0, s[1][2][1], 0xF5060508, 0xF70514F8, 0xED07FC01, 0xF817F901);
	r1 = D(r1, s[1][2][1], 0x0EF1F5FC, 0x000100F7, 0x07FA0010, 0x0CFCF1FE);
	r2 = D(r2, s[1][2][1], 0x140800FF, 0xF807060F, 0x0302090A, 0x04FE0809);
	r3 = D(r3, s[1][2][1], 0x00F7FC07, 0x0EEFFCEF, 0x04FC0108, 0xF90A0102);
	r0 = D(r0, s[1][2][2], 0x0205F5F8, 0x0EF0FFEF, 0x0602FF00, 0x040303FA);
	r1 = D(r1, s[1][2][2], 0x0209FCF8, 0x090DF3FA, 0x00050501, 0x03FA01F8);
	r2 = D(r2, s[1][2][2], 0x0606F806, 0xFE0B05F8, 0x000E060E, 0x06FD0B12);
	r3 = D(r3, s[1][2][2], 0xFBED0DF9, 0x0DF1F7FD, 0x08FD05FF, 0x06F3F301);
	s[0][0][0] = G[2][xy.y+0][xy.x+0]; s[0][0][1] = G[2][xy.y+0][xy.x+1];
	s[0][0][2] = G[2][xy.y+0][xy.x+2]; s[0][1][0] = G[2][xy.y+1][xy.x+0];
	s[0][1][1] = G[2][xy.y+1][xy.x+1]; s[0][1][2] = G[2][xy.y+1][xy.x+2];
	s[0][2][0] = G[2][xy.y+2][xy.x+0]; s[0][2][1] = G[2][xy.y+2][xy.x+1];
	s[0][2][2] = G[2][xy.y+2][xy.x+2]; s[1][0][0] = G[3][xy.y+0][xy.x+0];
	s[1][0][1] = G[3][xy.y+0][xy.x+1]; s[1][0][2] = G[3][xy.y+0][xy.x+2];
	s[1][1][0] = G[3][xy.y+1][xy.x+0]; s[1][1][1] = G[3][xy.y+1][xy.x+1];
	s[1][1][2] = G[3][xy.y+1][xy.x+2]; s[1][2][0] = G[3][xy.y+2][xy.x+0];
	s[1][2][1] = G[3][xy.y+2][xy.x+1]; s[1][2][2] = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0xFFF9F4F1, 0x0EFA08F9, 0xF9F8F502, 0x010B0601);
	r1 = D(r1, s[0][0][0], 0xED09F5ED, 0x070400F8, 0xF3000508, 0xFF00FDF8);
	r2 = D(r2, s[0][0][0], 0xFAFBFCFB, 0xF101FF04, 0x02060100, 0x03F7F7ED);
	r3 = D(r3, s[0][0][0], 0xFCF2090A, 0x13FCFEF1, 0xD5FAF7EC, 0x060F0C08);
	r0 = D(r0, s[0][0][1], 0xE60F0406, 0x07F90400, 0xFE050906, 0x0003F513);
	r1 = D(r1, s[0][0][1], 0xF30706FC, 0x0408090F, 0x0C08E9F7, 0x02FEFCFC);
	r2 = D(r2, s[0][0][1], 0x0BF70802, 0xEF080502, 0x0D05F60E, 0xFA050004);
	r3 = D(r3, s[0][0][1], 0x02F30907, 0x040906FF, 0xE9F4FB08, 0xF4F80213);
	r0 = D(r0, s[0][0][2], 0x0D05F805, 0xF70901FA, 0x02F41006, 0x080BFEFF);
	r1 = D(r1, s[0][0][2], 0xF604F5FC, 0xF5F80803, 0xE5130106, 0x170400F8);
	r2 = D(r2, s[0][0][2], 0x08F4FEFA, 0x0D060FF7, 0xFAF9060A, 0x04EDF104);
	r3 = D(r3, s[0][0][2], 0xFDFFF508, 0x150606F9, 0x0004F800, 0x08040102);
	r0 = D(r0, s[0][1][0], 0x08FAE8E0, 0x0613FC04, 0x04FFF8FA, 0xFCFEE902);
	r1 = D(r1, s[0][1][0], 0xFFFC02FA, 0x060CF505, 0x08010000, 0x1EF308FF);
	r2 = D(r2, s[0][1][0], 0x050C130A, 0xF3FB15FB, 0xF701F3FC, 0x13FA03FC);
	r3 = D(r3, s[0][1][0], 0x02FB0204, 0x0E0BFA04, 0xEAF8FCF0, 0xFFEFE7FD);
	r0 = D(r0, s[0][1][1], 0x00EF1A11, 0x08000BFE, 0xEFFD0F07, 0xFB1C0B00);
	r1 = D(r1, s[0][1][1], 0xED0700FE, 0x01040608, 0x1AF70AF4, 0x08ED0408);
	r2 = D(r2, s[0][1][1], 0xF8041A21, 0xF1F512F4, 0xFB09E7FE, 0xE201F412);
	r3 = D(r3, s[0][1][1], 0x1B08F316, 0x1CFEF8F5, 0x02F0F804, 0xEBF8FF09);
	r0 = D(r0, s[0][1][2], 0x150801ED, 0x180402F8, 0x10FC150B, 0x0E0B00FC);
	r1 = D(r1, s[0][1][2], 0xF8FA0604, 0x000EFE04, 0xFAF9070A, 0xE2F9030A);
	r2 = D(r2, s[0][1][2], 0x03000A02, 0xF4FE00ED, 0x02FBF2FA, 0xF70CECF9);
	r3 = D(r3, s[0][1][2], 0x090209FA, 0x150A0008, 0xF803FBFC, 0x0DF7000B);
	r0 = D(r0, s[0][2][0], 0xEFF9FE09, 0x000B0613, 0xF30000F4, 0xFEFEF607);
	r1 = D(r1, s[0][2][0], 0xFEFDFCF8, 0x160206F9, 0xFCFAFAFF, 0xFCFC01FE);
	r2 = D(r2, s[0][2][0], 0x0B02F7FD, 0xF4EF0EFD, 0xF5030405, 0xFA16FE0B);
	r3 = D(r3, s[0][2][0], 0xF9F50601, 0x18FF05F0, 0x050518F9, 0x0AFAFD04);
	r0 = D(r0, s[0][2][1], 0x0B280701, 0xF7FBFAFA, 0xF406FBF3, 0xECFA02EF);
	r1 = D(r1, s[0][2][1], 0xF90D0BFD, 0x06FD14F2, 0xF30B0909, 0x10FE0003);
	r2 = D(r2, s[0][2][1], 0xFAEDF208, 0xF0F20806, 0xFCF506F4, 0x0303F6FE);
	r3 = D(r3, s[0][2][1], 0x02F9FE06, 0x050708F4, 0x1001FCF8, 0xF7FBFDF3);
	r0 = D(r0, s[0][2][2], 0x09F40605, 0x02FBFC00, 0xFFEFFFF5, 0x20F30301);
	r1 = D(r1, s[0][2][2], 0x000413FD, 0x0BF9FE08, 0xF3060AF3, 0x02F800FD);
	r2 = D(r2, s[0][2][2], 0x0A02F508, 0xF9FE10FF, 0xF3E8040C, 0xF30B06FD);
	r3 = D(r3, s[0][2][2], 0x03FD0103, 0x070400F7, 0xEFFE0B08, 0x0E07020A);
	r0 = D(r0, s[1][0][0], 0xF0FC12F6, 0x04F8FC0B, 0xF5F50101, 0xF100FC08);
	r1 = D(r1, s[1][0][0], 0xFE0207FC, 0xFDF8FDF8, 0x0011020F, 0x0801F5FB);
	r2 = D(r2, s[1][0][0], 0x01FF0FFC, 0xFB040AEF, 0xFA000908, 0x0E08FC01);
	r3 = D(r3, s[1][0][0], 0x07FEFAF6, 0x07F9FCF3, 0xF2E9FEE8, 0x09FC0F17);
	r0 = D(r0, s[1][0][1], 0x02110509, 0xFEFCFB0F, 0x0903F70A, 0x05FD02F3);
	r1 = D(r1, s[1][0][1], 0x03FB0CFA, 0x001105E3, 0xFBF3F913, 0x0D090106);
	r2 = D(r2, s[1][0][1], 0xFC0C03F8, 0x010B16F8, 0x0BF70E09, 0x060AEBF4);
	r3 = D(r3, s[1][0][1], 0x04070517, 0x07F90804, 0xF208FE05, 0xEFF7F2F8);
	r0 = D(r0, s[1][0][2], 0xFC0AFCEF, 0xF9F4F306, 0x00080208, 0x02F8F5E6);
	r1 = D(r1, s[1][0][2], 0x07FC0FFA, 0xFCF312EB, 0x0209F5FD, 0xFA07F8FE);
	r2 = D(r2, s[1][0][2], 0x05F70C02, 0xF9F700FF, 0x0E0F0008, 0xF304F2FE);
	r3 = D(r3, s[1][0][2], 0xFCF804F0, 0xFAFB06EF, 0x08F3F309, 0x11F705E9);
	r0 = D(r0, s[1][1][0], 0x0FF20506, 0xEF04F906, 0xFA06FC06, 0x040C2300);
	r1 = D(r1, s[1][1][0], 0xFEFDF90B, 0x020502ED, 0xF4FEFA02, 0xF811FD02);
	r2 = D(r2, s[1][1][0], 0x08F9F50A, 0x0002FEFA, 0x02FFFA13, 0xEC030A0F);
	r3 = D(r3, s[1][1][0], 0xF408FD08, 0x0202F403, 0x04001BF4, 0x0308FFFA);
	r0 = D(r0, s[1][1][1], 0x0305EDE3, 0x150B04F2, 0x09001324, 0x15EF15D9);
	r1 = D(r1, s[1][1][1], 0x00F81603, 0x0608FAEB, 0xF108FF19, 0x1B17091F);
	r2 = D(r2, s[1][1][1], 0xF6FE030A, 0x000B091A, 0x05E00103, 0x10020606);
	r3 = D(r3, s[1][1][1], 0xFE090CEA, 0xF903E3FA, 0x090E170B, 0xFBF90FFA);
	r0 = D(r0, s[1][1][2], 0xFC0CFCFE, 0x09FEF902, 0x00F2FF01, 0x04F5F006);
	r1 = D(r1, s[1][1][2], 0xF1030C0D, 0xFBFA10F8, 0xF002FB18, 0x0F00F4EB);
	r2 = D(r2, s[1][1][2], 0x0904F0FD, 0xE3EF0305, 0xF1F40DF8, 0x06E50204);
	r3 = D(r3, s[1][1][2], 0xF6FC0820, 0x03FFEAF9, 0x0C030003, 0xF6F005EF);
	r0 = D(r0, s[1][2][0], 0xFF01FDFF, 0xFF01F4FE, 0xF1EDFA05, 0x020DF500);
	r1 = D(r1, s[1][2][0], 0x040D14ED, 0x02F902E8, 0x03FF0203, 0xF30CFCF2);
	r2 = D(r2, s[1][2][0], 0xFF020602, 0x00150200, 0x03EFF7F3, 0x06FBEFFD);
	r3 = D(r3, s[1][2][0], 0x060D060E, 0x03FE0C0D, 0x0000FCFA, 0xEDFBEFFE);
	r0 = D(r0, s[1][2][1], 0xFFF9F0FE, 0x0609F210, 0xF9FE00FA, 0xF304E1FC);
	r1 = D(r1, s[1][2][1], 0x060409FC, 0x02FBF3EE, 0x03F7EA00, 0xFD040A01);
	r2 = D(r2, s[1][2][1], 0xF6FFF1FC, 0xFA0906F6, 0xF70CED06, 0xFA0405F8);
	r3 = D(r3, s[1][2][1], 0x00FC1807, 0x01EC08FE, 0x02FB0208, 0x0703F200);
	r0 = D(r0, s[1][2][2], 0x09F6F709, 0x09FC030A, 0x050D010A, 0xFDEDFFE9);
	r1 = D(r1, s[1][2][2], 0xED05F8F8, 0x070F08F6, 0xF8FCF3FF, 0xFBF8FE0F);
	r2 = D(r2, s[1][2][2], 0xF1FB0307, 0xFD04F902, 0xFD15F1FA, 0x0105FA0E);
	r3 = D(r3, s[1][2][2], 0xFEFC09FE, 0xFFF0000B, 0x0500EBF1, 0xF709F802);
	s[0][0][0] = G[4][xy.y+0][xy.x+0]; s[0][0][1] = G[4][xy.y+0][xy.x+1];
	s[0][0][2] = G[4][xy.y+0][xy.x+2]; s[0][1][0] = G[4][xy.y+1][xy.x+0];
	s[0][1][1] = G[4][xy.y+1][xy.x+1]; s[0][1][2] = G[4][xy.y+1][xy.x+2];
	s[0][2][0] = G[4][xy.y+2][xy.x+0]; s[0][2][1] = G[4][xy.y+2][xy.x+1];
	s[0][2][2] = G[4][xy.y+2][xy.x+2]; s[1][0][0] = G[5][xy.y+0][xy.x+0];
	s[1][0][1] = G[5][xy.y+0][xy.x+1]; s[1][0][2] = G[5][xy.y+0][xy.x+2];
	s[1][1][0] = G[5][xy.y+1][xy.x+0]; s[1][1][1] = G[5][xy.y+1][xy.x+1];
	s[1][1][2] = G[5][xy.y+1][xy.x+2]; s[1][2][0] = G[5][xy.y+2][xy.x+0];
	s[1][2][1] = G[5][xy.y+2][xy.x+1]; s[1][2][2] = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0x0B0208F1, 0xFB090A0B, 0xF5020102, 0x160002F7);
	r1 = D(r1, s[0][0][0], 0xFFF60BFB, 0x09FAEF05, 0x0800FE10, 0xFE000B00);
	r2 = D(r2, s[0][0][0], 0xF40902F9, 0x00FFFDFC, 0x03FDFAFB, 0x100A060F);
	r3 = D(r3, s[0][0][0], 0xF906F5FE, 0xFAFC06F9, 0xFB03FAFE, 0x00080701);
	r0 = D(r0, s[0][0][1], 0xFBEF0CFD, 0xF904F5FA, 0x0AEF08FE, 0xF1F8FB05);
	r1 = D(r1, s[0][0][1], 0xEC01F0ED, 0x02F6F6FD, 0x000DF2F5, 0x04FE1CEB);
	r2 = D(r2, s[0][0][1], 0xEDF90109, 0xFAF10AF9, 0xFF04F7F3, 0xF3FDFB20);
	r3 = D(r3, s[0][0][1], 0x09FCFAFA, 0x08F518FC, 0x0805030B, 0x00FA000B);
	r0 = D(r0, s[0][0][2], 0x040FF804, 0x06F3F6FF, 0x090DFE01, 0x0D020902);
	r1 = D(r1, s[0][0][2], 0x01000A03, 0x040802FA, 0x02020208, 0x0E07EFF4);
	r2 = D(r2, s[0][0][2], 0xF3F7F903, 0x11090105, 0xF9FF0106, 0xF4050107);
	r3 = D(r3, s[0][0][2], 0x0604FE03, 0xFA01F3FA, 0x0C1201F8, 0xFF06F3FE);
	r0 = D(r0, s[0][1][0], 0xEFF70215, 0xEC050AF9, 0xF718EDED, 0x09EDFA07);
	r1 = D(r1, s[0][1][0], 0xF5060BFC, 0x07FCF200, 0x00F0F803, 0xF3FCFB0A);
	r2 = D(r2, s[0][1][0], 0xF60212F7, 0x110B0207, 0x0900FAFB, 0x0A03F5EB);
	r3 = D(r3, s[0][1][0], 0xFB0D06FE, 0x090608DF, 0xE7F5FF01, 0xFC0B06EB);
	r0 = D(r0, s[0][1][1], 0x03FD0702, 0xFAFDF5F5, 0xFC12F811, 0xFD081208);
	r1 = D(r1, s[0][1][1], 0x0BF807F2, 0x0DFA02ED, 0x03F6EEF1, 0xFF0911F3);
	r2 = D(r2, s[0][1][1], 0xF7EE0DF7, 0x000B0A04, 0x0EFBFFF3, 0xF30AF806);
	r3 = D(r3, s[0][1][1], 0x020713FE, 0x01FE0FE5, 0x1F13FF0F, 0xFD03FEF6);
	r0 = D(r0, s[0][1][2], 0x01FDF3FB, 0xF500FFFF, 0x0B0701E7, 0x06F70400);
	r1 = D(r1, s[0][1][2], 0xFC01FC0D, 0xF808F2F7, 0xFF0C0105, 0x010A0810);
	r2 = D(r2, s[0][1][2], 0xF7F8F7F8, 0x04FB0209, 0xF4FB0401, 0xFA050112);
	r3 = D(r3, s[0][1][2], 0x05FC15E8, 0xF2FF0AF3, 0x0E0CF607, 0xDFEA02FC);
	r0 = D(r0, s[0][2][0], 0xFFF1FE00, 0x00FFFDFD, 0xF7FFF5FB, 0xFA01000D);
	r1 = D(r1, s[0][2][0], 0xF6FEFB04, 0x02F5F90A, 0x08FFFB04, 0xFAF003FE);
	r2 = D(r2, s[0][2][0], 0xFB041004, 0xFD070605, 0xF6FE05FC, 0x0303090A);
	r3 = D(r3, s[0][2][0], 0x04070BF6, 0x01050BF8, 0x00FD0503, 0xF4FC11EB);
	r0 = D(r0, s[0][2][1], 0x060F01F1, 0xFD0AFA04, 0xF5F5F400, 0xFC0415E7);
	r1 = D(r1, s[0][2][1], 0x0204FB09, 0x04F50208, 0xFCFE05FF, 0xF9F3F7F9);
	r2 = D(r2, s[0][2][1], 0xEDEE0902, 0x1808F7E9, 0x0D0506F3, 0x04FBFA06);
	r3 = D(r3, s[0][2][1], 0x09F4F603, 0x0404FF0B, 0xFDFA02F6, 0x05EBF230);
	r0 = D(r0, s[0][2][2], 0xF702010D, 0x04F6FD04, 0xFCF500EB, 0xFA07FBF8);
	r1 = D(r1, s[0][2][2], 0x00F6FCF3, 0xF8FCFBF5, 0x08F30803, 0xF9F80804);
	r2 = D(r2, s[0][2][2], 0xE8FC04FF, 0x08F50BFA, 0x05FAFFEE, 0xF7000510);
	r3 = D(r3, s[0][2][2], 0x00FBFFF5, 0xEBFEFCFC, 0x0106040D, 0xF3F111FC);
	r0 = D(r0, s[1][0][0], 0x0108F904, 0xFEF1F4F7, 0x1CFAEF03, 0xE8FAF8F8);
	r1 = D(r1, s[1][0][0], 0xFEF408FD, 0xF2F500FC, 0x031503FD, 0x09FE0AFA);
	r2 = D(r2, s[1][0][0], 0xFCE8F9F8, 0x08030204, 0xF608FF00, 0xFB021709);
	r3 = D(r3, s[1][0][0], 0x07FD03FF, 0x03EBE901, 0x15F0E9F7, 0xFAF80402);
	r0 = D(r0, s[1][0][1], 0x02100FF5, 0x00F010FC, 0x0A160AFD, 0xFC1305F8);
	r1 = D(r1, s[1][0][1], 0xF8EDFCF5, 0x0014F90B, 0xFD043504, 0x0706EE0D);
	r2 = D(r2, s[1][0][1], 0x08F3FCF3, 0x070B0007, 0xF60D0CFC, 0xE908F40B);
	r3 = D(r3, s[1][0][1], 0x11FF17F5, 0xF9F3110D, 0x010CF008, 0xEFDEFBF0);
	r0 = D(r0, s[1][0][2], 0xFEF3FC06, 0x0708FCF8, 0x0000040E, 0xFE0104FB);
	r1 = D(r1, s[1][0][2], 0xFEFEF4FA, 0xFCFDFCFD, 0xFBEFFF02, 0xFC08FFF5);
	r2 = D(r2, s[1][0][2], 0xFFFE07F8, 0xF9F90202, 0x01FA02FF, 0xF800FF07);
	r3 = D(r3, s[1][0][2], 0x09FCFBFC, 0x0B040BF2, 0x02FF0005, 0xF6FD03FC);
	r0 = D(r0, s[1][1][0], 0x08FEF106, 0xF3FCFB00, 0x00E7F105, 0xF2FC050B);
	r1 = D(r1, s[1][1][0], 0x12F2FDFB, 0xFA130A06, 0x0600F8FC, 0xF40F04F4);
	r2 = D(r2, s[1][1][0], 0x050807EE, 0xFEE21602, 0x02FE10FF, 0x041C0008);
	r3 = D(r3, s[1][1][0], 0xF6FE10F3, 0xEF00F9FD, 0x04D80CF5, 0x06E2EEF8);
	r0 = D(r0, s[1][1][1], 0x07F7F115, 0xF7F51113, 0x10EDF4F6, 0xF8EDD6F1);
	r1 = D(r1, s[1][1][1], 0xFEE8F4F7, 0x051C2B05, 0x0E1E200F, 0x1AF8FB08);
	r2 = D(r2, s[1][1][1], 0x030303F8, 0x15DE0808, 0xF211FB11, 0xFF12E80B);
	r3 = D(r3, s[1][1][1], 0x0204FCE8, 0xF4F0DE19, 0x06FA21FF, 0xF7ED2400);
	r0 = D(r0, s[1][1][2], 0x02FF10F6, 0x0AF90E02, 0xFAFA1C0D, 0x0000FC0E);
	r1 = D(r1, s[1][1][2], 0x01ECFAF6, 0x06FF0106, 0x08F8F70B, 0x02EFFFE9);
	r2 = D(r2, s[1][1][2], 0x00F413F5, 0x08F0FA02, 0x0005FAF9, 0x021109F8);
	r3 = D(r3, s[1][1][2], 0x01F9E9F7, 0xF3EEF2F7, 0x0A0708FD, 0x0B0E07F0);
	r0 = D(r0, s[1][2][0], 0xF90608FE, 0x0009FAFC, 0xFFFCFE06, 0x1CFAEFF6);
	r1 = D(r1, s[1][2][0], 0xFE15FA07, 0x0803F2F8, 0x04FCF6F7, 0x0016FC05);
	r2 = D(r2, s[1][2][0], 0x0CF4FCFF, 0xFA0A0CFC, 0x0708080B, 0xFD12FB07);
	r3 = D(r3, s[1][2][0], 0xFB060603, 0x0B1302FF, 0x100E0301, 0x06FE0808);
	r0 = D(r0, s[1][2][1], 0xEDF50111, 0x00FA0407, 0xFDF60FF8, 0x05FC040B);
	r1 = D(r1, s[1][2][1], 0xFD0DF7FE, 0x070D05FD, 0x030BF900, 0x15110FFA);
	r2 = D(r2, s[1][2][1], 0x08F2FA02, 0xF7F0240C, 0xF5E21E05, 0x0400FEFA);
	r3 = D(r3, s[1][2][1], 0xFBF816F2, 0x02F900FC, 0x082D1500, 0x04EF2DF0);
	r0 = D(r0, s[1][2][2], 0x0404FCFB, 0x00040DF6, 0xF803FC04, 0x11F70700);
	r1 = D(r1, s[1][2][2], 0xF906F506, 0xFE10FE04, 0x02FBFE0C, 0xFE09FBFB);
	r2 = D(r2, s[1][2][2], 0x07EE0BF6, 0xF8000504, 0x06F10807, 0xFF17F502);
	r3 = D(r3, s[1][2][2], 0xF7FC0902, 0x0305FBF7, 0x02FAFB01, 0x0FF60309);
	s[0][0][0] = G[6][xy.y+0][xy.x+0]; s[0][0][1] = G[6][xy.y+0][xy.x+1];
	s[0][0][2] = G[6][xy.y+0][xy.x+2]; s[0][1][0] = G[6][xy.y+1][xy.x+0];
	s[0][1][1] = G[6][xy.y+1][xy.x+1]; s[0][1][2] = G[6][xy.y+1][xy.x+2];
	s[0][2][0] = G[6][xy.y+2][xy.x+0]; s[0][2][1] = G[6][xy.y+2][xy.x+1];
	s[0][2][2] = G[6][xy.y+2][xy.x+2]; s[1][0][0] = G[7][xy.y+0][xy.x+0];
	s[1][0][1] = G[7][xy.y+0][xy.x+1]; s[1][0][2] = G[7][xy.y+0][xy.x+2];
	s[1][1][0] = G[7][xy.y+1][xy.x+0]; s[1][1][1] = G[7][xy.y+1][xy.x+1];
	s[1][1][2] = G[7][xy.y+1][xy.x+2]; s[1][2][0] = G[7][xy.y+2][xy.x+0];
	s[1][2][1] = G[7][xy.y+2][xy.x+1]; s[1][2][2] = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0x06FEF703, 0xFCFB0CFE, 0xFC0A0C03, 0x050A0DFD);
	r1 = D(r1, s[0][0][0], 0x06F3FE0D, 0x04FAFC05, 0x0508FEFF, 0x08FE0303);
	r2 = D(r2, s[0][0][0], 0xFEFDFDF8, 0xF104FD08, 0xF802F606, 0x0702FE09);
	r3 = D(r3, s[0][0][0], 0x060AFDF9, 0x0903070C, 0xF102FF02, 0x0905FA01);
	r0 = D(r0, s[0][0][1], 0xFC0107F2, 0xF404FAFD, 0x06F9000B, 0xFBF10402);
	r1 = D(r1, s[0][0][1], 0xF2070204, 0xF9F00CF5, 0x0C07F215, 0x1102FFFE);
	r2 = D(r2, s[0][0][1], 0x00FE03FC, 0x07F900FD, 0xF9F90005, 0x04FA03EF);
	r3 = D(r3, s[0][0][1], 0x02F501F8, 0xF2040902, 0xFDFD0808, 0xFDFF0D09);
	r0 = D(r0, s[0][0][2], 0x02F7EB00, 0x00FD0706, 0x060C00F7, 0x09000208);
	r1 = D(r1, s[0][0][2], 0xFEF8010B, 0x0D0BFA01, 0x00FB00FF, 0x11FBF8F5);
	r2 = D(r2, s[0][0][2], 0xFE0909F7, 0x080EF8FE, 0x0505F2F4, 0xFF0C0A02);
	r3 = D(r3, s[0][0][2], 0x04F700FB, 0xFEED0D05, 0x0EF9F802, 0x00060602);
	r0 = D(r0, s[0][1][0], 0x0607EE00, 0x00F9F907, 0xFD01F803, 0x00FBFCFD);
	r1 = D(r1, s[0][1][0], 0x080205FA, 0xF9FAF701, 0xF904FCFD, 0xECF7FFFE);
	r2 = D(r2, s[0][1][0], 0x0404FB0D, 0xF9F802F1, 0x0606FE00, 0xFCF8F10C);
	r3 = D(r3, s[0][1][0], 0x0E020300, 0xFC050100, 0xECE5F5F3, 0xF506FE0F);
	r0 = D(r0, s[0][1][1], 0x00090909, 0xED02EFFE, 0xFC010011, 0x0BF70714);
	r1 = D(r1, s[0][1][1], 0x0003FE0A, 0x01FC07FB, 0x00F7F1EF, 0xFBF70108);
	r2 = D(r2, s[0][1][1], 0x0603F8ED, 0xFDFA0810, 0xF7FE0912, 0xF114FB09);
	r3 = D(r3, s[0][1][1], 0x1CFE0FF5, 0xEBF8F302, 0x0EE50DFC, 0xF80D0004);
	r0 = D(r0, s[0][1][2], 0xF0FF20F7, 0xFBFCF5EB, 0xF6F30805, 0x0C100501);
	r1 = D(r1, s[0][1][2], 0xFFFAF910, 0xF8EEF513, 0xFA15F811, 0x080503FC);
	r2 = D(r2, s[0][1][2], 0x09FF02E6, 0x05FC08F8, 0xFC08FD08, 0x010C05EB);
	r3 = D(r3, s[0][1][2], 0xFFE70105, 0xFEFAFA1C, 0x0B0F0608, 0x0AEE0315);
	r0 = D(r0, s[0][2][0], 0xF50603F2, 0xF70004F6, 0xFE00FF04, 0x09040308);
	r1 = D(r1, s[0][2][0], 0xF102F6F4, 0xF100F50E, 0xFDFFEF0B, 0xFC06F40A);
	r2 = D(r2, s[0][2][0], 0x02FE0C05, 0x000B08FC, 0x00FD02FB, 0xFF04EBFE);
	r3 = D(r3, s[0][2][0], 0x0BF808FB, 0x00FC07FE, 0x06FEF706, 0x02170A09);
	r0 = D(r0, s[0][2][1], 0x1CFC020D, 0xF00909FA, 0x00FAFCF5, 0xFEFCF804);
	r1 = D(r1, s[0][2][1], 0xF3FA11FD, 0x06000BFE, 0x0F020C0E, 0x0BFEF608);
	r2 = D(r2, s[0][2][1], 0xFB000B05, 0xFE0D0B04, 0xF4FE16F3, 0xEFFEF406);
	r3 = D(r3, s[0][2][1], 0x05FF0405, 0x08F30E01, 0x03FC010B, 0xF100FEFD);
	r0 = D(r0, s[0][2][2], 0xFC02F7FC, 0x08FB0FE9, 0x00FEFCF1, 0x0208FB01);
	r1 = D(r1, s[0][2][2], 0xFE07F80F, 0x00F808FC, 0xFAFF070D, 0x00FDFAFC);
	r2 = D(r2, s[0][2][2], 0xFFFD0604, 0xFC000EF2, 0xFDFCF007, 0x0602F501);
	r3 = D(r3, s[0][2][2], 0xF5F60404, 0xFEFE0901, 0x05040502, 0x09050D08);
	r0 = D(r0, s[1][0][0], 0xF70DFA04, 0xFA0C0209, 0xFFF506FD, 0x00F5F3FC);
	r1 = D(r1, s[1][0][0], 0x04070608, 0xF710FE0A, 0x03EB00FB, 0x08F70305);
	r2 = D(r2, s[1][0][0], 0xF60A01FC, 0x0BEFFDF7, 0xF8FF02FC, 0x05FAEA00);
	r3 = D(r3, s[1][0][0], 0xF1FB0AFF, 0xF90BFB0B, 0x0AE0FDEF, 0xF7FC04FA);
	r0 = D(r0, s[1][0][1], 0x07FDF914, 0xF8F91800, 0xF7111500, 0x001E06E8);
	r1 = D(r1, s[1][0][1], 0xFE09FB00, 0x010A010D, 0x06E802EC, 0xF8000AE9);
	r2 = D(r2, s[1][0][1], 0xFB0D10FC, 0xF9F6F30B, 0x021311F8, 0xFEF70D0F);
	r3 = D(r3, s[1][0][1], 0xF20C0311, 0xFC0B19F3, 0xFE0CFC0B, 0x1E0204ED);
	r0 = D(r0, s[1][0][2], 0xFF0A0504, 0xF8140BF4, 0xED010601, 0x0C04F107);
	r1 = D(r1, s[1][0][2], 0xF802F8FA, 0xFB09F302, 0x070305F4, 0xFE040AFC);
	r2 = D(r2, s[1][0][2], 0xFEEC0802, 0xF0FE04F8, 0x02F41100, 0x0502E909);
	r3 = D(r3, s[1][0][2], 0xFF050700, 0x0A1306FE, 0xFF090302, 0x00FEF7F1);
	r0 = D(r0, s[1][1][0], 0xEFF7F704, 0x0707140E, 0xE6F1FA02, 0x04FAFF0A);
	r1 = D(r1, s[1][1][0], 0xF500FBFA, 0x0000FC15, 0xFDF8F509, 0x141EFDFC);
	r2 = D(r2, s[1][1][0], 0xFEEF04F5, 0xFE00F707, 0x0407FDFF, 0x0E190007);
	r3 = D(r3, s[1][1][0], 0xFE02FEF1, 0x02FCFC05, 0x0B060402, 0xFEE0FAFF);
	r0 = D(r0, s[1][1][1], 0x1814FEFF, 0xF709080E, 0xFC081FF2, 0xF00F0603);
	r1 = D(r1, s[1][1][1], 0xE8F1F60B, 0x06180B0B, 0x040411FA, 0x0A020609);
	r2 = D(r2, s[1][1][1], 0xFEF81407, 0x1C09F3E8, 0x03F10609, 0xEDEFF705);
	r3 = D(r3, s[1][1][1], 0xEB13EDF6, 0xFB0B0E12, 0x0B14F80A, 0x04D10C01);
	r0 = D(r0, s[1][1][2], 0xFFF5FDF0, 0xFC081B0F, 0x091CF708, 0xFCFAFAFD);
	r1 = D(r1, s[1][1][2], 0x000906FC, 0xFB200404, 0x05F80EF1, 0x06F50FF9);
	r2 = D(r2, s[1][1][2], 0xEFDD0B0B, 0xF60DEFF7, 0x000606F1, 0xF8E4E90C);
	r3 = D(r3, s[1][1][2], 0x050B0FFA, 0xED0D13FE, 0x04F50BFD, 0xFCF9F5FE);
	r0 = D(r0, s[1][2][0], 0xF7F801FF, 0x02F7090B, 0xE8F704FB, 0xF808FC01);
	r1 = D(r1, s[1][2][0], 0x00FF0202, 0x00040C02, 0x01010000, 0x06EDF200);
	r2 = D(r2, s[1][2][0], 0x020DFC0C, 0x0AFBF1FB, 0x050905F9, 0x0AF90809);
	r3 = D(r3, s[1][2][0], 0x02F8FA02, 0xF9020503, 0xFFFBF8F7, 0xF1F7EAF5);
	r0 = D(r0, s[1][2][1], 0xF90D01F7, 0x0BE8F315, 0xFCE90A0A, 0x11001707);
	r1 = D(r1, s[1][2][1], 0xFE04F406, 0x09F8FE02, 0xFEF307FE, 0x051000F9);
	r2 = D(r2, s[1][2][1], 0x04F2FC08, 0x03F4EE04, 0x0B040502, 0x07F9FBFA);
	r3 = D(r3, s[1][2][1], 0x04FBF306, 0x00FCF2FE, 0x130E02F5, 0xFEED0607);
	r0 = D(r0, s[1][2][2], 0xF6FFFF02, 0x070E0400, 0xF30DF507, 0xF6FEFEF9);
	r1 = D(r1, s[1][2][2], 0xE60009FC, 0x04180BF8, 0xF108FF03, 0x00FB0DFC);
	r2 = D(r2, s[1][2][2], 0xFCF3EFF5, 0xF9F1F20C, 0x03ECFA0D, 0x090303F6);
	r3 = D(r3, s[1][2][2], 0x1105FDFE, 0xFE0900F8, 0xFAFE08FF, 0xF4F7FCFA);
	vec4 f0 = vec4(r0) * 6.20001240e-05;
	f0 += vec4(-3.747e-03, 1.912e-02, 1.815e-02, -2.768e-03);
	imageStore(out_image, opos + ivec2(0, 0), vec4(f0));
	vec4 f1 = vec4(r1) * 6.20001240e-05;
	f1 += vec4(-1.623e-02, -1.973e-02, -1.974e-02, -3.103e-02);
	imageStore(out_image, opos + ivec2(1, 0), vec4(f1));
	vec4 f2 = vec4(r2) * 6.20001240e-05;
	f2 += vec4(-1.564e-02, -1.766e-02, -2.262e-02, 3.675e-02);
	imageStore(out_image, opos + ivec2(0, 1), vec4(f2));
	vec4 f3 = vec4(r3) * 6.20001240e-05;
	f3 += vec4(3.085e-02, 2.556e-02, -1.771e-02, 1.662e-02);
	imageStore(out_image, opos + ivec2(1, 1), vec4(f3));
}

//!DESC CuNNy-16x16C-TEST-conv11
//!HOOK LUMA
//!COMPUTE 16 16 8 8
//!BIND conv10
//!BIND LUMA
//!SAVE conv11
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_spirv_intrinsics : require
#extension GL_EXT_control_flow_attributes : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) ivec4(r.x + dp4(s, a, 0), r.y + dp4(s, b, 0), r.z + dp4(s, c, 0), r.w + dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	[[unroll]] for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		[[unroll]] for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(2, 2) + ivec2(1, 1)) * conv10_pt;
			r = conv10_gather(p, 0);
			g = conv10_gather(p, 1);
			b = conv10_gather(p, 2);
			a = conv10_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.00000000e+00;
			vec4 v2 = vec4(r.z, g.z, b.z, a.z) * 1.00000000e+00;
			vec4 v4 = vec4(r.x, g.x, b.x, a.x) * 1.00000000e+00;
			vec4 v6 = vec4(r.y, g.y, b.y, a.y) * 1.00000000e+00;
			vec4 v1 = max(-v0, vec4(0));
			v0 = max(v0, vec4(0));
			vec4 v3 = max(-v2, vec4(0));
			v2 = max(v2, vec4(0));
			vec4 v5 = max(-v4, vec4(0));
			v4 = max(v4, vec4(0));
			vec4 v7 = max(-v6, vec4(0));
			v6 = max(v6, vec4(0));
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s[2][3][3];
	ivec4 r0 = ivec4(0);
	ivec4 r1 = ivec4(0);
	ivec4 r2 = ivec4(0);
	ivec4 r3 = ivec4(0);
	s[0][0][0] = G[0][xy.y+0][xy.x+0]; s[0][0][1] = G[0][xy.y+0][xy.x+1];
	s[0][0][2] = G[0][xy.y+0][xy.x+2]; s[0][1][0] = G[0][xy.y+1][xy.x+0];
	s[0][1][1] = G[0][xy.y+1][xy.x+1]; s[0][1][2] = G[0][xy.y+1][xy.x+2];
	s[0][2][0] = G[0][xy.y+2][xy.x+0]; s[0][2][1] = G[0][xy.y+2][xy.x+1];
	s[0][2][2] = G[0][xy.y+2][xy.x+2]; s[1][0][0] = G[1][xy.y+0][xy.x+0];
	s[1][0][1] = G[1][xy.y+0][xy.x+1]; s[1][0][2] = G[1][xy.y+0][xy.x+2];
	s[1][1][0] = G[1][xy.y+1][xy.x+0]; s[1][1][1] = G[1][xy.y+1][xy.x+1];
	s[1][1][2] = G[1][xy.y+1][xy.x+2]; s[1][2][0] = G[1][xy.y+2][xy.x+0];
	s[1][2][1] = G[1][xy.y+2][xy.x+1]; s[1][2][2] = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0x03F4F2FB, 0x09F202F5, 0xF70CF1FF, 0x0F040606);
	r1 = D(r1, s[0][0][0], 0x1208FE08, 0x070DFC03, 0x0BFD1006, 0x05FA0404);
	r2 = D(r2, s[0][0][0], 0x01F9090B, 0xFB0E0BFE, 0xF70B01FA, 0x000A06F9);
	r3 = D(r3, s[0][0][0], 0xF9FC0BF4, 0x0908FFFF, 0x00F51000, 0xFE050605);
	r0 = D(r0, s[0][0][1], 0x00F60001, 0xFBFAFEF3, 0xFC0AFC06, 0x0EF00B04);
	r1 = D(r1, s[0][0][1], 0xF805F31D, 0x00FF06F2, 0x18FFF9FA, 0xFDFF1005);
	r2 = D(r2, s[0][0][1], 0xE7FEF408, 0x1BF509EE, 0xF30BEE00, 0x02F5F70B);
	r3 = D(r3, s[0][0][1], 0xFE0C0BFE, 0xFC00FEFC, 0x04FE03F3, 0xFEF30C11);
	r0 = D(r0, s[0][0][2], 0x0AFCF9F5, 0xF7F904EB, 0x040EF60C, 0x030603F5);
	r1 = D(r1, s[0][0][2], 0xFC01FD05, 0xFE0AF6F7, 0xFFFEF911, 0xFAF60F02);
	r2 = D(r2, s[0][0][2], 0x030404F9, 0xF4FE0003, 0xFE060507, 0x0815FF10);
	r3 = D(r3, s[0][0][2], 0xFFFE0C0C, 0xFA00FEFB, 0x0203FEF2, 0xF40AF501);
	r0 = D(r0, s[0][1][0], 0xFF1F0FF7, 0xFC1200FF, 0x0602FC03, 0x0707FFFD);
	r1 = D(r1, s[0][1][0], 0xF8FE0218, 0xFB08EC02, 0x09150001, 0xF8E70200);
	r2 = D(r2, s[0][1][0], 0xFC01F6EE, 0x04FE0E01, 0x0C0805F1, 0x0CEEFBFE);
	r3 = D(r3, s[0][1][0], 0xF702F804, 0x00020F08, 0x0104FEFA, 0x0AFC080A);
	r0 = D(r0, s[0][1][1], 0xFD0817F0, 0x0D1B02EA, 0x060402EB, 0x0C0A1A18);
	r1 = D(r1, s[0][1][1], 0xF8F4FF08, 0xFD01E4E7, 0x0E08FBFE, 0xF90416FE);
	r2 = D(r2, s[0][1][1], 0x35131502, 0x000300FE, 0xE10BE9EF, 0x18FFF4F7);
	r3 = D(r3, s[0][1][1], 0xF7F718FF, 0x0BFE0CF5, 0x05000417, 0x06080407);
	r0 = D(r0, s[0][1][2], 0x060706F1, 0xFCF40206, 0xF50EF5F1, 0x02F6F604);
	r1 = D(r1, s[0][1][2], 0x05080104, 0x0C07FA0E, 0x01000315, 0xFB02F8F9);
	r2 = D(r2, s[0][1][2], 0xF6FEFC16, 0x07FF0214, 0xE403E708, 0x0A05F3FA);
	r3 = D(r3, s[0][1][2], 0x000102FE, 0xFC010BF5, 0xEDF20004, 0xF1FDF902);
	r0 = D(r0, s[0][2][0], 0x0C07F6F4, 0x05FEFDF8, 0xF9FF06F0, 0xFC0302FA);
	r1 = D(r1, s[0][2][0], 0xFC08F204, 0x01F50813, 0xFD0A04FF, 0xFFFDF302);
	r2 = D(r2, s[0][2][0], 0xF2FAFE0A, 0x040008FA, 0xFC0401FB, 0xFEF90909);
	r3 = D(r3, s[0][2][0], 0xFA0401FD, 0x0000EFFC, 0x03040600, 0x05FC010F);
	r0 = D(r0, s[0][2][1], 0x070FFEF0, 0xFF0704F8, 0xFFFDFDFB, 0x05FAFC0D);
	r1 = D(r1, s[0][2][1], 0xFE00FCFA, 0x00FD0604, 0x02000004, 0xE5FB01F9);
	r2 = D(r2, s[0][2][1], 0xFDE3FF01, 0x04FEFDFF, 0xF10CFC04, 0xFE0B07FC);
	r3 = D(r3, s[0][2][1], 0x00010500, 0xFE04FEE8, 0x0AFDFCFA, 0x10FC030E);
	r0 = D(r0, s[0][2][2], 0x050401F9, 0x0106F9EE, 0x021002ED, 0x030002ED);
	r1 = D(r1, s[0][2][2], 0x06FBF20A, 0xFE08FF0A, 0x0304FE0D, 0xFEFEFEF9);
	r2 = D(r2, s[0][2][2], 0xFC1001FC, 0x06070614, 0xFA09FEFE, 0x020C04F7);
	r3 = D(r3, s[0][2][2], 0x03FE03FA, 0x08FEF3F8, 0xFCF60CFF, 0x00FB050E);
	r0 = D(r0, s[1][0][0], 0xFD0810FD, 0xF200F8FB, 0x120E03F8, 0xF9F70304);
	r1 = D(r1, s[1][0][0], 0xF0F5FD04, 0xFB03F801, 0xF2FAF9F8, 0x0702FE0A);
	r2 = D(r2, s[1][0][0], 0xF611FDF7, 0x080108FE, 0xF708F3F8, 0x09FE0BFC);
	r3 = D(r3, s[1][0][0], 0x00FFEE06, 0xFAFEF902, 0x01F90003, 0x0405F20E);
	r0 = D(r0, s[1][0][1], 0xFCFF00FB, 0x0A00F9F0, 0x160CFAE9, 0xF7FE0E0C);
	r1 = D(r1, s[1][0][1], 0x010403FF, 0x000E0C01, 0xFD0603FE, 0x02000000);
	r2 = D(r2, s[1][0][1], 0x11FA090B, 0xF708040E, 0x041307F3, 0x0E060B01);
	r3 = D(r3, s[1][0][1], 0xFCF4FA05, 0xF3FE000A, 0xFAEE0102, 0xF0FDF2ED);
	r0 = D(r0, s[1][0][2], 0x000CF8EB, 0xFD01FDF0, 0x06FFF7F5, 0x0E000606);
	r1 = D(r1, s[1][0][2], 0x0A0C0804, 0x0E00F60F, 0x00FDFCF4, 0x0600F9F7);
	r2 = D(r2, s[1][0][2], 0x10F9F900, 0xFC10FBF7, 0xFB0BFC06, 0x1900FA04);
	r3 = D(r3, s[1][0][2], 0x0EF611F3, 0xF508FF11, 0x17010707, 0x00FEF707);
	r0 = D(r0, s[1][1][0], 0x00F80B02, 0xFAFDFAF0, 0xFE0AF7F6, 0xFCEF0808);
	r1 = D(r1, s[1][1][0], 0xFA08EA07, 0x17FFFC04, 0xFCEA1D12, 0xFE0EFBF7);
	r2 = D(r2, s[1][1][0], 0xFDFC080B, 0x060001FD, 0xEB11F5FE, 0xFD010A01);
	r3 = D(r3, s[1][1][0], 0x00FB03FF, 0xF907F6F6, 0xFE000001, 0xF5FC0D07);
	r0 = D(r0, s[1][1][1], 0x171306FC, 0xEDF70DFA, 0xFB05EEF8, 0x03DEF2EF);
	r1 = D(r1, s[1][1][1], 0xF310FF0A, 0x080A060E, 0x04060708, 0xF9FCE5FA);
	r2 = D(r2, s[1][1][1], 0xE5FAE5EF, 0x21F9FF04, 0x000400ED, 0xEFFA120C);
	r3 = D(r3, s[1][1][1], 0x000EFD04, 0xEEF7F4FB, 0x01F3F9E7, 0xF5FD0CF5);
	r0 = D(r0, s[1][1][2], 0xF60D0F05, 0x0810F8F0, 0x1BFD06FF, 0x19FEF7F7);
	r1 = D(r1, s[1][1][2], 0x09FC0C05, 0xFEF700F8, 0x0602EDFC, 0xFBF7FC04);
	r2 = D(r2, s[1][1][2], 0x0DFA08EA, 0x0EFC02FC, 0x0108FDFA, 0x02000003);
	r3 = D(r3, s[1][1][2], 0x06080FF9, 0xFD05EC11, 0x0D0DFE01, 0x0E0AF801);
	r0 = D(r0, s[1][2][0], 0x00080AF6, 0xF607F0F5, 0x0A0A0000, 0x09FCFD08);
	r1 = D(r1, s[1][2][0], 0xF702FCFC, 0x060EF9FB, 0x07000C06, 0x00FD0F05);
	r2 = D(r2, s[1][2][0], 0x0C06FDF9, 0xFE00FEFE, 0xF81905F4, 0x02FD1001);
	r3 = D(r3, s[1][2][0], 0xFA0A06F5, 0x04FA08F6, 0xF603F3F7, 0xFFFAF40C);
	r0 = D(r0, s[1][2][1], 0x0400FEFA, 0x090AF403, 0x080C0A0A, 0x0CF2FC02);
	r1 = D(r1, s[1][2][1], 0xF4F1F601, 0x0807F606, 0x02F41201, 0x0605F909);
	r2 = D(r2, s[1][2][1], 0x00120203, 0xF400080E, 0xEC12FFF1, 0x08FA160C);
	r3 = D(r3, s[1][2][1], 0xE7F9F6F2, 0x02F2F7F6, 0xF6EE06EC, 0xF0FB0C07);
	r0 = D(r0, s[1][2][2], 0xFC0C00F2, 0x02160907, 0x0E050014, 0x0E00F502);
	r1 = D(r1, s[1][2][2], 0xF0EEFDF2, 0x0C000202, 0xFA050101, 0xFA02F60F);
	r2 = D(r2, s[1][2][2], 0x04F409FB, 0x0802F6FB, 0xFC0E0505, 0x020300F4);
	r3 = D(r3, s[1][2][2], 0xFDFCFC09, 0xF0F90203, 0xFCFB02FC, 0x0304FBFD);
	s[0][0][0] = G[2][xy.y+0][xy.x+0]; s[0][0][1] = G[2][xy.y+0][xy.x+1];
	s[0][0][2] = G[2][xy.y+0][xy.x+2]; s[0][1][0] = G[2][xy.y+1][xy.x+0];
	s[0][1][1] = G[2][xy.y+1][xy.x+1]; s[0][1][2] = G[2][xy.y+1][xy.x+2];
	s[0][2][0] = G[2][xy.y+2][xy.x+0]; s[0][2][1] = G[2][xy.y+2][xy.x+1];
	s[0][2][2] = G[2][xy.y+2][xy.x+2]; s[1][0][0] = G[3][xy.y+0][xy.x+0];
	s[1][0][1] = G[3][xy.y+0][xy.x+1]; s[1][0][2] = G[3][xy.y+0][xy.x+2];
	s[1][1][0] = G[3][xy.y+1][xy.x+0]; s[1][1][1] = G[3][xy.y+1][xy.x+1];
	s[1][1][2] = G[3][xy.y+1][xy.x+2]; s[1][2][0] = G[3][xy.y+2][xy.x+0];
	s[1][2][1] = G[3][xy.y+2][xy.x+1]; s[1][2][2] = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0x01F9FE10, 0x00FCFC0E, 0xFA0A0503, 0x07FEFF0C);
	r1 = D(r1, s[0][0][0], 0x0607FF05, 0x0000F4F6, 0xFAEBFBFC, 0x03F5FB03);
	r2 = D(r2, s[0][0][0], 0x0BFCFE00, 0xF206F10C, 0xFFFD07F3, 0xFAFC0C08);
	r3 = D(r3, s[0][0][0], 0x07FCFAF4, 0xF7FCF813, 0xFFF5FB13, 0x0E040EF7);
	r0 = D(r0, s[0][0][1], 0x02FD0710, 0x0AFEF00E, 0xFAEFFEFA, 0xF90406E6);
	r1 = D(r1, s[0][0][1], 0x0E130EEE, 0x05FF10FA, 0xF2FCF313, 0xFBFA040C);
	r2 = D(r2, s[0][0][1], 0x0E10160A, 0x05E5E3FC, 0x080AF214, 0xF4FEED02);
	r3 = D(r3, s[0][0][1], 0xFC10040C, 0xFEFB050D, 0xFEFB0811, 0x030506F2);
	r0 = D(r0, s[0][0][2], 0xF7FC0AF7, 0xFEF9F7EF, 0x09F6F20B, 0x00F7F10D);
	r1 = D(r1, s[0][0][2], 0xF6FF0005, 0xF30104FD, 0x06080302, 0x0701FC0A);
	r2 = D(r2, s[0][0][2], 0x00FCE9FE, 0x0414FDFC, 0x02FF0BFC, 0x03FBFEF7);
	r3 = D(r3, s[0][0][2], 0x060002FA, 0x02FF0F09, 0x07F613FE, 0xFF07F40C);
	r0 = D(r0, s[0][1][0], 0xEFF0ED1A, 0xF503FCFE, 0x05F90915, 0x0B01F4EB);
	r1 = D(r1, s[0][1][0], 0x0A0DF3F9, 0x051307FD, 0x0802000B, 0x050001EF);
	r2 = D(r2, s[0][1][0], 0xFD08FC03, 0xFFFD000E, 0xFC020702, 0xFEFCFE05);
	r3 = D(r3, s[0][1][0], 0xF5FCFFF6, 0x0405F810, 0xFFFEF402, 0x0FE9FE09);
	r0 = D(r0, s[0][1][1], 0xED0D060B, 0xF1FCF60A, 0xF7F5FEFA, 0x0E12F6FE);
	r1 = D(r1, s[0][1][1], 0xFE09000A, 0x120D0C01, 0xEBDDDF3C, 0xF70AF50C);
	r2 = D(r2, s[0][1][1], 0x03DD0402, 0xFFF5F2F7, 0xF8FEE209, 0x09F6EBF8);
	r3 = D(r3, s[0][1][1], 0xFA061B13, 0xF6E9F5F4, 0x0504F0F3, 0x08EF00EF);
	r0 = D(r0, s[0][1][2], 0xFC0519FE, 0xF70B060B, 0xF4FBF80C, 0x0AFEF8F5);
	r1 = D(r1, s[0][1][2], 0x0E140403, 0xEF0C0202, 0xEB000305, 0x0A0513EB);
	r2 = D(r2, s[0][1][2], 0x0A11F5F8, 0xF8FC1907, 0x0C100005, 0xF9F4F40A);
	r3 = D(r3, s[0][1][2], 0xF80A0501, 0xEEFBEA16, 0xFDFD07F9, 0xF0FCFBF2);
	r0 = D(r0, s[0][2][0], 0xF30301FF, 0xFF0C0015, 0xFC0E02EF, 0xFC08F0FE);
	r1 = D(r1, s[0][2][0], 0xF1F108F9, 0x0707FE01, 0x000CF2FA, 0xFDF204F7);
	r2 = D(r2, s[0][2][0], 0xFB00FF26, 0x0503F702, 0x02030701, 0xEFF905F2);
	r3 = D(r3, s[0][2][0], 0xFE0303F0, 0xFEFD0104, 0xF4FF01F9, 0x06E90600);
	r0 = D(r0, s[0][2][1], 0xF7F1FE13, 0x060DE1EE, 0xFAE30804, 0x16080903);
	r1 = D(r1, s[0][2][1], 0xF6090A01, 0x02F7F20A, 0x1403E900, 0xF311FA0C);
	r2 = D(r2, s[0][2][1], 0x04EFF906, 0xFDF404F7, 0xF402F513, 0x04EFF7F0);
	r3 = D(r3, s[0][2][1], 0xED0112F8, 0xF9F51205, 0x1909F60E, 0x0E05F0F2);
	r0 = D(r0, s[0][2][2], 0x03FD0006, 0x06090707, 0xEAEEFC07, 0xF9FCF407);
	r1 = D(r1, s[0][2][2], 0x0214F9EB, 0x07FF0C08, 0x08F000F7, 0x01FFF8F4);
	r2 = D(r2, s[0][2][2], 0x09FF06ED, 0x07070806, 0xFAF10CEE, 0xF8EFFCFF);
	r3 = D(r3, s[0][2][2], 0xEF0404FC, 0xFA0305F8, 0x04F608FB, 0x03F40B0A);
	r0 = D(r0, s[1][0][0], 0xF3FD1004, 0xFDFF01FC, 0xFDEBFA0F, 0x060306F2);
	r1 = D(r1, s[1][0][0], 0xFCF6FEFB, 0xF605F904, 0xF2F30C11, 0x0B030E05);
	r2 = D(r2, s[1][0][0], 0x030101F9, 0xFFF1FA08, 0x0208F70E, 0x00F9F903);
	r3 = D(r3, s[1][0][0], 0xF8FDF9FC, 0xFF061603, 0xFDFA0CFB, 0xF1EDF5F8);
	r0 = D(r0, s[1][0][1], 0xFBF70602, 0x00F510FC, 0x0FFDF602, 0x0801F608);
	r1 = D(r1, s[1][0][1], 0xFA04FC0E, 0x040AFC07, 0xFE040402, 0xFAFFF4FE);
	r2 = D(r2, s[1][0][1], 0x0007F2F1, 0xF40305FE, 0x061300F8, 0x07FAFCF8);
	r3 = D(r3, s[1][0][1], 0x04FBF6F8, 0xFC100B0A, 0xFFF90808, 0x09FF0406);
	r0 = D(r0, s[1][0][2], 0x060406FC, 0x0CFD0402, 0xF3070C00, 0x05F407EE);
	r1 = D(r1, s[1][0][2], 0x050100F4, 0x0604FAFC, 0xEFFB02F9, 0xFCFFFAF6);
	r2 = D(r2, s[1][0][2], 0xF9FC08FC, 0x08FC02F8, 0x04F9FB1A, 0xFAF00407);
	r3 = D(r3, s[1][0][2], 0xFFF5F404, 0xFD010B0B, 0x000201F7, 0x0608FC08);
	r0 = D(r0, s[1][1][0], 0x030CF60C, 0xFC08F4F8, 0xF7EF03F6, 0x10051504);
	r1 = D(r1, s[1][1][0], 0x0805FA09, 0xEDF9EDF3, 0xF6040C08, 0xF7EA0002);
	r2 = D(r2, s[1][1][0], 0x0AFCF50C, 0x040407FE, 0xFC0409FF, 0x00F703FD);
	r3 = D(r3, s[1][1][0], 0xFA0A04FA, 0x040F0510, 0xFF05FF08, 0xF80A0A04);
	r0 = D(r0, s[1][1][1], 0x09ED01EE, 0x0C17FD01, 0xF2F00B1B, 0xFEFD000B);
	r1 = D(r1, s[1][1][1], 0x0405F8FA, 0xFD060A06, 0x190003E1, 0x06EE08F8);
	r2 = D(r2, s[1][1][1], 0xF60D16FB, 0x0C0E0415, 0xFE0100F6, 0xDBF602EE);
	r3 = D(r3, s[1][1][1], 0x0703FEF3, 0x060C0814, 0xEC02FE0A, 0x050BFA12);
	r0 = D(r0, s[1][1][2], 0x1000F50C, 0x0BFAFAED, 0x0EFEF8FE, 0xFCF803FF);
	r1 = D(r1, s[1][1][2], 0xF6F6F4FB, 0xFA04EE00, 0x0100FAFF, 0xF9FEF406);
	r2 = D(r2, s[1][1][2], 0x0F08F9F6, 0xFC14EB04, 0xF206FC02, 0xFE0BF603);
	r3 = D(r3, s[1][1][2], 0x0BFEFC10, 0x070106FC, 0xFEFFF503, 0x06040008);
	r0 = D(r0, s[1][2][0], 0xFCEB00FD, 0xE704FDF2, 0xF7EE0103, 0x00F80F04);
	r1 = D(r1, s[1][2][0], 0x1BECFE00, 0xF700F8FA, 0xFAFC1308, 0x0B01F800);
	r2 = D(r2, s[1][2][0], 0x0DFAF400, 0x090404FE, 0xF907F700, 0xF6F3FDEF);
	r3 = D(r3, s[1][2][0], 0x0E0602FF, 0xFC0C0B10, 0xFDF80D00, 0x0311FDFC);
	r0 = D(r0, s[1][2][1], 0x1E0A01F1, 0xFBF808FC, 0xF40404FD, 0xF7F9FCFE);
	r1 = D(r1, s[1][2][1], 0x070202FE, 0xEE0200EB, 0x09EE0EF6, 0x04FAFA04);
	r2 = D(r2, s[1][2][1], 0xDD0905F4, 0x0910FFFB, 0xFB0A07F3, 0xF4FA09FC);
	r3 = D(r3, s[1][2][1], 0x0BFDF6F7, 0x0CFB0005, 0xF4020CFC, 0xF6F402FF);
	r0 = D(r0, s[1][2][2], 0x0904FCF8, 0xFF050108, 0xFB1000FC, 0x040305F4);
	r1 = D(r1, s[1][2][2], 0x08EF0607, 0xF808FBF2, 0x08F704FD, 0x02FF0A02);
	r2 = D(r2, s[1][2][2], 0xF4FEF90C, 0xECFBFD01, 0xFF06FA07, 0xFD00FEF9);
	r3 = D(r3, s[1][2][2], 0x08FEFE04, 0x0BFC061D, 0xF514FAF3, 0xFC0BFC09);
	s[0][0][0] = G[4][xy.y+0][xy.x+0]; s[0][0][1] = G[4][xy.y+0][xy.x+1];
	s[0][0][2] = G[4][xy.y+0][xy.x+2]; s[0][1][0] = G[4][xy.y+1][xy.x+0];
	s[0][1][1] = G[4][xy.y+1][xy.x+1]; s[0][1][2] = G[4][xy.y+1][xy.x+2];
	s[0][2][0] = G[4][xy.y+2][xy.x+0]; s[0][2][1] = G[4][xy.y+2][xy.x+1];
	s[0][2][2] = G[4][xy.y+2][xy.x+2]; s[1][0][0] = G[5][xy.y+0][xy.x+0];
	s[1][0][1] = G[5][xy.y+0][xy.x+1]; s[1][0][2] = G[5][xy.y+0][xy.x+2];
	s[1][1][0] = G[5][xy.y+1][xy.x+0]; s[1][1][1] = G[5][xy.y+1][xy.x+1];
	s[1][1][2] = G[5][xy.y+1][xy.x+2]; s[1][2][0] = G[5][xy.y+2][xy.x+0];
	s[1][2][1] = G[5][xy.y+2][xy.x+1]; s[1][2][2] = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0x02F80006, 0x09F80001, 0x02000512, 0x021202FC);
	r1 = D(r1, s[0][0][0], 0x07050A02, 0xFA03F3FD, 0xFFF1FCF7, 0xF9FBFAFA);
	r2 = D(r2, s[0][0][0], 0xF90506F9, 0x0202EC00, 0x0CFE0D0D, 0xF4FBEE00);
	r3 = D(r3, s[0][0][0], 0x00F6FCF4, 0x01FDFAF3, 0x02F1FAF8, 0xFA000604);
	r0 = D(r0, s[0][0][1], 0x09EA0EFD, 0x11EAF7F6, 0xFC02FE04, 0xFC1206F4);
	r1 = D(r1, s[0][0][1], 0xFE160200, 0xF318F904, 0x04E60C06, 0xF91C0913);
	r2 = D(r2, s[0][0][1], 0xFD0707FD, 0x0A1300F7, 0x060D0009, 0x02E9F508);
	r3 = D(r3, s[0][0][1], 0x12EEFDF1, 0xFF04FEF0, 0x04FDFE00, 0x07FB06EF);
	r0 = D(r0, s[0][0][2], 0x01FCF902, 0x0DEDF9F7, 0x00FDF5FD, 0xFB000DF7);
	r1 = D(r1, s[0][0][2], 0xFCF505F1, 0xFE0603FB, 0xFEF40502, 0x05170DFC);
	r2 = D(r2, s[0][0][2], 0x00060F06, 0x0E0212F6, 0x0C02F619, 0xF1FCEB02);
	r3 = D(r3, s[0][0][2], 0x0BF3FAF2, 0x0E0606FB, 0xFE050A12, 0x0507F4FC);
	r0 = D(r0, s[0][1][0], 0x08F2F612, 0x07F9F4F7, 0x08E5FE0C, 0xF6F20008);
	r1 = D(r1, s[0][1][0], 0xF613FF05, 0x0BEBF8F3, 0x0C03F50C, 0xF70CFAF5);
	r2 = D(r2, s[0][1][0], 0x02F80118, 0x0105FEF1, 0x0CF90704, 0x03FFFA04);
	r3 = D(r3, s[0][1][0], 0x0003F409, 0x02F0FEFA, 0x07FAFE05, 0x0410FAFA);
	r0 = D(r0, s[0][1][1], 0x09F5E52C, 0x130410F8, 0x2302F508, 0xF8F60E0E);
	r1 = D(r1, s[0][1][1], 0xF3221002, 0xF404100E, 0x0B04EFFC, 0xEC150903);
	r2 = D(r2, s[0][1][1], 0x2622FA10, 0x02000EFD, 0x040FECFA, 0x0E0800F6);
	r3 = D(r3, s[0][1][1], 0x080BDD13, 0x04F606E9, 0x090CFB0F, 0xFF02FCE8);
	r0 = D(r0, s[0][1][2], 0xFAF5FD0A, 0x1304FB0B, 0xF212FCFD, 0xFE00FDFE);
	r1 = D(r1, s[0][1][2], 0x07080203, 0x03F6FAF5, 0xFA01F80A, 0x06180201);
	r2 = D(r2, s[0][1][2], 0xF201F3FD, 0xFF0B0001, 0x05FEFA03, 0x04F8F500);
	r3 = D(r3, s[0][1][2], 0xFD04F709, 0x0507F203, 0xF8FC0AF5, 0x020CF906);
	r0 = D(r0, s[0][2][0], 0x0CF508FE, 0x110EF90A, 0x0901FC01, 0xF504FF0A);
	r1 = D(r1, s[0][2][0], 0x1AFEFD0E, 0xF4FCF4F0, 0x0F04F909, 0x00FC0E05);
	r2 = D(r2, s[0][2][0], 0xE8F5FAEF, 0x02F8FBF2, 0x0E040400, 0xF700070D);
	r3 = D(r3, s[0][2][0], 0x0AF505FD, 0x0205FCFA, 0x1608FE07, 0xF7F9FD00);
	r0 = D(r0, s[0][2][1], 0x1D00F808, 0x19F90904, 0x000C02EF, 0xF6F8F504);
	r1 = D(r1, s[0][2][1], 0x0412120F, 0x0214FDFB, 0x07FC0019, 0xFEF607F7);
	r2 = D(r2, s[0][2][1], 0xFFFF0113, 0x0202F604, 0x11F7F2F3, 0x00FDFAFB);
	r3 = D(r3, s[0][2][1], 0x0EFC0B04, 0x03F90307, 0x05F00001, 0xF6FF00F8);
	r0 = D(r0, s[0][2][2], 0x0F03FD05, 0x03070102, 0xFD000200, 0xFC0203F6);
	r1 = D(r1, s[0][2][2], 0x0EF2F5FC, 0xF8F7F2F5, 0x0402FD02, 0xFF0402F8);
	r2 = D(r2, s[0][2][2], 0x0C0506F7, 0x080E0404, 0x05FC1008, 0x0107F500);
	r3 = D(r3, s[0][2][2], 0x0006FE00, 0x13010104, 0xFBF9FFFB, 0xE705FCFA);
	r0 = D(r0, s[1][0][0], 0x0AFF0E02, 0x0AFB0EEF, 0xFA0BEEF4, 0x0507F003);
	r1 = D(r1, s[1][0][0], 0x000902ED, 0xFCFBF80A, 0xFDFB06F7, 0x0000FE04);
	r2 = D(r2, s[1][0][0], 0x030400F8, 0x03EA01F6, 0x02010CF4, 0x0702F807);
	r3 = D(r3, s[1][0][0], 0x08FD00FF, 0x08F60B04, 0x00F8FEF7, 0x04F513FD);
	r0 = D(r0, s[1][0][1], 0x09FFF200, 0x0102F000, 0xFFF2F506, 0xFDFE0201);
	r1 = D(r1, s[1][0][1], 0xFB0100F6, 0x0C0204F8, 0x01FCFEEB, 0xFDEBDAFF);
	r2 = D(r2, s[1][0][1], 0xFA070A08, 0x08F0E010, 0x01EFFB11, 0xF8FBF5F7);
	r3 = D(r3, s[1][0][1], 0x010C00F6, 0x040202F3, 0xFF050BFF, 0xDDF8F1F1);
	r0 = D(r0, s[1][0][2], 0x06FD1005, 0x04FB0C10, 0xFDFDFC13, 0xF70BF0F3);
	r1 = D(r1, s[1][0][2], 0xFE03FC01, 0xFF080501, 0x07FD0A02, 0xF500F808);
	r2 = D(r2, s[1][0][2], 0xF2FFF500, 0xF80606F5, 0x0C06001B, 0x060BEA04);
	r3 = D(r3, s[1][0][2], 0xFA050119, 0x0504F800, 0x040EFA03, 0xF7E204FF);
	r0 = D(r0, s[1][1][0], 0x07F00100, 0x08FE060C, 0xFB06F517, 0xFA07FCFC);
	r1 = D(r1, s[1][1][0], 0xFCFF00F8, 0x010EFCF5, 0xF4FC0D0F, 0x0DF01200);
	r2 = D(r2, s[1][1][0], 0xEDFE0EF2, 0x01EEF603, 0x02F9FE07, 0x09F6F712);
	r3 = D(r3, s[1][1][0], 0x06FAF006, 0x130C0004, 0xFCFC13FD, 0xF6F71C08);
	r0 = D(r0, s[1][1][1], 0x04ED08EE, 0xEEF6E509, 0xEFF002EC, 0x0B0405E1);
	r1 = D(r1, s[1][1][1], 0x0D0406F5, 0xF6EBF10A, 0x03F50812, 0x07EEF229);
	r2 = D(r2, s[1][1][1], 0xDAFEE6FF, 0x0A16F8F2, 0xF5EEFA17, 0xFDF6F007);
	r3 = D(r3, s[1][1][1], 0x10FC1002, 0x04FAFA03, 0x020AF8E6, 0xEE00F2FF);
	r0 = D(r0, s[1][1][2], 0x090F0207, 0xFCE80412, 0xF8EDF904, 0xFEFAFEF1);
	r1 = D(r1, s[1][1][2], 0x0206FEF5, 0xFA0307FE, 0xFD02F802, 0xFBF1FE04);
	r2 = D(r2, s[1][1][2], 0x06010E0B, 0x0CFEFFFE, 0x080D010C, 0x040005FF);
	r3 = D(r3, s[1][1][2], 0x0AFEECFD, 0x0AF90FFC, 0x1710FDF6, 0xF6FD11F5);
	r0 = D(r0, s[1][2][0], 0x0D02F0FB, 0x0008F7F6, 0x08FBFFFE, 0x05F50010);
	r1 = D(r1, s[1][2][0], 0xEB01FCFA, 0xF900F002, 0x0BFA10FE, 0xFCFC0600);
	r2 = D(r2, s[1][2][0], 0xF7FD1A07, 0xFB070200, 0x0EFF07FA, 0xFFF7EEFD);
	r3 = D(r3, s[1][2][0], 0xF906FA01, 0x08FAF201, 0xFE0700FF, 0x0703FA04);
	r0 = D(r0, s[1][2][1], 0x0500040C, 0x0401E6FA, 0x0604F805, 0xF30EE7F8);
	r1 = D(r1, s[1][2][1], 0x07F8F70A, 0x06F80B08, 0x00FEFCF8, 0xFE04130A);
	r2 = D(r2, s[1][2][1], 0x0910F206, 0xFCFE0B03, 0xFD0B0106, 0x0407FC01);
	r3 = D(r3, s[1][2][1], 0xFAFCEEFD, 0x0DFAE0FD, 0x07FDFAF1, 0xEF0210F2);
	r0 = D(r0, s[1][2][2], 0x07FDF00A, 0xFDFF03F7, 0x0214FE0A, 0x00FDFAFF);
	r1 = D(r1, s[1][2][2], 0xFB07FE01, 0x06000DFE, 0xF9FFF404, 0x030309FE);
	r2 = D(r2, s[1][2][2], 0xEDFA0003, 0xF802F5F2, 0x0404F606, 0x0102FCFE);
	r3 = D(r3, s[1][2][2], 0x06F900F3, 0x02F8FAF6, 0x06FD0B04, 0xFBF81AF2);
	s[0][0][0] = G[6][xy.y+0][xy.x+0]; s[0][0][1] = G[6][xy.y+0][xy.x+1];
	s[0][0][2] = G[6][xy.y+0][xy.x+2]; s[0][1][0] = G[6][xy.y+1][xy.x+0];
	s[0][1][1] = G[6][xy.y+1][xy.x+1]; s[0][1][2] = G[6][xy.y+1][xy.x+2];
	s[0][2][0] = G[6][xy.y+2][xy.x+0]; s[0][2][1] = G[6][xy.y+2][xy.x+1];
	s[0][2][2] = G[6][xy.y+2][xy.x+2]; s[1][0][0] = G[7][xy.y+0][xy.x+0];
	s[1][0][1] = G[7][xy.y+0][xy.x+1]; s[1][0][2] = G[7][xy.y+0][xy.x+2];
	s[1][1][0] = G[7][xy.y+1][xy.x+0]; s[1][1][1] = G[7][xy.y+1][xy.x+1];
	s[1][1][2] = G[7][xy.y+1][xy.x+2]; s[1][2][0] = G[7][xy.y+2][xy.x+0];
	s[1][2][1] = G[7][xy.y+2][xy.x+1]; s[1][2][2] = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0x080BFD04, 0x090705FB, 0x0904FAFC, 0xF8FA0400);
	r1 = D(r1, s[0][0][0], 0x060D09FD, 0x01FEFDF3, 0xF8FB0407, 0xF703FD02);
	r2 = D(r2, s[0][0][0], 0x0EFCF9F9, 0xFB0202F2, 0x0209FAF6, 0xF906E6FC);
	r3 = D(r3, s[0][0][0], 0xFE03FAEE, 0x06020B08, 0xFEFAFC05, 0xFDF8F408);
	r0 = D(r0, s[0][0][1], 0x070E0A0D, 0xF6FFFE13, 0x05100204, 0x050202FD);
	r1 = D(r1, s[0][0][1], 0x0EF209FD, 0x050A0105, 0x01FD04F5, 0x0CEF09FA);
	r2 = D(r2, s[0][0][1], 0x0EF70601, 0xF601F605, 0x02080A03, 0x0A09F0FA);
	r3 = D(r3, s[0][0][1], 0x05F5FEF9, 0xFC07FDF0, 0x01F900EF, 0x0203EC0B);
	r0 = D(r0, s[0][0][2], 0x000E05F8, 0x0CFA06F6, 0x0010FE06, 0xFEF60408);
	r1 = D(r1, s[0][0][2], 0x00FA08F8, 0xF5FD0008, 0x03FDF802, 0x00FE0203);
	r2 = D(r2, s[0][0][2], 0x0002FF01, 0x0708FA04, 0x081BFEF6, 0xF4FFFCFF);
	r3 = D(r3, s[0][0][2], 0x00F201FA, 0x0A02FC01, 0x00010FFE, 0xFE021204);
	r0 = D(r0, s[0][1][0], 0xF800FEF8, 0xFC0406FE, 0xFEF9F605, 0xF5F40100);
	r1 = D(r1, s[0][1][0], 0xFE021405, 0x0101F2F8, 0x03FCE80E, 0x000408FA);
	r2 = D(r2, s[0][1][0], 0x070EF5E9, 0x0102FEFA, 0xFEFCF4F4, 0xFFFF0307);
	r3 = D(r3, s[0][1][0], 0xFE08F0F1, 0xF5FEF200, 0xFC020605, 0x04040C04);
	r0 = D(r0, s[0][1][1], 0xF309F4FD, 0xF8F00013, 0xFB00EDED, 0xF60713FC);
	r1 = D(r1, s[0][1][1], 0xDFFFF718, 0xFC0611DA, 0xF1F6FB00, 0x0400F5DF);
	r2 = D(r2, s[0][1][1], 0xE903E41F, 0xF6021AF1, 0xFCFEFAE2, 0x0E0301F5);
	r3 = D(r3, s[0][1][1], 0x0B04F8F9, 0xF4FCEBEA, 0xF9F9FEEA, 0x0C0415F1);
	r0 = D(r0, s[0][1][2], 0x00FC0000, 0x17F80EFE, 0x050F02F7, 0xFEFEF006);
	r1 = D(r1, s[0][1][2], 0xF60A0410, 0x06FDFDF8, 0xFD0A0501, 0xFE0211F9);
	r2 = D(r2, s[0][1][2], 0x09F9FFFD, 0x080E0001, 0x0CF904F8, 0xFB12F6FD);
	r3 = D(r3, s[0][1][2], 0x080102FC, 0xE3FEFE00, 0xFB02020B, 0xFE03F203);
	r0 = D(r0, s[0][2][0], 0xFF0E0AF9, 0x010B0C11, 0x0108F204, 0x01FAF6EF);
	r1 = D(r1, s[0][2][0], 0xFF0402F5, 0x01FBFF09, 0xF8020902, 0x03FC060A);
	r2 = D(r2, s[0][2][0], 0x00FC06F6, 0x000C0B07, 0xFC130005, 0x0602FF04);
	r3 = D(r3, s[0][2][0], 0xFAF7FEFD, 0x01040EFB, 0xFA0106FF, 0x0202FC01);
	r0 = D(r0, s[0][2][1], 0x05F7FDFB, 0xF7FA0BF2, 0xF61102F9, 0x04F4030C);
	r1 = D(r1, s[0][2][1], 0xFCFAFC02, 0xFDFE04F3, 0x04FE15F7, 0x05040AF6);
	r2 = D(r2, s[0][2][1], 0x06022207, 0x0706FB0A, 0xFC10FBEE, 0xFD080DFC);
	r3 = D(r3, s[0][2][1], 0xFCFDFC03, 0xF40EF700, 0xFCEF1509, 0x0000EB07);
	r0 = D(r0, s[0][2][2], 0xFEF802F1, 0x040DFCF7, 0xFC19F606, 0x050BFDFD);
	r1 = D(r1, s[0][2][2], 0x0AFF02FC, 0xF00CFD06, 0x010307FE, 0x0201FA06);
	r2 = D(r2, s[0][2][2], 0x0703E702, 0xFDFEFE0E, 0x001BFFF7, 0x0005F202);
	r3 = D(r3, s[0][2][2], 0xFAF70002, 0x0EFE0BFB, 0x09F801FA, 0xFC110CF9);
	r0 = D(r0, s[1][0][0], 0x04FD0105, 0x07FA00FE, 0xFD1A0503, 0xFFF805FB);
	r1 = D(r1, s[1][0][0], 0xF7030DF1, 0x0D0DFDFF, 0xFBF9FB00, 0x0DFD05FC);
	r2 = D(r2, s[1][0][0], 0xEFFD080A, 0x0801F7F8, 0xFA0303FE, 0x04060E08);
	r3 = D(r3, s[1][0][0], 0x06FB041A, 0xEF0002FD, 0x00FE0905, 0x00010EFB);
	r0 = D(r0, s[1][0][1], 0xEC02F504, 0x08FDFAF3, 0x082003FD, 0x10F5FE12);
	r1 = D(r1, s[1][0][1], 0x02FC021F, 0x0204FBF9, 0x0002020E, 0xEA030005);
	r2 = D(r2, s[1][0][1], 0x0604FA09, 0xEFFAF7F1, 0xF906F1F6, 0xF9F5FEFE);
	r3 = D(r3, s[1][0][1], 0xF3FEF9FE, 0xFA050B0B, 0xFA06091B, 0x0DF7FF02);
	r0 = D(r0, s[1][0][2], 0xFF0F0606, 0xF407F80E, 0x070B04F2, 0x00F4F6F3);
	r1 = D(r1, s[1][0][2], 0x0807FD08, 0x12FAE400, 0xEE0A1100, 0xFEF1F804);
	r2 = D(r2, s[1][0][2], 0x01010405, 0xF6FAF704, 0x0A0708FB, 0x071908EF);
	r3 = D(r3, s[1][0][2], 0xFE08FE11, 0xFDFD12FA, 0x04F60C06, 0x0FFEF1FD);
	r0 = D(r0, s[1][1][0], 0x0402E902, 0xEE01F0FE, 0x030EFC06, 0x14020800);
	r1 = D(r1, s[1][1][0], 0xFDFBF502, 0x02060B00, 0x0CF90301, 0xF7ECF40E);
	r2 = D(r2, s[1][1][0], 0x07FB01FA, 0x00FC0AFC, 0xFE06F4FF, 0xF7F7FA0A);
	r3 = D(r3, s[1][1][0], 0x0F01FE0A, 0xFBF8F201, 0x0BF8F60B, 0x05FCFC09);
	r0 = D(r0, s[1][1][1], 0xE7F8F40D, 0xFBF612F6, 0xFE170F06, 0x0CFC0F17);
	r1 = D(r1, s[1][1][1], 0x21FFF208, 0x090B0806, 0x0C0702FA, 0xE3F00217);
	r2 = D(r2, s[1][1][1], 0x091210ED, 0x0AF7EE19, 0xDE0EF912, 0xE306FE0E);
	r3 = D(r3, s[1][1][1], 0xE4F10A04, 0xED000319, 0xF0F8F819, 0xE101FAF7);
	r0 = D(r0, s[1][1][2], 0xFA04FEF7, 0xE505F905, 0x0D030409, 0x06FE0805);
	r1 = D(r1, s[1][1][2], 0x00EAF4FE, 0x0C07FB06, 0xF401FEF5, 0xF1FCF819);
	r2 = D(r2, s[1][1][2], 0xF4030303, 0x08FDF80B, 0xEC0802F2, 0xFDFE0CF2);
	r3 = D(r3, s[1][1][2], 0xFF010515, 0xF70AFD13, 0x19F6FA0D, 0x11F505EF);
	r0 = D(r0, s[1][2][0], 0x00010002, 0x0706F1F8, 0x0509080A, 0x01F60302);
	r1 = D(r1, s[1][2][0], 0xECFE09FA, 0x000BF6F9, 0x16FCFA0B, 0xF402FFF9);
	r2 = D(r2, s[1][2][0], 0x0304F904, 0xFCF8F6FE, 0xF8FEF6FB, 0x000AFFF6);
	r3 = D(r3, s[1][2][0], 0xFD02FAF4, 0x02040A08, 0x0DF30008, 0x000402FE);
	r0 = D(r0, s[1][2][1], 0xFD0520F0, 0x160CF10C, 0x0E02FD14, 0x0702ED12);
	r1 = D(r1, s[1][2][1], 0xFE02FFEE, 0x0AFB0BF4, 0xFB04FC00, 0x0603F60E);
	r2 = D(r2, s[1][2][1], 0xFDEBEA0D, 0xFA080A07, 0x03000AF8, 0xFF08FDF8);
	r3 = D(r3, s[1][2][1], 0xF8FF0905, 0x01F8F703, 0x04F9FB06, 0x070008EF);
	r0 = D(r0, s[1][2][2], 0xF2090401, 0x1109FDFE, 0x0A030FFC, 0xFAF4F8FD);
	r1 = D(r1, s[1][2][2], 0xFBF40101, 0x05FB03FC, 0x00FF0D02, 0xFC0109F7);
	r2 = D(r2, s[1][2][2], 0xFA0915F8, 0x00FAFDF9, 0x02130100, 0xF8090DFC);
	r3 = D(r3, s[1][2][2], 0x0804FE02, 0xED0A05FE, 0xFBF10106, 0x13F3FC08);
	vec4 f0 = vec4(r0) * 6.20001240e-05;
	f0 += vec4(-4.398e-02, 2.928e-02, -1.179e-02, -1.270e-02);
	imageStore(out_image, opos + ivec2(0, 0), vec4(f0));
	vec4 f1 = vec4(r1) * 6.20001240e-05;
	f1 += vec4(-1.053e-02, 1.379e-02, -7.101e-03, 3.545e-02);
	imageStore(out_image, opos + ivec2(1, 0), vec4(f1));
	vec4 f2 = vec4(r2) * 6.20001240e-05;
	f2 += vec4(-1.260e-02, -5.295e-04, 1.416e-02, 2.977e-02);
	imageStore(out_image, opos + ivec2(0, 1), vec4(f2));
	vec4 f3 = vec4(r3) * 6.20001240e-05;
	f3 += vec4(8.882e-04, -1.033e-02, 9.838e-03, -2.043e-02);
	imageStore(out_image, opos + ivec2(1, 1), vec4(f3));
}

//!DESC CuNNy-16x16C-TEST-conv12
//!HOOK LUMA
//!COMPUTE 16 16 8 8
//!BIND conv11
//!BIND LUMA
//!SAVE conv12
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_spirv_intrinsics : require
#extension GL_EXT_control_flow_attributes : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) ivec4(r.x + dp4(s, a, 0), r.y + dp4(s, b, 0), r.z + dp4(s, c, 0), r.w + dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	[[unroll]] for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		[[unroll]] for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(2, 2) + ivec2(1, 1)) * conv11_pt;
			r = conv11_gather(p, 0);
			g = conv11_gather(p, 1);
			b = conv11_gather(p, 2);
			a = conv11_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.00000000e+00;
			vec4 v2 = vec4(r.z, g.z, b.z, a.z) * 1.00000000e+00;
			vec4 v4 = vec4(r.x, g.x, b.x, a.x) * 1.00000000e+00;
			vec4 v6 = vec4(r.y, g.y, b.y, a.y) * 1.00000000e+00;
			vec4 v1 = max(-v0, vec4(0));
			v0 = max(v0, vec4(0));
			vec4 v3 = max(-v2, vec4(0));
			v2 = max(v2, vec4(0));
			vec4 v5 = max(-v4, vec4(0));
			v4 = max(v4, vec4(0));
			vec4 v7 = max(-v6, vec4(0));
			v6 = max(v6, vec4(0));
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s[2][3][3];
	ivec4 r0 = ivec4(0);
	ivec4 r1 = ivec4(0);
	ivec4 r2 = ivec4(0);
	ivec4 r3 = ivec4(0);
	s[0][0][0] = G[0][xy.y+0][xy.x+0]; s[0][0][1] = G[0][xy.y+0][xy.x+1];
	s[0][0][2] = G[0][xy.y+0][xy.x+2]; s[0][1][0] = G[0][xy.y+1][xy.x+0];
	s[0][1][1] = G[0][xy.y+1][xy.x+1]; s[0][1][2] = G[0][xy.y+1][xy.x+2];
	s[0][2][0] = G[0][xy.y+2][xy.x+0]; s[0][2][1] = G[0][xy.y+2][xy.x+1];
	s[0][2][2] = G[0][xy.y+2][xy.x+2]; s[1][0][0] = G[1][xy.y+0][xy.x+0];
	s[1][0][1] = G[1][xy.y+0][xy.x+1]; s[1][0][2] = G[1][xy.y+0][xy.x+2];
	s[1][1][0] = G[1][xy.y+1][xy.x+0]; s[1][1][1] = G[1][xy.y+1][xy.x+1];
	s[1][1][2] = G[1][xy.y+1][xy.x+2]; s[1][2][0] = G[1][xy.y+2][xy.x+0];
	s[1][2][1] = G[1][xy.y+2][xy.x+1]; s[1][2][2] = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0xF4FA0106, 0xF2FA0402, 0x04040107, 0x01FFF902);
	r1 = D(r1, s[0][0][0], 0xFB02F201, 0x02020201, 0x0707F9FD, 0xFC0109FA);
	r2 = D(r2, s[0][0][0], 0xF4F4FC0D, 0xF5FE0404, 0xEDF70B04, 0x02FC09FF);
	r3 = D(r3, s[0][0][0], 0xF9000503, 0xF0F7F406, 0x07FBFB0A, 0x00FF0405);
	r0 = D(r0, s[0][0][1], 0xF9FF02F0, 0xFF03FFFA, 0x09FA1808, 0xF0EB05FB);
	r1 = D(r1, s[0][0][1], 0x01F4E10D, 0xFF0015F4, 0xFCFAF90E, 0xF2EC071A);
	r2 = D(r2, s[0][0][1], 0xFFFF070E, 0x040709EE, 0x04010FEB, 0x000708FE);
	r3 = D(r3, s[0][0][1], 0xFCFDFE0C, 0x0204F20C, 0x00070DF9, 0xFFFF0714);
	r0 = D(r0, s[0][0][2], 0xFCF5FBFC, 0x03FB05EE, 0x0908F908, 0xFE02FFF0);
	r1 = D(r1, s[0][0][2], 0x0003FC0D, 0x01FBF10B, 0x01F20E00, 0x0001FD04);
	r2 = D(r2, s[0][0][2], 0x02020505, 0x02F8F800, 0x0B06140F, 0xFAF7FFF4);
	r3 = D(r3, s[0][0][2], 0x08070901, 0x0704FF0A, 0xF8FAFE08, 0xFF0301FD);
	r0 = D(r0, s[0][1][0], 0xFFFD0003, 0x05030304, 0x080608F7, 0x0EFE000B);
	r1 = D(r1, s[0][1][0], 0xF3F90501, 0xF90007F2, 0x04FBF806, 0xF90AFD06);
	r2 = D(r2, s[0][1][0], 0x0EFF0209, 0x0003FCFB, 0x04FFFB17, 0xF9FAF609);
	r3 = D(r3, s[0][1][0], 0xF302FD0A, 0x0301FB01, 0xFAFAF1F7, 0x020CFBF5);
	r0 = D(r0, s[0][1][1], 0xFD02EF01, 0x2BFFFF10, 0x0708F502, 0xF5EEF1F4);
	r1 = D(r1, s[0][1][1], 0xE60401F5, 0x1E0BFFFC, 0xFEFD0BFC, 0xF3F60B04);
	r2 = D(r2, s[0][1][1], 0x1D18F807, 0x1412020D, 0x070DF30A, 0x0B181001);
	r3 = D(r3, s[0][1][1], 0xFCF404F5, 0xEAEAFFEF, 0xEEF40CE9, 0xF0F00116);
	r0 = D(r0, s[0][1][2], 0xF5030701, 0xF5F1F6FB, 0x07F9F204, 0x000909FE);
	r1 = D(r1, s[0][1][2], 0xFA000500, 0xFB010410, 0x00FC09FD, 0x04FCF2FA);
	r2 = D(r2, s[0][1][2], 0x00070AF4, 0x01F8FBFF, 0x01FB0D01, 0x12FFF109);
	r3 = D(r3, s[0][1][2], 0x04FC0E03, 0x01FBF200, 0x0D151000, 0xFD07FAF6);
	r0 = D(r0, s[0][2][0], 0x07F60202, 0xFAFAFDF9, 0xFEFF0007, 0x03F500FF);
	r1 = D(r1, s[0][2][0], 0xF901F7F5, 0x00020CEF, 0xFBFF0BFD, 0xFA0907FE);
	r2 = D(r2, s[0][2][0], 0xFCF80900, 0xFD04FAFA, 0x0EF904FC, 0x02000203);
	r3 = D(r3, s[0][2][0], 0xF3FD0F0A, 0x000BEF03, 0xFCFE08FA, 0x03040204);
	r0 = D(r0, s[0][2][1], 0xFA040109, 0x09F4F705, 0x13F1F31D, 0x02F2F2FE);
	r1 = D(r1, s[0][2][1], 0xF7FF0B12, 0xF80EFEFD, 0x00010A07, 0x03F402F2);
	r2 = D(r2, s[0][2][1], 0xFCF20B06, 0x06040403, 0x0006FF00, 0x0B00EDEC);
	r3 = D(r3, s[0][2][1], 0x07F0FEF9, 0xF5FE0CEA, 0xEC00F909, 0xF80D0300);
	r0 = D(r0, s[0][2][2], 0xFB01FC03, 0xFB07F905, 0x0BF803FF, 0xFEF5F906);
	r1 = D(r1, s[0][2][2], 0xFD020701, 0xF60F02F7, 0xFBF903FC, 0x03FBFDFB);
	r2 = D(r2, s[0][2][2], 0xFCF705F2, 0xFA0708FF, 0x02FA0104, 0x00FDFB04);
	r3 = D(r3, s[0][2][2], 0x01FAFD02, 0x000404FC, 0xE902FBFE, 0xFBFC04F1);
	r0 = D(r0, s[1][0][0], 0xF9FCF8F5, 0x0603FB05, 0x09160505, 0x0B0A01F9);
	r1 = D(r1, s[1][0][0], 0x02EA0903, 0x00FF0401, 0x01090DFB, 0x110800FD);
	r2 = D(r2, s[1][0][0], 0xF9150505, 0xFAE8FBEC, 0x15F103FD, 0x0212F906);
	r3 = D(r3, s[1][0][0], 0x05080902, 0x07040B01, 0xFEFE03FB, 0xFA05F509);
	r0 = D(r0, s[1][0][1], 0xF90E07FC, 0x0204050D, 0x0E020CFB, 0x04F0FD06);
	r1 = D(r1, s[1][0][1], 0xF30E13FB, 0xFD11FE00, 0xE6F0FB0C, 0xFDFAEF05);
	r2 = D(r2, s[1][0][1], 0xF3F3FA04, 0x03FCFCE7, 0xFD01F602, 0xF6FB07FA);
	r3 = D(r3, s[1][0][1], 0xF1F002FF, 0x06030200, 0x02EFFE05, 0x09F907F9);
	r0 = D(r0, s[1][0][2], 0x020007FB, 0x0D01FC10, 0xF50808FB, 0x08070006);
	r1 = D(r1, s[1][0][2], 0xF8F611F6, 0xE8FE0AF9, 0x02F60EEE, 0xFB13FA0B);
	r2 = D(r2, s[1][0][2], 0xF70B0BFE, 0xF904F3FB, 0x0600FCF1, 0x0EFFF70E);
	r3 = D(r3, s[1][0][2], 0x06FE0105, 0xFEF207FF, 0xF00604F8, 0xFF00F909);
	r0 = D(r0, s[1][1][0], 0xF0F000FF, 0xF70001FE, 0x131B0D0F, 0x0017FA01);
	r1 = D(r1, s[1][1][0], 0x0B00120B, 0x03FBF2F7, 0x13FA070D, 0x0809F302);
	r2 = D(r2, s[1][1][0], 0xD8FEF90D, 0x01F30CFA, 0xE81903F9, 0xF110FC0B);
	r3 = D(r3, s[1][1][0], 0xFB0F0DFF, 0x05FE16F1, 0x00F3050C, 0x09FB09F8);
	r0 = D(r0, s[1][1][1], 0xF20610FB, 0xF200FFF6, 0xF7FB0807, 0x0D0B0900);
	r1 = D(r1, s[1][1][1], 0x0DF30B11, 0xECFD05F6, 0xDDFFF411, 0x1004EC09);
	r2 = D(r2, s[1][1][1], 0xFAF11403, 0x130BF4FC, 0xE3EA1AF5, 0x0211ED19);
	r3 = D(r3, s[1][1][1], 0xE4EFEF0D, 0xFEEDFD04, 0x0AFBE816, 0x0A0DFFE2);
	r0 = D(r0, s[1][1][2], 0xFE08EFFF, 0x04000307, 0x0407080D, 0x14F4F107);
	r1 = D(r1, s[1][1][2], 0x00FC03FD, 0x0C0D02FF, 0xFDFE00F0, 0x0711FE04);
	r2 = D(r2, s[1][1][2], 0x01F0FFFE, 0xFA04F7FB, 0xF70F0205, 0xF3070507);
	r3 = D(r3, s[1][1][2], 0x0BFDFD01, 0xE6FC0BF2, 0xFDF1F507, 0x1DFFFE0D);
	r0 = D(r0, s[1][2][0], 0xF200FEFB, 0x02040403, 0xFC050109, 0xFCFEF7FA);
	r1 = D(r1, s[1][2][0], 0x02FC0710, 0xFF01F8FC, 0x0002FE02, 0x05FBF5F8);
	r2 = D(r2, s[1][2][0], 0x00F8FC0C, 0xFE06FEF7, 0xF9E80304, 0xFB04FCFA);
	r3 = D(r3, s[1][2][0], 0x00F404FA, 0x0EEE1007, 0xFDF80107, 0x0411FC00);
	r0 = D(r0, s[1][2][1], 0xF0F3FDED, 0xFA00FEFD, 0x02FF05FB, 0xFBF908F4);
	r1 = D(r1, s[1][2][1], 0x06F3FFF3, 0x07000608, 0xF9FB01FC, 0xFB00FC06);
	r2 = D(r2, s[1][2][1], 0x03F0F300, 0xF7FAF9FB, 0xF5F909FF, 0xED0F1009);
	r3 = D(r3, s[1][2][1], 0xFF09F910, 0x0E0DEF0D, 0xF1E80EEF, 0x07FEFB05);
	r0 = D(r0, s[1][2][2], 0xFBF302F6, 0xFC0D000C, 0x080CFD03, 0x020D05F4);
	r1 = D(r1, s[1][2][2], 0xF7F4FEFA, 0x08FEF812, 0xECFC03FE, 0x02F7FB05);
	r2 = D(r2, s[1][2][2], 0x0D0D0011, 0xF901F9FD, 0x09F80502, 0xFD0A0209);
	r3 = D(r3, s[1][2][2], 0xFC0D02FD, 0x02E700FB, 0x02020DFB, 0xFE08FD06);
	s[0][0][0] = G[2][xy.y+0][xy.x+0]; s[0][0][1] = G[2][xy.y+0][xy.x+1];
	s[0][0][2] = G[2][xy.y+0][xy.x+2]; s[0][1][0] = G[2][xy.y+1][xy.x+0];
	s[0][1][1] = G[2][xy.y+1][xy.x+1]; s[0][1][2] = G[2][xy.y+1][xy.x+2];
	s[0][2][0] = G[2][xy.y+2][xy.x+0]; s[0][2][1] = G[2][xy.y+2][xy.x+1];
	s[0][2][2] = G[2][xy.y+2][xy.x+2]; s[1][0][0] = G[3][xy.y+0][xy.x+0];
	s[1][0][1] = G[3][xy.y+0][xy.x+1]; s[1][0][2] = G[3][xy.y+0][xy.x+2];
	s[1][1][0] = G[3][xy.y+1][xy.x+0]; s[1][1][1] = G[3][xy.y+1][xy.x+1];
	s[1][1][2] = G[3][xy.y+1][xy.x+2]; s[1][2][0] = G[3][xy.y+2][xy.x+0];
	s[1][2][1] = G[3][xy.y+2][xy.x+1]; s[1][2][2] = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0x0E0908FD, 0x0C0109F6, 0xFDFFF900, 0x00FD02FD);
	r1 = D(r1, s[0][0][0], 0xFA02F9FA, 0x0601FB0B, 0xFFFA0700, 0x0001160E);
	r2 = D(r2, s[0][0][0], 0x0C030BFD, 0xF405FA0D, 0x07FC170A, 0x0500180C);
	r3 = D(r3, s[0][0][0], 0x09FD0EFE, 0x090500F7, 0x060CFD02, 0xFFFEFBFB);
	r0 = D(r0, s[0][0][1], 0x0104F2F8, 0x1500FCFB, 0x0AF5FDF7, 0x05FB0204);
	r1 = D(r1, s[0][0][1], 0x03F8FCF8, 0xFDF8FA00, 0x0D061208, 0x18092201);
	r2 = D(r2, s[0][0][1], 0x18031202, 0x0001DF06, 0x00FCE604, 0xF702EBFA);
	r3 = D(r3, s[0][0][1], 0x01040AF8, 0x07F2F9FC, 0x09F90B05, 0xF000E800);
	r0 = D(r0, s[0][0][2], 0x010DF204, 0x09F9EDF5, 0x00FFFFF2, 0x070404FF);
	r1 = D(r1, s[0][0][2], 0x0104F3FB, 0x0007F702, 0x0406F3FB, 0x1307F2F1);
	r2 = D(r2, s[0][0][2], 0x0B11FEFA, 0xFC04EA0C, 0x05FEEA04, 0x0705E814);
	r3 = D(r3, s[0][0][2], 0x0A0909FA, 0x07010DFC, 0x000210FA, 0xFEF4FE0A);
	r0 = D(r0, s[0][1][0], 0x01FCEEFF, 0x06FFFEFA, 0xFC050A0A, 0xFEFDFCFE);
	r1 = D(r1, s[0][1][0], 0xE5FB0A04, 0x0FFDEAFA, 0x03F9FCF1, 0x0904F80D);
	r2 = D(r2, s[0][1][0], 0xFF0C0C00, 0xEF00EC0D, 0x0D04250B, 0x190504F1);
	r3 = D(r3, s[0][1][0], 0x01060407, 0x03F50703, 0x00090402, 0x10F5FC0A);
	r0 = D(r0, s[0][1][1], 0x151508EA, 0x1601E300, 0x04EC28F2, 0xE7F2F711);
	r1 = D(r1, s[0][1][1], 0xE10EEA05, 0xF4F8D302, 0xF0050D12, 0x03000200);
	r2 = D(r2, s[0][1][1], 0xF2EA0104, 0x00F502F2, 0x03F11BFE, 0x1BFFF9F8);
	r3 = D(r3, s[0][1][1], 0xFA0CFD00, 0xFA0A050C, 0xFCFA1803, 0x05FAF20D);
	r0 = D(r0, s[0][1][2], 0xF8FA12F4, 0x090D15F6, 0xFB071800, 0xF2FD1DED);
	r1 = D(r1, s[0][1][2], 0xEA071508, 0x00F7EAF6, 0x0305EF0B, 0xFEF5FEFA);
	r2 = D(r2, s[0][1][2], 0xEFF421FA, 0xEBEEFE03, 0xFEF714F9, 0xE5F7D30A);
	r3 = D(r3, s[0][1][2], 0x00FBFBFC, 0x0406FB11, 0xF90712EE, 0x03F7DA07);
	r0 = D(r0, s[0][2][0], 0x0708F9F7, 0x0D0011EE, 0xFEFD01FE, 0x0E000B00);
	r1 = D(r1, s[0][2][0], 0x00050409, 0x07040EF9, 0x03FE02FC, 0x05040905);
	r2 = D(r2, s[0][2][0], 0xFE02FE06, 0xFA040BFB, 0xF800F009, 0x110CF401);
	r3 = D(r3, s[0][2][0], 0x05FC06F8, 0x04F806F6, 0x0E0103F7, 0x07F9FDF4);
	r0 = D(r0, s[0][2][1], 0xFCFEED00, 0x0DFCF3F8, 0x11FAF8F9, 0xF805F70B);
	r1 = D(r1, s[0][2][1], 0xFFFB17FE, 0xFA0409F8, 0xF9FD0C05, 0xFBFBEF02);
	r2 = D(r2, s[0][2][1], 0x01F7E9F6, 0xEAF30E00, 0x04FFF70A, 0xFE03D422);
	r3 = D(r3, s[0][2][1], 0x0CF811F3, 0x080410FD, 0x12FC1507, 0x0605F103);
	r0 = D(r0, s[0][2][2], 0x08000103, 0x0A00E9F6, 0x0413E500, 0x09FCFCFC);
	r1 = D(r1, s[0][2][2], 0xF303F402, 0xF7070108, 0xFBFEE9F6, 0xFBF8F502);
	r2 = D(r2, s[0][2][2], 0x04FAFEFF, 0x020203FF, 0x080505FA, 0x0D09DF28);
	r3 = D(r3, s[0][2][2], 0xFCF20EDE, 0xFE0117F8, 0x0EFF0C03, 0xFB05FEFD);
	r0 = D(r0, s[1][0][0], 0x0500F400, 0x00FB01FF, 0x07F2FEF2, 0x05F603FB);
	r1 = D(r1, s[1][0][0], 0x06FE0CF8, 0x0402FC07, 0x05040BF5, 0xFBFE01F2);
	r2 = D(r2, s[1][0][0], 0x02FE0202, 0xF7FA0603, 0xFDFE010B, 0xFE06F8FA);
	r3 = D(r3, s[1][0][0], 0xFE0CFFFC, 0xFDFFFFFC, 0xFDF800FD, 0x04FF00F7);
	r0 = D(r0, s[1][0][1], 0x0205FDFB, 0xF7FB06F3, 0xF8F2F904, 0x05F7FD01);
	r1 = D(r1, s[1][0][1], 0x0C0302F4, 0x0600FBF2, 0xFEFAF5F9, 0xECE5F906);
	r2 = D(r2, s[1][0][1], 0xEFF3FEFC, 0xFCFA0D0B, 0xF8FC06FC, 0xFE04060C);
	r3 = D(r3, s[1][0][1], 0x04F807FB, 0xFA0401FC, 0x000A0201, 0x04060401);
	r0 = D(r0, s[1][0][2], 0xFDFEFB08, 0x00001102, 0x01EBF80A, 0xFAFEF9FF);
	r1 = D(r1, s[1][0][2], 0x02F3F202, 0x0AF1040B, 0xFCF0FAF1, 0xFBF307FC);
	r2 = D(r2, s[1][0][2], 0xF9F1FBF7, 0xF8FD000E, 0xFAF90507, 0xFE040901);
	r3 = D(r3, s[1][0][2], 0xF3F301F3, 0xFAF1FAF8, 0x0208FD06, 0x000B09F7);
	r0 = D(r0, s[1][1][0], 0x101505FB, 0x040D04FB, 0x04F80706, 0xFD050AF9);
	r1 = D(r1, s[1][1][0], 0x150504F5, 0x02FB0407, 0xFF050608, 0xF5FAFBF3);
	r2 = D(r2, s[1][1][0], 0xF90BFEFC, 0xF9F504F9, 0xEA02FE0B, 0xF614090B);
	r3 = D(r3, s[1][1][0], 0xFFFC00FB, 0x07FB0200, 0xFAFB0608, 0x01040303);
	r0 = D(r0, s[1][1][1], 0xE41CF80C, 0x071E0FF9, 0xFB0CFE0A, 0x0D1F06EE);
	r1 = D(r1, s[1][1][1], 0x0D060F02, 0x17FBF5FA, 0x090AFAF7, 0xF3E404F7);
	r2 = D(r2, s[1][1][1], 0xFC1603FA, 0xE114F700, 0xF00FFB02, 0xF9FC00F6);
	r3 = D(r3, s[1][1][1], 0x10FB0203, 0x14EC0100, 0x010B00F4, 0x040606FC);
	r0 = D(r0, s[1][1][2], 0xFC08FC0B, 0x0314ECF9, 0x0BF107F8, 0x00F7F5FF);
	r1 = D(r1, s[1][1][2], 0x08FBFC0C, 0xF0F300F4, 0x02F703FB, 0x08FE09FB);
	r2 = D(r2, s[1][1][2], 0xFEFC01F7, 0x060FF007, 0xF90C020F, 0x0DF6F6FC);
	r3 = D(r3, s[1][1][2], 0x0DF9FDED, 0x00FC0AF6, 0x0712F4F8, 0xF60608FB);
	r0 = D(r0, s[1][2][0], 0x09030002, 0x020308FF, 0x09F30211, 0xFB000101);
	r1 = D(r1, s[1][2][0], 0x01F3FB00, 0x04FEFA01, 0xFAF6FE05, 0x030400FC);
	r2 = D(r2, s[1][2][0], 0x06020008, 0xF5FFF9F8, 0x09EDFCFA, 0xFCF4FE0B);
	r3 = D(r3, s[1][2][0], 0xFFF903FF, 0xFE0505F7, 0xFCF900FE, 0x05060E02);
	r0 = D(r0, s[1][2][1], 0x0410060A, 0x0A0D040D, 0xF3FFF5F3, 0x10F802FE);
	r1 = D(r1, s[1][2][1], 0x0207F702, 0x06FFF806, 0xFD02FE00, 0x0EF112FD);
	r2 = D(r2, s[1][2][1], 0x09070B09, 0x0AE30010, 0x0AFEFE02, 0x03FA040E);
	r3 = D(r3, s[1][2][1], 0xF8FBF4FD, 0x070E05F9, 0xF207F3F3, 0xFB08FEF1);
	r0 = D(r0, s[1][2][2], 0xFB040702, 0x090F07F8, 0xFBFF0707, 0xF1090002);
	r1 = D(r1, s[1][2][2], 0xFF01FB00, 0xF8010905, 0x02FC040A, 0x050803FA);
	r2 = D(r2, s[1][2][2], 0x0008FAED, 0xFBF50F07, 0xF9FDF904, 0xF90C0102);
	r3 = D(r3, s[1][2][2], 0x0E0502FF, 0x1402FCFC, 0xF20203F7, 0x070AFFFF);
	s[0][0][0] = G[4][xy.y+0][xy.x+0]; s[0][0][1] = G[4][xy.y+0][xy.x+1];
	s[0][0][2] = G[4][xy.y+0][xy.x+2]; s[0][1][0] = G[4][xy.y+1][xy.x+0];
	s[0][1][1] = G[4][xy.y+1][xy.x+1]; s[0][1][2] = G[4][xy.y+1][xy.x+2];
	s[0][2][0] = G[4][xy.y+2][xy.x+0]; s[0][2][1] = G[4][xy.y+2][xy.x+1];
	s[0][2][2] = G[4][xy.y+2][xy.x+2]; s[1][0][0] = G[5][xy.y+0][xy.x+0];
	s[1][0][1] = G[5][xy.y+0][xy.x+1]; s[1][0][2] = G[5][xy.y+0][xy.x+2];
	s[1][1][0] = G[5][xy.y+1][xy.x+0]; s[1][1][1] = G[5][xy.y+1][xy.x+1];
	s[1][1][2] = G[5][xy.y+1][xy.x+2]; s[1][2][0] = G[5][xy.y+2][xy.x+0];
	s[1][2][1] = G[5][xy.y+2][xy.x+1]; s[1][2][2] = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0xFF03F50C, 0x11FAFEF9, 0xF50109F5, 0xFAFF070E);
	r1 = D(r1, s[0][0][0], 0x0BFCFB0C, 0xF4F9FDF6, 0x0A070309, 0x0F070203);
	r2 = D(r2, s[0][0][0], 0xFA01020E, 0x0A050504, 0x041105FE, 0x0900F4F1);
	r3 = D(r3, s[0][0][0], 0x0204FC03, 0xFEFE0406, 0x10F80104, 0xFC02F3F0);
	r0 = D(r0, s[0][0][1], 0x0B08F90B, 0xFFF6F7F7, 0x04E7FE04, 0xF200010E);
	r1 = D(r1, s[0][0][1], 0x020D0702, 0x0FF9F504, 0x19F7070D, 0x030905F8);
	r2 = D(r2, s[0][0][1], 0xF8F7F212, 0x10F50AF6, 0x0700FBFA, 0xF9FD02F9);
	r3 = D(r3, s[0][0][1], 0xFF0C05F6, 0x0A0000F9, 0x0CFA0407, 0xF70004FA);
	r0 = D(r0, s[0][0][2], 0xF5050004, 0x04F6F2F8, 0xF70100EC, 0x0EF7FF04);
	r1 = D(r1, s[0][0][2], 0xE91402FA, 0xF90B0400, 0xF70200FB, 0xFEFBFBF2);
	r2 = D(r2, s[0][0][2], 0xFFF5FB06, 0xFA060E0B, 0x0302FEFD, 0xFAFDF7FD);
	r3 = D(r3, s[0][0][2], 0x08F0FFFB, 0xF4FF0402, 0x070B0505, 0xFEF906FD);
	r0 = D(r0, s[0][1][0], 0x19FF030D, 0x03F904F3, 0x14F3FE0F, 0xF401F104);
	r1 = D(r1, s[0][1][0], 0x10FDF70E, 0xFA05EE01, 0x000BF5FB, 0x0204FD01);
	r2 = D(r2, s[0][1][0], 0xF9EE05FE, 0xFEF50B03, 0x0A0903FC, 0x07FA01F0);
	r3 = D(r3, s[0][1][0], 0x1207F7FC, 0x0C00F5FF, 0x00FCFC03, 0xF1EDFFFF);
	r0 = D(r0, s[0][1][1], 0xFD0F1012, 0xFCFAFAF1, 0xF41F0FF7, 0xECF21402);
	r1 = D(r1, s[0][1][1], 0x0ADFFB1C, 0x14FE050F, 0x0BFE0D02, 0x0409F206);
	r2 = D(r2, s[0][1][1], 0xF7F11604, 0xFFF50212, 0xF10716FD, 0xFE06F3FB);
	r3 = D(r3, s[0][1][1], 0x0902F7F0, 0x070DF505, 0xF5F90412, 0xF9FCEFFB);
	r0 = D(r0, s[0][1][2], 0x0105FD07, 0xF9F9F8F1, 0xE70F05E2, 0x05F40500);
	r1 = D(r1, s[0][1][2], 0xF10409FE, 0xF6FA08FE, 0xF70007FB, 0x010400F6);
	r2 = D(r2, s[0][1][2], 0xF7EFFE05, 0xF5F20400, 0x0408FA07, 0xF90EF8F8);
	r3 = D(r3, s[0][1][2], 0x0AF601FF, 0xF60B0009, 0xF0F3FE03, 0x08F7F7F3);
	r0 = D(r0, s[0][2][0], 0x060E0010, 0x0700FAF3, 0x050C0AF9, 0xF90CFE0B);
	r1 = D(r1, s[0][2][0], 0xF908F507, 0x08F31109, 0xF607FAFA, 0xFDFB05FE);
	r2 = D(r2, s[0][2][0], 0xF5F30B01, 0xFEFF1304, 0x15FD0607, 0xFBF9F6F9);
	r3 = D(r3, s[0][2][0], 0x0EFFFD06, 0x0FF8FAFA, 0xFF0702FF, 0xF10400FC);
	r0 = D(r0, s[0][2][1], 0x030DFF16, 0xFDF702F0, 0x02F007F0, 0xF305FFFE);
	r1 = D(r1, s[0][2][1], 0xFAE80F0D, 0x0DF0F904, 0xFF04F5FE, 0x010207F9);
	r2 = D(r2, s[0][2][1], 0x06E90802, 0x0E04FE09, 0x0FEAF308, 0xFA14F2EE);
	r3 = D(r3, s[0][2][1], 0x150206F3, 0x1EFE0EFF, 0xFFFBFBFE, 0xF6F902FA);
	r0 = D(r0, s[0][2][2], 0x0B04FB03, 0x0CFB03F0, 0x05FA03FF, 0x0FFB0203);
	r1 = D(r1, s[0][2][2], 0xF303020F, 0xFEF9F7FB, 0xF3FCFD07, 0xF3F90D01);
	r2 = D(r2, s[0][2][2], 0x06EC0EF9, 0x02070405, 0x08EEFA02, 0xF30600F0);
	r3 = D(r3, s[0][2][2], 0x1BEF02F9, 0xE7040003, 0x0805FCF9, 0x03FF00FE);
	r0 = D(r0, s[1][0][0], 0xFD05F300, 0xFE0305FA, 0xFB0202FD, 0x06060405);
	r1 = D(r1, s[1][0][0], 0xEE00FFFC, 0xFF0002FB, 0xF8F9FFFA, 0x090502F7);
	r2 = D(r2, s[1][0][0], 0xFB02F502, 0x0BFEF909, 0xFE09F5F2, 0x0D00FFFA);
	r3 = D(r3, s[1][0][0], 0x0302EEF5, 0xF207F5FD, 0xF7FC0804, 0xFF000A09);
	r0 = D(r0, s[1][0][1], 0x01FE14FC, 0x080B03FA, 0x04F90AEE, 0x03FB0005);
	r1 = D(r1, s[1][0][1], 0x02F312FE, 0xFFF9F3F9, 0xF104F9F5, 0xFEF800F2);
	r2 = D(r2, s[1][0][1], 0x030EF904, 0xEF14040F, 0xF60C090D, 0x0211E9F5);
	r3 = D(r3, s[1][0][1], 0x080200FD, 0xF7FE1400, 0x02F90208, 0x08FDF3FD);
	r0 = D(r0, s[1][0][2], 0x0AFF05FB, 0x0313FEF8, 0xFAF80904, 0x03040003);
	r1 = D(r1, s[1][0][2], 0x00F40905, 0xFCFAF9F9, 0x05FA0102, 0x020014FF);
	r2 = D(r2, s[1][0][2], 0x0907FB02, 0xF605020E, 0x0BF70705, 0x0406FF00);
	r3 = D(r3, s[1][0][2], 0xFB02F901, 0xFAFCF8F7, 0x0800FF03, 0xFB0D0004);
	r0 = D(r0, s[1][1][0], 0x0EF8F9FC, 0x06FA02FC, 0xFEFE05E8, 0xF8F80914);
	r1 = D(r1, s[1][1][0], 0xF2F904F6, 0x020F0E02, 0xF8FB0F04, 0x050C0AF7);
	r2 = D(r2, s[1][1][0], 0xFE06F909, 0xF70A1014, 0xF5E7FAF7, 0xF2FAFDEA);
	r3 = D(r3, s[1][1][0], 0xF7F4FDFA, 0x04F31809, 0x090CF404, 0x0A0DFB00);
	r0 = D(r0, s[1][1][1], 0x0AF2F0FA, 0x180DD1EE, 0x0CFCE7EE, 0x1400E112);
	r1 = D(r1, s[1][1][1], 0x141D0FF2, 0xF00BF7E6, 0x0513DE06, 0xF2FA0CF9);
	r2 = D(r2, s[1][1][1], 0x0D09F309, 0xFD0AFF07, 0xF1F90602, 0xF1F2F1DF);
	r3 = D(r3, s[1][1][1], 0xF30DF901, 0xF40704FF, 0xFF070DFA, 0x1007ED05);
	r0 = D(r0, s[1][1][2], 0xFBFFFCFC, 0x0409F5EC, 0xF9FD0C05, 0xF502FC0D);
	r1 = D(r1, s[1][1][2], 0xFAF50B01, 0x0310F7F9, 0x0CF5EB05, 0xFA000B09);
	r2 = D(r2, s[1][1][2], 0x000DFB0E, 0xF509F50C, 0xEFFA0FFB, 0x0EFAEBF9);
	r3 = D(r3, s[1][1][2], 0xF4050000, 0x0CF410FA, 0xFEFEFE07, 0xF512F008);
	r0 = D(r0, s[1][2][0], 0x03FDEDFF, 0x0C06F0EE, 0xFC020D02, 0x0207FE10);
	r1 = D(r1, s[1][2][0], 0xFA041009, 0xFF04F3F8, 0xF9FE0805, 0x0C060100);
	r2 = D(r2, s[1][2][0], 0x01FFFD00, 0xFBFD1A14, 0x00072FFE, 0x090BFAE8);
	r3 = D(r3, s[1][2][0], 0xFD0413F7, 0x07041203, 0x06F5FCFE, 0xF7FDF6FB);
	r0 = D(r0, s[1][2][1], 0x09FEE8FC, 0x0E05FEF5, 0x00000D04, 0x08FEF615);
	r1 = D(r1, s[1][2][1], 0x120B0A02, 0xF00D00F8, 0x0F03F902, 0x04F7F602);
	r2 = D(r2, s[1][2][1], 0x06020308, 0xFC092111, 0x04151600, 0xFC00E907);
	r3 = D(r3, s[1][2][1], 0x0502F604, 0x05F52200, 0x05FE0004, 0xFC09F4FC);
	r0 = D(r0, s[1][2][2], 0x07020205, 0xEDFBFEFC, 0xF7FD07F5, 0xFAFDFF0B);
	r1 = D(r1, s[1][2][2], 0xFBF30404, 0xFE0813FB, 0x010404FD, 0x00FE00FA);
	r2 = D(r2, s[1][2][2], 0xECFBFE13, 0xEF0BFE13, 0xFD031002, 0x01030404);
	r3 = D(r3, s[1][2][2], 0xF006F500, 0x0EF60801, 0x0305FD0E, 0x0002F4FD);
	s[0][0][0] = G[6][xy.y+0][xy.x+0]; s[0][0][1] = G[6][xy.y+0][xy.x+1];
	s[0][0][2] = G[6][xy.y+0][xy.x+2]; s[0][1][0] = G[6][xy.y+1][xy.x+0];
	s[0][1][1] = G[6][xy.y+1][xy.x+1]; s[0][1][2] = G[6][xy.y+1][xy.x+2];
	s[0][2][0] = G[6][xy.y+2][xy.x+0]; s[0][2][1] = G[6][xy.y+2][xy.x+1];
	s[0][2][2] = G[6][xy.y+2][xy.x+2]; s[1][0][0] = G[7][xy.y+0][xy.x+0];
	s[1][0][1] = G[7][xy.y+0][xy.x+1]; s[1][0][2] = G[7][xy.y+0][xy.x+2];
	s[1][1][0] = G[7][xy.y+1][xy.x+0]; s[1][1][1] = G[7][xy.y+1][xy.x+1];
	s[1][1][2] = G[7][xy.y+1][xy.x+2]; s[1][2][0] = G[7][xy.y+2][xy.x+0];
	s[1][2][1] = G[7][xy.y+2][xy.x+1]; s[1][2][2] = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0x130FFEFD, 0x0305FCFB, 0x0B030206, 0x07FB0DFD);
	r1 = D(r1, s[0][0][0], 0xFA03FE05, 0x09030B06, 0x10000B07, 0x0702ECFD);
	r2 = D(r2, s[0][0][0], 0x00FEFD05, 0xF70702F8, 0x010DFBFA, 0x0F06F20B);
	r3 = D(r3, s[0][0][0], 0xFA01FCFA, 0xF20302F6, 0x0FE80707, 0x11F90C0B);
	r0 = D(r0, s[0][0][1], 0x1105FFF7, 0xF9F708FB, 0x0902FF06, 0x0E0703F5);
	r1 = D(r1, s[0][0][1], 0xF905ED05, 0xE603F4F9, 0x04F901FB, 0x070CFF11);
	r2 = D(r2, s[0][0][1], 0x02FE05F9, 0xE203FA13, 0x05FC0707, 0x09FA0AFE);
	r3 = D(r3, s[0][0][1], 0xF7060702, 0xF7040002, 0xF8FE0002, 0x11F7FD0C);
	r0 = D(r0, s[0][0][2], 0x0602FFFB, 0x010B0201, 0x04F8FC05, 0x0800FC0A);
	r1 = D(r1, s[0][0][2], 0x04F8F7FE, 0xF0020804, 0x0FF7F307, 0x0A00F1F8);
	r2 = D(r2, s[0][0][2], 0x0C08FFFF, 0xF8F00611, 0x05FFF4F1, 0xF80210F6);
	r3 = D(r3, s[0][0][2], 0xFC0DF40D, 0x04FBFDFE, 0x08F7020C, 0xFFFB01F9);
	r0 = D(r0, s[0][1][0], 0xFC08FCED, 0x0804FB09, 0x1FFBF30C, 0x08F4F90E);
	r1 = D(r1, s[0][1][0], 0xF2FC0DF8, 0x0BF70504, 0x18030C07, 0x001807FC);
	r2 = D(r2, s[0][1][0], 0x1601FDF5, 0xDF03F608, 0xF4F5F605, 0xFAFD0107);
	r3 = D(r3, s[0][1][0], 0xF204F6F7, 0xF50D0205, 0x0000FC01, 0x0402F80E);
	r0 = D(r0, s[0][1][1], 0x07FE0E07, 0xF9030D08, 0xEDFE04E2, 0x14F10AEE);
	r1 = D(r1, s[0][1][1], 0xE4F509FB, 0xFE0D0400, 0x1FEE04DD, 0x0AFBFF0C);
	r2 = D(r2, s[0][1][1], 0xF00D0EF5, 0x06F7FD07, 0x0002010B, 0xF1FA0EFC);
	r3 = D(r3, s[0][1][1], 0xF9E8FADF, 0x0E09FAEF, 0xECF205D0, 0xFDE4F913);
	r0 = D(r0, s[0][1][2], 0x0E010BFD, 0xFFFEFDFE, 0x0B09FD0D, 0xECF9FEF1);
	r1 = D(r1, s[0][1][2], 0xFC14F802, 0x15000006, 0xF100FD07, 0x09FD00FE);
	r2 = D(r2, s[0][1][2], 0xFA0101F6, 0x07F90401, 0xF505010D, 0xFCEFFAFA);
	r3 = D(r3, s[0][1][2], 0xFA0C00F2, 0xFC07010B, 0xF50402F2, 0x01F6FDEE);
	r0 = D(r0, s[0][2][0], 0xF1F3FBFA, 0x0404FCF1, 0xF20101F9, 0x2CEBEE0B);
	r1 = D(r1, s[0][2][0], 0x08FA0205, 0x1B010507, 0x3405FE05, 0x07040104);
	r2 = D(r2, s[0][2][0], 0x02F4FFF8, 0xE1FE050B, 0xFEEF0AFA, 0x070207FC);
	r3 = D(r3, s[0][2][0], 0xF7F908ED, 0x02F4FEF1, 0xFB04FB0F, 0x11040008);
	r0 = D(r0, s[0][2][1], 0x0002FE07, 0x241006FB, 0x060702F7, 0x0216FE10);
	r1 = D(r1, s[0][2][1], 0xD1020001, 0x0B020605, 0x05EFFEF3, 0xF5FA0AF0);
	r2 = D(r2, s[0][2][1], 0xF4F8F3F5, 0x18000C0D, 0x04F30209, 0xFEFEFFF7);
	r3 = D(r3, s[0][2][1], 0xFAF70AF7, 0xF2F4F9EC, 0xF60B0702, 0xEE00FCFE);
	r0 = D(r0, s[0][2][2], 0xF3000101, 0xF60F07FC, 0xFC00F7FF, 0x09FE05F3);
	r1 = D(r1, s[0][2][2], 0x15F90004, 0x2102FB06, 0x160BFA05, 0xFCFC07F9);
	r2 = D(r2, s[0][2][2], 0x090907FD, 0xEE01070B, 0x0002FC16, 0xFFFEFEFC);
	r3 = D(r3, s[0][2][2], 0x021905F4, 0x0D0702F4, 0xFD0200FC, 0xF802FE02);
	r0 = D(r0, s[1][0][0], 0xFDF71402, 0x03FF0406, 0x03010DFD, 0x0605020C);
	r1 = D(r1, s[1][0][0], 0xFFF008F9, 0xFA050903, 0xFF02F508, 0x05020509);
	r2 = D(r2, s[1][0][0], 0xFCFDF103, 0xF9F70209, 0x00F90004, 0x0100FA00);
	r3 = D(r3, s[1][0][0], 0x02FC0804, 0x0305F707, 0x03FB1103, 0x0110FFFB);
	r0 = D(r0, s[1][0][1], 0xFFECFCF9, 0x00FFF3FF, 0xFDF5EE00, 0x0B02F703);
	r1 = D(r1, s[1][0][1], 0xF0ED0EFB, 0xF70107FF, 0x00F812FD, 0xFC0BFE05);
	r2 = D(r2, s[1][0][1], 0xFF03E605, 0xFB0BFB05, 0x01FCFCFC, 0x0500FAFA);
	r3 = D(r3, s[1][0][1], 0xFF020902, 0x02FB0704, 0xFDF60903, 0xFD0DF2FE);
	r0 = D(r0, s[1][0][2], 0xF60401FD, 0xFEFE04FF, 0x0B09FAF9, 0xFEFDFEFC);
	r1 = D(r1, s[1][0][2], 0xF704FCEF, 0x07021AFB, 0x00FDF3FE, 0x0509F711);
	r2 = D(r2, s[1][0][2], 0xFB01FE06, 0x0404F709, 0xF6020807, 0xFE0CEE0A);
	r3 = D(r3, s[1][0][2], 0x030507FB, 0xFE020504, 0xFE020AFA, 0x07050102);
	r0 = D(r0, s[1][1][0], 0xFDEB050C, 0xF8F710FC, 0xFEF5FBF7, 0xFBF6F3EC);
	r1 = D(r1, s[1][1][0], 0x05F80301, 0x0EFDFFF5, 0x02010001, 0xFD0A01F7);
	r2 = D(r2, s[1][1][0], 0xE1F31302, 0x000100FB, 0xF503170B, 0xFE050700);
	r3 = D(r3, s[1][1][0], 0x00FA0C05, 0xF302FDFB, 0x02FC180E, 0x05F8DFFF);
	r0 = D(r0, s[1][1][1], 0xFFEBF603, 0xFBF6FDF6, 0x12040D10, 0x0C0C07F2);
	r1 = D(r1, s[1][1][1], 0x11050B00, 0xFDEC02FE, 0xF50B050E, 0xFE0B09FE);
	r2 = D(r2, s[1][1][1], 0xFEF012FA, 0xFBF50514, 0xF9F31B09, 0xFFFBE70B);
	r3 = D(r3, s[1][1][1], 0x04F6191B, 0x01011910, 0x0B0F2011, 0x110BECE9);
	r0 = D(r0, s[1][1][2], 0x02FB0701, 0x020B04FE, 0xFC0CF2FB, 0x0E000DFF);
	r1 = D(r1, s[1][1][2], 0xFF00FB02, 0x050B15FE, 0x0009F5EE, 0xFDF5070D);
	r2 = D(r2, s[1][1][2], 0x0D0BFB05, 0x0E040408, 0x09F9F506, 0x07F30FF6);
	r3 = D(r3, s[1][1][2], 0x0D0F070C, 0x0214F304, 0xFDF50002, 0x0001FF12);
	r0 = D(r0, s[1][2][0], 0x03F0071B, 0xF3020900, 0x050CF5F8, 0xF704170A);
	r1 = D(r1, s[1][2][0], 0x080506FC, 0xF0050B07, 0x10F4FEFA, 0xFAFCFCF9);
	r2 = D(r2, s[1][2][0], 0xF5FBFB04, 0xFBF7FC00, 0xF901FBFF, 0x00F3F509);
	r3 = D(r3, s[1][2][0], 0xF40BFF02, 0xFAFEFDFD, 0x02FF06FA, 0xFC01FBF9);
	r0 = D(r0, s[1][2][1], 0xFBFE08FD, 0xFEF803F8, 0xF60B04FE, 0xFBFBFBF2);
	r1 = D(r1, s[1][2][1], 0x02FB0410, 0x0D03FC02, 0xFAFD0804, 0x02FC01F6);
	r2 = D(r2, s[1][2][1], 0xF9020FF0, 0xFBFB0CFE, 0x07110204, 0x08F0ED01);
	r3 = D(r3, s[1][2][1], 0x05090907, 0x02FAFE03, 0x0608FEFE, 0xF70E02FC);
	r0 = D(r0, s[1][2][2], 0x04FCFA04, 0x040E00FE, 0xFE04F9F9, 0xFA07F709);
	r1 = D(r1, s[1][2][2], 0xFAFCEA08, 0xF6F30FEC, 0xF401FC00, 0x010E02FE);
	r2 = D(r2, s[1][2][2], 0x05F7F400, 0x0205FB04, 0x02FFFBF9, 0xF8FCF6FD);
	r3 = D(r3, s[1][2][2], 0xFE02FA00, 0xFCFF0305, 0x05FAFE0A, 0x07FC04F7);
	vec4 f0 = vec4(r0) * 6.20001240e-05;
	f0 += vec4(-3.369e-02, -7.475e-03, -1.177e-02, -1.945e-02);
	imageStore(out_image, opos + ivec2(0, 0), vec4(f0));
	vec4 f1 = vec4(r1) * 6.20001240e-05;
	f1 += vec4(5.904e-03, 1.300e-02, -1.394e-02, 2.614e-02);
	imageStore(out_image, opos + ivec2(1, 0), vec4(f1));
	vec4 f2 = vec4(r2) * 6.20001240e-05;
	f2 += vec4(4.049e-02, 4.746e-03, -1.834e-02, 1.872e-02);
	imageStore(out_image, opos + ivec2(0, 1), vec4(f2));
	vec4 f3 = vec4(r3) * 6.20001240e-05;
	f3 += vec4(4.718e-03, 4.967e-03, -3.114e-02, 1.326e-02);
	imageStore(out_image, opos + ivec2(1, 1), vec4(f3));
}

//!DESC CuNNy-16x16C-TEST-conv13
//!HOOK LUMA
//!COMPUTE 16 16 8 8
//!BIND conv12
//!BIND LUMA
//!SAVE conv13
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_spirv_intrinsics : require
#extension GL_EXT_control_flow_attributes : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) ivec4(r.x + dp4(s, a, 0), r.y + dp4(s, b, 0), r.z + dp4(s, c, 0), r.w + dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	[[unroll]] for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		[[unroll]] for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(2, 2) + ivec2(1, 1)) * conv12_pt;
			r = conv12_gather(p, 0);
			g = conv12_gather(p, 1);
			b = conv12_gather(p, 2);
			a = conv12_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.00000000e+00;
			vec4 v2 = vec4(r.z, g.z, b.z, a.z) * 1.00000000e+00;
			vec4 v4 = vec4(r.x, g.x, b.x, a.x) * 1.00000000e+00;
			vec4 v6 = vec4(r.y, g.y, b.y, a.y) * 1.00000000e+00;
			vec4 v1 = max(-v0, vec4(0));
			v0 = max(v0, vec4(0));
			vec4 v3 = max(-v2, vec4(0));
			v2 = max(v2, vec4(0));
			vec4 v5 = max(-v4, vec4(0));
			v4 = max(v4, vec4(0));
			vec4 v7 = max(-v6, vec4(0));
			v6 = max(v6, vec4(0));
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s[2][3][3];
	ivec4 r0 = ivec4(0);
	ivec4 r1 = ivec4(0);
	ivec4 r2 = ivec4(0);
	ivec4 r3 = ivec4(0);
	s[0][0][0] = G[0][xy.y+0][xy.x+0]; s[0][0][1] = G[0][xy.y+0][xy.x+1];
	s[0][0][2] = G[0][xy.y+0][xy.x+2]; s[0][1][0] = G[0][xy.y+1][xy.x+0];
	s[0][1][1] = G[0][xy.y+1][xy.x+1]; s[0][1][2] = G[0][xy.y+1][xy.x+2];
	s[0][2][0] = G[0][xy.y+2][xy.x+0]; s[0][2][1] = G[0][xy.y+2][xy.x+1];
	s[0][2][2] = G[0][xy.y+2][xy.x+2]; s[1][0][0] = G[1][xy.y+0][xy.x+0];
	s[1][0][1] = G[1][xy.y+0][xy.x+1]; s[1][0][2] = G[1][xy.y+0][xy.x+2];
	s[1][1][0] = G[1][xy.y+1][xy.x+0]; s[1][1][1] = G[1][xy.y+1][xy.x+1];
	s[1][1][2] = G[1][xy.y+1][xy.x+2]; s[1][2][0] = G[1][xy.y+2][xy.x+0];
	s[1][2][1] = G[1][xy.y+2][xy.x+1]; s[1][2][2] = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0x030BFEFA, 0xFCFE0108, 0xF60B0402, 0xF8FEFAF8);
	r1 = D(r1, s[0][0][0], 0x0E0AF9F8, 0xFE05F9FB, 0xF7FDFD03, 0x0200FBFC);
	r2 = D(r2, s[0][0][0], 0xF906F70C, 0xFFF9F90A, 0x09030902, 0xFE00F4F7);
	r3 = D(r3, s[0][0][0], 0xFFFE0408, 0xFC00FD02, 0xF9F80801, 0xFB0100F5);
	r0 = D(r0, s[0][0][1], 0xF5FE0105, 0x0BF70402, 0xF903FE08, 0xF9FC0002);
	r1 = D(r1, s[0][0][1], 0xFE06FC01, 0xFFF80009, 0xF7F6F401, 0xFA01F20A);
	r2 = D(r2, s[0][0][1], 0x1900FC12, 0x14FBFD15, 0x14F5030C, 0x0B00F502);
	r3 = D(r3, s[0][0][1], 0x02FDFFFB, 0x03FEFBFE, 0x0105FCEF, 0xE2F1FC00);
	r0 = D(r0, s[0][0][2], 0x0BFB01F6, 0x05F80412, 0xFEF6090C, 0x09FC04EF);
	r1 = D(r1, s[0][0][2], 0xF7F9F8FF, 0xFEFEFE03, 0x04FFFD03, 0xFF06F9F6);
	r2 = D(r2, s[0][0][2], 0xF9FCFF01, 0xF9FEF90C, 0x01020C04, 0xFB070101);
	r3 = D(r3, s[0][0][2], 0x0DFB0609, 0x030001F7, 0x0302FE04, 0xF5F9F9F9);
	r0 = D(r0, s[0][1][0], 0xFC10FFEF, 0x0D0BF402, 0xF90708E8, 0xF9FEFEF5);
	r1 = D(r1, s[0][1][0], 0x1A0405F1, 0xFEFB11F0, 0xF1FE0E01, 0xE5F9FCF6);
	r2 = D(r2, s[0][1][0], 0x1304FC0B, 0xFFFDFCF4, 0x12FC0209, 0xF9020AFA);
	r3 = D(r3, s[0][1][0], 0xFF030D02, 0xF600FCF7, 0xFEFF060C, 0x0AF309F7);
	r0 = D(r0, s[0][1][1], 0xEAFAF7EF, 0x1B0A0EF2, 0xF1FC120A, 0x13F3F5FA);
	r1 = D(r1, s[0][1][1], 0x10F605F2, 0x0103F1FE, 0x0B02E7EA, 0xEFFCF412);
	r2 = D(r2, s[0][1][1], 0x00F702F9, 0x1CF916FB, 0xE1EDF9F4, 0x35FE0C1B);
	r3 = D(r3, s[0][1][1], 0x12ED02F3, 0x1109FC07, 0xED13FE12, 0xFCF9F7FA);
	r0 = D(r0, s[0][1][2], 0xDEF902F5, 0x0BFCF812, 0x00020414, 0xEC090503);
	r1 = D(r1, s[0][1][2], 0xFCF5090E, 0xF007FC0D, 0xF9F7F505, 0x01FD00FD);
	r2 = D(r2, s[0][1][2], 0x0100060B, 0x10FFFB1C, 0x06FC00FC, 0xE5FEFC19);
	r3 = D(r3, s[0][1][2], 0x00FAFFFA, 0xF40E0204, 0xFCFA06F2, 0xFEF0FC0C);
	r0 = D(r0, s[0][2][0], 0xF7FEFC0A, 0xF6FEFF00, 0x00FEFBFD, 0x07070207);
	r1 = D(r1, s[0][2][0], 0xFA0606F7, 0xF6F9FD02, 0xF9F002F7, 0x07F7F7EE);
	r2 = D(r2, s[0][2][0], 0xF4000405, 0xF4F7F109, 0x000901FE, 0x04F6FBF4);
	r3 = D(r3, s[0][2][0], 0x020305FF, 0x02FCFD04, 0x060B01FF, 0xF6FE0AFD);
	r0 = D(r0, s[0][2][1], 0xF5FF06EE, 0x00FB04F3, 0x08060202, 0xF8FEFF01);
	r1 = D(r1, s[0][2][1], 0x16FA04FE, 0xF5FEFDFB, 0xF80403F5, 0x0205F60B);
	r2 = D(r2, s[0][2][1], 0x0EF2FA04, 0xFCE9FDF1, 0x0B04FE09, 0x04F907F9);
	r3 = D(r3, s[0][2][1], 0x09F906FE, 0x06FBFEF4, 0xF5FE020D, 0x0DF504F7);
	r0 = D(r0, s[0][2][2], 0xFC070702, 0xF1FC00FB, 0x02FE00FC, 0x04FDFEFF);
	r1 = D(r1, s[0][2][2], 0xF901FBFF, 0xF2FF0705, 0xE80205FE, 0xFE04F3FB);
	r2 = D(r2, s[0][2][2], 0x02F307FC, 0xFFF9F704, 0xF102040F, 0x19F907F7);
	r3 = D(r3, s[0][2][2], 0x07000502, 0x06FB0204, 0x00FEFBFC, 0xF0F7F904);
	r0 = D(r0, s[1][0][0], 0x04FB0905, 0xFEFCF7F9, 0x02020308, 0x0200FDFF);
	r1 = D(r1, s[1][0][0], 0xFAF90705, 0x03FFFE0A, 0x0502FD06, 0xFE030002);
	r2 = D(r2, s[1][0][0], 0xFF020BFB, 0x03ECF5FC, 0x09FEEE09, 0x07F9FFF9);
	r3 = D(r3, s[1][0][0], 0x06F80405, 0xFEFEFEFB, 0xFD09FBF9, 0x05F8FE06);
	r0 = D(r0, s[1][0][1], 0x00FEF9F6, 0xF302EDF6, 0x03FAF900, 0x05FC0701);
	r1 = D(r1, s[1][0][1], 0x08FEF707, 0x02FF0202, 0x0904F90C, 0x01040B0F);
	r2 = D(r2, s[1][0][1], 0x0704F707, 0x09EEF6FD, 0x0416F9FA, 0x02F3F4EE);
	r3 = D(r3, s[1][0][1], 0xFAF904FF, 0x05F7F902, 0x09FC08F2, 0xFC07F5FD);
	r0 = D(r0, s[1][0][2], 0xFB06040D, 0xF305F6FA, 0xF600FBF3, 0xFF00000B);
	r1 = D(r1, s[1][0][2], 0x02FB03FB, 0x0200FE02, 0x04F709FC, 0x02F70600);
	r2 = D(r2, s[1][0][2], 0x01F6EC04, 0x04F7F707, 0x02F7EC02, 0xEE00FFFB);
	r3 = D(r3, s[1][0][2], 0xF5FB0204, 0xFDF6FEF7, 0xFEFC09FE, 0xFCE6F304);
	r0 = D(r0, s[1][1][0], 0xFAE9F30F, 0xF90D0607, 0x03FEF6F8, 0x0CF7F503);
	r1 = D(r1, s[1][1][0], 0xFCF5F7FF, 0xF7FDF10B, 0xFDFCEC03, 0xF701FD04);
	r2 = D(r2, s[1][1][0], 0xFE0408FD, 0xFBE5F307, 0x00090300, 0x00F7F903);
	r3 = D(r3, s[1][1][0], 0x03F5F7FC, 0xFDF7FB0E, 0x09040BF5, 0x04E8F601);
	r0 = D(r0, s[1][1][1], 0xF100E6F5, 0xFB0AF4FE, 0xEDF0EDFA, 0xFE0E06F6);
	r1 = D(r1, s[1][1][1], 0x0302F6F9, 0x06EAFC14, 0xFCF9F80A, 0xFFEA13FF);
	r2 = D(r2, s[1][1][1], 0x0FFEFF08, 0x04F4F914, 0x00021712, 0xF8E5F605);
	r3 = D(r3, s[1][1][1], 0x02FE030E, 0xF3F8E913, 0x0DF80FF1, 0xFECCF3F4);
	r0 = D(r0, s[1][1][2], 0x00FF0611, 0x080F0CF1, 0xFEF0FCF5, 0xF501111D);
	r1 = D(r1, s[1][1][2], 0x05FA04F7, 0x0BF3F004, 0x09070D05, 0x0100FDFC);
	r2 = D(r2, s[1][1][2], 0x08F1F7FE, 0x09F8F40C, 0xF90E0B0A, 0x15EC01F8);
	r3 = D(r3, s[1][1][2], 0xF9080AFC, 0x08F3FDFC, 0xF9070401, 0x13F1F409);
	r0 = D(r0, s[1][2][0], 0x060002EB, 0xFB0503F9, 0x0202F9F4, 0x05FCF500);
	r1 = D(r1, s[1][2][0], 0xFCF60702, 0x06FBFCFF, 0x02FF03F7, 0xFBFD0101);
	r2 = D(r2, s[1][2][0], 0x0104FFFC, 0x0FEDE801, 0x09FD09FC, 0xFC04FBFF);
	r3 = D(r3, s[1][2][0], 0xFC02FDFF, 0x0201FCFA, 0xF8FC050A, 0xFFF9F7F9);
	r0 = D(r0, s[1][2][1], 0x08020A0B, 0xF807F50A, 0x0304FDF8, 0x0EFAE303);
	r1 = D(r1, s[1][2][1], 0x01020406, 0xFCF4F401, 0x04030F0A, 0x00010500);
	r2 = D(r2, s[1][2][1], 0x09060300, 0xFDF4F514, 0x0009FBFE, 0xFEF5F506);
	r3 = D(r3, s[1][2][1], 0xFFF90DF7, 0x08F2EFF4, 0xFE0207FA, 0x0706F702);
	r0 = D(r0, s[1][2][2], 0xFD06F804, 0x030AFDFD, 0xFC0AFFFA, 0xF7FFFEFE);
	r1 = D(r1, s[1][2][2], 0x06F5FAFE, 0x09F5F601, 0x04FE0400, 0x02020905);
	r2 = D(r2, s[1][2][2], 0x0509FF04, 0x0BF2F402, 0x08FCEE00, 0xF507F501);
	r3 = D(r3, s[1][2][2], 0xF9F8FEF1, 0x05F9F1FF, 0xFC051307, 0x0AF103F5);
	s[0][0][0] = G[2][xy.y+0][xy.x+0]; s[0][0][1] = G[2][xy.y+0][xy.x+1];
	s[0][0][2] = G[2][xy.y+0][xy.x+2]; s[0][1][0] = G[2][xy.y+1][xy.x+0];
	s[0][1][1] = G[2][xy.y+1][xy.x+1]; s[0][1][2] = G[2][xy.y+1][xy.x+2];
	s[0][2][0] = G[2][xy.y+2][xy.x+0]; s[0][2][1] = G[2][xy.y+2][xy.x+1];
	s[0][2][2] = G[2][xy.y+2][xy.x+2]; s[1][0][0] = G[3][xy.y+0][xy.x+0];
	s[1][0][1] = G[3][xy.y+0][xy.x+1]; s[1][0][2] = G[3][xy.y+0][xy.x+2];
	s[1][1][0] = G[3][xy.y+1][xy.x+0]; s[1][1][1] = G[3][xy.y+1][xy.x+1];
	s[1][1][2] = G[3][xy.y+1][xy.x+2]; s[1][2][0] = G[3][xy.y+2][xy.x+0];
	s[1][2][1] = G[3][xy.y+2][xy.x+1]; s[1][2][2] = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0xFE000408, 0x0014FC09, 0x00FC09FD, 0x00FCFCF9);
	r1 = D(r1, s[0][0][0], 0xFE22F4FE, 0x03E008F9, 0xF90F0509, 0xF4FA0101);
	r2 = D(r2, s[0][0][0], 0x0112F504, 0x02070305, 0x07F900FD, 0xFAF8FF04);
	r3 = D(r3, s[0][0][0], 0x040B03FA, 0x01EFFF04, 0x06100001, 0x0816080B);
	r0 = D(r0, s[0][0][1], 0x04030F03, 0x0000FD07, 0x02060C0B, 0x0BFB0204);
	r1 = D(r1, s[0][0][1], 0x080809FE, 0x09FD0201, 0x0D020204, 0xFD0C05F9);
	r2 = D(r2, s[0][0][1], 0x08050902, 0x0BE80BFE, 0x020507FE, 0x04F4FB03);
	r3 = D(r3, s[0][0][1], 0x03FC0AF1, 0xFF05F401, 0x0604F4F7, 0xFB031001);
	r0 = D(r0, s[0][0][2], 0x01FE0C04, 0x070BF7F9, 0x04040EF9, 0x040DFF07);
	r1 = D(r1, s[0][0][2], 0x020400F7, 0xFCFE07FD, 0xFDF800FC, 0xFE040603);
	r2 = D(r2, s[0][0][2], 0x0C080000, 0x09F601FE, 0x0CF8FC04, 0xFA01F8FE);
	r3 = D(r3, s[0][0][2], 0xF7FF00FF, 0xFEF206FE, 0xFDFDFFFE, 0x0723EEEF);
	r0 = D(r0, s[0][1][0], 0xF40F0A0A, 0xF524F707, 0xFEF3F9FD, 0x00FBFFFC);
	r1 = D(r1, s[0][1][0], 0x013912FC, 0xFDF0F7FF, 0xFE0D19F9, 0x02F2FFF8);
	r2 = D(r2, s[0][1][0], 0xF6170DFC, 0xFC24EAFF, 0x081BF507, 0xFDF4FEFE);
	r3 = D(r3, s[0][1][0], 0x05FC0BFF, 0xF8E6FC00, 0x061006F5, 0x06080409);
	r0 = D(r0, s[0][1][1], 0x0BEB050C, 0x000C0709, 0xF5E3FC14, 0x09DCF704);
	r1 = D(r1, s[0][1][1], 0xFEF106FD, 0x03060914, 0x0B2CFE00, 0x02EAF400);
	r2 = D(r2, s[0][1][1], 0xFB20F31A, 0x0010040A, 0x00EE01F5, 0xF81CF31B);
	r3 = D(r3, s[0][1][1], 0x102DE307, 0xF918ECFC, 0xFA0704EA, 0x000D11F4);
	r0 = D(r0, s[0][1][2], 0xFFF4110A, 0x0A140314, 0x01FF0205, 0xF9D11104);
	r1 = D(r1, s[0][1][2], 0x06F6FFF9, 0x040E05EE, 0x010500FD, 0xFE021A04);
	r2 = D(r2, s[0][1][2], 0x0207F200, 0x030201EE, 0x00FAF9F7, 0xF9F3F7FB);
	r3 = D(r3, s[0][1][2], 0x0100FE04, 0xFEF80EFA, 0xFFFF0100, 0xF31BF4FC);
	r0 = D(r0, s[0][2][0], 0x0ED70C05, 0x04FFFC0D, 0x0402FE00, 0xFB0902F6);
	r1 = D(r1, s[0][2][0], 0x0D000403, 0xFEE504FA, 0x11010203, 0x0002FEFF);
	r2 = D(r2, s[0][2][0], 0x02F0EC02, 0xFB0D0903, 0x00FFF7FF, 0xF6FFF903);
	r3 = D(r3, s[0][2][0], 0x011FFEFB, 0x0004FAFC, 0xFB0700F4, 0xFE1CFF02);
	r0 = D(r0, s[0][2][1], 0xEDF50A04, 0x020EFEFF, 0x0416040B, 0x02DA0005);
	r1 = D(r1, s[0][2][1], 0x0829FEED, 0xF30F13EF, 0xF62817FD, 0x00E8F4F0);
	r2 = D(r2, s[0][2][1], 0x081DEB0A, 0xF1F301EE, 0x0303FCF9, 0xFCF30210);
	r3 = D(r3, s[0][2][1], 0x1113F5EF, 0xF9020700, 0x0B02FEF8, 0x120300F9);
	r0 = D(r0, s[0][2][2], 0x0709FEFD, 0xFF030704, 0x01020B01, 0xF90704F3);
	r1 = D(r1, s[0][2][2], 0x0709F0F7, 0x00FBFD01, 0xF3E6FA02, 0x0A060A04);
	r2 = D(r2, s[0][2][2], 0xFDEAF60A, 0x01FC03FE, 0x08F7FDF5, 0xF906F707);
	r3 = D(r3, s[0][2][2], 0x0FFE0BEC, 0xFC07F9FB, 0x02FA02FD, 0xF6FA14F7);
	r0 = D(r0, s[1][0][0], 0x07FF0AFC, 0xFD0901FC, 0x09050300, 0x0900F702);
	r1 = D(r1, s[1][0][0], 0x050604F5, 0x02FB0200, 0xF90502F9, 0xFE080805);
	r2 = D(r2, s[1][0][0], 0x0003FD00, 0x0407FEFE, 0xFDFCF800, 0x05040A00);
	r3 = D(r3, s[1][0][0], 0x02F9FEFA, 0x070902FE, 0xFB000302, 0x05FEFEFA);
	r0 = D(r0, s[1][0][1], 0xFFF30E07, 0x00FEFCFB, 0x0507FCF3, 0xF900F7F5);
	r1 = D(r1, s[1][0][1], 0xF9F304FB, 0xF504FE01, 0x04000802, 0xFF040204);
	r2 = D(r2, s[1][0][1], 0xF90209FD, 0xF30400FB, 0xFB01F501, 0xFE0C090A);
	r3 = D(r3, s[1][0][1], 0x03F800F6, 0xFD06090D, 0x05FC02F8, 0xF50108F3);
	r0 = D(r0, s[1][0][2], 0x04FE02FA, 0xFD000208, 0xFBFBFEFB, 0xFCFEFC01);
	r1 = D(r1, s[1][0][2], 0xFDFB0204, 0x02000100, 0x01FD0204, 0xFAFE09FD);
	r2 = D(r2, s[1][0][2], 0x0701FD03, 0xFF02F7FF, 0xF900EEF9, 0x01020006);
	r3 = D(r3, s[1][0][2], 0x0403FEF7, 0x05FF0406, 0x02FE0304, 0x0802070F);
	r0 = D(r0, s[1][1][0], 0xFFFC03FE, 0x01F3F9F5, 0x000600F9, 0x0406F000);
	r1 = D(r1, s[1][1][0], 0x00FFFDFC, 0x020305FE, 0xF2FAFB02, 0x0007100F);
	r2 = D(r2, s[1][1][0], 0x08071302, 0x09FA0507, 0xF60217F9, 0x040003FE);
	r3 = D(r3, s[1][1][0], 0xFEFEFEF6, 0x0B00FF00, 0xF9F5FBFD, 0xFD06FEF0);
	r0 = D(r0, s[1][1][1], 0xFB0C09E6, 0xFDF3F5F8, 0x120BECEA, 0xF31303FD);
	r1 = D(r1, s[1][1][1], 0x140B06F7, 0x020DFEF3, 0x09F60000, 0xE805FEFA);
	r2 = D(r2, s[1][1][1], 0xF50C10E3, 0xFDFDFE02, 0xF202FEFD, 0x01F4FEFD);
	r3 = D(r3, s[1][1][1], 0xFE0002F1, 0x04001713, 0xFFF9060E, 0x06F8F5F5);
	r0 = D(r0, s[1][1][2], 0x000000F8, 0xFF01FEEA, 0xFD01FEF6, 0x0A0B0103);
	r1 = D(r1, s[1][1][2], 0xF1FEFDF7, 0x03FE0410, 0xFDFC0600, 0xF9FAFCFD);
	r2 = D(r2, s[1][1][2], 0xF8FF09FF, 0xF5F8F918, 0xFEFCFC04, 0xFDF20209);
	r3 = D(r3, s[1][1][2], 0x0905FFEE, 0x02020B0D, 0x0400FBF9, 0x01070700);
	r0 = D(r0, s[1][2][0], 0xFDFE03F4, 0xF80AF8FE, 0x00F7FE00, 0xFD040108);
	r1 = D(r1, s[1][2][0], 0x00FF00FF, 0x0500FEFB, 0xF9F8080B, 0x020805FE);
	r2 = D(r2, s[1][2][0], 0xFC000C06, 0x0209F700, 0xF9FC0300, 0x0DFB0700);
	r3 = D(r3, s[1][2][0], 0xFB06F2F6, 0xFB0C00FB, 0x0607070E, 0xF5F60EFE);
	r0 = D(r0, s[1][2][1], 0x11090BF3, 0x00F70210, 0x03F805FA, 0xF30801FD);
	r1 = D(r1, s[1][2][1], 0xF9F60205, 0x0D06FE0B, 0x160DF3F3, 0xEEFB09FE);
	r2 = D(r2, s[1][2][1], 0x08FA09F9, 0x0901FD02, 0x0B0E0709, 0x07090CF6);
	r3 = D(r3, s[1][2][1], 0xE9FE09F7, 0x0E050408, 0xEAFB00FE, 0x100402F7);
	r0 = D(r0, s[1][2][2], 0x01000602, 0x0F01FEF7, 0x07F9FBFD, 0xFBFB010A);
	r1 = D(r1, s[1][2][2], 0xEAFCFB00, 0xFE0900FD, 0xFFFF01FC, 0xF6FD0009);
	r2 = D(r2, s[1][2][2], 0x090A0FF7, 0x0305F905, 0xF7FC0007, 0x0A020602);
	r3 = D(r3, s[1][2][2], 0x0700F302, 0xFCFB0409, 0x0C020AFE, 0x1508F8FC);
	s[0][0][0] = G[4][xy.y+0][xy.x+0]; s[0][0][1] = G[4][xy.y+0][xy.x+1];
	s[0][0][2] = G[4][xy.y+0][xy.x+2]; s[0][1][0] = G[4][xy.y+1][xy.x+0];
	s[0][1][1] = G[4][xy.y+1][xy.x+1]; s[0][1][2] = G[4][xy.y+1][xy.x+2];
	s[0][2][0] = G[4][xy.y+2][xy.x+0]; s[0][2][1] = G[4][xy.y+2][xy.x+1];
	s[0][2][2] = G[4][xy.y+2][xy.x+2]; s[1][0][0] = G[5][xy.y+0][xy.x+0];
	s[1][0][1] = G[5][xy.y+0][xy.x+1]; s[1][0][2] = G[5][xy.y+0][xy.x+2];
	s[1][1][0] = G[5][xy.y+1][xy.x+0]; s[1][1][1] = G[5][xy.y+1][xy.x+1];
	s[1][1][2] = G[5][xy.y+1][xy.x+2]; s[1][2][0] = G[5][xy.y+2][xy.x+0];
	s[1][2][1] = G[5][xy.y+2][xy.x+1]; s[1][2][2] = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0x01F9F7F9, 0x0307F9FC, 0xFD03FFFA, 0xF7F9F800);
	r1 = D(r1, s[0][0][0], 0xF609F706, 0x07F90202, 0x00FBFCF8, 0x0100FCFC);
	r2 = D(r2, s[0][0][0], 0xFB02F5F8, 0x1102EF07, 0x010505F5, 0x07040202);
	r3 = D(r3, s[0][0][0], 0x0901FE0C, 0x0400FA02, 0xFCF901FA, 0x010BFB05);
	r0 = D(r0, s[0][0][1], 0xFE0C0609, 0x0307FBF7, 0xFE140805, 0x0003F804);
	r1 = D(r1, s[0][0][1], 0xF90D1410, 0x02FAFEFE, 0xF909F512, 0x0704FEFF);
	r2 = D(r2, s[0][0][1], 0x020F0D0D, 0x0F09F910, 0xFF090103, 0x05090204);
	r3 = D(r3, s[0][0][1], 0x0B0504FF, 0xFE06FD0A, 0xF9E2FEF3, 0x0B10F50C);
	r0 = D(r0, s[0][0][2], 0x0B020302, 0x0404F807, 0x030C02FD, 0x0002FBFB);
	r1 = D(r1, s[0][0][2], 0xFFFBFB00, 0xFCFC0003, 0x05F603FA, 0x0C07FF10);
	r2 = D(r2, s[0][0][2], 0xFE11F5FB, 0x0F04FB09, 0x02F5FC05, 0x0E0F03FC);
	r3 = D(r3, s[0][0][2], 0x010502FB, 0x0707FDFF, 0xF9F90601, 0xFF04ECF7);
	r0 = D(r0, s[0][1][0], 0x03040A0B, 0x0705030B, 0xF900FF05, 0x00F80607);
	r1 = D(r1, s[0][1][0], 0xFEFE0E0B, 0x0000FD06, 0xF604080D, 0x080EFAF6);
	r2 = D(r2, s[0][1][0], 0xFAF9030E, 0x05030404, 0x00040203, 0x0916FCF9);
	r3 = D(r3, s[0][1][0], 0xFEF90808, 0x04FE0107, 0xFEF706F1, 0xF8EE020D);
	r0 = D(r0, s[0][1][1], 0x070FFB16, 0x0FFCF705, 0xF705F002, 0xF5FDF1FA);
	r1 = D(r1, s[0][1][1], 0xF303F100, 0x16EE02FE, 0x09EDF507, 0x1FEEF7F1);
	r2 = D(r2, s[0][1][1], 0x10F2E6F8, 0x0C04FF02, 0x0000EEEE, 0x0A04FA02);
	r3 = D(r3, s[0][1][1], 0xF801F5EE, 0x08110B06, 0x000E00FB, 0xF6FCF308);
	r0 = D(r0, s[0][1][2], 0x09F1FCF9, 0x02E6FD02, 0x00FF08FF, 0x1010FDF3);
	r1 = D(r1, s[0][1][2], 0xF9FD02FC, 0xF914FA0D, 0xFCF902F9, 0xF809090B);
	r2 = D(r2, s[0][1][2], 0xF7F30206, 0xFCF7F309, 0xF4F8FBF5, 0x04F4FD02);
	r3 = D(r3, s[0][1][2], 0x06060BFE, 0x010CF915, 0xF606FAFC, 0xEDFBFA07);
	r0 = D(r0, s[0][2][0], 0xFA0B01F8, 0xFAF803FE, 0xFEFC0000, 0xF9FC0005);
	r1 = D(r1, s[0][2][0], 0xFBF802F8, 0xFE060207, 0xF9050200, 0xFC04F80B);
	r2 = D(r2, s[0][2][0], 0xF10002F5, 0x07FCF812, 0xF90905F8, 0x0409FD03);
	r3 = D(r3, s[0][2][0], 0x0609F3F9, 0x04FE01FE, 0xFAF9FC04, 0xFEF50A01);
	r0 = D(r0, s[0][2][1], 0x0D020D07, 0xFE0100FB, 0x0DFD0D02, 0x0302F804);
	r1 = D(r1, s[0][2][1], 0xF509FEFE, 0xFC0C010F, 0xFCFC0407, 0x0201FC0D);
	r2 = D(r2, s[0][2][1], 0xF7F80209, 0x06F8F401, 0xFB1CFE09, 0xFC04FE01);
	r3 = D(r3, s[0][2][1], 0xFB0315F9, 0xF5090309, 0x000404FF, 0xFF06010D);
	r0 = D(r0, s[0][2][2], 0xFEFDF800, 0x00FB06FD, 0x0B09FAFE, 0xFBF8F708);
	r1 = D(r1, s[0][2][2], 0xFB04F8FE, 0xFBFDF80A, 0x070AF5FC, 0x09000700);
	r2 = D(r2, s[0][2][2], 0x06020202, 0xF900F008, 0xFAF7FF05, 0xF9FDF500);
	r3 = D(r3, s[0][2][2], 0x0600FEFA, 0xFB03FD04, 0x04FD0D01, 0x0107F10B);
	r0 = D(r0, s[1][0][0], 0x00FCFE05, 0xFD001304, 0x07FE01F9, 0x08040109);
	r1 = D(r1, s[1][0][0], 0x0200FF01, 0xFB04EF00, 0x03F905FB, 0xF2FEFC05);
	r2 = D(r2, s[1][0][0], 0x0A0405F6, 0xF509FD07, 0xFE00FAF9, 0xF70304F6);
	r3 = D(r3, s[1][0][0], 0x040301F6, 0xF706020D, 0x03FA0405, 0x06020D06);
	r0 = D(r0, s[1][0][1], 0x04FEFFF6, 0x04F9FB07, 0x07F203FE, 0x01F80EFB);
	r1 = D(r1, s[1][0][1], 0x03F6F4FB, 0x0200FE08, 0x03FE09F8, 0xF003F504);
	r2 = D(r2, s[1][0][1], 0x04FAF705, 0xF401F3FC, 0xFCF7F311, 0xFE09FEF6);
	r3 = D(r3, s[1][0][1], 0x090001F8, 0xF50006FF, 0x070709FB, 0xF500FA05);
	r0 = D(r0, s[1][0][2], 0x0009F703, 0xF702FFFA, 0x02F5000B, 0x0FF71502);
	r1 = D(r1, s[1][0][2], 0xF70B0404, 0x07FE00FE, 0xFF05FE02, 0xFA070202);
	r2 = D(r2, s[1][0][2], 0x0902FE10, 0xFF07FE08, 0x0BF9FD04, 0xFFFFF503);
	r3 = D(r3, s[1][0][2], 0x07FE07FC, 0xFE070208, 0x06FBFCF5, 0x160C140E);
	r0 = D(r0, s[1][1][0], 0xFDFAF3FE, 0xFCFC0805, 0xF80304FD, 0xFF02F7FA);
	r1 = D(r1, s[1][1][0], 0xF6FC0D04, 0xFDFEF700, 0x08FEEBF9, 0xFB03F90B);
	r2 = D(r2, s[1][1][0], 0x070707F9, 0xF50AF908, 0x03FD0801, 0x04F8070B);
	r3 = D(r3, s[1][1][0], 0x090302F2, 0xF70EFCFF, 0x07F30405, 0x08021006);
	r0 = D(r0, s[1][1][1], 0x110710EA, 0xEC09ED14, 0x18FB0CFD, 0x020013FE);
	r1 = D(r1, s[1][1][1], 0x03F30902, 0xF00BFF11, 0x040B10F5, 0xE50418F8);
	r2 = D(r2, s[1][1][1], 0xEB141CFA, 0xFE05F818, 0xF7F31100, 0x09020202);
	r3 = D(r3, s[1][1][1], 0x11FE0708, 0x0402F411, 0xDDF502F0, 0x1BFF0AF0);
	r0 = D(r0, s[1][1][2], 0x0003030F, 0x00180A03, 0x0701F7FC, 0xDE09F710);
	r1 = D(r1, s[1][1][2], 0xFDFAF60C, 0x08FAFB0A, 0xFD070904, 0xFEFEF406);
	r2 = D(r2, s[1][1][2], 0x110B0BFC, 0x0006FA04, 0x03EE090B, 0xF81302F2);
	r3 = D(r3, s[1][1][2], 0x05FA00FC, 0xFC08EDFB, 0xFF030F01, 0x120B13FD);
	r0 = D(r0, s[1][2][0], 0x0CFAF4FC, 0x01011302, 0x0303040A, 0x0AFE090A);
	r1 = D(r1, s[1][2][0], 0x0000F9FB, 0x03FDF2FC, 0x02F5EEFF, 0x0407FF06);
	r2 = D(r2, s[1][2][0], 0xFF03F8FA, 0x0006F902, 0xFF0407FA, 0xFF02F900);
	r3 = D(r3, s[1][2][0], 0x02F9F905, 0xF7030703, 0x02FFFCF9, 0xFE07F706);
	r0 = D(r0, s[1][2][1], 0xEF10FDF8, 0xFFFB00FE, 0xFAF0F60D, 0x04F2FEFB);
	r1 = D(r1, s[1][2][1], 0x06FBFE07, 0x06FEFB04, 0x0BFD0903, 0x000B00F8);
	r2 = D(r2, s[1][2][1], 0x0E090AF2, 0xFF04FD06, 0x07FCF603, 0xF801F305);
	r3 = D(r3, s[1][2][1], 0x0BFA04F5, 0x07FBFE03, 0xF9050AED, 0x0BF6EA08);
	r0 = D(r0, s[1][2][2], 0xFE03E9FC, 0x02060BFE, 0x00FCF406, 0x0D0804FD);
	r1 = D(r1, s[1][2][2], 0xF5F50205, 0x0D010403, 0xFF0602FE, 0xF009FC04);
	r2 = D(r2, s[1][2][2], 0xFE00E8F7, 0x0B051705, 0x0AFC07F5, 0x0704F706);
	r3 = D(r3, s[1][2][2], 0x0002F9FE, 0xFEFFFC04, 0xF900FDFB, 0x070709FE);
	s[0][0][0] = G[6][xy.y+0][xy.x+0]; s[0][0][1] = G[6][xy.y+0][xy.x+1];
	s[0][0][2] = G[6][xy.y+0][xy.x+2]; s[0][1][0] = G[6][xy.y+1][xy.x+0];
	s[0][1][1] = G[6][xy.y+1][xy.x+1]; s[0][1][2] = G[6][xy.y+1][xy.x+2];
	s[0][2][0] = G[6][xy.y+2][xy.x+0]; s[0][2][1] = G[6][xy.y+2][xy.x+1];
	s[0][2][2] = G[6][xy.y+2][xy.x+2]; s[1][0][0] = G[7][xy.y+0][xy.x+0];
	s[1][0][1] = G[7][xy.y+0][xy.x+1]; s[1][0][2] = G[7][xy.y+0][xy.x+2];
	s[1][1][0] = G[7][xy.y+1][xy.x+0]; s[1][1][1] = G[7][xy.y+1][xy.x+1];
	s[1][1][2] = G[7][xy.y+1][xy.x+2]; s[1][2][0] = G[7][xy.y+2][xy.x+0];
	s[1][2][1] = G[7][xy.y+2][xy.x+1]; s[1][2][2] = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0xFB04FBFE, 0xF90400FC, 0xF8FEEF05, 0x0402FD03);
	r1 = D(r1, s[0][0][0], 0xFEFFED08, 0xFC04F5FD, 0xFC01EEF1, 0xFCFC05FC);
	r2 = D(r2, s[0][0][0], 0x04FBFC0B, 0xFB03F9FC, 0x04FEF902, 0xFCF702FD);
	r3 = D(r3, s[0][0][0], 0x06FCFF04, 0xF90603FA, 0x090C1A02, 0x0301E402);
	r0 = D(r0, s[0][0][1], 0xFC06E505, 0xFDF5F4F6, 0x03FCDA02, 0xFB0B00FF);
	r1 = D(r1, s[0][0][1], 0x0CFBEB04, 0x02FD0104, 0x0F09FBFD, 0xF90009FE);
	r2 = D(r2, s[0][0][1], 0x09F2E70D, 0x03FAF7FB, 0x0101030E, 0xF30AFEFC);
	r3 = D(r3, s[0][0][1], 0x02F7FA0B, 0xFC0E04FA, 0x01F601FC, 0xF40CFB05);
	r0 = D(r0, s[0][0][2], 0xF906F207, 0xFE090008, 0x030BF70B, 0x0A0302F0);
	r1 = D(r1, s[0][0][2], 0x01F6FC12, 0xFDF90002, 0x00FBFC04, 0x0100FCF9);
	r2 = D(r2, s[0][0][2], 0xFD0BEE07, 0x00FAFFFC, 0x00F309FE, 0xF604FE04);
	r3 = D(r3, s[0][0][2], 0x06FFFC01, 0xF30E0202, 0x04F50105, 0x0819F908);
	r0 = D(r0, s[0][1][0], 0x10EB04F4, 0x0AFCFB04, 0x0107F8FC, 0xFCF5F700);
	r1 = D(r1, s[0][1][0], 0x07100D00, 0x12EF03F7, 0x05ECF7F0, 0xF308F508);
	r2 = D(r2, s[0][1][0], 0xFCFC02FA, 0x0AF917F7, 0x0409F405, 0x0104FEF8);
	r3 = D(r3, s[0][1][0], 0x0200FB04, 0x0A09F301, 0xFB06F309, 0x08040401);
	r0 = D(r0, s[0][1][1], 0x0C0404FD, 0xE520EF17, 0x0DF6FCE8, 0x13F7F50F);
	r1 = D(r1, s[0][1][1], 0x17F11109, 0xF90B0710, 0x05181601, 0x02F40F11);
	r2 = D(r2, s[0][1][1], 0xF00DF503, 0x180211F3, 0x04F9FB07, 0x071A170B);
	r3 = D(r3, s[0][1][1], 0xFE24061F, 0xF721EF08, 0xFCF0F309, 0xF9F40FF2);
	r0 = D(r0, s[0][1][2], 0x0402F80C, 0xFC07F50A, 0x07090202, 0xE80F1701);
	r1 = D(r1, s[0][1][2], 0xFEF1F509, 0x0804FB09, 0xFCFAF806, 0x0105FDFC);
	r2 = D(r2, s[0][1][2], 0xFE0508F8, 0x03FB0BFB, 0xFCEAFE00, 0xFC0D0300);
	r3 = D(r3, s[0][1][2], 0xFB09F417, 0xE50D01F0, 0xFDF5FEF8, 0xFC070904);
	r0 = D(r0, s[0][2][0], 0x0B0000F4, 0x0EFC0309, 0x00090302, 0xF801FE0A);
	r1 = D(r1, s[0][2][0], 0xFA0102FC, 0x1104FE05, 0x0FF9F901, 0xFE07F2F8);
	r2 = D(r2, s[0][2][0], 0xFFF6FCF6, 0x0EFEFB10, 0x0AFE0203, 0xFCFEF8F9);
	r3 = D(r3, s[0][2][0], 0x050302F7, 0x08FE0802, 0xFAFA01F6, 0xF5FDFCFE);
	r0 = D(r0, s[0][2][1], 0xF306F9FD, 0x050302F2, 0xFE0002FF, 0x12F90105);
	r1 = D(r1, s[0][2][1], 0xF9F7FEFF, 0xFFEF07F3, 0x0308FDF2, 0x04FEF8EE);
	r2 = D(r2, s[0][2][1], 0xF107F402, 0x0FFE0700, 0x06F8FE0B, 0xEC02F2FD);
	r3 = D(r3, s[0][2][1], 0x0309FAFA, 0x0C0408EF, 0x00FC0300, 0xFC07F400);
	r0 = D(r0, s[0][2][2], 0xF500FBFB, 0x01FFFCFF, 0xFF05FE08, 0x0700F9FA);
	r1 = D(r1, s[0][2][2], 0x07FA09FD, 0x040D0204, 0x0504FE02, 0xFC07FEFB);
	r2 = D(r2, s[0][2][2], 0xF6F7F506, 0x07FCF500, 0x0DFB0CFC, 0xFE00FA09);
	r3 = D(r3, s[0][2][2], 0x010B05FF, 0x0802F4FE, 0xF90100FA, 0x0B04FEF9);
	r0 = D(r0, s[1][0][0], 0x05FB0501, 0x0800F9F9, 0xFF05FB07, 0x00FA05FD);
	r1 = D(r1, s[1][0][0], 0x050D0B04, 0x03020202, 0x0004FD0B, 0x02070609);
	r2 = D(r2, s[1][0][0], 0xF6F6FD01, 0x0605F8FF, 0x030B0A00, 0xFE0EF904);
	r3 = D(r3, s[1][0][0], 0xF9F2F7FC, 0x04F4F504, 0x02F805FA, 0xFEFE0BFB);
	r0 = D(r0, s[1][0][1], 0x050CF703, 0x000BFAFC, 0xFF0B050E, 0x04F802FF);
	r1 = D(r1, s[1][0][1], 0x05090DFE, 0x040100F6, 0xF202FEFF, 0x09FEEE04);
	r2 = D(r2, s[1][0][1], 0xFC0BF90E, 0x0B09F3FC, 0x02FAFEF4, 0xF80D01FE);
	r3 = D(r3, s[1][0][1], 0x00FD01F8, 0x00FAEDFA, 0x10F715FC, 0x0400F005);
	r0 = D(r0, s[1][0][2], 0x07FCFCFC, 0xF609FCFC, 0xFE07F604, 0xF6FCFC06);
	r1 = D(r1, s[1][0][2], 0xFF0209F7, 0x02FB02F8, 0x0AFBFF03, 0xF9020E01);
	r2 = D(r2, s[1][0][2], 0x02FC02FC, 0x070408F7, 0xFE0101FE, 0xF908FC04);
	r3 = D(r3, s[1][0][2], 0x0CFFFEFE, 0x0EFBF801, 0x01FF0001, 0xF70202F9);
	r0 = D(r0, s[1][1][0], 0x0705F8FA, 0x13FE03F3, 0x00090203, 0x05F5F707);
	r1 = D(r1, s[1][1][0], 0x09FA07FF, 0x09FCF9F3, 0x0A0705F8, 0xF60A04FD);
	r2 = D(r2, s[1][1][0], 0xFC03EFFD, 0x1201F2FE, 0xEEFD0002, 0xFE04FC02);
	r3 = D(r3, s[1][1][0], 0xFFFAFFF9, 0x030A03F4, 0x03F10410, 0xF9EF0BF7);
	r0 = D(r0, s[1][1][1], 0xF9F9E8F9, 0x1BEEF3F3, 0xCE0E070F, 0xEC011002);
	r1 = D(r1, s[1][1][1], 0x06FD04FE, 0x23EEF9E6, 0xEBF0F801, 0xF00408FC);
	r2 = D(r2, s[1][1][1], 0x0E04EAEA, 0x1F0D0EF5, 0xF5F00A00, 0xF308FAEF);
	r3 = D(r3, s[1][1][1], 0xFDFC0607, 0x0BF0FEE9, 0x1FFD0205, 0x02040404);
	r0 = D(r0, s[1][1][2], 0x030213F7, 0x0B050101, 0xF7FCFD04, 0x0E07FAFD);
	r1 = D(r1, s[1][1][2], 0x060D0DFC, 0xF20105F3, 0x0B000DF7, 0x08F40BF5);
	r2 = D(r2, s[1][1][2], 0x04010004, 0xFC090C03, 0x0304FFFE, 0xEB0D05F8);
	r3 = D(r3, s[1][1][2], 0x11FCF6FC, 0x020A0301, 0x09F90007, 0xFC0405FE);
	r0 = D(r0, s[1][2][0], 0xF8FB05FC, 0x01FAFFFD, 0x03FCFBFF, 0xFEFFFE00);
	r1 = D(r1, s[1][2][0], 0x120202FE, 0x010505F9, 0xFE090CE4, 0xF5020602);
	r2 = D(r2, s[1][2][0], 0x00FFF9FF, 0xF904F5FC, 0xFEF70004, 0xFE0607F9);
	r3 = D(r3, s[1][2][0], 0x09F8FFF9, 0x04F8FBF8, 0xFC02F908, 0x0BF9F9FE);
	r0 = D(r0, s[1][2][1], 0x0EF3FB01, 0x010700FD, 0xFA05F2FD, 0xE902F402);
	r1 = D(r1, s[1][2][1], 0x07FE0005, 0x1102FC02, 0xFFF50008, 0x060401FE);
	r2 = D(r2, s[1][2][1], 0xF7F9F801, 0x0CFF07F7, 0xFCFEF8FB, 0x07F501FA);
	r3 = D(r3, s[1][2][1], 0x16F5FC00, 0xFE080105, 0xF6FEFC01, 0x041206F7);
	r0 = D(r0, s[1][2][2], 0xF90003F5, 0x0BFFFC04, 0xFE0202F9, 0x04020409);
	r1 = D(r1, s[1][2][2], 0xF4FEFEFF, 0x08FA0BFF, 0x02040505, 0x00080602);
	r2 = D(r2, s[1][2][2], 0xFB02F8F4, 0x02060EFD, 0xFEF8FE06, 0xF10903FC);
	r3 = D(r3, s[1][2][2], 0x01F9F0F4, 0x04020702, 0x02FFFC01, 0x04F70302);
	vec4 f0 = vec4(r0) * 6.20001240e-05;
	f0 += vec4(-1.161e-02, -2.998e-03, 1.027e-02, -1.897e-02);
	imageStore(out_image, opos + ivec2(0, 0), vec4(f0));
	vec4 f1 = vec4(r1) * 6.20001240e-05;
	f1 += vec4(-2.342e-02, -2.525e-02, -4.041e-02, 1.355e-02);
	imageStore(out_image, opos + ivec2(1, 0), vec4(f1));
	vec4 f2 = vec4(r2) * 6.20001240e-05;
	f2 += vec4(-5.019e-02, -4.265e-02, 3.639e-02, -1.817e-02);
	imageStore(out_image, opos + ivec2(0, 1), vec4(f2));
	vec4 f3 = vec4(r3) * 6.20001240e-05;
	f3 += vec4(-9.489e-03, 2.568e-03, 2.026e-02, -4.701e-03);
	imageStore(out_image, opos + ivec2(1, 1), vec4(f3));
}

//!DESC CuNNy-16x16C-TEST-conv14
//!HOOK LUMA
//!COMPUTE 16 16 8 8
//!BIND conv13
//!BIND LUMA
//!SAVE conv14
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_spirv_intrinsics : require
#extension GL_EXT_control_flow_attributes : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) ivec4(r.x + dp4(s, a, 0), r.y + dp4(s, b, 0), r.z + dp4(s, c, 0), r.w + dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	[[unroll]] for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		[[unroll]] for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(2, 2) + ivec2(1, 1)) * conv13_pt;
			r = conv13_gather(p, 0);
			g = conv13_gather(p, 1);
			b = conv13_gather(p, 2);
			a = conv13_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.00000000e+00;
			vec4 v2 = vec4(r.z, g.z, b.z, a.z) * 1.00000000e+00;
			vec4 v4 = vec4(r.x, g.x, b.x, a.x) * 1.00000000e+00;
			vec4 v6 = vec4(r.y, g.y, b.y, a.y) * 1.00000000e+00;
			vec4 v1 = max(-v0, vec4(0));
			v0 = max(v0, vec4(0));
			vec4 v3 = max(-v2, vec4(0));
			v2 = max(v2, vec4(0));
			vec4 v5 = max(-v4, vec4(0));
			v4 = max(v4, vec4(0));
			vec4 v7 = max(-v6, vec4(0));
			v6 = max(v6, vec4(0));
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s[2][3][3];
	ivec4 r0 = ivec4(0);
	ivec4 r1 = ivec4(0);
	ivec4 r2 = ivec4(0);
	ivec4 r3 = ivec4(0);
	s[0][0][0] = G[0][xy.y+0][xy.x+0]; s[0][0][1] = G[0][xy.y+0][xy.x+1];
	s[0][0][2] = G[0][xy.y+0][xy.x+2]; s[0][1][0] = G[0][xy.y+1][xy.x+0];
	s[0][1][1] = G[0][xy.y+1][xy.x+1]; s[0][1][2] = G[0][xy.y+1][xy.x+2];
	s[0][2][0] = G[0][xy.y+2][xy.x+0]; s[0][2][1] = G[0][xy.y+2][xy.x+1];
	s[0][2][2] = G[0][xy.y+2][xy.x+2]; s[1][0][0] = G[1][xy.y+0][xy.x+0];
	s[1][0][1] = G[1][xy.y+0][xy.x+1]; s[1][0][2] = G[1][xy.y+0][xy.x+2];
	s[1][1][0] = G[1][xy.y+1][xy.x+0]; s[1][1][1] = G[1][xy.y+1][xy.x+1];
	s[1][1][2] = G[1][xy.y+1][xy.x+2]; s[1][2][0] = G[1][xy.y+2][xy.x+0];
	s[1][2][1] = G[1][xy.y+2][xy.x+1]; s[1][2][2] = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0x08F40CF1, 0xFFFCFDFF, 0xFF060602, 0x0AFDF7F4);
	r1 = D(r1, s[0][0][0], 0x0102FB03, 0x08050109, 0x0801FFF9, 0xFC05FB02);
	r2 = D(r2, s[0][0][0], 0x03F7FAFB, 0xFEFA03FA, 0x0902FFF8, 0xFCFEFA09);
	r3 = D(r3, s[0][0][0], 0x03FF0007, 0xFBFFFB00, 0x0503000A, 0x040100FD);
	r0 = D(r0, s[0][0][1], 0x0700F20C, 0x020602F8, 0xFDF700DE, 0x0C070705);
	r1 = D(r1, s[0][0][1], 0xFBFEF9F6, 0xFFFE03ED, 0x00FD040B, 0xF900F6FE);
	r2 = D(r2, s[0][0][1], 0x06F40D09, 0xF7F6EFFB, 0xF901FEFF, 0x0001FD08);
	r3 = D(r3, s[0][0][1], 0x02F803F5, 0xFDFE01FD, 0x10000707, 0xFEFDF800);
	r0 = D(r0, s[0][0][2], 0xFDFFFD03, 0x0302FEF4, 0xFFFF0604, 0x0903F409);
	r1 = D(r1, s[0][0][2], 0xFD0300FD, 0xFB0AFBFA, 0xFA03F7FE, 0x03FDFFF7);
	r2 = D(r2, s[0][0][2], 0x07F50009, 0xFAFB0908, 0x0C000DF4, 0x06F507FD);
	r3 = D(r3, s[0][0][2], 0x00FC0EF0, 0xFBFAFCF9, 0x0F0E02FD, 0xFBF80F07);
	r0 = D(r0, s[0][1][0], 0x03000316, 0x060308F8, 0x05FCF10C, 0xF50E14FC);
	r1 = D(r1, s[0][1][0], 0xEEFF010C, 0xF70607F4, 0x00120C05, 0xFF01EB0B);
	r2 = D(r2, s[0][1][0], 0x0FF3FDFA, 0x0F03010D, 0x120301E5, 0x060CF5ED);
	r3 = D(r3, s[0][1][0], 0xFCFB0EF2, 0xF40A1608, 0x03F7F3F4, 0x14FC0606);
	r0 = D(r0, s[0][1][1], 0xEDEC071F, 0xE5E718D9, 0xF81D0703, 0xEDE61C06);
	r1 = D(r1, s[0][1][1], 0xEFFAE208, 0x0D17EDFA, 0xFF0301F6, 0x0003EFF4);
	r2 = D(r2, s[0][1][1], 0x16E21504, 0xEC07F00D, 0x0CDD0DFB, 0x09FCF0FA);
	r3 = D(r3, s[0][1][1], 0xE9081911, 0x090509EF, 0x09F60B06, 0xF3FBFBEA);
	r0 = D(r0, s[0][1][2], 0xF6FCEFF5, 0x0403FD04, 0xFB04FFF1, 0x0608F703);
	r1 = D(r1, s[0][1][2], 0xFEFA0306, 0xF5F10001, 0x03F60703, 0xFA040207);
	r2 = D(r2, s[0][1][2], 0x0FF902FC, 0x0911F510, 0x1205E501, 0xFFFA09E9);
	r3 = D(r3, s[0][1][2], 0x100CFFFC, 0x00070BF9, 0x0AF5FCFB, 0xFE0102ED);
	r0 = D(r0, s[0][2][0], 0x01FCFC03, 0x06F90603, 0x060600FD, 0xF8F9FD03);
	r1 = D(r1, s[0][2][0], 0x0CFD09FE, 0xF20610FD, 0xFA05F3FD, 0xF6FCF10D);
	r2 = D(r2, s[0][2][0], 0x04FF0B03, 0x0C00FEFB, 0x020207FF, 0xFCFA0BFB);
	r3 = D(r3, s[0][2][0], 0x0F06FDFC, 0xFCF40300, 0xFBFCFC03, 0xFE03F905);
	r0 = D(r0, s[0][2][1], 0x01FDED04, 0xF60100F9, 0x05000EFE, 0xF90EFE12);
	r1 = D(r1, s[0][2][1], 0x0008FD0A, 0xFFF7FBFB, 0xFA01040C, 0xEFFEF2FF);
	r2 = D(r2, s[0][2][1], 0xF2EF0400, 0xFAF70104, 0xFDFFEFF7, 0xFC03FD08);
	r3 = D(r3, s[0][2][1], 0x06F503EC, 0x0B19F60F, 0xF6F5FC07, 0xF4F4FAFE);
	r0 = D(r0, s[0][2][2], 0xFA01F507, 0x060EF9F8, 0xF900FD03, 0xFEF9FFFA);
	r1 = D(r1, s[0][2][2], 0x030807F4, 0xF8040A04, 0x06F5FA02, 0x0703F7FA);
	r2 = D(r2, s[0][2][2], 0x00FF09FF, 0xFEFF00FD, 0x040501FA, 0x06FAF9F8);
	r3 = D(r3, s[0][2][2], 0x07FF06FB, 0xFC00FEF3, 0x06EB0CFD, 0xFE090706);
	r0 = D(r0, s[1][0][0], 0x030806FC, 0x04FD0100, 0xF100000B, 0x03000800);
	r1 = D(r1, s[1][0][0], 0x07FB0001, 0xFCFCFE00, 0x00FC00FA, 0x06FCFDF9);
	r2 = D(r2, s[1][0][0], 0x06F808FD, 0x06F3FF06, 0xFD06F800, 0x0C0102FD);
	r3 = D(r3, s[1][0][0], 0xFD0700FF, 0xF90202FD, 0xFA000405, 0x0004060A);
	r0 = D(r0, s[1][0][1], 0xF9000A08, 0xF8F3FE08, 0xFCFA0D06, 0x0305FA07);
	r1 = D(r1, s[1][0][1], 0x02F10608, 0xFAFD0516, 0x0303FCFD, 0x02F305F8);
	r2 = D(r2, s[1][0][1], 0x0605F900, 0xFDF10BFD, 0x0D06FFF4, 0xFF060307);
	r3 = D(r3, s[1][0][1], 0x090907F1, 0xF7F200FF, 0x00050302, 0xFFF70503);
	r0 = D(r0, s[1][0][2], 0x01FBFD01, 0xFD000203, 0x060C0301, 0x04000303);
	r1 = D(r1, s[1][0][2], 0x01FA0400, 0xFCFBF7FE, 0x04FF0606, 0xFBFB03FE);
	r2 = D(r2, s[1][0][2], 0xFEFDF703, 0x02FEFD02, 0xFF06FE09, 0xFD09FCFA);
	r3 = D(r3, s[1][0][2], 0x0003FC0A, 0xFAFFFD04, 0xFDFBFC00, 0x0006F6FE);
	r0 = D(r0, s[1][1][0], 0xF50C0600, 0xF4F7FCFF, 0xFC030D04, 0xFDFBFFFC);
	r1 = D(r1, s[1][1][0], 0x16FEF906, 0xFA04FC02, 0x0CFFFD05, 0xFDFA09F7);
	r2 = D(r2, s[1][1][0], 0xFAF90101, 0xF5FC03FA, 0xF604FE00, 0x06F608FC);
	r3 = D(r3, s[1][1][0], 0x040BF612, 0x0303F4F4, 0x05F7050D, 0xE4FAFDFC);
	r0 = D(r0, s[1][1][1], 0xECFDF1FA, 0x0E0C0603, 0xF20F08F8, 0x1006EAF7);
	r1 = D(r1, s[1][1][1], 0x04FA13FC, 0xEC05130E, 0x0F02FAEF, 0xF7F8F40B);
	r2 = D(r2, s[1][1][1], 0x08FCF905, 0x0F0010F8, 0x1B01F001, 0xF6F11309);
	r3 = D(r3, s[1][1][1], 0x1BF8E4EB, 0xF705FBF2, 0x07EB030C, 0xFE1B0611);
	r0 = D(r0, s[1][1][2], 0x020104FA, 0xFAF70500, 0xFE10FDF6, 0xFBF70C03);
	r1 = D(r1, s[1][1][2], 0x020AFEF9, 0xFD0900FD, 0x010802FC, 0x0001FDFA);
	r2 = D(r2, s[1][1][2], 0xFAF3000A, 0x00ED030D, 0xF7F10A03, 0x0002F6FD);
	r3 = D(r3, s[1][1][2], 0xFC000D0E, 0xFCFDFEFD, 0x0008F503, 0x03F2F102);
	r0 = D(r0, s[1][2][0], 0x0103FE00, 0xFE08FDFE, 0xFFF9F401, 0x03020508);
	r1 = D(r1, s[1][2][0], 0x0505F7FF, 0xFDF7FCFE, 0x0900FE04, 0x070304F5);
	r2 = D(r2, s[1][2][0], 0x1002F700, 0xFAFAF504, 0x03FFFB00, 0x010115FE);
	r3 = D(r3, s[1][2][0], 0xFDFEFF09, 0xFF04FF06, 0xFB0B02F7, 0xFC0506F9);
	r0 = D(r0, s[1][2][1], 0xF5FE0BFA, 0x0B0AFC03, 0x0000FA05, 0x03EB06FA);
	r1 = D(r1, s[1][2][1], 0x0106F6F7, 0xFAFDF902, 0x0BFCFDF0, 0x100708FB);
	r2 = D(r2, s[1][2][1], 0x0FEBFE11, 0x06FEFB00, 0x0902040A, 0xFDF70206);
	r3 = D(r3, s[1][2][1], 0x070BF801, 0xF4020707, 0x04FEFDFE, 0xFE1900F8);
	r0 = D(r0, s[1][2][2], 0x060BFFF9, 0xFDF2FFFF, 0xFB09F9FC, 0xF5F203FF);
	r1 = D(r1, s[1][2][2], 0x02F3FA00, 0x070700FD, 0xFAF500FA, 0x03FFFA06);
	r2 = D(r2, s[1][2][2], 0x0CF90306, 0x050002FC, 0x02FD0304, 0x0200FE02);
	r3 = D(r3, s[1][2][2], 0x03FA0903, 0xFBF80704, 0x0204FAFE, 0xFEFAF604);
	s[0][0][0] = G[2][xy.y+0][xy.x+0]; s[0][0][1] = G[2][xy.y+0][xy.x+1];
	s[0][0][2] = G[2][xy.y+0][xy.x+2]; s[0][1][0] = G[2][xy.y+1][xy.x+0];
	s[0][1][1] = G[2][xy.y+1][xy.x+1]; s[0][1][2] = G[2][xy.y+1][xy.x+2];
	s[0][2][0] = G[2][xy.y+2][xy.x+0]; s[0][2][1] = G[2][xy.y+2][xy.x+1];
	s[0][2][2] = G[2][xy.y+2][xy.x+2]; s[1][0][0] = G[3][xy.y+0][xy.x+0];
	s[1][0][1] = G[3][xy.y+0][xy.x+1]; s[1][0][2] = G[3][xy.y+0][xy.x+2];
	s[1][1][0] = G[3][xy.y+1][xy.x+0]; s[1][1][1] = G[3][xy.y+1][xy.x+1];
	s[1][1][2] = G[3][xy.y+1][xy.x+2]; s[1][2][0] = G[3][xy.y+2][xy.x+0];
	s[1][2][1] = G[3][xy.y+2][xy.x+1]; s[1][2][2] = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0xFC07FD0C, 0xFD03FD04, 0xFBFF04FC, 0x01060209);
	r1 = D(r1, s[0][0][0], 0xFD080A0C, 0x02F104FF, 0xFCFDFBF9, 0x00F90208);
	r2 = D(r2, s[0][0][0], 0x01EEFA02, 0xF70008FA, 0x0400FBF3, 0x07F70C07);
	r3 = D(r3, s[0][0][0], 0xFF06F5FA, 0x04090406, 0xFA080205, 0xF1FC06F7);
	r0 = D(r0, s[0][0][1], 0xF614FD02, 0xFFFD0100, 0x01F7EDFE, 0x0A15FA11);
	r1 = D(r1, s[0][0][1], 0x03F80C03, 0x01F0F70C, 0xFFFCFD00, 0x00F70400);
	r2 = D(r2, s[0][0][1], 0xFC05FFFE, 0xF4F713FA, 0x0701F704, 0xF703F7F1);
	r3 = D(r3, s[0][0][1], 0xF5E5EEF8, 0xFBF708FE, 0x030AFB05, 0xF4F503F6);
	r0 = D(r0, s[0][0][2], 0x03F00906, 0xFFEE00FF, 0x06FDF106, 0x0A0AFD0A);
	r1 = D(r1, s[0][0][2], 0xFD070906, 0xFEF70701, 0x0A030407, 0xF90EFDF9);
	r2 = D(r2, s[0][0][2], 0x02FFF90A, 0xFA0506FB, 0xFB0AF400, 0x03E7FE00);
	r3 = D(r3, s[0][0][2], 0xFEF40CFF, 0x030EFF05, 0x0005FA07, 0xFBFAFCFC);
	r0 = D(r0, s[0][1][0], 0xFFFAF9FB, 0xFDFB0C00, 0xFA030C02, 0x00F10001);
	r1 = D(r1, s[0][1][0], 0x06020FFF, 0x00E202FE, 0x08FB0507, 0xF600FD04);
	r2 = D(r2, s[0][1][0], 0xFD0A110E, 0x02E9070B, 0xFC03FA0D, 0xFDFEFC10);
	r3 = D(r3, s[0][1][0], 0x040D00F5, 0x0FFEF6EB, 0xEF0BF7F2, 0xFBEEF910);
	r0 = D(r0, s[0][1][1], 0x0112F9EF, 0x17E915FD, 0x0B0CF60E, 0x0FE511F6);
	r1 = D(r1, s[0][1][1], 0xF0FDFE04, 0x090DF10E, 0xF3F915FA, 0x0DF70200);
	r2 = D(r2, s[0][1][1], 0xF3F5070E, 0xF8E1EB00, 0x040C10FC, 0xFDE7E9F3);
	r3 = D(r3, s[0][1][1], 0xFAF5F508, 0xFCFD21F6, 0x05EEF7EB, 0x07FD1B01);
	r0 = D(r0, s[0][1][2], 0xFAE4F6FD, 0xF4FCF508, 0xF6FA0BFF, 0xF9220305);
	r1 = D(r1, s[0][1][2], 0x0006F800, 0xFEDCF402, 0xFB05F800, 0x02061206);
	r2 = D(r2, s[0][1][2], 0x0C02FCF8, 0xFD3611FA, 0xFF0A04FE, 0xFDEBFC06);
	r3 = D(r3, s[0][1][2], 0x00060109, 0x06150603, 0xF80005F6, 0x08EEF8F7);
	r0 = D(r0, s[0][2][0], 0xFA14FD08, 0x04050207, 0x0C04FE03, 0xFF050203);
	r1 = D(r1, s[0][2][0], 0x04040005, 0x0BEB05F9, 0xFD0500FE, 0xF700F9F8);
	r2 = D(r2, s[0][2][0], 0x0306F901, 0x0104FFFF, 0x01FC03F5, 0xFE0AFBFD);
	r3 = D(r3, s[0][2][0], 0xFC02FB08, 0x0503FA03, 0x03F6FEF0, 0xFC01FDFA);
	r0 = D(r0, s[0][2][1], 0x030BFCF7, 0xF7E8FE01, 0xFCFF0107, 0x060CFCFE);
	r1 = D(r1, s[0][2][1], 0x01F00FFF, 0x00EA07FE, 0x00F90503, 0xFA0AF5F8);
	r2 = D(r2, s[0][2][1], 0xFF02F8FD, 0x00F507FC, 0xFBFFFF02, 0x06EE06FA);
	r3 = D(r3, s[0][2][1], 0xF9100300, 0x010BFA04, 0xF8E5FBFD, 0xFCF102F3);
	r0 = D(r0, s[0][2][2], 0xFCFFF302, 0x01090505, 0x01F1FE0B, 0x07030DF7);
	r1 = D(r1, s[0][2][2], 0x000DFC0A, 0x02FA0005, 0x02050CF9, 0xFB21FDFB);
	r2 = D(r2, s[0][2][2], 0x0207FA01, 0x010AFAF8, 0x0309FC01, 0x000CFEFE);
	r3 = D(r3, s[0][2][2], 0x030300FB, 0xFFFDFA02, 0xFAF207FD, 0xFAFCFA0A);
	r0 = D(r0, s[1][0][0], 0xFDF70600, 0x0301FFFF, 0xF7F5F902, 0x0800FDFD);
	r1 = D(r1, s[1][0][0], 0xF500F0FF, 0xF70EF908, 0xFEFE0409, 0xFB040701);
	r2 = D(r2, s[1][0][0], 0xF8FF08FE, 0x02F7F3FF, 0x05F802F4, 0xF30001FB);
	r3 = D(r3, s[1][0][0], 0x06FB05FE, 0xF602FF02, 0x04FCFA03, 0x0DFAFF01);
	r0 = D(r0, s[1][0][1], 0x0AFDFBFA, 0x0303FEFC, 0x050214FE, 0xF9F6FDF8);
	r1 = D(r1, s[1][0][1], 0x0103FF00, 0x0107FC02, 0xFC050AFE, 0xFF00F807);
	r2 = D(r2, s[1][0][1], 0xF6090500, 0x0906000B, 0x0D0306F6, 0x0C0205FF);
	r3 = D(r3, s[1][0][1], 0x0A05090A, 0x09020805, 0xFE001300, 0x1006F704);
	r0 = D(r0, s[1][0][2], 0x0300FEFD, 0xFAFF02FA, 0x000412FA, 0x00FC08FA);
	r1 = D(r1, s[1][0][2], 0xF401FBFE, 0x02FAF806, 0xFCFFFDFA, 0xFE050C05);
	r2 = D(r2, s[1][0][2], 0xFB0404FD, 0x02FDFC09, 0x07FDFFF4, 0xFEFC0900);
	r3 = D(r3, s[1][0][2], 0xFC04FCF2, 0xFFF9FD0C, 0x04F6FD03, 0x0A07F505);
	r0 = D(r0, s[1][1][0], 0x03FB14ED, 0x09FEFB09, 0x0000F401, 0xFBFF0202);
	r1 = D(r1, s[1][1][0], 0xFD06EFFD, 0x0405EE25, 0xF700F9F7, 0x06FD01F8);
	r2 = D(r2, s[1][1][0], 0xFCFDF602, 0x0804F40A, 0x000402FB, 0x03FF120E);
	r3 = D(r3, s[1][1][0], 0xF3F8FBFD, 0x03070601, 0xFDF30700, 0x0305FD06);
	r0 = D(r0, s[1][1][1], 0xFAF5FA06, 0xE00AF115, 0xFF000EF0, 0x0C04F709);
	r1 = D(r1, s[1][1][1], 0xF60414F9, 0xE8021003, 0x0A190909, 0xE5FC04F6);
	r2 = D(r2, s[1][1][1], 0xEDF0FA03, 0xFF010016, 0x0FFEEFF5, 0x14F6FA14);
	r3 = D(r3, s[1][1][1], 0x0909E1FA, 0xFF07F10B, 0x04FDF404, 0xE6FFF3FF);
	r0 = D(r0, s[1][1][2], 0xFDFC0703, 0x04070302, 0xFA001406, 0xFE0CF0F3);
	r1 = D(r1, s[1][1][2], 0xF7FC030D, 0x03F5020D, 0x090602FA, 0xFF0BECFC);
	r2 = D(r2, s[1][1][2], 0xECF5F70A, 0xF701F607, 0x000203F5, 0x02FFF900);
	r3 = D(r3, s[1][1][2], 0xFF08FDFC, 0xFDFEED08, 0xFC00FE0A, 0xFAFE0203);
	r0 = D(r0, s[1][2][0], 0xFDF707F5, 0xFE0304FF, 0xF0020206, 0x02F602F5);
	r1 = D(r1, s[1][2][0], 0xF60007FB, 0xF404EB08, 0xFEFD04FD, 0x07FC0600);
	r2 = D(r2, s[1][2][0], 0xF4000A04, 0xFAF802FF, 0xFCFCFC06, 0xFCFB080C);
	r3 = D(r3, s[1][2][0], 0xFF050103, 0xFF000200, 0x090E000B, 0x00FD0205);
	r0 = D(r0, s[1][2][1], 0xF7EE0C06, 0x01FE0006, 0x05FE01F7, 0xFAF30601);
	r1 = D(r1, s[1][2][1], 0xFC00F207, 0xFD0A0101, 0x090504EC, 0x06F41504);
	r2 = D(r2, s[1][2][1], 0xF105F506, 0xFCF4FB00, 0x0C020500, 0xFDFD0007);
	r3 = D(r3, s[1][2][1], 0x0C00FAFB, 0xF9FA0903, 0x0D10F3FE, 0xFC09F806);
	r0 = D(r0, s[1][2][2], 0x0BFA0909, 0xF7FF02FD, 0xFB02F9F5, 0x01F7FD0B);
	r1 = D(r1, s[1][2][2], 0xF9FB0703, 0x0103F7FA, 0x02FD0101, 0x00F90EFF);
	r2 = D(r2, s[1][2][2], 0xF8FEFF03, 0x08F909F5, 0x01FBFCFD, 0xF7010D0A);
	r3 = D(r3, s[1][2][2], 0xFE03FD00, 0x03010B09, 0x090CFB07, 0x020801FA);
	s[0][0][0] = G[4][xy.y+0][xy.x+0]; s[0][0][1] = G[4][xy.y+0][xy.x+1];
	s[0][0][2] = G[4][xy.y+0][xy.x+2]; s[0][1][0] = G[4][xy.y+1][xy.x+0];
	s[0][1][1] = G[4][xy.y+1][xy.x+1]; s[0][1][2] = G[4][xy.y+1][xy.x+2];
	s[0][2][0] = G[4][xy.y+2][xy.x+0]; s[0][2][1] = G[4][xy.y+2][xy.x+1];
	s[0][2][2] = G[4][xy.y+2][xy.x+2]; s[1][0][0] = G[5][xy.y+0][xy.x+0];
	s[1][0][1] = G[5][xy.y+0][xy.x+1]; s[1][0][2] = G[5][xy.y+0][xy.x+2];
	s[1][1][0] = G[5][xy.y+1][xy.x+0]; s[1][1][1] = G[5][xy.y+1][xy.x+1];
	s[1][1][2] = G[5][xy.y+1][xy.x+2]; s[1][2][0] = G[5][xy.y+2][xy.x+0];
	s[1][2][1] = G[5][xy.y+2][xy.x+1]; s[1][2][2] = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0x0504F7FD, 0x0C01FE06, 0x06FCFD01, 0x08000206);
	r1 = D(r1, s[0][0][0], 0x05FEF804, 0xFBFA0513, 0xF7FD0900, 0x05FCFC01);
	r2 = D(r2, s[0][0][0], 0xFAFC08FF, 0xF1F904E8, 0xF5FFFA0C, 0x0703FE07);
	r3 = D(r3, s[0][0][0], 0xF9FF0A0C, 0x030C020B, 0xFEF3FA02, 0xF60304F2);
	r0 = D(r0, s[0][0][1], 0xF7FB06FD, 0x0A01FA0D, 0xFFF906F6, 0x010CF907);
	r1 = D(r1, s[0][0][1], 0x0AFAFD06, 0xEF01F707, 0xFD10FDFD, 0x07F0FC01);
	r2 = D(r2, s[0][0][1], 0x00F002FB, 0x0F0302EC, 0xF8FF0209, 0x01FD0317);
	r3 = D(r3, s[0][0][1], 0x0AF00310, 0x020003FE, 0x03EC0703, 0xF40003E7);
	r0 = D(r0, s[0][0][2], 0x0300FC07, 0x06FD0205, 0x0501F800, 0x07F90805);
	r1 = D(r1, s[0][0][2], 0xFCF7FBFA, 0x030F04FF, 0x01FE05FF, 0x09FB00F4);
	r2 = D(r2, s[0][0][2], 0xFFEE0402, 0xF1FC0007, 0xF6F1FD00, 0x04FDFA04);
	r3 = D(r3, s[0][0][2], 0xF803FC05, 0xFEFC0409, 0xFB02FF01, 0xF5F8F900);
	r0 = D(r0, s[0][1][0], 0x0503050B, 0xFBFEFD04, 0x0B020405, 0x0C01FA01);
	r1 = D(r1, s[0][1][0], 0x10FEF703, 0x0908FBFB, 0xFCFA03FD, 0xF80707F5);
	r2 = D(r2, s[0][1][0], 0x03FFFEFD, 0x00020407, 0xF9040905, 0xF507090E);
	r3 = D(r3, s[0][1][0], 0xF802FD07, 0x05F9F8FB, 0xEC0205FD, 0x09F5FAEF);
	r0 = D(r0, s[0][1][1], 0x000BFAE6, 0x0202FB10, 0xFD120417, 0xF8F706F5);
	r1 = D(r1, s[0][1][1], 0xFA0804F2, 0x1604F7FB, 0xFAE905F6, 0xF7070F06);
	r2 = D(r2, s[0][1][1], 0x010CF41B, 0xEAFBFAF8, 0x06ED0105, 0xFB0006F6);
	r3 = D(r3, s[0][1][1], 0x00FE0615, 0xF1FD0B21, 0x160903F1, 0x04FFF70F);
	r0 = D(r0, s[0][1][2], 0xF3FA03F7, 0xF9FC09F6, 0x051008FF, 0xEAF0F6EC);
	r1 = D(r1, s[0][1][2], 0x00F302F6, 0x000A0003, 0xF6FAF8FA, 0x07FB03F8);
	r2 = D(r2, s[0][1][2], 0x08F1FF03, 0x00FFFFFE, 0xFDF108FF, 0x00FCFD0E);
	r3 = D(r3, s[0][1][2], 0x01F7FEFF, 0xF508FE11, 0xFCF702FD, 0x03030CFD);
	r0 = D(r0, s[0][2][0], 0x0004FEF7, 0x05FD03FF, 0xFA080003, 0x0A0000FE);
	r1 = D(r1, s[0][2][0], 0x0206FAFD, 0x00F7FDF4, 0x02000702, 0x00050605);
	r2 = D(r2, s[0][2][0], 0xF60EFA0A, 0x0002FBFC, 0x06FFFF02, 0xFE0AFEF7);
	r3 = D(r3, s[0][2][0], 0x03010706, 0x03F30206, 0xF40606FD, 0xED06080A);
	r0 = D(r0, s[0][2][1], 0x0E0B01FE, 0x07FC0103, 0x020403F7, 0x1004EFF8);
	r1 = D(r1, s[0][2][1], 0xF9FAF70A, 0x08040700, 0xFEFDFDFD, 0xF70C03F9);
	r2 = D(r2, s[0][2][1], 0x060FEFF7, 0xF702FDFB, 0xFF0903FD, 0x10F9FA13);
	r3 = D(r3, s[0][2][1], 0xFEFE04EF, 0x0D09FEF9, 0xF206F60E, 0x04FE01FE);
	r0 = D(r0, s[0][2][2], 0xFC06FAFD, 0x030300FC, 0xFF0100FD, 0xFB070AFF);
	r1 = D(r1, s[0][2][2], 0xFFFA01FB, 0x04FF02FB, 0xFAF804FB, 0x04FA00FF);
	r2 = D(r2, s[0][2][2], 0x0CF9FF04, 0x0609FDF3, 0x03FC0307, 0xF4FDFD03);
	r3 = D(r3, s[0][2][2], 0x0005000B, 0x0806FF07, 0xF00500FB, 0x000601FD);
	r0 = D(r0, s[1][0][0], 0x00FD09F4, 0xFC081002, 0x050AFEF7, 0xFB01FD03);
	r1 = D(r1, s[1][0][0], 0xFC0E1B02, 0xF804F701, 0x07F9F1FC, 0x00021101);
	r2 = D(r2, s[1][0][0], 0x070EF5FD, 0x09FF0603, 0x080601FF, 0x000001FA);
	r3 = D(r3, s[1][0][0], 0x0600EBFC, 0x04FE0203, 0xFE1306F7, 0xFDFF0A01);
	r0 = D(r0, s[1][0][1], 0xFF06080C, 0xFD091407, 0x0803F505, 0x04F505F5);
	r1 = D(r1, s[1][0][1], 0x00040D01, 0xFB010B06, 0x02F80700, 0x0402FCFC);
	r2 = D(r2, s[1][0][1], 0xFE12F3FD, 0xFCF30C06, 0x0105EEFA, 0xF309F701);
	r3 = D(r3, s[1][0][1], 0xF10CF0F3, 0xFCFF0204, 0xF80F07FD, 0x050A000F);
	r0 = D(r0, s[1][0][2], 0xFE0C09FF, 0xF9050C00, 0xFAFD0B08, 0xFA0CF9F8);
	r1 = D(r1, s[1][0][2], 0xFB080B08, 0x08F8F6FA, 0x0008FCFD, 0xFA020A02);
	r2 = D(r2, s[1][0][2], 0x06150008, 0x00F70608, 0xF707F506, 0x030E00FD);
	r3 = D(r3, s[1][0][2], 0xFA000F04, 0xFD0AFEFA, 0x05FF04FB, 0x00FFFF04);
	r0 = D(r0, s[1][1][0], 0xF5FA0CF5, 0x0B011AF6, 0x00FD0800, 0x0000FF01);
	r1 = D(r1, s[1][1][0], 0x000A1BEF, 0xFDFDFA10, 0x08FCE601, 0x0BF90E00);
	r2 = D(r2, s[1][1][0], 0x0301FDFA, 0x05F80CE8, 0xF2F8FDFD, 0x0806FDF6);
	r3 = D(r3, s[1][1][0], 0xF90FF6FF, 0xFA03FD09, 0x15080F03, 0x01F91BFB);
	r0 = D(r0, s[1][1][1], 0xFCF31409, 0xFAF70FF3, 0x1BF206F7, 0xF106EDFB);
	r1 = D(r1, s[1][1][1], 0x03F9081D, 0xFE03FCFD, 0x090EE3EE, 0x0BFA15FF);
	r2 = D(r2, s[1][1][1], 0xFDFD0904, 0x0F0A0BF9, 0xF709F9F5, 0xF809F311);
	r3 = D(r3, s[1][1][1], 0xFFF8DBFC, 0x0615F8E8, 0x0909FF08, 0xFDF73203);
	r0 = D(r0, s[1][1][2], 0x04FE0104, 0x050C05FF, 0x00F409FC, 0x0609F006);
	r1 = D(r1, s[1][1][2], 0x04160606, 0xFE02F7F9, 0xFFFCFA07, 0x03060806);
	r2 = D(r2, s[1][1][2], 0x0313FEFE, 0x060DFBF4, 0x000CF0FB, 0xFDF7FC02);
	r3 = D(r3, s[1][1][2], 0x0005F7FB, 0xFE070BFD, 0x0CF9FAF7, 0x05EE0000);
	r0 = D(r0, s[1][2][0], 0xF8020103, 0x04FF0CFF, 0xFBFC0100, 0xF703FCFF);
	r1 = D(r1, s[1][2][0], 0xFCFE17FA, 0x060E0001, 0xFA03F2FA, 0x0CF814F4);
	r2 = D(r2, s[1][2][0], 0x0EFDF7FE, 0x03FB0CFD, 0x0B03FD03, 0x00FFF805);
	r3 = D(r3, s[1][2][0], 0xEE0401FD, 0x0008EE0F, 0x08F403F2, 0x10F7FBFF);
	r0 = D(r0, s[1][2][1], 0x0300FEFD, 0xFAF00D07, 0x040A0DFE, 0xF705EF0E);
	r1 = D(r1, s[1][2][1], 0x130A19F1, 0xFF01F3F2, 0xFD06EE17, 0x05F50C01);
	r2 = D(r2, s[1][2][1], 0xFAF90DFF, 0xFCF6FA00, 0xF0EDF107, 0xFB0310F7);
	r3 = D(r3, s[1][2][1], 0xF0030113, 0xFDF4F60C, 0x180608F4, 0x0C0E13FC);
	r0 = D(r0, s[1][2][2], 0x06F809FA, 0xFD0105FE, 0x080B03F9, 0xFBFAF4F7);
	r1 = D(r1, s[1][2][2], 0x00071300, 0x05FCFC0A, 0xFDFDF902, 0xFF021502);
	r2 = D(r2, s[1][2][2], 0xFA03F5FB, 0xF9FEFE07, 0xFB05FE08, 0x0303F4FB);
	r3 = D(r3, s[1][2][2], 0xFC00FC02, 0xF4FCF004, 0x04000BFA, 0x07F808FD);
	s[0][0][0] = G[6][xy.y+0][xy.x+0]; s[0][0][1] = G[6][xy.y+0][xy.x+1];
	s[0][0][2] = G[6][xy.y+0][xy.x+2]; s[0][1][0] = G[6][xy.y+1][xy.x+0];
	s[0][1][1] = G[6][xy.y+1][xy.x+1]; s[0][1][2] = G[6][xy.y+1][xy.x+2];
	s[0][2][0] = G[6][xy.y+2][xy.x+0]; s[0][2][1] = G[6][xy.y+2][xy.x+1];
	s[0][2][2] = G[6][xy.y+2][xy.x+2]; s[1][0][0] = G[7][xy.y+0][xy.x+0];
	s[1][0][1] = G[7][xy.y+0][xy.x+1]; s[1][0][2] = G[7][xy.y+0][xy.x+2];
	s[1][1][0] = G[7][xy.y+1][xy.x+0]; s[1][1][1] = G[7][xy.y+1][xy.x+1];
	s[1][1][2] = G[7][xy.y+1][xy.x+2]; s[1][2][0] = G[7][xy.y+2][xy.x+0];
	s[1][2][1] = G[7][xy.y+2][xy.x+1]; s[1][2][2] = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0xFDFF0101, 0xFEFBFEFD, 0xF706FDF1, 0x09FFF800);
	r1 = D(r1, s[0][0][0], 0x03FFFAF8, 0xFF030BFF, 0x0505FF0C, 0x09FA0400);
	r2 = D(r2, s[0][0][0], 0x00F7F706, 0xFA08FDFB, 0x01FEF907, 0x03FDFEF9);
	r3 = D(r3, s[0][0][0], 0xF3FC02FD, 0x03040007, 0xF8FD0201, 0xF7070A01);
	r0 = D(r0, s[0][0][1], 0x0C02FD04, 0xF5FCFA00, 0x05FFFC05, 0x0B040309);
	r1 = D(r1, s[0][0][1], 0xFA0604F7, 0xFD000806, 0x10090309, 0x03F7F602);
	r2 = D(r2, s[0][0][1], 0xEFF8F604, 0x020BEEFA, 0x030CFFEA, 0xF00314EE);
	r3 = D(r3, s[0][0][1], 0xF404F2F5, 0xFEFF02FC, 0xFC0406F9, 0xF3F8F7F4);
	r0 = D(r0, s[0][0][2], 0xFE00F5FB, 0x050B0002, 0xFEF409FE, 0x0FFF03F6);
	r1 = D(r1, s[0][0][2], 0x02FFFFFC, 0x0A0A0307, 0xFBFDFC01, 0x01090300);
	r2 = D(r2, s[0][0][2], 0x01FBFDF7, 0x07FDF9F9, 0xFFFD08FF, 0xFAFC0101);
	r3 = D(r3, s[0][0][2], 0xF70007FF, 0xF605F907, 0x000607FF, 0xEEF1FEFD);
	r0 = D(r0, s[0][1][0], 0xFEFE03F8, 0x01FAEE02, 0x0403F2FB, 0x03060005);
	r1 = D(r1, s[0][1][0], 0x0501FEF3, 0x00FFF609, 0x000F0500, 0x0F03FF0C);
	r2 = D(r2, s[0][1][0], 0x0401F307, 0xF2081503, 0x0003FF03, 0x0EF406DC);
	r3 = D(r3, s[0][1][0], 0x0000FBFD, 0x0CF80703, 0xFA00060D, 0xF9040407);
	r0 = D(r0, s[0][1][1], 0x17F3FA10, 0xFA0A0018, 0x0DFCDDFC, 0x09040EC9);
	r1 = D(r1, s[0][1][1], 0x05FDE500, 0xE10E05FD, 0x0310FFD5, 0x07FAF10F);
	r2 = D(r2, s[0][1][1], 0xF906EC0B, 0xFAF30503, 0x06000914, 0x01FBFCF7);
	r3 = D(r3, s[0][1][1], 0x11F7F5F6, 0xF8120C07, 0x08F8F3FE, 0xEEFFF023);
	r0 = D(r0, s[0][1][2], 0xF400FFFC, 0xFB0606FC, 0x03F6FEFB, 0xFC050308);
	r1 = D(r1, s[0][1][2], 0x040603F7, 0x0CF0FF02, 0xFA020DFE, 0x1019F8FA);
	r2 = D(r2, s[0][1][2], 0xFF02F8FE, 0xF9130BF7, 0x0F0DFFFD, 0xF104FEF2);
	r3 = D(r3, s[0][1][2], 0x0E050000, 0xFE030802, 0xF906F8FB, 0xE8F7FFFA);
	r0 = D(r0, s[0][2][0], 0x020AF9FF, 0x05FDF8FF, 0x000103F5, 0x05FDF9FE);
	r1 = D(r1, s[0][2][0], 0x0600FAFB, 0x00FF01FE, 0xFA1405FE, 0x060000F4);
	r2 = D(r2, s[0][2][0], 0xFAFF0AFD, 0xEFFDFAFF, 0x0600F905, 0x050303FC);
	r3 = D(r3, s[0][2][0], 0xF702FF03, 0x0500FC09, 0x00F80AFA, 0xF70307FF);
	r0 = D(r0, s[0][2][1], 0x0E070007, 0x09FEF5FD, 0x0E08F8FA, 0x11080CF5);
	r1 = D(r1, s[0][2][1], 0x07EFF7FA, 0xEEFEFC00, 0x0A12FEF9, 0x07080301);
	r2 = D(r2, s[0][2][1], 0x02FE0A00, 0x050C0206, 0xF800FB09, 0x000801FF);
	r3 = D(r3, s[0][2][1], 0xFFFAFE0C, 0x0AFFF3F2, 0xFAF20BF5, 0x1300FA03);
	r0 = D(r0, s[0][2][2], 0x13030AF8, 0xFE090500, 0xF7FB0300, 0x031CFA08);
	r1 = D(r1, s[0][2][2], 0xFD0800FC, 0x0DFA0003, 0xFF19F70A, 0x080703FB);
	r2 = D(r2, s[0][2][2], 0xFDEE04FA, 0x0C060106, 0xFB010600, 0xF1010CF5);
	r3 = D(r3, s[0][2][2], 0xFAF0FD00, 0x1809FC03, 0xEFE9FEFF, 0xF0FD05F8);
	r0 = D(r0, s[1][0][0], 0x03FFF903, 0xFDFB0407, 0xF907F00C, 0xFEFB0608);
	r1 = D(r1, s[1][0][0], 0x0401FA01, 0xF4FF0604, 0xFAFF0B03, 0x0401FC00);
	r2 = D(r2, s[1][0][0], 0x000B0A09, 0xFE04F90A, 0xFF010204, 0xFDFD06F7);
	r3 = D(r3, s[1][0][0], 0x01020AFD, 0xFFFE09FD, 0x070509FC, 0x01FD0109);
	r0 = D(r0, s[1][0][1], 0xFE010605, 0x05FAFBFA, 0xF5FA00FB, 0x06FAFCFB);
	r1 = D(r1, s[1][0][1], 0x07FFF5FE, 0xFCF8F703, 0xFD00FC01, 0x0BFF0AFE);
	r2 = D(r2, s[1][0][1], 0x050B1408, 0xFEF70C0B, 0xFE0A030D, 0x0906FEFC);
	r3 = D(r3, s[1][0][1], 0x02FE1808, 0xFEFB0400, 0x0301FD04, 0xF5090F0C);
	r0 = D(r0, s[1][0][2], 0x000E0903, 0x06FB0200, 0x0005FFFB, 0xFE01FBFF);
	r1 = D(r1, s[1][0][2], 0x09FDFDFD, 0xFC05FCFD, 0xFF070000, 0x09F600FD);
	r2 = D(r2, s[1][0][2], 0x0303FB08, 0x00F70907, 0x06F5FEFE, 0x0401FC02);
	r3 = D(r3, s[1][0][2], 0x030301FD, 0x03F00500, 0xFEF8F002, 0x010309FF);
	r0 = D(r0, s[1][1][0], 0x08120901, 0x0000F404, 0xF6FB0003, 0xFF00FFF8);
	r1 = D(r1, s[1][1][0], 0xF8F70105, 0xF4FE0003, 0x0304FEF7, 0x02F9EE03);
	r2 = D(r2, s[1][1][0], 0xF908FF04, 0xFF020604, 0x03FFFB04, 0x0608F009);
	r3 = D(r3, s[1][1][0], 0x00020BEC, 0x0905ECF9, 0xF9F7F804, 0xF8FE03FE);
	r0 = D(r0, s[1][1][1], 0xFD17F6FB, 0xFCF001F7, 0x05FA1B01, 0xFA01EF0A);
	r1 = D(r1, s[1][1][1], 0xFEF00CFB, 0xFE1313EE, 0xFA03FB1B, 0x06FDF3F9);
	r2 = D(r2, s[1][1][1], 0xFC02DE01, 0x07ECF6F8, 0xFEFEF7F3, 0x02FE0B03);
	r3 = D(r3, s[1][1][1], 0xF910070B, 0x0A10EFFD, 0xF90711F7, 0x04EE0FF2);
	r0 = D(r0, s[1][1][2], 0x05FFF703, 0x0AF5F7FC, 0x020AFAFC, 0xF80003FE);
	r1 = D(r1, s[1][1][2], 0x05FEF6FD, 0x0009FE06, 0xFDFBF8FA, 0x00ED0000);
	r2 = D(r2, s[1][1][2], 0x040F10FB, 0x02FDF5F8, 0xFD000F07, 0x00030608);
	r3 = D(r3, s[1][1][2], 0xFF010902, 0xFF08F7FB, 0xFCFD06FF, 0x0AFD0A03);
	r0 = D(r0, s[1][2][0], 0x08FF0001, 0xFDFD01FC, 0xFB000307, 0x0202FF03);
	r1 = D(r1, s[1][2][0], 0xFA080803, 0xFC00FDFD, 0xFFFFF504, 0x02F9ED00);
	r2 = D(r2, s[1][2][0], 0xF80FFA09, 0x03080908, 0x060002FC, 0x010000FF);
	r3 = D(r3, s[1][2][0], 0x06FD0501, 0x00F9FEFD, 0xF406F4FC, 0x0100F8FF);
	r0 = D(r0, s[1][2][1], 0xFB0CF605, 0x01030800, 0xF9F5FB01, 0xFFF6FD03);
	r1 = D(r1, s[1][2][1], 0x00080300, 0x06010702, 0xFEFDF903, 0x02EFE5FF);
	r2 = D(r2, s[1][2][1], 0x04FD0208, 0x030B0105, 0x060101F8, 0xFA060606);
	r3 = D(r3, s[1][2][1], 0x00F403F5, 0x040C0001, 0xECFCFF05, 0xE5000502);
	r0 = D(r0, s[1][2][2], 0xFF08FB00, 0x01F90902, 0x08FEFD01, 0x0AFB01FB);
	r1 = D(r1, s[1][2][2], 0x08F80301, 0xFDFFFEFD, 0x030202F9, 0x07FBFDFA);
	r2 = D(r2, s[1][2][2], 0x05010201, 0xFD0607FE, 0x01FA02FE, 0x0102FAFE);
	r3 = D(r3, s[1][2][2], 0xFA040203, 0xF603FBFC, 0xFD100302, 0x01FAFB08);
	vec4 f0 = vec4(r0) * 6.20001240e-05;
	f0 += vec4(-5.431e-03, -7.073e-03, 1.622e-03, -5.678e-03);
	imageStore(out_image, opos + ivec2(0, 0), vec4(f0));
	vec4 f1 = vec4(r1) * 6.20001240e-05;
	f1 += vec4(-1.207e-02, -7.043e-03, -5.797e-03, -9.521e-03);
	imageStore(out_image, opos + ivec2(1, 0), vec4(f1));
	vec4 f2 = vec4(r2) * 6.20001240e-05;
	f2 += vec4(2.430e-02, 1.564e-03, 5.198e-03, -2.916e-04);
	imageStore(out_image, opos + ivec2(0, 1), vec4(f2));
	vec4 f3 = vec4(r3) * 6.20001240e-05;
	f3 += vec4(1.507e-02, -4.050e-02, 3.834e-02, 1.298e-02);
	imageStore(out_image, opos + ivec2(1, 1), vec4(f3));
}

//!DESC CuNNy-16x16C-TEST-conv15
//!HOOK LUMA
//!COMPUTE 16 16 8 8
//!BIND conv14
//!BIND LUMA
//!SAVE conv15
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_spirv_intrinsics : require
#extension GL_EXT_control_flow_attributes : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) ivec4(r.x + dp4(s, a, 0), r.y + dp4(s, b, 0), r.z + dp4(s, c, 0), r.w + dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	[[unroll]] for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		[[unroll]] for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(2, 2) + ivec2(1, 1)) * conv14_pt;
			r = conv14_gather(p, 0);
			g = conv14_gather(p, 1);
			b = conv14_gather(p, 2);
			a = conv14_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.00000000e+00;
			vec4 v2 = vec4(r.z, g.z, b.z, a.z) * 1.00000000e+00;
			vec4 v4 = vec4(r.x, g.x, b.x, a.x) * 1.00000000e+00;
			vec4 v6 = vec4(r.y, g.y, b.y, a.y) * 1.00000000e+00;
			vec4 v1 = max(-v0, vec4(0));
			v0 = max(v0, vec4(0));
			vec4 v3 = max(-v2, vec4(0));
			v2 = max(v2, vec4(0));
			vec4 v5 = max(-v4, vec4(0));
			v4 = max(v4, vec4(0));
			vec4 v7 = max(-v6, vec4(0));
			v6 = max(v6, vec4(0));
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s[2][3][3];
	ivec4 r0 = ivec4(0);
	ivec4 r1 = ivec4(0);
	ivec4 r2 = ivec4(0);
	ivec4 r3 = ivec4(0);
	s[0][0][0] = G[0][xy.y+0][xy.x+0]; s[0][0][1] = G[0][xy.y+0][xy.x+1];
	s[0][0][2] = G[0][xy.y+0][xy.x+2]; s[0][1][0] = G[0][xy.y+1][xy.x+0];
	s[0][1][1] = G[0][xy.y+1][xy.x+1]; s[0][1][2] = G[0][xy.y+1][xy.x+2];
	s[0][2][0] = G[0][xy.y+2][xy.x+0]; s[0][2][1] = G[0][xy.y+2][xy.x+1];
	s[0][2][2] = G[0][xy.y+2][xy.x+2]; s[1][0][0] = G[1][xy.y+0][xy.x+0];
	s[1][0][1] = G[1][xy.y+0][xy.x+1]; s[1][0][2] = G[1][xy.y+0][xy.x+2];
	s[1][1][0] = G[1][xy.y+1][xy.x+0]; s[1][1][1] = G[1][xy.y+1][xy.x+1];
	s[1][1][2] = G[1][xy.y+1][xy.x+2]; s[1][2][0] = G[1][xy.y+2][xy.x+0];
	s[1][2][1] = G[1][xy.y+2][xy.x+1]; s[1][2][2] = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0xFB050402, 0x01FDFB03, 0xFEFCFEFD, 0x00060303);
	r1 = D(r1, s[0][0][0], 0xF60307FC, 0x1A0CFBF8, 0x0C00F804, 0x0A05F408);
	r2 = D(r2, s[0][0][0], 0xFDFF01F9, 0x0300FEFF, 0xFCF901FB, 0x06FFFC03);
	r3 = D(r3, s[0][0][0], 0x08FDF80A, 0xF902FEFB, 0x0301FB05, 0x07FFFDFA);
	r0 = D(r0, s[0][0][1], 0xFD00F4F3, 0x000205FF, 0xFA0407FB, 0x0B02FDF1);
	r1 = D(r1, s[0][0][1], 0xFA0BF006, 0x0AFDFF01, 0xF0FE0500, 0xFEFB0AFE);
	r2 = D(r2, s[0][0][1], 0xEF09FAFA, 0x0AFA11F9, 0x0BF90108, 0x0703FE06);
	r3 = D(r3, s[0][0][1], 0x0307FB06, 0xFA03F608, 0xF8FBFD0B, 0xFDFCF906);
	r0 = D(r0, s[0][0][2], 0x04FB0406, 0xFBFBFB00, 0x07FD0403, 0x07FEF902);
	r1 = D(r1, s[0][0][2], 0x01060304, 0x03010108, 0x00020202, 0x05FD0003);
	r2 = D(r2, s[0][0][2], 0xF6040505, 0x0BFCFE03, 0x0102FF01, 0xFA050402);
	r3 = D(r3, s[0][0][2], 0xFB050207, 0x0500FA06, 0xFE020906, 0xE9000602);
	r0 = D(r0, s[0][1][0], 0xD90018F3, 0x07080105, 0xF4FB25F4, 0xFB0300FC);
	r1 = D(r1, s[0][1][0], 0x10F306F6, 0x03F71DEF, 0xFBFAFD06, 0xFDFEFCFC);
	r2 = D(r2, s[0][1][0], 0x1F00E3FD, 0x00020DF8, 0x0D03FBF5, 0x04FBF005);
	r3 = D(r3, s[0][1][0], 0x0906FAFB, 0x01FD0AFF, 0x01FA0006, 0x00F8F5FC);
	r0 = D(r0, s[0][1][1], 0x2006DDE4, 0x1AFBF7F0, 0x10FBE3FE, 0x140002FF);
	r1 = D(r1, s[0][1][1], 0x31EDFE11, 0x3704F417, 0xEB0F1715, 0x0AF70BFC);
	r2 = D(r2, s[0][1][1], 0x02041D0C, 0x0BF200DB, 0x08FC07FE, 0xED051212);
	r3 = D(r3, s[0][1][1], 0x05021000, 0xF5FFF61A, 0xEAFD0418, 0x01F7011A);
	r0 = D(r0, s[0][1][2], 0x1505F417, 0x050C08FB, 0xF6FA0003, 0x0301F2F6);
	r1 = D(r1, s[0][1][2], 0x0A0304F8, 0x060103F8, 0xF2FFFFF5, 0xF4FEFB0A);
	r2 = D(r2, s[0][1][2], 0xFFFD0AFA, 0x02FEF810, 0x03FFF30D, 0xFB0305F6);
	r3 = D(r3, s[0][1][2], 0xFCFF02FE, 0xFD01F608, 0x07FE0A0B, 0xE50208FE);
	r0 = D(r0, s[0][2][0], 0xF2FE02FF, 0x0602FC02, 0x0F08F801, 0x00080300);
	r1 = D(r1, s[0][2][0], 0xF7EE04FA, 0x02FCFBF6, 0xFC09FDF5, 0x07020205);
	r2 = D(r2, s[0][2][0], 0xEA030509, 0x02FEFD01, 0x0EF7F5FC, 0x000AF210);
	r3 = D(r3, s[0][2][0], 0x000B00FA, 0x06FFF503, 0x0101FB03, 0x01F9FDF4);
	r0 = D(r0, s[0][2][1], 0x04FAF8FA, 0x00F40B06, 0xFB0CFEFF, 0x05F3FBF0);
	r1 = D(r1, s[0][2][1], 0xFA01020D, 0x05F3FE08, 0xFD04F7E9, 0x00FEF709);
	r2 = D(r2, s[0][2][1], 0xF3FA0A02, 0x0300F9F7, 0x0AF80208, 0xFA050C0E);
	r3 = D(r3, s[0][2][1], 0xFD00FDFA, 0x12FEFB06, 0x0F0B030E, 0x06FC0AFE);
	r0 = D(r0, s[0][2][2], 0x0B00FB08, 0x0203FE0B, 0xF800FA03, 0x0CFBF6F3);
	r1 = D(r1, s[0][2][2], 0xFFFCF704, 0x1004FD01, 0x00FBFFFE, 0x02FF04FA);
	r2 = D(r2, s[0][2][2], 0xFCFAF9FF, 0x02FE0606, 0x09FC00EE, 0xFE0200FE);
	r3 = D(r3, s[0][2][2], 0x02FF06FF, 0x1302F8F9, 0xFA020807, 0x020003FD);
	r0 = D(r0, s[1][0][0], 0xFCF80201, 0x03050301, 0x000D0000, 0x00FDFE00);
	r1 = D(r1, s[1][0][0], 0x01FE03FA, 0xFBF2FD06, 0xFFFDFC04, 0x02FBFF04);
	r2 = D(r2, s[1][0][0], 0x0C0002FF, 0xF8FF02FF, 0x050305F7, 0xFF01FE02);
	r3 = D(r3, s[1][0][0], 0x050003FD, 0xFE020802, 0xFDFE00FF, 0xFDF70200);
	r0 = D(r0, s[1][0][1], 0x0002FDFA, 0x05FEFC05, 0x03FFF8FA, 0xF9FDFC05);
	r1 = D(r1, s[1][0][1], 0xFFFE0CFA, 0xFC0706FB, 0x0A03FB00, 0xFEFE0901);
	r2 = D(r2, s[1][0][1], 0xFE010900, 0xF805F8FD, 0x030306FD, 0xFE01FCFA);
	r3 = D(r3, s[1][0][1], 0xFCFAFE02, 0x04FC0207, 0x0B03F8FB, 0xF5040AFB);
	r0 = D(r0, s[1][0][2], 0xFC02F6FD, 0x070804FD, 0xFF00FEFE, 0x000402F8);
	r1 = D(r1, s[1][0][2], 0x00FB01FF, 0xFEFBFEFD, 0xFBFD0400, 0x01FEFC05);
	r2 = D(r2, s[1][0][2], 0xFE0109F6, 0xFC00FBFE, 0x00FD00FC, 0x00FFFEFA);
	r3 = D(r3, s[1][0][2], 0x030201F6, 0xFCFD0002, 0xF8F8F8FC, 0x02FD0401);
	r0 = D(r0, s[1][1][0], 0x07FE00FE, 0x00FD0603, 0xFF000BFC, 0xFB000808);
	r1 = D(r1, s[1][1][0], 0x021DF702, 0x05021A02, 0x07F203F9, 0x07F80EFC);
	r2 = D(r2, s[1][1][0], 0xF8FBFE0B, 0xFE000306, 0x0501F60E, 0xFAFA0302);
	r3 = D(r3, s[1][1][0], 0xFDF902FE, 0xFEF4F60D, 0x0503F8F9, 0x0310FB0B);
	r0 = D(r0, s[1][1][1], 0xF1E50209, 0xFE0402F5, 0x0B07F9FA, 0xFFFCED17);
	r1 = D(r1, s[1][1][1], 0xF60CEFFB, 0x0210EE00, 0xFEF5E706, 0x03040FF8);
	r2 = D(r2, s[1][1][1], 0xEE0BEB22, 0xFFFE0B01, 0x0C06F4FC, 0xF8ECFEFD);
	r3 = D(r3, s[1][1][1], 0xF007EE08, 0x0AF80808, 0x140AF0F8, 0xFE15F1E7);
	r0 = D(r0, s[1][1][2], 0x03000000, 0xFCFAF804, 0x0203FF02, 0x0D0807E9);
	r1 = D(r1, s[1][1][2], 0xFC01F201, 0xFB00FE02, 0xFDFD060B, 0x09080EF4);
	r2 = D(r2, s[1][1][2], 0xFAFFFA02, 0x0A0800FF, 0xFAFB00FD, 0xFEF90401);
	r3 = D(r3, s[1][1][2], 0x070504FB, 0xFDF405FA, 0xF409FB07, 0xFFFD080A);
	r0 = D(r0, s[1][2][0], 0x0605FE04, 0xFB01F701, 0xF9EEFD03, 0xFFFB0203);
	r1 = D(r1, s[1][2][0], 0x02F8FBFB, 0x07040A03, 0xFB01050A, 0xFE09FF00);
	r2 = D(r2, s[1][2][0], 0x03F100FE, 0x00080402, 0x0307FBFB, 0xFEFE03FE);
	r3 = D(r3, s[1][2][0], 0xF9FD0105, 0x0800FBFC, 0xFEF9FEFE, 0x02F80100);
	r0 = D(r0, s[1][2][1], 0xFFE4FA01, 0xFEF8FEFC, 0x04FDF808, 0x04FA04FC);
	r1 = D(r1, s[1][2][1], 0x06FA07FF, 0xFDFF0DF3, 0xF7F810FD, 0x041B01FD);
	r2 = D(r2, s[1][2][1], 0x0BEE0BFE, 0xFF03FF02, 0x0715EFFE, 0xFF0FFEF3);
	r3 = D(r3, s[1][2][1], 0x00060801, 0x0B0305FC, 0xF60FFAFD, 0xFEF701FB);
	r0 = D(r0, s[1][2][2], 0x0607FEFD, 0x06FC01FF, 0xFEFE03FF, 0x030FFA00);
	r1 = D(r1, s[1][2][2], 0x02FB0403, 0x03F9FE09, 0x000306FE, 0xF9FA0B06);
	r2 = D(r2, s[1][2][2], 0x09020BFF, 0x0300F9FD, 0xF8FEF8FB, 0xFDFCFD03);
	r3 = D(r3, s[1][2][2], 0xFF03FFFE, 0xF802FD02, 0xF8FCFFFE, 0x0002F900);
	s[0][0][0] = G[2][xy.y+0][xy.x+0]; s[0][0][1] = G[2][xy.y+0][xy.x+1];
	s[0][0][2] = G[2][xy.y+0][xy.x+2]; s[0][1][0] = G[2][xy.y+1][xy.x+0];
	s[0][1][1] = G[2][xy.y+1][xy.x+1]; s[0][1][2] = G[2][xy.y+1][xy.x+2];
	s[0][2][0] = G[2][xy.y+2][xy.x+0]; s[0][2][1] = G[2][xy.y+2][xy.x+1];
	s[0][2][2] = G[2][xy.y+2][xy.x+2]; s[1][0][0] = G[3][xy.y+0][xy.x+0];
	s[1][0][1] = G[3][xy.y+0][xy.x+1]; s[1][0][2] = G[3][xy.y+0][xy.x+2];
	s[1][1][0] = G[3][xy.y+1][xy.x+0]; s[1][1][1] = G[3][xy.y+1][xy.x+1];
	s[1][1][2] = G[3][xy.y+1][xy.x+2]; s[1][2][0] = G[3][xy.y+2][xy.x+0];
	s[1][2][1] = G[3][xy.y+2][xy.x+1]; s[1][2][2] = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0x03FFFCFC, 0xF8000302, 0x05FB0100, 0x070603FE);
	r1 = D(r1, s[0][0][0], 0x08F7FAF9, 0x0C09F8FF, 0xFA08FDF7, 0x0806FEFD);
	r2 = D(r2, s[0][0][0], 0x05FB0000, 0x01FDFEFA, 0x02FC09F7, 0xFD03FD00);
	r3 = D(r3, s[0][0][0], 0x02F909FB, 0xFD0302EE, 0xFB1003FC, 0xFB0AFEFB);
	r0 = D(r0, s[0][0][1], 0xF90F0801, 0xF20BF800, 0x06FA00FA, 0x0302FFFB);
	r1 = D(r1, s[0][0][1], 0x1AF603F6, 0x10F605FE, 0x06FBFBFA, 0xFFFFFF03);
	r2 = D(r2, s[0][0][1], 0x1703F9FB, 0xF202FEF9, 0x0EFEFFE9, 0xFEFEFC07);
	r3 = D(r3, s[0][0][1], 0x0AFEFD01, 0x02FBFDEC, 0x0FF803FB, 0x11FDFEFA);
	r0 = D(r0, s[0][0][2], 0x0CF608F8, 0xEE0105FF, 0x03010204, 0xFDFD0905);
	r1 = D(r1, s[0][0][2], 0x02FD0601, 0xF6F90B02, 0x07030205, 0xFB0505FF);
	r2 = D(r2, s[0][0][2], 0x040AFAFD, 0xFBFE05FB, 0x050600F5, 0xF502F80A);
	r3 = D(r3, s[0][0][2], 0xF101FB0A, 0xFBFD02FC, 0x0702FBFA, 0xF202FE06);
	r0 = D(r0, s[0][1][0], 0xF105F6FA, 0x02FEFDF7, 0xE9FEFBFA, 0xF6FBFFFD);
	r1 = D(r1, s[0][1][0], 0x0308FDF8, 0xD9F601FA, 0x08F003FF, 0x15050200);
	r2 = D(r2, s[0][1][0], 0x080D0003, 0xF301FAFB, 0x04F3F7F9, 0x12F407FC);
	r3 = D(r3, s[0][1][0], 0x06F90506, 0xFF0DF200, 0xFCFE03FD, 0x0A07FEF2);
	r0 = D(r0, s[0][1][1], 0x1C1405F7, 0xFA01F2F5, 0xD6E10214, 0x0A0BF4FE);
	r1 = D(r1, s[0][1][1], 0xE3EB0207, 0xF315F4F8, 0xEFFC0301, 0xDD08F604);
	r2 = D(r2, s[0][1][1], 0xFB0908FA, 0x0FF6F6FF, 0xF304F113, 0x0AE10F04);
	r3 = D(r3, s[0][1][1], 0x14FB0202, 0xF5F5FB10, 0xF7F00210, 0xFD0605F0);
	r0 = D(r0, s[0][1][2], 0xFEF50101, 0x0605F9F8, 0x0F0504FB, 0x15F9F5FC);
	r1 = D(r1, s[0][1][2], 0x07FD09FC, 0x00F6FBFA, 0x000802F5, 0x061901F7);
	r2 = D(r2, s[0][1][2], 0xFDFBEFF3, 0xFDFE050F, 0x030603FA, 0x02000003);
	r3 = D(r3, s[0][1][2], 0x0605FAFB, 0xFAF90008, 0xFFF903FA, 0x060606FC);
	r0 = D(r0, s[0][2][0], 0x02FBF900, 0x0D0B0402, 0x0E050002, 0xFD00FF00);
	r1 = D(r1, s[0][2][0], 0x0BFBF9FF, 0xFDFDF904, 0x00000101, 0xFD03FD05);
	r2 = D(r2, s[0][2][0], 0xF40406FA, 0x0400FF05, 0xFE0103FE, 0x0A0505FF);
	r3 = D(r3, s[0][2][0], 0x0A00FEF9, 0xFF0007F3, 0xFBFFFFFC, 0x0BFEFBFB);
	r0 = D(r0, s[0][2][1], 0xFF0A0903, 0x0D03F0F9, 0xFCFCFAFE, 0x080001FC);
	r1 = D(r1, s[0][2][1], 0x0705FA0A, 0xFAF60601, 0x0BF80701, 0xF302FBFB);
	r2 = D(r2, s[0][2][1], 0x0804F6FE, 0xF9020308, 0xF1FEF801, 0x0D0604F9);
	r3 = D(r3, s[0][2][1], 0x07FD0BFF, 0xEFF9FDFE, 0x06F7FD06, 0x07FB01F5);
	r0 = D(r0, s[0][2][2], 0x03FA0AFD, 0xFB070000, 0x0B02F6FE, 0x06F50803);
	r1 = D(r1, s[0][2][2], 0x0003FE09, 0xFEFA030D, 0x01FEFE00, 0x12FE0205);
	r2 = D(r2, s[0][2][2], 0xF403FE03, 0xFBFBF9FF, 0xFCFB02F5, 0x050300FA);
	r3 = D(r3, s[0][2][2], 0xFFFC0203, 0xFBF602FC, 0x05020000, 0xFBFEFBF9);
	r0 = D(r0, s[1][0][0], 0x02020201, 0x020A0103, 0xFCFB03F6, 0xFE03FC02);
	r1 = D(r1, s[1][0][0], 0xF5EEFDF9, 0x05F606FE, 0x03040602, 0x0207FD05);
	r2 = D(r2, s[1][0][0], 0xFBFFFC06, 0xFEF900FD, 0xFBFEF40C, 0x000B0200);
	r3 = D(r3, s[1][0][0], 0x010FFA01, 0x04000009, 0xF9F90000, 0xFDFE0300);
	r0 = D(r0, s[1][0][1], 0xFBFA04FE, 0x0103FE03, 0xF6000500, 0xFD03FF05);
	r1 = D(r1, s[1][0][1], 0xF801FEFE, 0xF1F6F9FC, 0x06FA070A, 0x0802FCFA);
	r2 = D(r2, s[1][0][1], 0xFFF70F03, 0x04FAF505, 0xFDF9F604, 0x0C090500);
	r3 = D(r3, s[1][0][1], 0x010302F8, 0xFDF90B0A, 0x0BFD0004, 0xFF08FE02);
	r0 = D(r0, s[1][0][2], 0xEE02F306, 0x04010005, 0xFB05FDFE, 0xF3FCFBFD);
	r1 = D(r1, s[1][0][2], 0xFE09F702, 0x0208FB03, 0xFE0108FB, 0x020806FE);
	r2 = D(r2, s[1][0][2], 0xFFF00305, 0xFF03F606, 0x09FAFA08, 0xFEF503FD);
	r3 = D(r3, s[1][0][2], 0x05F300FE, 0x03FDFB08, 0x0405FD00, 0x0BFAF808);
	r0 = D(r0, s[1][1][0], 0xFEF5FB0E, 0x01040309, 0xFBF80A09, 0x01050502);
	r1 = D(r1, s[1][1][0], 0x05F80006, 0x02F3FE09, 0xFE06FEFD, 0xF5FB06FE);
	r2 = D(r2, s[1][1][0], 0xFB1604F6, 0x00F1FA05, 0xFA00FC06, 0xFD1703FD);
	r3 = D(r3, s[1][1][0], 0xF80A06FB, 0x03F40AF1, 0x05FF07FE, 0xFAF9020C);
	r0 = D(r0, s[1][1][1], 0xF6050CFF, 0x0D030315, 0x04FA000C, 0x03FC05FF);
	r1 = D(r1, s[1][1][1], 0x1205F712, 0x080F06FF, 0xF30BF803, 0xFE02E50B);
	r2 = D(r2, s[1][1][1], 0xF5021D02, 0xFF0006FA, 0xFB01F206, 0xF503F9F6);
	r3 = D(r3, s[1][1][1], 0xFDF918FD, 0x04FAF0EF, 0xF508E509, 0xFEFE180E);
	r0 = D(r0, s[1][1][2], 0xFF0B0409, 0xFAFBF70C, 0xF707F805, 0x03EFFDFC);
	r1 = D(r1, s[1][1][2], 0x010801FF, 0x0104FE0A, 0xFBFA0704, 0xFDFD0A05);
	r2 = D(r2, s[1][1][2], 0xFF031209, 0x00FCF1FE, 0xFA04FAFD, 0x06EB03F6);
	r3 = D(r3, s[1][1][2], 0x01F1F3FE, 0x000702FE, 0x08010403, 0x04FBF101);
	r0 = D(r0, s[1][2][0], 0xF800FA01, 0x0200FAFF, 0x050401F9, 0x00FE01FE);
	r1 = D(r1, s[1][2][0], 0x06020301, 0xF1080AFE, 0xFEFC07FF, 0xFDFF00FF);
	r2 = D(r2, s[1][2][0], 0x0500FE08, 0x00FEFD00, 0x02FFFA0A, 0x000301FA);
	r3 = D(r3, s[1][2][0], 0x0204FB02, 0x03F4FB0A, 0xFF040308, 0xFFFD0200);
	r0 = D(r0, s[1][2][1], 0xF8030AFB, 0xFF020B07, 0xFD080202, 0xFE0103FE);
	r1 = D(r1, s[1][2][1], 0xFE00EEF8, 0x03FE0EF7, 0xFC0601FD, 0x0D0A1307);
	r2 = D(r2, s[1][2][1], 0x02FEF5FD, 0x0200F8FF, 0x08FD0402, 0xFFF6F509);
	r3 = D(r3, s[1][2][1], 0xFDFDF0FB, 0x0000FBFE, 0x0300F3FF, 0x01FDFB03);
	r0 = D(r0, s[1][2][2], 0x03FEF9FD, 0x03EEF703, 0xFAFB08FC, 0xFD0AFEFD);
	r1 = D(r1, s[1][2][2], 0xFAFA07FE, 0xFD010AFA, 0x00FEFBFD, 0xF7FEFFF8);
	r2 = D(r2, s[1][2][2], 0x03FD0605, 0x020500FF, 0x0A10F805, 0xFDF7FD02);
	r3 = D(r3, s[1][2][2], 0xFAFD00FE, 0x0008FD05, 0xFDFC0302, 0x07050008);
	s[0][0][0] = G[4][xy.y+0][xy.x+0]; s[0][0][1] = G[4][xy.y+0][xy.x+1];
	s[0][0][2] = G[4][xy.y+0][xy.x+2]; s[0][1][0] = G[4][xy.y+1][xy.x+0];
	s[0][1][1] = G[4][xy.y+1][xy.x+1]; s[0][1][2] = G[4][xy.y+1][xy.x+2];
	s[0][2][0] = G[4][xy.y+2][xy.x+0]; s[0][2][1] = G[4][xy.y+2][xy.x+1];
	s[0][2][2] = G[4][xy.y+2][xy.x+2]; s[1][0][0] = G[5][xy.y+0][xy.x+0];
	s[1][0][1] = G[5][xy.y+0][xy.x+1]; s[1][0][2] = G[5][xy.y+0][xy.x+2];
	s[1][1][0] = G[5][xy.y+1][xy.x+0]; s[1][1][1] = G[5][xy.y+1][xy.x+1];
	s[1][1][2] = G[5][xy.y+1][xy.x+2]; s[1][2][0] = G[5][xy.y+2][xy.x+0];
	s[1][2][1] = G[5][xy.y+2][xy.x+1]; s[1][2][2] = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0xFF010604, 0x000403FF, 0xFE0109FD, 0xFE030504);
	r1 = D(r1, s[0][0][0], 0xFBFD0106, 0x05000BFE, 0x000203FC, 0xFF08FEFC);
	r2 = D(r2, s[0][0][0], 0xF4020F08, 0x060200FC, 0xFE040901, 0xFCFAFCFC);
	r3 = D(r3, s[0][0][0], 0x00F80905, 0x020A0F03, 0x00FFFDFD, 0xFCFCFDFE);
	r0 = D(r0, s[0][0][1], 0xF90DFEF4, 0x06030AFF, 0x00FDF803, 0xFCFAFBF1);
	r1 = D(r1, s[0][0][1], 0x05F6FC00, 0x00FB00FF, 0x03FB0300, 0x02030802);
	r2 = D(r2, s[0][0][1], 0x01F4F8FE, 0xF7FE00F6, 0xFA0300F8, 0x03FBFAF9);
	r3 = D(r3, s[0][0][1], 0x06F7F9F9, 0xF803FAF9, 0xFEFA0FFE, 0x01F801F9);
	r0 = D(r0, s[0][0][2], 0xFBFD0601, 0x000308F9, 0xFDFEFD00, 0xF8020208);
	r1 = D(r1, s[0][0][2], 0xFD02FD00, 0xFB010602, 0x0700F900, 0xFD000301);
	r2 = D(r2, s[0][0][2], 0x0805FC00, 0xF8F90D06, 0x03F200FD, 0x0505FD00);
	r3 = D(r3, s[0][0][2], 0x050A0302, 0x07FD0303, 0x0600FAFB, 0x0CFD05FF);
	r0 = D(r0, s[0][1][0], 0xFD0AFEFB, 0x05010DFB, 0xFBEF0BFC, 0x02FA0600);
	r1 = D(r1, s[0][1][0], 0x09F0F6F7, 0x00FDFB01, 0xFB000505, 0x07F51406);
	r2 = D(r2, s[0][1][0], 0x02FE0B03, 0xFFFAFEFD, 0xF7030303, 0x01FC0B07);
	r3 = D(r3, s[0][1][0], 0x00FC06FB, 0xFA03FAFA, 0xFBF5FC02, 0x0D0BEEFB);
	r0 = D(r0, s[0][1][1], 0xF8F5F9FE, 0x0007020A, 0xEC07F60C, 0xF5060B06);
	r1 = D(r1, s[0][1][1], 0x011700F9, 0xE9030BFC, 0xFBFEE804, 0xEB01E103);
	r2 = D(r2, s[0][1][1], 0x0A081902, 0x07F3F601, 0xE917EA02, 0xFCEDF50A);
	r3 = D(r3, s[0][1][1], 0x0A020D06, 0xFCFAFAFE, 0xFE040402, 0xF40BEE04);
	r0 = D(r0, s[0][1][2], 0xFE1A0504, 0xF905030A, 0x04FEF7FD, 0xFA25F300);
	r1 = D(r1, s[0][1][2], 0xFAFA000A, 0x03FE0B00, 0x060002FF, 0xFE01FCFA);
	r2 = D(r2, s[0][1][2], 0xFDFD0505, 0x060BF7F9, 0xF700F8FE, 0x06FF01FE);
	r3 = D(r3, s[0][1][2], 0x0301FDFE, 0x010B02FE, 0x0CEE0900, 0x07DCFCFE);
	r0 = D(r0, s[0][2][0], 0x0200F100, 0x0A0301FE, 0x080A03FA, 0x060BFD01);
	r1 = D(r1, s[0][2][0], 0xFF09EDFC, 0xFFF508F7, 0x0807FF03, 0xFDF30700);
	r2 = D(r2, s[0][2][0], 0xFC191305, 0xFE020101, 0xF9F3FC06, 0x0701FC03);
	r3 = D(r3, s[0][2][0], 0x0302FE05, 0x0004F402, 0xFC0A0AFE, 0x0808F400);
	r0 = D(r0, s[0][2][1], 0x041EF90A, 0x030AF304, 0x031213FE, 0x01070BFF);
	r1 = D(r1, s[0][2][1], 0xFDFA0204, 0x00FAF0FD, 0x06051601, 0xF90B0AFE);
	r2 = D(r2, s[0][2][1], 0xF0E7FB05, 0x05080303, 0xF50302FA, 0x030308F8);
	r3 = D(r3, s[0][2][1], 0x07FE0AFB, 0xFE050BFE, 0x00E903FE, 0x00FBFE03);
	r0 = D(r0, s[0][2][2], 0xEE0FFEFB, 0x050109FA, 0x0904FF01, 0xEE08FCFD);
	r1 = D(r1, s[0][2][2], 0x020AFBFD, 0x01080300, 0xFEFBFF02, 0x02F4FF00);
	r2 = D(r2, s[0][2][2], 0x000305FC, 0x00FEFEFF, 0xFE0104F7, 0xFFFD0401);
	r3 = D(r3, s[0][2][2], 0x06FE0A02, 0xFDFF00FB, 0x0AFA0304, 0x00FA03FB);
	r0 = D(r0, s[1][0][0], 0xF50406FB, 0xFD00FE02, 0xFD06FE05, 0xFDFC0204);
	r1 = D(r1, s[1][0][0], 0xFE080000, 0x01FE0D07, 0xFF00FD08, 0x02000304);
	r2 = D(r2, s[1][0][0], 0x0200F0FE, 0x03000600, 0x0BFCF801, 0x0001FE04);
	r3 = D(r3, s[1][0][0], 0x02FEFDF7, 0x0305F708, 0x05FD000B, 0x03FF0000);
	r0 = D(r0, s[1][0][1], 0x18F20B0F, 0x04050006, 0x02FDFFFE, 0x01020304);
	r1 = D(r1, s[1][0][1], 0x0CFC0409, 0xFDFAFE00, 0xF601FFF8, 0xF8FE04FF);
	r2 = D(r2, s[1][0][1], 0x04010CFF, 0x0601FB0B, 0x0708F902, 0xF50009FC);
	r3 = D(r3, s[1][0][1], 0xFD030102, 0x0A01030A, 0xFCFEFDFF, 0xF8050005);
	r0 = D(r0, s[1][0][2], 0xFC05F9F8, 0x03FDFF05, 0x0001FEFF, 0xFF0001FF);
	r1 = D(r1, s[1][0][2], 0x0500FE02, 0xFEF9FB00, 0xF9FEFFFF, 0xFB00FDFC);
	r2 = D(r2, s[1][0][2], 0xF803F801, 0x0702FBFA, 0x070702FD, 0xF6FFFD00);
	r3 = D(r3, s[1][0][2], 0xFAF90000, 0xFF0500FF, 0xFBFFFA02, 0xED02FA07);
	r0 = D(r0, s[1][1][0], 0xFDF7FDF8, 0x0107F100, 0x0205FCFD, 0x01FA03FE);
	r1 = D(r1, s[1][1][0], 0xFC050BFC, 0xF5F600F0, 0x04FBF1FE, 0xF809E8F8);
	r2 = D(r2, s[1][1][0], 0xFDF30B08, 0x000D03FE, 0x0EFCFE00, 0xFD02F6F6);
	r3 = D(r3, s[1][1][0], 0x05EC0402, 0x06FD0722, 0x020000FD, 0x04FEFEFB);
	r0 = D(r0, s[1][1][1], 0x08FD0AF7, 0x0A00FCF7, 0x0C0803FB, 0x0717F1F8);
	r1 = D(r1, s[1][1][1], 0xEC01FC01, 0x130CFD01, 0x10FD21FE, 0x0EFA10FA);
	r2 = D(r2, s[1][1][1], 0x0205FD0C, 0x010F0008, 0x140510F3, 0x0EFB0CEC);
	r3 = D(r3, s[1][1][1], 0x1008F3F3, 0xFE04F826, 0x00000B0A, 0x05FB0C00);
	r0 = D(r0, s[1][1][2], 0xF1050002, 0x02FAF8F6, 0xFFFDFB05, 0xF0FA1803);
	r1 = D(r1, s[1][1][2], 0x0108F3F6, 0xFD05FC00, 0x0DFBFDFD, 0xF4FFF406);
	r2 = D(r2, s[1][1][2], 0xFD100FFA, 0xF5F40707, 0x10020FFF, 0x0BF506F7);
	r3 = D(r3, s[1][1][2], 0x00FF0B00, 0xFC02030E, 0x0500FCFF, 0x0D0004FD);
	r0 = D(r0, s[1][2][0], 0x00F6FAFD, 0xFE05F300, 0xFDFBF607, 0xFAEF0200);
	r1 = D(r1, s[1][2][0], 0xFE080102, 0xFC0400F8, 0xFDF50107, 0xF70003FD);
	r2 = D(r2, s[1][2][0], 0xFB03FB03, 0x00F50003, 0x0803FEFA, 0xFDF4FEFE);
	r3 = D(r3, s[1][2][0], 0xFAFDFF01, 0x0805FA04, 0xFFFCFC04, 0x0502FEFE);
	r0 = D(r0, s[1][2][1], 0xEE10F7FB, 0x06F10700, 0x08FCF8FF, 0xF705F4F9);
	r1 = D(r1, s[1][2][1], 0xFBFA0202, 0xFCFAEB01, 0xFCF6F505, 0x05FAFDF6);
	r2 = D(r2, s[1][2][1], 0x06040200, 0x00FAF8FD, 0x10F50202, 0x04F707FD);
	r3 = D(r3, s[1][2][1], 0xFFFEFD04, 0xFFFDFD14, 0x0AF90703, 0xFFFDFE03);
	r0 = D(r0, s[1][2][2], 0x07F80A00, 0xF4FEF50C, 0xF6FCFEFD, 0x030909FE);
	r1 = D(r1, s[1][2][2], 0xFDF602FE, 0x060204FF, 0xFD03FE00, 0x01FD02FE);
	r2 = D(r2, s[1][2][2], 0xFBF90407, 0x0505FF00, 0x0A04F105, 0x0006FCFC);
	r3 = D(r3, s[1][2][2], 0xFC01FE01, 0x0203FD09, 0xFB04FDFE, 0xFD000003);
	s[0][0][0] = G[6][xy.y+0][xy.x+0]; s[0][0][1] = G[6][xy.y+0][xy.x+1];
	s[0][0][2] = G[6][xy.y+0][xy.x+2]; s[0][1][0] = G[6][xy.y+1][xy.x+0];
	s[0][1][1] = G[6][xy.y+1][xy.x+1]; s[0][1][2] = G[6][xy.y+1][xy.x+2];
	s[0][2][0] = G[6][xy.y+2][xy.x+0]; s[0][2][1] = G[6][xy.y+2][xy.x+1];
	s[0][2][2] = G[6][xy.y+2][xy.x+2]; s[1][0][0] = G[7][xy.y+0][xy.x+0];
	s[1][0][1] = G[7][xy.y+0][xy.x+1]; s[1][0][2] = G[7][xy.y+0][xy.x+2];
	s[1][1][0] = G[7][xy.y+1][xy.x+0]; s[1][1][1] = G[7][xy.y+1][xy.x+1];
	s[1][1][2] = G[7][xy.y+1][xy.x+2]; s[1][2][0] = G[7][xy.y+2][xy.x+0];
	s[1][2][1] = G[7][xy.y+2][xy.x+1]; s[1][2][2] = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0xFEFE05F5, 0x02FC06FE, 0x0600000A, 0xFC00FB00);
	r1 = D(r1, s[0][0][0], 0x00F6FB06, 0x03FDF8F5, 0xFE0BFBFA, 0xFDFEFDFA);
	r2 = D(r2, s[0][0][0], 0xFB05F60D, 0x06F90601, 0x0500FE07, 0xFE08FE00);
	r3 = D(r3, s[0][0][0], 0x02020B04, 0x01FE0103, 0x0007FEFB, 0xFD0003F7);
	r0 = D(r0, s[0][0][1], 0xFA08F8FB, 0xFEFBFBF8, 0xF404FCFE, 0x030600F8);
	r1 = D(r1, s[0][0][1], 0x05FCEFFF, 0x0C04FCFA, 0x0600FCFE, 0xFAFF05ED);
	r2 = D(r2, s[0][0][1], 0x1009F712, 0x00F80301, 0x02FF0604, 0x02050FFC);
	r3 = D(r3, s[0][0][1], 0x06080808, 0xFE030005, 0x0804F3FF, 0x0BFDF601);
	r0 = D(r0, s[0][0][2], 0x0A020102, 0xFCF80501, 0x06FB0503, 0xFB030000);
	r1 = D(r1, s[0][0][2], 0xF5FAFC03, 0xFAFB0500, 0x020602FD, 0xFEFEFF01);
	r2 = D(r2, s[0][0][2], 0x000A03FB, 0x08F8080B, 0x04FE0209, 0xFA0503F8);
	r3 = D(r3, s[0][0][2], 0xF60300F7, 0x05FCFE03, 0x00FD06FE, 0xF8F9FCF6);
	r0 = D(r0, s[0][1][0], 0x00F8FBEF, 0xF7FF0701, 0x03FBFF00, 0x02FDF6FD);
	r1 = D(r1, s[0][1][0], 0x10FA0900, 0x02FB03F2, 0xF80CF805, 0xF3040909);
	r2 = D(r2, s[0][1][0], 0x0B0AF1F1, 0x06F20304, 0xF9FD05F9, 0xF600FE04);
	r3 = D(r3, s[0][1][0], 0x0402F9FA, 0x07010101, 0xFE000000, 0xFBFDFE01);
	r0 = D(r0, s[0][1][1], 0xF803DA1D, 0x03F50B13, 0xF0FEE131, 0xFB081304);
	r1 = D(r1, s[0][1][1], 0xF7E80912, 0xF6FE170F, 0x040006F4, 0xF0FF0DFE);
	r2 = D(r2, s[0][1][1], 0x11F4FADB, 0xEE03F61D, 0x0AF01803, 0x16030008);
	r3 = D(r3, s[0][1][1], 0x1CFE06F5, 0xFBFC0B0B, 0xF900F8E9, 0x0FFDF21A);
	r0 = D(r0, s[0][1][2], 0xF1050803, 0xFAF6FBFF, 0x0505000B, 0xF0FEF9FB);
	r1 = D(r1, s[0][1][2], 0x0E030FFE, 0x0204FCFA, 0x0B05F105, 0xFDFA0109);
	r2 = D(r2, s[0][1][2], 0x06FFFDF2, 0xF100FE05, 0xF8020C00, 0xFB05FDF8);
	r3 = D(r3, s[0][1][2], 0xFD0601FA, 0xFAFF09FE, 0x0F00FF0B, 0xFDFE02FC);
	r0 = D(r0, s[0][2][0], 0x06FE00FD, 0xFD050203, 0xFD030801, 0x03FCF900);
	r1 = D(r1, s[0][2][0], 0xFAFE02FB, 0x05F50B02, 0xFE00F900, 0x0AFAFE05);
	r2 = D(r2, s[0][2][0], 0xED070600, 0x060402FF, 0x040000FB, 0xFC000000);
	r3 = D(r3, s[0][2][0], 0xF300FA01, 0x07FD000C, 0xF80403FE, 0x00FD0104);
	r0 = D(r0, s[0][2][1], 0xFEF1F707, 0x0A0E0805, 0x02030EF6, 0x0AFB0A02);
	r1 = D(r1, s[0][2][1], 0xF3040207, 0x03F0FB02, 0xFD08FA05, 0x10F900F8);
	r2 = D(r2, s[0][2][1], 0xEA0C0114, 0x0AFD0400, 0x0E0406ED, 0x15FFFDF4);
	r3 = D(r3, s[0][2][1], 0x0401FBF9, 0x0309FE00, 0x0005F1F9, 0xFD000507);
	r0 = D(r0, s[0][2][2], 0xF60103F7, 0x0CFA0502, 0x03F8FE02, 0xFCFBFBFE);
	r1 = D(r1, s[0][2][2], 0xFBF5FA00, 0xF7020DFC, 0xFA04FAFC, 0xFFFCF8FB);
	r2 = D(r2, s[0][2][2], 0xFC00F708, 0xFCFF01FD, 0x0C080FFB, 0x07FC02FF);
	r3 = D(r3, s[0][2][2], 0xFE030600, 0x02000603, 0x0A040003, 0x0405FCF9);
	r0 = D(r0, s[1][0][0], 0x0202FB05, 0xFDFEFB03, 0x0304FDFB, 0x00FCFE02);
	r1 = D(r1, s[1][0][0], 0x050501FE, 0xFBFEFB04, 0xFEFD0301, 0xF600FB01);
	r2 = D(r2, s[1][0][0], 0x070302FA, 0x02020200, 0x03000503, 0xF90103FF);
	r3 = D(r3, s[1][0][0], 0x0503FEFD, 0xFEFF0000, 0xFDF10605, 0x03F9050B);
	r0 = D(r0, s[1][0][1], 0x0CEF0508, 0xF70507FF, 0x15F9FB06, 0x05FEFAFF);
	r1 = D(r1, s[1][0][1], 0x02FFECFE, 0x03F5FE05, 0x000600F4, 0x07FB000A);
	r2 = D(r2, s[1][0][1], 0xFF00F3F1, 0x030A0C0E, 0x000F0704, 0xFD0CFEFD);
	r3 = D(r3, s[1][0][1], 0xF602F6F8, 0x04FCFE00, 0x050AFFFC, 0xF31003FA);
	r0 = D(r0, s[1][0][2], 0x01E905FD, 0xFDF90805, 0xFD0003FA, 0x08F40603);
	r1 = D(r1, s[1][0][2], 0x070102FF, 0x0D000102, 0xFE03FE00, 0x03FCF805);
	r2 = D(r2, s[1][0][2], 0x000A01FE, 0xFBFF0305, 0xFDFEF8FF, 0x01090202);
	r3 = D(r3, s[1][0][2], 0x060D0401, 0xFEFE0502, 0x0708FAFC, 0xFD070B02);
	r0 = D(r0, s[1][1][0], 0x0FFE0706, 0xFBFFF6FC, 0x12030AF7, 0x03FF0902);
	r1 = D(r1, s[1][1][0], 0x0FEE02FC, 0x0EE80BFB, 0x05040101, 0x06F7F1FD);
	r2 = D(r2, s[1][1][0], 0xF80A0006, 0xFC06FEFD, 0x07080301, 0x080903FB);
	r3 = D(r3, s[1][1][0], 0xFB020200, 0xF8FA0400, 0x07080202, 0x02F90403);
	r0 = D(r0, s[1][1][1], 0x1B0107FD, 0x0406FBF6, 0x03F7160B, 0xF7FDF802);
	r1 = D(r1, s[1][1][1], 0x00F003FA, 0x130405FB, 0xF112FC0D, 0x0AFF0801);
	r2 = D(r2, s[1][1][1], 0xEE181100, 0x17EB06F7, 0xF20C020E, 0xEC18F2FA);
	r3 = D(r3, s[1][1][1], 0xDC1700FA, 0x080D0101, 0xEF000F00, 0x0407FE03);
	r0 = D(r0, s[1][1][2], 0xF8F4FF01, 0xF60DF7FA, 0x04F7F6FA, 0x10F306FC);
	r1 = D(r1, s[1][1][2], 0x02F9F600, 0xF3F6FEF8, 0xFA070800, 0x070203FE);
	r2 = D(r2, s[1][1][2], 0xF00D020F, 0x0CF0FAFC, 0x0004FB00, 0x0C05FF06);
	r3 = D(r3, s[1][1][2], 0xFC01FEFC, 0xFFFAFDFE, 0xFC030000, 0xFBFE00FF);
	r0 = D(r0, s[1][2][0], 0x06020501, 0xFEF7F6FE, 0xF1FDFB05, 0x01000501);
	r1 = D(r1, s[1][2][0], 0xFEF803FE, 0x04F900F6, 0x020A0206, 0xFC0003FC);
	r2 = D(r2, s[1][2][0], 0x06F80807, 0xFAFCFE00, 0x09F903FD, 0xFB04FC06);
	r3 = D(r3, s[1][2][0], 0x04080909, 0xFCFE00FE, 0x04000202, 0x00FF03FC);
	r0 = D(r0, s[1][2][1], 0x0A0B08FB, 0xF7F4F1FA, 0xF4FAF4F7, 0xF602FDFD);
	r1 = D(r1, s[1][2][1], 0x07F9F801, 0x0100FB05, 0xFFF8FA03, 0xFFFEF8F8);
	r2 = D(r2, s[1][2][1], 0xFDF50E0F, 0xFBF90200, 0xF4F803FF, 0xFA09FAFB);
	r3 = D(r3, s[1][2][1], 0x0003FF00, 0xFBF703FC, 0x03040505, 0x02FB04F6);
	r0 = D(r0, s[1][2][2], 0x09F6F8FC, 0xF8FAFDFF, 0x05070602, 0x0C02FEFA);
	r1 = D(r1, s[1][2][2], 0x0E060508, 0x00F0FB07, 0x05050605, 0xFA040603);
	r2 = D(r2, s[1][2][2], 0xF9FF0002, 0x01FF0400, 0xE9F2FAF8, 0x04040307);
	r3 = D(r3, s[1][2][2], 0xFE03FF05, 0xF9F203FF, 0x0203F8FE, 0x03FE0505);
	vec4 f0 = vec4(r0) * 6.20001240e-05;
	f0 += vec4(-1.406e-02, -8.920e-03, 8.034e-04, -1.201e-02);
	imageStore(out_image, opos + ivec2(0, 0), vec4(f0));
	vec4 f1 = vec4(r1) * 6.20001240e-05;
	f1 += vec4(4.329e-03, -1.297e-02, -8.383e-05, -6.478e-03);
	imageStore(out_image, opos + ivec2(1, 0), vec4(f1));
	vec4 f2 = vec4(r2) * 6.20001240e-05;
	f2 += vec4(-7.774e-03, 1.183e-03, -2.154e-02, 1.139e-02);
	imageStore(out_image, opos + ivec2(0, 1), vec4(f2));
	vec4 f3 = vec4(r3) * 6.20001240e-05;
	f3 += vec4(7.967e-03, -1.691e-02, 4.282e-03, -1.549e-02);
	imageStore(out_image, opos + ivec2(1, 1), vec4(f3));
}

//!DESC CuNNy-16x16C-TEST-conv16
//!HOOK LUMA
//!COMPUTE 16 16 8 8
//!BIND conv15
//!BIND LUMA
//!SAVE conv16
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_spirv_intrinsics : require
#extension GL_EXT_control_flow_attributes : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) ivec4(r.x + dp4(s, a, 0), r.y + dp4(s, b, 0), r.z + dp4(s, c, 0), r.w + dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	[[unroll]] for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		[[unroll]] for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(2, 2) + ivec2(1, 1)) * conv15_pt;
			r = conv15_gather(p, 0);
			g = conv15_gather(p, 1);
			b = conv15_gather(p, 2);
			a = conv15_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.00000000e+00;
			vec4 v2 = vec4(r.z, g.z, b.z, a.z) * 1.00000000e+00;
			vec4 v4 = vec4(r.x, g.x, b.x, a.x) * 1.00000000e+00;
			vec4 v6 = vec4(r.y, g.y, b.y, a.y) * 1.00000000e+00;
			vec4 v1 = max(-v0, vec4(0));
			v0 = max(v0, vec4(0));
			vec4 v3 = max(-v2, vec4(0));
			v2 = max(v2, vec4(0));
			vec4 v5 = max(-v4, vec4(0));
			v4 = max(v4, vec4(0));
			vec4 v7 = max(-v6, vec4(0));
			v6 = max(v6, vec4(0));
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s[2][3][3];
	ivec4 r0 = ivec4(0);
	ivec4 r1 = ivec4(0);
	ivec4 r2 = ivec4(0);
	ivec4 r3 = ivec4(0);
	s[0][0][0] = G[0][xy.y+0][xy.x+0]; s[0][0][1] = G[0][xy.y+0][xy.x+1];
	s[0][0][2] = G[0][xy.y+0][xy.x+2]; s[0][1][0] = G[0][xy.y+1][xy.x+0];
	s[0][1][1] = G[0][xy.y+1][xy.x+1]; s[0][1][2] = G[0][xy.y+1][xy.x+2];
	s[0][2][0] = G[0][xy.y+2][xy.x+0]; s[0][2][1] = G[0][xy.y+2][xy.x+1];
	s[0][2][2] = G[0][xy.y+2][xy.x+2]; s[1][0][0] = G[1][xy.y+0][xy.x+0];
	s[1][0][1] = G[1][xy.y+0][xy.x+1]; s[1][0][2] = G[1][xy.y+0][xy.x+2];
	s[1][1][0] = G[1][xy.y+1][xy.x+0]; s[1][1][1] = G[1][xy.y+1][xy.x+1];
	s[1][1][2] = G[1][xy.y+1][xy.x+2]; s[1][2][0] = G[1][xy.y+2][xy.x+0];
	s[1][2][1] = G[1][xy.y+2][xy.x+1]; s[1][2][2] = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0x03030508, 0xFE04F6FC, 0x1108F406, 0xFFFEFD0A);
	r1 = D(r1, s[0][0][0], 0xEDFAFBF2, 0x0CFD0102, 0xEA0B0AEC, 0x0202FAFE);
	r2 = D(r2, s[0][0][0], 0x04010601, 0xFE060700, 0x07FDF901, 0x00FD0305);
	r3 = D(r3, s[0][0][0], 0x05FFF610, 0xFB070E05, 0x1AFEF60A, 0x070302FA);
	r0 = D(r0, s[0][0][1], 0xFA06040B, 0xFE040304, 0xFEF9041A, 0x14150103);
	r1 = D(r1, s[0][0][1], 0x0609F9FB, 0xFD07FFFF, 0x03EFF802, 0xEEF7FEE3);
	r2 = D(r2, s[0][0][1], 0xFAFC0008, 0x0B02030D, 0x090A0102, 0x00FDF607);
	r3 = D(r3, s[0][0][1], 0x02FD0809, 0xFAFD060D, 0x0C05040C, 0xFDFE0404);
	r0 = D(r0, s[0][0][2], 0x00FF02FC, 0x07020403, 0xFA01FF04, 0xFA0D0302);
	r1 = D(r1, s[0][0][2], 0xFEFF0204, 0xFFF6FF0B, 0xF6090305, 0xFA0303FC);
	r2 = D(r2, s[0][0][2], 0xFBFEFDFE, 0xFB020704, 0xF8060007, 0xF600FE05);
	r3 = D(r3, s[0][0][2], 0x0006FA06, 0xFFFDF6F6, 0x05F9FBF9, 0xFFFFFCFE);
	r0 = D(r0, s[0][1][0], 0xEA10FC0B, 0x1CF7FA14, 0xF3F0EF0B, 0x200BF9EF);
	r1 = D(r1, s[0][1][0], 0xF2F70A06, 0xF9F90009, 0xE1030EFD, 0x110DF904);
	r2 = D(r2, s[0][1][0], 0xF30501FF, 0x0707F3FD, 0xE601090C, 0xFBF6FB06);
	r3 = D(r3, s[0][1][0], 0xF207FDFD, 0xEF03FAED, 0x190B03FD, 0x15FEFB03);
	r0 = D(r0, s[0][1][1], 0x14020137, 0x0C160CF4, 0xFF0D113E, 0x171AF70C);
	r1 = D(r1, s[0][1][1], 0x1012ECF4, 0xEDD10CF1, 0xDDE7DD18, 0xE3120D16);
	r2 = D(r2, s[0][1][1], 0xF2F5F2EE, 0x11050807, 0xE21AF520, 0xEECAE40C);
	r3 = D(r3, s[0][1][1], 0xF8101C1B, 0xE20CF701, 0x0F0A0EEA, 0xF90903F0);
	r0 = D(r0, s[0][1][2], 0x040F04F3, 0xF7FBFBFD, 0x100B0AF1, 0x0011070B);
	r1 = D(r1, s[0][1][2], 0x0A0B04FB, 0xF9FCFBEE, 0x0D04FFF9, 0x0303FCFB);
	r2 = D(r2, s[0][1][2], 0xFE01FBFE, 0xFDFA0105, 0x1AFCFDEA, 0xF8ECF510);
	r3 = D(r3, s[0][1][2], 0xFCF900F6, 0x0200FFFE, 0xF5FF021A, 0xFD01FF06);
	r0 = D(r0, s[0][2][0], 0x02FFFDFE, 0x1001FFF7, 0x01F7F909, 0x01FE0505);
	r1 = D(r1, s[0][2][0], 0x02FEFEFD, 0xF4FEFB07, 0xFF020902, 0x08FFFD03);
	r2 = D(r2, s[0][2][0], 0xFC0409FE, 0xFBFDFFF7, 0xF0FC0206, 0x0A020607);
	r3 = D(r3, s[0][2][0], 0xFCFBFCFF, 0xFA020302, 0xFE0302FE, 0xF7FD04FE);
	r0 = D(r0, s[0][2][1], 0xEDFBFE0F, 0xFDF9FD07, 0x02FC0112, 0x0405F805);
	r1 = D(r1, s[0][2][1], 0xFBF606FA, 0xFD0804F8, 0xF703F5EF, 0xFEFC010D);
	r2 = D(r2, s[0][2][1], 0xEC06FA1D, 0x09FEFFF9, 0xEC0C021C, 0x0CF704F7);
	r3 = D(r3, s[0][2][1], 0x0103F00B, 0x0E0501F2, 0x00FFFE02, 0x03030205);
	r0 = D(r0, s[0][2][2], 0x03FFFFFF, 0x04050103, 0xFC05FFFF, 0xFEFE0707);
	r1 = D(r1, s[0][2][2], 0xFD010501, 0xFE03F901, 0xFFF102FD, 0xFEFE01FA);
	r2 = D(r2, s[0][2][2], 0x000006FD, 0x04FBFBFB, 0xF8FF0504, 0x03F90505);
	r3 = D(r3, s[0][2][2], 0xFF0201FA, 0xFC020207, 0x02FCFBF6, 0x03FAFDF6);
	r0 = D(r0, s[1][0][0], 0xFBFFFB01, 0x03FE0601, 0xFFFFF9FC, 0x06FD0304);
	r1 = D(r1, s[1][0][0], 0xFC01FC06, 0xF308FF03, 0x03FB0503, 0x0000FAFF);
	r2 = D(r2, s[1][0][0], 0xF9FDFF01, 0xFBFDF706, 0x0501FDFF, 0x04FF0101);
	r3 = D(r3, s[1][0][0], 0x020004FE, 0xF4FCFF05, 0x020BFFFB, 0x010103FE);
	r0 = D(r0, s[1][0][1], 0x04010101, 0x08FCFEFE, 0x07FE02FC, 0xF8F9F706);
	r1 = D(r1, s[1][0][1], 0xFDFAFE02, 0x02FF0403, 0xF701F909, 0xFA010A05);
	r2 = D(r2, s[1][0][1], 0xFE04FFFD, 0x00F0FFFC, 0xFC08FE03, 0x03F602FC);
	r3 = D(r3, s[1][0][1], 0x0003FE04, 0xFE04F906, 0x0BF7FBF5, 0x02FDFFFE);
	r0 = D(r0, s[1][0][2], 0xFFFF0302, 0xFE02FD00, 0xFF0202FE, 0x04F50000);
	r1 = D(r1, s[1][0][2], 0xFCFCFDFE, 0x050A03FD, 0x0CF5FFFF, 0xFF06FE05);
	r2 = D(r2, s[1][0][2], 0xFC020204, 0x08FDFB02, 0x00FEFFFC, 0xFEFA0104);
	r3 = D(r3, s[1][0][2], 0x01FE02FC, 0x04040404, 0xF8F90102, 0xFEF900FF);
	r0 = D(r0, s[1][1][0], 0xF601070A, 0x0705FCF4, 0x03FE11FF, 0xFA01FFFA);
	r1 = D(r1, s[1][1][0], 0x09FEFCFB, 0x0906FFFE, 0x03F7FF06, 0xF6FF0509);
	r2 = D(r2, s[1][1][0], 0x06FC0A0B, 0xFDF90501, 0xF2FF0107, 0x05FE06F9);
	r3 = D(r3, s[1][1][0], 0xFCFF040A, 0x0101FF0C, 0x0208F6FB, 0x07FF02FC);
	r0 = D(r0, s[1][1][1], 0xF409FD04, 0x0405FBFD, 0xEEF5FDFD, 0xFC200305);
	r1 = D(r1, s[1][1][1], 0xF6FD0806, 0xFE03FA06, 0xFFFB06FF, 0x1108F9F5);
	r2 = D(r2, s[1][1][1], 0xF501FA05, 0xFD06F6FE, 0x140003FD, 0xFC0204FA);
	r3 = D(r3, s[1][1][1], 0x06FB04FB, 0xEEF9FE04, 0x01FFFD06, 0x03FFF6FE);
	r0 = D(r0, s[1][1][2], 0xFE01FBFF, 0xFF0201FB, 0x03FEF900, 0xFC03FC05);
	r1 = D(r1, s[1][1][2], 0x040D0501, 0xF9F60205, 0xFB0F020C, 0x0D0602FB);
	r2 = D(r2, s[1][1][2], 0x0406FC01, 0xFF010401, 0xF905FE02, 0xFCFF0004);
	r3 = D(r3, s[1][1][2], 0xFD05FC06, 0x030CFF03, 0x04FC00FA, 0xFD040203);
	r0 = D(r0, s[1][2][0], 0x06FCFFFC, 0xFD02FBFB, 0xFBFF0304, 0xFDFFFDFF);
	r1 = D(r1, s[1][2][0], 0x01FE0402, 0x010403FF, 0x0304FCFD, 0x02FF01FD);
	r2 = D(r2, s[1][2][0], 0xFFFAFEFE, 0x02FD0102, 0x0102FEFB, 0x0103FEFF);
	r3 = D(r3, s[1][2][0], 0x03FF02FF, 0x03FFFFFD, 0x03FFFEFA, 0xFFFEFAF9);
	r0 = D(r0, s[1][2][1], 0x07F90202, 0x070204FB, 0x0C02FBFA, 0x040105FA);
	r1 = D(r1, s[1][2][1], 0x02FC01FD, 0x0507FCFD, 0xFDFD0805, 0xFEFFFE05);
	r2 = D(r2, s[1][2][1], 0x04FF02FD, 0xFAF90302, 0x0500FC09, 0xFCFE0103);
	r3 = D(r3, s[1][2][1], 0xFDFB0502, 0xFBFF0207, 0x030401FE, 0x0102FF05);
	r0 = D(r0, s[1][2][2], 0x020002FF, 0xFFFAFFFF, 0x01FE04FD, 0x02FCFFFF);
	r1 = D(r1, s[1][2][2], 0xFEFEFD06, 0x02050702, 0xFD07FD05, 0xFFFF02FF);
	r2 = D(r2, s[1][2][2], 0x0205FF00, 0xFA02FF05, 0x0CFF02F4, 0x0AFFFFFC);
	r3 = D(r3, s[1][2][2], 0xFFFFFF00, 0x01FE00F9, 0xFCFE0106, 0xFF030105);
	s[0][0][0] = G[2][xy.y+0][xy.x+0]; s[0][0][1] = G[2][xy.y+0][xy.x+1];
	s[0][0][2] = G[2][xy.y+0][xy.x+2]; s[0][1][0] = G[2][xy.y+1][xy.x+0];
	s[0][1][1] = G[2][xy.y+1][xy.x+1]; s[0][1][2] = G[2][xy.y+1][xy.x+2];
	s[0][2][0] = G[2][xy.y+2][xy.x+0]; s[0][2][1] = G[2][xy.y+2][xy.x+1];
	s[0][2][2] = G[2][xy.y+2][xy.x+2]; s[1][0][0] = G[3][xy.y+0][xy.x+0];
	s[1][0][1] = G[3][xy.y+0][xy.x+1]; s[1][0][2] = G[3][xy.y+0][xy.x+2];
	s[1][1][0] = G[3][xy.y+1][xy.x+0]; s[1][1][1] = G[3][xy.y+1][xy.x+1];
	s[1][1][2] = G[3][xy.y+1][xy.x+2]; s[1][2][0] = G[3][xy.y+2][xy.x+0];
	s[1][2][1] = G[3][xy.y+2][xy.x+1]; s[1][2][2] = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0xFEF703F8, 0x02060007, 0x0103FE03, 0x02070500);
	r1 = D(r1, s[0][0][0], 0xFAFD0301, 0xFB0903FF, 0x0504F7FA, 0x09FCFAFE);
	r2 = D(r2, s[0][0][0], 0xF8FA0502, 0xFEFAFC02, 0xFD010503, 0xFD0406FE);
	r3 = D(r3, s[0][0][0], 0x0900FCF6, 0xF5FDFF08, 0x0004FC07, 0xFE000203);
	r0 = D(r0, s[0][0][1], 0x0AFE0107, 0x0BFD0402, 0x01040DFA, 0xF9F3F701);
	r1 = D(r1, s[0][0][1], 0x01F206FE, 0xFC11F6FF, 0xE6F728FD, 0xFD0617FA);
	r2 = D(r2, s[0][0][1], 0xFE00FCFC, 0xF0FF0703, 0x04FDE9FC, 0x01FE0509);
	r3 = D(r3, s[0][0][1], 0xFFF80910, 0xEC0602F0, 0xFB04E5FA, 0xFBFDFD03);
	r0 = D(r0, s[0][0][2], 0x02FD06F9, 0xFE0100F9, 0x0601FA02, 0x03FD02FE);
	r1 = D(r1, s[0][0][2], 0xFEFFFB07, 0x02040506, 0x08FCEE17, 0xFCFCF608);
	r2 = D(r2, s[0][0][2], 0x0001FE02, 0xF9FEF213, 0x000AFC01, 0x01FE13EB);
	r3 = D(r3, s[0][0][2], 0x07FDFDF3, 0x02FFFD05, 0xFA030003, 0xFFFFF914);
	r0 = D(r0, s[0][1][0], 0x03020301, 0x030108F6, 0x06FBEAEA, 0x0CFEF40E);
	r1 = D(r1, s[0][1][0], 0xFEFD02F6, 0xFBF90702, 0xFB0407FC, 0x02FDFDF9);
	r2 = D(r2, s[0][1][0], 0x0E01F20A, 0xFBFDF303, 0xFFFFFEF9, 0xFF07030A);
	r3 = D(r3, s[0][1][0], 0x0A03F7FC, 0x0AFCEF1B, 0x04FCF901, 0xFC020702);
	r0 = D(r0, s[0][1][1], 0xEEFE1F0A, 0x18F9E22E, 0x00014212, 0x09FCFB01);
	r1 = D(r1, s[0][1][1], 0x0601F9F7, 0xF3050937, 0xE606FCD7, 0x200218F9);
	r2 = D(r2, s[0][1][1], 0xE30215F2, 0xFE05070B, 0xE5F70106, 0xF0FC06F7);
	r3 = D(r3, s[0][1][1], 0x15FB19EE, 0xEB1BF9FE, 0xFFF50A1D, 0xF5FDFEFA);
	r0 = D(r0, s[0][1][2], 0x0602F009, 0xFC0111E4, 0x08FAF509, 0xF8FC0EF5);
	r1 = D(r1, s[0][1][2], 0x07FFFCF9, 0x01FCFE13, 0x0704040A, 0x07FEE712);
	r2 = D(r2, s[0][1][2], 0xFF050004, 0xF809080B, 0x05FE0202, 0x0705F9F5);
	r3 = D(r3, s[0][1][2], 0xFFFFF7F4, 0xFFFBFA0E, 0xFC0203F7, 0xFB0302FE);
	r0 = D(r0, s[0][2][0], 0xFEFFFA00, 0xF8030805, 0x060202FD, 0x0DFF0301);
	r1 = D(r1, s[0][2][0], 0xFD06FEFF, 0x00FFFFFA, 0xF7FEFE01, 0x0103FE02);
	r2 = D(r2, s[0][2][0], 0xFBFFFA05, 0x05FCFD0A, 0x0102F902, 0x01FD0102);
	r3 = D(r3, s[0][2][0], 0x01FFFDFB, 0x00F7FB05, 0xFEFD00FB, 0x00040303);
	r0 = D(r0, s[0][2][1], 0xFE01F00B, 0xFCFD08FD, 0x0607FFF7, 0x06FC040B);
	r1 = D(r1, s[0][2][1], 0xFFF90200, 0x0105FF03, 0x020001FC, 0x010002FC);
	r2 = D(r2, s[0][2][1], 0xFA0101FE, 0xFFFCFAF4, 0x0DFCF60C, 0x0B000C06);
	r3 = D(r3, s[0][2][1], 0xFA05FAF3, 0x07FF01FE, 0x00FF0304, 0xFAFC060C);
	r0 = D(r0, s[0][2][2], 0xFFFA0502, 0x02FA0601, 0xFCFEFE04, 0xFCFEFA15);
	r1 = D(r1, s[0][2][2], 0x0600F6F6, 0x02FDFCFE, 0xFF03FC07, 0xFEFDFE04);
	r2 = D(r2, s[0][2][2], 0x02FE0203, 0xFE0207FE, 0xFC03EB05, 0x04060108);
	r3 = D(r3, s[0][2][2], 0x0503FD04, 0xFDFFFB05, 0xFD0104FF, 0x020302F2);
	r0 = D(r0, s[1][0][0], 0x01090002, 0x05FC01FC, 0xFDF703FE, 0x0304FAFF);
	r1 = D(r1, s[1][0][0], 0x0602FCFE, 0xFD0501F9, 0xF9F70604, 0xFEFDFEFD);
	r2 = D(r2, s[1][0][0], 0xFE080306, 0x07090101, 0xFA020102, 0x0507FD06);
	r3 = D(r3, s[1][0][0], 0xFA020301, 0xF0030F07, 0x04FFFFF7, 0x05FDFEFD);
	r0 = D(r0, s[1][0][1], 0x010600FE, 0xFDFCF8FF, 0x07F9F9FC, 0x05F6FD03);
	r1 = D(r1, s[1][0][1], 0x04FC0413, 0xFC0606FC, 0x0E02FD04, 0x0403FF06);
	r2 = D(r2, s[1][0][1], 0x010403FE, 0xFCF50A0D, 0x04F5FFFC, 0x00F4FCFE);
	r3 = D(r3, s[1][0][1], 0x02FBFBFD, 0x09FC01FE, 0xFBFE0804, 0x010C0302);
	r0 = D(r0, s[1][0][2], 0x03FEFCFE, 0x02FFFF02, 0xFF010001, 0x02F8FFFC);
	r1 = D(r1, s[1][0][2], 0xFC010504, 0x03FFFBF4, 0xFB020304, 0xFE0DFFFE);
	r2 = D(r2, s[1][0][2], 0x010401FE, 0xFF090601, 0xFEF20401, 0x0304FB03);
	r3 = D(r3, s[1][0][2], 0xFFF4FCFF, 0x00FDFCFF, 0x06010300, 0x010902FF);
	r0 = D(r0, s[1][1][0], 0xFD050403, 0x02F80305, 0xFAFC0203, 0xFFF8FE00);
	r1 = D(r1, s[1][1][0], 0xFF030403, 0x0B0EFA08, 0x03F9FB04, 0x01040103);
	r2 = D(r2, s[1][1][0], 0xF20406FD, 0xFA010B02, 0x0107FE03, 0x0502FE00);
	r3 = D(r3, s[1][1][0], 0xF904FF03, 0xFAFAFBF7, 0x03F407FE, 0x04FE0301);
	r0 = D(r0, s[1][1][1], 0x0209F901, 0xFFFE05F7, 0xFA04F7F8, 0x07040E04);
	r1 = D(r1, s[1][1][1], 0xFA010104, 0xFE2FF2FB, 0x04100302, 0xFDF6F7FD);
	r2 = D(r2, s[1][1][1], 0x0B01FAFD, 0xFEE804FA, 0xFE0DFE03, 0xF50D0C03);
	r3 = D(r3, s[1][1][1], 0xF6F5F5FE, 0xFF030E09, 0x04E2FEFC, 0x06F501FB);
	r0 = D(r0, s[1][1][2], 0x02010802, 0x05F2F6FF, 0xFEFF0501, 0xFDF403F7);
	r1 = D(r1, s[1][1][2], 0x03050201, 0xFD1205FC, 0xFDF50CFF, 0x01090302);
	r2 = D(r2, s[1][1][2], 0x06FA0502, 0xFEFC0509, 0xFFE708FA, 0x060A0605);
	r3 = D(r3, s[1][1][2], 0x01FB02FC, 0x020809FE, 0xFB03F8FF, 0xFB09FDFA);
	r0 = D(r0, s[1][2][0], 0x020301FE, 0x05FF02FC, 0xFA0202FD, 0xFCF601FD);
	r1 = D(r1, s[1][2][0], 0x00040104, 0xFF0BFCFD, 0xFF01FF02, 0x020102FE);
	r2 = D(r2, s[1][2][0], 0x02FDFD03, 0xFCFE02FE, 0xFD0102F9, 0xFF0003FF);
	r3 = D(r3, s[1][2][0], 0xFE02FD05, 0xFD0002FC, 0x03F9FC00, 0xFFFD0202);
	r0 = D(r0, s[1][2][1], 0x010702FF, 0x07F70201, 0xFC0B0006, 0xFD0103FA);
	r1 = D(r1, s[1][2][1], 0xFE00F6FA, 0x09ECFF06, 0x01FBFFFB, 0xFD03FE03);
	r2 = D(r2, s[1][2][1], 0x06F7FDFC, 0xFE09FF02, 0xFEFB0202, 0xFEFC00FC);
	r3 = D(r3, s[1][2][1], 0xFD0AFA03, 0x05F60103, 0x02FC0303, 0x06FFFEFD);
	r0 = D(r0, s[1][2][2], 0x01FEFEFF, 0x03F5F604, 0x000300FD, 0xFD0201FF);
	r1 = D(r1, s[1][2][2], 0x04FEFF04, 0x0300FFFF, 0xFFFF06FC, 0xFE03FFFD);
	r2 = D(r2, s[1][2][2], 0x04F904FD, 0xFFF802FE, 0x01060205, 0x0100FE00);
	r3 = D(r3, s[1][2][2], 0x05F902FF, 0xF60C03FC, 0x01FFFFFF, 0x07F4FF05);
	s[0][0][0] = G[4][xy.y+0][xy.x+0]; s[0][0][1] = G[4][xy.y+0][xy.x+1];
	s[0][0][2] = G[4][xy.y+0][xy.x+2]; s[0][1][0] = G[4][xy.y+1][xy.x+0];
	s[0][1][1] = G[4][xy.y+1][xy.x+1]; s[0][1][2] = G[4][xy.y+1][xy.x+2];
	s[0][2][0] = G[4][xy.y+2][xy.x+0]; s[0][2][1] = G[4][xy.y+2][xy.x+1];
	s[0][2][2] = G[4][xy.y+2][xy.x+2]; s[1][0][0] = G[5][xy.y+0][xy.x+0];
	s[1][0][1] = G[5][xy.y+0][xy.x+1]; s[1][0][2] = G[5][xy.y+0][xy.x+2];
	s[1][1][0] = G[5][xy.y+1][xy.x+0]; s[1][1][1] = G[5][xy.y+1][xy.x+1];
	s[1][1][2] = G[5][xy.y+1][xy.x+2]; s[1][2][0] = G[5][xy.y+2][xy.x+0];
	s[1][2][1] = G[5][xy.y+2][xy.x+1]; s[1][2][2] = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0x0103FF01, 0xFB0103FA, 0xFCFD0301, 0x02FEF700);
	r1 = D(r1, s[0][0][0], 0x020500FD, 0x05FE0407, 0xFD060401, 0xFE040201);
	r2 = D(r2, s[0][0][0], 0xFFFDFD01, 0xFE01FEFF, 0x01FDFA03, 0xFFFEFAFD);
	r3 = D(r3, s[0][0][0], 0xFD00FF01, 0xFBFBFE02, 0x04F9FE07, 0x04FCFF01);
	r0 = D(r0, s[0][0][1], 0xFE04FB03, 0x01020304, 0x0403FEFF, 0x03F5FD00);
	r1 = D(r1, s[0][0][1], 0xF0FBFF0B, 0xFDF9FDF7, 0xFBFD04FE, 0x0100FA02);
	r2 = D(r2, s[0][0][1], 0x03070202, 0xFEFA030C, 0xFF030504, 0x06FDFDFB);
	r3 = D(r3, s[0][0][1], 0x030302FC, 0x040B0409, 0x04F402FC, 0xFFF7FFFA);
	r0 = D(r0, s[0][0][2], 0x04FF02FF, 0x07FD0000, 0x07FFFEFF, 0x04FF0007);
	r1 = D(r1, s[0][0][2], 0xFBFE0301, 0x0102FFFB, 0xFCFBFC05, 0xFFF9FFFF);
	r2 = D(r2, s[0][0][2], 0xFFFE0101, 0xF8FBFE01, 0x00FD04FF, 0x01FCFD01);
	r3 = D(r3, s[0][0][2], 0x05070003, 0xF9FEFFFF, 0xFE09FF02, 0x0305FF03);
	r0 = D(r0, s[0][1][0], 0x07040103, 0x01F50406, 0x03060404, 0xF4F406FB);
	r1 = D(r1, s[0][1][0], 0xFAF8F1FD, 0x0308F7FF, 0xF6FCF8FD, 0x020505FF);
	r2 = D(r2, s[0][1][0], 0x060A00FE, 0x01FFF703, 0xFFFFFCFA, 0xFDF9FA00);
	r3 = D(r3, s[0][1][0], 0xFC0309FF, 0x0AFDFB02, 0xFA050603, 0x01FE0600);
	r0 = D(r0, s[0][1][1], 0x01FF050B, 0xFD0406FB, 0x0118FAFD, 0x11DE1C0B);
	r1 = D(r1, s[0][1][1], 0x030D0B01, 0x10F7EE05, 0x15F0220A, 0x03FFFD03);
	r2 = D(r2, s[0][1][1], 0x05081207, 0x0704FA03, 0xFD021D0E, 0xFFDE1903);
	r3 = D(r3, s[0][1][1], 0x061F1A08, 0x03F90B07, 0xFA0EE402, 0x0807F7FD);
	r0 = D(r0, s[0][1][2], 0xFF000400, 0x070B06FB, 0x06FB0205, 0x05F60BFE);
	r1 = D(r1, s[0][1][2], 0xFA01FAFD, 0xFE01FE02, 0xF5FAFCFF, 0xFEFDFAFA);
	r2 = D(r2, s[0][1][2], 0xFFF506FB, 0xFC020103, 0xFF0403F9, 0x00EE0201);
	r3 = D(r3, s[0][1][2], 0x03F40CF7, 0xF602FD01, 0x0B010103, 0x06FF01FA);
	r0 = D(r0, s[0][2][0], 0xFF000602, 0xFB0703FF, 0xFEF90DFE, 0xFDFFFBFA);
	r1 = D(r1, s[0][2][0], 0xF9FEFA03, 0x0402FDFE, 0x0101FD01, 0x01FD0602);
	r2 = D(r2, s[0][2][0], 0x03FB0501, 0x01FC0A03, 0x07FDFC02, 0x00FCFA00);
	r3 = D(r3, s[0][2][0], 0xFCFD12FD, 0x03FF0402, 0x02010501, 0xFE010000);
	r0 = D(r0, s[0][2][1], 0x0303FDFE, 0x030107F7, 0x02FEF603, 0xFAF70101);
	r1 = D(r1, s[0][2][1], 0x06FDFC07, 0xFC04EDF5, 0xFF010A00, 0xFAFF0002);
	r2 = D(r2, s[0][2][1], 0x0B020905, 0xFC02FF09, 0xF3010002, 0xFDF8F600);
	r3 = D(r3, s[0][2][1], 0x04FB1101, 0xFB06FCFF, 0xFE0310FC, 0x010306FC);
	r0 = D(r0, s[0][2][2], 0x0201FB03, 0xFEFD0D00, 0x0403FDFE, 0x010106FA);
	r1 = D(r1, s[0][2][2], 0xFAFD0404, 0x06FE07FC, 0xFD02FEFF, 0xFC00F800);
	r2 = D(r2, s[0][2][2], 0xFEFE01FD, 0xFD07FAFE, 0x04FD0302, 0x04FCF302);
	r3 = D(r3, s[0][2][2], 0x02FD07FE, 0x04FFFB03, 0xFD01FFFB, 0x02FE05FD);
	r0 = D(r0, s[1][0][0], 0x0001FF02, 0x00FE010A, 0x09050100, 0x03FB010A);
	r1 = D(r1, s[1][0][0], 0xFAFB0102, 0xFA05FAFE, 0xFBFD05FE, 0x01FD01FF);
	r2 = D(r2, s[1][0][0], 0x040300FB, 0xFA02FE04, 0x070001FD, 0x00030503);
	r3 = D(r3, s[1][0][0], 0x0FFD0401, 0x0B0601FD, 0xFE05FBFB, 0xFA00FD00);
	r0 = D(r0, s[1][0][1], 0x05FEFEFF, 0xFBFEFDF1, 0x0206FCF6, 0x06FE0A0E);
	r1 = D(r1, s[1][0][1], 0x0E0501EB, 0xFB06FE05, 0x0B03FD09, 0x0102FBF8);
	r2 = D(r2, s[1][0][1], 0x01FD0005, 0x0F0BF7EE, 0x050308FF, 0xF4F502FA);
	r3 = D(r3, s[1][0][1], 0xFCFDFE0A, 0xFBFCFD0B, 0xFF060100, 0x0205000B);
	r0 = D(r0, s[1][0][2], 0xFDFF0106, 0x0401FF03, 0xFDFE00FC, 0x0201FB08);
	r1 = D(r1, s[1][0][2], 0x0600FF06, 0xFBFCFA03, 0xFF0102ED, 0x01FF0903);
	r2 = D(r2, s[1][0][2], 0xFD010104, 0xFE03FFF4, 0xFE01FE0A, 0xFEFE050B);
	r3 = D(r3, s[1][0][2], 0xFEFD040E, 0x01FF0701, 0x0002F4FA, 0xFF01F7F5);
	r0 = D(r0, s[1][1][0], 0xFF01FEF6, 0x0B07FFFE, 0x03FCFAFD, 0x06FE09FB);
	r1 = D(r1, s[1][1][0], 0x02FD0DFC, 0xF8F6FD14, 0xFF01FD0C, 0x080202F9);
	r2 = D(r2, s[1][1][0], 0xF8FCFA02, 0x030109FF, 0x0203FDFE, 0xF3FF0106);
	r3 = D(r3, s[1][1][0], 0x02FF0214, 0xF504FB0B, 0xF8FD0305, 0x09FEFCFB);
	r0 = D(r0, s[1][1][1], 0x1C0407FD, 0xF5FFFD0D, 0x09F70BFC, 0x0A16F50C);
	r1 = D(r1, s[1][1][1], 0xD3FC070E, 0x1003FCF9, 0xEA0A011F, 0x03FEFF0C);
	r2 = D(r2, s[1][1][1], 0x09FDFF06, 0xEEFBFBF5, 0x04010909, 0x0E1005ED);
	r3 = D(r3, s[1][1][1], 0xE8F01045, 0x0BFF03EC, 0x1AFB00D0, 0x04F9FAED);
	r0 = D(r0, s[1][1][2], 0xFC02FAF4, 0x02FD0516, 0xFA02FEF8, 0x06FCFD10);
	r1 = D(r1, s[1][1][2], 0x03FD03FD, 0x0401FDF7, 0x04FB05F6, 0x050003F5);
	r2 = D(r2, s[1][1][2], 0x0103FC0C, 0x070004EE, 0xF9FDFD0C, 0x0101F3D7);
	r3 = D(r3, s[1][1][2], 0xFC02FC19, 0x06FF020E, 0xF803010C, 0xF901FD19);
	r0 = D(r0, s[1][2][0], 0x0502FE03, 0x03FBFFF9, 0xFB05FEFF, 0x0AFD090E);
	r1 = D(r1, s[1][2][0], 0xFFFD0AFF, 0xFC03F709, 0xFF0100FE, 0xFF02FE06);
	r2 = D(r2, s[1][2][0], 0x0206FDFC, 0xFCFFFFF9, 0x01010307, 0xFE010400);
	r3 = D(r3, s[1][2][0], 0x05040105, 0x02FD0200, 0x0400FC02, 0x02FFFDFC);
	r0 = D(r0, s[1][2][1], 0xFBFEFEFB, 0xFDFEFD0B, 0x04FF03FC, 0x0CFC0300);
	r1 = D(r1, s[1][2][1], 0xFF030407, 0x07F70102, 0xFAFCFF09, 0x0B0204FB);
	r2 = D(r2, s[1][2][1], 0xED02F60B, 0x06000405, 0x06FCFCF3, 0xFAFDFCF5);
	r3 = D(r3, s[1][2][1], 0x03090206, 0x03FEFFFF, 0x00FFFB06, 0xFBFFFD05);
	r0 = D(r0, s[1][2][2], 0xFFFD0501, 0x0307FDFA, 0xFCFE0202, 0x06FDFDFF);
	r1 = D(r1, s[1][2][2], 0x0305FEFD, 0xF703F406, 0x04FC0201, 0x02FD0501);
	r2 = D(r2, s[1][2][2], 0x02FCFF04, 0xFFFB0405, 0x0102FD09, 0xFAFE0402);
	r3 = D(r3, s[1][2][2], 0xFC00FEFD, 0xFFFFFFF9, 0x06FF0401, 0xFE02FB09);
	s[0][0][0] = G[6][xy.y+0][xy.x+0]; s[0][0][1] = G[6][xy.y+0][xy.x+1];
	s[0][0][2] = G[6][xy.y+0][xy.x+2]; s[0][1][0] = G[6][xy.y+1][xy.x+0];
	s[0][1][1] = G[6][xy.y+1][xy.x+1]; s[0][1][2] = G[6][xy.y+1][xy.x+2];
	s[0][2][0] = G[6][xy.y+2][xy.x+0]; s[0][2][1] = G[6][xy.y+2][xy.x+1];
	s[0][2][2] = G[6][xy.y+2][xy.x+2]; s[1][0][0] = G[7][xy.y+0][xy.x+0];
	s[1][0][1] = G[7][xy.y+0][xy.x+1]; s[1][0][2] = G[7][xy.y+0][xy.x+2];
	s[1][1][0] = G[7][xy.y+1][xy.x+0]; s[1][1][1] = G[7][xy.y+1][xy.x+1];
	s[1][1][2] = G[7][xy.y+1][xy.x+2]; s[1][2][0] = G[7][xy.y+2][xy.x+0];
	s[1][2][1] = G[7][xy.y+2][xy.x+1]; s[1][2][2] = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0x030401FC, 0xFFF70405, 0xFC0200FC, 0x04FBFE01);
	r1 = D(r1, s[0][0][0], 0xFDFC0103, 0xFCFFF7F9, 0xFEFAFA07, 0x01FF01FF);
	r2 = D(r2, s[0][0][0], 0x010600FA, 0xFF02FDFA, 0x0304FFFF, 0x01FE0301);
	r3 = D(r3, s[0][0][0], 0x02000104, 0x04FFF9F9, 0x020CFCF9, 0xFE0401FD);
	r0 = D(r0, s[0][0][1], 0x0200FE02, 0x0502FA03, 0x02FB0206, 0x02060EF3);
	r1 = D(r1, s[0][0][1], 0x0A0400ED, 0xF9090011, 0x020806EE, 0x06FDFDFD);
	r2 = D(r2, s[0][0][1], 0xFB06FF04, 0xFC06FCFD, 0x0AF6FFF8, 0xF9040A01);
	r3 = D(r3, s[0][0][1], 0xF9FB0304, 0xF90DFE07, 0xF2000507, 0xFF0005FF);
	r0 = D(r0, s[0][0][2], 0xFEFE0203, 0xFD000100, 0xFE02FDFC, 0xFE020102);
	r1 = D(r1, s[0][0][2], 0x0205FCFF, 0xFAFD0204, 0xFEFCFB03, 0x0501FEF3);
	r2 = D(r2, s[0][0][2], 0x00FDFEFD, 0x0401FFFF, 0x030BFF02, 0x01FA02FF);
	r3 = D(r3, s[0][0][2], 0x01FE0408, 0x00F8FDF5, 0xFDFFFFFC, 0xFEFDFDFF);
	r0 = D(r0, s[0][1][0], 0x0BFEFEFB, 0xFF1203FE, 0xF2F30315, 0x0DFE0DFB);
	r1 = D(r1, s[0][1][0], 0x010E0406, 0xFE0104F9, 0xFC01F9F9, 0x07FE0202);
	r2 = D(r2, s[0][1][0], 0x07F1F90A, 0x07FF0101, 0x00060204, 0xFE0100F6);
	r3 = D(r3, s[0][1][0], 0x05EE0303, 0x04F80301, 0x01030102, 0xFEFB0101);
	r0 = D(r0, s[0][1][1], 0x05FFFFF2, 0x06F306FB, 0x200CFFEC, 0x0AEA23FE);
	r1 = D(r1, s[0][1][1], 0xF7F7FE02, 0xFFFB0CF5, 0xFFF40208, 0x070D0EF7);
	r2 = D(r2, s[0][1][1], 0x0205FAFA, 0xF507FAF9, 0x10080101, 0xFDF00400);
	r3 = D(r3, s[0][1][1], 0x03F4FC04, 0x0C02FCFF, 0x0704F4FC, 0xFC03FD07);
	r0 = D(r0, s[0][1][2], 0xF90406FC, 0x040300F9, 0x000505FD, 0x060A0B01);
	r1 = D(r1, s[0][1][2], 0xF6FC060A, 0xFB000104, 0xEEFFFFFF, 0xFD010111);
	r2 = D(r2, s[0][1][2], 0xF7040404, 0x00FDFB06, 0xFB070006, 0xF7FB09FB);
	r3 = D(r3, s[0][1][2], 0x000009FD, 0xF9070006, 0x18FD0102, 0x06FE07FF);
	r0 = D(r0, s[0][2][0], 0x0300FFFD, 0xF8FEFEFD, 0x05FA0404, 0xFF0A0107);
	r1 = D(r1, s[0][2][0], 0xFF0200FB, 0x01FC01FC, 0x040A0100, 0x0302FFFD);
	r2 = D(r2, s[0][2][0], 0x0906FF00, 0x02FB0206, 0x0405FC00, 0x03050002);
	r3 = D(r3, s[0][2][0], 0x050504FF, 0x04FFFF09, 0xFD030301, 0xFE05FDFE);
	r0 = D(r0, s[0][2][1], 0x0BFDFD05, 0xEA0DFF03, 0x12FCFCFC, 0x02070A02);
	r1 = D(r1, s[0][2][1], 0x0700FCFE, 0xFA03FA01, 0x07F403FD, 0xFC04FCFA);
	r2 = D(r2, s[0][2][1], 0xFCF40202, 0x060101FC, 0x09FAFFFB, 0x070101FC);
	r3 = D(r3, s[0][2][1], 0x04F5FFFC, 0xFF02FDFA, 0xF902FF01, 0xF2F401FE);
	r0 = D(r0, s[0][2][2], 0xFE01FC02, 0x0205FDFD, 0xFEFFFF02, 0x09010007);
	r1 = D(r1, s[0][2][2], 0xFEFD0201, 0xFCFD0201, 0xFD00FFFF, 0xF9FFFE0B);
	r2 = D(r2, s[0][2][2], 0xF5000105, 0x0201FFFA, 0x0702FC18, 0xFEF7FE06);
	r3 = D(r3, s[0][2][2], 0xF5FEFFFE, 0x04010003, 0x0101FEFC, 0xF5000202);
	r0 = D(r0, s[1][0][0], 0xFFF7FFFF, 0x02FCFEFE, 0x04F8FE04, 0x01FF06FB);
	r1 = D(r1, s[1][0][0], 0x010AFCFE, 0xFF010504, 0xFE0C0205, 0x03FE0002);
	r2 = D(r2, s[1][0][0], 0xFBFD0103, 0xFD02F906, 0x02020603, 0x00F9FAFE);
	r3 = D(r3, s[1][0][0], 0x01F805F5, 0xF6060609, 0xFF0C0405, 0xFF020204);
	r0 = D(r0, s[1][0][1], 0x02FC0301, 0xFE030604, 0x0101FF0B, 0xFAF40206);
	r1 = D(r1, s[1][0][1], 0xF4FB0706, 0x0401FEF6, 0xFDF1FB06, 0x04F80900);
	r2 = D(r2, s[1][0][1], 0x0400FFF8, 0xF60A0702, 0xFB02FD13, 0x0107FAEC);
	r3 = D(r3, s[1][0][1], 0x02F6FF04, 0x09FB02FB, 0x000E0201, 0xFD05FB04);
	r0 = D(r0, s[1][0][2], 0xFFFC0401, 0x040106FC, 0xFF04FE01, 0x01030606);
	r1 = D(r1, s[1][0][2], 0x00FD04FB, 0x020301FD, 0xFE070004, 0x0207F905);
	r2 = D(r2, s[1][0][2], 0xFF03FFFE, 0xFE03FA07, 0xFA02FDFE, 0x030BFCF7);
	r3 = D(r3, s[1][0][2], 0xFE0501FD, 0xFC03FF10, 0xFDFD0309, 0x010303FF);
	r0 = D(r0, s[1][1][0], 0x040B01F4, 0xFA0102FD, 0xF1040801, 0x04F60606);
	r1 = D(r1, s[1][1][0], 0x01020102, 0x08F2FCFF, 0xFAFFFD0D, 0x010A02FD);
	r2 = D(r2, s[1][1][0], 0xFB010102, 0xFB170605, 0x03F6FFFC, 0x0601FC04);
	r3 = D(r3, s[1][1][0], 0x0102FAFC, 0xF6FAFC12, 0x0C15FAFF, 0xFFFF05FC);
	r0 = D(r0, s[1][1][1], 0x002102FC, 0xFD13FB01, 0xF91208EE, 0x010D0619);
	r1 = D(r1, s[1][1][1], 0x14FAFFF0, 0xF205FB0C, 0x0EFA0107, 0x02E80023);
	r2 = D(r2, s[1][1][1], 0x06F6FEEC, 0x14FDFE03, 0xFB0A07EA, 0xF61003FB);
	r3 = D(r3, s[1][1][1], 0x010406FE, 0x110DFFEE, 0xF6FEFE05, 0xFEF402F0);
	r0 = D(r0, s[1][1][2], 0x01F9FD08, 0xFA03FC08, 0x01F60203, 0x0306FFFB);
	r1 = D(r1, s[1][1][2], 0x02F3F9FC, 0x01FC02FB, 0x0904FCF9, 0x02F9FFFA);
	r2 = D(r2, s[1][1][2], 0x02FDFCF5, 0x070DFDFA, 0xFBF303FB, 0xFE01FDFA);
	r3 = D(r3, s[1][1][2], 0xFEFFFE04, 0x04FC01FC, 0xFB0A020A, 0xFCFF0105);
	r0 = D(r0, s[1][2][0], 0xF6000401, 0x0C0504F8, 0xFAFDFDF8, 0x08F6FF02);
	r1 = D(r1, s[1][2][0], 0x020AFF04, 0x03F501FE, 0xFDF50404, 0xFE0301FD);
	r2 = D(r2, s[1][2][0], 0xF4FBFF00, 0xFB03FEFC, 0xFE000003, 0x0501FEFE);
	r3 = D(r3, s[1][2][0], 0xF7FA02FB, 0x02FFFEF7, 0x00020201, 0x01FD0101);
	r0 = D(r0, s[1][2][1], 0x0105FBF6, 0xFE00FF0D, 0xFB01FEFE, 0xFFF7FFF6);
	r1 = D(r1, s[1][2][1], 0xF90A04FE, 0x07FDFD06, 0x070A03FA, 0x02FDFB0B);
	r2 = D(r2, s[1][2][1], 0x0BFCFC0C, 0xFA0303FD, 0x04FEFB01, 0xFAFDFBF7);
	r3 = D(r3, s[1][2][1], 0xFD030101, 0xF9FBFD05, 0x05FA0503, 0x1106FFFF);
	r0 = D(r0, s[1][2][2], 0xFFFEFFF8, 0x02F80307, 0x0404FBFE, 0x020901F1);
	r1 = D(r1, s[1][2][2], 0xFFFC02FF, 0x0306FD04, 0xFE0300F6, 0x05FEFD06);
	r2 = D(r2, s[1][2][2], 0x01FDFCF8, 0xFA01050A, 0x01FDF7FD, 0x0407FCFE);
	r3 = D(r3, s[1][2][2], 0x0403FD01, 0xFD0303FC, 0x010402FF, 0x0401FF01);
	vec4 f0 = vec4(r0) * 6.20001240e-05;
	f0 += vec4(5.246e-04, -5.637e-04, 2.525e-03, -5.820e-03);
	imageStore(out_image, opos + ivec2(0, 0), vec4(f0));
	vec4 f1 = vec4(r1) * 6.20001240e-05;
	f1 += vec4(-2.295e-04, -3.503e-03, -6.801e-03, -4.703e-04);
	imageStore(out_image, opos + ivec2(1, 0), vec4(f1));
	vec4 f2 = vec4(r2) * 6.20001240e-05;
	f2 += vec4(-1.290e-03, -1.154e-03, -5.254e-04, 3.186e-03);
	imageStore(out_image, opos + ivec2(0, 1), vec4(f2));
	vec4 f3 = vec4(r3) * 6.20001240e-05;
	f3 += vec4(2.078e-03, -2.011e-03, -3.515e-03, -6.186e-03);
	imageStore(out_image, opos + ivec2(1, 1), vec4(f3));
}

//!DESC CuNNy-16x16C-TEST-out-shuffle
//!HOOK LUMA
//!COMPUTE 16 16 8 8
//!BIND LUMA
//!BIND conv16
//!BIND easu
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 1
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_spirv_intrinsics : require
#extension GL_EXT_control_flow_attributes : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) ivec4(r.x + dp4(s, a, 0), r.y + dp4(s, b, 0), r.z + dp4(s, c, 0), r.w + dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	[[unroll]] for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		[[unroll]] for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(2, 2) + ivec2(1, 1)) * conv16_pt;
			r = conv16_gather(p, 0);
			g = conv16_gather(p, 1);
			b = conv16_gather(p, 2);
			a = conv16_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.00000000e+00;
			vec4 v2 = vec4(r.z, g.z, b.z, a.z) * 1.00000000e+00;
			vec4 v4 = vec4(r.x, g.x, b.x, a.x) * 1.00000000e+00;
			vec4 v6 = vec4(r.y, g.y, b.y, a.y) * 1.00000000e+00;
			vec4 v1 = max(-v0, vec4(0));
			v0 = max(v0, vec4(0));
			vec4 v3 = max(-v2, vec4(0));
			v2 = max(v2, vec4(0));
			vec4 v5 = max(-v4, vec4(0));
			v4 = max(v4, vec4(0));
			vec4 v7 = max(-v6, vec4(0));
			v6 = max(v6, vec4(0));
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s[2][3][3];
	ivec4 r0 = ivec4(0);
	s[0][0][0] = G[0][xy.y+0][xy.x+0]; s[0][0][1] = G[0][xy.y+0][xy.x+1];
	s[0][0][2] = G[0][xy.y+0][xy.x+2]; s[0][1][0] = G[0][xy.y+1][xy.x+0];
	s[0][1][1] = G[0][xy.y+1][xy.x+1]; s[0][1][2] = G[0][xy.y+1][xy.x+2];
	s[0][2][0] = G[0][xy.y+2][xy.x+0]; s[0][2][1] = G[0][xy.y+2][xy.x+1];
	s[0][2][2] = G[0][xy.y+2][xy.x+2]; s[1][0][0] = G[1][xy.y+0][xy.x+0];
	s[1][0][1] = G[1][xy.y+0][xy.x+1]; s[1][0][2] = G[1][xy.y+0][xy.x+2];
	s[1][1][0] = G[1][xy.y+1][xy.x+0]; s[1][1][1] = G[1][xy.y+1][xy.x+1];
	s[1][1][2] = G[1][xy.y+1][xy.x+2]; s[1][2][0] = G[1][xy.y+2][xy.x+0];
	s[1][2][1] = G[1][xy.y+2][xy.x+1]; s[1][2][2] = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0xFD020204, 0xFF02FD08, 0x0707080B, 0x03020105);
	r0 = D(r0, s[0][0][1], 0x0614E2EB, 0xFC06FEEC, 0xFD05FEF3, 0xFD02FB03);
	r0 = D(r0, s[0][0][2], 0xFF000402, 0xFFFB0202, 0x070203FD, 0xFFF80803);
	r0 = D(r0, s[0][1][0], 0xF601F4F7, 0x0B030205, 0xF2F415E7, 0x06030009);
	r0 = D(r0, s[0][1][1], 0xDB2E0B13, 0xDFFBFBF0, 0xF01EE818, 0xEBF12FD9);
	r0 = D(r0, s[0][1][2], 0x04F2F607, 0xFA08090C, 0xF6020705, 0xFE09FE0C);
	r0 = D(r0, s[0][2][0], 0x060203FE, 0x000003FE, 0x04090201, 0x03010101);
	r0 = D(r0, s[0][2][1], 0x03FF0302, 0x01F6FF02, 0xF40A01FD, 0xF3FDFAFA);
	r0 = D(r0, s[0][2][2], 0x01FCFC05, 0x02F90108, 0x06F3F60C, 0x00F7FB09);
	r0 = D(r0, s[1][0][0], 0x0301FD05, 0x04FD04F4, 0xFAFBF8F0, 0xFEFCFFFF);
	r0 = D(r0, s[1][0][1], 0xF4F40D0F, 0xFCFC070F, 0x05FE0510, 0x04FC04FA);
	r0 = D(r0, s[1][0][2], 0x0405FFFD, 0x0104FFFE, 0xFBFF0002, 0x0307FCFB);
	r0 = D(r0, s[1][1][0], 0x03FE02FE, 0xF7FEFFFE, 0x080DF417, 0xFCFE01F8);
	r0 = D(r0, s[1][1][1], 0x0FEEF6F8, 0x0BFE0804, 0xFCF2FEE5, 0x0009F211);
	r0 = D(r0, s[1][1][2], 0xFE1107F6, 0xFEF5F5F9, 0x0D04FCF9, 0xFDF3FDFB);
	r0 = D(r0, s[1][2][0], 0xFCFFFC02, 0x0001FD01, 0xFBF9FFFD, 0xFFFFFFFF);
	r0 = D(r0, s[1][2][1], 0xFF01FBFE, 0x010B00FE, 0x04FE0303, 0x04FF0606);
	r0 = D(r0, s[1][2][2], 0xFF0604FB, 0x000800F8, 0xFA0B0BF3, 0xFF0A05F5);
	s[0][0][0] = G[2][xy.y+0][xy.x+0]; s[0][0][1] = G[2][xy.y+0][xy.x+1];
	s[0][0][2] = G[2][xy.y+0][xy.x+2]; s[0][1][0] = G[2][xy.y+1][xy.x+0];
	s[0][1][1] = G[2][xy.y+1][xy.x+1]; s[0][1][2] = G[2][xy.y+1][xy.x+2];
	s[0][2][0] = G[2][xy.y+2][xy.x+0]; s[0][2][1] = G[2][xy.y+2][xy.x+1];
	s[0][2][2] = G[2][xy.y+2][xy.x+2]; s[1][0][0] = G[3][xy.y+0][xy.x+0];
	s[1][0][1] = G[3][xy.y+0][xy.x+1]; s[1][0][2] = G[3][xy.y+0][xy.x+2];
	s[1][1][0] = G[3][xy.y+1][xy.x+0]; s[1][1][1] = G[3][xy.y+1][xy.x+1];
	s[1][1][2] = G[3][xy.y+1][xy.x+2]; s[1][2][0] = G[3][xy.y+2][xy.x+0];
	s[1][2][1] = G[3][xy.y+2][xy.x+1]; s[1][2][2] = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0x02020708, 0xFEFCFF09, 0xFC07FF03, 0xFEFEFC06);
	r0 = D(r0, s[0][0][1], 0xFF040706, 0xFF041906, 0xF1FF0A06, 0xF7040C03);
	r0 = D(r0, s[0][0][2], 0x0809FBFC, 0x0E0BF900, 0x00FCFCFC, 0x020403FE);
	r0 = D(r0, s[0][1][0], 0x25FB1304, 0xFC0D03F4, 0x0CEB0504, 0xF20107FE);
	r0 = D(r0, s[0][1][1], 0xDBF30EFE, 0x09EA1608, 0xFF0BBFFC, 0xFFF8DA07);
	r0 = D(r0, s[0][1][2], 0x00FEFFFA, 0xF2F50E06, 0x041804F6, 0x0304F5FA);
	r0 = D(r0, s[0][2][0], 0xFE05FD02, 0xFEFF0200, 0x0C100206, 0x050602FF);
	r0 = D(r0, s[0][2][1], 0x0101FFF9, 0x0002F7F6, 0xF6F006F8, 0x0B00FDF4);
	r0 = D(r0, s[0][2][2], 0x01FFFEFD, 0x020303FF, 0x06F5FE04, 0x00F7080B);
	r0 = D(r0, s[1][0][0], 0xFAFEF9FD, 0x040302F8, 0x02FB03FF, 0x050203FB);
	r0 = D(r0, s[1][0][1], 0x02F9FDFB, 0x01FCF1ED, 0x0D00FBFF, 0x07FDF801);
	r0 = D(r0, s[1][0][2], 0xFBF70104, 0xF4F50108, 0xFF030404, 0xFDFB0205);
	r0 = D(r0, s[1][1][0], 0xCD03FA09, 0x04F0FA08, 0xF60DEE06, 0x0BFFFCFD);
	r0 = D(r0, s[1][1][1], 0x0A0E1109, 0x22320F0E, 0xF9F219EF, 0x0D1102DE);
	r0 = D(r0, s[1][1][2], 0x0303020A, 0x070701F6, 0x00E7FF0A, 0xFBFB0605);
	r0 = D(r0, s[1][2][0], 0x04F901FB, 0x0901FFFD, 0xE3EAFDF8, 0x02F8FEFE);
	r0 = D(r0, s[1][2][1], 0xFEFEFD06, 0x02FE0505, 0xFC0DFB16, 0x17050617);
	r0 = D(r0, s[1][2][2], 0x0102FF03, 0xFEFEFB02, 0xFC0B02FB, 0xF807F9F4);
	s[0][0][0] = G[4][xy.y+0][xy.x+0]; s[0][0][1] = G[4][xy.y+0][xy.x+1];
	s[0][0][2] = G[4][xy.y+0][xy.x+2]; s[0][1][0] = G[4][xy.y+1][xy.x+0];
	s[0][1][1] = G[4][xy.y+1][xy.x+1]; s[0][1][2] = G[4][xy.y+1][xy.x+2];
	s[0][2][0] = G[4][xy.y+2][xy.x+0]; s[0][2][1] = G[4][xy.y+2][xy.x+1];
	s[0][2][2] = G[4][xy.y+2][xy.x+2]; s[1][0][0] = G[5][xy.y+0][xy.x+0];
	s[1][0][1] = G[5][xy.y+0][xy.x+1]; s[1][0][2] = G[5][xy.y+0][xy.x+2];
	s[1][1][0] = G[5][xy.y+1][xy.x+0]; s[1][1][1] = G[5][xy.y+1][xy.x+1];
	s[1][1][2] = G[5][xy.y+1][xy.x+2]; s[1][2][0] = G[5][xy.y+2][xy.x+0];
	s[1][2][1] = G[5][xy.y+2][xy.x+1]; s[1][2][2] = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0x04080507, 0x0600FCEF, 0xFBF9F60E, 0x02FBFA01);
	r0 = D(r0, s[0][0][1], 0xF5F5FB09, 0xFF040514, 0x0100FBF5, 0x0605FBF6);
	r0 = D(r0, s[0][0][2], 0x0101FBFA, 0xFC02F8F7, 0xFE02FE04, 0x0007FE01);
	r0 = D(r0, s[0][1][0], 0x07F6F4FE, 0xEE010D08, 0x0D0D0D0A, 0xF50206FF);
	r0 = D(r0, s[0][1][1], 0x060D13F1, 0x01F4EFFD, 0xFA0711EA, 0xF5070411);
	r0 = D(r0, s[0][1][2], 0xFD02FB08, 0x0C040906, 0x01FCF204, 0x06F504F2);
	r0 = D(r0, s[0][2][0], 0xF401FE01, 0x07020601, 0xF2FCFDFE, 0x03FF07FF);
	r0 = D(r0, s[0][2][1], 0x08FB0306, 0xFA01FBFE, 0x0BF9080D, 0x04F6F903);
	r0 = D(r0, s[0][2][2], 0xFDFEFFFA, 0xFFFE02FA, 0xFD0200FC, 0xFF040207);
	r0 = D(r0, s[1][0][0], 0x00F60305, 0xFA010312, 0x020C08F2, 0xFF0303FD);
	r0 = D(r0, s[1][0][1], 0x0C1105E6, 0x07F90301, 0xFEFD080C, 0xF9F9040A);
	r0 = D(r0, s[1][0][2], 0xFFFF0603, 0x04FE05FE, 0x02FE01FF, 0xFFF90306);
	r0 = D(r0, s[1][1][0], 0x0428EA05, 0x16E9EEF5, 0x01F3FB06, 0x0BF10700);
	r0 = D(r0, s[1][1][1], 0x03E7F405, 0x0E0BFF05, 0x12F9DDF9, 0x2204F408);
	r0 = D(r0, s[1][1][2], 0x010104FF, 0xF6FF00F8, 0xFD0510FD, 0xFD0BFBF6);
	r0 = D(r0, s[1][2][0], 0x0AFDFB01, 0xFAFDFE01, 0x0E130D01, 0xFFF9F701);
	r0 = D(r0, s[1][2][1], 0xF705EBFA, 0x04FFF206, 0xF40804F0, 0xF9FE26FB);
	r0 = D(r0, s[1][2][2], 0x0402FF07, 0x0002FD07, 0x04FE0105, 0x0102FEFF);
	s[0][0][0] = G[6][xy.y+0][xy.x+0]; s[0][0][1] = G[6][xy.y+0][xy.x+1];
	s[0][0][2] = G[6][xy.y+0][xy.x+2]; s[0][1][0] = G[6][xy.y+1][xy.x+0];
	s[0][1][1] = G[6][xy.y+1][xy.x+1]; s[0][1][2] = G[6][xy.y+1][xy.x+2];
	s[0][2][0] = G[6][xy.y+2][xy.x+0]; s[0][2][1] = G[6][xy.y+2][xy.x+1];
	s[0][2][2] = G[6][xy.y+2][xy.x+2]; s[1][0][0] = G[7][xy.y+0][xy.x+0];
	s[1][0][1] = G[7][xy.y+0][xy.x+1]; s[1][0][2] = G[7][xy.y+0][xy.x+2];
	s[1][1][0] = G[7][xy.y+1][xy.x+0]; s[1][1][1] = G[7][xy.y+1][xy.x+1];
	s[1][1][2] = G[7][xy.y+1][xy.x+2]; s[1][2][0] = G[7][xy.y+2][xy.x+0];
	s[1][2][1] = G[7][xy.y+2][xy.x+1]; s[1][2][2] = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s[0][0][0], 0x09F9FD05, 0x0DFF0904, 0xFA05FEF9, 0x01030201);
	r0 = D(r0, s[0][0][1], 0xEEFFF807, 0xFAF9F40D, 0x09F606F8, 0x08FB01F9);
	r0 = D(r0, s[0][0][2], 0xFC0BFD01, 0xF510FE01, 0x03FE04FA, 0x010603FD);
	r0 = D(r0, s[0][1][0], 0x340508EE, 0xEFF5F7F1, 0xFEF9FE09, 0xF7FAFDFB);
	r0 = D(r0, s[0][1][1], 0x111B1203, 0x2D1E07EB, 0xDDFD0936, 0xC00A0322);
	r0 = D(r0, s[0][1][2], 0x0AF9FBF4, 0x06060BF1, 0xFC0FFAFE, 0x05F9FC03);
	r0 = D(r0, s[0][2][0], 0x08FA0201, 0x0905F804, 0xE50003F8, 0xFAFFFBFF);
	r0 = D(r0, s[0][2][1], 0xF6EFFAFE, 0xF2EDFDFF, 0x1C05F800, 0xF506FEFC);
	r0 = D(r0, s[0][2][2], 0xFDFCFC07, 0xF7FE0708, 0xFE04FA05, 0xF8140805);
	r0 = D(r0, s[1][0][0], 0xEC06FCF8, 0xF103F8FE, 0x0AF70306, 0xFFFDFF01);
	r0 = D(r0, s[1][0][1], 0x11FE17F8, 0xFA080BEC, 0xFD09F609, 0xFD02FF06);
	r0 = D(r0, s[1][0][2], 0x07F601FD, 0x0EF101FC, 0xFC03FA06, 0x01FDFD02);
	r0 = D(r0, s[1][1][0], 0xFEFAFB09, 0x10080B0D, 0xF811F1F1, 0x06070208);
	r0 = D(r0, s[1][1][1], 0xFDE3BF07, 0xFEE6180E, 0x03FAFFE9, 0x0C0715E8);
	r0 = D(r0, s[1][1][2], 0xF9060B07, 0xF7FDF607, 0x03F40A02, 0xF207FA01);
	r0 = D(r0, s[1][2][0], 0x0507FFFF, 0x03FC06FD, 0x02FBFC09, 0x01FE0403);
	r0 = D(r0, s[1][2][1], 0xFE140703, 0x03170500, 0xF705F404, 0xF7010806);
	r0 = D(r0, s[1][2][2], 0x030502FB, 0xFD06FDFA, 0x02FD05FE, 0x09F106FA);
	vec4 f0 = vec4(r0) * 6.20001240e-05;
	f0 += vec4(-1.892e-04, 2.383e-05, -4.632e-05, 2.163e-04);
	f0 = tanh(f0);
	vec2 opt = 0.5 * LUMA_pt;
	vec2 fpos = (vec2(opos) + vec2(0.5)) * opt;
	imageStore(out_image, opos + ivec2(0, 0), vec4(f0.x + easu_tex(fpos + vec2(0.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(f0.y + easu_tex(fpos + vec2(1.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(0, 1), vec4(f0.z + easu_tex(fpos + vec2(0.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 1), vec4(f0.w + easu_tex(fpos + vec2(1.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
}
