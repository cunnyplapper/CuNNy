// CuNNy 8x4C EASU NVL DS
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

//!MAGPIE EFFECT
//!VERSION 3
//!OUTPUT_WIDTH INPUT_WIDTH * 2
//!OUTPUT_HEIGHT INPUT_HEIGHT * 2

//!TEXTURE
Texture2D INPUT;

//!TEXTURE
//!WIDTH INPUT_WIDTH * 2
//!HEIGHT INPUT_HEIGHT * 2
//!FORMAT R8_UNORM
Texture2D easu;

//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t1;

// FSR mpv | modified
// Copyright (c) 2021 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// FidelityFX FSR v1.0.2 by AMD
// ported to mpv by agyild

//!PASS 1
//!DESC CuNNy-EASU
//!STYLE PS
//!IN INPUT
//!OUT easu

float GetLuma(float3 rgb) {
	return dot(float3(0.299, 0.587, 0.114), rgb);
}

float APrxLoRcpF1(float a) {
	return asfloat(uint(0x7ef07ebb) - asuint(a));
}

float APrxLoRsqF1(float a) {
	return asfloat(uint(0x5f347d74) - (asuint(a) >> uint(1)));
}

float AMin3F1(float x, float y, float z) {

	return min(x, min(y, z));
}

float AMax3F1(float x, float y, float z) {
	return max(x, max(y, z));
}

void tap(inout float aC, inout float aW, float2 off, float2 dir, float2 len,
         float lob, float clp, float c){
	float2 v;
	v.x = (off.x * ( dir.x)) + (off.y * dir.y);
	v.y = (off.x * (-dir.y)) + (off.y * dir.x);
	v *= len;
	float d2 = v.x * v.x + v.y * v.y;
	d2 = min(d2, clp);
	float wB = float(2.0 / 5.0) * d2 + -1.0;

	float wA = lob * d2 + -1.0;
	wB *= wB;
	wA *= wA;
	wB = float(25.0 / 16.0) * wB + float(-(25.0 / 16.0 - 1.0));
	float w = wB * wA;
	aC += c * w;
	aW += w;
}

void set(inout float2 dir, inout float len, float2 pp, bool biS, bool biT,
         bool biU, bool biV, float lA, float lB, float lC, float lD, float lE){

	float w = 0.0;
	if (biS)
		w = (1.0 - pp.x) * (1.0 - pp.y);
	if (biT)
		w =        pp.x  * (1.0 - pp.y);
	if (biU)
		w = (1.0 - pp.x) *        pp.y;

	if (biV)
		w =        pp.x  *        pp.y;
	float dc = lD - lC;
	float cb = lC - lB;
	float lenX = max(abs(dc), abs(cb));
	lenX = APrxLoRcpF1(lenX);
	float dirX = lD - lB;
	lenX = clamp(abs(dirX) * lenX, 0.0, 1.0);
	lenX *= lenX;
	float ec = lE - lC;

	float ca = lC - lA;
	float lenY = max(abs(ec), abs(ca));
	lenY = APrxLoRcpF1(lenY);
	float dirY = lE - lA;
	lenY = clamp(abs(dirY) * lenY, 0.0, 1.0);
	lenY *= lenY;
	dir += float2(dirX, dirY) * w;
	len += dot(float2(w, w), float2(lenX, lenY));
}

float4 Pass1(float2 pos) {
	float2 pt = float2(GetInputPt());
	float2 size = float2(GetInputSize());
	float4 pix = float4(0.0, 0.0, 0.0, 1.0);
	float2 pp = pos * size - float2(0.5, 0.5);
	float2 fp = floor(pp);
	pp -= fp;
	float b = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2(0.5, -0.5)) * pt), 0).rgb);
	float c = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2(1.5, -0.5)) * pt), 0).rgb);
	float e = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2(-0.5, 0.5)) * pt), 0).rgb);
	float f = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2( 0.5, 0.5)) * pt), 0).rgb);
	float g = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2( 1.5, 0.5)) * pt), 0).rgb);
	float h = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2( 2.5, 0.5)) * pt), 0).rgb);
	float i = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2(-0.5, 1.5)) * pt), 0).rgb);
	float j = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2( 0.5, 1.5)) * pt), 0).rgb);
	float k = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2( 1.5, 1.5)) * pt), 0).rgb);
	float l = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2( 2.5, 1.5)) * pt), 0).rgb);
	float n = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2(0.5, 2.5) ) * pt), 0).rgb);
	float o = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2(1.5, 2.5) ) * pt), 0).rgb);
	float4 bczzL = float4(b, c, 0.0, 0.0);
	float4 ijfeL = float4(i, j, f, e);
	float4 klhgL = float4(k, l, h, g);
	float4 zzonL = float4(0.0, 0.0, o, n);
	float bL = bczzL.x;
	float cL = bczzL.y;
	float iL = ijfeL.x;
	float jL = ijfeL.y;
	float fL = ijfeL.z;
	float eL = ijfeL.w;
	float kL = klhgL.x;
	float lL = klhgL.y;
	float hL = klhgL.z;
	float gL = klhgL.w;
	float oL = zzonL.z;
	float nL = zzonL.w;
	float2 dir = float2(0.0, 0.0);
	float len = 0.0;
	set(dir, len, pp, true, false, false, false, bL, eL, fL, gL, jL);
	set(dir, len, pp, false, true, false, false, cL, fL, gL, hL, kL);
	set(dir, len, pp, false, false, true, false, fL, iL, jL, kL, nL);
	set(dir, len, pp, false, false, false, true, gL, jL, kL, lL, oL);
	float2 dir2 = dir * dir;
	float dirR = dir2.x + dir2.y;
	bool zro = dirR < float(1.0 / 32768.0);
	dirR = APrxLoRsqF1(dirR);
	dirR = zro ? 1.0 : dirR;
	dir.x = zro ? 1.0 : dir.x;
	dir *= float2(dirR, dirR);
	len = len * 0.5;
	len *= len;
	float stretch = (dir.x * dir.x + dir.y * dir.y) * APrxLoRcpF1(max(abs(dir.x), abs(dir.y)));
	float2 len2 = float2(1.0 + (stretch - 1.0) * len, 1.0 + -0.5 * len);
	float lob = 0.5 + float((1.0 / 4.0 - 0.04) - 0.5) * len;
	float clp = APrxLoRcpF1(lob);
	float aC = 0.0;
	float aW = 0.0;
	tap(aC, aW, float2( 0.0,-1.0) - pp, dir, len2, lob, clp, bL);
	tap(aC, aW, float2( 1.0,-1.0) - pp, dir, len2, lob, clp, cL);
	tap(aC, aW, float2(-1.0, 1.0) - pp, dir, len2, lob, clp, iL);
	tap(aC, aW, float2( 0.0, 1.0) - pp, dir, len2, lob, clp, jL);
	tap(aC, aW, float2( 0.0, 0.0) - pp, dir, len2, lob, clp, fL);
	tap(aC, aW, float2(-1.0, 0.0) - pp, dir, len2, lob, clp, eL);
	tap(aC, aW, float2( 1.0, 1.0) - pp, dir, len2, lob, clp, kL);
	tap(aC, aW, float2( 2.0, 1.0) - pp, dir, len2, lob, clp, lL);
	tap(aC, aW, float2( 2.0, 0.0) - pp, dir, len2, lob, clp, hL);
	tap(aC, aW, float2( 1.0, 0.0) - pp, dir, len2, lob, clp, gL);
	tap(aC, aW, float2( 1.0, 2.0) - pp, dir, len2, lob, clp, oL);
	tap(aC, aW, float2( 0.0, 2.0) - pp, dir, len2, lob, clp, nL);
	pix.r = aC / aW;
	float min1 = min(AMin3F1(fL, gL, jL), kL);
	float max1 = max(AMax3F1(fL, gL, jL), kL);
	pix.r = clamp(pix.r, min1, max1);
	pix.r = clamp(pix.r, 0.0, 1.0);
	return pix;
}

//!PASS 2
//!DESC CuNNy-8x4C-EASU-NVL-DS-in
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) (dot(float3(6.268e-01, 1.145e+00, 2.682e-01), O(INPUT, float2(x, y)).rgb) + -1.507e+00)
float4 f0(float2 pt, float2 pos, min16float s0_0, min16float s0_1, min16float s0_2, min16float s0_3, min16float s0_4, min16float s0_5, min16float s0_6, min16float s0_7, min16float s0_8) {
	V4 r = 0.0;
	r += V4(1.088e-02, 5.659e-02, -3.613e-02, 1.202e-01) * s0_0;
	r += V4(4.993e-03, 1.570e-01, 2.442e-02, 1.159e-01) * s0_1;
	r += V4(-3.493e-03, -1.389e-01, 1.685e-03, -3.246e-02) * s0_2;
	r += V4(-4.181e-03, -8.253e-02, -1.421e-02, 1.979e-01) * s0_3;
	r += V4(-5.822e-03, 2.597e-01, 3.491e-01, -6.107e-01) * s0_4;
	r += V4(4.659e-03, 2.464e-01, 1.789e-01, 3.022e-02) * s0_5;
	r += V4(-2.783e-01, -2.163e-01, 7.121e-04, 4.950e-03) * s0_6;
	r += V4(2.770e-03, -2.788e-01, -4.330e-02, 1.070e-01) * s0_7;
	r += V4(1.075e-02, 3.285e-03, -4.546e-01, -1.653e-03) * s0_8;
	r += V4(1.255e-01, 1.696e-02, 2.269e-02, -1.038e-01);
	return r;
}
void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float s0_0 = l0(-1.0, -1.0);
	min16float s0_1 = l0(0.0, -1.0);
	min16float s0_2 = l0(1.0, -1.0);
	min16float s0_3 = l0(-1.0, 0.0);
	min16float s0_4 = l0(0.0, 0.0);
	min16float s0_5 = l0(1.0, 0.0);
	min16float s0_6 = l0(-1.0, 1.0);
	min16float s0_7 = l0(0.0, 1.0);
	min16float s0_8 = l0(1.0, 1.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8);
}
//!PASS 3
//!DESC CuNNy-8x4C-EASU-NVL-DS-conv1
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(2.697e-01, 6.120e-02, -1.471e-01, 1.880e-01, 2.278e-02, 1.039e-02, 1.652e-02, 7.195e-02, -2.839e-01, -1.228e-01, 6.238e-02, 5.653e-02, -1.150e-01, 4.395e-02, -1.049e-01, -1.559e-01));
	r += mul(s0_1, M4(-1.979e-01, -2.025e-01, -5.969e-02, -1.379e-01, 1.388e-01, -2.083e-01, -2.861e-01, -7.886e-02, 2.466e-01, 2.385e-01, -2.177e-01, -1.494e-01, 1.041e-01, 1.390e-01, 4.534e-02, 5.347e-02));
	r += mul(s0_2, M4(-4.358e-02, -1.892e-01, 1.183e-01, -1.455e-01, -1.020e-01, -6.376e-03, -1.992e-02, -3.249e-02, -1.401e-01, -7.412e-02, 3.166e-02, 1.748e-03, -2.757e-02, -4.131e-02, 1.691e-01, 1.273e-01));
	r += mul(s0_3, M4(-1.381e-02, 1.411e-01, 1.810e-02, 1.346e-01, -6.193e-02, -3.317e-01, 1.663e-02, -3.041e-02, -1.364e-01, -2.475e-01, 1.491e-01, -3.042e-01, 1.352e-01, -1.327e-02, 2.704e-02, 2.183e-01));
	r += mul(s0_4, M4(3.308e-01, 1.707e-01, 1.236e-01, 8.975e-02, 5.822e-01, -1.582e-01, -1.626e-01, -2.760e-02, 4.795e-01, 3.300e-01, 3.400e-01, -1.623e-01, -2.687e-01, -7.049e-01, -2.457e-01, -3.224e-02));
	r += mul(s0_5, M4(-4.898e-03, -2.071e-02, -2.298e-01, 1.969e-01, -1.640e-02, -1.598e-01, -2.213e-01, 6.161e-02, -4.723e-02, 1.145e-01, -3.129e-02, 3.456e-02, -7.700e-02, 9.138e-02, 4.982e-01, -1.927e-01));
	r += mul(s0_6, M4(3.307e-03, 1.474e-01, -3.208e-02, -8.634e-02, -1.165e-01, -4.796e-02, 3.995e-02, -6.596e-03, -9.839e-02, 3.544e-02, -9.914e-02, -1.810e-01, 5.200e-02, 1.723e-01, -6.232e-02, -1.198e-02));
	r += mul(s0_7, M4(-2.618e-01, -2.216e-01, 1.453e-02, 1.132e-01, 3.985e-01, 1.116e-01, 1.451e-04, 7.529e-02, 4.153e-02, -9.533e-02, 1.333e-01, 5.928e-02, 6.999e-01, 1.607e-01, 9.484e-03, -5.423e-02));
	r += mul(s0_8, M4(-7.385e-02, 9.715e-02, 1.369e-01, -2.487e-01, -3.611e-02, 4.653e-02, -8.396e-02, 1.066e-01, -5.526e-02, -1.161e-02, -3.169e-03, -4.432e-02, -2.424e-02, -2.450e-04, -5.367e-02, -3.436e-01));
	r += mul(s1_0, M4(6.146e-01, -6.415e-02, -3.561e-01, 7.475e-01, -5.359e-02, 4.072e-01, -5.042e-02, -5.881e-02, -2.510e-01, -6.936e-01, 1.697e-01, -6.483e-02, -1.809e-01, -6.070e-02, -5.516e-02, -1.402e-01));
	r += mul(s1_1, M4(1.257e+00, -6.527e-01, 3.018e-01, 1.548e+00, 1.534e-02, 7.106e-02, -1.743e-01, -3.152e-01, 1.545e-01, -9.304e-02, -3.244e-01, 2.083e-01, 1.280e-01, -2.981e-02, 1.435e-01, 2.085e-01));
	r += mul(s1_2, M4(-1.279e-01, -7.657e-01, -1.589e+00, 1.658e+00, -8.998e-03, 9.369e-02, -9.226e-02, -1.043e-01, -4.210e-02, -8.604e-02, -1.140e-01, -8.618e-02, -1.545e-02, -1.375e-01, 1.028e-01, 7.941e-02));
	r += mul(s1_3, M4(2.226e-01, 1.448e+00, -1.898e-02, 2.150e-01, 4.375e-02, -1.194e-01, -1.381e-02, -1.114e-01, -5.235e-01, -6.057e-01, 2.152e-01, -9.949e-03, 1.665e-01, 2.322e-01, 3.255e-03, 2.510e-01));
	r += mul(s1_4, M4(1.344e+00, -1.169e+00, 2.434e-01, -4.649e-01, 7.288e-02, 9.594e-02, -1.091e-01, -2.508e-01, 3.843e-01, 2.251e-01, 2.588e-01, 2.030e-02, -1.665e-01, -1.867e-01, -6.721e-01, 6.591e-02));
	r += mul(s1_5, M4(6.808e-01, -1.380e+00, 2.084e-01, -1.225e+00, -2.737e-02, 6.568e-02, -2.685e-01, 1.637e-01, 4.340e-02, 9.145e-02, -5.652e-02, 1.042e-01, -5.093e-02, 3.929e-02, 7.032e-01, -3.073e-01));
	r += mul(s1_6, M4(4.347e-01, 7.472e-01, 2.511e-02, -7.780e-02, -9.053e-02, 9.711e-03, 1.426e-02, -5.764e-02, 9.387e-02, -3.276e-02, -7.631e-02, 9.019e-02, -7.232e-03, -1.312e-01, -3.769e-02, -8.642e-03));
	r += mul(s1_7, M4(5.612e-01, -7.421e-01, -9.784e-02, -2.729e-01, 5.096e-01, 1.688e-01, -3.985e-02, 5.560e-03, 1.042e-01, -1.704e-01, 8.468e-02, -6.727e-02, 4.835e-01, 2.946e-01, 4.284e-02, -3.034e-01));
	r += mul(s1_8, M4(-2.308e-01, -4.966e-01, 3.406e-01, -1.374e-01, -2.540e-01, 1.699e-01, -7.910e-02, -2.309e-02, 9.660e-03, -4.932e-02, 4.534e-03, 5.891e-02, -1.335e-01, -6.109e-03, 2.389e-02, -2.995e-01));
	r += V4(-1.355e-02, 1.537e-02, 3.894e-02, -3.399e-02);
	return r;
}
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 4
//!DESC CuNNy-8x4C-EASU-NVL-DS-conv2
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-6.800e-02, -3.236e-01, 3.849e-02, 2.992e-01, -1.195e-02, 2.359e-01, 2.272e-03, -4.554e-02, -6.272e-03, -3.270e-01, 2.161e-01, -4.927e-02, -7.257e-02, 1.878e-01, -1.421e-01, 1.395e-01));
	r += mul(s0_1, M4(2.569e-01, -6.584e-02, -1.617e-01, -1.603e-01, -1.316e-01, 2.406e-02, 9.351e-02, 2.247e-01, 1.694e-01, -2.259e-02, -3.038e-01, -2.086e-01, -2.296e-02, 1.571e-01, 5.565e-01, 2.423e-01));
	r += mul(s0_2, M4(2.202e-01, 7.987e-02, -1.135e-02, -9.705e-02, -5.239e-02, -2.611e-02, -9.775e-02, 1.641e-02, 7.864e-03, -1.765e-02, -5.525e-02, 8.339e-03, -1.235e-01, 3.229e-02, 3.871e-02, 5.816e-02));
	r += mul(s0_3, M4(-1.315e-02, 1.544e-01, -1.180e-02, 1.182e-01, 1.818e-02, -1.233e-01, -2.255e-02, -1.041e-01, 1.241e-01, -4.875e-01, -3.777e-02, -3.851e-01, 9.663e-03, 3.288e-01, 1.074e-01, 4.871e-01));
	r += mul(s0_4, M4(9.298e-02, -2.456e-02, 1.632e-01, -1.517e-01, -3.767e-01, 2.946e-01, -8.395e-02, 5.649e-01, -4.093e-01, -1.348e-02, 6.631e-01, -1.098e-02, -5.403e-02, 1.174e-01, -2.658e-02, 5.382e-02));
	r += mul(s0_5, M4(1.382e-01, -1.449e-02, 4.824e-02, -2.072e-02, 1.578e-01, 2.398e-01, 7.451e-02, -4.004e-02, -5.289e-02, -4.230e-02, 1.812e-01, 4.698e-02, -1.213e-01, 2.471e-03, 1.268e-02, 8.702e-02));
	r += mul(s0_6, M4(7.212e-02, -2.540e-02, -3.402e-03, -2.270e-02, 6.489e-03, -8.431e-02, -1.631e-02, -6.045e-02, 3.497e-01, 1.229e-01, -4.301e-02, 9.712e-02, -2.050e-02, -1.092e-01, -2.333e-04, -1.695e-01));
	r += mul(s0_7, M4(-6.744e-03, -5.233e-02, 2.573e-02, 1.370e-01, 1.468e-01, 1.559e-01, -1.842e-02, 2.956e-01, 2.467e-01, 1.008e-01, -5.623e-03, 2.803e-01, 1.978e-01, 1.189e-02, 2.090e-02, -7.608e-02));
	r += mul(s0_8, M4(1.508e-01, 6.567e-02, 2.145e-02, 1.557e-02, -1.538e-01, 5.645e-02, 4.578e-02, 1.749e-01, -4.655e-02, 6.984e-03, -7.359e-02, 2.351e-02, 1.297e-02, -1.122e-02, -4.727e-02, -5.802e-02));
	r += mul(s1_0, M4(2.602e-03, -2.437e-01, 4.908e-02, 1.100e-01, 1.266e-02, 1.166e-01, -3.110e-02, -1.303e-01, 5.079e-02, -3.025e-01, -7.795e-02, -1.265e-01, 2.010e-01, 5.379e-02, 9.362e-02, 7.130e-02));
	r += mul(s1_1, M4(2.135e-02, 2.980e-01, -7.167e-01, -5.870e-01, -8.292e-02, 1.192e-02, 9.550e-02, 2.058e-01, 1.976e-01, 2.348e-01, -3.739e-01, -2.038e-01, 1.186e-01, 1.255e-01, 4.283e-01, 3.913e-02));
	r += mul(s1_2, M4(3.823e-02, 2.238e-01, -4.514e-02, 1.158e-01, -4.105e-02, -1.477e-01, 9.485e-02, -1.954e-02, -2.363e-02, -1.041e-02, 3.003e-04, 3.179e-02, -9.007e-02, -9.468e-02, 1.407e-01, 1.371e-01));
	r += mul(s1_3, M4(-6.621e-02, 2.537e-03, -6.536e-02, -3.267e-03, 5.470e-02, -1.447e-01, 2.277e-02, -9.895e-02, 3.511e-02, -3.514e-01, 8.116e-02, 2.176e-01, 6.358e-02, 1.981e-01, 1.674e-01, 2.164e-01));
	r += mul(s1_4, M4(-2.423e-02, 5.984e-02, 2.901e-01, -1.682e-01, -4.406e-01, 2.691e-01, 1.286e-01, -2.535e-01, -2.351e-01, -2.368e-01, 5.840e-01, -2.027e-02, 1.140e-01, 1.368e-02, 2.050e-01, 4.817e-02));
	r += mul(s1_5, M4(-1.723e-01, 2.087e-02, -1.644e-01, 1.850e-01, -1.967e-03, 2.473e-01, -3.998e-02, -1.337e-01, 3.690e-02, -7.745e-04, 8.793e-02, -1.379e-02, 1.047e-01, 5.140e-02, 1.560e-01, 1.696e-01));
	r += mul(s1_6, M4(3.604e-02, 3.833e-02, 4.657e-03, 1.911e-01, 1.793e-02, 2.498e-02, 2.313e-02, 8.517e-02, 1.533e-01, 3.341e-01, 4.845e-02, 7.008e-01, 6.058e-02, -7.725e-02, 2.238e-02, 1.307e-01));
	r += mul(s1_7, M4(-9.260e-03, -1.959e-02, 4.584e-02, -8.099e-02, 2.124e-01, 1.144e-01, -6.718e-02, -1.710e-01, 1.071e-01, 2.616e-01, 2.298e-02, 4.676e-01, 3.787e-01, 2.108e-01, 1.512e-01, -6.834e-03));
	r += mul(s1_8, M4(1.919e-01, -1.234e-02, 7.054e-02, -1.228e-01, -4.736e-02, -3.117e-02, -4.153e-02, 1.708e-01, -5.603e-02, -1.407e-02, -6.846e-02, 5.878e-02, 3.141e-02, 5.317e-02, 1.301e-02, 1.200e-01));
	r += V4(-4.890e-03, -9.125e-03, -1.240e-02, -7.994e-03);
	return r;
}
void Pass4(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 5
//!DESC CuNNy-8x4C-EASU-NVL-DS-conv3
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(1.512e-02, -8.112e-02, 4.891e-02, 1.769e-01, 8.715e-02, -2.846e-02, 8.888e-02, -1.226e-01, 1.343e-01, 6.389e-02, 1.199e-01, 1.367e-01, -1.783e-03, 1.660e-02, 3.703e-02, 1.006e-01));
	r += mul(s0_1, M4(1.044e-01, -1.736e-01, 7.400e-02, 2.041e-02, -1.874e-02, -1.006e-01, -6.674e-02, 9.573e-02, -1.231e-02, -7.018e-02, -1.372e-01, -1.655e-02, -1.603e-01, -5.875e-02, -1.417e-01, -1.783e-01));
	r += mul(s0_2, M4(7.592e-02, 5.624e-02, 4.638e-02, 3.066e-02, -8.797e-02, 7.476e-03, 4.372e-02, 1.838e-02, -1.048e-01, 2.608e-03, 3.160e-02, 4.656e-02, 2.984e-02, 2.833e-02, 1.212e-01, 1.062e-02));
	r += mul(s0_3, M4(5.530e-02, -5.125e-02, 9.545e-02, 1.394e-01, -1.823e-02, -7.522e-02, 7.469e-02, 2.209e-01, 7.935e-02, 1.109e-01, 2.996e-01, -5.860e-02, -3.958e-03, -4.562e-03, -3.304e-02, 3.695e-02));
	r += mul(s0_4, M4(1.288e-02, 2.413e-01, 7.022e-03, -5.239e-01, 1.623e-01, -3.979e-01, 3.315e-01, 3.110e-01, -7.320e-01, -3.164e-01, -2.717e-01, 1.842e-01, -3.971e-02, 8.125e-04, -2.007e-01, -5.473e-01));
	r += mul(s0_5, M4(4.282e-03, -2.483e-03, -1.587e-01, 1.351e-02, 5.462e-02, 2.976e-01, 8.814e-02, -1.589e-01, 6.704e-03, -7.089e-02, 4.834e-01, -7.854e-02, 7.471e-02, -7.086e-02, 3.280e-02, -4.350e-02));
	r += mul(s0_6, M4(8.920e-02, -3.724e-03, -8.516e-02, 1.263e-01, 1.483e-02, 1.037e-02, -1.818e-03, 4.973e-02, -4.292e-02, -1.017e-01, 1.764e-01, 5.918e-01, -2.211e-02, -2.192e-02, -2.636e-02, -1.220e-01));
	r += mul(s0_7, M4(-5.921e-02, -3.326e-02, 2.768e-01, 7.643e-03, -1.213e-01, -2.222e-01, 1.402e-01, 3.422e-03, 7.157e-02, 3.263e-02, -2.588e-01, 2.334e-01, 1.568e-02, 7.932e-02, 5.848e-02, -3.371e-01));
	r += mul(s0_8, M4(7.262e-02, -6.524e-02, -2.920e-01, 2.206e-01, -3.183e-03, -1.160e-01, -3.467e-01, -1.248e-02, 9.838e-02, 4.117e-02, 1.585e-01, -3.031e-02, -5.879e-02, 6.229e-02, 1.382e-02, -1.323e-01));
	r += mul(s1_0, M4(-2.217e-02, -1.741e-02, 1.954e-01, 2.371e-01, 3.143e-02, 3.243e-02, -2.793e-02, -1.448e-01, -1.218e-02, 2.752e-02, 3.598e-02, -3.591e-02, -1.467e-02, 1.783e-02, 1.160e-01, 2.777e-02));
	r += mul(s1_1, M4(-2.464e-01, 3.015e-02, 3.383e-02, 6.343e-02, -1.614e-01, -1.685e-01, -1.542e-01, 1.607e-02, 1.836e-01, -1.223e-01, -3.064e-02, 2.039e-02, -7.585e-02, 1.303e-01, -2.573e-02, 1.075e-01));
	r += mul(s1_2, M4(-9.792e-03, 1.296e-02, 3.894e-02, -3.726e-02, -1.450e-01, 2.966e-02, 2.107e-01, 3.020e-02, 1.156e-02, 7.311e-04, 8.132e-02, 8.862e-02, -1.544e-01, 6.924e-02, -1.735e-01, -6.532e-02));
	r += mul(s1_3, M4(1.424e-01, -6.914e-01, 2.690e-01, 3.976e-01, -5.510e-02, 2.758e-02, 2.399e-02, 1.704e-01, 1.471e-01, 3.915e-01, -1.218e-01, -2.982e-01, -2.348e-03, -3.721e-02, -1.482e-01, 1.976e-01));
	r += mul(s1_4, M4(6.305e-01, 2.824e-01, -1.365e-01, 3.181e-01, -8.072e-03, -5.327e-01, 6.419e-02, 7.269e-02, -7.281e-01, -2.802e-01, -2.397e-01, -8.493e-02, -8.797e-05, -3.801e-02, -3.934e-01, -4.335e-02));
	r += mul(s1_5, M4(9.541e-02, -1.242e-01, -1.905e-01, 3.308e-01, 1.070e-01, 1.245e-01, 8.075e-02, 1.509e-02, 3.683e-02, 2.231e-03, 4.474e-01, 8.944e-02, 8.025e-02, -1.922e-01, -7.273e-01, 3.096e-01));
	r += mul(s1_6, M4(9.443e-02, 7.417e-02, 1.278e-01, 1.767e-01, 7.717e-02, -8.107e-02, 8.278e-02, 1.334e-01, 1.625e-01, -5.591e-03, 5.773e-02, 2.496e-02, -2.064e-02, 7.495e-02, 8.197e-02, -4.299e-02));
	r += mul(s1_7, M4(-2.643e-02, 9.195e-03, 2.381e-01, 2.166e-01, 7.526e-02, -2.262e-01, 1.547e-01, 1.361e-01, -2.475e-01, 2.920e-01, -4.110e-02, -5.496e-01, -4.738e-02, 1.508e-01, 9.450e-03, 3.334e-02));
	r += mul(s1_8, M4(-5.684e-02, 8.782e-04, -1.853e-02, 1.532e-01, -8.803e-03, -5.050e-03, -1.079e-01, 6.720e-02, -1.370e-02, 6.274e-03, 1.477e-01, -3.465e-02, -7.802e-02, 9.548e-02, -1.304e-01, -6.258e-02));
	r += V4(4.269e-03, -3.900e-03, 1.618e-03, 9.539e-03);
	return r;
}
void Pass5(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 6
//!DESC CuNNy-8x4C-EASU-NVL-DS-conv4
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-1.369e-02, 5.815e-02, -3.693e-02, 7.952e-02, -3.756e-02, -2.191e-02, 7.347e-03, 4.165e-02, 4.836e-02, -2.909e-03, 5.774e-02, -6.165e-02, 9.006e-02, -1.949e-01, 7.483e-02, 3.409e-01));
	r += mul(s0_1, M4(2.530e-02, 9.410e-03, -5.225e-02, -2.516e-02, 9.146e-02, -4.817e-02, 5.636e-02, -2.352e-02, 2.875e-02, -1.919e-01, 4.043e-01, 2.653e-01, 1.899e-01, -3.715e-01, 1.805e-01, -1.515e-01));
	r += mul(s0_2, M4(-1.306e-02, -8.883e-02, 3.240e-02, 5.866e-02, 2.362e-01, -4.731e-02, 1.589e-01, -7.648e-02, 7.103e-02, -5.287e-02, 9.496e-02, 2.836e-02, 1.738e-01, -2.666e-01, 2.485e-01, -8.838e-02));
	r += mul(s0_3, M4(-1.474e-01, 8.016e-02, -7.808e-02, 1.073e-01, -5.484e-02, -5.002e-02, 4.729e-02, 7.300e-02, -4.429e-03, -4.920e-02, 5.751e-02, 3.683e-02, -2.142e-01, -1.123e-02, 5.858e-02, 4.427e-01));
	r += mul(s0_4, M4(-2.508e-01, 4.598e-02, -7.409e-01, 2.425e-02, -2.449e-01, -3.969e-02, -2.706e-01, -3.029e-02, 6.674e-02, -2.888e-01, 9.157e-02, -1.833e-01, 1.290e-01, -3.760e-01, -3.017e-01, -5.591e-01));
	r += mul(s0_5, M4(2.513e-01, 6.672e-02, -4.543e-02, -1.257e-01, 2.081e-01, 8.317e-02, -4.061e-02, -2.718e-01, 8.849e-03, -1.442e-01, -2.716e-02, -7.176e-02, 8.021e-02, -3.594e-01, 2.638e-01, -8.181e-02));
	r += mul(s0_6, M4(3.497e-01, -1.906e-01, -2.734e-01, 1.861e-01, -2.618e-02, -4.836e-02, 2.300e-02, 8.691e-02, -1.100e-04, 3.535e-02, 1.186e-01, 8.155e-03, 4.694e-02, -3.206e-02, 1.056e-01, -3.241e-02));
	r += mul(s0_7, M4(-5.976e-01, -2.127e-01, -3.428e-01, -1.246e-01, -1.869e-02, -1.817e-01, -3.556e-01, -1.412e-01, 3.415e-02, -7.705e-03, 6.668e-02, 1.319e-02, 7.872e-02, 2.639e-01, 1.830e-01, 2.903e-02));
	r += mul(s0_8, M4(1.886e-01, -3.688e-01, 1.320e-01, 4.826e-02, 8.946e-02, -7.927e-02, -3.112e-02, -7.755e-02, -4.526e-02, 1.276e-02, 7.250e-02, -2.150e-03, 4.962e-01, -1.062e-01, 1.851e-01, 7.373e-02));
	r += mul(s1_0, M4(-3.616e-02, 3.607e-02, -4.077e-02, -4.799e-02, 5.277e-02, 5.720e-04, 4.131e-02, -2.712e-02, 2.147e-01, -9.302e-02, -2.110e-01, -2.054e-01, -5.489e-02, 2.186e-02, 3.357e-02, 7.051e-02));
	r += mul(s1_1, M4(-2.229e-02, 1.121e-01, -3.485e-03, -9.738e-02, 1.538e-01, -1.675e-01, -1.080e-01, -1.353e-01, 4.768e-03, -1.060e-02, 1.477e-01, 1.905e-01, 8.090e-02, 1.641e-02, -3.940e-02, 8.049e-02));
	r += mul(s1_2, M4(-1.203e-02, -1.223e-01, 1.466e-01, 4.904e-02, 3.152e-01, -2.045e-02, 1.386e-01, 2.956e-02, -6.150e-02, 1.217e-01, -1.141e-01, 5.505e-02, 5.948e-02, -1.724e-01, -3.005e-02, -3.116e-02));
	r += mul(s1_3, M4(-1.033e-01, 1.049e-01, 2.300e-01, -2.319e-01, 2.121e-03, 3.629e-03, -5.913e-02, -1.302e-01, 3.525e-01, -2.042e-01, -3.312e-01, -6.633e-03, -7.400e-02, -2.662e-02, 3.412e-02, 8.438e-02));
	r += mul(s1_4, M4(-2.203e-01, 2.124e-01, -2.459e-01, 1.764e-01, -2.407e-01, 1.065e-01, 2.091e-01, 7.689e-01, 1.739e-01, -6.712e-02, -1.860e-01, -1.586e-01, 1.428e-01, -1.997e-01, -1.955e-01, -2.698e-01));
	r += mul(s1_5, M4(1.912e-01, 4.034e-03, 6.454e-02, -4.977e-02, 5.806e-02, 2.260e-01, 3.899e-01, 3.793e-01, -7.159e-02, 1.878e-01, -1.773e-01, 2.244e-02, -8.333e-02, -3.352e-01, -6.593e-02, 1.211e-02));
	r += mul(s1_6, M4(2.222e-01, -1.441e-01, -2.748e-01, -2.045e-01, 7.998e-02, -2.860e-02, 1.005e-01, 6.813e-03, 2.896e-01, -6.371e-02, -1.532e-01, -1.108e-01, -5.529e-02, -1.004e-02, 4.130e-02, -3.752e-02));
	r += mul(s1_7, M4(-8.037e-01, 1.957e-02, 4.560e-01, 2.446e-01, 4.232e-01, -1.640e-01, 2.680e-02, 8.857e-02, 3.121e-01, -8.655e-02, -2.163e-02, 4.723e-02, -2.027e-01, 1.067e-01, -8.951e-02, -1.549e-02));
	r += mul(s1_8, M4(-2.434e-01, -1.314e-01, 5.953e-02, 6.887e-02, 2.469e-01, 1.008e-01, 3.165e-01, 2.126e-01, -8.971e-02, 7.156e-02, -7.070e-03, 6.048e-02, 5.367e-02, -7.986e-02, -7.838e-03, -1.156e-02));
	r += V4(-1.364e-02, 7.075e-03, -5.284e-03, 1.176e-02);
	return r;
}
void Pass6(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 7
//!DESC CuNNy-8x4C-EASU-NVL-DS-conv5
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(4.171e-01, -2.870e-02, -1.753e-01, 2.754e-01, -1.199e-01, -1.824e-01, 1.157e-01, 3.037e-01, 2.945e-01, -4.651e-02, -4.355e-02, 5.961e-01, -9.132e-02, 4.980e-02, -7.978e-02, 5.150e-03));
	r += mul(s0_1, M4(4.188e-01, -3.513e-01, 1.366e-01, 2.551e-01, 8.299e-02, -2.680e-01, 1.601e-01, -4.060e-02, -2.093e-01, -7.296e-03, 3.026e-02, -3.363e-01, -1.401e-01, 1.754e-01, -8.115e-02, -1.027e-02));
	r += mul(s0_2, M4(-3.046e-02, 1.212e-02, -1.740e-01, -9.584e-03, 2.824e-02, -3.499e-02, 1.554e-01, 4.195e-02, 1.363e-02, -2.300e-01, 8.552e-02, 9.734e-02, -7.638e-02, 1.562e-01, 2.787e-02, -1.499e-01));
	r += mul(s0_3, M4(-1.441e-01, -3.246e-02, 3.737e-01, 3.298e-02, -7.020e-01, 2.944e-01, -1.044e+00, 2.229e-01, 2.389e-01, -2.680e-01, 2.332e-01, 6.820e-01, 3.529e-02, 7.913e-02, -3.078e-02, 1.760e-01));
	r += mul(s0_4, M4(3.428e-01, -8.196e-02, 3.545e-01, -5.212e-02, 3.041e-02, 4.884e-03, -2.610e-01, -1.861e-01, 4.511e-01, 4.135e-01, -6.344e-01, -3.636e-01, -4.067e-01, 4.982e-01, -2.094e-01, 8.807e-01));
	r += mul(s0_5, M4(2.421e-02, -1.335e-02, 3.154e-01, -8.613e-02, -2.623e-02, -6.417e-02, -1.077e-01, 1.268e-01, -7.932e-02, 2.625e-01, -2.414e-03, -4.864e-02, -2.065e-01, -1.103e-01, -4.054e-01, -1.412e-02));
	r += mul(s0_6, M4(7.950e-02, -1.894e-01, 1.094e-01, 2.509e-01, -4.804e-02, 2.322e-01, -2.228e-01, -2.920e-01, -2.376e-02, -2.552e-01, 9.011e-02, 1.284e-01, -8.035e-03, 1.341e-01, -5.984e-02, -2.332e-02));
	r += mul(s0_7, M4(-3.089e-02, -2.697e-01, 2.107e-01, 1.259e-01, 3.529e-02, 5.418e-02, -6.459e-02, 3.422e-02, 8.550e-02, 5.184e-01, -3.498e-01, -1.755e-01, -1.231e-01, 1.172e-02, -2.203e-01, -2.564e-01));
	r += mul(s0_8, M4(-1.583e-02, 2.896e-02, -5.717e-02, 4.756e-02, -5.773e-02, -4.300e-02, 5.405e-02, -4.683e-02, 2.278e-01, -6.659e-02, 1.909e-01, 7.056e-02, -1.574e-02, 3.392e-01, -3.570e-02, -3.160e-01));
	r += mul(s1_0, M4(-7.152e-02, -2.634e-01, 9.869e-02, -1.004e-01, -1.979e-02, -2.592e-01, 1.049e-01, 8.668e-02, 8.576e-02, 1.610e-01, -1.419e-02, 2.102e-02, -6.566e-02, 1.106e-03, -3.653e-02, 1.504e-01));
	r += mul(s1_1, M4(2.370e-01, -5.508e-02, 6.024e-03, 2.478e-01, 8.610e-02, -1.273e-01, -2.096e-01, 2.380e-02, 7.299e-02, -1.157e-01, 2.948e-02, 7.555e-02, -1.936e-02, 1.725e-02, 2.037e-02, -9.211e-02));
	r += mul(s1_2, M4(-1.771e-02, 1.445e-02, -8.979e-02, 6.412e-02, -2.254e-02, -1.786e-02, -3.520e-04, 1.800e-02, -2.932e-02, 1.557e-01, 4.965e-02, 2.596e-02, 1.358e-02, -3.515e-02, 8.444e-02, -3.649e-02));
	r += mul(s1_3, M4(-2.135e-01, 1.145e-01, -1.800e-01, 1.753e-01, -2.486e-01, 3.939e-01, -4.414e-01, 8.857e-02, 4.552e-02, -1.219e-01, 2.387e-01, 3.200e-01, 1.589e-02, 4.620e-02, -3.060e-02, 2.537e-01));
	r += mul(s1_4, M4(1.219e-01, 3.917e-02, -1.817e-01, 1.931e-01, 1.270e-01, 1.638e-01, -2.410e-01, -3.268e-01, 2.594e-01, 2.152e-01, 3.416e-01, -3.894e-01, -1.609e-01, 3.882e-01, -3.514e-01, 5.022e-01));
	r += mul(s1_5, M4(-1.642e-02, 5.382e-02, 2.274e-01, -7.155e-04, -8.227e-02, -8.894e-03, -4.089e-02, -5.468e-03, 4.916e-02, 2.454e-01, 3.408e-01, -5.936e-02, 2.301e-01, -4.797e-01, 2.182e-01, -3.627e-02));
	r += mul(s1_6, M4(-6.154e-02, -1.451e-01, -5.612e-03, 4.267e-03, 3.950e-02, -1.621e-02, -2.590e-02, -5.736e-02, 1.339e-03, 8.341e-02, 3.104e-02, 5.489e-02, -9.986e-03, 5.431e-02, -1.234e-01, 4.821e-02));
	r += mul(s1_7, M4(-4.177e-02, -7.647e-02, -7.932e-02, 3.121e-02, -4.061e-02, 4.734e-02, -1.157e-01, -2.232e-02, 2.605e-02, 2.982e-02, 1.958e-01, -1.777e-03, 5.894e-02, -7.760e-02, -3.506e-02, -1.640e-01));
	r += mul(s1_8, M4(-6.064e-02, -5.921e-02, 9.567e-02, 3.315e-03, -3.469e-02, 2.876e-02, -1.434e-02, -4.607e-02, 1.077e-01, -1.358e-01, 1.506e-01, 1.057e-01, 4.512e-02, -2.747e-02, -4.984e-02, -9.691e-02));
	r += V4(6.636e-03, -3.746e-03, 1.368e-02, 1.010e-02);
	return r;
}
void Pass7(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 8
//!DESC CuNNy-8x4C-EASU-NVL-DS-conv6
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(3.935e-02, 8.072e-02, 1.063e-01, -1.028e-01, 2.865e-02, -8.817e-03, 4.448e-03, -8.196e-02, -1.624e-01, 5.556e-02, 8.262e-02, 7.093e-02, -8.134e-03, -7.320e-02, 5.225e-03, 1.396e-01));
	r += mul(s0_1, M4(4.586e-02, -1.578e-02, 1.881e-03, -9.063e-02, 3.465e-02, -1.480e-02, 1.516e-01, -1.190e-01, -1.829e-02, -2.340e-02, 2.208e-01, 4.489e-01, -5.254e-02, 7.907e-03, 3.758e-02, 1.970e-01));
	r += mul(s0_2, M4(1.586e-02, -4.699e-02, -1.170e-01, -9.195e-02, -7.806e-02, -7.085e-04, -1.963e-01, -1.238e-01, 2.736e-02, 9.304e-04, 2.173e-01, -2.536e-02, 5.893e-04, -3.877e-02, -8.862e-02, 1.982e-01));
	r += mul(s0_3, M4(-9.597e-02, -2.184e-01, 1.503e-01, 8.102e-02, -8.145e-02, 6.023e-02, -1.499e-01, -3.174e-01, 1.883e-01, -5.762e-01, 2.303e-01, -3.768e-01, 1.506e-01, 1.698e-01, -8.519e-02, -3.551e-01));
	r += mul(s0_4, M4(2.385e-02, -1.696e-01, -6.469e-01, -6.074e-01, 9.507e-03, -5.845e-02, 8.287e-02, -1.012e+00, -3.201e-02, 1.544e-01, -1.041e-01, -1.177e-01, 8.619e-02, 1.509e-01, 1.889e-01, -3.152e-01));
	r += mul(s0_5, M4(-1.058e-01, 6.185e-02, -3.528e-01, 1.354e-02, -2.140e-01, 3.844e-02, -5.784e-01, -1.059e-02, 7.018e-02, -7.898e-02, 5.491e-02, -4.156e-02, -1.458e-01, -1.297e-01, -6.979e-01, 1.036e-01));
	r += mul(s0_6, M4(-6.240e-03, -2.455e-01, 6.630e-02, -1.400e-02, -1.162e-01, 8.763e-02, -3.131e-02, 3.212e-01, -1.049e-01, -3.504e-02, -1.479e-01, 2.920e-01, -6.553e-02, -7.811e-02, -7.546e-02, 1.448e-01));
	r += mul(s0_7, M4(3.880e-01, 3.076e-01, 3.516e-01, -1.860e-01, -3.447e-01, -2.003e-01, -8.381e-03, 9.895e-02, -4.014e-01, -3.366e-01, 1.640e-02, 9.109e-02, 2.620e-02, -3.551e-01, -3.221e-03, -8.373e-02));
	r += mul(s0_8, M4(-6.550e-02, 1.062e-01, -1.374e-01, 8.503e-02, -1.074e-01, 1.602e-02, 1.507e-03, 9.106e-02, 6.322e-02, -3.740e-02, 1.813e-01, -3.887e-02, -9.899e-02, 7.474e-02, -1.079e-01, 3.204e-02));
	r += mul(s1_0, M4(-6.789e-03, 6.959e-02, -2.512e-02, -2.031e-01, -4.883e-03, -4.811e-03, 7.055e-03, -8.874e-02, -5.022e-02, -4.131e-02, -1.223e-02, -9.649e-02, -4.866e-04, -2.771e-02, -3.147e-02, -4.689e-02));
	r += mul(s1_1, M4(1.411e-01, -2.188e-02, -7.987e-02, -1.981e-01, 5.820e-03, -6.370e-02, -5.268e-02, 1.777e-02, -1.112e-01, -2.259e-01, 1.983e-01, 5.684e-01, 1.793e-01, -6.596e-03, 1.961e-02, 2.326e-01));
	r += mul(s1_2, M4(-4.777e-02, -6.978e-03, -2.886e-01, -1.472e-01, 7.420e-03, -5.075e-02, -1.269e-01, -1.358e-01, -3.465e-02, 8.029e-03, 2.609e-01, 1.518e-01, -2.224e-01, -2.147e-01, 7.699e-03, 2.359e-02));
	r += mul(s1_3, M4(-5.836e-02, 1.457e-01, 6.937e-02, 7.202e-02, 7.593e-02, -3.720e-01, -1.341e-02, -3.506e-01, -1.452e-01, -2.473e-01, -1.549e-01, 1.870e-01, 5.560e-02, -1.499e-01, 4.434e-02, 1.188e-01));
	r += mul(s1_4, M4(6.478e-01, 2.666e-02, -3.080e-01, -2.408e-01, -4.045e-01, 2.008e-02, 1.641e-01, -5.371e-01, 2.710e-01, 1.366e-01, 3.726e-01, -3.711e-01, -3.529e-01, 1.214e-01, 8.856e-02, 4.895e-02));
	r += mul(s1_5, M4(-1.401e-01, 5.569e-02, -4.181e-01, -1.553e-02, -1.590e-02, 4.701e-02, -1.556e-01, 6.852e-02, -4.694e-02, -6.655e-02, -6.878e-02, -6.044e-02, -2.023e-01, -3.399e-01, -3.159e-01, -2.221e-01));
	r += mul(s1_6, M4(1.253e-01, -6.744e-02, 4.450e-02, -3.764e-01, -8.240e-02, -4.733e-02, -9.218e-02, 2.526e-01, -1.343e-01, -2.538e-02, 9.399e-03, 2.092e-01, -1.232e-02, -4.412e-02, 1.598e-02, -5.087e-02));
	r += mul(s1_7, M4(4.502e-01, 5.801e-01, -4.182e-02, -8.509e-02, -2.638e-01, -9.222e-02, 6.540e-02, 2.378e-01, -3.527e-01, -3.330e-01, 5.282e-03, 1.677e-01, 2.111e-03, -7.898e-02, 8.134e-02, 2.252e-02));
	r += mul(s1_8, M4(-5.798e-02, 3.746e-02, -3.438e-02, 1.151e-01, 1.062e-02, -1.710e-02, 1.114e-01, 2.778e-03, -5.701e-03, -5.771e-02, 1.306e-01, -2.250e-02, -2.315e-01, -6.194e-02, -1.189e-01, 6.678e-02));
	r += V4(-1.996e-03, -5.263e-04, 7.793e-03, -7.749e-03);
	return r;
}
void Pass8(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 9
//!DESC CuNNy-8x4C-EASU-NVL-DS-conv7
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(8.363e-02, 5.976e-02, -3.896e-02, 1.023e-01, 3.098e-02, 1.628e-02, -8.635e-02, 6.421e-02, -1.654e-01, 1.392e-01, 1.452e-01, -7.039e-02, -4.653e-03, -1.192e-03, -8.939e-02, -5.099e-02));
	r += mul(s0_1, M4(1.300e-01, -2.896e-02, -3.771e-02, 2.251e-01, -2.268e-01, 1.692e-02, 1.450e-01, -3.198e-01, 6.382e-02, 1.189e-01, -3.342e-01, 1.890e-01, -1.644e-01, 8.277e-02, 2.272e-01, -4.057e-01));
	r += mul(s0_2, M4(2.323e-02, 2.270e-03, 1.166e-02, 3.507e-02, 1.746e-01, 3.079e-02, -2.319e-01, 5.426e-03, 1.358e-02, 4.578e-03, 1.438e-02, 8.525e-02, -6.770e-02, 9.982e-02, -3.192e-01, 1.009e-02));
	r += mul(s0_3, M4(1.154e-01, -1.869e-02, 5.833e-02, -3.039e-01, 1.184e-01, -2.330e-02, 4.041e-02, -4.854e-02, -4.410e-03, -2.560e-01, 1.125e-01, 1.477e-01, -6.161e-02, -1.696e-01, -5.798e-02, -1.077e-01));
	r += mul(s0_4, M4(1.372e-01, 5.104e-01, -1.077e-01, -7.012e-01, -3.592e-01, -2.061e-01, 1.949e-01, 4.684e-01, 6.423e-01, -3.001e-01, 4.600e-01, -3.752e-02, 3.258e-02, -6.074e-01, 2.104e-01, -7.329e-01));
	r += mul(s0_5, M4(7.543e-02, 1.453e-02, -1.251e-02, -1.521e-01, 5.000e-01, -8.670e-02, -6.960e-01, 1.252e-01, -5.405e-02, 3.078e-02, 4.432e-02, -1.902e-02, -7.641e-01, -2.104e-01, 1.701e-02, 1.734e-01));
	r += mul(s0_6, M4(1.118e-01, -7.397e-02, -8.824e-02, 1.362e-01, 1.542e-01, 6.783e-02, -5.823e-02, -6.470e-02, 1.326e-01, 3.623e-01, 1.155e-01, -2.826e-02, 3.734e-02, -9.140e-03, -5.734e-02, 2.459e-02));
	r += mul(s0_7, M4(2.185e-01, -9.764e-02, 6.319e-03, 1.209e-01, 1.400e-01, 2.280e-01, 3.721e-02, -9.688e-02, 2.984e-02, 3.819e-01, 1.157e-01, 1.012e-01, 1.197e-01, 5.445e-02, 1.375e-01, 9.277e-02));
	r += mul(s0_8, M4(-6.312e-02, 6.353e-03, 3.612e-02, 5.157e-02, -3.702e-01, -1.120e-01, 2.770e-02, -2.961e-03, -3.851e-02, 9.271e-02, 3.776e-02, 9.634e-04, -1.538e-01, -1.126e-01, -4.971e-03, 4.288e-02));
	r += mul(s1_0, M4(7.552e-02, 2.667e-02, -1.375e-02, 1.006e-01, 2.693e-03, 3.920e-02, -1.420e-02, 6.582e-02, -1.631e-01, 3.814e-02, 2.676e-02, -4.329e-02, 8.138e-02, -3.184e-02, -9.155e-02, 1.890e-02));
	r += mul(s1_1, M4(3.860e-02, 2.116e-02, 5.882e-02, 2.393e-01, 4.501e-02, 3.949e-02, -8.887e-02, 2.597e-01, 7.313e-02, -4.873e-02, -1.549e-01, -1.390e-01, 4.952e-02, -8.251e-02, 1.969e-01, -6.506e-02));
	r += mul(s1_2, M4(-5.064e-02, 1.208e-02, -5.522e-02, -1.139e-02, -3.240e-02, -1.255e-01, 2.170e-01, 7.450e-05, 6.794e-02, -3.076e-02, -3.388e-03, 1.188e-02, 2.833e-02, -5.332e-02, 3.618e-03, -3.932e-02));
	r += mul(s1_3, M4(8.871e-02, 8.892e-03, 8.277e-03, -3.135e-01, -3.456e-02, 2.869e-02, 4.126e-02, 6.637e-02, -7.883e-02, -3.605e-01, 1.417e-01, -1.106e-01, 1.020e-01, -7.443e-02, -8.478e-02, -1.062e-01));
	r += mul(s1_4, M4(2.365e-01, 6.286e-02, 2.157e-02, -8.425e-01, -1.042e-01, 6.207e-02, 5.594e-02, 6.075e-02, 4.020e-01, -4.035e-01, 5.520e-01, -2.329e-01, 1.870e-01, 8.223e-02, 1.509e-01, -1.753e-01));
	r += mul(s1_5, M4(-3.055e-01, -2.968e-02, 3.291e-01, -7.984e-02, 2.841e-01, 1.323e-01, -2.672e-01, -3.144e-02, 1.009e-01, -4.889e-02, -8.756e-02, 5.424e-02, -1.694e-01, 1.323e-01, -1.917e-01, 1.690e-01));
	r += mul(s1_6, M4(3.175e-02, -8.566e-02, -2.170e-02, 5.521e-02, -1.439e-02, 1.980e-02, 1.081e-03, -3.957e-03, 7.872e-02, 2.781e-02, 1.717e-02, -1.575e-02, 4.970e-02, -1.835e-02, -3.263e-02, 2.331e-02));
	r += mul(s1_7, M4(2.160e-01, -1.127e-01, 8.955e-02, 1.218e-01, 3.949e-02, 3.334e-02, -4.879e-02, -4.397e-02, 2.726e-01, 3.440e-01, 1.792e-01, 6.629e-02, 8.036e-02, -1.191e-02, 2.655e-02, 7.269e-02));
	r += mul(s1_8, M4(-1.402e-02, 6.724e-03, 9.888e-02, 2.135e-02, -2.680e-02, -7.267e-02, -5.557e-02, 4.016e-02, -1.037e-01, -1.421e-02, 9.428e-04, 2.750e-02, -3.358e-02, -1.482e-01, -9.302e-02, -1.622e-02));
	r += V4(-7.544e-03, 8.217e-03, -5.535e-03, 1.062e-03);
	return r;
}
void Pass9(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 10
//!DESC CuNNy-8x4C-EASU-NVL-DS-conv8
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(3.668e-02, 2.900e-01, 2.900e-02, -2.831e-02, 4.002e-02, 5.481e-02, 7.859e-03, 5.575e-03, 1.439e-01, 6.228e-02, -3.519e-03, -1.462e-02, -3.240e-02, -2.631e-03, 2.795e-03, 6.166e-03));
	r += mul(s0_1, M4(-9.386e-01, 2.425e-01, 1.128e-01, -5.642e-01, -1.168e-01, -3.082e-01, -3.563e-02, -1.015e-01, -9.277e-01, 2.900e-01, 1.275e-01, -1.882e-01, 4.589e-02, 4.433e-02, 2.085e-02, 6.935e-02));
	r += mul(s0_2, M4(1.178e-03, 4.048e-02, 2.744e-01, -8.066e-02, -8.885e-03, -4.203e-02, -9.821e-02, 3.060e-02, -1.553e-02, -3.282e-03, 2.240e-01, -9.029e-02, 3.395e-02, -3.090e-02, -9.792e-03, 5.106e-02));
	r += mul(s0_3, M4(7.271e-02, 1.722e-02, -3.863e-02, -4.571e-03, 1.727e-02, 7.198e-02, -1.129e-02, 3.900e-03, -4.051e-02, -7.816e-02, -1.996e-02, 7.985e-02, 3.543e-03, -5.115e-02, -1.033e-02, -2.592e-02));
	r += mul(s0_4, M4(-2.034e-01, 1.691e-01, 1.703e-01, 5.762e-01, 1.084e-02, -1.989e-01, -2.525e-02, -3.122e-01, 1.311e-01, 7.839e-01, 1.724e-01, -5.894e-01, -7.934e-02, 2.092e-01, 5.606e-02, 1.690e-01));
	r += mul(s0_5, M4(1.245e-03, 1.518e-01, 3.955e-01, -1.437e-01, -4.079e-02, 5.326e-02, 1.968e-01, 1.067e-01, -1.219e-01, 7.886e-02, 1.947e-01, -4.779e-02, 2.323e-02, 2.867e-02, -3.058e-02, 7.046e-02));
	r += mul(s0_6, M4(4.604e-02, 3.193e-02, -1.386e-02, -2.293e-02, -9.122e-04, 1.687e-02, -6.690e-03, -8.653e-03, -2.616e-02, 1.184e-02, 7.024e-03, 8.509e-02, 2.198e-02, -3.961e-02, -7.956e-04, -1.284e-02));
	r += mul(s0_7, M4(1.327e-02, -3.548e-02, -1.313e-01, 9.236e-03, -5.362e-02, 4.695e-02, 2.251e-02, -4.806e-02, 6.413e-02, -3.992e-02, -4.998e-02, -5.185e-02, -4.725e-02, 8.043e-02, -1.273e-02, 1.362e-01));
	r += mul(s0_8, M4(-3.138e-03, -4.875e-03, 1.612e-03, -2.057e-02, 9.868e-03, 6.696e-03, 5.748e-02, -1.974e-02, 2.296e-02, -1.489e-01, -1.169e-01, 4.590e-02, -3.181e-02, 8.128e-02, 5.746e-02, 1.022e-02));
	r += mul(s1_0, M4(-2.929e-02, 8.608e-02, 2.322e-03, -6.469e-02, -1.403e-02, -1.151e-03, 4.913e-03, -1.588e-03, -2.409e-02, -6.767e-02, -5.317e-03, 2.862e-02, -1.071e-02, -1.176e-02, -3.112e-03, 5.192e-03));
	r += mul(s1_1, M4(1.759e-02, -1.404e-01, -9.548e-03, -1.445e-01, 2.176e-01, -1.497e-01, -9.763e-02, -2.568e-01, -2.953e-03, -8.374e-02, -9.809e-03, 3.041e-02, 2.997e-03, 2.792e-02, -1.401e-02, 6.389e-02));
	r += mul(s1_2, M4(7.733e-03, -3.716e-02, -9.009e-02, 7.746e-04, -1.619e-01, -6.937e-02, 1.714e-01, 6.103e-02, 1.349e-03, -4.018e-02, -1.955e-02, -5.994e-03, 5.211e-02, -6.254e-02, -1.640e-02, -2.122e-03));
	r += mul(s1_3, M4(3.135e-02, 1.491e-03, -1.142e-02, -9.110e-02, -4.069e-02, 1.572e-01, 2.924e-02, -2.203e-02, -4.822e-02, -1.131e-01, 1.273e-03, -5.560e-02, 6.267e-02, 9.861e-02, -1.457e-02, -3.992e-02));
	r += mul(s1_4, M4(-1.392e-01, 2.544e-01, 7.661e-02, 2.411e-01, -2.447e-01, -1.546e-02, 5.787e-02, -5.146e-01, -1.255e-01, 4.427e-01, 8.523e-02, 5.652e-02, -1.030e+00, 2.835e-01, 1.901e-01, -5.063e-03));
	r += mul(s1_5, M4(-1.869e-02, 6.714e-02, 1.841e-01, -8.867e-02, -6.223e-02, 1.601e-01, 9.033e-01, -4.502e-01, -1.641e-02, 5.701e-02, 2.283e-01, -6.339e-02, -9.693e-02, 6.899e-02, -8.413e-02, 2.147e-01));
	r += mul(s1_6, M4(6.323e-03, 2.683e-02, 6.945e-03, -4.551e-02, -1.263e-02, 9.723e-02, -7.949e-03, -7.776e-02, -4.537e-02, 2.778e-02, 2.470e-02, -6.698e-03, 8.308e-04, 7.079e-02, -5.111e-03, -2.944e-02));
	r += mul(s1_7, M4(4.358e-02, -3.893e-02, -4.822e-02, -1.147e-02, -1.705e-02, 8.130e-02, 5.460e-02, -1.479e-01, 7.694e-02, -3.650e-02, 6.192e-02, -7.742e-02, -1.435e-01, 7.203e-02, 1.318e-01, -6.275e-02));
	r += mul(s1_8, M4(5.393e-03, -3.357e-02, -5.983e-02, 4.466e-02, -8.753e-03, 1.647e-02, -7.528e-03, -9.028e-02, 2.162e-02, -8.914e-02, -1.772e-01, 8.787e-02, -3.138e-02, 1.472e-01, 5.765e-01, -1.165e-01));
	r += V4(1.458e-03, 2.068e-03, -1.575e-03, 2.720e-03);
	return r;
}
void Pass10(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 11
//!DESC CuNNy-8x4C-EASU-NVL-DS-out
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(5.188e-02, 1.147e-02, -2.390e-02, -9.308e-03, 4.018e-02, 3.357e-02, 1.234e-02, 1.902e-02, 3.447e-02, -9.398e-02, -5.211e-02, -4.478e-02, 1.691e-01, 5.531e-02, -9.007e-03, -2.656e-03));
	r += mul(s0_1, M4(3.346e-02, 8.628e-02, 2.905e-03, -2.899e-02, 2.743e-02, 1.978e-01, 2.880e-02, 1.019e-02, -2.174e-02, 2.477e-02, 1.828e-02, 8.478e-02, -1.025e-01, -9.030e-03, -1.617e-02, 2.676e-02));
	r += mul(s0_2, M4(1.069e-02, -1.420e-02, 1.401e-03, -2.835e-03, 1.585e-02, -5.319e-02, -6.187e-03, -6.340e-02, 2.924e-04, 6.738e-03, 4.652e-03, 2.769e-03, 1.753e-02, 6.813e-03, 4.579e-03, -3.991e-03));
	r += mul(s0_3, M4(-1.295e-01, -7.839e-02, 3.416e-02, 3.757e-02, 3.578e-02, -7.140e-03, -4.347e-02, -2.558e-02, -3.825e-02, -5.081e-01, 8.535e-01, 1.296e-01, -2.177e-01, -5.946e-02, -8.863e-02, 4.599e-02));
	r += mul(s0_4, M4(-1.570e-01, -7.248e-02, 1.337e-01, 3.804e-02, -7.524e-01, -2.180e-01, -4.236e-01, -1.317e-03, -8.643e-03, -1.292e-01, 3.160e-02, -1.531e-01, -3.749e-02, -1.509e-01, -5.606e-02, -2.803e-01));
	r += mul(s0_5, M4(-5.419e-02, -2.271e-01, -4.833e-03, 1.587e-01, -2.714e-02, 1.282e-02, 4.460e-02, 7.201e-02, 6.854e-03, 7.549e-03, -1.660e-02, 2.459e-02, 1.770e-02, -3.058e-03, -8.842e-03, 4.829e-02));
	r += mul(s0_6, M4(-6.061e-02, -5.523e-02, 8.132e-02, 3.503e-02, -4.331e-03, 1.102e-02, 4.312e-02, 6.382e-03, -8.750e-03, -8.285e-02, -8.103e-02, 8.481e-02, 2.306e-02, 2.534e-03, 2.974e-02, -5.427e-03));
	r += mul(s0_7, M4(-1.960e-01, -1.458e-01, 1.958e-01, 1.881e-01, 8.812e-02, -2.123e-02, -6.400e-02, 1.504e-01, -2.673e-02, -1.532e-02, -4.392e-02, -2.350e-02, -1.256e-02, 3.690e-03, -5.807e-04, 3.671e-02));
	r += mul(s0_8, M4(-1.322e-02, -6.519e-02, -5.602e-02, -2.053e-04, 1.745e-03, -2.238e-03, -1.863e-02, -2.606e-02, 9.544e-03, 8.806e-03, 1.040e-02, -1.579e-02, 1.776e-02, 2.376e-02, -4.188e-03, -1.330e-02));
	r += mul(s1_0, M4(4.290e-02, 2.288e-02, -1.644e-02, -1.695e-02, 3.906e-02, 1.575e-02, -3.556e-03, 9.965e-03, 9.156e-02, -5.242e-02, -9.800e-02, -3.012e-02, 2.726e-02, 3.323e-02, 3.455e-02, 2.602e-02));
	r += mul(s1_1, M4(2.644e-02, 3.696e-02, 6.262e-03, -5.191e-03, 9.978e-02, 1.241e-01, 3.502e-02, -2.192e-02, 9.017e-03, 1.817e-01, -9.844e-03, -3.356e-02, 8.878e-03, -1.786e-02, -2.799e-02, 3.620e-03));
	r += mul(s1_2, M4(1.081e-02, 1.769e-02, 3.506e-03, -1.253e-02, 3.404e-03, -9.455e-03, -2.468e-02, -5.759e-02, -1.123e-03, -4.064e-02, -1.611e-02, 1.217e-02, -9.981e-04, 2.428e-02, -9.643e-03, 5.187e-03));
	r += mul(s1_3, M4(-1.958e-01, -7.446e-02, 3.653e-02, 1.904e-02, -6.993e-02, 7.171e-03, -1.898e-02, 7.709e-03, -4.574e-01, -2.284e-01, 4.404e-01, 3.018e-01, -1.755e-01, -7.992e-03, -1.328e-01, 1.086e-03));
	r += mul(s1_4, M4(-3.057e-01, 1.421e-01, 4.139e-02, 1.048e-01, -2.057e-01, -2.411e-01, -2.842e-01, -1.993e-01, -2.738e-02, -2.458e-01, -1.969e-02, 8.859e-02, 6.435e-02, -6.429e-01, 1.382e-01, -4.112e-01));
	r += mul(s1_5, M4(4.328e-03, -9.218e-02, 1.569e-02, -2.316e-02, -1.032e-02, -7.419e-02, 4.918e-02, -3.516e-02, -4.071e-03, -9.709e-03, -8.544e-03, 4.529e-02, 1.912e-02, 7.221e-02, -7.569e-03, 5.716e-02));
	r += mul(s1_6, M4(-6.368e-02, -7.485e-02, -2.166e-02, 8.184e-02, 9.295e-04, -3.102e-03, -1.735e-02, 5.416e-03, -3.918e-02, -2.985e-02, 4.826e-02, 1.402e-02, 3.732e-02, -1.164e-02, 2.337e-02, 9.760e-03));
	r += mul(s1_7, M4(-1.618e-01, -2.327e-01, -1.540e-02, 4.248e-01, -1.346e-02, -1.910e-02, 1.315e-01, 3.271e-02, -1.867e-02, -1.856e-02, -3.224e-02, 6.620e-03, -2.197e-02, 7.738e-02, 2.952e-02, 1.068e-02));
	r += mul(s1_8, M4(-1.211e-02, -2.457e-02, -1.408e-02, -7.828e-02, -1.106e-03, 1.490e-02, -2.448e-02, 4.601e-02, 1.090e-02, 6.540e-03, 2.054e-03, -9.372e-03, 1.036e-02, 3.634e-02, 4.018e-03, 2.902e-02));
	r += V4(1.118e-03, 1.213e-03, 1.263e-03, 1.238e-03);
	return tanh(r);
}
void Pass11(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 12
//!DESC CuNNy-8x4C-EASU-NVL-DS-shuffle
//!STYLE PS
//!IN t1, INPUT, easu
float4 Pass12(float2 pos) {
	float2 pt = float2(GetInputPt());
	static const float3x3 rgb2yuv = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081};
	static const float3x3 yuv2rgb = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float4 r = 0.0;
	float2 size = float2(GetInputSize());
	float2 f = frac(pos * size);
	float3 yuv = mul(rgb2yuv, INPUT.SampleLevel(SL, pos, 0).rgb);
	int2 i = int2(f * 2.0);
	r.r = t1.SampleLevel(SP, (float2(0.5, 0.5) - f) * pt + pos, 0)[2*i.y + i.x];
	r.r += easu.SampleLevel(SP, pos, 0).r;
	r.a = 1.0;
	r.r = clamp(r, 0.0, 1.0);
	float3 px = mul(yuv2rgb, float3(r.r, yuv.yz));
	return float4(px, 1.0);
}
