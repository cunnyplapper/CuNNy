// CuNNy 8x4C CHROMA NVL DN
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

//!MAGPIE EFFECT
//!VERSION 3
//!OUTPUT_WIDTH INPUT_WIDTH * 2
//!OUTPUT_HEIGHT INPUT_HEIGHT * 2

//!TEXTURE
Texture2D INPUT;

//!TEXTURE
//!WIDTH INPUT_WIDTH * 2
//!HEIGHT INPUT_HEIGHT * 2
//!FORMAT R8_UNORM
Texture2D easu;

//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t1;

// FSR mpv | modified
// Copyright (c) 2021 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// FidelityFX FSR v1.0.2 by AMD
// ported to mpv by agyild

//!PASS 1
//!DESC CuNNy-EASU
//!STYLE PS
//!IN INPUT
//!OUT easu

float GetLuma(float3 rgb) {
	return dot(float3(0.299, 0.587, 0.114), rgb);
}

float APrxLoRcpF1(float a) {
	return asfloat(uint(0x7ef07ebb) - asuint(a));
}

float APrxLoRsqF1(float a) {
	return asfloat(uint(0x5f347d74) - (asuint(a) >> uint(1)));
}

float AMin3F1(float x, float y, float z) {

	return min(x, min(y, z));
}

float AMax3F1(float x, float y, float z) {
	return max(x, max(y, z));
}

void tap(inout float aC, inout float aW, float2 off, float2 dir, float2 len,
         float lob, float clp, float c){
	float2 v;
	v.x = (off.x * ( dir.x)) + (off.y * dir.y);
	v.y = (off.x * (-dir.y)) + (off.y * dir.x);
	v *= len;
	float d2 = v.x * v.x + v.y * v.y;
	d2 = min(d2, clp);
	float wB = float(2.0 / 5.0) * d2 + -1.0;

	float wA = lob * d2 + -1.0;
	wB *= wB;
	wA *= wA;
	wB = float(25.0 / 16.0) * wB + float(-(25.0 / 16.0 - 1.0));
	float w = wB * wA;
	aC += c * w;
	aW += w;
}

void set(inout float2 dir, inout float len, float2 pp, bool biS, bool biT,
         bool biU, bool biV, float lA, float lB, float lC, float lD, float lE){

	float w = 0.0;
	if (biS)
		w = (1.0 - pp.x) * (1.0 - pp.y);
	if (biT)
		w =        pp.x  * (1.0 - pp.y);
	if (biU)
		w = (1.0 - pp.x) *        pp.y;

	if (biV)
		w =        pp.x  *        pp.y;
	float dc = lD - lC;
	float cb = lC - lB;
	float lenX = max(abs(dc), abs(cb));
	lenX = APrxLoRcpF1(lenX);
	float dirX = lD - lB;
	lenX = clamp(abs(dirX) * lenX, 0.0, 1.0);
	lenX *= lenX;
	float ec = lE - lC;

	float ca = lC - lA;
	float lenY = max(abs(ec), abs(ca));
	lenY = APrxLoRcpF1(lenY);
	float dirY = lE - lA;
	lenY = clamp(abs(dirY) * lenY, 0.0, 1.0);
	lenY *= lenY;
	dir += float2(dirX, dirY) * w;
	len += dot(float2(w, w), float2(lenX, lenY));
}

float4 Pass1(float2 pos) {
	float2 pt = float2(GetInputPt());
	float2 size = float2(GetInputSize());
	float4 pix = float4(0.0, 0.0, 0.0, 1.0);
	float2 pp = pos * size - float2(0.5, 0.5);
	float2 fp = floor(pp);
	pp -= fp;
	float b = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2(0.5, -0.5)) * pt), 0).rgb);
	float c = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2(1.5, -0.5)) * pt), 0).rgb);
	float e = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2(-0.5, 0.5)) * pt), 0).rgb);
	float f = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2( 0.5, 0.5)) * pt), 0).rgb);
	float g = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2( 1.5, 0.5)) * pt), 0).rgb);
	float h = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2( 2.5, 0.5)) * pt), 0).rgb);
	float i = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2(-0.5, 1.5)) * pt), 0).rgb);
	float j = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2( 0.5, 1.5)) * pt), 0).rgb);
	float k = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2( 1.5, 1.5)) * pt), 0).rgb);
	float l = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2( 2.5, 1.5)) * pt), 0).rgb);
	float n = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2(0.5, 2.5) ) * pt), 0).rgb);
	float o = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2(1.5, 2.5) ) * pt), 0).rgb);
	float4 bczzL = float4(b, c, 0.0, 0.0);
	float4 ijfeL = float4(i, j, f, e);
	float4 klhgL = float4(k, l, h, g);
	float4 zzonL = float4(0.0, 0.0, o, n);
	float bL = bczzL.x;
	float cL = bczzL.y;
	float iL = ijfeL.x;
	float jL = ijfeL.y;
	float fL = ijfeL.z;
	float eL = ijfeL.w;
	float kL = klhgL.x;
	float lL = klhgL.y;
	float hL = klhgL.z;
	float gL = klhgL.w;
	float oL = zzonL.z;
	float nL = zzonL.w;
	float2 dir = float2(0.0, 0.0);
	float len = 0.0;
	set(dir, len, pp, true, false, false, false, bL, eL, fL, gL, jL);
	set(dir, len, pp, false, true, false, false, cL, fL, gL, hL, kL);
	set(dir, len, pp, false, false, true, false, fL, iL, jL, kL, nL);
	set(dir, len, pp, false, false, false, true, gL, jL, kL, lL, oL);
	float2 dir2 = dir * dir;
	float dirR = dir2.x + dir2.y;
	bool zro = dirR < float(1.0 / 32768.0);
	dirR = APrxLoRsqF1(dirR);
	dirR = zro ? 1.0 : dirR;
	dir.x = zro ? 1.0 : dir.x;
	dir *= float2(dirR, dirR);
	len = len * 0.5;
	len *= len;
	float stretch = (dir.x * dir.x + dir.y * dir.y) * APrxLoRcpF1(max(abs(dir.x), abs(dir.y)));
	float2 len2 = float2(1.0 + (stretch - 1.0) * len, 1.0 + -0.5 * len);
	float lob = 0.5 + float((1.0 / 4.0 - 0.04) - 0.5) * len;
	float clp = APrxLoRcpF1(lob);
	float aC = 0.0;
	float aW = 0.0;
	tap(aC, aW, float2( 0.0,-1.0) - pp, dir, len2, lob, clp, bL);
	tap(aC, aW, float2( 1.0,-1.0) - pp, dir, len2, lob, clp, cL);
	tap(aC, aW, float2(-1.0, 1.0) - pp, dir, len2, lob, clp, iL);
	tap(aC, aW, float2( 0.0, 1.0) - pp, dir, len2, lob, clp, jL);
	tap(aC, aW, float2( 0.0, 0.0) - pp, dir, len2, lob, clp, fL);
	tap(aC, aW, float2(-1.0, 0.0) - pp, dir, len2, lob, clp, eL);
	tap(aC, aW, float2( 1.0, 1.0) - pp, dir, len2, lob, clp, kL);
	tap(aC, aW, float2( 2.0, 1.0) - pp, dir, len2, lob, clp, lL);
	tap(aC, aW, float2( 2.0, 0.0) - pp, dir, len2, lob, clp, hL);
	tap(aC, aW, float2( 1.0, 0.0) - pp, dir, len2, lob, clp, gL);
	tap(aC, aW, float2( 1.0, 2.0) - pp, dir, len2, lob, clp, oL);
	tap(aC, aW, float2( 0.0, 2.0) - pp, dir, len2, lob, clp, nL);
	pix.r = aC / aW;
	float min1 = min(AMin3F1(fL, gL, jL), kL);
	float max1 = max(AMax3F1(fL, gL, jL), kL);
	pix.r = clamp(pix.r, min1, max1);
	pix.r = clamp(pix.r, 0.0, 1.0);
	return pix;
}

//!PASS 2
//!DESC CuNNy-8x4C-CHROMA-NVL-DN-in
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) (dot(float3(-2.822e-01, -5.410e-01, -1.200e-01), O(INPUT, float2(x, y)).rgb) + 7.639e-01)
float4 f0(float2 pt, float2 pos, min16float s0_0, min16float s0_1, min16float s0_2, min16float s0_3, min16float s0_4, min16float s0_5, min16float s0_6, min16float s0_7, min16float s0_8) {
	V4 r = 0.0;
	r += V4(1.453e-01, 7.027e-04, 4.648e-02, 2.051e-02) * s0_0;
	r += V4(3.360e-01, 6.375e-02, -5.677e-01, 3.712e-02) * s0_1;
	r += V4(-3.819e-02, -4.747e-03, 5.714e-02, -9.254e-03) * s0_2;
	r += V4(-4.678e-01, 1.090e-01, -1.393e-02, -1.696e-01) * s0_3;
	r += V4(-2.095e-01, 6.382e-01, 8.081e-02, 5.840e-01) * s0_4;
	r += V4(2.923e-01, -5.335e-02, -2.564e-02, 3.260e-02) * s0_5;
	r += V4(-1.902e-01, -3.430e-02, 1.060e-02, -5.882e-01) * s0_6;
	r += V4(1.118e-01, -1.834e-01, -1.464e-02, 5.625e-02) * s0_7;
	r += V4(7.072e-03, -5.277e-01, 1.187e-02, 4.582e-02) * s0_8;
	r += V4(1.132e-02, -5.724e-03, -5.698e-02, -1.431e-02);
	return r;
}
void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float s0_0 = l0(-1.0, -1.0);
	min16float s0_1 = l0(0.0, -1.0);
	min16float s0_2 = l0(1.0, -1.0);
	min16float s0_3 = l0(-1.0, 0.0);
	min16float s0_4 = l0(0.0, 0.0);
	min16float s0_5 = l0(1.0, 0.0);
	min16float s0_6 = l0(-1.0, 1.0);
	min16float s0_7 = l0(0.0, 1.0);
	min16float s0_8 = l0(1.0, 1.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8);
}
//!PASS 3
//!DESC CuNNy-8x4C-CHROMA-NVL-DN-conv1
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-2.356e-01, 4.134e-02, -2.088e-01, -3.698e-02, 3.422e-01, 4.789e-01, 4.223e-01, 6.363e-02, -4.581e-01, 5.153e-02, 3.089e-01, 2.271e-01, 2.273e-01, 1.420e-01, -2.658e-01, 6.870e-03));
	r += mul(s0_1, M4(3.240e-02, -2.568e-01, -1.379e-01, 1.163e-03, -9.953e-03, 2.756e-01, -1.042e-01, 6.320e-01, 2.536e-01, 5.795e-02, -4.399e-03, -6.792e-02, -4.817e-01, 4.615e-01, -6.945e-01, 4.512e-01));
	r += mul(s0_2, M4(5.652e-02, -3.144e-02, -9.219e-02, 5.356e-02, 1.373e-01, 1.097e-01, -1.182e-02, -2.786e-02, -4.107e-02, 5.780e-02, -3.194e-01, -1.395e-01, -4.866e-02, 2.668e-01, 9.006e-02, 1.306e-01));
	r += mul(s0_3, M4(-5.037e-01, -2.012e-02, 3.166e-01, -5.706e-02, 1.734e-01, 2.296e-01, -4.760e-01, 1.281e-01, 5.203e-01, 2.387e-01, -4.039e-01, -3.642e-01, 3.931e-02, -2.493e-01, -1.134e-01, 1.421e-01));
	r += mul(s0_4, M4(-6.695e-02, 3.643e-01, 6.829e-02, 3.270e-01, -1.915e-01, 1.217e-01, 1.964e-01, -1.171e-01, -4.819e-01, 2.450e-02, 8.790e-01, -1.339e+00, -3.298e-01, 1.397e-01, 1.681e-01, -6.055e-01));
	r += mul(s0_5, M4(5.363e-02, -1.973e-01, -3.467e-01, -2.698e-02, 1.033e-01, 1.411e-01, -3.756e-02, 1.450e-01, 6.582e-02, -1.935e-01, 2.330e-01, -5.452e-01, -9.317e-02, -5.638e-03, 2.192e-01, 6.559e-02));
	r += mul(s0_6, M4(1.125e-01, 3.930e-01, 7.202e-02, -9.579e-02, -1.587e-01, 2.094e-01, 7.033e-03, 1.116e-01, -1.008e+00, 2.763e-01, 1.040e+00, 2.614e-01, -5.002e-03, -2.358e-01, -4.506e-02, 1.542e-02));
	r += mul(s0_7, M4(8.174e-02, 1.388e-01, 1.861e-01, 1.560e-01, 5.643e-02, 6.644e-02, 9.140e-03, -1.007e-01, 7.666e-02, 4.112e-02, -2.576e+00, 1.442e+00, -1.389e-02, -1.314e-01, -5.270e-02, -5.949e-02));
	r += mul(s0_8, M4(1.991e-01, 8.042e-02, -1.685e-01, 6.838e-02, 6.523e-02, -2.214e-01, 2.455e-02, 2.311e-02, -1.059e-01, 5.741e-01, -3.103e-01, 2.345e-01, 7.201e-02, 9.866e-02, 9.350e-02, -1.656e-02));
	r += mul(s1_0, M4(-1.139e-01, 7.806e-02, -2.801e-01, -9.222e-02, 3.054e-01, -2.324e-01, -3.688e-01, -6.998e-02, -1.719e-01, -1.615e-02, -7.019e-02, 5.568e-02, 2.613e-01, 3.866e-02, 5.397e-03, 1.646e-01));
	r += mul(s1_1, M4(8.477e-02, -1.442e-01, 6.907e-02, 1.959e-01, 2.417e-02, -3.166e-01, -1.562e-01, 7.834e-01, 9.860e-02, 6.083e-03, -8.776e-02, 1.197e-01, 2.495e-01, 3.525e-02, 4.674e-01, 3.426e-01));
	r += mul(s1_2, M4(6.107e-02, 2.120e-01, -6.512e-02, 1.477e-02, 1.284e-01, -3.836e-02, 1.050e-02, 3.137e-02, 5.282e-02, 4.412e-02, -1.309e-01, 6.026e-02, -6.586e-02, -9.156e-02, -1.802e-01, 2.763e-01));
	r += mul(s1_3, M4(-3.403e-01, -2.034e-01, 6.502e-02, -2.306e-01, 4.006e-01, -1.626e-01, -3.549e-01, -1.343e-01, 8.688e-02, -1.238e-01, -4.209e-01, 7.202e-02, 3.164e-02, 8.764e-02, -7.047e-02, 7.545e-02));
	r += mul(s1_4, M4(2.744e-01, -4.906e-01, 6.299e-02, 3.795e-01, -1.666e-01, -3.271e-01, 3.428e-01, -4.460e-02, -3.247e-01, -1.328e-01, 5.605e-01, -4.031e-01, -2.807e-01, -4.331e-01, 3.158e-01, -3.366e-01));
	r += mul(s1_5, M4(2.526e-01, 9.489e-02, 7.990e-02, -1.109e-01, 3.161e-02, 7.712e-02, -1.772e-01, 8.198e-02, 2.994e-02, 5.317e-02, -3.587e-02, -4.500e-02, -1.607e-01, -2.760e-01, 1.206e-01, 2.119e-02));
	r += mul(s1_6, M4(6.471e-02, 6.492e-02, 8.411e-02, 5.060e-02, -1.431e-01, 8.182e-02, -3.163e-02, 1.052e-01, -2.234e-01, 1.160e-01, 2.277e-01, -8.044e-02, -3.536e-02, 1.014e-02, -1.350e-02, -4.499e-02));
	r += mul(s1_7, M4(8.139e-02, 9.212e-02, 9.409e-02, 3.107e-01, 6.840e-02, 1.387e-01, -8.025e-03, -2.165e-02, 3.076e-01, 2.782e-01, -1.378e-01, 3.875e-01, 1.038e-01, -4.263e-03, -4.929e-02, -1.490e-01));
	r += mul(s1_8, M4(2.265e-01, 3.071e-02, -1.460e-01, 2.418e-01, -1.020e-02, -2.612e-02, -2.804e-02, -8.936e-03, 1.833e-01, -2.543e-01, 1.172e-01, -1.553e-01, 5.049e-03, -7.181e-02, 3.937e-02, -6.764e-02));
	r += V4(-6.847e-03, -4.187e-02, 1.178e-02, 1.397e-02);
	return r;
}
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 4
//!DESC CuNNy-8x4C-CHROMA-NVL-DN-conv2
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-1.966e-01, -3.192e-02, -7.019e-04, 2.783e-01, 2.395e-01, 1.225e-01, -4.788e-02, -8.374e-02, 2.199e-01, -1.177e-01, 1.357e-02, -1.224e-01, 1.898e-01, -5.730e-02, 4.539e-03, -8.604e-03));
	r += mul(s0_1, M4(5.457e-01, 1.311e-01, 1.585e-01, -2.783e-01, -1.847e-02, -5.628e-02, -1.192e-01, -5.281e-03, -1.717e-01, -1.026e-01, 6.895e-02, 8.316e-03, -1.431e-01, -5.955e-02, 4.858e-03, 5.594e-03));
	r += mul(s0_2, M4(-9.798e-02, 1.255e-01, -6.350e-02, 1.838e-01, -6.150e-02, -1.543e-02, 5.155e-02, 2.694e-02, -5.393e-02, -4.167e-02, 3.258e-02, -1.243e-01, 1.155e-01, 2.665e-03, 1.439e-01, -8.496e-02));
	r += mul(s0_3, M4(-1.674e-02, 5.238e-02, -5.173e-02, -8.422e-02, -3.751e-03, 1.020e-01, 1.043e-02, -5.501e-02, -9.221e-02, 2.202e-01, -5.385e-02, -1.069e-03, 3.833e-01, -5.747e-01, -3.100e-02, -1.898e-01));
	r += mul(s0_4, M4(2.056e-01, 6.104e-01, -4.215e-01, -1.304e-01, 2.636e-02, 2.043e-01, -2.894e-01, 1.566e-01, 1.651e+00, -5.110e-01, -1.740e-01, 6.567e-02, -4.603e-01, 6.756e-02, -7.175e-01, -6.165e-02));
	r += mul(s0_5, M4(-1.526e-01, 1.243e-01, -1.448e-01, 6.078e-01, 2.733e-02, -5.412e-02, 1.743e-01, -4.866e-02, 2.654e-01, -2.608e-01, 2.766e-03, -2.657e-01, 3.064e-02, -3.898e-02, -4.418e-02, -8.609e-03));
	r += mul(s0_6, M4(-7.813e-02, -3.708e-01, 7.184e-02, -2.888e-02, -1.561e-02, -9.171e-02, 4.633e-03, 1.491e-03, -4.010e-01, 4.321e-01, -4.574e-02, 1.710e-02, -4.411e-02, 2.308e-01, 1.784e-01, -1.162e-01));
	r += mul(s0_7, M4(3.252e-01, -3.017e-01, 1.642e-01, 6.281e-02, 9.156e-02, -2.508e-02, 6.145e-02, -6.349e-02, 7.637e-03, -4.611e-04, -3.425e-01, 1.341e-01, 3.818e-02, 2.277e-01, -3.128e-01, 5.838e-01));
	r += mul(s0_8, M4(-1.473e-02, 1.093e-01, 2.066e-01, 6.783e-02, -9.259e-02, 1.154e-03, 4.588e-02, 6.180e-02, 1.295e-01, -2.846e-02, -2.607e-01, 7.051e-02, -2.020e-02, -1.182e-02, -2.391e-01, 1.851e-01));
	r += mul(s1_0, M4(1.277e-01, 9.589e-02, -1.168e-02, -4.442e-02, -1.945e-01, 1.039e+00, -3.341e-01, 3.607e-01, -1.312e-01, 5.068e-02, -2.912e-03, 4.290e-02, 1.884e-01, -1.675e-01, 2.014e-02, 5.302e-02));
	r += mul(s1_1, M4(-1.731e-01, 1.453e-01, -3.232e-01, -1.830e-01, 3.212e-01, 4.554e-01, -3.476e-01, 8.478e-02, -7.071e-02, -2.038e-01, 1.079e-01, 1.202e-01, -4.795e-02, 9.346e-03, 8.472e-02, 7.466e-03));
	r += mul(s1_2, M4(-9.408e-02, -1.282e-01, -1.540e-02, 1.218e-01, -1.356e-02, 1.657e-01, -2.372e-01, 4.131e-01, 1.825e-01, 4.180e-02, 1.440e-01, -5.358e-02, 9.294e-02, -1.045e-02, -2.396e-02, -3.647e-02));
	r += mul(s1_3, M4(1.628e-01, -4.314e-01, 5.103e-02, -1.443e-01, 5.554e-01, 1.591e+00, -3.548e-01, 3.129e-01, 1.631e-01, 1.960e-01, -2.436e-02, 5.478e-02, 3.384e-01, -6.602e-01, -8.010e-02, -1.647e-01));
	r += mul(s1_4, M4(-6.090e-02, 7.776e-01, -2.008e-01, -4.406e-01, 3.457e-02, 1.238e+00, -1.176e+00, 4.999e-01, 2.444e-01, -1.707e-01, -5.902e-02, 3.081e-01, 1.177e-02, -4.015e-01, -3.690e-01, -3.641e-01));
	r += mul(s1_5, M4(-3.368e-01, 1.889e-01, 1.145e-01, 3.549e-02, -5.840e-01, 3.507e-01, -2.320e-01, 2.120e-01, -8.023e-02, -3.848e-02, -4.911e-02, -5.227e-04, -2.069e-02, -2.165e-01, 1.101e-01, -1.430e-01));
	r += mul(s1_6, M4(-1.871e-01, 5.624e-02, 7.538e-02, 1.057e-02, -3.663e-02, 1.449e-01, -5.488e-01, 3.110e-01, -7.570e-02, -2.910e-02, -4.049e-02, -1.839e-02, -1.101e-01, 8.721e-02, 1.701e-02, -3.718e-02));
	r += mul(s1_7, M4(2.006e-01, -3.408e-01, 1.588e-01, -1.036e-01, -2.015e-01, 7.994e-02, -4.961e-01, 1.004e-01, 2.552e-02, -2.018e-01, 2.737e-02, 3.268e-01, -1.682e-01, -3.953e-02, 7.102e-02, 7.497e-02));
	r += mul(s1_8, M4(6.428e-02, -9.985e-02, 4.670e-01, -1.043e-01, 1.002e-01, 1.988e-01, -3.272e-01, 1.781e-01, -2.600e-01, -1.521e-01, -1.298e-01, 8.465e-02, -1.067e-01, 9.705e-02, -2.864e-01, 2.231e-01));
	r += V4(-4.496e-03, 2.693e-02, 6.700e-03, -8.875e-03);
	return r;
}
void Pass4(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 5
//!DESC CuNNy-8x4C-CHROMA-NVL-DN-conv3
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-9.428e-02, 3.615e-03, -2.026e-02, -1.088e-01, -1.394e-02, 2.527e-02, -2.328e-03, -3.229e-02, 6.172e-02, -1.165e-02, -5.293e-01, -4.815e-01, -9.874e-02, 4.018e-02, 1.096e-01, 1.110e-01));
	r += mul(s0_1, M4(-4.697e-02, 4.805e-02, 1.367e-02, -8.134e-02, 5.104e-01, -9.864e-02, 2.434e-01, -7.090e-02, 5.170e-01, -1.783e-01, -1.582e-01, 3.806e-01, -1.193e-01, 9.592e-02, 1.936e-02, -1.253e-01));
	r += mul(s0_2, M4(-2.769e-02, 7.079e-03, -2.206e-02, -4.092e-02, 1.969e-01, -2.337e-02, -5.917e-02, -1.174e-02, 2.428e-01, -1.680e-02, 6.233e-02, 1.555e-01, -2.021e-01, 4.798e-02, -5.624e-03, -4.080e-02));
	r += mul(s0_3, M4(-3.395e-01, 7.836e-02, -6.284e-02, 4.394e-03, -5.576e-02, -3.904e-03, 2.726e-02, 9.876e-02, -1.036e-02, -1.324e-01, -5.169e-01, -4.403e-01, -3.154e-01, 3.639e-02, -9.379e-02, -3.073e-01));
	r += mul(s0_4, M4(-4.034e-01, 9.226e-02, -1.024e-01, 3.514e-02, 5.154e-02, -4.513e-01, -2.764e-01, 7.610e-01, -3.774e-01, 7.788e-02, -5.542e-01, 2.353e-01, 2.362e-01, 6.319e-01, -4.518e-01, -1.486e-01));
	r += mul(s0_5, M4(-3.379e-01, 1.849e-02, -5.137e-02, -9.827e-02, 6.652e-02, -1.118e-01, 2.027e-01, 1.028e-03, -6.436e-02, -9.757e-02, -2.224e-02, -1.906e-01, -8.024e-02, -6.873e-02, 1.074e-01, 7.057e-02));
	r += mul(s0_6, M4(-1.575e-01, 6.410e-02, -1.615e-02, -8.089e-02, -1.120e-02, -1.045e-02, -3.027e-02, 2.325e-03, 3.296e-02, 6.413e-02, 1.319e-02, -2.321e-01, 1.050e-01, -4.733e-02, 6.059e-02, -2.172e-01));
	r += mul(s0_7, M4(-3.629e-03, 5.388e-02, -1.958e-01, 1.112e-01, 4.306e-03, 7.703e-02, -3.816e-02, 2.582e-01, 6.269e-02, 5.996e-02, 5.653e-02, -3.715e-02, -1.537e-01, -6.910e-02, 2.009e-02, 6.329e-02));
	r += mul(s0_8, M4(-6.207e-02, -8.740e-03, 8.625e-02, -5.698e-02, 1.192e-02, -6.841e-02, 1.072e-01, -6.417e-02, 6.040e-02, 4.430e-02, -1.204e-02, 5.204e-02, 1.673e-02, 7.465e-02, -4.767e-02, 7.018e-02));
	r += mul(s1_0, M4(1.125e-01, 8.110e-02, -1.793e-01, -1.363e-01, -1.157e-01, 1.582e-02, 1.177e-02, -1.266e-01, -6.721e-02, 1.663e-02, 4.090e-02, 2.036e-01, 4.073e-01, -1.033e-01, 1.726e-01, -1.525e-01));
	r += mul(s1_1, M4(8.402e-01, 1.870e-01, -4.581e-02, 2.804e-01, 1.189e-01, -9.728e-02, 1.088e-01, -7.031e-03, -4.081e-01, 5.717e-03, -2.793e-02, 3.333e-02, 8.122e-01, 9.068e-02, -5.459e-02, -2.745e-01));
	r += mul(s1_2, M4(2.178e-01, 8.463e-02, -7.667e-02, 2.341e-01, 1.328e-01, -3.035e-02, -1.375e-02, -9.762e-02, -2.359e-01, -4.637e-03, -3.701e-02, -4.907e-02, -1.703e-01, -2.006e-02, 2.827e-02, 1.208e-02));
	r += mul(s1_3, M4(4.550e-01, 5.593e-02, -3.033e-01, -2.058e-01, 2.066e-01, -5.994e-02, -1.409e-01, -6.077e-02, -1.910e-01, -3.172e-01, -2.572e-01, -2.606e-01, -9.701e-01, 7.414e-02, -7.631e-02, 8.330e-01));
	r += mul(s1_4, M4(5.398e-01, -7.729e-02, -3.509e-01, 3.460e-01, 5.280e-03, -4.954e-01, -3.058e-01, 1.087e+00, -6.549e-02, 2.213e-01, -4.466e-01, 4.124e-01, 2.907e-01, 8.153e-01, -5.057e-01, -1.874e-01));
	r += mul(s1_5, M4(4.713e-01, -1.352e-01, -8.603e-02, 3.036e-01, -1.996e-01, -7.157e-02, 6.989e-02, -1.577e-01, -1.662e-01, -4.233e-02, 1.008e-01, 4.431e-02, -2.357e-02, 7.264e-02, -6.548e-02, 7.119e-02));
	r += mul(s1_6, M4(5.690e-01, -1.189e-01, -3.546e-01, -2.549e-02, -9.486e-03, -1.403e-01, -8.705e-02, -1.854e-01, -9.372e-02, 2.191e-02, 1.109e-02, -7.049e-02, 1.467e-01, 1.067e-01, -7.332e-02, -2.114e-02));
	r += mul(s1_7, M4(3.363e-01, -3.799e-01, -1.325e-01, 1.410e-01, -5.645e-02, -1.030e-01, -2.355e-01, 9.298e-02, -5.498e-02, -8.262e-02, 4.374e-03, 1.333e-02, 2.455e-01, 1.992e-01, 9.308e-02, -3.370e-02));
	r += mul(s1_8, M4(1.670e-01, -2.698e-01, -6.470e-02, 6.401e-02, -5.073e-02, 1.273e-02, -1.533e-02, -1.006e-01, -7.468e-03, 3.230e-02, -7.305e-02, 2.527e-02, 1.769e-01, 9.227e-02, -5.842e-02, 6.061e-02));
	r += V4(1.059e-02, 1.369e-03, -1.193e-02, 3.709e-04);
	return r;
}
void Pass5(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 6
//!DESC CuNNy-8x4C-CHROMA-NVL-DN-conv4
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-2.392e-02, 2.814e-02, -8.609e-02, 4.949e-02, -1.343e-01, 1.414e-01, -3.367e-02, 3.017e-01, -5.855e-02, -1.046e-01, 1.144e-03, 1.323e-01, 8.483e-02, -5.686e-02, -9.068e-02, 2.338e-01));
	r += mul(s0_1, M4(3.005e-02, 8.790e-02, -6.048e-02, 1.574e-01, -2.300e-01, 1.006e+00, 1.526e-01, -2.505e-01, 1.125e-01, 8.089e-03, 1.113e-01, -4.767e-01, -1.481e-01, -2.079e-01, -2.004e-01, -1.552e-01));
	r += mul(s0_2, M4(-4.138e-02, 4.126e-03, -2.024e-02, 1.243e-01, -3.837e-02, 1.796e-01, 2.173e-01, -2.976e-01, -4.587e-02, -1.987e-01, -1.256e-01, -3.801e-01, -1.648e-01, 7.447e-02, 3.840e-02, 1.290e-01));
	r += mul(s0_3, M4(-1.245e-01, 7.358e-03, 1.061e-01, 9.956e-02, 1.191e-01, 1.647e-01, 1.434e-01, 1.053e-01, -9.200e-02, 5.715e-03, 5.903e-02, 1.611e-02, -1.303e-01, 3.598e-02, 1.560e-02, 2.121e-01));
	r += mul(s0_4, M4(-1.813e-02, 2.444e-01, 2.252e-01, 8.301e-02, -8.902e-01, 8.452e-02, -3.027e-01, -2.015e-01, 1.675e-01, 2.102e-01, 1.414e-01, -1.583e-01, -8.203e-02, 1.175e-02, 2.300e-01, -9.656e-02));
	r += mul(s0_5, M4(1.285e-01, -7.184e-02, 2.329e-02, -8.490e-02, -2.144e-01, -3.915e-03, 6.783e-01, 1.234e-01, -3.417e-01, -2.388e-02, 1.665e-01, 1.092e-01, -4.100e-01, -2.946e-01, 9.167e-02, 4.260e-01));
	r += mul(s0_6, M4(1.165e-01, 5.326e-02, -2.451e-02, 3.447e-02, 7.863e-02, -2.519e-02, -9.892e-02, -9.892e-02, 1.169e-01, 7.876e-02, -9.188e-03, 9.679e-02, -1.071e-01, 8.338e-03, -6.827e-03, 1.982e-01));
	r += mul(s0_7, M4(1.202e-01, 8.751e-03, -1.861e-01, 3.111e-02, 1.801e-01, -5.973e-02, 3.529e-02, -7.813e-02, -6.124e-01, 3.806e-02, -1.846e-01, -2.189e-01, 2.638e-01, -7.425e-02, -7.031e-02, -7.633e-02));
	r += mul(s0_8, M4(6.620e-03, 1.321e-01, 3.737e-02, 4.831e-02, 1.295e-01, 1.241e-02, 7.701e-02, 4.163e-02, -3.135e-01, 3.317e-02, -7.213e-02, 4.124e-02, -3.949e-03, -1.199e-02, -6.330e-02, 2.027e-01));
	r += mul(s1_0, M4(-1.159e-01, 9.032e-02, 1.392e-02, -1.243e-02, -2.359e-01, -2.339e-02, -8.360e-03, 3.245e-02, -8.004e-02, -1.635e-01, 8.811e-03, 1.385e-01, 8.092e-02, 6.378e-02, 2.399e-02, -1.411e-01));
	r += mul(s1_1, M4(-4.043e-02, 1.431e-01, -2.396e-02, 2.573e-01, -1.223e-01, 4.717e-01, -3.962e-02, 3.855e-01, 2.283e-02, 1.236e-02, 1.941e-01, -3.818e-01, -4.716e-02, 4.506e-02, -1.114e-01, -3.294e-01));
	r += mul(s1_2, M4(-8.565e-02, 1.236e-01, 5.040e-02, 1.755e-01, -8.217e-02, -4.482e-01, 5.874e-02, -1.977e-01, -1.386e-02, -4.014e-01, -4.354e-02, -1.180e-01, -3.171e-03, 7.470e-02, -1.790e-02, -1.634e-01));
	r += mul(s1_3, M4(-2.650e-01, 1.787e-01, 1.528e-01, 3.294e-01, 1.901e-01, 6.717e-02, 7.375e-03, 2.481e-01, 2.176e-02, -8.205e-02, -8.371e-02, 2.140e-01, -3.944e-02, 3.237e-02, 3.997e-02, -6.320e-02));
	r += mul(s1_4, M4(-1.544e-01, 5.236e-01, 1.791e-01, -2.045e-02, 2.469e-01, -1.428e-01, -6.777e-01, -4.757e-01, 2.596e-01, 3.016e-01, 1.550e-02, 1.600e-01, -2.668e-01, 1.207e-01, 8.941e-02, -1.260e-01));
	r += mul(s1_5, M4(6.199e-03, 2.739e-02, 1.796e-01, 1.218e-02, -7.798e-02, -1.082e-01, 3.890e-01, 2.811e-01, 7.488e-02, 1.882e-01, 2.171e-01, 2.367e-01, -3.344e-01, 2.236e-03, -1.842e-02, -1.808e-01));
	r += mul(s1_6, M4(-1.634e-01, 1.233e-01, 9.985e-02, 2.088e-01, -1.751e-01, -1.699e-02, -8.051e-02, -1.592e-01, 7.251e-02, -3.179e-02, -2.378e-02, 3.336e-02, 7.005e-02, 2.271e-02, -5.873e-02, -6.050e-02));
	r += mul(s1_7, M4(-1.743e-01, 7.485e-02, 4.585e-03, 2.933e-02, 3.618e-01, -1.334e-01, 1.974e-01, 4.879e-02, 2.576e-02, -7.320e-02, -3.544e-01, -5.499e-02, -2.636e-02, -3.163e-02, -5.461e-03, -1.274e-01));
	r += mul(s1_8, M4(-1.416e-01, 1.042e-01, 1.606e-01, 9.271e-02, 8.289e-02, -3.714e-02, 3.196e-02, 4.410e-02, 2.664e-01, -1.004e-01, 7.397e-02, 1.503e-02, -1.551e-01, 5.108e-02, 1.736e-01, 1.150e-01));
	r += V4(3.535e-02, 4.077e-03, 1.688e-04, 6.486e-03);
	return r;
}
void Pass6(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 7
//!DESC CuNNy-8x4C-CHROMA-NVL-DN-conv5
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(3.381e-02, 2.767e-02, -2.473e-01, -4.798e-02, 1.886e-03, -7.808e-02, 5.331e-02, 1.189e-02, -1.241e-01, 2.664e-02, -1.431e-01, -1.045e-01, -7.626e-02, 2.166e-02, -1.061e-01, -5.039e-02));
	r += mul(s0_1, M4(8.863e-03, 2.880e-02, -6.549e-01, 1.045e-01, 4.378e-02, 2.318e-02, -1.312e-02, -9.561e-02, -1.685e-02, -6.684e-02, 2.326e-01, 7.155e-02, -6.598e-02, 5.790e-04, -5.842e-02, -1.953e-03));
	r += mul(s0_2, M4(1.438e-02, 1.724e-01, -2.243e-01, 4.775e-01, -3.330e-02, -4.647e-02, 9.118e-02, -9.321e-02, 1.471e-01, 5.402e-03, 1.200e-01, -4.391e-02, -8.891e-04, 1.116e-02, 2.167e-02, 8.519e-02));
	r += mul(s0_3, M4(6.813e-02, 6.864e-02, 2.810e-02, -6.535e-02, -5.103e-02, -9.474e-02, -1.187e-02, 1.278e-02, -5.058e-02, 5.911e-03, 1.322e-01, -2.390e-01, 1.549e-02, 8.482e-02, 1.001e-01, -2.202e-02));
	r += mul(s0_4, M4(3.231e-01, 5.044e-01, -4.031e-01, 3.222e-01, -2.501e-01, 2.339e-01, -7.137e-01, 9.982e-02, 6.917e-01, -2.374e-02, -1.573e-01, -1.369e-01, 1.544e-01, 2.763e-02, -1.141e-01, 1.704e-01));
	r += mul(s0_5, M4(1.456e-01, 1.826e-01, -3.506e-01, 4.952e-01, -9.505e-02, -3.924e-03, -4.884e-02, 6.795e-02, -9.726e-02, -8.445e-02, 7.542e-02, 1.177e-01, 1.834e-01, 1.545e-02, -4.211e-02, 2.485e-01));
	r += mul(s0_6, M4(5.529e-02, 1.128e-02, 5.603e-02, -2.591e-02, 1.597e-01, -1.261e-02, 4.531e-02, -3.919e-02, 5.395e-02, -1.186e-01, 4.877e-02, -7.501e-02, 9.252e-02, -2.096e-01, 7.040e-02, 2.381e-02));
	r += mul(s0_7, M4(4.677e-02, 1.353e-01, 1.154e-01, 5.427e-02, -5.607e-03, 3.204e-01, 7.619e-02, 1.872e-02, -4.259e-02, 7.918e-02, -1.240e-02, -1.331e-01, 1.473e-01, -1.624e-01, 1.343e-01, 2.897e-02));
	r += mul(s0_8, M4(-5.344e-03, 1.688e-01, -1.152e-02, -3.857e-02, -7.755e-02, -3.983e-02, 6.072e-02, 1.388e-01, -4.802e-02, -5.432e-02, 5.769e-03, -5.824e-02, 3.137e-02, 4.293e-02, 7.089e-02, 1.491e-01));
	r += mul(s1_0, M4(-7.686e-02, -1.924e-02, 1.092e-01, 5.189e-02, 2.505e-02, 1.522e-02, -1.254e-01, 8.177e-02, -5.108e-02, 1.800e-01, 1.357e-01, -3.202e-02, 2.940e-02, 4.492e-02, -9.959e-03, 4.821e-02));
	r += mul(s1_1, M4(-2.250e-01, 5.918e-02, -4.112e-01, 1.580e-01, -1.255e-01, 7.197e-02, -2.155e-01, -3.018e-02, -1.021e-01, 2.412e-02, -1.981e-02, -2.869e-02, 9.256e-02, 2.065e-02, 8.136e-03, -4.725e-02));
	r += mul(s1_2, M4(-1.633e-01, 8.028e-02, -1.576e-01, 1.621e-01, -4.753e-02, -4.826e-02, -3.449e-04, 3.308e-02, 1.704e-02, -3.462e-02, 1.845e-01, 8.289e-02, 6.958e-02, 1.487e-02, -4.293e-02, 5.851e-02));
	r += mul(s1_3, M4(9.064e-02, -2.610e-03, 1.296e-02, 4.982e-02, -5.659e-03, -1.756e-01, -2.200e-02, 1.530e-02, 1.116e-01, 3.936e-01, -2.571e-02, -1.445e-02, 1.304e-01, -2.508e-02, -2.463e-02, -1.361e-01));
	r += mul(s1_4, M4(-7.967e-03, 4.389e-01, 9.468e-02, -1.683e-01, -2.496e-01, 3.658e-01, -4.171e-01, 3.102e-01, 5.495e-01, 1.781e-01, -3.632e-01, 3.462e-01, 5.572e-01, 4.148e-02, 2.544e-01, 3.164e-01));
	r += mul(s1_5, M4(-1.091e-01, 4.263e-02, -3.399e-02, 1.249e-01, -1.110e-01, 1.368e-01, -2.614e-01, 1.011e-01, -7.248e-02, -3.964e-02, -6.767e-02, 3.838e-01, 3.605e-01, 7.711e-02, -4.305e-02, 1.770e-01));
	r += mul(s1_6, M4(-1.647e-02, -2.961e-02, -3.551e-02, -7.782e-03, -2.862e-02, -2.088e-01, -1.165e-01, -2.227e-04, 3.873e-02, 2.136e-02, 7.698e-02, -1.268e-01, 2.477e-02, 6.060e-02, 1.101e-01, 3.254e-02));
	r += mul(s1_7, M4(-2.317e-02, -1.730e-03, 3.747e-02, 7.745e-02, -6.437e-01, 1.354e-01, 1.993e-01, -7.703e-01, -1.086e-01, 2.049e-01, 6.627e-02, -1.882e-01, -1.178e-02, -4.892e-01, 3.012e-01, 2.907e-01));
	r += mul(s1_8, M4(3.615e-02, 6.442e-02, 1.466e-02, -1.294e-02, 3.774e-02, 8.638e-02, 3.866e-02, -3.232e-01, -1.656e-01, -9.050e-03, 3.296e-02, 1.077e-02, 3.893e-01, 1.039e-01, 1.923e-02, -4.179e-02));
	r += V4(-6.567e-04, -3.314e-03, 1.606e-02, 1.910e-03);
	return r;
}
void Pass7(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 8
//!DESC CuNNy-8x4C-CHROMA-NVL-DN-conv6
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-4.795e-02, 8.530e-02, -1.214e-01, -7.750e-02, -8.510e-02, -2.028e-02, -2.857e-02, -4.628e-02, 6.888e-02, -1.047e-01, -2.950e-02, 1.339e-01, 6.993e-03, 1.864e-02, -8.517e-02, 1.222e-01));
	r += mul(s0_1, M4(-5.759e-03, -2.549e-01, 3.296e-02, 2.350e-01, -1.676e-01, -3.665e-02, -3.469e-01, -2.765e-01, -3.527e-02, 1.429e-02, -1.919e-01, -2.152e-01, 9.117e-02, -7.582e-02, 4.849e-02, 6.359e-02));
	r += mul(s0_2, M4(4.179e-02, 1.213e-01, -9.069e-03, -2.181e-01, -4.754e-02, -3.174e-01, -1.412e-01, -7.375e-02, 5.479e-03, -1.665e-01, 2.421e-03, 2.836e-01, -1.378e-02, 3.956e-03, -1.089e-02, 5.254e-02));
	r += mul(s0_3, M4(-1.781e-01, 5.775e-02, -5.320e-02, 1.780e-02, -3.109e-02, -3.123e-02, -1.758e-02, 9.737e-02, 1.868e-01, -2.746e-01, 5.107e-01, -1.584e-01, -3.829e-02, 3.158e-01, -1.002e-01, -7.166e-02));
	r += mul(s0_4, M4(4.430e-01, 4.882e-01, -5.151e-01, -2.097e-01, 5.764e-01, -2.014e-01, 3.718e-02, -7.941e-02, 4.743e-02, 2.517e-01, 8.275e-02, 2.339e-01, 1.159e-01, 3.287e-01, 2.326e-01, 4.216e-01));
	r += mul(s0_5, M4(-1.770e-01, -2.567e-01, -9.984e-02, 2.377e-01, 5.490e-01, 5.839e-01, 7.190e-02, -4.099e-01, 3.135e-01, 5.578e-02, 1.860e-01, -3.799e-01, -4.924e-02, -1.482e-03, 4.077e-02, -8.740e-02));
	r += mul(s0_6, M4(1.230e-01, -9.535e-02, 2.411e-01, 7.869e-02, -1.579e-02, -1.662e-02, 7.076e-02, 1.346e-02, 2.055e-01, -1.416e-01, -1.420e-01, -4.675e-02, 1.016e-02, 1.776e-02, -5.034e-02, -4.032e-02));
	r += mul(s0_7, M4(1.916e-01, -2.060e-03, 6.518e-02, -1.024e-01, 3.354e-02, -5.291e-02, 1.345e-02, -2.522e-02, 1.483e-01, -6.868e-01, 7.881e-02, -1.861e-02, 4.401e-02, 1.068e-01, -9.498e-02, -6.817e-02));
	r += mul(s0_8, M4(1.301e-01, 1.004e-01, 9.204e-02, 4.457e-02, -1.676e-01, 2.176e-02, 3.592e-03, 1.304e-01, 2.144e-01, -4.518e-02, 4.353e-02, -2.378e-01, -6.749e-02, 2.320e-02, 1.330e-02, 8.612e-02));
	r += mul(s1_0, M4(5.297e-02, 6.753e-02, 1.199e-01, 1.612e-02, -8.156e-02, 8.507e-02, -1.189e-01, -7.919e-02, -8.839e-03, -3.515e-03, -3.877e-02, -4.951e-03, 2.599e-02, 8.233e-02, -1.557e-01, -7.740e-03));
	r += mul(s1_1, M4(-1.788e-02, -3.476e-01, 1.841e-01, -7.215e-02, -7.598e-02, -5.058e-02, -1.823e-01, -2.488e-01, -3.246e-02, 2.516e-02, -1.367e-02, 4.501e-02, 8.130e-02, 2.842e-03, -1.341e-01, 1.651e-01));
	r += mul(s1_2, M4(2.803e-03, -3.966e-02, 9.248e-02, -5.716e-02, -6.202e-02, -2.646e-01, -8.707e-02, 2.474e-01, 1.640e-02, -7.199e-02, -2.899e-02, -1.271e-01, 6.550e-02, -2.817e-02, -1.050e-01, 1.626e-01));
	r += mul(s1_3, M4(-3.498e-01, -4.075e-02, -8.631e-02, 5.408e-02, -3.836e-02, -2.690e-02, 6.787e-02, 5.114e-02, -3.443e-02, 5.154e-02, -1.444e-03, -3.030e-02, -2.976e-01, 1.871e-01, -7.656e-01, -2.059e-01));
	r += mul(s1_4, M4(6.073e-01, -1.300e-01, -2.607e-02, -2.580e-01, 7.953e-01, -5.654e-02, 1.862e-01, -4.121e-01, 3.732e-02, -1.588e-01, -1.246e-01, -4.012e-02, 7.094e-02, 1.102e-01, 4.426e-01, 4.736e-01));
	r += mul(s1_5, M4(-1.624e-01, -2.958e-01, 7.969e-02, -3.092e-01, 5.265e-01, 4.630e-01, 5.371e-02, -2.502e-01, 2.793e-03, -9.259e-02, 1.668e-02, -2.698e-01, 9.545e-02, 5.520e-02, -4.210e-02, -4.251e-01));
	r += mul(s1_6, M4(1.470e-01, -6.251e-02, 3.396e-01, 3.655e-02, -4.791e-02, 7.405e-02, -1.460e-01, -4.118e-02, -3.408e-02, -4.814e-02, 6.067e-02, 8.447e-02, -6.757e-02, 5.987e-02, -1.488e-01, 4.282e-03));
	r += mul(s1_7, M4(1.362e-01, -7.257e-02, 1.519e-01, -1.805e-01, 1.851e-01, -4.455e-02, -4.797e-03, -7.913e-03, 1.263e-01, -1.920e-01, -8.078e-02, -1.089e-01, 1.368e-01, 1.196e-01, -3.198e-02, 1.193e-01));
	r += mul(s1_8, M4(8.552e-02, -2.098e-02, -1.744e-02, -1.167e-01, -2.432e-01, -1.294e-01, -4.075e-02, 1.113e-01, 1.790e-01, 1.417e-01, 2.630e-02, -1.304e-01, 5.107e-02, -1.641e-02, 3.632e-03, 6.274e-02));
	r += V4(-8.938e-03, 2.568e-03, 2.791e-03, 2.341e-03);
	return r;
}
void Pass8(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 9
//!DESC CuNNy-8x4C-CHROMA-NVL-DN-conv7
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(2.934e-02, -4.404e-02, -5.833e-02, -1.223e-01, -1.050e-01, 2.195e-02, -8.318e-03, 2.875e-02, -5.604e-02, 3.571e-02, 8.338e-04, 5.697e-04, -1.188e-02, 1.270e-02, -1.210e-02, -3.772e-02));
	r += mul(s0_1, M4(-2.843e-02, 2.300e-01, -1.580e-01, -1.445e-01, 1.450e-01, -5.166e-03, -1.296e-02, -8.409e-02, 1.538e-01, 6.360e-02, 7.159e-03, 5.422e-02, -5.318e-02, 3.732e-03, 2.528e-03, -1.859e-02));
	r += mul(s0_2, M4(2.478e-01, 1.096e-01, -1.504e-01, -6.922e-02, -1.352e-01, -5.044e-02, 7.302e-02, -1.666e-02, -7.202e-02, 1.545e-03, 3.311e-02, -4.530e-02, 3.696e-02, 1.075e-02, -2.037e-03, 1.137e-02));
	r += mul(s0_3, M4(-3.195e-02, 4.010e-02, 1.365e-02, 9.008e-02, 6.236e-03, -1.145e-01, -8.129e-03, -6.609e-02, -4.232e-02, -4.745e-02, -5.893e-02, -5.453e-02, 3.289e-02, 1.013e-01, 2.902e-05, 1.284e-01));
	r += mul(s0_4, M4(4.945e-01, -2.315e-01, -2.476e-01, -3.202e-01, -7.277e-02, 3.378e-01, -4.638e-01, -5.019e-01, -3.878e-01, 6.387e-01, -1.902e-01, -3.489e-03, 4.634e-01, 1.034e-01, -2.846e-02, 1.257e-01));
	r += mul(s0_5, M4(2.186e-02, 1.208e-01, -3.955e-01, -1.865e-03, -2.143e-01, -9.741e-02, 9.302e-02, -4.808e-03, -8.392e-02, 6.040e-02, -1.444e-01, 2.290e-01, 6.516e-02, -2.824e-02, -5.666e-03, 2.466e-02));
	r += mul(s0_6, M4(-5.424e-03, 5.222e-02, 1.750e-02, 1.754e-02, -3.309e-02, -1.101e-02, -3.201e-03, 1.771e-03, 9.238e-03, -2.922e-02, 3.184e-02, -3.135e-02, -5.921e-02, 8.500e-02, -4.937e-03, 3.377e-02));
	r += mul(s0_7, M4(-2.227e-02, 3.619e-02, 2.196e-01, 9.206e-02, 6.008e-02, -6.129e-02, 4.282e-02, -8.325e-03, -5.727e-02, 2.959e-01, -5.589e-02, -8.409e-02, 1.422e-01, -2.376e-01, -7.692e-02, -1.178e-01));
	r += mul(s0_8, M4(2.594e-02, -7.006e-02, 2.036e-01, 1.021e-01, -7.565e-02, 9.725e-02, -1.221e-02, 8.579e-02, -2.537e-02, 1.083e-01, -1.248e-01, -1.392e-01, 7.523e-02, -3.741e-02, -3.497e-03, -5.615e-02));
	r += mul(s1_0, M4(1.265e-01, -4.635e-02, -5.509e-02, -6.564e-02, -6.217e-02, 5.137e-02, 2.632e-03, 3.920e-02, -7.838e-02, 2.298e-02, 3.897e-02, 3.582e-02, -2.285e-01, 1.534e-01, 1.256e-01, -3.378e-02));
	r += mul(s1_1, M4(2.149e-01, 1.283e-01, -3.549e-03, -3.531e-01, 3.018e-01, 1.062e-01, 8.074e-02, 3.412e-02, 2.029e-01, -9.057e-02, 1.345e-02, -5.508e-02, 3.567e-02, 1.343e-01, 3.473e-02, 4.305e-03));
	r += mul(s1_2, M4(1.430e-01, -2.261e-03, 4.920e-02, -1.674e-01, -8.374e-02, -1.341e-01, -2.992e-02, 6.123e-03, -1.172e-01, -5.164e-02, -4.268e-02, -1.284e-01, -1.998e-02, 3.348e-02, -3.880e-02, 5.388e-02));
	r += mul(s1_3, M4(8.347e-03, 7.588e-02, -3.328e-02, 4.189e-02, 1.983e-02, -5.774e-02, -5.626e-02, -2.359e-02, 2.937e-02, -1.175e-01, 2.765e-02, -1.178e-01, -1.548e-01, 9.661e-02, 7.468e-02, 6.474e-02));
	r += mul(s1_4, M4(6.250e-01, -6.686e-01, -5.458e-01, -4.405e-01, -1.823e-01, -1.153e-01, -9.434e-01, -2.300e-01, -3.875e-01, 3.838e-01, -2.783e-01, -5.596e-02, 5.647e-01, 6.879e-01, -3.516e-02, 3.975e-01));
	r += mul(s1_5, M4(-7.689e-03, -1.677e-02, -1.614e-01, 1.880e-01, -2.924e-01, -5.498e-02, -3.615e-02, -1.567e-01, 2.205e-01, 3.992e-02, 1.821e-01, 3.362e-02, -3.819e-02, -7.840e-02, 1.724e-01, 4.928e-02));
	r += mul(s1_6, M4(1.168e-02, 4.828e-04, -9.581e-03, -1.557e-02, 9.492e-03, -1.062e-01, -1.473e-01, -8.410e-02, 6.048e-02, -1.227e-01, -5.395e-02, -1.484e-01, -2.033e-01, 2.748e-01, 3.135e-01, 2.064e-01));
	r += mul(s1_7, M4(6.942e-02, -1.581e-01, 1.829e-02, -1.173e-01, 1.514e-01, 3.384e-02, -9.743e-02, -2.930e-01, -5.758e-02, 1.333e-01, -1.978e-01, -1.152e-01, 1.748e-01, 2.243e-02, 2.845e-01, -8.502e-02));
	r += mul(s1_8, M4(1.025e-01, -6.756e-02, 3.453e-02, -9.480e-02, -9.056e-02, 1.082e-01, -7.267e-02, 3.517e-04, 6.450e-02, 3.098e-02, -2.805e-01, -2.049e-01, 1.568e-01, -2.801e-02, 7.816e-02, -4.402e-02));
	r += V4(5.256e-03, -2.560e-03, -4.294e-03, -7.068e-03);
	return r;
}
void Pass9(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 10
//!DESC CuNNy-8x4C-CHROMA-NVL-DN-conv8
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-9.943e-04, 4.823e-02, -3.061e-02, 5.673e-02, -2.212e-02, 7.193e-02, 5.571e-03, 1.044e-01, 5.680e-02, -1.828e-01, 7.786e-03, -6.814e-02, -1.679e-02, -2.380e-02, -2.916e-02, -2.732e-02));
	r += mul(s0_1, M4(-4.927e-02, 1.100e-01, 5.015e-02, 9.028e-02, 6.617e-02, -7.790e-02, 7.126e-02, -6.050e-03, 9.572e-02, -3.972e-01, -1.547e-01, 3.137e-01, -2.779e-01, 3.756e-01, 1.215e-01, 8.095e-01));
	r += mul(s0_2, M4(-6.149e-02, -4.814e-02, 5.021e-02, -1.011e-01, 6.893e-02, 1.628e-02, -8.717e-02, 1.782e-01, 7.520e-02, -3.155e-01, -1.835e-01, -2.194e-01, -1.407e-01, -2.456e-01, 8.795e-02, -2.328e-01));
	r += mul(s0_3, M4(-4.974e-02, -1.010e-01, -5.943e-02, 9.444e-03, -7.119e-02, -1.264e-01, -4.942e-02, -3.138e-02, -4.815e-02, 1.111e-01, 2.101e-02, -5.387e-02, 1.605e-01, -2.272e-01, 2.079e-02, 5.005e-02));
	r += mul(s0_4, M4(-7.399e-02, -1.304e-02, 3.456e-02, 3.183e-01, -6.433e-02, 1.823e-01, 5.606e-02, 1.104e-01, -1.239e+00, -1.224e+00, -3.831e-01, 2.118e-02, 2.627e-01, 6.932e-01, -1.063e-01, -2.588e-01));
	r += mul(s0_5, M4(9.500e-02, -1.316e-02, 6.180e-03, -1.883e-02, 8.976e-02, -6.510e-02, -6.102e-01, -7.622e-02, 2.781e-01, 1.125e-01, -2.237e-01, 8.087e-02, 1.910e-01, -2.673e-02, 5.957e-01, -4.149e-02));
	r += mul(s0_6, M4(2.252e-02, 6.914e-03, -6.971e-03, -5.416e-02, 6.135e-02, 2.362e-02, 3.355e-02, -2.960e-03, 9.676e-03, -4.473e-02, -3.552e-02, 2.147e-02, -6.613e-02, 5.127e-02, 4.367e-02, -5.215e-02));
	r += mul(s0_7, M4(-3.429e-03, -1.421e-01, 1.143e-02, -2.882e-02, 3.135e-02, -7.495e-02, 2.386e-02, 4.529e-02, -8.276e-02, -2.382e-01, -1.638e-01, 2.087e-02, 1.570e-01, 2.005e-01, 2.337e-01, 2.723e-02));
	r += mul(s0_8, M4(-6.008e-02, 6.114e-02, 5.117e-03, -3.723e-02, 5.370e-03, -4.912e-02, -1.157e-01, 4.679e-03, -5.540e-02, 5.960e-02, -3.502e-02, -3.674e-02, 1.948e-03, -1.075e-02, 4.163e-02, 1.056e-02));
	r += mul(s1_0, M4(-7.967e-03, 1.788e-02, -1.509e-02, -3.034e-03, 3.619e-02, -2.909e-01, -6.348e-02, 1.111e-01, 2.573e-02, -6.859e-02, 1.770e-02, -7.855e-02, -1.137e-02, 3.594e-02, -1.510e-02, -6.827e-03));
	r += mul(s1_1, M4(-2.090e-02, 4.876e-02, 5.041e-02, 1.357e-02, 1.204e-01, -1.317e-01, -9.164e-02, -1.203e-01, 1.248e-01, 1.309e-01, -3.361e-02, 1.876e-01, -1.567e-01, 3.765e-02, 4.721e-02, 9.076e-02));
	r += mul(s1_2, M4(-1.729e-02, -5.083e-04, 1.627e-02, -9.165e-03, -2.722e-02, 2.461e-02, 4.890e-02, 9.487e-02, 3.964e-02, -3.558e-03, -6.696e-02, 1.972e-02, -3.943e-02, -6.238e-02, 2.694e-02, -1.470e-01));
	r += mul(s1_3, M4(9.805e-02, -4.478e-02, -1.527e-04, -2.263e-02, 1.174e-01, -2.343e-01, 5.658e-02, -1.454e-01, -3.106e-02, 1.567e-01, 2.342e-02, 1.207e-03, 5.673e-04, -1.028e-01, -5.913e-02, -5.171e-02));
	r += mul(s1_4, M4(1.739e-01, -1.251e-01, -3.921e-02, 8.445e-01, -2.842e-01, 7.204e-01, 1.763e-01, 1.655e-01, -2.842e-01, -1.590e-01, 1.646e-01, 1.781e-01, 2.061e-01, -6.841e-02, -9.963e-02, 6.520e-02));
	r += mul(s1_5, M4(1.732e-01, 6.044e-03, -1.867e-01, 2.970e-02, -7.299e-02, 1.604e-01, -7.226e-02, 3.796e-02, 4.577e-02, 7.529e-03, -2.349e-01, -5.146e-02, 5.245e-02, 4.022e-02, 2.225e-01, -9.938e-02));
	r += mul(s1_6, M4(7.888e-02, -7.197e-02, 5.945e-02, 1.182e-02, 2.979e-01, 2.148e-01, 2.588e-01, 9.454e-02, -6.303e-05, -7.476e-02, -5.505e-02, -1.221e-03, 8.443e-03, 6.869e-02, 2.213e-02, -2.597e-02));
	r += mul(s1_7, M4(4.893e-01, 2.395e-01, 3.247e-01, 1.371e-01, 1.204e-01, -4.069e-01, -2.149e-01, 3.595e-02, -1.627e-02, -3.066e-03, -4.785e-02, -4.156e-03, 1.564e-02, -2.756e-03, 1.238e-01, 2.532e-02));
	r += mul(s1_8, M4(6.274e-02, -5.235e-02, -3.426e-01, -1.033e-01, 3.214e-02, -3.065e-01, -3.877e-01, -4.117e-02, -2.472e-02, 2.340e-02, -1.340e-02, -2.002e-02, 4.363e-02, 4.197e-02, 1.694e-02, 8.260e-03));
	r += V4(-3.042e-03, -9.903e-03, 1.598e-04, -1.478e-03);
	return r;
}
void Pass10(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 11
//!DESC CuNNy-8x4C-CHROMA-NVL-DN-out
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(5.345e-03, 4.266e-02, -4.783e-02, 1.556e-02, -1.854e-02, -8.550e-03, 5.250e-03, -5.725e-03, 1.521e-02, 7.027e-02, -1.217e-01, 8.228e-02, 1.290e-02, 1.137e-02, 1.366e-02, 4.461e-03));
	r += mul(s0_1, M4(-3.133e-02, 1.376e-03, 1.157e-02, -1.055e-02, 2.560e-02, -7.266e-02, -1.839e-02, 4.583e-02, -2.816e-02, -2.144e-03, 4.903e-03, -4.437e-02, -2.508e-02, 1.515e-02, 2.795e-04, 1.151e-02));
	r += mul(s0_2, M4(4.138e-02, 3.532e-03, 2.020e-02, -1.671e-02, -2.970e-03, 1.682e-03, 5.425e-03, 3.334e-02, 1.859e-02, -1.560e-02, -9.713e-04, -2.671e-02, 1.198e-02, -2.423e-02, 4.896e-03, -9.829e-03));
	r += mul(s0_3, M4(-5.918e-01, -1.416e-02, 4.482e-01, -1.588e-01, -4.412e-03, -4.031e-02, -1.067e-01, -2.388e-03, 8.625e-01, -4.844e-01, 9.744e-01, -4.111e-01, -3.344e-03, -4.253e-02, 1.962e-02, 6.638e-04));
	r += mul(s0_4, M4(1.964e-01, -4.678e-01, 2.140e-01, 7.931e-01, -6.013e-01, 1.204e-01, -1.948e-01, -2.637e-01, -1.966e-02, 1.665e-01, -3.235e-02, 1.681e-01, 3.115e-01, 3.290e-01, -4.575e-02, 1.997e-02));
	r += mul(s0_5, M4(-1.043e-01, -3.535e-03, -1.806e-02, -5.912e-02, 1.619e-02, 2.179e-01, 5.296e-02, 4.735e-02, -5.213e-02, -4.040e-02, -1.358e-02, -1.237e-02, -6.818e-02, -6.119e-02, -4.038e-02, -9.124e-02));
	r += mul(s0_6, M4(-3.539e-02, -1.670e-02, -1.420e-02, 3.785e-02, 5.181e-02, 3.117e-03, 1.497e-01, -1.873e-02, -7.637e-02, 8.138e-02, -9.613e-02, -1.210e-01, 2.702e-02, -1.078e-01, 7.490e-02, -7.446e-02));
	r += mul(s0_7, M4(1.105e-01, 7.397e-02, -4.870e-02, -1.107e-01, 1.027e-01, 1.930e-01, -3.126e-01, 4.232e-01, -3.297e-02, -1.476e-01, -7.958e-02, -1.567e-01, -2.328e-01, 4.733e-02, 1.529e-01, 4.834e-01));
	r += mul(s0_8, M4(-1.344e-03, 2.789e-02, 1.750e-02, 1.838e-02, -5.481e-02, -4.432e-02, -3.082e-02, 1.912e-01, 1.839e-02, 1.378e-02, -3.150e-03, -1.463e-02, -7.994e-02, -2.095e-01, -4.324e-02, -2.026e-01));
	r += mul(s1_0, M4(-1.453e-02, -4.589e-03, 1.126e-02, 9.318e-03, -3.097e-02, 8.687e-03, -1.506e-02, -7.398e-03, 7.392e-02, 9.010e-02, -7.172e-02, 3.500e-02, 1.398e-02, -2.793e-03, 2.242e-02, -1.399e-02));
	r += mul(s1_1, M4(3.071e-02, 8.084e-02, -1.407e-03, -3.277e-03, 2.691e-02, -5.467e-02, 2.673e-02, -1.889e-03, 1.161e-02, 3.958e-02, -1.668e-02, -6.463e-02, -3.917e-02, 2.774e-02, -1.763e-02, -2.529e-02));
	r += mul(s1_2, M4(5.750e-02, -1.663e-02, 1.161e-03, -1.984e-02, -1.456e-02, 3.161e-02, 2.206e-03, 2.325e-02, 1.913e-02, -1.463e-02, -1.393e-02, -6.429e-02, 2.605e-03, -7.549e-02, -9.561e-03, -2.328e-02));
	r += mul(s1_3, M4(-1.909e-01, 1.439e-03, -1.820e-01, -8.413e-02, 6.430e-03, -2.750e-02, -1.554e-02, -2.833e-02, 2.022e-01, -2.032e-02, 4.754e-01, 6.150e-02, 1.636e-01, -1.887e-01, -1.655e-01, -2.618e-02));
	r += mul(s1_4, M4(5.995e-02, 1.467e-02, 2.812e-01, 3.157e-01, -4.249e-01, -3.821e-01, -1.212e-01, -1.172e-01, -8.273e-02, 2.108e-01, 4.649e-03, 4.604e-01, 8.810e-02, 5.163e-01, 4.941e-02, 4.212e-02));
	r += mul(s1_5, M4(-8.899e-03, -7.974e-02, -3.009e-02, -1.062e-01, 9.204e-02, 4.427e-02, 3.788e-02, 6.519e-02, -2.283e-02, -1.042e-01, 1.600e-02, -5.648e-02, -2.788e-02, -2.063e-02, -4.007e-02, -8.953e-02));
	r += mul(s1_6, M4(-3.670e-02, 2.471e-02, -1.415e-01, 1.215e-02, 7.202e-02, -1.790e-02, 1.548e-01, 1.408e-02, -6.882e-02, 1.537e-02, -1.714e-01, 1.853e-02, -6.421e-02, -1.214e-01, 2.917e-01, -1.899e-01));
	r += mul(s1_7, M4(8.472e-02, 1.790e-02, -3.564e-02, -1.572e-01, 4.035e-02, 9.448e-02, 9.944e-02, 2.059e-01, -3.851e-02, -1.313e-01, -1.323e-01, -3.054e-01, -3.634e-02, 5.943e-03, -1.008e-01, 3.408e-01));
	r += mul(s1_8, M4(1.637e-02, 3.735e-02, 1.483e-03, 1.078e-02, -4.078e-02, -1.474e-02, 2.143e-02, 5.813e-03, 1.192e-02, 2.061e-02, 2.020e-03, 2.181e-03, -5.327e-02, -9.105e-02, -4.428e-02, -1.051e-01));
	r += V4(-2.129e-03, -2.220e-03, 2.342e-03, 2.312e-03);
	return tanh(r);
}
void Pass11(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 12
//!DESC CuNNy-8x4C-CHROMA-NVL-DN-shuffle
//!STYLE PS
//!IN t1, INPUT, easu
float4 Pass12(float2 pos) {
	float2 pt = float2(GetInputPt());
	static const float3x3 rgb2yuv = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081};
	static const float3x3 yuv2rgb = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float4 r = 0.0;
	float2 size = float2(GetInputSize());
	float2 f = frac(pos * size);
	float3 yuv = mul(rgb2yuv, INPUT.SampleLevel(SL, pos, 0).rgb);
	int2 i = int2(f * 2.0);
	r.r = t1.SampleLevel(SP, (float2(0.5, 0.5) - f) * pt + pos, 0)[2*i.y + i.x];
	r.r += easu.SampleLevel(SP, pos, 0).r;
	r.a = 1.0;
	r.r = clamp(r, 0.0, 1.0);
	float3 px = mul(yuv2rgb, float3(r.r, yuv.yz));
	return float4(px, 1.0);
}
