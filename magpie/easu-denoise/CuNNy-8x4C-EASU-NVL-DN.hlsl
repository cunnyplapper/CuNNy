// CuNNy 8x4C CHROMA NVL DN
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

//!MAGPIE EFFECT
//!VERSION 3
//!OUTPUT_WIDTH INPUT_WIDTH * 2
//!OUTPUT_HEIGHT INPUT_HEIGHT * 2

//!TEXTURE
Texture2D INPUT;

//!TEXTURE
//!WIDTH INPUT_WIDTH * 2
//!HEIGHT INPUT_HEIGHT * 2
//!FORMAT R8_UNORM
Texture2D easu;

//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t1;

// FSR mpv | modified
// Copyright (c) 2021 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// FidelityFX FSR v1.0.2 by AMD
// ported to mpv by agyild

//!PASS 1
//!DESC CuNNy-EASU
//!STYLE PS
//!IN INPUT
//!OUT easu

float GetLuma(float3 rgb) {
	return dot(float3(0.299, 0.587, 0.114), rgb);
}

float APrxLoRcpF1(float a) {
	return asfloat(uint(0x7ef07ebb) - asuint(a));
}

float APrxLoRsqF1(float a) {
	return asfloat(uint(0x5f347d74) - (asuint(a) >> uint(1)));
}

float AMin3F1(float x, float y, float z) {

	return min(x, min(y, z));
}

float AMax3F1(float x, float y, float z) {
	return max(x, max(y, z));
}

void tap(inout float aC, inout float aW, float2 off, float2 dir, float2 len,
         float lob, float clp, float c){
	float2 v;
	v.x = (off.x * ( dir.x)) + (off.y * dir.y);
	v.y = (off.x * (-dir.y)) + (off.y * dir.x);
	v *= len;
	float d2 = v.x * v.x + v.y * v.y;
	d2 = min(d2, clp);
	float wB = float(2.0 / 5.0) * d2 + -1.0;

	float wA = lob * d2 + -1.0;
	wB *= wB;
	wA *= wA;
	wB = float(25.0 / 16.0) * wB + float(-(25.0 / 16.0 - 1.0));
	float w = wB * wA;
	aC += c * w;
	aW += w;
}

void set(inout float2 dir, inout float len, float2 pp, bool biS, bool biT,
         bool biU, bool biV, float lA, float lB, float lC, float lD, float lE){

	float w = 0.0;
	if (biS)
		w = (1.0 - pp.x) * (1.0 - pp.y);
	if (biT)
		w =        pp.x  * (1.0 - pp.y);
	if (biU)
		w = (1.0 - pp.x) *        pp.y;

	if (biV)
		w =        pp.x  *        pp.y;
	float dc = lD - lC;
	float cb = lC - lB;
	float lenX = max(abs(dc), abs(cb));
	lenX = APrxLoRcpF1(lenX);
	float dirX = lD - lB;
	lenX = clamp(abs(dirX) * lenX, 0.0, 1.0);
	lenX *= lenX;
	float ec = lE - lC;

	float ca = lC - lA;
	float lenY = max(abs(ec), abs(ca));
	lenY = APrxLoRcpF1(lenY);
	float dirY = lE - lA;
	lenY = clamp(abs(dirY) * lenY, 0.0, 1.0);
	lenY *= lenY;
	dir += float2(dirX, dirY) * w;
	len += dot(float2(w, w), float2(lenX, lenY));
}

float4 Pass1(float2 pos) {
	float2 pt = float2(GetInputPt());
	float2 size = float2(GetInputSize());
	float4 pix = float4(0.0, 0.0, 0.0, 1.0);
	float2 pp = pos * size - float2(0.5, 0.5);
	float2 fp = floor(pp);
	pp -= fp;
	float b = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2(0.5, -0.5)) * pt), 0).rgb);
	float c = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2(1.5, -0.5)) * pt), 0).rgb);
	float e = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2(-0.5, 0.5)) * pt), 0).rgb);
	float f = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2( 0.5, 0.5)) * pt), 0).rgb);
	float g = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2( 1.5, 0.5)) * pt), 0).rgb);
	float h = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2( 2.5, 0.5)) * pt), 0).rgb);
	float i = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2(-0.5, 1.5)) * pt), 0).rgb);
	float j = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2( 0.5, 1.5)) * pt), 0).rgb);
	float k = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2( 1.5, 1.5)) * pt), 0).rgb);
	float l = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2( 2.5, 1.5)) * pt), 0).rgb);
	float n = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2(0.5, 2.5) ) * pt), 0).rgb);
	float o = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2(1.5, 2.5) ) * pt), 0).rgb);
	float4 bczzL = float4(b, c, 0.0, 0.0);
	float4 ijfeL = float4(i, j, f, e);
	float4 klhgL = float4(k, l, h, g);
	float4 zzonL = float4(0.0, 0.0, o, n);
	float bL = bczzL.x;
	float cL = bczzL.y;
	float iL = ijfeL.x;
	float jL = ijfeL.y;
	float fL = ijfeL.z;
	float eL = ijfeL.w;
	float kL = klhgL.x;
	float lL = klhgL.y;
	float hL = klhgL.z;
	float gL = klhgL.w;
	float oL = zzonL.z;
	float nL = zzonL.w;
	float2 dir = float2(0.0, 0.0);
	float len = 0.0;
	set(dir, len, pp, true, false, false, false, bL, eL, fL, gL, jL);
	set(dir, len, pp, false, true, false, false, cL, fL, gL, hL, kL);
	set(dir, len, pp, false, false, true, false, fL, iL, jL, kL, nL);
	set(dir, len, pp, false, false, false, true, gL, jL, kL, lL, oL);
	float2 dir2 = dir * dir;
	float dirR = dir2.x + dir2.y;
	bool zro = dirR < float(1.0 / 32768.0);
	dirR = APrxLoRsqF1(dirR);
	dirR = zro ? 1.0 : dirR;
	dir.x = zro ? 1.0 : dir.x;
	dir *= float2(dirR, dirR);
	len = len * 0.5;
	len *= len;
	float stretch = (dir.x * dir.x + dir.y * dir.y) * APrxLoRcpF1(max(abs(dir.x), abs(dir.y)));
	float2 len2 = float2(1.0 + (stretch - 1.0) * len, 1.0 + -0.5 * len);
	float lob = 0.5 + float((1.0 / 4.0 - 0.04) - 0.5) * len;
	float clp = APrxLoRcpF1(lob);
	float aC = 0.0;
	float aW = 0.0;
	tap(aC, aW, float2( 0.0,-1.0) - pp, dir, len2, lob, clp, bL);
	tap(aC, aW, float2( 1.0,-1.0) - pp, dir, len2, lob, clp, cL);
	tap(aC, aW, float2(-1.0, 1.0) - pp, dir, len2, lob, clp, iL);
	tap(aC, aW, float2( 0.0, 1.0) - pp, dir, len2, lob, clp, jL);
	tap(aC, aW, float2( 0.0, 0.0) - pp, dir, len2, lob, clp, fL);
	tap(aC, aW, float2(-1.0, 0.0) - pp, dir, len2, lob, clp, eL);
	tap(aC, aW, float2( 1.0, 1.0) - pp, dir, len2, lob, clp, kL);
	tap(aC, aW, float2( 2.0, 1.0) - pp, dir, len2, lob, clp, lL);
	tap(aC, aW, float2( 2.0, 0.0) - pp, dir, len2, lob, clp, hL);
	tap(aC, aW, float2( 1.0, 0.0) - pp, dir, len2, lob, clp, gL);
	tap(aC, aW, float2( 1.0, 2.0) - pp, dir, len2, lob, clp, oL);
	tap(aC, aW, float2( 0.0, 2.0) - pp, dir, len2, lob, clp, nL);
	pix.r = aC / aW;
	float min1 = min(AMin3F1(fL, gL, jL), kL);
	float max1 = max(AMax3F1(fL, gL, jL), kL);
	pix.r = clamp(pix.r, min1, max1);
	pix.r = clamp(pix.r, 0.0, 1.0);
	return pix;
}

//!PASS 2
//!DESC CuNNy-8x4C-CHROMA-NVL-DN-in
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) (dot(float3(-2.132e-01, -4.014e-01, -9.587e-02), O(INPUT, float2(x, y)).rgb) + 6.309e-01)
float4 f0(float2 pt, float2 pos, min16float s0_0, min16float s0_1, min16float s0_2, min16float s0_3, min16float s0_4, min16float s0_5, min16float s0_6, min16float s0_7, min16float s0_8) {
	V4 r = 0.0;
	r += V4(7.874e-01, 6.844e-02, -1.209e-02, 7.314e-02) * s0_0;
	r += V4(-6.057e-03, -1.549e-01, 3.754e-02, -1.593e-01) * s0_1;
	r += V4(-3.988e-03, 3.519e-03, -6.591e-03, 7.947e-03) * s0_2;
	r += V4(-4.044e-02, -8.111e-02, -4.195e-03, -7.446e-02) * s0_3;
	r += V4(9.391e-03, -5.695e-01, 7.832e-01, 8.324e-01) * s0_4;
	r += V4(-6.511e-03, 5.684e-01, 2.032e-02, 3.552e-02) * s0_5;
	r += V4(2.349e-03, -4.464e-02, 7.926e-03, -8.235e-02) * s0_6;
	r += V4(-2.294e-03, 1.105e-01, -8.373e-01, 2.475e-01) * s0_7;
	r += V4(1.196e-03, 1.053e-01, 1.298e-02, -1.057e-01) * s0_8;
	r += V4(5.595e-02, -1.918e-02, -8.621e-04, 6.212e-02);
	return r;
}
void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float s0_0 = l0(-1.0, -1.0);
	min16float s0_1 = l0(0.0, -1.0);
	min16float s0_2 = l0(1.0, -1.0);
	min16float s0_3 = l0(-1.0, 0.0);
	min16float s0_4 = l0(0.0, 0.0);
	min16float s0_5 = l0(1.0, 0.0);
	min16float s0_6 = l0(-1.0, 1.0);
	min16float s0_7 = l0(0.0, 1.0);
	min16float s0_8 = l0(1.0, 1.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8);
}
//!PASS 3
//!DESC CuNNy-8x4C-CHROMA-NVL-DN-conv1
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(2.164e-02, 2.050e-02, -5.840e-02, -4.604e-03, -1.343e-02, 2.780e-02, -7.255e-02, 1.031e-01, -3.115e-01, -1.130e-01, 6.621e-01, 1.059e-01, -5.527e-02, 1.162e-01, -3.747e-02, -9.596e-02));
	r += mul(s0_1, M4(1.984e-03, -4.225e-02, -1.029e-01, 6.303e-02, 3.019e-01, -2.475e-01, -1.742e-01, -2.430e-03, -2.945e-01, -7.729e-02, -3.422e-01, 1.979e-01, -1.326e-01, 1.598e-01, 1.285e-01, -2.409e-01));
	r += mul(s0_2, M4(-4.916e-02, 1.745e-02, 1.053e-01, -8.275e-02, -1.514e-01, 3.490e-02, -8.698e-02, -9.122e-02, 9.461e-03, 2.197e-01, -7.632e-02, -1.300e-01, 1.610e-02, -9.353e-02, 1.162e-01, 2.380e-01));
	r += mul(s0_3, M4(-5.873e-03, 4.500e-02, -8.899e-03, 3.151e-02, -2.304e-01, -5.454e-01, -4.174e-01, 3.022e-02, -1.332e-01, -9.173e-02, 4.024e-01, 1.913e-01, 2.296e-02, -9.900e-02, 1.477e-01, -9.534e-02));
	r += mul(s0_4, M4(6.912e-02, -2.185e-02, 9.891e-02, 9.857e-03, 1.582e-01, 2.057e-01, -2.529e-02, 1.968e-01, 5.098e-01, -4.639e-01, -1.618e-01, -3.158e-01, 2.615e-01, -3.286e-01, -2.571e-01, -3.163e-01));
	r += mul(s0_5, M4(-1.788e-01, -9.902e-02, -1.031e-01, 5.599e-02, 4.090e-01, 1.390e-02, -6.803e-03, 3.252e-02, -1.062e-01, 4.209e-01, -8.192e-02, 5.527e-02, 1.488e-01, -6.714e-02, -1.733e-01, 5.351e-01));
	r += mul(s0_6, M4(1.485e-03, -5.995e-02, 1.325e-01, -4.456e-02, 3.545e-01, 8.864e-02, 4.260e-02, 1.052e-01, 1.104e-01, 9.658e-02, 9.625e-02, -1.215e-02, 6.709e-02, 5.628e-03, -1.046e-01, 4.816e-02));
	r += mul(s0_7, M4(-5.670e-02, 1.030e-01, 7.917e-02, 7.526e-02, -3.923e-02, 2.095e-01, -1.547e-01, -2.492e-01, -5.111e-02, -2.694e-02, 7.704e-02, -1.304e-01, 7.102e-04, -2.122e-01, -1.126e-02, -3.382e-01));
	r += mul(s0_8, M4(2.059e-02, -1.167e-01, 2.391e-03, -5.821e-02, -4.479e-03, -2.601e-02, 4.693e-02, 5.004e-02, -3.434e-02, 3.828e-02, -4.283e-02, 8.816e-02, -1.765e-01, 3.000e-03, 7.941e-02, 2.096e-01));
	r += mul(s1_0, M4(3.328e-01, -9.573e-03, -2.708e-01, -1.475e-01, 2.533e-01, -1.038e-01, 4.145e-02, -9.032e-03, 2.170e-02, -7.625e-02, -9.974e-01, -9.398e-02, -3.680e-01, -1.380e-01, 2.055e-01, 2.894e-02));
	r += mul(s1_1, M4(6.029e-01, -3.231e-01, -4.645e-01, 2.972e-01, 4.170e-01, -1.220e-01, 7.161e-02, -5.672e-02, -3.248e-01, 5.098e-01, 1.647e-03, -3.479e-01, -7.112e-01, 6.544e-03, -3.205e-02, -1.089e+00));
	r += mul(s1_2, M4(1.384e-01, -3.440e-01, -5.618e-02, -2.608e-01, -1.810e-01, -3.401e-02, 2.463e-02, 4.602e-02, 6.061e-02, 1.498e-01, -1.052e-01, -2.478e-02, -8.542e-02, -5.761e-01, -6.031e-03, 9.565e-01));
	r += mul(s1_3, M4(8.419e-01, 5.174e-01, -2.004e-01, -3.838e-01, 8.082e-01, -1.416e-01, -2.781e-01, 7.965e-02, -1.061e-01, 5.536e-02, -5.340e-01, -6.181e-02, -6.880e-01, -5.968e-01, -2.865e-01, -5.521e-01));
	r += mul(s1_4, M4(-2.677e-01, 5.640e-01, 6.932e-01, -7.287e-01, 5.903e-02, 2.990e-01, -7.011e-02, 6.239e-01, 1.083e-01, -6.035e-01, -2.332e-01, -4.697e-01, -6.140e-01, -1.192e+00, -6.731e-01, -1.631e+00));
	r += mul(s1_5, M4(-2.822e+00, 3.124e-01, 2.708e-01, 3.950e-01, 2.723e-01, -1.359e-01, -1.677e-02, 2.899e-02, -1.116e-01, 2.583e-01, 7.814e-02, 3.596e-01, 1.328e-01, -6.356e-01, 1.656e-01, 1.646e+00));
	r += mul(s1_6, M4(-4.141e-01, 1.636e-01, 3.810e-01, -5.028e-01, 2.290e-01, 1.591e-01, 3.959e-01, 2.024e-02, 4.040e-02, 1.929e-02, 6.863e-02, 2.002e-02, -2.156e-01, -2.751e-01, 4.410e-03, 4.475e-02));
	r += mul(s1_7, M4(-1.048e+00, -5.176e-01, 2.309e+00, 1.674e+00, -2.884e-01, 8.918e-02, 8.870e-02, -1.227e-01, -1.497e-01, -1.284e-01, -1.380e-01, -1.299e-01, -1.077e+00, -8.351e-01, 2.342e-01, -1.050e-01));
	r += mul(s1_8, M4(4.231e-03, -3.322e+00, -1.285e+00, -1.111e+00, -1.545e-01, -4.289e-02, 2.816e-02, 4.743e-02, 1.163e-02, 7.024e-02, 7.253e-02, 7.104e-02, -2.591e-01, -5.105e-01, 3.015e-02, 4.152e-01));
	r += V4(4.553e-02, -9.784e-03, -3.070e-02, 1.886e-02);
	return r;
}
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 4
//!DESC CuNNy-8x4C-CHROMA-NVL-DN-conv2
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-2.262e-02, -2.167e-02, 4.845e-02, -1.042e-01, 1.309e-01, 1.514e-01, -2.757e-01, -1.929e-01, -2.365e-02, 4.680e-02, -5.435e-02, -8.681e-02, -2.456e-01, -1.236e-01, -6.085e-02, -1.657e-02));
	r += mul(s0_1, M4(1.822e-01, -9.527e-02, -1.193e-01, 2.958e-01, -1.144e-01, 1.173e-02, -3.357e-02, 3.033e-01, 1.049e-01, 3.319e-02, 7.501e-02, 1.083e-01, 1.483e-01, 2.102e-03, -1.125e-01, -8.498e-02));
	r += mul(s0_2, M4(7.834e-02, 2.292e-02, -2.855e-03, 2.203e-02, 8.734e-03, -1.021e-01, -1.064e-01, -2.087e-01, 1.194e-01, 5.174e-02, -8.340e-02, 7.693e-02, 2.981e-02, -2.272e-02, 1.857e-02, -4.785e-02));
	r += mul(s0_3, M4(3.143e-01, 4.520e-02, 7.745e-02, 1.439e-01, -2.125e+00, 7.293e-01, -1.493e-01, 2.506e-01, 2.492e-01, 3.541e-02, 1.862e-02, 1.571e-01, -1.086e+00, -2.744e-01, 2.352e-02, -4.532e-01));
	r += mul(s0_4, M4(-6.000e-01, -5.311e-02, 2.069e-01, -3.701e-01, 2.705e-01, 1.411e+00, -9.577e-02, 9.416e-01, 1.326e-01, -1.183e-01, -1.536e-02, -4.816e-02, 1.830e-02, 8.823e-02, -4.188e-01, 5.012e-01));
	r += mul(s0_5, M4(-1.554e-01, -1.161e-01, -7.897e-03, -2.322e-04, -3.195e-01, -2.943e-01, 6.564e-02, -1.175e-02, -1.547e-01, -4.406e-01, -7.177e-02, -1.017e-01, 1.294e-02, -6.607e-02, 1.135e-03, -1.979e-02));
	r += mul(s0_6, M4(6.720e-02, 1.062e-01, 3.736e-02, 1.309e-01, -2.541e-01, 1.460e-01, 2.525e-01, -1.911e-01, 2.972e-02, 4.454e-02, 2.228e-02, 3.185e-02, 1.304e-01, -1.496e-01, -2.721e-02, -1.144e-01));
	r += mul(s0_7, M4(4.943e-02, 1.827e-02, -5.111e-01, 2.531e-01, 2.339e-02, 5.485e-02, 9.044e-01, -3.777e-01, -8.166e-02, -7.665e-03, -1.529e-01, 8.198e-02, -5.935e-02, -1.690e-03, 3.016e-01, 7.025e-02));
	r += mul(s0_8, M4(8.730e-02, 2.502e-01, -1.924e-01, -1.015e-01, 3.429e-02, -1.303e-01, 4.952e-01, -2.192e-01, 7.229e-03, 1.368e-01, 2.978e-01, -1.166e-01, 5.633e-02, 4.552e-03, 1.722e-01, -8.185e-02));
	r += mul(s1_0, M4(-1.436e-01, -1.782e-02, 3.579e-02, -1.396e-01, 1.145e-01, -1.052e-01, -1.197e-02, 8.195e-02, 6.626e-03, -4.261e-02, 3.971e-02, -4.164e-03, -1.877e-01, -6.666e-02, 8.088e-03, 1.248e-01));
	r += mul(s1_1, M4(1.257e-01, -2.930e-04, -1.214e-01, 1.781e-01, 2.690e-01, -1.295e-01, -2.104e-01, 2.666e-01, -1.606e-02, 8.967e-02, 1.176e-03, 3.636e-02, 1.106e-01, 2.018e-01, -9.741e-02, -7.037e-02));
	r += mul(s1_2, M4(4.870e-02, -8.239e-02, 3.630e-03, 5.519e-02, 6.519e-02, 5.111e-02, -5.309e-02, -1.376e-01, -2.351e-04, -2.790e-01, 2.772e-02, 2.009e-01, -6.064e-03, 6.471e-02, 3.528e-02, 6.387e-02));
	r += mul(s1_3, M4(1.857e-01, 1.880e-03, -5.547e-02, -2.896e-02, -5.879e-01, 6.191e-02, -7.550e-02, -2.044e-01, 8.276e-02, 6.424e-02, 5.518e-02, 1.752e-01, -1.115e-01, 5.723e-02, 2.190e-01, -3.532e-01));
	r += mul(s1_4, M4(-2.011e-01, -9.638e-02, 1.655e-01, -1.420e-01, 2.260e-01, 3.601e-01, -3.970e-01, 4.475e-01, 3.790e-01, 1.127e-01, -3.752e-01, -3.014e-01, 3.583e-02, 8.000e-01, -2.234e-01, -3.349e-02));
	r += mul(s1_5, M4(-7.172e-02, -1.063e-01, -2.381e-02, 1.038e-01, -4.649e-02, 3.059e-03, -5.195e-02, 2.162e-01, 8.691e-02, -4.124e-01, 2.397e-01, 1.041e-01, 7.463e-02, 1.214e-02, -7.439e-02, -4.096e-02));
	r += mul(s1_6, M4(6.691e-02, 1.391e-02, 2.849e-04, -7.263e-03, -8.388e-02, -9.914e-02, 8.018e-02, -1.295e-01, -4.118e-02, 5.340e-02, -7.986e-03, 4.210e-02, -2.321e-02, 1.125e-01, -1.560e-01, 6.016e-02));
	r += mul(s1_7, M4(1.246e-01, -1.034e-01, -2.339e-01, 2.032e-01, 7.909e-02, -5.409e-02, 5.180e-01, -2.143e-01, -1.226e-04, -8.454e-02, 1.623e-01, -1.302e-01, -1.417e-01, 2.997e-01, 3.794e-01, 2.374e-01));
	r += mul(s1_8, M4(1.015e-02, 4.828e-02, -6.912e-02, -1.206e-01, 1.078e-03, -8.645e-02, 1.997e-01, 3.849e-02, -7.094e-03, -6.353e-02, -2.309e-01, -1.529e-04, -4.058e-02, -3.036e-02, 3.501e-02, 2.358e-02));
	r += V4(2.256e-02, -1.319e-02, 6.435e-03, 1.291e-01);
	return r;
}
void Pass4(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 5
//!DESC CuNNy-8x4C-CHROMA-NVL-DN-conv3
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-1.046e-01, -1.366e-03, -1.021e-02, 2.094e-02, 1.616e-01, 2.467e-01, -5.725e-02, -8.051e-02, -1.111e-02, -4.529e-02, -3.675e-02, -1.393e-01, 1.661e-01, -6.616e-02, 5.979e-02, -2.132e-02));
	r += mul(s0_1, M4(-1.363e-01, -2.523e-01, -2.196e-01, 1.705e-01, 1.578e-02, -1.235e-01, -1.087e-01, -8.417e-02, 2.210e-02, -1.863e-01, -7.029e-01, -1.959e-01, 1.990e-01, 4.795e-02, 9.868e-02, 3.359e-02));
	r += mul(s0_2, M4(-1.889e-02, -1.313e-01, 8.593e-03, 2.783e-02, -6.070e-02, -2.008e-01, 8.012e-03, -3.957e-02, -3.434e-02, -5.185e-02, -1.244e-01, -2.272e-02, -1.147e-01, 3.336e-02, -3.178e-02, 5.429e-02));
	r += mul(s0_3, M4(1.916e-02, 3.912e-02, 1.208e-01, -1.153e-02, 1.213e-01, -2.676e-02, 8.497e-02, 1.196e-01, 1.670e-01, 2.516e-02, 5.331e-02, -4.403e-02, 2.881e-02, -1.378e-02, -8.227e-02, 7.108e-02));
	r += mul(s0_4, M4(-3.579e-02, 2.332e-01, -5.708e-01, 1.691e-01, -1.002e+00, 7.051e-01, 4.257e-01, -3.535e-01, 3.874e-01, 2.796e-01, -1.028e-01, -7.488e-02, -3.130e-01, 6.081e-01, -1.421e-01, -1.143e-01));
	r += mul(s0_5, M4(6.974e-01, -1.884e-01, -9.320e-02, 2.724e-01, -2.576e-01, 2.415e-01, 8.276e-02, -2.272e-01, 1.501e-01, 6.763e-02, 8.182e-02, -9.767e-02, 1.482e-01, 2.503e-01, 2.725e-01, 9.116e-02));
	r += mul(s0_6, M4(-3.400e-02, 1.626e-01, -2.111e-02, 3.067e-02, 2.695e-01, 5.057e-03, -5.431e-03, 6.002e-02, -9.303e-03, 2.315e-01, 1.568e-02, 2.304e-02, -1.075e-01, -2.499e-01, -3.939e-02, -9.303e-02));
	r += mul(s0_7, M4(2.602e-02, -1.697e-01, -2.198e-01, -4.081e-02, -7.728e-02, 3.303e-01, 2.387e-01, 8.388e-02, 4.993e-02, -6.770e-02, -2.045e-02, 1.873e-02, 9.473e-02, -5.354e-01, -1.978e-01, 2.659e-06));
	r += mul(s0_8, M4(1.977e-01, 1.517e-01, -3.765e-02, 1.500e-01, 1.096e-01, 1.015e-01, -1.346e-01, -1.342e-02, -3.481e-02, -2.660e-02, -1.787e-02, 1.288e-02, -1.068e-01, -9.170e-02, 6.281e-02, -1.478e-02));
	r += mul(s1_0, M4(4.286e-02, 6.124e-03, -6.830e-02, -2.463e-02, -1.120e-01, -1.224e-01, -2.481e-02, 1.716e-02, -1.309e-01, -9.657e-02, -2.393e-02, 1.809e-02, -7.380e-02, 1.342e-02, 1.945e-01, 3.217e-02));
	r += mul(s1_1, M4(2.055e-01, -2.763e-02, 1.251e-01, 1.273e-02, 6.398e-02, -3.544e-03, -2.756e-02, -1.388e-02, -5.365e-01, -1.361e-01, -4.722e-01, -3.158e-03, 6.802e-02, 2.644e-02, 7.003e-02, -1.027e-01));
	r += mul(s1_2, M4(8.261e-02, -1.539e-01, 1.303e-01, -2.637e-02, 2.181e-02, -2.362e-02, 5.681e-02, 5.657e-02, -2.596e-01, -1.037e-01, -4.826e-02, -5.619e-02, -1.492e-01, 1.773e-01, -7.309e-02, 5.652e-02));
	r += mul(s1_3, M4(4.192e-02, -1.430e-02, 1.182e-02, 5.796e-02, 5.008e-02, -7.034e-02, 1.391e-01, 1.860e-01, 9.591e-03, -3.470e-01, 2.196e-01, -2.554e-04, -8.427e-02, 2.745e-01, -1.081e-01, -2.308e-02));
	r += mul(s1_4, M4(-4.869e-01, 2.398e-01, -1.100e-02, 2.703e-01, -9.153e-02, 1.763e-01, 1.692e-03, -1.564e-01, -4.934e-01, -2.248e-01, -1.255e-01, 9.296e-02, 3.363e-01, 1.985e-01, -5.355e-01, -3.120e-01));
	r += mul(s1_5, M4(-2.476e-01, 3.137e-01, 2.437e-01, 3.635e-01, 2.406e-02, -3.700e-02, -4.913e-02, -7.564e-02, -9.712e-02, 3.591e-02, 9.692e-02, -9.809e-02, 1.897e-02, 1.614e-01, 1.061e-01, 9.546e-02));
	r += mul(s1_6, M4(3.167e-02, -5.313e-02, 1.298e-02, -1.377e-02, 1.650e-01, -1.192e-01, -1.964e-02, 1.026e-01, -5.493e-02, 3.268e-02, 6.859e-02, 6.436e-04, -2.020e-01, 1.439e-01, -7.593e-02, -1.203e-01));
	r += mul(s1_7, M4(1.063e-01, -1.492e-01, 4.310e-03, -8.956e-03, -4.571e-02, -1.775e-01, 2.283e-02, 1.167e-01, 3.612e-02, -3.251e-01, -1.620e-01, -4.103e-02, 1.519e-01, -3.007e-01, -3.058e-01, -8.300e-02));
	r += mul(s1_8, M4(5.241e-02, 1.298e-01, 1.114e-01, 2.008e-01, -6.039e-02, 7.224e-02, -6.190e-03, 8.048e-03, -1.823e-02, 5.284e-02, 3.692e-02, 5.429e-02, -7.709e-03, -1.046e-01, 2.349e-03, -6.332e-02));
	r += V4(-1.398e-02, 7.835e-03, 7.200e-03, 1.576e-03);
	return r;
}
void Pass5(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 6
//!DESC CuNNy-8x4C-CHROMA-NVL-DN-conv4
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-2.729e-02, 4.438e-02, -1.014e-01, 4.970e-02, 2.453e-02, -4.005e-02, 1.387e-01, 6.998e-02, -8.798e-02, 5.256e-02, 1.042e-01, -1.628e-01, 6.248e-02, 5.977e-02, 1.305e-01, 1.564e-01));
	r += mul(s0_1, M4(-1.012e-01, 1.547e-01, -1.167e-02, 3.860e-03, 1.964e-01, -5.767e-02, 8.131e-02, -2.252e-02, 5.470e-02, -2.106e-01, 1.091e-01, -3.884e-02, 2.486e-02, 2.196e-01, -2.542e-02, -1.579e-01));
	r += mul(s0_2, M4(-2.675e-02, 5.972e-02, 3.477e-02, -1.207e-02, 8.287e-02, -2.856e-01, -1.122e-03, 1.217e-01, -9.427e-02, -5.759e-02, 3.029e-02, 8.154e-02, 1.440e-01, -3.288e-01, -2.430e-02, -3.288e-02));
	r += mul(s0_3, M4(-4.185e-01, -2.717e-02, -8.379e-02, 9.774e-02, 8.730e-02, 2.304e-02, 9.091e-02, -8.934e-03, 3.472e-01, 1.440e-01, 2.718e-01, -1.230e-01, 6.053e-01, 3.417e-01, 5.630e-01, 7.434e-02));
	r += mul(s0_4, M4(-7.621e-02, -1.048e-01, -3.995e-01, -2.903e-01, 1.235e-01, -1.281e-01, -1.196e-01, 1.491e-01, -3.782e-02, 4.612e-01, 4.285e-01, -1.558e-01, 4.131e-01, 1.477e-01, 1.099e+00, -1.823e-01));
	r += mul(s0_5, M4(2.708e-02, 1.826e-01, -1.038e-02, -9.350e-02, -1.838e-01, -1.009e-01, 1.836e-02, 1.726e-01, -2.456e-01, 3.125e-01, -9.621e-02, -6.374e-02, -2.514e-01, 2.343e-01, -3.259e-02, 1.630e-01));
	r += mul(s0_6, M4(3.917e-03, 1.106e-01, 1.558e-01, -7.914e-03, 1.376e-02, 1.175e-02, 3.680e-03, 5.515e-03, 1.875e-02, 1.205e-01, 4.511e-02, 5.970e-02, 3.986e-01, 3.562e-02, 3.740e-01, 2.340e-02));
	r += mul(s0_7, M4(-1.310e-01, -1.957e-01, -2.917e-01, -1.457e-02, 5.736e-03, -7.163e-02, -1.487e-02, 2.872e-03, -7.214e-02, 1.821e-02, -3.991e-01, 3.166e-02, 6.931e-01, 1.335e-01, 6.653e-01, 1.253e-01));
	r += mul(s0_8, M4(5.778e-02, 2.317e-02, 9.887e-02, -7.344e-02, -2.092e-02, 7.832e-03, 1.018e-01, 5.657e-02, -7.162e-02, -1.050e-01, -5.041e-01, -2.184e-01, 2.134e-01, -3.158e-02, 6.101e-03, 9.862e-02));
	r += mul(s1_0, M4(-2.783e-01, -4.478e-02, 5.126e-03, 2.627e-01, 8.284e-02, -2.172e-01, -1.333e-01, -1.489e-01, -6.292e-02, -2.684e-02, 2.566e-02, -9.497e-02, 1.637e-02, -3.380e-02, 8.957e-03, 8.370e-02));
	r += mul(s1_1, M4(6.442e-02, 2.611e-01, 3.318e-02, -1.199e-01, -1.234e-01, -5.027e-01, -2.710e-01, 3.186e-01, -1.004e-01, -1.882e-01, 6.908e-02, 4.009e-02, 1.143e-01, -7.275e-02, -1.533e-02, 3.399e-03));
	r += mul(s1_2, M4(-2.302e-02, 7.573e-05, -1.110e-02, 2.702e-02, -2.666e-01, -1.169e-01, -4.238e-01, -5.116e-02, 7.401e-02, 8.272e-02, 1.303e-01, 4.418e-02, -4.205e-02, -1.480e-01, -4.317e-02, 5.226e-02));
	r += mul(s1_3, M4(-5.967e-01, -7.334e-02, 9.399e-02, 3.143e-01, -6.442e-01, 4.798e-02, -5.734e-01, -2.623e-01, 2.319e-01, 4.112e-02, 1.755e-02, -1.376e-01, -8.652e-01, -2.173e-03, -1.159e-01, 5.579e-01));
	r += mul(s1_4, M4(3.383e-01, -4.525e-01, -2.134e-01, -1.705e-01, 5.211e-01, -5.596e-01, -4.386e-01, -9.926e-02, 2.344e-01, 3.864e-01, 3.222e-01, -4.401e-01, -2.270e-01, -3.779e-01, 3.325e-01, -3.024e-01));
	r += mul(s1_5, M4(-1.412e-01, -5.592e-02, -1.975e-01, 9.989e-02, -1.577e-01, -6.465e-01, -8.457e-01, 1.088e-02, 8.526e-02, -2.717e-02, 2.232e-01, 1.134e-01, -2.332e-02, 2.361e-01, -9.010e-02, 6.312e-03));
	r += mul(s1_6, M4(2.912e-01, 1.744e-01, 5.747e-02, -2.280e-01, -4.378e-01, -1.564e-01, -5.019e-01, -1.052e-01, 1.738e-01, -4.839e-03, 5.203e-02, -1.958e-02, -7.580e-02, -2.367e-02, 1.550e-02, 7.342e-02));
	r += mul(s1_7, M4(-3.950e-02, -5.191e-02, -7.484e-01, -2.896e-01, -5.295e-01, -2.363e-01, -4.411e-01, -1.092e-01, -1.476e-01, 1.735e-01, -2.052e-03, 1.423e-01, 2.130e-02, -7.730e-02, 2.487e-02, 6.959e-02));
	r += mul(s1_8, M4(-1.254e-01, 1.112e-01, -5.123e-02, 2.640e-02, -3.021e-01, -7.014e-02, -1.333e-01, 1.755e-01, -1.443e-02, -1.686e-01, -1.588e-01, -3.582e-02, 7.255e-02, -6.281e-02, 1.977e-01, 1.275e-01));
	r += V4(-1.352e-02, 3.698e-03, -7.274e-03, -1.413e-02);
	return r;
}
void Pass6(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 7
//!DESC CuNNy-8x4C-CHROMA-NVL-DN-conv5
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-5.807e-02, 7.667e-03, -1.273e-01, 3.125e-02, -1.718e-03, 1.794e-02, -5.069e-02, 9.209e-03, -1.072e-01, -9.662e-02, 1.168e-02, -6.664e-02, -1.440e-01, 4.003e-02, -2.998e-01, 5.701e-02));
	r += mul(s0_1, M4(7.461e-02, 2.361e-02, 2.390e-01, 2.479e-02, -9.740e-03, 3.144e-02, -1.940e-01, -5.291e-03, -1.720e-01, -2.845e-01, -8.043e-01, 1.742e-02, -1.095e-01, 3.772e-01, -1.753e-01, 1.637e-01));
	r += mul(s0_2, M4(7.058e-02, -1.615e-01, -1.606e-01, -3.680e-02, 1.820e-02, 3.401e-02, 1.198e-02, -2.863e-02, -1.305e-01, 7.762e-02, -3.390e-03, 8.619e-02, 1.525e-02, 1.157e-01, 4.791e-02, 2.406e-02));
	r += mul(s0_3, M4(1.771e-01, 3.770e-02, -5.899e-02, -3.112e-03, -2.545e-02, 3.210e-01, 1.434e-01, 1.919e-01, -2.495e-01, -8.054e-02, 7.997e-02, 4.852e-02, 1.902e-01, 1.419e-01, 8.032e-02, 1.486e-02));
	r += mul(s0_4, M4(-4.357e-01, -4.369e-01, 1.026e-01, -2.744e-01, -2.961e-01, -1.355e-01, -1.293e-01, -6.658e-02, 4.208e-01, 4.842e-01, 9.087e-02, 2.139e-01, -4.439e-01, -4.204e-01, 3.540e-01, -1.376e-01));
	r += mul(s0_5, M4(-9.698e-02, -2.995e-01, -5.215e-01, 4.964e-02, -5.184e-02, 3.647e-02, 4.093e-02, 1.492e-02, 1.623e-01, 1.908e-01, 1.939e-01, -1.300e-01, 1.838e-02, -1.415e-01, 3.859e-01, 7.234e-01));
	r += mul(s0_6, M4(5.797e-02, -1.757e-02, -9.558e-03, 1.009e-01, 1.434e-01, 1.523e-01, -8.470e-02, 1.534e-01, -1.356e-01, -2.503e-02, -6.846e-02, -1.626e-01, 1.045e-01, 5.623e-02, 6.240e-02, 7.398e-02));
	r += mul(s0_7, M4(1.767e-01, -7.017e-02, 1.189e-01, 6.572e-02, 4.261e-01, 5.929e-02, 1.411e-01, 1.126e-01, -4.871e-01, 3.721e-02, -1.734e-01, -1.654e-01, 1.518e-01, 2.623e-02, 5.335e-02, 1.841e-01));
	r += mul(s0_8, M4(-3.919e-02, -4.922e-03, -4.911e-02, 2.300e-01, 8.824e-02, 6.699e-02, 1.481e-01, 2.576e-02, -4.148e-02, 3.742e-02, -6.811e-02, -1.161e-01, 2.686e-01, 1.485e-01, 2.605e-02, 3.481e-02));
	r += mul(s1_0, M4(-2.068e-03, 9.884e-02, -1.169e-01, -2.428e-03, -1.238e-01, -2.181e-02, -6.062e-02, -7.576e-02, 9.135e-03, -7.372e-02, -5.305e-02, 8.195e-02, -9.107e-02, 8.718e-02, -1.113e-01, 3.989e-02));
	r += mul(s1_1, M4(7.915e-02, 9.450e-02, 5.171e-01, 8.537e-02, -4.370e-02, -7.846e-02, -2.311e-01, 6.172e-02, -1.030e-02, -2.498e-01, -3.493e-01, -2.209e-02, 8.018e-02, 2.959e-01, -1.119e-01, 1.191e-02));
	r += mul(s1_2, M4(1.354e-01, -2.135e-01, -1.265e-01, 4.939e-02, 1.582e-02, 1.015e-01, 1.782e-01, 8.251e-02, -2.615e-02, 6.408e-02, -2.392e-02, 3.867e-02, 5.197e-03, 1.057e-01, 8.580e-02, -7.789e-02));
	r += mul(s1_3, M4(2.483e-01, 5.707e-02, -7.521e-02, -2.407e-03, 3.592e-01, 1.690e-01, 3.166e-01, -2.509e-03, -9.495e-02, -1.748e-01, -9.595e-02, 7.912e-02, 4.535e-01, 8.883e-02, -2.614e-01, 2.366e-02));
	r += mul(s1_4, M4(-6.113e-01, -4.085e-01, -1.391e-01, -3.272e-01, 7.845e-02, -3.624e-01, -3.124e-02, -9.191e-02, 3.483e-01, 5.450e-01, 3.009e-01, -7.267e-02, 1.715e-01, -6.038e-01, 6.584e-01, -2.352e-01));
	r += mul(s1_5, M4(-2.802e-01, -1.263e-01, -4.622e-01, 8.371e-02, 1.105e-01, 1.280e-01, 3.973e-01, 9.904e-03, -9.093e-03, 5.919e-02, -1.263e-01, 1.206e-02, -1.290e-01, -9.690e-02, -4.366e-02, 4.113e-02));
	r += mul(s1_6, M4(2.414e-02, -1.761e-02, 8.471e-02, 2.026e-01, 4.504e-01, 1.269e-01, 5.597e-02, 7.822e-02, -2.703e-01, -4.667e-02, -1.315e-01, -7.296e-02, 1.069e-01, 1.696e-02, -3.487e-02, 1.060e-01));
	r += mul(s1_7, M4(2.747e-01, -6.720e-02, 6.721e-02, 3.367e-01, 7.958e-01, 6.688e-02, 1.960e-01, -5.436e-02, -2.960e-01, 3.258e-03, -2.054e-01, -9.890e-02, 4.050e-01, 2.615e-03, 7.429e-02, 8.139e-02));
	r += mul(s1_8, M4(-5.727e-02, 2.142e-01, -1.278e-01, 1.401e-01, -4.912e-02, 1.068e-01, -7.742e-03, -3.193e-01, 5.824e-03, -1.974e-02, 1.040e-01, 1.362e-02, 2.334e-01, 5.370e-02, 1.173e-02, -5.289e-03));
	r += V4(3.280e-03, -7.027e-03, -9.636e-03, 6.730e-03);
	return r;
}
void Pass7(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 8
//!DESC CuNNy-8x4C-CHROMA-NVL-DN-conv6
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-1.220e-03, -1.207e-02, -3.736e-02, 3.663e-01, 8.762e-02, -5.383e-02, 5.796e-02, -1.011e-02, 1.612e-02, -4.284e-02, -2.038e-02, 1.837e-02, -9.681e-02, -6.251e-04, -2.510e-01, -5.309e-02));
	r += mul(s0_1, M4(4.326e-01, 1.117e-01, 2.776e-01, 5.297e-01, -4.064e-02, 2.364e-02, 3.839e-02, 1.296e-01, 1.356e-01, -8.034e-02, 8.595e-02, 5.036e-02, 2.419e-01, 1.285e-01, -1.040e-01, -7.753e-02));
	r += mul(s0_2, M4(5.182e-01, 1.626e-01, 3.989e-02, 2.451e-01, 1.367e-01, 1.657e-02, -8.010e-02, 1.941e-02, -9.463e-02, -3.716e-02, -5.871e-02, -1.062e-01, 4.474e-02, 2.147e-02, 4.202e-02, 3.031e-02));
	r += mul(s0_3, M4(8.600e-02, 4.539e-02, 5.102e-02, -2.433e-01, -2.654e-02, 4.181e-02, 6.688e-02, 1.468e-01, -1.111e-01, 1.207e-01, -2.013e-01, 2.056e-01, -1.387e-01, -6.657e-02, -2.318e-01, 1.990e-01));
	r += mul(s0_4, M4(3.697e-01, 9.395e-01, 6.168e-02, -7.258e-02, 8.023e-01, 2.198e-01, 5.582e-01, 4.143e-01, 2.895e-01, -4.692e-01, -5.338e-01, -6.310e-01, -1.085e-01, 7.541e-01, 6.035e-01, -4.448e-01));
	r += mul(s0_5, M4(1.576e-01, 8.383e-01, 4.972e-01, -3.785e-01, 1.146e-01, 2.567e-01, 1.901e-02, -1.746e-01, -9.357e-02, -2.686e-01, -1.653e-01, -2.577e-02, 4.349e-02, 6.761e-02, 6.325e-02, 4.027e-02));
	r += mul(s0_6, M4(-2.880e-01, -1.806e-01, 1.655e-01, 1.343e-01, -9.754e-02, 3.331e-02, 1.070e-02, 5.364e-02, 1.331e-01, 1.393e-02, -4.670e-02, -1.010e-01, 2.095e-02, 6.134e-02, -9.829e-03, -2.933e-02));
	r += mul(s0_7, M4(-1.727e-01, -2.970e-01, -2.979e-02, 2.472e-01, -6.225e-01, -2.822e-01, 2.692e-01, -6.613e-02, -3.791e-01, -4.519e-01, 1.408e-01, -1.962e-01, -2.454e-02, 1.376e-01, -3.772e-02, -1.939e-01));
	r += mul(s0_8, M4(-2.822e-01, -7.593e-02, -1.567e-01, -8.427e-02, -3.679e-02, 2.463e-01, 1.763e-01, -3.037e-01, -7.434e-02, 8.648e-03, 1.164e-01, -2.689e-01, 3.334e-02, -1.092e-01, -6.329e-02, 1.919e-01));
	r += mul(s1_0, M4(-2.470e-02, 7.696e-02, -3.450e-02, 6.239e-02, -1.084e-02, -1.635e-01, -3.257e-02, -1.509e-01, 1.427e-02, 3.052e-02, 1.062e-02, 2.243e-03, -4.342e-01, 9.895e-02, -1.421e-01, -1.748e-01));
	r += mul(s1_1, M4(-4.407e-02, -9.924e-02, -9.352e-02, -7.955e-02, -3.252e-01, 8.079e-02, -1.251e-01, -5.256e-02, -3.360e-03, -2.941e-02, 6.166e-02, -3.727e-02, -2.903e-01, 1.210e-01, 9.400e-02, 3.246e-01));
	r += mul(s1_2, M4(1.713e-01, 1.047e-01, -9.921e-02, -1.866e-03, 3.875e-03, -1.998e-02, -9.302e-02, -1.859e-02, -8.236e-02, -1.669e-02, 4.015e-03, -2.930e-02, -1.649e-01, 1.675e-01, 1.405e-01, 1.000e-01));
	r += mul(s1_3, M4(8.856e-03, 2.726e-02, -5.381e-02, -8.321e-02, 2.150e-02, -2.261e-01, 9.534e-02, 2.255e-02, -5.803e-02, 9.019e-02, -1.349e-01, 6.665e-02, -8.436e-02, -5.911e-01, -2.924e-01, 4.055e-01));
	r += mul(s1_4, M4(-6.120e-02, 1.685e-01, 1.432e-02, 4.629e-02, 2.532e-01, 2.779e-01, 9.553e-01, 7.604e-01, 8.771e-02, -1.988e-01, -1.198e-01, -1.080e-01, 4.707e-01, 3.750e-01, -2.827e-01, -1.332e-01));
	r += mul(s1_5, M4(2.149e-02, 4.608e-01, 1.224e-01, -4.112e-01, -4.503e-02, 1.958e-01, 1.127e-01, -2.295e-01, 4.247e-02, -1.509e-01, -5.097e-02, 1.935e-01, -2.096e-02, -8.985e-02, -1.544e-01, 3.176e-01));
	r += mul(s1_6, M4(7.461e-02, 9.640e-02, 1.913e-02, -4.464e-02, -3.009e-02, 5.813e-02, 6.268e-02, 7.087e-02, -4.723e-02, 6.361e-03, -5.145e-02, -1.766e-02, -1.092e-01, -1.994e-01, 1.956e-01, 1.852e-01));
	r += mul(s1_7, M4(-1.313e-02, -1.185e-01, 3.479e-02, 4.254e-02, -3.959e-02, 9.718e-02, 1.461e-01, -9.426e-02, -5.137e-02, 2.805e-01, 2.007e-01, -8.807e-02, 4.748e-02, -1.614e-01, -6.318e-02, -2.252e-01));
	r += mul(s1_8, M4(4.584e-02, 1.238e-01, -6.223e-02, -1.830e-01, 2.542e-02, 1.182e-01, 2.251e-02, -1.587e-01, 1.364e-02, 7.776e-02, 2.158e-01, 1.214e-01, 1.315e-01, 1.030e-01, -7.040e-02, -1.952e-01));
	r += V4(-6.314e-04, -4.753e-03, -3.951e-03, 6.727e-03);
	return r;
}
void Pass8(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 9
//!DESC CuNNy-8x4C-CHROMA-NVL-DN-conv7
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-3.996e-02, 2.768e-02, 1.828e-02, 3.313e-02, -1.027e-01, -4.257e-02, -3.273e-02, -1.145e-01, 1.604e-01, 4.096e-02, -2.450e-02, -3.330e-02, 1.548e-01, 4.065e-02, 2.891e-02, -7.107e-03));
	r += mul(s0_1, M4(7.095e-02, 8.075e-02, -2.812e-02, 5.428e-02, 1.828e-01, 3.662e-01, 1.487e-01, 3.955e-01, -2.503e-01, -1.310e-03, 8.992e-02, 2.056e-01, 1.517e-01, -3.899e-02, -1.145e-01, -1.790e-01));
	r += mul(s0_2, M4(1.421e-02, -1.480e-02, 4.646e-02, -2.812e-02, -1.168e-01, 1.108e-03, 6.340e-02, 1.245e-01, -1.708e-02, -2.110e-02, 5.818e-02, -3.053e-02, 6.751e-02, -6.900e-03, -5.484e-02, -5.164e-02));
	r += mul(s0_3, M4(1.799e-01, 9.809e-02, 1.207e-01, -2.116e-02, 5.920e-02, -1.223e-01, -1.675e-01, 4.010e-02, -3.238e-01, -8.103e-02, -1.109e-01, 8.569e-02, 2.069e-01, 7.836e-02, 2.384e-01, 1.026e-01));
	r += mul(s0_4, M4(1.200e-02, 9.018e-02, -2.389e-01, -1.616e-01, 1.189e-01, -2.198e-01, -4.966e-02, -1.191e+00, -6.758e-01, -2.840e-01, 8.667e-01, 4.529e-02, 1.333e-01, -2.006e-01, -1.181e-04, -3.096e-01));
	r += mul(s0_5, M4(3.017e-01, 3.976e-02, 9.047e-02, -1.388e-01, -1.947e-01, 6.731e-02, -3.168e-01, 4.257e-01, 4.083e-02, 1.656e-01, 1.048e-01, 2.105e-01, 1.810e-02, 3.253e-02, 2.786e-02, 2.313e-02));
	r += mul(s0_6, M4(-2.914e-02, 4.386e-02, -1.762e-02, -2.387e-02, 7.237e-02, 1.421e-01, 6.142e-02, 9.056e-03, -4.928e-03, -4.174e-02, -2.420e-01, -1.548e-01, 6.042e-02, 7.294e-02, 8.571e-02, 1.275e-02));
	r += mul(s0_7, M4(2.988e-02, 2.569e-01, 3.630e-01, 9.223e-02, 3.179e-02, -1.645e-01, -1.581e-01, 2.522e-02, -1.022e-01, -8.086e-02, -8.307e-01, -8.528e-02, 1.004e-01, 1.011e-01, 3.737e-01, 3.115e-02));
	r += mul(s0_8, M4(1.831e-01, 3.859e-01, 2.734e-01, 9.546e-03, -1.104e-01, -6.074e-01, -2.285e-01, -1.184e-02, 1.184e-01, -7.217e-02, 1.021e-02, 9.157e-02, -7.886e-02, -9.108e-02, -1.850e-02, -5.110e-02));
	r += mul(s1_0, M4(-1.581e-01, 6.428e-02, -1.468e-02, 7.676e-02, -1.678e-01, -3.448e-02, -4.528e-02, 3.148e-02, 1.219e-01, 1.083e-02, 3.650e-02, -2.988e-02, 2.057e-01, 2.289e-02, -6.366e-03, -2.620e-02));
	r += mul(s1_1, M4(-7.349e-02, 1.535e-01, -8.890e-02, 3.446e-01, 3.057e-01, 1.136e-01, -3.168e-03, 1.138e-02, -3.193e-01, -7.757e-02, -4.274e-02, 9.890e-02, 2.396e-01, -1.909e-01, -2.076e-01, -4.385e-01));
	r += mul(s1_2, M4(2.818e-02, 6.682e-02, 8.902e-02, 1.431e-01, 1.283e-02, 6.893e-02, -2.286e-02, 7.104e-02, -5.273e-03, -6.470e-02, 5.654e-02, -9.205e-02, 1.382e-01, 6.518e-02, -6.887e-02, -1.018e-02));
	r += mul(s1_3, M4(4.520e-02, 7.630e-02, 1.939e-01, 9.639e-02, 1.638e-01, -2.216e-03, -4.593e-02, -2.462e-02, -4.394e-02, -1.691e-02, -1.926e-02, 7.007e-02, 3.036e-01, -4.497e-03, -6.323e-02, 8.273e-02));
	r += mul(s1_4, M4(-4.221e-01, -3.401e-02, -1.217e-01, 2.681e-01, 7.370e-02, -6.523e-02, 2.075e-02, -3.737e-01, -7.291e-01, -3.037e-01, 3.082e-01, 2.495e-02, 3.737e-01, -6.793e-01, -5.879e-02, -2.035e-01));
	r += mul(s1_5, M4(2.033e-01, 1.191e-01, 1.191e-01, -1.243e-01, -9.892e-02, 5.393e-02, -6.038e-02, 1.698e-01, 2.078e-01, 1.109e-02, 5.887e-02, -1.046e-01, -1.100e-01, 2.469e-02, -1.089e-02, 1.173e-01));
	r += mul(s1_6, M4(5.319e-02, 4.744e-02, 7.311e-02, -8.819e-03, -6.150e-02, 1.935e-02, 1.661e-02, 6.521e-02, 4.051e-02, 5.208e-02, 5.750e-02, -1.454e-02, 1.149e-02, 4.186e-02, -1.608e-02, 9.792e-02));
	r += mul(s1_7, M4(-8.980e-02, 1.468e-01, -2.854e-01, 9.834e-03, 1.388e-01, -9.161e-02, 1.899e-01, -4.051e-02, 3.467e-02, 4.210e-02, -5.876e-01, 1.326e-02, 6.754e-02, 8.808e-03, 1.987e-01, 9.910e-03));
	r += mul(s1_8, M4(1.381e-01, 2.271e-01, 1.301e-01, 6.461e-02, -1.590e-01, -2.478e-01, -1.860e-01, -6.799e-02, 6.707e-02, 2.718e-02, 2.127e-01, 5.022e-02, -8.849e-02, -2.016e-01, -1.689e-01, -5.252e-02));
	r += V4(-3.689e-03, -2.159e-03, -3.484e-03, -6.209e-04);
	return r;
}
void Pass9(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 10
//!DESC CuNNy-8x4C-CHROMA-NVL-DN-conv8
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-4.141e-02, 3.935e-02, -6.789e-04, -4.418e-02, 1.041e-01, -1.919e-01, -2.705e-02, 1.592e-01, 9.013e-02, 2.027e-02, -5.806e-02, 5.840e-02, -8.369e-02, 2.716e-02, 1.613e-02, -6.020e-02));
	r += mul(s0_1, M4(6.958e-02, -2.715e-01, 5.877e-03, 9.645e-02, -3.330e-01, 9.318e-01, 4.531e-02, -2.882e-01, 1.130e-01, -1.394e-02, 3.598e-02, -4.106e-03, 2.534e-01, -7.225e-01, -5.555e-02, 2.110e-01));
	r += mul(s0_2, M4(-2.959e-02, 4.209e-03, 4.418e-03, 2.412e-03, -2.606e-02, -1.577e-01, 1.015e-03, 3.261e-02, -9.096e-02, 1.550e-02, -5.931e-02, 1.640e-02, 5.954e-03, 7.550e-02, -9.410e-03, -8.019e-03));
	r += mul(s0_3, M4(3.134e-03, 3.333e-02, 2.099e-02, -6.617e-02, -8.265e-02, -1.001e-01, 7.180e-03, 8.039e-02, 1.150e-01, 1.219e-02, 5.127e-02, 8.456e-02, -1.243e-02, 8.010e-02, -1.009e-02, -7.647e-02));
	r += mul(s0_4, M4(-1.709e-01, -1.383e-01, 1.243e-01, -1.683e-02, 1.632e-01, 6.517e-02, -4.895e-02, -7.299e-02, 2.332e-01, 1.014e-01, -5.673e-02, 4.123e-01, -9.784e-01, -5.223e-01, 1.042e-01, 4.033e-01));
	r += mul(s0_5, M4(-4.481e-02, -1.438e-02, -4.878e-03, 4.912e-02, 8.367e-02, 7.978e-03, -3.598e-03, -1.223e-02, -6.061e-02, -1.217e-01, 6.133e-02, -4.848e-02, -7.690e-02, 5.742e-02, 1.761e-01, -6.020e-02));
	r += mul(s0_6, M4(-5.483e-02, 7.467e-03, -1.848e-02, -5.021e-02, -2.324e-02, -7.901e-03, 1.164e-02, 2.788e-02, 1.190e-02, -1.078e-03, -5.039e-03, 1.257e-02, 5.655e-02, -1.406e-02, 7.223e-02, 6.066e-02));
	r += mul(s0_7, M4(-1.317e-01, -2.480e-02, 1.763e-02, -9.409e-02, -2.711e-02, -2.503e-03, -1.625e-03, -2.621e-02, -2.824e-03, -4.615e-03, -1.188e-02, -4.324e-02, 1.655e-01, 5.576e-02, -2.858e-02, -1.396e-02));
	r += mul(s0_8, M4(3.475e-02, 1.274e-01, -2.996e-02, 4.590e-02, -2.085e-02, 5.655e-03, -4.530e-03, -4.071e-03, 3.285e-02, 2.323e-02, -5.142e-04, 5.109e-03, 6.078e-02, -4.382e-02, -1.539e-02, 8.617e-02));
	r += mul(s1_0, M4(-1.648e-02, 5.480e-02, 6.666e-02, -6.567e-02, 7.303e-02, -9.642e-02, -4.508e-02, 1.121e-01, 5.434e-02, 7.247e-02, 1.059e-01, 3.260e-02, 1.566e-02, -5.310e-02, 3.382e-02, -3.292e-02));
	r += mul(s1_1, M4(4.775e-01, -2.731e-01, 7.615e-02, 1.373e-01, -6.387e-01, 8.655e-01, -1.165e-01, -2.337e-01, 8.496e-01, 1.140e-01, 2.627e-01, -7.055e-01, 1.427e-01, -4.346e-01, 2.946e-02, 1.289e-01));
	r += mul(s1_2, M4(-3.645e-02, -1.181e-01, 7.022e-03, 5.108e-02, -6.690e-02, -1.979e-01, 1.296e-02, -8.229e-03, -3.058e-01, -2.529e-01, -6.077e-01, 1.401e-01, 1.190e-02, 1.294e-01, 8.284e-04, -2.437e-02));
	r += mul(s1_3, M4(1.014e-01, -2.423e-02, 6.966e-02, 6.887e-02, -9.301e-02, -5.416e-02, -2.510e-03, 2.433e-02, 6.810e-02, 5.847e-04, -3.636e-03, -4.997e-02, -8.776e-02, 5.408e-02, 4.756e-02, -7.934e-02));
	r += mul(s1_4, M4(3.385e-01, -2.423e-01, 1.117e+00, -2.241e-01, 4.052e-01, 1.994e-01, 3.906e-03, -3.897e-01, 1.527e-01, 8.979e-02, -5.044e-04, 6.283e-01, -3.325e-01, -2.400e-01, 1.801e-01, 1.512e-01));
	r += mul(s1_5, M4(2.748e-01, 3.985e-01, 4.324e-02, -9.253e-02, 5.810e-03, -3.970e-03, -1.070e-01, -2.443e-02, -2.529e-01, -2.183e-01, 1.125e-01, -3.063e-01, -1.151e-01, -2.143e-01, -1.448e-01, 6.667e-02));
	r += mul(s1_6, M4(5.416e-03, -8.512e-03, -2.565e-02, 1.593e-02, -3.008e-02, -1.273e-02, 2.258e-04, -1.186e-02, 1.039e-02, -1.724e-03, -6.318e-03, -3.347e-03, 2.203e-02, 1.801e-02, 3.224e-04, -2.054e-02));
	r += mul(s1_7, M4(-3.807e-02, -9.727e-03, -4.165e-02, 5.796e-01, 3.849e-02, 2.545e-02, 3.564e-03, 3.159e-02, 2.066e-02, 2.437e-02, -7.884e-03, 5.579e-02, -1.936e-02, -7.122e-03, -9.226e-03, 1.247e-02));
	r += mul(s1_8, M4(1.274e-01, 1.489e-01, -3.068e-02, 1.479e-01, -1.196e-02, -1.095e-02, -1.057e-02, -1.996e-02, -2.066e-02, -1.897e-02, 1.284e-02, -1.975e-04, -6.712e-02, -4.510e-02, 9.919e-03, -8.685e-02));
	r += V4(-4.005e-03, -9.250e-04, -2.153e-03, -3.731e-04);
	return r;
}
void Pass10(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 11
//!DESC CuNNy-8x4C-CHROMA-NVL-DN-out
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(1.431e-01, 6.313e-03, -3.178e-03, 1.678e-03, 8.014e-02, 1.747e-02, -1.381e-03, 5.187e-04, 1.042e-01, 8.421e-04, -2.026e-02, 1.947e-02, 3.946e-02, 1.084e-02, 5.831e-03, 2.812e-03));
	r += mul(s0_1, M4(-2.550e-02, 1.691e-02, 6.465e-03, -1.236e-02, -4.730e-02, 1.827e-02, -1.285e-02, -1.546e-03, -1.333e-01, -1.503e-02, -1.801e-02, 1.042e-02, -1.393e-01, -1.218e-02, -5.692e-04, 1.992e-02));
	r += mul(s0_2, M4(1.696e-02, -3.774e-03, 1.037e-02, 1.082e-02, 2.502e-02, 3.455e-02, 1.191e-02, 7.310e-03, 6.393e-03, -9.641e-03, 2.282e-02, 1.983e-02, 1.038e-01, 1.747e-02, 5.701e-02, 5.222e-02));
	r += mul(s0_3, M4(-2.115e-01, 3.601e-02, 4.944e-02, -4.273e-02, -1.912e-01, 3.798e-02, 3.765e-02, 5.634e-02, -5.287e-01, 1.890e-01, 4.482e-01, -8.015e-02, 1.726e-01, 2.869e-02, 6.970e-02, 2.996e-02));
	r += mul(s0_4, M4(-3.748e-01, -7.339e-01, 3.453e-01, 2.373e-01, -4.481e-02, -3.159e-01, -5.836e-02, -5.800e-02, 4.622e-01, 3.139e-01, 8.655e-02, 6.756e-01, 3.971e-02, 3.312e-01, -2.882e-01, -9.795e-02));
	r += mul(s0_5, M4(-8.043e-03, 2.302e-02, -1.884e-02, 4.966e-02, -3.891e-02, -4.822e-02, -5.043e-02, -9.449e-02, -6.573e-02, 4.321e-03, -5.616e-02, -9.304e-02, -9.504e-02, -1.723e-01, -2.024e-01, -4.526e-01));
	r += mul(s0_6, M4(-1.372e-01, 5.274e-03, 8.277e-02, -1.974e-02, 2.076e-01, 8.093e-02, -3.510e-02, 4.192e-02, 3.889e-02, 1.868e-02, -1.060e-01, 1.489e-01, -4.034e-03, 1.196e-03, 5.339e-03, 8.922e-04));
	r += mul(s0_7, M4(4.469e-02, -1.608e-01, -2.549e-01, -5.492e-02, 5.814e-02, 2.549e-01, 3.252e-01, 2.641e-01, 8.314e-02, -6.422e-02, 3.243e-01, 8.882e-02, 3.101e-04, -2.714e-02, -1.314e-02, 3.419e-02));
	r += mul(s0_8, M4(1.885e-02, 6.664e-02, 1.126e-01, 4.087e-02, 1.766e-02, 2.071e-02, 1.691e-02, 6.004e-02, 2.008e-02, 4.325e-02, 7.741e-02, 1.766e-01, -1.633e-02, 4.708e-03, -1.715e-02, 3.717e-02));
	r += mul(s1_0, M4(3.845e-02, 1.627e-02, -5.787e-03, -6.083e-03, 1.274e-01, 1.103e-01, -7.497e-02, -2.447e-02, 5.228e-02, -1.113e-02, 2.700e-03, -2.126e-02, 1.251e-01, -1.870e-04, -8.036e-02, -2.286e-03));
	r += mul(s1_1, M4(-8.733e-04, 2.530e-02, -1.635e-02, -2.179e-03, -1.037e-02, 3.827e-02, -8.514e-03, -4.251e-02, -1.753e-01, 7.489e-02, -5.362e-02, 3.014e-02, -7.367e-01, 1.945e-01, 1.791e-01, 8.690e-02));
	r += mul(s1_2, M4(4.442e-03, 4.053e-02, -1.113e-03, -2.988e-03, 1.967e-02, -7.952e-03, 1.413e-02, 1.908e-03, 2.416e-02, -2.346e-02, 5.101e-03, 2.069e-02, 8.868e-02, -4.945e-02, 5.059e-02, 2.867e-02));
	r += mul(s1_3, M4(-1.480e-01, 1.561e-02, -7.643e-03, 2.882e-02, -6.711e-01, 2.768e-01, -5.411e-01, 6.243e-01, -4.246e-02, 3.307e-02, -4.926e-02, -7.013e-03, 8.442e-02, 1.842e-02, 5.716e-02, -3.487e-02));
	r += mul(s1_4, M4(-1.374e-01, -4.587e-01, 3.185e-02, -6.275e-02, 1.485e-02, 3.564e-02, -5.033e-02, -1.997e-01, 7.324e-01, 2.627e-01, 2.902e-01, 9.401e-02, -4.725e-02, 2.413e-01, -4.254e-01, 3.624e-01));
	r += mul(s1_5, M4(2.133e-02, 1.886e-03, -3.772e-02, -1.405e-02, -2.471e-02, -9.038e-02, -3.172e-02, -1.072e-01, -3.559e-02, -1.540e-03, -1.045e-01, -4.956e-02, -8.294e-02, -2.588e-01, -1.880e-01, -3.643e-01));
	r += mul(s1_6, M4(-6.049e-02, -5.578e-03, -4.627e-02, 6.468e-02, 1.337e-01, 8.667e-02, 2.018e-01, 3.216e-03, -4.750e-03, 6.248e-03, -4.795e-02, 1.910e-02, 4.202e-03, 1.205e-02, 1.301e-04, 6.742e-03));
	r += mul(s1_7, M4(2.617e-02, -1.155e-01, -1.002e-01, -4.468e-01, 1.140e-01, 2.077e-01, 1.451e-01, 3.355e-01, 3.619e-02, -9.229e-02, 3.234e-01, 3.139e-02, 9.350e-03, 7.844e-03, 1.198e-02, -1.448e-03));
	r += mul(s1_8, M4(-1.055e-02, 4.039e-02, 6.901e-02, 1.343e-01, 2.082e-02, 5.261e-02, 2.743e-02, 3.802e-02, 2.927e-02, 1.107e-01, 9.790e-02, 1.465e-01, -7.657e-03, -6.687e-03, -1.363e-03, 1.532e-02));
	r += V4(1.116e-03, 5.991e-05, 1.431e-03, 6.399e-04);
	return tanh(r);
}
void Pass11(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 12
//!DESC CuNNy-8x4C-CHROMA-NVL-DN-shuffle
//!STYLE PS
//!IN t1, INPUT, easu
float4 Pass12(float2 pos) {
	float2 pt = float2(GetInputPt());
	static const float3x3 rgb2yuv = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081};
	static const float3x3 yuv2rgb = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float4 r = 0.0;
	float2 size = float2(GetInputSize());
	float2 f = frac(pos * size);
	float3 yuv = mul(rgb2yuv, INPUT.SampleLevel(SL, pos, 0).rgb);
	int2 i = int2(f * 2.0);
	r.r = t1.SampleLevel(SP, (float2(0.5, 0.5) - f) * pt + pos, 0)[2*i.y + i.x];
	r.r += easu.SampleLevel(SP, pos, 0).r;
	r.a = 1.0;
	r.r = clamp(r, 0.0, 1.0);
	float3 px = mul(yuv2rgb, float3(r.r, yuv.yz));
	return float4(px, 1.0);
}
