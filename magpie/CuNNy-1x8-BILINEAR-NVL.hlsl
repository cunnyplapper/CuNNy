// CuNNy 1x8 BILINEAR NVL
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

//!MAGPIE EFFECT
//!VERSION 3
//!OUTPUT_WIDTH INPUT_WIDTH * 2
//!OUTPUT_HEIGHT INPUT_HEIGHT * 2

//!TEXTURE
Texture2D INPUT;


//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_UNORM
Texture2D up_0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_UNORM
Texture2D up_1;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_UNORM
Texture2D conv1_0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_UNORM
Texture2D conv1_1;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D down;

//!PASS 1
//!DESC CuNNy-1x8-BILINEAR-NVL-up
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT up_0, up_1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) dot(float3(0.299, 0.587, 0.114), O(INPUT, float2(x, y)).rgb)
float4 f0(float2 pt, float2 pos, min16float s0_0, min16float s0_1, min16float s0_2, min16float s0_3, min16float s0_4, min16float s0_5, min16float s0_6, min16float s0_7, min16float s0_8) {
	min16float4 r = 0.0;
	r += min16float4(-0.005749478004872799, 0.00271384185180068, -0.008098735474050045, 0.008890378288924694) * s0_0;
	r += min16float4(0.007619897834956646, 0.023668287321925163, 0.005555895157158375, -0.010215477086603642) * s0_1;
	r += min16float4(0.004034369718283415, -0.041103433817625046, 0.008265690878033638, 0.0004671972128562629) * s0_2;
	r += min16float4(-0.022892571985721588, -0.007308504544198513, -0.09789912402629852, 0.0062757572159171104) * s0_3;
	r += min16float4(-0.2124023288488388, -0.41291654109954834, 0.40083062648773193, -0.3837890028953552) * s0_4;
	r += min16float4(0.02467494085431099, 0.4345702826976776, 0.021511483937501907, 0.03050837107002735) * s0_5;
	r += min16float4(0.030703488737344742, -0.001008885446935892, -0.00203455938026309, -0.015465880744159222) * s0_6;
	r += min16float4(0.3723583519458771, 0.00656189164146781, -0.12379678338766098, 0.3926914930343628) * s0_7;
	r += min16float4(-0.022937655448913574, -0.004880221094936132, -0.02816672995686531, -0.029967863112688065) * s0_8;
	r += float4(0.0018239880446344614, -0.0006650207797065377, -0.0039577968418598175, -0.00024008612672332674);
	return max(r, 0.0);
}
float4 f1(float2 pt, float2 pos, min16float s0_0, min16float s0_1, min16float s0_2, min16float s0_3, min16float s0_4, min16float s0_5, min16float s0_6, min16float s0_7, min16float s0_8) {
	min16float4 r = 0.0;
	r += min16float4(0.025147343054413795, -0.02323923259973526, -0.022056881338357925, -0.005476802587509155) * s0_0;
	r += min16float4(0.1086738184094429, 0.17319580912590027, -0.06629647314548492, 0.009334865026175976) * s0_1;
	r += min16float4(-0.042779650539159775, 0.31909215450286865, -0.081639863550663, -0.0012268830323591828) * s0_2;
	r += min16float4(0.22314462065696716, 0.02488815039396286, -0.03232133761048317, 0.014160833321511745) * s0_3;
	r += min16float4(-0.5175650119781494, -0.13329775631427765, -0.01319030299782753, 0.0017621656879782677) * s0_4;
	r += min16float4(0.13820333778858185, -0.3544120788574219, -0.026085736230015755, -0.006571675185114145) * s0_5;
	r += min16float4(0.0005813966854475439, 0.015571694821119308, -0.007863808423280716, 0.3987339735031128) * s0_6;
	r += min16float4(-0.0885123610496521, -0.0468895323574543, -0.06608311831951141, -0.4169917404651642) * s0_7;
	r += min16float4(0.14790485799312592, 0.023852171376347542, -0.0950658991932869, 0.006587627809494734) * s0_8;
	r += float4(-0.00021869002375751734, -0.0007159531814977527, 0.0, -0.0008545676246285439);
	return max(r, 0.0);
}
void Pass1(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float s0_0 = l0(-1.0, -1.0);
	min16float s0_1 = l0(0.0, -1.0);
	min16float s0_2 = l0(1.0, -1.0);
	min16float s0_3 = l0(-1.0, 0.0);
	min16float s0_4 = l0(0.0, 0.0);
	min16float s0_5 = l0(1.0, 0.0);
	min16float s0_6 = l0(-1.0, 1.0);
	min16float s0_7 = l0(0.0, 1.0);
	min16float s0_8 = l0(1.0, 1.0);
	up_0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8);
	up_1[gxy] = f1(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8);
}
//!PASS 2
//!DESC CuNNy-1x8-BILINEAR-NVL-conv1
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN up_0, up_1
//!OUT conv1_0, conv1_1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) O(up_0, float2(x, y))
#define l1(x, y) O(up_1, float2(x, y))
float4 f0(float2 pt, float2 pos, min16float4 s0_0, min16float4 s0_1, min16float4 s0_2, min16float4 s0_3, min16float4 s0_4, min16float4 s0_5, min16float4 s0_6, min16float4 s0_7, min16float4 s0_8, min16float4 s1_0, min16float4 s1_1, min16float4 s1_2, min16float4 s1_3, min16float4 s1_4, min16float4 s1_5, min16float4 s1_6, min16float4 s1_7, min16float4 s1_8) {
	min16float4 r = 0.0;
	r += mul(s0_0, min16float4x4(0.044592779129743576, 0.0537787601351738, 0.21631485223770142, 0.1061825230717659, 0.025482507422566414, -0.2428060919046402, -0.18325810134410858, -0.2818474769592285, 0.026785017922520638, -0.024160565808415413, 0.10392532497644424, -0.05073912814259529, 0.02933221310377121, 0.17819930613040924, 0.06069309636950493, -0.2094060778617859));
	r += mul(s0_1, min16float4x4(-0.08491510897874832, -0.24241408705711365, -0.8289988040924072, 0.35670989751815796, -0.02091490663588047, -0.0784577950835228, -0.876982569694519, -0.1026793047785759, -0.06863763928413391, 0.2325013130903244, 0.2780091166496277, 0.012331989593803883, -0.059576522558927536, 0.4269799292087555, -3.469398021697998, 0.13405166566371918));
	r += mul(s0_2, min16float4x4(0.0096129160374403, -0.14181500673294067, 0.11034399271011353, -0.34652820229530334, 0.007700903806835413, -0.00634275795891881, -0.08846653252840042, -0.0999368280172348, -0.02886356972157955, 0.24612347781658173, 0.41117778420448303, 0.1568351835012436, 0.0031962154898792505, -0.054007306694984436, 0.17382675409317017, 0.501996636390686));
	r += mul(s0_3, min16float4x4(-0.1306363195180893, 0.07372688502073288, 0.2626721262931824, 0.06486183404922485, 0.017807917669415474, -0.020892273634672165, -0.043979283422231674, 0.8815315365791321, -0.0603119432926178, -0.05981887876987457, -0.16343562304973602, -0.06175285205245018, 0.011632257141172886, -0.03328549116849899, 0.12431064248085022, -0.09255602210760117));
	r += mul(s0_4, min16float4x4(-0.16407649219036102, 0.04191124439239502, -0.32761871814727783, -0.31590139865875244, 0.01574135571718216, 0.558375358581543, 0.45261335372924805, 0.1224428117275238, 0.05783993378281593, -0.5691675543785095, -0.038171205669641495, -0.010404934175312519, 0.015453091822564602, -1.1054677963256836, 0.07926414161920547, 0.42990872263908386));
	r += mul(s0_5, min16float4x4(-0.07104432582855225, 0.11492326110601425, -0.006384688895195723, 0.09860096126794815, -0.008592817932367325, 0.529295802116394, -0.007499650586396456, -0.1635897308588028, -0.014957040548324585, -0.29400745034217834, 0.018505869433283806, -0.034928157925605774, -0.02248833328485489, 0.6053802371025085, 0.2622447609901428, -0.029880302026867867));
	r += mul(s0_6, min16float4x4(-0.010548514313995838, -0.006089405156672001, 0.05131900683045387, 0.04398156702518463, -0.04928423836827278, 0.08292964845895767, 0.16011518239974976, -0.1238919198513031, 0.06211676448583603, -0.004070801194757223, 0.045674894005060196, 0.011458741500973701, -0.07525002956390381, -0.1180393248796463, 0.03257334604859352, 0.0026350810658186674));
	r += mul(s0_7, min16float4x4(-0.14380690455436707, 0.14599528908729553, 0.03210071101784706, -0.06114843860268593, 0.03569023683667183, -0.8965223431587219, 0.27636581659317017, 0.035902637988328934, -0.01764754205942154, 0.30867499113082886, 0.12496300041675568, -0.05022444948554039, 0.003906028810888529, -0.27388882637023926, -0.08764267712831497, 0.07617413252592087));
	r += mul(s0_8, min16float4x4(-0.21204279363155365, 0.12341386079788208, -0.08676878362894058, 0.04954897239804268, 0.07859443873167038, -0.1938241869211197, 0.042966630309820175, -0.13002963364124298, -0.06238073483109474, -0.005928868427872658, -0.18850141763687134, 0.04799320921301842, 0.07434666156768799, -0.1534755825996399, 0.04228236898779869, -0.14444871246814728));
	r += mul(s1_0, min16float4x4(-0.07811835408210754, -0.01604834944009781, 0.15470373630523682, -0.21536462008953094, -0.0742095336318016, -0.041188523173332214, -0.35767918825149536, -0.0701436772942543, 0.051847513765096664, 0.012480750679969788, -0.04139239341020584, 0.1006307378411293, -0.09117355197668076, -0.057052046060562134, 0.051349226385354996, -0.014180642552673817));
	r += mul(s1_1, min16float4x4(-0.1326831877231598, 0.1283935010433197, -0.5692644715309143, -0.006423229351639748, 0.020127607509493828, -0.13543878495693207, -0.42088744044303894, -0.0661604180932045, -0.06631508469581604, -0.014914740808308125, -0.09582675248384476, -0.1291276514530182, 0.02037392370402813, -0.04749155044555664, 0.5176495313644409, -1.4612596035003662));
	r += mul(s1_2, min16float4x4(0.017285116016864777, -0.057259805500507355, -0.007785297464579344, 0.3122017979621887, 0.026528554037213326, 0.026283353567123413, -0.08144386112689972, -0.020191006362438202, 0.14086149632930756, 0.012087144888937473, -0.07916710525751114, 0.03734908625483513, -0.03073265217244625, -0.10824602842330933, 0.2555738389492035, 0.8300784230232239));
	r += mul(s1_3, min16float4x4(-0.05365530773997307, 0.020317133516073227, -0.12951211631298065, 0.021688029170036316, -0.08464044332504272, 0.011446798220276833, 0.03235305845737457, -0.41380706429481506, 0.032929208129644394, -0.04944385960698128, 0.04825648292899132, -0.040385350584983826, 0.013664493337273598, 0.10036756843328476, -0.08226944506168365, -0.04987305402755737));
	r += mul(s1_4, min16float4x4(0.06868859380483627, -0.08794315904378891, -0.8587485551834106, -0.4265553951263428, 0.020772181451320648, 0.3418695628643036, -0.2711491286754608, -0.4348756968975067, 0.11448819935321808, -0.10435046255588531, 0.0041460697539150715, 0.006950770039111376, -0.03885974362492561, -0.16230522096157074, -0.2645590603351593, 0.09681647270917892));
	r += mul(s1_5, min16float4x4(-0.10670533031225204, -0.23059594631195068, -0.0731348916888237, 0.1972714066505432, 0.008445224724709988, 0.03107208013534546, -0.051452554762363434, 0.018314240500330925, 0.015062908641994, 0.09330374002456665, 0.03128104656934738, 0.08785655349493027, 0.06260858476161957, 0.27729344367980957, -0.1269502490758896, -0.0075907278805971146));
	r += mul(s1_6, min16float4x4(-0.04664032906293869, -0.11919552087783813, 0.11163076758384705, 0.08217316120862961, -0.029222942888736725, 0.23367847502231598, -0.013813551515340805, 0.6298015117645264, -0.13947457075119019, -0.024650681763887405, -0.06630348414182663, -0.06905300915241241, 0.026692001149058342, -0.019797654822468758, 0.004266764968633652, -0.04480835795402527));
	r += mul(s1_7, min16float4x4(-0.027866972610354424, 0.08607937395572662, 0.022555110976099968, 0.1719309538602829, -0.03318299725651741, -0.09226918965578079, -0.029255852103233337, 0.09657273441553116, 0.009969296865165234, -0.031031783670186996, 0.015986230224370956, 0.005088237579911947, 0.022908315062522888, 0.06292443722486496, -0.10791444033384323, -0.03369054198265076));
	r += mul(s1_8, min16float4x4(-0.01862509176135063, 0.1049870029091835, 0.0424303337931633, 0.09356781095266342, 0.030868105590343475, -0.491013765335083, 0.05339319631457329, 0.039715155959129333, 0.08224336057901382, 0.038180142641067505, 0.0501556321978569, 0.06311199814081192, -0.018782643601298332, 0.10913713276386261, -0.0566231831908226, -0.011459876783192158));
	r += float4(-0.028765566647052765, -0.0015070841182023287, -0.003890132997184992, -0.005307036451995373);
	return max(r, 0.0);
}
float4 f1(float2 pt, float2 pos, min16float4 s0_0, min16float4 s0_1, min16float4 s0_2, min16float4 s0_3, min16float4 s0_4, min16float4 s0_5, min16float4 s0_6, min16float4 s0_7, min16float4 s0_8, min16float4 s1_0, min16float4 s1_1, min16float4 s1_2, min16float4 s1_3, min16float4 s1_4, min16float4 s1_5, min16float4 s1_6, min16float4 s1_7, min16float4 s1_8) {
	min16float4 r = 0.0;
	r += mul(s0_0, min16float4x4(0.0943240374326706, 0.06338568776845932, 0.14587774872779846, 0.19407279789447784, -0.036103256046772, 0.16988347470760345, 0.04217611625790596, 0.07897680252790451, -0.11935865134000778, 0.06231115758419037, 0.09601207077503204, 0.03845629841089249, -0.10463469475507736, -0.14246723055839539, 0.31872129440307617, -0.33494576811790466));
	r += mul(s0_1, min16float4x4(-0.23894447088241577, -0.15718983113765717, -0.16399963200092316, 0.11760764569044113, -0.003954585641622543, -0.12303555011749268, -0.047764647752046585, 0.05838879197835922, 0.2222137600183487, 0.04978188872337341, 0.079087033867836, 0.33161285519599915, -0.6975526809692383, 0.04413297399878502, 1.1861016750335693, 0.5214844942092896));
	r += mul(s0_2, min16float4x4(0.056146737188100815, 0.19651135802268982, 0.019472219049930573, 0.009834851138293743, -0.045697327703237534, -0.15902474522590637, -0.10823553800582886, -0.051872946321964264, 0.028538713231682777, -0.08093759417533875, -0.1888803094625473, 0.2543141543865204, -0.36873599886894226, -0.28912481665611267, 0.11221154034137726, 0.12193546444177628));
	r += mul(s0_3, min16float4x4(-0.09567505121231079, -0.13443495333194733, -0.03232267126441002, 0.18496324121952057, -0.5366633534431458, -0.24324926733970642, 1.1054658889770508, -2.938343048095703, 0.1807054877281189, 0.01927652396261692, -0.1391606479883194, 0.04124930128455162, 0.09975145012140274, 0.08830863982439041, -0.10948148369789124, -0.7084923982620239));
	r += mul(s0_4, min16float4x4(0.3056640625, -0.4712272882461548, -0.2199096381664276, -0.14453229308128357, 0.9746665358543396, 0.26215967535972595, -1.2178750038146973, 0.40291011333465576, -0.20706482231616974, -0.13330192863941193, 0.09957556426525116, -0.6337104439735413, 1.0742040872573853, 1.13671875, -1.9727863073349, 0.3575250506401062));
	r += mul(s0_5, min16float4x4(-0.016218898817896843, 0.3334967792034149, 0.12683287262916565, -0.4310830533504486, -0.07770147174596786, -0.2637481093406677, -0.1081274002790451, -0.11643052101135254, -0.0128471739590168, -0.04497390240430832, 0.019051633775234222, 0.030401406809687614, 0.03935438022017479, -1.0211273431777954, -0.3940539062023163, 0.357273131608963));
	r += mul(s0_6, min16float4x4(-0.014714889228343964, -0.014874646440148354, 0.026503171771764755, 0.01393966469913721, -0.17161835730075836, -0.15985143184661865, -0.12313215434551239, 0.028499679639935493, -0.04051746428012848, -0.05701644718647003, 0.003244021674618125, -0.1008707582950592, 0.02261553332209587, 0.011041214689612389, 0.001640479196794331, -0.05528382956981659));
	r += mul(s0_7, min16float4x4(-0.054487187415361404, -0.07677610218524933, 0.06261825561523438, -0.0815705955028534, -0.22129414975643158, 0.15197765827178955, -0.040049247443675995, 0.27742958068847656, -0.04938985034823418, -0.10825734585523605, 0.02066786028444767, -0.00422261655330658, -0.09058872610330582, -0.011055288836359978, 0.03710104152560234, -0.0040627093985676765));
	r += mul(s0_8, min16float4x4(-0.024572638794779778, 0.22368578612804413, 0.0015344019047915936, 0.0641440823674202, -0.015481449663639069, -0.3093201220035553, -0.09046091139316559, -0.013736885972321033, -0.01556852925568819, 0.3257894814014435, 0.050869230180978775, 0.11528325825929642, 0.10229543596506119, -0.19293612241744995, -0.1218123510479927, -0.10229838639497757));
	r += mul(s1_0, min16float4x4(0.09263993799686432, 0.07933232933282852, 0.01351890992373228, 0.051768265664577484, -0.08865242451429367, -0.07161032408475876, -0.051747776567935944, 0.07663605362176895, 0.06837040185928345, 0.038676392287015915, 0.05426454544067383, -0.0964708998799324, -0.15772628784179688, -0.17131677269935608, -0.11120743304491043, -0.973857045173645));
	r += mul(s1_1, min16float4x4(0.11271823942661285, -0.04585942253470421, 0.1386546790599823, -0.022732151672244072, -0.07619630545377731, -0.008001257665455341, 0.015051973052322865, -0.1498805582523346, -0.14190341532230377, -0.061383578926324844, 0.04458697885274887, -0.08437976241111755, 0.448108047246933, 0.7717814445495605, -0.4489949345588684, 0.5371060967445374));
	r += mul(s1_2, min16float4x4(0.11238895356655121, 0.22342093288898468, 0.2783638834953308, 0.2346557378768921, 0.018351782113313675, 0.013220337219536304, 0.008242660202085972, 0.022861571982502937, 0.062493521720170975, -0.0510067343711853, -0.15794484317302704, 0.008344350382685661, -0.1924593150615692, -0.872592568397522, 0.8621732592582703, -0.050751302391290665));
	r += mul(s1_3, min16float4x4(0.0976976603269577, 0.15344341099262238, 0.20394951105117798, -2.1553502082824707, 0.3918589651584625, 0.12683576345443726, -0.27646616101264954, 0.05934431031346321, 0.07242023199796677, 0.08658286184072495, -0.06722962856292725, -0.034601885825395584, -0.00445875059813261, -0.1183462142944336, -0.07932101935148239, -0.3886305093765259));
	r += mul(s1_4, min16float4x4(0.47645148634910583, -0.8419000506401062, 0.2919103503227234, -0.9607862830162048, 0.3084297776222229, -0.09475196897983551, 0.246581569314003, -0.3804057538509369, 0.12987805902957916, 0.021234409883618355, -0.04546160623431206, -0.07152745872735977, 0.17878501117229462, 0.22422073781490326, 0.06270333379507065, 0.06373815983533859));
	r += mul(s1_5, min16float4x4(0.17189696431159973, 0.7775236368179321, 0.11457762122154236, 0.0031148672569543123, 0.014333357103168964, 0.06796324253082275, 0.06387672573328018, -0.029803430661559105, -0.08106309175491333, -0.01867307350039482, -0.24511969089508057, -0.04581277817487717, -0.00879786629229784, -0.8801981210708618, -0.1413731575012207, 0.010588068515062332));
	r += mul(s1_6, min16float4x4(0.05483372509479523, 0.22699913382530212, 0.11243817210197449, 0.05300357565283775, 0.01167113333940506, -0.48929211497306824, 0.5409970879554749, 0.10005026310682297, 0.06437330693006516, -0.10475552082061768, -0.11292459070682526, 0.1837977170944214, 0.0018409150652587414, 0.03794745355844498, -0.026012999936938286, -0.09344259649515152));
	r += mul(s1_7, min16float4x4(-0.009669419378042221, 0.03906754404306412, 0.20752474665641785, 0.14527229964733124, -0.012290340848267078, 0.0551757775247097, 0.22544409334659576, -0.45996370911598206, 0.023162420839071274, -0.13574334979057312, 0.1272365301847458, -0.10861939936876297, -0.0002559771528467536, 0.0031616436317563057, 0.0001800802565412596, -0.01720038615167141));
	r += mul(s1_8, min16float4x4(0.02706220932304859, 0.03192158415913582, 0.02946360968053341, 0.09006137400865555, 0.030998270958662033, 0.07979343831539154, 0.030386650934815407, 0.023772649466991425, 0.0002646131906658411, 0.032964739948511124, 0.25001946091651917, -0.04602603241801262, -0.04675612971186638, 0.029259756207466125, -0.02484787069261074, 0.02022489346563816));
	r += float4(-9.406219032825902e-05, -0.00187998590990901, -0.0030743780080229044, -0.0025004674680531025);
	return max(r, 0.0);
}
void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float4 s0_0 = l0(-1.0, -1.0);
	min16float4 s0_1 = l0(0.0, -1.0);
	min16float4 s0_2 = l0(1.0, -1.0);
	min16float4 s0_3 = l0(-1.0, 0.0);
	min16float4 s0_4 = l0(0.0, 0.0);
	min16float4 s0_5 = l0(1.0, 0.0);
	min16float4 s0_6 = l0(-1.0, 1.0);
	min16float4 s0_7 = l0(0.0, 1.0);
	min16float4 s0_8 = l0(1.0, 1.0);
	min16float4 s1_0 = l1(-1.0, -1.0);
	min16float4 s1_1 = l1(0.0, -1.0);
	min16float4 s1_2 = l1(1.0, -1.0);
	min16float4 s1_3 = l1(-1.0, 0.0);
	min16float4 s1_4 = l1(0.0, 0.0);
	min16float4 s1_5 = l1(1.0, 0.0);
	min16float4 s1_6 = l1(-1.0, 1.0);
	min16float4 s1_7 = l1(0.0, 1.0);
	min16float4 s1_8 = l1(1.0, 1.0);
	conv1_0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
	conv1_1[gxy] = f1(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 3
//!DESC CuNNy-1x8-BILINEAR-NVL-down
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN conv1_0, conv1_1
//!OUT down
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) O(conv1_0, float2(x, y))
#define l1(x, y) O(conv1_1, float2(x, y))
float4 f0(float2 pt, float2 pos, min16float4 s0_0, min16float4 s0_1, min16float4 s0_2, min16float4 s0_3, min16float4 s0_4, min16float4 s0_5, min16float4 s0_6, min16float4 s0_7, min16float4 s0_8, min16float4 s1_0, min16float4 s1_1, min16float4 s1_2, min16float4 s1_3, min16float4 s1_4, min16float4 s1_5, min16float4 s1_6, min16float4 s1_7, min16float4 s1_8) {
	min16float4 r = 0.0;
	r += mul(s0_0, min16float4x4(0.06518681347370148, 0.02230001799762249, 0.1568867415189743, 0.17323090136051178, 0.4835354685783386, -0.11041485518217087, -0.17361494898796082, -0.10942032188177109, -0.2762620449066162, -0.12537577748298645, 0.20713409781455994, 0.12166061252355576, -0.08940040320158005, 0.0005748956464231014, 0.0037757123354822397, 0.06353166699409485));
	r += mul(s0_1, min16float4x4(0.05858101695775986, -0.05664711445569992, -0.11838468909263611, -0.00568532245233655, -0.1952599287033081, 0.3344325125217438, -0.05764509737491608, -0.10614702105522156, -0.012779702432453632, -0.1551317423582077, 0.1084403544664383, 0.1449516862630844, 0.05788520723581314, 0.0030538318678736687, -0.06090448051691055, -0.03940447047352791));
	r += mul(s0_2, min16float4x4(0.0372355617582798, 0.12257225811481476, 0.08782995492219925, -0.2298300713300705, 0.00273744179867208, -0.004244282841682434, 0.003176735946908593, -0.004391705151647329, -0.011139153502881527, 0.08357405662536621, -0.04236878082156181, 0.001180624240078032, -0.004571173805743456, -0.014896423555910587, 0.029870392754673958, -0.013210372067987919));
	r += mul(s0_3, min16float4x4(-0.16534928977489471, 0.008333409205079079, 0.03507204353809357, 0.03925129398703575, -0.7136627435684204, -0.15770496428012848, 0.683881402015686, 0.1002236157655716, 0.46460163593292236, -0.13851028680801392, -0.2315506488084793, -0.13374491035938263, 0.032951563596725464, -0.04063967615365982, 0.06623606383800507, -0.01837781071662903));
	r += mul(s0_4, min16float4x4(-0.026451123878359795, 0.046982038766145706, -0.08701877295970917, -0.17940688133239746, 0.007920322939753532, -0.43586209416389465, -0.03983645886182785, 0.5957027077674866, 0.48738929629325867, 1.668074131011963, -1.16015625, -0.6744254231452942, -0.6707268357276917, 0.11272425204515457, 0.20303641259670258, 0.6613687872886658));
	r += mul(s0_5, min16float4x4(0.00013849636889062822, -0.09194532781839371, -0.16604982316493988, 0.08662589639425278, -0.032858382910490036, 0.05383318290114403, -0.008805761113762856, -0.006685068365186453, 0.02716931141912937, -0.2554299235343933, 0.25748080015182495, -0.03366093337535858, 0.07055352628231049, -0.1723627746105194, 0.07397420704364777, -0.01775391399860382));
	r += mul(s0_6, min16float4x4(0.022227108478546143, -0.008116469718515873, -0.010231712833046913, -0.09771394729614258, -0.00037297647213563323, 0.05120263993740082, -0.03633691743016243, -0.0035534624475985765, -0.02038353681564331, 0.028016258031129837, 0.05277148634195328, -0.0494101382791996, 0.010843132622539997, 0.04053754732012749, -0.0393015518784523, -0.03258784860372543));
	r += mul(s0_7, min16float4x4(0.08109230548143387, 0.011080823838710785, -0.06302736699581146, 0.13236501812934875, 0.05211811140179634, -0.01778300665318966, 0.011182932183146477, -0.010758205316960812, -0.07553346455097198, -0.4454612731933594, 0.4642224907875061, 0.19690051674842834, 0.11582087725400925, 0.1134805679321289, -0.19775372743606567, -0.06810040026903152));
	r += mul(s0_8, min16float4x4(-0.06781823933124542, -0.06755959242582321, -0.0064909858629107475, 0.07620474696159363, 0.01967591419816017, 0.01239400077611208, -0.008971692994236946, 0.0009231040603481233, -0.028004717081785202, -0.044206008315086365, -0.018641846254467964, 0.14929422736167908, -0.030121874064207077, 0.012167696841061115, -0.005104490090161562, -0.009901711717247963));
	r += mul(s1_0, min16float4x4(-0.13291703164577484, 0.03135870397090912, 0.02474202588200569, 0.06640508025884628, 0.3876950442790985, -0.1704155057668686, -0.05021079629659653, -0.08516842871904373, 0.032507095485925674, -0.0005100762355141342, -0.004053309094160795, -0.023876631632447243, -0.29387935996055603, 0.3017749786376953, -0.14997053146362305, 0.10140993446111679));
	r += mul(s1_1, min16float4x4(-0.10051988065242767, -0.10149773955345154, 0.053832948207855225, 0.06782019883394241, -0.6268124580383301, 0.8983457684516907, -0.14309799671173096, -0.09456261992454529, -0.03816942498087883, -0.023302163928747177, 0.03648798167705536, 0.023625696077942848, 0.5097700953483582, -0.16675980389118195, -0.12333729863166809, -0.2036460041999817));
	r += mul(s1_2, min16float4x4(0.030682476237416267, -0.08985844254493713, 0.011179905384778976, 0.014249380677938461, 0.16259661316871643, -0.22995497286319733, 0.15764492750167847, -0.1363219916820526, 0.010421988554298878, 0.011059984564781189, -0.01796591468155384, 0.0028917137533426285, -0.04211880639195442, 0.032180219888687134, 0.032241493463516235, 0.007004000712186098));
	r += mul(s1_3, min16float4x4(0.03886782377958298, -0.0034004701301455498, -0.1140725314617157, 0.03621647506952286, -0.07310417294502258, -0.2367299199104309, 0.5684325695037842, -0.26660120487213135, -0.019362429156899452, 0.03744010254740715, -0.050234921276569366, 0.010259419679641724, -0.013082466088235378, 0.006743486970663071, -0.17921613156795502, 0.21050572395324707));
	r += mul(s1_4, min16float4x4(-0.09057720005512238, -0.23768888413906097, -0.3271295130252838, -0.5098856687545776, -0.4131084978580475, -0.12424395233392715, -0.9147192239761353, 1.5430777072906494, 0.7832068204879761, 0.25683578848838806, 0.1333053708076477, -0.20142945647239685, 0.5358818769454956, -1.176572322845459, 1.4415266513824463, -0.5996779799461365));
	r += mul(s1_5, min16float4x4(0.008523453027009964, 0.07416478544473648, -8.342145156348124e-05, -0.09392749518156052, 0.034217189997434616, 0.1198732927441597, -0.021068794652819633, -0.2319115549325943, -0.07349051535129547, 0.17524442076683044, -0.07948916405439377, 0.04029591754078865, -0.12070967257022858, 0.48572838306427, -0.40304821729660034, 0.08186043798923492));
	r += mul(s1_6, min16float4x4(-0.007928302511572838, 0.013771338388323784, 0.005399079993367195, -0.007118329405784607, 0.06327193230390549, 0.049773283302783966, -0.019093764945864677, 0.012997620739042759, -0.014050443656742573, -0.028962621465325356, 0.036767590790987015, 0.021563822403550148, -0.05215592682361603, 0.04537868872284889, 0.003620903240516782, 0.0030361840035766363));
	r += mul(s1_7, min16float4x4(-0.009620137512683868, -0.04291507229208946, -0.013536093756556511, -0.03345569595694542, 0.029711779206991196, 0.018134675920009613, 0.1528439074754715, -0.31152501702308655, -0.0982656255364418, -0.1066904217004776, 0.2066684067249298, 0.11636529117822647, 0.13720645010471344, 0.34472453594207764, -0.32703274488449097, -0.17584362626075745));
	r += mul(s1_8, min16float4x4(-0.0027604985516518354, 0.02085270546376705, 0.003808740060776472, 0.04064542055130005, 0.0013743627350777388, -0.08183331787586212, 0.06604623049497604, 0.10525989532470703, 0.021509157493710518, -0.012869871221482754, 0.004514187574386597, 0.0104387691244483, 0.020380182191729546, 0.01971592754125595, 0.012961932457983494, 0.12465386092662811));
	r += float4(-3.601817955001252e-09, -7.2615939927800355e-09, -3.06087422075052e-08, -1.9471150025651696e-08);
	return tanh(r);
}
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float4 s0_0 = l0(-1.0, -1.0);
	min16float4 s0_1 = l0(0.0, -1.0);
	min16float4 s0_2 = l0(1.0, -1.0);
	min16float4 s0_3 = l0(-1.0, 0.0);
	min16float4 s0_4 = l0(0.0, 0.0);
	min16float4 s0_5 = l0(1.0, 0.0);
	min16float4 s0_6 = l0(-1.0, 1.0);
	min16float4 s0_7 = l0(0.0, 1.0);
	min16float4 s0_8 = l0(1.0, 1.0);
	min16float4 s1_0 = l1(-1.0, -1.0);
	min16float4 s1_1 = l1(0.0, -1.0);
	min16float4 s1_2 = l1(1.0, -1.0);
	min16float4 s1_3 = l1(-1.0, 0.0);
	min16float4 s1_4 = l1(0.0, 0.0);
	min16float4 s1_5 = l1(1.0, 0.0);
	min16float4 s1_6 = l1(-1.0, 1.0);
	min16float4 s1_7 = l1(0.0, 1.0);
	min16float4 s1_8 = l1(1.0, 1.0);
	down[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 4
//!DESC CuNNy-1x8-BILINEAR-NVL-shuffle
//!STYLE PS
//!IN down, INPUT
float4 Pass4(float2 pos) {
	float2 pt = float2(GetInputPt());
	const static float3x3 rgb2yuv = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081};
	const static float3x3 yuv2rgb = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float4 r = 0.0;
	float2 size = float2(GetInputSize());
	float2 f = frac(pos * size);
	float3 yuv = mul(rgb2yuv, INPUT.SampleLevel(SL, pos, 0).rgb);
	int2 i = int2(f * 2.0);
	r.r = down.SampleLevel(SP, (float2(0.5, 0.5) - f) * pt + pos, 0)[2*i.y + i.x];
	r.r += yuv.r;
	r.a = 1.0;
	r.r = clamp(r, 0.0, 1.0);
	float3 px = mul(yuv2rgb, float3(r.r, yuv.yz));
	return float4(px, 1.0);
}
