// CuNNy 8x4C BILINEAR CHROMA NVL DN
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

//!MAGPIE EFFECT
//!VERSION 3
//!OUTPUT_WIDTH INPUT_WIDTH * 2
//!OUTPUT_HEIGHT INPUT_HEIGHT * 2

//!TEXTURE
Texture2D INPUT;


//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t1;

//!PASS 1
//!DESC CuNNy-8x4C-BILINEAR-CHROMA-NVL-DN-in
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) (dot(float3(-4.952e-01, -9.555e-01, -2.124e-01), O(INPUT, float2(x, y)).rgb) + 1.328e+00)
float4 f0(float2 pt, float2 pos, min16float s0_0, min16float s0_1, min16float s0_2, min16float s0_3, min16float s0_4, min16float s0_5, min16float s0_6, min16float s0_7, min16float s0_8) {
	V4 r = 0.0;
	r += V4(3.033e-02, 9.062e-02, 1.375e-03, 8.600e-02) * s0_0;
	r += V4(-6.496e-01, -1.693e-01, -1.473e-04, -2.368e-01) * s0_1;
	r += V4(-4.211e-02, 6.932e-02, -2.542e-02, 6.757e-02) * s0_2;
	r += V4(-8.399e-03, -3.813e-01, -5.907e-03, -2.607e-01) * s0_3;
	r += V4(5.912e-01, 2.959e-01, -2.542e-02, -2.649e-01) * s0_4;
	r += V4(5.533e-02, -9.089e-04, 4.930e-01, 4.521e-01) * s0_5;
	r += V4(-1.572e-02, -2.690e-02, -1.744e-03, -2.429e-02) * s0_6;
	r += V4(4.431e-02, 2.031e-01, -2.546e-03, 2.449e-01) * s0_7;
	r += V4(-1.681e-02, -7.130e-03, -1.814e-02, -7.542e-02) * s0_8;
	r += V4(2.447e-02, -9.199e-02, 1.354e-01, 4.943e-02);
	return r;
}
void Pass1(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float s0_0 = l0(-1.0, -1.0);
	min16float s0_1 = l0(0.0, -1.0);
	min16float s0_2 = l0(1.0, -1.0);
	min16float s0_3 = l0(-1.0, 0.0);
	min16float s0_4 = l0(0.0, 0.0);
	min16float s0_5 = l0(1.0, 0.0);
	min16float s0_6 = l0(-1.0, 1.0);
	min16float s0_7 = l0(0.0, 1.0);
	min16float s0_8 = l0(1.0, 1.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8);
}
//!PASS 2
//!DESC CuNNy-8x4C-BILINEAR-CHROMA-NVL-DN-conv1
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(8.740e-02, 5.560e-03, 6.830e-02, -1.254e-01, -1.604e-02, -4.620e-02, 9.020e-02, -1.446e-02, 8.907e-03, -2.504e-02, 1.608e-02, 1.529e-01, -1.126e-02, -2.421e-02, -1.958e-01, 9.460e-02));
	r += mul(s0_1, M4(-1.111e-02, 1.931e-02, -1.735e-02, -8.391e-02, 1.813e-01, -1.589e-02, -6.083e-02, -6.618e-02, 1.626e-01, -1.254e-01, 5.669e-03, -1.848e-01, -1.674e-01, -4.443e-02, -5.666e-03, 3.584e-01));
	r += mul(s0_2, M4(-8.403e-02, -2.417e-02, -2.294e-02, 9.202e-02, -7.990e-02, 2.207e-02, -1.463e-01, -2.803e-01, -1.133e-01, -5.972e-02, -7.544e-02, -1.173e-01, 1.497e-01, 1.379e-01, 6.098e-02, 1.694e-01));
	r += mul(s0_3, M4(4.593e-02, 2.833e-01, 2.976e-01, -1.704e-01, -9.138e-03, 3.092e-01, 1.138e-01, -1.313e-01, 3.520e-02, 1.811e-01, -9.873e-02, -4.500e-02, 2.196e-02, -4.639e-01, -3.350e-01, -2.078e-02));
	r += mul(s0_4, M4(-7.830e-02, -3.260e-01, -3.598e-01, 9.949e-01, 2.428e-01, 5.684e-01, -5.379e-01, 1.871e-01, 1.036e-02, -2.470e-02, 2.717e-01, 2.036e-01, -3.036e-01, 1.023e-01, 1.987e-01, 6.114e-02));
	r += mul(s0_5, M4(1.351e-01, -1.162e-01, -7.483e-02, -1.976e-01, -3.418e-01, -1.554e-01, -6.213e-02, 1.931e-01, 1.561e-02, -1.216e-01, -1.499e-01, -2.983e-02, -6.140e-02, -5.206e-02, 1.950e-01, -9.467e-03));
	r += mul(s0_6, M4(-1.022e-01, -1.090e-01, 2.480e-01, -6.337e-02, 2.206e-03, 1.363e-01, 2.095e-01, 2.627e-01, 1.465e-02, 8.886e-02, -3.352e-02, 5.810e-02, 1.328e-02, -1.785e-01, -1.372e-01, -2.686e-01));
	r += mul(s0_7, M4(-9.663e-02, 4.095e-01, 2.567e-01, 4.202e-01, -1.674e-01, -2.378e-01, 2.134e-01, -4.460e-02, 1.162e-01, 1.086e-01, 2.735e-02, -5.905e-02, 2.259e-01, -2.234e-01, -1.780e-01, -8.859e-02));
	r += mul(s0_8, M4(-9.054e-02, 1.880e-01, 5.348e-02, -9.574e-03, 1.788e-02, -6.460e-02, 5.377e-02, 7.580e-02, -4.869e-02, 1.446e-02, 5.764e-02, -2.312e-04, 7.282e-02, 4.042e-02, -6.890e-02, 3.272e-03));
	r += mul(s1_0, M4(4.497e-02, -5.930e-03, 8.487e-02, 3.628e-02, 1.666e-02, 8.961e-02, 4.578e-02, -6.764e-02, 5.850e-01, 1.284e+00, -1.095e+00, -8.662e-01, -3.281e-02, -9.120e-02, -2.182e-01, 1.644e-01));
	r += mul(s1_1, M4(1.140e-01, 6.151e-02, -1.589e-02, -1.032e-01, -7.607e-02, 1.095e-01, -2.324e-01, -8.674e-02, -3.786e-02, -5.712e-01, -5.744e-01, -7.481e-01, -7.005e-02, -9.516e-02, 5.294e-02, 3.193e-01));
	r += mul(s1_2, M4(-6.069e-02, -1.336e-02, 1.628e-03, 4.249e-02, -2.568e-01, -3.022e-01, -1.247e-01, -5.979e-02, -2.568e-01, -3.153e-01, -1.377e-01, -1.391e-02, 1.656e-01, 2.035e-01, 4.379e-02, 8.318e-02));
	r += mul(s1_3, M4(-1.747e-02, 2.369e-01, 2.258e-01, 1.752e-01, -1.798e-02, -8.276e-03, 3.105e-01, -1.265e-01, 1.434e+00, 3.963e-01, -2.928e+00, 1.172e+00, 1.352e-01, -2.415e-01, -4.480e-01, -2.217e-02));
	r += mul(s1_4, M4(5.600e-01, -2.179e-01, -1.009e-01, 5.373e-01, 2.851e-01, 8.690e-02, -2.837e-01, 1.607e-01, 1.744e-01, 3.313e-01, -7.198e-01, -4.599e-01, -3.760e-01, 5.527e-01, -1.902e-02, -2.310e-02));
	r += mul(s1_5, M4(5.087e-03, -1.460e-01, -1.097e-01, -1.524e-01, -4.004e-01, -6.379e-01, -1.283e-02, 9.832e-02, -9.092e-01, 4.910e-02, -6.816e-01, -2.240e-01, 4.689e-02, 8.350e-02, 2.191e-01, 4.532e-02));
	r += mul(s1_6, M4(-9.217e-02, -2.327e-01, 2.481e-02, -7.094e-02, -3.642e-02, 3.113e-01, 1.111e-01, 2.783e-01, 1.287e+00, 1.174e+00, 2.821e-01, 5.077e-01, 1.408e-02, -3.107e-01, -6.046e-02, -3.347e-01));
	r += mul(s1_7, M4(6.715e-02, 1.951e-01, 4.305e-01, 2.549e-01, -1.128e-01, 9.483e-02, 1.485e-01, 2.833e-02, -1.120e-02, 9.817e-01, 6.388e-01, 9.127e-01, 2.568e-01, -3.115e-01, -1.052e-01, -1.016e-01));
	r += mul(s1_8, M4(-1.125e-01, 1.005e-01, 1.052e-01, 1.254e-01, -3.680e-02, 3.288e-02, -7.340e-02, 1.238e-02, -6.903e-01, 1.631e+00, -4.132e-01, 6.474e-01, 4.592e-03, 1.174e-03, -7.246e-02, 5.927e-03));
	r += V4(-1.334e-01, -3.181e-03, -4.734e-03, -1.849e-02);
	return r;
}
void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 3
//!DESC CuNNy-8x4C-BILINEAR-CHROMA-NVL-DN-conv2
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-7.883e-02, -1.776e-01, 9.192e-02, -2.577e-02, -2.728e-02, 3.878e-01, 1.920e-01, -1.067e-01, -4.914e-03, 6.421e-02, -2.494e-04, 3.367e-03, -3.431e-02, 4.966e-02, -1.368e-02, -5.602e-02));
	r += mul(s0_1, M4(4.492e-02, 3.465e-01, 4.937e-02, -1.850e-01, 1.106e-01, 2.437e-01, 8.034e-02, 5.433e-02, -6.685e-02, 1.329e-01, -1.081e-01, 6.508e-02, 1.629e-02, 7.133e-02, -2.447e-02, -9.249e-03));
	r += mul(s0_2, M4(-3.515e-02, -2.608e-02, -3.583e-02, -1.124e-01, -1.882e-02, 2.847e-02, -4.064e-02, 1.511e-02, -1.433e-02, -1.925e-01, 9.670e-04, 1.023e-01, 2.161e-02, -4.136e-02, 1.596e-02, 9.050e-02));
	r += mul(s0_3, M4(-6.615e-02, 4.125e-01, 1.243e-01, 1.927e-01, -2.817e-02, 4.192e-01, 4.978e-02, -5.374e-03, -2.106e-02, -4.443e-01, 1.403e-01, 1.158e-01, 6.740e-03, -2.424e-02, -8.930e-02, 1.140e-01));
	r += mul(s0_4, M4(2.062e-01, 3.186e-01, 2.342e-01, 6.993e-01, 1.469e-01, -2.438e-01, -4.359e-02, 1.312e-01, 4.658e-01, 2.011e-01, -7.771e-02, -2.105e-01, 1.890e-01, 5.413e-02, 1.174e-01, 9.303e-02));
	r += mul(s0_5, M4(1.260e-02, 5.996e-02, 4.409e-02, 1.068e-02, -6.391e-02, 9.588e-03, -1.294e-01, 1.339e-01, 7.264e-02, -8.032e-02, 1.185e-01, 4.925e-01, -1.013e-01, -2.444e-03, -4.182e-02, -1.856e-01));
	r += mul(s0_6, M4(1.540e-01, 8.896e-03, 3.898e-01, 3.330e-03, 1.570e-02, 9.810e-02, -1.162e-01, 2.521e-02, 1.950e-02, 2.427e-02, -9.849e-02, -4.726e-02, 1.411e-01, 2.148e-03, 5.329e-01, 1.187e-02));
	r += mul(s0_7, M4(-1.481e-01, -4.236e-02, 3.832e-01, -3.399e-02, -2.998e-01, -4.871e-02, -2.219e-02, 2.005e-03, -2.457e-01, -6.669e-02, -2.163e-01, 5.468e-02, 6.987e-01, 1.091e-01, 2.406e-01, -8.257e-02));
	r += mul(s0_8, M4(-4.701e-02, -9.620e-03, 9.384e-02, -7.222e-02, 2.784e-02, -6.975e-02, -5.386e-02, 4.768e-02, 1.029e-01, 5.742e-02, 4.505e-02, 1.628e-01, -1.016e-01, -4.992e-02, 1.673e-02, -1.994e-01));
	r += mul(s1_0, M4(-5.706e-02, -9.874e-02, -3.215e-02, 1.802e-02, -2.820e-02, -2.743e-03, 5.351e-02, -8.662e-02, 1.201e-02, 1.201e-01, 3.900e-02, -3.068e-03, -3.746e-02, 5.080e-02, 3.014e-02, -4.710e-02));
	r += mul(s1_1, M4(1.143e-02, -1.238e-01, 3.472e-02, -1.063e-01, 2.284e-02, 1.665e-01, -1.812e-02, -1.639e-02, 1.957e-02, 3.770e-01, -3.633e-02, 1.047e-01, 4.815e-02, 1.361e-01, 1.984e-02, -2.457e-02));
	r += mul(s1_2, M4(1.074e-02, 7.481e-02, 3.385e-02, 7.525e-03, -4.971e-02, -6.658e-02, -4.906e-02, 5.844e-02, 7.598e-02, -5.510e-02, 6.841e-02, 1.812e-01, -6.791e-03, -8.451e-02, -4.291e-02, 8.811e-02));
	r += mul(s1_3, M4(-1.816e-01, 1.158e-01, -2.118e-01, 1.294e-01, 6.912e-03, 3.895e-01, 5.279e-02, -9.494e-03, -1.405e-02, -3.589e-01, -6.968e-02, 8.080e-02, -5.380e-02, -2.091e-01, 9.978e-02, 9.404e-02));
	r += mul(s1_4, M4(1.362e-01, -2.127e-02, 1.956e-01, 3.875e-01, 3.482e-01, 8.643e-03, 8.074e-02, 1.109e-01, 3.017e-01, 3.888e-01, -6.147e-02, -3.556e-01, 2.387e-01, 1.968e-01, 8.607e-02, -3.924e-02));
	r += mul(s1_5, M4(7.814e-03, 2.387e-02, 3.663e-02, -3.007e-01, -8.120e-03, 4.691e-03, -6.468e-02, 1.329e-01, 6.137e-02, 3.246e-02, -3.026e-03, 4.475e-01, -2.002e-01, -4.345e-02, -1.219e-01, -2.217e-01));
	r += mul(s1_6, M4(1.071e-01, -6.510e-03, 2.020e-03, 1.586e-02, -2.292e-02, 1.307e-01, -3.303e-01, -5.744e-04, 1.155e-02, 3.000e-02, -2.978e-01, -3.136e-02, 1.926e-02, -1.198e-01, 4.795e-01, 7.375e-03));
	r += mul(s1_7, M4(1.291e-01, 6.466e-02, -1.454e-03, -4.274e-02, -2.998e-01, 2.904e-02, -6.401e-02, -7.694e-02, -2.744e-01, -5.661e-03, -2.916e-01, 2.318e-02, 6.980e-01, 9.393e-02, -2.325e-02, 5.653e-02));
	r += mul(s1_8, M4(-9.946e-02, -6.652e-02, 1.297e-02, -1.610e-01, 2.821e-03, -4.572e-02, 2.373e-02, 5.377e-03, -7.087e-02, 2.655e-02, -5.033e-03, 7.409e-02, -2.164e-01, -4.706e-02, -1.486e-01, -2.703e-01));
	r += V4(8.883e-03, 2.982e-04, 1.006e-02, -1.862e-04);
	return r;
}
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 4
//!DESC CuNNy-8x4C-BILINEAR-CHROMA-NVL-DN-conv3
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(1.330e-01, -6.488e-01, 4.029e-01, -4.627e-02, -4.390e-02, 2.027e-02, 1.811e-02, 5.349e-03, 5.322e-03, 2.304e-02, -7.177e-02, 2.861e-02, 1.590e-01, -5.049e-02, 3.211e-01, 2.086e-01));
	r += mul(s0_1, M4(4.466e-01, -1.027e-01, -1.378e-01, 2.280e-01, -1.930e-01, 6.610e-02, -7.973e-02, -1.204e-01, 1.468e-01, 1.678e-01, 5.729e-02, 4.322e-01, -1.302e-02, -2.592e-01, 2.881e-01, -2.415e-02));
	r += mul(s0_2, M4(-5.585e-02, 7.614e-02, -3.033e-01, -5.911e-02, -1.899e-01, 9.447e-02, -1.754e-01, -1.125e-01, 1.100e-01, -7.451e-02, 3.680e-01, 7.332e-02, -1.910e-02, 1.881e-02, -3.625e-03, -6.050e-03));
	r += mul(s0_3, M4(1.745e-01, -2.668e-01, 3.384e-01, -1.937e-01, 1.121e-02, 3.841e-02, -4.048e-04, -3.198e-02, -3.630e-02, 4.365e-02, -3.271e-03, 1.016e-02, -3.642e-01, 2.103e-01, 2.745e-01, 5.098e-01));
	r += mul(s0_4, M4(-2.233e-01, 5.579e-02, 3.476e-01, 2.111e-01, 2.207e-01, 3.085e-01, -3.814e-01, -2.250e-01, -4.997e-02, -1.625e-01, -3.155e-01, 2.104e-01, 1.801e-01, -1.631e-01, -2.368e-01, 3.434e-01));
	r += mul(s0_5, M4(1.073e-01, 2.388e-01, -8.370e-02, -1.638e-01, -2.170e-02, 3.176e-01, -3.675e-01, -2.785e-01, -1.684e-01, -3.818e-01, 1.320e-01, 1.977e-01, -6.301e-02, 6.766e-02, -1.114e-01, -5.071e-02));
	r += mul(s0_6, M4(1.884e-02, 2.710e-04, 5.951e-03, 6.713e-04, -2.428e-02, -4.850e-02, -5.346e-03, -3.058e-02, 1.742e-02, -1.511e-02, 9.743e-03, 1.067e-02, -5.043e-02, 1.208e-01, 6.667e-02, -7.717e-02));
	r += mul(s0_7, M4(-2.535e-02, -1.369e-02, -4.443e-02, -1.343e-02, -7.700e-02, -1.677e-01, 1.714e-01, 1.343e-01, -1.296e-02, 1.498e-02, -3.654e-02, 9.708e-03, 6.364e-02, 2.255e-02, 9.356e-02, -7.210e-02));
	r += mul(s0_8, M4(5.590e-03, 7.384e-02, -7.757e-03, -7.119e-02, 9.014e-02, 1.978e-01, -1.278e-01, -1.361e-01, 2.015e-02, -8.997e-02, 5.943e-02, 4.943e-02, 4.796e-02, 1.134e-01, -9.640e-02, -6.560e-02));
	r += mul(s1_0, M4(1.312e-01, -2.181e-01, 8.282e-03, 2.159e-01, 4.121e-04, -6.348e-03, 1.296e-02, 9.299e-02, -4.829e-02, -9.998e-02, -5.299e-02, -4.785e-02, -1.865e-02, 1.641e-02, 2.764e-01, 2.410e-01));
	r += mul(s1_1, M4(8.628e-01, -1.678e-01, 1.254e-01, 3.772e-01, 7.018e-02, 1.141e-01, 1.866e-02, 1.160e-01, 2.186e-01, 6.085e-02, 2.991e-02, -1.083e-01, -9.137e-03, -1.694e-01, 3.238e-01, 1.014e-01));
	r += mul(s1_2, M4(-5.172e-02, 3.792e-02, -1.926e-01, -5.378e-02, -2.723e-02, -4.920e-02, 6.771e-02, -3.024e-02, -2.693e-01, 6.594e-02, -4.970e-02, -3.095e-01, 7.300e-02, 1.930e-03, 1.105e-01, -4.687e-02));
	r += mul(s1_3, M4(3.248e-01, 4.027e-01, -2.395e-01, -3.252e-01, 5.985e-02, 1.430e-01, -4.013e-02, 1.181e-01, 3.541e-03, 1.700e-01, -4.925e-02, -2.431e-01, -7.995e-02, 5.817e-01, 3.721e-01, -1.270e-01));
	r += mul(s1_4, M4(-1.584e-01, 4.757e-01, 2.349e-01, -1.492e-03, 1.560e-01, -1.090e-02, -3.049e-01, 1.636e-01, -2.014e-01, 2.993e-01, -6.402e-01, -1.098e-01, -7.651e-02, -3.199e-01, -8.151e-02, 4.326e-01));
	r += mul(s1_5, M4(5.530e-02, 1.362e-01, 7.580e-02, -1.940e-02, -2.013e-02, -7.308e-02, -7.410e-02, 3.367e-02, -9.622e-02, 1.931e-01, -1.474e-01, -5.060e-01, -5.359e-02, -6.856e-02, -2.034e-02, 6.679e-02));
	r += mul(s1_6, M4(-5.501e-02, -1.082e-01, 1.598e-03, 1.532e-01, -6.053e-03, -6.238e-02, -4.210e-02, 3.676e-02, 6.465e-02, 9.040e-03, -2.886e-02, -5.142e-02, -6.475e-02, 5.829e-02, 1.455e-02, -1.030e-01));
	r += mul(s1_7, M4(-5.667e-02, -4.954e-04, -9.134e-02, -3.169e-02, -3.026e-03, -1.284e-01, 1.468e-01, 2.265e-01, 1.924e-01, 1.136e-01, -4.886e-02, -3.017e-01, 3.736e-02, 1.627e-01, 7.571e-02, -2.163e-01));
	r += mul(s1_8, M4(-1.321e-02, 2.361e-02, 3.033e-02, -3.428e-02, 3.299e-02, -1.773e-01, 1.577e-01, 1.166e-01, 2.087e-01, 1.164e-01, 9.382e-03, -2.959e-01, 5.955e-03, 4.586e-03, 1.778e-02, -1.158e-02));
	r += V4(-1.452e-03, 7.290e-03, -6.362e-03, 5.724e-04);
	return r;
}
void Pass4(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 5
//!DESC CuNNy-8x4C-BILINEAR-CHROMA-NVL-DN-conv4
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(3.921e-02, -1.576e-03, -5.534e-02, 6.735e-02, 2.007e-01, 7.999e-03, -1.183e-01, -4.037e-02, 1.860e-01, -2.215e-03, -1.223e-01, 1.228e-01, -1.302e-01, 3.599e-02, 7.153e-02, -4.207e-02));
	r += mul(s0_1, M4(3.270e-03, 1.247e-01, 9.939e-02, 5.788e-02, 1.354e-01, 5.456e-02, 3.038e-02, 1.355e-01, 4.810e-02, 7.886e-02, 1.850e-01, 7.726e-02, -5.562e-04, -7.118e-02, -1.237e-01, -1.101e-01));
	r += mul(s0_2, M4(-3.141e-02, -2.825e-02, 1.333e-01, -1.146e-02, -1.231e-01, 1.086e-01, 2.245e-02, 8.601e-02, 1.917e-02, -6.619e-04, 3.967e-02, -4.459e-02, -2.362e-02, 2.077e-02, -1.383e-01, 6.491e-02));
	r += mul(s0_3, M4(3.536e-01, -1.628e-02, -5.098e-01, 2.878e-01, 2.201e-01, -8.031e-02, -6.380e-02, -1.412e-01, 9.838e-02, 2.172e-02, 7.091e-02, -5.052e-02, 1.811e-02, 6.994e-02, -2.565e-02, 1.259e-01));
	r += mul(s0_4, M4(-3.467e-01, 3.994e-01, -3.287e-01, -2.101e-01, 9.746e-01, 2.138e-01, -2.127e-01, 8.676e-01, 5.823e-02, 3.819e-01, 8.040e-01, 2.240e-01, 7.333e-01, -3.799e-01, -4.952e-01, 1.844e-01));
	r += mul(s0_5, M4(-4.081e-02, -3.701e-02, 4.796e-02, 1.604e-01, 4.715e-02, 9.504e-03, 9.255e-02, -6.797e-03, -1.948e-01, 1.726e-02, 2.014e-04, 5.160e-02, 6.692e-03, 5.601e-02, 2.065e-01, -4.170e-02));
	r += mul(s0_6, M4(1.375e-01, -9.796e-02, -2.299e-01, 6.360e-02, -1.797e-01, 2.289e-02, -6.096e-02, 4.583e-02, -1.098e-01, 2.907e-02, 6.773e-02, -4.071e-02, 9.510e-02, -5.997e-02, -9.162e-02, -3.855e-02));
	r += mul(s0_7, M4(1.817e-01, 3.789e-01, -1.010e-01, 1.302e-01, -1.976e-01, 1.575e-01, -6.654e-03, 4.294e-01, 1.947e-02, -4.583e-02, 1.290e-01, 1.772e-01, -2.848e-02, 2.316e-01, 4.458e-03, 1.781e-01));
	r += mul(s0_8, M4(8.022e-03, 7.766e-02, -3.485e-03, -1.904e-02, -8.415e-02, -1.958e-01, 1.566e-01, -6.186e-02, 2.395e-03, -4.626e-02, -1.975e-02, -2.769e-03, -2.400e-03, -1.106e-01, 7.105e-02, -4.949e-02));
	r += mul(s1_0, M4(-3.029e-02, 5.369e-02, -2.083e-02, 1.314e-01, 5.715e-02, -5.176e-03, -4.011e-02, 2.877e-02, 1.894e-01, -4.976e-02, -8.763e-03, -2.607e-01, -3.186e-02, 4.391e-02, 5.843e-02, -1.406e-01));
	r += mul(s1_1, M4(-8.189e-02, 1.047e-01, 8.883e-02, 1.568e-02, 2.387e-04, 8.086e-02, 5.243e-02, 5.243e-02, 6.604e-03, -2.739e-02, 9.755e-02, 1.117e-01, -2.039e-02, -1.310e-01, -1.564e-01, 1.577e-02));
	r += mul(s1_2, M4(-4.825e-02, 1.184e-02, 8.843e-02, 6.325e-02, -2.035e-01, 1.210e-01, 2.317e-03, 1.829e-01, 3.097e-02, -1.444e-02, 2.350e-02, -2.069e-02, 8.238e-02, 4.398e-03, -2.066e-01, -7.963e-02));
	r += mul(s1_3, M4(2.021e-01, 5.595e-02, -1.174e-01, 1.048e-01, 4.036e-02, 2.474e-02, 4.929e-03, 6.660e-03, 2.223e-01, -6.050e-02, 1.909e-01, -2.446e-01, 1.362e-01, -1.009e-01, 2.054e-01, -3.387e-01));
	r += mul(s1_4, M4(-3.626e-01, 1.931e-01, 6.435e-02, -2.057e-01, 6.463e-01, 4.025e-01, -1.643e-01, 7.937e-01, 2.103e-01, 1.527e-01, 8.936e-01, 2.008e-01, 6.387e-01, -5.014e-01, -1.272e-01, 1.271e-01));
	r += mul(s1_5, M4(-1.787e-02, 6.858e-02, 3.302e-02, 9.103e-02, -6.387e-02, 1.332e-01, 4.389e-02, 4.256e-02, -1.829e-01, 8.913e-02, 4.144e-02, 1.579e-01, 1.411e-01, 1.554e-02, 8.019e-02, -1.300e-01));
	r += mul(s1_6, M4(1.695e-01, -1.580e-01, -1.195e-01, -1.927e-01, -4.344e-02, -2.182e-03, 7.696e-03, 8.171e-02, -4.434e-02, 2.380e-02, -8.377e-02, 1.383e-01, -5.844e-03, -1.645e-01, 7.872e-03, -3.684e-01));
	r += mul(s1_7, M4(-5.512e-02, 5.369e-01, 1.972e-02, -6.909e-02, -1.999e-02, 3.030e-02, 1.049e-01, 1.069e-01, -1.368e-01, 1.125e-01, 2.355e-01, 1.289e-01, -2.020e-01, 3.682e-01, 9.336e-02, -1.969e-01));
	r += mul(s1_8, M4(5.548e-02, -2.818e-02, 4.110e-03, -5.194e-02, 2.739e-02, -1.694e-01, -4.190e-02, -6.366e-02, 2.435e-02, -5.759e-02, -4.874e-02, -7.532e-03, 1.116e-01, -1.978e-01, -1.135e-01, -8.223e-02));
	r += V4(1.900e-03, 5.524e-04, 8.344e-03, -1.767e-03);
	return r;
}
void Pass5(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 6
//!DESC CuNNy-8x4C-BILINEAR-CHROMA-NVL-DN-conv5
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(1.206e-01, 3.718e-02, 1.085e-01, 1.439e-02, 1.625e-01, 1.617e-01, 6.566e-01, -9.008e-02, 1.436e-02, 8.624e-03, 5.421e-02, 1.488e-02, -5.061e-02, -2.158e-02, -1.067e-01, -2.626e-02));
	r += mul(s0_1, M4(-8.018e-03, -1.563e-03, 7.783e-02, -2.469e-03, 1.268e-01, -2.945e-01, 9.362e-01, 3.297e-01, -1.791e-03, -2.347e-02, 3.423e-02, -1.962e-02, 7.921e-02, 6.116e-03, -1.781e-01, -7.679e-02));
	r += mul(s0_2, M4(-5.265e-04, -3.208e-02, 1.402e-01, 3.006e-02, 2.243e-02, -1.666e-01, 2.174e-01, 4.699e-02, 2.134e-01, 3.121e-02, 2.505e-01, -6.752e-02, -4.226e-03, 4.868e-02, -1.081e-01, -4.454e-02));
	r += mul(s0_3, M4(1.594e-01, -1.730e-02, -2.354e-02, 1.033e-02, 2.563e-01, -4.914e-01, -6.041e-01, 4.287e-01, 2.263e-02, 2.393e-02, -2.509e-02, 9.398e-02, -7.213e-02, 5.812e-02, -4.771e-02, -1.019e-02));
	r += mul(s0_4, M4(-2.507e-01, -3.322e-01, 3.954e-01, -1.653e-01, 1.838e-01, -2.866e-01, 3.883e-01, 1.480e-01, 1.402e-01, -1.960e-01, 2.519e-01, -3.398e-01, 1.317e-01, 5.531e-02, 7.186e-02, -2.303e-01));
	r += mul(s0_5, M4(4.026e-02, 1.947e-01, 2.892e-02, 8.916e-02, -1.313e-01, -9.885e-02, -4.689e-02, -3.246e-02, 3.784e-01, 3.885e-01, 3.564e-01, -1.416e-01, -2.338e-02, 1.174e-01, -1.167e-04, 1.567e-01));
	r += mul(s0_6, M4(-6.687e-03, -2.275e-04, -5.183e-02, 3.191e-02, 1.053e-01, -9.253e-02, 4.236e-02, 5.361e-02, -4.563e-02, -1.046e-01, -3.310e-02, 5.993e-02, 4.201e-03, -2.584e-03, 1.509e-03, -1.144e-02));
	r += mul(s0_7, M4(-2.183e-02, 7.591e-02, 3.073e-02, 2.053e-02, 8.087e-02, -2.767e-01, 1.315e-01, 4.409e-02, 2.947e-02, 1.734e-01, -8.582e-02, 2.164e-02, 7.885e-02, 1.197e-01, -1.031e-01, 3.457e-02));
	r += mul(s0_8, M4(-5.133e-02, 7.313e-02, -1.332e-01, 5.188e-03, -9.403e-03, -5.664e-02, 1.620e-02, -5.211e-03, -7.556e-02, 9.111e-02, -6.816e-02, -1.295e-01, 5.425e-02, -8.539e-02, 8.693e-02, 6.550e-02));
	r += mul(s1_0, M4(-6.153e-02, -1.119e-02, -5.729e-03, 4.563e-02, 1.651e-01, 8.595e-02, 1.924e-01, -1.132e-01, 5.837e-02, -2.923e-03, -2.234e-02, 1.193e-01, 1.354e-02, -4.914e-02, -4.185e-03, -3.051e-02));
	r += mul(s1_1, M4(-1.281e-02, 1.620e-01, -3.531e-01, -1.294e-01, -2.855e-01, 6.914e-02, 6.229e-01, 1.067e-01, -4.606e-02, 1.973e-03, -4.578e-02, -1.704e-01, 9.378e-02, -8.488e-02, 5.761e-02, 8.808e-02));
	r += mul(s1_2, M4(-4.961e-02, 7.368e-02, 9.501e-02, -2.638e-02, -7.722e-02, -1.233e-01, 5.209e-03, -6.156e-02, 4.989e-02, 4.636e-03, -1.462e-02, -2.854e-02, -2.638e-02, -1.109e-01, 7.975e-02, 2.943e-02));
	r += mul(s1_3, M4(1.016e-01, -1.120e-02, -1.294e-01, -2.899e-02, 1.768e-01, -1.492e-01, 8.216e-02, -1.530e-01, 1.029e-01, -2.704e-02, -1.471e-01, 1.456e-01, 2.223e-01, 1.121e-01, 3.941e-02, 1.103e-01));
	r += mul(s1_4, M4(-1.036e+00, -2.466e-01, 2.918e-02, -5.087e-01, -8.158e-02, -3.799e-01, 3.167e-01, -1.463e-01, 3.535e-03, 8.966e-02, 5.782e-01, -8.038e-01, 1.998e-01, -1.508e-01, -3.535e-01, 3.525e-01));
	r += mul(s1_5, M4(-7.020e-02, -5.900e-02, 2.508e-01, 1.349e-01, -3.202e-02, 5.326e-02, -4.643e-02, -8.987e-03, -2.771e-02, -7.779e-02, 1.450e-01, -1.168e-02, -5.996e-02, 8.298e-01, -5.062e-02, 1.967e-02));
	r += mul(s1_6, M4(-2.080e-01, 4.714e-02, 5.530e-02, -4.807e-02, 5.733e-02, 3.584e-02, -4.067e-02, 3.020e-02, 1.187e-02, -1.559e-02, -1.348e-02, 8.946e-03, 2.505e-01, -1.402e-02, 1.038e-02, -1.100e-03));
	r += mul(s1_7, M4(-2.393e-02, 3.916e-01, -3.465e-01, 1.686e-01, 6.276e-02, 2.481e-02, 6.628e-02, -4.874e-02, -3.892e-02, 2.566e-01, -4.358e-02, 4.623e-04, 5.145e-02, -1.430e-01, 2.741e-01, 1.946e-02));
	r += mul(s1_8, M4(-4.599e-02, 5.183e-01, -2.861e-01, 9.838e-02, -2.000e-02, 3.944e-03, 1.149e-02, -8.154e-03, -1.414e-02, 2.360e-01, -8.901e-02, -2.563e-03, -2.863e-03, -2.004e-01, 2.046e-01, -6.545e-02));
	r += V4(-4.105e-03, -4.286e-03, -8.148e-03, 2.685e-03);
	return r;
}
void Pass6(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 7
//!DESC CuNNy-8x4C-BILINEAR-CHROMA-NVL-DN-conv6
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-9.694e-02, 7.758e-02, 2.221e-01, -3.026e-03, 1.099e-02, 2.896e-02, 4.821e-02, -5.470e-02, -5.897e-02, -4.246e-02, 1.490e-01, -5.355e-02, 2.422e-02, 2.797e-03, -9.129e-02, 1.309e-01));
	r += mul(s0_1, M4(-3.118e-02, -4.557e-02, 1.511e-01, 8.981e-02, -7.255e-02, -5.020e-02, -2.952e-01, 1.168e-01, -1.013e-01, 9.715e-02, 3.992e-01, 1.418e-01, -1.441e-01, 5.388e-02, 1.109e-01, -1.622e-01));
	r += mul(s0_2, M4(1.265e-01, 8.913e-02, 4.978e-02, 2.652e-03, -1.561e-01, -1.105e-01, -3.918e-02, -1.314e-02, 2.043e-02, 1.057e-01, 1.670e-01, -1.890e-02, -4.473e-02, 9.370e-03, 5.480e-02, -2.667e-03));
	r += mul(s0_3, M4(9.359e-03, 4.338e-02, 3.095e-02, -2.038e-01, 1.401e-01, 5.775e-01, -1.389e-01, 1.174e-01, 1.985e-02, -2.154e-01, -9.504e-02, -1.083e-01, -6.048e-02, 1.870e-02, 8.890e-02, 1.450e-01));
	r += mul(s0_4, M4(-1.851e-01, 5.519e-01, 4.763e-01, 4.048e-02, 5.600e-01, 8.163e-01, -8.310e-01, 6.052e-01, 3.252e-01, 1.894e-01, -1.001e+00, -3.011e-01, 3.662e-01, -2.676e-01, -4.497e-01, 4.775e-01));
	r += mul(s0_5, M4(-4.030e-01, 8.207e-03, 9.597e-02, 4.285e-02, -1.322e-01, -2.329e-01, -1.948e-01, -2.895e-02, -1.374e-01, -7.838e-02, 4.682e-03, 7.122e-02, 5.000e-02, -3.158e-02, -7.056e-02, 2.926e-02));
	r += mul(s0_6, M4(2.656e-02, -3.930e-02, 1.496e-02, -1.772e-02, 5.641e-03, 1.169e-01, -1.333e-01, 2.726e-02, 5.173e-02, 1.268e-01, 5.348e-02, 1.835e-02, -1.853e-02, 2.529e-01, 3.043e-02, -3.683e-02));
	r += mul(s0_7, M4(-1.507e-02, 2.153e-01, 2.958e-02, -1.073e-01, -1.086e-01, -3.042e-03, 8.478e-02, 2.656e-02, 3.154e-01, 3.216e-01, 8.969e-02, 8.252e-02, 1.587e-01, 4.634e-01, 2.773e-01, -1.430e-01));
	r += mul(s0_8, M4(-6.762e-02, 9.154e-03, 5.410e-02, -5.980e-02, -1.996e-02, -9.405e-03, -5.921e-02, 3.569e-02, 6.967e-02, 1.724e-01, 1.899e-01, -1.607e-01, 4.876e-02, 1.235e-01, 9.461e-02, -2.538e-02));
	r += mul(s1_0, M4(-7.863e-03, 5.726e-02, 1.262e-03, 1.518e-02, 1.688e-02, 5.144e-02, -1.362e-01, 2.177e-02, -1.352e-02, -4.160e-02, 9.796e-03, -6.861e-02, 1.947e-02, -3.993e-03, -7.343e-02, 4.669e-02));
	r += mul(s1_1, M4(-1.621e-02, 6.545e-02, 1.155e-01, 2.813e-02, -1.909e-01, 5.836e-02, 6.953e-02, -4.463e-02, -6.325e-02, -7.799e-03, 4.046e-02, -1.538e-02, -1.171e-01, 2.349e-01, 3.715e-01, -1.232e-02));
	r += mul(s1_2, M4(4.720e-02, -2.279e-01, -1.494e-01, -1.431e-01, -7.148e-02, 5.772e-03, 4.913e-02, 1.020e-03, -3.232e-02, 3.193e-02, 5.266e-02, -8.432e-03, 2.371e-02, 4.224e-01, 2.294e-01, -3.033e-02));
	r += mul(s1_3, M4(1.277e-03, -6.875e-02, -1.045e-01, -6.257e-03, 1.656e-03, 5.172e-01, 2.983e-01, -1.158e-02, 5.052e-02, -2.352e-01, -1.113e-03, -9.066e-02, -5.355e-02, -3.429e-01, 1.338e-01, -5.375e-02));
	r += mul(s1_4, M4(-2.036e-01, 3.191e-01, 1.733e-04, 7.392e-02, 5.657e-01, 4.968e-01, -1.005e-02, -3.681e-02, 5.098e-01, 5.266e-01, -4.942e-01, -3.766e-03, 6.275e-01, 1.751e-01, -9.629e-01, 8.105e-01));
	r += mul(s1_5, M4(-4.577e-01, -6.185e-01, 4.802e-02, 2.478e-01, 2.667e-02, -5.847e-02, -7.708e-02, 1.280e-03, -3.094e-02, -1.835e-01, -1.968e-01, 7.825e-02, 1.757e-01, 4.975e-01, 1.116e-01, -8.549e-01));
	r += mul(s1_6, M4(8.647e-03, -3.968e-03, 4.800e-02, 1.271e-02, 3.406e-02, 1.444e-01, 1.513e-02, -6.210e-02, 4.749e-02, 5.668e-02, 1.021e-02, -7.422e-03, 5.656e-02, 1.928e-01, -9.402e-03, -4.874e-03));
	r += mul(s1_7, M4(4.633e-02, 3.700e-02, -4.054e-02, 2.723e-02, 9.443e-02, 4.355e-02, 9.256e-02, 2.968e-03, 1.470e-01, 2.689e-01, 1.071e-01, -7.569e-02, 1.294e-01, 2.625e-01, 1.137e-01, 1.152e-01));
	r += mul(s1_8, M4(3.625e-02, 1.250e-02, -7.407e-02, 4.057e-02, 4.040e-02, 2.856e-02, 1.294e-02, -1.837e-02, 5.207e-02, 7.227e-02, 1.375e-01, -6.362e-02, 2.171e-01, 3.057e-01, 1.320e-02, -7.004e-03));
	r += V4(9.481e-04, 1.074e-02, 1.178e-03, 2.828e-04);
	return r;
}
void Pass7(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 8
//!DESC CuNNy-8x4C-BILINEAR-CHROMA-NVL-DN-conv7
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(4.114e-02, -2.378e-01, -5.205e-02, -4.521e-02, -4.336e-02, 2.118e-02, 5.460e-02, 1.076e-02, 6.043e-02, -3.187e-02, 1.303e-02, -1.755e-02, -3.538e-02, 9.511e-02, -4.868e-02, 4.789e-03));
	r += mul(s0_1, M4(-1.545e-01, 5.927e-01, -1.699e-01, 2.563e-01, -2.325e-01, 1.446e-01, -1.194e-02, 1.003e-01, -2.161e-02, 1.402e-01, -1.106e-01, 3.572e-02, 1.716e-02, -1.126e-01, 1.192e-01, 6.667e-02));
	r += mul(s0_2, M4(-4.548e-02, 1.058e-01, -4.455e-02, -8.789e-02, -9.525e-02, 1.912e-01, 4.852e-02, 1.209e-01, 7.398e-02, -8.862e-02, -4.683e-02, -1.380e-01, -8.017e-03, 5.628e-03, -5.605e-02, 5.349e-02));
	r += mul(s0_3, M4(5.451e-02, -2.880e-01, 2.707e-01, -1.789e-01, 5.846e-02, 4.901e-03, -4.932e-02, 1.830e-02, -6.750e-02, 3.834e-02, 4.332e-02, -3.162e-02, -1.366e-01, -6.810e-03, -8.417e-02, 4.237e-02));
	r += mul(s0_4, M4(8.887e-01, 5.369e-01, -1.962e-01, 3.109e-01, 7.978e-02, -4.911e-01, 3.393e-01, -2.173e-01, 2.450e-01, 3.049e-01, -1.460e-01, 1.616e-01, 7.335e-01, -5.687e-02, -8.569e-02, 5.042e-02));
	r += mul(s0_5, M4(6.440e-02, 5.994e-03, 2.393e-01, 3.339e-01, -2.158e-03, 9.931e-03, -2.118e-01, 3.682e-01, -2.250e-02, 6.552e-02, 2.327e-01, -3.201e-01, 7.041e-02, 6.629e-02, 8.368e-02, -2.056e-01));
	r += mul(s0_6, M4(-3.978e-02, -7.622e-02, 3.676e-02, 4.783e-02, -6.733e-03, 5.376e-04, 3.556e-02, -2.372e-02, -1.931e-02, -1.201e-02, 6.542e-02, -1.777e-02, 3.068e-02, 2.299e-02, 2.740e-02, -1.545e-03));
	r += mul(s0_7, M4(7.781e-02, -1.744e-02, 2.808e-01, -2.706e-01, 5.810e-03, 8.259e-02, -7.855e-02, 9.404e-02, 3.247e-02, 9.185e-02, -1.889e-01, 9.138e-02, 1.003e-01, 7.599e-02, -6.383e-02, -1.611e-02));
	r += mul(s0_8, M4(-4.240e-02, 2.227e-02, -1.029e-01, 1.774e-01, 1.640e-02, 6.862e-02, -2.349e-02, -1.096e-01, 1.037e-02, 4.294e-02, -9.103e-03, -2.182e-02, 3.998e-02, -4.639e-02, 1.953e-02, 1.631e-02));
	r += mul(s1_0, M4(3.157e-02, -1.264e-01, 4.407e-02, -3.699e-02, 1.594e-02, -2.201e-01, 1.081e-01, 3.396e-03, -3.020e-02, -1.674e-01, -1.125e-01, 1.253e-02, 1.704e-02, -1.924e-02, -6.698e-02, 3.683e-04));
	r += mul(s1_1, M4(-1.137e-01, 1.944e-01, -1.376e-01, 1.548e-01, -2.153e-01, 3.183e-02, -1.644e-01, 8.081e-02, 5.269e-02, 5.334e-01, 3.866e-02, 2.557e-02, 5.849e-01, -1.464e+00, -4.195e-02, -1.694e-01));
	r += mul(s1_2, M4(-3.081e-02, -6.176e-03, -4.670e-02, -1.401e-01, -3.617e-02, 8.928e-02, 2.632e-03, 1.063e-01, 8.057e-02, 5.027e-02, -1.126e-01, -1.709e-01, -6.719e-01, 1.193e-01, -5.582e-01, 8.307e-02));
	r += mul(s1_3, M4(-1.410e-01, -2.202e-01, 2.625e-01, -6.865e-02, 7.781e-02, 3.932e-01, 1.113e-01, 2.869e-02, 5.210e-02, 5.054e-02, 8.571e-02, -6.213e-02, -1.499e-03, -2.521e-02, 2.516e-02, -1.385e-02));
	r += mul(s1_4, M4(3.970e-02, 6.035e-01, -1.058e+00, 5.125e-01, 6.699e-01, -2.028e-01, 2.002e-01, -1.259e+00, 7.330e-01, 1.518e-01, -2.182e-01, -2.089e-01, 3.703e-01, -6.426e-01, 3.193e-01, -5.453e-02));
	r += mul(s1_5, M4(1.235e-02, -1.239e-03, 6.438e-02, -2.754e-01, 1.731e-02, -1.170e-01, 1.680e-02, 3.303e-01, 2.404e-01, 1.390e-01, 4.369e-01, -4.560e-01, 6.856e-01, -2.612e-02, 4.929e-01, 4.417e-02));
	r += mul(s1_6, M4(4.091e-02, -9.602e-03, 1.148e-01, -2.021e-02, -4.528e-02, 9.957e-02, 7.154e-02, -4.901e-02, 4.036e-02, 7.614e-03, 1.308e-01, -6.665e-02, -1.548e-02, -4.438e-03, -2.108e-02, 8.652e-03));
	r += mul(s1_7, M4(1.611e-01, -3.215e-02, 2.692e-01, -2.825e-01, 2.340e-01, 3.816e-02, 1.182e-01, -1.664e-01, 2.074e-01, -2.696e-03, 1.474e-01, -1.165e-01, 8.273e-02, 6.093e-02, -1.379e-01, 1.120e-01));
	r += mul(s1_8, M4(3.960e-02, -5.825e-02, 4.335e-02, 1.604e-01, 2.496e-02, -7.401e-03, 5.110e-02, -1.453e-02, -5.817e-04, -4.944e-02, 4.548e-02, 3.696e-02, 1.063e-01, 8.442e-02, 1.251e-01, -1.903e-01));
	r += V4(4.125e-04, 4.994e-03, -8.496e-03, 2.251e-03);
	return r;
}
void Pass8(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 9
//!DESC CuNNy-8x4C-BILINEAR-CHROMA-NVL-DN-conv8
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(1.564e-02, 1.667e-02, 4.822e-02, 4.529e-02, -4.098e-03, 3.743e-03, 1.933e-02, 1.051e-02, 2.095e-02, 2.999e-02, 5.511e-02, 9.053e-03, 5.416e-02, 2.209e-02, 9.800e-02, 4.816e-02));
	r += mul(s0_1, M4(6.906e-02, -6.400e-02, -2.484e-03, 1.261e-02, 7.965e-03, 6.952e-03, 3.941e-02, 5.044e-03, 3.388e-02, -4.725e-02, 3.597e-02, 9.909e-02, 7.972e-02, -4.544e-02, 6.502e-02, -3.238e-02));
	r += mul(s0_2, M4(-5.610e-02, 3.318e-02, -3.210e-02, 3.035e-02, 4.312e-02, 5.600e-03, 1.909e-02, -3.482e-02, 2.088e-02, 1.378e-03, 2.146e-03, -5.458e-04, -1.416e-02, 1.001e-02, -4.080e-03, -6.308e-03));
	r += mul(s0_3, M4(4.611e-02, -8.854e-02, -3.496e-02, 6.095e-02, 6.195e-03, 3.627e-02, 1.971e-02, -2.653e-02, 3.526e-02, -1.470e-01, -7.026e-02, -3.857e-02, 1.164e-01, -2.537e-01, -2.193e-01, 1.171e-02));
	r += mul(s0_4, M4(-5.120e-01, 4.781e-02, -2.017e-01, -1.178e-01, -7.735e-02, 3.720e-03, 1.708e-03, -2.834e-01, -3.494e-02, -1.587e-01, 3.975e-01, 7.312e-01, -8.358e-01, 5.724e-01, -3.545e-01, 1.410e-01));
	r += mul(s0_5, M4(2.073e-02, 2.463e-02, -2.936e-02, 8.083e-02, 1.344e-03, -2.511e-02, 6.090e-02, 1.949e-02, 2.340e-01, -1.356e-01, 1.861e-01, -5.678e-02, 8.194e-02, -9.761e-02, 5.850e-02, 5.872e-02));
	r += mul(s0_6, M4(8.200e-03, 2.047e-02, -4.065e-02, -1.285e-03, 1.489e-02, -1.571e-02, -1.982e-03, 5.408e-03, 9.573e-02, -1.405e-01, -1.284e-01, 1.128e-02, 1.243e-01, -7.826e-02, -1.558e-01, 3.967e-02));
	r += mul(s0_7, M4(-4.953e-02, 3.273e-01, 1.383e-01, 3.004e-02, 9.959e-02, -9.985e-02, -1.877e-01, 2.467e-02, 2.192e-01, 4.015e-01, -8.223e-01, -2.421e-01, 2.842e-01, 1.714e-01, -3.870e-01, 2.226e-02));
	r += mul(s0_8, M4(1.140e-01, -6.006e-02, 6.951e-02, 7.983e-02, -6.092e-02, -4.249e-02, 1.482e-02, -4.154e-02, -2.242e-01, 5.171e-02, -2.560e-02, -7.102e-02, 6.872e-04, -2.480e-02, 7.491e-03, -5.452e-03));
	r += mul(s1_0, M4(3.602e-02, 4.123e-02, 8.032e-02, -2.201e-02, -1.407e-02, 2.114e-02, -2.561e-02, -2.830e-02, 2.870e-02, 3.943e-02, 4.138e-02, -1.687e-02, 1.618e-01, -9.465e-02, -6.442e-02, -1.956e-02));
	r += mul(s1_1, M4(6.327e-02, -1.105e-02, 1.027e-01, 2.764e-02, 2.521e-02, -6.546e-02, -2.340e-02, 1.896e-02, -5.223e-03, 1.632e-02, 1.450e-01, 7.056e-02, -1.108e-01, -5.596e-02, 3.594e-02, 1.626e-01));
	r += mul(s1_2, M4(1.667e-02, 2.125e-02, -1.535e-02, -5.980e-03, -2.950e-02, 9.527e-02, -8.164e-02, -9.012e-02, 1.380e-01, -9.285e-02, 8.899e-02, -3.810e-02, -6.239e-02, 3.922e-02, -4.837e-02, -1.375e-02));
	r += mul(s1_3, M4(1.097e-01, -1.158e-01, -1.430e-01, -2.858e-02, 1.921e-03, 6.372e-02, 6.141e-02, 1.138e-02, 7.185e-02, -9.790e-02, -1.010e-01, 5.409e-02, -1.931e-01, -4.600e-01, 5.637e-01, 3.567e-01));
	r += mul(s1_4, M4(-8.371e-01, -4.997e-02, -2.900e-01, -2.212e-01, 4.658e-02, 8.027e-01, 1.564e-01, -8.768e-01, -1.114e-01, -1.281e-01, -5.431e-02, 4.333e-01, -5.566e-01, 7.932e-01, -7.005e-01, 1.318e-02));
	r += mul(s1_5, M4(-8.074e-03, -1.194e-01, 3.738e-02, 8.263e-02, 5.254e-01, -3.741e-01, 4.327e-01, -2.129e-01, 1.571e-01, -1.229e-01, 1.774e-01, -1.274e-01, 9.010e-02, -4.648e-02, 1.575e-02, 1.102e-03));
	r += mul(s1_6, M4(-2.568e-02, -8.390e-03, -5.097e-03, -2.423e-02, 6.106e-02, -3.727e-03, 4.846e-02, 5.530e-02, 3.864e-02, -5.255e-02, -5.846e-02, 1.208e-02, 1.257e-01, 1.925e-02, -1.821e-01, 5.458e-02));
	r += mul(s1_7, M4(8.309e-02, 1.215e-01, -2.553e-02, 7.322e-02, 1.913e-01, -3.521e-01, -3.688e-01, -2.281e-02, 2.599e-01, 3.966e-02, -4.047e-01, -4.089e-02, 2.960e-01, -1.494e-02, -3.134e-01, 5.650e-02));
	r += mul(s1_8, M4(5.504e-02, 2.364e-02, -2.269e-02, 7.842e-03, -5.377e-01, 1.470e-01, -5.520e-03, -2.332e-01, -1.685e-01, -5.569e-02, 9.213e-02, -3.788e-02, -6.916e-02, 1.167e-02, 1.074e-02, -3.045e-02));
	r += V4(5.411e-03, -4.885e-03, 3.792e-03, 3.922e-03);
	return r;
}
void Pass9(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 10
//!DESC CuNNy-8x4C-BILINEAR-CHROMA-NVL-DN-out
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-1.958e-03, 8.944e-02, -1.108e-01, 8.575e-03, -1.106e-02, 7.653e-03, -2.361e-02, 2.292e-03, 7.464e-02, -4.092e-02, 6.567e-02, 1.286e-02, -1.145e-01, -5.171e-03, -7.912e-03, 1.963e-03));
	r += mul(s0_1, M4(6.523e-02, 1.075e-01, 4.539e-02, -3.662e-02, -5.599e-02, -1.120e-01, 1.142e-02, -2.966e-03, -1.304e-01, 2.701e-02, -1.656e-02, 3.063e-02, 9.195e-02, -1.064e-01, 1.340e-02, -2.042e-02));
	r += mul(s0_2, M4(-1.517e-02, 9.155e-02, -1.134e-02, -3.515e-02, -1.702e-02, -3.306e-02, -1.515e-02, 9.444e-03, 2.398e-02, -1.401e-01, -7.480e-04, -5.051e-03, -2.728e-02, 6.099e-02, -2.562e-02, -1.492e-02));
	r += mul(s0_3, M4(2.768e-03, -5.310e-02, 2.272e-01, 8.019e-02, -1.458e-01, 7.060e-02, -2.825e-01, 7.836e-02, 1.184e-01, -1.238e-01, 3.264e-01, 1.127e-02, 9.505e-03, 7.016e-02, -3.832e-01, -1.157e-02));
	r += mul(s0_4, M4(5.879e-01, 5.927e-02, 2.707e-01, 2.973e-01, 7.363e-01, 1.889e-01, -3.646e-01, -7.822e-01, -2.180e-01, 3.525e-01, -7.464e-01, 3.167e-02, 3.183e-01, 5.296e-01, 2.549e-01, -4.885e-02));
	r += mul(s0_5, M4(-9.990e-02, 3.085e-01, -1.913e-02, 2.559e-01, -7.319e-02, 1.153e-01, 5.532e-03, -1.362e-01, -1.701e-02, -2.280e-01, 2.943e-02, -4.228e-01, -3.186e-02, 2.202e-02, 6.806e-04, 1.725e-01));
	r += mul(s0_6, M4(-5.800e-02, 8.512e-03, -7.251e-02, -1.825e-02, -1.794e-02, -5.516e-03, 4.399e-02, 3.739e-03, -2.570e-02, 2.309e-02, -2.233e-01, 3.405e-02, 1.372e-01, -2.872e-02, 1.899e-01, -2.938e-02));
	r += mul(s0_7, M4(1.968e-01, -1.502e-02, 1.656e-01, -7.273e-02, -6.262e-02, -1.640e-03, 2.428e-02, 1.402e-01, 7.788e-02, -1.463e-01, 4.443e-01, 5.407e-02, -4.288e-01, 4.897e-02, -2.861e-01, 4.189e-01));
	r += mul(s0_8, M4(-4.089e-02, 1.150e-01, -6.354e-03, 1.460e-01, 8.218e-04, -3.977e-02, 2.432e-02, -5.287e-02, -9.663e-03, 4.159e-02, 1.966e-03, 1.313e-01, 5.821e-02, -2.375e-01, 1.882e-02, -3.135e-01));
	r += mul(s1_0, M4(9.112e-02, 5.335e-02, -9.302e-02, 5.569e-03, -9.417e-02, 4.083e-02, -3.527e-02, 9.470e-03, 4.993e-02, -2.637e-02, 7.361e-02, -8.289e-04, -5.222e-02, 1.726e-02, -4.173e-02, -3.747e-02));
	r += mul(s1_1, M4(1.512e-01, 1.152e-02, 2.665e-02, -4.818e-02, -1.196e-02, -1.121e-01, 2.772e-03, -3.626e-02, -2.588e-01, 9.790e-02, -2.677e-02, 6.882e-02, -5.141e-02, 4.398e-02, 1.271e-02, -4.641e-02));
	r += mul(s1_2, M4(-1.811e-02, 8.054e-02, -4.899e-03, -1.654e-02, 3.508e-03, 1.213e-02, -1.104e-02, -1.651e-02, 9.793e-03, -1.519e-01, 5.222e-03, 2.402e-02, 1.329e-02, -6.698e-02, -2.180e-02, 1.530e-02));
	r += mul(s1_3, M4(-3.833e-03, -6.067e-02, 3.677e-02, 8.465e-02, -1.372e-01, 6.498e-02, -3.233e-01, 2.758e-02, 5.087e-02, -7.055e-02, 2.571e-01, -7.427e-03, -1.284e-01, 8.667e-02, -2.572e-01, 6.094e-02));
	r += mul(s1_4, M4(5.879e-01, 5.179e-01, 3.810e-01, -5.531e-02, 2.549e-01, 2.310e-01, -3.701e-01, -1.292e-01, 1.799e-01, 4.432e-01, -8.770e-01, 8.601e-02, 8.562e-01, -2.529e-01, 5.155e-01, 9.446e-02));
	r += mul(s1_5, M4(-3.284e-02, 2.581e-01, -2.074e-02, 2.261e-01, -8.473e-02, -1.039e-03, -1.425e-03, -1.137e-01, 7.808e-03, -1.290e-01, 3.764e-02, -4.938e-01, -1.023e-01, 2.495e-01, -7.090e-03, -6.949e-02));
	r += mul(s1_6, M4(-3.757e-02, 1.002e-05, -1.324e-01, -9.096e-05, -1.553e-02, -8.091e-03, 5.731e-02, 5.442e-03, -4.822e-02, 1.526e-02, -1.033e-01, -1.796e-02, 1.404e-01, -3.967e-02, 2.809e-01, -1.130e-02));
	r += mul(s1_7, M4(2.291e-01, -5.237e-02, 1.456e-01, -6.805e-02, -7.595e-02, -5.656e-02, 1.909e-01, 8.325e-02, 1.181e-01, -1.650e-02, 1.538e-01, 4.895e-02, -3.545e-01, 9.485e-02, -2.742e-01, 1.048e-01));
	r += mul(s1_8, M4(-5.261e-02, 1.093e-01, -1.053e-02, 1.636e-01, 3.839e-02, -5.214e-02, 3.503e-02, -5.497e-03, -2.226e-02, 6.017e-02, 2.899e-02, 5.091e-02, 1.176e-02, -1.851e-01, -2.577e-03, -1.866e-01));
	r += V4(-1.057e-03, -1.312e-03, -8.220e-04, -1.194e-03);
	return tanh(r);
}
void Pass10(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 11
//!DESC CuNNy-8x4C-BILINEAR-CHROMA-NVL-DN-shuffle
//!STYLE PS
//!IN t1, INPUT
float4 Pass11(float2 pos) {
	float2 pt = float2(GetInputPt());
	static const float3x3 rgb2yuv = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081};
	static const float3x3 yuv2rgb = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float4 r = 0.0;
	float2 size = float2(GetInputSize());
	float2 f = frac(pos * size);
	float3 yuv = mul(rgb2yuv, INPUT.SampleLevel(SL, pos, 0).rgb);
	int2 i = int2(f * 2.0);
	r.r = t1.SampleLevel(SP, (float2(0.5, 0.5) - f) * pt + pos, 0)[2*i.y + i.x];
	r.r += yuv.r;
	r.a = 1.0;
	r.r = clamp(r, 0.0, 1.0);
	float3 px = mul(yuv2rgb, float3(r.r, yuv.yz));
	return float4(px, 1.0);
}
