// CuNNy 8x4C BILINEAR CHROMA NVL DN
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

//!MAGPIE EFFECT
//!VERSION 3
//!OUTPUT_WIDTH INPUT_WIDTH * 2
//!OUTPUT_HEIGHT INPUT_HEIGHT * 2

//!TEXTURE
Texture2D INPUT;


//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t1;

//!PASS 1
//!DESC CuNNy-8x4C-BILINEAR-CHROMA-NVL-DN-in
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) (dot(float3(-2.311e-01, -4.504e-01, -1.044e-01), O(INPUT, float2(x, y)).rgb) + 7.383e-01)
float4 f0(float2 pt, float2 pos, min16float s0_0, min16float s0_1, min16float s0_2, min16float s0_3, min16float s0_4, min16float s0_5, min16float s0_6, min16float s0_7, min16float s0_8) {
	V4 r = 0.0;
	r += V4(-1.007e-01, 9.322e-02, 2.784e-02, 1.371e-04) * s0_0;
	r += V4(1.225e-01, -1.517e-02, -5.606e-01, 6.055e-03) * s0_1;
	r += V4(2.617e-02, 1.867e-02, 2.097e-02, -4.734e-03) * s0_2;
	r += V4(1.491e-01, -2.776e-01, 2.731e-01, -1.412e-02) * s0_3;
	r += V4(-8.887e-01, -8.029e-01, 2.019e-01, 9.950e-02) * s0_4;
	r += V4(4.090e-02, 7.780e-02, -5.169e-02, -4.779e-02) * s0_5;
	r += V4(1.519e-01, 2.093e-02, 3.249e-02, 3.377e-02) * s0_6;
	r += V4(5.358e-01, -5.800e-02, 1.092e-01, 5.588e-01) * s0_7;
	r += V4(-2.487e-02, -1.035e-02, -2.553e-02, -6.281e-01) * s0_8;
	r += V4(7.113e-04, -7.490e-03, -4.065e-02, -1.075e-02);
	return r;
}
void Pass1(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float s0_0 = l0(-1.0, -1.0);
	min16float s0_1 = l0(0.0, -1.0);
	min16float s0_2 = l0(1.0, -1.0);
	min16float s0_3 = l0(-1.0, 0.0);
	min16float s0_4 = l0(0.0, 0.0);
	min16float s0_5 = l0(1.0, 0.0);
	min16float s0_6 = l0(-1.0, 1.0);
	min16float s0_7 = l0(0.0, 1.0);
	min16float s0_8 = l0(1.0, 1.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8);
}
//!PASS 2
//!DESC CuNNy-8x4C-BILINEAR-CHROMA-NVL-DN-conv1
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(2.204e-01, 5.868e-02, -1.583e-02, 1.703e-01, 6.283e-01, -2.327e-02, 1.778e-01, 1.115e-01, -1.164e-01, 2.157e-03, 8.207e-02, 1.154e-01, -2.566e-01, 3.132e-01, 7.521e-02, -1.316e-01));
	r += mul(s0_1, M4(-1.240e-01, -2.361e-01, -1.146e-01, 5.178e-01, -1.131e-01, -1.398e-01, -8.693e-02, 6.785e-01, 5.715e-04, -6.348e-03, -9.712e-02, -4.741e-02, 4.558e-01, -2.648e-01, 1.744e-01, -3.058e-01));
	r += mul(s0_2, M4(3.079e-02, -1.472e-01, 4.626e-02, 2.495e-01, -1.654e-01, -2.193e-02, -5.245e-01, 4.456e-01, 3.058e-02, -6.737e-02, -9.106e-02, 1.068e-01, -8.053e-02, -7.511e-03, 3.933e-02, -2.821e-02));
	r += mul(s0_3, M4(5.137e-01, -2.900e-01, 1.067e-01, 4.883e-02, 9.773e-01, -5.584e-01, 5.417e-02, -1.103e-02, -1.644e-01, -1.384e-01, 1.637e-02, -9.218e-02, -1.341e-01, 1.754e-01, 7.930e-01, -3.359e-02));
	r += mul(s0_4, M4(-5.430e-01, 4.011e-01, 3.684e-01, -8.505e-01, -2.953e-01, -6.421e-01, -3.807e-02, -8.083e-01, 2.224e-01, 8.309e-01, 2.458e-01, 3.328e-01, 1.648e-01, -6.819e-02, -1.553e-01, 2.213e-01));
	r += mul(s0_5, M4(-1.707e-01, -7.800e-02, -3.155e-02, 1.890e-01, -2.535e-01, 1.583e-01, 1.239e-01, -3.438e-01, -1.592e-01, 2.908e-01, 1.798e-01, -6.253e-01, 1.171e-02, 1.811e-02, -1.723e-02, 2.759e-02));
	r += mul(s0_6, M4(1.886e-02, 5.022e-02, 1.784e-01, 1.449e-02, -1.406e-01, -4.241e-01, -1.439e-01, 2.022e-01, -4.035e-02, -1.648e-01, -3.802e-01, 8.868e-02, -1.213e-01, -1.185e-01, -6.910e-02, 3.006e-02));
	r += mul(s0_7, M4(1.600e-01, 1.522e-02, -3.569e-01, -1.779e-02, -2.182e-01, 1.595e-01, -9.642e-02, -1.725e-01, -1.592e-01, 2.321e-01, -5.737e-01, 8.870e-02, -1.840e-01, -1.646e-01, -2.733e-01, 7.874e-02));
	r += mul(s0_8, M4(-1.966e-01, -1.310e-01, 9.418e-03, -2.412e-02, -1.794e-01, 1.334e-01, 8.517e-01, 1.630e-02, -4.672e-02, -2.841e-02, -3.643e-01, -1.811e-02, -3.599e-03, -9.023e-03, -1.011e-01, -2.873e-03));
	r += mul(s1_0, M4(-2.122e-01, 2.170e-01, -4.512e-02, 4.846e-02, 4.036e-01, 6.035e-03, -1.842e-03, 8.373e-02, 1.284e-01, 4.408e-02, 4.032e-02, 3.157e-02, -3.522e-01, -5.164e-01, -1.971e-01, 7.762e-03));
	r += mul(s1_1, M4(-1.251e-01, -8.941e-02, -1.863e-01, 2.560e-01, -1.285e-01, -2.174e-01, -3.647e-02, 3.429e-01, -8.346e-02, 3.625e-02, -1.212e-01, 2.784e-01, 2.624e-01, -1.247e-01, -5.340e-01, -1.607e-01));
	r += mul(s1_2, M4(1.070e-02, -3.023e-02, -9.168e-02, 1.661e-01, -2.173e-01, -4.616e-02, -1.839e-01, 2.427e-01, -2.448e-02, -2.589e-02, -3.110e-02, 8.320e-02, -9.152e-02, -2.321e-03, -8.827e-02, 4.163e-02));
	r += mul(s1_3, M4(3.298e-01, 2.648e-01, -2.625e-01, 2.019e-01, 3.327e-01, -2.534e-01, 1.105e-01, 1.253e-02, 5.571e-02, -4.785e-01, 4.557e-02, 6.236e-04, -3.835e-01, 1.204e-01, 4.109e-01, 1.469e-01));
	r += mul(s1_4, M4(-1.862e-01, 4.893e-01, -1.416e-01, -9.316e-01, -2.688e-01, -2.982e-01, 4.198e-02, -1.650e-01, 7.911e-02, 5.102e-01, 4.111e-01, 6.045e-01, 1.625e-01, -6.921e-02, 4.067e-01, 3.366e-01));
	r += mul(s1_5, M4(-2.112e-02, 2.836e-02, 3.213e-01, 1.436e-01, -2.562e-01, 1.719e-01, -5.338e-02, -1.609e-01, 1.306e-01, 1.130e-01, 5.663e-01, -2.171e-01, -1.359e-02, 1.837e-02, 2.358e-01, 3.638e-02));
	r += mul(s1_6, M4(1.050e-01, 1.488e-01, -1.627e-01, 3.968e-02, 6.938e-02, -2.057e-01, -1.815e-01, 2.737e-02, -4.182e-02, -4.547e-01, 4.073e-02, -8.730e-02, -5.385e-02, -4.536e-02, 3.684e-01, -6.079e-02));
	r += mul(s1_7, M4(1.080e-01, 2.463e-02, 5.388e-02, -4.748e-02, -5.549e-02, 2.006e-01, 1.981e-02, -2.099e-01, -3.908e-02, 2.189e-01, -4.682e-01, -7.358e-02, -9.699e-03, -1.108e-01, 2.448e-01, 2.331e-02));
	r += mul(s1_8, M4(-1.519e-01, -7.508e-02, 1.962e-01, 1.060e-02, 9.692e-02, 1.251e-01, 3.049e-01, -1.535e-01, -1.736e-01, -1.101e-01, 2.939e-03, 1.417e-01, 2.187e-02, 1.804e-02, -3.447e-02, 7.405e-03));
	r += V4(-5.006e-02, 2.884e-02, 2.087e-02, 9.487e-03);
	return r;
}
void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 3
//!DESC CuNNy-8x4C-BILINEAR-CHROMA-NVL-DN-conv2
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(3.487e-02, -9.247e-02, 4.689e-02, -2.563e-02, -2.674e-02, -7.593e-02, 1.787e-02, 5.932e-02, -1.384e-01, 1.314e-01, 3.380e-02, 1.070e-01, 3.851e-02, 1.030e-02, -6.114e-03, 8.696e-03));
	r += mul(s0_1, M4(1.463e-01, -3.721e-01, 1.902e-01, -2.843e-02, -2.163e-01, -7.032e-02, -1.082e-01, -1.106e-01, 3.082e-02, 1.210e-01, -6.258e-02, 5.494e-02, -1.061e-01, -2.214e-01, 7.448e-02, -1.929e-01));
	r += mul(s0_2, M4(2.379e-01, 2.498e-01, -2.540e-02, 2.124e-01, 6.872e-02, 2.046e-01, -2.002e-02, 9.941e-02, 9.932e-02, 1.419e-01, 9.061e-02, 5.643e-01, 6.566e-02, 7.778e-02, -4.263e-02, 4.021e-02));
	r += mul(s0_3, M4(-2.655e-02, -4.418e-02, -2.078e-02, -2.203e-02, -1.285e-01, 3.646e-02, 6.230e-02, -5.246e-02, -1.086e-02, -1.906e-01, 4.061e-01, -3.648e-02, -1.529e-01, 3.571e-01, -2.294e-01, -1.451e-01));
	r += mul(s0_4, M4(-5.126e-01, -6.485e-03, -1.762e-01, -4.319e-02, -9.949e-03, 1.216e-01, -2.140e-02, -8.024e-03, -2.958e-01, -7.423e-03, 6.327e-02, -1.448e-01, -4.739e-01, -4.892e-01, 1.557e-01, -1.231e-01));
	r += mul(s0_5, M4(3.755e-01, -3.135e-01, 1.073e-01, -6.365e-02, 1.948e-01, -2.778e-01, -7.917e-02, 3.862e-02, 6.035e-01, -8.011e-02, 2.168e-01, 4.396e-02, 4.170e-01, 1.917e-01, -4.289e-02, 4.739e-01));
	r += mul(s0_6, M4(-1.070e-02, 1.055e-01, 3.845e-02, 7.912e-03, 4.328e-02, -1.303e-02, 1.219e-02, -5.433e-03, 3.856e-02, 2.057e-02, 1.637e-01, 5.483e-02, -8.505e-02, 2.607e-01, 1.781e-01, -1.639e-01));
	r += mul(s0_7, M4(9.858e-03, -9.031e-02, -3.908e-01, -8.751e-02, -2.782e-02, 7.206e-02, -6.318e-02, 1.158e-01, -1.896e-02, 2.682e-02, -1.524e-01, -1.261e-02, 9.871e-02, 1.021e-01, -7.630e-01, -3.382e-01));
	r += mul(s0_8, M4(-1.768e-01, 1.279e-01, 1.087e-01, 3.285e-03, 7.666e-02, 7.005e-02, 6.457e-02, -1.153e-01, 8.619e-02, -6.807e-02, 1.034e-01, -1.110e-01, 7.446e-02, -1.982e-01, 1.945e-01, 1.661e-01));
	r += mul(s1_0, M4(6.321e-03, -5.150e-02, -2.101e-02, 4.818e-02, 4.773e-02, -1.455e-01, -7.339e-02, 4.811e-02, -9.013e-02, -2.575e-02, 1.327e-02, -4.974e-03, 4.698e-02, 8.545e-02, -4.579e-02, 5.396e-02));
	r += mul(s1_1, M4(-1.032e-01, -2.131e-01, 3.934e-02, -2.263e-02, -2.629e-02, -9.057e-02, -2.340e-01, -1.061e-01, -8.930e-02, 4.613e-02, -1.760e-01, 2.021e-01, -8.961e-02, -3.161e-02, 1.228e-01, -5.771e-02));
	r += mul(s1_2, M4(2.261e-01, 4.327e-01, -8.752e-02, 2.930e-01, 1.632e-01, -1.625e-01, -5.585e-01, 1.301e-01, -2.260e-01, 6.405e-02, -5.809e-02, -8.859e-02, 3.012e-02, 1.101e-01, -1.050e-02, 5.502e-02));
	r += mul(s1_3, M4(-9.852e-02, 8.546e-05, 1.436e-01, 1.426e-02, 1.245e-02, 1.431e-01, -1.754e-01, 4.875e-02, 2.126e-02, -1.283e-01, 1.266e-01, -5.142e-02, -2.236e-01, 4.706e-01, -2.690e-01, -3.414e-03));
	r += mul(s1_4, M4(-2.103e-01, -4.552e-01, 3.334e-02, 1.347e-01, 1.097e-02, -1.076e+00, -2.316e-01, -6.058e-01, -1.606e-01, 9.893e-02, 2.888e-01, 1.439e-01, -2.789e-01, -4.963e-01, 2.652e-01, -7.131e-01));
	r += mul(s1_5, M4(7.363e-01, -2.853e-01, 1.395e-01, -7.747e-02, -1.209e+00, -1.179e+00, -1.698e+00, -1.394e-02, -6.315e-03, 1.648e-01, -1.231e-01, 1.744e-01, 4.731e-01, 1.174e-01, -7.266e-03, 2.290e-01));
	r += mul(s1_6, M4(4.325e-03, 6.866e-02, 1.805e-01, -1.526e-02, 6.980e-02, -1.006e-01, 1.979e-01, -4.319e-04, -7.232e-03, -2.225e-02, -1.011e-01, 4.540e-02, -8.764e-02, 3.115e-01, -7.071e-03, -1.401e-01));
	r += mul(s1_7, M4(-3.963e-02, -1.293e-02, -1.538e-01, 9.991e-02, -9.794e-03, -3.891e-02, -1.437e-01, 5.840e-01, 2.172e-02, 1.045e-02, -1.439e-01, -1.335e-02, 1.626e-01, -1.657e-01, -3.011e-02, -5.779e-01));
	r += mul(s1_8, M4(3.271e-01, -2.608e-01, 1.104e-01, -9.596e-02, -6.760e-01, -8.648e-01, -1.201e+00, -6.523e-01, -1.028e-02, 1.022e-01, -4.985e-02, -1.861e-03, 4.655e-01, -2.126e-01, 6.855e-02, -1.232e-01));
	r += V4(1.740e-02, -6.587e-02, 2.258e-02, -5.116e-02);
	return r;
}
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 4
//!DESC CuNNy-8x4C-BILINEAR-CHROMA-NVL-DN-conv3
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-1.023e-01, 1.946e-02, 2.165e-02, -8.512e-02, 3.372e-02, -1.863e-02, 1.099e-03, -2.510e-02, 2.892e-02, -8.807e-02, -1.677e-03, 1.995e-01, -4.964e-02, 4.816e-02, 1.362e-01, 2.194e-01));
	r += mul(s0_1, M4(3.814e-02, -2.281e-02, 2.357e-04, -2.874e-01, 5.857e-02, -9.066e-03, 1.104e-01, -1.124e-02, 1.229e-01, 1.850e-01, 1.243e-01, 2.940e-01, -3.171e-02, 6.723e-02, -2.484e-02, -6.515e-03));
	r += mul(s0_2, M4(-8.455e-03, -2.149e-02, -2.807e-02, -2.656e-02, -4.814e-03, -7.552e-02, 3.215e-02, 2.615e-01, -1.121e-01, 1.053e-01, -4.963e-02, -1.340e-01, -1.595e-02, -7.059e-02, -8.866e-03, 7.351e-02));
	r += mul(s0_3, M4(2.245e-01, -6.101e-02, 2.705e-01, -5.769e-01, -5.378e-02, 2.203e-02, -1.404e-02, 5.649e-02, -8.456e-02, -5.700e-02, 1.638e-01, -1.281e-01, 3.481e-02, -1.006e-01, -1.898e-01, 4.586e-01));
	r += mul(s0_4, M4(1.972e-01, 5.215e-01, 1.119e-01, 8.653e-02, -4.028e-01, 3.721e-01, -8.091e-02, 3.236e-01, -7.207e-01, -2.582e-01, 1.864e-01, -4.083e-01, -1.407e-01, -5.156e-02, -3.186e-02, -4.036e-01));
	r += mul(s0_5, M4(-2.664e-02, -3.602e-03, 5.880e-03, -9.702e-02, 1.567e-01, 1.175e-01, 1.101e-01, -9.194e-03, -1.062e-01, -1.778e-01, -2.391e-01, -1.719e-01, -1.078e-02, -2.521e-02, -8.983e-03, 1.352e-01));
	r += mul(s0_6, M4(1.474e-01, -5.224e-02, -2.705e-01, -2.885e-01, -1.388e-03, -4.774e-02, -4.317e-02, 1.314e-01, -1.283e-01, -5.795e-02, -6.570e-02, 2.588e-02, 4.454e-02, 8.130e-02, -9.899e-02, -5.570e-02));
	r += mul(s0_7, M4(-3.960e-01, -2.715e-01, -2.862e-01, -4.245e-01, -3.587e-01, -2.261e-01, -2.319e-01, -1.970e-01, 1.651e-01, 9.255e-02, 6.205e-02, 2.165e-01, 2.631e-01, -2.491e-01, -8.923e-02, 8.429e-02));
	r += mul(s0_8, M4(6.526e-02, 8.621e-02, 6.126e-02, 5.968e-02, 5.519e-02, -2.447e-02, 3.051e-02, 1.077e-01, -8.770e-02, -3.192e-02, 4.766e-03, 2.105e-02, -3.088e-02, 2.473e-02, -1.037e-02, 4.978e-03));
	r += mul(s1_0, M4(6.672e-02, 6.860e-03, 1.179e-01, -1.555e-01, 5.013e-02, -4.639e-02, -5.047e-02, -5.351e-03, 2.520e-02, -8.156e-03, 7.287e-02, 1.824e-01, 1.066e-01, 5.086e-02, -1.025e-01, -2.557e-02));
	r += mul(s1_1, M4(6.373e-02, -1.479e-01, 1.486e-02, 2.497e-02, 1.623e-02, 3.586e-02, 4.786e-02, -2.681e-01, 1.582e-01, -1.828e-02, 1.527e-01, -5.985e-02, -5.474e-02, -8.310e-03, -6.947e-02, -2.269e-01));
	r += mul(s1_2, M4(-3.583e-02, -6.503e-02, -3.728e-02, 2.925e-02, -2.206e-02, -1.903e-02, -7.890e-02, -2.484e-01, -8.044e-03, -6.325e-02, -6.390e-03, 7.046e-02, -1.698e-02, -1.238e-02, 7.772e-06, -1.764e-02));
	r += mul(s1_3, M4(-1.264e-01, 6.974e-03, 7.403e-01, 1.324e-01, 4.599e-02, 5.772e-02, 5.079e-02, -1.704e-01, -4.951e-02, 4.955e-02, 9.262e-02, 5.955e-02, 4.720e-02, -6.941e-02, -1.936e-01, -8.329e-02));
	r += mul(s1_4, M4(2.421e-01, 3.899e-01, 3.531e-01, 3.365e-01, -4.242e-01, 3.746e-01, -5.655e-02, 1.499e-01, -5.525e-01, -1.244e-01, 1.054e-02, -4.169e-02, -3.033e-01, -8.887e-01, -1.618e-01, -1.512e-01));
	r += mul(s1_5, M4(1.630e-03, 3.888e-02, -1.818e-03, -1.499e-01, 4.509e-02, 2.349e-01, -8.146e-02, -4.221e-01, -1.221e-01, -2.744e-01, -2.006e-01, -3.882e-01, -9.898e-02, 7.483e-02, 6.893e-03, -1.556e-01));
	r += mul(s1_6, M4(2.134e-01, -2.598e-03, -9.008e-02, 1.029e-01, -1.194e-01, -1.164e-01, 3.460e-03, -1.980e-02, -2.301e-02, 7.253e-02, -1.203e-01, -2.531e-02, 1.855e-01, -6.399e-02, -1.909e-04, -7.644e-02));
	r += mul(s1_7, M4(-2.280e-01, -2.684e-01, -1.747e-01, -2.654e-02, -2.970e-01, -6.544e-02, -2.072e-01, -4.409e-01, 1.653e-01, 1.501e-01, 9.336e-02, 4.976e-02, -6.193e-02, -3.740e-01, -3.853e-01, -3.564e-01));
	r += mul(s1_8, M4(9.302e-02, 8.908e-02, 4.678e-03, -2.062e-03, 5.810e-02, -9.363e-02, 3.483e-02, 9.297e-02, -8.884e-02, 4.286e-02, -3.701e-03, -1.580e-02, 1.518e-02, 3.179e-02, 4.510e-02, 1.656e-01));
	r += V4(-1.959e-02, -1.788e-02, 2.859e-03, -3.980e-02);
	return r;
}
void Pass4(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 5
//!DESC CuNNy-8x4C-BILINEAR-CHROMA-NVL-DN-conv4
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-2.777e-02, 2.472e-02, 3.604e-02, 1.076e-01, -1.537e-02, -6.163e-02, -1.174e-01, -2.085e-01, -5.767e-03, -4.637e-02, -7.284e-02, -4.302e-02, -2.775e-02, -8.276e-02, -3.391e-02, 3.136e-02));
	r += mul(s0_1, M4(-6.464e-02, 2.355e-02, 1.154e-02, -8.966e-02, -8.689e-02, -2.998e-02, -4.387e-02, -2.724e-01, 2.520e-02, 8.519e-02, 1.463e-01, -5.000e-03, 2.541e-02, -5.677e-02, -2.392e-02, -3.404e-02));
	r += mul(s0_2, M4(-6.716e-02, 4.623e-02, 9.010e-02, 2.244e-02, 5.605e-03, -8.219e-03, 2.946e-03, -7.739e-02, 1.047e-02, 1.077e-01, -8.076e-02, -1.465e-03, 9.046e-03, -3.539e-02, 3.805e-03, 1.802e-02));
	r += mul(s0_3, M4(-8.563e-02, -8.010e-02, -1.489e-01, -1.444e-01, 7.334e-03, 5.828e-02, -5.034e-02, -9.230e-02, -8.676e-02, 1.184e-01, 2.749e-03, -2.055e-01, -4.581e-02, -6.303e-02, 9.078e-02, 8.072e-02));
	r += mul(s0_4, M4(-7.168e-01, 1.112e-01, 1.516e-01, -5.473e-01, 4.366e-01, 3.701e-01, -6.701e-02, -9.056e-02, 1.816e-01, 5.371e-01, 3.765e-01, -2.472e-02, -4.043e-02, 1.159e-01, -9.738e-02, 1.771e-01));
	r += mul(s0_5, M4(-2.449e-03, 6.754e-03, 1.040e-01, -1.175e-01, 1.248e-01, -1.155e-01, 3.131e-02, 7.830e-02, 4.819e-02, 3.304e-01, 7.652e-03, 9.563e-02, -1.116e-02, -1.510e-01, -1.467e-02, 6.072e-02));
	r += mul(s0_6, M4(5.439e-02, 9.753e-02, 1.255e-02, 6.066e-02, -5.810e-02, -2.463e-02, -3.971e-02, -3.305e-02, 9.687e-02, 3.125e-02, 1.412e-01, 9.352e-02, -8.602e-02, -9.675e-02, 6.969e-03, 3.528e-02));
	r += mul(s0_7, M4(2.212e-01, -3.263e-02, 1.659e-01, 9.242e-02, 1.665e-01, 1.921e-02, -2.511e-01, -1.397e-01, 9.167e-02, 4.326e-01, 5.339e-01, -5.415e-02, -1.597e-01, -1.130e-01, -2.358e-01, 3.549e-02));
	r += mul(s0_8, M4(1.782e-01, 1.720e-02, 2.145e-02, 2.087e-02, 1.286e-01, -1.025e-01, -1.797e-02, 1.121e-02, -2.056e-01, 1.055e-01, 1.160e-01, 4.399e-02, 5.582e-02, -1.068e-01, -8.939e-02, -2.417e-02));
	r += mul(s1_0, M4(-6.544e-03, 1.193e-01, 2.981e-02, -2.407e-02, -1.606e-01, -4.112e-02, 3.071e-02, 3.005e-02, -6.478e-02, -5.659e-02, 7.918e-02, 3.872e-02, 2.134e-02, -8.403e-02, 3.441e-02, -1.411e-01));
	r += mul(s1_1, M4(-1.529e-01, 7.383e-02, 3.444e-02, -7.690e-02, -6.264e-02, -2.454e-02, -7.661e-02, 1.158e-01, 1.244e-02, -3.878e-02, -1.024e-01, 1.508e-01, -2.269e-02, -2.379e-01, -9.960e-02, -4.228e-02));
	r += mul(s1_2, M4(5.448e-02, 8.204e-02, -3.856e-02, 7.231e-02, -6.366e-02, -5.469e-02, -1.795e-02, 4.485e-02, 1.784e-03, -1.987e-01, -1.781e-02, -6.554e-03, -1.180e-01, -2.368e-01, -4.356e-02, 1.036e-01));
	r += mul(s1_3, M4(-1.184e-01, -2.382e-02, -7.520e-02, -2.295e-01, -2.749e-01, 5.526e-02, 2.023e-01, 2.845e-02, -5.254e-02, -1.846e-01, -5.146e-02, -1.090e-01, -3.307e-02, -3.523e-01, -8.055e-02, -1.266e-01));
	r += mul(s1_4, M4(-6.668e-01, 2.071e-01, 3.939e-01, -3.916e-01, -2.114e-01, 2.759e-01, -4.423e-01, 6.209e-01, -2.057e-01, -1.785e-01, 1.456e-01, 4.496e-01, -6.236e-02, -2.260e-01, -1.122e-01, 4.464e-01));
	r += mul(s1_5, M4(-1.611e-01, 1.219e-01, -7.503e-02, -1.552e-02, 9.243e-02, -1.115e-01, -1.259e-02, 5.469e-02, 1.580e-01, -7.266e-02, 2.823e-02, 1.629e-01, 1.056e-01, -3.170e-01, -6.811e-03, 1.949e-02));
	r += mul(s1_6, M4(1.342e-02, 6.301e-02, 3.923e-02, 2.246e-02, -2.365e-01, 5.568e-02, 1.332e-01, -6.499e-02, 1.274e-01, -4.009e-02, -4.352e-02, 5.397e-02, 2.192e-02, -3.388e-01, -5.716e-02, 2.865e-01));
	r += mul(s1_7, M4(-3.577e-02, 2.536e-02, 8.405e-02, 7.437e-02, -7.019e-02, 3.642e-02, -3.405e-01, -1.385e-01, 2.274e-01, -3.346e-02, 3.638e-01, -3.053e-02, 1.547e-01, -3.475e-01, -4.963e-01, -5.228e-02));
	r += mul(s1_8, M4(-9.251e-03, 6.105e-02, -8.077e-02, 2.825e-02, -5.211e-02, 3.841e-02, -4.934e-03, -3.791e-02, -2.815e-02, -1.318e-01, 1.775e-02, 6.703e-02, 1.819e-01, -7.790e-02, 1.028e-02, -1.742e-01));
	r += V4(-2.496e-02, -4.112e-02, -1.869e-02, 2.740e-02);
	return r;
}
void Pass5(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 6
//!DESC CuNNy-8x4C-BILINEAR-CHROMA-NVL-DN-conv5
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(1.218e-02, 1.463e-01, -1.043e-01, 4.893e-02, -1.348e-02, -1.017e-02, 2.241e-01, 4.943e-02, -1.598e-02, 7.742e-02, -3.489e-02, -3.150e-02, -8.054e-02, -2.178e-02, 4.742e-02, 4.792e-02));
	r += mul(s0_1, M4(-4.858e-02, 1.385e-01, -6.949e-02, -6.984e-03, 5.945e-02, 7.345e-02, 1.552e-01, -9.879e-02, 3.265e-01, 1.028e-01, -2.108e-01, -1.704e-01, -3.754e-01, -1.209e-01, 5.570e-02, 6.288e-02));
	r += mul(s0_2, M4(-3.127e-03, -5.988e-02, 4.823e-02, 2.735e-02, 2.337e-02, 1.348e-02, 1.272e-02, -5.907e-02, 4.362e-02, 4.537e-02, 1.262e-01, 6.748e-02, -2.144e-01, 3.548e-01, -7.665e-02, -2.301e-02));
	r += mul(s0_3, M4(5.662e-02, -1.370e-01, -2.146e-01, 1.999e-01, 8.015e-02, -3.213e-02, -1.923e-01, -1.083e-01, 1.960e-03, 1.545e-01, 3.869e-02, -3.149e-02, -1.620e-01, 8.141e-02, 1.244e-01, 2.120e-03));
	r += mul(s0_4, M4(5.754e-02, 3.371e-01, -8.154e-01, -6.946e-01, -3.911e-01, 5.227e-01, 2.361e-01, 2.739e-01, 3.689e-01, 7.012e-01, -3.817e-01, -8.765e-02, -8.497e-01, -4.246e-02, 4.658e-01, 1.756e-01));
	r += mul(s0_5, M4(1.729e-02, 5.023e-02, -5.138e-02, 4.993e-02, -6.955e-03, -3.405e-02, 2.942e-01, 2.546e-02, 1.232e-02, 6.240e-02, 4.794e-03, -3.446e-01, -4.718e-01, -6.370e-02, 4.598e-01, 1.900e-02));
	r += mul(s0_6, M4(-2.524e-02, -1.716e-03, 1.264e-01, 1.072e-01, -5.142e-02, 2.744e-02, 1.269e-01, -5.472e-02, -3.085e-03, 6.448e-02, 3.355e-02, -3.280e-02, -4.058e-02, 1.585e-01, -8.348e-02, -1.051e-02));
	r += mul(s0_7, M4(2.745e-02, 7.510e-03, 1.896e-02, -9.363e-03, 1.240e-01, -3.796e-02, 1.265e-01, -9.424e-02, -6.607e-02, 7.467e-02, 2.449e-01, -1.734e-01, -1.373e-01, 2.606e-01, -4.813e-02, 5.684e-01));
	r += mul(s0_8, M4(-1.436e-02, 9.871e-03, 1.448e-03, 8.766e-03, 5.114e-02, -1.528e-01, 1.703e-01, 1.808e-02, -3.069e-02, -3.519e-02, 1.298e-01, 4.889e-02, -3.386e-02, -1.278e-01, 2.255e-01, -3.458e-02));
	r += mul(s1_0, M4(-9.167e-02, 1.291e-01, -5.284e-02, 2.825e-02, 3.420e-02, 2.920e-01, 2.115e-01, 7.175e-02, 1.406e-02, -9.580e-02, -1.295e-01, -2.584e-03, -3.318e-02, 1.151e-01, 4.105e-02, -1.541e-02));
	r += mul(s1_1, M4(-2.376e-01, 2.512e-01, 3.960e-02, 2.408e-02, 1.057e-01, 1.580e-01, -1.816e-02, -9.471e-02, 4.641e-02, -3.151e-01, -2.744e-01, -4.805e-02, 4.986e-02, 4.241e-02, -1.014e-01, -6.852e-02));
	r += mul(s1_2, M4(-9.012e-02, -9.460e-02, 2.398e-01, 1.383e-01, 9.469e-02, -4.779e-02, -2.911e-02, -5.786e-02, -5.586e-02, -4.586e-02, 1.107e-01, 1.318e-01, 2.668e-02, 8.176e-02, -9.531e-02, -4.086e-02));
	r += mul(s1_3, M4(2.396e-02, -2.382e-03, -1.728e-01, 1.135e-01, -4.212e-02, 6.814e-02, -2.476e-01, -1.243e-02, -5.526e-02, -2.296e-02, 1.246e-01, 1.023e-01, -6.860e-02, 1.003e-01, 1.377e-01, -9.033e-02));
	r += mul(s1_4, M4(1.439e-02, 4.994e-01, -5.684e-01, -4.404e-01, -3.878e-01, -1.400e-02, 4.594e-01, 3.142e-02, 2.056e-01, -1.583e-01, -2.781e-01, 3.207e-01, -5.434e-01, 4.650e-01, 1.202e-01, -1.135e-01));
	r += mul(s1_5, M4(-6.723e-02, -7.192e-02, 1.763e-01, 1.545e-01, 3.127e-02, 4.242e-02, 1.076e-01, 2.170e-02, 6.564e-02, 6.043e-02, -2.725e-01, 5.720e-02, -2.714e-02, -5.246e-02, 1.913e-01, 3.202e-02));
	r += mul(s1_6, M4(-4.131e-02, 1.301e-01, 1.240e-01, -4.601e-02, 5.138e-02, 6.367e-02, 1.343e-01, 3.942e-02, -1.563e-02, -5.210e-02, -4.583e-02, 8.951e-02, -8.957e-02, 3.150e-02, 7.898e-02, -9.293e-02));
	r += mul(s1_7, M4(2.565e-02, 7.449e-02, -1.733e-02, -3.176e-01, 9.943e-02, -1.105e-01, 7.797e-02, -1.381e-01, -7.106e-02, 4.887e-02, -9.457e-02, 1.167e-01, 2.606e-02, 1.749e-02, 1.614e-01, 2.753e-01));
	r += mul(s1_8, M4(-2.225e-02, -4.874e-02, 4.521e-02, 4.947e-02, 3.859e-03, 1.157e-02, -3.283e-03, -7.278e-03, -5.211e-02, 7.367e-02, -6.768e-02, -9.068e-02, 5.166e-02, -4.871e-02, 7.374e-02, -9.156e-02));
	r += V4(1.263e-03, -1.830e-03, 1.123e-02, 9.177e-03);
	return r;
}
void Pass6(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 7
//!DESC CuNNy-8x4C-BILINEAR-CHROMA-NVL-DN-conv6
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-2.764e-02, 2.788e-02, 1.831e-02, 1.827e-03, -3.940e-04, 1.336e-02, -5.101e-03, 1.145e-01, 4.825e-02, 6.114e-02, 1.207e-02, 1.093e-02, -9.361e-02, -8.114e-02, -4.440e-01, 2.834e-01));
	r += mul(s0_1, M4(9.419e-03, 6.405e-02, -9.182e-03, 6.194e-02, 5.466e-03, -1.873e-02, 1.006e-01, 1.498e-01, 9.308e-02, -1.086e-02, -3.207e-02, -2.977e-02, -1.679e-01, -1.420e-01, 2.299e-01, 5.690e-01));
	r += mul(s0_2, M4(9.169e-02, 8.293e-02, -4.248e-02, 1.804e-02, 4.287e-02, 3.547e-02, -4.714e-02, -1.489e-02, -7.822e-02, -2.156e-01, 8.663e-02, 6.687e-02, -3.210e-02, -3.984e-02, 1.191e-01, 1.949e-01));
	r += mul(s0_3, M4(1.408e-01, -4.879e-02, -7.843e-03, 1.822e-01, -1.656e-01, -2.838e-02, 1.709e-02, -2.902e-01, -6.715e-02, -4.352e-02, -2.192e-01, 1.219e-01, -8.748e-02, -1.284e-01, 3.492e-01, -3.896e-01));
	r += mul(s0_4, M4(3.038e-01, -7.446e-01, 5.496e-01, 1.421e-01, -6.612e-01, 6.797e-02, -2.822e-01, -7.645e-02, -1.890e-01, -5.247e-01, 3.382e-01, 1.744e-01, -1.920e-01, -9.334e-02, 8.567e-02, -5.524e-01));
	r += mul(s0_5, M4(-3.779e-02, 2.660e-01, -1.774e-01, -1.736e-01, 1.126e-01, 5.308e-01, -4.052e-01, -9.102e-02, -1.480e-03, 1.938e-01, -3.988e-02, 1.602e-01, -2.370e-01, -2.070e-02, 7.348e-02, -1.320e-01));
	r += mul(s0_6, M4(-1.072e-01, -2.001e-02, 2.812e-02, -1.336e-01, 9.819e-02, 7.565e-02, 1.626e-01, 9.937e-02, -3.902e-02, 2.300e-02, -8.940e-02, 3.666e-03, 5.187e-02, -5.836e-02, 7.566e-02, -2.589e-02));
	r += mul(s0_7, M4(-3.444e-01, -1.442e-01, -2.527e-01, -2.088e-01, 2.274e-01, 1.606e-01, 1.309e-01, 3.762e-01, -4.128e-02, -9.814e-02, 1.577e-01, 2.293e-01, 5.529e-02, 6.347e-03, -2.027e-02, -1.372e-01));
	r += mul(s0_8, M4(8.603e-02, 1.425e-03, -1.470e-01, -1.594e-01, -1.157e-02, 1.918e-01, -2.267e-01, -2.193e-01, -1.272e-02, 1.479e-03, -1.116e-01, -1.401e-01, 1.190e-01, -1.075e-02, 2.571e-03, 7.504e-02));
	r += mul(s1_0, M4(-7.164e-02, -1.123e-02, -1.034e-01, 1.241e-01, -1.936e-02, -8.245e-02, 4.013e-02, 4.960e-02, 1.992e-02, 6.961e-02, -1.968e-01, 4.747e-02, 6.651e-02, 3.153e-02, -3.225e-01, 2.199e-01));
	r += mul(s1_1, M4(-1.190e-02, -2.394e-02, -1.538e-01, 1.453e-01, 3.702e-02, 1.160e-01, 5.623e-03, -4.806e-02, 6.842e-02, -3.662e-01, -4.094e-02, 1.058e-01, 4.189e-03, -2.401e-01, -2.954e-01, 3.584e-01));
	r += mul(s1_2, M4(2.037e-02, 2.224e-02, -9.764e-02, 7.931e-03, -2.155e-02, 3.996e-04, 1.052e-01, 1.050e-02, 8.420e-02, 7.834e-02, -6.812e-02, -1.616e-01, 1.667e-01, 4.258e-01, -7.308e-02, -1.713e-01));
	r += mul(s1_3, M4(3.298e-01, 3.445e-02, 2.363e-01, 4.895e-02, -7.336e-02, 1.810e-02, -7.267e-02, -6.103e-02, 2.245e-02, -1.911e-02, -3.275e-01, 2.959e-01, -1.448e-01, 1.129e-02, 1.298e-01, -2.627e-01));
	r += mul(s1_4, M4(4.730e-01, -1.581e-01, 8.924e-01, 2.510e-01, -1.070e-01, -1.350e-01, 1.354e-01, 9.647e-02, -4.213e-02, -3.347e-01, 7.105e-01, -2.444e-02, 6.820e-02, 2.856e-01, -1.763e-01, 8.313e-02));
	r += mul(s1_5, M4(-2.371e-02, 1.491e-01, -2.124e-01, 4.659e-02, -1.623e-02, 4.323e-01, -1.127e-01, -1.176e-01, -7.375e-02, -1.470e-02, 9.200e-03, 2.605e-01, 7.298e-02, 2.237e-01, -2.673e-01, -3.174e-01));
	r += mul(s1_6, M4(7.355e-03, 7.101e-02, 6.182e-02, -4.815e-01, 8.166e-02, 6.132e-02, 1.431e-01, 3.953e-02, -4.088e-02, -6.387e-03, -1.795e-02, -1.118e-01, 1.076e-01, 2.448e-02, 1.130e-01, 4.623e-02));
	r += mul(s1_7, M4(-6.613e-01, -3.530e-01, -2.401e-01, -1.014e+00, -7.235e-02, -9.104e-03, 1.626e-02, -2.215e-01, 1.294e-01, 8.456e-03, -3.370e-02, 2.969e-01, 8.281e-02, 5.204e-02, 5.021e-02, -7.744e-02));
	r += mul(s1_8, M4(-4.932e-02, -1.095e-01, 4.801e-02, 3.204e-02, 2.420e-02, 8.294e-02, -1.979e-01, -3.212e-01, 1.076e-01, 1.004e-01, -9.986e-02, 3.320e-03, 2.034e-02, 5.382e-02, 2.515e-02, -2.560e-03));
	r += V4(-7.099e-03, -2.105e-03, 9.336e-03, 2.489e-03);
	return r;
}
void Pass7(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 8
//!DESC CuNNy-8x4C-BILINEAR-CHROMA-NVL-DN-conv7
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-3.853e-02, -5.327e-02, -8.507e-02, 2.172e-03, -6.120e-02, 3.992e-04, -3.205e-02, -1.165e-01, 2.677e-02, 2.730e-02, 4.215e-02, -1.705e-02, -6.588e-03, 6.091e-02, -8.280e-03, 3.217e-03));
	r += mul(s0_1, M4(-1.275e-01, -1.603e-01, 3.711e-01, 1.458e-01, -1.372e-01, -9.214e-02, 1.431e-01, -2.994e-02, -1.101e-02, 8.034e-02, -5.069e-03, 3.998e-02, -9.923e-02, -1.493e-01, 2.106e-01, -9.743e-02));
	r += mul(s0_2, M4(-8.843e-02, -8.374e-02, -5.235e-02, 1.050e-01, -4.298e-02, -1.078e-02, -5.580e-02, 5.418e-02, -2.615e-02, 3.957e-02, -1.603e-02, -2.043e-02, 1.988e-03, -9.163e-03, -9.163e-02, 9.799e-02));
	r += mul(s0_3, M4(-6.365e-02, 9.207e-02, 2.805e-01, -4.816e-02, 1.532e-02, -1.210e-01, -1.525e-01, -1.091e-01, -2.394e-02, -1.678e-03, 2.588e-01, -9.498e-02, -2.777e-02, -2.263e-03, -4.816e-02, -1.013e-01));
	r += mul(s0_4, M4(-1.384e-02, -4.578e-01, -3.822e-01, -8.565e-01, 7.204e-02, -1.802e-01, 9.920e-01, 4.445e-01, -3.598e-03, -1.255e-01, -3.235e-01, 3.576e-01, 7.693e-02, -5.142e-01, 1.214e-01, 2.640e-01));
	r += mul(s0_5, M4(2.363e-01, -6.777e-02, 2.183e-01, -9.442e-02, 3.009e-01, 1.709e-01, -1.141e-01, -1.802e-01, 1.275e-01, -9.230e-02, 6.165e-02, -1.238e-01, 4.069e-01, 1.900e-01, -6.606e-02, -6.781e-02));
	r += mul(s0_6, M4(-2.608e-02, 1.883e-01, 1.077e-01, -4.678e-02, -3.684e-02, 8.373e-02, 4.070e-02, 3.523e-02, -5.280e-02, -2.830e-02, -2.198e-02, 5.261e-02, -1.070e-01, 2.789e-02, -5.089e-02, 2.993e-02));
	r += mul(s0_7, M4(-2.744e-01, 1.638e-01, -9.453e-02, 2.505e-01, -5.684e-01, -8.858e-02, 6.310e-02, -3.449e-02, 1.462e-02, 5.705e-02, 1.146e-02, 8.206e-02, 9.848e-02, -3.934e-01, 9.980e-02, -7.890e-02));
	r += mul(s0_8, M4(-1.655e-01, -1.016e-01, 4.706e-02, 1.656e-01, 5.768e-01, 7.788e-02, 2.745e-02, -2.193e-01, 4.940e-01, 1.819e-01, -6.282e-02, -1.993e-01, -7.367e-02, -9.159e-02, 2.967e-03, 3.399e-02));
	r += mul(s1_0, M4(-2.501e-02, -1.972e-02, 1.530e-01, -4.691e-02, -3.133e-02, -4.023e-03, 7.513e-02, -6.006e-02, 4.309e-02, 5.550e-02, 1.250e-01, -5.197e-02, -1.170e-02, 4.066e-02, -1.685e-01, 4.289e-02));
	r += mul(s1_1, M4(-4.615e-02, -3.479e-02, -4.209e-01, 2.062e-02, -1.126e-01, -9.299e-02, 1.097e-01, -7.364e-02, 5.600e-02, 1.781e-01, -4.474e-01, 1.667e-01, -4.479e-02, -2.233e-01, 4.024e-01, -1.341e-01));
	r += mul(s1_2, M4(7.549e-02, -8.047e-03, 1.504e-01, -2.308e-02, -5.926e-02, -4.078e-02, -6.112e-02, 7.690e-02, -1.281e-02, 7.006e-02, 2.280e-02, -9.352e-02, -1.083e-02, -6.211e-02, -1.110e-01, 4.632e-02));
	r += mul(s1_3, M4(4.854e-03, 2.085e-01, 1.233e-01, 6.955e-02, 4.822e-02, -1.092e-01, -1.780e-01, 1.965e-03, -4.591e-03, -5.022e-02, 1.534e-02, 1.163e-02, -8.367e-02, -2.519e-02, -1.610e-02, -1.714e-01));
	r += mul(s1_4, M4(-2.904e-01, -1.509e-01, -1.256e-01, -4.170e-01, 3.190e-01, -1.163e-01, 2.675e-01, 5.215e-01, 1.059e-01, -1.101e-01, -2.280e-01, -1.137e-01, 1.096e-01, -6.360e-01, -1.213e-01, -2.163e-01));
	r += mul(s1_5, M4(-3.181e-01, -2.252e-01, 4.098e-02, 2.959e-01, 3.769e-01, 1.345e-01, -9.546e-02, -2.530e-01, -1.130e-01, -1.254e-01, 1.196e-01, -1.880e-01, 7.441e-01, 4.485e-01, 3.426e-03, -2.485e-01));
	r += mul(s1_6, M4(9.954e-02, 4.784e-02, 7.317e-02, 2.566e-04, -1.651e-02, 1.332e-02, 4.367e-03, 8.993e-02, -9.516e-02, 4.192e-02, 1.463e-02, -1.135e-01, -9.988e-02, 1.917e-02, -2.807e-02, -5.157e-02));
	r += mul(s1_7, M4(-2.151e-01, -1.088e-01, -1.323e-01, 9.242e-02, -4.502e-01, 7.085e-02, 6.255e-02, -9.647e-02, 1.524e-01, 4.951e-01, 8.243e-02, -2.270e-01, 2.647e-01, -8.982e-02, 2.687e-02, 3.023e-02));
	r += mul(s1_8, M4(-9.134e-02, -1.504e-01, 4.971e-02, 1.411e-01, 1.453e-01, 1.349e-01, -1.821e-02, -1.919e-01, 2.076e-01, 3.309e-01, -4.633e-02, -1.782e-01, -9.840e-02, -1.313e-01, -3.088e-02, -2.054e-02));
	r += V4(-7.507e-03, 3.115e-04, 6.223e-03, 1.094e-02);
	return r;
}
void Pass8(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 9
//!DESC CuNNy-8x4C-BILINEAR-CHROMA-NVL-DN-conv8
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(3.271e-02, 1.189e-01, 3.739e-02, 9.629e-02, -2.046e-01, 7.391e-02, 1.157e-02, 2.669e-02, 2.949e-03, 1.126e-02, -1.068e-02, 1.265e-02, 4.628e-02, -3.432e-02, -5.166e-02, -1.535e-02));
	r += mul(s0_1, M4(-8.081e-02, -1.091e-01, -4.505e-02, -4.740e-01, 1.616e-01, 2.339e-01, -3.604e-01, -3.310e-01, -2.894e-03, 1.551e-03, -2.881e-03, 5.256e-03, -3.575e-02, -1.839e-02, 1.155e-01, -3.320e-02));
	r += mul(s0_2, M4(2.283e-02, 3.870e-02, 5.193e-02, 1.620e-01, -1.299e-02, -5.107e-02, -5.016e-02, 1.864e-01, 1.115e-02, -6.021e-03, 1.187e-02, -4.586e-02, -2.260e-03, 3.919e-02, 7.620e-03, 1.413e-03));
	r += mul(s0_3, M4(-4.096e-03, -1.150e-01, 9.592e-02, 2.244e-01, -7.485e-03, -5.557e-02, 1.397e-02, -1.547e-01, 1.250e-01, -1.365e-02, 6.710e-02, 5.994e-02, 1.743e-01, -6.965e-03, -6.155e-02, -1.587e-01));
	r += mul(s0_4, M4(-1.015e-02, 3.164e-02, -8.640e-02, -1.052e-01, 1.354e-02, -3.153e-01, 4.220e-01, 6.660e-01, -8.207e-02, -8.463e-02, -1.600e-01, 1.566e-01, -1.403e-02, -2.291e-01, -3.720e-01, 1.415e-01));
	r += mul(s0_5, M4(-2.105e-03, -8.452e-03, -6.310e-03, 1.408e-02, -1.987e-02, -1.204e-02, 4.333e-02, -2.900e-01, 4.218e-02, 3.026e-02, -1.780e-02, 3.079e-01, -1.341e-02, -7.205e-02, -3.710e-02, 6.315e-02));
	r += mul(s0_6, M4(-7.130e-03, 4.639e-02, -4.564e-03, 2.144e-02, -7.991e-03, 3.856e-02, 1.907e-02, -6.137e-03, 4.254e-03, 1.391e-02, 3.259e-02, 7.589e-03, 2.005e-02, -3.734e-02, 1.629e-02, -9.522e-02));
	r += mul(s0_7, M4(-1.154e-03, 2.797e-02, 1.899e-02, -8.545e-03, 1.359e-02, 6.574e-02, -6.445e-02, 5.923e-02, -2.366e-02, 1.535e-01, 1.538e-01, 2.537e-01, 8.417e-03, 6.679e-02, 5.796e-02, 1.808e-01));
	r += mul(s0_8, M4(8.250e-04, -5.954e-03, -1.186e-02, -4.311e-02, -1.801e-02, 4.599e-02, -2.778e-02, -1.061e-01, 1.055e-03, 4.993e-02, 6.421e-02, -4.394e-02, -4.725e-03, -2.437e-02, -2.203e-02, -5.257e-02));
	r += mul(s1_0, M4(-1.891e+00, 1.470e-01, -1.293e-01, 6.248e-01, -4.944e-02, 2.497e-02, 1.519e-01, 8.990e-03, 2.475e-03, 2.948e-03, -2.800e-02, 5.478e-02, 1.606e-01, -7.706e-02, -1.734e-01, 4.676e-02));
	r += mul(s1_1, M4(-1.010e-01, -9.781e-02, -1.821e-01, -1.180e+00, 3.134e-02, -9.527e-04, -2.764e-01, 1.679e-01, 7.299e-02, -1.273e-02, -1.082e-01, 1.699e-02, -6.812e-02, -1.097e-01, 4.689e-02, 7.931e-02));
	r += mul(s1_2, M4(9.437e-03, 1.340e-02, -1.009e-02, 1.734e-01, -2.469e-02, -3.356e-02, -6.369e-02, -6.716e-03, -5.826e-03, -3.499e-03, -8.017e-03, 7.382e-02, 2.728e-02, 1.765e-02, -3.241e-03, 1.082e-01));
	r += mul(s1_3, M4(-1.635e-02, -7.566e-02, 1.141e-01, 1.182e-01, 1.812e-02, -6.394e-02, -6.279e-02, -2.846e-02, 2.607e-01, -6.602e-02, -3.085e-02, -6.505e-02, 5.350e-02, 6.109e-02, -8.711e-02, -9.512e-04));
	r += mul(s1_4, M4(-4.393e-02, -5.411e-02, 2.262e-01, 1.217e-01, -1.177e-03, -1.008e-01, -2.587e-02, -1.414e-01, 3.336e-02, -1.036e-01, -1.438e+00, -2.368e-01, -3.260e-02, -1.916e+00, -3.045e-02, 5.332e-01));
	r += mul(s1_5, M4(-2.215e-03, -4.350e-03, 8.144e-02, -9.971e-02, -3.150e-03, -1.015e-02, 2.088e-02, 9.740e-02, 1.351e-03, -1.602e-02, -6.627e-02, 1.082e+00, -4.580e-03, 1.227e-02, 2.095e-01, -3.915e-01));
	r += mul(s1_6, M4(7.235e-03, -4.059e-02, -2.983e-02, 2.508e-02, 5.229e-03, -5.745e-03, -8.949e-03, -3.943e-02, 1.714e-02, 1.208e-02, 3.013e-03, 2.444e-02, 3.296e-02, 5.691e-02, 1.060e-01, -1.724e-01));
	r += mul(s1_7, M4(8.513e-03, 3.361e-02, -3.372e-02, -7.238e-03, -1.082e-03, 4.856e-02, 4.291e-02, 7.710e-02, -2.768e-02, -2.843e-02, 7.989e-02, 1.101e-01, 1.004e-02, 1.207e-01, 3.569e-02, 2.613e-01));
	r += mul(s1_8, M4(1.997e-03, -5.694e-03, -3.050e-02, -8.908e-02, 1.627e-03, 1.517e-03, -7.188e-03, -2.410e-02, -5.584e-02, -2.107e-02, 2.761e-02, 2.818e-01, 1.460e-02, -1.067e-02, -9.597e-02, -1.499e-01));
	r += V4(1.492e-03, 4.810e-03, 7.645e-03, 1.151e-02);
	return r;
}
void Pass9(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 10
//!DESC CuNNy-8x4C-BILINEAR-CHROMA-NVL-DN-out
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(4.017e-02, -5.078e-03, -1.468e-02, 1.165e-02, 1.274e-01, 1.283e-02, 3.751e-03, 1.997e-02, -1.423e-02, 6.839e-03, 1.905e-02, -9.250e-03, 8.718e-02, 7.856e-03, 3.209e-02, -2.371e-03));
	r += mul(s0_1, M4(5.999e-02, 1.379e-01, -6.682e-02, -5.869e-02, 4.238e-02, 2.091e-01, 1.908e-02, -5.160e-02, 6.846e-02, -5.196e-02, 5.237e-02, 7.300e-02, 7.798e-02, 1.140e-01, -1.018e-02, 3.959e-02));
	r += mul(s0_2, M4(-6.861e-02, -5.584e-02, -8.062e-03, -4.138e-02, 3.163e-02, -5.295e-02, 4.488e-02, 7.983e-02, 6.136e-02, 1.134e-01, 8.244e-04, 3.637e-03, -7.222e-03, -7.263e-03, 3.151e-03, -3.763e-03));
	r += mul(s0_3, M4(-3.046e-02, 1.974e-02, -8.027e-03, 1.705e-02, 1.911e-02, -1.056e-02, 2.007e-01, 4.284e-02, -1.434e-01, 1.549e-02, -7.945e-02, 5.415e-02, 1.135e-01, 1.886e-02, 1.194e-01, 2.683e-02));
	r += mul(s0_4, M4(-3.946e-02, -1.078e-01, 3.097e-01, 1.792e-01, -2.027e-01, -1.325e-01, -1.685e-01, 1.111e-01, -2.900e-01, -3.311e-01, -2.217e-01, -3.447e-01, 1.939e-01, 2.349e-01, 2.278e-01, 3.156e-01));
	r += mul(s0_5, M4(-5.849e-02, -7.998e-04, -1.008e-01, 2.899e-02, -3.045e-02, -1.066e-01, -3.233e-02, -1.910e-01, 2.473e-01, 2.497e-01, 2.502e-01, 2.783e-01, 2.023e-02, 2.411e-02, 1.296e-02, 3.372e-02));
	r += mul(s0_6, M4(-1.499e-02, 4.716e-03, -3.176e-03, -3.756e-03, 7.046e-03, 1.295e-03, -1.314e-02, -4.313e-02, 9.188e-03, -1.408e-03, -6.141e-02, -2.396e-02, -3.030e-02, -5.637e-03, 6.739e-03, -6.228e-03));
	r += mul(s0_7, M4(6.151e-03, 6.422e-05, -1.753e-01, -6.860e-02, 2.664e-02, 1.886e-02, -5.234e-02, 3.401e-03, 2.717e-02, 1.195e-02, -4.258e-02, -1.108e-01, -3.145e-02, -3.649e-02, 4.716e-03, -2.834e-02));
	r += mul(s0_8, M4(-5.390e-02, -4.016e-02, -6.039e-02, -1.066e-01, 1.935e-02, 1.279e-02, 1.008e-02, -3.713e-02, 1.983e-02, 5.998e-02, 6.798e-02, 1.567e-01, -1.412e-02, -2.740e-02, -1.023e-02, -3.319e-02));
	r += mul(s1_0, M4(1.174e-01, 7.085e-02, 2.823e-02, 2.059e-02, 4.174e-01, 8.753e-02, 1.495e-02, -8.179e-02, 5.168e-01, 9.123e-03, -1.037e-01, 4.711e-03, 3.552e-02, -5.727e-02, 7.454e-02, 2.564e-02));
	r += mul(s1_1, M4(1.236e-01, 7.276e-02, 5.359e-02, -2.185e-02, -1.752e+00, -6.991e-01, 1.636e+00, 8.542e-01, 4.140e-01, 9.238e-01, -1.568e-01, -3.117e-01, -1.872e-01, 6.582e-01, -1.096e-01, -5.677e-02));
	r += mul(s1_2, M4(8.318e-02, -7.778e-02, -1.154e-01, 1.773e-02, 2.185e-01, -6.704e-01, -9.381e-02, 7.047e-01, 6.144e-02, 6.803e-02, 4.460e-02, 5.909e-02, 5.239e-02, -6.713e-02, 2.621e-02, 2.187e-02));
	r += mul(s1_3, M4(2.430e-02, -3.444e-02, 1.799e-01, 6.447e-02, 9.002e-02, -2.347e-02, 2.340e-01, 1.204e-01, -1.618e-01, 1.346e-02, -2.906e-01, 1.346e-01, 3.036e-02, 2.976e-02, -7.484e-02, -2.464e-02));
	r += mul(s1_4, M4(-9.610e-01, 2.842e-01, -3.721e-01, 5.068e-01, 3.037e-01, 2.881e-01, -5.415e-01, -6.678e-02, -2.212e-01, -3.679e-01, -4.209e-01, -9.434e-01, 2.457e-02, 1.870e-01, -4.257e-02, 1.043e+00));
	r += mul(s1_5, M4(1.723e+00, -2.055e+00, 1.388e+00, -1.651e+00, 2.216e-02, 6.075e-02, -1.039e-02, -4.368e-01, 1.724e-01, 1.806e-01, 1.862e-01, 3.369e-01, 6.862e-02, 2.290e-02, 8.472e-02, -3.795e-02));
	r += mul(s1_6, M4(1.160e-02, 7.261e-03, -4.774e-02, -2.733e-02, 2.036e-03, -3.932e-04, 5.117e-02, -2.785e-02, -3.397e-02, -4.339e-03, -4.324e-02, -5.374e-02, -2.241e-02, 1.549e-02, 4.100e-02, -7.080e-03));
	r += mul(s1_7, M4(6.751e-02, -4.789e-02, -4.327e-01, -1.588e-01, -2.960e-02, -1.410e-02, -6.212e-03, 1.109e-01, -3.673e-02, -2.839e-02, -6.054e-03, 4.821e-02, 1.250e-02, -6.044e-03, -1.622e-02, -1.577e-01));
	r += mul(s1_8, M4(-2.523e-01, 1.189e-01, 2.182e-01, -4.066e-01, -2.425e-02, -4.384e-02, -2.941e-02, -9.116e-02, 7.056e-02, 8.129e-02, 9.138e-02, 7.138e-02, -2.075e-02, -1.182e-02, -1.094e-02, -3.443e-02));
	r += V4(-5.274e-03, -5.081e-03, -4.807e-03, -5.295e-03);
	return tanh(r);
}
void Pass10(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 11
//!DESC CuNNy-8x4C-BILINEAR-CHROMA-NVL-DN-shuffle
//!STYLE PS
//!IN t1, INPUT
float4 Pass11(float2 pos) {
	float2 pt = float2(GetInputPt());
	static const float3x3 rgb2yuv = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081};
	static const float3x3 yuv2rgb = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float4 r = 0.0;
	float2 size = float2(GetInputSize());
	float2 f = frac(pos * size);
	float3 yuv = mul(rgb2yuv, INPUT.SampleLevel(SL, pos, 0).rgb);
	int2 i = int2(f * 2.0);
	r.r = t1.SampleLevel(SP, (float2(0.5, 0.5) - f) * pt + pos, 0)[2*i.y + i.x];
	r.r += yuv.r;
	r.a = 1.0;
	r.r = clamp(r, 0.0, 1.0);
	float3 px = mul(yuv2rgb, float3(r.r, yuv.yz));
	return float4(px, 1.0);
}
