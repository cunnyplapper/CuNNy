// CuNNy 2x4C BILINEAR CHROMA NVL DN
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

//!MAGPIE EFFECT
//!VERSION 3
//!OUTPUT_WIDTH INPUT_WIDTH * 2
//!OUTPUT_HEIGHT INPUT_HEIGHT * 2

//!TEXTURE
Texture2D INPUT;


//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t1;

//!PASS 1
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-NVL-DN-in
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) (dot(float3(2.359e-01, 4.439e-01, 1.176e-01), O(INPUT, float2(x, y)).rgb) + -7.580e-01)
float4 f0(float2 pt, float2 pos, min16float s0_0, min16float s0_1, min16float s0_2, min16float s0_3, min16float s0_4, min16float s0_5, min16float s0_6, min16float s0_7, min16float s0_8) {
	V4 r = 0.0;
	r += V4(-4.436e-02, 3.722e-02, -5.449e-01, 5.440e-01) * s0_0;
	r += V4(-2.021e-02, 7.090e-01, 7.454e-01, 4.478e-02) * s0_1;
	r += V4(-5.435e-02, 6.189e-02, -1.576e-03, -1.163e-01) * s0_2;
	r += V4(-3.380e-02, -1.367e-01, -4.756e-01, 2.456e-01) * s0_3;
	r += V4(1.211e+00, -7.318e-01, -7.328e-03, -8.465e-01) * s0_4;
	r += V4(-2.519e-02, 5.380e-02, 1.027e-01, -4.978e-03) * s0_5;
	r += V4(-3.227e-02, 7.499e-02, 1.706e-01, -1.244e-01) * s0_6;
	r += V4(-4.667e-02, -3.992e-02, 4.775e-02, 1.143e-01) * s0_7;
	r += V4(-4.047e-02, -3.058e-02, -1.205e-02, 1.431e-01) * s0_8;
	r += V4(-2.673e-02, 1.071e-02, -7.966e-03, 1.389e-02);
	return r;
}
void Pass1(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float s0_0 = l0(-1.0, -1.0);
	min16float s0_1 = l0(0.0, -1.0);
	min16float s0_2 = l0(1.0, -1.0);
	min16float s0_3 = l0(-1.0, 0.0);
	min16float s0_4 = l0(0.0, 0.0);
	min16float s0_5 = l0(1.0, 0.0);
	min16float s0_6 = l0(-1.0, 1.0);
	min16float s0_7 = l0(0.0, 1.0);
	min16float s0_8 = l0(1.0, 1.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8);
}
//!PASS 2
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-NVL-DN-conv1
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(1.437e-02, 1.922e-01, 8.862e-01, -2.685e-01, -4.451e-02, 3.218e-01, -8.944e-02, -1.130e-02, 2.310e-01, 2.998e-01, 3.275e-01, 6.934e-01, 3.182e-01, 2.920e-01, 3.268e-01, 5.684e-01));
	r += mul(s0_1, M4(-7.490e-01, -2.710e-01, -1.294e+00, 5.910e-01, -1.062e+00, -7.509e-01, 1.275e-01, -2.358e-01, 9.949e-01, 6.309e-01, -1.053e-01, 4.340e-01, 7.793e-01, -2.280e-01, -4.966e-01, -4.461e-01));
	r += mul(s0_2, M4(-2.933e-01, 8.771e-02, -1.772e-01, -1.889e-01, 2.032e-02, 6.761e-02, 2.166e-02, -3.649e-02, 1.851e-01, -3.839e-02, -7.418e-02, -7.015e-03, 1.144e-01, 1.485e-01, 4.329e-02, -7.626e-02));
	r += mul(s0_3, M4(1.072e-01, 1.332e-01, -6.179e-02, 1.400e+01, 5.996e-01, 5.825e-01, 2.046e-01, 2.417e-01, -3.779e-01, -1.111e-01, -1.111e-01, -1.382e-01, -3.033e-01, 5.524e-02, -1.194e-01, -2.657e-01));
	r += mul(s0_4, M4(9.048e-01, 2.803e+00, 1.012e+00, 2.084e-01, 2.154e-01, -4.470e-01, -2.301e-01, -1.971e-01, -6.619e-01, -8.380e-01, -2.867e-01, -2.820e-01, -5.149e-01, -2.349e-01, -1.542e-01, 2.371e-01));
	r += mul(s0_5, M4(-1.914e-01, -3.402e-01, 2.656e-01, -5.165e-02, -2.363e-02, 2.803e-01, -4.297e-03, 2.017e-01, -4.920e-02, -3.114e-01, 4.541e-01, -5.071e-02, 9.506e-02, 4.966e-02, 1.726e-01, -1.971e-01));
	r += mul(s0_6, M4(1.063e-01, 2.844e-01, 7.524e-02, -2.857e-01, 2.377e-02, 9.902e-03, -4.064e-02, -2.058e-01, 6.120e-02, 3.776e-02, 3.333e-02, 2.802e-01, 1.122e-01, 1.223e-01, 1.072e-01, -1.248e-02));
	r += mul(s0_7, M4(7.393e-03, 5.701e-03, -2.594e-01, -8.676e-03, -2.270e-01, -4.444e-01, 9.394e-02, 3.737e-01, 5.290e-02, 2.998e-01, -7.671e-02, -1.076e-01, 1.102e-01, 2.062e-01, -1.597e-01, 1.479e-02));
	r += mul(s0_8, M4(-6.640e-02, 1.024e-01, -1.046e-01, 1.233e-01, 2.875e-02, 5.488e-01, -1.995e-01, 1.117e-01, -1.101e-01, -5.020e-01, 1.664e-01, 1.032e-01, 2.272e-03, 1.674e-01, -1.453e-01, 6.303e-02));
	r += mul(s1_0, M4(1.641e-01, 9.011e-02, -1.202e-02, -3.748e-02, -6.305e-03, 3.271e-01, -3.857e-01, -2.426e-01, 2.881e-01, 3.131e-01, 3.086e-01, 5.556e-01, 2.448e-01, 3.096e-01, 3.887e-01, 7.391e-01));
	r += mul(s1_1, M4(-2.724e-01, -2.625e-01, -5.240e-02, 6.372e-02, -9.815e-01, -7.262e-01, 2.497e-02, -2.880e-01, 1.059e+00, 5.840e-01, -2.386e-01, 2.705e-01, 7.289e-01, -2.012e-01, -3.186e-02, -2.412e-01));
	r += mul(s1_2, M4(-7.076e-02, 7.389e-02, 1.458e-01, -1.591e-02, -8.909e-03, 1.301e-01, 5.773e-02, -7.393e-03, 1.665e-01, -8.853e-02, 1.950e-02, -6.533e-02, 4.881e-02, 7.095e-02, 8.590e-02, 1.445e-01));
	r += mul(s1_3, M4(2.679e-02, -1.608e-02, -1.165e-01, -1.587e-01, 6.804e-01, 7.472e-01, 3.232e-01, 2.280e-01, -3.330e-01, -7.651e-02, -1.323e-01, -4.209e-01, -3.647e-01, 5.671e-02, -9.936e-02, -1.344e-02));
	r += mul(s1_4, M4(-1.284e-01, -1.362e-01, -5.016e-02, -3.042e-02, 7.012e-01, -3.486e-01, -9.815e-01, -1.629e-01, -4.640e-01, -6.062e-01, -2.946e-01, -4.812e-01, -7.012e-01, -4.022e-01, 7.747e-02, 6.949e-01));
	r += mul(s1_5, M4(-2.913e-02, -2.162e-02, 7.056e-02, 3.097e-02, 1.095e-01, 3.315e-01, -6.095e-01, 1.343e-01, -1.023e-01, -3.565e-01, -2.093e-01, -1.295e-01, 7.644e-02, 1.672e-01, -2.615e-01, -6.411e-02));
	r += mul(s1_6, M4(9.208e-02, 1.864e-01, 1.995e-01, -1.887e-02, 1.239e-02, 3.452e-02, 1.353e-01, -2.842e-01, 8.326e-02, 8.049e-02, 8.617e-02, 1.264e-01, 6.372e-02, 8.551e-02, 8.910e-02, 2.300e-01));
	r += mul(s1_7, M4(9.778e-02, 8.470e-03, -3.360e-02, 1.154e-01, 9.496e-02, -2.901e-01, 1.636e-01, 7.845e-02, 6.538e-02, 1.874e-01, 3.567e-02, -1.734e-01, 1.353e-02, 2.585e-01, -4.823e-03, 6.961e-02));
	r += mul(s1_8, M4(1.109e-01, 8.763e-02, -1.595e-01, 5.696e-02, 1.743e-01, 9.309e-02, -5.630e-02, 6.245e-03, -8.599e-02, -3.658e-01, 9.689e-02, -5.534e-02, -7.818e-02, 4.605e-02, 4.458e-02, 8.266e-03));
	r += V4(1.060e-02, -2.128e-02, -9.496e-03, 5.775e-03);
	return r;
}
void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 3
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-NVL-DN-conv2
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(6.666e-02, 1.919e-01, 9.640e-02, 1.069e-02, -5.488e-01, 2.019e-01, 4.909e-01, 1.495e-01, -3.447e-02, 2.496e-02, -1.876e-02, 2.165e-02, 1.744e-02, -8.001e-03, -1.058e-02, -7.545e-03));
	r += mul(s0_1, M4(3.467e-01, -4.391e-01, -1.449e-01, -1.511e-01, -1.766e-01, -4.531e-02, -2.627e-01, 2.939e-01, 1.388e-02, -3.701e-02, -2.151e-02, -1.325e-02, 8.064e-02, -6.470e-02, -9.496e-02, -3.413e-02));
	r += mul(s0_2, M4(1.034e-01, 1.130e-01, 1.032e-01, -1.572e-01, -2.945e-02, -1.111e-01, -5.196e-02, 5.015e-02, 2.511e-03, 5.660e-04, 1.956e-02, -8.625e-03, -2.438e-02, 4.974e-02, 1.028e-02, -4.570e-02));
	r += mul(s0_3, M4(-2.942e-01, -3.125e-01, 7.579e-02, -7.123e-02, -6.162e-01, 6.007e-01, -3.311e-01, 8.145e-01, -2.750e-01, 8.968e-02, 2.979e-01, -2.893e-02, -3.279e-02, -7.353e-03, 6.961e-03, -7.968e-03));
	r += mul(s0_4, M4(1.513e-01, 2.603e-01, 1.342e-02, 3.565e-01, -4.721e-02, -7.498e-01, 3.505e-01, -5.250e-01, 3.253e-01, -3.183e-01, 1.886e-01, -1.351e-02, 1.327e-02, -8.880e-02, 9.448e-02, -1.189e-01));
	r += mul(s0_5, M4(-1.003e-01, 2.213e-02, 3.397e-04, -1.048e-01, -2.291e-02, 5.379e-02, 5.309e-03, 2.609e-03, -7.294e-03, 1.121e-01, 4.477e-02, -7.363e-02, 9.084e-03, 6.317e-02, 3.674e-02, -8.979e-02));
	r += mul(s0_6, M4(-2.952e-01, 1.025e-01, -6.925e-02, 1.397e-01, 5.227e-02, 1.723e-01, -9.419e-02, 7.793e-02, 2.705e-01, 5.066e-02, -8.157e-02, -8.218e-03, 2.601e-03, -1.820e-03, 7.792e-03, -1.139e-02));
	r += mul(s0_7, M4(-1.237e-01, -2.641e-01, 9.570e-02, -1.168e-01, -1.599e-01, -2.012e-01, -1.646e-01, 2.113e-01, -2.413e-01, -1.323e-01, -4.561e-01, 3.584e-01, -1.587e-02, -1.083e-02, 1.249e-02, 3.311e-03));
	r += mul(s0_8, M4(-1.771e-01, 8.972e-02, -1.846e-01, 2.181e-01, 1.072e-02, -1.149e-02, 2.636e-02, -1.752e-02, -1.322e-02, 1.150e-01, 2.027e-02, -9.840e-02, -2.948e-03, -3.854e-02, 7.086e-02, -7.969e-02));
	r += mul(s1_0, M4(1.865e-01, 1.275e-01, 4.880e-02, -7.332e-03, -2.251e-01, -1.343e-01, 1.714e-01, 2.837e-02, 7.652e-02, -9.866e-03, -1.446e-02, 1.241e-02, -5.072e-02, 2.429e-02, 3.697e-02, 2.116e-02));
	r += mul(s1_1, M4(-2.311e-01, -2.992e-02, -7.602e-01, 4.284e-02, 8.960e-02, -4.630e-02, -1.585e-01, -1.512e-02, 6.710e-02, 6.842e-02, 2.272e-01, 1.102e-02, 4.590e-02, -7.211e-03, 6.771e-02, 3.433e-02));
	r += mul(s1_2, M4(1.184e-01, 4.077e-02, -1.091e-01, 4.719e-02, -1.981e-02, 4.631e-02, 1.984e-03, -3.989e-02, 6.086e-02, -4.594e-02, -9.588e-03, -2.080e-03, 3.543e-02, -6.325e-02, -1.562e-01, -1.508e-02));
	r += mul(s1_3, M4(-9.785e-01, 1.708e-01, 2.510e-01, 1.210e-01, 4.140e-01, 1.089e-01, -2.607e-01, 1.548e-01, -2.356e-01, 1.875e-02, 1.115e-01, 3.776e-02, 4.904e-02, 6.435e-02, -3.868e-02, 2.435e-02));
	r += mul(s1_4, M4(2.958e-01, -5.605e-01, -5.451e-02, -9.492e-01, 2.257e-01, -2.083e-01, 2.114e-01, -3.940e-01, -1.587e-01, 2.334e-01, 1.690e-01, 2.560e-01, 4.232e-01, 1.111e-02, -1.449e+00, 3.781e-01));
	r += mul(s1_5, M4(1.116e-01, 3.835e-01, 1.016e-01, -2.494e-01, 5.489e-02, 3.137e-02, 1.007e-01, -4.415e-02, -5.383e-02, -1.395e-01, -4.352e-02, -9.200e-02, 1.132e+00, 3.605e-01, 1.672e+00, -2.623e-03));
	r += mul(s1_6, M4(3.516e-01, 3.830e-01, 2.096e-01, -1.988e-01, -1.022e-01, -2.456e-01, -1.607e-02, -5.540e-02, 1.709e-01, -1.970e-02, -7.086e-02, -2.555e-02, -1.470e-01, 1.704e-01, 1.147e-01, 1.536e-02));
	r += mul(s1_7, M4(-3.396e-01, -2.762e-01, -2.285e-01, 4.363e-01, -6.466e-02, 4.454e-02, -8.716e-02, 9.728e-02, 2.466e-01, 2.985e-01, -2.025e-01, 3.003e-01, -5.518e-01, -3.201e-01, 4.067e-01, -5.446e-01));
	r += mul(s1_8, M4(-8.492e-02, 1.482e-01, 1.109e-01, -1.427e-01, 1.995e-02, 1.131e-01, 2.525e-04, -9.523e-03, -1.348e-02, -1.952e-01, 4.779e-02, -9.053e-02, 7.294e-02, 1.333e+00, -6.593e-02, -5.423e-02));
	r += V4(-5.187e-03, -3.563e-03, -1.988e-03, -2.330e-03);
	return r;
}
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 4
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-NVL-DN-out
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-8.514e-02, 4.477e-02, -2.023e-02, 3.517e-02, 3.271e-01, 6.980e-02, 5.374e-03, 1.004e-02, -3.136e-02, -9.592e-03, 6.157e-03, 4.160e-03, -3.368e-01, -3.432e-02, 5.971e-02, 3.698e-02));
	r += mul(s0_1, M4(-6.859e-01, -2.803e-01, 4.777e-01, 1.983e-01, 3.000e-02, 2.492e-01, 3.644e-01, 6.974e-02, 5.468e-03, -6.608e-03, -1.776e-02, -1.363e-02, -1.097e-01, -4.893e-01, -3.357e-02, -4.837e-02));
	r += mul(s0_2, M4(1.519e-01, -5.096e-01, -1.242e-05, 2.857e-01, 1.061e-01, 6.519e-02, 2.289e-02, -6.833e-04, 1.321e-02, -5.984e-03, 2.885e-02, 3.553e-03, 1.710e-02, 8.680e-02, 4.483e-02, 5.945e-02));
	r += mul(s0_3, M4(2.549e-01, 1.372e-01, -3.644e-02, 1.889e-02, -1.240e-01, -9.535e-02, 4.266e-01, -2.009e-02, 2.764e-01, 1.306e-02, -8.540e-02, -5.198e-02, 4.336e-01, 1.987e-01, -5.098e-01, 6.926e-03));
	r += mul(s0_4, M4(1.670e-01, -5.847e-02, -3.018e-01, -1.075e-01, -1.020e+00, -1.008e-01, -1.291e+00, 1.485e-01, 4.338e-01, 7.371e-01, -4.203e-02, 1.429e-02, -1.485e-01, -7.396e-02, -1.600e-01, -8.848e-01));
	r += mul(s0_5, M4(1.948e-01, 7.793e-01, -5.176e-01, -6.621e-01, 1.879e-01, -3.218e-02, 1.606e-01, 2.581e-02, -7.085e-02, -1.024e-01, -5.424e-02, -1.348e-01, -5.943e-02, -2.764e-02, -1.126e-01, -3.418e-02));
	r += mul(s0_6, M4(-5.018e-02, -1.454e-02, 1.783e-01, 7.939e-02, 3.752e-02, -1.428e-02, -2.319e-01, -4.527e-02, -2.620e-02, -1.613e-01, 3.566e-01, -3.306e-02, -6.438e-02, -4.599e-02, 5.176e-01, 9.450e-02));
	r += mul(s0_7, M4(-9.985e-02, -1.469e-01, -4.250e-01, -1.094e-01, 1.910e-01, 8.316e-02, 1.062e-01, -2.728e-02, -1.226e-01, 6.373e-02, 3.315e-01, 8.962e-01, 9.034e-02, 8.652e-02, 4.587e-03, 4.033e-01));
	r += mul(s0_8, M4(1.726e-03, 5.220e-02, 2.645e-01, 1.993e-03, -2.628e-02, -4.010e-02, 4.089e-02, -7.843e-02, -6.191e-02, -8.323e-02, -1.427e-02, -1.131e-01, -3.286e-02, -9.595e-02, 1.697e-02, -3.130e-02));
	r += mul(s1_0, M4(8.343e-04, 3.244e-03, 1.381e-03, -9.509e-04, 2.257e-01, 1.421e-01, -4.687e-03, 2.506e-02, -6.665e-02, 6.807e-03, 1.439e-02, 1.251e-02, -3.986e-01, -1.243e-01, 2.166e-02, 1.150e-02));
	r += mul(s1_1, M4(-7.596e-02, -3.359e-02, 7.563e-02, 7.768e-03, 2.705e-01, 1.902e-01, 1.440e-01, 1.179e-02, 4.265e-02, -1.937e-02, -5.822e-02, -2.575e-02, -2.233e-01, -4.152e-01, -1.116e-01, -8.759e-02));
	r += mul(s1_2, M4(-8.990e-02, -6.897e-02, -5.194e-02, 1.714e-02, 6.039e-02, 5.893e-02, 4.400e-02, 2.447e-02, 4.309e-02, -1.914e-02, 1.275e-02, -3.795e-02, 7.202e-02, 7.126e-02, 7.143e-02, 4.874e-02));
	r += mul(s1_3, M4(2.803e-01, 6.665e-02, -8.989e-03, 8.626e-03, -3.647e-01, -3.533e-02, 1.421e-01, 1.638e-01, 4.988e-01, -8.522e-04, -7.968e-02, -5.807e-02, 4.141e-01, 9.955e-02, -3.878e-01, -1.564e-01));
	r += mul(s1_4, M4(-3.740e-01, 4.633e-02, -3.962e-01, -2.090e-01, -2.593e-01, -6.743e-01, -2.709e-01, -4.163e-01, -5.143e-02, 4.057e-01, 2.486e-01, 2.370e-01, -1.360e-01, 5.628e-01, -2.643e-01, -7.619e-02));
	r += mul(s1_5, M4(3.269e-02, -8.250e-02, 4.118e-02, -4.992e-02, -3.595e-03, -1.041e-02, -1.021e-02, -9.651e-03, -1.067e-01, -6.860e-02, -5.752e-02, -4.332e-02, -5.451e-02, -2.803e-01, -6.567e-02, -2.546e-01));
	r += mul(s1_6, M4(-5.064e-02, -2.619e-02, 2.567e-01, 5.040e-02, 5.920e-02, 4.866e-02, -1.921e-01, -3.568e-02, -9.053e-02, -1.489e-01, 3.740e-01, -7.515e-03, -2.752e-02, -4.919e-02, 3.743e-01, 8.472e-02));
	r += mul(s1_7, M4(-7.457e-02, -1.658e-01, -2.822e-01, -1.996e-02, 6.331e-02, 9.056e-02, 1.499e-01, 5.796e-03, 2.056e-01, 2.886e-01, 1.706e-01, 4.505e-01, -1.104e-02, 4.652e-02, 7.670e-03, 4.206e-01));
	r += mul(s1_8, M4(1.008e-01, 1.694e-01, 1.001e-01, 5.099e-02, -1.874e-02, -1.508e-02, -1.087e-02, 6.566e-03, -6.680e-02, -1.352e-01, -4.798e-02, -4.403e-02, 1.401e-02, -5.738e-02, 8.948e-03, -1.229e-01));
	r += V4(-4.475e-03, -2.752e-03, -4.440e-03, -2.971e-03);
	return tanh(r);
}
void Pass4(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 5
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-NVL-DN-shuffle
//!STYLE PS
//!IN t1, INPUT
float4 Pass5(float2 pos) {
	float2 pt = float2(GetInputPt());
	static const float3x3 rgb2yuv = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081};
	static const float3x3 yuv2rgb = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float4 r = 0.0;
	float2 size = float2(GetInputSize());
	float2 f = frac(pos * size);
	float3 yuv = mul(rgb2yuv, INPUT.SampleLevel(SL, pos, 0).rgb);
	int2 i = int2(f * 2.0);
	r.r = t1.SampleLevel(SP, (float2(0.5, 0.5) - f) * pt + pos, 0)[2*i.y + i.x];
	r.r += yuv.r;
	r.a = 1.0;
	r.r = clamp(r, 0.0, 1.0);
	float3 px = mul(yuv2rgb, float3(r.r, yuv.yz));
	return float4(px, 1.0);
}
