// CuNNy 2x4C BILINEAR CHROMA NVL DN
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

//!MAGPIE EFFECT
//!VERSION 3
//!OUTPUT_WIDTH INPUT_WIDTH * 2
//!OUTPUT_HEIGHT INPUT_HEIGHT * 2

//!TEXTURE
Texture2D INPUT;


//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t1;

//!PASS 1
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-NVL-DN-in
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) (dot(float3(1.259e+00, 2.415e+00, 5.334e-01), O(INPUT, float2(x, y)).rgb) + -4.536e-01)
float4 f0(float2 pt, float2 pos, min16float s0_0, min16float s0_1, min16float s0_2, min16float s0_3, min16float s0_4, min16float s0_5, min16float s0_6, min16float s0_7, min16float s0_8) {
	V4 r = 0.0;
	r += V4(-1.782e-01, -1.374e-01, 3.717e-03, -7.201e-03) * s0_0;
	r += V4(1.466e-01, 3.801e-01, -1.132e-02, 3.356e-03) * s0_1;
	r += V4(3.331e-02, -7.517e-02, 8.755e-03, 4.787e-03) * s0_2;
	r += V4(-1.738e-01, 1.430e-01, -9.441e-03, 3.603e-01) * s0_3;
	r += V4(1.380e-01, -2.744e-01, 3.076e-01, -3.426e-01) * s0_4;
	r += V4(2.866e-02, 4.333e-02, -5.155e-03, -1.807e-02) * s0_5;
	r += V4(2.045e-02, 2.950e-03, 7.719e-03, -2.141e-02) * s0_6;
	r += V4(-2.164e-03, -1.327e-01, -2.979e-01, 1.469e-02) * s0_7;
	r += V4(-1.554e-02, 5.366e-02, -3.836e-03, 7.340e-03) * s0_8;
	r += V4(9.678e-04, -1.102e-02, 8.572e-04, 5.584e-04);
	return r;
}
void Pass1(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float s0_0 = l0(-1.0, -1.0);
	min16float s0_1 = l0(0.0, -1.0);
	min16float s0_2 = l0(1.0, -1.0);
	min16float s0_3 = l0(-1.0, 0.0);
	min16float s0_4 = l0(0.0, 0.0);
	min16float s0_5 = l0(1.0, 0.0);
	min16float s0_6 = l0(-1.0, 1.0);
	min16float s0_7 = l0(0.0, 1.0);
	min16float s0_8 = l0(1.0, 1.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8);
}
//!PASS 2
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-NVL-DN-conv1
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-5.892e-02, -1.560e-02, 1.776e-02, 3.339e-02, 7.301e-02, -3.003e-03, -2.901e-02, -2.527e-02, 2.946e-01, -4.925e-02, 1.091e-01, -2.940e-01, 1.134e-01, 2.983e-02, 1.407e-02, 3.742e-02));
	r += mul(s0_1, M4(1.411e-01, -4.938e-02, -6.188e-02, 2.799e-03, -5.945e-02, 8.036e-02, 3.415e-02, 3.011e-02, 3.558e-02, 4.302e-02, 5.215e-01, -1.546e-01, -1.403e-02, 3.533e-01, 2.405e-01, -2.687e-01));
	r += mul(s0_2, M4(-1.727e-02, -7.935e-02, 3.922e-02, -6.637e-03, 7.900e-03, 1.826e-02, -8.450e-03, 3.173e-02, 1.786e-02, 6.518e-02, 1.627e-01, -4.319e-02, -6.555e-02, 1.021e-01, -4.890e-02, -1.045e-01));
	r += mul(s0_3, M4(-3.521e-03, 1.220e-01, -5.354e-02, 2.409e-01, 2.124e-02, -9.631e-02, -1.096e-01, 1.849e-01, 1.948e-01, 1.022e-01, 8.325e-02, 2.518e-01, 5.472e-01, 9.570e-02, 9.709e-02, 1.641e-02));
	r += mul(s0_4, M4(-4.466e-03, -2.726e-02, -1.924e-01, 4.024e-02, -2.422e-01, 9.787e-03, 8.906e-02, -1.294e-01, -8.463e-02, -2.591e-02, -2.790e-02, 1.287e-01, -7.248e-01, -2.589e-01, 2.457e-01, 7.258e-02));
	r += mul(s0_5, M4(4.683e-02, -3.849e-01, -4.508e-01, 1.909e-01, -3.342e-02, -8.075e-02, -1.274e-01, 3.853e-02, -3.846e-02, -1.244e-01, -3.576e-02, 2.515e-02, -8.327e-03, 3.788e-03, -1.812e-01, -4.661e-02));
	r += mul(s0_6, M4(-2.021e-01, -4.333e-03, 6.927e-02, -3.082e-01, 8.086e-02, 3.839e-02, -7.712e-02, 6.474e-02, -4.331e-02, -2.849e-02, 2.784e-02, -7.464e-03, 1.661e-01, -5.814e-02, 7.736e-02, 1.175e-02));
	r += mul(s0_7, M4(7.395e-02, 6.131e-02, -1.282e-02, -3.210e-01, -1.484e-01, 1.245e-01, -1.574e-01, 2.310e-02, 5.190e-02, -8.613e-02, 9.105e-02, -4.870e-02, -1.106e-01, -2.860e-01, 2.007e-02, 7.687e-02));
	r += mul(s0_8, M4(3.070e-01, 3.490e-01, -1.492e-02, 2.185e-01, 1.502e-02, 2.450e-02, 3.144e-02, -5.083e-02, 4.809e-03, 4.773e-02, -6.484e-02, 5.792e-02, -1.094e-02, 2.747e-02, -1.695e-01, 1.149e-01));
	r += mul(s1_0, M4(-7.105e-02, 3.201e-03, 2.573e-02, -8.030e-04, 5.896e-02, -1.106e-02, -2.673e-02, -2.054e-02, -2.629e-03, -7.903e-02, 1.515e-02, -7.759e-02, -4.818e-02, 7.825e-03, -4.364e-02, 2.102e-01));
	r += mul(s1_1, M4(1.685e-01, 1.212e-02, -5.979e-02, -7.608e-02, -3.406e-02, -4.337e-03, 1.565e-02, 1.529e-02, 1.134e-01, -4.159e-01, -3.193e-02, 1.241e-02, 7.539e-02, -6.871e-03, -8.545e-02, 3.850e-02));
	r += mul(s1_2, M4(-1.654e-02, 2.386e-02, 4.254e-02, -1.090e-02, -2.482e-02, 9.669e-03, 7.526e-03, 1.116e-02, -3.615e-02, -3.872e-02, 1.215e-03, -6.457e-02, 5.676e-02, -3.508e-01, -3.154e-01, 9.905e-02));
	r += mul(s1_3, M4(1.446e-01, 1.655e-01, 3.658e-02, -2.059e-02, 5.532e-02, -6.323e-02, -8.864e-02, 8.655e-02, -2.568e-01, 2.637e-01, 9.588e-02, -1.294e-01, -4.358e-02, 1.282e-01, 2.026e-02, -8.224e-02));
	r += mul(s1_4, M4(-1.209e-01, 3.215e-01, 2.064e-01, -3.232e-01, -9.742e-03, 6.873e-03, 5.973e-02, -9.740e-02, 3.220e-01, 4.465e-01, -1.294e-01, 8.130e-02, -1.412e-01, -1.421e-01, -2.686e-01, -4.828e-01));
	r += mul(s1_5, M4(-3.092e-02, 2.020e-02, -6.861e-02, -8.617e-02, -3.258e-02, 1.147e-02, 2.191e-02, 6.729e-03, -1.873e-01, 2.150e-02, -3.768e-02, -4.376e-02, 3.361e-01, 1.669e-01, -4.678e-01, 4.072e-01));
	r += mul(s1_6, M4(7.257e-02, -8.753e-02, 6.270e-02, 9.068e-02, 1.341e-01, 2.519e-02, -8.309e-02, -4.926e-02, -1.107e-01, -1.684e-02, 5.566e-02, 1.343e-02, -2.056e-01, -2.936e-02, 5.929e-02, -1.613e-01));
	r += mul(s1_7, M4(-1.228e-01, -4.053e-01, -9.849e-03, 3.210e-01, 1.089e-03, 1.040e-01, -1.714e-01, 2.099e-01, 1.110e-01, -6.567e-02, 1.150e-01, -6.069e-02, 2.274e-01, 1.432e-01, 4.853e-02, -4.600e-01));
	r += mul(s1_8, M4(3.534e-02, -2.866e-02, -5.334e-02, 7.377e-02, 4.431e-02, -1.511e-02, 5.559e-02, 1.195e-02, -2.933e-02, 5.974e-02, -4.361e-02, -3.463e-02, 3.252e-01, 3.396e-01, -5.491e-02, 2.192e-01));
	r += V4(4.499e-03, -2.712e-04, -5.535e-03, 1.790e-03);
	return r;
}
void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 3
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-NVL-DN-conv2
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(9.770e-03, -7.693e-03, -1.333e-03, -2.337e-02, 7.373e-03, -4.258e-02, 2.489e-02, -1.060e-01, -4.237e-02, 1.733e-02, -1.106e-01, 1.957e-01, 1.023e-02, 1.968e-02, 6.169e-03, -1.655e-02));
	r += mul(s0_1, M4(9.899e-03, -6.528e-02, 5.788e-02, -2.184e-01, 3.098e-02, -2.783e-02, 1.731e-02, 6.094e-02, 3.516e-03, 3.153e-02, 3.886e-03, -3.821e-01, 4.965e-02, -3.482e-03, 2.168e-02, 6.248e-02));
	r += mul(s0_2, M4(-5.056e-02, 5.964e-02, 1.343e-01, 1.873e-01, 1.268e-02, -2.329e-02, 4.213e-03, 1.928e-02, -4.739e-02, 1.353e-02, 1.381e-02, 4.301e-02, 1.355e-02, 6.866e-03, -5.872e-02, -1.200e-01));
	r += mul(s0_3, M4(-1.974e-02, 8.718e-04, 7.546e-03, -5.153e-02, 8.802e-02, 9.353e-02, 5.092e-02, -2.427e-01, -4.430e-02, -1.319e-01, 1.167e-01, 4.472e-01, 3.674e-02, 1.763e-02, 3.509e-03, 2.696e-03));
	r += mul(s0_4, M4(2.097e-01, 2.104e-01, -6.550e-02, -2.692e-01, 2.773e-01, -3.236e-02, 1.763e-01, 3.018e-01, 4.350e-01, -8.826e-01, -6.489e-01, -7.840e-01, -1.140e-01, -2.777e-02, -2.049e-02, 4.719e-02));
	r += mul(s0_5, M4(4.992e-01, -2.500e-01, -1.490e-02, 4.971e-01, 1.662e-02, -6.259e-03, 1.116e-02, 5.330e-02, 1.574e-02, 1.495e-02, 1.754e-01, 2.261e-01, -7.491e-03, -2.651e-02, -8.536e-02, -1.766e-02));
	r += mul(s0_6, M4(1.617e-02, -8.708e-03, -2.270e-02, 6.339e-03, 3.615e-03, -2.292e-02, 8.324e-02, -4.990e-02, -1.095e-01, 2.785e-02, -1.439e-02, 3.880e-02, -4.896e-02, -3.501e-02, -1.199e-02, -1.137e-03));
	r += mul(s0_7, M4(-2.213e-02, -1.012e-01, 3.501e-02, 8.393e-03, 6.011e-02, 5.157e-01, -1.081e+00, -4.647e-01, 2.745e-01, 7.786e-01, 1.694e-01, -1.733e-01, 3.125e-02, 3.155e-02, 1.399e-02, 4.201e-03));
	r += mul(s0_8, M4(-7.371e-02, -1.603e-01, -1.783e-02, -7.863e-03, -4.175e-02, -7.076e-02, 2.720e-02, 5.362e-02, -4.491e-03, 9.314e-02, 3.501e-02, 9.293e-02, 3.213e-03, 7.007e-02, -2.741e-02, -7.631e-03));
	r += mul(s1_0, M4(-3.892e-02, -4.793e-04, 1.123e-02, -9.128e-02, 1.471e-02, -1.461e-02, 3.432e-02, -5.421e-02, -2.221e-02, 2.213e-01, -8.276e-02, 3.439e-01, -1.312e-01, 3.775e-02, -4.569e-02, -5.259e-02));
	r += mul(s1_1, M4(8.981e-02, -5.079e-02, 2.050e-01, -2.056e-01, 8.713e-02, -8.619e-02, 3.686e-02, 8.038e-02, -7.674e-02, 1.136e-01, -1.587e-01, -2.312e-01, 2.433e-02, 3.382e-02, 2.025e-03, -9.642e-02));
	r += mul(s1_2, M4(6.835e-03, -1.972e-02, 7.754e-02, 2.231e-01, -1.053e-02, 3.654e-02, 1.328e-02, 6.819e-02, -2.800e-02, 1.357e-02, -7.984e-02, -6.363e-03, -5.660e-02, 5.021e-02, 2.784e-03, -1.197e-01));
	r += mul(s1_3, M4(-1.401e-01, 5.189e-02, -5.050e-03, -1.471e-01, -1.306e-01, 5.426e-02, -1.211e-01, -1.370e-01, 8.304e-02, -3.465e-01, 2.975e-01, 6.505e-01, -2.758e-01, 4.408e-02, 4.212e-02, -1.298e-01));
	r += mul(s1_4, M4(6.518e-01, 4.717e-01, 1.843e-01, -2.352e-01, -2.852e-01, 8.002e-02, -3.799e-01, 4.741e-01, -4.692e-02, -6.487e-01, 2.299e-01, -3.449e-01, 8.184e-01, -6.154e-01, -4.045e-01, 1.652e-01));
	r += mul(s1_5, M4(-1.122e-02, 2.199e-01, 3.578e-01, 2.979e-01, -3.912e-02, -8.825e-02, -4.093e-02, -2.329e-01, -1.752e-02, -4.824e-02, 1.153e-01, 5.927e-02, -1.202e-02, -2.221e-02, -2.871e-02, 2.259e-01));
	r += mul(s1_6, M4(-4.121e-02, 6.001e-02, 7.945e-02, -1.777e-02, -1.583e-01, -6.715e-02, 5.701e-02, -5.507e-02, -1.406e-02, -4.627e-02, 1.554e-01, 1.163e-01, 5.175e-02, 1.555e-02, -3.405e-02, -2.855e-02));
	r += mul(s1_7, M4(-7.005e-02, -7.390e-02, 7.618e-02, -6.879e-03, 1.102e-01, 3.081e-02, 3.634e-04, 1.042e-01, 5.651e-02, 6.154e-01, -1.675e-01, -2.981e-01, 5.481e-02, 3.486e-01, -2.679e-01, -1.926e-01));
	r += mul(s1_8, M4(2.024e-02, -1.223e-01, 9.739e-02, 4.894e-02, -3.731e-02, 1.440e-01, -3.138e-02, -3.898e-02, 1.760e-03, 6.784e-02, -3.235e-02, 5.991e-02, 6.371e-02, -7.492e-02, -2.163e-01, 1.778e-03));
	r += V4(2.602e-03, -5.402e-03, -5.739e-03, -2.231e-03);
	return r;
}
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 4
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-NVL-DN-out
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(2.975e-02, 1.138e-02, 1.154e-02, 5.323e-03, -1.647e-01, -5.136e-03, 1.294e-01, 5.545e-02, -1.658e-02, 5.339e-02, -4.692e-02, -4.421e-02, -3.743e-02, 5.995e-03, 1.189e-02, -1.197e-03));
	r += mul(s0_1, M4(1.036e-01, 1.484e-01, 1.337e-01, 7.888e-03, 7.356e-01, 1.940e-01, -3.193e-01, -2.271e-01, -9.311e-01, -2.991e-01, 5.148e-01, 2.556e-01, -1.239e-01, 3.719e-02, -8.615e-02, -2.371e-02));
	r += mul(s0_2, M4(6.735e-02, 1.731e-02, 2.869e-02, 1.107e-01, -5.716e-03, 2.744e-01, 5.476e-03, -1.099e-01, 1.621e-01, -5.151e-01, 1.790e-02, 3.756e-01, -4.802e-02, -1.373e-01, 5.805e-02, 1.158e-02));
	r += mul(s0_3, M4(9.252e-03, -4.409e-03, 8.242e-03, -2.376e-03, 8.865e-02, 5.598e-03, 3.705e-03, -7.932e-02, -1.226e-02, 3.735e-02, 1.069e-03, 4.203e-02, 2.741e-02, -1.521e-03, -6.116e-02, 1.436e-02));
	r += mul(s0_4, M4(-8.334e-02, -1.005e-02, -2.642e-01, 1.436e-01, -1.217e-01, -5.201e-03, 4.814e-01, 4.832e-01, 1.967e-02, -2.085e-01, -1.139e-02, 3.067e-02, 7.676e-01, -5.130e-02, 4.061e-01, -3.574e-02));
	r += mul(s0_5, M4(-1.744e-02, -7.283e-02, -4.041e-02, -3.782e-01, 3.202e-03, -4.391e-02, -4.617e-02, 2.512e-02, 1.387e-01, 3.625e-01, -1.798e-01, -3.120e-01, -1.507e-01, 5.371e-01, -2.175e-01, 1.497e-01));
	r += mul(s0_6, M4(-7.470e-03, 7.031e-03, -8.598e-03, 7.035e-03, 6.854e-03, 5.691e-03, -1.673e-02, -1.056e-02, 9.939e-03, 6.609e-03, -2.109e-03, 6.334e-03, 1.353e-04, -2.491e-03, 3.821e-02, -7.888e-03));
	r += mul(s0_7, M4(1.280e-02, -1.380e-02, 6.962e-02, -6.324e-02, 1.318e-02, 1.348e-02, 3.333e-02, 1.450e-02, 2.216e-02, 5.035e-03, -4.216e-02, -2.280e-03, -1.489e-01, -1.353e-02, 1.275e-01, 4.943e-03));
	r += mul(s0_8, M4(-1.023e-03, 1.067e-03, 7.778e-03, 8.276e-02, -9.113e-04, -1.519e-02, -5.114e-03, -3.039e-04, -1.108e-02, 1.499e-02, 6.211e-03, -3.643e-02, -6.286e-02, -7.731e-02, -1.159e-01, 7.885e-02));
	r += mul(s1_0, M4(1.426e-01, -8.899e-02, 4.368e-02, 7.080e-03, 1.129e-02, -3.552e-02, 1.450e-02, 5.528e-03, -1.749e-02, 5.523e-02, -6.048e-03, -5.849e-03, -7.357e-02, -9.636e-03, 3.694e-02, 1.036e-02));
	r += mul(s1_1, M4(-9.788e-02, 2.289e-01, 1.509e-01, 3.844e-03, 2.149e-01, 2.080e-01, 6.254e-02, -3.574e-03, -1.322e-01, -2.817e-01, -7.576e-03, 5.079e-02, -1.231e-01, -9.872e-02, -3.284e-02, -2.212e-02));
	r += mul(s1_2, M4(4.201e-02, 7.023e-02, 4.952e-02, 5.020e-02, 1.523e-02, 6.167e-02, 1.729e-04, 6.569e-02, 1.084e-02, 3.671e-02, 3.280e-03, -3.498e-02, -1.695e-02, -6.194e-02, -1.293e-02, -2.435e-02));
	r += mul(s1_3, M4(1.159e-01, -1.247e-01, 1.843e-01, -1.734e-01, 3.562e-02, 3.921e-03, -1.222e-02, -4.994e-02, -3.968e-02, 7.343e-02, -2.262e-03, 1.059e-01, 1.514e-01, -9.832e-02, -1.250e-01, -1.312e-01));
	r += mul(s1_4, M4(-5.996e-01, 4.348e-01, -7.717e-01, 5.333e-01, 2.225e-01, 1.979e-01, 1.571e-01, 1.958e-01, 7.591e-02, -5.456e-02, -6.720e-02, -3.648e-01, 2.726e-01, 5.104e-01, 8.040e-02, 2.241e-01));
	r += mul(s1_5, M4(-9.252e-03, -1.806e-01, -3.146e-03, -1.188e-01, -7.302e-03, -2.619e-02, -5.744e-02, -1.053e-01, -3.006e-02, -8.290e-02, -4.413e-02, -9.495e-03, 2.752e-02, 1.018e-01, 3.070e-02, 7.907e-02));
	r += mul(s1_6, M4(6.532e-03, 1.692e-02, -2.314e-02, -2.729e-02, -9.392e-03, 6.907e-05, -2.153e-02, 7.750e-03, 5.255e-03, 1.170e-02, -3.414e-02, 4.370e-02, -2.874e-02, -2.946e-02, 9.208e-02, -3.240e-02));
	r += mul(s1_7, M4(9.792e-02, -9.688e-02, 5.693e-02, -2.756e-02, -1.755e-02, -3.708e-02, 8.374e-02, 1.643e-02, -2.594e-02, -3.065e-02, 4.963e-02, -8.346e-03, -5.312e-02, -5.460e-02, 5.335e-02, 9.814e-02));
	r += mul(s1_8, M4(2.461e-03, 3.210e-02, 2.171e-03, -1.703e-03, -1.515e-02, -2.155e-02, -1.232e-02, -4.539e-04, -8.335e-03, 1.089e-02, 6.806e-03, 1.477e-02, -6.985e-03, -3.339e-02, -1.130e-02, -3.047e-02));
	r += V4(1.734e-03, 9.182e-04, 1.379e-03, 5.768e-04);
	return tanh(r);
}
void Pass4(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 5
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-NVL-DN-shuffle
//!STYLE PS
//!IN t1, INPUT
float4 Pass5(float2 pos) {
	float2 pt = float2(GetInputPt());
	static const float3x3 rgb2yuv = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081};
	static const float3x3 yuv2rgb = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float4 r = 0.0;
	float2 size = float2(GetInputSize());
	float2 f = frac(pos * size);
	float3 yuv = mul(rgb2yuv, INPUT.SampleLevel(SL, pos, 0).rgb);
	int2 i = int2(f * 2.0);
	r.r = t1.SampleLevel(SP, (float2(0.5, 0.5) - f) * pt + pos, 0)[2*i.y + i.x];
	r.r += yuv.r;
	r.a = 1.0;
	r.r = clamp(r, 0.0, 1.0);
	float3 px = mul(yuv2rgb, float3(r.r, yuv.yz));
	return float4(px, 1.0);
}
