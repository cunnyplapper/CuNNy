// CuNNy 3x4C BILINEAR CHROMA NVL DN
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

//!MAGPIE EFFECT
//!VERSION 3
//!OUTPUT_WIDTH INPUT_WIDTH * 2
//!OUTPUT_HEIGHT INPUT_HEIGHT * 2

//!TEXTURE
Texture2D INPUT;


//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t1;

//!PASS 1
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-DN-in
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) (dot(float3(2.842e-01, 5.417e-01, 1.395e-01), O(INPUT, float2(x, y)).rgb) + -9.143e-01)
float4 f0(float2 pt, float2 pos, min16float s0_0, min16float s0_1, min16float s0_2, min16float s0_3, min16float s0_4, min16float s0_5, min16float s0_6, min16float s0_7, min16float s0_8) {
	V4 r = 0.0;
	r += V4(-6.951e-03, 1.165e-01, -1.717e-02, 3.802e-03) * s0_0;
	r += V4(-7.264e-03, 9.749e-02, 4.479e-02, -5.701e-02) * s0_1;
	r += V4(-2.305e-02, -2.456e-01, -1.925e-02, 2.500e-02) * s0_2;
	r += V4(1.985e-03, -1.208e-01, 2.092e-02, 5.348e-01) * s0_3;
	r += V4(-4.913e-02, 6.117e-01, -1.162e-01, -4.814e-01) * s0_4;
	r += V4(6.679e-01, 1.605e-02, -6.504e-01, -4.851e-02) * s0_5;
	r += V4(-1.456e-02, -2.395e-01, -3.291e-03, 5.969e-02) * s0_6;
	r += V4(9.668e-03, -3.213e-01, 4.061e-02, -6.316e-02) * s0_7;
	r += V4(-7.886e-02, 9.937e-02, 7.011e-01, 2.396e-02) * s0_8;
	r += V4(-1.930e-02, -4.349e-04, -9.337e-03, -9.087e-03);
	return r;
}
void Pass1(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float s0_0 = l0(-1.0, -1.0);
	min16float s0_1 = l0(0.0, -1.0);
	min16float s0_2 = l0(1.0, -1.0);
	min16float s0_3 = l0(-1.0, 0.0);
	min16float s0_4 = l0(0.0, 0.0);
	min16float s0_5 = l0(1.0, 0.0);
	min16float s0_6 = l0(-1.0, 1.0);
	min16float s0_7 = l0(0.0, 1.0);
	min16float s0_8 = l0(1.0, 1.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8);
}
//!PASS 2
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-DN-conv1
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(1.494e+00, 1.048e+00, 9.470e-01, 2.495e-01, -2.153e-01, -1.885e-02, -3.578e-03, 1.955e-01, -1.101e+00, 1.183e-01, -1.139e-01, -1.392e-01, -7.641e-02, 4.566e-03, -5.248e-02, -3.663e-02));
	r += mul(s0_1, M4(-1.898e-01, 4.630e-01, 1.273e+00, -3.668e-02, -7.102e-03, 4.397e-02, 4.009e-03, 6.483e-02, -2.326e-01, 1.324e+00, 1.329e-01, -6.299e-02, 8.435e-03, -4.675e-02, -2.173e-01, -3.915e-03));
	r += mul(s0_2, M4(1.975e-01, 2.708e-01, 2.196e-01, -9.736e-02, 3.118e-02, -1.708e-01, -4.825e-02, 2.721e-02, 2.688e-01, 3.578e-01, -4.311e-02, -3.007e-02, 7.848e-01, 4.463e-01, -1.022e-01, 4.502e-01));
	r += mul(s0_3, M4(8.324e-01, 1.259e+00, 1.530e+00, -1.213e+00, 3.472e-01, -2.576e-01, 1.568e-01, 4.083e-01, 4.724e-02, 2.100e-02, 5.600e-01, -3.645e-01, 4.167e-02, -2.573e-02, -3.925e-02, 6.471e-02));
	r += mul(s0_4, M4(-6.752e-01, 2.550e+00, 8.623e-01, 4.305e-02, 4.058e-01, 2.679e-01, 4.990e-01, -6.016e-01, 2.242e-01, -7.559e-01, -4.754e-02, 9.156e-01, -3.331e-01, 3.579e-01, 1.243e-01, 1.182e-01));
	r += mul(s0_5, M4(-1.459e-01, 3.093e-01, 4.752e-02, 1.934e-01, 9.705e-02, -4.050e-02, -2.682e-02, 4.498e-01, 9.825e-02, 4.600e-02, -8.718e-02, 3.138e-02, 1.460e-01, -1.028e+00, 4.433e-01, -2.453e-01));
	r += mul(s0_6, M4(8.125e-01, 1.254e+00, -1.363e+00, -1.812e-01, 6.715e-02, -7.439e-02, 1.223e-01, -1.028e-02, -7.251e-02, -1.229e-02, -1.107e-01, -5.692e-03, 6.139e-02, -8.716e-02, -3.921e-02, 1.519e-02));
	r += mul(s0_7, M4(6.191e-01, 8.640e-01, 7.692e-01, 1.965e+00, 1.419e-01, -1.530e-01, -5.115e-01, 2.541e-01, 2.144e-03, 2.972e-02, -9.503e-02, -1.589e-01, 2.202e-01, -2.099e-01, 3.207e-01, 7.397e-02));
	r += mul(s0_8, M4(6.557e-02, 4.143e-01, -2.124e-01, -5.789e-01, 1.861e-01, -1.314e-02, -3.151e-01, 4.654e-01, -1.674e-02, -5.448e-02, 2.469e-02, -6.805e-02, 1.227e-01, -3.417e-01, -4.071e-02, -4.863e-02));
	r += mul(s1_0, M4(-1.388e-01, -9.821e-02, 4.309e-04, -2.674e-01, -1.910e-01, -9.398e-02, -1.811e-01, -4.159e-02, -5.439e-02, 4.529e-02, -9.350e-02, -2.046e-01, -1.022e-01, 9.302e-02, 5.145e-02, -2.368e-02));
	r += mul(s1_1, M4(8.187e-02, 1.535e-01, 1.046e-01, 7.703e-02, -2.199e-01, 7.671e-03, 1.599e-02, -8.690e-02, 2.085e-01, 1.975e-03, -2.088e-02, 1.683e-01, 2.018e-01, -3.771e-02, -1.713e-01, 4.183e-02));
	r += mul(s1_2, M4(1.405e-01, 6.363e-02, -4.144e-02, 1.808e-01, -9.647e-02, 1.174e-01, 7.118e-02, -1.912e-01, 9.304e-02, -1.230e-01, 4.777e-02, -1.226e-02, 5.950e-01, 1.410e-01, -4.531e-02, 3.311e-01));
	r += mul(s1_3, M4(-8.060e-02, 1.828e-01, 1.827e-01, 2.005e-01, 2.289e-01, -1.481e-01, -5.528e-02, 2.368e-01, 1.704e-01, -3.632e-02, -6.152e-01, 1.065e-01, -4.156e-02, 9.159e-03, 9.790e-02, 8.617e-03));
	r += mul(s1_4, M4(-5.922e-02, 1.473e-01, -3.018e-01, 2.108e-01, -9.637e-02, 5.451e-01, 7.168e-01, -6.520e-01, 9.155e-02, 2.535e-01, -4.472e-01, 1.002e+00, -4.389e-02, 3.036e-01, -1.460e-01, -3.817e-01));
	r += mul(s1_5, M4(7.026e-02, 4.414e-02, -9.920e-02, 1.764e-01, -4.940e-02, -7.981e-02, 1.124e-01, 1.826e-01, 1.347e-01, 2.154e-01, 8.279e-03, -5.163e-02, 4.346e-01, -1.587e-01, -2.686e-01, -4.064e-01));
	r += mul(s1_6, M4(1.110e-01, 5.500e-02, -8.620e-02, -4.502e-01, -4.239e-02, -1.753e-03, 1.754e-02, -1.500e-01, 2.662e-02, -2.073e-02, -1.896e-01, 3.213e-01, 9.592e-02, -1.218e-01, 1.553e-01, 3.762e-02));
	r += mul(s1_7, M4(3.482e-02, -3.779e-01, 2.050e-01, -5.442e-03, -9.049e-02, 4.714e-02, -8.002e-02, 2.475e-02, 6.091e-02, 7.756e-02, 1.163e-02, 2.398e-01, 3.388e-01, -2.209e-01, -1.337e-01, 2.155e-01));
	r += mul(s1_8, M4(-1.245e-01, -1.690e-01, 1.448e-02, -1.183e-01, -6.096e-02, -7.015e-03, -2.568e-01, -2.358e-01, -3.963e-02, 5.174e-02, 1.055e-01, -1.606e-01, -1.332e-01, 2.663e-01, -3.930e-01, -4.166e-01));
	r += V4(3.723e-02, 7.002e-03, -4.504e-02, 1.950e-02);
	return r;
}
void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 3
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-DN-conv2
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-2.653e-02, 2.009e-02, 1.985e-02, -9.056e-02, -2.837e-01, -1.716e-01, -2.113e-01, 1.304e-01, 2.814e-01, 1.057e-01, 4.683e-02, -2.025e-01, 2.007e-01, 5.925e-02, 8.396e-02, 4.792e-02));
	r += mul(s0_1, M4(-2.260e-01, -8.129e-02, -1.797e-01, 1.111e-01, 2.687e-01, 1.947e-01, 1.146e-01, -6.486e-02, -6.036e-01, -3.350e-01, -3.457e-01, 7.834e-02, -9.065e-03, -1.612e-01, 2.823e-02, 1.782e-01));
	r += mul(s0_2, M4(1.135e-01, 1.189e-01, 3.020e-02, -4.924e-02, -7.397e-02, -5.806e-02, 7.937e-03, -1.946e-02, 5.301e-02, 1.726e-01, 4.291e-03, -7.899e-03, -4.138e-02, -9.055e-03, -3.395e-03, -2.936e-02));
	r += mul(s0_3, M4(-3.358e-01, 3.651e-02, -1.162e-01, -2.258e-01, -3.477e-02, 7.574e-02, 4.479e-02, 3.623e-01, 1.675e-01, 6.567e-02, -1.072e-01, -9.617e-02, 3.408e-02, -1.168e-01, -1.397e-01, 1.592e-01));
	r += mul(s0_4, M4(5.852e-01, 5.645e-01, 3.642e-01, 9.091e-02, 4.619e-02, 2.425e-01, -6.153e-02, -7.436e-01, 6.869e-01, -3.277e-01, -3.213e-01, 6.934e-01, -5.958e-01, -3.469e-01, -1.839e-01, -7.102e-02));
	r += mul(s0_5, M4(9.043e-02, -9.787e-03, 6.707e-02, -2.241e-01, -1.799e-01, -8.111e-02, -1.851e-01, 1.018e-01, -4.098e-01, -8.644e-01, -3.640e-01, -7.068e-02, -2.600e-01, -8.669e-02, -1.421e-01, 2.138e-01));
	r += mul(s0_6, M4(-1.626e-01, -2.130e-02, -9.475e-02, 4.613e-02, -3.122e-01, -1.696e-01, -1.891e-01, 3.053e-01, 9.044e-02, 5.478e-02, -3.749e-03, -1.120e-01, 3.796e-02, 1.318e-02, 3.045e-02, 2.222e-02));
	r += mul(s0_7, M4(-1.033e-01, -8.580e-03, -3.458e-01, 2.541e-01, -2.018e-01, 1.292e-01, 5.244e-01, 3.584e-01, 7.422e-02, 5.810e-03, 1.179e-01, 3.396e-02, -5.760e-02, 6.682e-02, 1.548e-01, -4.532e-02));
	r += mul(s0_8, M4(-2.228e-01, -1.273e-01, -1.644e-02, 1.636e-01, 2.358e-02, 9.796e-03, 1.594e-01, -8.869e-03, 3.046e-02, -1.102e-01, -1.296e-01, 1.027e-01, 1.200e-01, 5.911e-02, 8.964e-02, -1.782e-01));
	r += mul(s1_0, M4(8.423e-03, -1.674e-02, 1.038e-02, 6.708e-02, -5.159e-01, -1.208e-01, -2.357e-01, -1.155e-02, 1.446e-02, -1.209e-01, -1.087e-01, -1.422e-01, 4.516e-01, -2.726e-01, -6.999e-02, 9.129e-01));
	r += mul(s1_1, M4(-2.192e-01, -1.372e-01, -1.413e-01, 1.634e-01, 1.114e-01, 4.014e-01, -6.479e-02, -2.878e-01, -2.998e-01, -3.760e-01, -3.084e-01, 2.525e-01, 6.973e-01, -2.573e-01, 2.054e-01, 7.189e-01));
	r += mul(s1_2, M4(1.302e-01, 1.399e-01, 5.193e-02, 7.169e-03, 3.482e-02, 4.722e-02, 2.459e-02, -1.200e-01, -2.397e-01, -9.746e-02, -2.613e-01, -1.060e-01, -2.624e-02, -1.950e-01, 9.633e-03, 1.185e-01));
	r += mul(s1_3, M4(1.062e-01, -2.590e-02, -3.110e-03, 2.363e-02, -1.687e-01, -4.125e-02, -7.595e-02, 4.223e-01, -8.322e-02, 5.697e-02, -8.437e-02, -3.115e-02, 3.073e-01, 4.236e-02, 3.423e-01, 3.446e-01));
	r += mul(s1_4, M4(5.801e-01, -2.966e-02, 4.044e-01, 3.521e-01, -1.519e-01, 2.568e-01, 8.970e-02, -3.662e-01, 1.621e-01, -6.766e-02, -1.370e-01, 1.432e-01, 1.022e-02, -1.004e+00, -5.188e-01, -2.509e-01));
	r += mul(s1_5, M4(-1.156e-01, -2.738e-01, 1.172e-01, -1.126e-01, -1.076e-01, -9.558e-02, -8.909e-02, 3.479e-02, -1.903e-01, -3.635e-01, 1.391e-01, 2.289e-03, -5.001e-01, -4.286e-01, -5.917e-01, 2.526e-01));
	r += mul(s1_6, M4(-1.266e-01, 5.199e-02, 2.342e-02, 5.603e-02, -1.014e-01, -1.489e-01, -1.763e-01, 6.209e-02, -3.911e-02, -3.077e-02, -5.235e-02, -2.008e-03, 2.473e-01, 8.039e-02, 2.387e-01, 1.443e-01));
	r += mul(s1_7, M4(6.396e-01, -2.020e-01, -2.337e-01, 4.524e-01, -1.753e-01, 1.112e-01, 5.958e-02, 1.568e-01, -1.479e-01, -2.296e-02, -7.585e-02, 1.390e-01, 2.940e-01, -1.556e-01, -2.226e-01, -2.593e-02));
	r += mul(s1_8, M4(-7.442e-01, -5.699e-01, -4.943e-01, 6.002e-01, 5.664e-02, -1.276e-02, 2.022e-02, -1.294e-01, -1.440e-01, 2.541e-03, -1.047e-01, 1.832e-01, 1.209e-02, -5.344e-02, 5.007e-02, -2.414e-02));
	r += V4(4.487e-03, 1.705e-03, -8.048e-03, -9.399e-03);
	return r;
}
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 4
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-DN-conv3
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-2.434e-02, -4.916e-02, -1.145e-01, 3.506e-02, -2.350e-01, -1.054e-02, -1.290e-01, -1.681e-01, 1.051e-01, 1.871e-01, 3.249e-01, 3.961e-02, -1.890e-01, 1.683e-02, -1.591e-02, -1.733e-01));
	r += mul(s0_1, M4(-3.877e-01, 8.929e-02, 3.694e-01, -1.224e-01, 1.165e-01, 6.039e-02, 2.576e-01, 1.457e-01, 1.433e-01, -1.202e-01, -2.176e-01, 2.292e-02, -5.597e-02, 5.750e-02, 1.046e-01, 5.552e-02));
	r += mul(s0_2, M4(-2.041e-01, -2.301e-02, 1.333e-01, -8.550e-03, 1.182e-01, -6.270e-02, 6.533e-03, 1.140e-01, 3.399e-02, 2.307e-02, -7.206e-02, -4.034e-02, -4.570e-02, 3.797e-02, 1.821e-01, 7.885e-02));
	r += mul(s0_3, M4(2.579e-02, 6.670e-03, 5.736e-02, 6.193e-02, -1.404e-01, -1.069e-01, 3.076e-01, -3.800e-01, -2.134e-01, 2.302e-01, 7.043e-02, 1.987e-01, -2.497e-01, -1.023e-01, -2.552e-02, -1.517e-01));
	r += mul(s0_4, M4(2.076e-01, 9.663e-01, 3.390e-01, -3.425e-01, 1.476e-01, 1.995e-01, -1.542e-01, 3.844e-01, -1.558e-01, -1.910e-01, -4.358e-02, -4.319e-02, 4.372e-01, 4.759e-01, 1.008e+00, 1.176e+00));
	r += mul(s0_5, M4(4.561e-01, -1.556e-01, -3.688e-01, 2.065e-01, -9.303e-02, 2.392e-02, 6.638e-02, -8.159e-02, -1.352e-01, 1.923e-02, 4.684e-03, -1.880e-01, 1.162e-01, 8.520e-02, -9.754e-02, 2.120e-02));
	r += mul(s0_6, M4(3.872e-02, 1.845e-02, -2.836e-02, 3.490e-02, -4.964e-02, 2.425e-01, -3.659e-02, -1.897e-01, 1.376e-01, 2.566e-01, 9.807e-02, -4.237e-02, 1.255e-01, 1.297e-01, 5.505e-02, -1.050e-01));
	r += mul(s0_7, M4(5.453e-02, 2.518e-01, 8.848e-02, -4.629e-02, 7.582e-02, -1.882e-01, 3.668e-02, 1.284e-01, 7.572e-02, -8.708e-02, -7.690e-02, 1.056e-01, -2.453e-01, 1.956e-01, 1.002e-02, -5.132e-01));
	r += mul(s0_8, M4(-5.621e-02, -2.792e-01, -8.126e-02, 7.792e-02, 1.083e-01, 7.681e-02, 4.263e-02, 1.757e-01, -5.334e-02, 2.054e-02, 3.094e-02, -6.189e-02, -2.186e-01, 1.284e-02, -5.209e-03, -3.243e-01));
	r += mul(s1_0, M4(-9.049e-03, -3.132e-02, -1.160e-01, 4.673e-02, -4.326e-01, 9.832e-02, 2.013e-01, -2.046e-01, 2.037e-01, 1.931e-02, 2.880e-02, 1.277e-02, -9.888e-02, 2.385e-02, -3.244e-02, -8.277e-02));
	r += mul(s1_1, M4(-2.378e-01, 1.233e-01, 1.109e-01, -5.263e-02, -1.020e-01, 6.278e-02, 3.701e-01, -1.623e-03, 1.664e-01, -1.993e-01, -2.976e-01, -3.429e-02, 5.459e-02, -5.371e-02, 9.502e-02, 2.172e-02));
	r += mul(s1_2, M4(-6.345e-02, 1.740e-02, 1.161e-01, -5.932e-04, 4.137e-02, -9.911e-02, -6.377e-02, 6.541e-02, -1.522e-02, 3.468e-02, -5.391e-02, -5.926e-02, -4.016e-02, -4.050e-02, 1.053e-01, 5.536e-02));
	r += mul(s1_3, M4(-1.952e-01, -7.259e-02, 1.654e-01, -2.092e-02, -3.010e-01, 4.203e-01, 2.310e-01, -3.350e-01, -2.155e-01, -1.229e-01, -2.142e-01, -2.457e-02, -1.114e-02, -1.969e-01, 4.284e-02, -1.372e-01));
	r += mul(s1_4, M4(-1.865e-01, 2.397e-01, 3.314e-01, -4.463e-01, 1.287e+00, -1.711e-01, -6.663e-01, 8.675e-01, 8.583e-02, -2.647e-01, 3.161e-02, 5.314e-01, -4.133e-02, 2.666e-01, 4.863e-01, 1.547e-01));
	r += mul(s1_5, M4(1.354e-01, -5.164e-02, -1.587e-01, 1.684e-01, -4.966e-03, -2.666e-02, -1.063e-01, -1.655e-01, -2.611e-01, 3.090e-02, 2.159e-02, -3.712e-01, 2.251e-01, 7.053e-03, -1.665e-01, 1.548e-01));
	r += mul(s1_6, M4(5.865e-02, 2.192e-01, 4.219e-02, 2.221e-02, 9.218e-02, 1.806e-01, 2.380e-02, 6.431e-02, -9.503e-02, -3.475e-02, 1.023e-02, -1.403e-01, 9.938e-02, 2.087e-01, 5.414e-02, -9.419e-02));
	r += mul(s1_7, M4(-9.696e-02, -9.746e-02, -8.779e-02, -7.999e-02, -2.415e-01, -5.099e-01, -3.707e-02, 1.117e-01, 1.080e-01, 7.522e-02, -7.531e-02, 8.153e-02, -2.220e-01, 8.932e-02, -8.494e-02, -4.546e-01));
	r += mul(s1_8, M4(-5.579e-02, -4.479e-02, -2.243e-02, -8.705e-02, 5.818e-02, 2.365e-02, 3.097e-02, 1.242e-01, -1.184e-01, 1.703e-02, -1.068e-02, -1.939e-01, -3.817e-02, -4.577e-02, 4.235e-02, 3.834e-02));
	r += V4(6.309e-03, 1.077e-02, 1.233e-02, 5.796e-03);
	return r;
}
void Pass4(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 5
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-DN-out
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-3.510e-02, 3.812e-02, 7.739e-02, 6.164e-02, -3.114e-02, 9.497e-02, 2.494e-02, 7.788e-02, 1.522e-03, -4.423e-02, 1.661e-02, -1.787e-02, 1.898e-01, -4.034e-03, -9.883e-02, -1.226e-01));
	r += mul(s0_1, M4(1.058e-01, -4.163e-02, -4.895e-02, -4.728e-02, -9.058e-02, -2.411e-01, -4.091e-02, -1.444e-01, 1.676e-02, 4.909e-02, 3.344e-02, 5.080e-02, -2.675e-02, 2.095e-01, -4.075e-02, 3.558e-02));
	r += mul(s0_2, M4(-7.446e-02, 2.162e-02, -2.132e-02, 9.899e-03, -1.682e-02, -4.144e-02, 2.021e-02, -1.004e-02, -4.680e-02, -4.040e-02, -1.575e-02, -1.240e-02, 5.674e-02, 8.634e-03, 1.448e-02, -8.131e-03));
	r += mul(s0_3, M4(9.392e-02, 4.659e-02, -9.201e-02, -2.032e-02, -3.925e-02, 3.063e-02, 6.148e-02, 1.089e-01, 1.695e-01, -1.401e-01, -5.386e-02, -1.899e-01, -7.300e-02, -5.676e-02, 3.457e-01, 1.373e-01));
	r += mul(s0_4, M4(4.580e-01, 1.494e-01, 5.137e-01, 8.667e-02, -3.311e-01, -3.193e-01, -1.977e-01, -1.694e-01, 4.851e-01, 7.372e-01, 2.920e-01, 4.037e-01, -3.410e-01, -2.201e-01, -2.787e-01, 1.561e-02));
	r += mul(s0_5, M4(-5.056e-02, 1.788e-01, -6.164e-02, 1.734e-01, -2.529e-03, -1.757e-02, -3.656e-02, -2.193e-02, 3.020e-02, 1.479e-01, -1.054e-02, 7.095e-02, 2.736e-02, -9.852e-02, 4.011e-02, -8.908e-02));
	r += mul(s0_6, M4(-7.793e-03, -6.553e-03, 5.650e-02, 2.179e-02, 4.397e-03, 2.438e-02, -5.285e-02, -3.727e-03, -5.844e-02, -3.100e-02, -6.005e-03, -7.209e-02, 2.523e-02, 1.428e-02, -5.220e-02, -1.874e-02));
	r += mul(s0_7, M4(3.811e-02, -9.080e-03, 2.449e-01, 8.622e-02, -2.814e-02, -2.889e-03, -2.261e-01, -1.499e-01, 3.965e-03, -2.520e-02, 2.222e-01, 2.096e-01, -1.510e-02, 1.642e-02, -1.627e-01, -9.058e-02));
	r += mul(s0_8, M4(-2.882e-02, 1.633e-02, -5.046e-02, 1.049e-01, 9.455e-03, -1.318e-02, 8.369e-03, -5.991e-02, -5.878e-03, -1.485e-02, 1.010e-02, 6.619e-02, 1.825e-02, -1.560e-02, 3.071e-02, -5.798e-02));
	r += mul(s1_0, M4(1.542e-02, 2.462e-02, 7.153e-02, 2.716e-02, 9.065e-02, 9.096e-02, 4.036e-02, 2.642e-02, 4.193e-02, 7.805e-03, 6.580e-03, -1.343e-02, 6.113e-01, -7.007e-02, -2.881e-02, -1.664e-01));
	r += mul(s1_1, M4(9.893e-03, -2.836e-01, 6.984e-02, -1.569e-02, -1.687e-01, -5.957e-01, -1.880e-01, 1.956e-03, 7.887e-02, 6.564e-02, 3.715e-02, -2.624e-03, -2.319e-01, 6.714e-01, -2.959e-01, -1.929e-01));
	r += mul(s1_2, M4(-3.741e-02, 6.901e-02, -1.714e-02, -1.016e-02, -2.881e-01, 4.111e-01, -6.314e-02, 1.076e-01, -7.635e-02, -6.519e-02, -4.580e-03, 3.477e-02, 5.727e-02, -2.392e-02, 1.474e-02, 6.246e-03));
	r += mul(s1_3, M4(-1.479e-01, -1.331e-01, 4.661e-01, 1.824e-02, -4.444e-03, 3.979e-02, 3.390e-02, 5.098e-02, -2.114e-01, -1.343e-01, -1.041e-01, -4.023e-02, -6.325e-02, 4.528e-02, 4.524e-02, -5.859e-02));
	r += mul(s1_4, M4(3.232e-01, 1.899e-01, 2.861e-01, 5.184e-01, -2.273e-01, -4.818e-01, 4.815e-01, -5.626e-01, 1.113e+00, 6.623e-01, 2.802e-01, -1.027e-01, -3.472e-01, -2.075e-01, -2.588e-01, 2.353e-01));
	r += mul(s1_5, M4(-4.928e-02, 1.054e-01, -1.808e-02, 1.577e-01, 7.906e-02, -2.047e-01, -2.362e-01, 8.523e-02, -6.567e-02, 1.974e-01, -1.071e-02, 1.519e-01, 5.693e-02, -1.040e-01, 5.124e-02, -1.314e-01));
	r += mul(s1_6, M4(5.544e-02, 1.261e-02, -2.323e-02, 1.318e-02, 2.209e-02, 2.974e-02, -1.431e-01, 1.355e-02, -1.062e-01, -6.831e-02, 3.835e-03, -4.974e-02, -5.389e-03, 5.322e-04, -1.170e-02, -2.146e-03));
	r += mul(s1_7, M4(6.665e-02, 4.083e-02, 1.629e-01, 1.624e-02, 4.030e-02, 3.825e-02, -2.507e-01, -3.667e-01, -1.870e-01, -4.432e-02, 3.391e-01, 7.051e-01, -2.245e-02, 7.585e-03, -1.793e-01, -5.524e-02));
	r += mul(s1_8, M4(-2.112e-02, 3.134e-02, -4.722e-02, 7.544e-02, -2.547e-02, -2.831e-02, 1.354e-02, 3.563e-03, 1.588e-02, -2.573e-02, -2.384e-02, -1.274e-01, 1.569e-02, -1.796e-02, 2.433e-02, -7.433e-02));
	r += V4(-6.964e-04, -1.830e-03, -1.295e-03, -2.525e-03);
	return tanh(r);
}
void Pass5(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 6
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-DN-shuffle
//!STYLE PS
//!IN t0, INPUT
float4 Pass6(float2 pos) {
	float2 pt = float2(GetInputPt());
	static const float3x3 rgb2yuv = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081};
	static const float3x3 yuv2rgb = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float4 r = 0.0;
	float2 size = float2(GetInputSize());
	float2 f = frac(pos * size);
	float3 yuv = mul(rgb2yuv, INPUT.SampleLevel(SL, pos, 0).rgb);
	int2 i = int2(f * 2.0);
	r.r = t0.SampleLevel(SP, (float2(0.5, 0.5) - f) * pt + pos, 0)[2*i.y + i.x];
	r.r += yuv.r;
	r.a = 1.0;
	r.r = clamp(r, 0.0, 1.0);
	float3 px = mul(yuv2rgb, float3(r.r, yuv.yz));
	return float4(px, 1.0);
}
