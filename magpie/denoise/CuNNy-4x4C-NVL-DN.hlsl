// CuNNy 4x4C BILINEAR CHROMA NVL DN
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

//!MAGPIE EFFECT
//!VERSION 3
//!OUTPUT_WIDTH INPUT_WIDTH * 2
//!OUTPUT_HEIGHT INPUT_HEIGHT * 2

//!TEXTURE
Texture2D INPUT;


//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t1;

//!PASS 1
//!DESC CuNNy-4x4C-BILINEAR-CHROMA-NVL-DN-in
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) (dot(float3(-4.537e-01, -8.604e-01, -2.105e-01), O(INPUT, float2(x, y)).rgb) + 1.352e-01)
float4 f0(float2 pt, float2 pos, min16float s0_0, min16float s0_1, min16float s0_2, min16float s0_3, min16float s0_4, min16float s0_5, min16float s0_6, min16float s0_7, min16float s0_8) {
	V4 r = 0.0;
	r += V4(-1.857e-02, -7.456e-02, 2.202e-01, -6.430e-02) * s0_0;
	r += V4(8.420e-02, -3.389e-01, 3.507e-02, 8.616e-02) * s0_1;
	r += V4(-4.030e-02, 1.814e-01, -2.646e-02, 3.129e-02) * s0_2;
	r += V4(1.305e-02, 3.883e-01, 2.574e-01, 4.247e-01) * s0_3;
	r += V4(4.469e-01, -2.879e-01, -3.975e-01, 7.296e-02) * s0_4;
	r += V4(-4.913e-01, -1.925e-01, -1.023e-02, -1.145e-01) * s0_5;
	r += V4(5.797e-03, 1.831e-01, 4.657e-02, 1.184e-01) * s0_6;
	r += V4(2.562e-02, 1.720e-01, -1.079e-01, -6.348e-01) * s0_7;
	r += V4(-2.269e-02, -2.257e-02, 4.916e-02, 7.984e-02) * s0_8;
	r += V4(2.102e-02, 1.191e-02, -3.446e-03, 9.595e-03);
	return r;
}
void Pass1(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float s0_0 = l0(-1.0, -1.0);
	min16float s0_1 = l0(0.0, -1.0);
	min16float s0_2 = l0(1.0, -1.0);
	min16float s0_3 = l0(-1.0, 0.0);
	min16float s0_4 = l0(0.0, 0.0);
	min16float s0_5 = l0(1.0, 0.0);
	min16float s0_6 = l0(-1.0, 1.0);
	min16float s0_7 = l0(0.0, 1.0);
	min16float s0_8 = l0(1.0, 1.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8);
}
//!PASS 2
//!DESC CuNNy-4x4C-BILINEAR-CHROMA-NVL-DN-conv1
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(6.675e-02, 4.947e-02, 1.926e-01, 1.324e-01, 6.927e-02, 1.403e-02, 8.573e-02, -7.542e-02, 3.920e-02, -4.492e-03, -1.435e-01, 1.435e-02, -1.170e-01, 1.596e-03, -4.309e-02, 4.513e-02));
	r += mul(s0_1, M4(-8.587e-02, -2.727e-01, -7.791e-02, -6.397e-02, -1.089e-02, 4.378e-03, 7.738e-02, -1.274e-01, 1.206e-01, -6.135e-03, -6.399e-02, -2.786e-01, -1.265e-02, 1.644e-01, -1.853e-01, 2.998e-01));
	r += mul(s0_2, M4(3.045e-02, 7.105e-02, -2.941e-02, -7.418e-02, 2.854e-02, 6.815e-02, 1.376e-02, -6.031e-02, -9.155e-02, 1.043e-01, 1.423e-01, -2.920e-01, 1.565e-01, -1.265e-01, -4.628e-03, 2.248e-01));
	r += mul(s0_3, M4(-4.404e-01, 2.140e-01, -9.316e-01, 3.712e-01, -5.671e-02, 1.937e-01, -2.466e-02, 7.398e-02, 4.746e-02, -1.351e-02, 8.182e-03, 3.756e-03, 1.037e-01, -1.709e-01, -2.937e-01, -1.372e-01));
	r += mul(s0_4, M4(-4.010e-01, 5.008e-01, -3.877e-01, 5.917e-01, -4.469e-01, -4.170e-01, 9.297e-02, -7.670e-02, 1.449e-01, -3.318e-01, -3.034e-01, 3.681e-01, 1.919e-01, 4.756e-01, -5.573e-01, 1.392e-01));
	r += mul(s0_5, M4(5.115e-02, -2.944e-01, 5.788e-02, 1.265e-01, 5.910e-02, 4.735e-02, 3.055e-02, -1.801e-01, -2.500e-01, -4.854e-01, 1.990e-01, -4.578e-01, -4.012e-01, 5.891e-01, -1.802e-01, 4.330e-02));
	r += mul(s0_6, M4(3.687e-01, -2.529e-01, -1.813e-01, -2.153e-01, 3.935e-02, 2.570e-02, -7.345e-02, -1.955e-02, -1.302e-01, 6.662e-02, 5.488e-01, -6.953e-03, 5.645e-03, -1.330e-01, -9.541e-02, 8.303e-02));
	r += mul(s0_7, M4(-5.515e-01, -2.356e-02, 6.970e-02, 2.397e-01, -2.293e-01, -8.872e-02, 2.142e-01, 1.659e-01, 2.660e-01, 3.406e-01, 4.598e-01, -5.281e-01, -6.646e-02, -1.582e-01, -1.898e-02, 1.213e-01));
	r += mul(s0_8, M4(-1.315e-01, 2.449e-01, -6.131e-02, -4.274e-02, -8.302e-02, -3.291e-01, 1.877e-01, 7.401e-03, 2.206e-01, -8.208e-02, -3.311e-01, -5.474e-01, 8.756e-03, -1.311e-01, 6.315e-02, 2.269e-02));
	r += mul(s1_0, M4(-2.884e-02, 2.174e-01, 1.428e-01, -2.515e-03, 9.791e-02, -9.813e-04, -1.051e-01, -8.134e-02, -2.113e-02, 1.815e-02, 7.962e-03, 9.904e-03, -1.549e-01, 8.118e-03, 3.869e-02, 9.184e-02));
	r += mul(s1_1, M4(-2.004e-01, -2.561e-01, -7.547e-02, 2.079e-01, -1.713e-02, 1.218e-02, -3.093e-02, -7.726e-02, 1.265e-01, -7.982e-02, -9.058e-02, -1.410e-01, 5.693e-03, 8.798e-02, 1.265e-01, 3.622e-01));
	r += mul(s1_2, M4(-1.498e-02, 8.078e-02, -5.635e-02, -3.122e-02, -8.328e-03, 8.537e-02, -4.352e-02, -1.413e-01, 1.176e-02, 1.913e-01, 1.161e-01, -2.659e-01, 1.183e-01, -1.948e-01, 1.710e-01, 1.818e-02));
	r += mul(s1_3, M4(-4.037e-02, -1.753e-01, 1.870e-01, 5.756e-01, -3.425e-02, 1.382e-01, -1.821e-01, 5.248e-02, 1.421e-01, -4.477e-03, 1.850e-01, 1.194e-02, -3.935e-02, -2.005e-01, 1.051e-01, -3.050e-02));
	r += mul(s1_4, M4(8.294e-02, 6.500e-01, 1.101e-01, -5.098e-01, -2.427e-01, -4.638e-01, -2.378e-01, -7.795e-03, -1.221e-01, -5.573e-02, -4.691e-01, 2.153e-03, -1.450e-02, 5.058e-01, 1.197e-01, -3.103e-02));
	r += mul(s1_5, M4(5.799e-02, -2.914e-01, 1.238e-01, 5.905e-02, 7.650e-02, -8.619e-02, -6.358e-02, -1.037e-01, -3.064e-01, -3.623e-01, 1.838e-02, 1.113e-01, -2.378e-01, 6.503e-01, -9.860e-02, -5.369e-01));
	r += mul(s1_6, M4(4.890e-01, -1.019e-04, -1.922e-02, -2.704e-01, 7.470e-02, 5.526e-02, -2.461e-01, -3.206e-02, -4.203e-02, 5.454e-02, 3.091e-01, -1.119e-01, -7.571e-02, -4.901e-02, -6.685e-03, 8.079e-02));
	r += mul(s1_7, M4(1.908e-01, -3.642e-01, -3.268e-02, 1.960e-01, -1.686e-01, -1.914e-01, 1.807e-02, 2.783e-01, 2.509e-01, 2.619e-01, 2.709e-01, -8.733e-02, -1.229e-01, -1.801e-01, 1.576e-01, 8.277e-02));
	r += mul(s1_8, M4(-3.590e-02, 2.197e-01, -7.153e-02, -1.001e-02, 8.323e-02, -3.377e-01, 3.103e-02, -8.326e-02, 1.586e-01, 1.088e-01, -2.104e-01, -2.315e-01, -9.318e-03, -9.351e-02, 7.058e-02, -5.426e-02));
	r += V4(5.332e-02, -1.035e-02, 7.640e-02, -2.773e-02);
	return r;
}
void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 3
//!DESC CuNNy-4x4C-BILINEAR-CHROMA-NVL-DN-conv2
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(2.788e-01, 5.653e-02, 4.361e-02, 2.428e-01, -1.694e-02, 1.017e-01, -2.814e-01, -6.790e-02, -1.835e-01, -6.228e-03, -5.036e-02, 2.768e-02, 2.032e-02, 5.444e-02, -1.604e-02, 6.910e-02));
	r += mul(s0_1, M4(-2.409e-01, 6.729e-02, 3.399e-01, 1.067e-01, 3.103e-01, -1.111e-01, -2.120e-01, -1.001e-01, 5.326e-02, -1.891e-01, -1.770e-01, -3.337e-02, 9.600e-02, -3.580e-02, -1.107e-01, -5.135e-02));
	r += mul(s0_2, M4(-8.757e-02, -9.769e-02, -7.760e-03, -2.794e-01, -7.022e-02, -1.219e-02, 3.376e-02, -4.294e-02, -4.209e-03, 3.153e-02, -1.210e-01, -6.386e-02, -3.966e-03, -1.721e-02, -2.868e-02, -6.322e-02));
	r += mul(s0_3, M4(-9.492e-02, 5.202e-04, 3.481e-01, 4.549e-01, -3.764e-02, 4.599e-01, -3.768e-01, -3.162e-01, 9.560e-02, -3.916e-02, 9.687e-02, 2.029e-01, 5.636e-02, -5.064e-02, 1.530e-01, 4.220e-01));
	r += mul(s0_4, M4(1.439e-01, 1.029e-01, -1.405e-02, 6.309e-01, -1.469e-01, 3.656e-01, 3.428e-01, 1.631e-01, 2.607e-01, -2.080e-02, 2.764e-01, 5.805e-01, 5.511e-01, 2.138e-02, 2.402e-01, -4.299e-02));
	r += mul(s0_5, M4(4.096e-02, -1.169e-02, -3.137e-02, 1.001e-01, -4.443e-02, 8.545e-03, 2.934e-02, 8.678e-02, -4.649e-02, -3.424e-02, -9.738e-02, -1.460e-01, 4.141e-02, 4.770e-03, 5.333e-02, 9.419e-03));
	r += mul(s0_6, M4(-1.027e-01, -2.182e-02, -2.271e-01, -4.173e-03, -6.650e-02, -2.978e-02, 2.839e-02, -6.364e-02, -1.198e-01, 3.685e-02, -3.213e-01, -4.158e-02, -3.992e-02, -3.328e-02, -1.733e-01, 2.175e-01));
	r += mul(s0_7, M4(-6.069e-02, -4.040e-02, -2.800e-01, -6.727e-02, -8.471e-02, 4.658e-02, -1.600e-01, 7.206e-02, -5.279e-02, -1.492e-02, -3.525e-01, 2.143e-02, -1.325e-01, -1.303e-01, -1.518e-01, 1.004e-02));
	r += mul(s0_8, M4(3.868e-03, 6.791e-03, -8.086e-02, -7.446e-02, -7.105e-02, -3.723e-02, -1.041e-01, -3.075e-02, 2.152e-02, -1.039e-01, 3.895e-02, -1.074e-01, -3.196e-02, -2.736e-02, 3.046e-02, -1.630e-02));
	r += mul(s1_0, M4(-5.621e-02, -1.628e-01, 2.958e-01, 7.306e-02, -2.065e-01, -7.857e-01, -9.020e-02, -1.542e-01, -4.871e-02, 8.468e-02, -3.126e-02, 1.037e-01, 3.921e-02, 1.008e-01, 2.583e-02, 2.919e-02));
	r += mul(s1_1, M4(2.182e-01, 8.263e-02, 1.860e-01, -2.884e-01, -4.403e-01, -1.499e-01, -8.816e-02, -1.183e-02, -1.415e-01, -3.845e-02, -3.271e-01, -1.058e-01, 2.494e-01, -5.723e-02, -8.373e-02, -8.246e-03));
	r += mul(s1_2, M4(4.136e-02, 3.849e-02, 1.016e-01, 6.404e-03, -1.340e-01, -1.700e-02, -7.115e-02, 6.501e-02, -2.018e-02, -2.715e-02, -2.349e-01, -2.822e-02, -4.448e-02, 1.461e-02, 3.458e-03, -5.473e-02));
	r += mul(s1_3, M4(-5.072e-02, 3.738e-02, 4.196e-01, 6.594e-02, -3.554e-02, -6.758e-02, -1.470e-01, -1.470e-01, -1.041e-01, -2.771e-02, -2.218e-01, 2.063e-02, 3.407e-01, 4.753e-01, 1.593e-02, 7.163e-01));
	r += mul(s1_4, M4(-1.154e-02, -7.883e-03, 4.714e-01, 9.393e-02, 1.766e-01, 9.359e-02, 3.609e-01, 1.555e-01, -8.485e-02, -8.851e-02, 8.830e-02, 7.957e-01, 1.193e+00, -1.654e-01, 1.264e-01, 2.589e-01));
	r += mul(s1_5, M4(-4.439e-02, 7.890e-03, 4.017e-02, 5.322e-02, 1.293e-01, -4.165e-02, 4.466e-03, 1.608e-01, 4.580e-01, -1.609e-02, -2.474e-01, -1.825e-01, 7.157e-02, 3.176e-02, 9.423e-02, 6.547e-02));
	r += mul(s1_6, M4(-2.806e-02, 2.164e-02, 1.197e-01, 1.236e-01, -4.044e-02, -1.705e-02, -8.344e-02, -9.440e-03, 6.396e-05, 4.847e-02, 3.170e-03, 1.860e-02, -1.634e-01, 2.220e-02, -1.986e-01, 1.719e-02));
	r += mul(s1_7, M4(4.870e-02, -2.937e-02, -6.268e-03, -3.774e-02, 1.613e-02, -1.327e-03, -3.320e-02, 9.346e-02, -3.594e-02, -2.464e-02, -4.736e-01, -2.025e-01, -4.481e-01, -1.150e-02, -2.003e-01, 6.002e-02));
	r += mul(s1_8, M4(2.192e-02, 1.768e-02, 1.170e-02, -3.960e-02, -5.409e-02, -4.820e-02, -2.939e-02, 1.384e-02, -1.375e-01, 2.180e-02, -5.236e-02, 4.651e-02, -1.103e-01, -2.721e-02, 3.443e-02, -3.559e-02));
	r += V4(-4.844e-03, -6.721e-03, 3.402e-02, -8.230e-02);
	return r;
}
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 4
//!DESC CuNNy-4x4C-BILINEAR-CHROMA-NVL-DN-conv3
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-4.561e-02, 2.455e-02, -7.805e-03, 5.464e-02, -9.204e-02, 2.700e-02, -8.399e-02, 1.214e-02, -4.233e-02, 2.099e-02, -4.198e-02, 3.830e-02, 1.150e-01, -3.368e-02, -4.903e-01, 1.462e-01));
	r += mul(s0_1, M4(-2.357e-02, 3.183e-02, 4.570e-02, -6.265e-02, 2.111e-02, 3.325e-02, -5.193e-02, 7.366e-03, -3.576e-02, -1.567e-02, -2.366e-02, -2.180e-02, -5.069e-02, 1.076e-01, -5.653e-02, 4.184e-02));
	r += mul(s0_2, M4(-1.109e-01, 3.048e-02, -5.422e-03, 4.862e-02, 1.661e-02, 9.104e-02, -6.191e-02, 6.025e-02, 2.666e-01, -7.081e-02, 1.617e-01, -5.173e-02, -1.212e-01, 1.666e-02, 3.090e-02, -4.830e-02));
	r += mul(s0_3, M4(4.868e-03, -1.125e-02, -2.677e-01, 4.078e-03, -3.301e-02, 8.371e-02, -9.223e-03, -4.225e-02, 1.067e-01, -6.519e-03, 8.429e-02, -1.407e-01, 1.484e-01, 7.961e-02, -1.332e+00, 2.459e-01));
	r += mul(s0_4, M4(1.233e-01, 7.485e-01, -1.052e-01, 2.744e-01, -9.816e-02, -2.620e-02, -1.092e+00, 1.653e-01, -5.548e-01, 6.712e-03, 4.647e-02, -1.764e-02, 3.663e-01, -6.111e-01, 4.918e-01, -4.652e-01));
	r += mul(s0_5, M4(-1.208e-01, 8.364e-03, 9.403e-02, -1.636e-01, -2.773e-01, -3.681e-01, 1.677e-01, -3.558e-01, 1.508e-01, 3.347e-02, -2.220e-02, 7.498e-02, -2.194e-02, -2.756e-02, -2.277e-01, 1.249e-01));
	r += mul(s0_6, M4(-4.474e-02, -3.029e-02, 1.437e-01, 2.282e-02, -1.311e-03, 3.169e-03, -1.579e-02, -6.651e-02, -1.172e-01, 2.983e-02, 2.925e-02, 6.074e-02, 1.998e-01, 4.112e-02, -1.141e-01, -1.775e-01));
	r += mul(s0_7, M4(8.524e-02, -2.169e-02, -1.196e-02, -1.880e-01, 3.292e-01, -7.046e-02, 3.031e-01, -2.859e-01, -5.876e-02, -5.455e-02, 1.121e-02, -1.489e-01, 6.227e-02, -5.583e-02, 9.680e-02, 2.214e-01));
	r += mul(s0_8, M4(9.048e-03, 5.205e-02, 9.985e-02, -3.680e-02, 1.567e-01, 1.577e-01, 6.255e-02, 2.271e-01, -1.127e-02, 1.155e-02, -2.277e-02, 8.279e-03, 7.423e-02, -2.690e-02, 3.889e-02, -5.155e-02));
	r += mul(s1_0, M4(-1.190e-02, 3.489e-02, 1.576e-02, -2.396e-02, -1.446e-03, -7.842e-02, -7.276e-02, 8.818e-02, -2.400e-01, 1.435e-03, -1.922e-01, -4.268e-02, -3.551e-02, 5.433e-02, 9.263e-03, -1.014e-02));
	r += mul(s1_1, M4(-4.132e-02, -5.527e-04, -3.302e-03, -1.145e-01, -4.681e-02, 2.576e-02, -3.553e-01, 1.830e-01, 2.864e-01, 1.600e-01, 6.913e-02, -3.609e-01, -4.027e-03, 4.971e-02, 1.999e-02, 1.163e-02));
	r += mul(s1_2, M4(-5.122e-03, 7.787e-03, -2.049e-02, 1.868e-02, -3.875e-01, -1.914e-02, 3.724e-02, 1.062e-01, -3.114e-04, -4.920e-02, -8.587e-02, -8.622e-02, 3.613e-02, 4.822e-02, 2.636e-02, 5.962e-02));
	r += mul(s1_3, M4(2.423e-01, -1.121e-01, -2.820e-01, 2.258e-01, 4.479e-02, -1.059e-01, -5.727e-02, -1.479e-02, 5.343e-02, 6.799e-02, 9.150e-02, -2.018e-01, -1.616e-01, 8.033e-02, 2.604e-02, 4.309e-02));
	r += mul(s1_4, M4(4.357e-01, 6.621e-01, -2.114e-01, 2.610e-01, 3.455e-01, -1.789e-01, -1.901e-01, -6.808e-01, -3.369e-01, -3.141e-01, 4.873e-01, 6.102e-01, -1.060e-01, 7.800e-02, 1.533e-01, -2.593e-01));
	r += mul(s1_5, M4(-8.281e-02, -9.645e-02, 1.601e-02, -9.588e-02, -1.779e-01, 8.395e-02, 4.722e-01, -3.507e-01, 1.155e-01, 2.039e-01, -1.897e-02, -1.082e-01, 9.247e-02, -1.389e-01, 2.273e-02, -2.332e-02));
	r += mul(s1_6, M4(1.219e-01, -4.196e-02, 1.762e-01, 5.096e-02, 1.364e-02, 4.752e-02, -6.281e-02, -2.765e-01, 1.145e-01, 2.484e-02, -1.247e-01, -3.998e-02, -1.958e-02, -1.657e-02, 3.198e-02, -6.322e-02));
	r += mul(s1_7, M4(3.424e-01, -1.985e-02, 1.019e-01, -2.046e-01, 2.785e-01, -1.910e-01, -2.675e-02, -1.214e+00, -3.233e-02, -3.875e-02, -8.167e-02, -2.485e-01, -1.577e-01, 3.784e-02, -1.662e-03, 1.313e-01));
	r += mul(s1_8, M4(7.705e-02, 1.243e-01, -2.974e-02, 1.392e-01, -1.897e-01, -3.962e-01, 3.218e-01, -3.903e-01, -5.014e-02, -3.553e-02, 2.385e-03, -2.191e-01, 4.971e-02, 9.449e-02, -3.098e-02, 2.272e-02));
	r += V4(-2.609e-02, -3.455e-02, 1.127e-04, -7.489e-03);
	return r;
}
void Pass4(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 5
//!DESC CuNNy-4x4C-BILINEAR-CHROMA-NVL-DN-conv4
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(1.684e-02, 1.134e-02, 2.372e-02, 2.453e-02, -2.042e-02, 5.382e-02, 2.509e-02, 3.485e-02, 3.613e-02, 5.596e-02, -7.843e-03, 4.481e-02, -1.687e-03, -7.005e-02, -1.128e-01, -5.510e-02));
	r += mul(s0_1, M4(7.597e-02, 1.929e-01, 3.861e-01, 3.799e-01, -1.291e-02, 1.337e-03, 1.683e-02, 1.726e-01, 3.236e-02, 5.380e-02, -2.889e-01, -3.935e-01, -7.880e-02, -3.440e-02, -3.680e-02, -2.043e-01));
	r += mul(s0_2, M4(3.154e-01, 2.566e-01, -1.479e-01, 2.603e-02, -2.791e-02, 9.254e-02, -1.613e-02, -5.935e-02, 3.429e-02, 5.134e-02, -1.567e-01, -3.276e-01, 2.674e-02, -2.968e-03, 1.945e-02, 9.891e-02));
	r += mul(s0_3, M4(-7.963e-02, 1.262e-02, -9.479e-02, 2.521e-02, 6.665e-02, -5.141e-02, -5.106e-01, -6.078e-01, -5.784e-02, 9.783e-02, -3.818e-01, 6.034e-02, -2.705e-02, 1.102e-01, -6.519e-02, 7.275e-02));
	r += mul(s0_4, M4(-3.312e-02, -5.754e-01, 4.003e-01, -4.988e-01, -3.550e-02, 3.716e-01, -4.794e-02, -4.128e-01, 2.945e-01, -5.959e-01, -8.640e-01, -2.427e+00, 1.136e-01, -1.427e-01, 1.365e-01, 4.503e-02));
	r += mul(s0_5, M4(5.503e-02, 5.878e-01, -5.795e-02, 1.431e-01, 1.343e-01, -7.225e-02, -3.148e-02, -7.253e-02, -9.460e-01, -9.439e-01, -9.787e-02, 9.708e-03, -3.927e-01, -5.891e-02, -1.339e-02, 1.792e-02));
	r += mul(s0_6, M4(-3.213e-02, -4.170e-03, -6.935e-02, -1.345e-01, -9.305e-03, 2.301e-02, 3.291e-01, 4.541e-01, 8.352e-03, 1.190e-01, 3.034e-03, 1.509e-01, 1.052e-02, 3.601e-02, -2.794e-05, 2.744e-03));
	r += mul(s0_7, M4(-3.377e-02, -2.986e-01, -3.244e-02, -1.904e-01, 8.707e-02, 1.782e-01, 2.039e-01, 2.030e-01, 2.676e-01, -1.003e-02, -1.372e-01, -2.415e-01, 5.696e-02, -1.811e-02, -5.892e-02, -1.411e-01));
	r += mul(s0_8, M4(-1.534e-01, 8.371e-02, -5.689e-02, 1.156e-01, -5.693e-03, 9.384e-02, -1.455e-02, 6.758e-02, -1.495e-01, -9.235e-02, 3.579e-03, -7.211e-02, 4.966e-02, -7.085e-03, -2.860e-02, 7.349e-03));
	r += mul(s1_0, M4(1.033e-02, -1.626e-02, 1.911e-02, 8.180e-02, -5.139e-02, -3.737e-02, -9.204e-02, -2.672e-02, -6.881e-03, 4.334e-04, -5.398e-02, -1.753e-02, 8.406e-03, 9.351e-02, -2.654e-01, -1.120e-02));
	r += mul(s1_1, M4(-4.647e-02, -6.055e-03, -1.481e-03, -3.220e-02, -1.101e-01, -2.012e-01, -4.058e-02, 1.712e-02, -5.168e-02, -3.844e-02, 9.367e-02, -2.658e-02, -1.636e-01, -6.245e-02, -1.406e-01, -5.503e-01));
	r += mul(s1_2, M4(1.136e-02, 1.171e-02, 1.434e-02, 3.218e-02, -1.066e-01, -6.038e-02, -1.530e-02, -9.008e-02, 1.032e-01, 1.213e-01, 5.129e-03, 7.711e-02, 5.104e-02, -4.139e-02, -7.400e-02, -5.582e-02));
	r += mul(s1_3, M4(1.140e-01, 1.149e-01, 1.013e-01, 1.062e-01, -3.143e-02, -3.636e-03, 3.339e-02, 2.458e-01, -1.251e-02, 3.065e-02, 5.505e-02, 1.130e-01, -7.593e-02, 1.607e-01, -8.281e-02, 1.498e-01));
	r += mul(s1_4, M4(3.940e-01, 3.260e-01, 1.096e-01, 1.479e-01, 3.613e-01, 7.190e-01, -1.018e-01, -3.874e-01, 1.616e-01, 1.605e-02, -2.153e-01, -3.786e-01, 5.377e-02, -9.082e-01, 1.250e+00, 4.443e-01));
	r += mul(s1_5, M4(5.792e-02, 2.046e-01, -4.642e-02, -6.183e-02, 7.689e-03, -2.361e-01, 2.779e-02, 2.833e-02, -6.351e-01, -3.723e-01, -1.034e-02, -7.351e-02, -3.404e-01, 2.549e-01, -8.157e-03, 1.145e-01));
	r += mul(s1_6, M4(-3.747e-02, -4.258e-02, 2.463e-03, -2.473e-02, -1.138e-02, -4.327e-02, 1.609e-01, 1.919e-01, 2.222e-02, 9.062e-03, -3.335e-02, -3.399e-02, 3.475e-02, 1.579e-02, -8.704e-03, -6.986e-02));
	r += mul(s1_7, M4(-9.243e-02, 1.911e-02, -9.838e-02, -7.511e-02, 9.237e-02, 3.431e-03, 1.348e-01, 3.901e-02, -1.567e-02, 4.494e-02, -4.651e-02, -6.777e-02, 4.660e-02, 1.150e-01, -1.730e-01, -9.351e-02));
	r += mul(s1_8, M4(-2.004e-02, -4.078e-02, -3.132e-02, -4.723e-03, -1.583e-01, -3.158e-02, 1.192e-02, 2.463e-02, 4.422e-02, -2.295e-02, -2.240e-02, -8.316e-03, 1.160e-01, 3.610e-02, 3.702e-04, -5.749e-02));
	r += V4(-6.200e-03, 1.783e-03, -3.260e-03, -9.847e-03);
	return r;
}
void Pass5(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 6
//!DESC CuNNy-4x4C-BILINEAR-CHROMA-NVL-DN-out
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(8.847e-02, 2.413e-02, 1.811e-01, 1.274e-01, -6.963e-02, 3.660e-03, -5.136e-02, -2.131e-02, -1.017e-02, -1.992e-03, -7.587e-02, -5.017e-02, 2.216e-02, 2.106e-02, 7.011e-02, 6.018e-02));
	r += mul(s0_1, M4(-1.651e-02, -2.279e-01, -9.459e-02, -3.990e-02, -6.567e-02, 1.753e-01, 6.208e-02, 2.978e-02, -1.905e-04, -5.480e-02, -1.754e-01, -2.063e-01, -1.571e-02, 4.872e-02, 6.569e-02, 9.253e-02));
	r += mul(s0_2, M4(-1.674e-02, 7.729e-02, -2.948e-03, 4.016e-02, 1.067e-02, -8.693e-02, -1.290e-02, -4.768e-02, 1.176e-01, 6.053e-02, -1.172e-01, -1.512e-01, 1.447e-02, 5.061e-02, 4.075e-03, 2.602e-03));
	r += mul(s0_3, M4(4.541e-02, -5.176e-02, -1.901e-01, -3.966e-02, 8.623e-03, 4.285e-02, 8.702e-02, 8.188e-02, 1.288e-02, 1.655e-02, 1.122e-01, 8.423e-02, -2.333e-02, -2.382e-02, -1.090e-01, -8.574e-02));
	r += mul(s0_4, M4(2.221e-01, -1.049e-02, -3.853e-02, -1.082e+00, 4.619e-01, 6.191e-01, -2.146e-01, 6.740e-01, 4.982e-01, 1.037e-01, 6.953e-01, 3.315e-01, -5.176e-01, -4.072e-03, -5.105e-01, -2.959e-01));
	r += mul(s0_5, M4(-6.413e-02, 1.470e-01, -6.957e-02, 1.558e-01, 4.308e-02, -3.881e-02, 5.550e-02, -1.325e-01, -9.816e-01, -1.665e-01, 7.167e-02, 4.362e-01, 1.457e-01, -6.701e-01, 4.545e-01, 3.046e-01));
	r += mul(s0_6, M4(-3.749e-02, 2.185e-02, -1.850e-02, 4.602e-02, 1.995e-02, 1.970e-02, -6.861e-02, -8.735e-03, 2.285e-02, 1.188e-02, -6.182e-02, -2.804e-02, -1.431e-02, 7.942e-04, 2.179e-02, 1.788e-02));
	r += mul(s0_7, M4(-9.505e-02, -8.032e-02, -2.111e-02, 1.123e-01, -2.460e-03, 2.808e-02, 1.460e-01, -2.606e-02, 5.343e-02, 5.798e-02, -9.587e-03, -1.083e-01, -2.396e-02, -4.279e-02, 3.307e-02, 5.255e-02));
	r += mul(s0_8, M4(-3.309e-02, 4.342e-03, -4.114e-02, 1.728e-02, 1.727e-02, -2.751e-02, 1.859e-02, -5.778e-02, 6.616e-02, -5.990e-02, -1.510e-01, -1.008e-01, 5.399e-02, 1.199e-01, 2.457e-02, -4.279e-02));
	r += mul(s1_0, M4(2.123e-02, 5.580e-02, 1.851e-01, 1.331e-01, 2.242e-03, -1.987e-02, -7.102e-02, -3.576e-02, -3.723e-02, -4.765e-03, -3.032e-02, -3.126e-02, 7.055e-03, 2.384e-02, 8.172e-02, 7.006e-02));
	r += mul(s1_1, M4(9.285e-03, -1.949e-01, -7.531e-02, -9.181e-02, -2.510e-02, 1.512e-01, 4.186e-02, 6.627e-02, 4.480e-02, -3.517e-02, -2.398e-01, -2.009e-01, 1.333e-02, -1.064e-02, 9.980e-02, 7.347e-02));
	r += mul(s1_2, M4(4.675e-02, 1.091e-01, 1.564e-02, 2.402e-02, -3.675e-02, -7.007e-02, -2.201e-02, -1.806e-02, -5.034e-02, 4.902e-02, -5.663e-02, -2.016e-02, 6.422e-02, 1.541e-02, 6.189e-02, 5.430e-02));
	r += mul(s1_3, M4(-6.397e-04, -6.460e-02, -6.488e-02, -8.710e-02, 6.500e-02, 3.123e-02, 1.114e-01, 8.769e-02, -1.088e-02, 2.423e-02, 8.535e-02, 8.862e-02, -9.313e-03, -3.391e-02, -1.480e-01, -9.666e-02));
	r += mul(s1_4, M4(-1.970e-01, -1.409e-01, -2.367e-01, -2.552e-01, 3.057e-01, 3.467e-01, 3.116e-01, 3.786e-01, 2.057e-01, 2.646e-01, 6.030e-01, 4.463e-01, -2.397e-01, -1.832e-01, -4.640e-01, -3.544e-01));
	r += mul(s1_5, M4(-2.052e-02, 5.596e-02, 3.747e-02, 7.305e-02, 2.741e-02, -3.837e-02, -1.579e-02, -1.891e-02, -9.697e-02, -2.505e-01, -1.327e-01, -9.836e-02, 1.549e-02, 1.000e-01, 5.344e-02, -2.108e-02));
	r += mul(s1_6, M4(2.833e-02, 1.304e-02, 7.581e-02, 3.365e-02, 8.358e-03, 1.505e-02, -3.616e-02, -1.664e-02, 1.238e-02, 1.015e-02, -1.023e-01, -1.801e-02, -2.839e-03, -1.162e-02, 4.724e-02, 7.791e-04));
	r += mul(s1_7, M4(-4.489e-02, -3.078e-02, -1.183e-02, 2.783e-02, 2.072e-02, 3.969e-02, 3.691e-02, 3.035e-02, 2.882e-03, 3.210e-02, 4.602e-02, 1.001e-02, -2.741e-02, -3.846e-02, -5.468e-02, -2.814e-02));
	r += mul(s1_8, M4(-3.884e-06, -1.913e-02, -1.169e-02, 8.625e-03, 1.034e-03, -5.513e-03, -4.100e-03, -3.930e-02, -4.919e-02, -7.669e-02, -4.738e-02, -9.739e-02, 2.069e-02, 3.478e-02, 2.508e-02, 6.323e-02));
	r += V4(6.503e-04, 1.702e-03, 4.184e-04, 1.422e-03);
	return tanh(r);
}
void Pass6(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 7
//!DESC CuNNy-4x4C-BILINEAR-CHROMA-NVL-DN-shuffle
//!STYLE PS
//!IN t1, INPUT
float4 Pass7(float2 pos) {
	float2 pt = float2(GetInputPt());
	static const float3x3 rgb2yuv = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081};
	static const float3x3 yuv2rgb = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float4 r = 0.0;
	float2 size = float2(GetInputSize());
	float2 f = frac(pos * size);
	float3 yuv = mul(rgb2yuv, INPUT.SampleLevel(SL, pos, 0).rgb);
	int2 i = int2(f * 2.0);
	r.r = t1.SampleLevel(SP, (float2(0.5, 0.5) - f) * pt + pos, 0)[2*i.y + i.x];
	r.r += yuv.r;
	r.a = 1.0;
	r.r = clamp(r, 0.0, 1.0);
	float3 px = mul(yuv2rgb, float3(r.r, yuv.yz));
	return float4(px, 1.0);
}
