// CuNNy 2x4C BILINEAR CHROMA NVL
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

//!MAGPIE EFFECT
//!VERSION 3
//!OUTPUT_WIDTH INPUT_WIDTH * 2
//!OUTPUT_HEIGHT INPUT_HEIGHT * 2

//!TEXTURE
Texture2D INPUT;

//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D in_0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D conv1_0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D conv2_0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D out_0;

//!PASS 1
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-NVL-in
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT in_0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) (dot(float3(1.32277250289917, 2.3932249546051025, 0.5770169496536255), O(INPUT, float2(x, y)).rgb) + -4.203126907348633)
float4 f0(float2 pt, float2 pos, min16float s0_0, min16float s0_1, min16float s0_2, min16float s0_3, min16float s0_4, min16float s0_5, min16float s0_6, min16float s0_7, min16float s0_8) {
	min16float4 r = 0.0;
	r += min16float4(0.061251189559698105, 0.010694422759115696, -0.007273571100085974, -0.0010631404584273696) * s0_0;
	r += min16float4(0.06057833880186081, 0.3207276463508606, -0.07153341919183731, -0.0021839921828359365) * s0_1;
	r += min16float4(-0.04609609395265579, 0.10010640323162079, 0.01979539915919304, 0.00941589567810297) * s0_2;
	r += min16float4(-0.2075200229883194, 0.006583419628441334, -0.1948241889476776, 0.006823271047323942) * s0_3;
	r += min16float4(0.45652684569358826, -0.47802823781967163, 0.007247832138091326, 0.3896483778953552) * s0_4;
	r += min16float4(-0.2587890625, 0.04791498929262161, -0.11060484498739243, -0.3941090404987335) * s0_5;
	r += min16float4(-0.05333399400115013, -0.022769061848521233, 0.20148643851280212, 0.0014715709257870913) * s0_6;
	r += min16float4(-0.04572679102420807, 0.03430194780230522, 0.04113901033997536, -0.014889540150761604) * s0_7;
	r += min16float4(0.031077513471245766, -0.018122389912605286, 0.1164841502904892, 0.005380405578762293) * s0_8;
	r += min16float4(-0.004464823752641678, -0.003585277358070016, 0.0006941570318304002, -0.0019488135585561395);
	return r;
}
void Pass1(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float s0_0 = l0(-1.0, -1.0);
	min16float s0_1 = l0(0.0, -1.0);
	min16float s0_2 = l0(1.0, -1.0);
	min16float s0_3 = l0(-1.0, 0.0);
	min16float s0_4 = l0(0.0, 0.0);
	min16float s0_5 = l0(1.0, 0.0);
	min16float s0_6 = l0(-1.0, 1.0);
	min16float s0_7 = l0(0.0, 1.0);
	min16float s0_8 = l0(1.0, 1.0);
	in_0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8);
}
//!PASS 2
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-NVL-conv1
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN in_0
//!OUT conv1_0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) O(in_0, float2(x, y))
float4 f0(float2 pt, float2 pos, min16float4 s0_0, min16float4 s0_1, min16float4 s0_2, min16float4 s0_3, min16float4 s0_4, min16float4 s0_5, min16float4 s0_6, min16float4 s0_7, min16float4 s0_8, min16float4 s1_0, min16float4 s1_1, min16float4 s1_2, min16float4 s1_3, min16float4 s1_4, min16float4 s1_5, min16float4 s1_6, min16float4 s1_7, min16float4 s1_8) {
	min16float4 r = 0.0;
	r += mul(s0_0, min16float4x4(-0.0016677811508998275, -0.10913082957267761, 0.00901386421173811, -0.03575409576296806, -0.0027330496814101934, 0.07481361925601959, 0.012919599190354347, 0.03200627863407135, 0.032104697078466415, 0.09248244017362595, -0.02617533691227436, 0.12669309973716736, -0.03842279687523842, 0.12158789485692978, 0.011641439981758595, 0.08188335597515106));
	r += mul(s0_1, min16float4x4(-0.04924008995294571, 0.07910139113664627, 0.047814350575208664, 0.08939223736524582, 0.14607395231723785, 0.019335215911269188, -0.028010215610265732, 0.019271638244390488, 0.38214781880378723, 0.12434256821870804, -0.21624203026294708, 0.23981818556785583, -0.08776033669710159, -0.1402449905872345, -0.11640036851167679, -0.13331322371959686));
	r += mul(s0_2, min16float4x4(-0.07421800494194031, -0.08019585907459259, 0.023100746795535088, -0.14013411104679108, -0.06931599229574203, -0.007138658314943314, 0.0033909869380295277, 0.03126712888479233, 0.037221379578113556, 0.06642531603574753, 0.06036917120218277, 0.041904598474502563, 0.09234915673732758, 0.03961027041077614, -0.021471219137310982, 0.0958302840590477));
	r += mul(s0_3, min16float4x4(-0.08498036116361618, -0.07531202584505081, -0.05513354018330574, 0.07813986390829086, 0.08589167147874832, 0.19873102009296417, -0.06715615838766098, 0.13925449550151825, 0.05994943529367447, 0.001549635548144579, 0.05212690308690071, -0.03599606826901436, -0.2534223198890686, -0.37780892848968506, 0.02436428889632225, -0.3268131911754608));
	r += mul(s0_4, min16float4x4(0.26531755924224854, 0.08847718685865402, -0.05675578862428665, 0.5623632073402405, -0.2961978018283844, -0.19287122786045074, 0.11010610312223434, -0.4619142711162567, 0.012419326230883598, 0.04190172255039215, -0.09318720549345016, 0.10165833681821823, 0.2249806970357895, -0.17422711849212646, 0.1342761516571045, -0.642530083656311));
	r += mul(s0_5, min16float4x4(-0.2234664261341095, -0.2317776083946228, -0.043941475450992584, -0.27833160758018494, 0.009792370721697807, -0.07352213561534882, 0.00393633684143424, -0.01655576191842556, -0.20961569249629974, -0.1815188229084015, -0.0025485518854111433, -0.25683608651161194, 0.21554327011108398, 0.14990222454071045, -0.0012163128703832626, 0.2276509553194046));
	r += mul(s0_6, min16float4x4(0.009510206058621407, 0.09496916085481644, -0.0029168580658733845, -0.07446274906396866, -0.0163287166506052, 0.18012161552906036, 0.05851137638092041, 0.2515895962715149, -0.04221314564347267, 0.025699038058519363, 0.0014688479714095592, 0.0042329407297074795, -0.1567031741142273, -0.0041876379400491714, -0.1839670091867447, 0.17041054368019104));
	r += mul(s0_7, min16float4x4(-0.08492966741323471, 0.0976165384054184, 0.4218059480190277, -0.18193037807941437, 0.37208473682403564, -0.011095530353486538, -0.5317240953445435, -0.07424690574407578, 0.03219602257013321, -0.030822277069091797, -0.014985863119363785, -0.06787465512752533, 0.09983017295598984, -0.02040020190179348, -0.08927502483129501, 0.08570128679275513));
	r += mul(s0_8, min16float4x4(-0.028863778337836266, -0.14111720025539398, -0.28030574321746826, -0.16457028687000275, 0.3213179111480713, -0.14158156514167786, 0.10090713202953339, -0.15282686054706573, 0.03137452155351639, -0.016298051923513412, -0.023184292018413544, 0.00856668408960104, -0.03797440230846405, 0.015922140330076218, 0.15842711925506592, -0.0038675672840327024));
	r += mul(s1_0, min16float4x4(0.006417275872081518, 0.06714186817407608, -0.005690807476639748, 0.04207513481378555, -0.013987038284540176, -0.04489750415086746, 0.0043113091960549355, -0.011677478440105915, -0.05402388796210289, -0.13623133301734924, 0.012669661082327366, -0.2065689116716385, -0.014684541150927544, 0.01861945167183876, -0.006325304973870516, -0.05252460390329361));
	r += mul(s1_1, min16float4x4(-0.01420802902430296, 0.02349904738366604, 0.06647182255983353, -0.1505192220211029, -0.14796356856822968, -0.11645355820655823, 0.012064590118825436, -0.07385939359664917, -0.22630569338798523, -0.3234533965587616, -0.06438600271940231, -0.11797875910997391, 0.018468856811523438, 0.14944003522396088, -0.015930669382214546, 0.10768790543079376));
	r += mul(s1_2, min16float4x4(0.12389107048511505, 0.02563336491584778, 0.10574780404567719, 0.011294908821582794, 0.060050297528505325, 0.0340539924800396, -0.027832359075546265, 0.008788630366325378, -0.10776368528604507, 0.007642300799489021, -0.004631008021533489, -0.1511288434267044, -0.08834131062030792, -0.05089994892477989, -0.1081542819738388, -0.042555417865514755));
	r += mul(s1_3, min16float4x4(0.048540111631155014, 0.031372200697660446, 0.09729082882404327, -0.1109127476811409, -0.19933851063251495, 0.01327434554696083, 0.1426689326763153, -0.1955457329750061, 0.025166906416416168, -0.14588531851768494, -0.12841741740703583, -0.02513084001839161, -0.12893497943878174, 0.3200993239879608, -0.25956520438194275, -0.04085354879498482));
	r += mul(s1_4, min16float4x4(-0.009339731186628342, -0.0017289721872657537, 0.07885714620351791, 0.06397377699613571, -0.08925051242113113, 0.23205648362636566, -0.06680279970169067, -0.011559617705643177, -0.12675070762634277, -0.08209382742643356, -0.29239413142204285, -0.015043788589537144, -0.26260513067245483, -0.24737359583377838, 0.035965487360954285, -0.3232419788837433));
	r += mul(s1_5, min16float4x4(0.16647258400917053, 0.2651015818119049, 0.02403639256954193, 0.23376967012882233, -0.09795223921537399, 0.06397215276956558, -0.09907079488039017, 0.005226014647632837, 0.04154170677065849, 0.21532118320465088, -0.2705068290233612, 0.29980430006980896, -0.19287095963954926, -0.20476870238780975, 0.030284877866506577, -0.24062374234199524));
	r += mul(s1_6, min16float4x4(-0.04040571302175522, -0.07885952293872833, -0.0924188420176506, 0.09317564964294434, 0.13413028419017792, -0.10961893945932388, -0.015010246075689793, -0.13619078695774078, 0.021113146096467972, -0.03250640258193016, -0.055077262222766876, 0.020318446680903435, 0.15674878656864166, -0.032179225236177444, -0.21162134408950806, -0.07634709775447845));
	r += mul(s1_7, min16float4x4(0.015803417190909386, -0.0024713389575481415, -0.1691625565290451, 0.11261890828609467, -0.04926387220621109, -0.3186873495578766, 0.01925196498632431, -0.2417580634355545, -0.015901092439889908, -0.01597404293715954, 0.04791922867298126, 0.025609400123357773, 0.05115103721618652, 0.0012520878808572888, -0.21802550554275513, 0.11394539475440979));
	r += mul(s1_8, min16float4x4(-0.13428746163845062, 0.15431226789951324, 0.2626718282699585, 0.16913019120693207, -0.08569276332855225, 0.03816424310207367, 0.09899501502513885, 0.0012979371240362525, 0.0023071584291756153, -0.012232307344675064, -0.04016939550638199, 0.013969541527330875, 0.13419312238693237, -0.006911817938089371, -0.2398204356431961, 0.02926349826157093));
	r += min16float4(0.0006315436330623925, -0.0038684827741235495, -0.0016737240366637707, 0.0005366383120417595);
	return r;
}
void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float4 s0_0 = l0(-1.0, -1.0);
	min16float4 s0_1 = l0(0.0, -1.0);
	min16float4 s0_2 = l0(1.0, -1.0);
	min16float4 s0_3 = l0(-1.0, 0.0);
	min16float4 s0_4 = l0(0.0, 0.0);
	min16float4 s0_5 = l0(1.0, 0.0);
	min16float4 s0_6 = l0(-1.0, 1.0);
	min16float4 s0_7 = l0(0.0, 1.0);
	min16float4 s0_8 = l0(1.0, 1.0);
	min16float4 s1_0 = max(-s0_0, 0.0);
	min16float4 s1_1 = max(-s0_1, 0.0);
	min16float4 s1_2 = max(-s0_2, 0.0);
	min16float4 s1_3 = max(-s0_3, 0.0);
	min16float4 s1_4 = max(-s0_4, 0.0);
	min16float4 s1_5 = max(-s0_5, 0.0);
	min16float4 s1_6 = max(-s0_6, 0.0);
	min16float4 s1_7 = max(-s0_7, 0.0);
	min16float4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	conv1_0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 3
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-NVL-conv2
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN conv1_0
//!OUT conv2_0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) O(conv1_0, float2(x, y))
float4 f0(float2 pt, float2 pos, min16float4 s0_0, min16float4 s0_1, min16float4 s0_2, min16float4 s0_3, min16float4 s0_4, min16float4 s0_5, min16float4 s0_6, min16float4 s0_7, min16float4 s0_8, min16float4 s1_0, min16float4 s1_1, min16float4 s1_2, min16float4 s1_3, min16float4 s1_4, min16float4 s1_5, min16float4 s1_6, min16float4 s1_7, min16float4 s1_8) {
	min16float4 r = 0.0;
	r += mul(s0_0, min16float4x4(-0.0332067608833313, 0.2666013836860657, 0.18528136610984802, 0.20181673765182495, -0.002641867147758603, -0.02052915096282959, -0.017824320122599602, -0.006925980094820261, -0.0009236415498889983, -0.1463879495859146, 0.0033708999399095774, 0.09747961163520813, 0.020059451460838318, -0.16301952302455902, -0.01514501217752695, -0.04364585876464844));
	r += mul(s0_1, min16float4x4(-0.01740178093314171, 0.11261488497257233, -0.04384531080722809, -0.055559899657964706, 0.005145362112671137, 0.008096372708678246, 0.014142930507659912, -0.05038759112358093, 0.23172461986541748, -0.8437383770942688, -0.38508036732673645, -0.08523496240377426, 0.11160000413656235, -0.2190820872783661, -0.010793544352054596, 0.05116324499249458));
	r += mul(s0_2, min16float4x4(0.01075429655611515, 0.03815745562314987, 0.019094347953796387, -0.004480012226849794, 6.184649464557879e-06, 0.04196887090802193, 0.02801155298948288, 0.04793437570333481, 0.2519398033618927, -0.0704774484038353, -0.10820029675960541, 0.049622878432273865, 0.03647340461611748, -0.0730680450797081, -0.023025065660476685, 0.02157849445939064));
	r += mul(s0_3, min16float4x4(-0.04383068531751633, 0.018034031614661217, 0.07836870849132538, 0.042360611259937286, -0.005062607116997242, 0.03607633709907532, -0.015586401335895061, 0.028087656944990158, -0.02231771871447563, -0.22134676575660706, -0.24651408195495605, -0.08163996040821075, 0.023264529183506966, -0.15771517157554626, -0.10475209355354309, 0.06299404799938202));
	r += mul(s0_4, min16float4x4(-0.45800548791885376, -0.03046615980565548, 0.05255874618887901, -0.43406054377555847, 0.10232982039451599, -0.40799254179000854, 0.0700511783361435, -0.0859769880771637, 0.5044849514961243, -0.2367876172065735, -0.2733868360519409, 0.24301232397556305, 0.5861445665359497, -0.271442711353302, -0.8510413765907288, -1.3344842195510864));
	r += mul(s0_5, min16float4x4(0.020640091970562935, 0.02015557698905468, 0.028353925794363022, -0.05206083133816719, 0.08374007046222687, 0.026457825675606728, 0.18101289868354797, 0.11538410186767578, 0.5253900289535522, 0.05664486065506935, 0.033082421869039536, 0.012363584712147713, 0.3333054184913635, 0.0010036504827439785, -0.07344239950180054, -0.08880424499511719));
	r += mul(s0_6, min16float4x4(-0.07153650373220444, -0.0328245609998703, -0.0012378189712762833, 0.14490845799446106, 0.0453157015144825, 0.05717972666025162, 0.014732470735907555, -0.087361179292202, -0.011316103860735893, -0.055058758705854416, -0.09694641083478928, 0.04118732735514641, -0.009216004982590675, -0.046598631888628006, -0.019223853945732117, 0.029765987768769264));
	r += mul(s0_7, min16float4x4(-0.10463766753673553, 0.02854222059249878, -0.01837095431983471, -0.04414620250463486, 0.05235305055975914, 0.11235656589269638, 0.28763583302497864, -0.1065707802772522, 0.10911042243242264, -0.07252327352762222, -0.10180637985467911, 0.04043159261345863, 0.0954284742474556, -0.020879296585917473, -0.21259915828704834, 0.012624077498912811));
	r += mul(s0_8, min16float4x4(-0.019231127575039864, -0.016166748479008675, 0.002158589195460081, 0.00551994051784277, -0.5969411134719849, -0.058661624789237976, 0.04016013815999031, 0.11694372445344925, 0.09662551432847977, -0.02677384950220585, -0.03601405397057533, 0.007419873494654894, 0.4384901821613312, 0.08774872124195099, 0.010106668807566166, -0.07646967470645905));
	r += mul(s1_0, min16float4x4(0.021758029237389565, -0.1007552221417427, -0.05700215697288513, -0.05422326549887657, -0.025095921009778976, 0.045021675527095795, 0.05571925267577171, 0.027089644223451614, 0.019110102206468582, -0.013847642578184605, 0.025304364040493965, -0.05987203121185303, 0.003817003220319748, 0.02199608087539673, -0.025784475728869438, 0.038667406886816025));
	r += mul(s1_1, min16float4x4(-0.005359932780265808, 0.010234960354864597, -0.010297511704266071, -0.05407695844769478, -0.012543214485049248, -0.00835067592561245, 0.05381182208657265, 0.05560915917158127, 0.05998648330569267, 0.021491676568984985, -0.06754281371831894, -0.1071908175945282, 0.055528827011585236, 0.006273011211305857, -0.011360719799995422, 0.0013542340602725744));
	r += mul(s1_2, min16float4x4(-0.10076993703842163, -0.03870140388607979, 0.011649184860289097, 0.04137898236513138, 0.026062682271003723, -0.009475444443523884, 0.03969292342662811, -0.04037554934620857, -0.02786676026880741, 0.01929948851466179, -0.01783824898302555, -0.02107168920338154, 0.02552138827741146, 0.028159629553556442, -0.011643913574516773, 0.015345996245741844));
	r += mul(s1_3, min16float4x4(0.004281823057681322, -0.017865914851427078, -0.1323584020137787, -0.05430133640766144, -0.025586958974599838, 0.04950043559074402, 0.11401243507862091, 0.03260767459869385, -0.05937621369957924, -0.08592306822538376, -0.06860138475894928, 0.06818056106567383, 0.056786637753248215, 0.012721048668026924, -0.014372322708368301, -0.028327666223049164));
	r += mul(s1_4, min16float4x4(0.11546123027801514, 0.3955078721046448, 0.07324319332838058, -0.26079967617988586, -0.04528035596013069, 0.12280665338039398, -0.4345698058605194, -0.0525798574090004, 0.03787074610590935, -0.10136756300926208, -0.06371034681797028, -0.07788090407848358, 0.0448831245303154, -0.28236186504364014, 0.17533905804157257, 0.26456958055496216));
	r += mul(s1_5, min16float4x4(-0.2357586920261383, -0.06899181753396988, 0.0472598560154438, 0.020422225818037987, -0.08228281885385513, -0.001688304590061307, -0.1376705914735794, 0.007801412604749203, 0.13854512572288513, 0.025067007169127464, 0.008234655484557152, 0.018523426726460457, 0.07915618270635605, -0.05163448676466942, 0.012301256880164146, -0.04722513630986214));
	r += mul(s1_6, min16float4x4(0.04425682872533798, 0.05305302515625954, 0.032833583652973175, -0.009059904143214226, -0.023944640532135963, -0.007557965815067291, 0.03389532491564751, -0.0016460807528346777, 0.016720207408070564, 0.013395199552178383, 0.01611950434744358, -0.0681307315826416, 0.015643410384655, 0.021058324724435806, 0.05008786544203758, -0.027281736955046654));
	r += mul(s1_7, min16float4x4(-0.026477741077542305, 0.04248342663049698, 0.010325533337891102, 0.03492162376642227, 0.010962811298668385, -0.003431095974519849, -0.11279337853193283, 0.052373260259628296, -0.0022324032615870237, -0.003643954172730446, 0.0365045964717865, -0.017624851316213608, -0.11791998147964478, -0.07829837501049042, 0.011020291596651077, -0.015686511993408203));
	r += mul(s1_8, min16float4x4(-0.04937389865517616, -0.015574825927615166, -0.0065742190927267075, 0.05960794538259506, -0.028805451467633247, -0.008648051880300045, -0.06468242406845093, -0.032448142766952515, 0.024477118626236916, -0.0038885511457920074, 0.027282901108264923, 0.031605951488018036, 0.1332942247390747, 0.017034748569130898, 0.05426298454403877, -0.0019011055119335651));
	r += min16float4(0.0005140705034136772, -0.001188791124150157, -0.0017209983197972178, -0.001616711262613535);
	return r;
}
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float4 s0_0 = l0(-1.0, -1.0);
	min16float4 s0_1 = l0(0.0, -1.0);
	min16float4 s0_2 = l0(1.0, -1.0);
	min16float4 s0_3 = l0(-1.0, 0.0);
	min16float4 s0_4 = l0(0.0, 0.0);
	min16float4 s0_5 = l0(1.0, 0.0);
	min16float4 s0_6 = l0(-1.0, 1.0);
	min16float4 s0_7 = l0(0.0, 1.0);
	min16float4 s0_8 = l0(1.0, 1.0);
	min16float4 s1_0 = max(-s0_0, 0.0);
	min16float4 s1_1 = max(-s0_1, 0.0);
	min16float4 s1_2 = max(-s0_2, 0.0);
	min16float4 s1_3 = max(-s0_3, 0.0);
	min16float4 s1_4 = max(-s0_4, 0.0);
	min16float4 s1_5 = max(-s0_5, 0.0);
	min16float4 s1_6 = max(-s0_6, 0.0);
	min16float4 s1_7 = max(-s0_7, 0.0);
	min16float4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	conv2_0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 4
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-NVL-out
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN conv2_0
//!OUT out_0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) O(conv2_0, float2(x, y))
float4 f0(float2 pt, float2 pos, min16float4 s0_0, min16float4 s0_1, min16float4 s0_2, min16float4 s0_3, min16float4 s0_4, min16float4 s0_5, min16float4 s0_6, min16float4 s0_7, min16float4 s0_8, min16float4 s1_0, min16float4 s1_1, min16float4 s1_2, min16float4 s1_3, min16float4 s1_4, min16float4 s1_5, min16float4 s1_6, min16float4 s1_7, min16float4 s1_8) {
	min16float4 r = 0.0;
	r += mul(s0_0, min16float4x4(-0.3213782012462616, -0.07603195309638977, 0.04602181166410446, 0.1264609396457672, 0.038357123732566833, -0.01779356226325035, 0.012080543674528599, -0.03904087468981743, 0.09084321558475494, 0.02333713509142399, -0.036507781594991684, -0.0149991475045681, -0.08813732117414474, 0.03686155006289482, -0.024449357762932777, -0.014749192632734776));
	r += mul(s0_1, min16float4x4(0.06762608140707016, -0.19881786406040192, 0.060423657298088074, 0.05899494141340256, -0.07739625871181488, 0.03750050067901611, -0.06713882833719254, 0.057385411113500595, 0.15576136112213135, 0.18902653455734253, -0.061083707958459854, -0.05711982771754265, -0.012578132562339306, -0.04045644775032997, -0.025832632556557655, -0.11577995121479034));
	r += mul(s0_2, min16float4x4(-0.005079570692032576, -0.010150491259992123, -0.003410395933315158, -0.026428507640957832, 0.04681260511279106, -0.015321129001677036, 0.09062928706407547, 0.0010583383264020085, 0.028178611770272255, -0.07010036706924438, -0.04694374278187752, -0.06740602105855942, 0.025561971589922905, 0.02666487544775009, 0.030822668224573135, 0.0921727865934372));
	r += mul(s0_3, min16float4x4(0.07348395138978958, 0.08612434566020966, -0.19386166334152222, 0.1440429538488388, -0.036183882504701614, -0.0404038168489933, -0.006139240227639675, -0.0059823766350746155, -0.024771593511104584, -0.15967987477779388, 0.20752020180225372, -0.030486540868878365, -0.20728835463523865, 0.12245215475559235, -0.18328726291656494, 0.15604571998119354));
	r += mul(s0_4, min16float4x4(0.06113667041063309, 0.010772151872515678, 0.03656092286109924, -0.3076585829257965, -0.9667668342590332, -0.5019514560699463, -0.22654461860656738, 0.5009503960609436, -0.9210303425788879, 0.21393710374832153, 0.32255321741104126, 1.1992180347442627, 0.460287868976593, -1.0433244705200195, 0.6464847326278687, -0.266956090927124));
	r += mul(s0_5, min16float4x4(-0.006450076121836901, 0.0025597186759114265, 5.300794146023691e-05, -0.005232293624430895, 0.19493873417377472, -0.09594504535198212, 0.20364929735660553, -0.2175389677286148, 0.12743906676769257, -0.473665714263916, 0.1313476860523224, -0.327528715133667, -0.014976286329329014, 0.13915900886058807, 0.014883765950798988, 0.03549046814441681));
	r += mul(s0_6, min16float4x4(-0.0026934759225696325, 0.009967254474759102, -0.034949276596307755, -0.029357200488448143, -0.0016543969977647066, 0.057486940175294876, -0.015945915132761, -0.007093438878655434, 0.002815594431012869, -0.03446003049612045, -0.05119531229138374, -0.08521676063537598, -0.016266919672489166, -0.006968157831579447, -0.007226772140711546, -0.020086579024791718));
	r += mul(s0_7, min16float4x4(-0.022347310557961464, -0.022171031683683395, 0.0250827856361866, -0.0038752362597733736, 0.20809900760650635, 0.20054006576538086, -0.045436423271894455, -0.11132259666919708, 0.11194528639316559, 0.06373658031225204, -0.4013657867908478, -0.23485535383224487, 0.07923565804958344, 0.14202789962291718, -0.027627836912870407, -0.2576441168785095));
	r += mul(s0_8, min16float4x4(0.002622883766889572, -0.004053519573062658, -0.005731396842747927, 0.0145227937027812, -0.05128392204642296, 0.012658791616559029, 0.02538779191672802, 0.14402927458286285, -0.06274109333753586, 0.016536887735128403, -0.011568106710910797, -0.09106571972370148, -0.030240949243307114, -0.0021077499259263277, -0.020002994686365128, 0.04780671373009682));
	r += mul(s1_0, min16float4x4(0.08908490836620331, 0.20751933753490448, 0.12959961593151093, -0.17724408209323883, 0.07055485248565674, 0.038955893367528915, -0.007392782252281904, -0.029288185760378838, -0.021871522068977356, -0.05704687535762787, 0.025064807385206223, -0.027151651680469513, 0.10766622424125671, 0.03356877341866493, -0.016182662919163704, -0.05603703111410141));
	r += mul(s1_1, min16float4x4(0.19156864285469055, -0.2172785848379135, 0.06909395009279251, -0.06292259693145752, 0.12036141753196716, 0.08720981329679489, -0.01640257053077221, -0.04504082351922989, -0.1450195014476776, -0.008368575014173985, -0.09217439591884613, -0.027203314006328583, 0.08810307830572128, 0.10154786705970764, -0.08127246797084808, -0.06713841110467911));
	r += mul(s1_2, min16float4x4(-0.03008776716887951, 0.06274262070655823, -0.06880021840333939, 0.08178648352622986, -0.018171032890677452, 0.077880859375, -0.02836967632174492, -0.019841238856315613, 0.031817883253097534, -0.001747576636262238, 0.06300903856754303, 0.06244140863418579, -0.040437642484903336, -0.04211685433983803, -0.034884847700595856, -0.042601678520441055));
	r += mul(s1_3, min16float4x4(0.41113418340682983, 0.06140842288732529, -0.40146857500076294, -0.21265199780464172, -0.02690976671874523, -0.021300166845321655, 0.07066341489553452, -0.019789740443229675, 0.0051777055487036705, 0.022765014320611954, -0.09031829982995987, 0.002199767390266061, -0.02314615063369274, -0.027670249342918396, 0.08520520478487015, 0.015589387156069279));
	r += mul(s1_4, min16float4x4(-0.11664917320013046, 0.2036142498254776, 0.11954738199710846, -0.03803238272666931, 0.24869777262210846, 0.3271484971046448, 0.07623358070850372, 0.26665109395980835, -0.13445371389389038, -0.20459109544754028, -0.14096331596374512, -0.3564453125, 0.010446356609463692, -0.15396729111671448, 0.2783203721046448, 0.16260117292404175));
	r += mul(s1_5, min16float4x4(0.020555809140205383, -0.024081407114863396, 0.0037322884891182184, -0.004290777258574963, -0.06363802403211594, 0.017777493223547935, -0.04886113107204437, 0.028137777000665665, 0.07157251238822937, 0.1652555763721466, 0.048318684101104736, 0.16258014738559723, -0.080867238342762, -0.005216006189584732, -0.11694419384002686, -0.037168581038713455));
	r += mul(s1_6, min16float4x4(-0.05483533814549446, -0.06421945244073868, 0.1264648139476776, 0.06470026075839996, -0.015685398131608963, -0.026560895144939423, -0.08296025544404984, -0.024009808897972107, 0.014525990933179855, 0.040405336767435074, 0.024271346628665924, 0.017267419025301933, 0.005456542130559683, -0.0028430160600692034, 0.017431316897273064, -0.004066534340381622));
	r += mul(s1_7, min16float4x4(0.0455317385494709, 0.0006145857623778284, -0.02362976223230362, 0.024684743955731392, -0.15330973267555237, -0.13202586770057678, 0.0563613623380661, -0.09145537763834, 0.08318057656288147, 0.056102536618709564, 0.09495577961206436, 0.12700967490673065, 0.031072529032826424, 0.023781297728419304, -0.02532833442091942, -0.021955424919724464));
	r += mul(s1_8, min16float4x4(0.0030128215439617634, -0.0026542600244283676, 0.010785374790430069, -0.019856881350278854, -0.05189468339085579, -0.04656227305531502, -0.05602433159947395, 0.03240359202027321, 0.04870609939098358, 0.028903750702738762, 0.019872361794114113, 0.056811168789863586, -0.002928083296865225, 0.01736871898174286, -0.004989876411855221, -0.011481722816824913));
	r += min16float4(-0.00012255358160473406, -0.0002597860002424568, -2.460798896208871e-05, -2.0278806914575398e-05);
	return tanh(r);
}
void Pass4(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float4 s0_0 = l0(-1.0, -1.0);
	min16float4 s0_1 = l0(0.0, -1.0);
	min16float4 s0_2 = l0(1.0, -1.0);
	min16float4 s0_3 = l0(-1.0, 0.0);
	min16float4 s0_4 = l0(0.0, 0.0);
	min16float4 s0_5 = l0(1.0, 0.0);
	min16float4 s0_6 = l0(-1.0, 1.0);
	min16float4 s0_7 = l0(0.0, 1.0);
	min16float4 s0_8 = l0(1.0, 1.0);
	min16float4 s1_0 = max(-s0_0, 0.0);
	min16float4 s1_1 = max(-s0_1, 0.0);
	min16float4 s1_2 = max(-s0_2, 0.0);
	min16float4 s1_3 = max(-s0_3, 0.0);
	min16float4 s1_4 = max(-s0_4, 0.0);
	min16float4 s1_5 = max(-s0_5, 0.0);
	min16float4 s1_6 = max(-s0_6, 0.0);
	min16float4 s1_7 = max(-s0_7, 0.0);
	min16float4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	out_0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 5
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-NVL-shuffle
//!STYLE PS
//!IN out_0, INPUT
float4 Pass5(float2 pos) {
	float2 pt = float2(GetInputPt());
	const static float3x3 rgb2yuv = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081};
	const static float3x3 yuv2rgb = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float4 r = 0.0;
	float2 size = float2(GetInputSize());
	float2 f = frac(pos * size);
	float3 yuv = mul(rgb2yuv, INPUT.SampleLevel(SL, pos, 0).rgb);
	int2 i = int2(f * 2.0);
	r.r = out_0.SampleLevel(SP, (float2(0.5, 0.5) - f) * pt + pos, 0)[2*i.y + i.x];
	r.r += yuv.r;
	r.a = 1.0;
	r.r = clamp(r, 0.0, 1.0);
	float3 px = mul(yuv2rgb, float3(r.r, yuv.yz));
	return float4(px, 1.0);
}
