// CuNNy 2x4C BILINEAR CHROMA TEST NVL
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

//!MAGPIE EFFECT
//!VERSION 3
//!OUTPUT_WIDTH INPUT_WIDTH * 2
//!OUTPUT_HEIGHT INPUT_HEIGHT * 2

//!TEXTURE
Texture2D INPUT;


//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t1;

//!PASS 1
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-TEST-NVL-in
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) (dot(float3(0.7080476880073547, 1.3314249515533447, 0.2949870824813843), O(INPUT, float2(x, y)).rgb) + -0.19804057478904724)
float4 f0(float2 pt, float2 pos, min16float s0_0, min16float s0_1, min16float s0_2, min16float s0_3, min16float s0_4, min16float s0_5, min16float s0_6, min16float s0_7, min16float s0_8) {
	min16float4 r = 0.0;
	r += min16float4(0.0130546056, 0.0700905547, -0.4860755205, -0.2358444780) * s0_0;
	r += min16float4(-0.0125111425, -0.0382232182, 0.0000867310, -0.0978995040) * s0_1;
	r += min16float4(-0.0014843311, -0.0597086735, 0.0110278064, 0.1318778545) * s0_2;
	r += min16float4(-0.5019531846, 0.0098353410, 0.4873046279, -0.1013152897) * s0_3;
	r += min16float4(0.4788087904, 0.4345703721, -0.0012047985, 0.3555999994) * s0_4;
	r += min16float4(0.0256972797, -0.0302736163, -0.0106371418, -0.0263069086) * s0_5;
	r += min16float4(0.0246001091, -0.4595453143, -0.0029752594, 0.0722203106) * s0_6;
	r += min16float4(-0.0044242386, -0.0185178574, 0.0047794082, 0.0131913442) * s0_7;
	r += min16float4(-0.0210692193, 0.0900667384, -0.0020103734, -0.1071783081) * s0_8;
	r += min16float4(-0.0003093290433753282, 0.001245903898961842, -7.921712676761672e-05, -0.00292598782107234);
	return r;
}
void Pass1(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float s0_0 = l0(-1.0, -1.0);
	min16float s0_1 = l0(0.0, -1.0);
	min16float s0_2 = l0(1.0, -1.0);
	min16float s0_3 = l0(-1.0, 0.0);
	min16float s0_4 = l0(0.0, 0.0);
	min16float s0_5 = l0(1.0, 0.0);
	min16float s0_6 = l0(-1.0, 1.0);
	min16float s0_7 = l0(0.0, 1.0);
	min16float s0_8 = l0(1.0, 1.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8);
}
//!PASS 2
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-TEST-NVL-conv1
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, min16float4 s0_0, min16float4 s0_1, min16float4 s0_2, min16float4 s0_3, min16float4 s0_4, min16float4 s0_5, min16float4 s0_6, min16float4 s0_7, min16float4 s0_8, min16float4 s1_0, min16float4 s1_1, min16float4 s1_2, min16float4 s1_3, min16float4 s1_4, min16float4 s1_5, min16float4 s1_6, min16float4 s1_7, min16float4 s1_8) {
	min16float4 r = 0.0;
	r += mul(s0_0, min16float4x4(0.0383539088, 0.0881343633, -0.1013191417, -0.1977392733, -0.0096431552, 0.0303630754, 0.0438122004, -0.2672753632, -0.0435610898, -0.0144082364, 0.0065758782, -0.0622818731, 0.0491945520, 0.0457926542, -0.0102958959, 0.0968972743));
	r += mul(s0_1, min16float4x4(-0.0014608137, 0.0253471639, -0.0190329999, 0.2390983105, 0.1933604330, 0.0401515365, 0.0598452650, -0.2939369678, -0.0127681429, 0.0153393885, 0.0265478976, 0.0416262075, 0.0885665044, -0.0418105721, -0.0666363537, 0.1070966497));
	r += mul(s0_2, min16float4x4(0.0948152840, 0.0499237813, 0.0808507502, -0.3039261103, 0.0085735703, -0.0199870020, 0.0223625191, -0.0943196490, 0.0056360122, 0.0253292657, 0.0316206440, -0.0807318240, -0.0472391285, -0.0676198900, -0.0881358609, 0.1206929535));
	r += mul(s0_3, min16float4x4(-0.0666403025, -0.0462531596, 0.1023914739, 0.1424009204, -0.0160833225, -0.0036408678, -0.2290041000, 0.0535770506, 0.0129040806, -0.1065736935, 0.1284179538, 0.0640785322, -0.0284387972, -0.0780304000, -0.1007604301, 0.2617284060));
	r += mul(s0_4, min16float4x4(0.2315853983, 0.1177202985, -0.2040721625, -0.1822643876, -0.1763326079, -0.0948310941, 0.3043352067, -0.0569505543, 0.2003835291, 0.1987303644, -0.1295292526, -0.4544379413, -0.3043678701, -0.0940883532, 0.1356720030, 0.3450995386));
	r += mul(s0_5, min16float4x4(-0.1833963990, -0.4540661275, -0.1231220514, 0.1965571046, 0.1374231130, 0.1458850950, -0.0949988216, -0.0388046950, -0.0566323847, -0.0618886873, 0.0306844581, -0.0136542432, -0.0141530521, 0.0928423628, -0.0983885750, 0.3385268748));
	r += mul(s0_6, min16float4x4(-0.0863571987, 0.0210942216, 0.1468250751, 0.0492963530, 0.0342640728, -0.0205900501, 0.0246368553, -0.0042022853, -0.0003919164, -0.0187482666, -0.0447667278, 0.1313474923, 0.1247551143, -0.0778519511, 0.0811477378, -0.0304108504));
	r += mul(s0_7, min16float4x4(-0.0557889566, 0.3837878108, -0.1770407110, -0.0060896841, -0.0381310992, 0.0432934202, -0.0104720192, -0.0301925987, 0.1965593994, -0.0325899608, -0.1504310966, 0.1939462274, -0.0457072966, 0.0122242002, 0.0308062583, 0.0407743752));
	r += mul(s0_8, min16float4x4(-0.0857795179, -0.4775256217, -0.0160471331, -0.1713799238, -0.0033292586, -0.0151867652, -0.0158089567, 0.0212548878, -0.2451302260, 0.0552961826, -0.4460608363, 0.1091033816, 0.0947952867, -0.0488612019, -0.0011002065, 0.2239639461));
	r += mul(s1_0, min16float4x4(0.1332562715, -0.0845327452, 0.0833838508, 0.0534663759, 0.0632271245, -0.0073201829, 0.0093548037, 0.0227324069, 0.0477256402, 0.0092778401, 0.0046222368, 0.0077359113, -0.0542957559, -0.0421262681, -0.0129482979, 0.1042357311));
	r += mul(s1_1, min16float4x4(0.2858693004, 0.0063822879, 0.0513960235, -0.6814730167, -0.0996413752, -0.0246817023, 0.0340391099, -0.1734268814, 0.0845137164, -0.0115694609, 0.0101648467, -0.1880796105, -0.2685134709, 0.0323616341, -0.0739753917, 0.4469684958));
	r += mul(s1_2, min16float4x4(-0.1247150376, -0.0604286939, -0.0006907313, 0.3056217432, 0.0581443794, 0.0200987756, 0.0651862249, -0.1539477557, 0.0464706197, -0.0105259409, 0.0089111440, -0.0976916552, -0.0466126427, 0.0392228886, 0.0304345582, 0.1247583032));
	r += mul(s1_3, min16float4x4(0.5214864016, 0.1694120318, -0.1188953817, -0.1175118014, 0.1105941087, -0.0149824405, 0.2666010857, -0.1733428240, 0.1684556007, 0.0959448665, -0.1252231300, -0.0327810757, -0.0920753777, 0.0143016521, 0.1066758409, 0.1525931358));
	r += mul(s1_4, min16float4x4(-0.5145052671, -0.1192836910, -0.2587843239, 0.2329073846, -0.0313413292, 0.1106155589, -0.3696056902, -0.2613047957, 0.3132205307, -0.2261107713, -0.0074302894, 0.4797684848, 0.1762059033, 0.0802490637, -0.3088539243, 0.4870739877));
	r += mul(s1_5, min16float4x4(0.0332030356, 0.1574593782, 0.0675732866, -0.2355709076, -0.0521398485, -0.1469719112, 0.1586738378, -0.2227023095, 0.1394634247, -0.0042140754, -0.1870073378, -0.1630319059, 0.0824961513, -0.0826950669, 0.0934001580, 0.0350299515));
	r += mul(s1_6, min16float4x4(-0.0660438240, 0.1679296643, -0.1896595210, -0.0728961527, -0.0318321846, -0.0154728293, -0.0182229783, -0.0161473509, -0.0498514697, -0.0030165231, 0.0377127156, -0.1159533486, 0.1193668097, -0.2399758399, -0.0517053716, 0.2536181808));
	r += mul(s1_7, min16float4x4(-0.2816760540, -0.1335695684, 0.0584317930, 0.0418468565, 0.0115264142, -0.1079883575, 0.0037015232, 0.0246658940, -0.3458215296, 0.2795901895, 0.0407249369, -0.0671641603, 0.1115999892, -0.1158780679, -0.0321989730, 0.3447158039));
	r += mul(s1_8, min16float4x4(-0.0123108262, 0.0858763829, 0.0236223117, 0.0997886062, -0.0817790031, 0.0262536947, 0.0134949554, -0.0606266260, -0.5158939362, -0.2527209818, -0.0291435570, -0.0173573364, 0.0095179677, -0.1143741682, -0.0414352790, 0.0563971289));
	r += min16float4(-0.002208476886153221, -0.0036359650548547506, -0.0004931004950776696, 0.0020388884004205465);
	return r;
}
void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float4 s0_0 = l0(-1.0, -1.0);
	min16float4 s0_1 = l0(0.0, -1.0);
	min16float4 s0_2 = l0(1.0, -1.0);
	min16float4 s0_3 = l0(-1.0, 0.0);
	min16float4 s0_4 = l0(0.0, 0.0);
	min16float4 s0_5 = l0(1.0, 0.0);
	min16float4 s0_6 = l0(-1.0, 1.0);
	min16float4 s0_7 = l0(0.0, 1.0);
	min16float4 s0_8 = l0(1.0, 1.0);
	min16float4 s1_0 = max(-s0_0, 0.0);
	min16float4 s1_1 = max(-s0_1, 0.0);
	min16float4 s1_2 = max(-s0_2, 0.0);
	min16float4 s1_3 = max(-s0_3, 0.0);
	min16float4 s1_4 = max(-s0_4, 0.0);
	min16float4 s1_5 = max(-s0_5, 0.0);
	min16float4 s1_6 = max(-s0_6, 0.0);
	min16float4 s1_7 = max(-s0_7, 0.0);
	min16float4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 3
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-TEST-NVL-conv2
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, min16float4 s0_0, min16float4 s0_1, min16float4 s0_2, min16float4 s0_3, min16float4 s0_4, min16float4 s0_5, min16float4 s0_6, min16float4 s0_7, min16float4 s0_8, min16float4 s1_0, min16float4 s1_1, min16float4 s1_2, min16float4 s1_3, min16float4 s1_4, min16float4 s1_5, min16float4 s1_6, min16float4 s1_7, min16float4 s1_8) {
	min16float4 r = 0.0;
	r += mul(s0_0, min16float4x4(-0.0082266470, 0.0002138868, -0.0004041957, -0.0137167722, 0.0306061506, -0.0557861701, -0.0345496424, 0.0959477648, -0.2037010342, 0.1665903628, 0.1134796590, 0.3955078423, -0.0168204941, 0.0430736989, -0.0092689730, 0.0347985625));
	r += mul(s0_1, min16float4x4(-0.0514474213, 0.0040155589, -0.0041748681, 0.1586915106, 0.4345637262, -0.0784902647, -0.0662856326, 0.0423681773, 0.0907053798, -0.0785512552, -0.1645520180, 0.4329693615, 0.0107079623, 0.0631930381, -0.0303485263, 0.0949610174));
	r += mul(s0_2, min16float4x4(0.0215228237, 0.0239489283, -0.0384515114, 0.0101668369, -0.8027945161, 0.5820252299, 2.4909534454, 0.8117778301, 0.0026966813, 0.0412019566, -0.0350352600, 0.1057141945, 0.0061657545, -0.0335818231, -0.0278368108, 0.0371808000));
	r += mul(s0_3, min16float4x4(0.0447815619, -0.0030214454, 0.0186198875, 0.0120678227, -0.1514175236, 0.0776440129, 0.0509828031, -0.0647207648, -0.9316828847, 0.5302003622, 0.0089870663, -0.3427679837, -0.0449417979, -0.0530187264, 0.0167109724, -0.0377195328));
	r += mul(s0_4, min16float4x4(-0.4956117868, 0.1824000180, 0.0328153521, 0.0915409923, -0.3838540912, -0.0098582478, 0.0764041021, -0.0811813176, -0.0093072206, -0.7202496529, 1.7190560102, -0.3915407956, 0.0544099919, -0.0492022969, 0.0434501804, -0.0892680511));
	r += mul(s0_5, min16float4x4(0.0354495272, -0.3642395437, 0.0978978276, 0.2004502714, 0.0230880883, 0.4446947575, -0.0089257555, 0.0031714372, 0.1214109510, -0.0245871395, 0.0261279400, -0.1499029249, 0.0193858091, -0.2071720958, 0.0331612788, -0.0579462275));
	r += mul(s0_6, min16float4x4(-0.0013522134, -0.0092203617, -0.0225223284, 0.0038606848, 0.0132231889, -0.0397653915, -0.0199602116, -0.0032693532, 0.4102059901, 0.2409457117, 0.1713554710, 0.4911853373, 0.0139723048, -0.1413189769, -0.0086677447, 0.0256160013));
	r += mul(s0_7, min16float4x4(-0.0307217892, 0.0385559350, -0.0467552915, -0.0960928425, 0.0094812373, 0.0423597507, -0.0051600998, -0.0018496199, -0.4348483086, -0.2316118777, 0.1296873242, 0.0734205544, 0.0391510129, 0.4911884069, 0.0016487525, 0.0027151839));
	r += mul(s0_8, min16float4x4(0.0847896188, 0.0170944892, -0.0492350496, -0.0501739681, -0.0019566375, -0.1293350309, 0.0456534401, 0.0553393140, -0.0640243366, 0.0233931355, 0.0583954044, 0.0572450198, -0.0379784442, -0.3004957736, 0.0149870235, 0.0275752749));
	r += mul(s1_0, min16float4x4(0.0240672529, -0.0187256597, -0.0154777495, -0.0121980794, 0.1169452444, -0.1731663793, 0.0095086321, -0.1098751053, 0.0996756777, -0.0621502437, 0.0058099516, -0.2359758168, 0.0172200091, 0.0084150694, -0.0066251266, -0.0336729996));
	r += mul(s1_1, min16float4x4(0.1114433184, 0.0695344508, 0.0091859512, -0.1482780427, -0.2460057288, 0.0424651578, -0.0696674362, 0.1254899204, 0.0494910665, -0.0947964191, 0.0692012459, -0.3701166213, -0.0106864572, 0.0041262917, 0.0045647426, -0.1102558151));
	r += mul(s1_2, min16float4x4(-0.0644809082, 0.0419307239, -0.0475764237, -0.1213295981, -0.0149120325, -0.0249680877, -0.0423569605, 0.0322713442, 0.0331460722, 0.0827569738, 0.0949594900, -0.0871583074, -0.0056902822, -0.0200705249, 0.0260874163, -0.0543428771));
	r += mul(s1_3, min16float4x4(-0.0043926262, -0.0064387582, -0.0101161413, -0.0021949965, 0.1420895755, -0.2530121803, -0.0360198244, 0.1211736649, 0.4699397385, -0.0776237771, 0.0061093844, 0.0526725240, 0.0698625073, -0.1006560400, 0.0919807702, 0.0318905413));
	r += mul(s1_4, min16float4x4(0.6074271202, -0.0973274335, -0.0162761956, 0.0350287110, 0.1155211255, 0.3679174781, 0.0868213698, 0.0562370792, -0.2354566455, 0.1077464446, -0.1264645755, 0.8726926446, 0.0550699569, -0.1674747020, 0.0288436022, 0.3271278143));
	r += mul(s1_5, min16float4x4(-0.0375935175, 0.0465211459, 0.1009635031, 0.0814855993, -0.0747875795, -0.2672337890, 0.0646946579, -0.0161273144, -0.0040646242, 0.2837862670, -0.1144047305, 0.1400629282, -0.0723855719, -0.0413810723, 0.0430913866, 0.1477529258));
	r += mul(s1_6, min16float4x4(0.0236204248, -0.0076335617, 0.0081644701, 0.0111350091, -0.0055336729, -0.1131777838, 0.0180013310, 0.0250810329, -0.0427735001, 0.0619372688, 0.0266930759, 0.0347801745, 0.0135748861, -0.1774074137, -0.0133906016, 0.0978904366));
	r += mul(s1_7, min16float4x4(0.0213742107, 0.0648644790, -0.0031347612, 0.0146036334, -0.0627432093, 0.0418460891, 0.0080854567, -0.0276538562, -0.0827624947, -0.2123415768, 0.0021062766, -0.0803854167, -0.3148168325, 0.7792968750, 0.0455327667, -0.2911017537));
	r += mul(s1_8, min16float4x4(-0.0070097609, -0.1303016245, -0.0125019504, 0.0218880046, 0.0083869789, 0.1130124405, -0.0044164639, -0.0180855356, 0.1530992836, 0.2227080017, -0.0227551758, 0.0056597921, -0.0507436804, -0.3896360695, 0.0689607263, -0.0923195258));
	r += min16float4(-0.0022318419069051743, -0.002967925276607275, 0.0019512997241690755, 0.0011229849187657237);
	return r;
}
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float4 s0_0 = l0(-1.0, -1.0);
	min16float4 s0_1 = l0(0.0, -1.0);
	min16float4 s0_2 = l0(1.0, -1.0);
	min16float4 s0_3 = l0(-1.0, 0.0);
	min16float4 s0_4 = l0(0.0, 0.0);
	min16float4 s0_5 = l0(1.0, 0.0);
	min16float4 s0_6 = l0(-1.0, 1.0);
	min16float4 s0_7 = l0(0.0, 1.0);
	min16float4 s0_8 = l0(1.0, 1.0);
	min16float4 s1_0 = max(-s0_0, 0.0);
	min16float4 s1_1 = max(-s0_1, 0.0);
	min16float4 s1_2 = max(-s0_2, 0.0);
	min16float4 s1_3 = max(-s0_3, 0.0);
	min16float4 s1_4 = max(-s0_4, 0.0);
	min16float4 s1_5 = max(-s0_5, 0.0);
	min16float4 s1_6 = max(-s0_6, 0.0);
	min16float4 s1_7 = max(-s0_7, 0.0);
	min16float4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 4
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-TEST-NVL-out
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, min16float4 s0_0, min16float4 s0_1, min16float4 s0_2, min16float4 s0_3, min16float4 s0_4, min16float4 s0_5, min16float4 s0_6, min16float4 s0_7, min16float4 s0_8, min16float4 s1_0, min16float4 s1_1, min16float4 s1_2, min16float4 s1_3, min16float4 s1_4, min16float4 s1_5, min16float4 s1_6, min16float4 s1_7, min16float4 s1_8) {
	min16float4 r = 0.0;
	r += mul(s0_0, min16float4x4(-0.0171318613, -0.0115276398, -0.0050431327, -0.0137958815, -0.1743160635, 0.0514831431, 0.0366750732, 0.0231668167, 0.0350760520, 0.0039276513, 0.0249332003, -0.0263012685, -0.0167090651, -0.0138650211, -0.0019505814, 0.0075574038));
	r += mul(s0_1, min16float4x4(0.1420915276, -0.0074141598, -0.0993654504, -0.0895742476, 0.3452325761, -0.5381735563, 0.1616456211, -0.0214072410, -0.0309109986, 0.0448329858, 0.0216212515, 0.0275935978, -0.1926374733, -0.0085457163, -0.0060025998, 0.0388752073));
	r += mul(s0_2, min16float4x4(-0.0869747549, 0.1247691587, -0.0759260356, 0.0565108620, -0.0093238642, 0.0352745615, -0.0121703073, 0.0133722853, 0.0002861745, 0.0017428892, -0.0106912693, -0.0048151324, 0.0310539771, -0.0282723568, 0.0323486254, -0.0376858227));
	r += mul(s0_3, min16float4x4(0.0012340908, -0.0166634023, -0.0362536237, -0.0045613074, 0.0360107571, 0.0416780487, -0.1177801341, 0.0397563018, 0.0957905203, -0.0645258054, 0.1115883961, -0.0117581431, -0.0102463923, -0.0157105681, -0.0286245085, -0.0465081893));
	r += mul(s0_4, min16float4x4(0.0821882561, 0.1313378364, 0.4963990748, 0.2281057090, 0.1351904124, 0.1664950252, 0.0277693737, -0.4677768350, 0.0468115881, 0.4497509599, -0.1714066416, 0.3037111461, -0.2658989429, -0.1715305299, -0.4228574038, -0.1635901034));
	r += mul(s0_5, min16float4x4(0.0184817147, -0.0670728609, 0.0193038452, 0.1206779927, 0.0067850053, 0.0239875875, -0.0106384121, -0.0343071818, -0.0014569156, 0.0030725438, -0.0177670550, -0.0320228152, 0.0260816012, -0.0231474210, 0.1139749512, 0.0817635581));
	r += mul(s0_6, min16float4x4(0.0002492632, -0.0026216786, -0.0084833205, -0.0077943164, -0.0045663700, -0.0092493678, 0.0059015453, 0.0108725550, 0.0090720728, -0.0069822627, 0.0404100865, -0.0238915663, 0.0008643418, 0.0184244476, -0.0220320709, 0.0105438018));
	r += mul(s0_7, min16float4x4(0.0150422016, 0.0019556643, 0.0300540663, 0.0187155232, -0.0236430187, -0.0401005894, 0.0357593782, 0.0245822407, -0.0220750924, -0.0202042144, 0.0734862536, 0.0723317340, 0.0077047907, -0.0108143147, -0.0321062654, -0.0642010570));
	r += mul(s0_8, min16float4x4(0.0041051051, 0.0185904931, -0.0323471092, -0.0244953614, -0.0158151165, -0.0249790698, 0.0085864607, 0.0131737031, -0.0003369070, -0.0258401185, 0.0363544002, 0.0148615949, -0.0038198424, 0.0063042943, -0.0282527190, -0.0170278531));
	r += mul(s1_0, min16float4x4(-0.0080077713, 0.0225429796, -0.0789644942, 0.0983873755, 0.0597715229, 0.0393704809, 0.0041735186, -0.0174681675, 0.3739969134, -0.0851485878, -0.1257260442, -0.0736937672, -0.0232952833, -0.0083969599, 0.0040651346, 0.0202133507));
	r += mul(s1_1, min16float4x4(0.1420908570, -0.0248854496, -0.0320895836, -0.1138626412, 0.0342911854, 0.0030835590, -0.0676095113, -0.0097618550, -1.2148566246, 0.0549983345, 0.6270004511, 0.4414345324, 0.0114432471, -0.0019234284, 0.0632334203, 0.0369428061));
	r += mul(s1_2, min16float4x4(-0.0063204374, -0.0086533222, 0.0312277935, 0.0236287415, 0.0035470673, -0.0160526987, 0.0158631839, 0.0011893641, -0.1578161418, -0.7091411948, 0.3174309731, 0.6651480198, -0.0073757195, -0.0100772101, -0.0125294300, -0.0080900751));
	r += mul(s1_3, min16float4x4(0.1303710043, 0.0297089163, -0.1078235283, -0.0204130244, -0.0695128366, -0.0265448764, 0.0429332443, 0.0590579100, -0.0423260368, -0.1102416888, -0.2644994855, 0.2516556382, -0.0200617239, 0.0369807221, 0.0499061011, 0.0769879073));
	r += mul(s1_4, min16float4x4(-0.3776784837, -0.5371094942, 0.5449222922, -0.4746764600, 0.0145261670, -0.0303792749, 0.0915739983, 0.0276623871, 2.0861270428, 1.0206389427, -1.0990411043, -2.8779959679, 1.1459505558, 0.4495592713, -0.0073754247, -0.3967617154));
	r += mul(s1_5, min16float4x4(-0.0647232905, 0.0069766231, -0.0867647752, 0.0744621307, 0.0054053264, -0.0057530645, 0.0222982522, -0.0058503500, -0.1247446835, 0.2785576582, -0.1582680643, 0.2682876289, -0.2723505199, 0.1261049509, -0.1332417876, 0.0867488831));
	r += mul(s1_6, min16float4x4(-0.0162240379, 0.0017885960, 0.0619756803, -0.0100554684, 0.0266754422, 0.0126329325, -0.0144341690, -0.0162476804, -0.1578274071, -0.0594006404, 0.2550340891, 0.0236520842, -0.0278184153, -0.0576958172, 0.1800125092, -0.0204988569));
	r += mul(s1_7, min16float4x4(0.0179290324, 0.0047797812, -0.2440184057, 0.1588861495, 0.0084819514, 0.0418908447, -0.0172772072, -0.0095158359, -0.0632027015, -0.2180989534, -0.0205633361, 0.3211022317, -0.3213206828, -0.1318328381, 0.0580520295, 0.5341777802));
	r += mul(s1_8, min16float4x4(0.0604235493, 0.0775741637, -0.0876546577, -0.0518358946, 0.0012579378, 0.0078450311, -0.0077676233, 0.0047299536, -0.0021640523, 0.0895110592, -0.0379912630, -0.1489274353, -0.0456833057, -0.0890961885, 0.2138914913, -0.0102371052));
	r += min16float4(0.00028304613078944385, -0.0004870504781138152, 0.00020514432981144637, -0.0006624971865676343);
	return tanh(r);
}
void Pass4(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float4 s0_0 = l0(-1.0, -1.0);
	min16float4 s0_1 = l0(0.0, -1.0);
	min16float4 s0_2 = l0(1.0, -1.0);
	min16float4 s0_3 = l0(-1.0, 0.0);
	min16float4 s0_4 = l0(0.0, 0.0);
	min16float4 s0_5 = l0(1.0, 0.0);
	min16float4 s0_6 = l0(-1.0, 1.0);
	min16float4 s0_7 = l0(0.0, 1.0);
	min16float4 s0_8 = l0(1.0, 1.0);
	min16float4 s1_0 = max(-s0_0, 0.0);
	min16float4 s1_1 = max(-s0_1, 0.0);
	min16float4 s1_2 = max(-s0_2, 0.0);
	min16float4 s1_3 = max(-s0_3, 0.0);
	min16float4 s1_4 = max(-s0_4, 0.0);
	min16float4 s1_5 = max(-s0_5, 0.0);
	min16float4 s1_6 = max(-s0_6, 0.0);
	min16float4 s1_7 = max(-s0_7, 0.0);
	min16float4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 5
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-TEST-NVL-shuffle
//!STYLE PS
//!IN t1, INPUT
float4 Pass5(float2 pos) {
	float2 pt = float2(GetInputPt());
	const static float3x3 rgb2yuv = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081};
	const static float3x3 yuv2rgb = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float4 r = 0.0;
	float2 size = float2(GetInputSize());
	float2 f = frac(pos * size);
	float3 yuv = mul(rgb2yuv, INPUT.SampleLevel(SL, pos, 0).rgb);
	int2 i = int2(f * 2.0);
	r.r = t1.SampleLevel(SP, (float2(0.5, 0.5) - f) * pt + pos, 0)[2*i.y + i.x];
	r.r += yuv.r;
	r.a = 1.0;
	r.r = clamp(r, 0.0, 1.0);
	float3 px = mul(yuv2rgb, float3(r.r, yuv.yz));
	return float4(px, 1.0);
}
