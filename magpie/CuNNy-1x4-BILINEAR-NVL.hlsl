// CuNNy 1x4 BILINEAR NVL
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

//!MAGPIE EFFECT
//!VERSION 3
//!OUTPUT_WIDTH INPUT_WIDTH * 2
//!OUTPUT_HEIGHT INPUT_HEIGHT * 2

//!TEXTURE
Texture2D INPUT;


//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_UNORM
Texture2D up_0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_UNORM
Texture2D conv1_0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D down;

//!PASS 1
//!DESC CuNNy-1x4-BILINEAR-NVL-up
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT up_0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) dot(float3(0.299, 0.587, 0.114), O(INPUT, float2(x, y)).rgb)
float4 f0(float2 pt, float2 pos, min16float s0_0, min16float s0_1, min16float s0_2, min16float s0_3, min16float s0_4, min16float s0_5, min16float s0_6, min16float s0_7, min16float s0_8) {
	min16float4 r = 0.0;
	r += min16float4(0.06096738204360008, -0.018857795745134354, 0.04967228323221207, 0.03527897596359253) * s0_0;
	r += min16float4(0.1461140513420105, 0.04719623178243637, 0.32572025060653687, -0.03254888579249382) * s0_1;
	r += min16float4(-0.19580088555812836, -0.029578400775790215, 0.06188293546438217, -0.028239281848073006) * s0_2;
	r += min16float4(-0.19961011409759521, -0.0352541022002697, -0.2918792963027954, 0.0706961378455162) * s0_3;
	r += min16float4(0.13815216720104218, 0.3310547173023224, 0.25845667719841003, 0.33105456829071045) * s0_4;
	r += min16float4(-0.199622243642807, 0.024451304227113724, 0.06008974090218544, 0.07011207938194275) * s0_5;
	r += min16float4(0.10722129046916962, 0.05798184871673584, 0.2831805944442749, 0.00017075016512535512) * s0_6;
	r += min16float4(0.3534303307533264, -0.4344070255756378, -0.19087031483650208, -0.6311889290809631) * s0_7;
	r += min16float4(0.06614795327186584, 0.05572165176272392, -0.03256382793188095, 0.13240325450897217) * s0_8;
	r += float4(-0.004004571586847305, -1.8833285139407963e-05, 0.14482998847961426, 0.4113315939903259);
	return max(r, 0.0);
}
void Pass1(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float s0_0 = l0(-1.0, -1.0);
	min16float s0_1 = l0(0.0, -1.0);
	min16float s0_2 = l0(1.0, -1.0);
	min16float s0_3 = l0(-1.0, 0.0);
	min16float s0_4 = l0(0.0, 0.0);
	min16float s0_5 = l0(1.0, 0.0);
	min16float s0_6 = l0(-1.0, 1.0);
	min16float s0_7 = l0(0.0, 1.0);
	min16float s0_8 = l0(1.0, 1.0);
	up_0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8);
}
//!PASS 2
//!DESC CuNNy-1x4-BILINEAR-NVL-conv1
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN up_0
//!OUT conv1_0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) O(up_0, float2(x, y))
float4 f0(float2 pt, float2 pos, min16float4 s0_0, min16float4 s0_1, min16float4 s0_2, min16float4 s0_3, min16float4 s0_4, min16float4 s0_5, min16float4 s0_6, min16float4 s0_7, min16float4 s0_8) {
	min16float4 r = 0.0;
	r += mul(s0_0, min16float4x4(0.16949905455112457, -0.03784682974219322, 0.09036067873239517, 0.04658934846520424, -1.0157132148742676, -0.33886733651161194, 0.24254755675792694, 0.22944605350494385, -0.07443436235189438, 0.09095897525548935, -0.0058957296423614025, -0.0671384260058403, 0.11091101914644241, 0.29916372895240784, 0.11475443840026855, 0.2949087619781494));
	r += mul(s0_1, min16float4x4(-0.12533490359783173, -0.29512181878089905, 0.011741062626242638, 0.03426646441221237, -0.828622579574585, -0.27023211121559143, 0.734093427658081, 0.2802736163139343, 0.22524210810661316, 0.14013616740703583, 0.03009207360446453, 0.08129514008760452, -0.2507898807525635, 0.21777933835983276, 0.1282360553741455, 0.1459938883781433));
	r += mul(s0_2, min16float4x4(-0.0033402033150196075, -0.10300008952617645, 0.013059657998383045, 0.006429869681596756, -0.34667667746543884, -0.7099533081054688, -0.24668903648853302, -0.05228337645530701, -0.1042226031422615, -0.19397833943367004, -0.017261113971471786, 0.009377965703606606, 0.3393881916999817, -0.0051560853607952595, -0.11237049847841263, -0.02344263158738613));
	r += mul(s0_3, min16float4x4(-0.21076732873916626, 0.20463556051254272, 0.49595287442207336, -0.15814536809921265, -0.04759542644023895, 0.46183067560195923, -0.7636836171150208, 0.7870981097221375, 0.04435551166534424, -0.15056435763835907, -0.21862632036209106, -0.04127141088247299, -0.28332820534706116, -0.22387544810771942, -0.3432948887348175, 0.12676730751991272));
	r += mul(s0_4, min16float4x4(-0.3362448513507843, -0.28631746768951416, -0.06439214944839478, -0.22412103414535522, -0.512935221195221, 1.5429692268371582, 1.5195316076278687, 0.768166720867157, 0.25912120938301086, 0.1050199344754219, -0.14338405430316925, -0.3052172064781189, 0.5833542943000793, -0.7113850712776184, -0.578574538230896, -0.5057216286659241));
	r += mul(s0_5, min16float4x4(-0.02935030870139599, 0.1047171875834465, -0.011848298832774162, -0.04448341205716133, 0.1760382354259491, -0.24180597066879272, -0.17093372344970703, -0.036256853491067886, -0.4174562096595764, 0.15316466987133026, 0.10928215086460114, -0.10241527855396271, 0.04993944615125656, -0.08228328078985214, -0.014328938908874989, 0.00591488229110837));
	r += mul(s0_6, min16float4x4(-0.03611793741583824, -0.10244714468717575, -0.09070198237895966, 0.23284348845481873, 0.06295821070671082, -0.2153327465057373, -0.991435170173645, 0.04514513537287712, 0.06797178089618683, 0.0015522448811680079, 0.1916874796152115, -0.1666075885295868, 0.1301492601633072, 0.10278735309839249, 0.3812865614891052, 0.07779494673013687));
	r += mul(s0_7, min16float4x4(-0.05004763603210449, 0.017424385994672775, 0.08504883199930191, 0.30222612619400024, 0.26647353172302246, 0.15799148380756378, -0.00337817519903183, 0.2192978709936142, 0.41713762283325195, 0.01604674942791462, -0.2796582579612732, 0.29349327087402344, -0.24560584127902985, -0.03802979737520218, 0.20915009081363678, 0.06171822175383568));
	r += mul(s0_8, min16float4x4(-0.008193663321435452, -0.014838630333542824, -0.008999322541058064, 0.06017302721738815, -0.05599178001284599, -0.23074713349342346, -0.2077195644378662, -0.10767379403114319, -0.03764468431472778, 0.06443458795547485, 0.04501638561487198, 0.18408192694187164, -0.05132289230823517, 0.07446642220020294, 0.1425674706697464, 0.05757513642311096));
	r += float4(-0.2246662974357605, 0.11222204566001892, 0.0710449367761612, -0.08290078490972519);
	return max(r, 0.0);
}
void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float4 s0_0 = l0(-1.0, -1.0);
	min16float4 s0_1 = l0(0.0, -1.0);
	min16float4 s0_2 = l0(1.0, -1.0);
	min16float4 s0_3 = l0(-1.0, 0.0);
	min16float4 s0_4 = l0(0.0, 0.0);
	min16float4 s0_5 = l0(1.0, 0.0);
	min16float4 s0_6 = l0(-1.0, 1.0);
	min16float4 s0_7 = l0(0.0, 1.0);
	min16float4 s0_8 = l0(1.0, 1.0);
	conv1_0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8);
}
//!PASS 3
//!DESC CuNNy-1x4-BILINEAR-NVL-down
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN conv1_0
//!OUT down
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) O(conv1_0, float2(x, y))
float4 f0(float2 pt, float2 pos, min16float4 s0_0, min16float4 s0_1, min16float4 s0_2, min16float4 s0_3, min16float4 s0_4, min16float4 s0_5, min16float4 s0_6, min16float4 s0_7, min16float4 s0_8) {
	min16float4 r = 0.0;
	r += mul(s0_0, min16float4x4(-0.533200204372406, 0.11370992660522461, -0.22094541788101196, 0.19416792690753937, 0.2568458318710327, -0.09245412796735764, 0.10815448313951492, -0.04147078096866608, -0.11501815915107727, 0.039733707904815674, -0.03308801352977753, 0.026919221505522728, -0.06381434947252274, 0.020909667015075684, -0.05920318514108658, 0.0038779994938522577));
	r += mul(s0_1, min16float4x4(0.9799894094467163, -0.2555089294910431, -0.31175950169563293, -0.7569001317024231, -0.45954403281211853, 0.42964836955070496, 0.06513600051403046, 0.1864909827709198, 0.4170079231262207, -0.25098520517349243, -0.036877118051052094, -0.14794929325580597, 0.31537652015686035, 0.18801678717136383, 0.2974848449230194, 0.22474828362464905));
	r += mul(s0_2, min16float4x4(0.01522890105843544, 0.5800027847290039, -0.14987114071846008, -0.08277983963489532, 0.21458733081817627, -0.3633241653442383, 0.12511613965034485, 0.14111624658107758, 0.15731249749660492, 0.6894533634185791, 0.011740557849407196, 0.08477756381034851, -0.74980229139328, -0.6933597326278687, -0.2677304148674011, -0.3062025010585785));
	r += mul(s0_3, min16float4x4(-0.15983322262763977, 0.02421567402780056, -0.2735503017902374, 0.007519637234508991, 0.244886577129364, -0.08665227144956589, 0.4041970372200012, -0.08021519333124161, -0.044569987803697586, 0.01318445522338152, -0.12493585050106049, 0.04847963526844978, 0.030368411913514137, -0.04307902231812477, -0.012552442960441113, -0.021782923489809036));
	r += mul(s0_4, min16float4x4(-0.016985904425382614, -0.06487441062927246, 1.160512924194336, 0.4979586601257324, 0.13752347230911255, 0.6298562288284302, -1.2074077129364014, 0.3603910803794861, -0.397665411233902, -0.3035835027694702, 0.3507540822029114, -0.37793856859207153, 0.07763317972421646, 0.05415574461221695, 0.15988633036613464, 0.04334814101457596));
	r += mul(s0_5, min16float4x4(-0.037241119891405106, -0.08171027153730392, -0.01677350513637066, 0.3349636197090149, 0.284188449382782, 0.1137891411781311, 0.10573387145996094, -0.9199090600013733, -0.11880814284086227, -0.24403582513332367, 0.1380750685930252, 0.6653344631195068, 0.16650357842445374, 0.18946710228919983, -0.15887974202632904, 0.0032426216639578342));
	r += mul(s0_6, min16float4x4(0.005532172508537769, -0.032332081347703934, -0.06943441927433014, 0.012954269535839558, 0.033059872686862946, 0.1080799475312233, 0.007577837444841862, 0.028771094977855682, -0.02558334916830063, -0.01686709187924862, -0.0360785648226738, -0.03564736619591713, -0.007961737923324108, -0.0034492500126361847, 0.0036900595296174288, -0.01401231624186039));
	r += mul(s0_7, min16float4x4(0.03747684508562088, 0.0734725072979927, -0.015765802934765816, -0.04433046653866768, -0.08627709001302719, -0.163583442568779, 0.2725703716278076, 0.04021719470620155, -0.01794089563190937, -0.009263206273317337, -0.22240591049194336, -0.02954590506851673, -0.023156732320785522, -0.023725969716906548, 0.02480677329003811, 0.0176391638815403));
	r += mul(s0_8, min16float4x4(0.0033629401586949825, -0.0011075084330514073, 0.01861537992954254, -0.00963018462061882, -0.14305663108825684, -0.12325301766395569, -0.03744528442621231, 0.13337092101573944, 0.10358483344316483, 0.10183308273553848, 0.002906479872763157, -0.15966831147670746, 0.007831576280295849, 0.007491128984838724, -0.00011387645645299926, 0.009996097534894943));
	r += float4(-2.4675623322423235e-08, -2.973651547222289e-08, -2.7723311646354887e-08, -2.8029591092604278e-08);
	return tanh(r);
}
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float4 s0_0 = l0(-1.0, -1.0);
	min16float4 s0_1 = l0(0.0, -1.0);
	min16float4 s0_2 = l0(1.0, -1.0);
	min16float4 s0_3 = l0(-1.0, 0.0);
	min16float4 s0_4 = l0(0.0, 0.0);
	min16float4 s0_5 = l0(1.0, 0.0);
	min16float4 s0_6 = l0(-1.0, 1.0);
	min16float4 s0_7 = l0(0.0, 1.0);
	min16float4 s0_8 = l0(1.0, 1.0);
	down[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8);
}
//!PASS 4
//!DESC CuNNy-1x4-BILINEAR-NVL-shuffle
//!STYLE PS
//!IN down, INPUT
float4 Pass4(float2 pos) {
	float2 pt = float2(GetInputPt());
	const static float3x3 rgb2yuv = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081};
	const static float3x3 yuv2rgb = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float4 r = 0.0;
	float2 size = float2(GetInputSize());
	float2 f = frac(pos * size);
	float3 yuv = mul(rgb2yuv, INPUT.SampleLevel(SL, pos, 0).rgb);
	int2 i = int2(f * 2.0);
	r.r = down.SampleLevel(SP, (float2(0.5, 0.5) - f) * pt + pos, 0)[2*i.y + i.x];
	r.r += yuv.r;
	r.a = 1.0;
	r.r = clamp(r, 0.0, 1.0);
	float3 px = mul(yuv2rgb, float3(r.r, yuv.yz));
	return float4(px, 1.0);
}
