// CuNNy 3x4C BILINEAR CHROMA NVL DN
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

//!MAGPIE EFFECT
//!VERSION 3
//!OUTPUT_WIDTH INPUT_WIDTH * 2
//!OUTPUT_HEIGHT INPUT_HEIGHT * 2

//!TEXTURE
Texture2D INPUT;

//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D in_0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D conv1_0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D conv2_0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D conv3_0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D out_0;

//!PASS 1
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-DN-in
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT in_0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) (dot(float3(1.5472205877304077, 2.5877394676208496, 0.7350442409515381), O(INPUT, float2(x, y)).rgb) + -0.6226901412010193)
float4 f0(float2 pt, float2 pos, min16float s0_0, min16float s0_1, min16float s0_2, min16float s0_3, min16float s0_4, min16float s0_5, min16float s0_6, min16float s0_7, min16float s0_8) {
	min16float4 r = 0.0;
	r += min16float4(-0.023213937878608704, -0.027853500097990036, 0.12196182459592819, 0.009486724622547626) * s0_0;
	r += min16float4(0.03816593065857887, -0.053669754415750504, 0.07202272117137909, 0.013178322464227676) * s0_1;
	r += min16float4(-0.02679571323096752, 0.06858953088521957, 0.04971897974610329, -0.3564453125) * s0_2;
	r += min16float4(0.008818468078970909, -0.12283939123153687, -0.029723985120654106, -0.012679959647357464) * s0_3;
	r += min16float4(-0.05839400738477707, 0.4423827528953552, -0.473646879196167, -0.011038792319595814) * s0_4;
	r += min16float4(-0.005471093114465475, 0.05214408040046692, 0.0595458522439003, 0.35734954476356506) * s0_5;
	r += min16float4(0.0023072282783687115, 0.07300222665071487, 0.02887348085641861, 0.0031986075919121504) * s0_6;
	r += min16float4(-0.3082382380962372, -0.29392921924591064, 0.01576768420636654, -0.0020619307179003954) * s0_7;
	r += min16float4(0.3745698034763336, -0.1370978206396103, 0.08771030604839325, -0.0010374672710895538) * s0_8;
	r += min16float4(-0.016766998916864395, 0.006730961613357067, -0.007163683418184519, -0.0008544704760424793);
	return r;
}
void Pass1(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float s0_0 = l0(-1.0, -1.0);
	min16float s0_1 = l0(0.0, -1.0);
	min16float s0_2 = l0(1.0, -1.0);
	min16float s0_3 = l0(-1.0, 0.0);
	min16float s0_4 = l0(0.0, 0.0);
	min16float s0_5 = l0(1.0, 0.0);
	min16float s0_6 = l0(-1.0, 1.0);
	min16float s0_7 = l0(0.0, 1.0);
	min16float s0_8 = l0(1.0, 1.0);
	in_0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8);
}
//!PASS 2
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-DN-conv1
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN in_0
//!OUT conv1_0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) O(in_0, float2(x, y))
float4 f0(float2 pt, float2 pos, min16float4 s0_0, min16float4 s0_1, min16float4 s0_2, min16float4 s0_3, min16float4 s0_4, min16float4 s0_5, min16float4 s0_6, min16float4 s0_7, min16float4 s0_8, min16float4 s1_0, min16float4 s1_1, min16float4 s1_2, min16float4 s1_3, min16float4 s1_4, min16float4 s1_5, min16float4 s1_6, min16float4 s1_7, min16float4 s1_8) {
	min16float4 r = 0.0;
	r += mul(s0_0, min16float4x4(0.3045894205570221, 0.6017354726791382, -0.23779363930225372, -0.3782855272293091, 0.18017633259296417, 0.16748127341270447, -0.08891480416059494, -0.19373467564582825, -0.0025238697417080402, 0.07328871637582779, -0.030049307271838188, -0.01778160221874714, -0.0006476297858171165, -0.02099999226629734, -0.027756331488490105, 0.015863435342907906));
	r += mul(s0_1, min16float4x4(-0.39268508553504944, -0.0219863411039114, 0.10116582363843918, 0.21592360734939575, -0.2441169172525406, 0.11629817634820938, -0.2802603542804718, -0.13624168932437897, -0.03708052635192871, -0.0424867644906044, 0.00564903998747468, 0.00959193054586649, -0.040809571743011475, 0.029017744585871696, -0.14010272920131683, 0.0064026848413050175));
	r += mul(s0_2, min16float4x4(0.04591911658644676, 0.03660948574542999, 0.12468567490577698, 0.0030561857856810093, 0.011610244400799274, -0.09172400087118149, 0.357950359582901, 0.18017588555812836, -0.08960828185081482, -0.039888303726911545, 0.08469442278146744, 0.12280111759901047, 0.006924356799572706, -0.013524535112082958, 0.05333178490400314, 0.030072303488850594));
	r += mul(s0_3, min16float4x4(0.03487992286682129, 0.3411653935909271, 0.5712705254554749, -0.9667980670928955, -0.15066635608673096, -0.0964355543255806, 0.008511233143508434, 0.24942001700401306, 0.06737301498651505, 0.25487852096557617, 0.018642723560333252, -0.2783202528953552, -0.047097910195589066, 0.14035221934318542, -0.11581134796142578, -0.06087782606482506));
	r += mul(s0_4, min16float4x4(-0.21179983019828796, 0.11358656734228134, 0.23603583872318268, -0.14923524856567383, 0.05327993631362915, 0.4306848645210266, 0.36744046211242676, -0.44575586915016174, 0.032915372401475906, 0.1766938418149948, -0.08748936653137207, 0.012893807142972946, -0.11986956000328064, 0.12682069838047028, 0.05560457333922386, -0.09007883816957474));
	r += mul(s0_5, min16float4x4(0.03701914846897125, 0.09251126646995544, -0.3060947060585022, 0.007406051270663738, -0.11918143928050995, -0.04770643264055252, -0.33691129088401794, -0.10532145202159882, 0.06430957466363907, -0.012229019775986671, 0.034028343856334686, -0.12560732662677765, -0.0427987240254879, -0.06815218180418015, 0.09781238436698914, 0.030428597703576088));
	r += mul(s0_6, min16float4x4(0.002200715709477663, -0.19063758850097656, -0.07483366131782532, 0.16281817853450775, -0.021423598751425743, 0.05519779399037361, 0.05490337312221527, -0.10832483321428299, -0.12375826388597488, -0.24282830953598022, -0.06313733011484146, 0.2888829708099365, -0.5970839262008667, 0.5018049478530884, -0.5958112478256226, 0.2997822165489197));
	r += mul(s0_7, min16float4x4(0.0795026570558548, -0.05976836755871773, -0.11666721850633621, 0.06612124294042587, 0.01628820039331913, -0.2509785592556, 0.052086446434259415, 0.1960616260766983, 0.40762537717819214, -0.18012580275535583, -0.11086341738700867, -0.21981719136238098, -0.18233080208301544, 0.09034834802150726, -0.3964249789714813, 0.018105441704392433));
	r += mul(s0_8, min16float4x4(0.051365822553634644, -0.02015923708677292, -0.09651217609643936, -0.02606979012489319, 0.1889580488204956, 0.02989058569073677, -0.10028179734945297, -0.028858354315161705, -0.1144925057888031, -0.09356917440891266, 0.41057491302490234, 0.06184905767440796, -0.04413779079914093, -0.060628268867731094, 0.05248771607875824, 0.007524958346039057));
	r += mul(s1_0, min16float4x4(0.3994380533695221, -0.18802516162395477, 0.37428852915763855, 0.04558867588639259, -0.11337768286466599, -0.12265615910291672, 0.10956081748008728, 0.07298777252435684, -0.039341144263744354, -0.07730621099472046, 0.10511670261621475, 0.0435417965054512, 0.07521433383226395, -0.016289422288537025, 0.08128577470779419, -0.019526608288288116));
	r += mul(s1_1, min16float4x4(-0.09077286720275879, -0.0014511713525280356, -0.1993553638458252, -0.12548601627349854, 0.19143138825893402, -0.24049533903598785, 0.8424589037895203, 0.14307348430156708, 0.13232184946537018, 0.06070811673998833, 0.09949785470962524, -0.006768120918422937, 0.048561159521341324, -0.006295531056821346, 0.061353471130132675, -0.012124582193791866));
	r += mul(s1_2, min16float4x4(0.02461276575922966, 0.03203343227505684, -0.14695404469966888, -0.012823224999010563, 0.055237919092178345, 0.017493555322289467, -0.13268792629241943, -0.15674161911010742, -0.008891046047210693, -3.615073728724383e-05, -0.008549781516194344, -0.10841114819049835, 0.024867938831448555, 0.015330156311392784, -0.011791284196078777, -0.045916490256786346));
	r += mul(s1_3, min16float4x4(-0.044387511909008026, -0.4052090048789978, -0.2998296916484833, 0.8965452313423157, 0.0769590437412262, 0.22133417427539825, 0.2783203423023224, -0.3974250257015228, -0.1019299328327179, -0.29454225301742554, -0.07460179179906845, 0.2739303410053253, -0.7091760635375977, -0.36272841691970825, -0.2943239212036133, 0.17529228329658508));
	r += mul(s1_4, min16float4x4(0.21631912887096405, -0.09569541364908218, -0.20302274823188782, 0.19419413805007935, 0.306445837020874, -0.6541659235954285, 0.1636674553155899, 0.4188022017478943, 0.27440735697746277, -0.06651222705841064, 0.119954414665699, -0.19500413537025452, -0.12026581913232803, -0.07059428840875626, -0.31150534749031067, 0.02954840660095215));
	r += mul(s1_5, min16float4x4(-0.02253672480583191, 0.0033005771692842245, 0.1888691782951355, 0.026795152574777603, 0.0795266255736351, 0.06829569488763809, 0.555590808391571, 0.08081623166799545, 0.10671771317720413, 0.006665633991360664, 0.0064159659668803215, 0.10082699358463287, 0.003318066243082285, 0.016511229798197746, -0.03688717633485794, -0.03209077939391136));
	r += mul(s1_6, min16float4x4(-0.12143255025148392, 0.189280703663826, 0.09789173305034637, -0.12331318110227585, 0.05481155961751938, -0.18992924690246582, -0.1017942875623703, 0.10299734026193619, 0.12744145095348358, 0.2430955320596695, -0.012660338543355465, -0.2509782612323761, -0.11709500104188919, -0.25004687905311584, -0.039555490016937256, 0.0029440950602293015));
	r += mul(s1_7, min16float4x4(-0.13431665301322937, -0.01676921173930168, 0.16814908385276794, -0.07742717117071152, 0.08909077197313309, 0.20361509919166565, 0.10288701206445694, -0.2753400504589081, -0.3642362058162689, 0.2043933868408203, 0.026598062366247177, 0.23627856373786926, 0.23379020392894745, 0.006183600518852472, -0.0969473123550415, -0.05710035562515259));
	r += mul(s1_8, min16float4x4(-0.004029722884297371, 0.02276134118437767, 0.07999279350042343, 0.021573413163423538, -0.11503976583480835, 0.04353613033890724, 0.10369761288166046, 0.05345645919442177, -0.10425078123807907, -0.09452669322490692, -0.2136179357767105, -0.06504400074481964, 0.06615224480628967, 0.036430515348911285, -0.04344147443771362, 0.009812739677727222));
	r += min16float4(0.027552643790841103, 0.014883666299283504, 0.010120785795152187, -0.01724775694310665);
	return r;
}
void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float4 s0_0 = l0(-1.0, -1.0);
	min16float4 s0_1 = l0(0.0, -1.0);
	min16float4 s0_2 = l0(1.0, -1.0);
	min16float4 s0_3 = l0(-1.0, 0.0);
	min16float4 s0_4 = l0(0.0, 0.0);
	min16float4 s0_5 = l0(1.0, 0.0);
	min16float4 s0_6 = l0(-1.0, 1.0);
	min16float4 s0_7 = l0(0.0, 1.0);
	min16float4 s0_8 = l0(1.0, 1.0);
	min16float4 s1_0 = max(-s0_0, 0.0);
	min16float4 s1_1 = max(-s0_1, 0.0);
	min16float4 s1_2 = max(-s0_2, 0.0);
	min16float4 s1_3 = max(-s0_3, 0.0);
	min16float4 s1_4 = max(-s0_4, 0.0);
	min16float4 s1_5 = max(-s0_5, 0.0);
	min16float4 s1_6 = max(-s0_6, 0.0);
	min16float4 s1_7 = max(-s0_7, 0.0);
	min16float4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	conv1_0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 3
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-DN-conv2
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN conv1_0
//!OUT conv2_0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) O(conv1_0, float2(x, y))
float4 f0(float2 pt, float2 pos, min16float4 s0_0, min16float4 s0_1, min16float4 s0_2, min16float4 s0_3, min16float4 s0_4, min16float4 s0_5, min16float4 s0_6, min16float4 s0_7, min16float4 s0_8, min16float4 s1_0, min16float4 s1_1, min16float4 s1_2, min16float4 s1_3, min16float4 s1_4, min16float4 s1_5, min16float4 s1_6, min16float4 s1_7, min16float4 s1_8) {
	min16float4 r = 0.0;
	r += mul(s0_0, min16float4x4(-0.14012424647808075, 0.05593908578157425, -0.02904682047665119, 0.04468069598078728, 0.010183596052229404, 0.09887199103832245, 0.07589663565158844, -0.017733857035636902, 0.009875777177512646, -0.02387372963130474, -0.018862487748265266, -0.004944400861859322, -0.00315650412812829, 0.10424801707267761, 0.24757282435894012, -0.06961476057767868));
	r += mul(s0_1, min16float4x4(-0.20172128081321716, 0.17381934821605682, -0.1275833696126938, 0.05154198035597801, 0.26385626196861267, 0.038385652005672455, 0.17799003422260284, -0.0734754353761673, 0.11596366763114929, -0.06838545203208923, 0.13621047139167786, -0.032328616827726364, 0.5683587193489075, 0.003852460766211152, -0.057427339255809784, -0.0734812319278717));
	r += mul(s0_2, min16float4x4(-0.06956970691680908, 0.0033595680724829435, 0.15976913273334503, -0.025193750858306885, 0.003618381218984723, 0.0031935579609125853, -0.28841981291770935, 0.04915596544742584, 0.04767260327935219, -0.02479761838912964, -0.11589152365922928, 0.01589234545826912, 0.03343556821346283, -0.13916170597076416, -0.21045759320259094, -0.0018429973861202598));
	r += mul(s0_3, min16float4x4(-0.005677664652466774, 0.07734981924295425, -0.2094728797674179, 0.18008920550346375, -0.13945820927619934, -0.025927620008587837, 0.043582137674093246, -0.05969452112913132, 0.01739298552274704, 0.014349565841257572, -0.1640758067369461, 0.012701970525085926, -0.2712933421134949, -0.005078581627458334, 0.22574041783809662, -0.30900269746780396));
	r += mul(s0_4, min16float4x4(-0.056957848370075226, 0.30525410175323486, 0.10581108182668686, 0.20165961980819702, -0.47256943583488464, 0.27832043170928955, 0.09324696660041809, -0.1206471174955368, -0.12777724862098694, 0.15550406277179718, 0.5605471134185791, -0.2213624119758606, -0.2851276397705078, 0.09751769155263901, 0.16269662976264954, -0.4322812557220459));
	r += mul(s0_5, min16float4x4(0.02042018249630928, 0.07958471029996872, 0.20556989312171936, -0.21734289824962616, -0.04414277896285057, 0.3107692301273346, -0.23991741240024567, 0.4169568121433258, -0.015703748911619186, 0.0393211767077446, -0.1506105363368988, 0.10662323981523514, 0.2837364077568054, -0.02092563733458519, -0.13982099294662476, 0.2143794149160385));
	r += mul(s0_6, min16float4x4(0.21827997267246246, -0.07153443992137909, -0.08572111278772354, 0.14697465300559998, -0.028752552345395088, 0.036742545664310455, -0.005235329270362854, 0.04236283153295517, 0.15803693234920502, -0.05334058031439781, -0.07561390846967697, 0.013663891702890396, 0.0506153404712677, 0.039050083607435226, 0.023427022621035576, -0.04538820683956146));
	r += mul(s0_7, min16float4x4(0.005869891960173845, -0.30877137184143066, -0.009417933411896229, -0.1862378716468811, 0.1422625482082367, -0.14091816544532776, 0.04078149050474167, 0.146744042634964, -0.049471404403448105, -0.24150419235229492, 0.07803117483854294, -0.22075465321540833, -0.13952398300170898, -0.00990643072873354, -0.17526106536388397, -0.370863139629364));
	r += mul(s0_8, min16float4x4(-0.05718516185879707, 0.05162948742508888, 0.06176510453224182, -0.08594035357236862, 0.015656277537345886, -0.2548829913139343, 0.02655087411403656, -0.1534344106912613, -0.02725229226052761, 0.019129803404211998, -0.013982182368636131, -0.007650275249034166, 0.022732291370630264, 0.027217112481594086, -0.079405777156353, 0.5292960405349731));
	r += mul(s1_0, min16float4x4(0.18157026171684265, -0.10096374154090881, 0.0011141103459522128, -0.03808079659938812, 0.01453645620495081, -0.1230485662817955, -0.09356018900871277, -0.0018857246031984687, -0.08528163284063339, 0.05204882100224495, 0.05799143388867378, -0.0006530756363645196, 0.02169659733772278, -0.10327307134866714, -0.05843052268028259, -0.01939414069056511));
	r += mul(s1_1, min16float4x4(0.3270581364631653, -0.23111045360565186, 0.18905362486839294, -0.07861628383398056, -0.44593438506126404, -0.2170596867799759, -0.05394783243536949, -0.017965268343687057, -0.23301339149475098, 0.23533640801906586, -0.30372047424316406, 0.07669885456562042, -0.16748027503490448, -0.07093330472707748, 0.014785466715693474, 0.035034794360399246));
	r += mul(s1_2, min16float4x4(0.08834397792816162, -0.10950326174497604, -0.19382812082767487, 0.08450881391763687, -0.057758066803216934, 0.004058209713548422, 0.1798052340745926, 0.028674684464931488, -0.12646442651748657, 0.09742606431245804, 0.24066612124443054, -0.09848460555076599, -0.01579347997903824, 0.07584305852651596, -0.023845063522458076, 0.014376494102180004));
	r += mul(s1_3, min16float4x4(-0.024256203323602676, -0.10605266690254211, 0.32910239696502686, -0.036800093948841095, 0.14509046077728271, 0.028735386207699776, -0.09341859817504883, 0.18114283680915833, 0.030131233856081963, 0.22623372077941895, -0.16345703601837158, -0.14422550797462463, 0.15880891680717468, 0.009764591231942177, 0.05491260066628456, -0.009933946654200554));
	r += mul(s1_4, min16float4x4(-0.13484229147434235, -0.17902052402496338, -0.11655274778604507, -0.10798808187246323, 0.11688592284917831, -0.15161755681037903, -0.13332216441631317, 0.35276851058006287, 0.452141135931015, -0.3810933828353882, -0.12317537516355515, 0.10540921241044998, 0.33208099007606506, -0.31998175382614136, 0.039278294891119, 0.05012615770101547));
	r += mul(s1_5, min16float4x4(-0.020419681444764137, -0.018497595563530922, -0.03430008515715599, 0.3329923450946808, 0.16103771328926086, 0.1480967253446579, 0.09936418384313583, 0.026708398014307022, 0.10643825680017471, -0.25878846645355225, 0.2343773990869522, -0.4385913014411926, -0.13315141201019287, -0.24133038520812988, 0.08734536170959473, -0.14670315384864807));
	r += mul(s1_6, min16float4x4(-0.1400480568408966, 0.10153458267450333, -0.010741801001131535, -0.13720610737800598, -0.054287850856781006, -0.03278128057718277, 0.014905311167240143, 0.0488583967089653, -0.05296240746974945, 0.024741971865296364, 0.08779682219028473, -0.09016776084899902, -0.14704346656799316, 0.0198550783097744, 0.09741777926683426, -0.12650975584983826));
	r += mul(s1_7, min16float4x4(-0.16409610211849213, 0.35059285163879395, 0.030422737821936607, -0.005903840996325016, -0.1889616996049881, 0.14502198994159698, 0.018122009932994843, -0.002968041691929102, 0.014289283193647861, 0.32013580203056335, 0.22228515148162842, -0.48028528690338135, -0.05517060309648514, 0.305678129196167, 0.08082853257656097, 0.1180557981133461));
	r += mul(s1_8, min16float4x4(0.009424464777112007, 0.02097172476351261, -0.09945301711559296, -0.008081784471869469, 0.009348582476377487, 0.15759752690792084, -0.011539189144968987, 0.10814803093671799, 0.021636635065078735, 0.12389425188302994, -0.04466265067458153, -0.09442145377397537, 0.020567603409290314, 0.17246730625629425, -0.1577148288488388, -0.07913810759782791));
	r += min16float4(0.010186467319726944, -0.01104740146547556, -0.0012690782314166427, -0.0032813269644975662);
	return r;
}
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float4 s0_0 = l0(-1.0, -1.0);
	min16float4 s0_1 = l0(0.0, -1.0);
	min16float4 s0_2 = l0(1.0, -1.0);
	min16float4 s0_3 = l0(-1.0, 0.0);
	min16float4 s0_4 = l0(0.0, 0.0);
	min16float4 s0_5 = l0(1.0, 0.0);
	min16float4 s0_6 = l0(-1.0, 1.0);
	min16float4 s0_7 = l0(0.0, 1.0);
	min16float4 s0_8 = l0(1.0, 1.0);
	min16float4 s1_0 = max(-s0_0, 0.0);
	min16float4 s1_1 = max(-s0_1, 0.0);
	min16float4 s1_2 = max(-s0_2, 0.0);
	min16float4 s1_3 = max(-s0_3, 0.0);
	min16float4 s1_4 = max(-s0_4, 0.0);
	min16float4 s1_5 = max(-s0_5, 0.0);
	min16float4 s1_6 = max(-s0_6, 0.0);
	min16float4 s1_7 = max(-s0_7, 0.0);
	min16float4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	conv2_0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 4
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-DN-conv3
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN conv2_0
//!OUT conv3_0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) O(conv2_0, float2(x, y))
float4 f0(float2 pt, float2 pos, min16float4 s0_0, min16float4 s0_1, min16float4 s0_2, min16float4 s0_3, min16float4 s0_4, min16float4 s0_5, min16float4 s0_6, min16float4 s0_7, min16float4 s0_8, min16float4 s1_0, min16float4 s1_1, min16float4 s1_2, min16float4 s1_3, min16float4 s1_4, min16float4 s1_5, min16float4 s1_6, min16float4 s1_7, min16float4 s1_8) {
	min16float4 r = 0.0;
	r += mul(s0_0, min16float4x4(-0.008098084479570389, 0.004641198553144932, 0.026189586147665977, 0.02133728191256523, -0.17919905483722687, 0.13915419578552246, 0.2356705516576767, 0.30160924792289734, 0.027540400624275208, -0.008787115104496479, -0.032103344798088074, -0.02642826735973358, 0.0810331478714943, 0.13831591606140137, 0.2529745399951935, 0.17736169695854187));
	r += mul(s0_1, min16float4x4(-0.0005778557970188558, -0.031187713146209717, -0.05123698711395264, -0.05101893097162247, -0.1867155134677887, 0.5322453379631042, 0.21148666739463806, 0.3325609564781189, 0.09016343206167221, 0.01654024049639702, -0.012940800748765469, 0.056146085262298584, -0.0022668414749205112, 0.20294438302516937, -0.45512136816978455, 0.015371743589639664));
	r += mul(s0_2, min16float4x4(0.03138143941760063, 0.00015039513527881354, 0.0025589619763195515, 0.005344382021576166, 0.057737454771995544, 0.15185531973838806, -0.045829400420188904, 0.03391856327652931, -0.0855645015835762, 0.180307999253273, 0.011299082078039646, 0.12879328429698944, -0.02076134644448757, -0.07094249874353409, 0.030217407271265984, -0.03725539892911911));
	r += mul(s0_3, min16float4x4(0.004088280256837606, 0.11462706327438354, 0.1360025554895401, 0.1928708553314209, -0.04615839943289757, 0.014137799851596355, 0.029749950394034386, -0.07891587913036346, -0.029940767213702202, 0.012233930639922619, 0.026089336723089218, 0.033186979591846466, -0.15478475391864777, 0.050757214426994324, 0.3056671917438507, 0.07175400108098984));
	r += mul(s0_4, min16float4x4(0.282664954662323, 0.08618097752332687, -0.33710166811943054, -0.0064294724725186825, 0.11298921704292297, -0.3844892382621765, -0.21634911000728607, -0.2260180562734604, -0.08719316869974136, 0.004880331456661224, -0.08069736510515213, -0.08667153120040894, 0.783277153968811, 0.5253677368164062, 0.04881059378385544, 0.12876813113689423));
	r += mul(s0_5, min16float4x4(0.06276798993349075, 0.04601193964481354, -0.035347454249858856, 0.014211848378181458, -0.015422833152115345, 0.16062457859516144, 0.05441128835082054, 0.08075293153524399, -0.22718214988708496, 0.42386314272880554, 0.05009106174111366, 0.3942902684211731, 0.06935861706733704, -0.25293341279029846, 0.12132913619279861, -0.1977674812078476));
	r += mul(s0_6, min16float4x4(-0.09989574551582336, -0.011361172422766685, 0.012196261435747147, -0.03449968993663788, -0.04260319471359253, -0.022559095174074173, -0.027643823996186256, -0.058479417115449905, 0.0148386899381876, 0.013457465916872025, 0.008217641152441502, 0.015938755124807358, 0.04834294691681862, 3.208723137504421e-05, 0.08598620444536209, -0.046020761132240295));
	r += mul(s0_7, min16float4x4(-0.21639686822891235, -0.1159677729010582, -0.006573045626282692, -0.12972646951675415, -0.007895172573626041, -0.02433846890926361, -0.10327734798192978, 0.040163181722164154, 0.04570574685931206, 0.013134263455867767, 0.07884249836206436, 0.046015530824661255, 0.04984356462955475, 0.028129540383815765, -0.059127092361450195, -0.007897993549704552));
	r += mul(s0_8, min16float4x4(-0.1510864496231079, -0.08656077831983566, -0.250796914100647, 0.08044002205133438, 0.016476694494485855, 0.03820602223277092, 0.03165502846240997, 0.015707777813076973, 0.03858133405447006, 0.0989987701177597, 0.11039449274539948, 0.0705891102552414, 0.003316001035273075, 0.029268885031342506, -0.01714419201016426, 0.01820296049118042));
	r += mul(s1_0, min16float4x4(-0.07943792641162872, 0.033447448164224625, 0.08183638751506805, 0.07069072872400284, 0.016852859407663345, 0.007379940710961819, -0.04855865240097046, -0.009178731590509415, 0.0460502989590168, 0.04274141788482666, 0.01097123697400093, 0.0773392841219902, 0.0018286792328581214, -0.01666196994483471, -0.03532176837325096, -0.03977545350790024));
	r += mul(s1_1, min16float4x4(-0.19303786754608154, 0.20418767631053925, 0.05878584086894989, 0.20176737010478973, -0.018957698717713356, 0.033567026257514954, 0.0075326841324567795, 0.06266847252845764, 0.05449938401579857, -0.18408137559890747, -0.0927787572145462, -0.1524328887462616, -0.1508409082889557, -0.056509993970394135, 0.13623011112213135, -6.893112004036084e-05));
	r += mul(s1_2, min16float4x4(-0.04238130524754524, -0.08434166759252548, -0.10191724449396133, -0.15453511476516724, 0.002024367218837142, 0.016965460032224655, 0.03764384239912033, -0.0013863799395039678, -0.00042799979564733803, -0.02436092309653759, 0.01819157972931862, 0.003948998637497425, 0.25745001435279846, -0.4196837246417999, -0.06302301585674286, -0.3291015028953552));
	r += mul(s1_3, min16float4x4(-0.018565954640507698, -0.013190530240535736, 0.009537672623991966, -0.03651319816708565, 0.008774918504059315, -0.051639631390571594, -0.07739167660474777, -0.19854044914245605, -0.1129196360707283, -0.08862563222646713, -0.150125190615654, -0.01862245984375477, 0.0015475876862183213, 0.017343858256936073, 0.02438655123114586, 0.019371751695871353));
	r += mul(s1_4, min16float4x4(0.255563884973526, 0.1521865874528885, 0.3946952819824219, 0.38021379709243774, -0.10781442373991013, -0.395393043756485, 0.14113478362560272, -0.10912857949733734, 0.4912392497062683, -0.2534257769584656, 0.5097660422325134, -0.932144045829773, -0.024110892787575722, -0.012647930532693863, -0.14142589271068573, -0.039727311581373215));
	r += mul(s1_5, min16float4x4(0.010753481648862362, 0.14991983771324158, 0.4649503529071808, -0.1411123126745224, 0.014002672396600246, -0.1924772560596466, 0.025049246847629547, -0.15807567536830902, 0.0029235919937491417, 0.11518798768520355, -0.03047267347574234, 0.0908740907907486, 0.006244533229619265, -0.06986244767904282, -0.12595318257808685, -0.06274575740098953));
	r += mul(s1_6, min16float4x4(-0.005557600408792496, -0.0207637008279562, -0.0181537214666605, -0.020693477243185043, 0.00512726791203022, -0.004906831309199333, 0.03958563506603241, 0.1307222694158554, 0.031089141964912415, 0.05247318372130394, 0.09741885960102081, -0.0022344435565173626, 0.02000228688120842, 0.012611455284059048, 0.00690954877063632, 0.027059970423579216));
	r += mul(s1_7, min16float4x4(-0.010894057340919971, 0.022798651829361916, -0.014280199073255062, 0.09336313605308533, 0.44835391640663147, 0.34091755747795105, -0.01115158200263977, 0.06666314601898193, -0.10621877014636993, -0.02735603228211403, -0.1911318004131317, -0.0393422394990921, 0.0018537102732807398, -0.0015694921603426337, 0.07104497402906418, -0.027388926595449448));
	r += mul(s1_8, min16float4x4(0.009637696668505669, 0.0035681778099387884, 0.20942707359790802, -0.04580184444785118, -0.0738929957151413, -0.07452860474586487, 0.016419801861047745, 0.0033782487735152245, -0.022136887535452843, -0.02370797097682953, -0.09897519648075104, 0.016876786947250366, -0.011688279919326305, -0.017135536298155785, -0.02105388231575489, -0.022782372310757637));
	r += min16float4(0.004404718056321144, -0.0063317688181996346, 0.004928781650960445, -0.005086897872388363);
	return r;
}
void Pass4(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float4 s0_0 = l0(-1.0, -1.0);
	min16float4 s0_1 = l0(0.0, -1.0);
	min16float4 s0_2 = l0(1.0, -1.0);
	min16float4 s0_3 = l0(-1.0, 0.0);
	min16float4 s0_4 = l0(0.0, 0.0);
	min16float4 s0_5 = l0(1.0, 0.0);
	min16float4 s0_6 = l0(-1.0, 1.0);
	min16float4 s0_7 = l0(0.0, 1.0);
	min16float4 s0_8 = l0(1.0, 1.0);
	min16float4 s1_0 = max(-s0_0, 0.0);
	min16float4 s1_1 = max(-s0_1, 0.0);
	min16float4 s1_2 = max(-s0_2, 0.0);
	min16float4 s1_3 = max(-s0_3, 0.0);
	min16float4 s1_4 = max(-s0_4, 0.0);
	min16float4 s1_5 = max(-s0_5, 0.0);
	min16float4 s1_6 = max(-s0_6, 0.0);
	min16float4 s1_7 = max(-s0_7, 0.0);
	min16float4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	conv3_0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 5
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-DN-out
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN conv3_0
//!OUT out_0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) O(conv3_0, float2(x, y))
float4 f0(float2 pt, float2 pos, min16float4 s0_0, min16float4 s0_1, min16float4 s0_2, min16float4 s0_3, min16float4 s0_4, min16float4 s0_5, min16float4 s0_6, min16float4 s0_7, min16float4 s0_8, min16float4 s1_0, min16float4 s1_1, min16float4 s1_2, min16float4 s1_3, min16float4 s1_4, min16float4 s1_5, min16float4 s1_6, min16float4 s1_7, min16float4 s1_8) {
	min16float4 r = 0.0;
	r += mul(s0_0, min16float4x4(0.08813535422086716, -0.004346457775682211, 0.042377736419439316, -0.013826326467096806, 0.09179303050041199, -0.03190751373767853, -0.002488328143954277, -0.026530854403972626, -0.01812782697379589, -0.017158441245555878, 0.04357897490262985, 0.011762430891394615, -0.054543208330869675, 0.02079363353550434, -0.013942810706794262, 0.009269739501178265));
	r += mul(s0_1, min16float4x4(-0.14148657023906708, -0.10620023310184479, 0.010718637146055698, 0.08058611303567886, -0.1489032804965973, -0.13469111919403076, -0.00883345864713192, 0.06116659939289093, -0.08912288397550583, -0.08885091543197632, 0.014072496443986893, 0.06616264581680298, 0.050164151936769485, 0.1772467941045761, 0.05652417615056038, 0.006705745588988066));
	r += mul(s0_2, min16float4x4(0.038202445954084396, 0.06274037808179855, -0.003613000502809882, -0.010788299143314362, 0.00708732008934021, 0.03070506826043129, -0.006539832800626755, -0.028454987332224846, 0.02913084253668785, 0.01684398204088211, 0.0006432285299524665, -0.014576994813978672, 0.0333295539021492, -0.028898267075419426, 0.002604501321911812, 0.028170162811875343));
	r += mul(s0_3, min16float4x4(-0.04926592856645584, 0.025639280676841736, 0.06368711590766907, 0.020089678466320038, 0.31347760558128357, 0.009768260642886162, 0.29831796884536743, 0.008802598342299461, -0.050935905426740646, 0.04070238769054413, -0.1081700548529625, -0.0022266421001404524, -0.12478502839803696, -0.030558673664927483, -0.0557476207613945, -0.013171783648431301));
	r += mul(s0_4, min16float4x4(-0.037710122764110565, -0.06091243401169777, -0.044807687401771545, 0.014690261334180832, 0.20333412289619446, 0.22217927873134613, 0.01277895737439394, -0.14207935333251953, -0.09009546786546707, -0.2705507278442383, -0.2299276888370514, -0.4013694226741791, -0.18211327493190765, 0.10815083235502243, -0.537104070186615, 0.2782914936542511));
	r += mul(s0_5, min16float4x4(0.06612160801887512, 0.12426748126745224, 0.015616850927472115, 0.042602818459272385, -0.05661994591355324, -0.12477420270442963, 0.006254853215068579, 0.07690361887216568, 0.04087059572339058, 0.09690074622631073, 0.009074133820831776, 0.016256075352430344, 0.15283836424350739, 0.28417983651161194, 0.04066597670316696, -0.25683581829071045));
	r += mul(s0_6, min16float4x4(-0.008815149776637554, 0.000816462270449847, -0.059601958841085434, 0.019086670130491257, 0.012556099332869053, 0.02528574876487255, 0.13349583745002747, 0.04430102929472923, 0.0014710950199514627, -0.007921930402517319, 0.004435990005731583, 0.01456012949347496, -0.006127648055553436, -0.01520517934113741, -0.0833258107304573, -0.03677615523338318));
	r += mul(s0_7, min16float4x4(0.001504857325926423, -0.018375350162386894, -0.002811883110553026, -0.08846156299114227, -0.0822700634598732, -0.028627032414078712, 0.004061694722622633, 0.11939891427755356, -0.003809962887316942, 0.010107926093041897, 0.00034191308077424765, -0.03444543853402138, 0.07641627639532089, 0.015449874103069305, 0.10378298908472061, -0.006271306425333023));
	r += mul(s0_8, min16float4x4(0.005218940787017345, -0.011914043687283993, 0.010090572759509087, 0.03184887021780014, -0.009002471342682838, -0.002547245239838958, -0.0023256230633705854, -0.04796052724123001, 0.024002043530344963, 0.021181263029575348, 0.014505857601761818, 0.040462758392095566, -0.0019526820397004485, -0.02043195441365242, 0.028505979105830193, 0.11495556682348251));
	r += mul(s1_0, min16float4x4(-0.02129882574081421, 0.005185638088732958, -0.024811239913105965, 0.0010065593523904681, 0.015874354168772697, -0.06367358565330505, -0.013197082094848156, 0.0171134565025568, 0.07643008232116699, -0.0012136857258155942, -0.031710341572761536, -0.027742045000195503, -0.09207617491483688, 0.02177966944873333, 0.012655223719775677, 0.00023181956203188747));
	r += mul(s1_1, min16float4x4(0.16748087108135223, 0.01200254075229168, -0.06204942241311073, -0.09497712552547455, 0.04560473933815956, 0.08569368720054626, 0.03871331363916397, 0.05044734850525856, 0.046225786209106445, 0.07153332233428955, -0.020392777398228645, -0.058966126292943954, 0.030544396489858627, -0.038944922387599945, -0.05504686385393143, -0.09741197526454926));
	r += mul(s1_2, min16float4x4(-0.0638156607747078, 0.03378913924098015, 0.0037639837246388197, -0.01086048036813736, -0.00694234948605299, -0.0058638667687773705, 0.0007176502258516848, 0.00955183245241642, -0.0005523790023289621, -0.008503739722073078, -0.00011540690320543945, -0.0035657102707773447, -0.018536394461989403, -0.020181361585855484, 0.0006226357654668391, -0.014888986013829708));
	r += mul(s1_3, min16float4x4(0.061421558260917664, -0.008463948965072632, -0.036759428679943085, -0.004908830393105745, -0.12155473977327347, -0.15670958161354065, -0.02016269788146019, -0.2182745337486267, 0.2075246125459671, -0.18603645265102386, 0.35645365715026855, -0.06420905888080597, -0.06250736862421036, 0.11733569949865341, -0.14014564454555511, 0.13432922959327698));
	r += mul(s1_4, min16float4x4(-0.44019657373428345, 0.11158636212348938, 0.39746910333633423, 0.09601226449012756, -0.07787881791591644, -0.08428152650594711, -0.05354266241192818, -0.01750170812010765, 0.151209756731987, 0.48163339495658875, 0.014112620614469051, 0.23983898758888245, 0.1469944268465042, 0.09702835232019424, 0.14591917395591736, 0.02960270084440708));
	r += mul(s1_5, min16float4x4(-0.004479364957660437, -0.4873788058757782, -0.006173151545226574, 0.21250265836715698, 0.04834914952516556, 0.08789573609828949, -0.0026508860755711794, -0.003364782314747572, -0.05734323337674141, -0.0675722062587738, 0.0021046928595751524, 0.024645637720823288, -0.0832538828253746, -0.16259832680225372, 0.0016288902843371034, 0.03331146016716957));
	r += mul(s1_6, min16float4x4(0.012931514531373978, 0.0022959967609494925, 0.00013529938587453216, -0.016894221305847168, 0.03332706540822983, -0.025000128895044327, -0.12918908894062042, -0.04349738731980324, -0.00037331311614252627, 0.048203516751527786, -0.08082181215286255, -0.0411623939871788, 0.02099761925637722, 0.025852395221590996, 0.038980934768915176, 0.07026244699954987));
	r += mul(s1_7, min16float4x4(0.024947090074419975, -0.00627073273062706, 0.06327082216739655, 0.14450952410697937, 0.03209082409739494, 0.001578431692905724, -0.02791408635675907, -0.14273284375667572, -0.04457970708608627, -0.07153894752264023, 0.04925530403852463, 0.11936614662408829, -0.0881335511803627, -0.054149776697158813, -0.03738514706492424, 0.023868149146437645));
	r += mul(s1_8, min16float4x4(-0.023203382268548012, 0.02959713153541088, 0.02997821941971779, -0.009239250794053078, 0.013338569551706314, 0.004993803799152374, 0.019004540517926216, 0.03503260761499405, -0.021134432405233383, -0.029227999970316887, -0.01388639211654663, -0.036793969571590424, -0.003888516454026103, 0.01102640200406313, -0.030104512348771095, -0.09462792426347733));
	r += min16float4(0.0015301076928153634, 0.0016514419112354517, 0.0022048759274184704, 0.002264810260385275);
	return tanh(r);
}
void Pass5(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float4 s0_0 = l0(-1.0, -1.0);
	min16float4 s0_1 = l0(0.0, -1.0);
	min16float4 s0_2 = l0(1.0, -1.0);
	min16float4 s0_3 = l0(-1.0, 0.0);
	min16float4 s0_4 = l0(0.0, 0.0);
	min16float4 s0_5 = l0(1.0, 0.0);
	min16float4 s0_6 = l0(-1.0, 1.0);
	min16float4 s0_7 = l0(0.0, 1.0);
	min16float4 s0_8 = l0(1.0, 1.0);
	min16float4 s1_0 = max(-s0_0, 0.0);
	min16float4 s1_1 = max(-s0_1, 0.0);
	min16float4 s1_2 = max(-s0_2, 0.0);
	min16float4 s1_3 = max(-s0_3, 0.0);
	min16float4 s1_4 = max(-s0_4, 0.0);
	min16float4 s1_5 = max(-s0_5, 0.0);
	min16float4 s1_6 = max(-s0_6, 0.0);
	min16float4 s1_7 = max(-s0_7, 0.0);
	min16float4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	out_0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 6
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-DN-shuffle
//!STYLE PS
//!IN out_0, INPUT
float4 Pass6(float2 pos) {
	float2 pt = float2(GetInputPt());
	const static float3x3 rgb2yuv = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081};
	const static float3x3 yuv2rgb = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float4 r = 0.0;
	float2 size = float2(GetInputSize());
	float2 f = frac(pos * size);
	float3 yuv = mul(rgb2yuv, INPUT.SampleLevel(SL, pos, 0).rgb);
	int2 i = int2(f * 2.0);
	r.r = out_0.SampleLevel(SP, (float2(0.5, 0.5) - f) * pt + pos, 0)[2*i.y + i.x];
	r.r += yuv.r;
	r.a = 1.0;
	r.r = clamp(r, 0.0, 1.0);
	float3 px = mul(yuv2rgb, float3(r.r, yuv.yz));
	return float4(px, 1.0);
}
