// CuNNy 3x4C BILINEAR CHROMA DS NVL
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

//!MAGPIE EFFECT
//!VERSION 3
//!OUTPUT_WIDTH INPUT_WIDTH * 2
//!OUTPUT_HEIGHT INPUT_HEIGHT * 2

//!TEXTURE
Texture2D INPUT;


//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D in_0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D conv1_0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D conv2_0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D conv3_0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D out_0;

//!PASS 1
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-DS-NVL-in
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT in_0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) (dot(float3(-0.6403403282165527, -1.218862771987915, -0.2809092104434967), O(INPUT, float2(x, y)).rgb) + 1.9113510847091675)
float4 f0(float2 pt, float2 pos, min16float s0_0, min16float s0_1, min16float s0_2, min16float s0_3, min16float s0_4, min16float s0_5, min16float s0_6, min16float s0_7, min16float s0_8) {
	min16float4 r = 0.0;
	r += min16float4(0.0211766697, 0.0220677145, -0.0047543510, 0.1439593285) * s0_0;
	r += min16float4(-0.0258496888, 0.5410155654, -0.0019781380, -0.4801266789) * s0_1;
	r += min16float4(-0.0002550912, -0.0623235367, -0.0066402932, -0.1400987804) * s0_2;
	r += min16float4(-0.6834578514, 0.3486332893, 0.0158959124, 0.1586974114) * s0_3;
	r += min16float4(0.0656275451, -0.6432507634, -0.0002992490, 0.5064373612) * s0_4;
	r += min16float4(0.0455038361, -0.2279063165, 0.0058264704, -0.1479490995) * s0_5;
	r += min16float4(0.6966558099, -0.0375467949, -0.7099952698, -0.1816222519) * s0_6;
	r += min16float4(-0.0676860958, -0.0518159196, 0.7089843154, 0.0134923020) * s0_7;
	r += min16float4(-0.0477255285, 0.1146375462, -0.0052613788, 0.1218312904) * s0_8;
	r += min16float4(-0.0006338648963719606, -0.0019304826855659485, 0.0029313478153198957, 0.00023407352273352444);
	return r;
}
void Pass1(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float s0_0 = l0(-1.0, -1.0);
	min16float s0_1 = l0(0.0, -1.0);
	min16float s0_2 = l0(1.0, -1.0);
	min16float s0_3 = l0(-1.0, 0.0);
	min16float s0_4 = l0(0.0, 0.0);
	min16float s0_5 = l0(1.0, 0.0);
	min16float s0_6 = l0(-1.0, 1.0);
	min16float s0_7 = l0(0.0, 1.0);
	min16float s0_8 = l0(1.0, 1.0);
	in_0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8);
}
//!PASS 2
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-DS-NVL-conv1
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN in_0
//!OUT conv1_0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) O(in_0, float2(x, y))
float4 f0(float2 pt, float2 pos, min16float4 s0_0, min16float4 s0_1, min16float4 s0_2, min16float4 s0_3, min16float4 s0_4, min16float4 s0_5, min16float4 s0_6, min16float4 s0_7, min16float4 s0_8, min16float4 s1_0, min16float4 s1_1, min16float4 s1_2, min16float4 s1_3, min16float4 s1_4, min16float4 s1_5, min16float4 s1_6, min16float4 s1_7, min16float4 s1_8) {
	min16float4 r = 0.0;
	r += mul(s0_0, min16float4x4(-0.1051806957, -0.1459608227, -0.1002759933, -0.0377662145, -0.0959468633, -0.1298437864, 0.0352123603, 0.0874160528, -0.1297727823, -0.1733486205, -0.1213135421, -0.0501882918, 0.1293226480, 0.1931889653, -0.0194053482, -0.0412878022));
	r += mul(s0_1, min16float4x4(0.6149231195, -0.0159579758, -0.2876810730, -0.2928270996, 0.3525398672, -0.2123032659, -0.1214755923, -0.1694559455, 0.5644485950, 0.2917522490, -0.2016583383, -0.0827862173, 0.4228115976, 0.2801234722, -0.1021926254, -0.0940129980));
	r += mul(s0_2, min16float4x4(0.4426866472, -0.0031860080, -0.2229875773, 0.2357063591, 0.1635740995, -0.0216864385, -0.0522200912, -0.0585019439, 0.0046100467, 0.0210752133, 0.0590722933, 0.0161064509, 0.0697729662, 0.0522289872, 0.0007380829, -0.0214229692));
	r += mul(s0_3, min16float4x4(-0.3486156166, 0.0270049945, -0.1077966914, -0.2414007932, -0.5517506003, -0.2779054642, 0.0048907106, -0.4224903882, -0.0837093368, -0.0922057405, 0.1335682124, -0.0267742500, -0.4226510823, -0.1925539374, -0.3349558711, -0.2829147577));
	r += mul(s0_4, min16float4x4(0.2081461400, -0.2612313032, 0.0038180226, -0.2586310208, 0.0710349903, -0.4617159367, -0.0825831145, 0.4027011693, -0.2475586683, -0.2552234232, 0.2157039195, 0.2880852818, 0.6888061762, 0.2913763523, -0.0096393581, 0.0261349175));
	r += mul(s0_5, min16float4x4(-0.0789880604, 0.2790196836, 0.0130964452, -0.1445919126, 0.2124239206, -0.0128625054, -0.1662489325, -0.0095481761, -0.6660159230, 0.1879429370, 0.8295077682, 0.2006849796, -0.1572214514, 0.0579144992, -0.0543103106, 0.1254879683));
	r += mul(s0_6, min16float4x4(-0.0729464963, 0.0887581483, -0.1620963812, -0.1859610081, -0.0487409122, -0.4904453754, 0.1699674428, -0.3017493188, -0.0457728282, 0.2094948590, -0.1401327848, -0.1888244450, -0.0281314831, 0.1728160232, 0.0315961279, 0.1381765753));
	r += mul(s0_7, min16float4x4(-0.2270758450, -0.0290462878, 0.2092331946, 0.1596323997, -0.3028425574, -0.0501421615, 0.1326232553, -0.3063058853, -0.0646490976, 0.1726541668, 0.0087606413, -0.1275086701, -0.3974679410, 0.2951592803, -0.2025986910, 0.6458594203));
	r += mul(s0_8, min16float4x4(0.2288562804, -0.0818623304, -0.1434095800, -0.0570601895, -0.1103804931, -0.0108123869, 0.0575362705, -0.0876174271, 0.1841130555, -0.0686102733, -0.0791579336, -0.0501609258, -0.1374311000, 0.0458059087, 0.1750686318, 0.0185039677));
	r += mul(s1_0, min16float4x4(0.1341115832, 0.2024770826, 0.0595569052, 0.0224185660, 0.0651819184, -0.1576556265, -0.0478921905, -0.0391981602, 0.1947280467, 0.4219157696, 0.0874200165, 0.0078260181, 0.0002832184, 0.1912385225, -0.0476523787, 0.0052702888));
	r += mul(s1_1, min16float4x4(-0.3098288178, -0.1354825795, -0.1977835447, 0.5108862519, -0.4292439818, -0.1853409410, 0.1130378842, 0.0991019309, -0.1402514428, 0.1185389906, -0.0269497670, -0.0614912920, -0.3306164742, 0.0778444782, 0.1695176214, 0.1293968558));
	r += mul(s1_2, min16float4x4(0.1210738122, -0.2261240482, -0.0351361483, 0.3917552531, -0.2074535340, -0.1710492820, 0.0327957943, 0.1016925424, 0.8511255980, 0.1275849640, -0.3158608079, -0.1521963328, 0.0061792671, 0.0464936346, -0.0135667585, -0.0001222644));
	r += mul(s1_3, min16float4x4(0.3396076262, -0.0643627718, 0.0816982612, 0.1620749086, 0.4033168852, -0.3093981147, 0.1002984345, 0.3871411681, 0.2026367337, 0.3313595951, -0.2339402586, 0.0925735980, 0.4111225903, 0.8808597326, 0.4037617445, 0.0890113935));
	r += mul(s1_4, min16float4x4(-0.2096615732, 0.1723340899, -0.3777889013, 0.0435897522, -0.0807959363, 0.2270505577, -0.0023803944, -0.1695942283, 0.1201526001, 0.3861571550, -0.0791312978, -0.1003955454, -0.3056597114, -0.0305350255, -0.0173763447, 0.5730895400));
	r += mul(s1_5, min16float4x4(-0.1345754862, -0.0078231357, 0.3602314591, -0.3447279632, -0.2814762890, -0.1591452956, 0.1421222985, -0.0082359975, 0.3084880710, -0.1457274705, 0.2427489609, -0.1031238064, 0.3157347739, 0.1255972236, -0.0283955578, -0.0925959051));
	r += mul(s1_6, min16float4x4(0.0571615882, -0.1228710040, 0.1501383930, 0.1783083230, -0.1185240671, 0.0637225732, -0.0549242124, 0.1830469966, 0.0548709445, -0.2094622850, 0.1062483042, 0.2231440097, 0.0343951955, 0.4766289592, 0.1589139700, -0.2067069262));
	r += mul(s1_7, min16float4x4(0.1831064671, -0.0282650143, -0.1801752150, -0.2529295683, 0.2197394222, -0.1228144020, -0.4161734283, -0.2203608453, 0.0716954246, -0.1875691116, -0.0726781189, 0.1704114079, 0.5292969346, -0.1113218069, 0.1154419780, -0.5951551795));
	r += mul(s1_8, min16float4x4(-0.2026305795, 0.1704151779, 0.0680658668, 0.0007548016, -0.0984095559, -0.0147160124, 0.0278044045, -0.1096381992, -0.2425215989, 0.0306999814, 0.2626946270, 0.1599695086, 0.1216407642, 0.2150469869, -0.1207782403, -0.0040400214));
	r += min16float4(0.005143802613019943, 0.0037403726018965244, -0.009956400841474533, -0.004315962083637714);
	return r;
}
void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float4 s0_0 = l0(-1.0, -1.0);
	min16float4 s0_1 = l0(0.0, -1.0);
	min16float4 s0_2 = l0(1.0, -1.0);
	min16float4 s0_3 = l0(-1.0, 0.0);
	min16float4 s0_4 = l0(0.0, 0.0);
	min16float4 s0_5 = l0(1.0, 0.0);
	min16float4 s0_6 = l0(-1.0, 1.0);
	min16float4 s0_7 = l0(0.0, 1.0);
	min16float4 s0_8 = l0(1.0, 1.0);
	min16float4 s1_0 = max(-s0_0, 0.0);
	min16float4 s1_1 = max(-s0_1, 0.0);
	min16float4 s1_2 = max(-s0_2, 0.0);
	min16float4 s1_3 = max(-s0_3, 0.0);
	min16float4 s1_4 = max(-s0_4, 0.0);
	min16float4 s1_5 = max(-s0_5, 0.0);
	min16float4 s1_6 = max(-s0_6, 0.0);
	min16float4 s1_7 = max(-s0_7, 0.0);
	min16float4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	conv1_0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 3
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-DS-NVL-conv2
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN conv1_0
//!OUT conv2_0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) O(conv1_0, float2(x, y))
float4 f0(float2 pt, float2 pos, min16float4 s0_0, min16float4 s0_1, min16float4 s0_2, min16float4 s0_3, min16float4 s0_4, min16float4 s0_5, min16float4 s0_6, min16float4 s0_7, min16float4 s0_8, min16float4 s1_0, min16float4 s1_1, min16float4 s1_2, min16float4 s1_3, min16float4 s1_4, min16float4 s1_5, min16float4 s1_6, min16float4 s1_7, min16float4 s1_8) {
	min16float4 r = 0.0;
	r += mul(s0_0, min16float4x4(0.0389704667, 0.2666527033, 0.1448235661, 0.1950423717, -0.0223668963, -0.0981821865, -0.0838183165, -0.0624810830, -0.0551745594, 1.0984858274, 0.6529305577, -0.0452860445, -0.0274721161, -0.0296345595, -0.0342899337, -0.0166070741));
	r += mul(s0_1, min16float4x4(0.2368357778, 0.0421806723, -0.0959499106, -0.0062099798, -0.0294446517, -0.0253547952, 0.0643043444, -0.0475459136, 0.4488662779, 0.0146806249, -0.3309918940, -0.0849083960, -0.0239542760, 0.0487048998, 0.0456141494, 0.0264993962));
	r += mul(s0_2, min16float4x4(-0.0084408969, 0.0005139306, 0.0141296200, 0.0171956159, 0.0501728468, -0.0228963103, -0.0563435182, -0.0242517442, 0.0437077247, -0.0071082148, -0.0313413255, 0.0432806946, 0.0613742098, 0.0063579846, -0.0166643932, 0.0020129078));
	r += mul(s0_3, min16float4x4(0.0782212466, -0.3427704573, 0.3017743230, -0.1564583182, 0.0006256445, 0.0074602850, -0.1183362752, 0.0489568003, -0.0308195446, -0.2256494313, -0.1044883430, -0.0103675425, 0.1226382777, -0.2803121805, -0.3130742908, -0.1036626548));
	r += mul(s0_4, min16float4x4(-0.4599856138, -0.0306594223, -0.2662693262, 0.2274344116, 0.0079290625, 0.2133822888, 0.2393692285, -0.0440781824, -0.0374285914, 0.0709720254, -0.3794882298, 0.2772768140, 0.7017660737, 0.1293999553, 0.2890769243, 0.0775586069));
	r += mul(s0_5, min16float4x4(0.0597137734, -0.0193451978, 0.0035792347, 0.0671383739, 0.0419960842, 0.0317198895, -0.0778660625, 0.0274109021, 0.1274438351, 0.0063267485, -0.0666741952, 0.1105954349, 0.0836845264, -0.0187319778, -0.0448743328, 0.0166455079));
	r += mul(s0_6, min16float4x4(-0.0023932692, -0.0961009189, 0.2417098135, -0.0519470200, -0.0077964817, 0.0177409817, -0.0550543442, 0.0027018413, 0.0066628479, -0.0239889976, 0.0583417453, -0.0274862070, 0.0504109114, -0.0899463072, 0.3203012943, -0.4697107077));
	r += mul(s0_7, min16float4x4(-0.0700627640, 0.0197714157, -0.2808321118, -0.1041087136, -0.0058338884, -0.0082677575, 0.1417722553, -0.0329311751, 0.0033745735, 0.0502230301, -0.1288205981, 0.0100399405, -0.2900158465, 0.0708240122, 0.5786378384, -0.0421710089));
	r += mul(s0_8, min16float4x4(-0.0396693051, 0.0184872393, -0.0252818838, -0.0429067202, 0.0279285740, -0.0785562620, -0.0461735278, -0.0591773689, -0.0060416488, 0.0433000438, -0.0086356550, 0.0161838122, -0.0152118616, 0.0146844452, -0.0927782506, 0.0681918710));
	r += mul(s1_0, min16float4x4(0.1812254637, -0.3583877087, -0.1251383722, -0.4111804962, -0.0100235203, 0.1450155079, 0.1056585237, 0.0285428297, -0.0213967320, -0.1870572716, -0.2153334171, 0.0555749163, 0.0366124623, 0.2140191942, 0.0485171974, 0.3896450102));
	r += mul(s1_1, min16float4x4(-0.8925784826, 0.0579620972, 0.1961054057, -0.1880966276, -0.1430855393, 0.0507821552, 0.0322502814, -0.2292963266, 0.0033618903, -0.0482012145, 0.0581968427, 0.0495967269, -0.0410279706, -0.0512713082, -0.0306395888, -0.0119276131));
	r += mul(s1_2, min16float4x4(-0.0352156721, 0.0497152805, -0.0498917326, -0.0251602456, 0.1360268146, 0.0509871952, -0.0337503478, 0.1597201526, 0.0811478719, -0.0136317965, -0.0066585904, -0.0895739794, -0.0533136539, 0.0347179845, 0.0099671958, 0.0402021594));
	r += mul(s1_3, min16float4x4(-0.0602940433, 1.1447118521, -0.4383697510, 0.5205428600, 0.0048183277, 0.0549168251, -0.1669208407, 0.6485903263, -0.0014652873, 0.2166998982, -0.0756533071, 0.0595864765, 0.0035135951, 0.1123885438, 0.2043790221, -0.2092068940));
	r += mul(s1_4, min16float4x4(0.2498771846, -0.2341364771, 0.5853537321, -0.0136828357, -0.0369094983, 0.3797984123, 0.2001620978, 1.0949583054, 0.1790068001, 0.0549605936, -0.0626989752, -0.2696999311, -0.0747019574, -0.0311391447, -0.4054225385, -0.0062219109));
	r += mul(s1_5, min16float4x4(-0.1269289404, -0.0147015797, 0.0114270207, -0.1172005758, -0.2405105978, -0.1098360866, -0.1206764132, -0.0957246721, -0.1848938465, 0.0803936869, -0.0428688452, -0.0777144432, 0.0123789348, -0.0300513674, 0.0360871591, -0.0691254362));
	r += mul(s1_6, min16float4x4(-0.0333782285, 0.2825663388, -0.3334880173, 0.1294024438, -0.0005992791, 0.2915718853, -0.0914780498, -0.0372830182, -0.0044763410, 0.0562478602, -0.0113482280, 0.0467681363, -0.0068558562, -0.0269987099, 0.1177442223, 0.0029368680));
	r += mul(s1_7, min16float4x4(0.0207295343, 0.0547244139, 0.1182735041, -0.0198333599, 0.0950247794, 0.5782380700, 0.1384377480, -0.0973493606, 0.0197193734, -0.0620130002, 0.2596867085, 0.0425893776, 0.0082966965, -0.0121223116, -0.2509999871, 0.0383495949));
	r += mul(s1_8, min16float4x4(-0.0234192759, -0.0294032972, 0.0421450250, -0.0085519347, 0.0545931496, 0.0708455443, -0.3432919681, 0.0883281305, -0.0436033532, -0.0493034832, 0.0901813209, 0.0160088707, 0.0146542257, 0.0281376336, -0.0420556478, -0.0172705911));
	r += min16float4(0.001684007584117353, 0.0011637962888926268, 0.000287591596134007, 0.0053373416885733604);
	return r;
}
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float4 s0_0 = l0(-1.0, -1.0);
	min16float4 s0_1 = l0(0.0, -1.0);
	min16float4 s0_2 = l0(1.0, -1.0);
	min16float4 s0_3 = l0(-1.0, 0.0);
	min16float4 s0_4 = l0(0.0, 0.0);
	min16float4 s0_5 = l0(1.0, 0.0);
	min16float4 s0_6 = l0(-1.0, 1.0);
	min16float4 s0_7 = l0(0.0, 1.0);
	min16float4 s0_8 = l0(1.0, 1.0);
	min16float4 s1_0 = max(-s0_0, 0.0);
	min16float4 s1_1 = max(-s0_1, 0.0);
	min16float4 s1_2 = max(-s0_2, 0.0);
	min16float4 s1_3 = max(-s0_3, 0.0);
	min16float4 s1_4 = max(-s0_4, 0.0);
	min16float4 s1_5 = max(-s0_5, 0.0);
	min16float4 s1_6 = max(-s0_6, 0.0);
	min16float4 s1_7 = max(-s0_7, 0.0);
	min16float4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	conv2_0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 4
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-DS-NVL-conv3
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN conv2_0
//!OUT conv3_0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) O(conv2_0, float2(x, y))
float4 f0(float2 pt, float2 pos, min16float4 s0_0, min16float4 s0_1, min16float4 s0_2, min16float4 s0_3, min16float4 s0_4, min16float4 s0_5, min16float4 s0_6, min16float4 s0_7, min16float4 s0_8, min16float4 s1_0, min16float4 s1_1, min16float4 s1_2, min16float4 s1_3, min16float4 s1_4, min16float4 s1_5, min16float4 s1_6, min16float4 s1_7, min16float4 s1_8) {
	min16float4 r = 0.0;
	r += mul(s0_0, min16float4x4(0.0018889984, -0.0069544809, -0.0075123850, -0.0071356455, 0.0217778608, 0.0073337164, 0.0234117601, -0.0249777120, 0.0110906502, -0.0097022969, -0.0045969822, -0.0316133648, -0.0147481505, -0.0159054045, -0.0188523121, 0.0045096683));
	r += mul(s0_1, min16float4x4(0.0024110517, 0.0170040131, 0.0100508491, -0.0578881502, -0.0655888617, -0.0201789141, 0.0172690284, 0.1873626411, 0.1094134301, 0.0097971130, -0.0085002165, -0.3696816862, 0.0172790531, 0.0263052285, 0.0012911437, -0.0913246945));
	r += mul(s0_2, min16float4x4(0.0062416615, -0.0056376560, -0.0021322460, 0.0338201560, -0.0166493263, -0.1346502304, 0.1459961534, -0.1908431649, 0.0365065783, 0.3025719523, -0.2939516306, 0.2783242464, 0.0287552290, -0.0136105102, -0.0043570125, 0.0690887645));
	r += mul(s0_3, min16float4x4(-0.1293130815, 0.0564001873, -0.1390613765, 0.3293666542, -0.0206462182, -0.0445664264, -0.0184928160, -0.0136949616, 0.0830074251, 0.0047729849, 0.0176227409, -0.0117673967, 0.0186978653, 0.0145001309, 0.0151061006, -0.0357671082));
	r += mul(s0_4, min16float4x4(-0.0145268692, -0.3997572064, 0.3466810286, -0.5575017333, 0.2060651183, 0.1130738333, 0.3662113547, -0.2963014245, -0.1323692501, 0.0525800586, 0.1742764413, -0.2100848258, -0.1568658054, -0.1123025715, 0.0124019897, -0.0812965631));
	r += mul(s0_5, min16float4x4(0.0352841429, 0.0905726776, -0.0651767850, 0.0856961235, -0.2080311775, -0.2237733752, 0.1052258983, -0.1234549209, 0.3042416573, -0.1166662127, 0.2880857587, -0.0324448049, 0.1577163935, -0.0424433611, 0.1381799281, -0.0193282962));
	r += mul(s0_6, min16float4x4(-0.1469722539, 0.1599405110, 0.1835195273, -0.0087667694, -0.0232194848, 0.0006956454, -0.0006829217, -0.0232884735, -0.0318055339, -0.0221559685, 0.0057341731, -0.0416517742, 0.0449704491, 0.0245997924, 0.0557895973, -0.0326010808));
	r += mul(s0_7, min16float4x4(-0.2548956573, -0.2122582346, -0.0326204523, 0.1585071385, 0.2626888156, 0.0205358025, 0.0841999650, 0.0098116202, 0.0557700768, 0.0116337761, 0.0249726158, -0.0065634660, -0.1713867486, -0.1134094894, -0.1789884418, -0.0055991765));
	r += mul(s0_8, min16float4x4(0.1005968377, 0.1853871346, -0.0907034203, 0.0251557864, -0.1997011304, -0.0334379859, -0.0642083958, -0.0194197223, -0.0138328094, 0.0100825373, -0.0012434715, -0.0023229469, -0.0006989196, -0.0514080748, 0.0153505309, 0.0752536878));
	r += mul(s1_0, min16float4x4(0.0043387236, 0.0205638893, -0.0227751788, 0.0495477989, 0.0074096736, 0.0113348868, 0.0040920591, -0.0205343794, 0.0558736846, 0.0389383584, 0.0435321257, 0.0371045545, 0.0195935015, 0.0178178977, -0.0301414151, 0.0414161049));
	r += mul(s1_1, min16float4x4(0.0001058739, -0.0690861568, 0.0386699475, 0.0028173982, 0.0690518767, 0.0749039873, 0.0000615545, -0.1449043304, -0.0622938462, -0.1846444160, 0.0583463870, 0.2883960605, -0.0193778779, -0.1123427898, 0.1703078598, -0.0743133873));
	r += mul(s1_2, min16float4x4(0.0028220203, 0.0316165835, -0.0196186695, -0.0171904378, -0.0009161011, 0.2633098066, -0.2978517115, 0.3235265911, -0.0550585315, -0.0096040191, 0.0171029009, -0.0911544189, -0.0233590882, -0.3564301133, 0.2935820818, -0.1767395884));
	r += mul(s1_3, min16float4x4(0.1762337685, 0.2525816560, 0.2436519861, -0.4775389731, 0.0571827851, 0.0409746803, 0.0624844767, -0.0357603729, -0.0614904389, 0.0156403407, 0.0297542047, -0.0576568991, -0.0463353246, -0.0328171253, -0.0258391220, 0.0427932367));
	r += mul(s1_4, min16float4x4(0.0122454213, -0.8157719374, 0.6600127220, 0.0959209129, -0.2465755939, -0.1135334298, -0.1538852155, 0.3113982081, 0.3528001606, -0.2416065186, 0.2626960874, 0.0631902963, 0.1108020321, -0.4654535651, -0.6320129633, 0.1355180144));
	r += mul(s1_5, min16float4x4(0.0000907058, -0.2705079317, 0.2215761840, -0.0954667702, 0.2346279174, 1.2223905325, -0.6567451954, 0.4840888679, -0.0593717843, 0.1125614196, -0.1275702417, 0.0362724401, -0.2958986163, 0.3125696182, -0.4426733851, -0.1200803742));
	r += mul(s1_6, min16float4x4(0.0576580763, 0.0235546678, 0.0021982705, -0.1826729625, -0.0093473084, -0.0335662737, -0.0207452774, -0.0124661634, 0.0184960440, 0.0258187465, -0.0000272205, -0.0616570301, 0.0293499175, -0.0146572804, -0.0370002948, 0.0210118294));
	r += mul(s1_7, min16float4x4(0.2811227739, 0.2249186337, -0.0220386554, -0.1162674725, 0.0300147496, 0.0689572766, 0.1918670088, 0.1683896333, -0.1624289006, -0.1042492241, -0.0087184841, -0.0044080014, 0.1007921547, -0.0121547962, 0.0715968311, 0.1044372693));
	r += mul(s1_8, min16float4x4(-0.0977684185, -0.0833613798, 0.0186192356, 0.0298143271, 0.3621024787, 0.2386918366, 0.1193173304, -0.1106418297, 0.0579777211, 0.0094956709, 0.0177674908, 0.0006269168, -0.2850196660, -0.1275001913, -0.0386482626, 0.0141329318));
	r += min16float4(0.0006671237642876804, -0.0028502235654741526, 0.0016211321344599128, 5.554430026677437e-05);
	return r;
}
void Pass4(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float4 s0_0 = l0(-1.0, -1.0);
	min16float4 s0_1 = l0(0.0, -1.0);
	min16float4 s0_2 = l0(1.0, -1.0);
	min16float4 s0_3 = l0(-1.0, 0.0);
	min16float4 s0_4 = l0(0.0, 0.0);
	min16float4 s0_5 = l0(1.0, 0.0);
	min16float4 s0_6 = l0(-1.0, 1.0);
	min16float4 s0_7 = l0(0.0, 1.0);
	min16float4 s0_8 = l0(1.0, 1.0);
	min16float4 s1_0 = max(-s0_0, 0.0);
	min16float4 s1_1 = max(-s0_1, 0.0);
	min16float4 s1_2 = max(-s0_2, 0.0);
	min16float4 s1_3 = max(-s0_3, 0.0);
	min16float4 s1_4 = max(-s0_4, 0.0);
	min16float4 s1_5 = max(-s0_5, 0.0);
	min16float4 s1_6 = max(-s0_6, 0.0);
	min16float4 s1_7 = max(-s0_7, 0.0);
	min16float4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	conv3_0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 5
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-DS-NVL-out
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN conv3_0
//!OUT out_0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) O(conv3_0, float2(x, y))
float4 f0(float2 pt, float2 pos, min16float4 s0_0, min16float4 s0_1, min16float4 s0_2, min16float4 s0_3, min16float4 s0_4, min16float4 s0_5, min16float4 s0_6, min16float4 s0_7, min16float4 s0_8, min16float4 s1_0, min16float4 s1_1, min16float4 s1_2, min16float4 s1_3, min16float4 s1_4, min16float4 s1_5, min16float4 s1_6, min16float4 s1_7, min16float4 s1_8) {
	min16float4 r = 0.0;
	r += mul(s0_0, min16float4x4(0.0368988551, -0.0138273612, 0.0147924302, -0.0449268371, 0.0224071685, -0.0339074396, 0.0115768863, -0.0090195341, -0.0094982050, 0.0011197999, -0.0130188009, 0.0195950437, -0.0623778738, 0.0004140238, 0.0058355355, 0.0294987503));
	r += mul(s0_1, min16float4x4(-0.1580910534, -0.0566216260, -0.2094501108, 0.1310514808, -0.1293688416, 0.0798114091, 0.0478894971, -0.0456863008, 0.0250864960, 0.0073786215, 0.0063848295, -0.0157343205, 0.0129770525, 0.0162862390, 0.0312344339, 0.0357826948));
	r += mul(s0_2, min16float4x4(-0.0467348285, 0.1274494976, 0.0327798650, -0.0115790172, -0.0143328058, 0.1577070355, -0.0506425127, -0.0294092558, 0.0778615251, 0.0491519198, -0.0213710293, -0.0565141700, 0.0228928719, -0.0177553892, 0.0083998209, -0.0127764847));
	r += mul(s0_3, min16float4x4(0.0152598936, 0.0176295415, 0.0343565680, 0.0069942856, 0.0113466354, -0.0061879838, 0.0412748009, -0.0276545435, -0.0925294533, -0.0070932368, -0.0301662311, 0.0159291290, 0.0179945417, -0.0145048387, -0.0909069777, -0.0201887377));
	r += mul(s0_4, min16float4x4(0.0814246237, 0.0093100928, 0.0334124789, -0.0300644189, -0.1824497879, 0.3250021338, -0.3349470794, 0.3605632186, -0.0568411350, -0.0700785890, 0.0217129029, -0.1547366232, -0.0949711129, -0.3105556071, 0.1071494892, -0.3992120922));
	r += mul(s0_5, min16float4x4(0.0905346349, 0.1323241591, -0.1660664231, -0.1203373745, 0.1342772841, -0.4896388650, 0.2495115399, 0.2762075961, -0.1791992337, -0.3009026647, 0.2685548365, 0.3662000000, -0.0536028668, -0.2529239655, 0.0408937335, 0.0955102965));
	r += mul(s0_6, min16float4x4(-0.0052927253, -0.0016931808, -0.0074171997, 0.0026051640, 0.0111695649, 0.0049138633, 0.0058141416, 0.0102955904, -0.0144379819, -0.0004655253, -0.0597855002, -0.0088333096, -0.0091276588, -0.0184641555, 0.0206493139, 0.0020805709));
	r += mul(s0_7, min16float4x4(-0.0163551141, -0.0079339240, 0.0474959724, 0.0275410991, -0.0011084029, -0.0009559193, 0.0124099255, 0.0137728350, 0.0130781019, 0.0047002831, -0.0309161562, -0.0389384069, 0.0594195053, 0.0480799600, -0.1323334277, -0.0597016774));
	r += mul(s0_8, min16float4x4(-0.0069718724, -0.0075700590, 0.0371483080, 0.0720242262, 0.0217365120, 0.0322451182, 0.0901043713, -0.2665988207, 0.0113499844, 0.0079022814, -0.0574991144, -0.1113102585, 0.0084430715, 0.0705449581, -0.0028189910, -0.0842189044));
	r += mul(s1_0, min16float4x4(0.1740256995, -0.1086849868, 0.1401282102, -0.0809231326, 0.0221354757, 0.0027579342, 0.0037105791, 0.0006774676, -0.3134922385, 0.0021059061, 0.1333972663, 0.1441187412, 0.0002491957, 0.0021974959, 0.0114117377, -0.0195963290));
	r += mul(s1_1, min16float4x4(-0.1057645753, 0.3458307981, -0.2045897394, 0.1499698758, -0.0733135045, 0.0009888175, 0.0116311358, 0.0523684807, -0.0769731775, -0.4462972879, 0.1340264529, 0.2607414722, 0.0015960131, -0.0499271825, -0.0075996551, -0.0227406602));
	r += mul(s1_2, min16float4x4(0.0700687692, -0.0991163552, -0.0174366850, -0.1072047204, -0.0585101582, -0.0508894771, 0.0247721542, 0.0376094468, -0.0330248550, 0.0887648463, 0.0004199201, -0.0140580498, -0.0197628681, 0.0191420317, -0.0136411535, 0.0158576909));
	r += mul(s1_3, min16float4x4(0.0246322900, -0.0399123989, 0.0214680210, -0.0472217910, -0.1073125377, 0.0128905065, -0.0100649847, 0.0063833990, -0.0535780676, -0.0299680140, 0.2045985907, 0.0296075959, 0.0413844623, 0.0051048188, 0.0081529412, 0.0166624542));
	r += mul(s1_4, min16float4x4(-0.0702421442, 0.0092015956, -0.0024184906, -0.0247885641, 0.1938481927, -0.0754389316, -0.1674773246, -0.1264657378, 0.4072349370, 0.1847171783, -0.4008776248, 0.1747440845, 0.2744165063, 0.1218424067, 0.1872258037, 0.0905562267));
	r += mul(s1_5, min16float4x4(-0.0910701826, -0.1421472579, 0.1538008004, 0.1537076235, 0.1103317365, 0.2291101664, -0.2086232305, -0.2850803733, 0.0173751041, 0.2889997661, -0.1333065629, -0.4795120060, 0.0340894237, 0.2568359375, -0.0462875701, 0.0408936106));
	r += mul(s1_6, min16float4x4(0.0102149434, -0.0043786988, 0.0140521331, 0.0010241237, -0.0202157851, 0.0158245377, -0.0869110152, 0.0090718027, 0.0357680880, 0.0117928367, -0.0132813351, 0.0159698371, -0.0002929337, -0.0063282647, 0.0181366038, -0.0058210157));
	r += mul(s1_7, min16float4x4(0.0110763712, 0.0113536175, -0.0543514267, -0.0131752333, -0.0328201763, -0.0379713587, 0.1196676120, -0.0018133408, -0.0632497743, 0.0212764591, 0.0469811521, 0.0054244879, -0.0248256717, -0.0150247030, 0.0506870411, 0.0338769704));
	r += mul(s1_8, min16float4x4(0.0071324236, 0.0030322708, -0.0357664637, -0.0681901202, -0.0066992082, -0.0067992671, 0.0450525321, 0.1057129130, -0.0498431735, -0.0453617722, 0.1053061113, 0.1411161870, -0.0017246850, -0.0159295686, -0.0103616621, 0.0401842594));
	r += min16float4(0.00025844911579042673, 0.00023906098795123398, 0.0007946836412884295, 0.0007340005831792951);
	return tanh(r);
}
void Pass5(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float4 s0_0 = l0(-1.0, -1.0);
	min16float4 s0_1 = l0(0.0, -1.0);
	min16float4 s0_2 = l0(1.0, -1.0);
	min16float4 s0_3 = l0(-1.0, 0.0);
	min16float4 s0_4 = l0(0.0, 0.0);
	min16float4 s0_5 = l0(1.0, 0.0);
	min16float4 s0_6 = l0(-1.0, 1.0);
	min16float4 s0_7 = l0(0.0, 1.0);
	min16float4 s0_8 = l0(1.0, 1.0);
	min16float4 s1_0 = max(-s0_0, 0.0);
	min16float4 s1_1 = max(-s0_1, 0.0);
	min16float4 s1_2 = max(-s0_2, 0.0);
	min16float4 s1_3 = max(-s0_3, 0.0);
	min16float4 s1_4 = max(-s0_4, 0.0);
	min16float4 s1_5 = max(-s0_5, 0.0);
	min16float4 s1_6 = max(-s0_6, 0.0);
	min16float4 s1_7 = max(-s0_7, 0.0);
	min16float4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	out_0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 6
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-DS-NVL-shuffle
//!STYLE PS
//!IN out_0, INPUT
float4 Pass6(float2 pos) {
	float2 pt = float2(GetInputPt());
	const static float3x3 rgb2yuv = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081};
	const static float3x3 yuv2rgb = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float4 r = 0.0;
	float2 size = float2(GetInputSize());
	float2 f = frac(pos * size);
	float3 yuv = mul(rgb2yuv, INPUT.SampleLevel(SL, pos, 0).rgb);
	int2 i = int2(f * 2.0);
	r.r = out_0.SampleLevel(SP, (float2(0.5, 0.5) - f) * pt + pos, 0)[2*i.y + i.x];
	r.r += yuv.r;
	r.a = 1.0;
	r.r = clamp(r, 0.0, 1.0);
	float3 px = mul(yuv2rgb, float3(r.r, yuv.yz));
	return float4(px, 1.0);
}
