// CuNNy 3x4C BILINEAR CHROMA NVL DN
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

//!MAGPIE EFFECT
//!VERSION 3
//!OUTPUT_WIDTH INPUT_WIDTH * 2
//!OUTPUT_HEIGHT INPUT_HEIGHT * 2

//!TEXTURE
Texture2D INPUT;


//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t1;

//!PASS 1
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-DN-in
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) (dot(float3(-0.449567049741745, -0.8583492040634155, -0.19611185789108276), O(INPUT, float2(x, y)).rgb) + 1.1316478252410889)
float4 f0(float2 pt, float2 pos, min16float s0_0, min16float s0_1, min16float s0_2, min16float s0_3, min16float s0_4, min16float s0_5, min16float s0_6, min16float s0_7, min16float s0_8) {
	min16float4 r = 0.0;
	r += min16float4(3.252e-01, -2.086e-02, -2.864e-02, 8.935e-03) * s0_0;
	r += min16float4(4.499e-02, -4.289e-02, 6.754e-01, 1.284e-01) * s0_1;
	r += min16float4(-8.637e-02, 3.236e-02, -3.070e-02, -9.255e-02) * s0_2;
	r += min16float4(1.871e-01, 1.480e-02, 1.447e-02, -5.488e-01) * s0_3;
	r += min16float4(-4.833e-01, -5.321e-01, -6.950e-01, 5.775e-01) * s0_4;
	r += min16float4(-1.307e-02, 4.139e-01, 5.551e-02, -4.602e-02) * s0_5;
	r += min16float4(-1.212e-01, -1.348e-02, 1.298e-02, -1.215e-03) * s0_6;
	r += min16float4(-4.924e-02, 2.948e-01, 4.541e-03, -4.272e-02) * s0_7;
	r += min16float4(1.938e-01, -1.516e-01, -7.207e-03, 1.787e-02) * s0_8;
	r += min16float4(0.0029523377306759357, 0.0010763746686279774, -0.0013667512685060501, 5.3254985687090084e-05);
	return r;
}
void Pass1(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float s0_0 = l0(-1.0, -1.0);
	min16float s0_1 = l0(0.0, -1.0);
	min16float s0_2 = l0(1.0, -1.0);
	min16float s0_3 = l0(-1.0, 0.0);
	min16float s0_4 = l0(0.0, 0.0);
	min16float s0_5 = l0(1.0, 0.0);
	min16float s0_6 = l0(-1.0, 1.0);
	min16float s0_7 = l0(0.0, 1.0);
	min16float s0_8 = l0(1.0, 1.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8);
}
//!PASS 2
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-DN-conv1
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, min16float4 s0_0, min16float4 s0_1, min16float4 s0_2, min16float4 s0_3, min16float4 s0_4, min16float4 s0_5, min16float4 s0_6, min16float4 s0_7, min16float4 s0_8, min16float4 s1_0, min16float4 s1_1, min16float4 s1_2, min16float4 s1_3, min16float4 s1_4, min16float4 s1_5, min16float4 s1_6, min16float4 s1_7, min16float4 s1_8) {
	min16float4 r = 0.0;
	r += mul(s0_0, min16float4x4(3.359e-03, -2.220e-02, 1.149e-02, 3.612e-03, 3.068e-01, 1.917e-01, -2.546e-01, 5.305e-02, -7.400e-02, -3.840e-02, -4.800e-03, -5.602e-02, 1.210e-01, 1.344e-01, -2.395e-01, 4.181e-02));
	r += mul(s0_1, min16float4x4(2.007e-01, 4.863e-02, 6.140e-02, 2.085e-01, 5.538e-01, -2.409e-03, -2.528e-01, 9.722e-02, 1.746e-03, 2.736e-02, -1.401e-01, 3.105e-02, 1.025e-01, -5.585e-02, -1.744e-01, 3.780e-02));
	r += mul(s0_2, min16float4x4(6.730e-03, -1.460e-02, 2.648e-01, -7.536e-02, -3.109e-02, -7.859e-02, 2.478e-01, 1.231e-01, 3.503e-02, 1.345e-02, 3.030e-02, 4.659e-02, -7.591e-02, 1.081e-02, 2.198e-02, 7.312e-03));
	r += mul(s0_3, min16float4x4(1.634e-01, 1.411e-01, -8.205e-02, -1.149e-01, 2.075e-02, 1.661e-01, 1.912e-01, -2.901e-01, 4.736e-02, -3.110e-02, -2.192e-01, 2.112e-01, 4.642e-02, 5.658e-02, -9.182e-02, 8.748e-02));
	r += mul(s0_4, min16float4x4(-1.259e-01, -4.588e-01, 2.997e-01, -3.226e-01, -5.280e-01, -3.085e-01, 2.505e-01, -1.403e-01, 2.189e-01, 1.233e-01, 3.300e-01, 3.419e-02, 2.475e-01, 7.772e-02, -7.806e-02, -6.241e-02));
	r += mul(s0_5, min16float4x4(-6.943e-02, -1.323e-01, 7.912e-02, -3.944e-01, 2.571e-02, 1.135e-02, 1.794e-01, 3.114e-01, -1.577e-01, 1.577e-01, 2.797e-01, -3.836e-01, 3.801e-02, 7.676e-01, -5.897e-01, 3.549e-01));
	r += mul(s0_6, min16float4x4(1.104e-02, -9.534e-03, 1.626e-01, -3.613e-02, -5.251e-02, -1.371e-01, 2.133e-01, 6.478e-02, 3.927e-02, -5.426e-02, -1.414e-01, 1.500e-01, -2.147e-02, -1.540e-02, -9.355e-03, 2.325e-02));
	r += mul(s0_7, min16float4x4(-5.982e-02, -1.719e-01, 3.331e-01, -5.385e-02, -1.499e-01, 2.979e-02, 2.414e-01, -6.796e-02, 1.257e+00, 6.806e-01, -4.385e-01, -2.272e-02, -2.016e-01, 3.951e-02, 1.049e-01, -1.066e-01));
	r += mul(s0_8, min16float4x4(-1.772e-02, 2.615e-02, 4.058e-01, 1.214e-01, 5.668e-02, -9.492e-02, 5.426e-02, 2.409e-01, 4.206e-02, -2.594e-01, -1.325e-01, 6.168e-01, 1.124e-01, 7.096e-01, -5.721e-01, 1.598e-01));
	r += mul(s1_0, min16float4x4(-2.511e-03, -3.833e-03, 5.882e-02, -5.075e-02, -1.938e-01, 1.127e-01, 2.350e-01, -4.164e-01, 1.171e-01, 6.456e-02, -6.013e-02, 1.150e-01, -9.733e-02, -8.533e-02, 9.513e-02, 3.139e-02));
	r += mul(s1_1, min16float4x4(-2.466e-01, -9.154e-02, 2.028e-02, -2.007e-01, -3.782e-01, 1.948e-01, 5.069e-02, -1.948e-01, 1.083e-02, -1.361e-02, 1.187e-01, -4.413e-02, -8.479e-02, 2.325e-02, 5.604e-02, 1.546e-01));
	r += mul(s1_2, min16float4x4(-6.431e-02, 3.007e-02, 4.733e-02, -1.368e-01, 1.857e-02, -1.243e-01, 8.879e-02, -1.631e-01, 6.434e-03, -2.197e-02, 6.865e-02, 4.740e-02, 7.092e-02, 3.509e-02, -1.009e-01, 4.843e-02));
	r += mul(s1_3, min16float4x4(-1.987e-01, -2.568e-01, 4.287e-01, -6.519e-02, 8.319e-02, -1.223e-02, -1.814e-01, 1.577e-01, 2.186e-02, 1.642e-02, 9.348e-02, -3.544e-02, -7.387e-02, -6.332e-02, -9.939e-02, 5.970e-02));
	r += mul(s1_4, min16float4x4(-1.480e-02, 6.805e-02, 1.665e-01, 3.476e-01, 2.844e-01, 2.914e-02, -1.105e-01, -2.405e-02, 5.588e-02, 8.440e-03, -1.430e-01, -2.550e-01, 7.765e-02, 2.881e-01, -3.271e-01, 2.132e-02));
	r += mul(s1_5, min16float4x4(1.004e-02, 8.685e-02, 6.949e-01, -3.940e-02, -3.332e-02, -3.346e-01, 1.106e-01, 3.254e-02, 1.131e-01, 1.778e-01, -5.003e-01, 4.527e-02, 1.303e-01, -3.650e-02, -6.169e-01, -1.363e+00));
	r += mul(s1_6, min16float4x4(-1.456e-02, 1.540e-02, 3.441e-02, -1.028e-01, -1.987e-02, 1.119e-01, 1.410e-01, -4.749e-02, -1.128e-02, -1.359e-01, 2.969e-01, 7.648e-02, 5.038e-02, 5.793e-02, -7.453e-02, 5.700e-03));
	r += mul(s1_7, min16float4x4(6.629e-02, -3.019e-02, -1.340e-02, 4.351e-02, 8.374e-02, -2.205e-01, 6.074e-02, 2.036e-01, -5.717e-01, -1.762e-01, -3.308e-01, -1.109e-01, 1.007e-01, 1.265e-01, -2.998e-01, 2.514e-02));
	r += mul(s1_8, min16float4x4(2.302e-02, -5.597e-02, 2.222e-01, -1.479e-01, 6.284e-03, -2.318e-01, 4.434e-02, 2.129e-02, -1.723e-01, 3.015e-01, -2.321e-01, 2.031e-01, -1.398e-01, -1.156e-01, -3.037e-01, -6.331e-02));
	r += min16float4(0.0020492190960794687, -0.0025314504746347666, 0.002330408664420247, 0.003263419959694147);
	return r;
}
void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float4 s0_0 = l0(-1.0, -1.0);
	min16float4 s0_1 = l0(0.0, -1.0);
	min16float4 s0_2 = l0(1.0, -1.0);
	min16float4 s0_3 = l0(-1.0, 0.0);
	min16float4 s0_4 = l0(0.0, 0.0);
	min16float4 s0_5 = l0(1.0, 0.0);
	min16float4 s0_6 = l0(-1.0, 1.0);
	min16float4 s0_7 = l0(0.0, 1.0);
	min16float4 s0_8 = l0(1.0, 1.0);
	min16float4 s1_0 = max(-s0_0, 0.0);
	min16float4 s1_1 = max(-s0_1, 0.0);
	min16float4 s1_2 = max(-s0_2, 0.0);
	min16float4 s1_3 = max(-s0_3, 0.0);
	min16float4 s1_4 = max(-s0_4, 0.0);
	min16float4 s1_5 = max(-s0_5, 0.0);
	min16float4 s1_6 = max(-s0_6, 0.0);
	min16float4 s1_7 = max(-s0_7, 0.0);
	min16float4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 3
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-DN-conv2
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, min16float4 s0_0, min16float4 s0_1, min16float4 s0_2, min16float4 s0_3, min16float4 s0_4, min16float4 s0_5, min16float4 s0_6, min16float4 s0_7, min16float4 s0_8, min16float4 s1_0, min16float4 s1_1, min16float4 s1_2, min16float4 s1_3, min16float4 s1_4, min16float4 s1_5, min16float4 s1_6, min16float4 s1_7, min16float4 s1_8) {
	min16float4 r = 0.0;
	r += mul(s0_0, min16float4x4(6.069e-03, -3.653e-02, 2.772e-02, -6.092e-02, 1.977e-02, -3.976e-02, 2.783e-02, 2.111e-01, 6.510e-03, -2.641e-02, 3.668e-02, 1.926e-02, -8.307e-03, 1.638e-03, 9.401e-03, -1.520e-02));
	r += mul(s0_1, min16float4x4(5.230e-02, 1.185e-01, -7.268e-02, -6.110e-02, -2.085e-02, -3.237e-01, 7.801e-03, -7.278e-02, 3.838e-02, 1.156e-02, 3.221e-02, -2.489e-02, 1.652e-02, -2.554e-02, 3.430e-02, 5.670e-03));
	r += mul(s0_2, min16float4x4(1.504e-01, 7.646e-02, -1.883e-02, -4.176e-02, 1.759e-01, 1.364e-02, 5.089e-02, 1.110e-01, 4.017e-03, -5.457e-02, 1.479e-02, 3.312e-02, 4.097e-02, -1.777e-02, 4.126e-02, 1.066e-02));
	r += mul(s0_3, min16float4x4(5.012e-03, -9.751e-03, 4.070e-02, -1.388e-01, 6.580e-02, -2.140e-02, -1.423e-02, 2.203e-01, -9.035e-02, 5.537e-02, -1.052e-01, 3.396e-02, 2.050e-02, -2.647e-01, -1.489e-01, 1.905e-01));
	r += mul(s0_4, min16float4x4(2.715e-02, -4.629e-02, -9.097e-02, 2.268e-01, -9.857e-02, 3.440e-01, 3.656e-01, -3.603e-01, -3.769e-02, 2.134e-01, 1.023e-01, -1.356e-01, -1.285e-01, 4.678e-01, -1.933e-01, -8.957e-02));
	r += mul(s0_5, min16float4x4(-5.376e-02, -1.880e-01, 2.264e-01, -1.628e-01, -1.193e-01, 8.951e-02, -5.858e-02, -6.765e-02, 1.566e-02, -6.979e-02, 4.595e-02, 8.861e-03, -1.741e-02, -5.540e-02, -4.873e-02, -6.259e-02));
	r += mul(s0_6, min16float4x4(-3.752e-03, -5.002e-03, -9.399e-02, 1.501e-02, -4.897e-02, 1.689e-02, 1.447e-02, 4.552e-02, 1.054e-01, 1.240e-03, 1.982e-01, 6.090e-02, 1.608e-01, -4.460e-02, 5.293e-01, 2.112e-02));
	r += mul(s0_7, min16float4x4(-1.714e-01, 2.536e-02, -4.595e-01, -2.858e-02, -7.193e-02, 5.794e-02, -9.466e-02, -5.772e-02, 2.311e-02, -5.241e-02, 1.273e-02, 1.133e-02, 1.228e-01, 1.439e-02, 3.171e-01, -4.907e-02));
	r += mul(s0_8, min16float4x4(-6.812e-02, 2.762e-02, -1.018e-01, -3.690e-03, 7.049e-03, 1.054e-02, -2.383e-02, 3.130e-02, -2.716e-02, 4.187e-02, -7.214e-02, 3.422e-02, 2.790e-02, -1.073e-02, 8.630e-02, 7.639e-03));
	r += mul(s1_0, min16float4x4(4.685e-02, -7.322e-03, 3.958e-02, 1.790e-01, -2.377e-02, 1.113e-01, -6.129e-02, -1.519e-01, 2.700e-02, 1.635e-02, 7.815e-02, -1.265e-01, -3.503e-03, -3.224e-03, -2.557e-02, 6.240e-03));
	r += mul(s1_1, min16float4x4(8.248e-02, -4.305e-01, 4.944e-02, 9.940e-01, -1.896e-02, -1.706e-01, -4.826e-02, -1.961e-01, 8.133e-02, -8.474e-02, 1.105e-01, 7.407e-03, 3.079e-02, 2.382e-02, -2.286e-02, 5.033e-02));
	r += mul(s1_2, min16float4x4(-6.743e-02, 3.011e-01, -2.212e-01, 1.748e-01, 3.001e-02, 2.744e-02, -3.345e-02, -5.034e-02, -2.869e-03, -8.559e-02, 4.906e-03, -4.571e-02, -6.673e-02, 3.370e-02, -2.926e-02, -6.499e-03));
	r += mul(s1_3, min16float4x4(-7.397e-02, -8.859e-02, -1.895e-01, 9.449e-02, -7.635e-02, 1.940e-01, 3.026e-03, -2.193e-01, 6.715e-02, -4.057e-02, 8.710e-02, -4.151e-02, -5.302e-02, 1.781e-02, 3.500e-03, 6.546e-02));
	r += mul(s1_4, min16float4x4(-3.369e-01, 5.254e-01, 1.068e-01, -6.191e-01, 5.628e-01, -5.034e-01, 8.600e-01, 4.559e-01, 2.764e-01, -7.323e-01, -3.831e-02, 8.954e-02, 5.007e-01, -3.700e-01, 8.299e-02, 3.175e-01));
	r += mul(s1_5, min16float4x4(2.822e-01, -3.580e-01, 6.430e-02, 3.118e-01, 1.918e-01, -1.223e-02, 1.265e-01, 1.735e-01, 3.406e-01, -8.751e-02, 1.460e-01, 1.013e-02, -6.168e-02, 8.955e-02, -4.136e-02, -2.743e-02));
	r += mul(s1_6, min16float4x4(2.191e-02, -1.448e-02, 1.440e-01, 1.257e-02, 3.176e-03, 1.749e-02, -1.667e-01, -3.903e-02, 9.625e-02, -7.944e-02, 1.295e-01, -1.895e-02, 3.309e-02, -3.488e-02, 1.950e-02, 6.039e-02));
	r += mul(s1_7, min16float4x4(-2.100e-02, 2.018e-02, -1.212e-01, -1.264e-02, -2.054e-02, -4.426e-02, -3.708e-02, 2.894e-02, 4.072e-01, -9.596e-02, 9.039e-01, 1.443e-01, -2.070e-01, -2.520e-02, -5.007e-01, 9.282e-02));
	r += mul(s1_8, min16float4x4(-1.741e-02, -6.066e-02, -8.000e-02, -2.326e-02, -2.145e-02, 2.330e-02, -5.172e-02, 1.229e-04, 8.880e-02, -7.603e-02, 1.509e-01, 8.307e-03, -4.864e-03, 7.013e-02, 4.435e-02, -5.310e-02));
	r += min16float4(0.0011568476911634207, -0.0033522360026836395, 0.0027679833583533764, 0.00202166591770947);
	return r;
}
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float4 s0_0 = l0(-1.0, -1.0);
	min16float4 s0_1 = l0(0.0, -1.0);
	min16float4 s0_2 = l0(1.0, -1.0);
	min16float4 s0_3 = l0(-1.0, 0.0);
	min16float4 s0_4 = l0(0.0, 0.0);
	min16float4 s0_5 = l0(1.0, 0.0);
	min16float4 s0_6 = l0(-1.0, 1.0);
	min16float4 s0_7 = l0(0.0, 1.0);
	min16float4 s0_8 = l0(1.0, 1.0);
	min16float4 s1_0 = max(-s0_0, 0.0);
	min16float4 s1_1 = max(-s0_1, 0.0);
	min16float4 s1_2 = max(-s0_2, 0.0);
	min16float4 s1_3 = max(-s0_3, 0.0);
	min16float4 s1_4 = max(-s0_4, 0.0);
	min16float4 s1_5 = max(-s0_5, 0.0);
	min16float4 s1_6 = max(-s0_6, 0.0);
	min16float4 s1_7 = max(-s0_7, 0.0);
	min16float4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 4
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-DN-conv3
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, min16float4 s0_0, min16float4 s0_1, min16float4 s0_2, min16float4 s0_3, min16float4 s0_4, min16float4 s0_5, min16float4 s0_6, min16float4 s0_7, min16float4 s0_8, min16float4 s1_0, min16float4 s1_1, min16float4 s1_2, min16float4 s1_3, min16float4 s1_4, min16float4 s1_5, min16float4 s1_6, min16float4 s1_7, min16float4 s1_8) {
	min16float4 r = 0.0;
	r += mul(s0_0, min16float4x4(5.140e-02, -1.378e-02, 8.375e-02, 2.764e-02, -3.663e-02, -2.331e-02, -4.043e-01, -3.966e-01, -1.090e-01, 7.278e-02, -1.480e-01, -1.294e-01, 1.678e-02, 1.610e-02, 6.534e-03, -3.820e-02));
	r += mul(s0_1, min16float4x4(3.344e-02, 1.388e-02, -1.614e-01, -1.801e-01, -1.662e-02, 2.332e-02, -2.666e-01, -3.666e-01, 1.383e-01, -3.565e-02, 8.204e-02, 8.567e-02, 5.809e-03, -1.998e-03, -2.095e-01, -1.144e-01));
	r += mul(s0_2, min16float4x4(3.532e-03, -2.374e-03, -5.988e-03, 1.386e-02, 1.584e-04, -2.954e-02, -4.087e-02, 5.818e-02, -5.128e-02, -2.552e-02, 2.520e-02, 1.169e-02, 6.934e-03, -1.980e-02, -8.292e-02, 6.441e-03));
	r += mul(s0_3, min16float4x4(-1.735e-02, -8.668e-02, -5.392e-01, -7.076e-01, -1.774e-01, 1.458e+00, -2.081e+00, -9.916e-01, 4.772e-03, 3.022e-01, 2.310e-01, 2.298e-01, -6.827e-03, 7.476e-02, -1.848e-03, 4.659e-02));
	r += mul(s0_4, min16float4x4(7.604e-02, 2.981e-01, -2.425e-01, -2.095e-01, 3.033e-01, 3.797e-01, -8.643e-02, -5.683e-01, -3.172e-02, -3.153e-01, 5.419e-02, -1.772e-02, 4.097e-02, 5.902e-01, 3.828e-01, 1.140e-01));
	r += mul(s0_5, min16float4x4(3.136e-02, 1.271e-02, -1.278e-02, 1.628e-02, 1.053e-02, 6.242e-02, -2.495e-02, -1.850e-01, 2.972e-03, -8.569e-02, -2.166e-02, -1.549e-02, -5.518e-02, 1.587e-01, -7.178e-04, -2.264e-01));
	r += mul(s0_6, min16float4x4(-1.009e-01, 2.445e-02, 1.230e-01, 2.250e-01, -1.303e-01, 9.090e-01, 1.393e-01, 7.984e-02, 3.479e-02, 2.964e-02, -3.408e-02, -8.988e-02, 2.043e-03, -1.279e-01, -5.387e-02, -3.930e-02));
	r += mul(s0_7, min16float4x4(-9.183e-02, 2.841e-01, 1.546e-01, 7.719e-02, 1.284e-01, 1.437e-01, -1.179e-02, -3.325e-01, 2.717e-02, -5.685e-02, -7.595e-02, -2.606e-02, 1.212e-01, -4.954e-01, -8.722e-02, -6.041e-02));
	r += mul(s0_8, min16float4x4(2.631e-02, 7.169e-02, 8.040e-03, -9.141e-02, 4.510e-03, -8.477e-03, -2.191e-02, -2.212e-02, -7.458e-04, -7.628e-03, -3.489e-03, 2.531e-02, -4.973e-02, -1.145e-01, -2.114e-02, 1.404e-01));
	r += mul(s1_0, min16float4x4(1.235e-01, -1.031e-01, 1.125e-01, -1.194e-01, -3.738e-02, 2.182e-02, 3.018e-01, 1.388e-01, 3.480e-03, -2.899e-02, 1.926e-01, 2.378e-01, -4.871e-02, -5.667e-02, -9.048e-02, 2.900e-03));
	r += mul(s1_1, min16float4x4(3.098e+00, 2.657e-01, -4.050e-01, -7.912e-01, -4.385e-02, 4.036e-02, 2.821e-02, -2.834e-02, 3.349e-02, 1.064e-02, 3.090e-01, -7.522e-01, -6.157e-02, 5.006e-02, 3.284e-02, 2.171e-02));
	r += mul(s1_2, min16float4x4(7.230e-02, 9.892e-02, -1.430e-01, -5.100e-01, 1.767e-02, 1.280e-02, 5.115e-02, -1.073e-02, 4.723e-02, -2.003e-02, -1.149e-01, -4.826e-02, -3.663e-02, -1.134e-02, 6.567e-02, 8.716e-02));
	r += mul(s1_3, min16float4x4(3.884e-01, -3.916e-01, 9.838e-02, -1.744e-02, 1.155e-01, -3.606e-01, 1.431e-01, 3.397e-01, 1.982e-02, -1.489e-01, -5.217e-01, -3.211e-01, -1.493e-01, -3.329e-01, 5.957e-01, 5.098e-01));
	r += mul(s1_4, min16float4x4(-9.010e-02, -1.014e+00, 2.900e-01, 4.677e-01, -1.411e-01, 9.252e-02, 1.696e-01, 4.307e-01, 1.201e-01, 7.246e-01, -4.580e-01, -2.209e-01, 1.130e-01, 2.155e-03, 5.532e-02, -1.115e+00));
	r += mul(s1_5, min16float4x4(-3.554e-02, -7.541e-02, -1.699e-03, 1.396e-01, -5.115e-02, -1.135e-01, 1.001e-02, 1.203e-01, 4.039e-02, 1.840e-01, -5.813e-02, 4.794e-04, 7.560e-03, -6.763e-02, 8.120e-03, 3.363e-02));
	r += mul(s1_6, min16float4x4(4.804e-02, -1.648e-01, -2.674e-02, -4.837e-02, 5.559e-02, -1.912e-01, -9.232e-02, -5.838e-02, -3.162e-02, 2.620e-02, -2.312e-03, 9.887e-02, 1.071e-01, 5.078e-02, -1.665e-01, -1.232e-02));
	r += mul(s1_7, min16float4x4(8.122e-02, -4.047e-01, -1.441e-01, -3.201e-02, 1.308e-02, -1.289e-01, 1.485e-02, 4.560e-02, -5.292e-02, 1.861e-01, 8.617e-02, 5.368e-04, -9.204e-02, 3.592e-01, 3.800e-02, 2.172e-01));
	r += mul(s1_8, min16float4x4(-7.880e-03, -5.937e-02, -2.615e-02, 9.949e-02, 2.303e-02, 3.695e-02, -2.115e-02, -2.274e-02, 2.046e-02, 2.911e-02, 1.117e-02, -8.081e-02, 1.327e-02, 1.491e-01, -1.980e-02, -4.114e-02));
	r += min16float4(0.0011052507907152176, 0.0025451986584812403, -0.0037456373684108257, -0.0032711410894989967);
	return r;
}
void Pass4(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float4 s0_0 = l0(-1.0, -1.0);
	min16float4 s0_1 = l0(0.0, -1.0);
	min16float4 s0_2 = l0(1.0, -1.0);
	min16float4 s0_3 = l0(-1.0, 0.0);
	min16float4 s0_4 = l0(0.0, 0.0);
	min16float4 s0_5 = l0(1.0, 0.0);
	min16float4 s0_6 = l0(-1.0, 1.0);
	min16float4 s0_7 = l0(0.0, 1.0);
	min16float4 s0_8 = l0(1.0, 1.0);
	min16float4 s1_0 = max(-s0_0, 0.0);
	min16float4 s1_1 = max(-s0_1, 0.0);
	min16float4 s1_2 = max(-s0_2, 0.0);
	min16float4 s1_3 = max(-s0_3, 0.0);
	min16float4 s1_4 = max(-s0_4, 0.0);
	min16float4 s1_5 = max(-s0_5, 0.0);
	min16float4 s1_6 = max(-s0_6, 0.0);
	min16float4 s1_7 = max(-s0_7, 0.0);
	min16float4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 5
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-DN-out
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, min16float4 s0_0, min16float4 s0_1, min16float4 s0_2, min16float4 s0_3, min16float4 s0_4, min16float4 s0_5, min16float4 s0_6, min16float4 s0_7, min16float4 s0_8, min16float4 s1_0, min16float4 s1_1, min16float4 s1_2, min16float4 s1_3, min16float4 s1_4, min16float4 s1_5, min16float4 s1_6, min16float4 s1_7, min16float4 s1_8) {
	min16float4 r = 0.0;
	r += mul(s0_0, min16float4x4(2.799e-03, -3.014e-05, -2.726e-03, -3.850e-03, -1.038e-02, -1.671e-02, 1.728e-02, -1.262e-02, 6.235e-02, 5.131e-03, -1.299e-02, -2.994e-02, -2.530e-02, -3.987e-02, 6.326e-02, 2.350e-02));
	r += mul(s0_1, min16float4x4(4.996e-02, -8.423e-03, -6.843e-03, -3.864e-03, -2.202e-01, -1.372e-01, -4.724e-02, 5.408e-02, 1.261e-02, 9.966e-02, -2.034e-03, -2.602e-02, 9.704e-02, -1.889e-01, -1.056e-02, 9.837e-03));
	r += mul(s0_2, min16float4x4(-2.578e-03, 1.603e-02, -1.232e-02, -6.704e-03, 6.683e-03, -4.333e-02, -3.956e-03, -2.838e-02, 1.273e-02, -2.253e-02, 7.492e-03, 5.565e-03, -4.257e-02, 7.447e-02, -6.401e-03, -1.414e-02));
	r += mul(s0_3, min16float4x4(-1.023e-01, 3.651e-02, 2.229e-02, -3.773e-02, -1.038e-01, 1.401e-02, -3.179e-02, 2.448e-02, 1.678e-02, -4.667e-02, 1.508e-01, -2.165e-02, -3.239e-02, 4.248e-02, -1.393e-01, -1.260e-02));
	r += mul(s0_4, min16float4x4(-2.169e-01, -3.100e-01, 6.721e-02, 3.871e-02, -5.603e-02, -2.328e-01, -1.470e-01, -2.686e-01, -1.016e+00, -6.888e-02, 9.340e-02, 5.332e-01, -2.614e-02, 3.203e-01, -5.059e-01, -6.237e-01));
	r += mul(s0_5, min16float4x4(-2.178e-02, -8.425e-02, -1.764e-02, -4.733e-02, -2.166e-02, -6.805e-02, -7.933e-03, -4.919e-02, 4.768e-02, -3.860e-01, 1.032e-01, 5.628e-02, 2.356e-05, 9.826e-03, -7.546e-02, 4.423e-02));
	r += mul(s0_6, min16float4x4(-2.419e-02, -3.342e-02, -2.766e-01, -2.116e-02, -2.472e-02, 4.808e-02, -1.008e-01, 1.582e-02, -1.059e-02, -1.580e-02, 2.548e-02, -9.112e-03, 3.823e-03, -7.400e-03, -1.165e-01, 1.715e-02));
	r += mul(s0_7, min16float4x4(6.820e-04, 5.016e-02, -1.514e-02, -1.743e-01, 2.054e-02, 2.477e-02, 7.439e-03, -4.810e-02, 2.556e-02, 3.289e-03, -3.311e-01, 1.507e-01, -4.881e-02, 3.630e-02, 2.733e-02, -3.616e-02));
	r += mul(s0_8, min16float4x4(-3.048e-03, 1.701e-03, -9.740e-03, 5.144e-03, -8.588e-03, -2.797e-03, -8.522e-03, -2.263e-02, 5.799e-02, 5.447e-02, 7.050e-02, -2.368e-01, 7.745e-03, -4.285e-02, 1.294e-02, 4.090e-02));
	r += mul(s1_0, min16float4x4(-6.825e-03, 2.105e-01, -1.021e-01, 7.401e-02, 1.566e-02, 2.753e-02, -6.221e-02, 1.606e-02, 3.727e-02, 1.629e-02, -2.492e-03, -1.302e-03, -4.358e-02, -3.022e-02, -6.957e-03, 7.680e-03));
	r += mul(s1_1, min16float4x4(5.822e-01, 3.425e-01, -2.531e-01, -2.446e-01, 5.208e-01, 2.202e-01, -4.825e-02, -1.146e-01, -2.885e-02, -6.324e-02, 2.099e-02, 5.825e-03, 4.360e-02, 7.841e-02, -1.673e-02, -1.573e-02));
	r += mul(s1_2, min16float4x4(-1.964e-02, -6.323e-02, 3.235e-02, -2.846e-02, -3.989e-02, 2.309e-01, -5.918e-02, -3.538e-02, -3.114e-02, -1.678e-02, -9.226e-03, -6.718e-03, 1.679e-02, 1.355e-02, 5.829e-03, 1.663e-03));
	r += mul(s1_3, min16float4x4(1.484e-01, 1.501e-01, -8.076e-01, 5.432e-02, 1.397e-02, -1.069e-02, 7.398e-02, 3.201e-03, -1.013e-01, 2.818e-02, -8.659e-02, 4.971e-03, 2.232e-01, -3.374e-02, 7.251e-02, -4.422e-02));
	r += mul(s1_4, min16float4x4(6.955e-01, -1.480e+00, 2.036e+00, -5.170e-01, 5.263e-02, -1.714e-01, 5.313e-01, 1.626e-01, 4.446e-01, 9.448e-02, 1.607e-01, -3.135e-01, 3.970e-02, 3.875e-01, 4.578e-02, 3.409e-01));
	r += mul(s1_5, min16float4x4(-5.504e-02, 1.982e-01, 5.558e-02, 1.160e-01, -2.081e-02, 1.461e-01, -8.473e-02, 2.900e-01, -8.360e-04, 9.799e-02, -1.993e-02, 1.122e-01, -1.856e-03, 9.858e-03, 1.234e-02, 6.269e-03));
	r += mul(s1_6, min16float4x4(-2.670e-02, -8.131e-02, 3.478e-01, -4.480e-02, 9.051e-03, -5.019e-03, 2.826e-02, -7.123e-03, -2.040e-02, 1.249e-02, -2.164e-02, 2.875e-02, -2.021e-02, -3.597e-02, 1.087e-01, 3.231e-03));
	r += mul(s1_7, min16float4x4(1.238e-01, -7.946e-02, -4.313e-02, -2.166e-01, -5.483e-03, 1.068e-03, 6.656e-03, 2.120e-03, -3.961e-03, -4.798e-02, 1.401e-01, 8.735e-02, -1.993e-02, -2.104e-02, -4.127e-04, 1.013e-01));
	r += mul(s1_8, min16float4x4(-2.071e-03, 4.212e-02, -7.055e-02, 3.007e-02, 5.411e-03, 2.179e-02, -2.781e-03, 3.963e-02, 1.923e-02, -6.607e-03, -6.233e-03, -1.496e-02, -7.622e-03, -4.809e-03, -7.083e-03, 4.103e-04));
	r += min16float4(-0.00045689320540986955, -0.00016603681433480233, -0.00021613540593534708, 0.0001604134595254436);
	return tanh(r);
}
void Pass5(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float4 s0_0 = l0(-1.0, -1.0);
	min16float4 s0_1 = l0(0.0, -1.0);
	min16float4 s0_2 = l0(1.0, -1.0);
	min16float4 s0_3 = l0(-1.0, 0.0);
	min16float4 s0_4 = l0(0.0, 0.0);
	min16float4 s0_5 = l0(1.0, 0.0);
	min16float4 s0_6 = l0(-1.0, 1.0);
	min16float4 s0_7 = l0(0.0, 1.0);
	min16float4 s0_8 = l0(1.0, 1.0);
	min16float4 s1_0 = max(-s0_0, 0.0);
	min16float4 s1_1 = max(-s0_1, 0.0);
	min16float4 s1_2 = max(-s0_2, 0.0);
	min16float4 s1_3 = max(-s0_3, 0.0);
	min16float4 s1_4 = max(-s0_4, 0.0);
	min16float4 s1_5 = max(-s0_5, 0.0);
	min16float4 s1_6 = max(-s0_6, 0.0);
	min16float4 s1_7 = max(-s0_7, 0.0);
	min16float4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 6
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-DN-shuffle
//!STYLE PS
//!IN t0, INPUT
float4 Pass6(float2 pos) {
	float2 pt = float2(GetInputPt());
	const static float3x3 rgb2yuv = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081};
	const static float3x3 yuv2rgb = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float4 r = 0.0;
	float2 size = float2(GetInputSize());
	float2 f = frac(pos * size);
	float3 yuv = mul(rgb2yuv, INPUT.SampleLevel(SL, pos, 0).rgb);
	int2 i = int2(f * 2.0);
	r.r = t0.SampleLevel(SP, (float2(0.5, 0.5) - f) * pt + pos, 0)[2*i.y + i.x];
	r.r += yuv.r;
	r.a = 1.0;
	r.r = clamp(r, 0.0, 1.0);
	float3 px = mul(yuv2rgb, float3(r.r, yuv.yz));
	return float4(px, 1.0);
}
