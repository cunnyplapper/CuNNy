// CuNNy 8x4C BILINEAR CHROMA NVL DS
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

//!MAGPIE EFFECT
//!VERSION 3
//!OUTPUT_WIDTH INPUT_WIDTH * 2
//!OUTPUT_HEIGHT INPUT_HEIGHT * 2

//!TEXTURE
Texture2D INPUT;


//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t1;

//!PASS 1
//!DESC CuNNy-8x4C-BILINEAR-CHROMA-NVL-DS-in
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) (dot(float3(-5.631e-01, -1.088e+00, -2.363e-01), O(INPUT, float2(x, y)).rgb) + 9.319e-01)
float4 f0(float2 pt, float2 pos, min16float s0_0, min16float s0_1, min16float s0_2, min16float s0_3, min16float s0_4, min16float s0_5, min16float s0_6, min16float s0_7, min16float s0_8) {
	V4 r = 0.0;
	r += V4(2.568e-01, 2.411e-02, -7.862e-02, 5.126e-02) * s0_0;
	r += V4(-1.472e-01, 4.005e-01, 1.697e-01, 4.488e-03) * s0_1;
	r += V4(-1.227e-01, 1.031e-01, 4.210e-02, -5.809e-02) * s0_2;
	r += V4(-2.160e-01, -5.384e-02, 9.368e-02, -2.081e-02) * s0_3;
	r += V4(1.701e-01, -3.514e-01, 3.550e-01, -4.752e-01) * s0_4;
	r += V4(1.296e-01, -5.330e-02, -5.410e-01, -1.268e-02) * s0_5;
	r += V4(-1.118e-01, 1.649e-02, 5.445e-02, 1.664e-02) * s0_6;
	r += V4(1.528e-01, -7.400e-02, -7.036e-02, 3.976e-01) * s0_7;
	r += V4(-7.107e-02, 1.789e-02, -2.435e-02, 1.224e-01) * s0_8;
	r += V4(-7.152e-02, -3.552e-02, 2.689e-02, -1.883e-02);
	return r;
}
void Pass1(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float s0_0 = l0(-1.0, -1.0);
	min16float s0_1 = l0(0.0, -1.0);
	min16float s0_2 = l0(1.0, -1.0);
	min16float s0_3 = l0(-1.0, 0.0);
	min16float s0_4 = l0(0.0, 0.0);
	min16float s0_5 = l0(1.0, 0.0);
	min16float s0_6 = l0(-1.0, 1.0);
	min16float s0_7 = l0(0.0, 1.0);
	min16float s0_8 = l0(1.0, 1.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8);
}
//!PASS 2
//!DESC CuNNy-8x4C-BILINEAR-CHROMA-NVL-DS-conv1
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(5.462e-02, 5.233e-02, 8.879e-04, -1.822e-02, -2.277e-01, -2.549e-01, 2.591e-02, 3.106e-02, 1.164e-01, 6.225e-02, 1.119e-01, 1.005e-01, 1.779e-02, 1.529e-01, 1.154e-01, -1.088e-01));
	r += mul(s0_1, M4(1.411e-02, 2.842e-01, -1.018e-01, -2.877e-01, 1.638e-01, 2.057e-01, 1.253e-03, 1.136e-01, 2.307e-01, -1.628e-01, 4.562e-02, -2.111e-01, -8.573e-02, -1.333e-01, -5.271e-01, 1.843e-02));
	r += mul(s0_2, M4(9.069e-02, 3.341e-01, -1.288e-01, -1.412e-01, -7.738e-02, -3.973e-02, -8.251e-02, -8.351e-03, -1.468e-02, 2.097e-02, 4.572e-02, -2.786e-02, -1.682e-01, 2.073e-01, -1.412e-01, 2.283e-01));
	r += mul(s0_3, M4(1.114e-01, 2.998e-01, -5.336e-02, 1.086e-01, -2.686e-01, -8.072e-02, 2.614e-02, -2.031e-01, 4.079e-01, 1.992e-01, 2.250e-01, 4.998e-01, -4.042e-01, -5.213e-01, -1.030e-01, -1.154e-01));
	r += mul(s0_4, M4(3.083e-01, 2.060e-01, -5.648e-01, -1.255e-01, -4.115e-02, -1.852e-01, 1.818e-01, 2.308e-01, -1.002e-01, 6.908e-02, -2.371e-01, 3.018e-01, 3.096e-01, 1.610e-01, 4.682e-01, 4.267e-01));
	r += mul(s0_5, M4(2.660e-01, -1.175e-01, -1.580e-01, -1.976e-01, 1.623e-01, 1.812e-01, -2.434e-01, -7.800e-02, -7.934e-03, 3.193e-02, -2.275e-02, -9.352e-03, 5.882e-02, 2.770e-01, -4.307e-01, -1.411e-01));
	r += mul(s0_6, M4(1.123e-01, 1.735e-01, -6.921e-02, -2.367e-01, 5.785e-02, -1.313e-01, 1.023e-01, 1.193e-01, 4.085e-02, 2.019e-01, -9.519e-02, -4.765e-02, -1.551e-01, -2.672e-02, -8.339e-03, -2.616e-02));
	r += mul(s0_7, M4(-1.125e-01, 2.466e-02, -2.420e-01, -5.760e-01, 1.216e-02, -5.456e-01, -5.866e-02, -1.128e-01, 2.422e-02, 2.120e-02, -1.682e-01, 9.851e-02, 2.281e-01, -2.828e-02, 1.084e-02, 1.007e-01));
	r += mul(s0_8, M4(-2.036e-01, 9.650e-02, 1.115e-02, 3.339e-03, 1.355e-01, 1.431e-01, -1.704e-01, -4.274e-02, -3.556e-02, -3.879e-02, -1.049e-01, 5.699e-02, -7.146e-02, 1.497e-02, -8.374e-02, -5.044e-02));
	r += mul(s1_0, M4(6.099e-02, -1.390e-01, 9.452e-02, 1.392e-01, -1.295e-01, -1.792e-01, 1.609e-02, -6.563e-02, 2.743e-01, 2.346e-01, 2.908e-02, 1.618e-01, -9.658e-02, 7.581e-02, -1.825e-02, 3.986e-02));
	r += mul(s1_1, M4(4.169e-02, -7.161e-02, 4.798e-02, -9.173e-02, 8.005e-02, 1.471e-01, 3.069e-02, 6.655e-02, 2.131e-01, -4.759e-02, 8.463e-02, -2.013e-01, -1.322e-01, 3.857e-01, -6.530e-01, -1.409e-01));
	r += mul(s1_2, M4(-8.329e-02, -1.582e-01, 5.360e-02, 8.055e-03, -6.616e-02, 1.493e-01, -1.780e-01, 1.004e-02, 1.310e-02, 8.658e-02, 3.308e-02, -5.430e-02, -6.159e-02, 2.606e-01, -1.770e-01, 7.577e-02));
	r += mul(s1_3, M4(-1.484e-02, 2.419e-01, 1.100e-01, 1.134e-01, -2.820e-01, -2.537e-01, 3.457e-02, -2.422e-01, 1.991e-01, 1.921e-02, 9.896e-02, 3.078e-01, -4.431e-01, -4.228e-01, -1.509e-01, -2.164e-01));
	r += mul(s1_4, M4(-6.375e-02, 8.195e-02, -3.960e-01, -3.055e-03, 2.030e-01, -1.784e-01, 4.273e-01, -3.984e-02, 5.990e-02, 2.699e-01, -2.694e-01, 3.106e-02, 1.657e-01, 1.730e-01, 5.254e-01, 3.475e-01));
	r += mul(s1_5, M4(9.175e-02, -1.025e-01, -7.372e-02, 2.820e-02, 2.024e-01, 1.071e-01, -2.979e-01, -4.556e-03, 4.651e-02, 8.286e-02, -9.513e-02, -3.754e-02, 3.037e-01, 2.196e-01, -5.385e-01, -1.285e-01));
	r += mul(s1_6, M4(1.119e-01, 1.960e-01, -4.833e-02, -2.592e-02, 5.181e-02, 6.179e-02, 1.134e-01, 8.187e-02, 2.076e-01, 2.252e-01, -7.229e-02, -6.131e-02, -1.247e-01, 1.268e-02, -5.484e-03, -1.395e-01));
	r += mul(s1_7, M4(-2.426e-01, -8.220e-03, -1.436e-01, -8.967e-02, 3.244e-01, -5.043e-01, -1.502e-01, -3.076e-01, 1.538e-01, 9.805e-02, -1.587e-01, -6.503e-02, 2.411e-01, -4.154e-02, 3.146e-02, 1.171e-01));
	r += mul(s1_8, M4(-2.062e-02, -1.422e-01, -6.969e-02, 2.180e-01, -2.605e-02, 2.304e-01, -1.034e-01, -1.633e-01, 1.138e-02, -7.564e-03, -1.213e-01, -5.545e-03, 2.658e-02, 2.329e-02, -1.086e-01, -1.423e-01));
	r += V4(-2.436e-02, -2.618e-02, -7.896e-04, -8.525e-03);
	return r;
}
void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 3
//!DESC CuNNy-8x4C-BILINEAR-CHROMA-NVL-DS-conv2
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(2.533e-02, 6.862e-02, -6.386e-02, 1.169e-01, -1.557e-01, -3.057e-02, 5.190e-02, 1.014e-02, -7.149e-02, 5.194e-03, -3.310e-01, -8.982e-02, 1.341e-01, -5.534e-02, 4.088e-02, -9.407e-02));
	r += mul(s0_1, M4(4.304e-01, -8.727e-02, -4.052e-01, 2.920e-01, -3.174e-01, 5.670e-02, 3.305e-01, -1.509e-01, -4.411e-01, -4.986e-02, 1.931e-01, -4.908e-01, -5.906e-02, 8.600e-02, 7.027e-02, -1.213e-01));
	r += mul(s0_2, M4(1.431e-01, -1.144e-02, -9.010e-02, -1.033e-01, -8.762e-03, 3.244e-02, 1.618e-01, 1.242e-01, 2.564e-02, 2.465e-02, -1.966e-02, 5.476e-02, 1.394e-02, -5.646e-02, 6.198e-02, -1.032e-02));
	r += mul(s0_3, M4(-1.948e-01, 1.003e-01, -2.135e-01, -7.007e-02, -7.921e-02, 1.458e-02, 3.778e-01, 1.075e-02, -8.898e-02, -3.517e-01, 2.588e-01, -2.140e-02, 1.961e-01, 1.704e-02, -2.449e-01, 1.253e-01));
	r += mul(s0_4, M4(5.772e-02, 1.633e-01, -6.650e-01, 1.640e-01, -2.093e-01, 2.979e-01, 6.875e-01, -1.632e-01, 6.543e-01, 3.603e-01, -1.293e-01, 7.168e-01, 9.733e-04, 5.354e-01, -2.669e-01, -2.904e-01));
	r += mul(s0_5, M4(9.055e-02, -3.053e-02, -2.047e-01, -7.838e-03, -1.563e-01, -2.063e-02, 9.479e-02, 9.805e-02, 4.917e-02, -9.191e-02, 5.573e-03, -1.140e-01, -5.361e-02, -1.758e-02, 8.806e-03, 1.069e-01));
	r += mul(s0_6, M4(-1.897e-02, -1.138e-01, -3.341e-02, 4.260e-02, -3.292e-03, 6.415e-02, 9.072e-02, -1.027e-02, -1.558e-01, -1.565e-02, 3.993e-02, 3.263e-02, -1.759e-02, -3.985e-02, 8.066e-02, -3.880e-02));
	r += mul(s0_7, M4(-3.013e-03, 3.167e-02, -2.685e-01, 1.649e-02, -2.389e-01, 1.208e-02, 3.855e-01, 3.284e-02, -2.835e-02, 5.917e-03, -8.322e-02, -9.959e-02, -1.252e-01, 2.695e-02, 3.201e-01, 1.216e-01));
	r += mul(s0_8, M4(1.438e-02, 3.077e-02, -2.398e-01, 1.374e-02, -3.667e-02, 2.030e-02, 2.684e-01, 3.550e-02, -3.783e-02, 1.527e-02, 1.532e-02, 5.425e-02, 8.611e-02, 4.234e-02, -5.814e-02, -4.162e-02));
	r += mul(s1_0, M4(-4.794e-02, 6.495e-02, 3.360e-01, 5.566e-02, 3.291e-02, -7.252e-02, -2.647e-01, -4.962e-03, -6.254e-02, 3.525e-02, -1.082e-01, -1.830e-02, 1.004e-01, -1.108e-01, -4.544e-02, -7.706e-02));
	r += mul(s1_1, M4(4.087e-01, -6.325e-02, 7.916e-02, 3.936e-01, -2.395e-01, 8.560e-03, -1.698e-02, -3.510e-01, -1.986e-01, -6.686e-02, 8.324e-02, -2.260e-01, 1.672e-01, 4.673e-02, -3.253e-01, -1.331e-01));
	r += mul(s1_2, M4(6.995e-02, -6.832e-02, 6.755e-02, 6.706e-02, 1.036e-02, 3.625e-02, 1.436e-02, 1.024e-02, -3.796e-02, 2.373e-02, 5.721e-02, -1.084e-02, 1.321e-02, 6.497e-02, 8.039e-02, -1.065e-01));
	r += mul(s1_3, M4(-1.838e-01, 6.968e-02, -3.038e-02, -4.432e-02, 1.615e-01, -3.707e-02, -2.601e-01, -3.526e-02, -9.539e-03, -1.382e-01, 3.167e-01, 9.581e-02, 1.434e-01, 8.429e-03, -2.166e-02, 3.700e-02));
	r += mul(s1_4, M4(2.008e-01, 5.610e-01, -7.248e-02, 1.748e-01, -2.789e-01, 3.052e-01, 1.063e-01, -2.993e-01, 1.568e-01, 2.505e-01, -9.633e-02, 4.795e-01, -1.219e-01, -4.366e-02, -6.728e-02, 2.805e-02));
	r += mul(s1_5, M4(1.285e-01, 6.169e-02, 8.585e-02, -1.331e-01, -1.028e-01, -9.542e-02, -1.302e-01, -2.637e-02, 9.249e-02, -8.233e-02, 3.231e-02, 9.973e-02, 3.983e-01, -4.908e-03, -1.453e-01, 2.366e-02));
	r += mul(s1_6, M4(-9.154e-02, -6.613e-02, 2.998e-01, -1.789e-02, 2.148e-02, -4.956e-02, -1.222e-01, 5.664e-02, -7.864e-02, -2.819e-02, 8.066e-02, 5.012e-04, 6.750e-02, 1.744e-01, -2.290e-01, -8.754e-02));
	r += mul(s1_7, M4(-8.143e-03, 6.730e-02, 1.839e-01, -3.401e-03, 3.759e-02, 5.112e-02, -1.419e-01, -5.366e-02, 1.191e-01, -3.217e-02, -8.554e-04, -2.083e-01, -4.308e-01, -1.470e-01, -9.424e-02, 3.859e-03));
	r += mul(s1_8, M4(-1.219e-02, 2.567e-02, 8.544e-02, 5.857e-02, -1.161e-02, 1.812e-02, -1.768e-02, 2.911e-02, 8.984e-03, 3.675e-03, -2.651e-02, -3.571e-02, 1.121e-01, -1.410e-01, -2.391e-01, 1.297e-02));
	r += V4(-2.992e-04, 4.012e-03, 1.911e-03, 2.453e-04);
	return r;
}
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 4
//!DESC CuNNy-8x4C-BILINEAR-CHROMA-NVL-DS-conv3
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-2.632e-02, -9.508e-02, -1.794e-01, -1.939e-01, 5.249e-02, -4.035e-02, 6.636e-02, 4.048e-02, 8.639e-03, 3.802e-02, -1.478e-01, -1.255e-01, 1.382e-02, 1.110e-01, 1.893e-01, 1.607e-01));
	r += mul(s0_1, M4(5.848e-02, 2.546e-02, -5.729e-02, -3.880e-02, -9.420e-02, -3.891e-02, 1.198e-01, -1.512e-02, 3.296e-02, 7.259e-03, -3.370e-01, 3.527e-02, -8.033e-02, 1.105e-02, 1.113e-01, 7.118e-02));
	r += mul(s0_2, M4(-1.508e-01, 1.820e-02, -1.190e-01, 2.986e-02, -2.221e-01, 3.511e-03, 3.725e-02, -4.986e-02, 2.835e-02, 5.751e-02, -9.144e-02, 8.069e-02, 1.182e-01, -9.858e-03, 1.232e-01, -9.192e-02));
	r += mul(s0_3, M4(-8.166e-02, -8.076e-02, -1.403e-01, 1.074e-01, 7.375e-02, -3.681e-02, 4.879e-03, 1.873e-03, -9.661e-02, 1.078e-01, -1.643e-02, 7.739e-02, 1.148e-01, 1.067e-01, 1.143e-01, -1.032e-01));
	r += mul(s0_4, M4(3.502e-01, -3.423e-01, 9.598e-02, 2.610e-01, -4.269e-01, -9.503e-02, 2.610e-01, -3.669e-01, 5.254e-01, 4.528e-02, 5.152e-01, 4.444e-01, -4.209e-01, 2.182e-01, 8.765e-01, -1.564e-01));
	r += mul(s0_5, M4(-2.710e-01, -2.303e-02, -1.237e-01, -1.015e-01, 4.204e-01, 5.558e-01, 2.171e-01, -8.427e-03, 6.710e-02, -1.392e-01, -7.786e-02, -2.474e-01, -7.920e-03, 5.967e-02, 1.310e-01, 2.661e-02));
	r += mul(s0_6, M4(3.361e-01, -3.687e-01, 2.173e-02, 5.199e-01, 6.714e-02, -1.711e-01, -5.510e-02, -9.497e-02, -9.026e-03, 9.379e-02, 3.504e-02, 2.526e-01, 1.289e-01, -2.909e-02, -1.004e-01, -2.394e-01));
	r += mul(s0_7, M4(1.685e-01, -3.222e-03, -1.636e-01, 1.509e-02, 2.929e-01, -3.446e-01, -2.858e-01, -1.988e-01, -5.773e-02, 1.223e-01, -1.250e-01, -5.342e-01, -7.214e-02, 7.083e-01, 3.585e-01, 3.116e-01));
	r += mul(s0_8, M4(-1.328e-01, -2.185e-01, -9.383e-02, 7.673e-02, 1.076e-01, 1.440e-01, -3.220e-02, -9.243e-02, -2.374e-01, -2.240e-01, 2.873e-02, 3.654e-01, 5.923e-02, 1.749e-01, 1.912e-01, 1.788e-02));
	r += mul(s1_0, M4(-7.352e-02, 7.672e-03, -1.938e-01, -7.131e-03, -5.630e-02, 2.018e-02, -1.516e-02, -1.647e-02, -1.429e-02, 1.201e-03, -7.205e-02, 2.068e-02, 4.427e-02, 3.986e-03, 4.171e-02, 4.679e-03));
	r += mul(s1_1, M4(1.363e-01, 7.481e-02, -3.049e-01, 7.451e-04, 6.067e-02, 4.683e-02, -3.605e-02, 4.946e-02, 9.839e-02, -3.582e-02, 1.397e-01, 1.411e-02, -6.275e-02, -7.944e-02, 1.158e-01, 1.946e-02));
	r += mul(s1_2, M4(-5.351e-02, -1.443e-03, -1.470e-01, 1.209e-01, -5.554e-02, 9.497e-02, -8.890e-03, 2.158e-01, -9.704e-02, 8.838e-02, 4.111e-02, -4.597e-02, 4.919e-02, 3.421e-02, 1.204e-01, -1.392e-01));
	r += mul(s1_3, M4(-1.015e-01, 1.871e-01, -8.315e-02, 5.596e-02, -7.645e-02, 3.069e-01, -3.331e-02, 7.994e-02, -8.180e-02, 6.538e-03, 2.172e-02, -6.551e-02, 9.024e-02, -2.535e-01, -7.099e-02, -1.234e-01));
	r += mul(s1_4, M4(8.926e-01, 8.345e-02, 3.855e-01, 4.914e-02, 1.313e-01, -3.455e-01, 4.430e-01, -6.525e-01, 1.411e-01, 4.749e-02, -2.842e-01, 1.268e-02, -5.463e-01, -3.512e-01, 2.940e-01, 5.697e-03));
	r += mul(s1_5, M4(-1.081e-01, -5.209e-02, 4.731e-02, -5.301e-02, 5.907e-01, 4.259e-02, 1.637e-01, -1.290e-01, -1.582e-01, 4.423e-03, 9.162e-02, 3.533e-03, -1.927e-01, -8.100e-02, -1.599e-01, 4.918e-02));
	r += mul(s1_6, M4(-4.471e-02, 2.408e-01, 3.277e-02, 2.213e-01, 3.243e-02, 7.538e-03, -1.065e-02, 9.616e-02, 2.087e-02, 5.871e-02, 1.188e-01, 4.529e-02, 2.586e-01, -2.139e-01, -9.880e-02, -4.932e-02));
	r += mul(s1_7, M4(1.645e-01, 1.040e-01, 1.711e-01, 3.094e-01, 1.988e-01, -5.610e-02, -1.938e-01, -2.274e-01, 7.352e-02, -6.444e-02, -6.564e-03, 2.372e-01, 1.854e-01, -1.618e-02, 2.026e-01, 3.291e-01));
	r += mul(s1_8, M4(1.199e-01, 2.008e-02, 6.639e-02, 2.905e-02, 3.633e-03, -3.728e-02, 2.037e-02, 4.177e-02, -1.898e-02, 7.056e-02, 1.388e-02, -8.820e-02, -1.062e-01, -2.659e-02, -9.369e-02, -1.587e-01));
	r += V4(6.859e-03, 1.508e-03, 8.026e-03, 1.718e-03);
	return r;
}
void Pass4(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 5
//!DESC CuNNy-8x4C-BILINEAR-CHROMA-NVL-DS-conv4
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(3.097e-02, -5.859e-02, -2.751e-02, -3.980e-02, 5.331e-02, 1.512e-02, 1.524e-04, -1.199e-01, 2.401e-02, -1.011e-02, 4.380e-02, -7.605e-02, 3.019e-04, -4.475e-02, 1.733e-02, 9.582e-02));
	r += mul(s0_1, M4(7.062e-02, 3.804e-02, 2.860e-01, 2.321e-01, -1.111e-01, -4.161e-02, 7.163e-02, 4.362e-01, -6.931e-02, 2.949e-02, 5.192e-02, 3.349e-02, 6.401e-02, 5.652e-02, -2.705e-01, 1.141e-01));
	r += mul(s0_2, M4(-2.507e-02, 3.442e-02, 1.386e-01, -3.891e-01, 1.304e-02, -7.141e-02, -1.717e-02, 3.463e-01, -1.936e-02, -2.094e-02, 3.116e-02, 1.046e-03, 3.749e-02, 7.530e-02, -3.357e-02, -3.331e-01));
	r += mul(s0_3, M4(-2.491e-01, -2.679e-01, 2.783e-01, -2.566e-01, -1.921e-01, -2.893e-01, 4.117e-03, -1.015e-01, 1.170e-01, -3.754e-02, -6.931e-02, 1.970e-01, 8.561e-02, 1.740e-01, -1.501e-01, -2.988e-02));
	r += mul(s0_4, M4(-3.485e-01, 1.341e-01, -3.313e-01, 3.838e-01, 3.108e-02, 1.357e-01, -9.017e-02, -1.877e-01, -1.405e-01, -2.327e-01, -4.231e-02, 2.678e-01, 2.713e-01, 6.532e-01, -2.112e-01, -1.199e-01));
	r += mul(s0_5, M4(-1.646e-01, 1.675e-01, -2.260e-01, 2.457e-01, 1.330e-01, -1.125e-01, 1.531e-01, -1.772e-01, -3.572e-02, 4.044e-03, 3.781e-03, -6.741e-02, 8.690e-02, 1.300e-01, -2.662e-01, -2.923e-01));
	r += mul(s0_6, M4(8.332e-02, -1.811e-01, 3.668e-02, 6.587e-03, 5.102e-02, -2.496e-02, -5.064e-02, 1.610e-03, -4.958e-02, 1.824e-01, 1.945e-01, 1.890e-02, 7.220e-02, 6.281e-02, -5.794e-02, -1.486e-02));
	r += mul(s0_7, M4(3.721e-01, -4.334e-02, 2.281e-01, 1.137e-01, 1.419e-01, -4.813e-02, 7.775e-02, -2.666e-02, -4.053e-01, 1.056e-01, 3.079e-02, 9.141e-02, 1.407e-01, 1.068e-01, -6.049e-04, -5.980e-02));
	r += mul(s0_8, M4(-1.429e-01, -3.361e-02, 1.179e-02, -2.367e-02, 1.453e-01, 2.712e-02, 2.986e-02, -3.047e-02, -1.416e-01, 6.555e-02, -1.440e-01, 6.562e-02, -2.877e-02, 2.118e-02, 1.293e-03, -8.504e-02));
	r += mul(s1_0, M4(-1.391e-01, -6.462e-02, 5.929e-03, 1.354e-02, 1.065e-02, 1.108e-02, -1.747e-01, -1.151e-02, -4.454e-02, 5.350e-03, -1.084e-01, -1.085e-01, -7.296e-02, -7.549e-02, 1.161e-01, 1.899e-01));
	r += mul(s1_1, M4(-1.827e-02, 5.668e-02, 1.734e-01, -2.963e-01, -6.437e-02, -2.459e-02, -2.648e-01, 2.179e-01, -2.062e-02, -1.217e-01, -2.016e-01, -3.545e-01, -5.213e-02, 7.374e-02, -5.069e-02, 5.119e-01));
	r += mul(s1_2, M4(-5.694e-02, -3.434e-02, 1.194e-01, -2.102e-01, 1.682e-01, -2.064e-01, -9.411e-02, 3.077e-01, -4.578e-02, 3.801e-02, -2.052e-01, -1.526e-01, -9.276e-02, 1.480e-01, 1.020e-02, -1.290e-02));
	r += mul(s1_3, M4(1.282e-01, 8.171e-02, 1.210e-01, -1.913e-01, 4.192e-02, 3.106e-02, 1.748e-02, -1.754e-01, 3.692e-02, -3.707e-02, -3.792e-01, 2.822e-01, -6.386e-02, -7.709e-02, 9.438e-02, 6.826e-02));
	r += mul(s1_4, M4(-4.270e-01, 2.845e-01, -3.734e-01, -1.345e-01, -3.937e-01, 3.950e-01, 4.446e-02, -2.007e-01, 3.815e-01, -3.721e-01, -5.068e-01, 2.118e-01, -8.649e-03, 3.407e-01, -9.363e-02, 2.550e-01));
	r += mul(s1_5, M4(-9.630e-03, 3.295e-02, -1.880e-01, 1.030e-01, 2.718e-01, -3.525e-02, 5.973e-02, -6.178e-02, 1.801e-01, -1.580e-01, -2.371e-01, 1.008e-01, -1.275e-01, 1.106e-01, -7.135e-02, -6.616e-02));
	r += mul(s1_6, M4(3.763e-02, -1.919e-01, -2.744e-01, 3.561e-02, 7.924e-02, -4.232e-02, -1.086e-01, 7.901e-03, 9.450e-02, -5.864e-02, -5.767e-01, 6.038e-02, -1.176e-02, 4.442e-02, 1.924e-01, -1.188e-02));
	r += mul(s1_7, M4(1.970e-01, -1.789e-02, 3.657e-01, -5.303e-02, 2.744e-01, 1.928e-02, 2.961e-02, -1.142e-01, -8.235e-01, 9.907e-02, 2.287e-01, -2.031e-02, 5.424e-02, 7.349e-02, 1.802e-01, 1.520e-03));
	r += mul(s1_8, M4(9.278e-02, -2.380e-03, 3.858e-02, -6.255e-02, 5.040e-02, 3.651e-03, 1.504e-01, 3.406e-02, -1.262e-01, -7.590e-02, -2.047e-01, 8.427e-02, -5.890e-02, 4.461e-02, -1.450e-02, 1.845e-02));
	r += V4(1.055e-02, 2.733e-03, 4.237e-05, 8.445e-03);
	return r;
}
void Pass5(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 6
//!DESC CuNNy-8x4C-BILINEAR-CHROMA-NVL-DS-conv5
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(7.320e-02, -8.175e-02, 1.504e-01, 5.283e-02, 3.320e-02, 9.062e-02, 7.066e-02, -4.351e-02, 3.455e-02, 2.695e-03, 1.190e-01, 8.987e-02, 6.701e-03, 2.594e-02, -2.138e-02, -3.556e-02));
	r += mul(s0_1, M4(7.315e-02, -2.532e-01, 6.465e-02, -7.503e-02, -2.290e-02, 7.055e-02, -7.521e-02, -7.358e-02, 2.242e-01, -1.041e-01, -1.154e-01, -4.443e-02, 1.200e-02, -1.764e-02, -6.875e-03, 2.600e-02));
	r += mul(s0_2, M4(3.401e-02, 8.390e-02, 8.734e-02, 1.358e-03, -9.445e-02, -1.542e-02, 5.624e-02, 7.192e-02, -1.153e-01, -2.232e-02, 4.419e-02, -3.739e-03, -3.965e-03, -4.233e-02, -9.881e-03, 8.568e-03));
	r += mul(s0_3, M4(-1.724e-01, -2.055e-01, 2.388e-01, -1.356e-01, 5.414e-01, 2.629e-01, -5.548e-02, 5.126e-03, 1.299e-01, -4.015e-02, 2.359e-01, -6.092e-02, -1.489e-01, -2.006e-01, 4.729e-02, 2.507e-02));
	r += mul(s0_4, M4(-3.951e-02, -9.446e-02, -1.540e-01, 4.277e-01, -4.515e-01, -4.711e-01, 4.424e-01, -5.697e-01, 3.747e-01, 3.995e-01, -1.940e-01, -2.114e-01, -2.007e-02, -2.104e-01, 1.102e-01, 6.191e-02));
	r += mul(s0_5, M4(1.014e-02, -8.795e-02, 6.365e-02, 1.254e-01, 9.929e-02, 3.093e-02, 1.400e-01, 1.228e-01, 2.127e-02, 4.906e-02, 6.765e-02, 6.874e-02, -1.335e-02, -1.444e-02, -3.499e-02, 5.674e-02));
	r += mul(s0_6, M4(2.136e-02, -1.234e-02, 7.878e-02, -5.269e-02, -5.268e-02, 4.529e-02, 7.388e-03, 7.837e-02, -2.760e-02, -3.383e-02, -9.097e-02, -1.826e-02, -3.524e-01, -2.134e-01, -3.860e-01, -6.009e-02));
	r += mul(s0_7, M4(-1.201e-03, -3.626e-02, -2.114e-01, -1.682e-01, -2.386e-01, -1.242e-01, -3.703e-01, 8.431e-02, 1.153e-01, 5.882e-02, 2.278e-01, 1.935e-01, -1.799e-01, -2.046e-01, 8.442e-02, 6.838e-02));
	r += mul(s0_8, M4(1.067e-02, 1.621e-02, 9.973e-03, 4.649e-02, 3.387e-03, -2.198e-02, 7.912e-02, -3.527e-02, 7.330e-03, -2.729e-02, 6.479e-02, 1.314e-01, 6.277e-02, 5.809e-02, -4.009e-02, -1.092e-01));
	r += mul(s1_0, M4(-1.873e-01, -1.851e-01, -1.407e-01, 7.166e-02, -1.280e-02, 1.243e-01, -1.270e-01, -1.321e-02, 3.025e-02, 8.767e-02, 3.009e-01, -5.447e-02, -1.060e-02, -9.398e-02, 7.581e-02, 1.640e-02));
	r += mul(s1_1, M4(3.081e-01, -1.688e-01, -1.748e-01, 2.978e-02, 4.343e-02, 9.726e-02, -5.373e-02, -5.458e-02, -4.280e-02, 6.604e-02, 8.164e-02, 1.304e-02, 1.463e-01, -1.304e-01, 7.913e-02, 4.123e-02));
	r += mul(s1_2, M4(1.729e-02, 3.258e-02, 2.537e-02, 2.151e-02, -4.703e-02, 8.859e-03, 8.205e-02, -1.463e-02, 5.382e-03, -4.599e-02, 2.660e-02, 4.006e-02, 3.400e-02, -7.018e-02, 9.891e-02, 3.987e-02));
	r += mul(s1_3, M4(-3.511e-01, -2.210e-01, -8.778e-03, -4.096e-03, 3.188e-01, 2.222e-01, -1.347e-01, 1.954e-01, -6.347e-02, -2.101e-01, 3.891e-01, 5.505e-02, -2.986e-01, -3.077e-01, 1.684e-01, 9.116e-02));
	r += mul(s1_4, M4(-4.388e-01, -3.813e-01, -1.019e-01, 9.516e-01, -3.333e-01, -7.715e-01, -2.080e-01, 1.215e-01, 4.361e-01, 4.225e-01, 3.973e-01, -1.949e-01, 5.589e-01, -1.999e-01, 2.425e-01, 1.223e-01));
	r += mul(s1_5, M4(-7.673e-02, -1.538e-01, -5.159e-02, 9.799e-03, -1.503e-02, -2.630e-03, 1.227e-01, 1.485e-01, -4.123e-02, 6.215e-02, 1.401e-01, 2.045e-01, 1.117e-01, 1.329e-01, 5.675e-02, 2.803e-02));
	r += mul(s1_6, M4(-1.264e-01, -6.582e-02, -1.517e-01, -7.669e-03, -2.563e-02, 4.461e-02, 5.297e-02, -3.562e-02, -5.560e-02, -4.811e-02, -8.224e-02, -1.418e-01, -1.860e-01, -2.163e-01, -4.796e-02, -2.627e-01));
	r += mul(s1_7, M4(-2.705e-01, -1.723e-01, -3.267e-01, -2.692e-01, -1.470e-01, -1.401e-01, -3.076e-01, -2.719e-01, 2.807e-02, 5.203e-03, 2.747e-01, 4.816e-02, -2.667e-01, -1.142e-01, 5.255e-01, -6.696e-01));
	r += mul(s1_8, M4(-5.931e-02, 1.578e-02, -1.170e-01, 2.498e-02, 1.150e-01, 7.246e-02, 4.425e-02, -1.636e-01, 6.751e-03, 6.438e-03, 2.163e-01, -2.414e-02, -4.347e-02, 2.252e-02, -2.912e-02, -2.232e-01));
	r += V4(1.237e-02, 1.019e-02, 1.926e-03, 3.308e-03);
	return r;
}
void Pass6(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 7
//!DESC CuNNy-8x4C-BILINEAR-CHROMA-NVL-DS-conv6
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-3.624e-02, -4.172e-02, -1.313e-02, -1.875e-02, 1.570e-02, -5.178e-02, 1.230e-02, 2.443e-02, 1.174e-02, -6.493e-02, -7.098e-02, -3.846e-02, 1.839e-01, 1.183e-01, 8.836e-02, 1.313e-02));
	r += mul(s0_1, M4(-9.170e-02, -2.813e-02, -4.943e-02, -1.569e-02, 7.369e-02, 5.003e-03, 2.686e-02, 8.582e-02, -2.017e-01, -1.259e-01, -1.199e-01, -1.648e-01, 3.877e-01, 4.665e-01, 2.467e-01, 1.118e-01));
	r += mul(s0_2, M4(-7.175e-02, -4.151e-02, 3.558e-02, -4.463e-02, 5.520e-02, 7.388e-02, 3.952e-02, 1.528e-01, -6.685e-02, -1.529e-02, 1.287e-02, -1.105e-02, 2.746e-02, 1.571e-02, 1.270e-03, 3.323e-02));
	r += mul(s0_3, M4(1.028e-01, 4.374e-02, 3.546e-02, 7.208e-02, -4.160e-02, 2.015e-02, 1.072e-01, -5.866e-02, 6.699e-02, 2.809e-02, 6.277e-02, -6.550e-04, 2.187e-01, 6.935e-03, 1.591e-01, 3.581e-02));
	r += mul(s0_4, M4(1.989e-01, 1.019e-02, 1.971e-01, 1.405e-01, 2.492e-01, -6.680e-02, 3.626e-01, -3.806e-02, 6.305e-01, 3.174e-01, 2.096e-01, 1.761e-01, 9.631e-02, 2.514e-01, 2.773e-01, -1.675e-01));
	r += mul(s0_5, M4(3.915e-01, -7.579e-02, -1.399e-01, -1.777e-01, 4.824e-02, -1.181e-01, 8.757e-02, 5.100e-01, 3.241e-01, 3.816e-01, -3.015e-02, 5.344e-03, 1.392e-01, -3.330e-01, -1.173e-01, -1.149e-02));
	r += mul(s0_6, M4(1.481e-02, -2.187e-02, 1.972e-02, -8.448e-03, -1.761e-01, -5.241e-02, -2.960e-01, -6.144e-02, -3.380e-02, -2.181e-02, -5.146e-02, -3.387e-02, 9.492e-02, 3.212e-02, 1.130e-01, 2.305e-02));
	r += mul(s0_7, M4(3.817e-01, 3.778e-01, -7.739e-02, 9.107e-02, -4.896e-01, -4.259e-01, -4.997e-01, -9.041e-03, -8.289e-02, -1.584e-01, -4.134e-02, -4.916e-02, 6.532e-02, 6.986e-02, 1.064e-02, -3.845e-02));
	r += mul(s0_8, M4(-4.094e-02, -1.480e-01, -1.469e-01, -1.578e-01, -2.125e-01, 1.121e-01, 1.368e-01, 2.096e-01, -1.407e-02, -6.287e-03, 1.686e-02, 1.272e-02, -1.711e-02, -1.176e-01, -1.077e-01, -1.275e-02));
	r += mul(s1_0, M4(1.462e-02, -3.079e-02, 7.562e-02, 2.738e-02, -2.888e-02, -1.824e-02, -6.249e-02, -3.846e-03, 3.801e-02, -2.966e-02, -4.164e-03, 4.031e-02, 1.410e-01, 5.534e-02, 7.002e-02, 5.408e-02));
	r += mul(s1_1, M4(-1.312e-01, -3.318e-02, -4.900e-02, -1.219e-02, -1.194e-02, 1.875e-03, 1.567e-02, -1.146e-02, 5.724e-02, 1.051e-01, -2.269e-02, 8.762e-02, 4.593e-02, 1.195e-01, 1.633e-02, 1.703e-01));
	r += mul(s1_2, M4(-7.105e-02, 4.445e-02, 2.128e-02, 3.399e-02, 1.970e-02, 9.454e-02, 4.518e-02, 2.276e-03, 1.413e-02, 4.850e-02, 4.952e-03, 9.025e-02, -5.434e-02, 4.361e-03, 7.356e-02, 5.654e-02));
	r += mul(s1_3, M4(1.302e-01, 1.427e-02, 6.061e-02, 6.611e-02, -1.228e-01, 6.848e-02, 1.730e-01, -6.807e-02, 2.629e-03, 5.261e-02, 1.674e-01, 3.319e-02, 2.305e-01, 2.733e-02, 2.298e-01, 8.287e-02));
	r += mul(s1_4, M4(1.814e-01, 1.959e-01, 2.913e-01, 2.381e-01, 3.228e-01, 2.284e-01, 4.365e-01, 1.637e-02, 1.220e-01, 3.681e-01, -3.015e-02, 1.054e-01, -1.041e-01, 3.193e-01, 9.392e-01, -1.026e-01));
	r += mul(s1_5, M4(-2.747e-02, 2.701e-01, 2.263e-01, 7.830e-01, 1.059e-01, -6.875e-02, 2.434e-02, 4.241e-01, 3.183e-02, -2.819e-01, -2.260e-02, -2.190e-01, 2.263e-01, -5.566e-01, -3.158e-01, -2.822e-01));
	r += mul(s1_6, M4(-2.808e-02, -7.585e-03, -5.250e-03, -3.309e-03, -3.901e-02, -1.136e-02, -2.744e-01, -2.093e-02, -2.422e-02, -3.673e-03, 5.006e-02, 1.386e-03, 1.577e-01, 6.031e-02, 1.520e-01, 4.722e-02));
	r += mul(s1_7, M4(3.658e-01, 4.486e-01, -2.144e-01, 9.384e-02, -7.937e-01, -8.720e-01, -2.094e-01, -1.502e-01, 1.920e-02, 1.397e-01, 2.056e-01, 2.908e-02, 6.828e-02, 1.275e-01, 8.603e-02, -9.203e-02));
	r += mul(s1_8, M4(3.058e-03, 1.181e-01, -1.150e-01, -1.660e-01, -1.013e-01, -9.153e-02, -4.178e-02, 1.870e-01, 9.937e-02, 3.668e-02, -1.438e-02, 1.689e-02, 1.380e-01, -4.809e-02, -1.368e-01, 1.416e-02));
	r += V4(-1.826e-03, -1.168e-02, -8.394e-03, -1.216e-03);
	return r;
}
void Pass7(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 8
//!DESC CuNNy-8x4C-BILINEAR-CHROMA-NVL-DS-conv7
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-2.734e-02, -2.245e-02, 1.410e-02, -3.989e-02, -5.795e-02, -4.418e-02, 9.622e-02, 8.960e-02, 7.247e-02, 5.416e-02, 1.171e-01, 4.574e-02, -1.559e-01, -5.704e-02, 7.490e-03, -1.299e-02));
	r += mul(s0_1, M4(3.749e-02, 2.456e-02, 3.723e-02, 4.631e-02, -1.636e-01, 3.231e-01, -5.219e-01, -2.959e-01, 1.572e-01, 2.165e-01, 8.645e-01, 1.880e-01, -3.332e-02, -6.233e-02, -5.371e-01, -5.658e-02));
	r += mul(s0_2, M4(1.382e-02, -2.358e-04, 9.231e-02, 1.799e-02, 1.917e-02, -6.521e-02, -3.579e-02, 2.990e-02, -2.400e-03, 1.230e-02, 1.441e-01, 6.389e-03, 3.905e-03, -5.286e-02, -5.003e-02, 4.690e-02));
	r += mul(s0_3, M4(7.693e-02, 1.597e-01, 1.137e-01, -1.860e-01, 9.043e-01, 1.308e-01, 1.105e-01, 2.871e-01, 1.526e-01, 1.240e-02, -3.298e-05, -6.604e-02, -4.860e-01, -1.031e-01, -5.081e-02, -7.747e-02));
	r += mul(s0_4, M4(1.274e-01, -3.379e-01, 3.795e-02, 6.161e-01, -1.218e-01, -7.013e-01, 1.853e-02, -8.906e-01, -4.401e-02, -6.231e-01, -1.024e-01, 2.470e-01, 1.338e-01, -4.147e-01, 2.452e-01, -3.942e-01));
	r += mul(s0_5, M4(-4.063e-02, 6.968e-02, 2.205e-02, -1.036e-01, 4.480e-02, -9.197e-02, -1.020e-01, 2.791e-01, -1.148e-01, 2.673e-01, 1.218e-01, -4.137e-01, 4.017e-02, -5.944e-02, -5.751e-02, 1.754e-01));
	r += mul(s0_6, M4(3.011e-02, -1.665e-02, 8.742e-03, 5.932e-02, -4.256e-03, 1.518e-01, 2.806e-03, -9.026e-02, 2.111e-02, 7.958e-02, 3.629e-02, -1.323e-01, -8.908e-02, -6.212e-02, -5.198e-02, 6.351e-03));
	r += mul(s0_7, M4(-9.200e-03, -3.213e-02, -1.605e-02, -7.542e-02, 2.455e-02, 3.825e-02, -4.774e-02, 9.678e-02, 4.464e-02, -1.140e-01, -1.648e-02, 1.192e-02, 2.675e-02, 5.482e-02, 2.966e-02, -1.619e-01));
	r += mul(s0_8, M4(-2.000e-02, 1.655e-02, 3.124e-03, -6.765e-02, 1.554e-02, -1.146e-02, -3.534e-02, 6.892e-02, -1.233e-02, 1.139e-02, 2.675e-02, 3.995e-03, -9.051e-03, -3.441e-02, 1.587e-02, -7.676e-02));
	r += mul(s1_0, M4(-1.663e-01, 9.328e-02, 2.705e-01, 3.328e-02, 7.052e-02, 1.099e-03, -2.256e-03, 1.128e-01, 5.086e-02, 9.647e-02, 1.175e-02, -1.726e-01, -8.782e-02, -1.165e-01, 4.545e-02, 1.335e-01));
	r += mul(s1_1, M4(-6.155e-03, 1.345e-01, -4.326e-01, -1.654e-01, -5.776e-02, 6.831e-02, -2.463e-01, -2.372e-01, 1.169e-01, -3.140e-02, 5.323e-01, 1.785e-01, -5.850e-03, -8.203e-03, -1.822e-01, 2.534e-02));
	r += mul(s1_2, M4(1.863e-02, -1.856e-02, 1.687e-01, -7.303e-03, 4.871e-02, -4.723e-02, -2.190e-02, 1.043e-01, -3.552e-02, 1.670e-02, 1.659e-01, -1.176e-01, 7.899e-04, 2.110e-03, -2.673e-02, 2.120e-03));
	r += mul(s1_3, M4(1.640e-01, 8.478e-03, -1.149e-01, -3.344e-01, 2.241e-01, 1.137e-01, 6.163e-02, 2.728e-02, 4.249e-03, 3.356e-02, -1.696e-03, -6.785e-02, -3.994e-01, -3.799e-01, -5.530e-02, 2.492e-01));
	r += mul(s1_4, M4(3.037e-01, -1.059e+00, 9.017e-02, 6.420e-01, -1.471e-01, -6.575e-02, -1.292e-01, -6.328e-01, 6.295e-03, -2.034e-01, 9.145e-02, 7.056e-02, 4.213e-02, 4.007e-01, 3.116e-01, -4.229e-03));
	r += mul(s1_5, M4(-2.912e-02, 7.558e-02, 2.897e-02, -8.396e-02, 6.419e-02, -6.399e-02, -9.713e-02, 2.764e-01, -1.214e-01, 1.159e-01, 1.123e-01, -4.803e-01, 1.727e-02, -2.057e-02, 3.514e-02, 3.603e-02));
	r += mul(s1_6, M4(-5.193e-02, -4.072e-02, -5.894e-02, 2.776e-02, 4.386e-02, 8.969e-02, 2.531e-02, -3.014e-02, -1.272e-02, -7.331e-03, -1.955e-03, -3.157e-02, -8.032e-02, -2.104e-01, -3.009e-02, 5.811e-03));
	r += mul(s1_7, M4(-9.411e-02, 1.938e-01, 1.342e-01, -6.996e-01, 8.714e-03, 3.307e-02, 2.312e-02, -7.802e-02, -1.427e-02, -1.669e-02, -1.296e-02, -1.259e-02, -2.797e-02, -4.556e-02, -3.527e-02, 1.244e-01));
	r += mul(s1_8, M4(-3.627e-02, 2.152e-01, -5.753e-02, -8.334e-04, 2.889e-02, -4.564e-02, -5.381e-02, 1.573e-01, -2.520e-02, 1.424e-02, 2.127e-04, -2.847e-02, -1.799e-02, 3.818e-02, 1.862e-02, -3.541e-02));
	r += V4(6.402e-04, 6.541e-04, -3.615e-03, -4.643e-04);
	return r;
}
void Pass8(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 9
//!DESC CuNNy-8x4C-BILINEAR-CHROMA-NVL-DS-conv8
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-8.377e-03, 7.300e-02, 8.189e-03, -2.091e-02, 1.083e-02, -1.622e-01, 2.621e-02, 2.660e-02, -1.306e-02, 1.880e-01, 1.629e-02, -3.500e-02, 4.309e-02, -1.431e-01, -1.813e-02, 2.965e-02));
	r += mul(s0_1, M4(-1.627e-01, -4.015e-01, -5.201e-02, 1.929e-02, 1.346e-01, 8.961e-02, 9.639e-02, 9.546e-02, -4.722e-01, -9.724e-02, 6.620e-02, -3.412e-02, 2.168e-01, 3.952e-01, -2.772e-02, 9.681e-02));
	r += mul(s0_2, M4(3.028e-01, 2.663e-02, -9.117e-02, -9.202e-02, -2.228e-02, -3.479e-02, -4.016e-03, -3.430e-02, -7.092e-02, -1.689e-02, 2.245e-02, 3.496e-03, -1.626e-01, -3.357e-02, 5.783e-02, 3.064e-03));
	r += mul(s0_3, M4(3.542e-02, -2.115e-02, -6.435e-03, 4.065e-02, -8.827e-02, 2.645e-01, 2.839e-02, -6.681e-02, 2.462e-03, 2.319e-01, 1.842e-01, 3.381e-01, -3.762e-02, 3.366e-02, 2.155e-02, -1.022e-01));
	r += mul(s0_4, M4(-2.133e-01, 5.912e-01, -8.697e-03, -6.312e-01, -1.288e-01, 4.810e-01, 1.013e+00, 8.658e-01, 1.187e+00, -1.627e-01, 8.559e-01, 4.004e-01, 5.847e-02, -1.688e-01, 1.921e-01, 1.444e-01));
	r += mul(s0_5, M4(3.412e-02, 2.780e-02, 9.027e-02, 5.220e-01, -1.031e-01, -8.862e-02, 2.263e-02, 6.945e-02, -8.675e-02, 3.361e-02, -2.124e-01, -1.471e-01, 1.584e-02, 2.303e-02, -5.824e-02, -7.527e-02));
	r += mul(s0_6, M4(1.812e-02, -3.575e-02, -1.139e-02, -3.224e-04, 2.179e-02, -3.235e-02, -7.112e-03, 8.548e-02, 5.538e-03, -8.289e-03, 3.929e-02, -7.104e-02, -8.476e-03, 4.835e-03, 2.206e-02, 8.648e-03));
	r += mul(s0_7, M4(2.166e-02, -1.125e-01, -1.071e-01, -8.372e-02, -2.859e-02, 1.222e-01, -2.841e-02, -2.065e-01, -3.554e-02, 1.069e-01, 9.318e-02, 3.794e-01, -5.765e-03, 1.361e-02, -3.213e-02, 1.694e-02));
	r += mul(s0_8, M4(3.206e-02, 2.531e-02, -2.693e-02, -1.129e-02, -2.327e-02, -1.926e-03, -6.556e-02, 2.589e-02, -4.065e-02, -7.686e-03, -1.013e-01, -1.450e-01, 4.848e-03, -6.231e-03, -1.187e-02, -3.500e-02));
	r += mul(s1_0, M4(2.045e-02, 8.894e-02, -7.845e-03, -1.284e-02, 7.194e-03, -2.704e-01, 4.750e-04, 4.763e-02, 6.246e-03, 1.313e-01, 3.992e-02, 1.808e-02, 4.506e-02, 3.274e-02, 5.272e-02, 1.053e-01));
	r += mul(s1_1, M4(-3.986e-02, -4.872e-01, -1.616e-01, 1.809e-03, 3.896e-01, 2.079e-01, -9.238e-04, 1.151e-01, -6.408e-02, -1.024e-01, 6.148e-03, -3.093e-03, 9.308e-01, 9.668e-01, 5.227e-02, 2.201e-01));
	r += mul(s1_2, M4(-3.538e-01, -3.603e-01, -3.995e-01, -3.701e-01, 4.822e-03, -1.527e-02, -1.160e-02, -2.333e-02, 9.221e-02, 5.529e-02, -2.261e-02, 1.885e-02, 7.283e-02, -6.658e-02, -2.693e-02, -3.206e-03));
	r += mul(s1_3, M4(8.714e-05, -1.278e-04, -7.788e-02, -2.324e-02, -8.810e-02, 1.111e-01, 6.665e-02, -1.636e-01, 2.103e-02, -2.016e-01, -1.161e-02, 7.646e-02, -8.513e-02, 2.517e-01, -7.485e-02, -3.403e-01));
	r += mul(s1_4, M4(-3.840e-01, 4.278e-02, -9.123e-02, -8.457e-01, -6.671e-02, 1.450e-01, 6.413e-01, 6.993e-01, 3.775e-01, -4.487e-01, 4.803e-02, -2.649e-02, 1.811e-01, -1.920e-01, 5.608e-01, -6.056e-01));
	r += mul(s1_5, M4(-1.031e-01, -5.754e-01, -9.454e-01, -3.057e-01, -2.166e-02, -3.186e-02, 7.069e-02, 9.985e-02, 6.143e-02, 8.374e-02, -1.284e-01, -1.249e-01, -2.569e-02, 3.928e-02, -8.650e-02, -1.910e-02));
	r += mul(s1_6, M4(9.011e-03, -1.562e-02, 9.599e-03, 9.206e-02, 6.830e-03, -4.731e-02, 1.604e-03, 4.118e-02, -3.455e-02, 4.758e-02, 1.237e-02, -7.059e-02, -2.835e-02, 6.112e-03, -5.666e-03, -6.958e-02));
	r += mul(s1_7, M4(7.699e-02, -1.297e-01, -1.103e-01, -8.136e-02, -1.280e-02, 5.086e-02, -4.039e-02, -5.093e-02, 1.383e-02, -1.796e-02, -5.883e-02, 6.674e-03, 1.461e-02, 1.849e-02, -2.215e-02, -4.025e-02));
	r += mul(s1_8, M4(1.685e-02, -8.573e-03, 2.424e-01, 9.395e-01, -1.397e-02, -7.902e-04, -2.445e-03, 2.820e-02, 1.128e-02, 2.627e-02, -9.204e-02, -9.426e-02, 1.306e-02, 6.860e-03, -1.801e-02, -3.413e-02));
	r += V4(8.284e-04, -6.277e-04, -7.768e-04, -7.523e-04);
	return r;
}
void Pass9(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 10
//!DESC CuNNy-8x4C-BILINEAR-CHROMA-NVL-DS-out
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-3.123e-03, -6.856e-03, -1.334e-02, -1.433e-03, 1.240e-02, -5.847e-03, -1.678e-03, -1.087e-03, -1.032e-02, -4.854e-03, 1.826e-02, -9.056e-04, -1.605e-02, 5.358e-03, 6.187e-03, -5.248e-03));
	r += mul(s0_1, M4(-8.032e-02, 4.710e-04, 1.286e-02, -2.752e-02, -2.267e-02, 1.462e-02, -8.080e-03, 8.398e-03, -6.983e-02, 3.882e-02, -3.981e-02, 5.137e-03, 2.959e-01, -2.296e-02, 1.746e-02, -9.232e-04));
	r += mul(s0_2, M4(-9.903e-04, -1.229e-02, -2.775e-03, -4.805e-04, -2.584e-02, -2.046e-02, 6.565e-03, -1.456e-02, -5.578e-02, -1.321e-01, 8.476e-04, -4.431e-02, 6.068e-02, 2.588e-01, 2.017e-03, 4.149e-02));
	r += mul(s0_3, M4(1.906e-01, 3.275e-02, -1.861e-02, -9.551e-03, 1.305e-02, -6.291e-03, 2.217e-02, -1.485e-03, -2.169e-02, 1.128e-02, -1.584e-02, -1.987e-02, -1.952e-02, 4.109e-03, -2.057e-02, 1.841e-02));
	r += mul(s0_4, M4(2.819e-01, 5.488e-01, -1.819e-01, 6.572e-03, 2.056e-01, 1.188e-02, 3.119e-03, -6.448e-03, -6.570e-01, -1.213e-01, -3.205e-01, 8.520e-02, 2.391e-01, -2.342e-01, 8.302e-01, 1.678e-02));
	r += mul(s0_5, M4(-4.826e-02, -2.004e-01, -1.698e-02, -9.155e-02, 1.597e-01, 5.332e-01, 1.103e-02, 1.054e-01, 1.273e-02, -2.222e-01, -9.292e-03, -6.570e-02, -8.229e-02, -8.863e-02, -3.769e-03, 2.787e-01));
	r += mul(s0_6, M4(6.232e-03, -3.980e-02, 1.439e-01, 5.398e-03, -2.109e-02, -1.612e-02, 3.781e-02, -5.965e-03, 8.514e-03, 9.154e-03, -3.588e-02, -2.508e-03, -1.192e-02, 3.151e-03, -3.284e-02, -1.187e-02));
	r += mul(s0_7, M4(-3.644e-02, 4.906e-02, 1.038e-01, 2.049e-01, 5.925e-03, 2.739e-02, -7.581e-02, 5.138e-02, 3.090e-02, -4.646e-02, 1.179e-01, -3.306e-02, -5.971e-03, 2.427e-02, -1.525e-02, -6.775e-02));
	r += mul(s0_8, M4(3.322e-02, -1.558e-02, 3.730e-02, 1.826e-02, -4.824e-02, -4.452e-02, -4.490e-02, 7.158e-02, 8.442e-03, -9.287e-03, -3.642e-03, 3.805e-03, -9.889e-03, 1.227e-02, -2.855e-02, 3.283e-02));
	r += mul(s1_0, M4(-1.948e-03, 2.659e-04, -6.404e-03, 3.389e-03, -5.669e-02, 5.780e-02, 1.923e-02, -9.834e-03, 2.822e-02, -4.851e-02, -2.436e-02, 3.372e-02, -4.159e-02, 8.190e-04, 4.541e-03, -1.035e-02));
	r += mul(s1_1, M4(-7.153e-02, -8.310e-03, 1.552e-03, -9.660e-03, 7.247e-02, -5.342e-02, 1.509e-02, -8.009e-04, -3.579e-01, 1.995e-01, -5.828e-02, 7.028e-02, 4.088e-01, 1.779e-02, -5.895e-03, -7.987e-02));
	r += mul(s1_2, M4(9.159e-03, -2.618e-02, -1.493e-03, 3.744e-03, -2.316e-02, 9.488e-03, 1.844e-03, -7.153e-03, -1.813e-02, -2.046e-01, 9.431e-04, -5.132e-02, 1.830e-02, 2.642e-01, -1.478e-03, 8.690e-02));
	r += mul(s1_3, M4(1.135e-01, -2.509e-02, -1.447e-02, 1.595e-03, 1.976e-01, -1.469e-01, -6.421e-02, -6.468e-02, 4.146e-03, 2.676e-03, -5.931e-02, -1.546e-02, -4.532e-02, 1.689e-02, -4.808e-02, -1.890e-03));
	r += mul(s1_4, M4(-1.066e-01, 3.623e-01, -9.795e-02, -2.206e-03, 4.769e-01, -4.950e-01, 1.229e-01, 1.402e-01, -5.897e-02, -1.722e-01, -3.917e-01, -4.325e-01, 9.329e-02, 5.414e-02, 3.414e-01, 1.373e-01));
	r += mul(s1_5, M4(-3.057e-02, -1.831e-01, -1.467e-03, -7.405e-02, 4.055e-02, 4.795e-01, -3.509e-04, 9.694e-02, -5.547e-03, -1.911e-02, -2.648e-02, -1.057e-01, -3.909e-03, 3.162e-02, -2.507e-03, 1.415e-01));
	r += mul(s1_6, M4(-3.472e-03, -4.678e-02, 2.822e-01, -5.369e-02, -1.026e-01, -7.746e-02, 2.764e-01, -1.997e-01, 1.442e-02, 1.343e-02, 1.255e-02, 2.808e-02, -1.373e-02, -9.246e-03, -5.724e-03, -5.694e-03));
	r += mul(s1_7, M4(-3.812e-02, 4.629e-02, 5.030e-02, 7.222e-01, 1.214e-01, 1.194e-01, 3.238e-01, -4.365e-01, 2.941e-03, -1.647e-02, 8.627e-03, 3.554e-03, -5.949e-03, 1.387e-02, -8.310e-03, 2.149e-02));
	r += mul(s1_8, M4(2.788e-02, 1.517e-02, 2.025e-02, -5.824e-02, -3.337e-02, -2.301e-02, -3.797e-02, 2.242e-01, 5.065e-03, 1.827e-03, 1.114e-02, -1.977e-03, 1.612e-03, 1.033e-02, -7.492e-03, 8.529e-03));
	r += V4(-3.916e-04, -7.182e-04, 1.206e-04, -2.640e-04);
	return tanh(r);
}
void Pass10(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 11
//!DESC CuNNy-8x4C-BILINEAR-CHROMA-NVL-DS-shuffle
//!STYLE PS
//!IN t1, INPUT
float4 Pass11(float2 pos) {
	float2 pt = float2(GetInputPt());
	static const float3x3 rgb2yuv = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081};
	static const float3x3 yuv2rgb = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float4 r = 0.0;
	float2 size = float2(GetInputSize());
	float2 f = frac(pos * size);
	float3 yuv = mul(rgb2yuv, INPUT.SampleLevel(SL, pos, 0).rgb);
	int2 i = int2(f * 2.0);
	r.r = t1.SampleLevel(SP, (float2(0.5, 0.5) - f) * pt + pos, 0)[2*i.y + i.x];
	r.r += yuv.r;
	r.a = 1.0;
	r.r = clamp(r, 0.0, 1.0);
	float3 px = mul(yuv2rgb, float3(r.r, yuv.yz));
	return float4(px, 1.0);
}
