// CuNNy 4x4C BILINEAR CHROMA NVL DS
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

//!MAGPIE EFFECT
//!VERSION 3
//!OUTPUT_WIDTH INPUT_WIDTH * 2
//!OUTPUT_HEIGHT INPUT_HEIGHT * 2

//!TEXTURE
Texture2D INPUT;


//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t1;

//!PASS 1
//!DESC CuNNy-4x4C-BILINEAR-CHROMA-NVL-DS-in
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) (dot(float3(0.40689873695373535, 0.7599871754646301, 0.1726350635290146), O(INPUT, float2(x, y)).rgb) + -1.0667484998703003)
float4 f0(float2 pt, float2 pos, min16float s0_0, min16float s0_1, min16float s0_2, min16float s0_3, min16float s0_4, min16float s0_5, min16float s0_6, min16float s0_7, min16float s0_8) {
	V4 r = 0.0;
	r += V4(5.760e-03, -8.878e-03, -3.460e-02, -3.771e-02) * s0_0;
	r += V4(-1.042e-01, 3.617e-01, -3.778e-05, -8.462e-02) * s0_1;
	r += V4(5.508e-02, -4.135e-01, 3.894e-02, -4.823e-02) * s0_2;
	r += V4(-2.398e-01, -1.227e-01, 3.951e-02, -1.665e-01) * s0_3;
	r += V4(-4.232e-01, 1.739e-01, 2.766e-01, 8.382e-01) * s0_4;
	r += V4(-7.590e-02, 1.099e-02, -3.410e-01, -2.514e-01) * s0_5;
	r += V4(1.869e-01, 1.827e-02, 5.188e-02, -5.413e-02) * s0_6;
	r += V4(5.321e-01, -1.887e-02, 3.682e-01, -1.887e-01) * s0_7;
	r += V4(6.877e-02, -1.762e-03, -4.014e-01, 2.439e-02) * s0_8;
	r += V4(1.401e-02, 3.599e-03, 1.089e-03, 3.189e-02);
	return r;
}
void Pass1(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float s0_0 = l0(-1.0, -1.0);
	min16float s0_1 = l0(0.0, -1.0);
	min16float s0_2 = l0(1.0, -1.0);
	min16float s0_3 = l0(-1.0, 0.0);
	min16float s0_4 = l0(0.0, 0.0);
	min16float s0_5 = l0(1.0, 0.0);
	min16float s0_6 = l0(-1.0, 1.0);
	min16float s0_7 = l0(0.0, 1.0);
	min16float s0_8 = l0(1.0, 1.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8);
}
//!PASS 2
//!DESC CuNNy-4x4C-BILINEAR-CHROMA-NVL-DS-conv1
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(6.579e-04, 4.456e-02, -1.172e-01, 1.682e-01, 1.109e-01, 3.743e-02, -7.634e-02, -2.023e-02, 8.047e-02, 2.704e-02, 1.479e-02, 7.160e-02, 2.257e-02, -1.783e-01, -2.050e-01, 1.105e-01));
	r += mul(s0_1, M4(5.644e-02, -6.738e-01, 1.595e-01, -1.005e-01, 8.018e-02, -5.798e-02, -5.166e-02, 1.267e-01, 1.032e-01, 1.144e-01, 7.371e-02, 1.725e-01, -4.325e-01, 4.872e-01, 8.802e-02, 2.582e-01));
	r += mul(s0_2, M4(6.348e-01, -2.634e-01, -3.702e-03, -1.195e-01, -9.447e-02, -1.058e-02, -1.939e-02, 2.734e-04, 1.116e-02, 5.892e-03, 1.233e-01, -1.225e-01, 1.539e-01, -3.006e-02, 5.189e-02, -2.261e-01));
	r += mul(s0_3, M4(6.519e-02, 3.928e-02, -4.215e-01, -2.998e-01, -9.911e-02, -4.349e-02, 5.357e-01, -6.782e-02, -1.046e-01, -1.296e-01, 5.473e-01, 7.803e-01, -1.139e-01, 1.004e-01, 3.994e-01, 1.808e-01));
	r += mul(s0_4, M4(-2.555e-01, 6.813e-02, 4.404e-01, 8.526e-02, 2.348e-01, 8.465e-02, -5.628e-02, -5.828e-01, -1.467e-01, -2.066e-01, 7.448e-02, 1.334e-01, 1.060e-01, -3.368e-01, -3.349e-01, -2.858e-01));
	r += mul(s0_5, M4(2.822e-01, -1.268e-01, 1.031e-02, 1.530e-01, -1.103e-01, 1.041e-02, -1.388e-01, 2.330e-01, 1.656e-01, -3.504e-02, -8.045e-02, -4.383e-02, 1.844e-01, 1.684e-02, -7.441e-02, 2.174e-01));
	r += mul(s0_6, M4(2.339e-02, -2.245e-02, 2.977e-02, -2.893e-02, 6.471e-02, 8.286e-02, -3.066e-01, 4.442e-01, -2.741e-02, 8.173e-02, -7.303e-02, -2.462e-02, -7.564e-02, 1.398e-02, 4.179e-02, -3.465e-01));
	r += mul(s0_7, M4(-5.965e-02, 6.740e-03, -2.516e-02, -2.963e-03, 1.864e-02, -1.144e-02, 1.723e-01, -1.646e-01, -3.182e-02, 1.524e-03, -3.934e-02, -3.209e-02, 1.753e-01, -3.667e-02, 5.988e-02, 8.184e-02));
	r += mul(s0_8, M4(-1.606e-02, 3.918e-02, 1.422e-02, 3.012e-02, -3.400e-01, -4.443e-02, 8.968e-02, -6.292e-02, -6.524e-03, 6.366e-03, -3.118e-02, 3.668e-02, 2.348e-02, 4.241e-02, 6.346e-02, 8.881e-02));
	r += mul(s1_0, M4(7.336e-03, -3.436e-02, 1.308e-02, -7.723e-02, -3.851e-02, -4.142e-02, 6.674e-02, -4.115e-02, 1.932e-01, -9.809e-02, -2.933e-01, 5.332e-01, -5.579e-02, 1.312e-01, 1.803e-01, -1.081e-01));
	r += mul(s1_1, M4(-1.855e-01, 6.200e-01, 5.165e-02, 3.260e-04, 1.798e-02, -5.745e-02, -2.813e-02, -4.757e-02, 3.014e-01, -8.330e-02, 7.181e-02, 1.919e-01, 3.430e-01, -3.106e-01, -1.189e-01, -3.531e-02));
	r += mul(s1_2, M4(-1.666e-01, 3.053e-01, -8.700e-03, 8.180e-02, -5.981e-02, 7.501e-03, -5.988e-03, -2.126e-02, 1.024e-01, 3.408e-02, -2.973e-02, -7.437e-02, -8.787e-02, 7.685e-03, -9.303e-02, 2.088e-01));
	r += mul(s1_3, M4(-6.300e-02, -2.138e-02, 2.258e-01, 2.979e-01, 2.501e-01, 2.013e-02, -1.753e-01, -5.937e-01, -8.473e-02, 1.377e-01, -7.962e-01, -6.012e-01, -4.915e-02, -6.788e-02, -2.879e-01, 1.176e-01));
	r += mul(s1_4, M4(9.909e-02, -4.459e-02, -3.810e-01, -7.634e-02, -2.271e-03, -2.222e-01, 1.958e-01, 6.108e-02, -2.427e-01, 2.312e-01, -1.509e-01, -1.311e-01, -2.085e-01, 2.953e-01, 1.200e-01, 3.980e-02));
	r += mul(s1_5, M4(-2.767e-01, 1.377e-01, 1.038e-01, -2.044e-01, 3.281e-01, -5.224e-02, 1.302e-01, -1.642e-02, -3.916e-01, 3.674e-02, 1.039e-01, -7.228e-02, -1.203e-01, -1.033e-01, -2.913e-02, 1.555e-02));
	r += mul(s1_6, M4(9.549e-03, 3.983e-02, -7.065e-02, 1.518e-01, -9.555e-02, -7.059e-02, 6.761e-03, 3.682e-02, 3.797e-02, -5.631e-02, 2.590e-02, 3.717e-02, 5.740e-02, -2.094e-02, -2.081e-02, 5.127e-02));
	r += mul(s1_7, M4(-2.710e-03, -1.474e-02, 5.970e-02, -1.284e-01, -5.261e-02, 1.057e-01, -4.781e-02, -1.558e-01, -9.330e-02, -8.086e-03, -1.821e-02, 8.717e-04, -6.848e-02, 4.170e-03, 2.531e-03, -1.795e-02));
	r += mul(s1_8, M4(2.767e-03, -3.020e-02, -2.069e-02, 1.689e-02, 7.207e-02, 9.162e-02, -1.212e-01, 1.626e-01, 3.099e-02, -6.406e-03, -1.120e-02, -1.493e-02, 1.791e-01, -7.538e-02, -5.781e-02, 7.582e-03));
	r += V4(-1.343e-02, 1.168e-02, -5.070e-03, -9.588e-04);
	return r;
}
void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = max(-s0_0, 0.0);
	V4 s1_1 = max(-s0_1, 0.0);
	V4 s1_2 = max(-s0_2, 0.0);
	V4 s1_3 = max(-s0_3, 0.0);
	V4 s1_4 = max(-s0_4, 0.0);
	V4 s1_5 = max(-s0_5, 0.0);
	V4 s1_6 = max(-s0_6, 0.0);
	V4 s1_7 = max(-s0_7, 0.0);
	V4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 3
//!DESC CuNNy-4x4C-BILINEAR-CHROMA-NVL-DS-conv2
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(7.493e-02, -7.259e-02, -2.585e-02, 4.825e-02, 3.856e-02, 9.813e-02, 1.340e-02, 1.833e-02, 2.522e-02, 9.593e-02, -1.965e-02, -2.085e-01, -3.523e-03, -1.717e-02, -3.848e-02, 1.432e-01));
	r += mul(s0_1, M4(-2.985e-01, 8.547e-02, 1.376e-01, 3.935e-01, -5.449e-03, -2.691e-02, -3.298e-01, 2.060e-02, -1.616e-01, 9.060e-02, -1.565e-01, -2.009e-01, 3.243e-02, 5.114e-02, -9.380e-03, 4.517e-01));
	r += mul(s0_2, M4(-1.424e-02, -1.123e-02, 7.524e-02, 8.717e-02, 9.204e-02, -2.820e-02, 8.798e-03, 5.457e-02, 6.490e-02, 2.711e-02, -5.321e-02, -2.109e-01, 1.408e-02, 4.827e-03, -3.063e-02, 7.089e-02));
	r += mul(s0_3, M4(-4.606e-02, 1.245e-02, 2.423e-01, -1.150e-01, 1.692e-01, 2.432e-01, 1.289e-01, 1.175e-01, -1.021e-02, 3.107e-01, -1.480e-02, 1.664e-02, -1.224e-02, -5.222e-02, 5.140e-02, -6.909e-04));
	r += mul(s0_4, M4(-6.543e-01, 3.677e-01, 4.397e-01, 6.504e-01, 4.309e-01, -1.236e-01, 1.855e-01, -2.041e-02, 6.898e-02, -1.120e-01, -1.164e-01, -1.484e-01, 1.360e-01, -8.280e-02, 1.555e-01, 1.403e-01));
	r += mul(s0_5, M4(-4.840e-06, -2.337e-02, 1.212e-02, -5.442e-02, 6.634e-03, 3.750e-02, -1.818e-01, -3.376e-02, 1.064e-01, -1.952e-01, -4.609e-01, -1.236e+00, 1.316e-02, -1.232e-02, -2.974e-03, -1.286e-01));
	r += mul(s0_6, M4(2.271e-01, 1.152e-01, 2.756e-02, 6.715e-02, -7.317e-02, 4.406e-02, 8.081e-02, 3.178e-02, -7.983e-02, -8.021e-02, 2.355e-02, -7.056e-02, 4.284e-02, 1.646e-02, -2.552e-03, 3.265e-02));
	r += mul(s0_7, M4(-1.551e-02, -5.906e-02, 1.284e-01, 2.166e-01, -5.604e-01, -1.957e-01, -3.710e-02, -2.466e-01, -4.030e-01, -9.742e-02, -6.876e-02, -9.789e-02, 1.987e-01, 8.673e-02, 5.652e-02, 1.096e-01));
	r += mul(s0_8, M4(-6.687e-02, 2.218e-02, 5.069e-02, 5.140e-02, -2.960e-01, 5.215e-02, 7.198e-02, -1.243e-01, -2.604e-01, -1.044e-02, -2.183e-02, -1.162e-01, 1.889e-01, -2.491e-02, -1.064e-02, 6.316e-03));
	r += mul(s1_0, M4(3.954e-02, -2.355e-01, 1.398e-02, -2.627e-01, -7.204e-02, 5.653e-02, 7.926e-02, 1.306e-02, -6.368e-03, 1.686e-02, -3.433e-02, -1.114e-02, 3.586e-02, -5.903e-02, -4.820e-04, 7.420e-02));
	r += mul(s1_1, M4(-2.783e-02, 1.277e-01, 7.089e-02, 1.116e-01, 2.279e-01, -7.502e-03, 3.451e-01, -1.412e-01, 2.146e-01, 6.095e-02, -1.047e-01, -1.346e-01, 1.915e-01, -3.429e-02, 2.255e-01, -6.941e-02));
	r += mul(s1_2, M4(-8.457e-02, 2.440e-02, 7.065e-02, 3.645e-02, 1.304e-01, -5.255e-02, -4.436e-02, -1.980e-01, 3.433e-01, -2.265e-02, -3.721e-01, -6.662e-02, 3.799e-01, 4.798e-02, -1.936e-01, 1.291e-01));
	r += mul(s1_3, M4(-9.119e-03, 3.152e-02, -7.838e-02, 1.614e-01, -2.121e-01, -5.579e-03, -3.724e-02, -3.845e-02, -2.061e-02, -4.406e-02, -5.262e-03, -2.221e-02, -5.871e-02, 6.851e-02, 2.217e-02, 2.842e-01));
	r += mul(s1_4, M4(2.336e-01, -7.583e-03, -1.105e-01, -4.181e-01, 2.312e-01, 5.196e-02, -1.148e+00, -8.788e-02, -5.589e-01, 4.792e-01, 7.715e-02, -1.685e-01, 1.010e-01, 9.864e-01, 2.705e-01, 6.280e-01));
	r += mul(s1_5, M4(7.014e-02, -6.890e-03, 3.204e-02, 2.060e-02, 2.830e-01, -1.538e-01, -1.972e-02, -2.861e-01, -6.690e-02, 4.344e-02, 1.109e-01, -5.789e-02, 2.896e-01, 4.353e-02, -1.702e-01, 9.250e-03));
	r += mul(s1_6, M4(-5.545e-02, -9.641e-02, -6.561e-02, 2.205e-02, -1.304e-01, 1.096e-01, 2.737e-02, 5.211e-02, 1.399e-02, 8.910e-02, 6.166e-03, 7.560e-03, 2.268e-02, -1.782e-01, -4.863e-02, 1.251e-01));
	r += mul(s1_7, M4(4.535e-02, -1.017e-02, -4.672e-02, 3.678e-02, -2.134e-01, 9.714e-02, -3.146e-03, -3.113e-01, 8.511e-02, 1.057e-01, 2.579e-02, -1.655e-01, -2.854e-01, -2.489e-01, 1.667e-01, 3.330e-01));
	r += mul(s1_8, M4(3.038e-02, -7.884e-03, 2.710e-02, 6.186e-02, 1.816e-01, -2.069e-02, -3.511e-02, -5.336e-02, -4.893e-02, 4.866e-02, 4.932e-02, -1.659e-02, -2.869e-01, -1.309e-01, 9.397e-02, 1.633e-02));
	r += V4(1.853e-04, 1.397e-03, 1.791e-03, 1.278e-03);
	return r;
}
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = max(-s0_0, 0.0);
	V4 s1_1 = max(-s0_1, 0.0);
	V4 s1_2 = max(-s0_2, 0.0);
	V4 s1_3 = max(-s0_3, 0.0);
	V4 s1_4 = max(-s0_4, 0.0);
	V4 s1_5 = max(-s0_5, 0.0);
	V4 s1_6 = max(-s0_6, 0.0);
	V4 s1_7 = max(-s0_7, 0.0);
	V4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 4
//!DESC CuNNy-4x4C-BILINEAR-CHROMA-NVL-DS-conv3
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-3.183e-03, -4.876e-03, -7.103e-02, -1.457e-02, 7.327e-02, -1.577e-01, -3.478e-02, 2.335e-02, -1.990e-03, 3.303e-02, 2.846e-02, 2.754e-02, -3.651e-02, 1.353e-01, 3.008e-02, -1.586e-02));
	r += mul(s0_1, M4(-9.622e-03, -1.892e-01, 5.282e-03, 1.060e-01, 1.116e-01, 1.749e-01, -4.375e-02, 2.740e-02, 1.774e-02, -2.882e-03, -3.235e-03, 1.734e-03, 3.359e-02, -1.050e-01, -1.222e-01, -8.848e-02));
	r += mul(s0_2, M4(3.194e-02, 3.964e-03, -2.374e-03, -5.332e-02, -1.932e-01, -8.590e-02, -1.312e-01, 4.973e-02, 1.062e-01, -5.507e-02, 1.785e-02, 1.914e-02, 1.411e-01, -2.324e-01, 5.279e-02, -9.228e-02));
	r += mul(s0_3, M4(1.511e-01, 7.900e-02, 2.696e-01, 1.720e-01, -1.077e-02, 6.048e-02, 9.154e-02, -4.962e-02, -1.295e-01, -1.923e-01, -2.056e-01, 4.989e-02, 1.353e-01, -4.658e-01, -1.412e-01, 5.749e-02));
	r += mul(s0_4, M4(-2.758e-01, -1.555e-01, 1.176e-01, -4.461e-01, 3.495e-02, 2.355e-01, -5.908e-01, -1.557e-01, 5.910e-01, -1.360e+00, -1.392e-02, -9.411e-02, 4.071e-01, 4.329e-01, 4.476e-01, 8.595e-03));
	r += mul(s0_5, M4(3.036e-01, -2.174e-01, -5.530e-02, -1.939e-01, -1.228e-01, 2.323e-01, -2.632e-02, -2.194e-01, 1.479e-01, -1.620e-02, -1.177e-01, 1.448e-03, -1.831e-01, 1.674e-01, -3.863e-01, -3.345e-01));
	r += mul(s0_6, M4(-1.057e-01, 2.546e-02, 2.481e-02, 1.247e-02, 3.889e-02, -1.392e-02, -3.617e-02, 5.300e-02, -1.663e-01, -2.480e-02, 1.717e-01, -3.480e-02, -8.499e-02, 7.091e-02, 1.066e-01, -7.980e-02));
	r += mul(s0_7, M4(-1.051e-01, -5.457e-03, 8.003e-03, -1.323e-01, -6.785e-02, 8.565e-02, -7.947e-02, 2.497e-02, 1.380e-01, -2.694e-01, 5.151e-02, 4.403e-02, -2.163e-02, 6.822e-02, -2.689e-01, 4.966e-02));
	r += mul(s0_8, M4(5.525e-02, 1.941e-02, -8.652e-02, -2.614e-01, 6.619e-02, 9.200e-02, -2.735e-03, 6.541e-03, -4.863e-02, 6.751e-02, 8.045e-03, -2.239e-01, -1.856e-02, 7.986e-02, -1.476e-01, -1.558e-01));
	r += mul(s1_0, M4(-1.705e-01, 2.102e-01, 6.953e-03, -4.553e-02, -5.049e-02, 2.160e-02, -3.485e-01, -2.727e-01, -7.153e-02, 5.054e-02, 1.091e-01, 2.437e-02, -9.008e-02, -2.244e-01, 4.032e-03, 9.717e-02));
	r += mul(s1_1, M4(2.381e-01, -1.221e-02, 6.001e-02, 5.424e-02, -1.472e-01, -1.257e-01, -1.485e+00, -1.186e+00, 1.575e-01, -2.611e-01, -3.695e-02, -2.421e-02, 1.508e-01, -5.091e-02, 3.469e-02, 2.238e-02));
	r += mul(s1_2, M4(-1.172e-01, 1.011e-01, 6.690e-02, 2.338e-01, 6.566e-01, 3.081e-01, -6.707e-01, -1.036e+00, -1.535e-02, 2.303e-02, 1.468e-02, 3.370e-02, 1.995e-02, 2.090e-02, 9.694e-03, 5.684e-02));
	r += mul(s1_3, M4(1.462e-01, 1.810e-02, -7.438e-02, -6.624e-02, 3.478e-01, 9.837e-02, -7.112e-01, -1.684e-02, 1.008e-01, 1.333e-01, 3.139e-01, -7.996e-02, -3.623e-01, 2.193e-01, 5.719e-01, 1.041e-01));
	r += mul(s1_4, M4(7.856e-01, 4.919e-02, -4.548e-01, 1.773e-01, -8.979e-01, -2.541e-01, -2.070e+00, -1.262e+00, -2.615e-01, 6.622e-01, -1.611e-01, 1.731e-01, 1.929e-01, -2.805e-01, -1.695e-01, 5.724e-01));
	r += mul(s1_5, M4(-2.065e-01, 1.470e-01, 2.139e-01, 4.150e-01, 1.679e+00, -1.683e-01, 2.599e-01, -6.637e-02, -3.918e-02, -3.313e-03, 6.966e-02, 5.990e-03, 1.828e-02, 5.197e-03, -1.839e-02, -6.422e-04));
	r += mul(s1_6, M4(4.720e-02, 3.338e-03, -1.335e-02, 2.129e-03, 1.804e-01, -1.145e-02, -4.511e-01, 7.813e-03, 1.990e-01, -7.519e-03, -1.485e-01, 1.233e-02, -1.499e-01, 1.567e-02, 1.363e-01, 2.186e-02));
	r += mul(s1_7, M4(9.447e-02, 3.164e-02, -7.946e-03, 2.313e-02, 6.585e-02, 7.349e-02, -2.959e-01, -8.140e-01, -1.733e-01, 9.221e-02, 3.662e-01, -1.537e-01, -1.655e-01, -5.533e-02, -1.510e-01, 1.975e-01));
	r += mul(s1_8, M4(-3.325e-02, 1.113e-02, 6.891e-02, 7.628e-02, 5.477e-01, -1.059e-01, -2.760e-01, -2.868e-01, 2.582e-02, -5.111e-02, 6.824e-02, 1.673e-01, 2.845e-02, 1.005e-02, -2.205e-02, -7.110e-02));
	r += V4(3.248e-03, 5.985e-04, -4.381e-03, 9.979e-03);
	return r;
}
void Pass4(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = max(-s0_0, 0.0);
	V4 s1_1 = max(-s0_1, 0.0);
	V4 s1_2 = max(-s0_2, 0.0);
	V4 s1_3 = max(-s0_3, 0.0);
	V4 s1_4 = max(-s0_4, 0.0);
	V4 s1_5 = max(-s0_5, 0.0);
	V4 s1_6 = max(-s0_6, 0.0);
	V4 s1_7 = max(-s0_7, 0.0);
	V4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 5
//!DESC CuNNy-4x4C-BILINEAR-CHROMA-NVL-DS-conv4
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-1.297e-02, 3.722e-02, -5.171e-02, 7.154e-02, -2.882e-03, 1.214e-02, -3.818e-02, 7.791e-02, -2.076e-02, 3.057e-02, 5.908e-02, 4.979e-02, 2.174e-01, 4.583e-02, -2.433e-01, 2.174e-01));
	r += mul(s0_1, M4(-5.134e-02, 5.847e-02, -3.357e-02, 7.480e-02, -7.015e-02, 4.991e-02, -4.733e-02, -1.578e-02, 3.216e-01, -1.003e-01, -5.021e-02, -1.319e-01, -5.593e-02, 4.134e-02, -1.047e-01, -6.810e-03));
	r += mul(s0_2, M4(2.121e-02, 2.884e-02, 8.882e-03, 5.700e-02, -8.709e-03, 1.586e-02, 3.770e-03, 3.863e-02, -6.371e-02, 1.052e-02, 1.226e-03, -4.188e-03, 2.191e-02, -1.039e-02, -2.119e-02, 5.532e-03));
	r += mul(s0_3, M4(-1.590e-01, -1.813e-01, 2.036e-01, -3.550e-01, -8.991e-02, 2.202e-02, 1.686e-01, 1.382e-01, 1.186e-01, -9.595e-02, -1.931e-01, -1.229e-01, -5.664e-02, 6.928e-02, 1.621e-01, 4.238e-01));
	r += mul(s0_4, M4(-1.929e-01, -1.352e-01, 7.417e-02, 7.343e-02, -7.102e-01, 3.705e-01, -2.698e-02, 1.037e-01, -1.082e+00, 9.657e-01, 5.320e-01, 1.586e-02, 3.617e-02, -2.153e-01, 4.735e-02, -6.563e-02));
	r += mul(s0_5, M4(-7.106e-03, 1.326e-02, 5.440e-03, -7.131e-02, -1.366e-01, 1.057e-02, -9.642e-02, -6.126e-02, -1.066e-01, 4.165e-02, 3.052e-02, 3.672e-02, 3.259e-02, 2.659e-02, 4.555e-02, -8.175e-03));
	r += mul(s0_6, M4(-8.080e-03, -1.728e-02, -2.349e-01, -1.118e-01, 2.028e-02, 1.735e-01, -3.892e-02, 1.919e-01, -1.511e-02, -6.767e-02, -3.001e-02, -1.852e-01, 3.261e-02, -1.114e-01, 1.604e-01, -4.969e-02));
	r += mul(s0_7, M4(-1.960e-02, -4.596e-02, -8.798e-02, 2.457e-02, 8.261e-02, 5.383e-02, -2.039e-01, -7.845e-01, -1.604e-01, -4.660e-02, -1.939e-01, 1.003e-01, -2.712e-02, 8.460e-02, 4.212e-02, 3.973e-02));
	r += mul(s0_8, M4(5.531e-03, -6.104e-02, -9.985e-03, -3.092e-03, -3.313e-02, -1.979e-01, -1.567e-01, 2.065e-01, -4.138e-02, -3.999e-01, -3.238e-01, 1.508e-01, -5.838e-03, 1.863e-02, -3.912e-02, -1.548e-02));
	r += mul(s1_0, M4(2.647e-02, -7.106e-03, 1.195e-01, -6.038e-02, 9.428e-06, -1.480e-02, 2.043e-02, -2.897e-02, 6.963e-02, 8.034e-02, -1.009e-01, 1.978e-01, 3.360e-03, -4.680e-02, 7.497e-02, -1.057e-01));
	r += mul(s1_1, M4(2.920e-01, -1.324e-02, 1.265e-01, -8.882e-02, 2.250e-02, -2.643e-02, 4.335e-02, -3.699e-02, 1.383e-02, 5.111e-02, -1.637e-01, 4.288e-02, 4.675e-02, 6.507e-02, 1.508e-02, 6.956e-02));
	r += mul(s1_2, M4(4.634e-02, -4.722e-02, 1.092e-02, -1.036e-01, 1.578e-02, -1.373e-02, 1.109e-02, -3.067e-02, 3.675e-02, -4.782e-02, -2.751e-02, -3.525e-02, 6.428e-03, -1.112e-02, -4.158e-03, -3.257e-02));
	r += mul(s1_3, M4(-1.294e-01, 1.115e-01, -3.197e-02, 1.843e-01, 6.862e-02, 3.126e-02, -7.865e-02, 9.837e-02, 8.323e-02, 9.403e-02, 1.149e-01, 2.467e-01, -4.684e-01, -4.779e-03, 2.963e-01, -4.177e-01));
	r += mul(s1_4, M4(1.199e+00, 6.184e-02, 3.160e-01, -1.486e-01, 1.149e-02, 6.286e-02, -2.079e-03, -1.249e-01, -3.327e-03, -1.870e-01, 5.435e-03, 3.346e-01, -1.184e-01, 3.839e-01, 1.557e-01, 4.076e-02));
	r += mul(s1_5, M4(1.738e-01, -6.171e-02, 1.108e-02, 2.638e-03, 1.930e-02, 4.978e-02, 1.854e-02, 3.085e-02, 9.690e-02, -1.877e-02, -3.009e-02, -1.237e-01, -3.479e-02, 1.235e-02, -1.339e-02, -4.607e-02));
	r += mul(s1_6, M4(-9.949e-02, 2.548e-01, 2.568e-01, 5.877e-01, 1.743e-01, 5.191e-02, -6.581e-03, 2.807e-01, 2.637e-02, 7.042e-03, 9.769e-02, 1.566e-02, -2.318e-02, 2.395e-01, -6.113e-01, -2.026e-01));
	r += mul(s1_7, M4(1.418e-01, 1.944e-01, 3.410e-01, -2.276e-01, 2.339e-01, -2.556e-01, 5.454e-01, 3.966e-02, 5.752e-02, -6.521e-02, 2.532e-01, -4.340e-02, -1.033e-02, -7.361e-01, 1.040e-01, -5.048e-02));
	r += mul(s1_8, M4(5.430e-02, 2.001e-01, 1.890e-01, -2.433e-01, 3.030e-02, 5.238e-02, 4.912e-02, 9.090e-03, 1.782e-02, 8.308e-02, 1.116e-01, -4.601e-02, 2.916e-02, -1.697e-02, 4.898e-02, -5.031e-02));
	r += V4(-2.452e-03, 1.636e-03, 1.501e-03, -9.308e-03);
	return r;
}
void Pass5(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = max(-s0_0, 0.0);
	V4 s1_1 = max(-s0_1, 0.0);
	V4 s1_2 = max(-s0_2, 0.0);
	V4 s1_3 = max(-s0_3, 0.0);
	V4 s1_4 = max(-s0_4, 0.0);
	V4 s1_5 = max(-s0_5, 0.0);
	V4 s1_6 = max(-s0_6, 0.0);
	V4 s1_7 = max(-s0_7, 0.0);
	V4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 6
//!DESC CuNNy-4x4C-BILINEAR-CHROMA-NVL-DS-out
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-1.923e-02, -4.916e-03, 1.882e-02, 1.187e-02, -1.428e-02, -1.543e-03, -2.899e-04, 7.550e-03, -1.825e-02, -9.811e-03, 6.874e-03, 1.175e-02, -1.376e-02, 4.541e-04, -1.055e-03, -5.174e-03));
	r += mul(s0_1, M4(-3.283e-02, 1.286e-02, 1.943e-02, 2.146e-02, -2.391e-02, -1.825e-02, 5.724e-02, 4.309e-02, 4.305e-02, -2.072e-02, 4.527e-02, -1.846e-02, 2.569e-02, 5.180e-03, -6.176e-02, -3.601e-02));
	r += mul(s0_2, M4(-2.541e-03, -1.700e-02, 1.224e-02, 8.671e-03, -2.131e-02, -6.519e-02, 2.592e-02, 2.666e-02, 6.448e-03, 7.303e-02, -2.410e-02, 2.724e-02, -3.167e-03, 1.033e-02, 2.167e-02, 2.735e-02));
	r += mul(s0_3, M4(-6.766e-03, 7.582e-03, -7.529e-02, 4.851e-03, -2.709e-02, -2.099e-02, -3.690e-02, -1.560e-02, 1.831e-03, 3.040e-02, -2.097e-02, 1.360e-02, 2.808e-02, 1.270e-02, -7.058e-03, 1.255e-02));
	r += mul(s0_4, M4(1.705e-01, -1.362e-01, -1.020e-01, -1.209e-01, -4.893e-01, -1.909e-01, -3.765e-01, -3.457e-02, 1.685e-01, 4.369e-02, -9.009e-02, -2.048e-01, 3.311e-01, 2.792e-02, 3.331e-01, 4.221e-02));
	r += mul(s0_5, M4(7.689e-03, 9.645e-02, -5.493e-02, -7.893e-02, 6.014e-02, 9.204e-02, -6.374e-02, -2.017e-01, 6.760e-03, 7.869e-02, 4.367e-02, 1.636e-01, 9.545e-02, 4.564e-01, -6.121e-02, 1.352e-01));
	r += mul(s0_6, M4(-1.944e-02, -3.578e-03, -3.836e-02, -3.230e-02, -5.087e-04, 9.416e-03, -9.791e-03, -1.298e-02, -4.816e-03, 1.488e-03, -2.070e-02, 6.995e-03, -1.691e-02, -1.666e-02, 7.304e-03, -1.213e-02));
	r += mul(s0_7, M4(1.158e-01, -1.775e-01, 5.215e-01, -1.088e-01, 4.040e-02, 7.005e-03, -7.044e-02, -4.195e-02, -1.362e-02, -3.398e-03, -1.289e-02, -1.371e-02, -8.238e-02, -3.954e-02, 4.737e-02, 2.940e-02));
	r += mul(s0_8, M4(-4.163e-02, 8.227e-02, 3.286e-02, 2.569e-01, -6.839e-04, -2.411e-02, -2.678e-02, 7.014e-03, -2.406e-03, -1.357e-02, -7.136e-03, -3.807e-02, -5.220e-02, -3.186e-02, 3.669e-02, 2.100e-01));
	r += mul(s1_0, M4(6.756e-03, -1.823e-03, -1.959e-02, -9.080e-03, 2.852e-03, 8.081e-02, 2.542e-02, 4.744e-03, 2.013e-02, 5.040e-03, 1.978e-02, 4.217e-02, 5.669e-02, -2.081e-02, -4.731e-02, -1.785e-03));
	r += mul(s1_1, M4(1.961e-02, 3.849e-02, -1.421e-02, -3.080e-02, 6.958e-02, -9.740e-02, -3.896e-02, -7.422e-02, -5.218e-02, -1.509e-01, -1.114e-02, 1.701e-02, -1.486e-01, -2.018e-02, 3.101e-02, 6.396e-02));
	r += mul(s1_2, M4(2.641e-03, 1.353e-02, -2.882e-04, -1.059e-02, 1.206e-02, 1.976e-02, -2.749e-02, -6.673e-02, -1.377e-01, 2.501e-02, -1.738e-02, -3.770e-02, -8.562e-03, -6.275e-02, 1.062e-02, -2.270e-02));
	r += mul(s1_3, M4(-1.260e-03, -8.152e-03, 3.791e-02, -4.247e-03, 1.775e-01, 3.689e-02, 1.285e-01, -2.475e-02, 5.490e-03, -4.605e-02, 1.130e-01, -2.675e-02, -4.950e-02, -7.562e-04, 1.327e-02, -1.130e-02));
	r += mul(s1_4, M4(-1.403e-01, 5.302e-02, 2.744e-01, 1.403e-01, -4.119e-02, 1.881e-01, 2.648e-01, 4.619e-01, 3.857e-01, 3.018e-01, -6.243e-01, -1.131e-02, -6.814e-02, -1.594e-01, -1.744e-01, -2.674e-01));
	r += mul(s1_5, M4(-5.318e-02, -4.714e-01, 9.111e-02, 1.888e-01, -2.573e-02, -4.107e-03, 3.034e-02, 6.656e-02, 3.188e-02, 1.208e-01, -9.660e-02, -5.841e-01, -1.327e-02, -1.092e-01, 5.487e-03, -3.249e-02));
	r += mul(s1_6, M4(1.306e-02, 4.599e-04, 1.971e-02, 1.315e-02, 9.617e-04, -1.451e-02, 3.847e-02, 2.102e-02, -9.395e-03, -1.873e-02, 4.447e-02, 6.006e-03, 8.340e-04, 1.217e-02, -2.273e-03, 2.203e-02));
	r += mul(s1_7, M4(2.439e-02, 3.308e-02, -1.411e-01, 2.958e-02, -7.959e-03, -1.573e-03, 1.838e-02, 3.629e-02, -6.089e-02, -5.476e-02, 8.600e-02, 7.740e-02, -8.146e-03, 4.787e-02, -1.077e-01, -3.846e-03));
	r += mul(s1_8, M4(-7.500e-03, 2.123e-02, -1.086e-01, -3.686e-01, -1.077e-02, -8.675e-04, -9.914e-03, 1.213e-02, -3.099e-02, -5.481e-02, 1.754e-02, 7.618e-03, 1.762e-02, -1.337e-03, -8.590e-03, -8.838e-02));
	r += V4(-3.019e-04, 5.016e-06, 6.463e-04, 7.906e-04);
	return tanh(r);
}
void Pass6(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = max(-s0_0, 0.0);
	V4 s1_1 = max(-s0_1, 0.0);
	V4 s1_2 = max(-s0_2, 0.0);
	V4 s1_3 = max(-s0_3, 0.0);
	V4 s1_4 = max(-s0_4, 0.0);
	V4 s1_5 = max(-s0_5, 0.0);
	V4 s1_6 = max(-s0_6, 0.0);
	V4 s1_7 = max(-s0_7, 0.0);
	V4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 7
//!DESC CuNNy-4x4C-BILINEAR-CHROMA-NVL-DS-shuffle
//!STYLE PS
//!IN t1, INPUT
float4 Pass7(float2 pos) {
	float2 pt = float2(GetInputPt());
	const static float3x3 rgb2yuv = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081};
	const static float3x3 yuv2rgb = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float4 r = 0.0;
	float2 size = float2(GetInputSize());
	float2 f = frac(pos * size);
	float3 yuv = mul(rgb2yuv, INPUT.SampleLevel(SL, pos, 0).rgb);
	int2 i = int2(f * 2.0);
	r.r = t1.SampleLevel(SP, (float2(0.5, 0.5) - f) * pt + pos, 0)[2*i.y + i.x];
	r.r += yuv.r;
	r.a = 1.0;
	r.r = clamp(r, 0.0, 1.0);
	float3 px = mul(yuv2rgb, float3(r.r, yuv.yz));
	return float4(px, 1.0);
}
