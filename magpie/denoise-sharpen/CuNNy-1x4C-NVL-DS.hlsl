// CuNNy 1x4C BILINEAR CHROMA NVL DS
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

//!MAGPIE EFFECT
//!VERSION 3
//!OUTPUT_WIDTH INPUT_WIDTH * 2
//!OUTPUT_HEIGHT INPUT_HEIGHT * 2

//!TEXTURE
Texture2D INPUT;


//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t1;

//!PASS 1
//!DESC CuNNy-1x4C-BILINEAR-CHROMA-NVL-DS-in
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) (dot(float3(1.2406539916992188, 2.3018109798431396, 0.5341709852218628), O(INPUT, float2(x, y)).rgb) + -3.1044108867645264)
float4 f0(float2 pt, float2 pos, min16float s0_0, min16float s0_1, min16float s0_2, min16float s0_3, min16float s0_4, min16float s0_5, min16float s0_6, min16float s0_7, min16float s0_8) {
	V4 r = 0.0;
	r += V4(5.198e-02, 2.921e-02, -3.824e-03, 2.705e-03) * s0_0;
	r += V4(1.069e-01, -2.744e-01, 1.609e-02, -7.090e-03) * s0_1;
	r += V4(-2.732e-02, 4.639e-02, -6.277e-03, 4.037e-03) * s0_2;
	r += V4(9.399e-02, 3.469e-01, -2.149e-02, -2.948e-03) * s0_3;
	r += V4(-5.004e-01, -3.426e-02, 3.427e-01, 2.979e-03) * s0_4;
	r += V4(9.952e-02, -4.645e-02, -1.834e-02, 4.517e-04) * s0_5;
	r += V4(1.416e-03, -1.186e-01, 2.794e-02, -6.829e-05) * s0_6;
	r += V4(1.337e-01, 5.063e-02, -3.564e-01, 3.975e-01) * s0_7;
	r += V4(3.861e-02, 8.219e-04, 1.981e-02, -3.975e-01) * s0_8;
	r += V4(1.897e-03, 6.813e-03, 2.998e-03, -1.887e-03);
	return r;
}
void Pass1(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float s0_0 = l0(-1.0, -1.0);
	min16float s0_1 = l0(0.0, -1.0);
	min16float s0_2 = l0(1.0, -1.0);
	min16float s0_3 = l0(-1.0, 0.0);
	min16float s0_4 = l0(0.0, 0.0);
	min16float s0_5 = l0(1.0, 0.0);
	min16float s0_6 = l0(-1.0, 1.0);
	min16float s0_7 = l0(0.0, 1.0);
	min16float s0_8 = l0(1.0, 1.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8);
}
//!PASS 2
//!DESC CuNNy-1x4C-BILINEAR-CHROMA-NVL-DS-conv1
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(5.239e-03, -3.162e-02, -2.569e-02, 3.367e-02, 5.794e-03, 2.924e-02, 3.289e-03, -3.071e-02, 9.058e-02, 6.343e-03, 9.403e-03, 3.500e-02, 1.839e-02, -3.241e-02, -7.688e-02, 4.031e-02));
	r += mul(s0_1, M4(9.388e-02, 7.092e-02, -1.364e-02, -1.816e-01, -4.018e-02, 3.971e-02, -2.763e-02, -6.224e-02, 3.701e-01, 5.300e-02, -1.744e-01, -3.989e-02, -1.360e-01, 4.930e-02, 5.297e-02, 4.570e-02));
	r += mul(s0_2, M4(-3.818e-01, -1.739e-02, -3.889e-02, 3.103e-02, -1.663e-01, 6.861e-02, 5.816e-02, 2.127e-02, 5.267e-02, 6.981e-02, 2.268e-01, 1.156e-01, -1.186e-01, 1.092e-01, 1.672e-01, 8.209e-03));
	r += mul(s0_3, M4(-4.648e-02, -1.327e-01, -1.502e-02, 1.833e-01, 1.886e-02, 3.333e-02, 2.254e-02, -3.185e-02, 1.791e-01, -1.450e-01, -3.927e-02, 2.271e-01, 4.943e-02, -8.654e-02, -4.201e-02, -7.262e-02));
	r += mul(s0_4, M4(5.424e-03, -5.528e-02, 1.003e-01, -1.265e-01, -2.055e-01, -4.384e-02, 1.184e-02, 6.866e-02, -1.933e-02, -7.924e-01, -4.678e-01, -3.057e-01, -7.087e-02, -1.447e-01, 3.977e-02, -7.927e-02));
	r += mul(s0_5, M4(8.610e-03, -5.387e-01, -3.195e-01, -3.211e-02, 4.584e-01, -1.122e-01, 1.202e-01, 2.487e-02, -3.178e-01, 4.756e-01, 2.512e-01, 2.709e-02, 2.140e-02, 1.707e-01, 1.607e-01, -5.039e-02));
	r += mul(s0_6, M4(-1.049e-02, -1.281e-02, -4.491e-02, -3.682e-02, -1.236e-02, 2.940e-02, 1.315e-02, -3.216e-02, -6.039e-02, 1.086e-01, 8.416e-02, -7.007e-02, -2.240e-02, -3.768e-02, -4.543e-02, 3.407e-02));
	r += mul(s0_7, M4(-1.954e-02, 2.573e-01, 2.557e-01, 1.899e-01, 1.626e-01, -1.714e-01, -1.978e-01, 1.063e-01, 6.195e-03, -5.199e-02, -1.218e-01, -3.076e-01, 6.519e-02, -4.383e-02, -1.703e-02, -7.792e-02));
	r += mul(s0_8, M4(2.996e-01, 1.708e-01, 2.546e-01, -1.251e-01, 2.354e-01, -3.237e-02, 2.155e-01, 3.705e-02, 8.441e-02, 1.585e-01, 2.469e-01, -5.133e-02, 4.236e-02, 5.675e-02, 8.239e-02, -3.745e-03));
	r += mul(s1_0, M4(-7.391e-03, 4.478e-03, -4.786e-03, -9.234e-03, 8.127e-03, 3.705e-03, 2.406e-02, 1.901e-02, 8.265e-03, 4.872e-02, 4.491e-02, -3.081e-03, 7.804e-02, -8.666e-02, -1.234e-01, 1.223e-01));
	r += mul(s1_1, M4(-9.812e-02, -3.523e-02, 6.583e-02, 1.323e-01, 1.033e-01, -7.298e-02, -4.865e-03, 6.442e-02, 4.222e-01, -1.577e-01, 3.018e-02, 1.798e-01, 9.234e-02, -3.074e-02, 1.912e-01, 1.304e-01));
	r += mul(s1_2, M4(3.337e-01, -1.908e-01, -1.460e-01, 1.113e-03, 6.321e-02, 6.372e-02, 4.029e-02, -1.343e-02, -3.788e-01, 3.743e-01, 2.129e-01, -4.381e-02, 3.432e-02, 1.938e-01, 1.355e-01, -1.696e-02));
	r += mul(s1_3, M4(-8.224e-03, 6.612e-02, -8.682e-02, -1.408e-01, -8.725e-03, -7.965e-03, 1.935e-02, 5.772e-02, -2.636e-01, 7.692e-02, 4.242e-02, -2.119e-01, -8.333e-02, -1.880e-01, -1.556e-01, -1.570e-01));
	r += mul(s1_4, M4(-4.482e-01, 2.783e-01, 1.567e-01, -1.353e-01, 2.092e-01, -4.674e-03, -6.860e-02, -2.340e-03, -2.098e-01, -7.046e-02, -5.332e-01, 7.571e-01, -7.591e-02, -9.872e-02, -3.301e-01, -1.868e-01));
	r += mul(s1_5, M4(-1.152e-01, -4.411e-01, -6.184e-01, 4.499e-02, -1.614e-01, 5.372e-01, 2.348e-01, -6.732e-02, 2.706e-01, 2.900e-01, 7.404e-01, -3.047e-02, -2.702e-02, 5.017e-02, 5.943e-02, 4.469e-02));
	r += mul(s1_6, M4(-2.876e-02, -1.172e-01, -3.144e-02, 3.937e-02, 3.263e-02, 1.991e-03, -1.833e-03, 2.044e-02, 4.079e-02, -7.054e-02, -6.882e-02, 8.355e-03, -9.037e-03, -1.679e-02, -3.374e-02, -7.980e-03));
	r += mul(s1_7, M4(3.966e-02, -7.399e-02, -9.515e-03, 4.516e-01, -1.342e-01, 2.728e-01, 2.822e-01, -1.125e-01, -8.046e-02, -2.576e-01, -1.333e-01, -2.607e-01, -3.999e-02, 1.824e-02, 7.643e-03, 8.418e-02));
	r += mul(s1_8, M4(-2.106e-01, -2.053e-01, -3.421e-01, 1.382e-01, -1.831e-01, 2.993e-01, -9.582e-02, -7.273e-03, -1.606e-01, -6.034e-02, -1.068e-01, -4.710e-02, -2.762e-02, -3.559e-03, -1.581e-02, 2.506e-02));
	r += V4(-4.806e-03, 2.665e-03, -9.444e-04, 2.571e-03);
	return r;
}
void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = max(-s0_0, 0.0);
	V4 s1_1 = max(-s0_1, 0.0);
	V4 s1_2 = max(-s0_2, 0.0);
	V4 s1_3 = max(-s0_3, 0.0);
	V4 s1_4 = max(-s0_4, 0.0);
	V4 s1_5 = max(-s0_5, 0.0);
	V4 s1_6 = max(-s0_6, 0.0);
	V4 s1_7 = max(-s0_7, 0.0);
	V4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 3
//!DESC CuNNy-1x4C-BILINEAR-CHROMA-NVL-DS-out
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(6.739e-03, -2.766e-02, -2.762e-02, -9.242e-03, -1.886e-01, 3.217e-02, 2.362e-02, 4.920e-02, 1.376e-01, -3.319e-02, -9.969e-02, -8.338e-02, 2.447e-02, 2.249e-02, -3.160e-02, -1.423e-03));
	r += mul(s0_1, M4(-2.249e-02, 2.286e-02, 5.309e-03, -1.930e-02, -5.595e-02, -5.409e-02, -3.528e-02, 8.715e-02, 8.619e-02, 6.519e-02, 5.142e-02, -1.091e-01, 2.717e-01, 1.259e-01, 7.807e-02, -6.861e-02));
	r += mul(s0_2, M4(-6.751e-03, -3.984e-02, 6.259e-03, 8.344e-04, 9.259e-04, -2.265e-02, 3.900e-04, 9.062e-03, 6.943e-03, 7.032e-03, 6.580e-03, -1.813e-02, -1.052e-01, 9.009e-02, -4.608e-02, 1.110e-01));
	r += mul(s0_3, M4(-4.648e-01, 6.044e-02, -8.667e-02, 4.691e-02, 1.028e-01, 2.705e-01, -2.466e-01, 1.909e-01, -2.527e-03, -1.902e-01, 3.989e-01, -9.839e-02, 4.986e-03, -1.207e-02, 4.801e-02, 8.753e-03));
	r += mul(s0_4, M4(1.041e-01, -4.661e-01, 9.009e-02, -6.012e-04, 7.056e-02, -2.378e-01, 1.973e-02, -4.448e-01, -1.049e-01, 2.514e-01, -3.894e-02, 5.254e-01, -1.704e-01, -1.490e-01, 5.559e-02, 1.502e-01));
	r += mul(s0_5, M4(-1.064e-03, 3.210e-02, -5.344e-03, -6.239e-02, 9.365e-03, 2.051e-02, 2.139e-03, -3.333e-02, -1.585e-02, -8.672e-03, -3.631e-03, 4.471e-02, -3.439e-03, -3.943e-02, -1.930e-02, -7.983e-02));
	r += mul(s0_6, M4(6.722e-02, 2.615e-02, 3.947e-02, 2.204e-02, -1.314e-02, -2.827e-02, 1.064e-01, 4.087e-02, -2.537e-02, -2.362e-02, -1.997e-01, -7.984e-02, 4.378e-03, 2.938e-03, 5.786e-03, -2.452e-03));
	r += mul(s0_7, M4(4.250e-02, 6.633e-02, 6.425e-02, 8.130e-02, -2.560e-02, -2.075e-02, 2.955e-02, 5.433e-02, 2.536e-02, -8.697e-03, -3.368e-02, -1.463e-01, -6.760e-03, 5.357e-04, -5.778e-02, -3.548e-02));
	r += mul(s0_8, M4(-2.626e-02, 3.178e-02, -9.754e-03, 8.742e-03, -1.542e-02, -1.041e-02, -5.782e-03, 2.216e-02, 1.621e-02, 8.038e-03, 3.596e-03, -2.409e-02, -3.904e-03, -2.071e-02, -2.424e-02, -4.998e-02));
	r += mul(s1_0, M4(5.949e-02, -1.972e-02, 1.446e-02, -8.968e-03, -1.099e-01, 2.218e-02, 1.360e-02, -8.523e-04, 1.387e-01, -2.378e-02, 7.300e-02, 1.699e-02, -6.010e-03, -2.901e-02, 1.959e-02, 4.345e-02));
	r += mul(s1_1, M4(-1.277e-02, 2.243e-02, -2.226e-02, -6.543e-03, 1.013e-01, -2.030e-01, 1.058e-01, -3.690e-02, -2.025e-01, 2.285e-01, -1.166e-01, 1.188e-01, 3.508e-01, 4.271e-01, -5.349e-01, -4.668e-01));
	r += mul(s1_2, M4(5.585e-03, 5.862e-03, 1.069e-02, -3.500e-03, -2.734e-03, 5.271e-03, 7.450e-03, 1.555e-02, -1.157e-04, -3.577e-02, 7.247e-03, 1.182e-02, 1.037e-01, -1.342e-02, 9.728e-02, -6.281e-02));
	r += mul(s1_3, M4(-1.287e-01, 4.018e-02, 1.000e-01, 5.203e-02, -1.274e-01, -5.634e-02, -2.549e-01, -7.670e-03, 1.399e-01, 2.067e-02, 8.064e-02, -7.741e-02, 2.485e-02, -3.538e-04, -4.348e-03, -8.254e-03));
	r += mul(s1_4, M4(-6.642e-03, -1.072e-01, -6.074e-04, 4.919e-02, 3.923e-02, 1.555e-01, 1.284e-01, 9.740e-03, -7.831e-03, -1.238e-01, -1.356e-01, -7.491e-02, 2.021e-02, 1.928e-02, 2.865e-01, 2.427e-01));
	r += mul(s1_5, M4(-1.006e-02, -6.811e-05, -1.075e-03, 4.046e-02, -2.182e-02, -2.525e-03, 3.231e-03, 3.483e-02, 4.449e-02, 1.957e-02, 2.529e-02, -5.778e-02, 1.251e-02, 6.324e-02, 5.300e-02, 1.315e-01));
	r += mul(s1_6, M4(1.544e-02, -3.791e-02, -9.937e-02, -4.235e-02, -1.835e-02, -4.715e-03, -5.082e-02, -2.008e-02, 2.807e-02, 3.259e-02, 1.353e-01, 6.616e-02, -1.285e-02, -1.265e-03, -1.845e-02, -1.534e-02));
	r += mul(s1_7, M4(-2.717e-02, -9.483e-03, -4.174e-02, -1.179e-01, -1.136e-02, -1.909e-02, -2.992e-02, -4.988e-02, 4.347e-03, 2.130e-02, 3.674e-02, 9.165e-02, 1.035e-02, 3.257e-03, 6.668e-02, 2.712e-02));
	r += mul(s1_8, M4(1.413e-02, 5.416e-03, -8.759e-04, -2.095e-02, 1.639e-02, -2.142e-03, -1.165e-03, -1.407e-02, -1.885e-02, -1.550e-02, -3.685e-04, 2.433e-02, 1.158e-04, 1.212e-02, 7.180e-03, 5.848e-02));
	r += V4(4.220e-05, 2.786e-05, 2.841e-05, -1.698e-05);
	return tanh(r);
}
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = max(-s0_0, 0.0);
	V4 s1_1 = max(-s0_1, 0.0);
	V4 s1_2 = max(-s0_2, 0.0);
	V4 s1_3 = max(-s0_3, 0.0);
	V4 s1_4 = max(-s0_4, 0.0);
	V4 s1_5 = max(-s0_5, 0.0);
	V4 s1_6 = max(-s0_6, 0.0);
	V4 s1_7 = max(-s0_7, 0.0);
	V4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 4
//!DESC CuNNy-1x4C-BILINEAR-CHROMA-NVL-DS-shuffle
//!STYLE PS
//!IN t0, INPUT
float4 Pass4(float2 pos) {
	float2 pt = float2(GetInputPt());
	const static float3x3 rgb2yuv = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081};
	const static float3x3 yuv2rgb = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float4 r = 0.0;
	float2 size = float2(GetInputSize());
	float2 f = frac(pos * size);
	float3 yuv = mul(rgb2yuv, INPUT.SampleLevel(SL, pos, 0).rgb);
	int2 i = int2(f * 2.0);
	r.r = t0.SampleLevel(SP, (float2(0.5, 0.5) - f) * pt + pos, 0)[2*i.y + i.x];
	r.r += yuv.r;
	r.a = 1.0;
	r.r = clamp(r, 0.0, 1.0);
	float3 px = mul(yuv2rgb, float3(r.r, yuv.yz));
	return float4(px, 1.0);
}
