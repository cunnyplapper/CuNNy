// CuNNy 1x4C BILINEAR CHROMA NVL DS
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

//!MAGPIE EFFECT
//!VERSION 3
//!OUTPUT_WIDTH INPUT_WIDTH * 2
//!OUTPUT_HEIGHT INPUT_HEIGHT * 2

//!TEXTURE
Texture2D INPUT;


//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t1;

//!PASS 1
//!DESC CuNNy-1x4C-BILINEAR-CHROMA-NVL-DS-in
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) (dot(float3(-1.4382656812667847, -2.7549681663513184, -0.605021595954895), O(INPUT, float2(x, y)).rgb) + 0.18440130352973938)
float4 f0(float2 pt, float2 pos, min16float s0_0, min16float s0_1, min16float s0_2, min16float s0_3, min16float s0_4, min16float s0_5, min16float s0_6, min16float s0_7, min16float s0_8) {
	V4 r = 0.0;
	r += V4(7.981e-02, 1.577e-02, -5.308e-02, -3.745e-04) * s0_0;
	r += V4(-4.482e-01, -3.474e-01, 2.327e-02, 2.089e-02) * s0_1;
	r += V4(3.721e-01, 1.090e-02, 3.137e-02, -1.960e-02) * s0_2;
	r += V4(6.191e-02, 2.983e-01, 8.755e-03, 3.100e-02) * s0_3;
	r += V4(3.287e-01, 3.650e-02, 4.768e-01, -4.552e-01) * s0_4;
	r += V4(-3.896e-01, -1.151e-02, -4.873e-01, 5.579e-02) * s0_5;
	r += V4(-1.392e-01, -1.154e-02, 4.260e-02, -2.887e-02) * s0_6;
	r += V4(1.118e-01, 7.228e-03, -1.061e-01, 4.329e-01) * s0_7;
	r += V4(2.699e-02, 1.560e-03, 6.372e-02, -3.704e-02) * s0_8;
	r += V4(-8.696e-04, -3.338e-04, -2.574e-03, 5.129e-03);
	return r;
}
void Pass1(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float s0_0 = l0(-1.0, -1.0);
	min16float s0_1 = l0(0.0, -1.0);
	min16float s0_2 = l0(1.0, -1.0);
	min16float s0_3 = l0(-1.0, 0.0);
	min16float s0_4 = l0(0.0, 0.0);
	min16float s0_5 = l0(1.0, 0.0);
	min16float s0_6 = l0(-1.0, 1.0);
	min16float s0_7 = l0(0.0, 1.0);
	min16float s0_8 = l0(1.0, 1.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8);
}
//!PASS 2
//!DESC CuNNy-1x4C-BILINEAR-CHROMA-NVL-DS-conv1
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(2.237e-02, -1.234e-02, -3.460e-03, -1.294e-02, 1.618e-02, -6.402e-02, -4.785e-02, 2.259e-02, -2.814e-02, 1.601e-02, -1.743e-01, -4.292e-03, -1.137e-02, 9.451e-02, -6.634e-02, -1.390e-02));
	r += mul(s0_1, M4(1.372e-01, -1.790e-01, -9.366e-03, 6.283e-02, -1.082e-01, 2.280e-01, -3.184e-02, -9.601e-02, -9.570e-03, 4.974e-01, 7.611e-02, 5.259e-02, 3.601e-01, 3.847e-01, 1.243e-01, 1.659e-01));
	r += mul(s0_2, M4(-7.335e-04, 8.912e-03, 3.463e-05, 9.153e-03, 7.860e-02, -2.074e-01, 3.568e-02, 6.865e-02, -4.895e-03, 5.317e-03, 3.241e-02, -5.757e-02, 6.653e-02, 1.617e-01, -6.615e-02, -1.106e-01));
	r += mul(s0_3, M4(-4.409e-02, 1.313e-01, -1.823e-02, -1.318e-01, 2.032e-02, -2.578e-02, -3.008e-03, 3.406e-02, 6.687e-02, -5.805e-03, -4.133e-01, 3.467e-02, 2.017e-01, -6.815e-02, -6.616e-02, 1.333e-02));
	r += mul(s0_4, M4(1.999e-02, -3.213e-01, -6.802e-02, 2.706e-01, 4.482e-01, -1.486e-01, -4.258e-02, -2.014e-02, 4.072e-01, 6.655e-03, 4.069e-01, 2.397e-01, -3.644e-01, -3.940e-02, 9.750e-02, 1.803e-01));
	r += mul(s0_5, M4(1.476e-02, 5.432e-02, 5.155e-02, -1.870e-01, -6.798e-02, -5.293e-01, 4.119e-02, -6.009e-03, -4.288e-02, 5.077e-02, -2.948e-02, -8.317e-02, 1.214e-01, 9.644e-02, -8.920e-03, -1.899e-01));
	r += mul(s0_6, M4(2.318e-02, -6.357e-02, -2.837e-02, 4.040e-02, -3.482e-02, 8.316e-02, 5.139e-02, -5.572e-02, -1.588e-01, 3.563e-02, 1.506e-03, -5.931e-04, -8.188e-03, 1.380e-02, -3.624e-02, -6.243e-03));
	r += mul(s0_7, M4(-9.106e-02, 4.368e-02, -9.400e-02, -2.888e-02, -3.366e-01, -1.164e-01, 3.952e-02, 1.293e-01, -4.781e-02, 3.430e-02, 1.741e-01, -4.924e-02, 2.628e-02, -9.739e-03, 4.996e-02, 8.040e-03));
	r += mul(s0_8, M4(-9.597e-03, -5.579e-03, 3.266e-02, -2.105e-02, -2.800e-01, 5.505e-02, -1.421e-01, -1.203e-01, 3.748e-02, -1.343e-02, 6.758e-03, -1.460e-02, -3.159e-02, -5.474e-03, -7.639e-03, 2.424e-04));
	r += mul(s1_0, M4(1.629e-02, -4.190e-02, -6.242e-02, -4.194e-03, -2.464e-02, 4.626e-02, 3.174e-02, -2.628e-02, -6.017e-03, -4.948e-02, -1.460e-01, 4.017e-02, 9.108e-02, 6.014e-03, -3.149e-01, -1.362e-02));
	r += mul(s1_1, M4(-4.253e-02, 2.105e-01, -3.914e-02, -7.201e-02, 1.199e-01, -2.607e-01, -2.483e-02, 1.111e-01, -1.054e-02, 3.316e-02, 7.119e-02, 7.985e-02, -3.094e-02, 2.816e-01, -3.402e-01, -8.732e-03));
	r += mul(s1_2, M4(3.161e-04, 9.603e-04, 1.406e-02, 2.571e-03, -9.538e-02, 2.116e-01, -9.958e-03, -8.739e-02, -1.935e-02, -1.484e-03, -1.935e-02, 4.975e-02, -2.938e-02, 2.340e-01, 8.380e-02, -2.594e-02));
	r += mul(s1_3, M4(8.169e-02, -2.768e-01, -1.081e-02, 1.767e-01, 2.626e-02, 4.085e-02, -3.275e-02, -3.398e-02, 3.253e-02, -3.637e-02, 7.195e-02, 1.737e-01, -2.412e-01, 1.106e-01, 1.693e-01, 6.979e-03));
	r += mul(s1_4, M4(1.665e-01, 1.388e-01, 2.683e-02, -1.450e-01, -2.454e-01, -2.280e-01, 1.184e-01, 2.095e-01, 1.003e-01, 1.370e-01, -7.376e-02, -2.623e-01, 2.711e-01, -3.749e-01, 3.599e-01, 1.888e-01));
	r += mul(s1_5, M4(-1.660e-02, 1.185e-02, 4.177e-03, 2.139e-02, 2.466e-01, 2.092e-01, -1.071e-01, -1.768e-01, 2.731e-02, 1.499e-03, 2.018e-02, -4.702e-02, 3.577e-04, -1.525e-01, 2.036e-01, -6.287e-03));
	r += mul(s1_6, M4(-3.527e-02, -1.425e-02, 4.024e-04, 8.270e-03, 4.436e-02, -9.945e-02, -3.572e-02, 4.422e-02, -1.626e-01, 1.102e-02, 9.737e-02, 6.369e-02, -5.129e-02, -5.691e-03, 6.193e-02, -5.907e-03));
	r += mul(s1_7, M4(-1.871e-01, -2.212e-02, 6.273e-02, 3.032e-02, 3.548e-01, -7.462e-02, -1.302e-01, -8.710e-02, -8.472e-02, -1.169e-01, 4.303e-02, 1.392e-01, -8.353e-02, 4.032e-02, -9.767e-02, -3.629e-02));
	r += mul(s1_8, M4(2.631e-02, 1.461e-02, -3.831e-03, -5.331e-02, -1.726e-01, 1.528e-01, 3.304e-02, -1.381e-01, -8.119e-03, 5.265e-03, -3.339e-04, -1.107e-02, -4.415e-02, -1.765e-02, 5.393e-03, 2.593e-02));
	r += V4(1.722e-05, -3.038e-03, 1.086e-06, 1.013e-03);
	return r;
}
void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = max(-s0_0, 0.0);
	V4 s1_1 = max(-s0_1, 0.0);
	V4 s1_2 = max(-s0_2, 0.0);
	V4 s1_3 = max(-s0_3, 0.0);
	V4 s1_4 = max(-s0_4, 0.0);
	V4 s1_5 = max(-s0_5, 0.0);
	V4 s1_6 = max(-s0_6, 0.0);
	V4 s1_7 = max(-s0_7, 0.0);
	V4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 3
//!DESC CuNNy-1x4C-BILINEAR-CHROMA-NVL-DS-out
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-4.314e-02, 3.409e-03, -1.589e-02, -9.563e-03, 2.424e-02, -1.499e-02, 1.248e-02, 2.557e-02, -2.989e-02, -5.147e-04, 1.287e-02, 2.895e-03, 2.576e-02, -1.959e-02, 1.040e-02, 1.993e-02));
	r += mul(s0_1, M4(3.430e-02, -2.704e-02, 1.711e-02, 1.726e-02, -9.787e-03, -1.468e-02, 1.242e-02, 3.076e-03, -8.150e-02, -6.567e-02, 9.135e-02, 1.047e-01, -4.933e-03, 3.192e-02, -5.208e-02, -3.711e-02));
	r += mul(s0_2, M4(6.427e-03, 1.795e-02, -9.505e-03, -2.406e-02, -1.088e-04, -5.409e-03, 3.117e-05, -2.929e-03, -1.793e-02, -2.796e-02, 3.010e-02, 2.487e-02, 9.767e-03, 1.698e-02, 8.052e-03, -2.399e-02));
	r += mul(s0_3, M4(-5.988e-02, -3.026e-02, -3.395e-02, 3.495e-03, -8.228e-02, -3.333e-02, -5.526e-02, -5.609e-02, -7.893e-02, 6.687e-02, -4.482e-02, 7.539e-02, -1.704e-01, 4.130e-02, 4.065e-02, -6.765e-02));
	r += mul(s0_4, M4(-1.951e-01, -2.305e-01, 1.169e-01, 1.553e-02, 1.228e-01, 1.548e-01, -3.259e-02, -1.323e-01, 1.003e-01, -1.990e-01, -2.271e-01, -4.106e-01, -3.664e-02, -6.270e-02, -2.272e-01, 1.529e-01));
	r += mul(s0_5, M4(1.276e-02, 3.339e-04, -5.991e-02, -1.143e-02, 9.498e-03, -2.972e-02, 3.386e-03, -3.121e-03, 2.141e-02, -1.142e-02, -6.573e-03, -7.153e-02, 1.482e-02, -7.945e-03, 1.322e-02, -3.171e-02));
	r += mul(s0_6, M4(2.818e-02, -1.469e-04, -8.843e-03, -2.224e-02, 4.994e-02, -7.626e-02, 1.108e-02, -4.721e-02, -8.853e-03, 3.044e-02, -4.718e-02, 7.907e-03, 6.681e-02, -4.885e-02, -1.184e-01, -1.004e-02));
	r += mul(s0_7, M4(3.744e-02, 6.021e-02, -1.918e-02, -1.416e-02, -4.034e-02, 1.350e-01, 8.386e-02, 3.057e-01, -2.351e-02, 1.466e-02, 3.863e-02, 1.307e-02, 2.009e-02, 8.134e-02, 1.948e-01, -3.970e-02));
	r += mul(s0_8, M4(8.714e-03, 1.536e-02, -2.481e-02, -1.819e-02, 2.384e-03, 4.861e-03, 9.553e-03, 2.315e-03, 1.242e-04, 1.665e-02, 9.081e-03, 3.070e-02, -6.886e-03, -1.178e-02, 3.092e-02, 4.944e-02));
	r += mul(s1_0, M4(4.316e-02, 3.225e-03, -1.752e-02, 2.409e-02, -2.758e-02, 5.692e-03, -1.210e-02, -7.717e-03, 9.033e-03, -3.888e-03, 1.551e-03, -6.007e-04, 9.432e-03, -2.976e-02, 3.818e-02, -4.839e-02));
	r += mul(s1_1, M4(1.982e-01, 2.900e-01, -2.076e-01, -1.997e-01, 2.812e-02, -4.171e-02, -5.505e-03, 1.245e-02, -3.108e-02, 2.701e-02, -1.457e-02, -3.284e-02, -1.854e-02, -1.811e-02, 2.103e-02, 8.375e-02));
	r += mul(s1_2, M4(-1.290e-02, -4.184e-02, 3.601e-02, 4.956e-03, 9.201e-03, 3.026e-04, -1.563e-02, -7.056e-03, 5.262e-03, 1.040e-02, -1.562e-02, 6.339e-03, -9.712e-04, 1.308e-02, 4.279e-03, -4.651e-03));
	r += mul(s1_3, M4(3.754e-02, 4.650e-02, 3.101e-02, 1.677e-02, 1.835e-01, -2.511e-03, -6.989e-03, 5.430e-02, -7.423e-03, 6.877e-03, -2.050e-03, -1.861e-02, 3.372e-01, -2.406e-01, 3.818e-01, -1.901e-01));
	r += mul(s1_4, M4(-6.378e-02, -5.505e-02, 1.734e-01, 1.981e-01, -3.208e-01, 2.457e-01, -7.499e-02, -2.056e-02, 3.857e-01, 5.230e-02, 1.199e-01, 1.274e-01, -1.258e-01, 1.425e-01, -2.949e-02, 2.163e-01));
	r += mul(s1_5, M4(8.364e-03, -9.250e-03, 4.091e-02, 4.081e-02, 4.969e-02, -8.479e-02, 3.836e-02, 2.451e-02, -1.106e-01, 2.006e-01, -6.592e-02, 6.016e-02, 7.158e-05, 2.089e-02, -4.259e-03, 7.073e-03));
	r += mul(s1_6, M4(-4.991e-03, 1.021e-02, 6.242e-03, -6.389e-03, -6.323e-02, 2.966e-02, 8.569e-02, 1.310e-03, -1.312e-02, -7.110e-03, 2.342e-03, 1.825e-02, -4.327e-02, 1.135e-01, -4.198e-02, 5.035e-02));
	r += mul(s1_7, M4(6.272e-03, -2.546e-02, -2.411e-02, -5.954e-04, -7.051e-03, -1.597e-01, -2.089e-01, -3.388e-02, -4.996e-02, -1.084e-01, 2.036e-01, -6.697e-02, 1.652e-02, -6.045e-02, -1.042e-01, -1.213e-01));
	r += mul(s1_8, M4(2.614e-03, 1.619e-02, 1.383e-02, -8.696e-04, 4.639e-02, -1.819e-02, 4.537e-02, -9.447e-02, -4.359e-02, -4.133e-02, -6.716e-02, 7.690e-02, -4.147e-03, -1.012e-02, -7.484e-03, -8.788e-03));
	r += V4(3.930e-04, 2.453e-04, 2.274e-04, 8.229e-05);
	return tanh(r);
}
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = max(-s0_0, 0.0);
	V4 s1_1 = max(-s0_1, 0.0);
	V4 s1_2 = max(-s0_2, 0.0);
	V4 s1_3 = max(-s0_3, 0.0);
	V4 s1_4 = max(-s0_4, 0.0);
	V4 s1_5 = max(-s0_5, 0.0);
	V4 s1_6 = max(-s0_6, 0.0);
	V4 s1_7 = max(-s0_7, 0.0);
	V4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 4
//!DESC CuNNy-1x4C-BILINEAR-CHROMA-NVL-DS-shuffle
//!STYLE PS
//!IN t0, INPUT
float4 Pass4(float2 pos) {
	float2 pt = float2(GetInputPt());
	const static float3x3 rgb2yuv = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081};
	const static float3x3 yuv2rgb = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float4 r = 0.0;
	float2 size = float2(GetInputSize());
	float2 f = frac(pos * size);
	float3 yuv = mul(rgb2yuv, INPUT.SampleLevel(SL, pos, 0).rgb);
	int2 i = int2(f * 2.0);
	r.r = t0.SampleLevel(SP, (float2(0.5, 0.5) - f) * pt + pos, 0)[2*i.y + i.x];
	r.r += yuv.r;
	r.a = 1.0;
	r.r = clamp(r, 0.0, 1.0);
	float3 px = mul(yuv2rgb, float3(r.r, yuv.yz));
	return float4(px, 1.0);
}
