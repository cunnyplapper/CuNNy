// CuNNy 3x4C BILINEAR CHROMA NVL DS
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

//!MAGPIE EFFECT
//!VERSION 3
//!OUTPUT_WIDTH INPUT_WIDTH * 2
//!OUTPUT_HEIGHT INPUT_HEIGHT * 2

//!TEXTURE
Texture2D INPUT;


//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t1;

//!PASS 1
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-DS-in
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) (dot(float3(0.3899509310722351, 0.75432288646698, 0.1664256900548935), O(INPUT, float2(x, y)).rgb) + -1.2273808717727661)
float4 f0(float2 pt, float2 pos, min16float s0_0, min16float s0_1, min16float s0_2, min16float s0_3, min16float s0_4, min16float s0_5, min16float s0_6, min16float s0_7, min16float s0_8) {
	V4 r = 0.0;
	r += V4(-1.057e-01, 5.722e-02, 7.963e-03, -2.691e-02) * s0_0;
	r += V4(1.440e-01, -6.543e-01, 2.980e-01, -2.079e-02) * s0_1;
	r += V4(-4.014e-02, 5.470e-02, -3.138e-01, -2.879e-02) * s0_2;
	r += V4(7.760e-01, -1.038e-01, -4.409e-01, 6.309e-03) * s0_3;
	r += V4(-7.910e-01, 7.324e-01, 5.605e-01, 5.932e-01) * s0_4;
	r += V4(1.193e-02, -6.164e-02, 2.627e-01, -5.691e-03) * s0_5;
	r += V4(-8.239e-02, 2.926e-02, 7.761e-02, -2.219e-02) * s0_6;
	r += V4(5.866e-02, -5.920e-02, -4.741e-01, -2.130e-02) * s0_7;
	r += V4(2.635e-02, 7.674e-03, 2.436e-02, -2.614e-02) * s0_8;
	r += V4(-2.260e-03, -2.909e-03, -2.071e-03, -3.577e-02);
	return r;
}
void Pass1(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float s0_0 = l0(-1.0, -1.0);
	min16float s0_1 = l0(0.0, -1.0);
	min16float s0_2 = l0(1.0, -1.0);
	min16float s0_3 = l0(-1.0, 0.0);
	min16float s0_4 = l0(0.0, 0.0);
	min16float s0_5 = l0(1.0, 0.0);
	min16float s0_6 = l0(-1.0, 1.0);
	min16float s0_7 = l0(0.0, 1.0);
	min16float s0_8 = l0(1.0, 1.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8);
}
//!PASS 2
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-DS-conv1
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-2.955e-02, 7.202e-02, 2.473e-01, 2.603e-02, -8.320e-02, 4.348e-02, 1.542e-01, -7.985e-02, -4.781e-02, 9.252e-02, 1.731e-01, 6.966e-02, 1.611e-01, -4.275e-02, 1.225e-01, 2.970e-01));
	r += mul(s0_1, M4(4.404e-01, -3.300e-03, 4.639e-01, 1.393e-01, 2.337e-01, 1.400e-01, 4.287e-01, 2.937e-01, 2.813e-01, 1.760e-01, 7.475e-01, 6.024e-01, -2.392e+00, 6.656e-01, 4.039e-01, -5.440e-01));
	r += mul(s0_2, M4(-3.686e-02, -2.959e-01, 7.964e-02, -3.726e-01, -2.607e-01, -1.576e-01, -3.748e-01, -3.528e-01, 1.446e-02, -2.950e-02, 5.443e-02, -1.153e-01, -6.270e-02, 6.770e-01, 2.372e-01, -2.050e-01));
	r += mul(s0_3, M4(1.283e-02, -1.509e-01, -2.047e-02, -1.101e-01, -3.037e-01, -1.890e-01, -9.008e-02, 3.839e-03, 4.717e-03, -1.477e-01, -2.123e-01, -3.372e-02, 6.547e-03, 1.042e-01, -5.753e-02, 5.817e-01));
	r += mul(s0_4, M4(-6.293e-02, 2.705e-01, 2.316e-01, 4.092e-01, -1.006e-02, -1.002e-01, 6.423e-01, -4.072e-01, -4.736e-01, 1.625e-01, -6.034e-01, 3.796e-01, -3.465e+00, 9.453e-01, -2.114e+00, -4.405e+00));
	r += mul(s0_5, M4(-5.648e-01, -1.187e+00, -1.874e-02, 1.428e-02, 1.339e-01, 2.666e-01, 7.045e-01, -1.263e-02, -1.405e-02, 1.368e-01, 3.035e-02, 4.346e-02, 5.327e-01, 1.945e+00, -4.647e-02, -1.204e+00));
	r += mul(s0_6, M4(1.323e-01, 7.635e-03, 3.019e-02, -2.791e-02, 2.550e-01, -2.450e-02, 2.960e-02, 1.691e-01, 4.198e-02, -6.323e-02, -4.038e-02, 1.047e-01, -3.514e-01, -9.485e-02, 1.397e-01, 3.161e-01));
	r += mul(s0_7, M4(-1.906e-01, -1.742e-02, -7.390e-02, -2.862e-01, 1.156e+00, -2.485e-03, 1.049e-01, 1.381e+00, 2.356e-02, 3.813e-02, 3.232e-02, 1.003e-01, -1.425e-01, 3.099e-01, 9.908e-02, -1.522e+00));
	r += mul(s0_8, M4(-1.390e-01, -1.206e-01, 1.958e-02, 9.010e-02, -2.992e-01, -5.298e-02, -4.053e-02, 1.488e-02, 2.996e-02, 3.287e-02, -3.873e-03, 1.038e-02, 6.902e-02, 3.054e-01, -9.563e-02, 1.826e-01));
	r += mul(s1_0, M4(-2.820e-02, -7.378e-02, -1.988e-01, -1.456e-02, 4.528e-02, 1.782e-02, -1.199e-01, -1.414e-02, 2.026e-02, -7.998e-02, -3.267e-01, -9.021e-02, 1.647e-01, -1.677e-02, -4.149e-02, -3.079e-02));
	r += mul(s1_1, M4(-4.138e-01, -8.044e-02, -2.939e-01, -4.445e-01, -2.144e-01, -1.466e-01, -3.662e-01, -2.861e-01, -7.654e-02, -3.038e-01, -9.572e-01, -5.023e-01, 7.392e-02, 1.665e-01, 1.452e-01, 2.113e-01));
	r += mul(s1_2, M4(2.309e-01, 1.371e-01, 4.640e-01, 2.007e-01, 1.612e-01, 9.933e-02, 5.557e-01, 2.958e-01, 1.212e-01, -2.235e-02, 7.119e-02, 7.542e-02, -1.340e-02, -1.597e-01, -2.022e-01, -2.329e-01));
	r += mul(s1_3, M4(1.060e-01, 1.509e-01, 2.104e-01, 8.431e-03, 3.693e-01, 1.945e-01, 5.236e-02, -1.174e-01, -1.372e-01, 1.902e-01, -1.764e-01, 2.163e-01, -6.737e-03, 1.514e-02, 1.450e-01, -1.019e-01));
	r += mul(s1_4, M4(3.857e-01, -2.505e-01, -4.413e-01, -8.159e-02, 6.147e-02, 8.114e-03, 5.746e-01, 9.926e-02, 7.106e-02, -7.997e-02, 3.734e-02, -3.173e-01, -1.651e-01, -1.860e-01, -3.067e-01, 2.739e-02));
	r += mul(s1_5, M4(8.985e-01, 3.738e-01, 3.417e-01, 3.293e-01, -2.686e-01, -2.997e-01, -2.319e-01, -5.647e-02, -3.203e-02, -1.772e-01, -9.153e-02, -2.107e-02, 1.596e-02, 1.900e-01, 2.549e-01, 2.133e-01));
	r += mul(s1_6, M4(-1.013e-01, 1.911e-03, 3.828e-02, -1.214e-01, -5.823e-02, 2.466e-02, -9.786e-02, 2.294e-02, -6.617e-02, 6.378e-03, 2.968e-02, 5.533e-02, 1.487e-02, -1.552e-02, -7.583e-02, -1.729e-01));
	r += mul(s1_7, M4(-1.117e-01, -1.069e-02, -1.072e-01, 1.900e-01, -5.058e-01, -2.251e-01, -1.455e-01, 1.233e-01, -3.106e-03, -6.517e-02, -1.616e-01, 6.370e-02, -3.644e-02, 3.897e-02, 2.073e-01, 8.074e-02));
	r += mul(s1_8, M4(-4.476e-02, 8.817e-02, -1.704e-01, -1.146e-01, -1.450e-01, 9.490e-02, -3.887e-02, 1.625e-02, -6.985e-02, 7.635e-02, -6.950e-02, -7.905e-02, -4.866e-02, -3.722e-02, -1.221e-01, 1.148e-02));
	r += V4(-1.594e-03, -1.408e-03, 8.933e-04, 2.312e-03);
	return r;
}
void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = max(-s0_0, 0.0);
	V4 s1_1 = max(-s0_1, 0.0);
	V4 s1_2 = max(-s0_2, 0.0);
	V4 s1_3 = max(-s0_3, 0.0);
	V4 s1_4 = max(-s0_4, 0.0);
	V4 s1_5 = max(-s0_5, 0.0);
	V4 s1_6 = max(-s0_6, 0.0);
	V4 s1_7 = max(-s0_7, 0.0);
	V4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 3
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-DS-conv2
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-5.351e-03, -6.755e-02, 1.158e-01, -7.822e-03, 6.851e-02, -1.014e-01, 7.298e-02, -6.144e-02, 1.359e-02, -6.059e-02, -4.089e-02, 1.536e-03, -1.965e-02, 3.988e-02, -1.999e-02, 1.569e-02));
	r += mul(s0_1, M4(6.636e-02, 1.145e-01, 1.154e-01, 3.215e-02, 2.864e-01, 1.226e-01, -2.640e-01, -1.834e-01, 5.543e-02, -8.477e-02, 6.153e-03, -4.552e-02, 7.247e-02, 8.508e-02, 1.051e-01, 9.060e-02));
	r += mul(s0_2, M4(9.741e-02, 6.608e-02, -7.104e-02, 5.676e-02, -1.987e-01, -5.920e-02, -3.583e-02, -3.265e-02, -2.596e-02, 4.714e-02, 5.164e-02, 2.427e-02, 5.777e-02, -8.524e-02, -1.123e-01, -1.247e-01));
	r += mul(s0_3, M4(-3.233e-02, 1.527e-01, 1.017e-01, 6.910e-02, -2.803e-01, 5.062e-01, -1.180e-01, 1.478e-01, -1.047e-02, -3.095e-02, -1.893e-01, 8.531e-04, -3.312e-02, -6.838e-02, 8.808e-04, 1.119e-02));
	r += mul(s0_4, M4(1.061e-02, 6.419e-01, 8.226e-01, 1.293e-01, -3.937e-01, -1.156e+00, -1.948e-01, -1.239e+00, 4.042e-01, -1.704e-01, 3.726e-01, -1.488e-01, -3.505e-01, -4.346e-01, 2.406e-01, -1.577e-01));
	r += mul(s0_5, M4(1.353e-01, 3.155e-01, -3.413e-02, 4.650e-02, -3.569e-02, -9.255e-02, -4.383e-02, -1.493e-02, -3.431e-02, -2.400e-01, -4.820e-02, 7.220e-02, -1.724e-01, -3.189e-01, -1.884e-01, -1.442e-01));
	r += mul(s0_6, M4(5.088e-02, 4.964e-02, 9.291e-03, 7.790e-02, -2.514e-01, 1.828e-01, 4.053e-01, -1.132e-01, 4.189e-02, 1.409e-01, -1.512e-01, 1.066e-01, -3.222e-02, 1.154e-02, 4.893e-03, 1.342e-02));
	r += mul(s0_7, M4(-3.153e-02, 4.694e-02, -8.016e-02, 1.479e-01, -7.446e-02, -1.396e-01, 3.542e-02, -5.769e-01, -1.474e-02, 3.608e-01, 3.054e-02, 3.635e-01, 4.994e-02, 3.706e-02, 2.318e-02, -1.602e-01));
	r += mul(s0_8, M4(-2.488e-02, -4.698e-02, 8.358e-02, 7.737e-02, 5.094e-02, -1.643e-02, -5.963e-02, -1.231e-01, 2.240e-02, 1.167e-01, -3.626e-02, -9.407e-02, -3.542e-02, 1.387e-03, -1.275e-02, -1.322e-01));
	r += mul(s1_0, M4(4.354e-02, 4.486e-02, 1.644e-02, 2.899e-02, -7.742e-02, -1.569e-01, 1.270e-01, -5.364e-02, -5.232e-02, -1.248e-01, 7.978e-02, -1.758e-02, 8.957e-03, -1.029e-01, 7.744e-02, -5.968e-02));
	r += mul(s1_1, M4(-5.459e-02, 1.329e-01, 7.188e-02, 1.124e-01, -1.559e-01, -2.861e-01, -1.409e-01, -1.833e-02, -1.610e-01, -2.980e-01, -7.948e-02, -1.200e-02, -2.590e-02, 2.045e-04, -1.905e-01, 2.006e-05));
	r += mul(s1_2, M4(-3.907e-02, 7.323e-02, 4.730e-02, 6.477e-02, 2.497e-03, 2.707e-03, 1.059e-03, -6.189e-02, -7.149e-02, 8.886e-03, -3.836e-02, 3.724e-02, -2.069e-02, -1.110e-01, 1.485e-01, -1.701e-02));
	r += mul(s1_3, M4(4.351e-02, 2.125e-01, 3.717e-02, 5.387e-02, -6.683e-02, -3.313e-01, 6.465e-01, -8.603e-02, 4.567e-02, 1.137e-02, 9.784e-02, 3.746e-02, 5.960e-02, -1.840e-01, 4.045e-03, -9.400e-02));
	r += mul(s1_4, M4(-1.073e-01, 3.370e-01, -2.692e-01, 1.941e-01, 1.778e-01, 3.089e-01, -4.480e-01, 3.388e-02, 4.524e-01, -1.602e-01, 9.137e-02, -4.243e-01, 1.810e+00, -4.968e-01, -1.099e+00, -3.017e-01));
	r += mul(s1_5, M4(-1.096e-01, 2.851e-02, 9.397e-02, 1.870e-01, 4.190e-02, -9.973e-02, -1.372e-01, -1.347e-01, -1.209e-01, 1.223e-01, 1.241e-01, -3.451e-01, 1.441e-01, 3.354e-01, 6.020e-01, 1.813e-01));
	r += mul(s1_6, M4(-4.463e-02, 1.132e-01, 1.567e-02, -4.442e-03, 1.820e-02, -1.023e-02, 6.777e-02, -4.003e-02, -2.103e-02, -5.516e-03, 9.845e-03, -7.397e-02, -2.304e-02, 8.227e-02, 3.400e-02, -5.727e-02));
	r += mul(s1_7, M4(2.754e-03, 3.075e-01, 6.034e-02, 1.130e-01, 3.943e-02, -1.510e-02, 9.954e-03, -5.109e-02, 1.838e-01, -4.396e-01, -2.483e-01, -1.478e-01, 2.705e-02, -1.005e-02, -3.209e-01, -2.861e-01));
	r += mul(s1_8, M4(2.847e-02, 1.548e-01, -8.716e-02, 4.420e-02, -5.412e-03, -7.122e-02, 2.923e-02, -6.145e-02, -6.458e-02, -2.017e-01, 1.686e-01, 5.168e-02, 6.873e-02, -2.710e-02, -1.455e-01, 2.900e-01));
	r += V4(3.618e-03, 2.444e-04, 1.520e-03, -2.123e-03);
	return r;
}
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = max(-s0_0, 0.0);
	V4 s1_1 = max(-s0_1, 0.0);
	V4 s1_2 = max(-s0_2, 0.0);
	V4 s1_3 = max(-s0_3, 0.0);
	V4 s1_4 = max(-s0_4, 0.0);
	V4 s1_5 = max(-s0_5, 0.0);
	V4 s1_6 = max(-s0_6, 0.0);
	V4 s1_7 = max(-s0_7, 0.0);
	V4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 4
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-DS-conv3
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-1.874e-02, 2.083e-03, 4.432e-03, -3.878e-02, -3.073e-02, -1.099e-02, -2.203e-02, 4.454e-03, -6.710e-03, 4.248e-03, 6.291e-03, -3.034e-02, -1.244e-01, 9.440e-02, 1.590e-02, 1.042e-01));
	r += mul(s0_1, M4(-8.567e-02, -1.592e-02, 1.716e-02, -7.081e-02, 6.587e-03, 1.122e-01, -6.763e-02, 4.678e-01, 1.052e-02, -7.055e-02, 4.652e-02, -2.959e-01, -2.130e+00, -7.978e-02, 6.994e-02, -2.401e-01));
	r += mul(s0_2, M4(-8.812e-03, -2.159e-02, -1.038e-02, -2.724e-02, -1.372e-01, 4.826e-02, 3.794e-02, 1.135e-01, 4.942e-02, 2.582e-02, 1.271e-03, 3.278e-02, 1.990e-02, 1.974e-01, -1.201e-01, 1.568e-01));
	r += mul(s0_3, M4(-3.893e-02, -2.918e-02, 3.982e-02, -1.694e-01, -1.565e-02, 4.418e-02, -2.417e-02, 3.733e-02, -1.559e-02, -5.662e-02, -1.165e-02, -4.730e-02, -9.683e-03, 1.470e-01, -1.156e-02, 8.230e-04));
	r += mul(s0_4, M4(-1.245e-02, 2.327e-02, 8.758e-02, -3.637e-02, -5.646e-02, 6.714e-01, -2.843e-01, 6.228e-02, 1.537e-03, -5.926e-02, 2.235e-02, 3.174e-01, -6.749e-02, 7.917e-02, 2.857e-01, -3.846e-01));
	r += mul(s0_5, M4(-6.572e-02, -2.618e-02, -3.279e-02, -8.520e-02, 1.437e-02, 8.836e-02, -1.057e-01, 1.493e-01, -6.840e-03, 6.762e-02, 2.972e-02, 1.062e-01, -4.536e-02, 1.535e-01, -3.329e-01, 2.938e-01));
	r += mul(s0_6, M4(3.836e-03, 6.356e-02, 1.403e-01, -4.114e-02, 1.150e-02, 3.592e-02, 6.618e-03, 1.064e-02, -1.428e-02, -1.214e-02, 7.846e-03, -5.610e-03, 8.086e-03, 2.579e-01, -5.030e-02, 4.356e-02));
	r += mul(s0_7, M4(7.855e-03, 3.552e-01, 3.581e-01, 1.053e-01, -2.641e-03, -6.617e-02, -1.568e-01, 8.880e-03, -7.928e-03, -9.533e-02, -2.184e-01, 1.477e-01, 1.599e-02, 4.799e-01, 8.977e-01, 1.605e-02));
	r += mul(s0_8, M4(3.449e-03, 7.935e-02, -2.078e-01, 1.449e-01, -3.967e-04, 1.265e-01, 1.817e-01, 1.496e-02, 7.442e-03, 6.665e-02, 8.453e-02, 1.870e-02, 5.034e-04, 2.924e-03, -1.935e-02, -2.521e-02));
	r += mul(s1_0, M4(6.382e-02, 2.599e-02, 7.209e-02, -5.919e-02, 3.723e-02, 4.064e-02, 2.757e-02, 2.553e-03, 5.421e-02, -2.559e-02, 1.294e-02, -4.939e-02, -6.279e-02, -6.674e-02, -3.498e-02, -1.647e-01));
	r += mul(s1_1, M4(2.310e-01, -2.470e-01, 1.087e-01, -8.496e-01, -1.276e-01, -1.951e-02, 8.475e-02, -2.727e-01, -6.703e-02, 2.387e-02, -5.138e-02, 2.134e-01, 1.681e-01, 4.608e-02, -7.288e-02, 2.867e-01));
	r += mul(s1_2, M4(2.532e-02, 1.078e-02, 1.199e-01, -1.208e-01, 5.326e-03, 7.229e-03, -1.948e-02, 1.117e-02, 1.767e-03, 1.187e-02, 6.244e-04, 1.666e-02, -5.210e-02, -7.239e-03, 5.302e-02, -3.859e-02));
	r += mul(s1_3, M4(4.911e-02, -7.457e-02, 1.190e-01, -7.742e-02, 4.651e-02, 7.545e-02, 4.706e-02, 6.210e-02, 2.010e-02, -9.362e-03, 8.883e-03, 1.544e-01, -1.221e-02, -1.337e-02, 1.096e-01, -2.804e-01));
	r += mul(s1_4, M4(-1.919e-01, -1.930e+00, 1.500e-01, -1.688e+00, -8.179e-02, -3.608e-02, 4.097e-01, -1.481e-01, 1.352e-02, 6.900e-02, 8.109e-02, -3.721e-01, -3.953e-02, 2.608e-02, -4.880e-01, 3.020e-01));
	r += mul(s1_5, M4(9.144e-02, 3.914e-01, 9.078e-01, -9.708e-03, 8.955e-02, 2.373e-01, 1.486e-01, -2.264e-02, 4.077e-02, -2.976e-03, 5.228e-02, -9.726e-03, -3.266e-02, 1.640e-02, 5.209e-02, -7.006e-02));
	r += mul(s1_6, M4(1.105e-02, 2.518e-03, 1.443e-02, -4.288e-02, 3.590e-03, 3.434e-02, -1.995e-02, 3.599e-02, 1.584e-02, -1.980e-01, -1.287e-01, 1.112e-01, -3.819e-03, 4.567e-02, 1.724e-01, -5.285e-02));
	r += mul(s1_7, M4(-2.811e-02, 7.155e-02, 5.575e-01, -3.468e-01, -9.434e-03, -3.975e-02, 1.616e-01, -1.546e-01, -1.697e-03, -2.551e-01, -7.846e-01, 3.821e-02, 1.371e-02, -1.240e-02, -1.150e-01, 2.349e-02));
	r += mul(s1_8, M4(4.447e-02, 6.220e-02, 3.350e-01, -3.795e-02, 1.342e-02, 1.628e-02, 5.287e-01, -2.237e-01, -5.291e-03, -2.676e-02, 4.197e-02, -1.529e-02, 1.457e-03, -2.868e-02, 1.273e-02, -3.097e-02));
	r += V4(-3.737e-04, 1.796e-03, 3.921e-03, -2.454e-03);
	return r;
}
void Pass4(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = max(-s0_0, 0.0);
	V4 s1_1 = max(-s0_1, 0.0);
	V4 s1_2 = max(-s0_2, 0.0);
	V4 s1_3 = max(-s0_3, 0.0);
	V4 s1_4 = max(-s0_4, 0.0);
	V4 s1_5 = max(-s0_5, 0.0);
	V4 s1_6 = max(-s0_6, 0.0);
	V4 s1_7 = max(-s0_7, 0.0);
	V4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 5
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-DS-out
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(9.530e-02, 2.278e-01, -1.031e-01, -1.266e-01, 3.707e-02, -2.137e-02, 3.695e-02, 1.213e-02, -2.066e-01, 3.619e-03, -1.885e-01, -6.665e-02, -3.007e-02, 8.961e-03, -3.799e-02, -1.757e-02));
	r += mul(s0_1, M4(-1.761e-02, -9.598e-02, 5.702e-02, 3.662e-03, 2.299e-01, 2.748e-01, -4.358e-02, 6.368e-03, -4.076e-02, -2.814e-01, 7.153e-02, -8.158e-02, -9.242e-02, -7.813e-02, 8.953e-03, -2.020e-02));
	r += mul(s0_2, M4(5.388e-02, 5.455e-02, -2.908e-03, 3.059e-02, 3.964e-02, 4.896e-02, 1.731e-03, -2.763e-02, -4.532e-02, -2.502e-02, -1.125e-02, 1.264e-02, -2.389e-03, -1.452e-02, 1.639e-02, 8.123e-04));
	r += mul(s0_3, M4(-1.124e+00, -7.153e-02, 3.858e-01, 3.939e-01, 1.453e-02, -9.007e-03, 1.714e-01, -2.053e-02, -7.016e-02, -3.889e-02, -1.111e-01, -1.314e-02, -3.373e-01, 3.563e-02, -9.346e-02, 7.103e-02));
	r += mul(s0_4, M4(9.512e-01, -3.624e-01, -9.483e-03, 1.407e-01, -6.249e-03, 3.565e-02, 2.990e-01, 4.565e-01, -5.009e-02, -9.505e-02, -1.322e-01, -2.529e-01, -8.032e-02, -4.759e-01, -2.629e-01, -3.877e-01));
	r += mul(s0_5, M4(2.560e-02, -1.076e-01, 8.470e-02, -7.739e-02, -2.661e-02, -1.841e-02, 1.291e-02, 7.574e-02, 1.111e-03, 6.793e-03, -2.643e-02, -2.998e-02, -1.301e-02, -1.205e-02, -3.848e-02, -7.202e-02));
	r += mul(s0_6, M4(5.235e-01, -9.836e-02, 8.733e-02, 4.969e-01, 5.485e-03, -1.126e-02, 2.936e-03, -1.098e-02, 8.231e-03, 2.542e-03, 2.038e-03, 6.891e-03, 2.265e-02, 9.888e-02, -1.807e-01, 4.579e-02));
	r += mul(s0_7, M4(2.588e-01, -3.564e-01, 1.078e+00, -1.414e+00, -8.275e-03, -7.434e-03, -4.442e-02, -1.924e-02, 1.591e-02, 1.054e-02, 1.139e-02, -1.380e-03, 3.081e-02, 5.298e-02, 8.423e-02, -5.452e-02));
	r += mul(s0_8, M4(-1.681e-01, 3.766e-02, -1.105e-01, 8.815e-02, 8.880e-03, 1.239e-02, 2.784e-03, -1.035e-02, -3.269e-03, 1.648e-03, 1.455e-03, 1.148e-02, -1.550e-03, 1.829e-03, -3.337e-03, 1.118e-02));
	r += mul(s1_0, M4(-9.002e-03, -1.004e-02, -1.825e-03, -5.362e-04, -4.261e-02, -1.537e-02, -3.952e-02, -1.899e-02, 5.254e-01, -9.839e-02, 1.681e-01, -1.169e-01, 3.846e-02, -2.154e-02, 3.873e-02, 6.644e-03));
	r += mul(s1_1, M4(-5.121e-03, -3.695e-03, -6.988e-03, -2.232e-03, -2.514e-01, -3.272e-01, 8.777e-02, -1.836e-02, -5.604e-02, 2.251e-01, -1.716e-01, 3.299e-01, 4.846e-02, 1.103e-01, -2.253e-02, 1.713e-02));
	r += mul(s1_2, M4(-2.288e-02, -2.460e-02, -4.993e-03, -1.151e-02, -5.462e-02, 5.754e-02, -3.577e-02, 2.637e-02, 8.742e-04, 7.307e-02, 1.924e-03, -3.122e-03, 4.452e-03, 1.156e-02, 2.960e-03, -1.157e-02));
	r += mul(s1_3, M4(-2.938e-02, 2.150e-02, -1.698e-02, -3.075e-02, -4.312e-02, -2.847e-02, -5.707e-04, -2.547e-02, 7.794e-02, -9.802e-03, 2.884e-01, -1.938e-02, 1.450e-01, 1.923e-02, 1.870e-01, 3.313e-02));
	r += mul(s1_4, M4(-1.209e-01, -1.686e-01, 7.152e-02, 8.353e-02, -1.257e-01, 1.675e-01, -6.279e-01, -1.304e-01, 7.398e-02, 9.989e-02, 2.080e-01, 3.704e-02, 3.369e-01, 3.311e-01, 1.666e-01, 3.096e-01));
	r += mul(s1_5, M4(-3.078e-02, -4.008e-02, -2.068e-02, -2.753e-04, 3.747e-02, -4.595e-02, -9.777e-03, -7.837e-02, 5.354e-03, -2.984e-04, 3.603e-03, 4.628e-02, -2.830e-02, 9.939e-02, -7.854e-03, 3.849e-02));
	r += mul(s1_6, M4(2.945e-02, -3.118e-02, -1.827e-01, 6.481e-03, 1.451e-02, 4.024e-03, 5.846e-03, -2.125e-03, -1.307e-02, -2.021e-02, 3.201e-02, 3.818e-03, -2.388e-02, 5.903e-03, -1.090e-02, 7.687e-04));
	r += mul(s1_7, M4(1.265e-01, 1.304e-01, -1.646e-02, -3.232e-01, -1.307e-02, 1.224e-02, 3.612e-02, 2.699e-02, -1.135e-02, -1.530e-02, -4.329e-02, -6.199e-03, -5.825e-02, -5.334e-02, 5.847e-02, 1.164e-02));
	r += mul(s1_8, M4(4.961e-03, 4.369e-02, -4.208e-02, 2.252e-02, 4.966e-03, -8.148e-03, 2.020e-02, 2.125e-02, 1.667e-03, 1.409e-03, 2.781e-03, -4.634e-03, -2.104e-02, -3.427e-02, -1.892e-02, 2.483e-02));
	r += V4(-2.173e-04, -1.752e-04, -3.863e-04, -3.621e-04);
	return tanh(r);
}
void Pass5(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = max(-s0_0, 0.0);
	V4 s1_1 = max(-s0_1, 0.0);
	V4 s1_2 = max(-s0_2, 0.0);
	V4 s1_3 = max(-s0_3, 0.0);
	V4 s1_4 = max(-s0_4, 0.0);
	V4 s1_5 = max(-s0_5, 0.0);
	V4 s1_6 = max(-s0_6, 0.0);
	V4 s1_7 = max(-s0_7, 0.0);
	V4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 6
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-DS-shuffle
//!STYLE PS
//!IN t0, INPUT
float4 Pass6(float2 pos) {
	float2 pt = float2(GetInputPt());
	const static float3x3 rgb2yuv = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081};
	const static float3x3 yuv2rgb = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float4 r = 0.0;
	float2 size = float2(GetInputSize());
	float2 f = frac(pos * size);
	float3 yuv = mul(rgb2yuv, INPUT.SampleLevel(SL, pos, 0).rgb);
	int2 i = int2(f * 2.0);
	r.r = t0.SampleLevel(SP, (float2(0.5, 0.5) - f) * pt + pos, 0)[2*i.y + i.x];
	r.r += yuv.r;
	r.a = 1.0;
	r.r = clamp(r, 0.0, 1.0);
	float3 px = mul(yuv2rgb, float3(r.r, yuv.yz));
	return float4(px, 1.0);
}
