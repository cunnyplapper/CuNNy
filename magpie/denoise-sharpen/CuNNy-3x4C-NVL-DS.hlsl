// CuNNy 3x4C BILINEAR CHROMA NVL DS
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

//!MAGPIE EFFECT
//!VERSION 3
//!OUTPUT_WIDTH INPUT_WIDTH * 2
//!OUTPUT_HEIGHT INPUT_HEIGHT * 2

//!TEXTURE
Texture2D INPUT;


//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t1;

//!PASS 1
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-DS-in
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) (dot(float3(6.250e-01, 1.199e+00, 2.728e-01), O(INPUT, float2(x, y)).rgb) + -2.094e-01)
float4 f0(float2 pt, float2 pos, min16float s0_0, min16float s0_1, min16float s0_2, min16float s0_3, min16float s0_4, min16float s0_5, min16float s0_6, min16float s0_7, min16float s0_8) {
	V4 r = 0.0;
	r += V4(1.032e-01, -6.140e-02, 9.821e-02, -1.329e-01) * s0_0;
	r += V4(-1.548e-01, -8.114e-02, -4.115e-01, -1.860e-01) * s0_1;
	r += V4(4.469e-01, 1.298e-01, 1.599e-01, -1.355e-02) * s0_2;
	r += V4(-1.651e-01, 2.115e-01, -7.355e-02, 4.346e-01) * s0_3;
	r += V4(-7.361e-02, -5.251e-01, -2.353e-01, 2.006e-01) * s0_4;
	r += V4(-1.753e-01, -1.495e-01, 4.476e-01, 2.468e-02) * s0_5;
	r += V4(3.238e-01, 2.588e-01, -1.919e-02, -6.924e-02) * s0_6;
	r += V4(-1.880e-01, 1.978e-01, 1.194e-01, -1.827e-01) * s0_7;
	r += V4(-7.908e-03, 1.732e-02, -8.384e-02, 1.358e-02) * s0_8;
	r += V4(3.584e-03, 1.376e-03, -6.247e-03, 4.712e-03);
	return r;
}
void Pass1(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float s0_0 = l0(-1.0, -1.0);
	min16float s0_1 = l0(0.0, -1.0);
	min16float s0_2 = l0(1.0, -1.0);
	min16float s0_3 = l0(-1.0, 0.0);
	min16float s0_4 = l0(0.0, 0.0);
	min16float s0_5 = l0(1.0, 0.0);
	min16float s0_6 = l0(-1.0, 1.0);
	min16float s0_7 = l0(0.0, 1.0);
	min16float s0_8 = l0(1.0, 1.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8);
}
//!PASS 2
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-DS-conv1
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(2.151e-01, 6.816e-02, 1.869e-01, 4.102e-03, -1.558e-01, -1.127e-01, -2.011e-01, 6.925e-03, -2.017e-01, -7.731e-02, -1.326e-02, 2.692e-04, 1.265e-01, 1.903e-02, 1.936e-01, 1.234e-02));
	r += mul(s0_1, M4(-2.585e-01, -3.079e-01, -5.451e-01, 1.755e-01, 2.241e-01, 3.838e-01, 7.587e-02, -4.911e-01, 1.743e-01, 7.007e-02, 4.394e-01, 9.385e-03, 5.636e-02, -7.175e-02, -4.296e-01, 1.960e-01));
	r += mul(s0_2, M4(6.258e-02, 1.095e-01, 1.696e-02, 7.851e-03, -1.193e-03, -2.317e-01, 3.130e-01, 5.611e-02, -1.578e-01, -1.097e-01, -2.887e-01, -4.009e-02, -6.506e-02, -3.557e-02, -2.379e-01, 3.638e-02));
	r += mul(s0_3, M4(-8.032e-02, 3.730e-01, 7.760e-03, 1.035e-01, -6.715e-02, -9.418e-02, -1.151e-01, -3.408e-01, 6.061e-01, -7.414e-02, -1.528e-01, -3.682e-01, 1.516e-01, 2.636e-01, 1.013e-01, 1.016e-01));
	r += mul(s0_4, M4(-3.486e-01, -1.609e-01, -8.137e-03, -3.555e-01, 2.417e-01, 1.955e-01, -4.893e-01, 1.387e-01, 1.468e-01, -1.167e-01, 1.238e-02, 5.488e-01, -6.191e-01, 3.842e-02, 4.544e-02, -2.436e-01));
	r += mul(s0_5, M4(2.905e-01, 5.154e-02, 3.429e-01, 1.033e-01, -2.486e-01, 3.462e-01, 3.545e-01, -4.229e-01, -7.225e-03, 1.257e-01, 2.246e-01, -8.180e-02, 6.081e-02, -1.545e-01, 2.429e-01, -1.928e-02));
	r += mul(s0_6, M4(-8.911e-02, -1.226e-02, 2.214e-02, -2.027e-01, 5.778e-02, 1.854e-02, -5.074e-03, 2.528e-01, 2.849e-01, 5.029e-02, 6.728e-02, -2.296e-01, 9.036e-03, -5.771e-02, 3.193e-02, -1.011e-01));
	r += mul(s0_7, M4(1.323e-01, -2.225e-01, -1.202e-01, -1.848e-01, 7.879e-03, -1.308e-01, 1.548e-01, -2.352e-03, 1.981e-02, -3.710e-01, 2.131e-01, 5.048e-02, 1.234e-01, 9.132e-02, 1.243e-01, 5.099e-01));
	r += mul(s0_8, M4(-5.126e-02, -2.753e-02, 9.522e-02, -3.332e-02, -5.680e-02, -7.195e-02, -7.346e-02, -1.429e-01, 6.760e-03, -1.003e-01, 7.758e-02, 1.152e-02, 3.100e-01, 6.328e-02, -5.492e-02, -3.162e-02));
	r += mul(s1_0, M4(2.402e-01, 5.835e-02, 1.661e-01, 1.570e-02, -2.317e-01, -1.553e-01, -2.095e-01, -1.193e-03, -1.223e-01, -9.711e-02, 1.008e-01, 2.353e-02, 5.237e-02, 1.782e-02, 1.733e-01, 8.010e-02));
	r += mul(s1_1, M4(-2.536e-01, -2.703e-01, -5.527e-01, 1.440e-01, 3.243e-01, 2.520e-01, 4.585e-01, -5.019e-01, 1.470e-01, 1.587e-01, 3.846e-01, -1.130e-02, 5.755e-03, -1.574e-02, -5.879e-01, 1.185e-01));
	r += mul(s1_2, M4(4.853e-02, 9.643e-02, 4.624e-02, 1.333e-02, -7.807e-03, -6.451e-02, 1.715e-01, -2.213e-02, -1.879e-01, -1.692e-01, -3.957e-01, -6.349e-04, 3.223e-02, -8.580e-02, -3.813e-02, 1.147e-02));
	r += mul(s1_3, M4(-5.690e-02, 3.172e-01, 3.126e-02, 7.255e-02, -7.397e-02, -4.067e-01, -6.482e-02, -2.007e-01, 5.294e-01, -2.974e-02, -9.032e-03, -2.760e-01, 1.142e-01, 3.667e-01, 1.194e-01, 9.296e-02));
	r += mul(s1_4, M4(-2.909e-01, -1.217e-01, 1.509e-01, -4.407e-01, -2.037e-02, 1.706e-02, -1.571e-01, 4.730e-01, 9.740e-02, 3.141e-01, -3.164e-02, 1.612e-01, -1.976e-01, -2.510e-01, -5.930e-02, -2.571e-01));
	r += mul(s1_5, M4(2.709e-01, -5.776e-02, 4.561e-01, 1.117e-01, -1.627e-01, 4.377e-01, 2.842e-01, -2.467e-01, 1.243e-02, 1.811e-01, 1.165e-01, -8.911e-02, -2.099e-01, 1.697e-01, 1.058e-01, -1.239e-01));
	r += mul(s1_6, M4(-7.210e-03, -8.788e-02, -4.122e-02, -1.427e-01, 1.018e-01, 1.411e-01, -1.370e-02, 2.065e-01, 1.946e-01, 8.367e-02, -5.641e-02, -3.573e-02, -1.070e-02, 3.086e-02, 2.045e-02, -3.317e-02));
	r += mul(s1_7, M4(6.597e-02, -2.822e-01, -1.996e-02, -1.971e-01, 4.740e-02, -1.034e-02, 1.761e-01, 1.538e-01, -9.298e-02, -1.228e-01, -1.714e-01, 2.784e-02, 8.227e-02, 2.616e-01, 7.324e-02, 4.420e-01));
	r += mul(s1_8, M4(-1.031e-01, -6.852e-02, 6.195e-02, 4.483e-03, 7.793e-02, 1.001e-02, -1.057e-01, -5.606e-02, 3.082e-02, -1.988e-02, 1.968e-02, 3.123e-02, 2.338e-01, -1.353e-01, -1.967e-01, -1.099e-01));
	r += V4(6.492e-03, 5.432e-04, 2.233e-04, 2.261e-04);
	return r;
}
void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 3
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-DS-conv2
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(3.496e-02, 5.735e-02, 2.631e-02, 4.949e-02, -2.589e-02, -6.760e-02, -9.440e-03, -1.455e-02, -1.000e-02, 3.783e-02, 6.144e-04, -1.381e-01, 8.793e-03, -4.225e-03, -2.349e-02, 1.451e-01));
	r += mul(s0_1, M4(8.418e-02, 1.045e-01, 1.658e-03, -4.355e-01, -1.031e-01, -4.679e-02, -5.279e-02, -4.247e-01, -1.244e-02, 1.737e-02, -2.743e-02, 3.466e-02, -2.570e-02, 7.505e-02, 3.615e-02, -3.438e-01));
	r += mul(s0_2, M4(1.105e-01, -3.606e-02, 2.186e-02, -1.401e-01, -6.658e-02, 5.507e-02, 4.413e-02, 1.380e-01, -1.064e-02, 5.038e-02, -1.567e-03, 2.835e-02, 8.784e-02, 4.343e-02, 6.085e-02, 1.026e-01));
	r += mul(s0_3, M4(5.116e-02, 1.519e-01, 3.889e-02, 1.343e-01, -8.464e-02, 1.934e-01, 3.818e-02, 1.123e-01, -8.212e-02, -2.548e-01, -1.439e-01, -2.007e-01, -1.587e-02, 1.496e-01, 2.600e-03, 2.348e-01));
	r += mul(s0_4, M4(-1.803e-01, 3.701e-01, 4.334e-01, 1.017e-01, -1.101e-01, -4.000e-01, 1.397e-01, -4.446e-02, 1.152e-01, -1.028e-01, -2.924e-02, -8.016e-02, -1.997e-01, -1.645e-01, 6.808e-02, -4.795e-01));
	r += mul(s0_5, M4(3.298e-01, -1.919e-02, -1.237e-01, -1.088e-01, -3.157e-02, 2.078e-02, 3.992e-02, 4.199e-02, 1.027e-01, -1.621e-03, 6.416e-02, 7.094e-02, 4.189e-01, 2.421e-02, 1.032e-01, 4.567e-02));
	r += mul(s0_6, M4(7.094e-02, 6.721e-02, -8.521e-02, -6.569e-03, -1.845e-02, 2.858e-02, -1.330e-01, -1.700e-02, 3.437e-02, -2.897e-01, 2.485e-01, -5.050e-02, 2.617e-02, 1.633e-01, -2.939e-01, 1.325e-01));
	r += mul(s0_7, M4(5.416e-02, 8.004e-02, 1.261e-02, 6.665e-02, -4.985e-02, 1.221e-02, 7.181e-03, -2.738e-02, 1.255e-02, -4.240e-02, -5.253e-02, -7.056e-02, 1.088e-01, 2.557e-02, -3.074e-01, 8.313e-03));
	r += mul(s0_8, M4(6.910e-02, 6.869e-02, -1.073e-02, -1.014e-02, -7.422e-02, -1.500e-02, -4.603e-02, 4.508e-03, 1.011e-01, 3.203e-03, -2.847e-03, -2.484e-02, 2.205e-02, 5.184e-03, -5.495e-02, -8.961e-03));
	r += mul(s1_0, M4(-8.042e-02, -3.148e-02, 4.101e-02, 4.344e-02, -7.678e-03, -2.086e-02, -1.325e-02, -2.878e-02, 1.455e-02, 8.815e-02, 2.657e-02, -4.428e-02, 5.018e-02, 2.049e-02, 3.233e-02, 8.623e-02));
	r += mul(s1_1, M4(-1.672e-01, 4.957e-02, -6.756e-02, -4.268e-01, 4.961e-02, -2.171e-02, 6.706e-02, -1.972e-01, 7.787e-02, 3.651e-02, 5.580e-02, 9.342e-02, -1.568e-02, 2.248e-02, -3.202e-02, -4.307e-01));
	r += mul(s1_2, M4(-1.838e-01, -4.719e-02, -2.603e-02, -8.952e-03, 8.416e-02, 3.004e-02, 8.554e-02, 2.152e-02, 2.401e-02, 1.093e-02, 6.597e-05, -2.536e-02, -1.486e-02, 1.015e-01, 2.808e-02, 1.705e-01));
	r += mul(s1_3, M4(-1.100e-01, -8.620e-02, -1.290e-01, 8.510e-02, -5.017e-02, -1.218e-01, 7.600e-03, -6.513e-02, 7.201e-02, 6.129e-02, 3.229e-02, -8.847e-02, 3.534e-02, 2.745e-01, -6.139e-02, 1.062e-01));
	r += mul(s1_4, M4(-4.248e-01, 1.332e-01, 3.899e-01, -1.296e-01, 1.371e-02, -2.395e-01, 2.927e-02, -1.048e-01, 3.643e-01, -1.116e-01, -8.847e-02, -4.784e-02, -9.451e-02, -4.726e-01, -6.575e-02, 2.085e-01));
	r += mul(s1_5, M4(-1.608e-01, -8.421e-02, 8.604e-03, -8.540e-02, 3.350e-01, -2.174e-02, -1.002e-02, -5.212e-03, -6.240e-02, 2.862e-02, -7.434e-03, 1.007e-01, 2.388e-01, 3.769e-02, 1.400e-01, 7.150e-02));
	r += mul(s1_6, M4(-1.579e-02, -1.342e-01, -2.805e-02, -1.018e-02, -6.351e-03, -1.482e-01, 1.062e-01, -1.083e-02, 6.459e-02, -1.077e-01, 1.754e-02, -1.242e-02, 2.161e-02, -1.225e-02, -1.502e-02, -1.270e-02));
	r += mul(s1_7, M4(-1.421e-01, -7.907e-02, 9.449e-02, -2.632e-02, -7.105e-02, 6.088e-02, 3.082e-02, -1.104e-02, 1.333e-01, -2.029e-01, 5.978e-01, -8.805e-02, -7.072e-02, 1.257e-01, 5.178e-03, -2.749e-02));
	r += mul(s1_8, M4(-1.645e-01, 2.205e-02, 7.903e-02, -2.222e-02, 1.136e-01, -5.785e-03, 5.301e-03, 2.157e-03, 7.478e-02, 1.518e-01, -6.945e-02, 3.210e-02, 1.810e-01, -3.850e-02, -4.647e-02, -5.611e-03));
	r += V4(2.949e-03, 2.731e-03, -3.965e-03, 5.985e-03);
	return r;
}
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 4
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-DS-conv3
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-1.402e-02, -1.430e-01, 1.698e-01, 1.986e-01, 4.195e-04, -5.584e-03, 2.230e-02, -1.231e-02, 3.886e-03, 7.342e-03, -3.111e-02, -7.529e-02, 1.630e-02, 5.623e-03, 7.721e-03, 3.823e-02));
	r += mul(s0_1, M4(1.812e-01, 4.277e-02, -1.048e-01, -2.541e-02, 2.868e-02, 3.242e-02, -2.085e-01, -9.905e-02, -8.662e-02, 1.821e-01, 7.121e-02, -1.923e-01, -6.120e-03, -5.504e-02, 1.914e-02, 1.923e-03));
	r += mul(s0_2, M4(-2.882e-03, -6.540e-03, -5.077e-03, 4.533e-03, -1.033e-01, 6.596e-02, -6.568e-02, -2.281e-02, -4.601e-02, -2.523e+00, 1.169e+00, 1.879e-01, 3.272e-03, -4.274e-02, 1.387e-02, 2.319e-02));
	r += mul(s0_3, M4(8.125e-02, 5.412e-02, -8.128e-02, 1.105e-01, 3.069e-02, -1.590e-02, 1.716e-02, 5.602e-02, -1.306e-02, -2.701e-02, 2.107e-03, -2.769e-03, -4.620e-03, 9.055e-02, -1.478e-01, -3.234e-01));
	r += mul(s0_4, M4(-4.461e-01, 7.467e-02, 3.027e-01, -2.122e-02, 4.184e-02, -1.333e-01, 8.042e-02, -1.273e-01, -3.968e-03, -1.195e-01, 2.156e-01, -1.162e-01, -1.701e-01, 2.704e-01, 1.679e-01, 3.078e-02));
	r += mul(s0_5, M4(1.089e-01, -2.651e-02, -6.958e-02, 2.531e-02, 4.196e-01, -5.705e-02, -2.748e-01, 3.632e-02, -1.546e-01, 3.702e-01, 1.304e-01, 8.496e-02, -1.573e-02, 4.286e-02, -3.537e-02, -2.290e-03));
	r += mul(s0_6, M4(3.864e-02, -1.322e-02, -9.195e-03, 1.142e-02, -2.972e-03, -3.502e-03, 1.078e-02, 3.322e-03, -4.310e-02, 2.899e-02, 1.108e-02, 1.985e-02, -2.181e-02, 4.422e-03, 1.188e-03, 7.196e-02));
	r += mul(s0_7, M4(5.768e-02, -2.881e-02, -4.176e-02, 5.651e-03, 2.889e-02, -1.044e-02, -2.729e-02, -4.709e-02, -7.658e-02, 1.234e-02, 3.325e-02, 6.229e-03, -3.990e-02, -1.238e-03, 3.372e-02, 4.060e-02));
	r += mul(s0_8, M4(-4.757e-04, -9.470e-04, 5.850e-03, 7.784e-03, -3.071e-02, 1.531e-02, 1.520e-02, 1.253e-02, 6.135e-02, -4.022e-02, -2.308e-02, -3.429e-02, -1.021e-01, 3.311e-03, 2.802e-02, -1.798e-02));
	r += mul(s1_0, M4(-5.117e-03, 1.188e-01, 1.498e-01, -8.130e-02, 3.798e-03, 2.153e-02, -3.709e-02, 3.562e-02, 1.987e-02, 1.921e-02, -1.640e-02, -6.017e-02, -1.159e-02, 4.187e-02, -1.788e-02, -7.314e-03));
	r += mul(s1_1, M4(-1.536e-01, 7.156e-02, -6.535e-02, -3.698e-02, -7.716e-02, -1.605e-01, -1.517e-01, -3.491e-02, -6.681e-02, 1.328e-01, 2.822e-01, -6.875e-02, -1.683e-02, 7.344e-03, -1.402e-02, -6.905e-03));
	r += mul(s1_2, M4(-4.768e-02, 4.286e-02, 2.590e-02, -1.752e-03, -9.804e-02, 6.976e-02, -6.694e-03, -2.257e-02, -4.277e-02, -4.839e-02, 8.172e-02, 8.267e-03, 7.122e-04, -1.813e-02, 1.048e-03, -2.075e-03));
	r += mul(s1_3, M4(2.261e-02, -1.876e-02, -1.525e-01, 1.781e-01, -1.902e-02, 2.229e-04, 7.350e-02, 3.722e-01, 1.303e-02, -1.699e-02, -3.047e-02, 4.748e-02, -4.136e-02, 1.030e-01, -2.291e-01, -4.793e-01));
	r += mul(s1_4, M4(1.147e-01, -2.062e-01, 6.710e-02, -2.640e-02, -2.610e-01, -5.736e-02, 5.492e-02, -1.752e+00, 3.777e-02, -8.115e-02, 7.153e-02, -5.840e-02, -9.639e-02, 1.731e-01, 9.358e-03, -1.778e-02));
	r += mul(s1_5, M4(-4.608e-02, 1.119e-02, 8.267e-02, -1.382e-02, 4.303e-02, 5.956e-02, 1.067e-01, -5.350e-02, 2.213e-01, -2.796e-02, -1.440e-01, 2.611e-02, 4.793e-02, 5.505e-02, -3.550e-02, -1.311e-03));
	r += mul(s1_6, M4(-5.877e-02, 4.388e-02, 5.555e-03, -2.892e-02, 4.347e-04, 1.373e-02, -3.870e-02, 1.100e-02, -1.405e-02, 6.937e-03, -2.901e-04, -3.226e-03, -4.528e-02, 1.984e-02, -2.442e-02, 6.431e-02));
	r += mul(s1_7, M4(-1.579e-01, 1.008e-01, 1.362e-01, -1.575e-02, 2.710e-02, -5.656e-03, -9.949e-02, -4.045e-02, -1.326e-02, -8.045e-04, 2.355e-02, -1.443e-02, -8.535e-01, -5.773e-02, 6.917e-01, 6.090e-03));
	r += mul(s1_8, M4(-1.239e-01, 4.774e-02, 4.748e-02, -6.251e-03, -1.652e-01, 4.431e-02, 1.477e-01, 1.699e-03, -5.137e-02, 9.168e-03, 3.008e-02, 9.641e-03, -7.935e-02, 2.098e-02, 3.531e-02, -1.778e-02));
	r += V4(3.692e-03, -2.602e-03, -5.524e-05, 1.787e-03);
	return r;
}
void Pass4(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 5
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-DS-out
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(5.724e-02, 5.519e-02, -2.952e-02, 5.177e-03, 2.266e-02, 1.075e-03, -8.209e-02, -4.950e-02, 3.981e-02, 7.045e-03, 3.430e-02, -7.704e-03, -3.725e-02, -8.471e-03, -4.066e-02, -5.164e-03));
	r += mul(s0_1, M4(8.734e-02, 2.023e-02, 1.719e-02, 4.836e-02, -2.268e-01, -4.402e-01, 2.096e-01, 1.557e-01, -2.408e-02, -7.772e-02, 5.051e-02, 7.202e-02, 4.422e-02, -2.214e-02, -4.790e-03, -5.028e-02));
	r += mul(s0_2, M4(1.541e-02, -2.222e-02, 9.214e-03, -1.800e-02, 9.094e-03, 8.232e-02, -4.970e-03, 1.445e-01, -4.733e-02, 1.837e-02, -1.040e-02, 9.439e-03, -4.234e-02, 6.007e-02, -2.795e-02, -1.397e-03));
	r += mul(s0_3, M4(-9.307e-02, -5.403e-02, 3.232e-01, 5.016e-02, -3.371e-01, 1.112e-01, -5.739e-01, 2.519e-01, -2.900e-01, 4.922e-02, 6.306e-03, 5.027e-02, -2.879e-02, -2.953e-03, -7.017e-02, -1.175e-02));
	r += mul(s0_4, M4(3.392e-01, 2.433e-02, 1.932e-03, 1.374e-01, 2.505e+00, 3.194e-01, 1.723e-01, -2.448e+00, 1.064e+00, 1.347e-01, 7.397e-02, -2.722e-01, -1.144e-01, -2.892e-01, 3.614e-01, -7.644e-02));
	r += mul(s0_5, M4(1.014e-02, 2.264e-02, 1.664e-02, -1.017e-01, -3.673e-02, 3.638e-01, -1.064e-01, 1.449e-01, 5.376e-03, 4.489e-02, -1.053e-02, 2.074e-02, 1.013e-01, 1.616e-01, 1.426e-02, 2.222e-01));
	r += mul(s0_6, M4(3.733e-02, 4.038e-02, -2.824e-01, -1.630e-02, -6.085e-02, 8.565e-02, -1.341e-01, 2.840e-02, -6.945e-02, -2.707e-02, -2.529e-01, 7.923e-03, -3.542e-02, -1.559e-02, 2.485e-02, -1.498e-02));
	r += mul(s0_7, M4(-1.134e-01, -6.580e-02, -1.238e-01, -4.247e-01, -1.450e-02, -9.350e-02, 2.363e-01, 1.179e-01, -3.615e-01, -2.270e-01, 1.159e-02, -7.535e-02, -1.026e-02, 1.816e-02, -1.688e-01, 2.058e-02));
	r += mul(s0_8, M4(5.499e-03, -7.003e-03, -6.374e-02, -1.547e-02, -3.915e-02, 1.175e-02, -5.407e-02, -3.158e-02, -1.867e-02, -3.835e-02, 1.363e-02, -6.177e-02, 3.745e-02, 1.444e-02, 5.530e-02, 6.321e-03));
	r += mul(s1_0, M4(3.798e-01, -1.719e-01, -8.860e-02, 5.620e-02, 4.468e-03, 1.939e-03, 1.988e-02, -4.734e-03, 6.067e-02, -2.346e-03, -7.374e-04, -2.083e-02, 2.279e-02, -1.764e-02, -2.643e-02, -6.358e-03));
	r += mul(s1_1, M4(3.647e-01, 6.561e-01, -2.207e-01, -3.377e-01, -6.580e-03, -3.846e-02, 1.778e-02, 2.985e-02, -3.527e-02, 7.448e-02, -1.058e-03, 4.651e-02, -3.134e-02, -6.915e-03, -1.340e-01, -3.963e-02));
	r += mul(s1_2, M4(-2.858e-02, 2.764e-02, 2.151e-02, -8.790e-02, -1.618e-02, 2.362e-02, -4.998e-03, 5.752e-03, 8.687e-03, -3.095e-02, 3.866e-03, -9.343e-03, -7.950e-03, 3.567e-01, -1.905e-01, -1.880e-01));
	r += mul(s1_3, M4(-4.508e-01, -7.556e-02, 1.199e+00, -8.668e-02, -2.145e-01, 1.936e-02, 3.621e-02, 4.209e-02, -1.922e-01, -2.818e-02, 2.019e-01, -1.485e-03, -9.343e-03, 6.082e-03, 4.629e-02, -2.146e-02));
	r += mul(s1_4, M4(7.477e-01, -6.346e-01, -2.950e-01, -1.606e-01, 4.933e-01, -2.494e-01, 8.682e-02, -1.165e-01, 4.444e-01, 2.099e-01, 9.346e-02, 4.473e-01, -3.764e-01, -3.323e-03, -1.893e-01, 6.560e-02));
	r += mul(s1_5, M4(-5.992e-03, 2.634e-02, -3.486e-02, -9.795e-02, -7.676e-03, 6.802e-02, -6.380e-03, 1.542e-02, 2.491e-02, 2.585e-02, 3.434e-02, -9.357e-02, 4.621e-01, -1.465e+00, 1.457e+00, 2.542e-02));
	r += mul(s1_6, M4(1.313e-01, 1.411e-01, -3.816e-01, 2.914e-02, 2.094e-02, 4.459e-02, -2.959e-01, 1.241e-02, 1.463e-02, 2.396e-02, -3.350e-01, -1.598e-02, 1.708e-02, -9.935e-03, 2.496e-02, 8.815e-03));
	r += mul(s1_7, M4(-1.508e-01, -1.227e-01, 9.155e-02, -3.682e-01, 9.108e-02, 1.128e-02, 1.052e-01, -3.799e-01, -1.496e-01, -7.723e-02, -1.587e-01, -4.527e-01, -1.522e-02, 2.075e-02, 3.446e-03, -7.955e-03));
	r += mul(s1_8, M4(-9.195e-03, -1.877e-02, 8.367e-03, 3.910e-03, 1.695e-02, 8.541e-03, -1.610e-02, -1.218e-03, 1.241e-03, -8.068e-03, -6.238e-02, -1.537e-02, 1.007e-01, 7.268e-02, 9.816e-03, -2.603e-01));
	r += V4(-7.305e-05, 2.614e-04, -3.637e-04, 7.920e-05);
	return tanh(r);
}
void Pass5(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 6
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-DS-shuffle
//!STYLE PS
//!IN t0, INPUT
float4 Pass6(float2 pos) {
	float2 pt = float2(GetInputPt());
	static const float3x3 rgb2yuv = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081};
	static const float3x3 yuv2rgb = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float4 r = 0.0;
	float2 size = float2(GetInputSize());
	float2 f = frac(pos * size);
	float3 yuv = mul(rgb2yuv, INPUT.SampleLevel(SL, pos, 0).rgb);
	int2 i = int2(f * 2.0);
	r.r = t0.SampleLevel(SP, (float2(0.5, 0.5) - f) * pt + pos, 0)[2*i.y + i.x];
	r.r += yuv.r;
	r.a = 1.0;
	r.r = clamp(r, 0.0, 1.0);
	float3 px = mul(yuv2rgb, float3(r.r, yuv.yz));
	return float4(px, 1.0);
}
