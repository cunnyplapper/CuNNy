// CuNNy 3x4C BILINEAR CHROMA NVL DS
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

//!MAGPIE EFFECT
//!VERSION 3
//!OUTPUT_WIDTH INPUT_WIDTH * 2
//!OUTPUT_HEIGHT INPUT_HEIGHT * 2

//!TEXTURE
Texture2D INPUT;


//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t1;

//!PASS 1
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-DS-in
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) (dot(float3(0.3605814576148987, 0.6704315543174744, 0.15501634776592255), O(INPUT, float2(x, y)).rgb) + -0.8233079314231873)
float4 f0(float2 pt, float2 pos, min16float s0_0, min16float s0_1, min16float s0_2, min16float s0_3, min16float s0_4, min16float s0_5, min16float s0_6, min16float s0_7, min16float s0_8) {
	V4 r = 0.0;
	r += V4(2.675e-02, -4.208e-02, 1.205e-01, -1.819e-01) * s0_0;
	r += V4(-6.123e-03, -5.629e-02, -8.848e-02, 1.243e-01) * s0_1;
	r += V4(-2.477e-02, 6.653e-02, -1.283e-01, 3.721e-01) * s0_2;
	r += V4(2.116e-01, 2.197e-02, -3.584e-01, 1.176e-01) * s0_3;
	r += V4(-5.356e-01, 7.402e-01, 2.544e-02, -5.879e-01) * s0_4;
	r += V4(-2.162e-02, -7.559e-01, 1.132e-01, 1.322e-02) * s0_5;
	r += V4(-2.764e-02, 9.714e-03, -2.822e-01, 4.060e-01) * s0_6;
	r += V4(1.754e-02, -2.662e-02, 5.879e-01, -8.423e-02) * s0_7;
	r += V4(5.362e-03, 3.924e-02, 1.283e-02, -1.821e-01) * s0_8;
	r += V4(-1.271e-03, 1.981e-03, -1.881e-03, 1.314e-03);
	return r;
}
void Pass1(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float s0_0 = l0(-1.0, -1.0);
	min16float s0_1 = l0(0.0, -1.0);
	min16float s0_2 = l0(1.0, -1.0);
	min16float s0_3 = l0(-1.0, 0.0);
	min16float s0_4 = l0(0.0, 0.0);
	min16float s0_5 = l0(1.0, 0.0);
	min16float s0_6 = l0(-1.0, 1.0);
	min16float s0_7 = l0(0.0, 1.0);
	min16float s0_8 = l0(1.0, 1.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8);
}
//!PASS 2
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-DS-conv1
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-1.175e-01, -1.802e-01, -4.377e-02, 1.913e-01, 7.938e-02, -1.336e-01, -9.646e-03, 3.335e-02, 4.306e-02, -9.309e-03, -3.084e-02, 4.696e-03, -1.089e-02, -1.304e-01, -1.886e-03, -1.884e-02));
	r += mul(s0_1, M4(-1.833e-01, -3.229e-01, -2.635e-01, 1.880e-02, -4.269e-02, -1.443e-01, -4.893e-01, -1.044e-01, -1.733e-01, 1.447e-01, -3.961e-01, -2.745e-01, -7.459e-02, -8.508e-02, -1.507e-02, -1.972e-01));
	r += mul(s0_2, M4(-4.586e-01, 1.269e-01, -3.427e-01, -2.414e-01, -1.782e-01, -4.464e-02, -1.861e-01, -1.636e-01, 2.704e-01, 2.630e-01, -8.010e-01, 1.843e-01, 1.025e-01, 2.039e-02, -2.619e-01, 5.796e-02));
	r += mul(s0_3, M4(4.413e-01, 1.294e-01, 5.170e-02, -2.568e-01, -4.408e-02, -1.097e-01, -2.728e-02, 6.407e-02, 1.860e-01, 1.468e-01, -6.472e-02, -1.411e-01, -3.008e-03, -3.506e-01, -7.922e-02, 6.019e-02));
	r += mul(s0_4, M4(-1.148e-02, -1.173e-01, -2.328e-01, -1.111e-01, 4.866e-01, 8.027e-01, 2.853e-01, -2.290e-01, -4.658e-01, -1.135e-01, 7.112e-02, 1.502e-01, 6.613e-02, -4.597e-01, 3.735e-01, 4.111e-01));
	r += mul(s0_5, M4(-3.868e-03, -4.838e-02, 2.135e-01, -1.010e-01, 2.220e-01, 2.143e-01, 1.067e-01, 1.304e-01, 9.354e-01, 2.704e-01, 5.059e-01, 1.137e+00, -4.737e-01, -2.580e-01, -2.832e-02, -1.716e-01));
	r += mul(s0_6, M4(1.899e-01, 1.241e-01, 2.163e-01, 2.528e-01, -4.480e-02, 1.573e-01, 3.518e-02, 2.979e-01, -5.809e-03, -5.148e-02, 1.135e-01, 4.631e-01, 2.378e-01, -7.121e-02, 9.678e-02, 2.468e-01));
	r += mul(s0_7, M4(1.304e-01, 1.252e-01, 2.878e-01, 5.416e-02, -4.343e-01, -5.126e-01, 2.322e-01, 4.869e-01, 8.420e-02, -1.481e-01, -7.087e-03, 6.606e-02, -7.503e-02, -6.992e-02, -1.240e-01, -6.035e-01));
	r += mul(s0_8, M4(1.924e-02, 1.772e-01, 1.112e-01, 1.987e-01, 9.380e-02, -1.441e-01, -4.235e-02, -1.842e-02, -9.300e-02, 3.779e-01, -9.021e-02, -2.925e-01, 1.067e-01, -1.191e-01, -2.021e-02, -3.075e-01));
	r += mul(s1_0, M4(9.206e-02, 2.262e-01, 9.150e-02, -1.651e-01, 7.401e-03, -1.222e-01, 1.713e-01, 4.747e-02, -2.561e-02, 6.410e-02, -1.629e-02, 7.055e-02, 1.527e-03, -7.914e-02, 6.139e-02, 8.108e-02));
	r += mul(s1_1, M4(8.727e-02, 4.398e-01, 2.972e-01, 3.134e-02, 1.033e-01, 5.863e-02, 7.749e-01, 1.031e-01, 1.649e-01, 1.863e-02, 1.794e-01, 3.115e-01, 1.140e-01, -3.967e-02, 1.772e-01, 2.070e-01));
	r += mul(s1_2, M4(4.500e-01, 2.978e-02, 4.716e-01, 2.949e-01, 2.705e-01, 8.170e-02, 7.280e-02, 1.762e-01, -1.826e-01, 1.426e-03, 6.995e-01, -1.212e-02, -9.949e-02, -4.046e-02, 3.779e-01, -4.607e-02));
	r += mul(s1_3, M4(-4.957e-01, -1.260e-01, -8.417e-02, 2.163e-01, -1.538e-01, -2.901e-02, 2.146e-02, 1.445e-01, -2.249e-01, 1.028e-01, 1.276e-02, 7.104e-02, -4.502e-02, -3.197e-02, 1.048e-01, -4.624e-03));
	r += mul(s1_4, M4(2.201e-01, -1.854e-01, 2.199e-01, -6.644e-02, -6.269e-01, 1.322e-01, -5.410e-01, 6.582e-01, 2.917e-01, 2.005e-01, -1.446e-01, 3.333e-02, 2.895e-02, -2.359e-01, -2.368e-01, -4.412e-01));
	r += mul(s1_5, M4(1.336e-02, -3.150e-01, -3.365e-01, 2.100e-01, -1.232e-01, 5.976e-02, -6.838e-02, -6.219e-02, -6.987e-01, 8.644e-02, -5.173e-01, -7.447e-01, 2.119e-01, -2.227e-01, -6.958e-02, 5.051e-03));
	r += mul(s1_6, M4(-1.175e-01, -2.199e-03, -2.328e-01, -2.405e-01, 1.469e-01, 2.685e-01, -1.281e-02, -5.485e-01, -8.871e-02, 7.002e-02, -1.174e-01, -3.945e-01, -5.855e-02, -7.670e-02, -8.274e-02, -2.764e-01));
	r += mul(s1_7, M4(-2.007e-01, -1.232e-01, -3.341e-01, -8.448e-02, 2.839e-01, 1.510e-01, -2.420e-01, -6.634e-01, -3.385e-02, 2.686e-01, 1.760e-02, 8.421e-02, -2.651e-02, -3.698e-01, 1.382e-01, 4.625e-01));
	r += mul(s1_8, M4(-5.030e-02, 5.937e-02, -8.966e-02, -1.781e-01, -7.364e-02, -9.073e-03, 8.081e-02, -2.326e-03, 2.190e-01, -6.647e-02, 9.247e-02, 4.046e-01, -2.174e-02, -2.207e-01, 2.966e-03, 2.235e-01));
	r += V4(1.449e-03, -8.160e-03, 1.581e-04, 4.225e-03);
	return r;
}
void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = max(-s0_0, 0.0);
	V4 s1_1 = max(-s0_1, 0.0);
	V4 s1_2 = max(-s0_2, 0.0);
	V4 s1_3 = max(-s0_3, 0.0);
	V4 s1_4 = max(-s0_4, 0.0);
	V4 s1_5 = max(-s0_5, 0.0);
	V4 s1_6 = max(-s0_6, 0.0);
	V4 s1_7 = max(-s0_7, 0.0);
	V4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 3
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-DS-conv2
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(9.963e-02, 6.515e-02, 2.291e-01, 3.488e-01, 1.710e-02, -3.597e-02, 1.199e-01, -2.074e-01, 4.955e-02, 5.913e-03, -6.812e-02, -1.848e-03, 7.838e-02, -1.877e-02, 2.578e-02, -5.265e-02));
	r += mul(s0_1, M4(1.030e-01, 2.455e-01, -4.086e-01, 6.313e-02, 1.704e-01, 2.661e-01, -6.621e-01, -4.357e-01, -3.532e-02, 5.901e-02, -4.534e-02, 8.386e-03, 1.323e-01, 6.851e-02, 9.115e-02, -1.694e-01));
	r += mul(s0_2, M4(-4.639e-01, 5.770e-02, -1.460e-02, 5.934e-02, -4.012e-01, 1.703e-01, -1.454e-02, 1.594e-01, -2.410e-02, 1.309e-02, -1.472e-02, -4.021e-03, 3.096e-01, -1.642e-01, -1.340e-02, -3.650e-02));
	r += mul(s0_3, M4(-7.280e-02, 7.692e-02, 3.040e-01, -4.353e-02, -1.607e-01, 1.878e-01, 3.641e-01, -2.321e-01, 7.110e-02, 1.200e-01, -2.470e-01, -7.292e-02, -4.439e-02, -1.112e-02, 1.948e-01, -7.983e-02));
	r += mul(s0_4, M4(-1.713e-01, 1.965e-01, 1.264e-01, -5.854e-03, -3.976e-01, 2.999e-01, -6.019e-01, -1.729e-02, -1.388e-01, -3.105e-01, -4.233e-02, 1.631e-02, 3.287e-01, 4.561e-01, -3.662e-01, 2.786e-01));
	r += mul(s0_5, M4(3.760e-01, 5.423e-03, -7.641e-02, -6.266e-02, 4.960e-02, -2.688e-02, 9.801e-02, 4.553e-02, -1.946e-01, 7.921e-02, 3.430e-02, 4.105e-02, 4.246e-02, 2.941e-02, 3.080e-02, -1.438e-01));
	r += mul(s0_6, M4(5.045e-02, 6.860e-03, 2.014e-02, -3.160e-02, 5.594e-02, 5.584e-02, -1.093e-01, -4.217e-02, -3.217e-02, -2.489e-02, 6.056e-01, 5.948e-02, 1.625e-02, 4.475e-02, -6.378e-03, 2.028e-02));
	r += mul(s0_7, M4(4.747e-02, 4.046e-02, -8.065e-03, 2.520e-02, -6.668e-02, -1.483e-02, 1.704e-01, 3.724e-02, -7.148e-01, 1.171e-01, 4.087e-02, -6.946e-02, 4.534e-02, 3.239e-02, 2.627e-02, -5.410e-02));
	r += mul(s0_8, M4(7.643e-02, -1.749e-02, -1.943e-02, -2.646e-02, 1.308e-02, -3.709e-02, 1.042e-02, -9.757e-03, 2.920e-01, 2.643e-02, -1.396e-02, 3.865e-02, -6.300e-02, 2.531e-02, 9.025e-03, 4.872e-02));
	r += mul(s1_0, M4(4.342e-02, 2.632e-02, 1.314e-01, 4.735e-01, -8.740e-02, -6.052e-02, 1.313e-01, -9.078e-03, 5.795e-02, 1.291e-02, -1.832e-02, -7.444e-02, 2.431e-02, 2.899e-02, -2.545e-01, 1.183e-01));
	r += mul(s1_1, M4(-5.844e-02, -5.243e-02, -2.098e-01, -2.784e-01, 9.254e-02, -2.832e-02, -1.338e-02, -4.012e-03, -4.949e-02, -2.317e-02, 3.971e-03, -3.561e-02, -7.865e-02, -8.460e-02, -1.847e-01, 3.683e-01));
	r += mul(s1_2, M4(-1.031e-01, -1.340e-01, 2.223e-02, -1.772e-02, 1.634e-01, 3.454e-03, 1.264e-02, 6.970e-05, -5.072e-02, 1.320e-02, 1.639e-02, -4.263e-03, 4.740e-02, 1.248e-01, -5.399e-02, -7.056e-02));
	r += mul(s1_3, M4(2.287e-02, 2.194e-02, -4.580e-02, 2.198e-01, 6.393e-02, 2.449e-02, 8.031e-02, -2.885e-02, 2.196e-02, -2.133e-02, -2.935e-01, -5.625e-01, 1.067e-01, 4.231e-02, -2.455e-01, 1.396e-01));
	r += mul(s1_4, M4(-2.173e-02, 5.053e-02, -3.912e-01, -6.714e-02, 1.550e-01, -3.974e-02, 1.869e-01, 1.987e-01, -2.031e-01, 2.198e-01, -2.105e-01, -3.049e-01, -8.219e-02, -4.832e-01, 1.009e+00, -8.519e-02));
	r += mul(s1_5, M4(-2.352e-01, -1.957e-02, -4.161e-02, -5.781e-02, 3.290e-01, 1.006e-02, -1.841e-02, -9.789e-02, -4.876e-03, -7.712e-02, -2.240e-02, 3.688e-04, 9.473e-01, 1.733e-01, -6.793e-02, 9.940e-02));
	r += mul(s1_6, M4(-1.298e-02, -1.113e-02, 2.637e-02, -2.160e-04, -3.884e-03, -1.734e-02, -7.226e-02, 5.658e-02, -1.148e-02, 2.013e-02, -4.397e-01, 4.355e-01, -1.194e-02, -1.478e-02, 1.697e-01, 2.953e-03));
	r += mul(s1_7, M4(-7.767e-02, -1.795e-02, 2.546e-02, -4.077e-02, 9.547e-03, -4.238e-03, 5.839e-03, -4.064e-02, -3.369e-01, -2.516e-01, -1.518e-01, 3.561e-01, 8.114e-03, -6.311e-02, -6.578e-02, 6.915e-02));
	r += mul(s1_8, M4(-6.434e-02, 1.212e-02, -3.992e-02, 1.442e-02, 2.551e-04, 2.484e-04, 2.383e-02, 3.102e-02, -1.062e-01, -5.916e-02, 3.208e-02, -3.639e-03, 2.901e-01, 3.613e-03, 9.094e-03, 4.152e-02));
	r += V4(-2.170e-03, 9.271e-05, -3.130e-03, -4.421e-04);
	return r;
}
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = max(-s0_0, 0.0);
	V4 s1_1 = max(-s0_1, 0.0);
	V4 s1_2 = max(-s0_2, 0.0);
	V4 s1_3 = max(-s0_3, 0.0);
	V4 s1_4 = max(-s0_4, 0.0);
	V4 s1_5 = max(-s0_5, 0.0);
	V4 s1_6 = max(-s0_6, 0.0);
	V4 s1_7 = max(-s0_7, 0.0);
	V4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 4
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-DS-conv3
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(2.916e-03, 2.081e-03, -3.676e-03, -1.113e-03, -2.188e-02, 4.030e-02, -3.437e-02, -2.087e-02, 4.382e-02, 6.914e-04, -3.741e-02, 4.289e-02, 3.886e-02, 2.188e-03, 5.216e-02, 1.255e-01));
	r += mul(s0_1, M4(-4.600e-02, -8.491e-03, 9.254e-04, 5.554e-03, -2.967e-02, -5.993e-02, -1.077e-01, -3.716e-02, 3.956e-02, -6.042e-02, 9.761e-03, 1.420e-01, 1.867e-02, 2.439e-02, 1.509e-01, 2.055e-01));
	r += mul(s0_2, M4(4.011e-03, 1.947e-02, 1.415e-02, 7.103e-03, 3.874e-02, -7.521e-03, -2.034e-02, 1.763e-02, 7.533e-02, 5.679e-03, 1.412e-01, 8.676e-02, -1.691e-02, 1.386e-02, 2.064e-02, 5.871e-02));
	r += mul(s0_3, M4(1.553e-02, -3.482e-02, -4.599e-02, -1.127e-01, 1.137e-01, -1.946e-02, 2.789e-02, 1.977e-01, -4.893e-02, 7.146e-03, 3.499e-02, -3.857e-02, -5.293e-02, 2.462e-02, -6.920e-02, -6.298e-02));
	r += mul(s0_4, M4(3.746e-02, 1.500e-01, 1.411e-01, -1.307e-02, 2.923e-01, -3.874e-02, 3.799e-01, -1.865e-01, -4.840e-01, 9.785e-01, 3.449e-01, 3.499e-02, -1.694e-01, 1.705e-02, -4.565e-01, -1.038e-01));
	r += mul(s0_5, M4(-5.676e-02, -3.082e-02, -8.081e-02, -9.512e-03, -2.334e-01, -1.081e-01, -1.929e-01, 2.486e-02, -2.959e-01, -8.521e-02, -5.765e-01, 9.939e-02, -3.131e-01, -2.005e-01, -4.781e-01, -4.997e-02));
	r += mul(s0_6, M4(1.942e-03, -1.422e-02, 1.145e-02, 1.493e-04, -3.518e-03, 1.927e-02, -2.837e-02, -6.791e-02, 3.274e-03, 1.434e-02, -2.302e-02, 1.295e-02, -9.132e-03, 2.292e-02, 1.685e-02, -1.679e-02));
	r += mul(s0_7, M4(1.137e-01, 5.041e-02, 1.694e-01, 8.418e-02, -1.081e-01, 3.769e-02, 2.015e-01, -1.838e-01, 7.595e-02, -1.906e-02, 1.096e-01, 5.615e-03, 1.204e-01, -2.586e-02, 1.952e-01, 1.285e-02));
	r += mul(s0_8, M4(8.545e-04, -1.212e-02, -8.134e-02, 1.077e-02, -4.994e-02, -2.257e-02, -1.870e-01, 2.329e-02, -8.375e-02, 2.704e-02, -1.518e-01, 8.722e-03, -5.465e-02, 2.141e-03, -1.356e-01, 2.631e-02));
	r += mul(s1_0, M4(-6.400e-02, -1.293e-02, 1.708e-02, 9.698e-02, 1.480e-01, -1.445e-01, -2.902e-01, -2.132e-01, 3.696e-02, -1.333e-02, 1.453e-02, 1.010e-01, -2.065e-03, 1.506e-02, 1.365e-02, 5.003e-02));
	r += mul(s1_1, M4(2.365e-03, 5.282e-02, 1.479e-01, 4.480e-02, -1.299e-01, -9.201e-02, -1.201e-02, -1.367e-02, 6.208e-02, 3.673e-02, -6.886e-04, -1.081e-03, -6.539e-04, -1.605e-02, 2.237e-02, -1.788e-03));
	r += mul(s1_2, M4(-3.009e-02, 1.857e-02, -2.040e-02, 4.869e-03, -1.109e-01, -9.124e-03, -6.274e-02, 3.650e-02, -5.845e-02, -1.212e-03, 3.189e-03, -4.161e-02, 3.001e-02, -1.286e-02, 2.146e-02, 2.084e-02));
	r += mul(s1_3, M4(5.255e-01, 1.145e-01, -8.089e-02, 1.519e+00, 3.174e-01, -1.490e-01, 1.779e-01, -2.017e-01, 6.011e-02, 3.882e-02, -3.784e-02, 4.445e-02, 3.355e-02, -1.741e-02, -5.331e-02, -7.311e-03));
	r += mul(s1_4, M4(-3.661e-01, -2.210e-01, -3.330e-01, 7.684e-02, 2.725e-01, 4.250e-01, 2.289e+00, 5.643e-02, 1.698e-01, -8.747e-02, -3.701e-01, -1.615e-01, -2.191e-01, 2.374e-02, 2.251e-01, 1.745e-01));
	r += mul(s1_5, M4(-6.175e-02, 2.548e-03, -1.089e-01, -1.326e-02, -1.752e-01, -5.349e-02, -3.028e-03, 2.980e-03, 1.812e-01, 1.948e-01, 4.718e-01, -1.050e-01, 8.504e-02, -8.345e-03, -1.421e-01, 7.008e-02));
	r += mul(s1_6, M4(-4.657e-01, 1.353e-01, 4.863e-02, -7.613e-01, -4.164e-01, 2.650e-01, -2.158e-01, 1.814e-01, 3.528e-02, -1.492e-02, -1.126e-02, 5.477e-02, 1.253e-01, -2.505e-02, -1.756e-02, -2.991e-02));
	r += mul(s1_7, M4(3.285e-02, 1.274e-01, 3.135e-01, -6.969e-02, -9.024e-01, -6.819e-02, -8.085e-01, -5.281e-02, -2.458e-01, 5.231e-02, -2.287e-01, -1.801e-01, 1.567e-01, -6.956e-02, 5.567e-01, -1.068e-01));
	r += mul(s1_8, M4(-4.505e-02, 1.518e-02, 1.628e-02, -4.332e-02, -2.405e-01, -2.218e-01, -3.377e-01, 4.406e-02, 7.797e-02, -1.516e-02, 1.643e-01, 3.517e-02, 3.265e-02, -1.094e-03, 1.831e-01, 3.196e-03));
	r += V4(-2.653e-03, 1.571e-03, 4.194e-03, 3.504e-04);
	return r;
}
void Pass4(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = max(-s0_0, 0.0);
	V4 s1_1 = max(-s0_1, 0.0);
	V4 s1_2 = max(-s0_2, 0.0);
	V4 s1_3 = max(-s0_3, 0.0);
	V4 s1_4 = max(-s0_4, 0.0);
	V4 s1_5 = max(-s0_5, 0.0);
	V4 s1_6 = max(-s0_6, 0.0);
	V4 s1_7 = max(-s0_7, 0.0);
	V4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 5
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-DS-out
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(1.210e-01, 3.479e-02, 3.303e-02, 2.020e-02, 5.328e-02, 3.229e-02, 4.094e-02, 3.233e-02, 1.151e-01, 5.334e-02, 1.669e-02, 3.183e-03, -9.448e-02, -1.976e-02, -1.569e-02, -6.358e-03));
	r += mul(s0_1, M4(8.139e-02, 2.026e-01, -2.516e-02, 2.662e-02, 1.751e-01, 1.003e-01, -2.357e-02, 3.321e-02, -2.518e-02, 3.472e-02, -1.720e-02, -2.364e-02, -1.007e-01, -1.174e-01, -1.620e-02, -1.797e-02));
	r += mul(s0_2, M4(3.519e-02, 1.624e-02, 4.055e-02, 1.779e-02, -6.160e-02, 7.187e-02, -2.968e-02, -1.060e-02, 6.644e-03, -1.559e-02, -2.253e-03, -3.266e-03, -3.240e-02, -9.345e-02, 6.814e-04, -2.509e-02));
	r += mul(s0_3, M4(8.916e-02, 5.239e-02, 3.525e-01, 8.402e-02, -4.606e-02, 3.739e-03, 5.889e-03, 1.292e-02, 1.426e-01, -4.600e-02, 3.077e-01, 3.317e-02, -5.895e-02, -3.899e-02, -2.173e-01, -5.317e-02));
	r += mul(s0_4, M4(-6.543e-01, -5.020e-01, -2.310e-01, 3.152e-01, 6.473e-02, -3.740e-01, 3.331e-01, -1.808e-01, 6.316e-02, 3.467e-01, -1.029e-02, 3.018e-01, 4.633e-01, 1.365e-01, -6.909e-02, -2.112e-01));
	r += mul(s0_5, M4(1.346e-02, -1.427e-01, 2.690e-03, -2.222e-01, -4.370e-02, 1.191e-01, -5.579e-02, 1.538e-01, -5.655e-05, -5.206e-03, 1.333e-02, -1.026e-02, -2.693e-02, 1.987e-01, 4.458e-02, 5.958e-02));
	r += mul(s0_6, M4(-4.697e-03, 8.930e-02, -8.566e-02, 6.300e-02, -4.407e-02, 3.417e-02, -1.149e-01, 2.606e-02, 1.963e-02, 6.796e-04, 2.516e-02, -1.458e-02, -2.135e-02, -4.582e-02, 2.464e-02, -4.041e-02));
	r += mul(s0_7, M4(5.239e-02, 3.934e-03, -7.317e-02, -2.241e-01, 4.308e-02, -4.430e-03, 5.972e-02, -6.376e-02, -3.120e-02, 6.183e-03, -3.062e-02, 2.654e-02, 9.076e-04, 4.750e-03, 7.457e-02, 4.363e-02));
	r += mul(s0_8, M4(-1.746e-02, 1.985e-02, -1.898e-02, 4.139e-02, -1.510e-02, 4.368e-02, -1.568e-02, 7.135e-02, 2.088e-03, -2.113e-02, -3.149e-03, -3.848e-02, 2.193e-02, -1.820e-02, 4.962e-03, -1.725e-02));
	r += mul(s1_0, M4(-1.622e-01, -1.998e-02, -1.341e-02, -2.602e-02, -4.207e-01, 5.593e-02, -4.413e-02, 9.445e-02, -4.213e-01, -1.569e-02, -3.770e-02, 4.763e-02, -5.221e-02, 1.131e-01, 8.283e-02, 9.828e-02));
	r += mul(s1_1, M4(-2.202e-03, -3.279e-02, -1.290e-02, -7.019e-02, -3.166e-01, 4.960e-01, -2.897e-01, -1.372e-01, 1.898e-01, -5.028e-01, 1.636e-01, 1.282e-01, 2.104e-01, -2.402e-02, 2.075e-02, -8.407e-02));
	r += mul(s1_2, M4(-1.115e-02, -5.367e-02, -2.504e-02, -6.909e-02, 3.004e-02, -1.072e-01, 2.688e-03, 2.400e-02, -6.909e-03, 1.583e-02, -6.863e-03, -7.478e-03, -1.343e-02, -1.003e-02, 6.891e-03, 3.798e-02));
	r += mul(s1_3, M4(-4.691e-02, -3.181e-02, -1.274e-01, -9.209e-02, 5.020e-01, 5.293e-01, -1.349e+00, 3.369e-01, -5.147e-02, 2.176e-02, -1.676e-01, 4.151e-02, 1.898e-02, 4.416e-02, 4.235e-02, 7.551e-02));
	r += mul(s1_4, M4(1.833e-01, 3.467e-01, 1.977e-01, 4.179e-01, -1.450e-01, 1.523e-01, -1.886e-01, -4.711e-01, 6.221e-02, -2.427e-01, 3.726e-02, -6.034e-01, -2.533e-01, -2.183e-01, -2.163e-01, -1.048e-01));
	r += mul(s1_5, M4(-1.278e-02, 4.724e-02, 1.542e-02, 1.092e-01, -4.697e-02, -1.526e-01, 2.557e-02, -1.619e-01, -1.965e-02, 1.944e-03, -2.145e-02, 1.537e-03, 1.700e-02, -8.127e-02, -1.940e-02, -1.919e-01));
	r += mul(s1_6, M4(2.959e-02, -3.578e-02, 7.464e-02, -5.111e-02, 3.408e-02, -3.499e-02, 3.057e-01, 4.196e-02, -9.118e-03, 2.033e-02, -6.934e-02, 1.511e-02, 4.445e-03, 1.659e-02, -4.566e-02, 1.036e-02));
	r += mul(s1_7, M4(-1.837e-02, -2.435e-03, 5.806e-03, 9.009e-02, -9.710e-02, -3.591e-02, -4.808e-02, 1.621e-01, 3.704e-03, 4.462e-04, -2.843e-03, -8.179e-02, 8.636e-03, 1.484e-03, 6.718e-03, -5.583e-02));
	r += mul(s1_8, M4(1.296e-02, -9.614e-03, -8.147e-03, -4.830e-02, 9.136e-03, -5.748e-02, 3.104e-02, -4.224e-02, -1.690e-02, 1.796e-03, -1.121e-02, 3.708e-02, -1.003e-02, -5.460e-03, 5.122e-03, 2.861e-02));
	r += V4(-1.874e-03, -2.372e-03, -2.281e-03, -2.099e-03);
	return tanh(r);
}
void Pass5(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = max(-s0_0, 0.0);
	V4 s1_1 = max(-s0_1, 0.0);
	V4 s1_2 = max(-s0_2, 0.0);
	V4 s1_3 = max(-s0_3, 0.0);
	V4 s1_4 = max(-s0_4, 0.0);
	V4 s1_5 = max(-s0_5, 0.0);
	V4 s1_6 = max(-s0_6, 0.0);
	V4 s1_7 = max(-s0_7, 0.0);
	V4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 6
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-DS-shuffle
//!STYLE PS
//!IN t0, INPUT
float4 Pass6(float2 pos) {
	float2 pt = float2(GetInputPt());
	const static float3x3 rgb2yuv = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081};
	const static float3x3 yuv2rgb = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float4 r = 0.0;
	float2 size = float2(GetInputSize());
	float2 f = frac(pos * size);
	float3 yuv = mul(rgb2yuv, INPUT.SampleLevel(SL, pos, 0).rgb);
	int2 i = int2(f * 2.0);
	r.r = t0.SampleLevel(SP, (float2(0.5, 0.5) - f) * pt + pos, 0)[2*i.y + i.x];
	r.r += yuv.r;
	r.a = 1.0;
	r.r = clamp(r, 0.0, 1.0);
	float3 px = mul(yuv2rgb, float3(r.r, yuv.yz));
	return float4(px, 1.0);
}
