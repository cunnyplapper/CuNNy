// CuNNy 2x4C BILINEAR CHROMA NVL DS
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

//!MAGPIE EFFECT
//!VERSION 3
//!OUTPUT_WIDTH INPUT_WIDTH * 2
//!OUTPUT_HEIGHT INPUT_HEIGHT * 2

//!TEXTURE
Texture2D INPUT;


//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t1;

//!PASS 1
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-NVL-DS-in
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) (dot(float3(-0.8193134069442749, -1.5828657150268555, -0.3418111801147461), O(INPUT, float2(x, y)).rgb) + 2.5450968742370605)
float4 f0(float2 pt, float2 pos, min16float s0_0, min16float s0_1, min16float s0_2, min16float s0_3, min16float s0_4, min16float s0_5, min16float s0_6, min16float s0_7, min16float s0_8) {
	V4 r = 0.0;
	r += V4(3.894e-02, -1.362e-01, -4.105e-02, 1.290e-01) * s0_0;
	r += V4(-3.038e-01, 1.942e-01, -4.739e-04, -6.114e-01) * s0_1;
	r += V4(5.971e-02, 1.586e-01, 2.193e-02, 6.055e-02) * s0_2;
	r += V4(4.932e-01, 5.415e-02, -2.941e-03, -1.636e-01) * s0_3;
	r += V4(-2.875e-01, -4.346e-01, 6.385e-01, 6.420e-01) * s0_4;
	r += V4(-3.589e-02, 5.495e-02, -3.206e-01, -2.850e-02) * s0_5;
	r += V4(-8.488e-02, 1.537e-01, 1.678e-02, -1.277e-02) * s0_6;
	r += V4(1.397e-01, 6.746e-02, -2.373e-01, 2.022e-02) * s0_7;
	r += V4(-1.681e-02, -1.146e-01, -7.412e-02, -3.256e-02) * s0_8;
	r += V4(-6.092e-03, 4.616e-03, 4.262e-03, 3.864e-03);
	return r;
}
void Pass1(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float s0_0 = l0(-1.0, -1.0);
	min16float s0_1 = l0(0.0, -1.0);
	min16float s0_2 = l0(1.0, -1.0);
	min16float s0_3 = l0(-1.0, 0.0);
	min16float s0_4 = l0(0.0, 0.0);
	min16float s0_5 = l0(1.0, 0.0);
	min16float s0_6 = l0(-1.0, 1.0);
	min16float s0_7 = l0(0.0, 1.0);
	min16float s0_8 = l0(1.0, 1.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8);
}
//!PASS 2
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-NVL-DS-conv1
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-1.692e-01, 3.277e-03, -4.194e-02, 3.471e-02, -1.334e-01, -3.319e-02, 7.179e-02, 1.227e-01, 1.204e-01, 6.518e-02, 2.438e-01, -1.575e-01, 1.212e-01, -3.762e-02, 2.923e-03, 2.499e-02));
	r += mul(s0_1, M4(-3.923e-02, -1.141e-01, -2.872e-01, 7.945e-02, -1.796e-01, -1.152e-01, -2.222e-01, 7.172e-02, 1.405e-01, 2.779e-01, 2.057e-01, -2.232e-01, 2.161e-01, 6.421e-02, -1.815e-03, -1.096e-01));
	r += mul(s0_2, M4(5.577e-02, -1.367e-01, 1.818e-01, -8.789e-02, -9.763e-02, 1.997e-03, 7.976e-03, 1.266e-02, 7.189e-02, -3.306e-02, 1.976e-02, -3.528e-02, 8.112e-02, 7.788e-02, -1.247e-01, -2.146e-02));
	r += mul(s0_3, M4(3.619e-02, -1.013e-02, -2.338e-02, 1.937e-02, -6.661e-01, -9.005e-02, 4.943e-02, 3.966e-02, 7.542e-02, 2.170e-01, 1.004e-01, -1.506e-01, 2.802e-01, -5.038e-02, -6.224e-03, -1.911e-01));
	r += mul(s0_4, M4(-1.188e-01, 1.536e-01, 6.471e-02, 1.005e-01, -1.777e-01, -2.343e-01, -3.445e-02, 1.680e-01, -8.290e-02, -2.735e-01, -1.871e-01, 3.935e-01, -1.858e-01, 1.121e-01, 5.912e-02, -7.096e-04));
	r += mul(s0_5, M4(5.300e-03, -3.078e-01, -1.073e-01, 5.537e-01, 7.555e-02, 2.207e-02, 9.291e-02, -1.184e-01, 7.152e-02, 8.811e-02, 1.184e-01, -7.657e-02, 5.580e-02, 1.071e-01, -5.453e-02, -2.326e-01));
	r += mul(s0_6, M4(2.749e-02, 8.671e-03, 4.630e-02, -2.668e-02, -1.023e-01, -2.294e-02, 6.240e-02, 2.353e-02, 7.791e-02, 9.839e-02, 2.910e-02, 7.934e-02, -1.248e-01, 3.003e-02, 1.963e-01, -1.100e-01));
	r += mul(s0_7, M4(4.831e-02, 8.709e-02, -2.054e-02, -6.591e-02, 3.078e-02, 8.597e-02, -1.423e-01, 1.778e-02, 1.111e-01, 8.612e-03, 5.170e-02, -1.509e-01, -4.623e-02, 1.753e-01, 2.906e-01, 1.948e-01));
	r += mul(s0_8, M4(-5.870e-02, -9.641e-02, -2.361e-02, 1.416e-01, -6.514e-02, 1.286e-02, -1.002e-01, 8.191e-02, -5.317e-02, -5.957e-02, -9.189e-02, 6.869e-02, 8.716e-02, -4.471e-02, 2.526e-01, -1.436e-01));
	r += mul(s1_0, M4(3.692e-02, -1.752e-02, 1.535e-02, 3.430e-02, -4.072e-01, 3.739e-02, 1.653e-01, 2.355e-02, 8.145e-02, 7.054e-02, -6.028e-01, 3.146e-02, -1.924e-02, 2.324e-02, -6.918e-02, -3.651e-02));
	r += mul(s1_1, M4(-3.700e-02, 8.903e-02, 1.628e-01, -1.597e-02, -2.979e-01, 6.804e-03, 1.792e-01, 1.558e-01, 1.038e-01, -3.238e-01, -1.739e-01, 5.366e-03, 1.005e-01, -4.222e-02, -1.376e-01, -1.556e-02));
	r += mul(s1_2, M4(-4.779e-04, 1.718e-01, -8.936e-02, -2.921e-04, -2.926e-02, -4.058e-02, -3.580e-02, 2.090e-02, -8.015e-03, -2.125e-03, 4.312e-02, -2.272e-03, 3.426e-02, -3.454e-02, 1.194e-01, -8.460e-02));
	r += mul(s1_3, M4(-4.979e-02, 1.651e-02, -2.179e-02, -2.341e-02, 1.422e-01, -5.297e-02, 2.638e-01, 6.327e-02, 2.690e-01, -7.425e-02, -3.293e-01, 2.983e-01, -4.581e-02, 1.280e-01, -3.419e-01, 8.126e-02));
	r += mul(s1_4, M4(9.017e-02, 3.061e-03, -2.959e-01, -1.763e-01, -1.929e-01, -4.688e-02, -6.467e-02, -1.069e-01, 1.938e-01, 3.370e-01, 6.660e-01, -3.652e-01, 4.312e-01, 5.187e-01, -3.518e-01, -3.884e-01));
	r += mul(s1_5, M4(-9.621e-02, 2.440e-01, 2.822e-01, -4.092e-01, -2.456e-01, -2.541e-02, -1.868e-01, 1.587e-01, -4.272e-02, -9.786e-02, -8.305e-02, 1.030e-01, -3.415e-02, -3.584e-02, 2.317e-01, 9.299e-02));
	r += mul(s1_6, M4(-5.147e-02, 2.770e-02, -1.024e-01, 3.414e-02, -7.595e-02, -5.578e-02, -6.377e-02, 4.728e-02, 1.994e-02, 1.810e-03, -4.435e-02, -3.623e-02, 1.713e-01, 1.282e-01, -1.707e-01, 8.203e-02));
	r += mul(s1_7, M4(-1.551e-01, -7.652e-03, 3.128e-02, 2.686e-01, -1.926e-01, -1.197e-01, -1.619e-01, -1.010e-01, -7.886e-02, -7.094e-02, 9.945e-02, 1.907e-01, 8.938e-02, 1.540e-01, 7.910e-02, 4.308e-01));
	r += mul(s1_8, M4(-4.174e-02, -5.652e-02, 3.184e-01, 2.659e-02, -7.744e-02, 2.260e-02, 1.261e-02, 2.481e-02, 6.971e-02, 5.530e-02, 4.060e-02, -6.212e-02, -6.170e-02, -1.598e-01, 6.711e-02, 1.924e-01));
	r += V4(-6.506e-04, -2.455e-03, -6.882e-03, 3.583e-03);
	return r;
}
void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = max(-s0_0, 0.0);
	V4 s1_1 = max(-s0_1, 0.0);
	V4 s1_2 = max(-s0_2, 0.0);
	V4 s1_3 = max(-s0_3, 0.0);
	V4 s1_4 = max(-s0_4, 0.0);
	V4 s1_5 = max(-s0_5, 0.0);
	V4 s1_6 = max(-s0_6, 0.0);
	V4 s1_7 = max(-s0_7, 0.0);
	V4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 3
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-NVL-DS-conv2
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(9.093e-03, -1.128e-01, -3.190e-02, 1.086e-03, 1.136e-02, -1.294e-01, -1.960e-01, -3.820e-02, 7.134e-02, 2.898e-01, -1.827e-01, 7.533e-02, 5.900e-02, -2.804e-01, -4.570e-01, -1.087e-01));
	r += mul(s0_1, M4(-5.238e-02, 2.627e-01, 7.910e-02, 7.944e-02, -2.298e-01, 1.967e-01, 1.056e-01, 1.135e-01, 1.549e-01, 4.058e-01, 1.754e-01, 2.323e-02, 3.646e-02, 7.370e-02, 1.591e-01, 1.459e-02));
	r += mul(s0_2, M4(-8.178e-02, 2.915e-02, -9.634e-03, 7.503e-04, -5.422e-02, -7.732e-03, 1.475e-02, -6.989e-02, -3.373e-02, 2.921e-02, 1.629e-02, -9.790e-02, -5.207e-02, -7.397e-02, 5.856e-03, -1.108e-01));
	r += mul(s0_3, M4(-7.615e-04, 5.221e-02, -2.407e-01, 3.012e-02, 9.795e-03, -1.356e-01, 9.155e-02, 3.862e-02, 2.639e-02, 2.203e-01, 1.191e-01, 1.028e-02, 2.418e-02, -2.569e-02, -3.877e-01, 6.705e-02));
	r += mul(s0_4, M4(-3.252e-01, -1.203e+00, 4.617e-01, -1.909e-01, 1.360e-01, 7.021e-02, -2.677e-01, 1.616e-02, -1.715e-01, -1.378e-01, 1.072e-01, 7.207e-01, 4.059e-03, 2.010e-01, 7.393e-01, 2.082e-01));
	r += mul(s0_5, M4(6.217e-01, 3.892e-01, -2.265e-01, 1.061e-01, -1.918e-02, 5.023e-02, 9.883e-02, 6.121e-02, -5.580e-02, 6.968e-03, -6.638e-02, 1.277e-01, -2.026e-01, 4.761e-02, 3.173e-02, -6.397e-02));
	r += mul(s0_6, M4(4.525e-02, 1.323e-01, -7.135e-02, 2.685e-02, -2.473e-02, 2.169e-02, 1.269e-01, -2.399e-02, -7.651e-05, 1.307e-02, -1.387e-02, 1.546e-02, -1.959e-02, -2.313e-02, -9.565e-02, 1.504e-02));
	r += mul(s0_7, M4(8.417e-02, 2.831e-01, 5.823e-02, 3.447e-01, 1.472e-03, -4.122e-03, 1.154e-01, -6.539e-02, 1.073e-02, 2.976e-02, -6.295e-02, 6.715e-02, 2.021e-02, 3.403e-02, 3.400e-02, 6.590e-02));
	r += mul(s0_8, M4(-2.239e-01, -1.006e-01, -2.409e-02, 1.459e-01, -1.427e-02, -5.940e-02, 8.179e-02, -8.461e-02, 3.261e-03, -3.542e-02, 1.622e-02, 1.332e-02, -1.645e-02, -5.558e-03, 2.640e-02, 1.554e-02));
	r += mul(s1_0, M4(-1.727e-02, 9.764e-02, 1.382e-01, 2.892e-02, -3.823e-01, -2.862e-01, 7.004e-01, 6.979e-03, 1.825e-02, 8.115e-03, 9.080e-03, -1.010e-02, -6.636e-02, 2.818e-01, 3.018e-01, 6.908e-02));
	r += mul(s1_1, M4(-6.193e-02, 3.185e-02, 1.231e-02, 2.413e-02, 1.157e-02, 5.510e-02, -8.240e-02, 1.575e-01, 2.703e-02, -1.968e-01, -1.150e-01, -2.285e-02, 3.237e-01, -3.597e-01, -2.384e-01, -1.568e-01));
	r += mul(s1_2, M4(-1.096e-01, -1.353e-03, 3.768e-02, 3.331e-02, 3.132e-02, 5.501e-02, 4.329e-02, 1.301e-01, -7.461e-02, -3.581e-02, -3.170e-02, 1.792e-02, 3.962e-02, 3.323e-03, -1.988e-03, 1.084e-01));
	r += mul(s1_3, M4(-4.817e-02, -5.405e-02, 7.874e-02, -2.269e-02, -2.357e-01, -2.418e-01, 1.927e-02, -4.725e-02, -3.534e-03, -2.169e-02, 7.691e-02, 7.443e-02, 7.310e-02, 5.294e-01, 6.252e-01, -4.092e-02));
	r += mul(s1_4, M4(-7.516e-02, -1.330e-01, -7.982e-02, -3.048e-02, 4.645e-03, -8.962e-02, 2.665e-01, -5.176e-01, -3.620e-02, -6.161e-01, 5.287e-02, -5.109e-02, -1.251e+00, -4.357e-01, -1.402e-01, 5.695e-02));
	r += mul(s1_5, M4(-1.792e-02, -3.809e-02, 1.761e-02, -2.095e-02, 7.166e-02, -1.308e-02, 4.180e-02, -5.425e-02, 2.420e-01, 4.724e-02, 1.811e-02, -9.938e-02, 4.588e-02, -7.448e-02, -4.017e-02, 1.057e-01));
	r += mul(s1_6, M4(1.348e-02, 5.603e-02, 4.708e-02, -1.085e-02, -4.035e-02, -8.639e-02, -1.298e-01, -5.701e-02, -1.080e-02, 3.616e-02, 8.974e-02, -4.091e-04, 1.316e-01, 9.070e-02, -3.087e-02, 8.175e-02));
	r += mul(s1_7, M4(-3.130e-02, 5.522e-03, 3.108e-02, -4.359e-02, 2.561e-02, 9.826e-02, -3.368e-02, 1.220e-01, -5.831e-02, -1.137e-01, -8.939e-02, 1.583e-02, 1.865e-01, 1.126e-01, 8.414e-02, -2.163e-01));
	r += mul(s1_8, M4(-5.402e-02, -1.140e-02, 2.006e-02, 5.377e-04, -6.662e-02, -2.998e-03, -7.839e-02, 8.452e-02, 1.923e-02, 6.462e-02, -3.090e-02, 3.136e-01, 2.869e-04, 7.054e-02, 2.915e-03, -9.458e-02));
	r += V4(-3.144e-03, -8.305e-04, 1.765e-03, 2.072e-03);
	return r;
}
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = max(-s0_0, 0.0);
	V4 s1_1 = max(-s0_1, 0.0);
	V4 s1_2 = max(-s0_2, 0.0);
	V4 s1_3 = max(-s0_3, 0.0);
	V4 s1_4 = max(-s0_4, 0.0);
	V4 s1_5 = max(-s0_5, 0.0);
	V4 s1_6 = max(-s0_6, 0.0);
	V4 s1_7 = max(-s0_7, 0.0);
	V4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 4
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-NVL-DS-out
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-2.139e-02, -4.220e-02, -1.751e-02, -7.374e-03, 1.096e-02, 5.098e-03, 4.234e-04, -3.266e-03, -1.111e-02, -1.846e-03, -3.646e-03, 4.223e-05, 3.546e-03, -6.477e-02, -1.190e-01, -3.294e-02));
	r += mul(s0_1, M4(4.428e-02, 7.495e-02, -8.855e-02, -6.140e-02, -8.250e-02, -8.933e-02, 3.765e-02, 4.661e-02, 1.889e-02, -5.955e-02, 3.429e-02, 2.240e-02, -1.250e-02, 1.841e-01, 1.684e-03, -2.837e-02));
	r += mul(s0_2, M4(-1.213e-02, 1.145e-01, -9.810e-03, -1.163e-02, 2.211e-03, -1.178e-02, 1.222e-02, 2.094e-02, 9.926e-03, 3.457e-02, 1.303e-02, -7.573e-04, -7.081e-03, -2.594e-02, -1.730e-02, -6.914e-03));
	r += mul(s0_3, M4(-1.832e-01, 5.607e-03, 2.465e-01, -3.082e-02, -3.377e-02, 7.378e-02, -8.699e-02, 1.747e-02, -1.007e-02, -2.081e-02, -2.863e-02, -1.216e-02, -7.071e-03, -1.390e-02, 1.646e-01, 1.065e-02));
	r += mul(s0_4, M4(-4.078e-01, -7.343e-01, -4.952e-03, 3.193e-01, 6.500e-01, 7.453e-02, -3.870e-02, -4.227e-01, -3.039e-01, -1.950e-01, -1.753e-01, -2.388e-01, -4.386e-02, 2.108e-02, 4.606e-02, 2.978e-01));
	r += mul(s0_5, M4(-1.295e-02, -7.543e-03, -4.006e-02, 2.975e-02, -6.357e-02, 8.471e-02, -2.460e-02, 7.388e-03, -3.834e-02, -9.741e-02, 8.576e-03, 4.740e-02, 1.923e-02, -2.082e-02, 2.227e-02, -3.073e-02));
	r += mul(s0_6, M4(1.082e-01, 1.782e-01, -1.829e-01, 6.595e-02, -4.111e-02, -9.295e-03, 7.013e-03, 4.113e-02, -9.792e-03, -6.929e-03, -4.494e-03, -1.780e-02, 4.890e-03, 8.637e-03, -2.091e-02, -1.038e-02));
	r += mul(s0_7, M4(-1.777e-02, 8.982e-02, -7.717e-02, -2.179e-01, 1.373e-04, -6.867e-02, 3.233e-01, 1.091e-01, 3.926e-02, 2.291e-02, -9.212e-02, -5.800e-03, -1.795e-03, 5.007e-04, -5.897e-02, -5.087e-02));
	r += mul(s0_8, M4(-1.498e-02, -1.824e-02, -1.579e-02, -2.571e-02, -2.072e-02, 3.056e-02, -9.905e-02, 3.306e-02, 3.573e-03, -1.236e-02, -2.556e-02, -1.057e-01, 3.210e-03, -4.691e-03, 4.587e-03, -1.126e-02));
	r += mul(s1_0, M4(5.206e-03, 1.148e-02, 1.406e-02, 5.832e-03, 7.306e-03, -9.663e-03, -1.042e-02, -3.267e-03, 2.456e-03, 5.925e-03, 4.956e-03, -4.492e-05, 2.270e-01, 6.331e-02, -1.156e-01, 6.119e-02));
	r += mul(s1_1, M4(3.019e-03, -1.956e-03, -4.138e-03, 1.158e-02, 1.501e-02, 4.153e-02, -2.089e-03, -6.227e-03, 5.568e-02, 6.457e-03, -6.722e-02, 1.350e-02, -2.006e-01, 8.566e-02, -6.130e-02, -1.547e-01));
	r += mul(s1_2, M4(-9.450e-03, -1.157e-02, -5.612e-03, -8.333e-03, -2.305e-02, -4.112e-02, 4.761e-03, 1.162e-03, -9.790e-03, -1.103e-01, 7.786e-02, -1.311e-02, -8.599e-04, -2.919e-02, -8.437e-03, 1.599e-02));
	r += mul(s1_3, M4(4.139e-02, 2.945e-03, 6.895e-02, 1.027e-02, -2.214e-02, -2.782e-03, 3.294e-03, -7.353e-03, 5.262e-02, 1.394e-02, 1.668e-02, 2.413e-02, -2.690e-01, 2.310e-01, -1.119e-01, -2.833e-01));
	r += mul(s1_4, M4(2.900e-01, 2.709e-01, -2.363e-02, 3.376e-02, -9.170e-02, -4.169e-02, 8.277e-02, 5.422e-02, 3.587e-01, 2.093e-02, 4.829e-01, -9.201e-05, -2.015e-01, -1.014e+00, 5.600e-01, 5.371e-01));
	r += mul(s1_5, M4(-1.569e-02, 2.533e-02, -1.707e-02, -1.272e-02, 7.147e-02, -7.629e-02, 3.284e-02, -2.293e-02, -3.396e-01, 6.836e-01, -3.371e-01, 3.724e-01, -1.871e-02, 1.919e-01, -2.151e-02, 1.119e-01));
	r += mul(s1_6, M4(-3.456e-02, -1.401e-03, -7.893e-02, -2.544e-02, 5.848e-03, 3.319e-03, -7.235e-03, 2.366e-03, -7.702e-03, -9.004e-03, 4.829e-02, 9.321e-04, -8.210e-02, -7.199e-02, 2.322e-01, 8.759e-03));
	r += mul(s1_7, M4(1.307e-02, -2.058e-02, 3.232e-01, 2.137e-01, -2.222e-02, 1.263e-02, -2.727e-01, -7.380e-02, -9.157e-04, -6.993e-03, 2.715e-02, 7.309e-03, 4.108e-01, 1.799e-01, -3.447e-01, 1.034e-01));
	r += mul(s1_8, M4(-9.894e-03, 1.593e-02, -1.089e-02, 4.573e-02, 2.469e-02, -1.592e-02, 9.953e-02, -1.573e-01, 4.340e-02, -2.107e-02, -6.242e-02, 2.331e-01, 3.600e-02, 2.781e-01, -9.290e-02, -3.114e-01));
	r += V4(-2.035e-04, -2.025e-04, -2.769e-04, -1.217e-04);
	return tanh(r);
}
void Pass4(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = max(-s0_0, 0.0);
	V4 s1_1 = max(-s0_1, 0.0);
	V4 s1_2 = max(-s0_2, 0.0);
	V4 s1_3 = max(-s0_3, 0.0);
	V4 s1_4 = max(-s0_4, 0.0);
	V4 s1_5 = max(-s0_5, 0.0);
	V4 s1_6 = max(-s0_6, 0.0);
	V4 s1_7 = max(-s0_7, 0.0);
	V4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 5
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-NVL-DS-shuffle
//!STYLE PS
//!IN t1, INPUT
float4 Pass5(float2 pos) {
	float2 pt = float2(GetInputPt());
	const static float3x3 rgb2yuv = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081};
	const static float3x3 yuv2rgb = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float4 r = 0.0;
	float2 size = float2(GetInputSize());
	float2 f = frac(pos * size);
	float3 yuv = mul(rgb2yuv, INPUT.SampleLevel(SL, pos, 0).rgb);
	int2 i = int2(f * 2.0);
	r.r = t1.SampleLevel(SP, (float2(0.5, 0.5) - f) * pt + pos, 0)[2*i.y + i.x];
	r.r += yuv.r;
	r.a = 1.0;
	r.r = clamp(r, 0.0, 1.0);
	float3 px = mul(yuv2rgb, float3(r.r, yuv.yz));
	return float4(px, 1.0);
}
