// CuNNy 2x4C BILINEAR CHROMA NVL DS
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

//!MAGPIE EFFECT
//!VERSION 3
//!OUTPUT_WIDTH INPUT_WIDTH * 2
//!OUTPUT_HEIGHT INPUT_HEIGHT * 2

//!TEXTURE
Texture2D INPUT;


//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t1;

//!PASS 1
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-NVL-DS-in
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) (dot(float3(0.4887976348400116, 0.9080252051353455, 0.21026206016540527), O(INPUT, float2(x, y)).rgb) + -1.550781488418579)
float4 f0(float2 pt, float2 pos, min16float s0_0, min16float s0_1, min16float s0_2, min16float s0_3, min16float s0_4, min16float s0_5, min16float s0_6, min16float s0_7, min16float s0_8) {
	V4 r = 0.0;
	r += V4(-1.648e-01, 2.612e-03, 4.104e-01, -6.541e-01) * s0_0;
	r += V4(4.460e-02, 1.386e-02, 1.144e-01, -5.238e-03) * s0_1;
	r += V4(2.067e-01, -8.687e-03, -1.136e-01, 1.089e-02) * s0_2;
	r += V4(1.332e-01, 1.155e-02, -4.772e-02, 7.186e-01) * s0_3;
	r += V4(-4.354e-01, -5.723e-01, -6.166e-01, -5.763e-02) * s0_4;
	r += V4(3.137e-02, 5.498e-01, 1.287e-01, -1.450e-02) * s0_5;
	r += V4(2.568e-01, 2.419e-02, -7.300e-02, -6.387e-02) * s0_6;
	r += V4(8.936e-02, -3.010e-02, 3.774e-03, 5.912e-02) * s0_7;
	r += V4(-1.567e-01, 8.388e-03, 1.909e-01, 5.474e-03) * s0_8;
	r += V4(1.255e-04, 8.788e-04, -1.688e-04, -8.220e-04);
	return r;
}
void Pass1(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float s0_0 = l0(-1.0, -1.0);
	min16float s0_1 = l0(0.0, -1.0);
	min16float s0_2 = l0(1.0, -1.0);
	min16float s0_3 = l0(-1.0, 0.0);
	min16float s0_4 = l0(0.0, 0.0);
	min16float s0_5 = l0(1.0, 0.0);
	min16float s0_6 = l0(-1.0, 1.0);
	min16float s0_7 = l0(0.0, 1.0);
	min16float s0_8 = l0(1.0, 1.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8);
}
//!PASS 2
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-NVL-DS-conv1
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-3.643e-01, 4.484e-02, -1.189e-01, -9.306e-02, -3.829e-02, -2.235e-01, 3.208e-02, 3.067e-01, -3.331e-01, 1.737e-01, -1.145e-01, -2.095e-01, -1.772e-01, 9.724e-02, -9.204e-02, -1.546e-01));
	r += mul(s0_1, M4(-1.351e-01, -1.735e-01, -1.171e-01, 1.866e-02, 1.788e-01, 7.084e-03, -5.823e-02, 4.943e-02, -1.234e-01, 2.690e-01, -1.993e-01, -9.976e-02, -2.998e-01, 1.415e-01, -2.434e-01, -2.377e-02));
	r += mul(s0_2, M4(-8.584e-02, 1.538e-01, -3.357e-02, -4.804e-02, 2.202e-01, -2.843e-01, 5.401e-02, 6.344e-02, -5.012e-02, 4.226e-01, 7.993e-03, -2.997e-02, -5.896e-02, 1.818e-01, -5.374e-02, -2.436e-02));
	r += mul(s0_3, M4(-1.532e-01, 2.721e-01, -1.694e-01, -1.281e-01, -2.171e-01, 5.137e-01, -3.302e-02, 1.959e-01, 2.808e-01, -7.201e-02, 2.284e-01, 1.304e-01, -1.855e-01, -1.109e-02, 1.316e-01, -2.203e-02));
	r += mul(s0_4, M4(-1.288e-01, -3.375e-01, 2.073e-01, 1.294e-01, 8.374e-02, -3.624e-02, -7.471e-02, -8.928e-02, 4.164e-01, -3.018e-01, 2.922e-01, 1.292e-01, 2.939e-01, 1.248e-01, 1.870e-01, 1.724e-01));
	r += mul(s0_5, M4(-4.244e-01, 3.597e-01, -2.130e-01, -1.194e-01, -5.228e-02, -7.024e-02, 1.013e-02, 2.094e-02, 3.292e-01, -2.187e-02, -2.145e-01, -1.294e-01, 2.863e-01, -1.471e-01, -6.230e-01, 4.960e-02));
	r += mul(s0_6, M4(-8.975e-03, -1.527e-01, 7.074e-02, 9.206e-02, 2.358e-01, 4.789e-01, 2.107e-02, -1.234e-01, 4.053e-01, -3.213e-01, 5.871e-02, 1.363e-01, -8.491e-02, -1.059e-01, 1.320e-01, 5.091e-02));
	r += mul(s0_7, M4(-2.446e-01, 1.712e-01, -6.715e-02, -9.093e-02, -3.606e-01, -9.447e-02, 9.143e-02, 2.255e-02, 7.964e-02, 3.434e-01, -7.769e-02, -5.915e-02, 1.071e-02, 1.407e-01, 2.475e-01, 2.881e-02));
	r += mul(s0_8, M4(-1.284e-01, -7.344e-03, 3.133e-02, -2.181e-02, -1.929e-01, 1.204e-01, 4.249e-02, 9.962e-03, 3.107e-02, -4.170e-02, -1.551e-02, -4.177e-02, 1.694e-01, -7.459e-03, 5.723e-01, -9.838e-02));
	r += mul(s1_0, M4(1.664e-01, -5.530e-02, 1.655e-01, 6.528e-02, -1.360e-01, 1.203e-01, -1.452e-01, 1.599e-01, 3.953e-01, -1.742e-01, 1.985e-01, 2.517e-01, 1.585e-01, -1.111e-01, 3.070e-02, 1.217e-01));
	r += mul(s1_1, M4(-5.827e-02, 3.764e-02, -1.694e-02, -2.190e-02, -2.629e-01, -3.682e-01, -1.239e-01, 1.312e-01, 3.131e-01, -1.892e-01, 3.232e-01, -1.434e-05, 1.688e-01, -2.374e-01, 1.267e-01, 7.924e-02));
	r += mul(s1_2, M4(6.508e-03, -2.714e-01, -8.299e-02, -1.293e-02, -1.978e-01, 2.727e-01, -1.679e-02, -2.463e-02, 1.238e-01, -4.121e-01, 4.130e-02, 1.075e-01, 4.553e-02, -2.280e-01, 5.651e-02, 3.035e-02));
	r += mul(s1_3, M4(-2.594e-01, -2.879e-01, 8.632e-02, 1.070e-01, 2.422e-01, -9.319e-02, 6.719e-01, 1.587e-01, 7.637e-03, 4.330e-02, -3.576e-01, -1.314e-01, 9.589e-02, 2.453e-03, -1.220e-01, 1.789e-02));
	r += mul(s1_4, M4(-3.654e-01, 3.347e-01, -4.406e-01, -3.296e-01, 6.935e-02, -1.230e-01, -2.942e-01, -8.931e-01, -1.290e-01, 2.558e-01, -5.546e-01, -3.416e-01, -6.999e-01, -2.749e-02, -1.105e-01, -1.202e-01));
	r += mul(s1_5, M4(1.882e-01, -5.567e-01, 6.741e-02, 6.861e-02, 1.140e-01, 9.233e-02, -3.283e-02, -5.471e-02, -2.111e-01, -9.629e-02, 1.168e-01, 1.890e-01, -1.860e-01, -6.957e-02, 2.679e-02, -4.327e-02));
	r += mul(s1_6, M4(-5.516e-01, 1.917e-01, -3.536e-02, -9.344e-02, -3.757e-02, -2.597e-01, 1.362e-01, 1.841e-01, -2.588e-01, 2.900e-01, -2.564e-02, -1.148e-01, 8.999e-03, 1.411e-01, -7.553e-02, -5.734e-02));
	r += mul(s1_7, M4(-2.252e-01, -1.858e-01, 1.044e-01, 7.247e-02, -8.056e-04, 1.453e-01, -1.516e-02, 7.462e-03, 3.032e-01, -2.528e-01, 9.908e-02, -3.574e-03, -1.193e-01, 1.692e-01, 1.269e-01, -8.760e-02));
	r += mul(s1_8, M4(-7.629e-02, -5.057e-02, 2.193e-02, 6.929e-02, 7.798e-02, -1.348e-01, -2.806e-02, -5.436e-02, 6.143e-02, -2.233e-02, -5.000e-02, 3.596e-02, -3.974e-02, 4.468e-01, 1.810e-01, -4.725e-02));
	r += V4(-2.860e-03, -5.693e-04, 3.358e-04, -6.956e-04);
	return r;
}
void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = max(-s0_0, 0.0);
	V4 s1_1 = max(-s0_1, 0.0);
	V4 s1_2 = max(-s0_2, 0.0);
	V4 s1_3 = max(-s0_3, 0.0);
	V4 s1_4 = max(-s0_4, 0.0);
	V4 s1_5 = max(-s0_5, 0.0);
	V4 s1_6 = max(-s0_6, 0.0);
	V4 s1_7 = max(-s0_7, 0.0);
	V4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 3
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-NVL-DS-conv2
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-5.478e-02, 1.287e-01, -1.455e-01, 9.873e-02, -1.859e-02, -8.998e-02, -3.702e-02, -3.950e-03, -1.964e-02, 7.304e-02, -1.605e-02, -2.641e-02, -7.264e-04, -1.136e-01, 5.146e-02, -1.121e-01));
	r += mul(s0_1, M4(-2.107e-01, 7.501e-01, -7.646e-04, -2.368e-01, -1.058e-02, -4.574e-01, -4.840e-02, -5.004e-03, 8.596e-03, 4.902e-01, 3.371e-02, -1.582e-01, -4.334e-02, 3.308e-02, -2.400e-02, -1.610e-02));
	r += mul(s0_2, M4(-2.276e-01, 1.815e+00, -1.660e+00, 2.143e-01, 4.532e-03, -1.082e-01, 4.676e-02, 5.810e-02, 3.341e-02, -3.157e-02, 5.034e-02, 2.181e-02, -8.215e-03, 7.755e-03, -6.577e-02, 1.290e-01));
	r += mul(s0_3, M4(-1.150e-01, 7.006e-02, -5.806e-02, -2.314e-02, 2.841e-02, 1.323e-01, -4.459e-02, 7.014e-02, 1.139e-01, 3.370e-02, -9.762e-02, 3.235e-02, 1.080e-01, -1.407e-02, 4.319e-03, 2.036e-01));
	r += mul(s0_4, M4(-2.921e-01, -1.510e-01, 3.564e-02, 2.232e-01, 2.995e-01, 2.216e-01, -4.580e-04, -4.743e-01, 2.110e-01, -9.064e-02, 1.625e-01, 8.257e-02, -2.595e-02, 3.217e-02, 3.797e-01, -4.466e-01));
	r += mul(s0_5, M4(-4.875e-01, 9.638e-02, -1.118e-01, -2.503e-03, -1.717e-01, -1.831e-01, 6.677e-02, 1.245e-01, 1.884e-01, -3.533e-02, 3.566e-02, -8.278e-02, -7.185e-02, 9.909e-02, -6.729e-02, 2.654e-01));
	r += mul(s0_6, M4(-1.142e-01, 6.030e-02, -5.701e-02, -2.694e-02, 9.794e-03, -1.043e-03, -1.520e-02, 6.562e-03, -1.519e-01, -3.133e-02, -7.849e-03, 2.929e-02, -8.765e-02, 7.071e-03, 6.377e-02, -2.206e-01));
	r += mul(s0_7, M4(-5.316e-01, 4.261e-02, -1.380e-01, 1.068e-01, -2.302e-01, 6.714e-02, -8.814e-02, 3.791e-02, 2.064e-01, -3.465e-03, 2.305e-02, 2.900e-02, -7.729e-02, -1.176e-01, 2.049e-01, -9.815e-02));
	r += mul(s0_8, M4(-1.142e-01, 5.413e-02, -7.336e-02, 5.749e-02, 1.775e-02, -6.116e-02, 4.187e-02, 4.812e-02, 6.720e-03, 1.338e-02, 1.128e-02, -5.993e-02, 4.753e-03, 2.377e-01, -1.960e-01, -6.356e-02));
	r += mul(s1_0, M4(-7.219e-03, 1.254e-02, -2.329e-02, 9.131e-03, 9.680e-03, 1.141e-01, 5.058e-02, -7.933e-02, 4.310e-03, -1.825e-02, -2.470e-02, -3.849e-02, 4.383e-02, -1.369e-01, -1.018e-01, 1.337e-01));
	r += mul(s1_1, M4(-2.328e-02, -1.472e-01, 1.201e-02, 8.703e-02, -2.290e-02, 1.220e-01, -6.274e-02, 4.856e-02, -1.123e-02, 2.074e-01, 4.912e-03, 1.898e-02, 3.823e-02, -1.162e-01, -2.869e-03, -5.783e-02));
	r += mul(s1_2, M4(1.877e-02, 5.205e-02, 2.258e-03, -3.986e-02, -5.354e-03, -3.334e-02, -2.223e-03, -1.488e-02, 1.167e-02, -1.834e-02, -4.942e-03, 6.009e-03, -1.461e-02, 8.022e-03, -6.944e-04, 1.966e-02));
	r += mul(s1_3, M4(2.186e-03, 2.371e-02, -4.728e-03, -2.899e-02, -8.432e-02, -2.847e-02, 9.748e-02, -1.580e-01, -6.701e-02, 1.463e-01, -3.577e-02, -3.059e-02, -1.148e-01, -7.817e-02, -5.152e-02, 2.534e-02));
	r += mul(s1_4, M4(7.592e-02, 3.659e-02, 1.014e-01, -1.411e-01, -9.397e-02, 4.773e-01, -3.701e-01, 8.513e-02, -4.705e-02, 1.831e-01, -5.745e-02, -8.650e-01, -1.752e-01, -2.109e-01, 8.276e-02, 5.420e-01));
	r += mul(s1_5, M4(8.916e-02, -6.384e-02, 7.426e-02, -1.560e-01, 4.885e-02, 1.267e-01, -2.389e-02, -6.533e-02, -3.403e-02, -3.235e-02, -4.859e-02, 5.816e-02, 2.877e-02, 2.235e-02, 2.889e-02, -3.966e-02));
	r += mul(s1_6, M4(-7.240e-03, 1.761e-03, 1.334e-02, -1.921e-02, 2.302e-01, 2.860e-02, 5.973e-04, 3.353e-02, -4.580e-02, -5.106e-02, 5.642e-02, -5.021e-02, 1.632e-02, 2.200e-02, -7.975e-02, 1.628e-01));
	r += mul(s1_7, M4(-1.467e-02, 1.918e-02, -1.630e-02, -2.924e-02, 2.438e-01, -1.107e-01, 7.118e-02, 1.044e-01, -6.621e-01, 5.801e-02, -1.392e-01, -9.225e-02, -1.103e-01, -3.913e-02, -8.343e-03, 9.723e-02));
	r += mul(s1_8, M4(-8.664e-02, 2.521e-02, -2.851e-02, -1.377e-02, -7.888e-02, -3.255e-02, 5.071e-03, -7.707e-03, -7.672e-02, -2.946e-02, -1.408e-02, 1.528e-01, 1.861e-02, 4.743e-02, -1.360e-02, -7.107e-02));
	r += V4(-3.055e-03, 2.251e-03, -2.283e-03, -9.151e-04);
	return r;
}
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = max(-s0_0, 0.0);
	V4 s1_1 = max(-s0_1, 0.0);
	V4 s1_2 = max(-s0_2, 0.0);
	V4 s1_3 = max(-s0_3, 0.0);
	V4 s1_4 = max(-s0_4, 0.0);
	V4 s1_5 = max(-s0_5, 0.0);
	V4 s1_6 = max(-s0_6, 0.0);
	V4 s1_7 = max(-s0_7, 0.0);
	V4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 4
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-NVL-DS-out
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-3.514e-02, 4.407e-02, -1.003e-01, -1.705e-02, -1.547e-02, -1.097e-02, -1.480e-02, -2.209e-03, 1.782e-01, -4.853e-02, -2.591e-03, -9.652e-02, 1.132e-01, -4.728e-02, -3.624e-02, -9.179e-02));
	r += mul(s0_1, M4(-8.070e-01, -2.880e-01, 8.886e-02, -2.588e-01, -5.438e-03, -1.542e-02, 6.509e-03, -1.758e-02, -6.877e-01, 2.203e-01, 5.882e-02, 1.154e-02, -2.596e-01, -2.665e-01, 5.616e-02, 6.948e-02));
	r += mul(s0_2, M4(8.113e-02, -6.689e-01, 1.293e-01, 3.662e-01, -4.338e-03, 9.631e-03, 1.393e-03, 1.752e-02, -6.164e-02, 1.400e-01, -7.443e-02, 5.032e-03, -5.037e-02, 4.082e-02, 8.999e-03, 1.109e-01));
	r += mul(s0_3, M4(-3.189e-02, 2.522e-02, -1.173e-01, -7.008e-04, -2.932e-02, 4.954e-02, -1.869e-02, 2.292e-02, -8.359e-02, -5.546e-02, 1.401e-01, -3.420e-02, -2.428e-01, 2.475e-02, -9.842e-02, 2.886e-02));
	r += mul(s0_4, M4(4.202e-02, -1.209e-01, 3.281e-02, -2.593e-02, -1.294e-01, -8.337e-02, 4.269e-03, -2.240e-02, -1.809e-01, 4.081e-01, -8.282e-01, 1.043e+00, 6.443e-01, -3.138e-02, 1.433e-01, -8.981e-01));
	r += mul(s0_5, M4(1.035e-01, 7.645e-02, 1.896e-02, -3.895e-01, 2.056e-02, 4.032e-02, 1.114e-02, 7.886e-02, 2.778e-01, -5.843e-01, 2.568e-01, -4.224e-01, 1.373e-02, 2.403e-02, -7.136e-03, 1.616e-01));
	r += mul(s0_6, M4(-4.837e-03, 5.661e-03, -2.155e-02, 8.570e-03, -3.470e-02, -1.982e-02, 1.567e-02, 2.879e-02, 1.482e-02, -3.797e-02, 6.062e-02, -3.624e-03, -6.722e-02, 3.255e-02, -2.850e-02, 1.004e-01));
	r += mul(s0_7, M4(3.377e-02, 3.445e-03, 1.071e-01, 2.095e-02, -1.543e-01, -6.950e-02, -5.840e-01, -2.553e-01, -1.528e-01, 1.840e-02, -5.525e-01, -1.985e-01, -6.475e-02, -9.991e-02, -1.252e-01, 4.832e-02));
	r += mul(s0_8, M4(-2.265e-02, 1.217e-02, -7.818e-02, 2.704e-02, 9.206e-02, 4.236e-02, 2.265e-02, -1.761e-01, 8.997e-02, -7.263e-02, 3.487e-02, -4.327e-01, 4.846e-02, 1.575e-02, 2.712e-02, -1.275e-01));
	r += mul(s1_0, M4(8.619e-02, -8.035e-02, -1.997e-02, -9.009e-02, -8.176e-02, -2.937e-02, 2.335e-02, 5.568e-02, -2.826e-02, -3.671e-02, 1.313e-02, -1.382e-03, -2.131e-02, -2.501e-02, 8.498e-03, -1.267e-02));
	r += mul(s1_1, M4(6.884e-03, 4.131e-01, 1.535e-02, 2.280e-01, 6.087e-02, -3.938e-02, -1.755e-03, -4.359e-02, 7.083e-02, -9.504e-03, -1.121e-02, -1.809e-02, 4.860e-02, 3.943e-02, 1.248e-03, 2.826e-02));
	r += mul(s1_2, M4(1.559e-02, -3.777e-02, 1.789e-02, -4.667e-04, -1.628e-02, 4.745e-02, -1.689e-02, -1.386e-04, 2.818e-03, 1.561e-02, -1.807e-02, -3.429e-02, -1.486e-02, -2.057e-02, -2.469e-03, -2.535e-02));
	r += mul(s1_3, M4(4.985e-02, -3.503e-02, 1.102e-01, 6.462e-03, 8.596e-02, -1.495e-02, -1.590e-01, -7.007e-02, -9.048e-02, 9.101e-02, 5.314e-02, -1.846e-02, 6.121e-03, 5.313e-02, -1.946e-02, 2.595e-02));
	r += mul(s1_4, M4(-5.138e-02, 3.410e-02, -1.642e-02, 1.763e-01, 5.488e-01, 7.528e-01, -3.408e-01, -1.157e-01, 1.031e-01, -2.744e-01, 8.540e-02, 5.877e-02, 3.574e-01, 2.314e-02, 1.062e-01, -8.140e-02));
	r += mul(s1_5, M4(3.563e-03, 2.615e-02, -6.663e-04, -1.024e-02, 2.531e-02, 1.151e-01, -1.716e-03, -6.707e-02, -3.286e-02, -6.519e-02, -2.930e-02, -8.955e-02, -8.467e-02, 3.600e-02, -5.280e-02, -2.859e-02));
	r += mul(s1_6, M4(7.971e-03, -7.569e-04, 2.269e-02, -3.798e-02, -2.046e-02, 3.708e-03, -1.237e-01, -5.924e-02, 2.752e-02, 2.227e-02, -1.531e-01, 1.057e-01, -2.821e-03, -1.472e-02, -7.243e-03, -3.058e-03));
	r += mul(s1_7, M4(-1.336e-02, -7.354e-03, -1.109e-01, -3.210e-02, 6.748e-02, -1.445e-02, 7.387e-01, 3.291e-01, 1.392e-01, 1.088e-01, 7.381e-01, 1.673e-01, 4.017e-02, -6.344e-03, 3.402e-01, 9.824e-02));
	r += mul(s1_8, M4(1.345e-02, 9.802e-03, 9.480e-03, -1.773e-02, -7.396e-02, -3.226e-02, 7.515e-03, 2.688e-01, -1.193e-01, -5.007e-02, -3.601e-02, 2.203e-01, -7.251e-02, -4.692e-02, -3.360e-02, 9.350e-02));
	r += V4(-3.239e-04, -4.035e-04, -5.725e-04, -6.768e-04);
	return tanh(r);
}
void Pass4(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = max(-s0_0, 0.0);
	V4 s1_1 = max(-s0_1, 0.0);
	V4 s1_2 = max(-s0_2, 0.0);
	V4 s1_3 = max(-s0_3, 0.0);
	V4 s1_4 = max(-s0_4, 0.0);
	V4 s1_5 = max(-s0_5, 0.0);
	V4 s1_6 = max(-s0_6, 0.0);
	V4 s1_7 = max(-s0_7, 0.0);
	V4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 5
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-NVL-DS-shuffle
//!STYLE PS
//!IN t1, INPUT
float4 Pass5(float2 pos) {
	float2 pt = float2(GetInputPt());
	const static float3x3 rgb2yuv = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081};
	const static float3x3 yuv2rgb = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float4 r = 0.0;
	float2 size = float2(GetInputSize());
	float2 f = frac(pos * size);
	float3 yuv = mul(rgb2yuv, INPUT.SampleLevel(SL, pos, 0).rgb);
	int2 i = int2(f * 2.0);
	r.r = t1.SampleLevel(SP, (float2(0.5, 0.5) - f) * pt + pos, 0)[2*i.y + i.x];
	r.r += yuv.r;
	r.a = 1.0;
	r.r = clamp(r, 0.0, 1.0);
	float3 px = mul(yuv2rgb, float3(r.r, yuv.yz));
	return float4(px, 1.0);
}
