// CuNNy 2x4C BILINEAR CHROMA NVL DS
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

//!MAGPIE EFFECT
//!VERSION 3
//!OUTPUT_WIDTH INPUT_WIDTH * 2
//!OUTPUT_HEIGHT INPUT_HEIGHT * 2

//!TEXTURE
Texture2D INPUT;


//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R16G16B16A16_FLOAT
Texture2D t0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R16G16B16A16_FLOAT
Texture2D t1;

//!PASS 1
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-NVL-DS-in
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) (dot(float3(-1.307e+00, -2.490e+00, -5.878e-01), O(INPUT, float2(x, y)).rgb) + 3.439e+00)
float4 f0(float2 pt, float2 pos, min16float s0_0, min16float s0_1, min16float s0_2, min16float s0_3, min16float s0_4, min16float s0_5, min16float s0_6, min16float s0_7, min16float s0_8) {
	V4 r = 0.0;
	r += V4(1.044e-02, 4.260e-02, -2.251e-01, -1.399e-01) * s0_0;
	r += V4(1.225e-01, -3.221e-02, -6.599e-02, 4.186e-02) * s0_1;
	r += V4(8.327e-02, -9.708e-03, 6.868e-02, 1.499e-01) * s0_2;
	r += V4(-1.680e-01, -3.737e-01, -8.167e-02, 1.274e-01) * s0_3;
	r += V4(-1.016e-01, 3.512e-01, 2.744e-01, -3.213e-01) * s0_4;
	r += V4(1.105e-01, 1.168e-02, 3.231e-02, 4.065e-02) * s0_5;
	r += V4(1.499e-02, 2.750e-02, 5.555e-02, 1.540e-01) * s0_6;
	r += V4(-4.554e-02, -1.242e-02, -3.769e-03, 5.459e-02) * s0_7;
	r += V4(-2.814e-02, -5.941e-03, -5.432e-02, -1.042e-01) * s0_8;
	r += V4(-1.350e-03, -1.393e-03, 4.904e-04, 5.843e-03);
	return r;
}
void Pass1(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float s0_0 = l0(-1.0, -1.0);
	min16float s0_1 = l0(0.0, -1.0);
	min16float s0_2 = l0(1.0, -1.0);
	min16float s0_3 = l0(-1.0, 0.0);
	min16float s0_4 = l0(0.0, 0.0);
	min16float s0_5 = l0(1.0, 0.0);
	min16float s0_6 = l0(-1.0, 1.0);
	min16float s0_7 = l0(0.0, 1.0);
	min16float s0_8 = l0(1.0, 1.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8);
}
//!PASS 2
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-NVL-DS-conv1
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(1.170e-02, -1.510e-02, -1.087e-01, 1.007e-01, 8.210e-02, 5.921e-02, -6.363e-03, -3.444e-02, 1.525e-02, -3.200e-02, 3.235e-02, -3.154e-02, 5.907e-03, 7.034e-02, -5.737e-02, 8.834e-02));
	r += mul(s0_1, M4(-7.857e-02, -1.651e-02, 2.841e-01, -2.251e-01, 2.108e-02, -6.885e-02, -2.602e-01, 2.164e-01, 1.680e-02, 2.901e-02, -9.397e-02, -1.532e-02, -4.480e-02, -4.184e-02, 2.584e-02, 1.561e-01));
	r += mul(s0_2, M4(1.081e-01, -4.478e-02, 6.165e-02, -4.569e-02, -7.386e-02, 7.545e-02, -6.002e-02, 1.571e-01, 6.761e-02, -8.098e-02, 4.020e-02, -3.917e-02, -1.000e-01, 6.870e-02, -2.676e-02, 5.771e-02));
	r += mul(s0_3, M4(-2.588e-01, 2.838e-01, 9.797e-02, -1.980e-01, 1.913e-01, -6.492e-02, -1.068e-02, -1.206e-01, -7.707e-02, -4.382e-02, -5.416e-02, 1.405e-01, -1.656e-01, 8.089e-02, 4.009e-01, -2.573e-01));
	r += mul(s0_4, M4(1.866e-01, -2.920e-01, -1.569e-01, -7.752e-02, -6.128e-01, 3.311e-01, 3.479e-01, 1.665e-01, 5.383e-02, 1.907e-01, -2.419e-01, -2.503e-01, -1.734e-01, 1.230e-02, -4.585e-02, -8.969e-02));
	r += mul(s0_5, M4(-9.385e-02, 1.316e-01, 9.728e-02, 1.423e-01, 3.756e-02, -1.242e-02, 1.962e-01, 4.256e-01, 4.175e-02, -8.921e-03, 9.495e-02, -1.223e-01, -7.925e-02, -6.248e-02, -1.623e-01, -5.758e-02));
	r += mul(s0_6, M4(-1.434e-01, 2.073e-01, 5.028e-02, -4.784e-01, 2.453e-02, -4.549e-02, -1.600e-02, 7.436e-02, -2.922e-03, -4.625e-02, -5.712e-02, 1.567e-01, 3.104e-02, -1.737e-02, 1.366e-03, -7.588e-02));
	r += mul(s0_7, M4(-1.017e-01, 2.399e-01, 1.255e-01, 3.003e-01, 1.135e-01, -1.489e-01, -6.069e-02, -5.225e-02, 3.368e-01, -2.348e-01, -4.337e-02, -7.011e-02, -1.440e-01, 1.218e-01, 1.744e-03, -5.345e-02));
	r += mul(s0_8, M4(-6.431e-02, -2.856e-02, -1.366e-01, -8.651e-02, -2.210e-02, 2.436e-01, 7.787e-02, -2.856e-02, 1.391e-01, -2.324e-01, 1.750e-02, -1.378e-02, -7.421e-02, 1.227e-01, 6.814e-02, 6.508e-02));
	r += mul(s1_0, M4(2.455e-02, -8.450e-03, -1.636e-01, 1.294e-01, 1.115e-01, 4.439e-02, -8.570e-02, 5.637e-02, -2.666e-02, -1.859e-02, 1.068e-01, -3.438e-02, 6.366e-02, 6.313e-02, -2.158e-01, 3.491e-02));
	r += mul(s1_1, M4(-2.974e-02, -3.793e-02, 1.342e-01, -2.193e-01, 5.334e-02, -6.807e-02, 3.188e-02, 2.458e-01, -1.865e-03, 5.114e-02, -5.739e-02, 1.339e-02, 1.774e-02, -4.526e-02, -1.762e-01, 7.862e-02));
	r += mul(s1_2, M4(1.035e-01, -5.783e-02, 1.115e-01, -3.126e-02, 2.468e-03, 8.715e-02, -4.297e-02, 2.251e-01, 4.402e-02, -9.454e-02, 9.157e-02, -7.456e-02, -7.688e-02, 7.652e-02, -9.251e-02, 5.209e-02));
	r += mul(s1_3, M4(-2.002e-01, 2.482e-01, -1.032e-01, -2.478e-01, 1.791e-01, 2.029e-03, 1.707e-01, -2.734e-02, -1.116e-01, -6.909e-02, -6.377e-02, 9.303e-02, 1.948e-02, 6.140e-02, 4.429e-02, -2.783e-01));
	r += mul(s1_4, M4(2.722e-01, -2.741e-01, -1.402e-01, -4.340e-02, -1.627e-01, 2.705e-01, 2.673e-01, -4.481e-02, -7.927e-02, 1.954e-01, 2.278e-03, -1.913e-01, -2.345e-02, 6.324e-02, -1.440e-01, 3.751e-02));
	r += mul(s1_5, M4(-3.035e-02, 1.546e-01, 1.129e-01, 1.083e-01, -2.356e-02, -2.937e-01, -3.866e-01, -3.534e-01, -4.892e-02, -1.254e-02, 1.175e-01, 8.009e-03, 1.908e-02, -5.897e-02, -2.212e-01, -8.979e-02));
	r += mul(s1_6, M4(5.093e-02, 1.998e-01, -2.179e-02, -4.053e-01, 4.318e-02, -7.695e-02, 2.077e-02, 8.314e-02, -1.246e-01, -6.711e-02, 1.042e-02, 4.563e-02, 1.509e-01, 2.533e-02, -6.018e-02, 7.295e-03));
	r += mul(s1_7, M4(8.401e-02, 2.529e-01, 4.694e-02, 3.404e-01, 3.198e-02, -1.991e-01, -9.785e-02, -4.262e-02, -1.938e-01, -2.285e-01, 1.290e-01, -2.350e-01, 1.441e-01, 1.388e-01, -1.005e-01, -1.809e-02));
	r += mul(s1_8, M4(-2.355e-02, -5.321e-02, -1.584e-01, -2.258e-02, -9.602e-02, 1.596e-01, -6.361e-02, -1.184e-01, -6.906e-02, -1.756e-01, 1.291e-02, -1.381e-01, 1.374e-02, 1.053e-01, 7.062e-03, 5.699e-02));
	r += V4(1.923e-03, -3.760e-03, 4.388e-03, 5.892e-04);
	return r;
}
void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 3
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-NVL-DS-conv2
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(7.787e-02, -1.629e-02, 7.919e-02, -3.355e-02, 4.209e-02, 4.106e-02, 1.160e-01, 9.139e-02, -1.244e-02, 3.170e-02, 2.264e-02, -1.227e-02, -1.605e-02, 8.966e-03, 1.718e-02, 3.384e-02));
	r += mul(s0_1, M4(1.022e+00, -2.065e-01, -2.827e-01, -1.072e-01, -1.626e-01, 3.318e-01, 2.102e-01, -1.279e-02, 1.779e-02, 8.138e-02, -1.175e-02, -9.392e-02, -8.396e-02, 1.674e-01, -2.031e-02, -8.485e-02));
	r += mul(s0_2, M4(2.378e-01, -4.215e-01, 4.147e-02, 5.921e-02, 6.516e-02, 1.661e-01, 2.413e-03, -8.460e-02, 5.182e-03, 4.710e-03, 1.870e-02, 2.872e-03, 8.091e-03, -3.719e-02, -1.112e-02, -2.042e-02));
	r += mul(s0_3, M4(2.348e-03, 3.852e-02, -3.284e-02, -1.301e-02, 3.699e-02, -2.026e-01, 1.786e-01, 2.586e-01, -4.848e-03, -8.098e-02, 2.980e-02, 9.512e-02, 3.906e-02, -1.709e-01, 1.003e-01, 1.071e-01));
	r += mul(s0_4, M4(1.560e-02, 1.778e-02, -2.251e-01, -3.330e-01, -4.079e-04, -7.418e-01, -1.406e-02, -3.037e-01, -1.009e-01, 2.218e-01, -3.655e-01, 6.047e-02, 2.711e-02, 3.458e-01, -2.857e-02, -1.399e-01));
	r += mul(s0_5, M4(2.534e-02, -1.531e-01, 4.465e-02, 1.840e-01, -2.890e-02, 1.170e-01, -1.647e-01, 1.606e-01, 3.247e-02, 1.460e-01, -1.282e-01, -1.150e-02, -3.034e-02, -8.126e-02, 8.280e-02, -1.478e-01));
	r += mul(s0_6, M4(1.149e-02, -9.278e-04, -1.056e-01, -3.625e-02, 1.087e-02, -1.062e-01, 1.848e-02, 1.055e-01, 1.861e-02, -9.384e-02, -8.014e-03, 4.114e-02, 1.294e-02, -4.854e-02, -3.134e-03, 3.735e-02));
	r += mul(s0_7, M4(1.492e-02, 2.156e-01, -4.925e-02, -1.546e-01, -8.335e-05, 1.631e-02, -1.309e-01, -2.933e-02, -9.678e-03, 7.573e-02, -1.255e-01, -1.023e-01, 9.060e-03, -1.043e-01, 1.840e-01, 1.684e-01));
	r += mul(s0_8, M4(-1.671e-02, 4.089e-02, 3.425e-02, -3.428e-02, -8.268e-03, 3.586e-02, 9.313e-03, 2.153e-02, -1.195e-02, 4.309e-02, 2.829e-02, 3.034e-02, 2.775e-02, -4.627e-02, -3.954e-02, -7.404e-02));
	r += mul(s1_0, M4(-7.248e-03, 2.078e-02, 7.985e-02, -3.828e-02, 3.324e-02, -3.246e-02, -3.943e-02, 7.104e-02, -6.840e-02, 2.588e-02, 1.308e-03, 5.206e-03, 8.421e-03, 3.221e-02, 3.890e-02, 6.610e-02));
	r += mul(s1_1, M4(3.120e-02, 1.380e-01, 6.184e-02, -7.364e-02, -7.829e-02, -3.456e-03, -7.761e-02, 2.744e-01, -5.285e-02, 5.020e-02, 1.484e-02, 5.033e-03, -1.372e-01, 2.292e-01, -1.408e-01, 9.737e-04));
	r += mul(s1_2, M4(-9.352e-02, 1.530e-01, -3.109e-02, -4.190e-02, 1.087e-01, -1.240e-02, -8.810e-02, 9.790e-02, -2.143e-01, 7.024e-02, -8.271e-03, 6.771e-02, 4.236e-02, -7.635e-02, 1.356e-01, -1.596e-02));
	r += mul(s1_3, M4(-1.275e-02, -3.703e-02, 2.970e-02, 4.136e-02, 3.191e-02, 7.487e-03, 8.930e-02, 3.703e-02, 4.612e-03, -5.962e-02, 2.765e-02, 9.408e-02, 4.252e-03, -2.501e-01, 1.607e-01, 2.065e-01));
	r += mul(s1_4, M4(-6.119e-02, -5.261e-02, -1.277e-01, 1.257e-01, -3.659e-02, -1.024e-01, 8.858e-01, -6.269e-01, -1.582e-01, 5.438e-02, 7.476e-02, 2.487e-01, 4.454e-02, 1.970e-01, -1.690e-01, 1.470e-02));
	r += mul(s1_5, M4(1.007e-01, -3.338e-02, 3.557e-02, 7.309e-02, -4.186e-02, 7.119e-02, -6.630e-02, 1.675e-01, -1.227e+00, -1.418e-01, -4.107e-01, 1.823e+00, -1.284e-01, 1.089e-02, 4.712e-01, -5.552e-02));
	r += mul(s1_6, M4(1.188e-02, -3.587e-02, -3.464e-02, -1.535e-02, 1.474e-02, -6.027e-02, -4.334e-02, 8.966e-02, -1.112e-02, -8.816e-02, -2.123e-02, 4.041e-02, 1.717e-02, -1.516e-02, -7.941e-02, 5.655e-02));
	r += mul(s1_7, M4(-2.812e-02, 5.453e-02, 1.247e-02, -3.972e-02, -1.500e-04, 9.149e-02, -4.165e-02, -1.018e-01, -4.887e-02, 2.503e-01, -2.399e-01, -1.745e-01, 1.917e-02, -1.663e-01, -8.250e-02, 1.987e-01));
	r += mul(s1_8, M4(-1.484e-03, 3.047e-02, 9.404e-02, 1.388e-03, -2.459e-02, 1.268e-01, 4.177e-02, -5.829e-02, -6.774e-02, 1.506e-02, 1.093e-01, 1.476e-01, 2.305e-02, 3.310e-02, -1.756e-01, -1.322e-01));
	r += V4(1.689e-03, -1.935e-03, -1.233e-03, -2.575e-03);
	return r;
}
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 4
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-NVL-DS-out
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(4.365e-02, 2.339e-02, 1.128e-02, 2.320e-03, 8.081e-02, -3.504e-02, 5.668e-02, -6.797e-03, -5.927e-02, 2.692e-02, 2.501e-03, 8.745e-03, 5.972e-02, 6.620e-02, -1.144e-02, -1.929e-02));
	r += mul(s0_1, M4(-5.031e-02, -2.583e-02, -2.713e-02, 4.763e-02, -1.015e-01, 1.449e-02, -2.575e-02, 4.599e-02, 1.111e-01, 9.514e-02, -1.213e-01, 4.989e-03, 2.361e-01, 2.127e-01, -2.998e-01, -1.082e-01));
	r += mul(s0_2, M4(-1.565e-02, 2.723e-02, 3.554e-03, -3.625e-02, 2.486e-02, 8.846e-03, -1.055e-02, -2.587e-02, 2.110e-01, -9.309e-03, 6.178e-02, -1.538e-01, 3.159e-02, -3.476e-02, 9.520e-03, -1.552e-01));
	r += mul(s0_3, M4(-6.789e-02, -2.747e-03, 2.212e-02, 1.233e-04, 2.295e-01, -1.987e-01, 1.732e-01, -7.419e-02, 1.063e-01, -1.158e-01, 1.168e-01, 3.226e-03, -1.645e-02, -5.539e-03, -1.354e-02, 6.566e-02));
	r += mul(s0_4, M4(4.627e-01, 1.490e-01, 2.876e-02, -3.861e-02, 1.873e-01, 6.920e-01, -2.627e-01, 9.204e-02, -9.356e-01, 2.280e-01, 2.045e-02, 8.404e-01, 2.190e-01, -1.875e-01, 8.231e-01, 1.024e-01));
	r += mul(s0_5, M4(-3.953e-02, 2.032e-01, -5.003e-02, 8.789e-02, 1.838e-02, 3.563e-02, 9.622e-03, -1.117e-02, 2.176e-01, -2.173e-01, 2.070e-01, -3.143e-01, -1.623e-01, 2.021e-01, -1.635e-01, 3.353e-01));
	r += mul(s0_6, M4(3.532e-02, -5.213e-02, 1.550e-02, -1.229e-02, -3.961e-02, -1.433e-02, 6.580e-02, -7.307e-02, 9.204e-02, 1.728e-02, 9.480e-03, -8.017e-02, -1.105e-02, -4.348e-03, 2.703e-02, -1.362e-02));
	r += mul(s0_7, M4(-3.919e-02, 1.690e-02, 3.052e-01, 1.390e-01, -8.127e-02, -1.388e-01, 1.763e-01, 3.142e-01, 9.257e-02, 1.113e-01, -1.519e-01, -9.578e-02, 4.334e-02, -4.376e-02, 1.194e-01, 4.187e-02));
	r += mul(s0_8, M4(-2.130e-02, -6.470e-02, -4.359e-02, 6.133e-02, -2.444e-02, -6.847e-02, 3.259e-02, 3.104e-02, -4.519e-02, -2.790e-02, 2.864e-03, 1.304e-01, -4.629e-02, 4.002e-02, -1.055e-01, 5.261e-02));
	r += mul(s1_0, M4(1.392e-01, -1.165e-01, 1.340e-01, 3.983e-02, 8.325e-02, 3.058e-02, 3.001e-02, 6.125e-03, 1.735e-02, 3.552e-02, 4.951e-02, 5.192e-03, 3.176e-02, 3.919e-02, 1.703e-02, 8.622e-05));
	r += mul(s1_1, M4(-9.414e-02, -6.193e-02, -3.635e-04, 8.423e-02, -1.591e-02, 5.032e-02, -1.150e-01, -5.424e-03, -2.217e-02, -2.727e-02, -4.163e-02, 6.323e-02, -2.593e-02, -5.699e-03, -4.578e-02, 3.865e-02));
	r += mul(s1_2, M4(-3.498e-02, 6.524e-02, -3.602e-02, 1.365e-02, -6.513e-03, 7.056e-02, -7.020e-02, -5.406e-02, 7.093e-03, -1.255e-02, -1.257e-02, -3.037e-02, 3.743e-02, -2.827e-03, 7.517e-03, -5.913e-02));
	r += mul(s1_3, M4(1.785e+00, -3.564e-01, -2.649e-01, -7.492e-01, -5.887e-03, -1.427e-02, 2.272e-02, 1.939e-02, 5.625e-02, -2.663e-02, -5.420e-03, 5.334e-02, 5.164e-02, -7.632e-02, -4.519e-03, 2.278e-02));
	r += mul(s1_4, M4(-2.356e-01, 1.254e+00, -2.428e-01, -6.465e-01, 1.685e-01, 3.381e-02, 4.100e-01, 1.792e-01, -1.824e-02, 6.615e-02, -5.407e-02, -1.411e-01, 2.686e-01, 4.292e-01, 6.373e-02, 5.906e-02));
	r += mul(s1_5, M4(-2.621e-02, 1.728e-03, -2.352e-02, 1.017e-01, -3.531e-02, 4.503e-02, -4.382e-02, 1.213e-01, 4.043e-03, -4.372e-03, 2.393e-02, 1.442e-03, -6.610e-03, 9.498e-02, 1.789e-02, 5.181e-02));
	r += mul(s1_6, M4(-4.739e-01, -2.334e-01, 1.035e+00, -6.687e-01, -9.918e-03, -6.728e-03, -8.145e-04, -1.862e-02, -1.117e-02, -4.630e-03, 2.819e-02, -8.710e-04, -5.460e-02, -5.002e-02, 1.294e-01, 3.736e-03));
	r += mul(s1_7, M4(-6.075e-01, -1.693e-01, -2.890e-01, 2.091e+00, 2.657e-02, 6.895e-03, 4.081e-02, 4.406e-02, 3.433e-03, -1.590e-02, 7.233e-03, 2.380e-02, 5.052e-03, -7.837e-02, 1.377e-01, 1.558e-01));
	r += mul(s1_8, M4(9.285e-02, -1.439e-01, 7.016e-02, 1.692e-02, -1.150e-02, 1.725e-03, -4.441e-03, 1.709e-02, -8.898e-03, -2.977e-03, -6.518e-03, 1.519e-02, -2.968e-02, -4.047e-02, -3.319e-02, 4.023e-02));
	r += V4(4.598e-04, 4.723e-04, 3.194e-04, 4.166e-04);
	return tanh(r);
}
void Pass4(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 5
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-NVL-DS-shuffle
//!STYLE PS
//!IN t1, INPUT
float4 Pass5(float2 pos) {
	float2 pt = float2(GetInputPt());
	static const float3x3 rgb2yuv = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081};
	static const float3x3 yuv2rgb = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float4 r = 0.0;
	float2 size = float2(GetInputSize());
	float2 f = frac(pos * size);
	float3 yuv = mul(rgb2yuv, INPUT.SampleLevel(SL, pos, 0).rgb);
	int2 i = int2(f * 2.0);
	r.r = t1.SampleLevel(SP, (float2(0.5, 0.5) - f) * pt + pos, 0)[2*i.y + i.x];
	r.r += yuv.r;
	r.a = 1.0;
	r.r = clamp(r, 0.0, 1.0);
	float3 px = mul(yuv2rgb, float3(r.r, yuv.yz));
	return float4(px, 1.0);
}
