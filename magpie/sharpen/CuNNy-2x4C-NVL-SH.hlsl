// CuNNy 2x4C BILINEAR CHROMA NVL SH
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

//!MAGPIE EFFECT
//!VERSION 3
//!OUTPUT_WIDTH INPUT_WIDTH * 2
//!OUTPUT_HEIGHT INPUT_HEIGHT * 2

//!TEXTURE
Texture2D INPUT;


//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t1;

//!PASS 1
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-NVL-SH-in
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) (dot(float3(-0.8156052231788635, -1.5271648168563843, -0.3413461446762085), O(INPUT, float2(x, y)).rgb) + 2.5575437545776367)
float4 f0(float2 pt, float2 pos, min16float s0_0, min16float s0_1, min16float s0_2, min16float s0_3, min16float s0_4, min16float s0_5, min16float s0_6, min16float s0_7, min16float s0_8) {
	V4 r = 0.0;
	r += V4(-5.466e-02, -4.519e-01, -8.000e-03, 1.144e-02) * s0_0;
	r += V4(-1.585e-01, 1.303e-02, 5.207e-01, -7.190e-02) * s0_1;
	r += V4(2.568e-01, 2.277e-02, -5.722e-01, 6.563e-02) * s0_2;
	r += V4(-7.490e-03, 3.982e-01, -4.051e-03, 8.911e-02) * s0_3;
	r += V4(-2.640e-01, 1.382e-01, -9.104e-02, 1.012e-02) * s0_4;
	r += V4(1.798e-01, -5.357e-02, 1.599e-01, -4.482e-01) * s0_5;
	r += V4(3.919e-02, -3.209e-02, 1.045e-02, -1.033e-01) * s0_6;
	r += V4(2.297e-02, -5.827e-02, -2.882e-03, 3.770e-01) * s0_7;
	r += V4(-1.701e-02, 2.324e-02, -1.521e-02, 7.103e-02) * s0_8;
	r += V4(3.675e-03, 3.369e-03, -1.591e-03, 1.729e-04);
	return r;
}
void Pass1(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float s0_0 = l0(-1.0, -1.0);
	min16float s0_1 = l0(0.0, -1.0);
	min16float s0_2 = l0(1.0, -1.0);
	min16float s0_3 = l0(-1.0, 0.0);
	min16float s0_4 = l0(0.0, 0.0);
	min16float s0_5 = l0(1.0, 0.0);
	min16float s0_6 = l0(-1.0, 1.0);
	min16float s0_7 = l0(0.0, 1.0);
	min16float s0_8 = l0(1.0, 1.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8);
}
//!PASS 2
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-NVL-SH-conv1
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-1.117e-01, -6.469e-02, 2.614e-01, -1.899e-01, -7.744e-03, 2.814e-02, -3.183e-02, 2.363e-02, 7.821e-03, -5.045e-02, 3.949e-02, -5.036e-02, -2.174e-01, 1.925e-01, 5.286e-02, -4.918e-02));
	r += mul(s0_1, M4(-1.982e-01, 8.432e-04, 4.301e-01, 5.116e-02, -3.021e-02, -4.686e-02, -9.633e-03, -3.790e-02, -7.866e-02, -4.550e-03, 1.184e-01, -9.955e-04, -6.582e-01, -3.388e-01, 5.682e-01, -7.201e-02));
	r += mul(s0_2, M4(5.568e-02, -3.038e-01, 3.732e-02, -3.153e-03, 4.893e-02, 2.083e-02, 4.351e-02, 2.252e-02, 9.204e-02, -7.017e-02, -2.259e-02, 1.780e-02, -1.825e-02, 5.824e-02, -1.717e-02, 1.353e-01));
	r += mul(s0_3, M4(-3.616e-01, 5.411e-01, 2.529e-01, -1.631e-02, 8.763e-02, -1.746e-02, -2.039e-02, 4.097e-03, -1.887e-01, -1.876e-01, -3.632e-02, -7.460e-03, -1.200e-01, -5.747e-02, -1.184e-01, -2.258e-02));
	r += mul(s0_4, M4(3.202e-01, 1.949e-01, -5.098e-01, 1.629e-01, -7.248e-02, 1.209e-01, -6.456e-02, -7.903e-02, 5.872e-01, 3.511e-01, -4.821e-01, 3.506e-01, 5.623e-03, -1.629e-01, -8.379e-02, -5.541e-02));
	r += mul(s0_5, M4(-1.411e-01, -1.528e-01, 7.776e-02, 1.111e-01, -1.429e-01, -9.715e-02, 1.560e-01, 1.094e-01, 6.807e-02, -1.323e-01, 1.440e-01, 6.639e-02, -4.559e-02, -6.390e-02, 6.717e-02, 6.140e-02));
	r += mul(s0_6, M4(4.712e-02, 9.033e-02, -1.537e-01, 3.747e-02, 8.813e-02, -4.234e-02, -6.554e-02, 3.183e-02, 1.148e-01, -4.232e-01, -6.541e-02, -5.200e-02, 2.197e-02, 8.257e-03, 1.442e-02, -1.261e-02));
	r += mul(s0_7, M4(-6.321e-02, -2.089e-01, -1.214e-01, -1.274e-01, 3.967e-02, 1.094e-02, 1.443e-01, -3.590e-02, 4.018e-03, -2.939e-01, 3.032e-01, 3.227e-02, -5.665e-02, -7.493e-02, 7.495e-02, -5.203e-02));
	r += mul(s0_8, M4(7.878e-02, 1.862e-01, -1.183e-01, 1.018e-02, 4.694e-03, 9.837e-02, 4.605e-02, -9.438e-03, 1.412e-01, 2.002e-01, 1.630e-02, 3.774e-02, 9.433e-03, 5.132e-02, -6.093e-02, -1.087e-02));
	r += mul(s1_0, M4(1.197e-03, 1.737e-01, -1.294e-01, 1.022e-01, -1.922e-02, -3.994e-02, 2.457e-02, -1.468e-02, 5.098e-02, -4.523e-02, -1.228e-01, 7.017e-02, -3.425e-01, -6.467e-01, -1.609e-01, -3.860e-03));
	r += mul(s1_1, M4(1.107e-03, -2.235e-01, -1.252e-01, -9.735e-02, 3.900e-02, 1.274e-01, -3.002e-02, 5.895e-02, 1.895e-01, 1.510e-01, -2.842e-01, 1.482e-02, 6.129e-01, 2.603e-01, -4.931e-01, 3.478e-01));
	r += mul(s1_2, M4(-1.780e-01, 2.193e-01, 6.152e-02, -2.276e-02, -3.748e-02, 2.522e-02, 2.460e-02, -3.503e-02, -2.606e-02, 1.354e-01, -1.983e-02, -1.498e-02, -7.059e-02, -1.841e-01, 5.969e-03, -8.806e-02));
	r += mul(s1_3, M4(5.986e-01, -2.128e-01, -1.131e-01, -7.576e-02, -3.715e-02, -1.668e-02, 2.998e-02, -7.980e-03, 1.655e-01, 1.158e-01, -1.292e-01, 9.534e-02, -1.325e-02, -1.753e-01, 9.423e-02, -2.177e-01));
	r += mul(s1_4, M4(-1.363e-01, 4.094e-02, 1.854e-01, -4.267e-01, -2.270e-02, 2.361e-02, -1.253e-01, 1.223e-01, -3.584e-01, -1.653e-01, 3.761e-01, -2.358e-01, -4.728e-02, 1.714e-01, 1.402e-01, 2.987e-02));
	r += mul(s1_5, M4(8.232e-02, 5.205e-02, -3.080e-01, -2.896e-01, 2.862e-01, 8.150e-01, 8.427e-02, 1.183e-02, 9.257e-02, 3.195e-01, -5.902e-02, 1.627e-02, 9.423e-03, 4.844e-02, -1.106e-01, -1.130e-01));
	r += mul(s1_6, M4(-6.480e-03, 7.064e-03, 4.182e-02, 2.321e-03, 5.365e-03, 7.251e-02, 1.071e-01, -2.871e-02, -2.509e-01, -1.180e-01, -5.444e-02, -1.402e-01, -4.092e-02, -7.081e-03, -1.355e-02, -3.094e-02));
	r += mul(s1_7, M4(5.841e-02, 3.782e-01, -3.020e-02, 2.763e-01, 1.056e-01, 3.703e-02, -2.182e-01, -7.666e-02, 2.936e-02, 2.068e-01, 3.801e-01, 1.654e-01, 3.991e-02, 4.664e-02, -8.951e-02, -4.469e-03));
	r += mul(s1_8, M4(-1.072e-01, -2.124e-01, 1.138e-01, 4.791e-02, -9.675e-03, 5.646e-02, 5.918e-01, -5.258e-01, -3.803e-02, -4.209e-02, 1.887e-01, 2.120e-02, -1.558e-02, -5.066e-02, 6.616e-02, -1.455e-02));
	r += V4(7.159e-03, 1.760e-03, -2.623e-03, -8.541e-04);
	return r;
}
void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = max(-s0_0, 0.0);
	V4 s1_1 = max(-s0_1, 0.0);
	V4 s1_2 = max(-s0_2, 0.0);
	V4 s1_3 = max(-s0_3, 0.0);
	V4 s1_4 = max(-s0_4, 0.0);
	V4 s1_5 = max(-s0_5, 0.0);
	V4 s1_6 = max(-s0_6, 0.0);
	V4 s1_7 = max(-s0_7, 0.0);
	V4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 3
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-NVL-SH-conv2
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(3.994e-02, 1.874e-02, 2.874e-02, 5.637e-04, -5.417e-03, -7.984e-03, 1.349e-02, 1.238e-02, 1.208e-01, 2.352e-01, -2.614e-03, 3.842e-03, 9.448e-02, -1.632e-02, 5.656e-02, -6.891e-02));
	r += mul(s0_1, M4(6.618e-02, 1.369e-03, -9.732e-03, -4.320e-03, 5.394e-03, -2.623e-02, 3.712e-02, 1.987e-02, 7.169e-02, 2.153e-01, 8.432e-02, -1.171e-02, 2.258e-01, 3.150e-01, -1.352e-02, -1.067e-01));
	r += mul(s0_2, M4(4.614e-03, -3.407e-02, 1.595e-02, -1.157e-01, -1.051e-02, -6.759e-02, 3.646e-03, 4.130e-02, 8.257e-02, 1.058e-01, 2.932e-02, -9.953e-03, -3.807e-02, 1.041e-01, -5.442e-03, 5.877e-02));
	r += mul(s0_3, M4(7.398e-02, -6.668e-02, 2.350e-02, 7.590e-02, 8.434e-02, 7.890e-02, 3.555e-02, -2.313e-02, -3.879e-01, -1.577e-01, -9.351e-02, -6.620e-02, 9.366e-02, -1.431e-01, 8.719e-03, 1.565e-01));
	r += mul(s0_4, M4(-6.895e-01, -3.092e-01, 6.045e-02, 5.143e-02, 2.950e-01, 2.632e-02, 7.193e-02, 1.475e-02, 3.213e-01, 2.551e-01, 1.683e-01, 9.367e-02, 1.945e-01, -1.556e-01, 2.086e+00, -2.859e-01));
	r += mul(s0_5, M4(2.920e-01, 3.643e-01, -1.929e-02, 2.932e-02, -1.646e-01, -1.456e-01, 1.694e-02, 3.353e-04, -9.409e-02, -7.778e-02, -2.568e-02, -5.359e-02, -1.718e-01, -3.480e-01, -6.624e-02, -1.006e-01));
	r += mul(s0_6, M4(1.662e-01, 1.411e-01, -1.150e-03, 5.728e-02, -1.774e-02, -4.345e-02, 1.860e-02, -3.764e-02, 8.516e-02, -3.354e-02, 4.967e-02, 2.590e-01, 2.148e-01, 6.943e-02, -7.696e-02, 3.645e-01));
	r += mul(s0_7, M4(-4.304e-03, 4.800e-02, -2.647e-02, 1.154e-01, -1.938e-01, -4.848e-02, -2.447e-02, -2.588e-01, 3.882e-02, -1.168e-01, -2.277e-02, 2.271e-01, 5.819e-02, 2.189e-01, 1.410e-01, -1.524e-01));
	r += mul(s0_8, M4(1.443e-02, 6.143e-02, 1.196e-02, 1.636e-02, -5.895e-02, -8.755e-02, 1.350e-02, -2.582e-02, 4.753e-02, 4.713e-02, 4.342e-03, 1.769e-02, -6.910e-03, 1.567e-01, -1.902e-02, -1.120e-01));
	r += mul(s1_0, M4(-8.179e-02, -1.372e-01, -1.532e-02, -1.581e-02, 1.460e-02, 1.479e-02, 2.225e-03, -2.501e-03, -1.101e-01, -8.061e-04, -3.184e-02, -2.551e-02, -1.068e-01, -1.873e-02, -5.889e-02, 3.985e-02));
	r += mul(s1_1, M4(-1.616e-01, -3.555e-01, -4.212e-02, -2.697e-02, 6.562e-02, 5.589e-02, -7.535e-02, 2.596e-02, -1.872e-01, -1.003e-01, -3.139e-02, 5.249e-03, -2.264e-01, 1.743e-01, 5.565e-02, 1.440e-01));
	r += mul(s1_2, M4(-1.810e-02, -1.040e-02, -7.389e-03, 7.736e-02, -1.636e-01, -1.587e-01, -3.259e-02, -1.052e-01, -1.141e-01, -2.731e-02, -2.444e-02, -1.704e-02, 9.987e-02, 9.106e-02, -1.052e-02, 5.639e-03));
	r += mul(s1_3, M4(5.989e-02, 4.395e-02, 3.333e-02, -3.882e-02, -1.284e-01, -2.241e-01, 3.060e-02, -2.077e-02, 6.849e-02, 1.212e-01, 9.578e-03, -8.615e-02, 2.777e-01, 3.414e-01, 2.423e-02, -9.895e-04));
	r += mul(s1_4, M4(9.550e-02, 4.795e-01, -1.359e-01, -7.871e-01, -8.574e-01, -6.627e-01, -3.776e-02, -3.842e-01, -2.021e-01, -1.277e+00, 2.917e-01, -8.469e-02, -5.059e-01, -5.603e-01, -2.888e-02, -2.216e-01));
	r += mul(s1_5, M4(4.464e-02, 4.255e-02, 9.981e-02, 2.216e-01, 8.821e-02, 8.428e-02, -2.081e-02, -9.860e-02, -2.651e-01, -1.819e-01, -5.618e-02, -1.325e-01, -4.814e-02, -8.672e-02, 6.714e-02, -4.749e-02));
	r += mul(s1_6, M4(-8.117e-02, -1.072e-01, -2.882e-03, 2.250e-03, -2.199e-02, -2.937e-02, 6.592e-03, -2.204e-03, -3.171e-03, 5.906e-02, -1.139e-02, -1.019e-01, -3.355e-02, -9.114e-02, -4.738e-03, -4.749e-03));
	r += mul(s1_7, M4(8.710e-02, -4.696e-02, 1.680e-02, 1.334e-01, -2.607e-01, -3.002e-01, -8.422e-02, -1.059e-01, -1.578e-01, 2.256e-01, 9.741e-02, -4.640e-01, -4.627e-02, 9.981e-02, -7.320e-03, -1.245e-01));
	r += mul(s1_8, M4(-5.944e-02, -1.620e-01, 2.062e-02, 6.044e-02, -2.933e-03, -1.470e-02, -4.437e-03, -6.425e-04, 1.772e-01, 9.592e-02, -9.258e-02, 4.621e-03, 4.408e-02, 1.303e-02, 1.335e-03, 2.843e-02));
	r += V4(-2.105e-03, -3.570e-03, 4.066e-04, -2.454e-03);
	return r;
}
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = max(-s0_0, 0.0);
	V4 s1_1 = max(-s0_1, 0.0);
	V4 s1_2 = max(-s0_2, 0.0);
	V4 s1_3 = max(-s0_3, 0.0);
	V4 s1_4 = max(-s0_4, 0.0);
	V4 s1_5 = max(-s0_5, 0.0);
	V4 s1_6 = max(-s0_6, 0.0);
	V4 s1_7 = max(-s0_7, 0.0);
	V4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 4
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-NVL-SH-out
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(1.571e-01, 3.723e-02, 8.326e-02, -1.077e-01, 9.742e-04, -2.448e-02, -7.203e-02, 2.206e-02, -2.008e-02, -6.569e-03, -1.495e-03, 1.724e-02, 7.805e-03, -2.049e-02, -7.195e-02, -3.592e-02));
	r += mul(s0_1, M4(-9.599e-02, -5.461e-01, 7.056e-02, 2.467e-01, -1.064e-02, 1.893e-01, -9.280e-02, -7.423e-02, 9.366e-03, -7.806e-03, 1.457e-02, 6.736e-03, 7.485e-01, 4.076e-01, -5.176e-01, -2.908e-01));
	r += mul(s0_2, M4(-5.670e-02, 1.018e-01, -3.183e-02, 8.082e-02, 1.874e-02, -2.570e-02, 1.005e-02, -5.620e-02, 2.346e-03, 5.573e-03, -2.818e-03, 1.225e-03, -7.221e-02, 2.101e-01, -7.839e-02, -2.469e-01));
	r += mul(s0_3, M4(-4.756e-01, 3.076e-01, -4.209e-01, 3.916e-01, -3.037e-01, 1.362e-01, 4.469e-01, -1.444e-02, 1.372e-01, -8.178e-02, 1.169e-01, -2.719e-02, 2.426e-02, 3.330e-02, -2.996e-02, -7.210e-02));
	r += mul(s0_4, M4(6.816e-01, -7.479e-02, 1.805e-01, -1.709e+00, -4.153e-01, -7.599e-01, 2.125e-01, 7.912e-01, 4.705e-02, 3.575e-01, -8.391e-02, 1.295e-01, -1.303e-01, -3.403e-02, 8.506e-01, 7.051e-01));
	r += mul(s0_5, M4(-9.648e-02, 8.257e-03, -3.749e-02, 2.282e-01, 4.114e-02, -7.397e-02, 2.559e-02, -1.024e-01, 5.739e-03, 6.441e-03, 2.632e-03, -9.285e-03, -3.406e-02, -2.144e-02, -1.809e-01, 3.654e-02));
	r += mul(s0_6, M4(-7.686e-02, 6.419e-02, -2.112e-01, 2.329e-01, 1.116e-01, 1.886e-02, -1.681e-01, -4.889e-03, -6.247e-02, -2.269e-02, -1.177e-01, -1.123e-01, -4.066e-03, -7.697e-03, -1.375e-02, -7.606e-04));
	r += mul(s0_7, M4(3.058e-02, -2.838e-02, 3.312e-01, 3.519e-01, -5.043e-03, 1.193e-01, -1.479e-01, -1.895e-01, -4.968e-02, -7.445e-02, 5.146e-02, 5.140e-02, -2.351e-02, -6.199e-03, -1.323e-01, -9.842e-02));
	r += mul(s0_8, M4(5.083e-02, 8.861e-02, 3.923e-02, 1.189e-01, -5.964e-03, -6.003e-02, -2.967e-02, -1.483e-01, 1.984e-02, -1.752e-02, 1.605e-02, 4.019e-03, -2.457e-02, -3.420e-02, -4.363e-02, -8.130e-02));
	r += mul(s1_0, M4(-1.079e-02, -2.327e-02, -1.161e-02, 8.647e-04, 3.002e-02, 1.047e-02, 5.779e-03, -1.999e-02, 3.211e-01, -1.027e-01, 5.117e-02, -7.326e-02, -2.856e-02, 2.835e-02, 4.381e-02, 1.747e-03));
	r += mul(s1_1, M4(7.422e-02, 9.061e-02, -3.034e-02, 1.016e-02, -1.551e-03, -1.017e-02, 4.898e-03, -1.492e-02, -9.103e-01, -6.575e-05, 6.762e-01, -4.184e-02, -2.078e-02, -1.558e-01, -2.015e-02, -4.048e-03));
	r += mul(s1_2, M4(-8.219e-03, -3.725e-02, -3.278e-02, -6.616e-02, -2.338e-02, 1.894e-02, -2.642e-03, 1.636e-02, -2.570e-01, 5.176e-01, -3.174e-01, -1.174e-02, 1.224e-02, 1.017e-02, 4.717e-02, 3.107e-02));
	r += mul(s1_3, M4(1.084e-01, -1.758e-02, 9.448e-02, -4.166e-02, -1.096e-01, 3.773e-02, -5.183e-02, 6.018e-02, -4.196e-01, 3.236e-02, 9.175e-02, -1.662e-01, -2.339e-02, -8.684e-04, -1.174e-01, 8.765e-02));
	r += mul(s1_4, M4(5.434e-02, 2.407e-01, 2.864e-01, 4.102e-01, 2.417e-01, -1.529e-01, 6.679e-02, -1.841e-01, -6.198e-01, 1.152e+00, -2.384e+00, 1.531e+00, -3.447e-01, -1.987e-01, -3.076e-01, -5.356e-01));
	r += mul(s1_5, M4(-2.963e-04, -1.057e-02, -8.967e-02, -5.064e-02, -5.481e-02, 8.258e-02, -1.895e-02, 6.251e-02, 8.899e-01, -1.473e+00, 8.038e-01, -1.039e-01, 4.256e-02, -1.046e-01, 1.135e-01, 1.020e-01));
	r += mul(s1_6, M4(-1.413e-02, -3.342e-02, -4.626e-02, -2.303e-02, 1.046e-02, 3.552e-02, 3.503e-02, 2.741e-02, 5.889e-02, 5.569e-02, -7.123e-03, 3.851e-02, 7.939e-03, 7.217e-03, 5.908e-03, -2.643e-02));
	r += mul(s1_7, M4(-1.145e-01, -5.063e-02, -2.518e-01, -2.089e-01, 1.003e-01, -1.077e-02, 2.339e-01, 1.353e-01, -1.025e-03, 7.646e-02, 3.333e-01, 3.041e-01, 6.229e-02, 2.728e-02, 1.067e-01, 1.362e-01));
	r += mul(s1_8, M4(-5.744e-02, -1.001e-01, -9.404e-02, -1.699e-01, -1.358e-02, 9.107e-02, 2.220e-02, 1.274e-01, 1.851e-01, -5.235e-02, 5.221e-01, -7.286e-01, 4.386e-02, 7.565e-02, 1.270e-02, 2.542e-02));
	r += V4(-3.067e-04, 1.537e-05, -3.193e-04, 2.091e-05);
	return tanh(r);
}
void Pass4(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = max(-s0_0, 0.0);
	V4 s1_1 = max(-s0_1, 0.0);
	V4 s1_2 = max(-s0_2, 0.0);
	V4 s1_3 = max(-s0_3, 0.0);
	V4 s1_4 = max(-s0_4, 0.0);
	V4 s1_5 = max(-s0_5, 0.0);
	V4 s1_6 = max(-s0_6, 0.0);
	V4 s1_7 = max(-s0_7, 0.0);
	V4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 5
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-NVL-SH-shuffle
//!STYLE PS
//!IN t1, INPUT
float4 Pass5(float2 pos) {
	float2 pt = float2(GetInputPt());
	const static float3x3 rgb2yuv = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081};
	const static float3x3 yuv2rgb = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float4 r = 0.0;
	float2 size = float2(GetInputSize());
	float2 f = frac(pos * size);
	float3 yuv = mul(rgb2yuv, INPUT.SampleLevel(SL, pos, 0).rgb);
	int2 i = int2(f * 2.0);
	r.r = t1.SampleLevel(SP, (float2(0.5, 0.5) - f) * pt + pos, 0)[2*i.y + i.x];
	r.r += yuv.r;
	r.a = 1.0;
	r.r = clamp(r, 0.0, 1.0);
	float3 px = mul(yuv2rgb, float3(r.r, yuv.yz));
	return float4(px, 1.0);
}
