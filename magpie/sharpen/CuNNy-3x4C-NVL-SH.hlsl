// CuNNy 3x4C BILINEAR CHROMA NVL SH
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

//!MAGPIE EFFECT
//!VERSION 3
//!OUTPUT_WIDTH INPUT_WIDTH * 2
//!OUTPUT_HEIGHT INPUT_HEIGHT * 2

//!TEXTURE
Texture2D INPUT;


//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t1;

//!PASS 1
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-SH-in
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) (dot(float3(1.239554762840271, 2.321333169937134, 0.5257284045219421), O(INPUT, float2(x, y)).rgb) + -0.357725590467453)
float4 f0(float2 pt, float2 pos, min16float s0_0, min16float s0_1, min16float s0_2, min16float s0_3, min16float s0_4, min16float s0_5, min16float s0_6, min16float s0_7, min16float s0_8) {
	V4 r = 0.0;
	r += V4(5.630e-03, -2.301e-02, -1.064e-02, -4.996e-03) * s0_0;
	r += V4(-3.585e-03, -1.165e-02, -8.582e-02, 1.581e-02) * s0_1;
	r += V4(2.029e-02, 4.358e-02, -6.642e-03, -9.000e-03) * s0_2;
	r += V4(6.644e-05, 4.485e-01, -1.106e-01, 6.210e-02) * s0_3;
	r += V4(4.239e-02, -4.062e-01, 3.721e-01, -2.702e-01) * s0_4;
	r += V4(-1.809e-01, -2.782e-02, -3.878e-02, -1.066e-01) * s0_5;
	r += V4(5.211e-04, -1.309e-01, 3.967e-02, -4.882e-02) * s0_6;
	r += V4(1.991e-02, 1.052e-01, -1.072e-01, 2.516e-01) * s0_7;
	r += V4(5.969e-02, 2.356e-03, -4.763e-02, 1.091e-01) * s0_8;
	r += V4(-8.392e-03, 3.048e-03, -6.363e-03, 3.944e-03);
	return r;
}
void Pass1(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float s0_0 = l0(-1.0, -1.0);
	min16float s0_1 = l0(0.0, -1.0);
	min16float s0_2 = l0(1.0, -1.0);
	min16float s0_3 = l0(-1.0, 0.0);
	min16float s0_4 = l0(0.0, 0.0);
	min16float s0_5 = l0(1.0, 0.0);
	min16float s0_6 = l0(-1.0, 1.0);
	min16float s0_7 = l0(0.0, 1.0);
	min16float s0_8 = l0(1.0, 1.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8);
}
//!PASS 2
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-SH-conv1
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(2.754e-01, -2.320e-01, -3.997e-02, 6.030e-02, 6.861e-02, -3.326e-02, 3.103e-02, 2.142e-02, 4.859e-03, -8.626e-02, -1.519e-02, 7.769e-02, -1.429e-01, -3.771e-02, -1.835e-01, -5.201e-02));
	r += mul(s0_1, M4(1.572e-02, 1.092e-01, -3.647e-02, -3.406e-01, -2.105e-01, 8.740e-02, -4.798e-02, -2.011e-02, -4.421e-02, 5.161e-02, -3.773e-03, 3.963e-02, -3.903e-01, -1.094e-01, 1.905e-01, -6.035e-01));
	r += mul(s0_2, M4(-5.913e-02, 2.060e-01, 1.183e-02, 2.191e-01, 4.254e-02, -1.515e-01, -1.297e-02, -5.337e-02, 1.051e-02, 4.445e-02, -1.337e-02, -6.312e-02, 6.904e-02, 1.003e-01, 1.372e-02, 4.304e-02));
	r += mul(s0_3, M4(-3.030e-01, 2.536e-01, -6.393e-01, 5.329e-01, -2.020e-02, 4.748e-02, 7.765e-02, -3.764e-02, -8.667e-02, 1.642e-01, 1.216e-02, 1.470e-01, 1.122e-01, -2.432e-02, -2.159e-01, -9.455e-02));
	r += mul(s0_4, M4(4.500e-02, -1.094e-01, 7.534e-02, -7.910e-01, 4.085e-02, -1.928e-01, -4.890e-02, -1.064e-02, -4.993e-02, 5.949e-02, 3.127e-02, -1.111e-01, 5.268e-02, 2.136e-02, -1.737e-01, -6.530e-02));
	r += mul(s0_5, M4(-6.034e-02, -3.728e-04, -9.746e-02, -2.649e-01, -3.821e-02, 5.714e-01, 1.032e-01, 3.937e-01, 9.453e-02, -2.065e-01, 1.094e-02, -1.648e-01, 8.537e-02, 7.531e-02, -2.401e-02, 3.467e-01));
	r += mul(s0_6, M4(6.848e-02, -4.184e-02, 1.676e-01, -1.735e-01, -1.075e-02, 3.784e-03, -7.501e-02, 8.476e-03, 1.337e-02, 1.150e-02, 1.014e-01, 1.451e-01, 2.452e-02, 4.335e-02, -5.093e-02, 1.023e-03));
	r += mul(s0_7, M4(7.103e-02, -6.523e-02, 2.928e-01, 2.364e-01, 6.130e-02, 2.824e-02, 2.021e-01, -9.155e-02, -2.972e-02, 4.148e-02, -2.728e-01, -3.189e-02, -7.264e-02, 1.221e-01, -2.236e-01, 2.933e-02));
	r += mul(s0_8, M4(-5.746e-02, 2.150e-01, -3.977e-02, 1.523e-01, 3.487e-02, 2.510e-01, 3.019e-02, -7.580e-02, 7.096e-02, -9.582e-02, 1.223e-01, 1.155e-01, 5.310e-02, -2.075e-01, 9.724e-02, -1.022e-01));
	r += mul(s1_0, M4(5.639e-02, -4.798e-02, 1.526e-01, -2.876e-02, -4.333e-02, 2.247e-02, -2.466e-02, -2.464e-02, -2.462e-02, 5.967e-02, 8.241e-02, -1.792e-01, 3.982e-01, 3.832e-02, 3.186e-01, -3.649e-02));
	r += mul(s1_1, M4(-6.804e-02, 8.820e-02, -2.410e-02, 1.591e-01, 1.284e-01, -5.728e-02, 9.935e-02, -1.111e-01, 1.429e-01, -1.031e-01, -3.557e-02, 4.591e-02, 7.765e-01, 5.592e-02, -6.752e-02, 6.504e-01));
	r += mul(s1_2, M4(5.674e-02, -1.347e-01, 8.742e-03, -3.174e-01, -9.302e-02, 9.083e-02, 1.020e-01, -1.598e-01, 1.186e-02, -3.883e-02, 1.875e-02, 2.173e-01, -1.135e-01, -1.599e-02, -4.246e-02, 5.358e-02));
	r += mul(s1_3, M4(7.256e-02, 1.011e-01, 2.912e-02, -3.391e-01, 5.522e-02, -6.862e-02, 3.197e-03, -5.776e-02, -4.860e-02, -1.294e-01, -3.173e-01, 5.019e-02, 3.215e-02, -7.873e-03, 2.621e-02, 4.309e-02));
	r += mul(s1_4, M4(-3.925e-02, 3.771e-02, -6.691e-02, 3.405e-01, -4.736e-02, 7.153e-02, 1.532e-01, -2.026e-02, -3.200e-02, 6.046e-02, -4.327e-01, -2.457e-02, -6.088e-03, 1.239e-02, -1.047e-01, 2.998e-01));
	r += mul(s1_5, M4(3.524e-02, -2.168e-02, 1.328e-02, 2.298e-01, 1.211e-01, -6.884e-01, -6.877e-02, -2.693e-02, -1.724e-01, 1.294e-01, -1.403e-02, -2.361e-01, -3.736e-02, -8.492e-02, 4.493e-02, -3.937e-01));
	r += mul(s1_6, M4(-8.937e-02, 8.706e-02, -1.456e-01, -6.580e-02, -3.974e-03, 1.806e-02, -2.039e-02, -2.276e-02, -5.604e-02, -3.454e-02, 1.015e-01, -9.456e-02, -1.926e-02, -4.947e-02, -6.665e-02, -5.893e-03));
	r += mul(s1_7, M4(-1.009e-01, 6.245e-02, -4.458e-02, -1.589e-01, -6.071e-02, -3.962e-02, -1.665e-01, 9.057e-02, 3.644e-02, -3.909e-02, 3.198e-01, 2.062e-01, 9.008e-02, -1.242e-01, 2.162e-01, -3.549e-02));
	r += mul(s1_8, M4(7.407e-02, -1.967e-01, 6.685e-02, 1.747e-01, -1.395e-02, -3.016e-01, 1.720e-02, 4.096e-02, -7.140e-02, 1.449e-01, -7.983e-02, -6.993e-02, -6.665e-02, 1.802e-01, -1.072e-01, -2.169e-02));
	r += V4(2.419e-03, -3.847e-03, 6.393e-03, -2.301e-03);
	return r;
}
void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = max(-s0_0, 0.0);
	V4 s1_1 = max(-s0_1, 0.0);
	V4 s1_2 = max(-s0_2, 0.0);
	V4 s1_3 = max(-s0_3, 0.0);
	V4 s1_4 = max(-s0_4, 0.0);
	V4 s1_5 = max(-s0_5, 0.0);
	V4 s1_6 = max(-s0_6, 0.0);
	V4 s1_7 = max(-s0_7, 0.0);
	V4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 3
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-SH-conv2
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(5.216e-02, -2.864e-02, 2.144e-02, -4.074e-02, 1.047e-01, 5.447e-02, -5.796e-02, -2.285e-02, -4.342e-02, 1.665e-01, -6.899e-02, 1.436e-01, -5.894e-02, 1.875e-02, -1.843e-02, 1.342e-01));
	r += mul(s0_1, M4(-8.075e-02, 7.893e-02, 9.358e-02, -4.197e-03, -4.768e-02, 1.325e-01, 7.025e-02, 1.365e-02, -8.708e-03, 7.733e-03, -1.305e-01, 3.319e-02, 5.669e-02, 4.471e-02, -1.187e-01, 2.303e-02));
	r += mul(s0_2, M4(3.406e-02, 3.216e-02, -3.535e-02, -6.860e-02, 1.244e-02, 2.349e-02, -3.775e-02, -6.354e-02, -7.433e-02, -2.840e-01, 1.442e-01, 1.729e-01, -2.112e-02, -6.574e-02, -1.386e-02, 1.185e-01));
	r += mul(s0_3, M4(-2.799e-02, 8.276e-02, -1.301e-04, -1.908e-01, 7.096e-01, 2.833e-02, -4.984e-01, -1.167e-01, 1.789e-01, 2.398e-01, -1.543e-01, 9.850e-02, 5.178e-02, -1.870e-01, 6.677e-02, 1.729e-01));
	r += mul(s0_4, M4(3.330e-01, -4.979e-02, -3.518e-02, -3.965e-01, 1.839e-02, 2.105e-01, 3.350e-01, 7.174e-02, -9.726e-02, 2.295e-01, -1.852e-01, 2.916e-01, -5.395e-02, -1.476e-01, -1.659e-03, 8.887e-01));
	r += mul(s0_5, M4(3.010e-02, 2.643e-01, -1.353e-01, -1.909e-01, -6.764e-03, -1.252e-02, -1.678e-01, 4.554e-02, -1.706e-02, -2.262e-01, 2.791e-01, -2.244e-01, -3.382e-02, -2.039e-01, 5.043e-02, 3.357e-01));
	r += mul(s0_6, M4(9.705e-03, 1.124e-01, -4.065e-02, -3.893e-02, -1.110e-02, -1.521e-01, -4.777e-02, 2.872e-02, 5.808e-02, -1.739e-02, -3.033e-02, 3.514e-02, -1.827e-01, -7.705e-02, 8.863e-02, 2.079e-01));
	r += mul(s0_7, M4(-2.532e-01, 4.738e-01, 1.099e-01, -7.838e-03, 5.861e-02, 7.836e-03, 1.037e-01, 1.860e-01, -8.328e-02, -1.793e-01, -5.776e-02, 2.074e-01, 3.851e-02, 3.480e-03, 1.158e-02, 1.154e-01));
	r += mul(s0_8, M4(-5.305e-02, 1.263e-01, -1.342e-01, -2.466e-01, 1.946e-02, -5.743e-02, 1.047e-01, 4.295e-02, -6.058e-02, -5.035e-02, 8.386e-03, -1.476e-01, -1.430e-02, -4.335e-02, -8.428e-03, 1.553e-01));
	r += mul(s1_0, M4(1.350e-03, 1.348e-01, -3.047e-02, -1.729e-02, -3.016e-02, 6.286e-02, 7.786e-03, 7.105e-02, 1.253e-04, -8.260e-02, 1.010e-03, -6.777e-02, 3.968e-02, -8.278e-02, 2.093e-02, 9.655e-03));
	r += mul(s1_1, M4(7.237e-02, 9.547e-02, -1.392e-01, -1.360e-01, 1.057e-01, -1.139e-01, 6.983e-03, 1.782e-01, -1.148e-01, 5.233e-02, 1.353e-01, 2.208e-01, -1.512e-02, -6.486e-02, 7.884e-02, 7.983e-02));
	r += mul(s1_2, M4(-1.799e-02, 7.176e-03, -1.082e-02, -1.893e-02, -7.888e-03, -5.642e-02, 3.601e-02, 8.519e-02, 3.469e-02, 9.798e-02, -1.401e-01, 6.040e-02, 2.348e-02, 7.100e-03, 2.550e-02, 1.363e-03));
	r += mul(s1_3, M4(2.502e-01, 4.814e-01, -9.497e-02, 1.737e-02, 2.060e-02, 3.117e-01, 4.260e-02, 6.324e-02, 2.772e-03, -1.702e-01, 3.016e-02, -5.173e-02, -8.178e-02, 1.091e-02, -3.767e-02, 1.811e-01));
	r += mul(s1_4, M4(-4.041e-02, 3.649e-01, -1.518e-01, -1.948e-01, -7.047e-02, -2.397e-01, -5.268e-01, -4.225e-02, 2.978e-01, -7.435e-01, 1.741e-01, -2.058e-01, -1.182e-02, -1.058e-02, -4.871e-02, -3.230e-01));
	r += mul(s1_5, M4(2.145e-02, -3.994e-01, 4.282e-01, 1.603e-01, 3.891e-03, -1.804e-02, 1.179e-01, 6.715e-02, 2.739e-02, 1.347e-01, -6.770e-02, 2.406e-01, -2.148e-02, 4.459e-02, -2.915e-02, 4.554e-03));
	r += mul(s1_6, M4(-7.808e-03, 3.596e-01, -1.202e-01, -6.059e-02, -4.116e-02, 1.149e-01, -2.683e-02, 9.961e-02, 3.965e-02, -1.171e-02, -3.197e-02, -2.810e-03, 1.135e-01, 1.127e-02, -1.122e-01, 7.189e-02));
	r += mul(s1_7, M4(4.507e-01, 8.384e-02, -1.306e+00, -3.757e-01, -6.638e-02, -1.273e-01, -2.707e-02, -2.739e-01, -5.797e-02, -1.720e-02, 3.304e-02, 2.984e-02, -1.627e-02, -2.520e-02, -2.953e-02, 1.958e-01));
	r += mul(s1_8, M4(2.818e-02, -1.098e-01, 2.529e-01, -1.241e-01, 1.413e-02, 7.445e-02, -5.077e-02, -1.137e-01, -1.161e-02, -3.625e-02, -6.514e-03, -2.396e-02, 7.345e-04, -2.449e-02, 6.064e-03, 3.606e-02));
	r += V4(1.960e-03, -1.882e-03, -9.045e-05, 2.972e-03);
	return r;
}
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = max(-s0_0, 0.0);
	V4 s1_1 = max(-s0_1, 0.0);
	V4 s1_2 = max(-s0_2, 0.0);
	V4 s1_3 = max(-s0_3, 0.0);
	V4 s1_4 = max(-s0_4, 0.0);
	V4 s1_5 = max(-s0_5, 0.0);
	V4 s1_6 = max(-s0_6, 0.0);
	V4 s1_7 = max(-s0_7, 0.0);
	V4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 4
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-SH-conv3
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-6.237e-02, 3.918e-02, -1.048e-01, -1.137e-02, -6.455e-03, -1.467e-02, 4.984e-03, -1.193e-02, 3.313e-02, -6.639e-03, 8.790e-03, 5.539e-02, 4.136e-02, 4.609e-03, 5.923e-02, 2.574e-02));
	r += mul(s0_1, M4(-1.807e-03, -1.283e-02, -4.431e-02, 7.494e-02, 3.213e-02, -3.377e-03, -2.120e-02, 4.179e-02, -1.003e-01, 3.459e-01, -2.001e-02, -2.998e-02, 1.115e-01, 5.306e-02, 6.120e-02, 6.865e-03));
	r += mul(s0_2, M4(-1.100e-01, -9.614e-02, -1.261e-01, 6.451e-03, -3.867e-02, 2.578e-02, 1.944e-02, -1.386e-02, -1.098e-04, -5.412e-02, -7.399e-02, 1.661e-03, -1.331e-02, 1.287e-02, 2.049e-02, -2.042e-02));
	r += mul(s0_3, M4(-2.577e-01, 6.208e-02, -1.024e-01, -1.544e-01, -1.412e-02, 9.517e-03, -3.148e-02, 9.448e-03, 4.474e-01, -4.916e-02, 7.306e-02, 6.663e-01, -6.763e-02, 1.392e-01, -5.481e-02, -4.314e-02));
	r += mul(s0_4, M4(7.395e-02, -2.811e-01, -4.900e-02, 9.097e-02, -5.137e-01, 2.861e-01, -3.784e-01, -3.936e-01, 5.879e-01, 1.176e+00, 1.641e+00, -6.689e-02, -1.193e-01, 4.802e-02, -5.768e-02, -8.620e-02));
	r += mul(s0_5, M4(-1.288e-01, 5.748e-03, -3.436e-01, 8.311e-02, 3.403e-01, 1.130e-01, 3.072e-01, 3.767e-02, -2.297e-01, -1.548e-01, -2.570e-01, -7.222e-02, 6.207e-02, 5.868e-02, 5.125e-02, 2.528e-02));
	r += mul(s0_6, M4(-8.618e-02, 5.867e-02, -7.349e-02, 1.062e-01, -2.585e-02, -2.020e-02, -1.806e-02, -4.732e-02, 8.782e-02, 2.528e-02, 1.794e-02, 1.950e-01, -7.818e-02, -2.782e-02, -1.839e-02, 2.083e-02));
	r += mul(s0_7, M4(-5.328e-02, 5.322e-02, -8.787e-02, -1.412e-01, -1.253e-01, -1.333e-01, -9.351e-02, 1.402e-01, -6.255e-02, 2.124e-01, -1.069e-02, 8.410e-02, -2.315e-02, -1.897e-02, -3.773e-02, 4.669e-02));
	r += mul(s0_8, M4(-4.504e-02, -1.331e-01, -1.470e-01, -5.593e-02, 2.883e-02, 3.135e-02, 2.798e-02, 2.121e-04, 6.923e-03, -1.565e-03, 5.409e-02, 1.514e-04, -3.470e-02, -1.287e-02, -3.990e-02, -1.648e-02));
	r += mul(s1_0, M4(2.311e-01, -9.193e-02, 8.742e-02, 2.841e-01, 2.264e-02, -3.886e-02, 3.041e-02, 4.633e-02, 3.079e-02, -6.148e-02, 1.179e-01, -2.026e-02, 6.152e-01, -2.164e-02, -4.384e-01, 3.396e-01));
	r += mul(s1_1, M4(-3.400e-01, 2.405e-02, -6.695e-01, 2.251e-01, 2.046e-02, -2.378e-02, 4.104e-02, 1.213e-01, 4.956e-02, -1.577e-01, -7.836e-02, -2.998e-02, -6.309e-01, 1.823e-01, 9.306e-03, -1.120e-01));
	r += mul(s1_2, M4(-2.881e-01, 5.060e-01, 3.719e-01, 3.170e-02, 3.299e-02, 6.445e-02, -1.582e-02, 6.737e-02, -1.255e-01, -3.281e-02, -1.336e-02, -5.507e-02, 2.168e-01, 5.867e-04, 2.317e-01, 2.591e-02));
	r += mul(s1_3, M4(-7.953e-02, -8.571e-02, 1.199e-01, -3.662e-01, 1.182e-01, 4.416e-02, -3.160e-02, 4.028e-02, 2.667e-01, -1.081e-01, 1.450e-01, 2.026e-01, -9.012e-02, -2.161e-01, -6.860e-02, -8.615e-01));
	r += mul(s1_4, M4(6.415e-01, -6.154e-01, -3.565e-01, -1.185e+00, -3.945e-01, -4.150e-01, 3.017e-01, -2.628e-01, 5.421e-01, -1.562e-01, 2.081e-01, 1.807e-01, -1.489e+00, -1.200e-02, 1.263e-01, -3.533e-02));
	r += mul(s1_5, M4(-2.444e-01, -1.083e-01, 4.915e-02, -1.068e-01, 1.333e-01, -2.590e-01, -7.399e-02, -8.802e-02, -2.511e-01, 1.818e-01, -3.882e-03, 4.911e-02, 2.319e-01, -2.947e-01, -1.975e-01, -8.087e-03));
	r += mul(s1_6, M4(-7.824e-02, -2.011e-02, 2.691e-02, -4.469e-02, 6.761e-02, -3.594e-04, -4.035e-03, -7.007e-02, 7.232e-02, -3.585e-02, 5.612e-02, -1.472e-01, -1.035e-01, -9.012e-02, 2.885e-02, 1.035e-01));
	r += mul(s1_7, M4(1.161e-01, 7.106e-02, 5.978e-03, -1.618e-01, -1.036e-01, -5.255e-03, 7.739e-02, 1.665e-01, 7.047e-02, 1.065e-01, 4.012e-03, -1.347e-01, -9.974e-02, -4.072e-01, -1.866e-02, 4.100e-02));
	r += mul(s1_8, M4(-5.879e-03, 2.843e-02, -2.542e-02, -4.280e-03, 6.637e-02, 6.195e-02, 9.329e-03, 3.918e-02, -5.484e-02, -5.169e-02, -2.158e-02, -3.321e-02, 1.597e-01, -1.007e-02, 4.340e-02, 1.484e-02));
	r += V4(-7.706e-03, -4.011e-03, -3.385e-03, -2.911e-03);
	return r;
}
void Pass4(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = max(-s0_0, 0.0);
	V4 s1_1 = max(-s0_1, 0.0);
	V4 s1_2 = max(-s0_2, 0.0);
	V4 s1_3 = max(-s0_3, 0.0);
	V4 s1_4 = max(-s0_4, 0.0);
	V4 s1_5 = max(-s0_5, 0.0);
	V4 s1_6 = max(-s0_6, 0.0);
	V4 s1_7 = max(-s0_7, 0.0);
	V4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 5
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-SH-out
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(1.140e-01, -2.070e-02, 2.337e-02, -1.879e-03, -2.384e-01, -2.008e-02, -6.265e-02, -3.620e-03, -2.705e-02, -4.895e-02, -6.665e-02, 4.930e-03, -1.938e-01, 1.165e-02, -5.382e-02, -4.676e-02));
	r += mul(s0_1, M4(-1.092e-01, 2.345e-01, -1.087e-01, -1.192e-01, -1.665e-01, -4.072e-01, 7.346e-03, -2.704e-02, -7.064e-03, 9.258e-02, 1.307e-02, 7.285e-04, 3.271e-01, -2.463e-01, 9.790e-02, 6.908e-02));
	r += mul(s0_2, M4(2.018e-02, -1.679e-02, 5.470e-03, -4.238e-02, -1.202e-02, -6.465e-03, -9.917e-03, -1.861e-03, -5.726e-03, -3.605e-02, 3.319e-02, 7.025e-03, 1.519e-01, 4.424e-01, -7.470e-02, -4.701e-02));
	r += mul(s0_3, M4(4.755e-03, -7.934e-02, 1.934e-01, -9.366e-02, 6.191e-01, -9.935e-02, -5.097e-01, -4.004e-01, 5.732e-01, 7.235e-02, 3.682e-01, -7.931e-02, -6.140e-02, 3.802e-02, -2.475e-01, 7.819e-02));
	r += mul(s0_4, M4(-4.640e-01, 3.583e-01, -3.410e-01, 9.540e-01, 1.453e-01, 7.761e-01, 2.741e-01, -5.109e-02, -6.845e-02, -6.126e-01, -1.738e-01, -1.968e-01, -7.987e-01, -5.918e-01, 1.240e+00, -1.358e-01));
	r += mul(s0_5, M4(1.762e-02, -8.720e-02, 9.936e-02, 2.486e-03, 7.643e-03, 2.094e-02, 2.920e-02, 6.608e-02, -3.679e-02, 5.430e-03, -4.459e-02, -4.262e-02, -4.984e-02, -2.261e-01, -2.114e-01, 4.980e-01));
	r += mul(s0_6, M4(-1.438e-02, 1.663e-02, -6.841e-02, 3.507e-02, -6.434e-03, -7.964e-02, 1.460e-01, -5.127e-02, -6.848e-02, 2.742e-02, 2.207e-01, 6.911e-02, 2.598e-03, -1.686e-03, 1.407e-02, -2.655e-02));
	r += mul(s0_7, M4(1.744e-02, -5.034e-02, -6.851e-02, -2.466e-01, -1.532e-02, -3.891e-02, -3.736e-02, 2.046e-01, -2.435e-02, 2.192e-02, 8.381e-02, -1.516e-01, 1.264e-01, 5.872e-02, -1.634e-01, -1.375e-01));
	r += mul(s0_8, M4(-1.221e-02, -7.976e-03, -2.866e-03, -3.352e-03, 4.484e-04, -4.595e-03, 1.499e-02, 9.439e-03, 8.353e-03, 5.861e-03, -1.480e-02, 1.074e-02, 2.584e-02, 1.278e-02, 4.421e-03, 1.112e-01));
	r += mul(s1_0, M4(-1.354e-01, -1.387e-02, 1.987e-02, -4.720e-03, 1.822e-01, 5.033e-02, 1.270e-01, 2.239e-02, 4.876e-02, -2.562e-02, -1.494e-02, -2.397e-03, 1.649e-01, 2.605e-02, 5.088e-02, 3.789e-04));
	r += mul(s1_1, M4(-4.309e-02, -1.889e-01, 1.296e-01, 1.393e-01, 1.603e-01, 2.075e-01, 3.223e-02, 1.366e-01, 5.711e-03, 8.617e-02, -7.788e-02, -7.829e-02, -7.833e-02, 2.168e-01, -3.682e-01, -1.664e-01));
	r += mul(s1_2, M4(5.936e-03, 2.094e-02, 9.900e-03, 1.886e-02, 2.691e-02, 7.125e-02, 2.725e-02, 2.533e-02, 9.414e-03, 2.148e-02, -6.907e-03, -1.581e-02, -1.333e-01, -3.225e-01, 4.969e-02, -2.720e-02));
	r += mul(s1_3, M4(2.152e-02, 4.161e-03, -1.356e-01, 4.169e-02, -1.242e-01, 3.820e-02, -4.764e-02, 1.527e-01, -3.076e-01, -8.228e-02, -1.437e-01, -2.991e-02, 7.988e-02, 5.204e-04, 1.528e-01, -6.459e-03));
	r += mul(s1_4, M4(1.372e-01, 1.870e-01, -2.308e-01, -4.241e-01, -7.788e-02, -1.811e-01, -1.723e-01, -3.715e-01, 1.313e-01, -1.372e-01, 4.260e-01, 2.569e-01, 4.793e-03, 6.281e-02, 6.863e-02, 3.389e-01));
	r += mul(s1_5, M4(1.987e-03, 2.902e-02, -3.352e-02, -5.143e-02, -1.031e-02, -5.079e-02, -1.495e-02, 5.386e-03, 1.726e-02, 9.350e-02, -1.825e-02, 7.359e-02, -2.464e-02, 4.237e-02, -1.737e-02, -1.517e-01));
	r += mul(s1_6, M4(2.665e-02, -7.301e-03, 3.177e-02, -2.967e-02, -1.383e-02, 8.453e-03, -5.457e-02, -1.714e-02, -2.804e-03, -4.827e-02, -4.363e-02, -1.213e-01, 8.995e-03, 6.855e-03, 2.919e-02, 8.575e-03));
	r += mul(s1_7, M4(-4.341e-03, 1.386e-02, 9.985e-02, 1.616e-01, 2.343e-03, -1.996e-02, -3.526e-02, -9.281e-02, 3.547e-02, 8.561e-03, -2.078e-02, -2.698e-02, 1.252e-04, -1.614e-03, 3.802e-02, 8.096e-02));
	r += mul(s1_8, M4(4.507e-03, -3.496e-03, 1.361e-02, 5.090e-02, -1.467e-03, -7.973e-03, -1.370e-02, -8.750e-04, 7.680e-03, 1.085e-02, -4.011e-03, 2.341e-02, -1.295e-02, 5.279e-03, -2.043e-02, -3.426e-02));
	r += V4(-6.922e-04, -7.847e-04, 1.227e-03, 1.058e-03);
	return tanh(r);
}
void Pass5(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = max(-s0_0, 0.0);
	V4 s1_1 = max(-s0_1, 0.0);
	V4 s1_2 = max(-s0_2, 0.0);
	V4 s1_3 = max(-s0_3, 0.0);
	V4 s1_4 = max(-s0_4, 0.0);
	V4 s1_5 = max(-s0_5, 0.0);
	V4 s1_6 = max(-s0_6, 0.0);
	V4 s1_7 = max(-s0_7, 0.0);
	V4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 6
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-SH-shuffle
//!STYLE PS
//!IN t0, INPUT
float4 Pass6(float2 pos) {
	float2 pt = float2(GetInputPt());
	const static float3x3 rgb2yuv = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081};
	const static float3x3 yuv2rgb = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float4 r = 0.0;
	float2 size = float2(GetInputSize());
	float2 f = frac(pos * size);
	float3 yuv = mul(rgb2yuv, INPUT.SampleLevel(SL, pos, 0).rgb);
	int2 i = int2(f * 2.0);
	r.r = t0.SampleLevel(SP, (float2(0.5, 0.5) - f) * pt + pos, 0)[2*i.y + i.x];
	r.r += yuv.r;
	r.a = 1.0;
	r.r = clamp(r, 0.0, 1.0);
	float3 px = mul(yuv2rgb, float3(r.r, yuv.yz));
	return float4(px, 1.0);
}
