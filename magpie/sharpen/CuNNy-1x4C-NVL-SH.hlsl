// CuNNy 1x4C BILINEAR CHROMA NVL SH
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

//!MAGPIE EFFECT
//!VERSION 3
//!OUTPUT_WIDTH INPUT_WIDTH * 2
//!OUTPUT_HEIGHT INPUT_HEIGHT * 2

//!TEXTURE
Texture2D INPUT;


//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t1;

//!PASS 1
//!DESC CuNNy-1x4C-BILINEAR-CHROMA-NVL-SH-in
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) (dot(float3(-0.8144530653953552, -1.5193161964416504, -0.34448328614234924), O(INPUT, float2(x, y)).rgb) + 2.5390632152557373)
float4 f0(float2 pt, float2 pos, min16float s0_0, min16float s0_1, min16float s0_2, min16float s0_3, min16float s0_4, min16float s0_5, min16float s0_6, min16float s0_7, min16float s0_8) {
	V4 r = 0.0;
	r += V4(-1.096e-02, 7.593e-02, -1.129e-01, 2.761e-02) * s0_0;
	r += V4(1.523e-02, -5.566e-01, -3.125e-01, -9.626e-02) * s0_1;
	r += V4(-3.889e-03, 8.615e-02, 5.826e-02, 2.480e-02) * s0_2;
	r += V4(1.594e-02, -6.567e-02, 1.490e-01, -3.838e-01) * s0_3;
	r += V4(1.173e-02, 5.440e-01, 5.918e-01, 5.344e-01) * s0_4;
	r += V4(-3.994e-02, -7.364e-02, -5.938e-02, -8.421e-02) * s0_5;
	r += V4(8.390e-03, -6.279e-03, -1.122e-02, -7.605e-03) * s0_6;
	r += V4(-4.828e-01, 1.398e-02, -2.573e-01, -3.680e-02) * s0_7;
	r += V4(4.868e-01, -1.548e-02, -4.507e-02, 1.996e-02) * s0_8;
	r += V4(-5.446e-03, 9.903e-05, 1.408e-03, 7.840e-03);
	return r;
}
void Pass1(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float s0_0 = l0(-1.0, -1.0);
	min16float s0_1 = l0(0.0, -1.0);
	min16float s0_2 = l0(1.0, -1.0);
	min16float s0_3 = l0(-1.0, 0.0);
	min16float s0_4 = l0(0.0, 0.0);
	min16float s0_5 = l0(1.0, 0.0);
	min16float s0_6 = l0(-1.0, 1.0);
	min16float s0_7 = l0(0.0, 1.0);
	min16float s0_8 = l0(1.0, 1.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8);
}
//!PASS 2
//!DESC CuNNy-1x4C-BILINEAR-CHROMA-NVL-SH-conv1
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-1.327e-01, 7.715e-01, 6.154e-01, -6.185e-02, -7.605e-02, 2.185e-03, 8.695e-02, -2.058e-02, -8.695e-02, -4.407e-02, -1.086e-01, -2.179e-02, -2.022e-02, 4.096e-02, 3.766e-03, -6.851e-02));
	r += mul(s0_1, M4(4.290e-02, -4.971e-01, -4.754e-02, -4.072e-02, -3.076e-01, -4.771e-02, -1.298e-01, -9.116e-02, 4.638e-01, 1.386e-01, 9.140e-02, 1.747e-01, 1.409e-01, -2.521e-02, 4.630e-01, -4.984e-02));
	r += mul(s0_2, M4(1.384e-02, 2.374e-02, 1.347e-02, -1.691e-02, -5.009e-02, 1.431e-01, -2.317e-02, 5.075e-03, 5.929e-02, -1.605e-01, 6.573e-02, -2.964e-02, 6.661e-02, -2.401e-01, -2.094e-02, -3.429e-02));
	r += mul(s0_3, M4(2.368e-01, 1.601e-01, -3.113e-01, -4.836e-02, -2.065e-01, 1.783e-01, -1.791e-01, 1.210e-01, 2.545e-03, -3.106e-02, -1.308e-01, 8.899e-02, 4.612e-02, -4.432e-02, -5.793e-02, 6.958e-02));
	r += mul(s0_4, M4(5.906e-02, -4.239e-02, 1.081e-01, -1.402e-01, -5.410e-02, 1.409e-01, 3.936e-01, -1.174e-01, 1.632e-01, -5.535e-02, 1.247e-01, -6.070e-02, -7.625e-02, 4.696e-02, -4.834e-01, 1.353e-01));
	r += mul(s0_5, M4(-1.472e-02, -1.042e-01, -2.058e-03, -5.505e-02, 1.860e-01, -2.979e-01, -3.707e-02, -3.919e-02, -1.106e-01, 9.204e-02, 9.878e-03, -5.988e-02, -3.762e-02, 1.530e-03, 9.838e-02, 1.939e-01));
	r += mul(s0_6, M4(5.867e-03, 1.761e-02, 5.507e-02, -2.203e-02, 2.217e-01, 2.388e-01, -3.510e-02, 2.360e-01, 3.401e-02, 2.606e-02, -2.167e-02, 2.684e-02, -2.759e-02, 3.428e-02, 4.506e-02, 2.247e-02));
	r += mul(s0_7, M4(-2.228e-02, -2.343e-02, 2.035e-02, -8.268e-03, 4.971e-01, -4.754e-02, -3.038e-01, 2.476e-01, -2.209e-03, -7.546e-02, 5.565e-03, -7.400e-02, -2.535e-02, 1.001e-01, 5.669e-02, 6.117e-02));
	r += mul(s0_8, M4(4.102e-03, 6.110e-03, 4.585e-04, -9.734e-03, 2.818e-02, -4.209e-01, -2.308e-02, -1.487e-01, -9.122e-03, 5.994e-02, 1.149e-03, 2.618e-02, -2.500e-02, -1.896e-01, -8.324e-02, 3.976e-02));
	r += mul(s1_0, M4(-1.059e-01, 3.192e-02, -1.660e-01, 2.105e-01, 1.209e-01, 1.561e-02, -1.409e-03, 2.778e-02, 1.743e-02, 2.513e-02, 3.792e-02, 1.578e-02, 3.276e-02, 6.729e-02, -5.557e-02, 1.479e-01));
	r += mul(s1_1, M4(-1.150e-01, 7.415e-02, 5.450e-03, -5.470e-02, 3.307e-01, 5.629e-02, 1.136e-01, 3.176e-02, -4.823e-01, -2.044e-01, -1.417e-01, -1.731e-01, -1.050e-01, 2.366e-01, 1.354e-02, 3.037e-01));
	r += mul(s1_2, M4(1.097e-02, -3.326e-02, -2.350e-02, -2.506e-03, 1.020e-01, -1.377e-01, -7.847e-03, -3.174e-02, -1.790e-01, 2.200e-01, -1.658e-02, 1.293e-01, -5.690e-02, 5.700e-02, 5.311e-02, -3.510e-01));
	r += mul(s1_3, M4(1.655e-01, -5.381e-02, 1.744e-01, 8.313e-02, -8.761e-02, 1.378e-01, 4.784e-01, 4.518e-01, -3.183e-02, -1.733e-01, 1.316e-01, -3.480e-01, -5.193e-02, -6.569e-02, 1.472e-01, -2.224e-01));
	r += mul(s1_4, M4(6.041e-02, -1.870e-01, -2.106e-02, -1.647e-02, -5.945e-01, -4.853e-02, 7.069e-02, 5.325e-02, 5.025e-01, -1.657e-01, 4.213e-01, -2.680e-01, 1.650e-01, -2.245e-01, 1.315e-01, 5.720e-01));
	r += mul(s1_5, M4(-3.059e-03, 4.116e-02, 1.708e-02, -3.313e-02, -2.509e-01, -1.388e-01, 6.694e-02, -2.144e-01, 1.538e-01, 4.137e-01, -5.189e-02, 3.285e-01, -6.377e-02, 4.103e-02, 3.417e-02, -6.383e-01));
	r += mul(s1_6, M4(1.423e-02, 1.987e-02, -1.947e-02, 4.865e-02, -3.174e-02, -1.455e-02, -2.646e-01, 1.656e-01, 4.081e-02, -3.520e-02, -3.153e-02, -6.653e-02, 4.846e-02, 8.456e-02, 1.999e-02, 6.567e-02));
	r += mul(s1_7, M4(-1.002e-02, -2.273e-02, -9.902e-04, -3.263e-02, 6.103e-02, 1.708e-01, -2.939e-01, -2.123e-01, -1.499e-01, -6.030e-02, -2.737e-02, 1.414e-02, -1.117e-01, -1.506e-02, -1.004e-01, 7.468e-02));
	r += mul(s1_8, M4(-2.504e-03, 1.809e-02, -9.095e-04, 4.906e-03, -5.167e-02, -1.149e-01, 4.776e-02, -5.820e-02, 6.959e-02, 3.636e-02, -2.938e-02, 3.579e-02, 1.022e-01, 1.481e-01, -5.610e-02, -1.103e-01));
	r += V4(1.004e-03, 2.783e-03, 1.707e-03, -3.952e-03);
	return r;
}
void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = max(-s0_0, 0.0);
	V4 s1_1 = max(-s0_1, 0.0);
	V4 s1_2 = max(-s0_2, 0.0);
	V4 s1_3 = max(-s0_3, 0.0);
	V4 s1_4 = max(-s0_4, 0.0);
	V4 s1_5 = max(-s0_5, 0.0);
	V4 s1_6 = max(-s0_6, 0.0);
	V4 s1_7 = max(-s0_7, 0.0);
	V4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 3
//!DESC CuNNy-1x4C-BILINEAR-CHROMA-NVL-SH-out
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-1.256e-01, -1.774e-02, 1.142e-03, 5.604e-03, -2.262e-02, -6.917e-03, 1.431e-02, -1.791e-03, 2.802e-02, 4.714e-03, -1.012e-02, 2.079e-03, -3.332e-02, -1.593e-02, -7.246e-03, -3.282e-03));
	r += mul(s0_1, M4(2.588e-01, 7.007e-02, -2.062e-01, -1.096e-01, -6.943e-02, 5.263e-02, 4.918e-02, -4.040e-03, -9.702e-03, 1.957e-02, 1.833e-02, -1.465e-02, -6.761e-02, -5.135e-02, -6.358e-02, 2.039e-02));
	r += mul(s0_2, M4(-1.260e-02, 3.216e-02, -3.104e-02, -1.135e-01, 3.869e-02, -5.752e-02, 1.535e-02, -1.553e-02, 8.457e-03, -7.242e-03, -6.265e-03, 1.727e-02, -4.653e-02, -2.179e-02, 3.850e-03, -5.083e-03));
	r += mul(s0_3, M4(2.278e-02, 6.519e-02, 1.411e-02, -5.969e-02, 5.098e-04, -1.832e-02, -1.250e-02, -3.351e-02, 5.000e-02, 1.704e-02, 1.111e-02, 1.177e-02, 7.053e-02, 3.161e-02, 3.267e-02, -3.868e-03));
	r += mul(s0_4, M4(-6.154e-02, -1.067e-01, 1.750e-01, 2.649e-01, -3.784e-01, -1.295e-01, -4.063e-01, 1.323e-01, 1.483e-01, 3.538e-02, -2.540e-02, -6.107e-02, 4.150e-01, 8.813e-02, 3.643e-01, -3.587e-02));
	r += mul(s0_5, M4(8.368e-03, 6.284e-03, 1.334e-02, -3.194e-04, 6.812e-02, -3.511e-02, 9.351e-02, -6.522e-02, 3.531e-02, 1.951e-01, 1.569e-02, 2.844e-02, -9.448e-02, 2.803e-01, -1.599e-01, 2.109e-01));
	r += mul(s0_6, M4(1.716e-02, 2.203e-02, -5.138e-03, -8.879e-03, 1.274e-02, -2.083e-03, -1.339e-03, 2.592e-02, -1.126e-02, -1.499e-03, 6.409e-03, -6.761e-04, -1.873e-02, -1.642e-02, -9.497e-03, 1.620e-02));
	r += mul(s0_7, M4(-2.751e-03, -2.716e-02, 2.694e-02, 3.212e-02, 5.751e-02, 8.618e-02, 2.411e-02, -7.251e-02, -7.303e-02, -3.919e-02, 2.569e-02, -4.937e-02, -8.793e-02, -4.705e-02, -3.828e-02, -2.374e-02));
	r += mul(s0_8, M4(4.847e-03, 2.777e-02, -1.737e-03, -4.149e-03, 1.242e-02, -2.091e-02, 3.772e-02, -2.158e-02, -1.185e-02, -1.184e-01, 2.276e-02, 1.328e-01, -2.859e-02, -5.318e-02, -2.721e-02, -1.300e-02));
	r += mul(s1_0, M4(-8.842e-03, 5.863e-03, 8.187e-03, 1.881e-02, 9.328e-02, -7.960e-02, -4.412e-02, -7.225e-03, -6.419e-02, 6.181e-04, 2.654e-02, -3.307e-03, 1.401e-02, 5.701e-02, -2.938e-02, 1.514e-02));
	r += mul(s1_1, M4(3.544e-02, -3.060e-03, -3.340e-02, -5.238e-02, -3.186e-02, 7.105e-03, -1.365e-02, -7.410e-02, -7.670e-02, -2.281e-02, 5.821e-02, 7.261e-02, 2.716e-02, 4.876e-02, 4.313e-02, 1.326e-02));
	r += mul(s1_2, M4(-2.582e-02, -1.311e-02, -3.817e-03, 2.545e-02, -8.330e-04, 5.815e-03, 3.545e-03, -8.792e-03, 1.154e-02, -1.675e-01, 6.039e-02, 1.375e-01, 1.286e-02, -4.579e-03, -1.625e-03, 5.473e-03));
	r += mul(s1_3, M4(9.067e-02, -1.924e-02, -1.741e-01, 1.726e-02, 1.259e-01, -1.351e-01, 3.040e-01, -1.509e-01, -3.521e-02, -6.079e-03, -5.780e-03, -1.751e-02, -1.301e-01, 4.981e-02, -6.798e-02, 8.772e-02));
	r += mul(s1_4, M4(-7.785e-01, -2.895e-01, 6.116e-01, 1.140e-01, -2.693e-02, 3.839e-01, -3.869e-02, 3.061e-01, 6.574e-02, -1.067e-01, -2.325e-01, 1.675e-01, -1.054e-02, -5.488e-01, -4.700e-02, -3.350e-01));
	r += mul(s1_5, M4(3.435e-02, -2.228e-01, -8.374e-02, 1.281e-01, 2.317e-03, 1.886e-02, -4.068e-03, 3.254e-02, 2.349e-02, 3.428e-01, -1.654e-01, -6.152e-01, -4.408e-02, -3.794e-03, -5.258e-03, -3.938e-02));
	r += mul(s1_6, M4(9.389e-03, -3.166e-02, 7.581e-03, -2.845e-02, -3.136e-03, 2.934e-02, -4.915e-02, -5.336e-02, 3.681e-03, 3.518e-03, -5.072e-03, -7.187e-04, -3.984e-03, 1.868e-02, -1.727e-02, 2.654e-02));
	r += mul(s1_7, M4(1.480e-01, 1.436e-01, -1.574e-01, -8.016e-02, -1.456e-03, -9.950e-02, 1.316e-04, 3.307e-02, 7.750e-03, 1.992e-02, 1.333e-02, -1.567e-02, 3.672e-02, 1.167e-01, 5.815e-02, -3.188e-02));
	r += mul(s1_8, M4(3.051e-02, 3.022e-02, -3.679e-02, -3.337e-02, -3.755e-03, -8.465e-03, 1.136e-03, -9.437e-03, -3.381e-02, -5.992e-02, -1.155e-02, 2.233e-02, 2.069e-02, 1.121e-02, -4.555e-03, 3.253e-02));
	r += V4(-5.462e-04, -3.795e-04, -1.023e-04, -1.693e-04);
	return tanh(r);
}
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = max(-s0_0, 0.0);
	V4 s1_1 = max(-s0_1, 0.0);
	V4 s1_2 = max(-s0_2, 0.0);
	V4 s1_3 = max(-s0_3, 0.0);
	V4 s1_4 = max(-s0_4, 0.0);
	V4 s1_5 = max(-s0_5, 0.0);
	V4 s1_6 = max(-s0_6, 0.0);
	V4 s1_7 = max(-s0_7, 0.0);
	V4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 4
//!DESC CuNNy-1x4C-BILINEAR-CHROMA-NVL-SH-shuffle
//!STYLE PS
//!IN t0, INPUT
float4 Pass4(float2 pos) {
	float2 pt = float2(GetInputPt());
	const static float3x3 rgb2yuv = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081};
	const static float3x3 yuv2rgb = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float4 r = 0.0;
	float2 size = float2(GetInputSize());
	float2 f = frac(pos * size);
	float3 yuv = mul(rgb2yuv, INPUT.SampleLevel(SL, pos, 0).rgb);
	int2 i = int2(f * 2.0);
	r.r = t0.SampleLevel(SP, (float2(0.5, 0.5) - f) * pt + pos, 0)[2*i.y + i.x];
	r.r += yuv.r;
	r.a = 1.0;
	r.r = clamp(r, 0.0, 1.0);
	float3 px = mul(yuv2rgb, float3(r.r, yuv.yz));
	return float4(px, 1.0);
}
