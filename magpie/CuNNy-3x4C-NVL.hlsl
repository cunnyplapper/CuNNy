// CuNNy 3x4C BILINEAR CHROMA NVL
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

//!MAGPIE EFFECT
//!VERSION 3
//!OUTPUT_WIDTH INPUT_WIDTH * 2
//!OUTPUT_HEIGHT INPUT_HEIGHT * 2

//!TEXTURE
Texture2D INPUT;

//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D in_0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D conv1_0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D conv2_0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D conv3_0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D out_0;

//!PASS 1
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-in
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT in_0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) (dot(float3(3.079437255859375, 5.556908130645752, 1.4527987241744995), O(INPUT, float2(x, y)).rgb) + -0.9626484513282776)
float4 f0(float2 pt, float2 pos, min16float s0_0, min16float s0_1, min16float s0_2, min16float s0_3, min16float s0_4, min16float s0_5, min16float s0_6, min16float s0_7, min16float s0_8) {
	min16float4 r = 0.0;
	r += min16float4(0.0034754679072648287, 0.02273249439895153, 0.04909859225153923, 0.0012103314511477947) * s0_0;
	r += min16float4(-0.02374078333377838, 0.015569193288683891, -0.22585153579711914, -0.0032555670477449894) * s0_1;
	r += min16float4(0.02946912869811058, -0.03373178839683533, -0.02606336586177349, 0.002873541321605444) * s0_2;
	r += min16float4(0.08135630190372467, 0.018035531044006348, 0.20665830373764038, -0.005921309348195791) * s0_3;
	r += min16float4(0.06952982395887375, -0.4169178009033203, 0.1412639021873474, -0.00010750225919764489) * s0_4;
	r += min16float4(0.01335129700601101, 0.17236328125, 0.005178746767342091, 0.3457241952419281) * s0_5;
	r += min16float4(0.07250921428203583, -0.03943391516804695, -0.032758913934230804, 0.005198111291974783) * s0_6;
	r += min16float4(-0.3301399052143097, 0.002093757037073374, -0.1159667819738388, -0.0008966602035798132) * s0_7;
	r += min16float4(0.018689807504415512, 0.25819170475006104, -0.0013887095265090466, -0.3447265625) * s0_8;
	r += min16float4(-0.05369781702756882, -0.0028931456618010998, 0.00875552836805582, 0.0018475987017154694);
	return r;
}
void Pass1(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float s0_0 = l0(-1.0, -1.0);
	min16float s0_1 = l0(0.0, -1.0);
	min16float s0_2 = l0(1.0, -1.0);
	min16float s0_3 = l0(-1.0, 0.0);
	min16float s0_4 = l0(0.0, 0.0);
	min16float s0_5 = l0(1.0, 0.0);
	min16float s0_6 = l0(-1.0, 1.0);
	min16float s0_7 = l0(0.0, 1.0);
	min16float s0_8 = l0(1.0, 1.0);
	in_0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8);
}
//!PASS 2
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-conv1
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN in_0
//!OUT conv1_0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) O(in_0, float2(x, y))
float4 f0(float2 pt, float2 pos, min16float4 s0_0, min16float4 s0_1, min16float4 s0_2, min16float4 s0_3, min16float4 s0_4, min16float4 s0_5, min16float4 s0_6, min16float4 s0_7, min16float4 s0_8, min16float4 s1_0, min16float4 s1_1, min16float4 s1_2, min16float4 s1_3, min16float4 s1_4, min16float4 s1_5, min16float4 s1_6, min16float4 s1_7, min16float4 s1_8) {
	min16float4 r = 0.0;
	r += mul(s0_0, min16float4x4(-0.15594492852687836, 0.03098336234688759, 0.023716900497674942, -0.09693662822246552, -0.11743240803480148, -0.01652413234114647, 0.02822759561240673, -0.0304858461022377, 0.006863955408334732, 0.0028084951918572187, 0.007442880421876907, 0.02262199856340885, -0.16121576726436615, -0.13474708795547485, 0.03680507466197014, -0.04153117537498474));
	r += mul(s0_1, min16float4x4(-0.2851329743862152, 0.06980642676353455, -0.2483251690864563, -0.44092756509780884, -0.12832653522491455, 0.27186647057533264, 0.3055611252784729, -0.10723485052585602, -0.04385925829410553, -0.042544931173324585, 0.03235010802745819, 0.018230946734547615, -0.20545002818107605, 0.5323494076728821, 0.21143127977848053, -0.25074252486228943));
	r += mul(s0_2, min16float4x4(0.03327818587422371, -0.11723663657903671, 0.20058989524841309, -0.0290132574737072, -0.004915512632578611, 0.090105339884758, -0.023572199046611786, -0.10328926891088486, -0.006204104050993919, 0.038454726338386536, -0.019895009696483612, -0.054124828428030014, -0.015306257642805576, 0.053026191890239716, 0.05167432501912117, -0.03541333228349686));
	r += mul(s0_3, min16float4x4(0.19144950807094574, 0.10957656055688858, 0.12085312604904175, 0.11627102643251419, 0.28418004512786865, 0.08827967196702957, -0.007315571419894695, 0.04774031415581703, -0.01707357168197632, -0.04328056052327156, -0.03872544318437576, 0.029613198712468147, 0.1888957917690277, 0.09822732955217361, 0.42191198468208313, 0.18706800043582916));
	r += mul(s0_4, min16float4x4(0.1521299183368683, 0.09179630130529404, -0.24167656898498535, -0.01558926422148943, -0.7572046518325806, -0.05251611769199371, 0.18460442125797272, -0.12482695281505585, 0.07870067656040192, -0.18640723824501038, -0.3251951336860657, -0.08422859758138657, 0.041872862726449966, 0.1870114803314209, -0.2558383047580719, -0.30162185430526733));
	r += mul(s0_5, min16float4x4(0.05798766389489174, -0.21718288958072662, -0.033573612570762634, 0.01771772839128971, 0.03501167520880699, 0.03915386274456978, 0.16145044565200806, -0.0625690221786499, 0.1383085399866104, 0.20208637416362762, 0.24820852279663086, 0.15416474640369415, 0.041451968252658844, -0.0470091812312603, -0.034409262239933014, -0.021116646006703377));
	r += mul(s0_6, min16float4x4(-0.026738828048110008, 0.05222813040018082, 0.11347698420286179, 0.018412047997117043, 0.08853951841592789, 0.10962137579917908, 0.019568659365177155, -0.019838523119688034, 0.04246651008725166, -0.033888936042785645, -0.12084882706403732, -0.05051501467823982, 0.022047264501452446, 0.013219263404607773, -0.14890450239181519, -0.04968436434864998));
	r += mul(s0_7, min16float4x4(0.08440227061510086, 0.02286161296069622, 0.15673543512821198, 0.057171862572431564, 0.29588016867637634, 0.5058631896972656, -0.18323470652103424, 0.15411515533924103, -0.1674288809299469, -0.3706378638744354, 0.2047944962978363, -0.14164677262306213, 0.08569306135177612, 0.3115234076976776, -0.07007759809494019, 0.36581066250801086));
	r += mul(s0_8, min16float4x4(0.1641581654548645, -0.07783084362745285, 0.07717294245958328, -0.025804996490478516, -0.059731677174568176, 0.03390344977378845, -0.20471662282943726, -0.19893042743206024, -0.068082794547081, -0.013848815113306046, -0.11894286423921585, -0.26660120487213135, -0.0050146309658885, -0.018969623371958733, -0.07168000191450119, -0.009172755293548107));
	r += mul(s1_0, min16float4x4(0.18365830183029175, 0.044807758182287216, -0.03210167586803436, 0.058762937784194946, 0.015054576098918915, 0.005355617497116327, 0.06520823389291763, 0.0676644816994667, 0.002934633055701852, -0.011183464899659157, -0.02976973168551922, -0.04406736046075821, -0.08376749604940414, 0.039766278117895126, 0.052064843475818634, 0.06151220574975014));
	r += mul(s1_1, min16float4x4(0.3286741077899933, -0.07640447467565536, -0.03159199655056, 0.1358974277973175, -0.06165192276239395, 0.050660666078329086, -0.17244680225849152, -0.1860409677028656, 0.019673043861985207, -0.0005805945838801563, 0.0030853257048875093, 0.023995250463485718, -0.19190548360347748, 0.03469782695174217, -0.05572379752993584, -0.14204391837120056));
	r += mul(s1_2, min16float4x4(0.09374243021011353, -0.10588674247264862, -0.10620218515396118, 0.09152894467115402, -0.014384621754288673, -0.005386164877563715, 0.005050542298704386, -0.03058398701250553, 0.03014330379664898, -0.03321308642625809, 0.04430663585662842, 0.06033768504858017, -0.012141427956521511, -0.007515156641602516, 0.03484463691711426, -0.0031004478223621845));
	r += mul(s1_3, min16float4x4(-0.18025749921798706, -0.019980089738965034, -0.19424502551555634, -0.12463118880987167, -0.3218495845794678, -0.030081644654273987, 0.20114155113697052, -0.06331713497638702, 0.005106680560857058, -0.03851182758808136, 0.08032157272100449, 0.0218760184943676, -0.6263220310211182, 0.036796268075704575, 0.09957008808851242, -0.01735009253025055));
	r += mul(s1_4, min16float4x4(-0.19675558805465698, -0.04723816365003586, 0.18537022173404694, -0.20068387687206268, 0.3049788475036621, 0.5722658634185791, 0.006833269726485014, -0.06332685798406601, -0.11059682071208954, 0.01934141479432583, 0.25413769483566284, 0.11168895661830902, -0.1514453887939453, 0.09225134551525116, -0.03869828209280968, -0.06451832503080368));
	r += mul(s1_5, min16float4x4(0.014761926606297493, 0.1599128246307373, 0.1963444948196411, 0.1214861199259758, -0.0203337911516428, -0.03436031565070152, -0.1545790582895279, -0.02463124506175518, 0.2266058623790741, -0.7826514840126038, -0.5708709955215454, 0.2805379033088684, 0.00028156486223451793, 0.03210311755537987, 0.05020623654127121, 0.09219822287559509));
	r += mul(s1_6, min16float4x4(0.05041463300585747, 0.041174136102199554, -0.07285966724157333, 0.02362743206322193, 0.0077118296176195145, 0.1109708771109581, 0.01129215955734253, 0.1254880577325821, -0.03845224156975746, -0.003178646555170417, 0.16014504432678223, 0.05342699587345123, 0.02985948696732521, -0.0170211810618639, 0.02207016386091709, 0.11852748692035675));
	r += mul(s1_7, min16float4x4(-0.09974907338619232, -0.029730072245001793, -0.028010142967104912, -0.14407102763652802, -0.2987803816795349, -0.2900390625, 0.014194507151842117, -0.3876049220561981, 0.0794619768857956, 0.09789782762527466, -0.4248044192790985, 0.004059265833348036, -0.11303762346506119, -0.42797693610191345, -0.7833048701286316, -0.5524000525474548));
	r += mul(s1_8, min16float4x4(-0.1722058653831482, 0.04327889159321785, 0.08950626105070114, 0.04892285540699959, 0.027785813435912132, 0.013598435558378696, 0.098556287586689, 0.024218155071139336, 0.07171659916639328, -0.10888916999101639, -0.033877428621053696, 0.3155374228954315, 0.028942035511136055, -0.03095516376197338, -0.09859412163496017, 0.08173424750566483));
	r += min16float4(-0.024380257353186607, -0.04478961601853371, -0.010581192560493946, 0.0035730022937059402);
	return r;
}
void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float4 s0_0 = l0(-1.0, -1.0);
	min16float4 s0_1 = l0(0.0, -1.0);
	min16float4 s0_2 = l0(1.0, -1.0);
	min16float4 s0_3 = l0(-1.0, 0.0);
	min16float4 s0_4 = l0(0.0, 0.0);
	min16float4 s0_5 = l0(1.0, 0.0);
	min16float4 s0_6 = l0(-1.0, 1.0);
	min16float4 s0_7 = l0(0.0, 1.0);
	min16float4 s0_8 = l0(1.0, 1.0);
	min16float4 s1_0 = max(-s0_0, 0.0);
	min16float4 s1_1 = max(-s0_1, 0.0);
	min16float4 s1_2 = max(-s0_2, 0.0);
	min16float4 s1_3 = max(-s0_3, 0.0);
	min16float4 s1_4 = max(-s0_4, 0.0);
	min16float4 s1_5 = max(-s0_5, 0.0);
	min16float4 s1_6 = max(-s0_6, 0.0);
	min16float4 s1_7 = max(-s0_7, 0.0);
	min16float4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	conv1_0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 3
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-conv2
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN conv1_0
//!OUT conv2_0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) O(conv1_0, float2(x, y))
float4 f0(float2 pt, float2 pos, min16float4 s0_0, min16float4 s0_1, min16float4 s0_2, min16float4 s0_3, min16float4 s0_4, min16float4 s0_5, min16float4 s0_6, min16float4 s0_7, min16float4 s0_8, min16float4 s1_0, min16float4 s1_1, min16float4 s1_2, min16float4 s1_3, min16float4 s1_4, min16float4 s1_5, min16float4 s1_6, min16float4 s1_7, min16float4 s1_8) {
	min16float4 r = 0.0;
	r += mul(s0_0, min16float4x4(0.08027611672878265, -0.10734535753726959, -0.05798467993736267, -0.11195357143878937, -0.11025729030370712, 0.08600252866744995, 0.05404265597462654, 0.02944772318005562, 0.1921251267194748, -0.15948601067066193, 0.2840130627155304, 0.03390815854072571, -0.12892766296863556, 0.016264157369732857, -0.04701000079512596, -0.09346039593219757));
	r += mul(s0_1, min16float4x4(0.019284896552562714, -0.28691500425338745, 2.117187738418579, -0.14691056311130524, -0.036954429000616074, 0.005000083241611719, 0.15954330563545227, -0.03786611557006836, -0.13326844573020935, -0.0588759146630764, 0.450981080532074, 0.13483238220214844, -0.4111463725566864, -0.14268864691257477, -0.17474041879177094, -0.13004013895988464));
	r += mul(s0_2, min16float4x4(-0.14905528724193573, -0.00977097637951374, -0.058928605169057846, -0.04941389337182045, 0.011129233054816723, -0.03177713602781296, 0.09983422607183456, -0.07520028203725815, -0.04985811188817024, 0.085264652967453, -0.013432713225483894, 0.09364882856607437, 0.004548287950456142, 0.03930617496371269, -0.04056848958134651, -0.05046054348349571));
	r += mul(s0_3, min16float4x4(0.29733869433403015, 0.17772038280963898, 0.02318926528096199, 0.050500113517045975, -0.33559510111808777, -0.27246084809303284, -0.13332858681678772, 0.0009044060716405511, 0.34863224625587463, -0.09545869380235672, 0.06213092803955078, 0.18143366277217865, 0.12110579758882523, 0.06013413891196251, 0.02720484510064125, -0.14214763045310974));
	r += mul(s0_4, min16float4x4(0.17853885889053345, 0.15771329402923584, -0.007310069631785154, 0.3642193377017975, -0.3723672926425934, 0.40123629570007324, -0.04552280157804489, -0.2430514097213745, -0.1742275059223175, -0.3775104284286499, -0.1791577935218811, 0.4109342694282532, 0.07206600159406662, -0.0852702185511589, 0.043364014476537704, -0.47709065675735474));
	r += mul(s0_5, min16float4x4(0.026533104479312897, -0.3475523591041565, 0.026471611112356186, -0.24276085197925568, 0.047192975878715515, -0.14599555730819702, 0.1420888751745224, 0.005093116778880358, -0.010474915616214275, 0.07940059155225754, 0.005375123117119074, 0.18160779774188995, 0.004537574946880341, -0.0730968490242958, -0.11937867105007172, -0.14090585708618164));
	r += mul(s0_6, min16float4x4(-0.08444036543369293, 0.07377360016107559, -0.1110721081495285, -0.26160556077957153, 0.11938448250293732, -0.04984249174594879, 0.1125480905175209, 0.352655827999115, -0.0701231062412262, -0.0039028103929013014, 0.04819190129637718, -0.07571487128734589, -0.037071216851472855, -0.004394537303596735, -0.021383827552199364, -0.06370990723371506));
	r += mul(s0_7, min16float4x4(-0.11348298192024231, 0.1298772394657135, 9.488869545748457e-05, -0.3675806224346161, 0.00972671713680029, 0.047661732882261276, -0.020410912111401558, -0.031242549419403076, 0.003890424035489559, 0.09640076011419296, 0.039832789450883865, -0.008859487250447273, 0.08030080050230026, -0.1586780697107315, 0.033571820706129074, 0.2861328423023224));
	r += mul(s0_8, min16float4x4(0.050248898565769196, -0.16498957574367523, 0.02218892239034176, 0.18994182348251343, 0.0764528140425682, -0.08109419047832489, 0.033622559159994125, 0.31398242712020874, -0.023138834163546562, 0.012683065608143806, 0.00025390705559402704, 0.04000149667263031, 0.003856097813695669, 0.005045619327574968, -0.0150489816442132, -0.13082562386989594));
	r += mul(s1_0, min16float4x4(-0.09182292222976685, 0.09303455799818039, -0.009662764146924019, 0.04406875744462013, 0.010275810025632381, 0.0031330978963524103, -0.12841597199440002, -0.036039989441633224, -0.11225252598524094, 0.17160582542419434, -0.038268111646175385, 0.06187507137656212, 0.17586557567119598, -0.1499342918395996, 0.05017188936471939, -0.11156105995178223));
	r += mul(s1_1, min16float4x4(-0.02831309102475643, 0.01545366644859314, -0.1539795845746994, 0.0014227509964257479, -0.007189152296632528, -0.07343623042106628, -0.21292056143283844, -0.038686271756887436, 0.2002025693655014, -0.007924671284854412, 0.1030222624540329, 0.3642542064189911, -0.03813943266868591, -0.01829298958182335, 0.12562057375907898, -0.02547391504049301));
	r += mul(s1_2, min16float4x4(-0.0011458882363513112, -0.022155944257974625, 0.01909530907869339, -0.04602179303765297, -0.011648276820778847, 0.06400924921035767, 0.0011074591893702745, 0.07646065950393677, -0.005977401044219732, -0.03354884311556816, -0.0300663523375988, -0.0335674025118351, -0.018990932032465935, 0.04280972108244896, -0.05991581454873085, 0.06469148397445679));
	r += mul(s1_3, min16float4x4(-0.21061819791793823, -0.0466623492538929, -0.013880202546715736, -0.019042590633034706, 0.16166138648986816, 0.051523372530937195, 0.07136918604373932, -0.04689709469676018, 0.01146817859262228, 0.12538781762123108, -0.09175042062997818, -0.03464220464229584, 0.1450558751821518, 0.0377800390124321, -0.03639145940542221, 0.01593373902142048));
	r += mul(s1_4, min16float4x4(0.2726219594478607, -0.34863001108169556, 0.05604031682014465, -0.20595015585422516, 0.15833206474781036, -0.18150603771209717, 0.2299867421388626, 0.18665580451488495, 0.10370802879333496, -0.02579149603843689, 0.05546543002128601, 0.21104775369167328, 0.06724683940410614, -0.0014201926533132792, -0.11831936240196228, 0.5071064829826355));
	r += mul(s1_5, min16float4x4(-0.020688170567154884, 0.08031057566404343, -0.0966101735830307, 0.22867310047149658, -0.002756719011813402, 0.1290045529603958, -0.107246533036232, 0.055611371994018555, -0.015165465883910656, -0.038863565772771835, -0.014854188077151775, -0.08232881873846054, -0.03503436967730522, 0.07130186259746552, -0.008594295009970665, -0.08043359965085983));
	r += mul(s1_6, min16float4x4(0.036644525825977325, -0.09383086115121841, 0.08569329231977463, 0.19872960448265076, 0.007065668702125549, 0.14209102094173431, -0.09237507730722427, -0.26451045274734497, 0.012453085742890835, 0.0006661214283667505, 0.0018271526787430048, 0.029726650565862656, -0.04413518309593201, -0.010785900056362152, -0.00262202275916934, -0.026281386613845825));
	r += mul(s1_7, min16float4x4(-0.008300074376165867, -0.18701231479644775, 0.040300153195858, 0.09981689602136612, 0.10255346447229385, -0.04075608029961586, 0.01108274795114994, 0.21044784784317017, 0.012834236957132816, -0.03381337970495224, 0.007074626162648201, 0.06800195574760437, -0.1063242182135582, 0.1577146351337433, -0.03765352442860603, -0.34275737404823303));
	r += mul(s1_8, min16float4x4(-0.09660694003105164, 0.09619437158107758, -0.00825109425932169, -0.27035439014434814, -0.08905107527971268, 0.022247813642024994, -0.08481872081756592, -0.27105292677879333, 0.011813831515610218, -0.006672580726444721, 0.006567773409187794, 0.05124960094690323, -0.0009744957205839455, 0.01278732530772686, -0.010889125987887383, -0.03284488990902901));
	r += min16float4(-0.0060770101845264435, -0.002785271732136607, 0.025694286450743675, 0.013377245515584946);
	return r;
}
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float4 s0_0 = l0(-1.0, -1.0);
	min16float4 s0_1 = l0(0.0, -1.0);
	min16float4 s0_2 = l0(1.0, -1.0);
	min16float4 s0_3 = l0(-1.0, 0.0);
	min16float4 s0_4 = l0(0.0, 0.0);
	min16float4 s0_5 = l0(1.0, 0.0);
	min16float4 s0_6 = l0(-1.0, 1.0);
	min16float4 s0_7 = l0(0.0, 1.0);
	min16float4 s0_8 = l0(1.0, 1.0);
	min16float4 s1_0 = max(-s0_0, 0.0);
	min16float4 s1_1 = max(-s0_1, 0.0);
	min16float4 s1_2 = max(-s0_2, 0.0);
	min16float4 s1_3 = max(-s0_3, 0.0);
	min16float4 s1_4 = max(-s0_4, 0.0);
	min16float4 s1_5 = max(-s0_5, 0.0);
	min16float4 s1_6 = max(-s0_6, 0.0);
	min16float4 s1_7 = max(-s0_7, 0.0);
	min16float4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	conv2_0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 4
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-conv3
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN conv2_0
//!OUT conv3_0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) O(conv2_0, float2(x, y))
float4 f0(float2 pt, float2 pos, min16float4 s0_0, min16float4 s0_1, min16float4 s0_2, min16float4 s0_3, min16float4 s0_4, min16float4 s0_5, min16float4 s0_6, min16float4 s0_7, min16float4 s0_8, min16float4 s1_0, min16float4 s1_1, min16float4 s1_2, min16float4 s1_3, min16float4 s1_4, min16float4 s1_5, min16float4 s1_6, min16float4 s1_7, min16float4 s1_8) {
	min16float4 r = 0.0;
	r += mul(s0_0, min16float4x4(0.024231772869825363, -0.010201625525951385, 0.04113611951470375, 0.004867826122790575, 0.2096635103225708, -0.3784376382827759, 0.25879475474357605, 0.044283509254455566, -0.0066216797567903996, 0.024586038663983345, -0.0146554009988904, -0.0154221560806036, 0.002536606043577194, -0.0014161355793476105, 0.006152251735329628, 0.020571965724229813));
	r += mul(s0_1, min16float4x4(0.114662766456604, -0.07485925406217575, 0.1054159551858902, 0.08141718804836273, -0.3213031589984894, 0.2890237867832184, -0.17004555463790894, -0.2529296875, -0.02631334587931633, 0.04846925288438797, -0.019466208294034004, -0.002469453727826476, -0.026662006974220276, 0.052489470690488815, -0.0758223831653595, -0.0656474381685257));
	r += mul(s0_2, min16float4x4(0.05925804004073143, 0.0427631177008152, 0.017583711072802544, 0.060046352446079254, -0.0398186594247818, 0.004618107806891203, 0.022876452654600143, -0.08813118189573288, -0.0033823237754404545, -0.03869638964533806, 0.026305079460144043, -0.016806133091449738, 0.024230150505900383, 0.016060953959822655, -0.022632088512182236, 0.04977616295218468));
	r += mul(s0_3, min16float4x4(-0.09720432758331299, -0.013984372839331627, -0.003425629809498787, 0.05816979706287384, 0.11300840228796005, 0.3121667206287384, 0.272207111120224, -0.6356114745140076, -0.02005017176270485, 0.022943804040551186, -0.03868450969457626, -0.003923258278518915, -0.10964986681938171, 0.04735006019473076, -0.08659489452838898, -0.06252732872962952));
	r += mul(s0_4, min16float4x4(-0.1616210639476776, -0.10226850211620331, 0.06071387231349945, 0.06618981808423996, 0.02410946600139141, -0.11153510212898254, -0.18578918278217316, 0.3076210916042328, -0.03760259598493576, 0.10914457589387894, -0.09009125083684921, 0.0011215461418032646, -0.03227666765451431, 0.0014968980103731155, -0.05850139632821083, -0.06518647819757462));
	r += mul(s0_5, min16float4x4(0.06001143157482147, -0.07578803598880768, -0.11681647598743439, -0.033420126885175705, 0.11645489931106567, -0.09716161340475082, 0.018858598545193672, 0.08381127566099167, -0.07006868720054626, 0.018607649952173233, 0.04762938246130943, -0.08479931950569153, 0.008501452393829823, 0.024510376155376434, 0.015513155609369278, -0.006404816638678312));
	r += mul(s0_6, min16float4x4(-0.01607583276927471, 0.010632799006998539, -0.026154905557632446, -0.034055016934871674, 0.0661417543888092, 0.06420890986919403, 0.08881855756044388, -0.025410640984773636, 0.007556490134447813, -0.01375527959316969, -0.015408088453114033, 0.010553376749157906, -0.013855835422873497, -0.010020073503255844, -0.014251296408474445, 0.009964710101485252));
	r += mul(s0_7, min16float4x4(0.023481866344809532, 0.0027843902353197336, 0.021153133362531662, 0.00971890427172184, 0.028249170631170273, 0.07805175334215164, 0.04319470375776291, -0.07058735191822052, 0.033768899738788605, 0.034889668226242065, -0.19424784183502197, -0.023985831066966057, -0.008908338844776154, -0.0070137884467840195, 0.007994365878403187, 0.00267960736528039));
	r += mul(s0_8, min16float4x4(-0.013119968585669994, 0.00814745482057333, -0.06547587364912033, -0.02032284066081047, -0.00887620821595192, 0.026184650138020515, -0.035042885690927505, -0.019743476063013077, -0.05305735394358635, -0.00426137913018465, -0.03310030326247215, -0.0035196873359382153, 0.0021491001825779676, -0.0012025090400129557, 0.013534159399569035, 0.0012221928918734193));
	r += mul(s1_0, min16float4x4(0.029092054814100266, -0.02497248910367489, 0.01985335722565651, 0.007927368395030499, -1.5057636119308881e-05, 0.011710512451827526, -0.003400866873562336, 0.006607395596802235, 0.03914915397763252, -0.008042052388191223, 0.024383360520005226, -0.04527483880519867, 0.8313870429992676, -0.21341100335121155, 0.06924371421337128, -0.19873006641864777));
	r += mul(s1_1, min16float4x4(0.1327742487192154, -0.11018974334001541, 0.06811520457267761, 0.04015408828854561, 0.13428166508674622, -0.218267560005188, 0.10113748162984848, 0.03292449191212654, -0.10066476464271545, 0.3583984673023224, -0.19482699036598206, -0.020846884697675705, 0.2822306156158447, 1.1384981870651245, -0.5403063297271729, 0.9367876052856445));
	r += mul(s1_2, min16float4x4(0.008494216948747635, 0.06007188558578491, -0.04433843865990639, 0.0769042894244194, 0.03962729498744011, 0.11518294364213943, -0.07788094878196716, 0.11239150911569595, 0.022654950618743896, -0.021684732288122177, 0.0368632972240448, 0.009826785884797573, -0.030139725655317307, -0.05175986886024475, 0.0645996481180191, -0.0822913721203804));
	r += mul(s1_3, min16float4x4(0.01110790017992258, -0.0045196982100605965, 0.04523905739188194, -0.011185050010681152, 0.04738876596093178, -0.0255801510065794, -0.026048295199871063, -0.005117123946547508, 0.45537903904914856, -0.009024675004184246, -0.17705534398555756, -0.3349161446094513, -0.031347569078207016, 0.04836396872997284, 0.052363354712724686, 0.06475529819726944));
	r += mul(s1_4, min16float4x4(0.2833438515663147, -0.2800818085670471, 0.33437368273735046, -0.03501400724053383, -0.3251097798347473, 0.16246052086353302, 0.12060917913913727, -0.05813431739807129, 0.22957457602024078, 0.9554935693740845, -1.0258773565292358, 0.7128896713256836, 0.12332067638635635, -0.020014632493257523, -0.16547904908657074, -0.29090338945388794));
	r += mul(s1_5, min16float4x4(-0.1836484670639038, 0.13034428656101227, -0.04924222454428673, -0.1086464524269104, -0.02447417937219143, 0.031066855415701866, -0.17527516186237335, -0.041477058082818985, 0.07124418765306473, 0.07110051065683365, -0.017556436359882355, 0.12549027800559998, -0.03258800134062767, -0.08831558376550674, 0.08417747169733047, -0.05407086759805679));
	r += mul(s1_6, min16float4x4(0.026059428229928017, 0.009517396800220013, -0.015588418580591679, -0.009161802940070629, 0.028924956917762756, 0.01633693091571331, 0.061211369931697845, 0.0005575238028541207, 0.05493725463747978, 0.08678346127271652, 0.0040981462225317955, -0.0702165886759758, -0.006635234225541353, 0.013808210380375385, -0.038320738822221756, -0.020316600799560547));
	r += mul(s1_7, min16float4x4(-0.104844830930233, 0.007584837730973959, 0.04399259388446808, -0.03279736265540123, -0.03059769980609417, -0.009705416858196259, -0.02193472348153591, 0.013679800555109978, 0.351248562335968, 0.007456233724951744, 0.31926390528678894, 0.08600717782974243, -0.04717693477869034, 0.01727425865828991, 0.03103567287325859, -0.03849096596240997));
	r += mul(s1_8, min16float4x4(-0.019311796873807907, -0.021379191428422928, 0.03490458056330681, 0.015685440972447395, 0.0008363722008652985, -0.002796369371935725, -0.03385815769433975, 0.009459289722144604, 0.025803357362747192, 0.0335693359375, -0.09733428061008453, 0.007158827036619186, -0.024827590212225914, -0.007788601331412792, 0.05418116971850395, 0.002176658483222127));
	r += min16float4(0.004075140226632357, 0.0012377179227769375, 0.00015312300820369273, -0.0006162934005260468);
	return r;
}
void Pass4(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float4 s0_0 = l0(-1.0, -1.0);
	min16float4 s0_1 = l0(0.0, -1.0);
	min16float4 s0_2 = l0(1.0, -1.0);
	min16float4 s0_3 = l0(-1.0, 0.0);
	min16float4 s0_4 = l0(0.0, 0.0);
	min16float4 s0_5 = l0(1.0, 0.0);
	min16float4 s0_6 = l0(-1.0, 1.0);
	min16float4 s0_7 = l0(0.0, 1.0);
	min16float4 s0_8 = l0(1.0, 1.0);
	min16float4 s1_0 = max(-s0_0, 0.0);
	min16float4 s1_1 = max(-s0_1, 0.0);
	min16float4 s1_2 = max(-s0_2, 0.0);
	min16float4 s1_3 = max(-s0_3, 0.0);
	min16float4 s1_4 = max(-s0_4, 0.0);
	min16float4 s1_5 = max(-s0_5, 0.0);
	min16float4 s1_6 = max(-s0_6, 0.0);
	min16float4 s1_7 = max(-s0_7, 0.0);
	min16float4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	conv3_0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 5
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-out
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN conv3_0
//!OUT out_0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) O(conv3_0, float2(x, y))
float4 f0(float2 pt, float2 pos, min16float4 s0_0, min16float4 s0_1, min16float4 s0_2, min16float4 s0_3, min16float4 s0_4, min16float4 s0_5, min16float4 s0_6, min16float4 s0_7, min16float4 s0_8, min16float4 s1_0, min16float4 s1_1, min16float4 s1_2, min16float4 s1_3, min16float4 s1_4, min16float4 s1_5, min16float4 s1_6, min16float4 s1_7, min16float4 s1_8) {
	min16float4 r = 0.0;
	r += mul(s0_0, min16float4x4(0.017015162855386734, 0.010306179523468018, 0.006654506549239159, 0.002426405670121312, -0.0511474646627903, 0.03045669011771679, -0.000730779254809022, 0.01959388144314289, -0.09448228776454926, 0.019924448803067207, -0.039516381919384, 0.01654466986656189, 0.041800010949373245, 0.01711382530629635, 0.040435511618852615, 0.010389129631221294));
	r += mul(s0_1, min16float4x4(-0.06372005492448807, -0.04054519161581993, -0.047172341495752335, -0.021284030750393867, -0.03106703609228134, -0.1668117195367813, 0.05334455892443657, -0.017908791080117226, -0.01099611446261406, -0.2321510761976242, 0.0881347581744194, -0.017393359914422035, 0.03599343076348305, 0.049550801515579224, 0.040624260902404785, 0.029219936579465866));
	r += mul(s0_2, min16float4x4(0.0010002668714150786, 0.0034871422685682774, -0.01723848097026348, -0.007713612634688616, -0.0002916462253779173, 0.019763562828302383, -0.013988090679049492, 0.006788403727114201, -0.0057855877093970776, -0.00588598707690835, 0.007271917536854744, 0.007415199652314186, -0.005964451469480991, -0.01718560792505741, 0.018695160746574402, 0.005099202506244183));
	r += mul(s0_3, min16float4x4(-0.0856391116976738, -0.010345270857214928, -0.031167661771178246, 0.005457209888845682, -0.2607421278953552, 0.002715814160183072, -0.1431022584438324, 0.03503427281975746, 0.009115086868405342, -0.004684642888605595, -0.020479435101151466, 0.014998308382928371, -0.22528372704982758, 0.028500014916062355, -0.0956556648015976, 0.07361025363206863));
	r += mul(s0_4, min16float4x4(0.5058589577674866, -0.01935306191444397, 0.24478450417518616, -0.021411877125501633, 0.045728202909231186, -0.3505859673023224, 0.0936262309551239, -0.21045032143592834, -0.26464876532554626, 0.07690256088972092, -0.20785577595233917, -0.102056123316288, -0.12238121777772903, 0.25097692012786865, -0.3448105454444885, -0.03991640359163284));
	r += mul(s0_5, min16float4x4(-0.009490400552749634, 0.1690739393234253, 0.03484705090522766, 0.09594738483428955, -0.008424099534749985, 0.05041387304663658, 0.006091822870075703, 0.049470677971839905, 0.02146601863205433, 0.033812958747148514, -0.014905072748661041, -0.09740981459617615, 0.0037223869003355503, -0.13139338791370392, -0.0034817790146917105, -0.09257995337247849));
	r += mul(s0_6, min16float4x4(0.009159674867987633, 0.009650292806327343, -0.011550110764801502, 0.0022564176470041275, 0.012864417396485806, 0.020062929019331932, -0.019343430176377296, 0.015687301754951477, -0.0005614296533167362, -0.019820448011159897, 0.03332490101456642, -0.01715085282921791, 0.033583834767341614, 0.0395473875105381, -0.23291020095348358, 0.07494892179965973));
	r += mul(s0_7, min16float4x4(-0.016258221119642258, -0.04061688482761383, 0.13619054853916168, -0.05771201476454735, 0.005908832885324955, 0.021772436797618866, -0.07935585826635361, -0.09984101355075836, 0.041398175060749054, 0.003648565849289298, -0.10169651359319687, 0.03026469424366951, -0.02448202669620514, -0.026777883991599083, -0.0070571149699389935, -0.15087872743606567));
	r += mul(s0_8, min16float4x4(-0.0013570444425567985, 0.03340225666761398, -0.028141077607870102, 0.05920387804508209, 0.0005099264672026038, -0.013439522124826908, -0.0022156161721795797, 0.0025465923827141523, -0.014756341464817524, -0.005592516157776117, -0.036975208669900894, 0.06686191260814667, 0.003211255883798003, -0.021565230563282967, -0.01725923828780651, -0.0810651034116745));
	r += mul(s1_0, min16float4x4(0.019814159721136093, -0.01604660227894783, -0.019742559641599655, -0.008739759214222431, 0.04186447709798813, -0.01218605786561966, 0.009367919526994228, -0.011809861287474632, 0.13372398912906647, -0.017762597650289536, 0.024360977113246918, -0.023500632494688034, -0.051634714007377625, -0.03750798851251602, -0.04293057322502136, -0.02305317111313343));
	r += mul(s1_1, min16float4x4(0.03366049379110336, 0.07469717413187027, 0.05404525250196457, 0.017516154795885086, 0.034108780324459076, 0.1457764357328415, -0.03327682614326477, 0.014645526185631752, 0.035792525857686996, 0.2738983631134033, -0.11599569022655487, 0.008888253010809422, -0.0773831382393837, -0.07153325527906418, -0.046085771173238754, -0.009997287765145302));
	r += mul(s1_2, min16float4x4(-0.01581457071006298, -0.02606070600450039, 0.047597289085388184, 0.027528267353773117, 0.020323988050222397, -0.016479022800922394, 0.0051384540274739265, -0.0043861535377800465, 0.010887364856898785, -0.006260752212256193, 0.0021719839423894882, -0.012769457884132862, 7.720682333456352e-05, 0.015961168333888054, -0.021682102233171463, -0.008351574651896954));
	r += mul(s1_3, min16float4x4(-0.029284270480275154, 0.02878091111779213, 0.08227544277906418, 0.04698851332068443, 0.20751994848251343, 0.018996277824044228, 0.13329997658729553, 0.005325641017407179, -0.009734554216265678, -0.024105630815029144, 0.07808070629835129, -0.024600407108664513, 0.12841857969760895, 0.01850442960858345, 0.04456983879208565, -0.013047812506556511));
	r += mul(s1_4, min16float4x4(-0.14208993315696716, -0.09657926857471466, -0.3134766221046448, -0.08391661196947098, -0.027859220281243324, 0.35770589113235474, -0.006775503978133202, 0.07690025866031647, -0.0040726447477936745, 0.0031712905038148165, 0.19058319926261902, 0.29785117506980896, 0.17765210568904877, 0.14895348250865936, 0.022474495694041252, -0.08715863525867462));
	r += mul(s1_5, min16float4x4(0.009082751348614693, -0.0832519680261612, -0.051391612738370895, -0.16847270727157593, 0.04065144434571266, -0.23644211888313293, 0.09928666800260544, 0.015418203547596931, -0.0035247686319053173, 0.021816037595272064, 0.005553873721510172, 0.021353885531425476, 0.007210536394268274, 0.11108643561601639, 0.02201491966843605, 0.10346709191799164));
	r += mul(s1_6, min16float4x4(-0.001195981283672154, 0.01889844425022602, -0.03070480190217495, -0.0006583926733583212, -0.014637929387390614, -0.02321775071322918, 0.035277534276247025, -0.032358720898628235, 0.010464761406183243, -0.00578452181071043, 0.0022028323728591204, -0.011870058253407478, 0.011756635271012783, 0.00504677277058363, 0.011557979509234428, 0.007160219829529524));
	r += mul(s1_7, min16float4x4(-0.0020900354720652103, -0.02545022964477539, 0.015425094403326511, -0.024592138826847076, -0.13231858611106873, 0.04884826019406319, -0.1868152618408203, 0.4736191928386688, -0.0040109422989189625, 0.013665451668202877, -0.006664820946753025, 0.005655521526932716, 0.008918428793549538, -0.005764439236372709, 0.11841284483671188, 0.05822673812508583));
	r += mul(s1_8, min16float4x4(0.0025733315851539373, 0.004828051198273897, -0.020324498414993286, -0.02435455098748207, 0.0166684091091156, 0.046359580010175705, 0.10397505760192871, -0.17543567717075348, -0.0021770999301224947, -0.001314825378358364, 0.0006996471202000976, 0.004934950731694698, 0.0010879507753998041, 0.009421912021934986, 0.023869726806879044, 0.05920382961630821));
	r += min16float4(-0.00036953689414076507, -0.0004848135286010802, -0.0009223601664416492, -0.0009801889536902308);
	return tanh(r);
}
void Pass5(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float4 s0_0 = l0(-1.0, -1.0);
	min16float4 s0_1 = l0(0.0, -1.0);
	min16float4 s0_2 = l0(1.0, -1.0);
	min16float4 s0_3 = l0(-1.0, 0.0);
	min16float4 s0_4 = l0(0.0, 0.0);
	min16float4 s0_5 = l0(1.0, 0.0);
	min16float4 s0_6 = l0(-1.0, 1.0);
	min16float4 s0_7 = l0(0.0, 1.0);
	min16float4 s0_8 = l0(1.0, 1.0);
	min16float4 s1_0 = max(-s0_0, 0.0);
	min16float4 s1_1 = max(-s0_1, 0.0);
	min16float4 s1_2 = max(-s0_2, 0.0);
	min16float4 s1_3 = max(-s0_3, 0.0);
	min16float4 s1_4 = max(-s0_4, 0.0);
	min16float4 s1_5 = max(-s0_5, 0.0);
	min16float4 s1_6 = max(-s0_6, 0.0);
	min16float4 s1_7 = max(-s0_7, 0.0);
	min16float4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	out_0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 6
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-shuffle
//!STYLE PS
//!IN out_0, INPUT
float4 Pass6(float2 pos) {
	float2 pt = float2(GetInputPt());
	const static float3x3 rgb2yuv = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081};
	const static float3x3 yuv2rgb = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float4 r = 0.0;
	float2 size = float2(GetInputSize());
	float2 f = frac(pos * size);
	float3 yuv = mul(rgb2yuv, INPUT.SampleLevel(SL, pos, 0).rgb);
	int2 i = int2(f * 2.0);
	r.r = out_0.SampleLevel(SP, (float2(0.5, 0.5) - f) * pt + pos, 0)[2*i.y + i.x];
	r.r += yuv.r;
	r.a = 1.0;
	r.r = clamp(r, 0.0, 1.0);
	float3 px = mul(yuv2rgb, float3(r.r, yuv.yz));
	return float4(px, 1.0);
}
