// CuNNy 3x4C BILINEAR CHROMA TEST NVL
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

//!MAGPIE EFFECT
//!VERSION 3
//!OUTPUT_WIDTH INPUT_WIDTH * 2
//!OUTPUT_HEIGHT INPUT_HEIGHT * 2

//!TEXTURE
Texture2D INPUT;


//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t1;

//!PASS 1
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-TEST-NVL-in
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) (dot(float3(0.703206479549408, 1.3242888450622559, 0.28984880447387695), O(INPUT, float2(x, y)).rgb) + -0.6522183418273926)
float4 f0(float2 pt, float2 pos, min16float s0_0, min16float s0_1, min16float s0_2, min16float s0_3, min16float s0_4, min16float s0_5, min16float s0_6, min16float s0_7, min16float s0_8) {
	min16float4 r = 0.0;
	r += min16float4(0.0102367308, -0.0273555163, 0.0085063744, -0.0057093189) * s0_0;
	r += min16float4(-0.1363777369, -0.1478764117, -0.0003113798, 0.4619140625) * s0_1;
	r += min16float4(-0.0787366405, -0.0115959505, -0.0148015805, -0.0062394813) * s0_2;
	r += min16float4(0.0379638486, -0.0391651988, 0.4720359147, -0.0014086758) * s0_3;
	r += min16float4(0.5378860235, 0.4130419493, -0.4716792107, -0.4560534954) * s0_4;
	r += min16float4(-0.3699619770, -0.0419182777, 0.0079792328, 0.0034676348) * s0_5;
	r += min16float4(-0.0252778269, -0.0229709651, -0.0265318658, 0.0144822132) * s0_6;
	r += min16float4(0.0015847929, -0.0656943545, 0.0142943878, -0.0124873156) * s0_7;
	r += min16float4(0.0208129939, -0.0487056747, 0.0099791093, 0.0022833580) * s0_8;
	r += min16float4(-3.1222548386722337e-06, -0.0014246514765545726, -0.0028099047485738993, 0.0007365532219409943);
	return r;
}
void Pass1(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float s0_0 = l0(-1.0, -1.0);
	min16float s0_1 = l0(0.0, -1.0);
	min16float s0_2 = l0(1.0, -1.0);
	min16float s0_3 = l0(-1.0, 0.0);
	min16float s0_4 = l0(0.0, 0.0);
	min16float s0_5 = l0(1.0, 0.0);
	min16float s0_6 = l0(-1.0, 1.0);
	min16float s0_7 = l0(0.0, 1.0);
	min16float s0_8 = l0(1.0, 1.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8);
}
//!PASS 2
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-TEST-NVL-conv1
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, min16float4 s0_0, min16float4 s0_1, min16float4 s0_2, min16float4 s0_3, min16float4 s0_4, min16float4 s0_5, min16float4 s0_6, min16float4 s0_7, min16float4 s0_8, min16float4 s1_0, min16float4 s1_1, min16float4 s1_2, min16float4 s1_3, min16float4 s1_4, min16float4 s1_5, min16float4 s1_6, min16float4 s1_7, min16float4 s1_8) {
	min16float4 r = 0.0;
	r += mul(s0_0, min16float4x4(-0.0538574532, 0.0728218853, 0.1645591259, 0.0193669423, -0.0917087719, -0.0103804506, -0.1600225270, -0.0463920832, 0.0415582880, 0.1072160527, -0.0350560695, -0.0632072762, 0.1026464924, 0.0796963200, 0.0320667922, -0.0377604440));
	r += mul(s0_1, min16float4x4(0.0156706832, -0.3994021416, -0.2586463094, -0.0876479298, 0.1117469668, -0.0817045495, 0.2465334088, 0.1299930811, -0.0038841877, -0.1031126305, -0.2989317179, 0.0108668795, 0.1958010495, -0.0183959007, -0.0685579777, -0.0372424498));
	r += mul(s0_2, min16float4x4(0.0233609751, -0.0379699580, 0.0297353119, 0.0408993810, -0.1090421677, 0.2607671320, -0.2453825623, -0.3193359375, 0.1148447692, 0.0253534541, 0.1213227361, 0.0221519563, 0.1168072820, 0.0070947194, -0.0813116878, -0.0478844941));
	r += mul(s0_3, min16float4x4(1.1883274317, 0.1138485074, -0.1019872427, -0.0506379493, -0.0413193889, 0.1059339717, 0.1036088690, 0.0562334284, -0.1125221178, -0.0789796636, 0.0409400947, -0.0207968745, -0.0816796720, -0.2443794310, 0.0848440975, 0.1386886388));
	r += mul(s0_4, min16float4x4(-0.1284554899, 0.3994140625, 0.2534641027, 0.0832335874, 0.1840833873, -0.2017998248, -0.1325870156, -0.0042208708, -0.8847894073, -0.3408207893, -0.4073172808, -0.3955085278, -0.1247701719, 0.0458609685, -0.3376688957, -0.1030746102));
	r += mul(s0_5, min16float4x4(0.0457692146, -0.0059075770, 0.0080604386, 0.0128889913, -0.1531296521, 0.0761331320, 0.0616363361, -0.0635760352, -0.1287864149, 0.0294406526, 0.8209306002, 0.0415708609, 0.1592276543, -0.3549624979, 0.3955079317, -0.0337497182));
	r += mul(s0_6, min16float4x4(0.2766250968, 0.1498084515, 0.2509257197, 0.0708198324, 0.0226452220, -0.0275244173, 0.2133616507, 0.0146082724, -0.0468226895, -0.0653269067, -0.0354116522, 0.0465090200, 0.0491726585, -0.0435636416, 0.0885532573, -0.0403181762));
	r += mul(s0_7, min16float4x4(0.0755083784, 0.0478235856, 0.1577868760, 0.0078456281, 0.0201959014, -0.0051110368, -0.3277032375, -0.0715318993, -0.2241256088, -0.0745112970, -0.4208716452, -0.1706575900, -0.0346841924, 0.1009083167, -0.0572261624, 0.1019861251));
	r += mul(s0_8, min16float4x4(0.0184563808, -0.0484621860, -0.0159769934, 0.0258215107, -0.0535490625, 0.0325601809, 0.1343263090, 0.0693199262, -0.0407549106, -0.0005282637, 0.0926012471, -0.0135489441, -0.0026259061, 0.0335627869, 0.1215284020, -0.0050152354));
	r += mul(s1_0, min16float4x4(0.1762654632, 0.0739545450, -0.0227427911, -0.0671300367, -0.2369278669, 0.0191450138, 0.0117640253, 0.0352784805, 0.0367267206, -0.0485352688, 0.0300006941, 0.0008561992, 0.0787999555, -0.0651855022, 0.0003732386, 0.0230932776));
	r += mul(s1_1, min16float4x4(0.1602862477, 0.5325010419, 0.2358323038, 0.1243358999, -0.2048812211, 0.1257717311, -0.0630171150, -0.2025636733, -0.1573212445, -0.0319592431, 0.0857669860, -0.0170568936, -0.0137199908, 0.1653777659, 0.0077033578, -0.0169168357));
	r += mul(s1_2, min16float4x4(0.0445889011, -0.0135533828, -0.0156082269, 0.0056828647, -0.1537009627, -0.1234893203, 0.1556498855, 0.1247639507, 0.0999121144, -0.0807145461, -0.0000141686, 0.0459271781, 0.0066984850, -0.0109118437, 0.1047506779, 0.1100323722));
	r += mul(s1_3, min16float4x4(-0.7198333740, 0.2375174761, 0.1081529036, 0.1420838386, 0.5229264498, 0.0533771552, 0.0990394950, -0.1393629760, 0.0240231380, -0.0010264141, -0.0590461679, 0.0141701652, -0.2646732628, 0.1630728692, -0.1635741591, -0.1493479759));
	r += mul(s1_4, min16float4x4(0.1546359211, -0.5058590174, -0.2284999341, 0.1267415732, -0.0807084739, 0.0152590591, 0.4802317023, 0.0189815909, -0.0429964885, 0.1577149183, -0.1313427687, -0.0146141993, 0.0386901833, 0.1293013394, 0.0878542364, -0.0612360984));
	r += mul(s1_5, min16float4x4(-0.0765581131, 0.0094205430, 0.1216114238, 0.0035043838, 0.0877764598, -0.0443555899, -0.7864866853, -0.1039822698, 0.2348629087, 0.0561464205, -0.1552094370, -0.2790666223, 0.1489364654, 0.2568387091, 0.1488610208, 0.1997068971));
	r += mul(s1_6, min16float4x4(-0.1854841262, -0.0105327070, -0.0173082463, 0.0495202951, -0.0767468810, 0.0631982088, -0.1977292299, 0.0329993367, 0.0036092498, 0.0217896849, 0.0055143321, -0.0192737021, -0.1979085505, -0.0121118715, -0.1987437606, -0.0566671267));
	r += mul(s1_7, min16float4x4(0.0474090576, -0.1237004772, 0.2317870706, -0.0474756435, 0.0346169248, -0.0016560777, 0.4541148841, 0.0228552185, 0.0599864572, -0.0909871608, 0.0384099483, -0.0123313311, -0.2615585923, 0.0478593223, -0.5927715898, -0.6422184706));
	r += mul(s1_8, min16float4x4(0.0798600465, 0.0315657556, 0.1273939461, 0.0277912803, -0.0084686959, -0.0289443582, -0.2615583837, -0.0788714290, 0.0112040080, 0.0939938799, -0.4680039883, 0.0468266606, 0.1061376631, -0.0995042548, 0.3003271222, -0.0264463201));
	r += min16float4(0.001555349794216454, 8.150695794029161e-05, 0.0026326635852456093, -0.00014197498967405409);
	return r;
}
void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float4 s0_0 = l0(-1.0, -1.0);
	min16float4 s0_1 = l0(0.0, -1.0);
	min16float4 s0_2 = l0(1.0, -1.0);
	min16float4 s0_3 = l0(-1.0, 0.0);
	min16float4 s0_4 = l0(0.0, 0.0);
	min16float4 s0_5 = l0(1.0, 0.0);
	min16float4 s0_6 = l0(-1.0, 1.0);
	min16float4 s0_7 = l0(0.0, 1.0);
	min16float4 s0_8 = l0(1.0, 1.0);
	min16float4 s1_0 = max(-s0_0, 0.0);
	min16float4 s1_1 = max(-s0_1, 0.0);
	min16float4 s1_2 = max(-s0_2, 0.0);
	min16float4 s1_3 = max(-s0_3, 0.0);
	min16float4 s1_4 = max(-s0_4, 0.0);
	min16float4 s1_5 = max(-s0_5, 0.0);
	min16float4 s1_6 = max(-s0_6, 0.0);
	min16float4 s1_7 = max(-s0_7, 0.0);
	min16float4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 3
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-TEST-NVL-conv2
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, min16float4 s0_0, min16float4 s0_1, min16float4 s0_2, min16float4 s0_3, min16float4 s0_4, min16float4 s0_5, min16float4 s0_6, min16float4 s0_7, min16float4 s0_8, min16float4 s1_0, min16float4 s1_1, min16float4 s1_2, min16float4 s1_3, min16float4 s1_4, min16float4 s1_5, min16float4 s1_6, min16float4 s1_7, min16float4 s1_8) {
	min16float4 r = 0.0;
	r += mul(s0_0, min16float4x4(0.0186154135, 0.0071603474, -0.0630676821, -0.0167810190, -0.0480084755, -0.0275220219, 0.0304265916, -0.0010656387, -0.0540060103, -0.0388587564, -0.0942757726, 0.0416256897, 0.2993948758, -0.2797011733, 0.0138853723, 0.0561100915));
	r += mul(s0_1, min16float4x4(-0.0284548085, 0.0114195030, 0.0385851525, -0.0259865783, 0.0860425383, -0.0025038838, -0.0773856342, -0.0039679222, -0.1772143096, 0.0287862327, -0.0117918588, 0.1120608598, 0.3238872588, -0.2035632730, -0.1848176867, -0.0360032395));
	r += mul(s0_2, min16float4x4(0.0484605581, -0.0465075225, -0.0895964801, -0.0152219431, -0.0292234533, 0.0422417261, 0.1207489520, 0.0263449643, -0.0680301413, 0.0808080211, -0.0018804962, -0.0822706148, 0.0524220467, -0.0845362917, 0.0946086943, 0.1839330643));
	r += mul(s0_3, min16float4x4(0.1696876585, -0.0756290406, -0.1803449839, -0.0181794968, -0.0382743850, 0.1197222620, 0.0393589549, -0.0331873260, 0.2357690632, -0.0520870239, 0.1378371269, -0.1914984286, 0.5642672777, -0.4187749326, 0.0501752645, 0.1375473738));
	r += mul(s0_4, min16float4x4(0.4228747487, 0.0586472489, 0.1811628938, -0.0455714650, -0.3330078721, -0.1694266051, -0.3291013539, -0.1048174649, 0.1402452737, -0.2769786417, -0.0676191673, 0.1228002161, 0.5878912210, -0.2724606991, -0.4451917410, -0.2643853724));
	r += mul(s0_5, min16float4x4(0.0715335831, -0.1056235731, 0.0853764862, 0.0404287539, -0.0098650195, 0.1565887928, 0.3295668960, 0.1759841293, 0.0732757226, 0.0094828783, 0.0120764654, -0.0633605868, 0.4434125721, -0.4561637938, -0.1723618060, 0.6129986048));
	r += mul(s0_6, min16float4x4(-0.0289831087, -0.1557433307, -0.0743838176, 0.3012909591, -0.1101101115, 0.1416314095, 0.1323404908, 0.0047175991, 0.1478359699, 0.0168981422, -0.1217942312, -0.2802108228, -0.1626954377, -0.2166942656, 0.0073197014, 0.3150430322));
	r += mul(s0_7, min16float4x4(-0.1213468090, 0.0178348403, 0.0947851688, 0.0954536870, -0.0476090647, 0.1293465495, 0.3806374967, 0.1546985656, -0.0152970543, -0.0073181204, -0.0183007475, 0.0387813821, -0.4850428700, -0.1620149016, 0.2921825349, 0.7428696156));
	r += mul(s0_8, min16float4x4(0.0367751233, -0.0352295972, -0.0543568954, 0.0792929828, -0.0198575500, 0.0790204033, 0.1385858208, 0.1918723583, -0.0201933011, -0.0117979795, 0.0024596169, 0.0545832403, -0.0365282558, -0.3798616827, -0.0282825008, 0.4509699643));
	r += mul(s1_0, min16float4x4(0.0304740928, -0.0449075066, -0.0375710092, 0.0223833732, 0.0427147262, 0.0834050402, -0.0086931633, 0.0014541365, -0.0921042338, 0.0360352732, 0.0519642681, -0.1264632046, 0.1638696641, -0.0058406927, -0.0164720882, 0.0491113588));
	r += mul(s1_1, min16float4x4(0.0642547682, -0.0315145291, 0.0139179928, 0.0616284311, -0.1400741339, 0.1489248574, 0.1948001385, -0.0462571196, 0.0485311188, -0.0717341229, -0.0619059205, -0.2021998614, -0.0791173279, -0.0305398237, 0.0632330254, 0.1723634750));
	r += mul(s1_2, min16float4x4(-0.0088350344, -0.0005174997, -0.0037929590, -0.0107193813, -0.0464839526, 0.0205588788, -0.0906634107, -0.0919362456, 0.0065399124, 0.0445890799, -0.0687596872, -0.0747508854, -0.0824841261, 0.0212025400, -0.0074501093, -0.0721129030));
	r += mul(s1_3, min16float4x4(-0.0002491579, -0.0880814642, -0.0355392732, 0.0931744352, -0.0187406093, 0.0004343661, 0.0125705106, -0.0043826122, -0.1232978031, 0.1047487408, -0.0570464656, 0.0275994968, 0.0386533402, -0.0975945964, 0.0959511027, -0.0296361409));
	r += mul(s1_4, min16float4x4(-0.3623153865, -0.3367974460, 0.3478529155, 0.1344596595, 0.1130521819, 0.5414584279, 0.9212993383, -0.0391264819, 0.0421551093, 0.4990231693, -1.1873794794, -0.3179276288, 0.1069873571, -0.4482814074, 0.6894588470, 1.0744192600));
	r += mul(s1_5, min16float4x4(0.4269884527, -0.0978524610, -0.5062226653, 0.0695346370, -0.1131214350, 0.1156562567, 0.1560830772, -0.2367450148, -0.0620846264, 0.0341484323, -0.1008343101, -0.1195284501, 0.1108974069, -0.2238744646, -0.2864911556, -0.2337685227));
	r += mul(s1_6, min16float4x4(0.0886304229, 0.0041849623, 0.0059117647, -0.1486619264, -0.0103623942, -0.0212416667, 0.0050913752, -0.0790765658, -0.1293947250, 0.0725263059, 0.0059660417, 0.1474145502, 0.1836327314, -0.0623968951, 0.0305695441, -0.0794413164));
	r += mul(s1_7, min16float4x4(0.3564449847, -0.0497640446, -0.1127555817, -0.3798694313, -0.2555797100, 0.0198513642, 0.1091154888, -0.0646835193, -0.1342770457, 0.1044586226, 0.0305403862, 0.1087078974, 0.1064432263, -0.0896218568, -0.0186653454, -0.0098327911));
	r += mul(s1_8, min16float4x4(0.1820258796, -0.0092252148, 0.0403771028, -0.1929184794, -0.1151976883, 0.0799315795, 0.0390488356, -0.1560471803, -0.0251410194, -0.0676811337, -0.0358023532, 0.0149864219, 0.0863966718, 0.0721109286, 0.0171413720, -0.0623821393));
	r += min16float4(0.0021203081123530865, 0.0014232825487852097, 0.0030879550613462925, 0.0016341466689482331);
	return r;
}
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float4 s0_0 = l0(-1.0, -1.0);
	min16float4 s0_1 = l0(0.0, -1.0);
	min16float4 s0_2 = l0(1.0, -1.0);
	min16float4 s0_3 = l0(-1.0, 0.0);
	min16float4 s0_4 = l0(0.0, 0.0);
	min16float4 s0_5 = l0(1.0, 0.0);
	min16float4 s0_6 = l0(-1.0, 1.0);
	min16float4 s0_7 = l0(0.0, 1.0);
	min16float4 s0_8 = l0(1.0, 1.0);
	min16float4 s1_0 = max(-s0_0, 0.0);
	min16float4 s1_1 = max(-s0_1, 0.0);
	min16float4 s1_2 = max(-s0_2, 0.0);
	min16float4 s1_3 = max(-s0_3, 0.0);
	min16float4 s1_4 = max(-s0_4, 0.0);
	min16float4 s1_5 = max(-s0_5, 0.0);
	min16float4 s1_6 = max(-s0_6, 0.0);
	min16float4 s1_7 = max(-s0_7, 0.0);
	min16float4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 4
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-TEST-NVL-conv3
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, min16float4 s0_0, min16float4 s0_1, min16float4 s0_2, min16float4 s0_3, min16float4 s0_4, min16float4 s0_5, min16float4 s0_6, min16float4 s0_7, min16float4 s0_8, min16float4 s1_0, min16float4 s1_1, min16float4 s1_2, min16float4 s1_3, min16float4 s1_4, min16float4 s1_5, min16float4 s1_6, min16float4 s1_7, min16float4 s1_8) {
	min16float4 r = 0.0;
	r += mul(s0_0, min16float4x4(0.0262663867, -0.0002429410, -0.0511474274, 0.0529087409, -0.0223674551, 0.0086178286, 0.0320889130, -0.0631854758, -0.0012903442, -0.0056642224, -0.0518546328, 0.0559869334, 0.0086382944, -0.0440197624, 0.0307057444, 0.0979564860));
	r += mul(s0_1, min16float4x4(-0.0693404004, 0.0175864026, 0.1401367337, -0.2309578657, 0.0044250879, 0.0092658438, 0.0156408604, -0.0230131689, -0.0018992934, 0.0134634757, 0.0062776646, 0.0000348417, 0.0732988045, -0.0244578831, -0.1440425068, 0.2092757374));
	r += mul(s0_2, min16float4x4(0.0052335169, 0.0047221351, -0.0005075550, -0.0389352627, -0.0026581860, -0.0086648464, 0.0090774046, 0.0072935731, 0.0272948649, -0.0074094078, -0.0175108556, 0.0468703099, -0.0265426207, 0.0170009024, 0.0447938666, 0.0191025138));
	r += mul(s0_3, min16float4x4(0.0294224042, 0.0287052523, -0.0624317043, -0.0493566208, -0.1821671426, -0.0300296172, -0.0925632864, 0.1665030271, 0.0015563936, 0.0290069748, 0.0014001864, -0.0136777125, 0.0520665273, 0.0866686478, -0.0157507490, -0.0628738850));
	r += mul(s0_4, min16float4x4(-0.0866743103, -0.0304256584, 0.5111674070, -0.2888058424, 0.0201397818, -0.0935233608, 0.2470751703, -0.5774743557, -0.0179313123, -0.0651858896, 0.0264229123, 0.0632060543, 0.1097091213, 0.0206039771, -0.0135121709, -0.4075383842));
	r += mul(s0_5, min16float4x4(0.0073914616, -0.0316245519, -0.0765379518, -0.0050841118, 0.0049964609, -0.0145714041, -0.1233212948, -0.0311380792, 0.0860243887, -0.0125438720, -0.1133169010, 0.0729963705, -0.0488614775, -0.0439542532, 0.0529504828, -0.0390205644));
	r += mul(s0_6, min16float4x4(-0.0026072480, -0.0185904969, -0.0218989775, -0.0090212524, 0.7050782442, 0.0044942023, -0.7495625019, -0.0266838279, 0.1166105643, -0.0041655470, -0.1353024989, -0.0265387520, -0.0123045221, -0.0299898162, -0.0206520595, -0.0130183203));
	r += mul(s0_7, min16float4x4(-0.0926775783, -0.0182851367, 0.0316208154, -0.0362406261, -0.2545634210, 0.0497062653, 0.1375418901, 0.1466396749, -0.0202376340, 0.0659895837, -0.0498907380, -0.0527214147, -0.0098192692, -0.0224242695, -0.0080201523, 0.0418592766));
	r += mul(s0_8, min16float4x4(0.0465271808, 0.0136432247, -0.0542969294, 0.0372321345, 0.0544048883, -0.0230525602, -0.0302142613, -0.0717885420, 0.1021250263, 0.0278805383, -0.1479509026, 0.0175289791, 0.0297444146, 0.0241414774, -0.0656647533, 0.0073346491));
	r += mul(s1_0, min16float4x4(-0.0178041849, -0.0239278022, 0.0242317971, -0.0504767895, 0.0567213409, 0.0111410664, 0.0093837278, 0.0382897891, 0.0051053348, -0.0176277701, 0.1889660954, -0.1619704664, -0.0245935246, 0.0418766811, -0.1357262433, 0.2544554472));
	r += mul(s1_1, min16float4x4(-0.0247771721, 0.0356868766, -0.0210065432, -0.0348630473, 0.0167358816, -0.0028514138, -0.0433363356, 0.0876462087, 0.0012682163, -0.0366452076, -0.0524833053, -0.0357302018, 0.5195869803, 0.1164568663, 0.4138320982, -0.0556936450));
	r += mul(s1_2, min16float4x4(0.0381532907, -0.0008043599, -0.3134796619, 0.4290149212, -0.0097257737, 0.0061814357, -0.0365055539, 0.0127574010, 0.0177241359, 0.0021577282, 0.0250836145, 0.0584766530, -0.0370594300, -0.0163626280, -0.1614253223, -0.1948215514));
	r += mul(s1_3, min16float4x4(-0.0226324424, -0.1169603989, 0.0176961385, 0.0748023912, -0.0203283709, -0.0091336891, -0.1364133209, 0.0358852223, -0.1577853113, -2.3932271004, 0.1341325939, 0.1222452596, 0.6187114120, -0.0961504877, -0.9279067516, 0.0222458374));
	r += mul(s1_4, min16float4x4(0.1155463234, -0.2509857118, -0.5456710458, 0.7899453640, -0.2021367252, 0.0104835778, -0.3050158024, 0.2140702903, 0.1783176810, 0.0565083623, 0.0661640018, -0.2763688564, -1.5556205511, -0.1276936382, 0.7197666764, 0.0600804575));
	r += mul(s1_5, min16float4x4(-0.4252391160, -0.2143182456, -1.0195310116, -1.3141982555, 0.0080812909, -0.0076237894, 0.0128160799, -0.0392917879, 0.0222690534, -0.0055189682, -0.0540868007, -0.0222537182, -0.0797531456, -0.0348298922, -0.0936644226, -0.0995277092));
	r += mul(s1_6, min16float4x4(0.2080490738, -0.0705049634, -0.0071851714, 0.0798354447, 0.1274411678, -0.0237265527, -0.0628631338, 0.0374747626, -0.0129095735, -0.0095273647, -0.3519724905, -0.0018963666, 0.0577991828, -0.0325930417, -0.1425010562, -0.0803222507));
	r += mul(s1_7, min16float4x4(1.0419577360, -0.0251003802, -0.8195688128, 0.0463105813, -0.2750008106, 0.0224073455, 0.3603518009, 0.0234498661, 0.0637207106, -0.0913875028, 0.0975947157, -0.2016604841, 0.0322304107, 0.0115726870, -0.0905506909, 0.0079985382));
	r += mul(s1_8, min16float4x4(-0.4950873852, 0.0135041811, -0.0536610559, -0.0842771679, -0.0350335799, 0.0175494980, -0.0198274441, -0.0246918667, 0.0071183513, -0.0117154913, 0.0472407490, 0.0496705584, -0.0211759415, -0.0075850920, -0.0356217511, 0.0113826543));
	r += min16float4(-0.000933036906644702, -0.0018845302984118462, -0.004049502778798342, -0.000789802463259548);
	return r;
}
void Pass4(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float4 s0_0 = l0(-1.0, -1.0);
	min16float4 s0_1 = l0(0.0, -1.0);
	min16float4 s0_2 = l0(1.0, -1.0);
	min16float4 s0_3 = l0(-1.0, 0.0);
	min16float4 s0_4 = l0(0.0, 0.0);
	min16float4 s0_5 = l0(1.0, 0.0);
	min16float4 s0_6 = l0(-1.0, 1.0);
	min16float4 s0_7 = l0(0.0, 1.0);
	min16float4 s0_8 = l0(1.0, 1.0);
	min16float4 s1_0 = max(-s0_0, 0.0);
	min16float4 s1_1 = max(-s0_1, 0.0);
	min16float4 s1_2 = max(-s0_2, 0.0);
	min16float4 s1_3 = max(-s0_3, 0.0);
	min16float4 s1_4 = max(-s0_4, 0.0);
	min16float4 s1_5 = max(-s0_5, 0.0);
	min16float4 s1_6 = max(-s0_6, 0.0);
	min16float4 s1_7 = max(-s0_7, 0.0);
	min16float4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 5
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-TEST-NVL-out
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, min16float4 s0_0, min16float4 s0_1, min16float4 s0_2, min16float4 s0_3, min16float4 s0_4, min16float4 s0_5, min16float4 s0_6, min16float4 s0_7, min16float4 s0_8, min16float4 s1_0, min16float4 s1_1, min16float4 s1_2, min16float4 s1_3, min16float4 s1_4, min16float4 s1_5, min16float4 s1_6, min16float4 s1_7, min16float4 s1_8) {
	min16float4 r = 0.0;
	r += mul(s0_0, min16float4x4(0.0054476084, 0.0043095588, -0.0109593738, -0.0214240905, -1.1211311817, 0.3153626025, 0.7144247890, 0.1715665758, -0.0828895643, 0.0065745898, -0.1421602517, -0.0004207239, -0.0499280393, -0.0097364094, -0.0205673948, -0.0220131427));
	r += mul(s0_1, min16float4x4(-0.1970074922, -0.0589950010, -0.0491422936, -0.0489936583, -0.7552183270, -2.9197304249, 1.4805186987, 1.9232577085, 0.6993945241, -0.6896065474, 0.3415133655, 0.0056096073, 0.1733397692, -0.0018286241, 0.0901075229, 0.0410134159));
	r += mul(s0_2, min16float4x4(-0.0681116208, -0.3187091649, 0.1489260048, 0.1103610545, 0.2574070394, 0.9671089649, -0.7302989960, -0.3542686999, -0.0151982168, 0.1792002618, -0.0151653728, 0.0920283645, -0.0413838550, 0.1016366184, -0.0423596911, 0.0075270548));
	r += mul(s0_3, min16float4x4(0.1459971219, 0.0270424653, -0.0332146697, 0.0510474220, -0.1216861084, -0.3435907960, 0.7132071257, 0.0617294349, 0.1076252759, -0.0111661805, 0.0771344677, 0.0542179272, -0.0110826436, 0.0032574409, -0.0607144684, -0.0253117420));
	r += mul(s0_4, min16float4x4(-0.0315721668, 0.1311397851, -0.7089987397, -0.3877088726, 2.5056402683, 1.9717718363, -3.7177822590, -0.2708979249, -0.2467480898, -0.0249381121, 0.3534087539, -1.0120164156, 1.0444823503, 0.2561766803, 0.1547712535, -0.1179205626));
	r += mul(s0_5, min16float4x4(0.0275361650, 0.1144375876, 0.0157063138, -0.3467552960, -0.1480949372, 0.9892511368, 0.6314237118, -2.1517190933, -0.0239829365, 0.0098787267, -0.0731159151, 0.1081773117, -0.1264306754, 0.4697536528, -0.0556361899, 0.1515532136));
	r += mul(s0_6, min16float4x4(-0.0498960875, -0.0387002602, 0.0697886050, -0.0032954682, 0.0812553391, 0.0281926543, -0.1713989377, -0.0004896126, -0.0256189611, 0.0224159472, 0.0172594264, 0.0041986224, -0.1203633919, -0.0868040472, 0.0874393284, 0.0485538207));
	r += mul(s0_7, min16float4x4(0.0113231866, -0.0021071830, 0.0337785184, 0.0597393550, -0.1133739352, 0.0878558382, 0.2442512512, -0.1144585460, 0.0819282532, 0.0204193462, -0.1226147190, 0.1724365503, -0.1440600157, -0.0927256271, 0.2626976371, 0.2485806048));
	r += mul(s0_8, min16float4x4(-0.0076696984, -0.0028139378, -0.0369871408, 0.0068816855, -0.2080627829, -0.2804752290, 0.3720350862, 0.3801195025, -0.0017643349, -0.0153130377, 0.0249648020, -0.0400969274, 0.1023843512, 0.0032863638, 0.0348044559, -0.0299499296));
	r += mul(s1_0, min16float4x4(-0.1150052473, 0.0288912188, 0.0359630138, 0.0424634628, -0.0019209944, 0.0014581253, -0.0012708127, 0.0023643489, 0.0486767888, 0.0116260564, 0.0314392038, 0.0367886759, 0.0051427875, -0.0035615277, 0.0079274923, 0.0350586437));
	r += mul(s1_1, min16float4x4(0.5051553249, 0.0474025868, 0.0463012084, -0.2115242332, 0.0195544586, 0.0096748704, 0.0017036119, 0.0182579607, -0.2011041492, 0.0048254076, -0.1362398416, -0.0822790265, -0.2467554510, 0.0318655483, -0.0642508939, -0.0185537376));
	r += mul(s1_2, min16float4x4(-0.0304854903, 0.1491126120, -0.0719177052, 0.0705761909, -0.0122900177, 0.0046548061, 0.0286319461, -0.0238623004, 0.0150970705, -0.1346444488, -0.0057302755, -0.0401887968, 0.0538447872, -0.0891352147, 0.0526429079, -0.0107117230));
	r += mul(s1_3, min16float4x4(-0.1056496054, -0.0194725413, -0.0880713314, -0.0445555188, 0.0087020118, -0.0015441853, -0.0037002969, -0.0042251530, -0.0803236663, -0.0288673099, 0.0387740284, -0.0518711358, 0.0476421565, 0.0620020740, 0.1186436117, -0.0201822426));
	r += mul(s1_4, min16float4x4(0.1190201715, -0.0484637208, 0.4309617579, 0.3916146755, -0.0275787823, -0.0577392802, 0.0421453975, -0.0170574784, 0.2066480070, 0.0329894759, 0.3526173830, 0.4130862951, -0.3538784385, -0.3076167107, -0.4502058923, -0.0860060155));
	r += mul(s1_5, min16float4x4(0.0225010421, 0.0627800375, 0.0077912328, 0.0408561043, -0.0374755561, 0.2919921577, -0.1062011868, 0.2241211236, -0.0264860597, 0.0798985958, 0.0021419462, -0.0053315209, 0.0090382686, -0.1183137596, 0.0114797819, -0.1627128869));
	r += mul(s1_6, min16float4x4(0.0189714245, 0.0123218745, -0.0144742839, -0.0024761274, 0.0112003908, 0.0024107257, -0.0033044117, 0.0047795847, 0.0288983900, 0.0158221740, -0.0291284025, -0.0126151368, 0.0607210025, 0.0365192145, 0.0418813787, -0.0094093028));
	r += mul(s1_7, min16float4x4(-0.0304118972, -0.0253668148, 0.0058994959, -0.0555416383, -0.0261849631, -0.0125537692, -0.0840050653, -0.0710597038, -0.0294602364, -0.0208572559, 0.0016252537, -0.0501741394, -0.0287287291, -0.0092603499, -0.1218308806, 0.0066131419));
	r += mul(s1_8, min16float4x4(0.0032915163, 0.0034210715, -0.0056295469, 0.0020842049, 0.0512154065, -0.0025417854, 0.0808238983, 0.0711913481, 0.0082702823, 0.0118742082, -0.0069283373, 0.0300177373, -0.0091586830, -0.0127274059, 0.0092657022, -0.0508836769));
	r += min16float4(0.0014694428537040949, 0.0008638848084956408, 3.2002542411646573e-06, -0.0006203365046530962);
	return tanh(r);
}
void Pass5(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float4 s0_0 = l0(-1.0, -1.0);
	min16float4 s0_1 = l0(0.0, -1.0);
	min16float4 s0_2 = l0(1.0, -1.0);
	min16float4 s0_3 = l0(-1.0, 0.0);
	min16float4 s0_4 = l0(0.0, 0.0);
	min16float4 s0_5 = l0(1.0, 0.0);
	min16float4 s0_6 = l0(-1.0, 1.0);
	min16float4 s0_7 = l0(0.0, 1.0);
	min16float4 s0_8 = l0(1.0, 1.0);
	min16float4 s1_0 = max(-s0_0, 0.0);
	min16float4 s1_1 = max(-s0_1, 0.0);
	min16float4 s1_2 = max(-s0_2, 0.0);
	min16float4 s1_3 = max(-s0_3, 0.0);
	min16float4 s1_4 = max(-s0_4, 0.0);
	min16float4 s1_5 = max(-s0_5, 0.0);
	min16float4 s1_6 = max(-s0_6, 0.0);
	min16float4 s1_7 = max(-s0_7, 0.0);
	min16float4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 6
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-TEST-NVL-shuffle
//!STYLE PS
//!IN t0, INPUT
float4 Pass6(float2 pos) {
	float2 pt = float2(GetInputPt());
	const static float3x3 rgb2yuv = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081};
	const static float3x3 yuv2rgb = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float4 r = 0.0;
	float2 size = float2(GetInputSize());
	float2 f = frac(pos * size);
	float3 yuv = mul(rgb2yuv, INPUT.SampleLevel(SL, pos, 0).rgb);
	int2 i = int2(f * 2.0);
	r.r = t0.SampleLevel(SP, (float2(0.5, 0.5) - f) * pt + pos, 0)[2*i.y + i.x];
	r.r += yuv.r;
	r.a = 1.0;
	r.r = clamp(r, 0.0, 1.0);
	float3 px = mul(yuv2rgb, float3(r.r, yuv.yz));
	return float4(px, 1.0);
}
