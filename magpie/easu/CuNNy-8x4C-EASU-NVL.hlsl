// CuNNy 8x4C CHROMA NVL
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

//!MAGPIE EFFECT
//!VERSION 3
//!OUTPUT_WIDTH INPUT_WIDTH * 2
//!OUTPUT_HEIGHT INPUT_HEIGHT * 2

//!TEXTURE
Texture2D INPUT;

//!TEXTURE
//!WIDTH INPUT_WIDTH * 2
//!HEIGHT INPUT_HEIGHT * 2
//!FORMAT R8_UNORM
Texture2D easu;

//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t1;

// FSR mpv | modified
// Copyright (c) 2021 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// FidelityFX FSR v1.0.2 by AMD
// ported to mpv by agyild

//!PASS 1
//!DESC CuNNy-EASU
//!STYLE PS
//!IN INPUT
//!OUT easu

float GetLuma(float3 rgb) {
	return dot(float3(0.299, 0.587, 0.114), rgb);
}

float APrxLoRcpF1(float a) {
	return asfloat(uint(0x7ef07ebb) - asuint(a));
}

float APrxLoRsqF1(float a) {
	return asfloat(uint(0x5f347d74) - (asuint(a) >> uint(1)));
}

float AMin3F1(float x, float y, float z) {

	return min(x, min(y, z));
}

float AMax3F1(float x, float y, float z) {
	return max(x, max(y, z));
}

void tap(inout float aC, inout float aW, float2 off, float2 dir, float2 len,
         float lob, float clp, float c){
	float2 v;
	v.x = (off.x * ( dir.x)) + (off.y * dir.y);
	v.y = (off.x * (-dir.y)) + (off.y * dir.x);
	v *= len;
	float d2 = v.x * v.x + v.y * v.y;
	d2 = min(d2, clp);
	float wB = float(2.0 / 5.0) * d2 + -1.0;

	float wA = lob * d2 + -1.0;
	wB *= wB;
	wA *= wA;
	wB = float(25.0 / 16.0) * wB + float(-(25.0 / 16.0 - 1.0));
	float w = wB * wA;
	aC += c * w;
	aW += w;
}

void set(inout float2 dir, inout float len, float2 pp, bool biS, bool biT,
         bool biU, bool biV, float lA, float lB, float lC, float lD, float lE){

	float w = 0.0;
	if (biS)
		w = (1.0 - pp.x) * (1.0 - pp.y);
	if (biT)
		w =        pp.x  * (1.0 - pp.y);
	if (biU)
		w = (1.0 - pp.x) *        pp.y;

	if (biV)
		w =        pp.x  *        pp.y;
	float dc = lD - lC;
	float cb = lC - lB;
	float lenX = max(abs(dc), abs(cb));
	lenX = APrxLoRcpF1(lenX);
	float dirX = lD - lB;
	lenX = clamp(abs(dirX) * lenX, 0.0, 1.0);
	lenX *= lenX;
	float ec = lE - lC;

	float ca = lC - lA;
	float lenY = max(abs(ec), abs(ca));
	lenY = APrxLoRcpF1(lenY);
	float dirY = lE - lA;
	lenY = clamp(abs(dirY) * lenY, 0.0, 1.0);
	lenY *= lenY;
	dir += float2(dirX, dirY) * w;
	len += dot(float2(w, w), float2(lenX, lenY));
}

float4 Pass1(float2 pos) {
	float2 pt = float2(GetInputPt());
	float2 size = float2(GetInputSize());
	float4 pix = float4(0.0, 0.0, 0.0, 1.0);
	float2 pp = pos * size - float2(0.5, 0.5);
	float2 fp = floor(pp);
	pp -= fp;
	float b = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2(0.5, -0.5)) * pt), 0).rgb);
	float c = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2(1.5, -0.5)) * pt), 0).rgb);
	float e = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2(-0.5, 0.5)) * pt), 0).rgb);
	float f = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2( 0.5, 0.5)) * pt), 0).rgb);
	float g = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2( 1.5, 0.5)) * pt), 0).rgb);
	float h = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2( 2.5, 0.5)) * pt), 0).rgb);
	float i = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2(-0.5, 1.5)) * pt), 0).rgb);
	float j = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2( 0.5, 1.5)) * pt), 0).rgb);
	float k = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2( 1.5, 1.5)) * pt), 0).rgb);
	float l = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2( 2.5, 1.5)) * pt), 0).rgb);
	float n = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2(0.5, 2.5) ) * pt), 0).rgb);
	float o = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2(1.5, 2.5) ) * pt), 0).rgb);
	float4 bczzL = float4(b, c, 0.0, 0.0);
	float4 ijfeL = float4(i, j, f, e);
	float4 klhgL = float4(k, l, h, g);
	float4 zzonL = float4(0.0, 0.0, o, n);
	float bL = bczzL.x;
	float cL = bczzL.y;
	float iL = ijfeL.x;
	float jL = ijfeL.y;
	float fL = ijfeL.z;
	float eL = ijfeL.w;
	float kL = klhgL.x;
	float lL = klhgL.y;
	float hL = klhgL.z;
	float gL = klhgL.w;
	float oL = zzonL.z;
	float nL = zzonL.w;
	float2 dir = float2(0.0, 0.0);
	float len = 0.0;
	set(dir, len, pp, true, false, false, false, bL, eL, fL, gL, jL);
	set(dir, len, pp, false, true, false, false, cL, fL, gL, hL, kL);
	set(dir, len, pp, false, false, true, false, fL, iL, jL, kL, nL);
	set(dir, len, pp, false, false, false, true, gL, jL, kL, lL, oL);
	float2 dir2 = dir * dir;
	float dirR = dir2.x + dir2.y;
	bool zro = dirR < float(1.0 / 32768.0);
	dirR = APrxLoRsqF1(dirR);
	dirR = zro ? 1.0 : dirR;
	dir.x = zro ? 1.0 : dir.x;
	dir *= float2(dirR, dirR);
	len = len * 0.5;
	len *= len;
	float stretch = (dir.x * dir.x + dir.y * dir.y) * APrxLoRcpF1(max(abs(dir.x), abs(dir.y)));
	float2 len2 = float2(1.0 + (stretch - 1.0) * len, 1.0 + -0.5 * len);
	float lob = 0.5 + float((1.0 / 4.0 - 0.04) - 0.5) * len;
	float clp = APrxLoRcpF1(lob);
	float aC = 0.0;
	float aW = 0.0;
	tap(aC, aW, float2( 0.0,-1.0) - pp, dir, len2, lob, clp, bL);
	tap(aC, aW, float2( 1.0,-1.0) - pp, dir, len2, lob, clp, cL);
	tap(aC, aW, float2(-1.0, 1.0) - pp, dir, len2, lob, clp, iL);
	tap(aC, aW, float2( 0.0, 1.0) - pp, dir, len2, lob, clp, jL);
	tap(aC, aW, float2( 0.0, 0.0) - pp, dir, len2, lob, clp, fL);
	tap(aC, aW, float2(-1.0, 0.0) - pp, dir, len2, lob, clp, eL);
	tap(aC, aW, float2( 1.0, 1.0) - pp, dir, len2, lob, clp, kL);
	tap(aC, aW, float2( 2.0, 1.0) - pp, dir, len2, lob, clp, lL);
	tap(aC, aW, float2( 2.0, 0.0) - pp, dir, len2, lob, clp, hL);
	tap(aC, aW, float2( 1.0, 0.0) - pp, dir, len2, lob, clp, gL);
	tap(aC, aW, float2( 1.0, 2.0) - pp, dir, len2, lob, clp, oL);
	tap(aC, aW, float2( 0.0, 2.0) - pp, dir, len2, lob, clp, nL);
	pix.r = aC / aW;
	float min1 = min(AMin3F1(fL, gL, jL), kL);
	float max1 = max(AMax3F1(fL, gL, jL), kL);
	pix.r = clamp(pix.r, min1, max1);
	pix.r = clamp(pix.r, 0.0, 1.0);
	return pix;
}

//!PASS 2
//!DESC CuNNy-8x4C-CHROMA-NVL-in
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) (dot(float3(4.782e-01, 8.887e-01, 2.138e-01), O(INPUT, float2(x, y)).rgb) + -4.157e-01)
float4 f0(float2 pt, float2 pos, min16float s0_0, min16float s0_1, min16float s0_2, min16float s0_3, min16float s0_4, min16float s0_5, min16float s0_6, min16float s0_7, min16float s0_8) {
	V4 r = 0.0;
	r += V4(1.548e-01, 1.397e-01, 3.204e-03, 4.587e-02) * s0_0;
	r += V4(9.017e-02, 1.380e-01, -9.696e-02, 3.969e-02) * s0_1;
	r += V4(2.830e-02, 5.892e-03, 4.988e-02, -2.825e-03) * s0_2;
	r += V4(2.026e-01, 1.290e-01, -1.840e-02, -1.028e-02) * s0_3;
	r += V4(-2.584e-01, -5.516e-01, -3.564e-01, -4.028e-01) * s0_4;
	r += V4(2.936e-02, 1.294e-01, -1.191e-01, 4.134e-02) * s0_5;
	r += V4(-6.388e-02, -1.802e-01, 1.116e-01, 1.519e-01) * s0_6;
	r += V4(8.635e-02, 2.528e-01, 4.053e-01, -1.294e-01) * s0_7;
	r += V4(-5.416e-02, -4.467e-02, 3.639e-02, 1.656e-02) * s0_8;
	r += V4(6.880e-02, -2.836e-02, 2.008e-02, 9.204e-02);
	return r;
}
void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float s0_0 = l0(-1.0, -1.0);
	min16float s0_1 = l0(0.0, -1.0);
	min16float s0_2 = l0(1.0, -1.0);
	min16float s0_3 = l0(-1.0, 0.0);
	min16float s0_4 = l0(0.0, 0.0);
	min16float s0_5 = l0(1.0, 0.0);
	min16float s0_6 = l0(-1.0, 1.0);
	min16float s0_7 = l0(0.0, 1.0);
	min16float s0_8 = l0(1.0, 1.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8);
}
//!PASS 3
//!DESC CuNNy-8x4C-CHROMA-NVL-conv1
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-2.512e-01, -4.654e-02, -5.126e-02, -1.740e-01, 1.684e-01, 1.845e-01, 7.658e-02, 1.938e-01, 8.082e-02, 2.043e-02, -4.089e-02, -2.530e-01, 7.302e-02, -1.042e-01, 1.527e-01, 4.427e-03));
	r += mul(s0_1, M4(1.417e-01, 1.732e-01, -6.042e-02, -2.292e-01, 2.227e-02, -2.218e-01, -1.212e-01, 8.874e-02, 1.841e-02, -7.519e-01, -2.599e-01, 3.505e-01, -2.023e-01, -3.196e-01, 7.382e-02, 1.116e-01));
	r += mul(s0_2, M4(1.233e-01, 1.253e-01, -1.367e-01, 2.180e-01, 1.071e-02, 5.818e-03, -1.639e-01, -5.684e-02, -8.226e-03, -1.785e-01, -1.056e-01, -1.104e-01, -6.276e-02, 1.643e-01, 6.665e-02, -2.995e-03));
	r += mul(s0_3, M4(-9.242e-02, 3.294e-01, -1.648e-01, 3.949e-01, 4.291e-01, -2.549e-01, 1.754e-01, -1.395e-01, 3.191e-01, 3.055e-01, -9.261e-02, 2.389e-01, 5.019e-01, -7.236e-02, 1.316e-01, -3.431e-01));
	r += mul(s0_4, M4(-1.522e-01, 7.009e-02, 2.641e-01, -1.726e-01, -3.673e-01, 3.095e-01, 7.637e-01, -1.329e-02, 2.297e-01, -1.204e-01, -7.494e-02, 2.415e-01, 3.857e-02, 1.303e-01, 1.821e-01, 4.544e-01));
	r += mul(s0_5, M4(-3.607e-02, -1.097e-01, -1.033e-01, -1.119e-01, -6.601e-02, -4.201e-02, -1.565e-01, 2.356e-02, -1.431e-01, 1.857e-01, -1.101e-01, -6.869e-03, -1.584e-01, -2.390e-01, -9.983e-02, -6.605e-03));
	r += mul(s0_6, M4(-1.772e-01, -2.446e-01, 6.648e-02, 1.015e-01, 2.832e-02, 8.348e-02, 2.133e-02, -9.174e-02, 4.124e-02, -1.468e-03, -3.264e-02, -4.870e-03, 8.341e-02, 1.435e-02, -8.714e-02, -1.722e-01));
	r += mul(s0_7, M4(1.743e-01, -2.177e-01, 1.501e-01, 1.763e-01, -3.135e-01, 1.458e-01, 2.146e-01, -1.052e-01, 7.446e-02, -1.005e-01, -1.457e-02, -6.725e-02, -2.741e-01, 2.263e-01, -5.170e-03, -1.441e-01));
	r += mul(s0_8, M4(1.536e-01, -5.865e-02, 1.279e-01, -1.792e-01, -4.123e-02, 5.324e-02, -5.547e-03, 1.114e-01, -6.163e-02, 3.037e-02, 1.150e-01, 3.672e-02, -4.462e-02, 1.860e-01, -4.151e-01, 1.518e-01));
	r += mul(s1_0, M4(-3.097e-01, -5.192e-02, 3.247e-02, -4.030e-02, 1.544e-01, 7.399e-02, 1.372e-01, 1.372e-01, -1.646e-01, -1.048e-03, 7.385e-02, -1.345e-01, 1.477e-01, -1.509e-01, 5.018e-02, 1.511e-01));
	r += mul(s1_1, M4(3.738e-01, -3.255e-02, 1.045e-02, -1.661e-01, -4.779e-02, -4.101e-01, -1.743e-01, 1.626e-01, -1.514e-01, -3.884e-01, 2.429e-01, -6.915e-02, -1.553e-01, -3.703e-01, 4.693e-02, 9.619e-02));
	r += mul(s1_2, M4(2.051e-01, -2.400e-02, 5.670e-02, 2.397e-01, -8.236e-02, 1.360e-02, 1.432e-01, -2.070e-01, 3.581e-02, -2.725e-01, -2.394e-01, 8.840e-03, -8.474e-02, 1.293e-01, 1.629e-01, -6.082e-02));
	r += mul(s1_3, M4(-1.171e-01, 2.484e-01, 2.885e-01, 1.471e-01, 3.670e-01, -1.737e-01, -8.376e-02, -1.521e-01, 1.165e-01, 2.939e-01, -1.367e-02, 2.633e-01, 5.254e-01, -1.239e-01, 3.078e-01, -6.388e-01));
	r += mul(s1_4, M4(-6.859e-01, 2.677e-01, 3.765e-01, -1.820e-01, -2.258e-01, 3.216e-01, 4.979e-01, 2.630e-01, -2.263e-01, -3.180e-02, 9.559e-02, 1.513e-02, -1.253e-01, 1.736e-01, 2.027e-01, 6.796e-01));
	r += mul(s1_5, M4(-1.091e-01, -3.042e-01, -3.550e-02, -5.210e-01, 4.063e-02, -8.196e-02, -8.245e-02, 6.027e-02, 1.503e-02, 1.768e-01, -8.861e-02, 9.845e-02, -8.333e-02, -1.842e-01, -2.156e-02, 1.061e-01));
	r += mul(s1_6, M4(-4.036e-01, -4.093e-01, -4.001e-02, -4.430e-02, 1.967e-01, 1.629e-01, -5.574e-02, -2.179e-02, 2.546e-02, -1.337e-02, -4.415e-03, -1.178e-01, 1.224e-01, 8.433e-02, -1.987e-01, -3.037e-01));
	r += mul(s1_7, M4(-1.024e+00, -3.415e-01, 6.443e-01, -3.148e-01, -2.146e-01, 1.004e-01, 5.521e-02, -9.882e-02, -1.660e-02, -9.729e-02, 5.792e-02, 1.140e-01, -3.466e-01, 2.415e-01, -1.802e-01, -1.523e-01));
	r += mul(s1_8, M4(-6.205e-01, -1.179e-01, -3.586e-01, -2.423e-01, 2.526e-02, 3.576e-02, 3.415e-02, -2.390e-02, 1.331e-02, 4.208e-02, 4.747e-02, 3.141e-02, -2.959e-02, 1.813e-01, -4.909e-01, 1.523e-01));
	r += V4(5.579e-04, 3.437e-02, 4.942e-02, -5.908e-03);
	return r;
}
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 4
//!DESC CuNNy-8x4C-CHROMA-NVL-conv2
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-1.270e-02, 1.269e-02, -7.992e-03, -6.805e-02, -3.323e-03, 7.133e-03, -2.484e-03, 6.492e-02, -4.885e-02, 2.817e-03, -4.449e-02, -2.216e-01, -1.497e-02, 9.896e-06, -2.382e-01, 4.671e-02));
	r += mul(s0_1, M4(-2.206e-02, -1.756e-02, 1.900e-01, -2.236e-02, 2.414e-02, 1.356e-02, 1.545e-02, -3.354e-03, -2.182e-01, 1.580e-02, 2.626e-01, 1.137e-01, -1.682e-01, 1.500e-01, 3.806e-01, 6.672e-02));
	r += mul(s0_2, M4(-2.143e-01, -2.471e-01, 9.859e-02, 9.672e-03, -4.560e-02, 9.224e-02, 1.004e-02, 4.144e-02, 1.425e-01, 3.414e-02, 1.046e-01, -6.249e-02, 4.504e-02, 3.454e-01, -8.532e-02, 2.123e-02));
	r += mul(s0_3, M4(-8.641e-02, 3.405e-02, -2.627e-01, -1.980e-02, 3.774e-02, -4.955e-02, -1.131e-01, 9.491e-02, 5.134e-04, 2.338e-01, -2.686e-01, 1.870e-01, 1.847e-02, 8.786e-03, 5.678e-02, 4.619e-01));
	r += mul(s0_4, M4(-2.549e-01, -1.523e-01, 2.538e-02, -5.127e-01, 9.387e-01, -9.449e-02, -5.176e-01, -4.227e-01, 1.703e-01, -4.093e-01, -2.580e-01, -2.178e-02, 3.135e-01, -1.860e-01, 3.605e-01, -1.673e-01));
	r += mul(s0_5, M4(-8.672e-02, -2.236e-01, -2.892e-01, -7.559e-02, 7.401e-02, -2.445e-01, 2.653e-01, -8.232e-02, -1.563e-01, -6.556e-02, 2.724e-01, 1.625e-01, 1.152e-01, 5.828e-01, 1.984e-01, -1.229e-01));
	r += mul(s0_6, M4(-8.142e-03, 1.450e-04, -6.041e-03, 2.362e-01, 6.007e-03, 1.374e-01, 1.581e-01, -4.418e-01, -2.006e-02, -6.724e-02, 2.007e-01, 1.996e-01, 2.553e-02, 2.606e-02, 6.707e-02, -8.386e-02));
	r += mul(s0_7, M4(7.743e-02, -1.193e-01, -2.215e-01, -1.267e-01, -1.161e-01, 9.173e-02, -1.942e-01, 5.381e-02, 7.884e-02, -2.756e-02, -1.330e-01, -8.789e-02, -3.348e-02, 8.417e-02, -6.967e-02, -1.446e-01));
	r += mul(s0_8, M4(-2.077e-02, 7.253e-02, 9.533e-02, 2.941e-02, 5.066e-02, -9.142e-02, -5.865e-02, 8.955e-02, -1.937e-02, 7.399e-02, -1.995e-01, -5.709e-02, -8.415e-02, 8.672e-02, 4.783e-02, 6.283e-02));
	r += mul(s1_0, M4(3.130e-02, 1.882e-04, -2.338e-04, -1.942e-01, 1.047e-01, -2.852e-02, -3.147e-02, -2.414e-02, -8.006e-02, 3.481e-02, -1.359e-01, -2.930e-02, -6.047e-02, -1.238e-02, -1.928e-01, -6.395e-02));
	r += mul(s1_1, M4(-5.708e-02, -4.677e-02, 1.652e-01, 7.498e-02, -6.186e-02, -8.190e-02, 5.044e-03, -1.538e-02, -2.356e-01, -1.077e-01, 1.865e-01, -5.794e-02, -3.437e-01, -3.423e-02, 7.515e-03, -3.383e-01));
	r += mul(s1_2, M4(9.625e-02, -4.895e-02, -7.404e-02, 7.858e-02, -4.330e-03, 1.164e-01, 8.464e-03, 8.721e-02, 8.922e-02, 8.651e-03, 2.739e-01, -1.643e-01, -2.779e-02, 8.059e-03, -2.376e-01, -1.558e-01));
	r += mul(s1_3, M4(3.716e-02, 3.651e-02, -1.052e-01, 2.248e-01, 1.499e-02, -2.209e-02, 1.100e-01, -3.212e-02, -5.332e-02, -1.011e-02, -2.348e-01, 4.897e-02, -3.420e-02, 1.159e-01, -5.202e-02, 1.502e-02));
	r += mul(s1_4, M4(-5.363e-02, -7.717e-02, 3.449e-01, 6.953e-01, 3.055e-01, -1.330e-01, -3.852e-02, -4.298e-01, 1.860e-01, -5.176e-01, -1.395e-01, 9.108e-02, 8.863e-02, 1.582e-02, 1.558e-01, -4.721e-01));
	r += mul(s1_5, M4(1.175e-01, -3.993e-01, 4.232e-02, -1.843e-01, 2.822e-01, 1.089e-01, -2.412e-01, -1.669e-01, -2.227e-02, 2.489e-02, 2.681e-01, 1.848e-01, -1.358e-01, 3.769e-01, -5.025e-02, -4.769e-02));
	r += mul(s1_6, M4(5.130e-02, -1.031e-02, 1.202e-01, 4.868e-01, 9.905e-02, 6.792e-02, 1.497e-01, 1.863e-02, -1.232e-03, -4.823e-02, 9.177e-04, 3.330e-01, 6.435e-03, -6.133e-03, 1.590e-02, -6.944e-02));
	r += mul(s1_7, M4(2.100e-01, -1.552e-01, 5.844e-02, -1.294e-01, -6.135e-02, 2.549e-01, -1.545e-02, 5.178e-02, 1.062e-01, -1.181e-01, -1.012e-01, -1.266e-01, -9.329e-03, 4.911e-02, 7.748e-02, -2.007e-01));
	r += mul(s1_8, M4(-5.356e-03, 1.796e-01, 3.538e-02, -4.700e-02, 4.974e-02, -1.196e-01, -2.274e-02, -8.340e-02, -7.642e-02, 6.375e-02, -2.015e-01, -4.263e-02, -9.754e-02, 1.789e-02, 1.396e-01, 5.332e-02));
	r += V4(-3.120e-02, 3.180e-04, 8.066e-03, 2.854e-02);
	return r;
}
void Pass4(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 5
//!DESC CuNNy-8x4C-CHROMA-NVL-conv3
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-5.003e-02, -1.072e-01, -2.168e-02, 8.399e-02, 9.399e-02, -1.626e-01, 1.063e-01, -7.201e-02, 2.024e-02, 5.237e-02, -5.529e-02, 8.226e-02, 9.734e-02, 1.350e-01, 1.590e-03, 5.957e-02));
	r += mul(s0_1, M4(3.093e-02, -1.549e-01, 2.184e-02, -2.866e-01, 1.352e-01, -6.719e-02, 2.129e-02, 8.036e-02, 8.227e-02, 1.148e-01, -1.108e-01, -2.750e-01, 5.324e-02, 6.996e-02, 5.929e-02, -1.510e-02));
	r += mul(s0_2, M4(8.355e-02, 6.091e-02, -9.797e-03, 8.430e-02, 3.725e-02, -7.043e-02, 5.641e-03, -5.862e-02, 5.073e-02, 8.332e-02, -3.627e-02, -5.125e-02, -7.471e-03, 1.493e-01, -2.191e-02, 1.158e-01));
	r += mul(s0_3, M4(-6.713e-02, 3.699e-01, -8.950e-02, 4.357e-01, 6.852e-01, -5.770e-02, 1.057e-01, 7.163e-02, -1.023e-01, 2.114e-01, -2.623e-02, 4.248e-01, 5.436e-02, -2.349e-01, 5.440e-02, -7.435e-02));
	r += mul(s0_4, M4(2.212e-01, -2.901e-01, -5.324e-03, -2.070e-01, -1.470e-01, 7.294e-01, 7.608e-02, 1.343e-01, -2.245e-02, 4.883e-01, -1.870e-01, -1.420e-03, -3.355e-01, -1.396e-01, 1.700e-01, -4.354e-01));
	r += mul(s0_5, M4(-3.300e-02, 2.006e-01, 1.883e-01, -2.300e-02, -7.799e-02, 3.916e-02, 5.160e-02, -5.705e-02, 1.095e-01, -2.405e-01, 1.930e-02, -1.136e-01, -1.985e-02, 2.118e-01, -3.002e-01, 7.865e-02));
	r += mul(s0_6, M4(-2.553e-02, -1.126e-01, -2.725e-02, -1.389e-01, 1.265e-01, 7.805e-02, -8.198e-02, 1.182e-01, -5.199e-03, 2.045e-01, 9.547e-02, 7.481e-02, -3.478e-04, 1.183e-01, 4.925e-02, -6.208e-02));
	r += mul(s0_7, M4(1.023e-02, 4.236e-01, 4.287e-01, -3.910e-02, 6.543e-02, 1.048e-01, -5.643e-02, 3.035e-02, 8.656e-02, 9.158e-02, -2.563e-02, 2.380e-01, 3.991e-02, -2.313e-01, -1.332e-01, -4.893e-03));
	r += mul(s0_8, M4(3.062e-02, -1.400e-02, 1.812e-01, 1.053e-01, 3.993e-02, -2.845e-02, -8.497e-02, -9.897e-05, 6.397e-02, 8.350e-02, -9.207e-02, -1.567e-01, 9.665e-02, 2.348e-01, -4.504e-02, 6.011e-02));
	r += mul(s1_0, M4(2.906e-02, 5.560e-02, -1.203e-03, 1.914e-01, 1.486e-01, -4.843e-02, 9.037e-02, -3.584e-02, -9.766e-02, -1.787e-01, -5.594e-03, 2.529e-01, 4.505e-02, 1.440e-01, 2.451e-02, 9.152e-02));
	r += mul(s1_1, M4(4.184e-02, 1.247e-01, 1.673e-02, -1.205e-01, 2.088e-01, -1.153e-01, -8.861e-03, 4.518e-02, -6.165e-02, -2.444e-01, -4.606e-02, -2.170e-01, 1.501e-01, 3.693e-01, 1.575e-02, 5.565e-02));
	r += mul(s1_2, M4(1.458e-01, 1.059e-01, -4.386e-02, 8.528e-02, 6.407e-02, -1.264e-02, -2.517e-02, -7.043e-02, 1.505e-02, 1.390e-01, -9.590e-02, 9.283e-02, 1.708e-01, 2.156e-01, -2.629e-02, 7.604e-02));
	r += mul(s1_3, M4(-3.139e-01, 3.057e-01, -6.425e-02, 3.566e-01, 8.194e-01, -1.792e-01, 1.713e-01, -3.674e-01, 1.992e-01, 1.320e-02, -2.573e-02, 4.720e-03, 1.484e-01, -5.502e-02, -1.754e-02, -3.903e-02));
	r += mul(s1_4, M4(2.213e-01, -9.051e-02, 1.763e-01, -4.524e-01, -4.395e-01, 3.777e-01, 1.753e-01, 1.992e-02, -8.402e-02, -4.066e-02, -1.891e-01, -5.001e-02, 3.094e-02, 2.639e-01, 2.397e-01, -8.799e-01));
	r += mul(s1_5, M4(8.914e-02, 3.131e-03, -4.924e-02, -1.359e-01, -1.382e-01, 9.135e-02, 2.209e-02, 3.385e-02, 5.777e-02, -2.421e-01, 1.628e-01, -7.237e-02, -1.175e-01, 5.756e-01, -1.518e-01, -5.465e-02));
	r += mul(s1_6, M4(3.761e-02, 1.746e-02, -1.672e-01, -6.450e-02, 1.514e-01, -1.096e-01, -1.771e-01, -6.538e-01, -4.643e-02, -1.191e-01, 1.655e-01, 2.325e-01, -4.011e-02, 1.737e-02, -7.969e-02, 7.992e-02));
	r += mul(s1_7, M4(1.961e-01, 1.543e-01, 9.585e-01, -9.174e-02, 2.684e-03, -1.132e-01, -1.665e-01, -6.016e-02, -6.003e-02, -2.151e-01, -3.317e-01, 4.445e-03, 5.338e-02, -2.390e-02, 6.402e-03, 5.644e-02));
	r += mul(s1_8, M4(3.759e-02, 2.711e-01, 2.149e-02, -2.159e-02, 8.817e-03, -1.146e-02, -1.114e-01, 1.353e-01, -5.678e-02, -1.493e-01, -1.116e-01, -1.142e-02, -5.695e-02, 2.392e-01, -3.720e-02, 1.399e-01));
	r += V4(9.057e-03, -6.036e-03, 1.383e-02, -7.674e-03);
	return r;
}
void Pass5(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 6
//!DESC CuNNy-8x4C-CHROMA-NVL-conv4
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-9.707e-02, -1.290e-01, -1.900e-03, 3.352e-02, -7.469e-02, -8.406e-02, 1.366e-01, 3.485e-02, 1.520e-02, 2.403e-02, -2.167e-01, 2.462e-02, 1.029e-01, -1.745e-02, 8.281e-02, -5.256e-02));
	r += mul(s0_1, M4(1.861e-01, -1.003e-01, 1.130e-01, -5.514e-02, -3.887e-02, -9.418e-02, 2.204e-01, -3.855e-02, 9.936e-02, 2.710e-01, -1.551e-01, 1.841e-01, 6.713e-02, 5.756e-02, 3.243e-02, 7.451e-02));
	r += mul(s0_2, M4(-1.154e-01, -9.843e-03, 1.319e-02, 1.958e-02, -6.711e-02, -8.059e-02, 6.778e-02, -2.049e-02, 5.350e-03, 2.473e-02, 8.881e-02, -1.835e-03, 6.214e-03, 3.504e-03, 2.796e-02, -1.308e-02));
	r += mul(s0_3, M4(-6.394e-02, -2.222e-01, 8.136e-02, -1.754e-03, 3.194e-02, -3.003e-01, 2.045e-01, -1.958e-01, 1.839e-01, 1.469e-01, 4.563e-01, -2.221e-01, 1.031e-01, 7.251e-02, -4.803e-02, 3.781e-02));
	r += mul(s0_4, M4(6.657e-01, 5.559e-01, 2.077e-02, 4.740e-01, -2.644e-01, -2.839e-01, 3.277e-01, -1.646e-01, -1.409e-01, 7.383e-01, 7.580e-02, -1.029e-01, -3.814e-02, 8.705e-03, -1.819e-01, -4.139e-02));
	r += mul(s0_5, M4(5.291e-02, 3.650e-02, -5.282e-02, -1.905e-01, -3.578e-02, -3.232e-01, 3.675e-02, -4.921e-02, -3.000e-02, -7.537e-02, 4.214e-02, -2.766e-03, -6.619e-02, -3.661e-01, -2.069e-01, -2.520e-01));
	r += mul(s0_6, M4(-3.913e-02, -6.348e-02, 3.266e-02, -6.493e-02, -1.155e-01, -2.280e-01, -2.106e-02, 6.224e-02, 9.984e-02, 1.779e-01, -4.417e-02, -1.082e-01, -3.699e-02, -5.018e-02, -6.603e-02, 1.678e-02));
	r += mul(s0_7, M4(-2.672e-02, -4.977e-02, 3.647e-03, -3.529e-02, -1.362e-01, -5.230e-01, 3.870e-01, 1.117e-01, 4.173e-03, 1.609e-01, -9.486e-02, -1.887e-02, 3.273e-02, -7.404e-02, -6.518e-02, -7.325e-03));
	r += mul(s0_8, M4(-6.325e-02, -2.072e-02, 2.600e-01, 1.558e-01, 6.743e-02, -2.408e-01, 1.227e-01, 3.182e-03, -1.430e-02, -3.197e-02, -4.681e-02, -3.735e-02, 4.274e-02, -1.497e-01, -2.554e-03, 5.647e-02));
	r += mul(s1_0, M4(3.494e-02, 2.190e-02, 6.462e-02, 2.367e-04, -7.011e-02, -2.277e-03, -1.597e-01, -4.431e-02, 1.061e-01, 2.028e-01, -2.175e-01, 7.460e-03, 6.908e-02, -4.842e-02, 1.485e-01, 1.173e-02));
	r += mul(s1_1, M4(1.164e-01, -3.561e-02, 2.582e-01, 2.049e-03, -3.999e-03, 3.218e-03, -6.616e-02, 6.285e-02, -6.593e-02, -6.207e-02, -6.065e-02, -1.009e-01, 1.770e-01, 1.013e-01, 1.704e-02, 7.096e-02));
	r += mul(s1_2, M4(-5.397e-02, -5.409e-02, 1.274e-01, 5.533e-02, -1.263e-02, 7.300e-02, -7.004e-03, 9.926e-03, -1.169e-01, -1.074e-01, 1.402e-01, -7.788e-02, 4.240e-03, 1.418e-01, 7.750e-02, 3.979e-02));
	r += mul(s1_3, M4(9.161e-02, -5.894e-02, 1.287e-01, 1.200e-02, 3.229e-02, -9.450e-02, 4.321e-01, -1.018e-01, 1.015e-01, -1.167e-01, 5.977e-01, -4.976e-01, 6.275e-02, 8.884e-02, 4.698e-03, 1.200e-01));
	r += mul(s1_4, M4(7.844e-01, 3.211e-01, -2.297e-01, 1.743e-01, -3.827e-01, -6.153e-02, 1.419e-01, 2.007e-01, -5.773e-03, -4.940e-01, -4.284e-01, -7.481e-01, 1.882e-01, 1.926e-01, 1.340e-01, 1.779e-01));
	r += mul(s1_5, M4(7.095e-02, -2.531e-01, 8.197e-02, 9.969e-02, -6.958e-02, -1.304e-01, 5.683e-02, -1.033e-02, 3.359e-03, 3.150e-02, -6.769e-02, -3.270e-02, 1.534e-01, 1.769e-01, 2.827e-02, 1.162e-01));
	r += mul(s1_6, M4(-1.111e-01, 6.624e-03, -1.899e-01, 6.021e-02, 2.968e-02, -6.951e-02, 1.878e-01, 6.497e-02, -4.520e-02, -1.357e-02, -1.613e-02, 2.595e-02, 4.454e-02, 6.262e-02, 4.827e-02, 1.531e-01));
	r += mul(s1_7, M4(-4.355e-02, -3.648e-01, 4.696e-02, -2.005e-01, -3.731e-02, 9.135e-02, 7.478e-02, 2.262e-01, -2.137e-02, -1.627e-01, -6.511e-02, -1.587e-02, 1.812e-01, 1.532e-01, 1.709e-01, 3.428e-01));
	r += mul(s1_8, M4(9.240e-02, -6.344e-01, -1.801e-02, -7.039e-02, 2.983e-03, 6.920e-02, 4.518e-02, 1.083e-01, 4.981e-02, 5.332e-02, -6.079e-02, -3.380e-02, -1.991e-02, 2.495e-01, 1.799e-01, 2.466e-01));
	r += V4(-8.521e-04, -1.364e-02, -8.333e-03, -1.157e-02);
	return r;
}
void Pass6(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 7
//!DESC CuNNy-8x4C-CHROMA-NVL-conv5
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(9.473e-02, 4.610e-02, -7.704e-02, 4.795e-02, -1.189e-01, -6.949e-02, 7.522e-02, -8.177e-02, 3.488e-02, -1.162e-01, 1.489e-01, 1.890e-01, 1.671e-02, -1.217e-02, -1.502e-01, -1.250e-03));
	r += mul(s0_1, M4(-3.671e-02, 1.394e-01, 8.444e-03, -1.276e-01, -2.172e-01, -1.016e-01, 2.365e-01, -2.154e-02, -1.055e-01, 1.706e-01, 2.170e-01, 2.521e-01, -3.203e-01, 1.587e-01, -1.175e-01, -2.435e-01));
	r += mul(s0_2, M4(-6.714e-02, 8.069e-02, 4.879e-02, -6.154e-03, -2.904e-01, 3.364e-01, 4.153e-02, -1.189e-01, -1.710e-01, 6.767e-02, -1.396e-02, 7.474e-02, 1.228e-01, -1.967e-01, -1.030e-01, 7.346e-02));
	r += mul(s0_3, M4(1.105e-01, 1.042e-01, 1.881e-01, 3.563e-02, -1.948e-01, -2.608e-01, -5.789e-02, 2.776e-02, -6.251e-02, -1.118e-01, 2.417e-01, 2.075e-01, 4.515e-02, 5.819e-02, 4.892e-02, 7.274e-02));
	r += mul(s0_4, M4(4.955e-01, 3.608e-01, -7.270e-02, 4.325e-01, -9.666e-02, 4.936e-02, 1.302e-01, 2.796e-02, -1.258e-01, 3.043e-01, -2.201e-01, 1.110e-01, -3.371e-02, 1.625e-01, 3.662e-01, 2.725e-01));
	r += mul(s0_5, M4(-5.996e-02, 3.959e-01, 2.119e-01, -1.660e-01, 7.015e-03, -1.801e-01, 5.875e-02, 5.287e-02, 4.716e-02, 1.792e-01, 2.477e-01, 4.191e-01, -2.588e-01, -4.308e-01, -1.016e-01, -8.032e-02));
	r += mul(s0_6, M4(1.304e-01, -5.247e-03, 1.157e-02, 1.551e-01, -4.567e-02, -5.316e-02, 1.343e-01, -2.183e-01, 1.019e-01, -7.937e-02, -1.155e-01, -6.978e-02, 1.581e-01, -8.775e-02, 6.176e-02, 6.967e-02));
	r += mul(s0_7, M4(5.215e-01, -1.780e-01, 1.154e-01, 2.712e-01, -3.121e-02, 3.821e-02, 4.173e-02, -3.076e-01, 3.408e-01, -6.369e-02, 9.271e-02, 2.008e-01, 6.755e-02, 8.114e-02, -8.457e-02, -1.463e-01));
	r += mul(s0_8, M4(2.377e-01, 3.001e-02, 7.689e-02, -1.989e-01, -9.035e-02, 5.186e-02, 1.739e-02, -1.339e-01, 2.004e-01, 6.180e-02, 6.145e-02, -7.526e-02, 1.118e-03, -1.257e-01, 1.506e-02, 1.977e-01));
	r += mul(s1_0, M4(3.309e-02, -1.271e-01, -3.552e-02, -3.600e-02, 1.329e-03, -3.289e-02, 6.580e-02, 1.912e-01, 8.652e-02, 8.186e-02, -4.312e-02, 3.392e-03, 6.959e-02, -8.908e-02, 2.096e-04, -1.921e-01));
	r += mul(s1_1, M4(-4.670e-02, 1.719e-01, -1.567e-01, -8.445e-02, -1.636e-01, 5.780e-01, 2.317e-01, 4.112e-01, -9.002e-02, 1.463e-01, 7.174e-02, 6.747e-02, -3.849e-01, 3.294e-01, 5.101e-02, -3.585e-01));
	r += mul(s1_2, M4(1.899e-01, -3.175e-01, -6.426e-02, 1.254e-02, -5.696e-03, 7.610e-02, -6.565e-03, 1.194e-02, 3.342e-02, 1.225e-01, -8.253e-02, 3.158e-02, 1.615e-02, 1.834e-01, -5.906e-02, -1.255e-01));
	r += mul(s1_3, M4(-1.557e-01, -4.211e-02, 2.518e-01, 4.293e-02, 7.590e-02, -1.680e-01, -3.291e-03, 1.228e-01, 8.950e-02, 1.520e-02, -1.704e-01, 3.635e-02, -3.936e-02, 7.323e-03, 1.279e-01, 2.081e-01));
	r += mul(s1_4, M4(6.113e-01, 3.188e-02, -6.745e-01, -5.582e-02, -5.187e-03, -3.243e-01, 4.198e-01, 3.134e-01, 4.231e-03, 1.787e-01, 1.240e-01, 1.513e-01, 4.272e-02, 4.708e-01, 4.562e-01, 9.868e-02));
	r += mul(s1_5, M4(5.462e-02, 7.164e-02, -1.294e-01, -2.589e-01, -4.592e-02, 3.486e-01, -6.115e-02, 1.248e-01, -2.306e-01, 5.060e-01, 8.230e-02, -2.526e-03, -1.325e-01, -4.978e-02, -1.235e-01, -8.955e-02));
	r += mul(s1_6, M4(-1.854e-01, -5.108e-02, 7.371e-02, 1.457e-01, 7.932e-04, 3.676e-02, -1.524e-01, -1.284e-01, 4.835e-02, -4.119e-02, -2.380e-02, -4.061e-02, 2.094e-01, -1.852e-01, -3.096e-03, 2.410e-02));
	r += mul(s1_7, M4(-5.731e-01, 4.288e-02, 6.918e-02, 7.028e-01, 3.116e-01, -7.288e-02, 1.410e-01, -5.268e-02, 2.861e-01, -1.351e-01, 1.577e-01, -1.620e-01, 3.631e-01, 2.627e-01, 2.998e-02, -8.330e-02));
	r += mul(s1_8, M4(-2.644e-01, -1.062e-01, -5.560e-02, 4.484e-03, -2.892e-02, 4.962e-03, -1.176e-02, 8.840e-02, 5.745e-02, 3.712e-02, -1.546e-02, -1.899e-01, 1.266e-02, -3.224e-02, -5.824e-03, 1.616e-01));
	r += V4(2.854e-03, 3.769e-03, 1.345e-04, 1.185e-02);
	return r;
}
void Pass7(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 8
//!DESC CuNNy-8x4C-CHROMA-NVL-conv6
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-7.576e-02, 2.592e-02, -2.183e-01, -1.770e-02, 1.800e-01, 1.131e-01, -4.108e-02, -4.154e-02, 2.999e-01, 4.760e-03, 1.204e-01, -1.443e-01, -3.604e-01, -1.187e-02, -2.963e-01, 5.424e-02));
	r += mul(s0_1, M4(4.693e-02, 5.407e-02, 6.441e-02, -1.784e-01, -1.171e-01, -1.030e-01, 3.081e-02, 2.947e-02, 3.706e-02, 1.034e-01, 7.647e-02, -1.421e-01, -2.725e-02, 3.572e-03, -3.115e-01, 2.764e-01));
	r += mul(s0_2, M4(-1.374e-01, -7.524e-02, 1.495e-02, 7.352e-02, -1.890e-01, -7.810e-02, 2.989e-02, 2.026e-01, -1.150e-01, -5.367e-02, 7.466e-03, 2.644e-02, 6.255e-02, 3.381e-02, -6.960e-02, -7.988e-02));
	r += mul(s0_3, M4(1.391e-01, -6.414e-01, -1.752e-01, -1.037e-01, 4.795e-01, 1.501e-01, 1.177e-01, -3.173e-01, 2.553e-01, -2.071e-01, 3.311e-02, -2.803e-01, -3.330e-01, -2.909e-02, 4.721e-01, 1.200e-01));
	r += mul(s0_4, M4(-7.286e-03, 3.584e-01, -1.471e-01, 4.406e-01, -6.062e-01, -1.092e-01, 5.644e-01, 3.562e-01, 5.149e-02, 6.309e-01, -2.101e-01, -1.545e-01, 5.762e-01, -5.527e-02, 4.003e-01, 4.613e-01));
	r += mul(s0_5, M4(-1.379e-02, -9.204e-02, -1.761e-02, 4.582e-03, -7.119e-02, -9.113e-02, -1.077e-01, 1.597e-01, 1.450e-01, 3.469e-02, -1.029e-01, 4.299e-01, -2.703e-01, -8.073e-03, 2.515e-01, -1.702e-02));
	r += mul(s0_6, M4(4.993e-02, -1.463e-01, 2.413e-03, -1.127e-02, 4.651e-02, 1.665e-01, 1.768e-01, -8.814e-02, 7.330e-02, -1.286e-01, 1.694e-01, -1.238e-01, -1.370e-01, 2.563e-01, -6.114e-02, 1.568e-02));
	r += mul(s0_7, M4(-9.724e-02, -2.079e-02, -1.186e-02, 3.057e-02, -3.488e-01, 3.330e-02, 4.130e-02, -3.266e-02, 2.568e-01, -3.917e-01, 6.368e-02, 5.189e-02, 2.898e-02, 4.768e-02, -2.042e-02, -9.862e-02));
	r += mul(s0_8, M4(3.285e-02, -1.103e-02, -5.420e-02, -1.732e-02, 1.919e-02, 9.202e-02, -3.967e-02, -4.560e-02, -2.806e-01, -1.496e-02, 1.529e-01, 1.170e-02, -8.483e-02, 1.304e-02, -4.993e-02, -7.929e-02));
	r += mul(s1_0, M4(8.570e-02, 9.127e-02, -2.353e-02, -6.983e-02, -2.487e-02, -1.194e-02, -7.518e-02, 3.924e-02, 2.377e-01, 1.582e-01, -8.627e-02, -5.917e-02, -2.470e-01, -1.082e-01, 2.494e-02, 7.852e-02));
	r += mul(s1_1, M4(5.914e-02, 8.136e-02, 1.569e-02, -1.179e-01, 9.847e-02, 6.913e-03, -5.565e-02, -8.415e-02, 6.618e-02, 1.510e-01, 4.324e-02, -2.089e-01, 1.633e-01, 1.126e-01, -2.003e-01, 2.368e-01));
	r += mul(s1_2, M4(-1.856e-01, -6.217e-02, 4.036e-02, 6.354e-02, -6.234e-02, -2.981e-03, -4.296e-02, 3.846e-02, -2.452e-02, -1.697e-02, 1.508e-01, 4.207e-02, 1.407e-01, 9.814e-02, -7.515e-02, -5.072e-02));
	r += mul(s1_3, M4(2.959e-01, -2.017e-01, 7.534e-02, -2.808e-01, 3.611e-01, -1.724e-01, 3.025e-01, -2.192e-01, 1.383e-01, -5.213e-02, -1.656e-02, -1.464e-01, -1.186e-01, 1.985e-02, 2.635e-01, -6.541e-02));
	r += mul(s1_4, M4(-1.682e-01, 3.582e-01, 3.675e-01, 5.100e-01, -2.302e-02, 1.409e-01, 2.444e-01, 1.188e-01, 3.645e-01, 5.889e-01, 1.639e-01, -2.998e-01, 5.801e-01, 5.729e-02, 4.206e-01, 3.207e-01));
	r += mul(s1_5, M4(-3.672e-03, -1.686e-01, 1.154e-02, 9.236e-02, 2.139e-02, -1.636e-02, -1.947e-02, -5.512e-02, 1.693e-01, 2.978e-01, -4.580e-01, 1.288e-01, -1.382e-01, -3.973e-03, 9.400e-02, 1.422e-02));
	r += mul(s1_6, M4(1.460e-01, -2.037e-01, -8.890e-02, -4.076e-02, -8.664e-02, 2.725e-01, 3.276e-02, -1.234e-01, 5.924e-02, -1.441e-01, 6.394e-02, -3.684e-02, 3.993e-02, -8.277e-02, -3.059e-02, -1.086e-02));
	r += mul(s1_7, M4(-2.589e-01, 8.956e-02, -2.402e-01, 3.635e-02, 1.621e-02, 7.892e-03, -1.040e-01, -1.829e-01, 3.475e-01, -5.606e-01, 9.553e-02, -9.838e-02, -9.153e-02, -4.357e-02, -2.400e-02, 3.112e-02));
	r += mul(s1_8, M4(1.051e-01, 7.237e-03, -1.807e-02, -9.294e-02, -3.209e-02, -1.916e-02, 1.062e-01, -4.214e-03, -2.809e-01, -1.547e-03, -2.262e-02, 1.032e-01, -3.342e-03, -3.054e-02, 1.750e-02, 3.541e-02));
	r += V4(-7.059e-03, -5.883e-03, -2.483e-02, -3.770e-03);
	return r;
}
void Pass8(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 9
//!DESC CuNNy-8x4C-CHROMA-NVL-conv7
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-2.921e-02, -1.175e-02, -2.229e-02, -1.645e-02, 7.680e-02, 4.757e-03, 5.921e-02, 6.345e-03, 6.568e-02, 2.155e-02, -3.784e-02, -3.577e-02, 1.340e-01, -6.233e-02, -1.800e-02, -2.937e-03));
	r += mul(s0_1, M4(-9.278e-02, 1.854e-02, 1.204e-01, 6.186e-02, 9.697e-03, 4.633e-03, -1.607e-01, -1.043e-01, 1.245e-02, 1.723e-02, -1.009e-01, -9.637e-02, 7.513e-02, -1.327e-01, -1.053e-01, 1.338e-01));
	r += mul(s0_2, M4(6.013e-02, -1.977e-01, -1.961e-02, 5.336e-02, -1.597e-01, 3.858e-01, 1.526e-01, -2.349e-01, -4.420e-02, 2.744e-01, -8.216e-02, -7.983e-02, 6.188e-03, -1.354e-01, -5.971e-02, 1.740e-02));
	r += mul(s0_3, M4(5.346e-02, -4.310e-02, -5.555e-02, -1.640e-01, 2.143e-01, -5.203e-02, -1.179e-02, -8.359e-02, 2.327e-02, 6.224e-02, -2.204e-02, 3.883e-03, -2.608e-01, 7.787e-02, -3.753e-02, -1.265e-01));
	r += mul(s0_4, M4(-1.120e-01, -6.175e-03, -1.260e-01, -1.278e+00, -1.606e+00, -1.504e-01, -3.572e-01, 3.098e-02, 3.361e-01, -2.439e-01, 1.213e-01, 2.440e-01, -3.172e-02, -3.525e-01, 5.435e-01, -4.248e-01));
	r += mul(s0_5, M4(-2.470e-02, -3.356e-01, 3.170e-01, -9.671e-02, -9.766e-02, -2.589e-01, -2.547e-01, -1.170e-01, -5.867e-02, -4.330e-01, -1.207e-01, 6.313e-02, 1.602e-02, -2.236e-02, 1.519e-01, -9.986e-02));
	r += mul(s0_6, M4(-1.202e-01, 3.279e-02, -3.699e-02, 1.460e-01, -6.499e-02, -5.147e-02, -3.124e-02, 9.856e-03, -1.017e-01, 4.013e-02, -6.573e-02, 6.368e-02, 5.438e-02, 4.209e-02, -1.685e-01, 2.627e-02));
	r += mul(s0_7, M4(-2.456e-01, 2.789e-02, -2.304e-01, 2.266e-01, 1.016e-01, -7.231e-02, -6.497e-02, 2.436e-02, 5.139e-02, -4.247e-02, 2.752e-01, 1.352e-02, -2.330e-02, 2.542e-01, 2.389e-01, 1.636e-01));
	r += mul(s0_8, M4(3.020e-03, -2.463e-02, -1.821e-01, 2.789e-02, -7.141e-02, 1.114e-01, 1.354e-01, 5.154e-02, 1.411e-04, -9.970e-02, -3.043e-01, 2.625e-02, -7.724e-03, 1.501e-01, 8.910e-02, 5.593e-02));
	r += mul(s1_0, M4(-2.899e-02, 3.226e-02, 3.523e-02, 3.868e-02, 4.967e-02, 2.366e-03, 3.184e-02, 1.903e-02, 7.140e-02, 3.670e-03, 4.928e-03, -2.546e-02, 3.190e-02, -5.591e-02, 2.212e-02, 7.710e-03));
	r += mul(s1_1, M4(9.973e-03, -5.546e-02, 8.074e-02, 4.507e-02, -6.519e-02, 7.740e-02, -1.171e-01, 3.632e-02, -2.239e-02, -4.676e-02, -9.232e-02, 5.317e-02, 3.928e-02, -5.368e-02, -1.301e-01, 1.218e-01));
	r += mul(s1_2, M4(5.591e-02, -1.657e-01, 3.014e-02, 2.564e-03, -4.458e-02, 2.378e-01, -9.624e-03, 4.806e-02, 7.729e-03, 3.033e-03, -6.156e-02, -2.066e-02, 3.630e-02, 3.367e-02, 9.713e-04, 9.798e-02));
	r += mul(s1_3, M4(5.740e-02, -1.319e-02, -4.937e-02, -9.992e-02, 7.142e-02, -2.981e-02, 2.487e-02, -3.363e-02, -6.319e-02, 1.107e-01, 3.471e-02, 2.889e-02, 3.542e-02, -1.992e-02, 1.943e-02, -2.528e-02));
	r += mul(s1_4, M4(4.492e-02, -2.957e-01, -8.143e-02, -3.779e-01, -2.558e-01, -1.500e-01, -2.666e-01, -1.605e-02, 3.481e-01, -2.334e-01, 7.390e-02, 9.185e-02, -2.998e-01, -4.535e-01, 6.096e-02, -3.936e-01));
	r += mul(s1_5, M4(-2.493e-02, -7.297e-03, 2.793e-03, -5.138e-02, 2.039e-02, 2.097e-02, -6.403e-03, -8.026e-02, -2.788e-02, -1.646e-01, -3.102e-01, 8.109e-02, -8.528e-03, 2.390e-01, 3.550e-01, -6.212e-02));
	r += mul(s1_6, M4(-7.021e-02, 9.429e-03, -7.497e-02, 9.960e-02, 2.203e-02, -1.647e-02, -4.556e-03, -1.357e-03, -3.767e-02, 3.109e-02, -4.943e-02, 2.740e-02, 3.014e-02, 6.456e-02, -7.340e-02, 8.735e-02));
	r += mul(s1_7, M4(-5.532e-02, 2.017e-01, 3.455e-02, 1.976e-01, -1.176e-02, 2.871e-02, -4.629e-02, 6.426e-02, 1.869e-01, -4.647e-02, 1.597e-01, -5.733e-02, -1.588e-01, 4.736e-01, 2.784e-01, 1.816e-01));
	r += mul(s1_8, M4(-7.480e-03, 2.445e-02, -4.007e-03, 5.539e-02, -1.341e-02, 5.568e-02, 8.719e-02, 3.161e-02, 8.836e-04, -1.585e-01, -2.050e-01, -6.094e-02, -1.014e-02, 8.578e-02, -1.088e-04, 3.161e-02));
	r += V4(2.004e-03, -4.232e-05, -4.694e-03, 4.489e-04);
	return r;
}
void Pass9(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 10
//!DESC CuNNy-8x4C-CHROMA-NVL-conv8
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(6.883e-03, 4.408e-02, 3.137e-02, 1.434e-02, 9.951e-02, -1.364e-02, -2.850e-04, -1.179e-02, -2.951e-02, -1.332e-02, -1.018e-02, -1.614e-03, 7.314e-03, 4.489e-02, 2.159e-02, -7.609e-02));
	r += mul(s0_1, M4(3.064e-02, 7.890e-02, 1.255e-02, 7.516e-02, -4.613e-02, 2.128e-03, 9.416e-03, 1.304e-02, 1.159e-01, 1.094e-02, 3.919e-02, -2.728e-03, -3.662e-01, 2.246e-01, 1.338e-01, -3.370e-01));
	r += mul(s0_2, M4(-3.405e-01, -1.930e-01, -8.006e-02, 4.860e-02, 1.009e-03, -1.106e-02, -3.377e-03, -1.971e-02, -3.163e-02, -3.251e-03, 1.102e-02, 7.242e-04, 1.147e-01, 7.289e-02, 2.570e-03, 4.079e-02));
	r += mul(s0_3, M4(-3.846e-02, 1.087e-01, 4.353e-02, -1.508e-02, -5.853e-02, -4.809e-02, -3.930e-02, -2.116e-02, -4.845e-02, 7.753e-02, 2.274e-02, 7.492e-02, 9.259e-02, -1.833e-01, 2.439e-02, 3.818e-02));
	r += mul(s0_4, M4(6.334e-02, 6.937e-01, 1.423e-01, 9.000e-02, 2.095e-01, -4.737e-02, 1.103e-01, 5.503e-02, -4.612e-02, 6.432e-02, -1.933e-01, -1.354e-02, -4.099e-02, -1.057e+00, -1.287e-01, 5.455e-02));
	r += mul(s0_5, M4(-1.306e-01, 7.620e-01, -1.246e+00, 2.612e+00, 3.180e-02, 1.528e-02, -2.365e-02, 8.892e-03, 9.446e-03, -6.967e-03, 4.940e-02, 3.828e-03, 1.337e-01, -8.805e-02, 2.900e-01, -4.088e-02));
	r += mul(s0_6, M4(-3.289e-03, 3.870e-02, -1.869e-02, 1.321e-02, 3.455e-02, 3.129e-02, -4.847e-02, 2.714e-02, -3.376e-02, -1.946e-02, -1.391e-02, -2.726e-02, -1.256e-02, -4.156e-04, 7.188e-02, -5.159e-04));
	r += mul(s0_7, M4(3.308e-02, 3.560e-02, 1.403e-02, 4.396e-02, -3.626e-02, 4.049e-03, 1.231e-02, 6.764e-03, -9.131e-03, 1.326e-02, 2.223e-02, 3.675e-03, 3.201e-02, 6.913e-02, -2.653e-01, 4.310e-02));
	r += mul(s0_8, M4(-9.271e-03, 7.045e-02, -8.404e-02, 5.351e-02, 8.022e-03, 5.720e-03, 1.692e-02, -2.797e-02, -7.199e-03, 8.681e-03, -6.153e-03, -2.722e-03, 1.886e-02, 1.242e-03, 1.749e-01, -5.889e-04));
	r += mul(s1_0, M4(-2.913e-03, -1.896e-02, -2.086e-02, 3.104e-03, 1.567e-01, -5.647e-02, -7.821e-03, 2.517e-02, -3.522e-01, 1.028e-02, -4.251e-02, -5.040e-02, -9.883e-03, 2.287e-02, 8.064e-03, 2.957e-03));
	r += mul(s1_1, M4(1.947e-02, -1.838e-02, 7.808e-04, -7.970e-03, -1.455e-01, -1.424e-03, 5.488e-02, 2.349e-02, -9.205e-02, -2.982e-02, 3.389e-02, -3.873e-02, -2.603e-02, -4.293e-02, -1.813e-02, -2.496e-02));
	r += mul(s1_2, M4(1.304e-01, -4.890e-02, -1.177e-02, -2.038e-02, 2.280e-02, 1.016e-02, -1.360e-05, 1.181e-02, -6.718e-02, 1.276e-02, 5.428e-02, -1.417e-02, -8.321e-02, 5.306e-02, 3.569e-02, 1.275e-02));
	r += mul(s1_3, M4(2.727e-02, 2.081e-02, -2.191e-03, 1.010e-02, -3.060e-01, -1.659e-01, -6.288e-02, -1.983e-02, 2.235e-01, 1.658e-01, 4.319e-02, 9.159e-02, 3.285e-02, 2.857e-02, 2.895e-02, -1.078e-02));
	r += mul(s1_4, M4(-6.025e-02, -1.057e-02, -2.664e-02, 4.111e-02, 1.199e+00, -7.051e-01, 3.249e-01, -1.086e-01, -4.210e-01, 3.304e-02, -1.207e+00, 1.231e-01, -5.140e-01, -3.444e-01, -2.498e-01, 4.208e-02));
	r += mul(s1_5, M4(1.143e-01, 3.564e-02, -2.449e-01, 4.335e-02, -3.941e-02, -3.988e-02, -1.248e-01, -6.081e-05, -1.086e-02, 1.330e-02, 1.010e-01, 1.057e-02, 7.231e-02, 8.473e-02, 1.479e-01, -3.918e-02));
	r += mul(s1_6, M4(-8.488e-04, 1.498e-02, 1.951e-02, -8.961e-03, -1.825e-02, 2.021e-01, -1.441e-01, 4.565e-02, -6.218e-02, -3.812e-02, 1.659e-01, -5.042e-02, -1.566e-03, -1.211e-01, 1.379e-02, 1.388e-04));
	r += mul(s1_7, M4(-2.052e-03, 4.286e-02, -6.762e-02, 1.476e-03, 3.424e-02, 1.870e-01, 3.914e-01, 3.762e-02, -4.748e-02, 1.168e-01, -7.745e-02, -1.282e-02, 6.354e-04, -2.108e-02, -2.549e-01, -5.871e-02));
	r += mul(s1_8, M4(1.606e-02, 3.099e-02, 8.763e-02, 3.106e-03, 1.175e-02, 1.285e-02, 3.385e-02, -1.478e-02, 1.637e-02, 3.304e-03, -3.880e-02, 8.272e-03, -3.313e-03, -1.521e-02, 1.336e-01, -2.626e-02));
	r += V4(-2.482e-03, 6.617e-04, 1.920e-04, 1.457e-03);
	return r;
}
void Pass10(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 11
//!DESC CuNNy-8x4C-CHROMA-NVL-out
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-3.432e-02, -6.731e-03, -8.806e-03, -1.202e-02, -4.762e-02, -1.069e-02, -3.893e-03, -4.575e-03, 1.362e-01, 2.371e-02, -1.018e-02, -5.021e-04, 1.191e-01, -8.468e-03, -2.875e-02, -2.460e-02));
	r += mul(s0_1, M4(3.471e-02, -8.664e-02, -2.032e-02, 2.700e-04, 9.644e-02, -7.948e-03, 1.023e-01, 2.183e-02, 1.889e-01, 3.361e-01, 3.498e-02, -1.854e-02, -2.881e-01, 1.783e-01, -1.077e-01, 1.044e-02));
	r += mul(s0_2, M4(3.563e-02, 5.298e-02, 7.613e-03, 2.276e-02, -3.894e-02, 6.933e-03, 3.162e-02, 4.081e-02, -1.343e-03, -3.575e-02, 2.070e-03, -4.333e-02, 3.119e-02, 1.376e-02, 1.651e-03, -1.267e-02));
	r += mul(s0_3, M4(-5.014e-02, -9.371e-03, -4.822e-02, -1.528e-02, 1.243e-01, 1.588e-02, 5.964e-02, 3.396e-03, -1.284e-01, -4.069e-02, 1.840e-02, 1.046e-03, 5.397e-02, -8.261e-03, 2.378e-01, 3.186e-02));
	r += mul(s0_4, M4(-4.170e-01, -1.127e-01, 9.540e-02, -1.157e-02, -4.096e-01, -1.584e-01, -4.906e-01, -3.076e-01, -1.284e-01, 1.377e-02, 5.527e-03, 5.410e-01, 9.306e-03, 1.609e-01, -1.365e-01, 4.287e-01));
	r += mul(s0_5, M4(1.616e-01, -1.910e-01, 6.871e-02, -7.246e-02, 5.317e-02, 7.007e-02, -6.649e-03, 8.764e-02, -3.697e-02, -4.760e-02, 2.120e-02, -1.263e-02, 7.572e-03, -5.509e-02, 1.862e-02, -2.386e-02));
	r += mul(s0_6, M4(1.061e-01, 2.485e-02, 7.544e-02, 3.942e-02, 6.672e-03, 9.859e-03, 1.813e-02, 6.961e-03, 1.912e-02, 2.449e-02, -3.976e-03, 1.859e-02, 5.287e-03, 1.306e-02, -1.378e-02, 1.422e-02));
	r += mul(s0_7, M4(1.840e-01, 3.331e-02, -1.605e-02, -1.903e-01, -2.429e-02, -4.584e-02, -6.240e-03, -1.126e-01, -7.117e-03, 2.497e-02, -7.521e-02, -2.063e-02, -1.078e-05, 7.904e-03, 1.184e-02, -1.472e-02));
	r += mul(s0_8, M4(-3.214e-02, 2.945e-02, 1.785e-02, 5.573e-02, 8.168e-03, 9.871e-03, 2.307e-02, 1.071e-01, 8.687e-03, 1.898e-02, 9.502e-04, -1.560e-02, -7.514e-03, -1.541e-02, 3.419e-03, -5.164e-02));
	r += mul(s1_0, M4(-6.906e-02, 7.549e-03, -2.562e-03, -4.610e-02, 1.015e-01, -8.340e-02, -2.228e-02, -1.225e-02, 8.545e-02, 1.009e-02, -3.166e-02, 2.953e-02, 8.969e-02, -2.814e-02, 4.572e-02, 3.293e-03));
	r += mul(s1_1, M4(-8.423e-02, -2.192e-01, 8.438e-02, -8.222e-03, -8.182e-01, -8.251e-02, 5.651e-01, 1.603e-01, -4.541e-01, 1.154e+00, -3.272e-01, 1.274e-01, -8.584e-02, 3.668e-01, 2.046e-01, 1.438e-01));
	r += mul(s1_2, M4(7.599e-03, 2.960e-02, 3.071e-02, 2.989e-02, -2.565e-03, -2.270e-01, 2.754e-02, 2.233e-01, 5.672e-02, -6.373e-02, 2.141e-02, -1.083e-02, 8.770e-02, -2.926e-01, 5.099e-02, -2.725e-02));
	r += mul(s1_3, M4(-1.370e-01, 8.246e-03, -1.984e-02, -1.013e-02, -2.102e-02, 2.788e-02, 4.493e-02, 7.249e-02, -6.275e-02, -4.332e-02, -6.566e-02, 2.149e-02, 1.868e-01, -2.985e-02, -9.700e-02, 5.574e-02));
	r += mul(s1_4, M4(7.053e-02, -5.692e-01, -3.142e-01, 1.255e-01, -1.244e-01, -1.732e-01, -4.516e-01, -3.818e-01, -2.075e-01, 1.880e-02, -1.539e-01, 5.931e-01, 1.821e+00, 1.879e+00, -2.053e+00, -8.383e-01));
	r += mul(s1_5, M4(-3.670e-03, 3.047e-02, -8.390e-03, -8.625e-03, 5.652e-02, 8.586e-02, 5.682e-02, 2.425e-01, 1.595e-02, -7.116e-02, 2.350e-02, 5.433e-03, -1.656e-01, 4.086e-01, -5.298e-02, -4.137e-02));
	r += mul(s1_6, M4(8.032e-02, 2.742e-02, 1.447e-01, 2.983e-02, 3.316e-02, 1.762e-02, 1.016e-02, -3.023e-03, 1.313e-02, 1.581e-02, -2.041e-02, 6.606e-03, -1.919e-01, -6.290e-02, 1.451e-01, 2.586e-01));
	r += mul(s1_7, M4(1.273e-01, 2.960e-02, 1.500e-01, -2.745e-01, -5.578e-02, -2.480e-02, -2.912e-02, -5.825e-02, -1.181e-02, 1.294e-02, -4.570e-02, 3.653e-03, 4.980e-01, 3.661e-01, -5.523e-01, -1.585e-01));
	r += mul(s1_8, M4(-1.462e-02, 2.002e-02, 8.566e-03, -2.591e-02, 9.672e-03, -1.811e-03, 1.188e-02, 2.728e-02, -4.013e-03, -5.462e-03, -1.979e-03, -1.318e-02, -1.518e-01, 2.560e-02, 2.999e-01, -2.283e-01));
	r += V4(2.503e-03, -1.646e-04, 2.266e-03, -3.768e-04);
	return tanh(r);
}
void Pass11(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 12
//!DESC CuNNy-8x4C-CHROMA-NVL-shuffle
//!STYLE PS
//!IN t1, INPUT, easu
float4 Pass12(float2 pos) {
	float2 pt = float2(GetInputPt());
	static const float3x3 rgb2yuv = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081};
	static const float3x3 yuv2rgb = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float4 r = 0.0;
	float2 size = float2(GetInputSize());
	float2 f = frac(pos * size);
	float3 yuv = mul(rgb2yuv, INPUT.SampleLevel(SL, pos, 0).rgb);
	int2 i = int2(f * 2.0);
	r.r = t1.SampleLevel(SP, (float2(0.5, 0.5) - f) * pt + pos, 0)[2*i.y + i.x];
	r.r += easu.SampleLevel(SP, pos, 0).r;
	r.a = 1.0;
	r.r = clamp(r, 0.0, 1.0);
	float3 px = mul(yuv2rgb, float3(r.r, yuv.yz));
	return float4(px, 1.0);
}
