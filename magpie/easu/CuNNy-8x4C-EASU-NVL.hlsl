// CuNNy 8x4C CHROMA NVL
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

//!MAGPIE EFFECT
//!VERSION 3
//!OUTPUT_WIDTH INPUT_WIDTH * 2
//!OUTPUT_HEIGHT INPUT_HEIGHT * 2

//!TEXTURE
Texture2D INPUT;

//!TEXTURE
//!WIDTH INPUT_WIDTH * 2
//!HEIGHT INPUT_HEIGHT * 2
//!FORMAT R8_UNORM
Texture2D easu;

//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t1;

// FSR mpv | modified
// Copyright (c) 2021 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// FidelityFX FSR v1.0.2 by AMD
// ported to mpv by agyild

//!PASS 1
//!DESC CuNNy-EASU
//!STYLE PS
//!IN INPUT
//!OUT easu

float GetLuma(float3 rgb) {
	return dot(float3(0.299, 0.587, 0.114), rgb);
}

float APrxLoRcpF1(float a) {
	return asfloat(uint(0x7ef07ebb) - asuint(a));
}

float APrxLoRsqF1(float a) {
	return asfloat(uint(0x5f347d74) - (asuint(a) >> uint(1)));
}

float AMin3F1(float x, float y, float z) {

	return min(x, min(y, z));
}

float AMax3F1(float x, float y, float z) {
	return max(x, max(y, z));
}

void tap(inout float aC, inout float aW, float2 off, float2 dir, float2 len,
         float lob, float clp, float c){
	float2 v;
	v.x = (off.x * ( dir.x)) + (off.y * dir.y);
	v.y = (off.x * (-dir.y)) + (off.y * dir.x);
	v *= len;
	float d2 = v.x * v.x + v.y * v.y;
	d2 = min(d2, clp);
	float wB = float(2.0 / 5.0) * d2 + -1.0;

	float wA = lob * d2 + -1.0;
	wB *= wB;
	wA *= wA;
	wB = float(25.0 / 16.0) * wB + float(-(25.0 / 16.0 - 1.0));
	float w = wB * wA;
	aC += c * w;
	aW += w;
}

void set(inout float2 dir, inout float len, float2 pp, bool biS, bool biT,
         bool biU, bool biV, float lA, float lB, float lC, float lD, float lE){

	float w = 0.0;
	if (biS)
		w = (1.0 - pp.x) * (1.0 - pp.y);
	if (biT)
		w =        pp.x  * (1.0 - pp.y);
	if (biU)
		w = (1.0 - pp.x) *        pp.y;

	if (biV)
		w =        pp.x  *        pp.y;
	float dc = lD - lC;
	float cb = lC - lB;
	float lenX = max(abs(dc), abs(cb));
	lenX = APrxLoRcpF1(lenX);
	float dirX = lD - lB;
	lenX = clamp(abs(dirX) * lenX, 0.0, 1.0);
	lenX *= lenX;
	float ec = lE - lC;

	float ca = lC - lA;
	float lenY = max(abs(ec), abs(ca));
	lenY = APrxLoRcpF1(lenY);
	float dirY = lE - lA;
	lenY = clamp(abs(dirY) * lenY, 0.0, 1.0);
	lenY *= lenY;
	dir += float2(dirX, dirY) * w;
	len += dot(float2(w, w), float2(lenX, lenY));
}

float4 Pass1(float2 pos) {
	float2 pt = float2(GetInputPt());
	float2 size = float2(GetInputSize());
	float4 pix = float4(0.0, 0.0, 0.0, 1.0);
	float2 pp = pos * size - float2(0.5, 0.5);
	float2 fp = floor(pp);
	pp -= fp;
	float b = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2(0.5, -0.5)) * pt), 0).rgb);
	float c = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2(1.5, -0.5)) * pt), 0).rgb);
	float e = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2(-0.5, 0.5)) * pt), 0).rgb);
	float f = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2( 0.5, 0.5)) * pt), 0).rgb);
	float g = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2( 1.5, 0.5)) * pt), 0).rgb);
	float h = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2( 2.5, 0.5)) * pt), 0).rgb);
	float i = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2(-0.5, 1.5)) * pt), 0).rgb);
	float j = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2( 0.5, 1.5)) * pt), 0).rgb);
	float k = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2( 1.5, 1.5)) * pt), 0).rgb);
	float l = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2( 2.5, 1.5)) * pt), 0).rgb);
	float n = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2(0.5, 2.5) ) * pt), 0).rgb);
	float o = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2(1.5, 2.5) ) * pt), 0).rgb);
	float4 bczzL = float4(b, c, 0.0, 0.0);
	float4 ijfeL = float4(i, j, f, e);
	float4 klhgL = float4(k, l, h, g);
	float4 zzonL = float4(0.0, 0.0, o, n);
	float bL = bczzL.x;
	float cL = bczzL.y;
	float iL = ijfeL.x;
	float jL = ijfeL.y;
	float fL = ijfeL.z;
	float eL = ijfeL.w;
	float kL = klhgL.x;
	float lL = klhgL.y;
	float hL = klhgL.z;
	float gL = klhgL.w;
	float oL = zzonL.z;
	float nL = zzonL.w;
	float2 dir = float2(0.0, 0.0);
	float len = 0.0;
	set(dir, len, pp, true, false, false, false, bL, eL, fL, gL, jL);
	set(dir, len, pp, false, true, false, false, cL, fL, gL, hL, kL);
	set(dir, len, pp, false, false, true, false, fL, iL, jL, kL, nL);
	set(dir, len, pp, false, false, false, true, gL, jL, kL, lL, oL);
	float2 dir2 = dir * dir;
	float dirR = dir2.x + dir2.y;
	bool zro = dirR < float(1.0 / 32768.0);
	dirR = APrxLoRsqF1(dirR);
	dirR = zro ? 1.0 : dirR;
	dir.x = zro ? 1.0 : dir.x;
	dir *= float2(dirR, dirR);
	len = len * 0.5;
	len *= len;
	float stretch = (dir.x * dir.x + dir.y * dir.y) * APrxLoRcpF1(max(abs(dir.x), abs(dir.y)));
	float2 len2 = float2(1.0 + (stretch - 1.0) * len, 1.0 + -0.5 * len);
	float lob = 0.5 + float((1.0 / 4.0 - 0.04) - 0.5) * len;
	float clp = APrxLoRcpF1(lob);
	float aC = 0.0;
	float aW = 0.0;
	tap(aC, aW, float2( 0.0,-1.0) - pp, dir, len2, lob, clp, bL);
	tap(aC, aW, float2( 1.0,-1.0) - pp, dir, len2, lob, clp, cL);
	tap(aC, aW, float2(-1.0, 1.0) - pp, dir, len2, lob, clp, iL);
	tap(aC, aW, float2( 0.0, 1.0) - pp, dir, len2, lob, clp, jL);
	tap(aC, aW, float2( 0.0, 0.0) - pp, dir, len2, lob, clp, fL);
	tap(aC, aW, float2(-1.0, 0.0) - pp, dir, len2, lob, clp, eL);
	tap(aC, aW, float2( 1.0, 1.0) - pp, dir, len2, lob, clp, kL);
	tap(aC, aW, float2( 2.0, 1.0) - pp, dir, len2, lob, clp, lL);
	tap(aC, aW, float2( 2.0, 0.0) - pp, dir, len2, lob, clp, hL);
	tap(aC, aW, float2( 1.0, 0.0) - pp, dir, len2, lob, clp, gL);
	tap(aC, aW, float2( 1.0, 2.0) - pp, dir, len2, lob, clp, oL);
	tap(aC, aW, float2( 0.0, 2.0) - pp, dir, len2, lob, clp, nL);
	pix.r = aC / aW;
	float min1 = min(AMin3F1(fL, gL, jL), kL);
	float max1 = max(AMax3F1(fL, gL, jL), kL);
	pix.r = clamp(pix.r, min1, max1);
	pix.r = clamp(pix.r, 0.0, 1.0);
	return pix;
}

//!PASS 2
//!DESC CuNNy-8x4C-CHROMA-NVL-in
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) (dot(float3(-3.448e-01, -6.549e-01, -1.525e-01), O(INPUT, float2(x, y)).rgb) + 2.654e-01)
float4 f0(float2 pt, float2 pos, min16float s0_0, min16float s0_1, min16float s0_2, min16float s0_3, min16float s0_4, min16float s0_5, min16float s0_6, min16float s0_7, min16float s0_8) {
	V4 r = 0.0;
	r += V4(2.370e-01, 1.903e-01, -2.744e-02, -2.638e-02) * s0_0;
	r += V4(3.501e-02, -1.431e-01, -1.675e-01, -1.625e-02) * s0_1;
	r += V4(-7.794e-02, -1.636e-02, 5.872e-02, 6.975e-03) * s0_2;
	r += V4(1.831e-01, 2.876e-01, 1.967e-01, 2.659e-01) * s0_3;
	r += V4(-6.359e-01, 2.426e-01, -4.596e-01, 5.946e-03) * s0_4;
	r += V4(1.411e-01, -1.270e-02, -9.106e-02, -9.401e-03) * s0_5;
	r += V4(-2.724e-01, 5.520e-02, 3.961e-01, 9.599e-03) * s0_6;
	r += V4(2.361e-01, -5.332e-01, 1.905e-01, -2.213e-02) * s0_7;
	r += V4(1.470e-01, -7.173e-02, -1.070e-01, 4.550e-03) * s0_8;
	r += V4(9.577e-03, -2.379e-03, -2.618e-02, -5.346e-02);
	return r;
}
void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float s0_0 = l0(-1.0, -1.0);
	min16float s0_1 = l0(0.0, -1.0);
	min16float s0_2 = l0(1.0, -1.0);
	min16float s0_3 = l0(-1.0, 0.0);
	min16float s0_4 = l0(0.0, 0.0);
	min16float s0_5 = l0(1.0, 0.0);
	min16float s0_6 = l0(-1.0, 1.0);
	min16float s0_7 = l0(0.0, 1.0);
	min16float s0_8 = l0(1.0, 1.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8);
}
//!PASS 3
//!DESC CuNNy-8x4C-CHROMA-NVL-conv1
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(1.816e-02, 9.757e-03, -3.109e-01, 6.760e-02, -3.165e-02, 9.754e-03, 1.977e-01, -5.569e-02, -2.944e-02, -1.868e-02, -1.411e-01, 3.144e-02, 2.644e-01, -3.386e-01, 5.015e-01, -2.982e-02));
	r += mul(s0_1, M4(-6.227e-01, -3.332e-02, 9.292e-03, -3.169e-03, 5.827e-01, -3.307e-02, -9.150e-02, -8.745e-02, -7.559e-01, -1.432e-01, 9.820e-02, 3.573e-02, -8.530e-01, 1.265e+00, 2.731e+00, -6.800e-01));
	r += mul(s0_2, M4(-3.088e-02, -1.312e-03, -1.943e-02, -1.465e-01, -8.898e-02, -8.635e-02, -1.048e-01, 2.998e-01, 6.057e-03, 2.961e-02, 1.897e-02, 3.104e-01, 1.656e+00, 4.253e-01, 1.063e+00, -1.387e+00));
	r += mul(s0_3, M4(4.503e-02, -5.254e-01, -1.398e-02, 2.348e-02, 9.448e-02, 5.525e-01, -5.331e-01, -3.803e-01, -1.975e-02, -1.880e-01, -2.141e-01, 2.289e-01, 1.228e-01, -2.376e-03, 2.645e-01, -7.499e-01));
	r += mul(s0_4, M4(4.312e-01, 6.582e-01, 2.921e-01, -2.960e-01, -4.849e-02, -9.537e-02, 3.350e-01, -1.577e-01, -1.076e-01, 5.531e-01, -1.907e-01, -1.909e-01, -8.616e-01, 2.291e+00, 9.422e-01, -1.538e+00));
	r += mul(s0_5, M4(-2.004e-02, -2.247e-02, -4.735e-02, 5.013e-02, -7.737e-02, -1.499e-01, -1.703e-01, -3.118e-01, 6.888e-02, 6.232e-02, -2.197e-02, -4.184e-01, -2.907e+00, -2.187e-01, 1.495e+00, -2.212e-01));
	r += mul(s0_6, M4(-7.017e-02, -2.646e-01, 1.247e-01, 1.335e-01, 4.624e-02, -6.648e-02, 6.709e-02, 2.690e-01, -5.726e-02, -1.958e-01, 6.553e-02, -7.288e-03, 3.142e-02, 3.477e-01, 2.911e-01, 6.711e-01));
	r += mul(s0_7, M4(1.283e-01, 1.733e-01, -8.259e-02, -3.509e-02, 1.853e-01, 1.655e-01, 7.059e-02, 1.842e-01, 2.045e-01, 2.588e-01, -7.078e-02, 1.705e-01, 3.443e-01, 1.194e+00, 2.302e-01, 1.626e+00));
	r += mul(s0_8, M4(8.069e-02, 7.721e-02, 6.368e-02, 1.492e-02, 4.322e-02, 7.108e-02, 5.557e-02, -6.037e-02, 9.957e-02, 8.364e-02, 1.654e-01, 2.164e-01, -1.304e-01, -5.026e-02, -5.087e-01, -4.401e-01));
	r += mul(s1_0, M4(-2.863e-02, 3.548e-02, -1.675e-01, 5.006e-01, -6.264e-02, -4.306e-02, 3.844e-01, 1.730e-01, 1.143e-02, 4.088e-02, -1.164e-01, -1.790e-02, -4.125e-02, 5.261e-02, 5.519e-02, -3.207e-01));
	r += mul(s1_1, M4(-4.499e-01, -4.738e-02, -2.721e-01, 2.322e-01, 4.789e-01, 1.509e-02, -1.030e-01, -3.667e-02, -8.181e-01, -1.354e-01, 1.465e-01, 2.076e-02, 7.323e-03, -9.957e-03, 8.647e-02, 1.394e-02));
	r += mul(s1_2, M4(-8.073e-02, -3.430e-02, -7.733e-02, -2.803e-01, -5.632e-03, -3.036e-02, 5.641e-02, 1.798e-01, -8.239e-02, -1.528e-02, -2.696e-03, 1.372e-01, 2.513e-01, 1.039e-01, 1.797e-02, 1.086e-01));
	r += mul(s1_3, M4(3.626e-02, -5.758e-01, -6.541e-02, 3.700e-01, 8.117e-02, 4.930e-01, -5.566e-01, -5.098e-01, -9.803e-03, -3.190e-01, -1.736e-01, 2.714e-01, -2.863e-02, 2.212e-01, 3.371e-01, 2.136e-03));
	r += mul(s1_4, M4(4.179e-01, 3.622e-01, 1.434e-01, -5.085e-01, -8.292e-02, -5.498e-02, 3.267e-01, 1.245e-01, -2.123e-02, 7.000e-01, -1.343e-01, -6.696e-01, 9.215e-02, -1.470e-01, -1.393e-01, 1.064e-01));
	r += mul(s1_5, M4(-5.087e-02, -6.342e-02, 1.770e-03, 2.494e-02, -4.600e-02, -9.789e-02, -1.596e-01, -1.411e-01, 2.736e-02, 1.084e-01, -6.914e-02, -5.910e-01, -8.873e-02, -4.922e-02, 3.455e-02, 1.582e-01));
	r += mul(s1_6, M4(-2.759e-02, -2.326e-01, 1.241e-01, 2.223e-01, 4.430e-02, -3.660e-02, 4.427e-02, 1.363e-01, -5.277e-02, -1.761e-01, 5.089e-02, -1.491e-01, 7.251e-02, 6.738e-02, 1.509e-01, -6.603e-02));
	r += mul(s1_7, M4(1.317e-01, 2.143e-01, -6.355e-04, -6.260e-03, 1.675e-01, 1.284e-01, 6.502e-02, 2.619e-01, 2.387e-01, 2.607e-01, -4.367e-02, 1.636e-01, -8.941e-02, 1.070e-02, -1.206e-01, 3.090e-02));
	r += mul(s1_8, M4(1.007e-01, 1.371e-01, 5.539e-02, 1.158e-01, 3.639e-02, 5.139e-02, 5.332e-02, -3.900e-02, 8.165e-02, 6.717e-02, 1.587e-01, 3.090e-01, -1.968e-01, -2.241e-01, -9.790e-02, -4.301e-02));
	r += V4(-1.513e-02, 1.508e-02, -9.103e-03, -2.595e-03);
	return r;
}
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 4
//!DESC CuNNy-8x4C-CHROMA-NVL-conv2
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-5.399e-02, 5.380e-02, 9.934e-04, 4.629e-02, -1.453e-01, -2.150e-02, 1.881e-02, -7.251e-02, 9.542e-02, 5.083e-02, 1.595e-01, 1.652e-02, -4.176e-02, 7.740e-02, 1.173e-01, 7.595e-02));
	r += mul(s0_1, M4(6.075e-02, 1.462e-02, -8.696e-02, -3.067e-02, -1.822e-01, -2.463e-01, -3.322e-01, -1.937e-02, -3.156e-02, -6.624e-02, -1.913e-02, -8.634e-03, -9.531e-02, 1.261e-01, 1.086e-01, 6.859e-03));
	r += mul(s0_2, M4(3.122e-02, -1.042e-01, -5.396e-02, 2.560e-02, -1.943e-02, -2.446e-01, 8.885e-02, -1.257e-01, -1.288e-01, -7.882e-02, -4.403e-01, 9.782e-02, -9.246e-02, 7.416e-02, 4.764e-02, 1.458e-03));
	r += mul(s0_3, M4(-1.501e-01, 2.764e-01, 1.251e-01, -2.258e-02, 1.353e-01, -8.795e-02, -3.610e-02, 4.364e-02, -6.441e-02, 4.004e-02, 1.298e-02, 1.072e-01, -2.277e-01, 4.976e-02, -1.476e-02, 1.705e-02));
	r += mul(s0_4, M4(-9.731e-02, -1.153e-01, -2.242e-01, -3.069e-02, 5.077e-02, 1.804e-01, 1.035e-01, 2.304e-01, -1.378e-01, 2.418e-01, 3.245e-01, 5.985e-02, -5.635e-02, -3.192e-01, -9.236e-03, 1.390e-01));
	r += mul(s0_5, M4(2.159e-01, -1.510e-01, 3.263e-01, 5.921e-02, -9.152e-02, 3.667e-02, 4.479e-02, -8.842e-01, -1.295e-01, 1.974e-01, -1.566e-01, -2.416e-02, -1.356e-01, -9.590e-02, -1.099e-01, 6.149e-02));
	r += mul(s0_6, M4(1.002e-01, 2.055e-01, -9.592e-02, -7.145e-02, 1.259e-02, -4.588e-02, 2.565e-02, -2.897e-02, -1.016e-01, 1.434e-01, 2.149e-02, -7.496e-02, -2.642e-02, -8.960e-02, 2.316e-02, 6.518e-02));
	r += mul(s0_7, M4(-2.573e-02, 1.009e+00, 3.193e-01, -3.119e-01, 2.126e-01, 1.163e-01, -2.752e-02, -1.073e-01, -4.270e-02, -5.150e-01, 2.266e-01, -3.881e-01, 4.652e-02, 2.283e-02, -2.950e-02, 1.724e-01));
	r += mul(s0_8, M4(1.368e-01, -3.750e-03, -9.867e-02, -7.387e-02, -4.899e-02, 2.011e-02, 2.974e-01, -1.000e-01, 5.052e-01, -1.224e+00, 2.172e-01, -7.797e-03, -9.431e-02, -6.276e-02, -5.608e-02, 4.447e-02));
	r += mul(s1_0, M4(2.501e-02, 7.094e-02, 4.186e-02, 5.943e-02, -6.571e-02, -1.978e-02, 2.009e-02, -3.157e-02, 2.284e-02, 2.793e-02, 7.799e-02, -3.843e-02, -1.625e-01, 2.494e-02, -4.419e-02, -8.701e-02));
	r += mul(s1_1, M4(-1.924e-02, 1.099e-01, 5.089e-02, -3.275e-02, -1.834e-01, 2.648e-02, 1.446e-01, 1.432e-01, 2.817e-02, -7.167e-02, -1.107e-02, -7.130e-02, 1.381e-01, -8.776e-02, 4.741e-02, -5.813e-03));
	r += mul(s1_2, M4(-4.849e-02, -4.127e-02, -1.817e-02, -4.769e-02, 4.688e-02, -5.148e-02, 1.054e+00, -9.180e-03, -1.665e-02, -3.190e-02, -4.867e-02, 5.539e-02, -2.547e-01, -6.421e-02, -1.314e-01, -1.440e-01));
	r += mul(s1_3, M4(-2.039e-01, 1.343e-01, 1.167e-01, -4.835e-02, 6.395e-03, 1.489e-02, 4.693e-03, 7.039e-02, 1.312e-01, -8.006e-02, 1.508e-04, 1.075e-01, -2.219e-02, 1.392e-01, -5.627e-02, -4.341e-02));
	r += mul(s1_4, M4(-2.026e-01, -2.621e-02, 6.077e-01, 4.640e-01, -2.846e-01, -3.793e-01, -3.448e-02, 6.880e-01, 4.953e-02, 9.679e-03, 1.313e-01, 3.799e-02, 1.943e-01, -4.361e-01, 6.323e-02, 9.909e-02));
	r += mul(s1_5, M4(1.199e-01, -3.717e-02, 1.497e-01, 1.292e-01, 2.589e-02, -2.008e-01, -5.370e-01, 1.043e-01, -1.462e-01, 5.011e-02, -3.838e-01, -1.851e-01, -1.667e-01, -2.168e-01, -1.518e-01, -1.106e-01));
	r += mul(s1_6, M4(6.696e-02, 1.143e-01, -5.422e-02, -1.824e-01, -6.070e-02, 8.161e-02, 7.535e-02, -8.122e-03, -2.088e-01, 1.107e-01, -3.541e-02, -1.081e-01, -1.044e-01, 1.962e-02, -6.827e-03, -6.469e-02));
	r += mul(s1_7, M4(7.276e-01, -2.869e-01, 2.641e-01, 1.121e-01, 1.616e-01, 1.579e-01, -8.488e-02, -6.952e-02, 1.173e-01, -2.447e-01, 1.836e-01, -1.074e-02, 5.913e-02, 2.732e-02, 3.292e-02, -8.481e-03));
	r += mul(s1_8, M4(1.519e-01, 1.923e-01, -2.302e-01, 6.416e-02, 1.688e-01, -1.554e-01, 2.378e-01, -7.399e-02, 3.946e-02, 1.842e-01, 1.024e-01, 6.714e-02, -1.288e-01, 6.958e-02, 5.052e-02, -7.252e-02));
	r += V4(6.133e-03, -1.363e-02, 3.667e-03, 1.861e-03);
	return r;
}
void Pass4(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 5
//!DESC CuNNy-8x4C-CHROMA-NVL-conv3
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(1.950e-01, -1.619e-01, 1.475e-01, -9.372e-02, 1.793e-01, -6.278e-02, -3.161e-02, 1.059e-01, 8.580e-02, 7.781e-02, 6.988e-02, 5.969e-02, -2.825e-01, -1.687e-02, 8.534e-02, -7.684e-01));
	r += mul(s0_1, M4(1.214e-01, -8.699e-02, -2.206e-01, 5.083e-01, 8.075e-02, 1.488e-01, -2.658e-01, 1.334e-01, 1.361e-01, -1.066e-01, 1.724e-01, 3.949e-02, -3.725e-01, -3.315e-01, -8.656e-03, -7.767e-01));
	r += mul(s0_2, M4(-2.706e-01, 1.161e-01, -1.558e-01, 5.457e-02, -1.126e-01, -9.920e-02, 7.690e-02, -2.203e-01, 9.354e-02, -1.174e-01, 3.800e-02, 1.498e-01, 2.402e-02, -2.554e-01, 1.008e-01, 3.733e-05));
	r += mul(s0_3, M4(1.758e-01, 1.250e-02, -8.746e-02, 1.635e-01, 3.298e-01, 4.653e-02, 1.110e-01, 7.937e-04, -2.191e-01, -5.508e-02, -2.368e-01, 1.682e-01, -4.210e-01, 7.741e-03, 5.026e-02, -1.931e-01));
	r += mul(s0_4, M4(-1.882e-02, -6.226e-03, 8.807e-02, 7.578e-01, -4.209e-01, -8.268e-02, 2.842e-01, 1.145e-01, 3.843e-01, -5.487e-01, -2.062e-02, 1.922e-03, 1.684e+00, -5.855e-01, -1.065e+00, -4.517e-01));
	r += mul(s0_5, M4(-1.569e-01, 7.721e-02, -6.127e-02, 1.038e-01, 6.116e-02, -1.333e-01, 3.997e-02, -5.588e-02, 1.482e-01, -6.449e-01, 2.495e-01, 4.562e-02, -2.335e-01, -7.979e-02, -2.023e-01, 6.441e-02));
	r += mul(s0_6, M4(-3.176e-01, -7.013e-02, -6.426e-02, -4.954e-02, -5.003e-02, -1.249e-02, 3.231e-02, 1.313e-02, 6.230e-01, -2.135e-03, -1.469e-01, -8.915e-02, 1.942e-01, 6.130e-02, -5.341e-02, -1.770e-01));
	r += mul(s0_7, M4(-4.233e-01, -1.174e-02, -1.819e-01, -7.278e-02, -2.132e-02, -1.132e-01, -1.397e-02, -2.447e-02, 2.192e-02, 5.989e-02, 6.292e-02, -2.341e-01, 2.728e-01, 1.596e-01, -4.722e-02, -3.663e-01));
	r += mul(s0_8, M4(-2.920e-01, 1.135e-01, -5.711e-02, 4.026e-02, 1.791e-01, -1.333e-02, 4.895e-04, -3.937e-02, -1.239e-01, -2.937e-01, -4.916e-02, -4.632e-03, -2.720e-01, -9.883e-02, -3.526e-02, -1.961e-01));
	r += mul(s1_0, M4(2.076e-01, -3.088e-02, -8.245e-04, 1.864e-01, -1.812e-01, -3.531e-02, -2.016e-02, 2.096e-01, -3.378e-02, -4.432e-02, 2.434e-02, 6.166e-03, -2.552e-02, -1.334e-01, 5.674e-02, 1.556e-02));
	r += mul(s1_1, M4(3.071e-01, -1.149e-01, -4.856e-02, 3.916e-01, -1.971e-01, 3.481e-01, -5.323e-01, 8.379e-01, -1.430e-01, 3.542e-02, -1.510e-02, -7.537e-02, -2.674e-01, -1.321e-01, 1.626e-02, -1.807e-01));
	r += mul(s1_2, M4(2.198e-02, -1.945e-01, -6.441e-04, 4.568e-02, -4.245e-01, 2.351e-02, 1.232e-01, -3.636e-01, -2.261e-03, 6.109e-02, -4.943e-02, 2.964e-02, 1.873e-01, 1.051e-01, -8.821e-02, 9.448e-02));
	r += mul(s1_3, M4(3.341e-01, -7.445e-02, -8.720e-02, 1.257e-01, 2.007e-01, 7.541e-02, 1.596e-01, -2.846e-02, -2.478e-01, -7.677e-02, -1.421e-01, -2.494e-01, -8.874e-02, 6.839e-02, 1.147e-01, -6.033e-03));
	r += mul(s1_4, M4(-1.648e-01, 2.466e-01, 1.458e-01, 4.696e-01, -6.896e-01, -1.388e-01, 5.025e-01, 1.709e-01, 8.299e-02, -1.975e-01, -1.222e-01, -3.187e-02, 5.249e-02, -4.477e-01, -7.305e-01, 2.533e-01));
	r += mul(s1_5, M4(1.372e-01, -4.219e-03, -2.464e-02, 5.024e-02, 7.400e-02, -8.741e-02, 2.351e-01, -1.444e-02, 4.185e-02, 6.327e-02, 2.921e-02, -1.303e-01, 1.592e-01, -2.775e-01, 9.878e-02, 1.272e-01));
	r += mul(s1_6, M4(6.379e-02, -2.015e-02, -8.930e-03, 6.660e-03, -2.527e-01, -8.137e-02, -2.960e-02, -3.849e-02, -1.248e-01, 8.114e-02, -5.605e-02, -1.212e-01, -7.772e-02, -3.583e-02, -9.881e-02, -1.770e-02));
	r += mul(s1_7, M4(-2.863e-02, 1.426e-02, 6.644e-03, 4.821e-02, -1.627e-01, -7.279e-02, -1.024e-01, -4.533e-02, -2.064e-01, 2.095e-01, 8.882e-02, -2.784e-01, -1.793e-02, -2.301e-02, -3.335e-02, -2.214e-01));
	r += mul(s1_8, M4(1.116e-01, 3.675e-02, 1.426e-02, 5.186e-02, 1.704e-01, -2.393e-02, 3.875e-02, 2.380e-02, 8.661e-03, -1.049e-01, 4.155e-02, -7.022e-02, -2.193e-01, -2.261e-01, -2.769e-02, -2.348e-02));
	r += V4(9.835e-03, -3.184e-03, 1.220e-02, 7.385e-03);
	return r;
}
void Pass5(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 6
//!DESC CuNNy-8x4C-CHROMA-NVL-conv4
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-6.982e-02, -7.033e-02, -1.360e-02, 6.712e-02, -9.512e-02, -2.093e-02, 1.362e-01, 1.682e-01, 8.997e-02, 2.652e-01, 2.182e-01, -5.208e-02, -2.629e-02, 1.044e-01, -6.758e-04, -1.092e-01));
	r += mul(s0_1, M4(1.177e-01, -1.798e-01, 9.354e-02, 1.229e-01, 2.238e-02, -8.752e-02, -4.331e-02, -3.209e-02, -9.853e-02, 3.625e-01, -2.660e-01, -1.585e-01, 9.149e-02, 4.423e-02, -6.243e-02, -1.702e-01));
	r += mul(s0_2, M4(-3.921e-01, 4.586e-02, -2.193e-01, 8.780e-02, 5.009e-02, -6.024e-02, 1.368e-01, -4.949e-02, 1.809e-01, -1.942e-01, 6.949e-02, 7.680e-02, 2.562e-01, -7.559e-02, 3.070e-01, -9.001e-02));
	r += mul(s0_3, M4(-1.245e-01, 9.635e-02, -1.219e-03, -4.951e-02, -1.390e-01, -1.621e-01, 1.062e-01, 2.831e-01, 2.706e-01, 4.452e-01, 1.333e-01, -1.013e-01, -4.060e-02, -1.714e-01, -2.905e-01, -1.339e-01));
	r += mul(s0_4, M4(1.297e-01, -4.388e-01, -1.264e-01, 4.580e-01, 1.146e-02, -4.268e-01, 1.625e-01, 3.884e-02, -5.545e-01, -1.597e-01, 4.479e-01, 3.039e-01, -3.129e-01, 2.254e-01, -4.973e-03, -2.345e-01));
	r += mul(s0_5, M4(-3.610e-02, 1.474e-02, 1.104e-01, 1.658e-01, 1.351e-01, 9.071e-02, 5.136e-02, 5.691e-03, 2.371e-01, -1.229e-01, -2.184e-01, 1.307e-02, 3.473e-02, 6.585e-02, -3.737e-01, -2.678e-02));
	r += mul(s0_6, M4(-8.976e-03, -1.030e-02, 4.910e-02, -8.278e-02, -1.023e-02, -1.965e-01, -5.725e-02, 6.969e-02, 1.176e-02, 1.533e-01, -3.203e-02, -1.698e-02, -1.507e-01, -1.619e-01, 2.275e-02, -2.084e-01));
	r += mul(s0_7, M4(-3.004e-02, -1.477e-01, -1.786e-03, 2.607e-01, 1.079e-01, 1.774e-01, 3.294e-02, -6.194e-01, 9.293e-02, -2.162e-01, 1.343e-01, -7.441e-02, 9.481e-02, -1.111e-01, -2.792e-01, 1.241e-02));
	r += mul(s0_8, M4(2.760e-03, -6.591e-02, 4.376e-03, 1.427e-01, -5.561e-03, 6.881e-02, 1.144e-01, -9.225e-02, -4.667e-02, 6.906e-02, 2.570e-02, -5.919e-02, 1.155e-01, 1.685e-01, -2.148e-01, -1.976e-01));
	r += mul(s1_0, M4(-1.513e-02, 9.946e-02, -4.185e-02, -3.144e-02, -2.038e-02, -8.910e-02, 8.577e-02, 1.713e-01, -2.860e-02, -2.506e-01, 1.430e-01, 8.448e-02, -7.523e-02, -6.225e-02, -3.189e-02, 7.144e-02));
	r += mul(s1_1, M4(-6.762e-02, -2.537e-01, 1.625e-01, 1.750e-01, -3.703e-01, 1.376e-01, -4.610e-01, 1.511e-01, 2.144e-01, 1.514e-01, -2.032e-01, 1.080e-01, 3.018e-01, -7.922e-02, 6.706e-02, -1.277e-01));
	r += mul(s1_2, M4(-1.334e-01, -2.364e-02, -1.432e-01, 7.228e-02, 2.139e-01, 7.107e-02, 8.594e-02, -5.126e-02, 7.838e-01, -4.226e-01, -9.697e-02, 8.985e-02, 2.516e-01, -3.749e-02, 1.982e-01, -5.880e-02));
	r += mul(s1_3, M4(8.576e-02, -3.192e-01, 4.282e-02, -1.926e-01, 2.305e-02, -6.498e-02, 5.005e-01, 2.119e-01, -1.773e-01, 4.600e-01, 9.806e-02, -1.370e-02, -8.607e-02, 8.267e-02, -1.255e-01, 1.093e-02));
	r += mul(s1_4, M4(-7.758e-02, -4.382e-02, -1.090e-01, 8.574e-01, 3.688e-01, -2.483e-01, 6.501e-01, -8.310e-03, -5.625e-01, 1.199e-01, 9.471e-01, -1.518e-01, -2.475e-01, 7.189e-01, 7.818e-02, 1.302e-01));
	r += mul(s1_5, M4(1.711e-01, 4.307e-02, -6.811e-02, 2.587e-01, 2.643e-01, -2.721e-02, -3.996e-01, -2.479e-02, 3.086e-01, -5.530e-01, -6.075e-01, -1.206e-01, 3.202e-01, 5.076e-02, -3.393e-01, 8.448e-02));
	r += mul(s1_6, M4(1.091e-01, -1.309e-01, 1.282e-01, 1.060e-01, 1.560e-01, 2.144e-01, 3.212e-01, -8.607e-02, -7.872e-02, -3.408e-01, -9.399e-02, -8.810e-02, -4.817e-02, 8.421e-02, 5.413e-03, 1.677e-02));
	r += mul(s1_7, M4(1.098e-01, 8.822e-02, 1.799e-01, -2.391e-02, 9.165e-02, 3.791e-01, 1.576e-01, -3.494e-01, 3.984e-01, -6.791e-01, 3.051e-01, -1.595e-01, -1.993e-01, 2.569e-01, 8.241e-02, -4.863e-01));
	r += mul(s1_8, M4(1.173e-01, -3.832e-02, 2.787e-02, 1.094e-02, 6.421e-02, 9.851e-02, 1.567e-01, -4.609e-01, -2.389e-01, -3.543e-01, -1.747e-01, 1.072e-01, 2.386e-01, 5.045e-02, -6.476e-02, -1.362e-01));
	r += V4(-1.981e-03, 7.581e-03, 3.285e-03, -2.454e-02);
	return r;
}
void Pass6(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 7
//!DESC CuNNy-8x4C-CHROMA-NVL-conv5
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-1.072e-01, 8.555e-02, 1.801e-01, -1.077e-01, -4.801e-02, 4.338e-02, -4.115e-03, 2.920e-02, 6.003e-02, -5.495e-02, 2.625e-01, 5.256e-02, -5.362e-02, 7.309e-02, 6.149e-02, -7.677e-02));
	r += mul(s0_1, M4(1.286e-02, 1.587e-01, -9.910e-02, 8.373e-02, 7.972e-02, -7.846e-02, -1.675e-01, -1.625e-02, -2.609e-01, -2.516e-02, 1.799e-01, -1.662e-01, -3.625e-02, 1.089e-01, 5.277e-02, -1.626e-02));
	r += mul(s0_2, M4(-4.769e-03, 7.394e-02, -1.820e-01, 2.136e-02, -1.678e-01, -9.330e-02, -1.407e-01, 1.177e-01, -8.998e-02, -1.623e-02, -1.110e-01, -3.892e-02, -2.791e-01, -2.544e-02, 5.612e-02, -5.037e-02));
	r += mul(s0_3, M4(-2.784e-02, -6.094e-02, 1.298e-01, 1.198e-01, -6.145e-02, -2.095e-01, 2.297e-01, 1.480e-01, 6.233e-02, -8.584e-02, 1.944e-01, -4.918e-02, -5.794e-02, 2.889e-02, -6.658e-02, 4.157e-02));
	r += mul(s0_4, M4(-1.432e-01, 5.996e-01, -6.500e-01, -3.451e-01, -1.381e-01, 1.746e-01, 8.675e-02, -2.925e-02, -3.761e-01, -4.424e-01, -5.024e-02, -6.191e-01, 2.185e-02, 3.809e-02, -7.051e-01, 2.742e-01));
	r += mul(s0_5, M4(-2.053e-01, 1.186e-01, 1.118e-01, 1.233e-01, -5.023e-01, 9.333e-02, 3.149e-01, 3.611e-01, 4.193e-01, 5.725e-02, 4.187e-01, 4.532e-02, 3.539e-01, -2.066e-01, 3.228e-01, -3.997e-03));
	r += mul(s0_6, M4(9.397e-02, -5.139e-02, 8.667e-02, -4.343e-01, 1.072e-02, -9.250e-02, -1.489e-01, 1.625e-01, -2.191e-02, -9.581e-02, 3.179e-02, 5.311e-02, 2.758e-02, 2.786e-03, 6.659e-02, 2.578e-02));
	r += mul(s0_7, M4(-9.046e-02, 3.737e-01, 7.187e-01, -1.083e-01, -9.815e-02, -1.509e-02, -2.143e-01, -3.330e-01, -1.103e-01, 8.093e-02, 3.155e-01, -3.319e-01, 1.383e-02, -6.097e-02, 4.633e-02, -4.745e-02));
	r += mul(s0_8, M4(4.033e-01, -5.894e-02, 2.710e-01, 6.285e-02, 1.255e-03, 3.486e-01, -2.163e-01, 3.402e-01, -5.354e-02, 1.870e-01, 1.644e-01, 3.836e-02, 2.380e-02, -7.555e-02, -1.173e-01, 3.858e-02));
	r += mul(s1_0, M4(-9.193e-02, 2.949e-02, -1.077e-04, 1.470e-02, -9.888e-03, -6.938e-02, 4.822e-02, -4.064e-02, 3.792e-02, 7.740e-02, -7.177e-02, 5.786e-02, -5.195e-02, -2.497e-02, 9.299e-02, -1.072e-02));
	r += mul(s1_1, M4(1.398e-01, 3.317e-02, -7.276e-03, 1.120e-01, -6.462e-02, 4.132e-02, 3.136e-02, -8.912e-03, -1.205e-01, 4.987e-02, 1.048e-01, -3.743e-02, 2.418e-01, 2.046e-01, -9.688e-02, -7.710e-01));
	r += mul(s1_2, M4(-3.094e-02, -2.789e-02, -9.986e-02, -2.539e-03, -2.098e-01, -1.868e-03, -7.168e-03, -4.162e-02, -1.868e-03, -3.288e-02, 2.048e-01, 4.940e-02, -3.762e-02, -7.358e-03, 9.400e-02, -1.401e-01));
	r += mul(s1_3, M4(3.375e-02, -6.667e-02, 1.210e-01, 5.318e-02, -1.093e-02, -1.120e-01, 1.358e-01, -1.361e-02, 2.447e-03, 2.765e-01, -2.126e-01, -9.687e-02, -6.694e-02, -5.066e-02, 2.206e-01, 7.240e-02));
	r += mul(s1_4, M4(8.554e-02, 2.763e-01, -2.618e-01, -1.556e-01, -1.489e-01, 2.881e-01, 3.002e-01, -3.198e-01, -8.017e-02, -3.448e-01, -1.431e-01, 1.509e-01, 3.792e-02, -2.878e-01, -4.677e-01, -1.851e-01));
	r += mul(s1_5, M4(-3.322e-01, -1.371e-02, -7.223e-02, 2.767e-02, -5.675e-01, -1.386e-01, 1.055e-01, -1.514e-02, 5.567e-01, -6.158e-02, 1.592e-01, 1.995e-01, 1.340e-02, -1.418e-01, 5.494e-01, -1.856e-02));
	r += mul(s1_6, M4(3.720e-02, 5.504e-02, 1.637e-01, -1.143e-01, 2.736e-02, 3.260e-02, -8.425e-02, 8.478e-02, -7.345e-03, -6.166e-02, -8.704e-03, 4.088e-03, 2.169e-02, -1.124e-01, 8.970e-02, -4.078e-02));
	r += mul(s1_7, M4(1.074e-02, -9.130e-02, 6.392e-01, -1.586e-01, 3.854e-02, -1.231e-01, 7.665e-02, 4.330e-02, -4.641e-02, 4.053e-02, -1.401e-01, -1.386e-02, -9.964e-02, -5.856e-02, -2.911e-02, -1.889e-01));
	r += mul(s1_8, M4(1.306e-01, -8.957e-02, 2.203e-01, -4.568e-02, 1.115e-01, 5.288e-03, -1.738e-02, -5.333e-02, -6.344e-02, 5.403e-02, -2.396e-01, 1.548e-01, -5.555e-02, 4.261e-02, -5.901e-02, 4.068e-02));
	r += V4(-2.797e-03, 3.334e-03, -1.344e-02, 2.019e-03);
	return r;
}
void Pass7(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 8
//!DESC CuNNy-8x4C-CHROMA-NVL-conv6
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-6.418e-02, 5.917e-02, -8.422e-02, -2.191e-02, 1.068e-02, 5.392e-03, -2.999e-02, 7.954e-03, -7.072e-03, 9.249e-02, -5.393e-03, 9.945e-02, 5.713e-02, 8.950e-03, -2.434e-02, -3.725e-02));
	r += mul(s0_1, M4(3.983e-03, 3.464e-02, 6.818e-02, -3.586e-02, 4.350e-01, 1.015e-01, 1.692e-01, 1.523e-01, 3.324e-01, 8.666e-02, 1.821e-01, 1.888e-02, 9.454e-02, -1.716e-02, 1.037e-01, 1.211e-02));
	r += mul(s0_2, M4(1.620e-03, -9.975e-03, -1.169e-02, 1.433e-03, 1.638e-01, 1.074e-01, -3.891e-02, -6.559e-02, -2.707e-02, 4.753e-02, 8.774e-03, -2.022e-02, 1.017e-02, -2.487e-03, -3.186e-02, 3.582e-02));
	r += mul(s0_3, M4(4.346e-01, -2.358e-02, 5.633e-01, 5.416e-03, 1.130e-01, -1.646e-01, 1.266e-02, -4.879e-02, 1.954e-02, 7.244e-02, -1.323e-01, 7.267e-02, 2.673e-02, -1.616e-01, -3.104e-02, -1.815e-02));
	r += mul(s0_4, M4(1.467e-03, -2.062e-04, 7.366e-02, 2.846e-02, -7.408e-01, -9.872e-02, -2.842e-01, 2.983e-01, 7.536e-01, 1.353e-01, -3.364e-01, 5.107e-01, -1.731e-01, -3.831e-01, -8.088e-03, -6.453e-02));
	r += mul(s0_5, M4(3.044e-03, 3.459e-03, 5.600e-02, -1.330e-02, -3.284e-02, 1.912e-02, 8.640e-02, 1.382e-01, -2.318e-03, 9.164e-02, -3.702e-01, -2.917e-01, -3.035e-02, -1.030e-01, 4.004e-02, 7.595e-02));
	r += mul(s0_6, M4(-7.927e-02, 1.645e-01, 1.228e-01, -9.157e-02, 7.225e-02, -1.020e-01, 9.547e-02, -4.484e-02, 3.340e-03, -7.690e-02, -4.160e-02, 2.033e-03, 6.049e-02, 2.127e-01, -5.378e-02, -2.996e-02));
	r += mul(s0_7, M4(-9.605e-02, 5.521e-02, 3.688e-02, 4.776e-02, -1.365e-01, -5.664e-01, -3.005e-02, 3.925e-03, -2.104e-02, 3.901e-01, 1.825e-01, -1.294e-01, 2.588e-01, 3.500e-01, 5.192e-02, -1.639e-01));
	r += mul(s0_8, M4(-3.716e-02, -8.163e-03, 1.141e-02, -2.498e-02, -1.554e-01, -1.554e-01, 4.085e-02, -1.475e-02, 1.284e-02, 2.077e-01, -2.616e-02, 2.630e-01, 1.963e-01, 8.029e-02, -9.599e-02, -1.587e-01));
	r += mul(s1_0, M4(3.491e-02, 1.607e-02, -5.124e-02, 6.605e-02, 8.513e-02, -3.258e-02, -3.054e-02, -4.084e-02, -1.709e-02, 1.505e-02, -6.968e-03, 1.012e-02, -1.646e-01, -3.301e-03, -1.857e-01, 3.409e-02));
	r += mul(s1_1, M4(2.125e-02, 1.974e-03, 1.345e-01, 1.874e-02, 2.501e-01, 1.655e-01, 5.184e-02, 8.948e-02, 1.161e-01, 4.564e-02, -6.783e-02, 1.762e-03, 1.152e-01, 9.769e-02, 2.323e-01, -1.111e-01));
	r += mul(s1_2, M4(5.391e-02, 3.578e-02, -7.200e-03, 2.222e-02, 2.730e-02, 7.592e-02, -7.835e-02, -8.585e-02, 7.217e-02, 1.864e-02, 1.726e-02, 6.593e-04, 1.719e-01, 2.833e-02, -2.249e-01, -1.248e-01));
	r += mul(s1_3, M4(4.561e-01, 6.375e-02, 5.865e-02, 2.261e-01, 3.109e-02, -2.086e-01, 2.908e-02, -6.726e-02, 8.520e-02, -6.407e-02, -1.131e-02, -2.743e-02, 1.532e-03, 2.070e-01, -1.888e-01, 2.143e-02));
	r += mul(s1_4, M4(-3.742e-01, -1.860e-01, 5.455e-01, 6.165e-01, -4.097e-01, -1.564e-02, 1.471e-01, 9.559e-02, 2.959e-01, 1.296e-01, 8.191e-03, 2.437e-01, 5.222e-02, -6.239e-01, 2.941e-01, -4.897e-01));
	r += mul(s1_5, M4(3.673e-02, 3.542e-02, 5.257e-02, 1.470e-01, 8.446e-02, 6.526e-02, -3.196e-01, -1.932e-01, 4.690e-03, 5.112e-02, -5.509e-02, 7.644e-03, 1.270e-01, 7.048e-02, -5.655e-01, -2.637e-01));
	r += mul(s1_6, M4(-3.721e-01, 9.526e-02, 6.747e-02, -6.662e-02, -4.063e-02, 2.033e-02, 4.593e-02, -3.534e-02, 1.617e-02, 8.861e-02, 3.522e-03, -1.028e-02, 1.929e-01, 1.675e-01, -5.096e-02, -2.341e-02));
	r += mul(s1_7, M4(-2.272e-01, -1.734e-01, -6.834e-02, -7.426e-02, -3.546e-05, -3.472e-01, -4.432e-02, -6.377e-02, 9.254e-02, 1.005e-01, 1.537e-02, -7.439e-02, 3.677e-01, 8.003e-01, 8.519e-02, -6.751e-02));
	r += mul(s1_8, M4(-6.611e-02, -5.674e-02, -1.488e-03, -9.575e-03, -1.607e-01, -1.255e-01, 1.853e-02, 2.800e-01, 3.198e-03, 7.019e-02, -3.285e-03, 3.126e-02, -6.864e-02, -9.623e-02, 1.204e-01, -7.447e-02));
	r += V4(-1.418e-03, 3.590e-03, 1.795e-03, 8.180e-03);
	return r;
}
void Pass8(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 9
//!DESC CuNNy-8x4C-CHROMA-NVL-conv7
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-5.631e-03, 5.414e-02, 8.560e-03, -2.987e-02, -6.409e-02, 1.101e-01, 2.460e-02, -2.029e-02, 9.452e-03, -7.731e-03, -1.885e-02, 6.185e-03, -1.028e-01, -6.721e-02, -7.301e-02, 2.642e-02));
	r += mul(s0_1, M4(-1.569e-01, 2.412e-02, 4.798e-02, 2.560e-03, -8.273e-03, -2.348e-01, -2.433e-02, -1.516e-01, 7.838e-02, -7.631e-02, -6.483e-03, -4.831e-02, -1.119e-01, -3.633e-01, -1.020e-02, -3.881e-02));
	r += mul(s0_2, M4(-2.718e-02, 1.018e-01, 5.737e-02, 2.287e-02, 1.950e-01, -1.656e-01, -1.792e-01, 3.081e-02, 7.370e-02, -1.638e-03, -1.867e-02, -1.953e-02, -3.749e-02, 2.488e-02, 6.418e-02, -5.058e-02));
	r += mul(s0_3, M4(1.235e-01, -3.966e-02, -2.841e-02, -9.559e-02, 7.834e-02, -7.392e-02, -6.894e-03, -5.333e-03, -1.467e-02, -2.930e-02, 1.747e-02, 5.252e-03, -3.721e-01, -5.185e-02, -2.016e-02, 2.511e-01));
	r += mul(s0_4, M4(6.701e-01, -3.819e-01, -1.078e-02, -4.710e-01, -8.243e-01, -2.322e-01, -3.058e-01, 7.483e-01, -3.517e-01, 2.667e-01, 1.228e-01, 1.184e-01, -5.644e-01, 2.180e-01, 9.210e-01, -6.270e-01));
	r += mul(s0_5, M4(-3.852e-02, 4.580e-01, 4.434e-01, -2.143e-01, -1.694e-01, -4.620e-01, -9.123e-02, 6.228e-02, -1.367e-01, 1.119e-02, 3.558e-02, -1.412e-02, -2.045e-02, 1.231e-03, 3.333e-02, -8.220e-02));
	r += mul(s0_6, M4(-1.210e-01, 1.252e-01, -7.319e-02, 1.084e-02, 2.928e-03, 4.221e-02, -1.039e-01, 6.215e-02, 4.975e-02, -1.701e-02, 4.344e-02, -4.689e-02, 2.289e-03, -3.861e-02, 1.099e-01, 1.883e-02));
	r += mul(s0_7, M4(-2.243e-02, 4.756e-01, -3.388e-01, -3.739e-01, 9.092e-02, -4.060e-02, -4.772e-02, 4.638e-01, 3.846e-02, 2.521e-02, 9.018e-03, -3.076e-01, -1.539e-01, -1.196e-01, -3.622e-02, -8.693e-02));
	r += mul(s0_8, M4(2.498e-02, 1.919e-01, -1.985e-01, 1.216e-01, -5.744e-03, -3.162e-02, 2.080e-02, 1.988e-01, 7.349e-03, 8.645e-02, 4.650e-02, -2.534e-02, 4.359e-02, -7.637e-02, -6.629e-02, 5.671e-02));
	r += mul(s1_0, M4(-6.079e-03, 1.689e-02, 7.007e-03, -6.822e-03, 3.361e-02, -6.491e-02, -8.313e-03, -4.466e-02, 6.016e-02, 2.934e-02, -3.527e-02, 1.364e-02, -5.694e-02, 8.824e-02, -2.987e-02, 1.233e-01));
	r += mul(s1_1, M4(2.152e-02, -9.405e-02, 2.909e-02, -1.041e-01, 6.822e-02, -1.323e-01, -9.200e-02, 7.927e-02, 7.579e-02, -5.564e-02, -1.932e-02, -4.218e-02, -6.575e-02, -7.576e-02, 1.057e-01, -1.012e-01));
	r += mul(s1_2, M4(4.907e-02, 5.347e-02, -1.727e-02, 2.904e-02, -3.468e-02, 1.367e-01, 1.270e-01, -8.407e-02, 9.354e-02, -7.397e-02, -9.351e-02, 5.181e-02, 4.739e-02, 7.861e-02, -1.464e-02, 5.130e-02));
	r += mul(s1_3, M4(4.572e-02, 4.136e-02, -1.182e-02, -8.475e-03, 1.405e-02, -5.686e-03, 6.740e-03, -4.463e-02, -5.772e-02, 5.937e-02, -2.913e-02, 7.510e-02, 1.600e-01, -1.087e-01, -4.327e-02, -4.099e-02));
	r += mul(s1_4, M4(9.742e-02, -2.242e-02, 5.289e-02, -8.488e-02, -8.234e-02, -5.912e-02, -1.224e-01, 9.087e-02, -2.209e-01, 3.939e-01, -2.627e-01, 5.292e-01, -5.899e-02, 5.020e-01, 3.178e-01, -1.554e-01));
	r += mul(s1_5, M4(-5.535e-03, 1.150e-01, 6.901e-02, 1.102e-02, 5.393e-03, -1.094e-01, -8.300e-02, -3.577e-02, -7.279e-02, -2.222e-01, -7.915e-02, 9.332e-02, 2.790e-02, 9.354e-03, 6.736e-03, 3.331e-02));
	r += mul(s1_6, M4(-1.126e-02, 3.684e-02, -3.049e-02, 2.742e-02, 2.955e-02, -2.546e-02, -1.571e-02, -9.798e-03, -1.500e-04, 2.356e-02, 7.347e-02, -1.448e-02, 1.287e-02, -4.996e-02, 2.971e-02, 1.043e-01));
	r += mul(s1_7, M4(-5.335e-02, 1.054e-01, -8.804e-02, -7.837e-02, 1.782e-02, -4.701e-02, 2.374e-03, 1.228e-02, -1.899e-02, 1.840e-01, -9.903e-02, -6.178e-01, 3.021e-02, -1.575e-02, -3.003e-03, -8.354e-02));
	r += mul(s1_8, M4(7.841e-03, 2.546e-02, -7.249e-02, 1.336e-02, 2.649e-02, -1.877e-02, 3.505e-02, 3.382e-02, 4.689e-03, 9.148e-02, 6.317e-02, 4.950e-03, 3.297e-02, 2.463e-02, -3.806e-02, 6.332e-02));
	r += V4(2.718e-03, 5.863e-03, 3.771e-04, -2.030e-03);
	return r;
}
void Pass9(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 10
//!DESC CuNNy-8x4C-CHROMA-NVL-conv8
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(3.634e-02, 3.190e-02, -4.567e-02, -2.229e-02, 3.445e-02, 3.648e-02, 2.924e-02, -2.348e-02, -5.830e-02, -1.673e-04, -5.118e-02, -6.227e-03, -4.828e-02, 7.056e-02, -2.763e-02, -8.777e-02));
	r += mul(s0_1, M4(-8.862e-02, -8.768e-02, 1.083e-01, 9.191e-02, 8.130e-02, 1.174e-01, -3.436e-02, -8.364e-02, -2.804e-01, -2.967e-02, 2.249e-01, 1.947e-02, -1.411e-01, -2.112e-01, -3.642e-01, 1.423e-01));
	r += mul(s0_2, M4(4.868e-02, 1.486e-01, 8.722e-03, -7.794e-02, 1.060e-02, -5.518e-02, 5.462e-03, 2.070e-02, -6.423e-02, 2.193e-01, -8.376e-02, -3.166e-02, -7.339e-02, 6.204e-02, -8.270e-02, -3.861e-02));
	r += mul(s0_3, M4(-2.957e-01, 1.096e-01, 2.147e-02, -1.768e-01, -7.382e-02, -3.022e-02, -2.583e-02, -1.630e-02, -1.067e-01, 2.080e-02, 2.479e-02, -1.130e-01, -9.163e-02, 3.948e-02, -6.922e-03, -6.003e-02));
	r += mul(s0_4, M4(-5.227e-02, -3.725e-01, -1.335e+00, 7.676e-01, -4.424e-01, 3.506e-01, 2.510e-01, -2.728e-01, 2.644e-01, 1.504e-01, -2.705e-03, 5.585e-01, 6.388e-01, 7.439e-02, 4.475e-02, 3.291e-01));
	r += mul(s0_5, M4(1.417e-01, -1.835e-01, -6.442e-02, -2.705e-01, -1.295e-01, -4.455e-02, -1.104e-01, 1.948e-01, 7.807e-02, 3.937e-02, -6.670e-03, -2.619e-01, -1.008e-01, -4.285e-02, 1.112e-02, -1.955e-03));
	r += mul(s0_6, M4(4.964e-02, 1.731e-02, 7.468e-02, -1.625e-02, 3.226e-03, -2.031e-02, -1.130e-02, -5.236e-03, 2.242e-02, -1.722e-02, -7.819e-04, 2.702e-02, -7.512e-02, -2.848e-02, -1.340e-02, 5.302e-02));
	r += mul(s0_7, M4(-1.160e-01, 9.667e-02, -2.083e-02, 2.395e-01, 1.587e-01, 3.845e-02, 2.735e-02, -1.811e-01, 6.622e-02, -2.345e-02, 4.822e-02, 1.841e-01, -5.156e-02, -3.632e-03, 4.936e-03, 1.628e-02));
	r += mul(s0_8, M4(-8.227e-02, -2.812e-02, -2.160e-02, 1.499e-01, 1.411e-02, -2.448e-02, 7.501e-04, 9.621e-03, 3.688e-02, 1.748e-02, 1.528e-03, -7.402e-02, 1.528e-02, 2.498e-02, -7.420e-03, 5.165e-02));
	r += mul(s1_0, M4(3.795e-02, 8.475e-02, -6.198e-03, -8.965e-02, 6.037e-02, 5.058e-02, -1.785e-02, -3.381e-02, -2.659e-02, -2.023e-02, 6.549e-02, -1.346e-02, 3.329e-02, 6.231e-02, -6.240e-02, -6.961e-02));
	r += mul(s1_1, M4(-9.772e-02, -7.418e-02, 2.118e-02, 6.366e-02, 9.108e-02, -2.579e-02, -1.251e-02, -1.836e-02, -2.176e-01, -5.620e-02, 2.194e-01, 2.205e-02, -1.646e-01, -8.824e-02, 2.104e-01, 4.003e-02));
	r += mul(s1_2, M4(-2.267e-03, 1.098e-01, 2.885e-02, -6.889e-02, 1.171e-02, -9.692e-02, -5.268e-03, 3.518e-02, -6.430e-02, 2.340e-01, -3.386e-02, -8.084e-02, -7.461e-02, 3.019e-01, -4.258e-02, -8.039e-02));
	r += mul(s1_3, M4(-1.990e-01, 6.762e-02, -7.975e-03, -1.222e-01, -3.053e-01, 7.980e-02, 1.491e-02, -1.492e-01, 2.979e-01, 1.803e-01, 1.266e-01, -2.491e-01, -2.499e-01, 9.185e-02, 2.818e-03, -1.043e-01));
	r += mul(s1_4, M4(-3.294e-01, -1.363e-01, 5.578e-02, 5.059e-01, -3.895e-01, 9.901e-01, 1.724e-01, -6.817e-01, 4.691e-01, 3.049e-01, 2.280e-01, 5.373e-01, 4.487e-01, -1.076e-01, 1.106e-01, 5.293e-01));
	r += mul(s1_5, M4(1.033e-01, 8.366e-02, -2.243e-02, -2.259e-01, -1.477e-01, 3.225e-02, -9.526e-02, 1.424e-01, 1.555e-01, 1.291e-01, 3.726e-02, -2.913e-01, -9.007e-02, -7.140e-03, -7.456e-02, -1.443e-01));
	r += mul(s1_6, M4(-4.505e-02, 4.418e-02, 4.041e-02, -9.252e-02, 1.122e-02, -9.887e-04, 5.934e-03, -6.017e-03, -4.219e-02, 6.275e-03, -1.069e-02, 1.927e-02, -4.408e-02, -3.133e-02, -8.795e-03, 1.826e-02));
	r += mul(s1_7, M4(2.456e-01, 2.403e-02, 1.188e-02, -6.159e-03, 1.107e-01, 8.904e-02, 5.530e-02, -3.584e-01, 2.010e-02, -2.069e-03, 4.795e-02, 7.007e-02, -1.164e-01, -2.154e-02, 2.797e-02, -9.350e-02));
	r += mul(s1_8, M4(2.212e-02, -6.075e-03, -8.837e-03, -7.587e-02, 4.782e-03, -2.212e-02, -3.741e-03, 1.481e-02, 1.447e-02, 3.082e-02, -3.520e-03, -5.865e-02, -1.027e-02, 1.745e-02, -2.000e-02, 4.552e-02));
	r += V4(3.858e-03, -8.942e-03, -3.435e-03, 3.645e-03);
	return r;
}
void Pass10(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 11
//!DESC CuNNy-8x4C-CHROMA-NVL-out
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-1.315e-01, -6.749e-03, 1.952e-02, -3.625e-02, 3.756e-01, 4.046e-03, 1.014e-01, -1.732e-01, 5.977e-02, -1.351e-01, 2.524e-01, -1.432e-01, 9.838e-02, 1.300e-02, 3.035e-01, -3.245e-02));
	r += mul(s0_1, M4(2.413e-02, -1.754e-01, 6.421e-02, 1.235e-01, 2.295e-02, 1.480e-01, 6.257e-03, 3.488e-01, -5.088e-02, -5.533e-02, -4.169e-02, 3.144e-02, 1.931e-01, 5.098e-01, -3.496e-02, 5.802e-01));
	r += mul(s0_2, M4(1.860e-02, 9.254e-02, -2.874e-03, -5.050e-03, 7.531e-03, 2.821e-03, -3.187e-03, -1.517e-02, -1.249e-02, -8.488e-02, -7.666e-03, -4.945e-02, 9.000e-03, -6.171e-02, 4.346e-03, -3.639e-02));
	r += mul(s0_3, M4(-6.517e-02, -2.121e-02, 6.982e-02, -1.192e-02, -1.360e+00, 1.951e-01, -6.369e-01, 4.456e-01, 1.702e+00, -1.121e+00, 1.178e-01, 4.304e-03, -7.397e-02, -5.136e-02, -1.655e-01, -3.005e-02));
	r += mul(s0_4, M4(-6.013e-03, 5.564e-02, -5.138e-01, -1.293e-01, -9.195e-02, 5.228e-01, -3.737e-03, 3.395e-01, 5.891e-02, 2.803e-01, -1.389e-01, -1.993e-01, -6.233e-02, -1.428e-01, 1.801e-01, -5.259e-02));
	r += mul(s0_5, M4(-2.034e-02, -6.545e-02, 1.384e-01, -6.366e-02, 1.024e-02, -6.768e-02, 2.895e-02, -3.989e-02, 6.992e-02, 2.079e-01, -4.071e-02, -4.247e-02, -3.759e-02, -6.012e-03, -1.215e-02, -4.851e-02));
	r += mul(s0_6, M4(9.706e-03, 9.549e-03, -9.627e-03, 2.697e-03, 8.131e-02, 6.863e-02, -2.730e-01, 1.025e-01, 3.760e-01, -1.255e-01, 1.518e+00, -1.421e+00, -8.682e-03, 1.095e-02, -2.616e-02, -8.870e-03));
	r += mul(s0_7, M4(-3.550e-03, 1.767e-02, -3.826e-02, -2.815e-03, 2.583e-02, -7.415e-02, -5.137e-02, 3.631e-02, -1.538e-01, -3.102e-02, -3.494e-02, 4.475e-02, 1.130e-02, -3.809e-03, -4.580e-03, 6.522e-03));
	r += mul(s0_8, M4(-1.450e-03, -2.414e-03, 4.666e-02, 1.888e-03, -3.180e-02, 8.323e-04, 3.747e-02, 1.961e-02, 2.069e-02, 8.806e-04, -3.024e-02, 1.632e-02, -1.052e-03, 8.320e-03, -4.770e-03, -6.222e-03));
	r += mul(s1_0, M4(-1.123e-01, -9.402e-03, 1.249e-01, -6.879e-02, 1.139e-01, 2.780e-03, 2.097e-01, 5.923e-03, -3.466e-02, 4.786e-03, 3.675e-02, -1.015e-02, 4.987e-01, -2.529e-01, 1.111e-01, -2.709e-01));
	r += mul(s1_1, M4(-5.566e-01, -5.918e-01, 3.663e-01, 5.136e-01, 7.758e-02, 2.980e-01, -2.654e-02, 3.426e-01, -6.094e-02, -3.924e-02, -3.318e-02, 7.850e-02, -9.446e-02, 6.660e-01, -1.530e-01, 9.071e-01));
	r += mul(s1_2, M4(1.056e-01, 1.603e-02, -4.490e-02, -3.289e-02, 5.208e-03, -3.213e-02, 1.954e-02, -3.576e-02, -3.908e-03, -7.251e-02, -1.308e-02, -9.307e-02, 3.064e-02, -2.715e-02, 3.597e-02, -7.712e-02));
	r += mul(s1_3, M4(-4.112e-03, -1.776e-02, -1.424e-02, 1.238e-02, -4.409e-01, -7.105e-02, -1.442e-01, -1.116e-01, 3.271e-01, -1.600e-02, -1.929e-01, 4.407e-02, -2.603e-01, -4.389e-02, 2.123e-02, -7.366e-02));
	r += mul(s1_4, M4(1.416e-02, 4.470e-02, -2.441e-01, -1.345e-01, 7.344e-02, -1.569e-01, 1.281e-01, 3.457e-01, 2.529e-01, 5.325e-01, 8.465e-03, -4.280e-01, -5.212e-02, -7.739e-02, 7.105e-02, -1.758e-01));
	r += mul(s1_5, M4(-1.976e-02, -5.816e-02, 1.233e-01, -1.813e-02, -2.352e-02, -2.522e-02, -9.069e-04, -4.822e-02, 2.679e-02, 7.049e-02, -7.915e-02, 5.392e-02, 4.479e-03, -2.456e-03, 1.439e-02, -3.851e-02));
	r += mul(s1_6, M4(-4.133e-03, 9.173e-03, 6.282e-03, -5.659e-03, -1.121e-02, 2.509e-02, -1.003e-01, 9.966e-03, -6.087e-02, -2.633e-02, 2.420e-02, -3.473e-02, 3.558e-03, 2.619e-02, 1.189e-02, -4.741e-02));
	r += mul(s1_7, M4(1.175e-02, 1.711e-02, -5.651e-02, 8.736e-03, 2.248e-02, -2.604e-02, 9.141e-02, -6.354e-02, -2.505e-02, -7.866e-02, 3.432e-02, 8.879e-02, 1.715e-02, -1.477e-02, -8.406e-03, -1.077e-02));
	r += mul(s1_8, M4(3.492e-03, -1.398e-03, -3.562e-03, -1.430e-02, -1.562e-02, 1.536e-02, -1.093e-02, -1.485e-02, -9.253e-03, -8.831e-03, 1.823e-02, 7.941e-03, -2.362e-02, 5.810e-03, 4.770e-03, 8.439e-03));
	r += V4(1.612e-03, 2.022e-03, 1.969e-03, 2.366e-03);
	return tanh(r);
}
void Pass11(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 12
//!DESC CuNNy-8x4C-CHROMA-NVL-shuffle
//!STYLE PS
//!IN t1, INPUT, easu
float4 Pass12(float2 pos) {
	float2 pt = float2(GetInputPt());
	static const float3x3 rgb2yuv = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081};
	static const float3x3 yuv2rgb = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float4 r = 0.0;
	float2 size = float2(GetInputSize());
	float2 f = frac(pos * size);
	float3 yuv = mul(rgb2yuv, INPUT.SampleLevel(SL, pos, 0).rgb);
	int2 i = int2(f * 2.0);
	r.r = t1.SampleLevel(SP, (float2(0.5, 0.5) - f) * pt + pos, 0)[2*i.y + i.x];
	r.r += easu.SampleLevel(SP, pos, 0).r;
	r.a = 1.0;
	r.r = clamp(r, 0.0, 1.0);
	float3 px = mul(yuv2rgb, float3(r.r, yuv.yz));
	return float4(px, 1.0);
}
