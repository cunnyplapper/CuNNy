// CuNNy 8x4C EASU NVL
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

//!MAGPIE EFFECT
//!VERSION 3
//!OUTPUT_WIDTH INPUT_WIDTH * 2
//!OUTPUT_HEIGHT INPUT_HEIGHT * 2

//!TEXTURE
Texture2D INPUT;

//!TEXTURE
//!WIDTH INPUT_WIDTH * 2
//!HEIGHT INPUT_HEIGHT * 2
//!FORMAT R8_UNORM
Texture2D easu;

//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t1;

// FSR mpv | modified
// Copyright (c) 2021 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// FidelityFX FSR v1.0.2 by AMD
// ported to mpv by agyild

//!PASS 1
//!DESC CuNNy-EASU
//!STYLE PS
//!IN INPUT
//!OUT easu

float GetLuma(float3 rgb) {
	return dot(float3(0.299, 0.587, 0.114), rgb);
}

float APrxLoRcpF1(float a) {
	return asfloat(uint(0x7ef07ebb) - asuint(a));
}

float APrxLoRsqF1(float a) {
	return asfloat(uint(0x5f347d74) - (asuint(a) >> uint(1)));
}

float AMin3F1(float x, float y, float z) {

	return min(x, min(y, z));
}

float AMax3F1(float x, float y, float z) {
	return max(x, max(y, z));
}

void tap(inout float aC, inout float aW, float2 off, float2 dir, float2 len,
         float lob, float clp, float c){
	float2 v;
	v.x = (off.x * ( dir.x)) + (off.y * dir.y);
	v.y = (off.x * (-dir.y)) + (off.y * dir.x);
	v *= len;
	float d2 = v.x * v.x + v.y * v.y;
	d2 = min(d2, clp);
	float wB = float(2.0 / 5.0) * d2 + -1.0;

	float wA = lob * d2 + -1.0;
	wB *= wB;
	wA *= wA;
	wB = float(25.0 / 16.0) * wB + float(-(25.0 / 16.0 - 1.0));
	float w = wB * wA;
	aC += c * w;
	aW += w;
}

void set(inout float2 dir, inout float len, float2 pp, bool biS, bool biT,
         bool biU, bool biV, float lA, float lB, float lC, float lD, float lE){

	float w = 0.0;
	if (biS)
		w = (1.0 - pp.x) * (1.0 - pp.y);
	if (biT)
		w =        pp.x  * (1.0 - pp.y);
	if (biU)
		w = (1.0 - pp.x) *        pp.y;

	if (biV)
		w =        pp.x  *        pp.y;
	float dc = lD - lC;
	float cb = lC - lB;
	float lenX = max(abs(dc), abs(cb));
	lenX = APrxLoRcpF1(lenX);
	float dirX = lD - lB;
	lenX = clamp(abs(dirX) * lenX, 0.0, 1.0);
	lenX *= lenX;
	float ec = lE - lC;

	float ca = lC - lA;
	float lenY = max(abs(ec), abs(ca));
	lenY = APrxLoRcpF1(lenY);
	float dirY = lE - lA;
	lenY = clamp(abs(dirY) * lenY, 0.0, 1.0);
	lenY *= lenY;
	dir += float2(dirX, dirY) * w;
	len += dot(float2(w, w), float2(lenX, lenY));
}

float4 Pass1(float2 pos) {
	float2 pt = float2(GetInputPt());
	float2 size = float2(GetInputSize());
	float4 pix = float4(0.0, 0.0, 0.0, 1.0);
	float2 pp = pos * size - float2(0.5, 0.5);
	float2 fp = floor(pp);
	pp -= fp;
	float b = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2(0.5, -0.5)) * pt), 0).rgb);
	float c = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2(1.5, -0.5)) * pt), 0).rgb);
	float e = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2(-0.5, 0.5)) * pt), 0).rgb);
	float f = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2( 0.5, 0.5)) * pt), 0).rgb);
	float g = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2( 1.5, 0.5)) * pt), 0).rgb);
	float h = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2( 2.5, 0.5)) * pt), 0).rgb);
	float i = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2(-0.5, 1.5)) * pt), 0).rgb);
	float j = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2( 0.5, 1.5)) * pt), 0).rgb);
	float k = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2( 1.5, 1.5)) * pt), 0).rgb);
	float l = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2( 2.5, 1.5)) * pt), 0).rgb);
	float n = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2(0.5, 2.5) ) * pt), 0).rgb);
	float o = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2(1.5, 2.5) ) * pt), 0).rgb);
	float4 bczzL = float4(b, c, 0.0, 0.0);
	float4 ijfeL = float4(i, j, f, e);
	float4 klhgL = float4(k, l, h, g);
	float4 zzonL = float4(0.0, 0.0, o, n);
	float bL = bczzL.x;
	float cL = bczzL.y;
	float iL = ijfeL.x;
	float jL = ijfeL.y;
	float fL = ijfeL.z;
	float eL = ijfeL.w;
	float kL = klhgL.x;
	float lL = klhgL.y;
	float hL = klhgL.z;
	float gL = klhgL.w;
	float oL = zzonL.z;
	float nL = zzonL.w;
	float2 dir = float2(0.0, 0.0);
	float len = 0.0;
	set(dir, len, pp, true, false, false, false, bL, eL, fL, gL, jL);
	set(dir, len, pp, false, true, false, false, cL, fL, gL, hL, kL);
	set(dir, len, pp, false, false, true, false, fL, iL, jL, kL, nL);
	set(dir, len, pp, false, false, false, true, gL, jL, kL, lL, oL);
	float2 dir2 = dir * dir;
	float dirR = dir2.x + dir2.y;
	bool zro = dirR < float(1.0 / 32768.0);
	dirR = APrxLoRsqF1(dirR);
	dirR = zro ? 1.0 : dirR;
	dir.x = zro ? 1.0 : dir.x;
	dir *= float2(dirR, dirR);
	len = len * 0.5;
	len *= len;
	float stretch = (dir.x * dir.x + dir.y * dir.y) * APrxLoRcpF1(max(abs(dir.x), abs(dir.y)));
	float2 len2 = float2(1.0 + (stretch - 1.0) * len, 1.0 + -0.5 * len);
	float lob = 0.5 + float((1.0 / 4.0 - 0.04) - 0.5) * len;
	float clp = APrxLoRcpF1(lob);
	float aC = 0.0;
	float aW = 0.0;
	tap(aC, aW, float2( 0.0,-1.0) - pp, dir, len2, lob, clp, bL);
	tap(aC, aW, float2( 1.0,-1.0) - pp, dir, len2, lob, clp, cL);
	tap(aC, aW, float2(-1.0, 1.0) - pp, dir, len2, lob, clp, iL);
	tap(aC, aW, float2( 0.0, 1.0) - pp, dir, len2, lob, clp, jL);
	tap(aC, aW, float2( 0.0, 0.0) - pp, dir, len2, lob, clp, fL);
	tap(aC, aW, float2(-1.0, 0.0) - pp, dir, len2, lob, clp, eL);
	tap(aC, aW, float2( 1.0, 1.0) - pp, dir, len2, lob, clp, kL);
	tap(aC, aW, float2( 2.0, 1.0) - pp, dir, len2, lob, clp, lL);
	tap(aC, aW, float2( 2.0, 0.0) - pp, dir, len2, lob, clp, hL);
	tap(aC, aW, float2( 1.0, 0.0) - pp, dir, len2, lob, clp, gL);
	tap(aC, aW, float2( 1.0, 2.0) - pp, dir, len2, lob, clp, oL);
	tap(aC, aW, float2( 0.0, 2.0) - pp, dir, len2, lob, clp, nL);
	pix.r = aC / aW;
	float min1 = min(AMin3F1(fL, gL, jL), kL);
	float max1 = max(AMax3F1(fL, gL, jL), kL);
	pix.r = clamp(pix.r, min1, max1);
	pix.r = clamp(pix.r, 0.0, 1.0);
	return pix;
}

//!PASS 2
//!DESC CuNNy-8x4C-EASU-NVL-in
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) (dot(float3(-2.607e-01, -5.015e-01, -1.199e-01), O(INPUT, float2(x, y)).rgb) + 5.215e-01)
float4 f0(float2 pt, float2 pos, min16float s0_0, min16float s0_1, min16float s0_2, min16float s0_3, min16float s0_4, min16float s0_5, min16float s0_6, min16float s0_7, min16float s0_8) {
	V4 r = 0.0;
	r += V4(1.736e-02, -3.808e-01, 2.439e-01, 6.895e-01) * s0_0;
	r += V4(1.172e-03, 2.236e-01, -6.348e-01, 9.002e-03) * s0_1;
	r += V4(-6.582e-01, 2.435e-02, 4.775e-02, -1.880e-02) * s0_2;
	r += V4(4.305e-03, 1.815e-01, -3.333e-02, 5.219e-02) * s0_3;
	r += V4(6.883e-01, 3.981e-01, 1.602e-01, -7.454e-01) * s0_4;
	r += V4(-5.318e-02, -1.166e-02, 1.430e-01, 1.806e-02) * s0_5;
	r += V4(-3.991e-02, 2.913e-02, 2.003e-02, -5.968e-03) * s0_6;
	r += V4(8.382e-03, 3.988e-02, -5.179e-02, -2.489e-05) * s0_7;
	r += V4(3.160e-02, -4.990e-01, -1.867e-02, -8.068e-04) * s0_8;
	r += V4(-4.927e-04, 1.332e-03, 5.960e-02, -3.196e-04);
	return r;
}
void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float s0_0 = l0(-1.0, -1.0);
	min16float s0_1 = l0(0.0, -1.0);
	min16float s0_2 = l0(1.0, -1.0);
	min16float s0_3 = l0(-1.0, 0.0);
	min16float s0_4 = l0(0.0, 0.0);
	min16float s0_5 = l0(1.0, 0.0);
	min16float s0_6 = l0(-1.0, 1.0);
	min16float s0_7 = l0(0.0, 1.0);
	min16float s0_8 = l0(1.0, 1.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8);
}
//!PASS 3
//!DESC CuNNy-8x4C-EASU-NVL-conv1
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-1.172e-01, -1.281e-02, 2.202e-01, -2.553e-01, -1.294e-01, -3.976e-01, -3.256e-01, -6.064e-02, -1.896e-01, 1.967e-03, 9.783e-02, -3.172e-01, 9.147e-02, -1.462e-01, -1.503e-01, 1.974e-01));
	r += mul(s0_1, M4(-2.388e-01, -8.027e-02, 3.299e-01, 5.619e-02, 5.655e-01, 1.448e-01, -5.906e-01, 2.428e-02, 8.319e-02, 3.880e-02, 2.100e-01, 3.222e-01, 8.180e-02, 1.587e-01, -1.765e-01, -6.309e-01));
	r += mul(s0_2, M4(6.987e-02, -3.333e-02, -1.119e-01, 1.175e-02, 3.231e-04, -1.491e-01, -2.124e-01, -2.486e-01, 1.412e-01, 7.747e-02, -1.616e-01, -1.240e-02, -5.868e-02, -8.373e-02, 1.474e-01, -1.372e-01));
	r += mul(s0_3, M4(-5.972e-01, -2.243e-01, 3.213e-01, 8.457e-01, 1.430e-01, 5.546e-02, 4.772e-02, -9.470e-02, 1.473e-01, -1.662e-01, 6.274e-02, 4.230e-01, -2.861e-01, 1.079e-01, -5.327e-03, -1.519e-01));
	r += mul(s0_4, M4(-4.173e-01, -2.162e-02, 7.718e-01, -4.171e-01, -1.318e-01, 8.484e-02, -3.198e-02, 1.207e-01, 2.098e-01, 1.574e-01, -1.184e-01, -5.992e-01, -4.628e-01, -6.652e-01, -3.711e-01, -2.308e-01));
	r += mul(s0_5, M4(-6.377e-02, 7.101e-02, 1.167e-01, 4.596e-02, 1.098e-02, -9.546e-02, 3.570e-02, -1.736e-01, -3.521e-01, -2.866e-02, 1.826e-01, 3.683e-01, -8.529e-01, 2.943e-02, 8.831e-01, -1.082e-01));
	r += mul(s0_6, M4(8.591e-02, -1.613e-01, -1.072e-01, 1.184e-01, 1.049e-02, 6.170e-02, 2.513e-02, 7.727e-04, 2.501e-02, 6.110e-02, -2.137e-01, -2.616e-01, -7.669e-02, 1.790e-02, 9.149e-02, 1.206e-01));
	r += mul(s0_7, M4(5.529e-02, -1.899e-01, -1.287e-01, 1.801e-01, 4.793e-03, -1.620e-02, -1.114e-03, -6.291e-02, -9.655e-02, -1.015e-01, 2.725e-02, 1.831e-01, -3.366e-01, 3.134e-01, 6.304e-02, 2.471e-01));
	r += mul(s0_8, M4(-4.022e-02, 7.107e-02, 1.180e-01, 2.116e-01, 2.305e-02, 4.254e-02, -1.804e-02, 3.378e-02, 1.004e-01, -5.344e-02, -1.818e-01, -8.249e-02, -1.091e-01, 2.132e-01, 3.761e-01, 3.571e-02));
	r += mul(s1_0, M4(1.465e-01, 8.114e-02, 6.591e-02, -2.322e-01, -5.260e-02, -3.252e-01, -1.233e-01, 3.522e-01, -2.210e-01, 1.030e-02, 1.595e-01, -3.338e-01, 3.506e-02, -1.787e-01, -8.587e-02, 2.166e-01));
	r += mul(s1_1, M4(-1.082e-01, -1.188e-01, 1.576e-01, -1.179e-01, 3.125e-01, 7.870e-03, -1.772e-01, 2.317e-01, 1.121e-01, 3.044e-02, 9.807e-02, 2.441e-01, 1.138e-02, 1.337e-01, -1.009e-01, -4.654e-01));
	r += mul(s1_2, M4(5.704e-02, 6.009e-03, -5.474e-02, -6.330e-03, -1.160e-01, -2.171e-01, 5.809e-02, -1.057e-01, 5.416e-02, 3.859e-02, -7.983e-02, -7.744e-02, -1.753e-01, -1.435e-02, 3.957e-01, -5.421e-02));
	r += mul(s1_3, M4(1.180e-02, -6.713e-02, -6.018e-01, -5.146e-01, -1.184e-01, 1.648e-02, 1.407e-01, 2.877e-01, 2.588e-01, -2.299e-01, -1.671e-01, 4.241e-01, -8.375e-02, 1.743e-01, -3.628e-02, -2.446e-01));
	r += mul(s1_4, M4(2.898e-01, 6.108e-01, -2.327e-01, -4.245e-01, 8.766e-02, 2.666e-01, 2.167e-01, -4.478e-02, 4.206e-02, 3.165e-02, 4.350e-02, -2.838e-01, 2.835e-01, -1.213e-01, -1.631e-01, 6.990e-01));
	r += mul(s1_5, M4(-9.295e-02, 4.182e-02, 3.423e-02, -1.090e-02, 6.180e-02, 6.106e-02, -5.836e-02, -1.655e-02, -2.224e-01, -1.242e-01, 4.199e-02, 2.584e-01, -8.239e-02, 3.389e-01, 8.408e-02, 8.916e-02));
	r += mul(s1_6, M4(-7.513e-02, -2.481e-01, -3.385e-01, 1.437e-01, -1.079e-02, -6.205e-02, 4.682e-02, -1.238e-04, -2.592e-01, -1.311e-01, -2.111e-01, -3.701e-02, 1.196e-01, 2.326e-02, 1.782e-01, 5.563e-02));
	r += mul(s1_7, M4(-5.109e-02, -3.017e-01, -1.152e-01, 1.405e-01, 7.456e-02, -2.570e-02, 7.978e-02, -4.760e-02, -1.987e-01, -4.736e-01, 5.673e-01, -4.217e-01, -1.608e-01, 1.052e-01, -4.457e-02, 3.854e-02));
	r += mul(s1_8, M4(6.105e-04, 9.663e-02, 6.081e-02, 1.633e-01, -6.154e-02, -3.409e-02, 3.647e-02, 4.401e-02, -1.979e-01, -1.668e-01, 8.293e-02, -9.180e-02, -2.024e-01, 2.721e-01, -2.767e-01, 2.574e-01));
	r += V4(1.224e-02, 5.892e-03, 6.015e-03, 1.044e-03);
	return r;
}
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 4
//!DESC CuNNy-8x4C-EASU-NVL-conv2
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-1.758e-01, 1.374e-01, -6.221e-02, 1.839e-02, 2.420e-01, -7.598e-02, 9.951e-02, -2.618e-01, 2.079e-02, 4.492e-02, -1.417e-01, 8.844e-02, -5.043e-03, -6.805e-02, 9.265e-02, -1.492e-01));
	r += mul(s0_1, M4(-2.636e-01, 5.921e-01, 2.192e-01, 1.694e-01, 5.762e-01, -1.703e-01, -8.760e-01, 7.148e-02, -2.036e-01, 1.708e-01, 4.373e-02, 2.260e-01, 5.749e-02, 2.154e-01, -4.843e-02, -1.676e-01));
	r += mul(s0_2, M4(-8.068e-02, 2.855e-01, 1.090e-01, -6.062e-03, -3.638e-02, -2.182e-01, -4.335e-02, -1.149e-01, -4.330e-02, 3.590e-02, 6.255e-02, -6.208e-03, 1.062e-01, -1.614e-01, -1.772e-01, -2.129e-01));
	r += mul(s0_3, M4(1.851e-01, -1.503e-01, -1.126e-01, -8.025e-02, 9.398e-02, 1.725e-01, -6.078e-02, -3.326e-02, -1.253e-01, 6.649e-02, 9.875e-02, 2.291e-02, 5.640e-02, -3.480e-02, -7.285e-02, -1.996e-01));
	r += mul(s0_4, M4(2.087e-01, 1.302e-01, 3.596e-02, -6.545e-02, 3.857e-01, -9.630e-02, 3.699e-01, 7.879e-02, -1.885e-01, -4.018e-01, -2.151e-01, 1.456e-01, 2.123e-01, 7.123e-02, -1.851e-01, -4.747e-01));
	r += mul(s0_5, M4(1.133e-01, -8.411e-01, 2.081e-01, -1.236e-01, 7.892e-02, 2.279e-01, -1.890e-01, -1.643e-01, -2.889e-02, -5.646e-01, 8.583e-02, -1.446e-01, -3.094e-01, -3.082e-01, -9.839e-02, -2.175e-01));
	r += mul(s0_6, M4(8.411e-02, 8.064e-02, 4.211e-02, -1.601e-01, -1.370e-04, 4.289e-02, -3.839e-02, 4.239e-02, 1.292e-02, -1.365e-01, -2.160e-02, -7.347e-02, -2.462e-02, 9.830e-02, 1.939e-02, -7.252e-02));
	r += mul(s0_7, M4(2.904e-01, 8.953e-02, 8.354e-02, -2.631e-01, 1.191e-01, 2.968e-02, 4.662e-02, -2.802e-02, -1.464e-02, 4.262e-03, 6.706e-02, 7.351e-02, -2.075e-01, 9.585e-02, -9.711e-02, -2.316e-01));
	r += mul(s0_8, M4(1.328e-01, 1.036e-01, -7.055e-02, -3.229e-01, 1.629e-02, 1.187e-01, 2.239e-02, -6.685e-02, -1.788e-02, -1.265e-01, -6.710e-02, -2.075e-01, -1.574e-01, -1.866e-01, -9.393e-02, -8.252e-02));
	r += mul(s1_0, M4(-1.355e-01, 1.341e-01, -1.420e-01, 1.646e-01, 1.353e-01, -1.129e-01, 2.114e-01, -2.106e-01, 1.235e-01, 4.768e-02, -1.207e-01, 1.203e-01, -3.793e-02, -7.242e-02, 1.159e-02, -2.809e-02));
	r += mul(s1_1, M4(-2.557e-01, 5.445e-01, 2.074e-01, 3.360e-01, 4.854e-01, -3.004e-01, -5.733e-01, -3.078e-01, -1.145e-01, 1.068e-01, -1.772e-01, 4.054e-01, 5.253e-02, -1.459e-01, 1.747e-01, -1.781e-01));
	r += mul(s1_2, M4(-2.692e-02, -5.242e-02, 7.935e-02, -1.984e-02, -3.929e-02, 1.407e-01, 5.176e-02, 4.586e-02, 1.498e-01, -2.089e-01, 1.437e-01, 1.235e-01, 1.585e-01, -2.407e-01, 2.058e-02, -8.188e-02));
	r += mul(s1_3, M4(1.968e-01, -3.553e-01, 6.585e-02, -5.447e-02, -2.141e-01, 2.268e-01, -2.778e-01, -9.778e-02, -5.316e-02, -1.365e-01, 1.163e-01, 2.666e-01, 1.479e-01, -1.545e-01, 2.620e-02, -1.398e-01));
	r += mul(s1_4, M4(-3.526e-02, 3.048e-01, 1.687e-02, 1.815e-02, -1.825e-01, -2.021e-01, -3.041e-02, 3.544e-01, -2.632e-01, -4.243e-01, -1.900e-01, 5.998e-01, 4.240e-01, -2.267e-01, -6.066e-02, -3.993e-01));
	r += mul(s1_5, M4(-1.227e-01, -6.739e-01, 7.213e-02, -1.564e-01, 1.180e-01, 4.661e-02, -2.513e-02, -1.067e-01, 2.158e-01, -8.561e-01, 2.886e-01, 1.041e-01, 1.582e-02, -7.544e-01, 2.458e-01, 6.958e-02));
	r += mul(s1_6, M4(-1.029e-03, 1.652e-02, -2.178e-03, 2.250e-02, 5.116e-02, -3.397e-02, 7.056e-03, 2.762e-02, -4.243e-02, 1.195e-01, -9.057e-02, 3.016e-02, 5.359e-02, -1.009e-01, 8.823e-02, 2.940e-02));
	r += mul(s1_7, M4(9.533e-02, -3.070e-01, 1.042e-02, -3.071e-01, 1.704e-01, 1.331e-01, 7.147e-02, -1.043e-01, 1.876e-01, -3.407e-01, 1.710e-01, 4.622e-01, -1.392e-02, 1.665e-01, -3.562e-02, -3.056e-02));
	r += mul(s1_8, M4(-2.897e-02, 3.166e-03, -6.324e-02, -2.464e-01, 7.467e-03, -4.118e-02, -1.008e-02, -2.272e-02, -8.325e-02, -1.495e-02, -2.274e-01, -1.501e-01, 9.740e-02, -3.602e-01, 2.106e-02, 4.412e-02));
	r += V4(-2.436e-04, 4.705e-03, -3.079e-03, 7.003e-03);
	return r;
}
void Pass4(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 5
//!DESC CuNNy-8x4C-EASU-NVL-conv3
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(1.338e-01, -4.880e-02, -1.751e-01, -5.468e-02, 5.313e-02, 6.281e-02, -5.763e-02, -7.046e-02, 3.837e-02, 2.033e-01, -1.899e-01, -1.260e-02, 1.155e-01, 1.556e-01, 4.104e-03, -2.002e-01));
	r += mul(s0_1, M4(-1.312e-02, 2.329e-01, 2.431e-01, -5.861e-02, -2.950e-02, 1.509e-01, 1.508e-01, -2.092e-01, 1.238e-01, 2.194e-01, 2.666e-02, -1.867e-01, 2.595e-01, -2.418e-01, -1.958e-01, -1.488e-01));
	r += mul(s0_2, M4(-1.253e-01, -4.112e-03, 1.263e-01, 1.561e-01, 7.095e-02, 9.004e-03, -4.768e-02, -4.306e-02, 3.628e-03, 4.242e-02, -3.658e-02, 6.603e-02, -1.336e-01, -1.392e-01, 1.495e-01, 1.854e-01));
	r += mul(s0_3, M4(-5.641e-01, 4.270e-01, -1.626e-02, 1.634e-01, 2.851e-02, 4.077e-01, 8.698e-02, -2.549e-01, 1.093e-01, 4.276e-01, 1.155e-01, -1.358e-01, 1.041e-01, -1.317e-01, -7.534e-02, -6.427e-02));
	r += mul(s0_4, M4(-7.512e-03, -2.521e-01, 9.450e-01, 4.819e-01, 5.059e-01, -1.758e-02, 8.238e-02, -6.074e-02, 6.583e-01, -2.212e-01, -1.166e+00, 7.445e-02, -1.730e-01, 2.323e-01, -3.959e-02, 1.091e-01));
	r += mul(s0_5, M4(5.939e-01, -3.265e-02, 3.658e-04, -5.059e-01, 3.662e-02, -6.403e-03, -4.208e-02, -1.656e-01, -3.418e-02, -1.822e-01, -1.044e-01, -9.146e-02, 4.380e-01, 1.001e-01, 2.480e-02, -1.441e-01));
	r += mul(s0_6, M4(-2.571e-01, -5.584e-02, -1.497e-01, 1.422e-01, 1.107e-01, 1.408e-01, 6.910e-02, -2.080e-01, 1.615e-01, 4.511e-02, 8.042e-03, 2.127e-01, 2.047e-02, -3.194e-03, -4.072e-02, 1.813e-02));
	r += mul(s0_7, M4(1.656e-01, -5.174e-02, 3.241e-01, -1.653e-01, 7.504e-02, 1.750e-01, -6.335e-03, -8.032e-02, -3.204e-01, -2.598e-01, -4.326e-01, 4.955e-02, 3.333e-02, -7.555e-02, 7.639e-02, -1.112e-01));
	r += mul(s0_8, M4(-1.063e-01, -1.079e-01, -1.925e-02, 1.503e-01, 5.820e-02, 3.355e-02, 3.095e-02, -8.662e-02, 1.396e-01, 1.597e-01, -6.665e-02, -1.743e-01, -1.772e-01, 1.928e-02, -7.519e-02, 7.648e-02));
	r += mul(s1_0, M4(1.745e-01, 3.854e-02, -1.190e-01, -8.155e-02, -1.025e-02, 7.737e-04, 1.460e-01, -4.537e-02, 8.711e-02, 1.459e-01, -4.050e-02, -1.553e-01, 8.602e-02, 4.933e-01, 1.282e-01, -2.192e-01));
	r += mul(s1_1, M4(8.018e-02, -2.232e-01, 2.359e-02, -1.918e-01, 4.164e-03, 7.095e-02, -1.084e-01, -3.420e-02, -4.360e-02, 1.730e-01, 1.353e-01, -1.685e-01, 2.693e-02, 1.208e-01, 1.019e-01, -2.335e-01));
	r += mul(s1_2, M4(-1.878e-01, -3.760e-06, -4.228e-02, 1.732e-01, -5.196e-02, -1.283e-01, -1.079e-01, 7.453e-02, -1.017e-01, 7.417e-02, 1.984e-01, 2.289e-01, -1.021e-01, -5.305e-02, -1.811e-01, -3.102e-04));
	r += mul(s1_3, M4(-2.920e-01, -5.125e-02, -1.381e-01, 1.066e-02, -2.829e-01, 1.302e-01, 1.046e-01, 2.542e-02, 9.346e-02, 1.496e-01, 5.451e-02, -1.348e-01, 2.154e-01, 1.972e-01, 9.481e-02, -4.320e-02));
	r += mul(s1_4, M4(2.227e-01, -1.087e-01, 7.102e-01, 2.089e-01, -2.267e-01, 3.633e-01, -6.587e-02, 3.349e-01, 8.818e-01, -3.888e-01, -4.721e-01, -2.234e-01, -5.350e-01, 9.540e-02, -2.417e-01, -1.072e-01));
	r += mul(s1_5, M4(3.955e-01, -6.081e-02, -2.106e-02, -3.232e-01, 3.789e-02, 1.064e-02, -4.924e-03, -3.408e-01, 1.699e-01, -1.432e-01, 4.655e-02, 2.096e-01, -2.128e-02, 3.952e-01, 1.547e-02, -4.168e-01));
	r += mul(s1_6, M4(-1.701e-01, 3.083e-02, -8.803e-02, -2.461e-02, 2.793e-01, -2.012e-01, -8.604e-03, -5.068e-02, -4.059e-02, -2.255e-02, 3.099e-02, -2.635e-02, 8.522e-02, 1.471e-01, -2.518e-02, -2.864e-02));
	r += mul(s1_7, M4(6.903e-03, 3.060e-01, 1.670e-01, -1.581e-01, -2.978e-01, 9.397e-02, -2.182e-01, -1.328e-01, 1.122e-01, -8.287e-02, -1.993e-01, 1.544e-01, 1.196e-01, 1.617e-01, 1.430e-01, -3.150e-01));
	r += mul(s1_8, M4(-2.251e-02, 5.308e-02, 1.908e-02, -3.063e-02, -7.207e-02, 1.459e-01, -9.077e-03, -5.620e-02, 1.202e-01, -2.686e-02, -2.241e-02, -1.262e-01, 2.646e-02, 4.776e-02, -3.640e-02, 2.137e-01));
	r += V4(1.436e-02, 1.688e-03, -8.209e-04, -1.685e-04);
	return r;
}
void Pass5(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 6
//!DESC CuNNy-8x4C-EASU-NVL-conv4
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(3.730e-02, -4.065e-02, -3.136e-02, 8.860e-02, -4.724e-02, 9.054e-02, -3.628e-03, 2.252e-02, -1.563e-02, -1.718e-01, -1.583e-01, 7.013e-02, 2.973e-02, 5.523e-01, -6.591e-02, 2.492e-03));
	r += mul(s0_1, M4(4.317e-02, -7.485e-02, -2.500e-01, 1.590e-02, 2.529e-01, -8.692e-02, -3.369e-04, 6.385e-02, 9.947e-04, 3.438e-02, -2.392e-01, -5.320e-03, 3.375e-02, -6.948e-02, 4.922e-04, 1.627e-01));
	r += mul(s0_2, M4(2.588e-01, 9.749e-04, 1.989e-03, 2.281e-03, -1.184e-01, 3.022e-03, 6.212e-02, 5.594e-03, 8.528e-02, -4.380e-02, -9.351e-02, 1.532e-02, 2.923e-01, 1.743e-01, -7.845e-02, -6.631e-03));
	r += mul(s0_3, M4(5.608e-02, -1.479e-02, 8.947e-02, -6.165e-03, -4.068e-02, -4.990e-01, 1.568e-01, 6.311e-02, 4.541e-02, -3.448e-01, -2.940e-01, -7.041e-02, -7.016e-02, -1.903e-02, -9.992e-02, 1.508e-01));
	r += mul(s0_4, M4(1.391e-01, -7.009e-03, -2.394e-02, -5.371e-01, -9.489e-02, -1.610e-01, -3.818e-01, 1.056e-01, 4.426e-01, 1.267e-01, -3.954e-01, -2.510e-01, 3.829e-01, 1.017e-01, -5.164e-02, -1.072e-01));
	r += mul(s0_5, M4(-4.710e-02, 8.540e-03, -2.601e-01, 1.564e-02, 1.269e-02, -6.238e-02, -2.002e-01, 2.609e-02, -5.623e-01, 6.668e-02, -1.300e-01, 4.872e-02, 2.902e-01, 3.971e-02, -3.169e-01, -3.330e-02));
	r += mul(s0_6, M4(-7.590e-03, -4.389e-02, 4.944e-02, 8.618e-02, -1.353e-01, -3.296e-02, 8.615e-02, 7.340e-02, -1.231e-02, 1.454e-02, -6.656e-02, 4.073e-02, 2.003e-02, 1.165e-02, 4.462e-02, -7.840e-02));
	r += mul(s0_7, M4(3.826e-02, -3.952e-02, -1.223e-01, -2.366e-01, -1.330e-01, -1.037e-02, -1.757e-01, -5.134e-02, -1.987e-01, -8.986e-02, -1.498e-01, 5.318e-01, -2.744e-02, 2.047e-01, 1.042e-01, -1.421e-01));
	r += mul(s0_8, M4(-1.303e-01, -3.647e-03, -8.033e-02, 4.260e-02, -1.224e-01, -5.365e-02, -2.056e-01, -1.446e-01, 2.426e-01, 1.728e-02, 3.136e-01, -4.874e-02, -7.133e-02, 7.929e-02, -2.963e-01, -1.425e-01));
	r += mul(s1_0, M4(-5.266e-02, -1.306e-01, -1.091e-01, 2.183e-01, -9.288e-03, 1.587e-01, -3.267e-02, -2.597e-02, -7.066e-02, -2.487e-03, -4.238e-02, 4.169e-02, 5.898e-02, -9.891e-03, -6.798e-02, 7.666e-02));
	r += mul(s1_1, M4(-2.392e-01, 1.363e-01, -3.525e-01, 1.364e-02, 1.150e-02, -7.492e-02, 2.588e-01, 4.244e-02, 2.696e-02, -2.025e-02, -5.501e-02, -2.741e-02, 1.529e-01, 9.306e-02, -2.923e-01, 1.091e-01));
	r += mul(s1_2, M4(3.553e-02, 5.048e-02, 9.222e-02, 1.702e-03, 6.535e-02, 1.184e-01, -1.607e-01, 4.241e-02, 5.829e-02, 7.068e-03, 6.319e-02, -1.495e-02, 2.932e-02, 5.144e-02, 2.082e-01, 3.033e-02));
	r += mul(s1_3, M4(-1.772e-01, -3.858e-01, 4.469e-02, 9.291e-02, 9.558e-03, -2.216e-02, 6.474e-02, 1.067e-02, 1.417e-01, -5.644e-01, -1.323e-01, 1.187e-02, 2.321e-02, -7.939e-02, 3.363e-01, 7.683e-02));
	r += mul(s1_4, M4(-1.235e-01, -1.645e-01, 2.038e-01, -7.158e-01, -1.559e-01, 3.047e-01, 1.165e-01, 2.260e-01, 2.595e-01, -1.244e-01, -3.235e-01, -2.529e-01, 1.106e-01, -1.275e-01, -4.976e-01, -3.493e-01));
	r += mul(s1_5, M4(-1.154e-01, -4.016e-02, -8.942e-02, 1.528e-02, -4.935e-02, -6.214e-02, -3.753e-01, -1.206e-02, -2.881e-01, -2.802e-02, -1.158e-01, 3.945e-03, 6.638e-02, -1.020e-01, 1.106e-01, 3.839e-02));
	r += mul(s1_6, M4(-1.215e-01, -1.311e-02, -4.943e-02, 3.251e-02, -4.940e-02, 8.699e-04, 1.494e-03, 2.664e-02, 7.162e-02, -5.766e-02, -7.154e-02, 7.592e-02, -9.750e-02, -1.161e-01, 5.697e-02, 6.374e-02));
	r += mul(s1_7, M4(-7.453e-02, -9.523e-02, 3.255e-02, -2.199e-01, 6.762e-03, 9.490e-03, -8.363e-03, -8.670e-02, 6.278e-02, -2.290e-01, 1.304e-01, 3.896e-01, -2.879e-01, -9.292e-02, -2.484e-01, 4.533e-03));
	r += mul(s1_8, M4(-1.858e-01, -5.006e-02, -1.575e-01, -2.261e-02, -4.247e-02, -1.666e-02, -1.919e-01, -1.272e-01, -6.508e-02, -1.046e-02, 1.762e-01, -1.682e-01, -1.382e-01, -1.401e-02, -1.764e-01, -3.868e-02));
	r += V4(-1.741e-03, -2.378e-03, 3.860e-03, 8.200e-04);
	return r;
}
void Pass6(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 7
//!DESC CuNNy-8x4C-EASU-NVL-conv5
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-2.364e-02, -2.996e-02, 2.382e-03, 3.982e-03, 1.554e-01, -4.829e-02, -2.681e-02, -4.384e-02, -6.828e-02, -2.962e-02, 9.319e-02, -6.701e-02, 2.388e-01, 7.445e-02, 4.354e-02, 2.251e-01));
	r += mul(s0_1, M4(-9.975e-02, -2.888e-02, 2.598e-02, -3.213e-02, 5.497e-02, -2.941e-02, 9.403e-02, -1.164e-01, -2.044e-01, 4.611e-02, 1.811e-01, 1.233e-01, -3.262e-02, -2.410e-01, 1.704e-01, -2.705e-01));
	r += mul(s0_2, M4(-1.027e-03, 1.358e-02, 6.217e-02, 7.655e-03, -8.344e-02, -2.071e-02, -1.684e-01, 3.569e-02, -1.349e-01, 1.162e-02, 7.291e-03, -9.632e-02, -7.788e-02, -1.501e-01, -1.079e-01, 4.494e-02));
	r += mul(s0_3, M4(-1.811e-01, 3.617e-01, -7.202e-02, 3.565e-01, -3.620e-02, -1.686e-02, 1.788e-02, -8.153e-03, 9.691e-01, 1.744e-01, 2.318e-02, -2.151e-01, 1.118e-01, 3.193e-01, 2.790e-01, 1.292e-01));
	r += mul(s0_4, M4(1.156e-01, -1.747e-01, -1.910e-01, -9.163e-02, 1.179e-01, -6.358e-01, -4.088e-02, -6.933e-01, -4.454e-01, -3.535e-01, -3.816e-01, 9.398e-01, 2.537e-01, -4.290e-01, 4.079e-01, 1.575e-01));
	r += mul(s0_5, M4(-3.010e-03, -2.203e-02, 1.577e-01, -4.285e-02, -1.403e-01, 2.221e-01, -1.636e-01, 3.791e-01, -3.259e-01, 2.032e-01, 2.447e-01, 7.941e-02, 8.081e-02, -5.606e-02, 1.013e-01, 1.787e-02));
	r += mul(s0_6, M4(7.792e-03, -1.141e-01, 1.819e-01, 1.352e-01, -2.001e-03, -1.221e-02, -5.434e-02, -1.910e-02, 4.909e-02, 6.261e-01, 3.938e-01, -3.643e-01, 6.374e-02, -7.083e-02, 1.976e-01, 1.059e-01));
	r += mul(s0_7, M4(3.528e-02, -1.157e-01, -1.865e-01, -1.369e-02, 1.672e-02, 4.326e-01, -9.757e-02, -2.959e-01, -1.554e-01, -3.176e-01, 1.558e-01, 2.174e-01, 1.898e-02, -4.257e-03, -1.744e-01, -7.207e-02));
	r += mul(s0_8, M4(-1.330e-02, 1.962e-03, 1.304e-02, -7.097e-03, -4.814e-03, -1.090e-01, 8.761e-02, 7.815e-02, -9.034e-02, 2.959e-01, 1.178e-01, 1.304e-01, -9.032e-03, 3.441e-02, -3.867e-02, -3.405e-02));
	r += mul(s1_0, M4(-4.376e-02, -1.603e-01, 1.517e-01, -1.508e-01, 3.960e-02, -1.451e-02, 3.408e-02, -5.393e-02, -1.018e-01, 5.092e-02, -4.265e-02, 1.027e-01, -2.257e-02, -1.252e-02, 1.323e-02, 1.441e-01));
	r += mul(s1_1, M4(-1.029e-01, -5.059e-01, 4.490e-03, -5.546e-01, -1.132e-02, -6.950e-03, 1.983e-02, -3.846e-02, 1.125e-01, -3.634e-02, 1.240e-01, -2.593e-01, 5.022e-02, -1.776e-01, 3.154e-01, -4.501e-01));
	r += mul(s1_2, M4(5.283e-02, 2.837e-02, -4.781e-02, -3.292e-02, -3.766e-01, 1.447e-01, -1.368e-01, 3.994e-01, 2.563e-03, -4.430e-02, -2.814e-02, -3.680e-02, 1.102e-01, -1.584e-02, -1.068e-01, -3.145e-02));
	r += mul(s1_3, M4(-1.531e+00, -3.658e-01, 6.326e-02, -2.795e-03, 3.184e-02, -1.044e-02, 6.799e-02, -6.087e-02, 3.853e-02, -1.470e-01, 2.940e-02, -5.291e-02, -1.267e-01, -1.020e-01, 2.325e-03, -6.276e-04));
	r += mul(s1_4, M4(1.749e-01, -3.064e-01, -6.477e-01, -5.206e-01, 3.427e-01, -1.999e-01, 1.588e-01, -4.092e-01, -3.165e-01, -1.497e-01, -3.293e-01, 1.424e-01, 4.403e-02, 1.833e-01, 8.066e-01, -8.816e-02));
	r += mul(s1_5, M4(1.595e-01, -2.979e-01, -5.165e-02, -1.509e-01, -2.143e-01, -1.018e-01, 1.438e-01, 3.841e-01, -9.078e-02, 1.155e-01, 2.309e-01, 6.198e-02, 5.334e-02, -1.003e-01, -3.600e-01, 1.932e-02));
	r += mul(s1_6, M4(7.753e-02, -2.198e-01, -1.037e-01, 2.397e-01, -9.102e-03, 4.358e-03, -7.313e-03, -7.688e-02, 2.582e-03, 1.301e-01, 1.090e-01, -1.337e-02, -1.675e-02, -4.768e-02, -2.681e-02, 6.324e-02));
	r += mul(s1_7, M4(1.856e-02, -1.186e-01, 1.124e-02, -1.204e-01, -1.538e-01, 2.017e-01, -1.528e-01, -2.540e-01, 3.324e-02, 1.362e-01, 2.810e-01, 3.176e-02, 2.095e-02, -8.246e-02, -2.471e-01, -9.301e-02));
	r += mul(s1_8, M4(4.698e-02, -7.191e-02, -1.300e-01, -9.343e-02, 1.014e-01, -1.781e-01, -2.783e-01, -1.200e-02, -1.435e-03, -7.507e-02, 4.406e-02, 1.673e-02, -3.792e-03, -1.381e-01, -7.356e-02, -8.361e-03));
	r += V4(-5.543e-04, -6.035e-03, -5.120e-03, 7.803e-05);
	return r;
}
void Pass7(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 8
//!DESC CuNNy-8x4C-EASU-NVL-conv6
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(3.530e-02, 3.016e-02, -4.352e-02, 1.644e-02, -9.755e-02, 2.814e-02, 1.043e-01, -8.226e-02, 2.038e-01, 3.919e-01, -4.468e-02, 2.569e-02, 7.905e-02, 8.948e-03, -1.058e-01, 7.457e-02));
	r += mul(s0_1, M4(1.834e-03, 1.284e-01, -3.751e-03, 9.821e-02, 5.432e-02, -3.643e-01, -3.453e-02, -3.300e-01, 1.421e-01, 4.449e-01, -4.524e-02, -1.106e-01, -3.966e-02, 4.017e-01, 1.958e-02, 3.506e-01));
	r += mul(s0_2, M4(3.555e-02, 6.780e-02, -5.026e-02, -7.831e-02, -4.501e-02, -2.640e-02, 5.921e-02, -9.151e-02, -1.337e-02, 3.373e-01, 9.605e-02, 5.790e-02, 5.199e-02, 3.406e-02, -5.776e-02, 4.609e-02));
	r += mul(s0_3, M4(5.335e-02, -8.765e-02, 4.892e-02, 4.654e-02, -4.819e-02, 1.220e-01, -1.304e-01, -6.531e-03, -1.402e-01, 1.803e-01, -1.618e-01, -5.364e-02, 8.751e-03, -1.920e-01, 1.632e-01, 9.438e-03));
	r += mul(s0_4, M4(-4.453e-02, 7.683e-02, -1.939e-01, 4.103e-01, 4.152e-02, -8.811e-02, 4.226e-01, 1.323e-01, 3.188e-01, -3.584e-01, -1.285e+00, -3.991e-02, 1.576e-02, -6.778e-01, -4.417e-01, -4.700e-01));
	r += mul(s0_5, M4(1.396e-01, 1.587e-01, -9.735e-02, 2.348e-01, -5.851e-02, -1.519e-01, -1.278e-01, 6.863e-03, -1.048e-01, 5.140e-02, 1.600e-01, -9.891e-02, -4.148e-02, 1.482e-01, 1.625e-01, 2.190e-03));
	r += mul(s0_6, M4(8.374e-02, -1.359e-02, 2.353e-02, -4.372e-02, 7.968e-02, 9.393e-02, 4.811e-02, 4.799e-03, 5.446e-02, 2.410e-02, 6.376e-02, -6.315e-02, 5.845e-02, 1.987e-01, -1.382e-01, -4.616e-02));
	r += mul(s0_7, M4(4.796e-01, 3.260e-02, 9.289e-02, -1.753e-01, -1.199e-01, 9.611e-02, 1.527e-01, 9.106e-02, -6.083e-01, -1.239e-01, -2.428e-01, -1.363e-01, -9.852e-02, 1.022e-01, 4.077e-01, 2.281e-01));
	r += mul(s0_8, M4(-3.868e-01, 1.111e-01, -5.544e-02, -2.864e-02, 8.021e-03, 2.870e-02, 1.669e-02, 1.835e-02, 7.131e-03, 7.341e-02, 7.354e-02, -1.928e-02, -9.116e-02, -1.821e-03, -1.087e-01, 9.788e-02));
	r += mul(s1_0, M4(-1.585e-03, -2.858e-02, -1.067e-01, 2.349e-02, -6.525e-02, 1.811e-01, 1.821e-01, -4.333e-02, 3.767e-02, -1.299e-01, -1.229e-01, -3.460e-02, 6.280e-02, 1.876e-02, -1.041e-01, 1.244e-01));
	r += mul(s1_1, M4(-4.520e-02, 6.521e-02, -8.679e-02, 7.246e-02, 3.827e-02, -3.337e-01, 6.118e-03, -4.389e-01, -8.407e-02, 1.110e-01, 1.032e-01, 1.519e-01, -6.716e-02, 4.175e-01, 8.917e-03, 4.442e-01));
	r += mul(s1_2, M4(-3.017e-03, 5.574e-04, -1.108e-01, -6.553e-02, -1.939e-02, -4.415e-03, 6.056e-02, -1.362e-01, -4.190e-02, 9.781e-02, 9.551e-02, 8.912e-02, 1.309e-02, -4.894e-02, -2.918e-03, 1.654e-02));
	r += mul(s1_3, M4(-1.425e-01, -1.033e-01, -6.499e-02, 1.319e-01, -2.182e-02, 2.202e-01, -1.094e-01, -5.220e-02, -2.285e-02, -4.306e-02, 1.556e-01, 1.583e-02, 6.758e-02, -1.598e-01, 2.336e-01, -7.522e-02));
	r += mul(s1_4, M4(-1.236e-01, -4.197e-01, -3.324e-01, 1.265e-01, -6.451e-02, -2.705e-01, 2.943e-01, 1.233e-01, 7.965e-02, -2.378e-01, -5.454e-01, -1.032e-01, -6.783e-02, -4.440e-01, -2.653e-01, -6.218e-01));
	r += mul(s1_5, M4(-3.179e-02, 6.258e-02, 5.520e-02, 1.344e-01, 1.056e-01, 1.927e-02, -1.825e-01, 4.654e-02, -3.772e-02, -5.844e-03, 5.454e-02, -2.290e-02, -3.041e-02, 2.159e-01, 9.560e-02, -6.422e-03));
	r += mul(s1_6, M4(-3.887e-02, 2.526e-01, 1.269e-01, -2.418e-02, -8.076e-02, 8.610e-03, -5.168e-02, -5.131e-02, 1.176e-02, 3.148e-02, 1.385e-02, -1.612e-02, -6.475e-02, 1.096e-01, -6.076e-02, -1.994e-02));
	r += mul(s1_7, M4(1.389e-01, -8.067e-01, -8.390e-01, -5.431e-01, 3.242e-02, 3.213e-01, 2.236e-01, 6.687e-02, 4.726e-02, -1.094e-01, -9.968e-02, -1.232e-01, -5.020e-01, 2.081e-01, 2.618e-01, 9.087e-02));
	r += mul(s1_8, M4(-2.193e-01, 1.658e-02, -1.951e-02, -8.281e-02, -6.647e-02, 5.676e-02, 8.997e-02, 3.710e-02, -6.659e-02, -5.862e-02, 4.245e-03, -5.042e-02, -8.950e-02, 1.504e-01, 1.315e-01, 1.343e-01));
	r += V4(-6.445e-04, 3.568e-03, 3.038e-03, 8.710e-04);
	return r;
}
void Pass8(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 9
//!DESC CuNNy-8x4C-EASU-NVL-conv7
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-3.829e-02, -1.083e-02, 1.477e-03, 5.676e-02, -1.023e-02, 3.284e-02, -1.328e-02, -7.002e-03, -2.173e-01, 7.900e-02, -5.042e-02, -1.442e-04, -9.204e-02, 1.920e-03, 1.012e-02, -9.208e-03));
	r += mul(s0_1, M4(2.652e-03, -1.168e-02, -2.875e-02, 5.685e-02, -1.961e-02, 8.102e-02, -3.412e-02, 4.688e-02, -7.017e-03, 5.626e-02, -3.352e-02, -2.365e-02, 1.781e-02, 8.107e-02, -1.283e-02, -6.018e-02));
	r += mul(s0_2, M4(2.656e-02, 1.212e-01, -2.689e-02, -1.111e-01, -2.627e-02, 3.811e-02, -2.211e-02, 6.428e-03, 2.548e-02, 5.951e-04, -1.334e-02, 4.990e-02, 4.665e-02, -1.565e-02, -8.915e-03, 3.500e-02));
	r += mul(s0_3, M4(1.802e-01, -4.924e-02, -8.519e-02, 2.900e-02, -2.231e-01, -2.351e-02, -8.456e-03, -2.300e-02, -3.763e-03, 4.181e-02, -2.191e-02, 6.856e-02, -6.435e-02, 9.400e-02, 4.199e-02, -1.304e-01));
	r += mul(s0_4, M4(-6.908e-01, 8.080e-02, -2.017e-01, 2.161e-02, 3.346e-01, -2.962e-02, 1.248e-01, 7.782e-03, -5.652e-03, -5.183e-02, -1.189e-01, -2.231e-01, -3.369e-01, -1.855e-01, 2.611e-01, 9.695e-02));
	r += mul(s0_5, M4(4.164e-03, 5.213e-02, -3.072e-02, -7.324e-02, -3.830e-02, -1.120e-01, 7.154e-02, -5.532e-02, 1.019e-02, 3.772e-02, -7.306e-02, 6.622e-02, 1.687e-01, 1.137e-01, -5.728e-02, 6.441e-02));
	r += mul(s0_6, M4(1.416e-02, 7.757e-03, 2.476e-02, -1.498e-03, -2.134e-01, 7.885e-02, -1.168e-02, -4.082e-02, 1.392e-01, -8.896e-02, -6.014e-02, 6.467e-02, 3.123e-03, 7.078e-02, 7.307e-02, -1.041e-02));
	r += mul(s0_7, M4(-1.469e-01, 4.400e-02, 1.683e-02, -1.783e-03, 1.587e-01, -4.579e-02, -8.765e-02, 2.251e-01, -6.153e-02, 4.138e-02, 6.821e-02, -1.948e-01, -3.793e-02, -7.154e-02, -1.241e-01, 9.103e-02));
	r += mul(s0_8, M4(-4.933e-02, 4.593e-02, -4.053e-03, 3.153e-02, -1.004e-01, 3.886e-02, -9.010e-03, -6.565e-02, 3.076e-02, 1.479e-02, 1.799e-02, 2.943e-02, 5.273e-02, 2.102e-02, -1.343e-02, 7.793e-03));
	r += mul(s1_0, M4(-1.294e-02, -1.400e-01, -3.075e-02, 6.016e-02, -5.356e-02, 1.663e-03, -1.645e-02, -2.539e-02, -2.153e-01, 9.734e-02, -2.993e-02, -6.138e-02, 1.259e-02, 7.793e-02, 1.915e-02, 5.825e-02));
	r += mul(s1_1, M4(4.475e-02, -9.577e-01, 7.072e-02, -5.977e-02, 1.679e-01, 2.181e-01, 1.466e-01, 1.233e-01, 9.544e-02, 2.311e-01, 5.833e-02, 1.042e-02, 1.122e-01, 2.311e-01, -1.042e-01, -1.647e-01));
	r += mul(s1_2, M4(1.078e-01, -2.182e-01, -2.863e-02, -1.802e-01, -2.647e-02, -1.253e-02, 7.672e-02, -1.744e-02, 4.137e-02, 6.422e-02, 8.482e-03, -2.517e-02, 8.274e-02, 8.094e-03, -1.600e-01, 2.721e-02));
	r += mul(s1_3, M4(3.443e-01, -1.384e-01, -1.134e-01, 6.174e-04, -4.759e-01, 1.015e-01, 2.700e-02, -7.151e-02, -2.121e-01, -1.270e-01, 3.138e-02, 1.709e-02, 3.408e-01, -4.894e-02, -1.606e-01, 1.343e-01));
	r += mul(s1_4, M4(-4.900e-02, -7.696e-02, -8.128e-02, 6.166e-02, 1.302e+00, -2.473e-02, 1.230e+00, 4.566e-02, -1.156e-01, -1.961e-01, -1.152e-02, -1.065e+00, -6.866e-01, -6.244e-01, 4.119e-01, 3.752e-01));
	r += mul(s1_5, M4(-3.854e-02, -6.285e-03, 1.371e-02, -5.539e-02, 1.652e-02, 4.282e-02, -1.042e-02, 6.625e-02, 8.955e-02, -2.898e-02, -1.350e-02, 1.992e-01, 1.204e-01, -4.452e-02, -1.741e-01, 1.528e-02));
	r += mul(s1_6, M4(-3.321e-02, 4.285e-02, 2.566e-02, -1.366e-02, -3.504e-02, 4.631e-02, -8.888e-03, -1.260e-02, -9.303e-02, -1.041e-02, 2.058e-02, -4.282e-02, -2.408e-01, 2.221e-02, 1.480e-01, -1.694e-01));
	r += mul(s1_7, M4(-7.927e-02, 2.767e-02, -1.798e-03, 4.083e-04, 2.629e-01, -7.192e-02, -4.506e-02, 2.998e-02, 1.886e-03, 5.530e-02, 5.236e-02, -9.136e-02, -8.421e-02, -9.993e-02, 3.532e-02, -6.214e-02));
	r += mul(s1_8, M4(1.140e-02, -2.972e-02, 1.518e-02, -8.431e-03, -9.737e-02, 1.874e-01, -9.595e-02, 6.425e-02, 4.601e-02, -2.142e-02, 7.292e-02, 2.298e-02, 1.959e-01, -1.612e-01, 8.968e-02, -6.678e-03));
	r += V4(-1.213e-03, -8.316e-04, -2.828e-03, 2.753e-03);
	return r;
}
void Pass9(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 10
//!DESC CuNNy-8x4C-EASU-NVL-conv8
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-5.677e-03, 1.200e-02, -4.459e-02, 1.367e-02, -1.898e-02, 3.118e-02, 3.146e-02, 3.870e-02, -1.706e-01, -2.187e-01, 2.110e-01, -7.901e-02, 1.173e-02, -2.299e-02, 3.981e-03, -1.930e-02));
	r += mul(s0_1, M4(-5.531e-02, 4.987e-02, 6.301e-03, 6.697e-02, -3.257e-02, -1.523e-01, 3.038e-02, -8.033e-02, -1.181e-01, 1.357e-01, 5.605e-02, 1.816e-01, -3.406e-02, -2.124e-01, -5.752e-02, -1.283e-01));
	r += mul(s0_2, M4(1.215e-01, 1.209e-01, 2.027e-01, 9.504e-02, -3.031e-02, 3.198e-02, 3.833e-02, 2.765e-02, -3.941e-02, 1.209e-01, -4.265e-02, 1.139e-01, -2.506e-02, -7.079e-03, -2.131e-02, -1.359e-02));
	r += mul(s0_3, M4(2.671e-02, -1.633e-02, -1.446e-02, 1.435e-03, -2.925e-03, 8.228e-02, 7.644e-03, 1.061e-01, 9.637e-02, -7.558e-03, 6.153e-02, 3.971e-03, -5.188e-02, 5.666e-02, 6.712e-02, 1.705e-02));
	r += mul(s0_4, M4(1.724e-01, -2.368e-01, -3.174e-01, 4.271e-02, -9.507e-02, -9.633e-01, -2.173e-01, -6.981e-01, -1.593e+00, -1.646e-01, -1.496e-01, 6.667e-01, 1.358e-01, -6.474e-02, 6.043e-01, -2.607e-01));
	r += mul(s0_5, M4(-4.525e-01, -1.075e+00, 9.353e-01, 4.487e-01, -7.210e-02, 3.637e-01, -2.768e-02, 2.627e-01, -1.757e-01, 2.150e-01, 1.513e-01, 1.166e-01, -7.183e-02, -1.903e-02, 9.127e-02, 1.016e-01));
	r += mul(s0_6, M4(-2.704e-02, -1.687e-02, 2.087e-02, -1.945e-04, -6.567e-02, -1.658e-01, 1.220e-01, 3.656e-02, -1.706e-02, -1.094e-02, -3.811e-01, 1.137e-01, -9.395e-03, -1.161e-02, -8.176e-02, 3.599e-02));
	r += mul(s0_7, M4(-1.155e-01, -9.280e-03, 2.088e-01, -1.431e-01, -4.816e-01, 3.451e-01, 1.316e-01, -5.925e-01, -7.140e-01, 3.471e-01, -1.649e-01, -6.161e-01, -2.388e-01, 9.841e-02, -4.433e-02, -2.725e-01));
	r += mul(s0_8, M4(1.222e-03, -1.369e-01, 5.555e-02, 6.957e-03, -2.797e-02, -1.145e-01, 2.998e-02, 1.421e-01, -6.233e-02, -5.396e-02, 6.766e-03, 2.753e-01, 3.942e-03, 3.602e-02, -2.581e-02, 5.825e-02));
	r += mul(s1_0, M4(-1.315e-02, -2.725e-02, -1.416e-02, 1.281e-03, -4.798e-02, 1.803e-02, 7.156e-02, 1.888e-02, -3.551e-02, -4.430e-02, 3.351e-02, -2.532e-02, 5.857e-02, -1.352e-01, -4.969e-03, -1.130e-01));
	r += mul(s1_1, M4(-4.951e-02, 5.822e-02, 1.216e-02, 6.188e-02, -2.107e-02, -6.797e-02, 1.487e-02, -5.853e-02, 2.706e-02, -1.591e-03, 7.369e-02, -1.612e-02, -8.573e-02, -3.642e-01, -1.087e-01, -2.881e-01));
	r += mul(s1_2, M4(-2.827e-03, -1.450e-01, -3.941e-02, -1.314e-01, 4.798e-03, 1.247e-01, 6.853e-03, 8.276e-02, -1.163e-02, -8.045e-03, 3.994e-02, 1.335e-02, 1.214e-02, -5.441e-02, 7.650e-03, -1.042e-01));
	r += mul(s1_3, M4(3.153e-02, 5.009e-02, -9.589e-02, -4.013e-03, 4.618e-02, 4.014e-01, 1.935e-01, 3.426e-01, -3.820e-02, -4.378e-02, 1.141e-01, -1.095e-02, -3.397e-01, -8.924e-02, 4.211e-01, -2.153e-01));
	r += mul(s1_4, M4(1.618e-01, -8.569e-02, -4.782e-01, -2.745e-02, -3.485e-01, 6.825e-02, -1.069e-01, 1.323e-01, -9.668e-02, 1.922e-02, 8.182e-02, 1.656e-01, 7.212e-01, 2.715e-01, 2.366e-01, -8.070e-01));
	r += mul(s1_5, M4(3.456e-02, 3.139e-01, -5.653e-02, 1.771e-01, -7.879e-02, 4.082e-01, 2.902e-03, 2.944e-01, -7.376e-02, 2.476e-02, 1.137e-02, -3.233e-02, -9.449e-02, 2.036e-01, 8.160e-02, 2.529e-01));
	r += mul(s1_6, M4(-2.725e-02, -2.596e-02, 3.162e-02, -1.780e-03, 1.791e-02, -3.037e-01, 1.789e-01, 2.951e-01, 8.697e-03, 3.941e-02, -7.946e-02, 3.413e-04, 4.180e-02, 7.391e-02, -3.300e-01, 2.056e-02));
	r += mul(s1_7, M4(-1.248e-01, 1.727e-02, 1.443e-01, -9.106e-02, -6.631e-01, 2.744e-01, -8.362e-01, 1.465e-01, -2.275e-01, 7.312e-02, 1.218e-01, -2.146e-01, -7.090e-01, 5.509e-01, -2.553e-01, -8.574e-01));
	r += mul(s1_8, M4(-1.340e-02, -1.284e-01, 2.982e-02, 1.058e-01, 2.173e-01, 2.118e-01, -2.198e-02, 1.759e-01, -5.314e-02, -3.933e-02, 4.818e-02, 2.490e-02, -7.838e-03, 7.238e-02, 2.441e-03, 1.766e-01));
	r += V4(-7.770e-04, -6.246e-04, -6.623e-04, 3.139e-04);
	return r;
}
void Pass10(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 11
//!DESC CuNNy-8x4C-EASU-NVL-out
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-1.343e-01, 2.126e-01, -8.163e-02, 5.083e-02, -4.158e-01, 1.893e-01, 3.937e-01, 4.065e-02, 7.026e-02, 1.334e-02, 2.148e-02, -7.132e-03, 2.483e-01, -3.564e-01, -2.740e-02, -4.666e-03));
	r += mul(s0_1, M4(1.627e-02, 3.046e-01, -7.168e-02, -5.120e-02, 5.078e-01, -2.942e-01, -9.139e-02, 5.695e-02, 1.160e-01, 1.128e-01, 1.083e-02, -7.510e-03, -8.360e-02, 3.636e-02, -1.264e-01, -5.384e-02));
	r += mul(s0_2, M4(5.579e-02, -3.521e-02, 4.669e-02, 9.302e-02, -9.257e-03, 5.938e-02, 2.115e-02, -2.417e-02, 1.408e-02, 1.392e-02, -4.685e-03, -6.021e-03, -5.928e-03, 2.611e-02, -1.132e-02, -1.152e-02));
	r += mul(s0_3, M4(1.533e-01, 1.432e-01, -4.931e-01, 1.135e-01, -2.502e-02, 9.744e-02, 2.535e-01, -9.838e-02, 5.379e-02, 1.500e-02, 9.819e-02, 3.391e-02, 6.436e-01, -2.651e-01, 7.059e-01, -7.952e-01));
	r += mul(s0_4, M4(-8.839e-02, -9.531e-01, 1.153e+00, -2.615e-01, -5.288e-03, -5.957e-01, -3.800e-01, 3.027e-01, -5.824e-01, -3.331e-02, -1.610e-01, 1.361e-01, 6.318e-02, 2.051e-01, 3.842e-01, 6.426e-01));
	r += mul(s0_5, M4(2.052e-02, 2.840e-02, -2.015e-01, -2.587e-01, -1.697e-02, -6.056e-02, 8.660e-02, -1.467e-02, 1.560e-02, -2.319e-01, 1.615e-01, 3.251e-03, 3.010e-02, 5.625e-02, -7.642e-02, -2.350e-02));
	r += mul(s0_6, M4(-3.820e-02, -2.200e-02, 1.238e-01, -1.107e-01, -1.004e-01, 3.972e-02, -2.065e-01, 5.181e-02, -1.655e-02, -4.938e-03, -1.016e-02, 2.801e-02, -8.563e-02, -1.348e-02, -3.691e-02, 9.461e-02));
	r += mul(s0_7, M4(-1.099e-01, 6.440e-02, -9.183e-02, 3.201e-01, 2.766e-03, -3.650e-02, -2.407e-01, -5.194e-01, 3.502e-02, -2.194e-02, -3.671e-01, -1.966e-01, 5.860e-02, -8.027e-03, -3.391e-01, -4.374e-01));
	r += mul(s0_8, M4(4.642e-02, 2.340e-02, -1.284e-01, 1.703e-02, -2.130e-02, 4.412e-03, -3.752e-03, -2.968e-02, -7.068e-04, 3.776e-02, -1.132e-01, -1.499e-01, -7.327e-04, -1.572e-02, -9.678e-03, -3.160e-02));
	r += mul(s1_0, M4(-4.498e-02, 4.944e-02, -9.066e-02, -9.648e-03, 1.169e-01, 2.175e-02, 6.466e-02, -7.954e-03, 1.486e-02, 1.881e-02, -3.602e-02, 4.575e-02, -1.694e-01, -4.686e-02, -9.204e-02, 1.715e-02));
	r += mul(s1_1, M4(2.050e-03, 1.469e-01, -2.302e-02, -2.595e-02, 1.123e-01, -1.116e-01, 4.822e-02, 4.909e-02, 1.691e-02, 6.014e-02, -2.918e-02, -5.342e-04, -1.694e-01, 1.460e-01, -8.641e-02, -5.532e-02));
	r += mul(s1_2, M4(3.325e-02, 1.531e-02, 3.219e-02, 1.812e-02, 4.266e-03, -2.700e-04, 3.149e-03, 1.645e-02, -7.860e-02, 2.747e-01, 3.598e-02, -9.621e-02, 1.187e-02, 5.731e-03, -2.715e-02, -6.990e-03));
	r += mul(s1_3, M4(-1.411e-01, 6.117e-02, 9.839e-02, -1.583e-02, -5.898e-02, 3.931e-02, 2.493e-02, 1.304e-01, 6.026e-02, 3.626e-02, 7.300e-02, 2.639e-03, 3.271e-01, 1.382e-02, 7.789e-02, -2.246e-01));
	r += mul(s1_4, M4(-2.417e-01, -5.730e-01, 2.320e-01, 3.604e-01, -3.356e-02, -2.422e-01, 2.669e-02, -4.654e-01, -1.054e+00, -2.470e-01, -1.622e-01, 4.494e-01, 7.202e-02, 3.209e-01, 2.804e-01, 7.537e-01));
	r += mul(s1_5, M4(5.090e-02, -1.858e-02, -1.548e-01, -1.523e-01, -3.662e-03, -8.344e-02, 7.987e-02, 2.090e-02, -4.913e-01, -1.419e+00, 7.207e-01, 6.881e-01, 3.790e-02, 7.009e-02, -7.788e-02, -1.277e-02));
	r += mul(s1_6, M4(4.879e-02, 1.727e-02, -6.093e-02, -3.324e-02, -9.874e-02, 1.968e-03, -1.117e-01, 8.764e-02, -3.511e-02, -1.073e-02, 2.832e-02, 3.327e-02, -9.009e-02, 8.094e-03, -9.225e-03, 1.197e-01));
	r += mul(s1_7, M4(-1.008e-01, -3.357e-02, 2.717e-01, 2.065e-01, 8.402e-03, -8.713e-02, -3.564e-01, -4.642e-01, -1.766e-02, 3.558e-02, -2.287e-01, -1.775e-01, 8.826e-02, -1.017e-02, -3.709e-01, -4.407e-01));
	r += mul(s1_8, M4(1.109e-02, 3.057e-02, -8.784e-02, -6.181e-02, -1.712e-02, 1.751e-02, -1.192e-02, -3.361e-02, 4.406e-02, -2.997e-02, -1.255e-01, -1.650e-01, -7.652e-03, -1.435e-02, 2.728e-02, -4.566e-02));
	r += V4(1.324e-03, 7.380e-04, 5.951e-04, 2.372e-05);
	return tanh(r);
}
void Pass11(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 12
//!DESC CuNNy-8x4C-EASU-NVL-shuffle
//!STYLE PS
//!IN t1, INPUT, easu
float4 Pass12(float2 pos) {
	float2 pt = float2(GetInputPt());
	static const float3x3 rgb2yuv = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081};
	static const float3x3 yuv2rgb = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float4 r = 0.0;
	float2 size = float2(GetInputSize());
	float2 f = frac(pos * size);
	float3 yuv = mul(rgb2yuv, INPUT.SampleLevel(SL, pos, 0).rgb);
	int2 i = int2(f * 2.0);
	r.r = t1.SampleLevel(SP, (float2(0.5, 0.5) - f) * pt + pos, 0)[2*i.y + i.x];
	r.r += easu.SampleLevel(SP, pos, 0).r;
	r.a = 1.0;
	r.r = clamp(r, 0.0, 1.0);
	float3 px = mul(yuv2rgb, float3(r.r, yuv.yz));
	return float4(px, 1.0);
}
