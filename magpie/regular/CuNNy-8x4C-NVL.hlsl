// CuNNy 8x4C BILINEAR CHROMA NVL
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

//!MAGPIE EFFECT
//!VERSION 3
//!OUTPUT_WIDTH INPUT_WIDTH * 2
//!OUTPUT_HEIGHT INPUT_HEIGHT * 2

//!TEXTURE
Texture2D INPUT;


//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R16G16B16A16_FLOAT
Texture2D t0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R16G16B16A16_FLOAT
Texture2D t1;

//!PASS 1
//!DESC CuNNy-8x4C-BILINEAR-CHROMA-NVL-in
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) (dot(float3(5.880e-01, 1.137e+00, 2.368e-01), O(INPUT, float2(x, y)).rgb) + -1.755e+00)
float4 f0(float2 pt, float2 pos, min16float s0_0, min16float s0_1, min16float s0_2, min16float s0_3, min16float s0_4, min16float s0_5, min16float s0_6, min16float s0_7, min16float s0_8) {
	V4 r = 0.0;
	r += V4(1.195e-02, 1.003e-02, -1.152e-02, 2.725e-02) * s0_0;
	r += V4(-7.379e-03, -1.800e-02, 9.988e-03, -2.489e-02) * s0_1;
	r += V4(-5.664e-03, 5.193e-03, -5.350e-03, 1.913e-02) * s0_2;
	r += V4(-2.960e-02, -3.428e-01, 1.936e-02, -4.813e-02) * s0_3;
	r += V4(5.407e-01, 3.727e-01, 4.214e-01, 3.135e-01) * s0_4;
	r += V4(-5.128e-01, -1.467e-02, 2.689e-02, -6.194e-02) * s0_5;
	r += V4(8.828e-03, -4.592e-02, -1.119e-02, 1.301e-05) * s0_6;
	r += V4(7.163e-03, 3.185e-02, -4.342e-01, -9.438e-02) * s0_7;
	r += V4(-1.048e-02, 5.662e-03, -1.439e-02, 1.078e-02) * s0_8;
	r += V4(1.283e-02, 1.730e-02, -6.371e-04, -3.900e-03);
	return r;
}
void Pass1(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float s0_0 = l0(-1.0, -1.0);
	min16float s0_1 = l0(0.0, -1.0);
	min16float s0_2 = l0(1.0, -1.0);
	min16float s0_3 = l0(-1.0, 0.0);
	min16float s0_4 = l0(0.0, 0.0);
	min16float s0_5 = l0(1.0, 0.0);
	min16float s0_6 = l0(-1.0, 1.0);
	min16float s0_7 = l0(0.0, 1.0);
	min16float s0_8 = l0(1.0, 1.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8);
}
//!PASS 2
//!DESC CuNNy-8x4C-BILINEAR-CHROMA-NVL-conv1
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-4.880e-02, 2.374e-01, 1.997e-01, 8.674e-02, -3.220e-02, 5.603e-02, -2.362e-02, -2.674e-02, -1.133e-01, 7.923e-02, -1.417e-01, -1.317e-01, 2.452e-01, -2.400e-02, -3.943e-02, -1.442e-01));
	r += mul(s0_1, M4(-4.512e-02, 2.085e-01, 5.959e-01, 1.045e-01, 1.238e-01, 4.087e-02, 3.111e-02, -8.132e-02, -8.677e-02, 5.610e-01, 3.622e-01, 2.124e-01, 6.247e-02, 3.571e-01, 3.220e-01, -3.376e-02));
	r += mul(s0_2, M4(2.346e-02, -2.896e-02, 1.731e-02, 3.990e-02, 3.305e-03, 1.665e-01, -1.835e-02, 7.251e-02, 7.433e-02, 7.886e-02, 2.068e-01, -1.126e-01, -1.735e-01, 2.555e-01, 1.625e-01, 7.147e-02));
	r += mul(s0_3, M4(8.947e-02, -7.201e-02, -7.869e-01, 1.866e-01, 1.200e-01, -7.058e-02, 7.277e-02, 3.723e-02, -7.573e-02, 3.051e-02, -1.669e-01, -1.723e-01, -1.986e-01, 7.584e-02, -1.040e-01, -2.982e-01));
	r += mul(s0_4, M4(7.451e-02, -4.826e-02, -1.259e-02, -8.926e-01, 1.533e-01, -2.555e-01, 3.060e-02, -2.716e-01, 3.860e-02, -2.006e-01, 8.660e-03, 2.097e-02, -1.697e-01, 6.789e-02, 1.237e-01, -2.951e-01));
	r += mul(s0_5, M4(-5.970e-03, -5.725e-02, -1.112e-01, -5.856e-02, 1.943e-01, -1.285e-01, -1.072e-01, 4.819e-01, -5.022e-03, -1.929e-01, 1.291e-01, -5.591e-02, -1.133e-01, -4.057e-02, 1.477e-01, 6.643e-01));
	r += mul(s0_6, M4(8.167e-01, 6.417e-02, -1.491e-01, -7.407e-03, -7.348e-02, -1.540e-03, 3.400e-02, 3.682e-02, -9.278e-02, 2.738e-02, 2.494e-02, 5.265e-03, 4.406e-01, -1.841e-01, -8.729e-02, -1.570e-01));
	r += mul(s0_7, M4(-2.008e-01, -8.921e-02, -4.438e-02, 2.278e-01, -4.654e-01, 8.393e-02, -2.366e-01, 4.520e-02, -4.186e-02, 6.864e-02, -9.173e-03, -3.896e-02, -1.063e-01, -3.033e-01, -1.346e-01, 1.635e-02));
	r += mul(s0_8, M4(-2.243e-03, 5.747e-02, 4.189e-02, -2.299e-02, 1.198e-01, 2.353e-01, 3.615e-02, 1.324e-01, -6.812e-02, 4.538e-02, 6.665e-02, 2.105e-02, 9.501e-02, -3.437e-01, -1.906e-01, 6.448e-02));
	r += mul(s1_0, M4(1.144e-04, 2.627e-01, 2.398e-01, -4.466e-02, -1.132e-02, 2.373e-02, 7.814e-02, -1.142e-02, -2.969e-02, 1.033e-01, -1.467e-01, 1.427e-02, 1.804e-01, -1.296e-01, -1.092e-01, -4.871e-02));
	r += mul(s1_1, M4(-7.685e-03, 2.846e-01, 3.545e-01, 8.227e-02, -1.099e-01, -8.288e-02, 7.338e-03, -1.089e-01, 8.444e-03, 5.978e-01, 4.592e-01, -1.545e-01, 3.684e-02, 1.535e-01, 2.806e-01, 4.871e-02));
	r += mul(s1_2, M4(-1.709e-04, 9.237e-03, 1.874e-02, -2.657e-02, -1.631e-01, 4.512e-02, 2.432e-01, 4.404e-02, 1.211e-01, 3.638e-02, 1.425e-01, 2.470e-01, -1.249e-01, 1.960e-01, 1.600e-01, -6.324e-02));
	r += mul(s1_3, M4(1.072e-01, 1.888e-01, -3.441e-01, -1.820e-02, 1.204e-01, 1.023e-02, 3.833e-04, 4.186e-03, 9.875e-02, 3.290e-02, -2.812e-01, -1.085e-01, -1.802e-01, 2.787e-02, -1.079e-01, -2.359e-01));
	r += mul(s1_4, M4(4.570e-02, -4.131e-01, -2.347e-01, -1.208e-01, -1.214e-01, -1.619e-02, 2.900e-02, -2.786e-01, -1.141e-01, -7.816e-02, 3.292e-02, -1.410e-01, -5.391e-02, 1.666e-01, 6.396e-02, 8.547e-02));
	r += mul(s1_5, M4(-1.115e-02, -1.961e-02, -3.311e-02, 2.194e-02, 1.093e-03, 4.942e-02, -9.333e-02, -3.449e-01, 2.368e-01, -2.496e-01, 8.683e-02, 2.774e-01, -1.104e-01, 1.957e-01, 1.552e-01, 1.863e-01));
	r += mul(s1_6, M4(-3.374e-01, 1.077e-01, -2.816e-01, -9.676e-02, -1.260e-01, -2.806e-02, -2.854e-02, 3.553e-02, 1.505e-03, 1.024e-02, 2.202e-02, 1.869e-02, 4.065e-01, -1.687e-01, -1.382e-01, -9.682e-02));
	r += mul(s1_7, M4(-2.329e-01, 1.673e-01, -7.331e-02, -5.471e-02, -2.148e-01, 3.006e-02, 9.543e-02, 2.191e-01, -9.867e-02, 8.830e-02, -2.435e-02, -7.641e-02, 1.051e-01, -2.254e-01, -1.528e-01, 1.535e-01));
	r += mul(s1_8, M4(4.436e-02, 1.596e-03, 1.212e-02, 3.843e-03, -1.798e-02, -1.620e-02, 7.215e-02, 3.584e-01, 1.232e-01, 4.191e-02, 5.274e-02, 5.892e-02, -2.751e-01, -2.445e-01, -1.329e-01, -4.001e-02));
	r += V4(-6.902e-03, -1.886e-02, 1.459e-02, -1.265e-04);
	return r;
}
void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 3
//!DESC CuNNy-8x4C-BILINEAR-CHROMA-NVL-conv2
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(3.937e-02, -4.764e-02, 7.032e-02, -4.274e-02, 5.094e-03, 5.242e-02, 5.284e-02, -1.363e-02, -8.200e-03, 2.649e-03, -1.706e-02, -5.823e-02, -8.406e-02, -7.536e-02, -3.287e-01, 5.735e-02));
	r += mul(s0_1, M4(-8.077e-03, -5.127e-02, 9.641e-02, -5.449e-02, 3.286e-02, 3.723e-02, -9.691e-02, 1.297e-01, 6.369e-02, 9.984e-03, 1.884e-01, -6.387e-02, -2.423e-02, -2.788e-02, -4.794e-01, -8.496e-03));
	r += mul(s0_2, M4(-8.176e-02, -5.765e-02, 1.111e-01, -1.792e-02, -4.966e-02, -2.101e-02, -7.104e-02, 1.112e-02, 1.538e-02, 5.993e-02, 5.314e-02, -9.750e-03, -3.328e-02, 3.568e-02, -9.830e-02, 2.741e-02));
	r += mul(s0_3, M4(-6.100e-02, -1.689e-01, 6.178e-02, 1.624e-01, 7.874e-02, 2.607e-01, 1.130e-01, -1.625e-01, -8.284e-02, -2.064e-01, -2.000e-02, 1.667e-02, -1.638e-01, -3.562e-01, 1.434e-01, -1.193e-01));
	r += mul(s0_4, M4(1.515e-01, -1.162e-01, -2.849e-02, 2.654e-01, 8.909e-02, 4.058e-01, 6.847e-01, 3.188e-01, 7.058e-02, -2.056e-01, 1.081e-01, -1.932e-01, -3.459e-02, 1.098e-01, 3.584e-01, 1.402e-01));
	r += mul(s0_5, M4(-1.417e-01, -2.684e-02, -7.544e-02, 5.655e-02, 6.359e-02, -3.104e-02, 5.551e-02, 8.553e-03, -2.017e-01, 3.192e-02, 1.722e-01, -2.738e-02, 5.499e-02, 7.561e-03, -2.631e-02, 9.776e-02));
	r += mul(s0_6, M4(-3.527e-02, -8.933e-03, -2.797e-02, -3.510e-02, -7.965e-03, 3.362e-03, 1.295e-01, 1.152e-01, 4.502e-02, -2.052e-01, 1.997e-03, 3.521e-01, 1.357e-01, -1.916e-01, 7.235e-02, 2.734e-01));
	r += mul(s0_7, M4(-2.041e-02, -6.716e-02, 5.452e-02, 8.212e-02, 3.600e-01, 8.727e-02, 2.045e-01, 2.185e-01, 1.493e-01, -4.032e-01, -1.032e-01, 6.213e-01, -9.546e-02, 1.313e-01, 3.599e-02, -1.425e-01));
	r += mul(s0_8, M4(4.507e-02, 2.826e-02, -2.978e-02, 1.063e-02, 1.189e-01, 7.479e-02, 1.675e-01, -1.005e-01, 6.584e-02, 7.071e-02, -1.606e-01, -3.194e-02, 1.204e-01, 5.577e-02, -5.353e-02, -4.975e-02));
	r += mul(s1_0, M4(2.403e-01, 2.077e-01, -2.685e-01, 2.837e-01, -4.765e-02, -2.700e-02, 8.015e-02, 2.436e-02, -1.948e-02, -2.726e-02, 3.008e-02, -9.109e-02, 8.856e-02, 9.787e-02, 1.541e-02, 4.045e-02));
	r += mul(s1_1, M4(-9.116e-02, 2.686e-01, -9.870e-02, 9.634e-02, -2.254e-02, -9.843e-02, -2.692e-01, 7.359e-02, 6.255e-02, 1.742e-02, 1.522e-01, -1.093e-01, 6.460e-02, -6.076e-02, 1.831e-01, -5.049e-02));
	r += mul(s1_2, M4(7.314e-02, 6.104e-02, 2.398e-01, 7.437e-03, -8.676e-02, -8.999e-02, -1.626e-01, -2.410e-02, 6.788e-02, 8.521e-02, 8.322e-02, 1.572e-02, -5.082e-02, -1.618e-02, 1.047e-02, -1.404e-02));
	r += mul(s1_3, M4(-1.505e-02, 1.730e-01, 1.871e-01, -2.418e-01, -2.388e-02, -2.677e-02, -1.961e-02, -2.822e-01, -2.698e-02, -1.472e-01, 6.470e-02, 5.021e-02, -1.907e-01, -2.998e-01, 3.426e-01, -2.691e-01));
	r += mul(s1_4, M4(3.390e-01, 1.834e-01, -1.906e-02, -2.789e-01, -1.160e-01, 2.345e-01, 3.007e-03, 3.955e-01, 1.383e-01, -1.209e-01, 2.503e-04, -2.119e-02, -4.451e-01, -2.112e-01, 6.991e-01, 2.075e-01));
	r += mul(s1_5, M4(1.226e-01, -6.412e-02, -8.375e-02, 1.106e-01, 2.447e-01, -5.576e-02, -5.429e-02, -9.552e-02, -3.834e-01, -9.716e-02, 2.120e-01, 9.435e-03, 1.447e-02, -2.483e-02, -1.229e-02, -3.951e-02));
	r += mul(s1_6, M4(-6.358e-02, -2.354e-02, -1.260e-01, -6.856e-02, -2.297e-02, -2.977e-01, -6.165e-02, 4.590e-01, -5.946e-02, -1.644e-01, 8.432e-02, 1.150e-01, -6.699e-02, -1.870e-01, -1.749e-01, 1.783e-01));
	r += mul(s1_7, M4(-2.865e-02, -1.168e-01, -3.628e-02, 5.888e-02, 2.684e-01, 2.050e-02, 1.411e-01, 2.405e-01, -8.995e-03, -5.383e-01, 9.887e-02, 7.929e-01, -2.786e-01, -1.344e-01, -2.034e-02, 7.529e-02));
	r += mul(s1_8, M4(-2.408e-02, -7.983e-02, 9.299e-02, 1.054e-01, 1.286e-01, 3.956e-03, 2.960e-02, -1.653e-02, -1.938e-01, 1.055e-01, -2.077e-01, -1.876e-04, -6.030e-02, 5.028e-02, -3.564e-02, -3.920e-02));
	r += V4(4.250e-03, 1.439e-02, 3.455e-03, 3.172e-03);
	return r;
}
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 4
//!DESC CuNNy-8x4C-BILINEAR-CHROMA-NVL-conv3
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(2.519e-02, -1.106e-01, -2.328e-01, -1.271e-02, -6.304e-02, -8.442e-02, -2.462e-02, -7.331e-02, -1.304e-02, 8.221e-02, 7.109e-02, 5.049e-02, -5.922e-03, -1.267e-02, 7.188e-02, -4.136e-02));
	r += mul(s0_1, M4(-8.504e-02, -1.397e-01, -3.248e-01, -1.455e-01, 5.596e-02, 1.356e-01, 3.017e-01, 2.867e-01, -5.488e-02, -7.993e-02, -8.350e-02, -9.639e-02, 8.853e-02, -5.273e-01, -5.645e-01, -7.680e-01));
	r += mul(s0_2, M4(5.743e-02, -1.295e-01, -3.358e-02, 3.253e-02, -1.277e-02, -3.871e-02, 1.870e-01, 1.659e-01, 1.022e-01, 2.456e-03, -1.378e-02, -3.883e-02, 2.426e-01, -1.090e-01, -1.399e-01, 9.352e-02));
	r += mul(s0_3, M4(2.447e-01, -1.078e-01, -6.543e-01, 2.571e-01, -2.852e-04, 1.861e-02, 3.102e-02, 1.175e-01, -1.116e-02, 1.332e-01, 3.644e-01, 3.308e-02, -7.304e-02, -1.458e-01, 1.577e-01, 3.308e-02));
	r += mul(s0_4, M4(2.368e-01, 4.385e-01, 9.949e-02, 7.980e-02, -5.789e-01, 2.389e-01, -6.859e-01, 2.822e-02, -1.364e-01, 1.013e-01, 1.789e-01, -7.845e-02, -2.111e-01, 4.234e-01, -2.520e-01, 2.034e-01));
	r += mul(s0_5, M4(-9.236e-02, -9.811e-02, -8.130e-02, -1.175e-02, 2.882e-02, 2.114e-02, -1.519e-01, -1.558e-02, 1.011e-01, -6.645e-02, -8.772e-03, -1.820e-02, -1.358e-01, 1.809e-01, 1.449e-01, -1.843e-02));
	r += mul(s0_6, M4(-2.424e-03, 3.926e-01, -9.334e-02, 1.042e-01, -9.741e-02, -1.592e-01, 2.081e-01, -1.480e-01, 2.087e-01, 2.313e-01, 1.714e-02, -1.043e-01, -7.741e-02, -1.212e-01, 1.394e-01, -7.737e-02));
	r += mul(s0_7, M4(-3.152e-01, -7.004e-02, -9.019e-03, 6.902e-02, 2.901e-01, -3.038e-01, 2.607e-01, -3.080e-01, 1.783e-01, -5.018e-02, -2.367e-01, -5.972e-02, 7.948e-02, -1.909e-01, 2.162e-01, -7.456e-02));
	r += mul(s0_8, M4(-1.337e-02, 3.338e-02, 3.470e-02, 4.425e-02, 2.665e-01, 1.295e-02, -4.465e-02, -1.041e-01, 3.264e-02, 4.210e-02, 3.620e-02, 5.997e-02, -2.516e-03, 3.880e-03, -2.511e-02, -1.471e-02));
	r += mul(s1_0, M4(1.578e-01, 1.418e-01, -1.391e-02, 1.240e-01, -4.295e-02, -2.495e-01, 7.600e-02, -3.398e-01, -1.057e-01, 8.130e-02, 8.088e-02, 1.387e-01, -3.168e-02, -9.080e-03, -6.808e-02, 7.202e-02));
	r += mul(s1_1, M4(1.364e-01, -1.999e-01, -6.576e-02, -2.838e-01, 4.879e-02, -1.250e-01, 5.340e-01, 6.367e-01, -1.302e-01, -1.108e-01, -4.404e-02, -9.302e-05, -1.265e-01, -7.743e-02, -3.502e-02, -4.482e-01));
	r += mul(s1_2, M4(2.203e-01, -2.568e-01, 9.722e-02, 2.027e-01, -6.499e-02, -1.374e-01, -2.402e-01, 3.281e-02, 4.260e-02, -6.272e-02, -1.388e-02, 3.083e-02, 4.729e-02, 1.450e-01, 2.329e-01, 3.722e-02));
	r += mul(s1_3, M4(3.619e-01, 3.095e-01, -1.386e-01, 5.292e-02, 9.276e-02, 1.216e-01, -1.569e-01, 1.839e-01, 2.954e-02, -4.128e-02, -4.077e-01, 9.710e-02, -5.154e-02, -4.351e-02, 7.512e-02, 2.685e-02));
	r += mul(s1_4, M4(4.668e-01, 4.443e-01, 2.607e-01, 1.630e-02, -5.004e-01, -1.773e-02, -8.154e-01, -4.479e-02, -3.718e-01, 5.142e-01, -3.162e-02, -1.129e-01, 8.415e-02, 4.893e-01, -5.382e-01, -2.997e-01));
	r += mul(s1_5, M4(1.773e-01, 2.843e-02, 1.958e-02, -1.152e-02, 1.097e-01, 4.131e-03, 1.997e-01, -4.944e-02, -9.417e-02, -1.852e-01, -1.914e-01, -4.001e-02, 2.881e-01, -2.583e-01, -1.557e-01, 1.707e-01));
	r += mul(s1_6, M4(4.391e-02, 6.856e-01, 7.278e-02, 1.905e-01, -1.110e-01, -1.339e-01, 1.553e-01, -8.438e-02, -2.250e-01, -3.623e-01, -8.266e-02, 1.265e-01, -7.593e-02, -9.842e-02, 1.401e-01, -9.781e-02));
	r += mul(s1_7, M4(-2.537e-01, -3.824e-02, 1.738e-01, -1.412e-02, 1.944e-01, -1.790e-01, 3.496e-01, -1.862e-01, -6.584e-02, -1.085e-01, -2.294e-01, -7.831e-03, 1.525e-01, -3.018e-01, 1.538e-01, -1.970e-01));
	r += mul(s1_8, M4(2.671e-01, 1.575e-01, 1.548e-02, -4.819e-02, 2.981e-01, -3.456e-02, -7.017e-02, -9.612e-02, -6.737e-02, -1.278e-01, -5.367e-02, 9.745e-02, 2.154e-01, -4.084e-02, -4.902e-02, -5.236e-02));
	r += V4(7.416e-03, 7.921e-03, -2.627e-03, 1.164e-04);
	return r;
}
void Pass4(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 5
//!DESC CuNNy-8x4C-BILINEAR-CHROMA-NVL-conv4
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(1.484e-01, -7.694e-02, 2.766e-02, -1.021e-01, 4.221e-02, 8.321e-02, 1.112e-02, -9.123e-02, 2.498e-02, -2.565e-01, 4.545e-02, -7.472e-02, -4.770e-02, 7.932e-02, -3.828e-02, 3.621e-02));
	r += mul(s0_1, M4(1.147e-01, 1.368e-01, -9.433e-03, -3.063e-04, -1.073e-02, 1.208e-01, 2.960e-02, 7.970e-03, -1.106e-01, -3.205e-01, -8.911e-02, 8.027e-02, 1.105e-01, 8.044e-04, 8.337e-02, -3.949e-02));
	r += mul(s0_2, M4(1.107e-01, 4.992e-02, 1.410e-02, -8.028e-02, 1.402e-01, 3.229e-02, 2.581e-02, -1.360e-01, -6.595e-02, 5.030e-02, 2.604e-02, 4.938e-02, -4.422e-02, 6.474e-03, -3.731e-02, -9.887e-04));
	r += mul(s0_3, M4(1.996e-01, -2.833e-02, 2.580e-01, 1.677e-01, 3.212e-02, -7.820e-02, -1.144e-03, -5.412e-03, 4.870e-02, 5.770e-03, -8.475e-02, -1.008e-01, -4.576e-02, 6.917e-02, 4.647e-02, -5.436e-02));
	r += mul(s0_4, M4(3.545e-01, -1.614e-01, -5.645e-01, -1.749e-01, -3.681e-02, -1.022e-01, 1.705e-01, -1.450e-01, 2.650e-01, 2.290e-02, -4.024e-01, -1.665e-01, -1.764e-01, -8.325e-02, 9.398e-03, 1.333e-01));
	r += mul(s0_5, M4(-1.635e-02, 1.878e-02, -5.086e-02, 2.171e-01, 1.930e-01, -3.582e-02, -2.394e-01, 1.919e-02, -1.209e-01, 6.440e-02, 2.796e-01, -5.640e-02, 1.763e-01, -1.324e-01, -1.006e-01, -3.014e-01));
	r += mul(s0_6, M4(1.557e-01, -1.332e-02, 1.051e-01, -9.772e-02, -4.996e-02, -7.693e-02, -1.210e-01, -1.313e-01, 2.853e-02, -4.276e-03, 6.586e-02, -1.164e-01, 9.822e-02, 6.744e-02, 1.795e-01, 2.211e-01));
	r += mul(s0_7, M4(1.531e-01, 6.313e-02, 1.870e-01, 6.529e-02, 9.155e-02, -8.937e-02, -1.469e-01, -1.076e-01, 1.034e-02, 8.922e-02, 2.199e-01, 3.107e-01, 1.440e-01, 4.342e-02, 2.245e-01, 5.530e-01));
	r += mul(s0_8, M4(-1.206e-01, -3.137e-02, -5.251e-02, 6.184e-03, 9.334e-02, -2.768e-02, -7.856e-02, 8.156e-02, -1.753e-01, 6.505e-02, 9.580e-02, -1.585e-02, 1.013e-01, 5.866e-04, 1.484e-02, 2.959e-02));
	r += mul(s1_0, M4(1.086e-01, -2.445e-01, 9.427e-02, -1.336e-01, 6.369e-02, 3.055e-02, 3.691e-02, -6.812e-02, 1.214e-01, -2.575e-01, 8.235e-02, -1.224e-01, -6.909e-02, 6.711e-02, -5.016e-02, 4.089e-02));
	r += mul(s1_1, M4(-1.294e-01, -1.348e-01, -6.916e-02, 1.439e-01, -1.331e-01, 4.561e-01, -1.351e-01, 1.404e-01, -1.191e-02, -4.951e-01, 6.044e-03, -2.572e-02, -6.047e-02, 9.753e-02, 6.707e-02, 6.098e-02));
	r += mul(s1_2, M4(1.066e-01, -1.534e-02, 3.287e-02, -1.155e-01, 1.949e-01, 3.243e-01, 1.659e-01, -1.180e-01, 3.275e-02, 4.829e-02, -4.456e-02, -4.380e-02, -6.255e-02, -1.135e-01, -7.566e-03, 4.795e-02));
	r += mul(s1_3, M4(1.364e-01, -2.142e-01, 1.230e-01, 1.618e-01, 1.059e-01, 2.151e-01, -4.555e-02, -3.909e-02, 1.795e-02, 5.510e-02, -1.333e-01, -7.581e-02, -5.829e-02, -1.304e-01, 5.779e-02, 7.539e-02));
	r += mul(s1_4, M4(3.274e-01, -3.432e-01, -7.716e-01, -3.760e-01, 2.980e-02, 3.271e-01, 5.020e-01, -2.392e-02, 6.148e-01, -4.901e-01, -1.696e-01, -5.312e-01, -2.251e-01, -1.900e-01, -7.809e-02, 2.408e-01));
	r += mul(s1_5, M4(1.329e-02, 1.370e-02, -9.255e-02, 1.055e-01, 3.196e-02, 1.719e-01, -4.901e-05, 2.241e-01, 3.233e-01, 6.724e-02, 7.002e-02, -3.091e-01, -1.721e-01, -2.406e-01, -2.017e-01, -4.333e-02));
	r += mul(s1_6, M4(3.120e-02, -2.870e-02, 4.287e-03, -6.197e-02, 5.467e-02, 6.264e-02, 6.611e-02, -1.013e-02, 2.816e-02, -5.570e-03, 6.869e-02, -1.634e-01, 2.852e-02, -2.103e-02, 5.503e-02, 1.048e-01));
	r += mul(s1_7, M4(4.978e-02, 1.790e-02, 7.755e-02, 1.950e-01, 6.950e-02, 5.543e-02, 3.117e-02, 3.951e-02, 1.538e-01, 1.301e-02, 9.424e-02, 6.489e-02, 3.132e-02, -1.576e-02, 4.773e-02, 7.228e-01));
	r += mul(s1_8, M4(-4.067e-02, 7.935e-03, -1.628e-02, 1.063e-02, 2.005e-01, 9.810e-02, 2.666e-01, -3.903e-01, 1.639e-01, 6.006e-04, 6.190e-03, 1.278e-02, -6.221e-02, -8.637e-02, -4.455e-02, 1.081e-02));
	r += V4(1.716e-04, 2.949e-03, 7.855e-03, 5.542e-03);
	return r;
}
void Pass5(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 6
//!DESC CuNNy-8x4C-BILINEAR-CHROMA-NVL-conv5
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-2.245e-01, -3.749e-02, -7.025e-02, -3.483e-01, -5.237e-02, -1.090e-02, -2.424e-02, 3.861e-02, -9.366e-02, 1.294e-01, -4.663e-02, -2.347e-02, -5.949e-02, -3.294e-02, 1.514e-01, -2.568e-01));
	r += mul(s0_1, M4(-8.486e-02, -1.027e-01, -2.783e-01, -2.959e-01, 8.467e-02, 6.440e-02, 3.359e-02, 1.370e-01, -1.401e-01, 3.309e-01, -2.954e-01, 1.211e-01, 2.937e-01, -3.075e-02, -7.169e-01, 8.186e-02));
	r += mul(s0_2, M4(-7.788e-02, 1.313e-01, 3.239e-03, 3.126e-02, -2.858e-02, -6.148e-02, 8.029e-02, -6.525e-02, -3.638e-02, 1.409e-01, -9.620e-02, 3.502e-02, -8.268e-02, -8.586e-02, 9.527e-02, -7.107e-02));
	r += mul(s0_3, M4(-1.899e-01, 1.329e-01, -2.821e-01, -6.512e-01, 1.759e-02, -9.290e-02, 5.306e-02, 1.411e-01, -5.164e-02, 5.826e-02, 1.802e-01, 4.326e-01, 2.257e-02, -6.433e-02, -9.996e-02, -1.656e-01));
	r += mul(s0_4, M4(-5.214e-01, 7.375e-01, 4.634e-01, -2.234e-01, -1.776e-02, -1.709e-01, 4.052e-01, -2.856e-01, 9.729e-02, -1.371e-01, -2.900e-01, -1.392e-01, 9.280e-02, 1.913e-01, -4.923e-02, -9.624e-02));
	r += mul(s0_5, M4(-2.704e-02, 2.998e-01, -2.686e-01, -8.481e-02, -5.595e-02, -1.291e-01, 9.896e-02, 8.722e-02, 2.360e-02, 1.084e-01, -8.094e-02, -5.430e-02, -6.040e-02, 9.224e-02, -1.278e-01, -7.197e-02));
	r += mul(s0_6, M4(-1.305e-01, -1.508e-02, 3.002e-02, -7.216e-03, 5.072e-02, -4.423e-02, -5.715e-02, -1.333e-01, -7.689e-02, 5.355e-02, 1.743e-01, 1.016e-01, 5.484e-02, 5.573e-04, -1.159e-03, 4.724e-02));
	r += mul(s0_7, M4(-4.254e-01, -3.241e-01, -5.345e-02, -2.912e-01, -4.026e-02, 1.274e-01, -1.627e-01, -1.704e-01, -5.212e-02, -1.135e-01, 3.487e-03, 6.094e-02, -2.706e-02, -2.045e-02, -3.036e-02, -2.304e-02));
	r += mul(s0_8, M4(8.977e-02, 1.516e-01, -1.744e-02, 3.582e-02, -1.289e-01, -3.655e-02, 4.123e-02, -4.571e-04, 6.244e-02, 5.542e-02, -3.841e-02, -2.013e-02, 6.308e-03, -3.997e-03, -3.181e-02, -1.506e-02));
	r += mul(s1_0, M4(5.573e-02, -2.053e-02, 1.219e-01, 2.960e-02, -7.886e-02, 1.899e-02, 5.025e-02, -1.017e-01, -5.470e-02, 9.863e-02, -1.192e-01, -6.730e-02, -9.454e-02, -1.276e-01, 8.497e-02, -1.778e-01));
	r += mul(s1_1, M4(1.950e-01, -9.427e-02, -3.936e-01, 2.929e-02, 1.780e-02, 7.380e-02, -2.807e-02, 4.828e-02, -1.143e-01, 4.514e-01, -3.895e-01, -4.054e-02, 3.431e-01, -3.224e-01, -3.425e-01, 2.172e-01));
	r += mul(s1_2, M4(-7.663e-02, 7.754e-02, -2.193e-03, -1.372e-01, 1.277e-01, -2.109e-01, 7.952e-02, 1.673e-01, -1.087e-01, 1.952e-01, -1.220e-01, -7.010e-02, -1.160e-02, 2.380e-02, 1.668e-02, 6.488e-03));
	r += mul(s1_3, M4(4.156e-02, -8.025e-04, -1.231e-01, -3.574e-01, -2.827e-02, -1.233e-01, 2.861e-02, 4.873e-01, -2.065e-01, -1.645e-01, 2.509e-01, 4.287e-01, 1.607e-01, 3.492e-02, -9.757e-02, -4.451e-02));
	r += mul(s1_4, M4(-3.632e-01, 2.124e-01, 1.165e-01, -3.375e-02, 6.460e-01, -7.299e-01, 6.254e-01, 4.458e-01, 3.702e-01, -3.722e-01, -3.838e-01, 1.745e-01, 5.100e-01, 9.708e-02, -2.460e-01, 2.065e-01));
	r += mul(s1_5, M4(-8.326e-03, -2.369e-02, -1.301e-01, 1.430e-02, 1.716e-01, 4.747e-02, 9.011e-02, 2.554e-01, -1.170e-02, 3.691e-02, -2.782e-02, -1.919e-01, 2.163e-02, -6.342e-02, -9.348e-02, -1.008e-01));
	r += mul(s1_6, M4(1.294e-01, 6.534e-03, -8.140e-02, -1.248e-02, 8.670e-02, 6.463e-03, -2.635e-01, -3.417e-01, 1.889e-02, 5.183e-02, 9.248e-02, 1.192e-01, -1.407e-02, -1.749e-02, -2.231e-02, -2.441e-02));
	r += mul(s1_7, M4(-4.023e-03, 5.197e-02, -5.186e-02, -5.314e-02, 2.022e-01, 4.384e-01, -1.029e-01, -2.558e-01, -2.036e-01, -2.587e-01, 4.497e-02, 1.979e-02, 2.642e-02, 2.554e-02, -1.350e-05, 3.351e-02));
	r += mul(s1_8, M4(2.573e-02, 5.301e-02, 3.375e-02, 2.289e-02, -2.775e-01, 1.202e-01, 3.006e-02, -1.487e-01, -9.737e-03, -2.851e-02, -6.861e-02, -1.837e-02, -7.835e-02, -1.434e-01, -7.230e-02, -4.994e-02));
	r += V4(6.067e-04, -9.839e-03, 9.167e-03, -3.531e-04);
	return r;
}
void Pass6(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 7
//!DESC CuNNy-8x4C-BILINEAR-CHROMA-NVL-conv6
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-3.891e-01, 6.018e-02, 1.539e-02, 9.439e-02, 1.302e-01, 1.408e-02, 9.452e-02, 1.272e-02, 1.679e-02, 1.906e-02, 4.406e-02, 3.281e-02, 1.626e-01, -3.972e-02, -6.845e-02, -7.997e-02));
	r += mul(s0_1, M4(-3.056e-01, 3.666e-02, 1.099e-01, -8.657e-02, -1.265e-01, 1.159e-01, 3.154e-01, -5.925e-02, 1.129e-02, 1.945e-02, 9.693e-02, -9.566e-02, 2.157e-01, -1.391e-01, -2.263e-01, -3.473e-02));
	r += mul(s0_2, M4(-1.029e-01, 4.111e-01, 1.479e-01, 1.686e-01, -8.089e-03, 2.415e-01, 1.405e-01, -1.989e-02, 4.388e-02, 1.087e-01, 9.423e-02, 5.783e-03, 1.098e-01, -3.450e-01, -9.545e-02, 1.508e-01));
	r += mul(s0_3, M4(3.853e-02, -8.931e-02, -2.134e-01, -4.472e-02, -6.714e-02, 9.653e-02, 5.189e-02, 1.032e-01, 1.111e-01, -2.161e-02, -3.195e-02, -4.780e-02, -5.562e-03, 4.790e-02, 8.687e-02, 9.685e-02));
	r += mul(s0_4, M4(-5.761e-01, -1.880e-01, -1.001e+00, 3.249e-02, 7.989e-02, -1.145e-01, -2.568e-01, -2.783e-01, 1.198e-01, -2.762e-02, -7.897e-02, 1.679e-01, 1.775e+00, 1.901e-01, 2.913e-01, 1.227e-01));
	r += mul(s0_5, M4(-7.737e-02, -1.236e-01, -1.192e-02, 4.634e-01, 3.193e-02, -3.863e-01, 2.070e-02, -1.271e-01, 6.963e-02, -4.378e-01, 7.474e-02, -3.494e-01, 3.762e-02, -1.916e-01, 1.931e-02, 9.463e-02));
	r += mul(s0_6, M4(-2.904e-01, 5.815e-02, 9.761e-02, -2.096e-02, -2.440e-02, -1.104e-01, -2.627e-01, -2.008e-02, -6.871e-03, -2.150e-03, 1.038e-01, 7.890e-03, -2.209e-01, -2.022e-02, -1.766e-01, 6.514e-03));
	r += mul(s0_7, M4(1.451e-02, -7.064e-02, 1.779e-01, 3.733e-01, 3.924e-02, 4.878e-03, -1.761e-01, 5.042e-02, -3.900e-01, 3.944e-03, 2.259e-01, 6.323e-02, 6.087e-02, -1.968e-01, -2.666e-01, 9.054e-02));
	r += mul(s0_8, M4(7.939e-03, 1.030e-01, -1.361e-01, -1.878e-01, -1.944e-02, 6.608e-02, 1.935e-01, -8.492e-02, -7.246e-02, -2.588e-01, 3.025e-01, 2.765e-01, 4.763e-02, -2.282e-02, -1.215e-01, -2.588e-01));
	r += mul(s1_0, M4(2.563e-02, 5.093e-02, 1.807e-01, 6.477e-02, -1.889e-02, 3.061e-02, 4.135e-02, 1.322e-02, 1.563e-02, 1.255e-02, 7.157e-02, 1.887e-02, 1.300e-02, -1.607e-02, -4.630e-02, -2.017e-02));
	r += mul(s1_1, M4(-2.522e-01, 1.928e-01, 3.021e-01, -3.718e-02, -7.565e-02, 4.096e-02, 2.163e-01, -6.278e-02, -4.784e-02, 5.684e-02, 8.987e-02, -6.061e-02, 1.549e-01, -3.494e-02, -9.807e-02, 2.454e-03));
	r += mul(s1_2, M4(2.728e-02, 2.327e-01, 9.253e-02, -6.057e-02, -2.629e-02, 2.233e-01, 9.003e-02, 5.452e-02, -1.549e-02, 5.916e-02, 2.001e-02, 3.504e-02, -1.772e-02, -1.395e-01, 1.702e-02, 3.151e-02));
	r += mul(s1_3, M4(5.648e-03, -1.234e-01, -1.421e-01, -1.695e-01, -2.737e-01, 1.324e-01, -3.016e-02, 2.350e-01, 7.121e-02, -7.987e-03, -3.012e-02, -9.546e-02, 1.790e-02, 5.802e-02, 2.127e-02, 8.911e-02));
	r += mul(s1_4, M4(-3.742e-02, -1.636e-01, -2.862e-01, 4.264e-01, -2.694e-04, -3.274e-01, -2.445e-01, -3.467e-01, -9.407e-02, -2.668e-02, -1.182e-01, 2.728e-01, 2.211e-01, 2.079e-01, -4.098e-02, -6.005e-02));
	r += mul(s1_5, M4(-2.436e-02, 5.097e-01, 4.085e-01, 2.975e-01, 3.689e-03, -3.397e-02, 4.115e-02, 1.772e-01, -5.341e-02, -5.267e-01, -1.284e-01, -3.846e-01, -3.574e-02, -6.723e-01, -2.355e-01, -2.838e-01));
	r += mul(s1_6, M4(-5.434e-02, 7.325e-02, 1.290e-01, 2.521e-02, -5.189e-02, -1.192e-01, -1.616e-01, 9.343e-02, -1.823e-01, 4.067e-02, 6.127e-02, 2.387e-02, 5.391e-03, -3.138e-02, -1.123e-01, -3.946e-02));
	r += mul(s1_7, M4(7.642e-02, -6.597e-03, 2.888e-01, 1.899e-01, 4.664e-02, 7.872e-02, -2.204e-01, -1.048e-01, -3.156e-01, -3.991e-02, 2.328e-01, 4.691e-01, -1.695e-01, -1.151e-01, -4.896e-01, -2.143e-01));
	r += mul(s1_8, M4(1.383e-02, -5.720e-02, 1.017e-02, -2.749e-02, 2.126e-03, -3.230e-02, 7.222e-02, 1.058e-01, -6.372e-02, -2.202e-01, 3.159e-01, -8.001e-02, -4.481e-04, -4.487e-02, -2.412e-01, 6.752e-02));
	r += V4(2.509e-03, -6.122e-03, -2.273e-03, -5.539e-03);
	return r;
}
void Pass7(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 8
//!DESC CuNNy-8x4C-BILINEAR-CHROMA-NVL-conv7
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-1.811e-02, 1.340e-03, -1.117e-02, 1.363e-02, 6.438e-03, 3.327e-02, -1.356e-01, 1.525e-04, 1.052e-02, -2.730e-02, 1.885e-02, 2.851e-02, -9.077e-02, 9.263e-02, 3.551e-02, 1.111e-02));
	r += mul(s0_1, M4(9.903e-03, -1.504e-03, 1.052e-02, -8.512e-02, -5.503e-02, 8.039e-02, -4.355e-03, -9.129e-02, 1.917e-02, 1.253e-01, -4.219e-02, 1.265e-01, -7.446e-02, -2.124e-01, 2.052e-02, -5.865e-02));
	r += mul(s0_2, M4(-5.359e-02, 4.239e-02, 8.138e-03, 4.515e-02, 3.810e-03, 3.054e-02, -2.108e-02, 3.206e-02, -2.992e-02, -1.135e-01, 9.393e-02, -1.109e-01, -1.373e-01, 2.128e-02, 4.646e-02, 3.344e-02));
	r += mul(s0_3, M4(-3.210e-02, 9.094e-03, -3.343e-02, -1.051e-03, 6.470e-02, 5.589e-01, -2.783e-01, 2.149e-02, -3.979e-02, 4.555e-02, -1.362e-01, -2.876e-02, 2.328e-02, 2.552e-01, 3.664e-01, -3.622e-01));
	r += mul(s0_4, M4(-4.913e-03, 2.850e-02, 5.611e-02, -2.446e-01, -1.573e+00, 1.955e-02, -3.584e-01, -1.234e-01, 1.615e-01, -6.562e-01, 4.210e-01, -1.470e-01, 5.848e-02, 4.372e-01, 1.325e+00, 1.014e+00));
	r += mul(s0_5, M4(-7.309e-02, 6.005e-01, -9.028e-03, 1.958e-01, -2.941e-03, 8.861e-03, -1.150e-01, 2.337e-03, -6.484e-02, 5.897e-02, 2.431e-02, 3.477e-02, 7.051e-02, 1.057e-01, 1.223e-02, 1.961e-01));
	r += mul(s0_6, M4(4.708e-03, -2.349e-02, 2.472e-02, -1.800e-02, 1.174e-02, -7.610e-02, 3.377e-02, 2.975e-03, 4.114e-02, 1.403e-02, 9.181e-03, -2.122e-03, -3.192e-02, 3.796e-02, 1.537e-01, -5.214e-02));
	r += mul(s0_7, M4(1.287e-02, 8.911e-02, 7.241e-02, 5.956e-03, 1.311e-01, -2.646e-01, 7.336e-02, -9.392e-03, -6.569e-02, 3.704e-02, -6.814e-02, 7.553e-03, -1.210e-01, 7.987e-02, 6.001e-03, 1.314e-01));
	r += mul(s0_8, M4(-6.456e-02, 6.608e-02, -1.737e-02, 3.654e-02, 3.930e-02, -5.601e-02, 1.730e-02, -2.617e-05, -1.285e-02, 1.940e-02, -1.427e-02, 7.128e-03, -6.861e-02, 4.131e-02, -2.982e-02, -3.284e-03));
	r += mul(s1_0, M4(-3.938e-03, 5.738e-04, -4.271e-02, 3.888e-02, -5.865e-02, -8.609e-02, 1.559e-02, -2.993e-02, 9.296e-02, 5.081e-02, 3.795e-02, -7.201e-03, -3.055e-02, 7.259e-03, -4.963e-02, 5.199e-02));
	r += mul(s1_1, M4(-2.284e-02, -1.968e-02, -9.945e-03, 9.813e-02, -9.520e-03, 9.618e-02, 6.462e-02, -1.038e-01, -2.322e-04, -1.285e-01, -5.576e-01, 1.676e+00, 2.611e-02, -7.637e-02, -3.947e-02, 3.118e-02));
	r += mul(s1_2, M4(-4.896e-02, -8.249e-02, 7.762e-02, 8.179e-02, 2.586e-02, 8.056e-03, -9.971e-03, 3.242e-02, -1.449e-02, -9.203e-02, 1.146e-01, -3.002e-02, -7.192e-02, 2.725e-02, 2.252e-02, -3.285e-02));
	r += mul(s1_3, M4(8.290e-03, -5.997e-02, -3.183e-02, 4.142e-02, -8.569e-02, 2.529e-01, -1.745e-01, 9.987e-02, -2.289e-02, 7.049e-02, -1.079e-01, -1.941e-02, 7.055e-02, 1.290e-02, 1.110e-01, -1.058e-01));
	r += mul(s1_4, M4(-3.351e-02, 5.407e-02, -9.364e-02, -1.973e-01, -5.433e-01, 8.340e-02, -1.284e-01, -2.131e-01, -1.387e-02, -3.504e-01, 1.542e-01, -4.293e-03, 1.138e-01, 2.349e-01, 3.268e-01, 8.655e-02));
	r += mul(s1_5, M4(1.792e-01, 7.962e-01, 3.625e-01, 6.816e-01, 9.542e-03, 3.551e-02, -4.529e-02, -5.791e-02, -7.742e-02, 2.405e-01, -7.987e-02, 4.347e-02, 3.816e-02, -3.256e-03, 8.672e-02, 2.853e-02));
	r += mul(s1_6, M4(1.370e-02, 5.857e-03, 2.757e-02, -3.221e-03, 2.445e-02, -7.265e-02, 2.131e-02, 2.145e-02, 3.318e-02, 7.642e-02, 1.512e-02, 8.513e-03, -2.735e-02, 2.195e-02, -2.961e-02, 5.536e-03));
	r += mul(s1_7, M4(2.941e-02, 6.522e-02, 8.309e-02, -2.316e-02, 4.581e-03, -2.920e-01, 1.499e-01, -7.680e-02, -4.408e-03, 3.871e-02, 4.182e-02, 4.341e-02, -3.211e-02, -1.110e-01, 8.875e-03, -4.118e-02));
	r += mul(s1_8, M4(-1.173e-01, 1.106e-01, -2.092e-01, 7.256e-02, -9.500e-03, -2.592e-02, 7.693e-02, -2.047e-02, 5.047e-03, -6.804e-03, -1.552e-02, -7.876e-04, -1.079e-02, -6.214e-02, -2.233e-02, 2.585e-02));
	r += V4(-6.912e-03, 3.562e-03, -1.505e-04, -2.934e-03);
	return r;
}
void Pass8(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 9
//!DESC CuNNy-8x4C-BILINEAR-CHROMA-NVL-conv8
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-1.183e-01, 4.957e-02, 3.892e-02, -5.471e-02, -3.042e-03, -4.454e-02, -2.173e-03, -8.474e-04, -4.528e-02, -4.051e-02, -5.125e-03, -3.563e-03, -8.384e-02, -1.414e-02, 1.276e-02, -5.667e-02));
	r += mul(s0_1, M4(-3.545e-01, 1.975e-02, 2.466e-01, -5.130e-02, -6.910e-02, 3.016e-02, 1.422e-02, -1.703e-02, -1.390e-01, -3.258e-03, 1.392e-01, -7.007e-02, -9.429e-02, -6.094e-02, 8.197e-02, 5.822e-02));
	r += mul(s0_2, M4(-2.405e-02, -1.184e-01, -9.253e-02, -6.226e-02, -4.948e-03, -1.984e-02, -1.856e-02, -1.961e-02, 4.087e-02, 1.078e-02, -1.127e-01, 3.793e-02, -3.020e-02, 3.744e-02, 2.595e-02, 5.751e-02));
	r += mul(s0_3, M4(-4.893e-01, -2.607e-01, 2.364e-01, 1.548e-01, 1.870e-02, 1.156e-01, 8.759e-03, -2.032e-02, -1.219e-01, -6.372e-02, 4.118e-03, -7.683e-03, -5.095e-01, -1.265e-01, 1.571e-01, -8.368e-03));
	r += mul(s0_4, M4(1.738e+00, 5.152e-01, -1.638e-01, -1.273e+00, 1.772e-01, 2.811e-01, -3.366e-01, 2.764e-01, 5.567e-01, -7.476e-01, 5.000e-02, 4.575e-02, -5.418e-01, -6.285e-01, 7.101e-01, 1.601e+00));
	r += mul(s0_5, M4(3.038e-01, 1.314e-01, 8.537e-02, 1.804e-02, 1.052e-01, 5.443e-02, 5.760e-02, -5.426e-02, -1.218e-01, 1.474e-03, -1.042e-01, 6.613e-04, -1.670e-01, -1.555e-01, -9.298e-02, 7.532e-02));
	r += mul(s0_6, M4(-8.984e-02, -5.838e-04, -1.018e-01, 5.068e-02, 7.198e-02, 2.156e-02, 2.214e-02, -2.409e-02, -8.276e-02, 5.600e-02, 1.129e-01, 3.919e-02, -1.577e-01, -2.753e-02, 1.122e-02, -9.607e-02));
	r += mul(s0_7, M4(-3.464e-01, -7.300e-02, -3.157e-01, 5.171e-05, -7.692e-02, -1.345e-01, -3.987e-01, 9.921e-02, -1.274e-01, -3.193e-02, -4.720e-01, 1.180e-01, -2.212e-01, 1.085e-01, 5.069e-01, -2.668e-02));
	r += mul(s0_8, M4(1.346e-01, 5.433e-02, 1.530e-02, 5.419e-02, 1.228e-01, -8.015e-04, 5.710e-02, -9.357e-03, 6.297e-02, -4.016e-02, -3.405e-02, 2.525e-03, -4.312e-01, -5.483e-02, -2.237e-01, 2.575e-02));
	r += mul(s1_0, M4(5.354e-02, 9.365e-02, -7.412e-02, 5.880e-02, -1.860e-01, -1.048e-01, -1.264e-02, 5.146e-03, 7.928e-02, 3.269e-04, -1.034e-02, 4.928e-02, -1.572e-02, -8.832e-03, 2.986e-03, -1.599e-03));
	r += mul(s1_1, M4(1.173e-02, 1.139e-01, 7.242e-02, 3.035e-02, -2.881e-01, -3.049e-01, 1.121e-01, -6.445e-02, 1.343e-01, 1.195e-01, -3.942e-02, 7.934e-02, -2.754e-02, 3.656e-03, 3.162e-02, -1.447e-02));
	r += mul(s1_2, M4(4.143e-03, 1.210e-02, 1.788e-02, 1.456e-04, -1.497e-01, -2.716e-02, -1.208e-02, -3.780e-02, 3.810e-02, -6.544e-02, -4.409e-02, -3.903e-02, -2.173e-03, -2.151e-02, -2.191e-02, -8.325e-04));
	r += mul(s1_3, M4(-5.954e-02, -4.108e-02, -1.243e-01, 3.976e-02, 1.735e-02, 3.625e-02, -5.433e-02, -1.076e-01, -1.113e-01, 1.199e-01, 1.389e-01, 3.205e-02, -6.092e-02, 8.783e-03, 2.879e-02, -2.356e-02));
	r += mul(s1_4, M4(3.447e-01, -2.949e-02, -2.397e-01, 1.421e-01, 1.837e-01, 9.668e-01, 1.158e+00, 1.576e-01, -3.056e-01, -2.388e-01, -9.495e-03, -1.186e-01, 7.838e-02, -1.676e-01, -4.408e-02, 9.546e-02));
	r += mul(s1_5, M4(1.130e-01, 3.034e-02, 2.959e-02, 3.405e-02, -1.116e-01, -4.703e-02, 2.349e-03, -1.880e-01, 1.270e-01, -9.587e-02, -5.708e-02, 2.554e-02, 1.353e-01, -2.577e-02, 3.965e-03, 5.152e-02));
	r += mul(s1_6, M4(-3.748e-02, 6.185e-03, -1.228e-01, 4.061e-02, 1.905e-01, 8.325e-02, 1.279e-02, 2.294e-02, 5.704e-03, -7.928e-03, -9.588e-03, -3.201e-02, -6.911e-02, -4.247e-02, 9.489e-02, -3.853e-02));
	r += mul(s1_7, M4(-1.279e-01, -8.264e-03, -2.036e-01, 2.741e-02, -2.072e-01, -9.802e-02, -4.560e-01, 8.743e-02, 2.283e-01, -1.584e-02, 3.827e-02, 3.914e-02, -8.498e-02, 1.259e-01, 6.387e-01, -1.333e-01));
	r += mul(s1_8, M4(-3.435e-02, -2.115e-03, -4.895e-02, 2.205e-02, 1.921e-01, 2.734e-02, 1.641e-01, -3.869e-02, -1.157e-01, 1.061e-01, 2.880e-02, 3.905e-02, -2.485e-01, 2.696e-03, -6.958e-02, 8.584e-03));
	r += V4(-4.601e-03, -3.288e-03, -2.164e-03, 1.688e-03);
	return r;
}
void Pass9(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 10
//!DESC CuNNy-8x4C-BILINEAR-CHROMA-NVL-out
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-1.497e-01, -7.102e-02, 3.407e-03, 9.036e-03, 1.822e-01, 5.455e-02, 1.080e-02, -1.434e-02, -1.587e-01, 1.391e-02, -1.848e-02, -9.826e-03, 1.091e-01, -4.109e-02, -4.088e-02, -7.423e-03));
	r += mul(s0_1, M4(-1.583e-01, -1.988e-01, -7.770e-02, -3.593e-02, 1.382e-01, 1.988e-01, -7.353e-02, -8.253e-03, -1.165e-01, -1.813e-01, -1.479e-01, -1.052e-01, -7.592e-02, 4.065e-02, -3.675e-02, 7.204e-02));
	r += mul(s0_2, M4(2.939e-02, 9.070e-03, 2.594e-02, 4.133e-03, -2.581e-02, 9.703e-03, 1.899e-02, -3.454e-02, -7.495e-02, -4.700e-02, -3.106e-02, 1.373e-02, -9.331e-03, 4.342e-02, 1.704e-02, 1.744e-03));
	r += mul(s0_3, M4(1.919e-01, -5.458e-02, -2.768e-01, -6.114e-02, -1.850e-02, 5.059e-02, 3.951e-01, 9.218e-02, -7.152e-02, -7.841e-02, -2.510e-01, -2.860e-02, -3.855e-01, 1.861e-01, 1.179e-01, 8.990e-02));
	r += mul(s0_4, M4(5.936e-02, 3.506e-01, -4.541e-01, -8.575e-01, -1.684e+00, -9.587e-01, 6.309e-01, 9.443e-01, 6.340e-01, -7.547e-01, 7.090e-01, -3.779e-01, -7.319e-02, -4.053e-01, -1.710e-01, -3.374e-01));
	r += mul(s0_5, M4(-1.036e-02, -2.092e-02, -5.902e-03, 2.548e-02, 2.163e-01, -2.609e-01, 2.931e-02, 1.149e-01, -9.194e-02, 9.204e-02, -8.080e-02, -6.502e-02, -3.772e-02, -5.603e-02, -2.804e-02, -1.703e-02));
	r += mul(s0_6, M4(-2.285e-02, -1.256e-02, -3.531e-02, -1.063e-02, 1.468e-04, 5.238e-02, 6.979e-02, 1.939e-02, -8.382e-02, 2.354e-02, 1.465e-02, -5.535e-02, 3.082e-02, 7.838e-03, -1.731e-01, 5.295e-02));
	r += mul(s0_7, M4(-2.033e-02, 7.376e-03, 2.547e-02, 2.500e-02, -1.303e-01, -1.262e-01, -8.480e-02, 6.485e-02, 2.126e-03, 1.102e-01, -7.495e-02, -1.365e-01, -3.918e-02, 3.810e-02, -7.993e-02, -4.895e-02));
	r += mul(s0_8, M4(-4.001e-03, -1.617e-02, -3.410e-03, 3.732e-02, 6.142e-02, -3.897e-02, 8.444e-02, 2.229e-02, -2.399e-02, -2.038e-03, -1.674e-02, 3.402e-02, -1.874e-02, -1.104e-03, -4.483e-02, -2.727e-02));
	r += mul(s1_0, M4(-9.399e-02, -1.960e-02, -6.996e-03, -1.060e-02, 1.372e-01, 5.190e-02, 4.296e-02, 2.704e-02, -2.446e-02, -2.508e-02, -9.057e-03, -4.707e-03, -5.531e-02, 4.678e-02, -3.453e-03, 2.379e-02));
	r += mul(s1_1, M4(-2.803e-01, -1.890e-01, -8.810e-02, -3.033e-03, -5.397e-03, 2.001e-01, 6.274e-02, 3.971e-02, -2.881e-01, -1.741e-01, -5.776e-02, 6.567e-02, 3.369e-01, 2.832e-02, -1.131e-02, -2.504e-02));
	r += mul(s1_2, M4(3.553e-02, 6.149e-02, 2.998e-02, 1.271e-02, 5.362e-02, -1.948e-02, 4.519e-02, -4.676e-02, -5.764e-02, -5.098e-02, -3.746e-02, 7.703e-03, 4.917e-02, 3.495e-02, -3.727e-03, 1.716e-02));
	r += mul(s1_3, M4(-2.241e-02, -4.013e-02, -1.482e-01, -2.374e-02, 1.071e-01, 6.274e-02, 2.437e-01, 4.052e-02, -1.313e-01, -2.093e-02, -1.812e-01, -1.403e-02, -1.978e-03, 4.258e-02, -1.214e-01, 2.606e-02));
	r += mul(s1_4, M4(-2.173e-01, -4.377e-02, -3.677e-01, -1.625e-01, -2.874e-01, -2.530e-01, -4.952e-01, 6.763e-02, 1.890e-01, 1.143e-01, 1.605e-01, -3.496e-01, -2.105e-01, -9.977e-01, 7.559e-01, -6.939e-01));
	r += mul(s1_5, M4(-1.456e-02, -2.228e-02, 2.794e-02, 4.770e-02, 6.474e-02, -1.923e-02, 7.837e-02, -1.158e-01, -4.275e-02, 1.628e-03, -1.140e-01, 5.584e-02, -7.731e-02, -6.811e-02, -3.727e-03, 1.255e-01));
	r += mul(s1_6, M4(-1.780e-02, -1.246e-03, -1.639e-02, -9.386e-03, 1.501e-02, 3.021e-02, 9.941e-02, 4.627e-02, -3.899e-03, -5.674e-03, -4.994e-02, -4.800e-03, 2.982e-02, -1.301e-02, 9.581e-02, 2.976e-02));
	r += mul(s1_7, M4(6.010e-03, 4.041e-02, -4.042e-02, 1.114e-03, 3.670e-03, -4.089e-02, -3.576e-02, -1.105e-01, -2.252e-02, 4.147e-03, -1.739e-02, 5.834e-02, 1.208e-01, 9.873e-02, -1.688e-01, -1.660e-01));
	r += mul(s1_8, M4(3.005e-04, 5.413e-03, 1.651e-05, -1.745e-02, 1.939e-02, 6.473e-03, 4.457e-02, 2.667e-02, -8.455e-03, -1.617e-03, -1.914e-02, -7.107e-03, -9.543e-03, 3.859e-02, -9.205e-02, -3.479e-02));
	r += V4(-3.258e-03, -1.451e-03, -3.181e-03, -1.377e-03);
	return tanh(r);
}
void Pass10(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 11
//!DESC CuNNy-8x4C-BILINEAR-CHROMA-NVL-shuffle
//!STYLE PS
//!IN t1, INPUT
float4 Pass11(float2 pos) {
	float2 pt = float2(GetInputPt());
	static const float3x3 rgb2yuv = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081};
	static const float3x3 yuv2rgb = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float4 r = 0.0;
	float2 size = float2(GetInputSize());
	float2 f = frac(pos * size);
	float3 yuv = mul(rgb2yuv, INPUT.SampleLevel(SL, pos, 0).rgb);
	int2 i = int2(f * 2.0);
	r.r = t1.SampleLevel(SP, (float2(0.5, 0.5) - f) * pt + pos, 0)[2*i.y + i.x];
	r.r += yuv.r;
	r.a = 1.0;
	r.r = clamp(r, 0.0, 1.0);
	float3 px = mul(yuv2rgb, float3(r.r, yuv.yz));
	return float4(px, 1.0);
}
