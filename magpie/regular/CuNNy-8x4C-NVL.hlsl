// CuNNy 8x4C BILINEAR CHROMA NVL
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

//!MAGPIE EFFECT
//!VERSION 3
//!OUTPUT_WIDTH INPUT_WIDTH * 2
//!OUTPUT_HEIGHT INPUT_HEIGHT * 2

//!TEXTURE
Texture2D INPUT;


//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t1;

//!PASS 1
//!DESC CuNNy-8x4C-BILINEAR-CHROMA-NVL-in
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) (dot(float3(3.897e-01, 7.482e-01, 1.636e-01), O(INPUT, float2(x, y)).rgb) + -1.089e+00)
float4 f0(float2 pt, float2 pos, min16float s0_0, min16float s0_1, min16float s0_2, min16float s0_3, min16float s0_4, min16float s0_5, min16float s0_6, min16float s0_7, min16float s0_8) {
	V4 r = 0.0;
	r += V4(7.210e-03, -1.720e-01, -1.298e-02, 7.157e-02) * s0_0;
	r += V4(7.748e-03, 2.888e-01, 5.086e-03, 2.706e-01) * s0_1;
	r += V4(5.349e-03, -1.362e-01, 1.139e-02, 3.215e-03) * s0_2;
	r += V4(2.109e-02, -2.096e-01, 5.477e-02, 1.208e-01) * s0_3;
	r += V4(-5.890e-01, 1.863e-01, 5.488e-01, -5.707e-01) * s0_4;
	r += V4(2.894e-02, 3.252e-01, 1.202e-02, 1.482e-01) * s0_5;
	r += V4(5.605e-03, -6.861e-02, 4.288e-02, -4.967e-03) * s0_6;
	r += V4(2.007e-02, -9.433e-02, -4.835e-01, 1.804e-02) * s0_7;
	r += V4(2.391e-03, -1.194e-01, -1.770e-01, 4.198e-02) * s0_8;
	r += V4(1.043e-01, 2.022e-02, 7.382e-04, 1.028e-01);
	return r;
}
void Pass1(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float s0_0 = l0(-1.0, -1.0);
	min16float s0_1 = l0(0.0, -1.0);
	min16float s0_2 = l0(1.0, -1.0);
	min16float s0_3 = l0(-1.0, 0.0);
	min16float s0_4 = l0(0.0, 0.0);
	min16float s0_5 = l0(1.0, 0.0);
	min16float s0_6 = l0(-1.0, 1.0);
	min16float s0_7 = l0(0.0, 1.0);
	min16float s0_8 = l0(1.0, 1.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8);
}
//!PASS 2
//!DESC CuNNy-8x4C-BILINEAR-CHROMA-NVL-conv1
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-1.322e-01, 2.925e-03, 2.477e-02, -3.932e-02, 9.261e-03, -2.889e-02, -5.383e-02, -5.080e-03, 1.764e-01, 1.014e-01, 3.453e-02, -3.488e-01, -1.035e-01, 6.898e-02, -1.986e-02, 3.380e-02));
	r += mul(s0_1, M4(1.472e-01, 5.603e-02, -1.445e-01, -6.401e-02, 1.929e-02, 3.616e-02, 1.896e-01, 7.354e-02, 6.527e-01, 2.872e-01, -1.936e-01, -1.260e-01, -1.169e-01, 5.184e-02, 1.027e-02, -9.403e-02));
	r += mul(s0_2, M4(5.357e-02, -3.293e-02, 6.403e-02, 6.581e-02, -3.781e-01, 2.900e-01, 2.759e-02, -1.598e-01, 1.399e-01, -2.591e-02, 6.031e-02, 1.283e-01, 2.072e-01, -9.698e-02, 6.309e-02, 7.355e-02));
	r += mul(s0_3, M4(-6.927e-03, 1.161e-01, -6.665e-02, 2.066e-01, 3.389e-01, 8.851e-02, 1.477e-02, 1.959e-01, 1.475e-01, -8.384e-03, -1.795e-02, -2.866e-01, 1.110e-01, -2.568e-01, -5.660e-02, 3.961e-01));
	r += mul(s0_4, M4(-2.243e-01, 1.079e-01, 1.019e-01, 1.565e-03, -1.097e-01, 2.597e-01, 1.825e-01, 1.396e-01, -2.249e-03, -1.594e-01, -5.119e-02, 5.308e-01, 5.662e-02, 4.799e-01, 1.360e-01, -5.440e-01));
	r += mul(s0_5, M4(-1.895e-01, 1.381e-02, -8.378e-02, -1.233e-01, -6.058e-03, 3.739e-01, -1.057e-01, 5.774e-02, -2.048e-01, -8.560e-02, 3.696e-02, 2.031e-02, -5.022e-03, -2.066e-01, -9.692e-02, 8.674e-02));
	r += mul(s0_6, M4(7.405e-02, -2.686e-02, -5.788e-02, 8.645e-02, -2.723e-01, -1.027e-01, 3.159e-02, -1.155e-01, 1.407e-01, -3.999e-02, 6.085e-02, -3.552e-02, 3.535e-03, -5.917e-02, -7.966e-02, 3.009e-02));
	r += mul(s0_7, M4(1.380e-01, -1.827e-01, 1.178e-01, 6.411e-04, -2.758e-01, -1.607e-01, -3.643e-01, 9.321e-02, -2.123e-02, 1.057e-01, 5.972e-02, 4.607e-02, 4.621e-02, 8.805e-02, 2.999e-01, 2.275e-01));
	r += mul(s0_8, M4(1.479e-01, -1.881e-02, 7.927e-02, -1.015e-01, -1.176e-01, 2.789e-01, 6.358e-02, -4.933e-02, 1.053e-01, -1.672e-01, 8.835e-02, 1.307e-02, -1.363e-01, -1.081e-02, 1.004e-02, 1.302e-02));
	r += mul(s1_0, M4(3.957e-01, -5.786e-01, -5.012e-01, 6.785e-01, 7.105e-02, -1.098e-02, 1.284e-01, 5.431e-02, 3.080e-01, 1.939e-01, 2.610e-01, -8.815e-02, 1.377e-01, 2.045e-02, -2.336e-02, 8.071e-02));
	r += mul(s1_1, M4(-1.728e-01, -5.902e-01, -1.149e+00, 1.268e-03, 2.457e-01, -5.336e-02, 1.614e-01, 1.365e-01, 1.323e-01, 5.060e-01, 5.557e-01, -4.992e-02, -1.200e-01, 7.503e-03, -6.428e-02, -1.685e-01));
	r += mul(s1_2, M4(-4.820e-01, -5.045e-01, -7.610e-02, -3.155e-01, -1.236e-01, 1.284e-01, -5.477e-03, -2.365e-02, -4.216e-02, 1.266e-01, -9.223e-02, 1.034e-01, 2.600e-01, -1.276e-01, -1.399e-01, 4.363e-02));
	r += mul(s1_3, M4(8.386e-01, 6.470e-01, -2.008e+00, 1.069e+00, 1.968e-01, 2.650e-02, -9.218e-03, 5.542e-02, 8.919e-03, -4.005e-02, -6.281e-02, -5.094e-01, -5.980e-02, -3.952e-01, 2.644e-01, 4.994e-01));
	r += mul(s1_4, M4(2.806e+00, 2.988e+00, -5.342e-01, -1.314e+00, 2.564e-01, 8.759e-02, 1.337e-01, 1.404e-01, -2.946e-01, 4.675e-02, -1.309e-01, 3.447e-01, 3.353e-01, 2.309e-01, 5.788e-01, -3.913e-01));
	r += mul(s1_5, M4(1.847e-01, 9.355e-02, 4.062e-01, 5.957e-02, 5.324e-02, 3.052e-01, -2.202e-01, 1.132e-01, -2.788e-01, 3.160e-02, 9.839e-02, 2.552e-02, 5.543e-03, -3.481e-01, 3.415e-01, 8.591e-02));
	r += mul(s1_6, M4(1.877e+00, 5.661e-01, -1.412e+00, 1.173e+00, -8.279e-02, -8.054e-02, -1.699e-02, 3.428e-02, 1.333e-01, 3.493e-03, 1.097e-01, -1.147e-02, 5.233e-02, -9.450e-03, 2.058e-01, 4.346e-01));
	r += mul(s1_7, M4(1.888e+00, 8.697e-01, 9.266e-01, 1.082e+00, -3.537e-01, 4.549e-03, -1.736e-01, 1.968e-01, -1.476e-02, 1.226e-01, -4.092e-02, -3.453e-02, -1.214e-03, -2.571e-01, 7.431e-01, 1.473e-01));
	r += mul(s1_8, M4(1.343e+00, 2.789e-01, -8.577e-01, -5.658e-02, -7.879e-02, 1.558e-01, 1.448e-02, 1.623e-02, 1.303e-01, -1.509e-01, 1.522e-02, -4.344e-02, -3.824e-02, -3.204e-01, 3.528e-01, -3.469e-02));
	r += V4(1.113e-03, -4.842e-02, -3.164e-02, -3.336e-02);
	return r;
}
void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 3
//!DESC CuNNy-8x4C-BILINEAR-CHROMA-NVL-conv2
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-6.586e-02, 5.409e-03, 2.124e-01, 3.020e-02, -2.252e-01, -6.591e-03, 3.239e-01, 7.629e-03, -2.588e-02, 5.311e-02, -2.900e-01, -5.303e-02, 1.305e-02, -1.557e-02, 1.147e-01, 9.620e-02));
	r += mul(s0_1, M4(2.999e-01, 4.693e-02, 1.429e-01, 2.057e-01, -2.507e-01, -1.957e-01, -9.965e-02, -1.597e-01, 3.159e-02, 3.188e-03, 9.754e-02, -3.902e-02, -4.850e-02, -9.051e-02, 6.074e-01, 1.278e-01));
	r += mul(s0_2, M4(-1.263e-01, 4.163e-02, -7.746e-02, 3.699e-02, 1.413e-01, -7.717e-03, 6.678e-02, -2.074e-01, -2.380e-01, 7.284e-02, -3.994e-02, -1.727e-02, 9.670e-01, 1.465e-01, 1.929e-01, -1.470e-01));
	r += mul(s0_3, M4(-7.347e-02, -2.111e-02, 1.118e-01, 8.660e-02, 3.282e-02, 3.930e-02, 3.365e-01, 1.262e-01, -9.310e-02, 1.724e-01, 3.079e-01, -1.972e-02, -4.832e-03, 2.299e-02, -1.153e-01, 4.700e-02));
	r += mul(s0_4, M4(-2.479e-01, -5.224e-01, 9.253e-02, -4.445e-01, 5.022e-02, -5.814e-01, 5.369e-03, 7.021e-01, -2.816e-01, 1.354e-02, 2.686e-01, 3.102e-01, 2.066e-01, 3.659e-01, 1.474e-01, 3.037e-01));
	r += mul(s0_5, M4(-6.107e-02, -9.337e-02, -1.457e-01, 2.688e-01, -7.832e-02, -1.136e-01, -4.392e-03, 2.818e-01, 4.677e-02, 2.182e-01, 8.652e-02, -1.895e-01, 2.980e-01, -1.621e-01, 3.183e-02, 2.166e-01));
	r += mul(s0_6, M4(4.665e-02, 3.891e-02, 1.618e-02, 2.949e-02, -3.570e-02, -1.067e-01, 5.261e-02, -1.538e-01, 2.113e-02, 1.655e-01, 6.477e-02, 1.567e-01, -5.509e-02, -2.287e-02, 1.995e-02, -7.649e-02));
	r += mul(s0_7, M4(2.570e-02, -7.688e-02, -1.606e-01, 2.139e-01, 8.633e-02, -1.294e-01, 7.975e-02, -5.544e-02, -3.775e-02, 2.134e-01, 1.444e-01, -3.632e-01, -3.055e-02, -1.213e-01, 4.545e-03, 7.535e-02));
	r += mul(s0_8, M4(-1.328e-01, -9.102e-02, -6.191e-02, -1.495e-01, 1.818e-02, 1.994e-02, -1.195e-02, -4.704e-02, 1.516e-02, 3.554e-02, -3.045e-02, 1.268e-01, 9.010e-02, -1.013e-01, -6.540e-02, 1.089e-01));
	r += mul(s1_0, M4(8.530e-03, -6.904e-02, -3.481e-03, -3.350e-02, -6.914e-02, 4.970e-02, 3.237e-01, 1.475e-01, 1.014e-03, 3.127e-02, -9.114e-02, -3.809e-03, 1.024e-02, 5.388e-02, 2.224e-01, 3.577e-02));
	r += mul(s1_1, M4(-6.040e-03, -8.846e-02, 6.501e-02, 2.566e-01, 1.258e-01, -1.148e-01, -1.355e-01, -2.534e-01, -2.281e-04, 1.336e-02, -4.483e-02, 2.520e-02, -1.533e-01, -1.485e-01, 2.656e-01, -8.626e-04));
	r += mul(s1_2, M4(-1.403e-01, 2.110e-02, -3.228e-02, -1.376e-01, 4.600e-02, -1.516e-02, -1.157e-02, 1.248e-01, -3.618e-02, 3.436e-02, -9.531e-02, 8.852e-02, 6.403e-01, 2.572e-02, 1.572e-01, 2.316e-01));
	r += mul(s1_3, M4(-4.507e-02, -3.598e-02, 2.974e-02, 1.399e-01, -2.825e-02, 2.219e-01, 2.920e-01, 1.771e-01, -2.873e-02, -8.442e-02, 6.883e-02, -2.415e-01, 2.208e-02, 4.330e-02, -2.553e-01, -2.047e-02));
	r += mul(s1_4, M4(-3.628e-01, -5.256e-01, 2.018e-01, -4.445e-01, 1.441e-01, -3.624e-01, 1.954e-01, -1.245e-01, -1.868e-01, -6.020e-02, 2.094e-01, 1.783e-01, 1.775e-01, 4.046e-01, 1.062e-01, 2.057e-01));
	r += mul(s1_5, M4(1.062e-02, -8.767e-02, 5.654e-02, -2.509e-01, -1.760e-02, -2.787e-03, -1.427e-02, 1.923e-01, 1.131e-01, 1.090e-01, -2.787e-02, 5.201e-02, 2.753e-01, -1.212e-01, -2.654e-02, 7.442e-01));
	r += mul(s1_6, M4(4.567e-02, 6.563e-02, -2.188e-02, 1.173e-01, -2.794e-02, 6.913e-02, 2.883e-02, -5.757e-02, 1.919e-02, 1.061e-01, 3.888e-02, -1.754e-02, -5.068e-02, 2.962e-02, 7.866e-02, -4.603e-02));
	r += mul(s1_7, M4(2.697e-02, -1.374e-01, -1.367e-01, -7.153e-02, 3.572e-02, 1.155e-02, -3.438e-02, -5.958e-02, -4.184e-02, 1.558e-01, 5.215e-02, -4.023e-03, -8.788e-02, -1.496e-01, -6.595e-02, -6.762e-02));
	r += mul(s1_8, M4(-2.650e-02, -1.274e-01, 1.108e-02, 1.694e-02, -3.700e-02, 2.105e-02, -4.199e-02, 9.540e-02, 8.836e-03, 5.924e-02, 1.235e-02, -1.168e-01, 6.390e-02, -1.182e-01, -7.517e-02, 9.411e-02));
	r += V4(7.897e-04, -1.278e-02, 1.114e-02, 1.940e-03);
	return r;
}
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 4
//!DESC CuNNy-8x4C-BILINEAR-CHROMA-NVL-conv3
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-2.023e-02, 9.127e-03, 7.075e-04, -1.600e-02, 1.411e-01, -3.409e-02, -7.789e-02, -8.519e-03, -8.275e-02, 1.668e-01, 1.396e-02, -3.859e-02, 3.702e-02, -1.986e-01, -4.446e-02, 3.724e-02));
	r += mul(s0_1, M4(4.260e-02, 2.114e-03, 1.513e-02, -8.843e-02, 1.150e-01, -3.835e-01, 2.188e-01, 5.701e-02, -1.879e-01, 9.023e-02, 2.452e-02, -4.622e-02, 1.780e-01, -1.213e-01, -2.625e-02, 1.144e-01));
	r += mul(s0_2, M4(-1.132e-03, -2.778e-02, 2.110e-02, -2.914e-02, 2.047e-01, 6.109e-02, -1.365e-01, -2.738e-01, -6.437e-02, 9.321e-02, -8.994e-03, 2.841e-02, -3.247e-02, 1.542e-02, -4.932e-02, -2.240e-01));
	r += mul(s0_3, M4(5.780e-02, -4.024e-02, -1.075e-01, -1.617e-01, -4.334e-02, -1.523e-02, 4.251e-02, -3.131e-02, -1.176e-01, 2.007e-01, 2.237e-03, -5.299e-02, -9.995e-02, -5.176e-01, -5.378e-02, 5.758e-02));
	r += mul(s0_4, M4(-1.185e-01, 2.627e-01, 6.794e-02, 1.756e-01, -2.467e-01, 2.270e-01, -8.848e-01, -7.114e-02, -5.036e-02, 4.420e-02, 4.365e-01, 8.187e-02, 6.767e-03, -4.002e-01, 4.699e-02, -1.262e-01));
	r += mul(s0_5, M4(7.789e-02, 5.522e-02, -3.607e-02, 3.486e-01, -4.163e-01, 8.568e-02, 9.527e-02, -5.827e-01, -2.771e-01, -1.312e-02, 1.477e-01, 1.137e-01, -1.872e-01, -1.803e-02, 1.181e-03, -2.882e-01));
	r += mul(s0_6, M4(5.670e-02, -1.980e-01, 2.681e-02, -4.132e-02, 9.353e-02, -6.120e-02, 9.145e-03, 4.271e-02, 2.507e-02, 1.160e-03, 2.420e-02, -3.077e-02, 4.701e-02, -1.210e-01, 6.327e-02, -8.514e-03));
	r += mul(s0_7, M4(6.300e-01, -3.727e-02, -6.856e-02, 1.668e-01, 6.575e-02, -1.799e-01, -6.799e-02, 4.825e-02, -2.304e-01, 1.122e-01, -6.225e-02, 6.817e-02, 2.101e-01, -1.930e-02, -1.143e-02, 2.205e-02));
	r += mul(s0_8, M4(1.344e-01, 5.786e-02, 5.570e-02, 1.029e+00, 3.006e-01, -3.783e-02, -1.170e-02, 2.852e-02, -4.227e-01, 4.679e-02, 1.486e-03, -1.888e-01, -4.612e-03, -1.134e-03, -9.053e-03, -6.407e-02));
	r += mul(s1_0, M4(-7.459e-02, 1.183e-01, -2.773e-02, 1.957e-02, -8.360e-02, 9.079e-02, -1.517e-02, -2.811e-03, 8.740e-03, 2.926e-01, -5.109e-02, 1.385e-03, 1.057e-02, -1.186e-01, 4.357e-02, -1.391e-02));
	r += mul(s1_1, M4(-6.663e-02, 6.765e-02, -1.297e-02, 8.440e-03, -3.154e-02, 1.090e-01, 2.875e-01, -3.174e-02, -1.919e-02, -7.971e-02, 4.010e-02, -5.325e-02, 1.112e-01, 4.569e-02, 5.406e-03, 5.187e-02));
	r += mul(s1_2, M4(-4.166e-02, -3.750e-02, 2.607e-02, -9.281e-03, 1.096e-01, 7.973e-02, -2.319e-02, -1.372e-01, 1.647e-01, -1.543e-01, 4.530e-02, -1.013e-01, 1.926e-02, 3.526e-02, -1.260e-02, -1.952e-02));
	r += mul(s1_3, M4(-1.172e-03, -4.456e-01, -1.209e-01, 4.430e-02, 3.624e-02, 8.758e-02, 7.377e-02, 3.476e-02, -4.406e-02, 8.846e-02, -4.651e-02, -5.034e-02, 6.644e-02, -3.121e-01, -5.512e-03, 6.025e-02));
	r += mul(s1_4, M4(-2.602e-01, 4.314e-01, -2.123e-01, 3.643e-01, -2.884e-01, 2.195e-02, -6.813e-01, -6.213e-02, 3.778e-01, -4.305e-01, 5.215e-01, -3.007e-02, -1.998e-01, -3.444e-01, 3.521e-02, -7.070e-02));
	r += mul(s1_5, M4(5.384e-02, 1.544e-01, -9.925e-02, -2.964e-02, -2.861e-01, -3.835e-03, 1.212e-01, -3.105e-01, 2.719e-01, -2.124e-01, 2.453e-01, -2.130e-01, 9.035e-03, -6.543e-02, 5.917e-02, -1.810e-02));
	r += mul(s1_6, M4(-2.778e-01, -1.365e-01, 1.184e-02, 5.472e-02, 7.375e-02, -4.184e-02, -9.276e-03, 7.906e-02, 5.992e-02, -8.891e-02, 4.862e-02, 1.630e-02, 1.819e-01, -1.345e-02, 4.313e-02, -1.492e-02));
	r += mul(s1_7, M4(-4.526e-01, -1.075e-01, -2.408e-01, -1.223e-02, 4.565e-02, -4.231e-02, 1.673e-02, 2.734e-02, 2.882e-01, 5.363e-02, 2.023e-02, 9.170e-02, 2.411e-01, -1.110e-02, -2.673e-03, 8.253e-02));
	r += mul(s1_8, M4(-1.326e-01, 1.028e-02, 2.650e-02, -8.035e-02, -1.424e-02, -5.072e-02, -2.173e-03, -9.030e-03, -3.432e-02, 1.139e-01, 4.240e-02, -1.264e-01, 2.045e-01, 2.185e-02, 1.264e-02, 3.084e-02));
	r += V4(1.104e-03, -6.469e-03, -3.009e-03, -7.964e-03);
	return r;
}
void Pass4(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 5
//!DESC CuNNy-8x4C-BILINEAR-CHROMA-NVL-conv4
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-1.583e-01, -4.079e-03, -2.642e-02, -9.162e-02, -6.763e-02, -1.790e-03, 5.198e-02, -2.810e-02, 2.103e-02, 3.225e-02, 4.074e-03, -4.238e-02, 7.511e-02, 2.891e-01, -3.780e-03, -9.985e-02));
	r += mul(s0_1, M4(-2.163e-01, -2.205e-01, 2.766e-02, 4.212e-01, -1.851e-01, -2.095e-02, -4.344e-02, 1.064e-01, -9.328e-02, 1.853e-02, -9.470e-03, 2.077e-01, 1.531e-02, -1.382e-01, -8.732e-04, -2.603e-03));
	r += mul(s0_2, M4(-3.287e-02, -1.204e-02, -7.916e-03, 4.848e-02, 1.807e-01, 1.460e-04, -1.971e-03, 1.002e-02, 3.183e-01, 8.879e-02, 1.636e-01, -5.315e-02, -7.153e-02, -1.110e-02, 2.856e-03, 3.918e-02));
	r += mul(s0_3, M4(-8.022e-02, -3.618e-02, -1.167e-02, -2.460e-02, 5.234e-02, 3.070e-02, 2.162e-02, -1.467e-02, 1.639e-01, 1.041e-01, -7.443e-03, -5.462e-02, -2.024e-01, 2.307e-01, -2.036e-01, 8.404e-02));
	r += mul(s0_4, M4(-3.883e-01, -2.031e-01, 2.075e-01, 5.148e-01, 4.094e-01, 1.797e-01, -1.733e-01, 3.381e-02, -7.818e-01, -9.582e-02, 1.472e-01, -3.252e-01, 1.199e-01, 9.268e-02, 8.437e-02, -1.017e-01));
	r += mul(s0_5, M4(-8.207e-02, 4.371e-02, -1.306e-01, 2.587e-02, 1.113e-01, 6.127e-01, 8.470e-01, 1.334e-01, -1.426e-01, 5.104e-01, 8.142e-01, 3.533e-01, 1.358e-02, -1.739e-02, -4.490e-02, -3.206e-02));
	r += mul(s0_6, M4(8.150e-03, -7.382e-02, 4.375e-02, -1.056e-01, 1.008e-02, 5.312e-02, -3.740e-02, 4.073e-02, 6.032e-03, 6.877e-02, 9.470e-03, 2.672e-02, -4.742e-02, 2.266e-01, -6.046e-02, -1.266e-02));
	r += mul(s0_7, M4(-3.194e-02, -7.752e-02, 9.592e-02, 4.330e-02, -4.200e-02, 9.407e-02, -4.778e-02, -6.517e-03, 3.750e-02, 1.802e-02, 1.866e-02, -4.634e-02, 2.912e-02, 7.179e-02, -3.719e-02, -8.465e-03));
	r += mul(s0_8, M4(-5.891e-02, -3.301e-02, -3.329e-02, 2.373e-02, 1.013e-01, 2.765e-01, 9.383e-02, -3.518e-02, -1.577e-01, 2.330e-01, -4.114e-02, -3.545e-02, 2.105e-02, -4.700e-02, -2.252e-02, -1.211e-02));
	r += mul(s1_0, M4(-1.230e-01, -3.434e-02, -2.979e-02, -4.406e-02, 6.458e-03, -1.771e-02, 4.966e-02, 4.250e-03, 5.478e-02, 4.467e-02, -3.332e-02, 2.494e-02, -1.147e-02, 5.456e-02, 5.088e-02, 4.456e-02));
	r += mul(s1_1, M4(3.658e-02, 4.069e-03, 1.694e-01, 1.323e-01, -9.901e-02, -7.704e-02, 1.399e-01, 1.723e-01, -8.131e-02, -7.755e-02, 8.338e-03, 9.430e-02, -3.604e-01, -3.075e-01, 1.989e-01, 1.575e-01));
	r += mul(s1_2, M4(1.350e-01, 4.511e-02, 1.218e-01, -1.061e-02, 2.767e-01, 1.382e-01, 6.742e-02, -1.688e-01, 1.451e-01, -1.311e-02, -3.238e-03, -8.820e-02, -9.534e-02, 5.320e-02, -1.234e-01, 2.418e-02));
	r += mul(s1_3, M4(1.062e-01, -9.590e-03, -9.881e-02, -7.418e-02, 7.251e-02, -1.418e-02, 1.325e-02, -1.142e-02, 1.675e-01, 6.878e-02, -9.007e-03, -5.733e-02, -4.595e-02, 6.986e-02, 1.522e-02, -2.720e-01));
	r += mul(s1_4, M4(-3.283e-02, 5.006e-01, 7.930e-03, 8.118e-02, 2.768e-01, -1.214e-02, 3.416e-03, -5.073e-02, -2.296e-01, -2.348e-01, -8.012e-02, -9.794e-01, -2.225e-01, 2.208e-01, -7.644e-02, 1.363e-01));
	r += mul(s1_5, M4(-7.015e-02, 5.899e-02, 2.045e-01, 1.194e-01, -9.444e-02, 3.272e-01, 5.719e-01, 2.388e-01, 1.893e-01, 4.052e-01, 2.471e-01, 1.987e-01, 1.077e-01, 2.342e-01, -3.409e-02, -9.408e-02));
	r += mul(s1_6, M4(-2.984e-03, -4.340e-02, -2.067e-02, 7.544e-02, -3.734e-02, -2.226e-02, -1.266e-02, 1.447e-02, -7.147e-02, 6.034e-02, -4.966e-03, 2.671e-02, -4.226e-02, 1.532e-01, 1.469e-02, -1.437e-01));
	r += mul(s1_7, M4(4.888e-02, 4.594e-02, 4.334e-02, -3.670e-02, -6.238e-02, -9.906e-02, 5.405e-02, 4.367e-02, 7.397e-02, -1.601e-01, -3.086e-02, 1.654e-02, -1.152e-01, 2.590e-01, -1.117e-01, 1.333e-01));
	r += mul(s1_8, M4(-1.323e-02, 2.526e-02, 4.686e-02, -7.282e-02, -4.913e-03, 5.157e-01, 1.583e-01, -1.765e-02, -5.025e-02, -3.512e-01, -2.276e-02, -4.051e-02, 5.506e-02, -5.414e-02, -6.070e-02, -4.265e-02));
	r += V4(5.081e-03, 3.792e-03, 1.761e-03, 1.374e-03);
	return r;
}
void Pass5(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 6
//!DESC CuNNy-8x4C-BILINEAR-CHROMA-NVL-conv5
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-6.491e-02, 5.725e-02, -3.595e-02, -5.583e-02, -3.154e-02, -8.662e-02, -1.420e-01, -3.625e-02, -6.087e-02, 9.945e-02, 2.487e-02, -1.980e-02, -4.055e-02, 2.000e-02, -6.135e-02, -4.428e-02));
	r += mul(s0_1, M4(3.952e-02, 5.634e-02, 1.122e-01, 1.755e-01, 1.904e-01, -2.457e-01, -2.011e-01, -1.284e-01, -1.606e-01, 1.667e-01, 1.482e-01, -5.583e-02, 1.887e-01, -7.799e-02, 5.259e-02, -3.793e-02));
	r += mul(s0_2, M4(9.695e-02, -7.847e-02, -7.637e-02, 8.811e-03, -3.663e-02, -4.862e-02, -8.336e-02, -9.891e-02, -3.976e-02, 8.276e-02, 2.558e-02, 5.652e-02, 6.865e-02, -5.921e-02, 2.341e-02, 7.796e-02));
	r += mul(s0_3, M4(6.068e-02, 2.018e-01, 2.712e-02, -1.538e-01, -1.630e-01, 1.773e-01, 6.020e-03, -1.194e-02, 7.790e-02, 2.301e-01, 1.691e-03, -1.767e-01, 4.140e-02, 5.222e-02, 3.533e-02, 4.897e-02));
	r += mul(s0_4, M4(8.240e-01, 8.871e-02, 3.927e-01, -1.413e-01, -8.804e-01, -3.452e-01, -2.582e-01, 1.450e-01, 4.756e-01, 2.432e-02, 1.451e-01, 1.223e-01, -2.245e-01, -6.237e-01, -4.335e-01, 1.787e-01));
	r += mul(s0_5, M4(3.057e-01, -1.626e-02, 1.455e-01, -1.238e-01, -1.915e-01, -8.661e-02, -1.802e-01, 5.589e-02, 3.193e-01, 1.204e-01, 1.400e-01, 1.522e-01, -1.207e-01, -1.314e-01, 1.106e-01, -7.932e-03));
	r += mul(s0_6, M4(-4.210e-02, -1.773e-01, -2.163e-01, -1.468e-02, -1.352e-01, 7.361e-02, 4.842e-02, -2.606e-02, 4.269e-02, 3.197e-02, 4.140e-02, -5.625e-02, 4.366e-02, 4.140e-02, 6.862e-02, 2.105e-02));
	r += mul(s0_7, M4(9.279e-01, 2.027e-01, -1.106e-01, -3.545e-01, 9.791e-03, -2.328e-02, -5.146e-02, 7.527e-03, -1.489e-01, -1.773e-01, 3.049e-03, -3.751e-02, -9.718e-02, 1.780e-01, 1.733e-01, 3.179e-02));
	r += mul(s0_8, M4(-1.244e-01, -6.355e-02, -1.947e-01, -2.557e-01, -1.654e-01, -4.798e-02, -4.556e-02, 7.300e-02, 2.315e-01, -5.358e-03, 5.237e-03, -2.457e-02, -1.615e-01, 3.479e-02, 1.354e-01, -9.874e-02));
	r += mul(s1_0, M4(-3.773e-02, 1.176e-02, -4.560e-02, -1.837e-02, 1.052e-01, -1.791e-01, -3.271e-01, -1.577e-01, 3.348e-02, -6.662e-02, -1.506e-01, -1.042e-01, -6.612e-03, 1.419e-01, 2.565e-01, 1.234e-01));
	r += mul(s1_1, M4(-7.818e-02, -7.460e-02, -3.723e-02, 6.393e-02, 3.137e-01, -1.388e-01, -1.200e-01, -1.086e-01, -1.248e-01, 5.946e-02, 6.957e-03, 3.812e-02, -7.106e-02, 3.811e-01, 6.486e-01, 3.331e-01));
	r += mul(s1_2, M4(1.948e-01, -3.049e-02, 3.125e-02, -1.853e-03, 1.180e-01, 1.033e-02, -2.249e-02, -1.365e-01, -8.513e-02, 2.445e-02, -7.469e-03, 8.859e-02, -2.397e-01, -4.316e-02, 2.840e-01, 2.208e-01));
	r += mul(s1_3, M4(1.866e-02, 8.274e-02, -1.241e-02, -2.637e-02, -3.777e-01, -1.274e-01, -4.385e-01, -1.040e-01, -5.407e-02, 9.399e-02, -2.932e-02, 2.836e-02, 1.072e-01, 4.850e-03, 1.324e-01, 3.219e-02));
	r += mul(s1_4, M4(3.616e-01, -1.772e-01, 1.267e-01, 3.272e-01, -4.190e-01, -3.115e-01, -3.563e-01, 1.709e-01, -1.141e-01, -2.509e-01, -1.956e-01, 5.566e-01, 1.625e-01, -3.623e-01, -5.994e-01, -4.918e-01));
	r += mul(s1_5, M4(2.699e-02, -1.735e-01, 1.451e-02, -1.126e-01, -2.072e-01, -1.077e-01, -2.727e-01, -3.877e-02, 5.033e-02, -2.193e-04, 9.502e-02, 2.458e-01, 2.320e-01, 3.350e-01, 1.004e+00, -9.663e-02));
	r += mul(s1_6, M4(1.362e-01, 2.819e-02, -1.534e-02, -6.703e-02, -4.848e-02, 1.222e-01, 1.042e-01, 4.703e-02, -4.202e-02, 3.155e-03, -2.730e-02, -2.633e-02, 5.093e-02, -3.768e-02, -3.064e-02, 6.015e-02));
	r += mul(s1_7, M4(3.086e-01, 8.553e-02, -1.301e-01, -9.578e-02, 2.065e-01, 7.606e-02, 6.854e-02, -1.358e-01, -7.676e-01, -2.458e-01, -6.895e-04, 2.261e-01, -5.694e-01, 2.521e-01, 3.675e-01, 2.262e-01));
	r += mul(s1_8, M4(-5.158e-01, -1.441e-01, -1.499e-01, 3.083e-03, -4.247e-02, -2.153e-02, -5.892e-02, 8.965e-03, -6.632e-02, -3.910e-02, 7.189e-03, 3.769e-02, -2.594e-01, 1.313e-01, 4.071e-01, -1.366e-01));
	r += V4(-1.949e-03, 2.292e-03, 7.996e-04, -1.542e-03);
	return r;
}
void Pass6(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 7
//!DESC CuNNy-8x4C-BILINEAR-CHROMA-NVL-conv6
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(4.017e-02, -1.131e-01, -1.604e-01, -4.437e-02, 8.838e-02, -5.948e-02, -7.056e-02, 6.077e-02, 9.219e-02, -3.903e-02, 1.033e-01, 7.068e-02, -2.359e-01, 6.936e-02, -1.172e-01, 3.820e-03));
	r += mul(s0_1, M4(-7.664e-02, -2.946e-02, -3.277e-01, -8.023e-02, -1.272e-01, -1.309e-01, -3.991e-01, 5.650e-02, 5.022e-02, -3.282e-02, 1.170e-01, -2.134e-01, -2.565e-01, 9.307e-02, 3.330e-01, 2.259e-02));
	r += mul(s0_2, M4(1.299e-02, -7.602e-02, 7.461e-02, 1.372e-03, -1.297e-01, -7.428e-02, 1.441e-01, 1.445e-01, 7.545e-02, 1.038e-01, -1.365e-01, -5.461e-02, -4.332e-02, -1.566e-01, 2.682e-01, -1.421e-01));
	r += mul(s0_3, M4(3.949e-01, -1.661e-01, -8.614e-02, 3.555e-02, 2.574e-01, 9.894e-02, 1.071e-01, 7.189e-03, -2.711e-01, 1.302e-02, -7.935e-02, 5.590e-02, 4.639e-01, -1.474e-01, 4.932e-01, 5.372e-02));
	r += mul(s0_4, M4(1.320e-01, 1.954e-01, -5.789e-01, -7.754e-01, 9.747e-01, 6.015e-01, 2.079e-01, 1.948e-01, -2.628e-01, -3.658e-01, 9.597e-02, -1.998e-01, 5.284e-01, -1.105e+00, -1.854e-01, 3.754e-01));
	r += mul(s0_5, M4(-2.450e-02, -2.702e-02, 2.983e-02, 3.687e-02, -9.409e-02, 3.453e-01, -2.587e-01, -2.765e-01, -1.765e-02, -3.156e-01, 1.258e-01, 2.213e-01, -1.301e-01, -3.433e-02, -6.276e-02, -4.803e-02));
	r += mul(s0_6, M4(4.505e-02, -3.157e-02, 7.088e-02, 4.216e-02, -1.550e-02, -9.008e-02, -7.255e-02, 1.811e-02, 1.794e-01, 8.794e-02, -2.472e-02, -1.374e-01, 1.191e-02, -2.203e-01, 2.646e-01, 4.385e-01));
	r += mul(s0_7, M4(2.630e-02, 1.367e-01, -6.153e-02, -3.665e-01, 2.134e-02, -7.919e-02, 1.534e-02, 4.432e-02, -2.995e-02, 8.709e-02, 1.597e-01, 9.789e-02, 4.170e-02, 4.357e-01, 1.465e-01, -6.659e-01));
	r += mul(s0_8, M4(-2.254e-02, 3.021e-02, -3.284e-02, 3.470e-02, -1.815e-02, -2.760e-01, 3.485e-02, -3.147e-02, 7.104e-02, 1.404e-01, -3.928e-03, -5.925e-02, 3.153e-03, -9.102e-02, -7.402e-02, 1.258e-02));
	r += mul(s1_0, M4(-7.399e-02, -1.304e-01, -6.922e-02, 1.317e-01, 7.740e-02, -4.643e-02, -1.165e-01, 3.270e-02, -2.036e-01, 1.037e-01, 1.080e-01, 5.602e-03, 4.055e-02, -7.269e-02, -3.637e-02, 2.590e-02));
	r += mul(s1_1, M4(-7.591e-02, -2.739e-02, -3.660e-01, 2.916e-01, -1.322e-01, -6.862e-02, -1.665e-01, -2.862e-02, -1.087e-01, -1.487e-02, 2.114e-01, -3.657e-02, -1.115e-01, 4.846e-02, -2.502e-01, 7.556e-02));
	r += mul(s1_2, M4(3.423e-02, -1.274e-01, 6.724e-02, -4.674e-02, -8.146e-02, -1.605e-01, 1.120e-01, 1.524e-01, 6.099e-02, -8.206e-02, 1.110e-01, -1.002e-03, -1.105e-02, -6.183e-03, -7.293e-02, -1.199e-01));
	r += mul(s1_3, M4(-2.309e-02, -2.483e-02, 5.481e-02, 6.582e-02, 5.713e-01, -1.073e-01, 8.667e-02, 1.018e-01, -9.410e-02, 7.175e-02, 1.819e-01, 1.723e-01, 2.397e-01, -9.612e-02, 1.083e-02, 4.404e-03));
	r += mul(s1_4, M4(4.946e-02, 2.191e-01, -2.528e-01, -5.135e-01, 7.238e-01, 5.348e-01, 4.107e-01, 2.751e-01, 1.353e-01, -1.053e+00, 2.028e-01, -3.897e-01, 2.761e-01, 1.777e-01, -5.697e-01, -1.508e-01));
	r += mul(s1_5, M4(-3.234e-02, -3.912e-02, 9.496e-02, 3.952e-02, 3.009e-02, 2.386e-01, -1.610e-01, -2.529e-01, -1.169e-01, -9.974e-02, 2.588e-01, 3.028e-01, -4.720e-02, 1.685e-01, -1.431e-01, -2.599e-01));
	r += mul(s1_6, M4(7.867e-03, 4.447e-03, 4.040e-02, 3.266e-03, 6.055e-02, -6.987e-02, 3.597e-02, 9.983e-02, 2.805e-01, 1.091e-01, 2.418e-01, 8.429e-02, 2.648e-02, -1.135e-01, -4.727e-02, 7.938e-02));
	r += mul(s1_7, M4(2.516e-02, 9.564e-03, -2.534e-02, -7.008e-02, 1.780e-01, 1.283e-01, 4.253e-03, -4.128e-01, -1.035e-02, 3.086e-01, 1.598e-01, -2.589e-01, -1.440e-01, 4.747e-02, 2.835e-02, -9.718e-02));
	r += mul(s1_8, M4(-1.543e-02, 3.455e-02, 1.696e-02, 2.029e-02, 2.731e-02, -1.958e-01, 3.505e-02, -5.260e-02, -1.754e-01, 6.667e-02, -1.272e-03, 3.232e-01, 1.502e-02, -6.859e-02, -4.243e-02, -5.009e-02));
	r += V4(-2.166e-04, 7.448e-04, -2.751e-03, -6.966e-03);
	return r;
}
void Pass7(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 8
//!DESC CuNNy-8x4C-BILINEAR-CHROMA-NVL-conv7
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(5.505e-02, -1.585e-01, -1.645e-01, -1.171e-02, 8.907e-02, -6.179e-02, 3.527e-02, 5.261e-02, -6.341e-02, 1.259e-01, -4.364e-02, -4.986e-02, 9.646e-02, -1.919e-01, 2.643e-02, -4.688e-02));
	r += mul(s0_1, M4(4.337e-02, -1.211e-01, 3.784e-02, -2.134e-01, -3.931e-02, -1.336e-01, -1.959e-02, -1.056e-01, 2.023e-01, -3.428e-01, -3.496e-02, -3.509e-01, -6.857e-01, 5.307e-02, -9.163e-02, 3.170e-01));
	r += mul(s0_2, M4(-1.957e-02, -1.977e-01, -1.847e-01, -1.929e-01, 1.365e-02, -1.036e-01, -6.959e-02, -1.169e-01, -5.723e-02, -9.051e-02, -1.343e-01, -3.046e-02, -1.201e-01, 1.325e-01, 1.383e-01, 7.371e-02));
	r += mul(s0_3, M4(-3.618e-02, 4.861e-02, -2.970e-02, -1.078e-02, 3.522e-02, 1.135e-01, 1.251e-01, 4.953e-02, 3.129e-01, -4.326e-01, -2.378e-01, 1.546e-01, -1.422e-01, 2.022e-01, 1.391e-01, -1.145e-02));
	r += mul(s0_4, M4(-2.799e-01, 3.949e-01, 9.931e-02, -1.820e-01, -2.471e-01, -4.424e-01, 7.919e-02, -7.426e-01, -3.096e-01, 1.113e-01, 8.199e-01, -5.293e-01, -4.717e-01, 1.333e-01, 6.894e-02, 1.140e-01));
	r += mul(s0_5, M4(9.476e-02, 2.038e-01, 1.600e-01, 2.699e-01, 4.724e-02, -6.790e-02, 1.184e-02, -9.899e-02, 7.591e-02, -1.566e-01, -2.104e-01, -1.255e-01, 4.967e-02, 2.470e-02, 9.941e-02, -1.009e-01));
	r += mul(s0_6, M4(-1.442e-02, 1.235e-02, 3.845e-02, -3.018e-02, -3.677e-02, 6.962e-02, -5.612e-03, -3.793e-02, 1.320e-01, 3.846e-02, 1.957e-02, 1.573e-01, -8.294e-03, -3.543e-02, -1.702e-02, -8.230e-02));
	r += mul(s0_7, M4(-6.132e-02, 3.307e-03, -5.048e-02, 5.896e-02, 1.721e-01, 5.703e-02, 4.616e-03, 1.921e-01, 6.522e-02, -8.783e-02, -7.256e-02, 3.745e-01, 8.399e-03, -1.744e-02, 2.516e-02, 6.528e-02));
	r += mul(s0_8, M4(-6.712e-02, 2.436e-02, 2.626e-02, -2.370e-02, 4.075e-02, -2.163e-03, 4.486e-03, 1.655e-01, -7.690e-02, -1.602e-02, -3.344e-02, -2.824e-03, -2.026e-02, -3.948e-02, 2.116e-03, -8.082e-02));
	r += mul(s1_0, M4(1.041e-01, -9.143e-02, 9.807e-02, 3.694e-02, 3.976e-02, -1.836e-01, -1.340e-01, 5.716e-02, 3.677e-02, -4.439e-02, -7.358e-03, -6.138e-02, 3.013e-02, 7.864e-02, 1.570e-01, 5.486e-02));
	r += mul(s1_1, M4(-1.151e-01, -1.274e-01, 4.400e-02, -1.457e-02, -4.375e-02, -3.015e-01, -2.836e-02, -3.186e-01, -2.971e-02, -2.144e-01, 3.709e-03, -1.912e-01, 7.595e-02, 6.519e-03, -4.446e-02, 9.892e-02));
	r += mul(s1_2, M4(-6.898e-02, -7.153e-02, -6.400e-02, -1.623e-01, -1.018e-02, -9.643e-02, -1.116e-01, -9.302e-02, 2.236e-02, -8.800e-02, -6.064e-02, -1.131e-01, -5.776e-02, 8.423e-02, 2.514e-03, 6.878e-02));
	r += mul(s1_3, M4(9.497e-03, 6.365e-02, 1.234e-01, 7.471e-02, -4.711e-02, 3.716e-02, -1.342e-01, -7.758e-02, 1.105e-01, -2.039e-01, -1.313e-01, -2.040e-03, -2.056e-01, 3.461e-01, 1.222e-01, -1.922e-02));
	r += mul(s1_4, M4(-3.372e-01, 1.924e-01, -8.105e-01, -5.219e-01, -1.076e-01, -5.110e-02, 4.561e-01, -4.947e-01, 2.021e-01, 3.332e-01, 3.389e-01, -2.447e-02, -3.955e-01, 4.754e-01, 3.276e-01, 1.757e-01));
	r += mul(s1_5, M4(2.998e-01, 2.613e-01, 2.124e-01, 5.438e-01, 1.020e-01, -5.231e-02, -8.149e-02, -2.867e-02, 1.061e-01, -1.495e-01, -9.942e-02, -3.563e-02, 4.807e-02, 1.124e-01, 9.206e-02, 1.050e-01));
	r += mul(s1_6, M4(-6.860e-02, 7.090e-02, 2.288e-02, -6.941e-02, -2.231e-02, -5.042e-03, -8.530e-02, -1.347e-01, 5.140e-02, 3.581e-02, 2.742e-02, 2.124e-01, -1.424e-02, 7.995e-05, -3.164e-02, -2.151e-02));
	r += mul(s1_7, M4(-1.015e-01, 1.479e-01, 6.106e-02, 6.908e-02, 1.489e-01, -5.867e-02, 1.607e-02, 1.800e-02, 2.055e-02, -2.182e-01, -9.497e-02, -1.663e-01, 9.066e-02, -8.423e-02, -1.569e-02, -8.565e-02));
	r += mul(s1_8, M4(-5.522e-02, 5.286e-02, 1.245e-01, -4.398e-02, -1.502e-02, -5.616e-02, -5.721e-02, 1.029e-02, -3.349e-02, 2.021e-02, -6.952e-03, 7.384e-02, -2.599e-02, -3.234e-02, -2.836e-02, -2.561e-02));
	r += V4(-3.685e-03, 7.178e-04, -1.406e-03, -3.225e-03);
	return r;
}
void Pass8(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 9
//!DESC CuNNy-8x4C-BILINEAR-CHROMA-NVL-conv8
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-1.369e-02, 9.590e-02, 1.314e-01, 2.379e-02, 2.773e-02, -8.834e-02, 8.525e-02, 1.256e-01, -1.558e-02, -4.750e-02, -6.309e-02, 8.149e-03, 1.822e-02, 3.154e-01, 7.186e-02, 2.314e-02));
	r += mul(s0_1, M4(4.384e-02, -3.662e-02, -7.440e-02, 3.318e-02, -3.594e-02, -9.355e-01, -9.064e-02, -3.329e-02, -1.925e-02, -4.284e-01, -2.007e-01, -5.263e-02, -1.327e-01, 2.241e-01, 4.183e-01, 5.667e-02));
	r += mul(s0_2, M4(-1.534e-02, -4.674e-02, -6.857e-02, -1.576e-02, 1.663e-02, -2.787e-02, 1.205e-02, -1.105e-02, -1.167e-02, -1.170e-02, 1.139e-01, -1.666e-02, 2.596e-03, 4.944e-02, 7.446e-02, 5.194e-03));
	r += mul(s0_3, M4(-3.701e-01, -3.797e-01, 3.019e-02, -1.275e-01, -2.134e-02, 4.991e-03, 9.379e-02, -2.805e-02, -8.956e-04, -1.870e-01, 6.939e-02, -5.028e-02, 9.448e-02, -1.290e-02, -4.668e-02, 3.230e-02));
	r += mul(s0_4, M4(1.963e-01, -4.925e-01, 2.643e-01, 1.214e-01, 1.784e-01, -1.691e-01, -1.334e+00, -1.660e+00, -3.135e-01, 1.820e-01, 9.665e-01, 1.566e-01, -8.965e-01, 1.111e-01, -5.176e-01, 3.047e-02));
	r += mul(s0_5, M4(7.259e-02, 6.638e-02, 1.431e-01, -1.144e-02, -1.329e-01, 1.351e-01, -4.865e-01, -1.523e-03, -4.205e-02, -7.159e-02, -2.173e-01, -7.713e-04, -5.663e-02, -8.602e-02, -8.862e-02, -9.402e-04));
	r += mul(s0_6, M4(-1.808e-02, 1.276e-01, 6.115e-02, 9.987e-02, -3.913e-02, 3.554e-02, 5.141e-02, -8.328e-03, -5.578e-02, 8.158e-02, 3.161e-02, -2.505e-04, -8.719e-02, 4.586e-02, 8.458e-03, -9.211e-02));
	r += mul(s0_7, M4(-1.253e+00, 8.887e-01, 2.843e-02, -3.201e-01, 8.121e-02, 5.774e-02, 9.200e-02, 7.577e-04, 8.524e-02, -1.582e-02, 3.005e-02, -6.159e-03, 7.397e-02, 1.527e-02, 2.863e-02, -2.821e-02));
	r += mul(s0_8, M4(6.673e-02, -3.357e-02, -1.557e-01, 1.718e-02, -2.860e-02, 4.462e-02, 2.562e-02, 6.090e-03, 4.330e-02, 4.699e-02, 8.226e-02, -2.911e-02, -4.621e-02, 2.737e-02, -2.286e-02, -1.613e-02));
	r += mul(s1_0, M4(-5.359e-03, 1.111e-01, 2.153e-02, 2.342e-02, -2.624e-03, 5.698e-02, 9.338e-02, 2.644e-02, 8.252e-02, -6.474e-02, -1.242e-01, 6.271e-02, 1.249e-02, 3.504e-02, -6.748e-02, -4.076e-02));
	r += mul(s1_1, M4(2.854e-02, 2.559e-02, -3.257e-02, 3.920e-03, 5.604e-02, -3.710e-02, -1.622e-01, -5.635e-02, -3.177e-02, -1.233e-01, -3.313e-02, 1.216e-03, -7.312e-02, -1.029e-02, 1.946e-01, 6.773e-02));
	r += mul(s1_2, M4(-1.458e-02, -5.698e-03, -1.961e-02, -8.889e-04, -2.635e-03, 1.197e-02, -4.199e-02, -5.904e-03, 7.759e-04, 2.955e-02, 8.130e-02, -7.299e-03, 1.703e-02, -1.315e-02, 2.314e-02, 1.346e-02));
	r += mul(s1_3, M4(-1.265e-01, -6.923e-01, 1.764e-01, 1.626e-02, -1.666e-01, -3.489e-01, 3.179e-02, -3.065e-02, 1.548e-01, 2.225e-01, 2.010e-02, 5.083e-02, 2.007e-01, -8.423e-02, -1.057e-01, 1.024e-01));
	r += mul(s1_4, M4(5.798e-03, -1.381e-01, 7.974e-02, 1.092e-01, 4.951e-01, 2.198e-01, 3.179e-02, -2.822e-01, -2.174e-01, 1.763e-01, 1.655e-01, 5.646e-02, -4.238e-01, -2.176e-01, -2.979e-01, 1.313e-01));
	r += mul(s1_5, M4(5.138e-02, 3.243e-02, 5.240e-02, -1.527e-03, 2.561e-02, 1.259e-01, 1.142e-01, -1.091e-02, -6.457e-02, -7.104e-02, -1.463e-01, 1.520e-02, 1.345e-02, -8.277e-02, -6.666e-02, 4.274e-03));
	r += mul(s1_6, M4(4.833e-02, 6.607e-02, 5.634e-03, 9.694e-02, -8.290e-02, 4.350e-02, -9.179e-04, 3.492e-02, -7.604e-03, 3.166e-02, 8.273e-02, -7.374e-02, -4.360e-02, 9.004e-02, 2.256e-03, -5.807e-02));
	r += mul(s1_7, M4(-1.493e-01, 4.019e-02, -4.826e-02, -2.376e-02, 1.717e-01, -2.368e-01, -8.881e-02, 1.899e-01, 9.985e-02, 1.556e-02, 7.257e-02, -6.983e-02, -6.333e-02, 7.496e-02, -2.213e-02, -7.544e-02));
	r += mul(s1_8, M4(4.675e-02, -4.377e-03, 6.081e-02, 7.246e-03, 3.899e-03, -5.570e-02, 7.327e-02, 5.798e-02, -5.167e-03, 3.931e-02, 2.626e-02, -3.422e-02, 9.767e-03, 4.332e-03, -2.003e-02, -9.664e-03));
	r += V4(-2.940e-03, 2.400e-03, 2.069e-04, -1.327e-03);
	return r;
}
void Pass9(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 10
//!DESC CuNNy-8x4C-BILINEAR-CHROMA-NVL-out
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(4.920e-01, 4.504e-02, 9.763e-02, 1.526e-01, 1.437e-02, -1.081e-02, 3.207e-03, -1.071e-02, 8.571e-03, 3.553e-02, 1.299e-02, 1.327e-02, -3.137e-02, -6.365e-02, -2.133e-02, -3.920e-02));
	r += mul(s0_1, M4(3.309e-01, -1.209e+00, 5.570e-01, -5.636e-01, -2.693e-02, 7.513e-02, 1.686e-03, 6.186e-03, -5.226e-02, -9.009e-02, -2.292e-03, -2.441e-03, 4.756e-03, 3.887e-02, 8.959e-02, 8.618e-02));
	r += mul(s0_2, M4(-1.205e-01, 1.786e-01, -4.785e-02, -3.627e-03, 1.311e-02, -6.718e-02, 3.443e-03, -1.898e-03, -2.275e-03, 2.040e-02, -8.606e-03, -1.088e-03, -7.007e-02, -1.176e-02, 2.519e-02, 7.013e-02));
	r += mul(s0_3, M4(5.919e-02, -1.411e-01, 5.059e-01, -1.881e-01, 6.822e-02, -1.328e-02, 5.531e-02, -2.836e-02, -8.716e-02, 3.240e-02, 1.023e-02, 4.944e-02, -2.619e-01, -7.451e-02, -7.218e-02, -6.229e-02));
	r += mul(s0_4, M4(-3.901e-01, 6.270e-01, -7.762e-01, -1.642e-01, -5.996e-01, 6.458e-02, -8.457e-02, 1.335e-01, 1.103e-01, -5.986e-01, -6.091e-02, -2.329e-01, 1.226e+00, -4.769e-02, 1.413e-01, 5.518e-03));
	r += mul(s0_5, M4(9.892e-02, -2.481e-02, -4.404e-02, -5.167e-02, 8.081e-02, -2.726e-02, -1.402e-02, -4.114e-02, -4.889e-02, -3.230e-02, -2.449e-02, 2.254e-03, -5.743e-02, 8.058e-01, -1.414e-01, -6.558e-02));
	r += mul(s0_6, M4(3.801e-02, 2.708e-02, -1.634e-04, 2.894e-03, 3.601e-02, -1.516e-02, 3.380e-02, -4.822e-02, -9.253e-02, 1.287e-01, -2.792e-01, 1.111e-01, 7.987e-02, -9.496e-02, 8.373e-03, -1.376e-01));
	r += mul(s0_7, M4(-5.749e-02, 5.621e-02, 1.935e-02, 2.232e-01, -2.179e-02, 2.013e-01, -4.983e-01, 3.284e-01, 1.102e-01, -4.126e-02, 3.682e-01, -5.411e-01, -5.745e-02, 1.481e-01, -6.745e-01, -9.456e-02));
	r += mul(s0_8, M4(-8.126e-03, -7.102e-02, 7.757e-02, -3.503e-02, -9.125e-03, -2.832e-02, 8.032e-02, -1.851e-01, -1.151e-02, -4.593e-02, -3.186e-02, 8.916e-02, 1.791e-02, 5.588e-02, 5.052e-03, -6.429e-01));
	r += mul(s1_0, M4(-7.062e-03, 1.934e-02, 4.528e-02, 3.744e-02, 3.352e-03, 2.033e-03, 4.985e-04, -8.628e-03, 9.870e-02, -7.989e-03, 1.857e-03, 4.366e-04, -4.684e-02, -3.911e-02, -3.283e-02, -3.724e-02));
	r += mul(s1_1, M4(-4.849e-02, -2.628e-01, -1.063e-02, -6.738e-03, -2.493e-02, 1.907e-02, 2.750e-03, 1.605e-02, -6.277e-02, -4.007e-02, 1.147e-02, -1.943e-02, 3.189e-01, 6.011e-02, 3.210e-03, -2.542e-02));
	r += mul(s1_2, M4(-3.699e-02, -9.644e-02, -1.897e-02, -1.355e-03, 5.507e-04, -1.122e-02, -3.299e-03, 3.734e-03, 3.505e-03, 8.482e-03, -4.054e-04, -3.747e-03, -2.097e-02, 8.437e-02, -1.751e-02, 1.407e-02));
	r += mul(s1_3, M4(1.199e-01, 4.341e-02, 6.758e-03, 3.357e-02, 6.356e-02, -1.233e-02, 4.016e-02, 9.363e-03, -4.551e-01, 1.232e-01, -3.023e-02, 1.274e-01, -8.569e-02, -9.695e-02, -7.587e-02, -1.256e-01));
	r += mul(s1_4, M4(-3.069e-01, -3.089e-02, -1.508e-01, -4.571e-01, -3.975e-01, 8.575e-02, 1.604e-02, 1.243e-01, 1.843e-01, -6.777e-01, -7.473e-03, -1.411e-01, 4.190e-02, 8.367e-02, 6.615e-01, 3.949e-01));
	r += mul(s1_5, M4(6.051e-02, 7.175e-02, -1.038e-02, -5.876e-02, 1.192e-01, -7.107e-02, 2.323e-02, -4.652e-02, -2.608e-02, -5.757e-02, 2.116e-03, 2.035e-02, -2.027e-02, 3.858e-01, 8.626e-03, 1.967e-01));
	r += mul(s1_6, M4(-1.178e-02, 1.006e-02, 3.136e-02, 1.752e-02, 7.888e-02, -6.910e-02, 1.326e-01, -4.723e-02, 2.334e-02, 3.506e-02, 4.366e-02, -2.831e-02, -1.737e-02, 1.930e-03, -1.706e-01, 6.410e-02));
	r += mul(s1_7, M4(-1.255e-02, 1.168e-01, -2.298e-01, 2.525e-01, 4.074e-01, 5.177e-01, -8.849e-01, -2.056e-01, 1.359e-02, -1.240e-01, 1.626e-01, -2.085e-01, -4.706e-03, 4.676e-02, -2.822e-01, -1.179e-01));
	r += mul(s1_8, M4(-1.359e-02, -3.361e-02, 3.590e-02, -6.438e-02, -6.587e-02, 1.288e-02, 7.544e-02, -1.392e-01, 6.518e-03, 1.825e-03, -3.334e-03, 2.716e-02, -2.387e-02, 1.848e-02, -6.365e-02, -2.644e-02));
	r += V4(8.380e-04, -1.214e-04, 2.468e-04, -9.249e-04);
	return tanh(r);
}
void Pass10(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 11
//!DESC CuNNy-8x4C-BILINEAR-CHROMA-NVL-shuffle
//!STYLE PS
//!IN t1, INPUT
float4 Pass11(float2 pos) {
	float2 pt = float2(GetInputPt());
	static const float3x3 rgb2yuv = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081};
	static const float3x3 yuv2rgb = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float4 r = 0.0;
	float2 size = float2(GetInputSize());
	float2 f = frac(pos * size);
	float3 yuv = mul(rgb2yuv, INPUT.SampleLevel(SL, pos, 0).rgb);
	int2 i = int2(f * 2.0);
	r.r = t1.SampleLevel(SP, (float2(0.5, 0.5) - f) * pt + pos, 0)[2*i.y + i.x];
	r.r += yuv.r;
	r.a = 1.0;
	r.r = clamp(r, 0.0, 1.0);
	float3 px = mul(yuv2rgb, float3(r.r, yuv.yz));
	return float4(px, 1.0);
}
