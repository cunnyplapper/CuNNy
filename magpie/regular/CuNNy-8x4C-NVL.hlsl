// CuNNy 8x4C BILINEAR CHROMA NVL
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

//!MAGPIE EFFECT
//!VERSION 3
//!OUTPUT_WIDTH INPUT_WIDTH * 2
//!OUTPUT_HEIGHT INPUT_HEIGHT * 2

//!TEXTURE
Texture2D INPUT;


//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t1;

//!PASS 1
//!DESC CuNNy-8x4C-BILINEAR-CHROMA-NVL-in
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) (dot(float3(-9.360e-01, -1.797e+00, -4.092e-01), O(INPUT, float2(x, y)).rgb) + 8.187e-01)
float4 f0(float2 pt, float2 pos, min16float s0_0, min16float s0_1, min16float s0_2, min16float s0_3, min16float s0_4, min16float s0_5, min16float s0_6, min16float s0_7, min16float s0_8) {
	V4 r = 0.0;
	r += V4(1.180e-02, -3.405e-02, 1.194e-02, -1.439e-02) * s0_0;
	r += V4(1.554e-02, -1.199e-01, -4.136e-02, -3.259e-01) * s0_1;
	r += V4(-3.102e-02, 1.780e-02, -3.274e-02, 1.959e-02) * s0_2;
	r += V4(-1.108e-02, -9.288e-02, -2.620e-02, -4.870e-02) * s0_3;
	r += V4(4.104e-01, 2.173e-01, 2.924e-01, 2.916e-01) * s0_4;
	r += V4(-2.378e-01, -8.239e-02, 7.163e-02, 2.876e-02) * s0_5;
	r += V4(-7.174e-05, -3.009e-02, -1.695e-02, 2.966e-02) * s0_6;
	r += V4(-1.958e-01, -4.564e-02, 4.760e-02, 4.649e-02) * s0_7;
	r += V4(3.699e-02, 2.414e-02, -4.308e-02, -2.212e-02) * s0_8;
	r += V4(-1.730e-03, -9.924e-03, -1.958e-01, 3.186e-02);
	return r;
}
void Pass1(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float s0_0 = l0(-1.0, -1.0);
	min16float s0_1 = l0(0.0, -1.0);
	min16float s0_2 = l0(1.0, -1.0);
	min16float s0_3 = l0(-1.0, 0.0);
	min16float s0_4 = l0(0.0, 0.0);
	min16float s0_5 = l0(1.0, 0.0);
	min16float s0_6 = l0(-1.0, 1.0);
	min16float s0_7 = l0(0.0, 1.0);
	min16float s0_8 = l0(1.0, 1.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8);
}
//!PASS 2
//!DESC CuNNy-8x4C-BILINEAR-CHROMA-NVL-conv1
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-1.923e-02, 1.234e-01, -8.939e-02, 5.177e-02, -1.382e-02, 7.150e-02, 1.169e-01, -2.929e-03, -1.691e-01, -3.097e-02, -1.848e-01, -1.113e-01, 5.754e-02, -5.601e-02, 1.883e-02, -4.772e-02));
	r += mul(s0_1, M4(1.237e-01, -2.872e-02, -4.032e-02, -5.456e-02, -1.528e-01, 2.076e-02, -1.872e-02, -4.617e-02, 6.403e-02, -3.432e-01, 4.997e-01, -4.524e-01, 7.105e-02, -1.384e-02, -1.740e-02, 1.538e-01));
	r += mul(s0_2, M4(-5.777e-02, -5.780e-02, -6.464e-02, 5.247e-03, 1.137e-01, -1.829e-02, 2.008e-01, -1.266e-02, 3.563e-02, 4.385e-02, -2.054e-01, 2.693e-01, -7.989e-02, 2.114e-02, -1.251e-01, -4.184e-02));
	r += mul(s0_3, M4(-3.683e-02, 1.505e-01, 1.926e-01, 1.588e-01, 6.372e-02, -3.402e-01, -1.157e-01, 1.003e-01, 1.252e-01, 2.402e-02, 2.752e-01, -2.706e-01, 8.264e-02, 3.799e-01, -1.657e-02, -5.353e-02));
	r += mul(s0_4, M4(9.619e-02, 1.446e-01, 7.402e-01, -6.592e-01, 1.749e-01, -6.929e-02, 7.974e-02, 1.987e-02, 1.462e-01, -5.573e-01, -2.386e-01, -9.745e-01, -1.872e-02, 7.808e-03, 2.866e-01, -3.363e-01));
	r += mul(s0_5, M4(3.542e-02, 6.784e-02, -4.486e-02, -3.186e-02, -1.221e-01, -1.014e-01, 4.579e-02, 2.267e-01, 7.440e-02, 6.236e-02, -7.095e-01, 1.638e-01, -1.893e-01, 7.964e-02, 2.833e-01, -1.142e-01));
	r += mul(s0_6, M4(2.900e-02, 1.317e-02, -1.581e-02, 5.948e-02, -4.426e-02, 1.480e-01, -1.115e-02, -1.085e-01, -2.889e-01, -4.295e-01, -2.908e-01, -1.937e-02, 1.325e-01, 1.990e-01, -2.165e-03, 1.309e-01));
	r += mul(s0_7, M4(1.421e-01, -2.303e-01, 5.531e-02, 1.770e-01, -2.642e-01, 2.929e-01, -7.976e-02, -5.837e-02, -2.945e-01, -6.286e-01, -3.568e-01, -1.004e-01, -7.957e-01, 4.063e-01, -1.915e-03, 6.788e-03));
	r += mul(s0_8, M4(4.948e-02, -2.210e-02, -2.705e-02, 3.460e-02, -1.117e-01, -3.788e-03, -8.895e-02, 1.425e-01, -2.865e-01, -2.224e-01, -1.179e-01, -1.108e-01, -8.211e-02, 2.648e-02, -3.234e-02, 1.460e-01));
	r += mul(s1_0, M4(1.853e-02, 1.133e-01, -1.833e-02, 1.254e-01, 1.418e-02, 7.781e-02, 1.307e-01, 4.710e-03, -6.605e-02, 1.676e-01, -6.892e-02, -1.143e-01, 3.493e-02, -2.672e-02, -5.250e-02, 1.614e-02));
	r += mul(s1_1, M4(2.041e-01, 2.260e-03, -2.753e-01, 1.659e-01, -1.879e-01, 5.877e-02, -1.103e-01, -1.028e-01, 7.408e-02, 1.041e-01, 1.408e-01, -2.044e-01, 2.337e-02, -5.603e-02, -1.303e-02, 1.099e-01));
	r += mul(s1_2, M4(-6.165e-02, -4.560e-02, -2.424e-01, 5.505e-02, 5.496e-02, 4.210e-02, 1.472e-01, -7.251e-02, 2.396e-02, 7.902e-02, -1.485e-01, 6.535e-02, -5.335e-02, -2.230e-02, -4.762e-02, -4.256e-02));
	r += mul(s1_3, M4(7.670e-02, 1.838e-01, 7.886e-02, 3.318e-01, 7.347e-02, -3.291e-01, -9.889e-02, 9.011e-02, 1.564e-03, 5.066e-02, 9.574e-02, -6.795e-02, -4.361e-02, 4.548e-01, -1.421e-01, -7.325e-02));
	r += mul(s1_4, M4(8.702e-02, 3.136e-01, 9.825e-02, -6.435e-01, 2.155e-01, -1.103e-01, 8.543e-02, -8.827e-02, -8.627e-02, 1.606e-02, 2.371e-02, -3.528e-01, 1.139e-01, -1.581e-02, -1.277e-02, -2.486e-01));
	r += mul(s1_5, M4(-1.390e-02, 1.275e-01, -1.154e-02, -1.158e-01, -1.264e-01, -7.280e-02, 2.244e-02, 2.212e-01, 3.121e-02, -7.679e-03, 1.884e-02, -5.820e-02, 4.959e-03, -5.207e-02, -3.478e-02, -5.773e-02));
	r += mul(s1_6, M4(3.281e-02, -1.323e-02, 3.138e-02, 3.919e-02, -4.418e-02, 1.814e-01, -8.838e-03, -7.398e-02, -6.470e-02, -1.480e-01, -3.546e-02, 9.984e-02, -2.627e-01, 2.038e-01, 8.658e-02, -9.005e-02));
	r += mul(s1_7, M4(-4.802e-02, -3.925e-02, -1.075e-04, 1.980e-02, -2.784e-01, 3.196e-01, -5.090e-02, -1.663e-02, -5.451e-02, -3.199e-01, -2.000e-02, -1.399e-01, -3.200e-01, 1.788e-01, 1.610e-01, 2.496e-01));
	r += mul(s1_8, M4(3.322e-02, -7.987e-03, -1.743e-02, 3.863e-03, -8.120e-02, 1.238e-01, 3.367e-02, 2.017e-01, -4.961e-02, -3.047e-02, 6.828e-02, 8.799e-03, -1.121e-01, 1.505e-02, -1.156e-01, 5.341e-02));
	r += V4(1.961e-02, 3.151e-02, 2.379e-02, -3.330e-01);
	return r;
}
void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 3
//!DESC CuNNy-8x4C-BILINEAR-CHROMA-NVL-conv2
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-1.024e-01, 7.689e-02, -2.633e-02, 3.778e-02, -5.344e-02, -1.704e-01, -1.737e-01, -3.913e-02, -3.645e-02, 5.559e-03, -1.080e-01, -1.765e-02, -3.135e-02, 8.090e-02, -2.198e-01, -6.248e-02));
	r += mul(s0_1, M4(-6.870e-02, 5.575e-02, -3.219e-01, -3.096e-02, 2.773e-02, 1.036e-01, 8.374e-02, 3.059e-02, 9.964e-02, -7.495e-02, 5.461e-02, -3.628e-02, -4.387e-02, -1.571e-02, 4.630e-02, -9.133e-02));
	r += mul(s0_2, M4(2.653e-01, -4.213e-02, 2.304e-01, -1.160e-01, 9.721e-02, -1.295e-02, 2.792e-01, -7.167e-02, 6.165e-02, 1.268e-02, 1.009e-02, -9.269e-03, 9.762e-02, 5.516e-03, 1.536e-01, -4.428e-02));
	r += mul(s0_3, M4(5.448e-02, 5.099e-02, 9.644e-02, -1.273e-01, 5.448e-02, 1.563e-01, -1.308e-01, -9.824e-02, 1.865e-01, -3.305e-01, -2.495e-01, 1.355e-01, 1.036e-02, 2.478e-02, 5.652e-02, 1.022e-01));
	r += mul(s0_4, M4(-3.197e-01, -2.881e-01, -2.556e-01, 8.086e-01, -1.298e-01, 1.610e-01, 3.353e-02, 1.509e-01, -1.023e-01, 7.012e-01, -3.433e-01, 1.115e-01, 5.398e-01, 4.150e-01, -1.967e-01, -1.685e-01));
	r += mul(s0_5, M4(-7.482e-02, 1.877e-01, 1.503e-01, -2.627e-01, 8.628e-02, -5.227e-01, 4.109e-02, -9.485e-02, -5.700e-02, 5.436e-02, 2.229e-02, -5.410e-02, 6.206e-02, -4.870e-01, 2.474e-01, -1.406e-01));
	r += mul(s0_6, M4(-2.811e-02, 1.581e-01, -7.196e-02, 4.943e-02, -3.626e-02, -3.075e-02, 2.361e-01, -3.626e-02, 1.321e-02, -1.356e-01, 1.558e-01, -1.161e-01, 1.643e-02, -7.402e-02, 2.254e-01, 6.248e-02));
	r += mul(s0_7, M4(4.608e-02, -1.367e-01, 8.219e-02, 2.085e-02, -1.191e-01, 1.535e-01, -2.997e-01, 8.635e-02, -1.268e-01, 1.551e-01, 1.606e-02, -1.960e-01, -5.839e-04, 6.385e-02, -1.764e-01, 2.807e-01));
	r += mul(s0_8, M4(-1.301e-02, -2.211e-02, -6.960e-02, 7.987e-03, 1.411e-01, -5.891e-02, -3.940e-02, 4.741e-02, 2.917e-02, 9.233e-03, -8.536e-02, 7.753e-02, 5.826e-02, 2.063e-03, -1.341e-01, 5.626e-02));
	r += mul(s1_0, M4(-6.765e-02, -1.548e-01, -2.803e-01, 7.174e-02, 1.700e-01, -6.439e-01, -3.219e-01, 5.358e-02, -3.853e-02, -1.674e-01, -6.923e-02, 5.841e-02, -4.533e-02, 7.744e-02, -1.747e-01, -6.585e-02));
	r += mul(s1_1, M4(3.430e-02, 2.950e-01, -1.769e-01, -6.597e-02, 7.269e-01, -4.156e-01, -5.985e-01, -7.051e-01, 2.413e-01, -6.044e-02, 2.144e-01, -1.050e-01, -5.220e-02, -4.856e-02, 6.720e-02, -7.107e-02));
	r += mul(s1_2, M4(1.038e-01, 2.158e-01, -3.423e-02, -9.794e-03, -1.367e-01, 6.572e-01, -4.462e-01, -1.003e-01, 6.746e-03, 2.901e-01, 1.972e-02, -5.303e-02, 9.659e-02, -3.681e-02, 1.722e-01, -3.795e-02));
	r += mul(s1_3, M4(5.608e-02, -1.482e-02, -1.343e-01, -4.405e-02, -1.229e-01, 5.830e-02, -1.618e-02, -3.584e-01, 6.756e-02, -7.533e-01, -4.322e-02, 3.716e-01, 2.017e-02, 1.564e-02, 8.416e-02, 1.190e-01));
	r += mul(s1_4, M4(-3.432e-01, 1.013e-02, 2.300e-01, 4.327e-01, 7.481e-02, -1.626e-01, -3.916e-02, -3.760e-01, -3.352e-01, -8.525e-02, -6.973e-01, 1.800e-03, 5.059e-01, 3.467e-01, -2.939e-01, -1.352e-01));
	r += mul(s1_5, M4(-3.454e-04, -4.947e-03, 1.294e-01, -1.400e-01, 1.659e-02, 1.457e-01, 1.218e-01, 1.294e-01, 1.267e-01, -3.746e-01, 1.441e-01, -2.221e-01, 3.199e-02, -3.389e-01, 1.675e-01, -1.351e-01));
	r += mul(s1_6, M4(3.584e-02, -1.536e-03, 2.360e-02, -4.139e-02, 9.828e-03, 9.017e-02, 1.031e-01, -1.010e-01, 7.280e-02, -1.740e-01, 9.772e-01, -9.491e-02, 6.581e-03, -6.593e-02, 2.001e-01, 6.288e-02));
	r += mul(s1_7, M4(-8.585e-03, -6.494e-02, -2.126e-02, 9.833e-02, 9.426e-02, -1.561e-01, 4.393e-03, 1.529e-02, -1.791e-01, -1.197e-02, -4.002e-01, -4.840e-02, 1.788e-02, 4.435e-02, -8.797e-02, 2.086e-01));
	r += mul(s1_8, M4(-5.895e-03, 3.176e-02, -4.155e-02, 2.533e-02, -5.901e-02, 4.953e-02, -6.858e-02, 1.224e-02, -2.221e-01, 6.259e-01, -5.945e-01, 1.203e-01, 5.075e-02, 3.422e-02, -1.311e-01, 5.261e-02));
	r += V4(8.863e-02, 1.001e-02, 5.374e-03, -7.297e-03);
	return r;
}
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 4
//!DESC CuNNy-8x4C-BILINEAR-CHROMA-NVL-conv3
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(1.760e-01, -1.217e-01, 8.566e-02, 3.176e-02, -2.892e-01, -1.406e-01, 1.861e-01, 8.322e-03, 2.964e-01, -8.808e-02, -3.278e-02, 1.775e-02, 6.007e-02, 2.072e-01, -5.661e-02, 5.072e-02));
	r += mul(s0_1, M4(-1.588e-01, -1.887e-01, -1.397e-01, 2.167e-02, -1.154e-01, -1.617e-01, 3.105e-01, 9.099e-03, 1.128e-01, 3.689e-01, -8.474e-01, 1.389e-02, -4.912e-01, 7.001e-02, 3.663e-01, -1.955e-02));
	r += mul(s0_2, M4(4.247e-02, 1.773e-01, -3.720e-02, 2.296e-02, -4.728e-02, -6.716e-02, 6.634e-02, 2.249e-02, -1.499e-01, -3.066e-01, 3.526e-01, 1.516e-02, 8.717e-02, 8.379e-02, 2.394e-01, -9.867e-03));
	r += mul(s0_3, M4(2.804e-01, -2.872e-01, -4.577e-02, 1.008e-02, 7.249e-02, -1.075e-01, -3.742e-01, -1.282e-02, 9.760e-02, -1.034e-01, 1.656e-02, 1.058e-02, 8.839e-02, -5.192e-02, -1.417e-01, 2.751e-02));
	r += mul(s0_4, M4(-3.981e-01, 3.115e-01, 9.560e-02, 2.146e-01, 1.473e-01, 2.617e-01, 1.305e-02, 5.786e-02, 4.583e-01, 2.331e-02, -1.623e-01, 9.744e-02, 2.933e-01, -2.014e-01, -2.266e-01, 1.661e-01));
	r += mul(s0_5, M4(-7.642e-02, 9.926e-02, -4.347e-02, 1.183e-01, 1.489e-01, 9.546e-02, 1.899e-02, 5.816e-02, -7.106e-03, 1.883e-01, -1.141e-01, 2.031e-02, 1.798e-01, 2.236e-01, 4.449e-02, 2.030e-01));
	r += mul(s0_6, M4(1.777e-01, -4.576e-02, -8.035e-04, -1.279e-02, 1.906e-01, -2.274e-02, -1.351e-01, -2.180e-02, 8.865e-02, -8.111e-02, -4.330e-02, 3.494e-02, 5.517e-02, -2.201e-02, 1.529e-02, -1.461e-02));
	r += mul(s0_7, M4(5.866e-02, 7.739e-02, 8.896e-03, 3.548e-01, -1.453e-02, 1.054e-01, -2.492e-01, 9.890e-02, -5.618e-02, 1.189e-01, -4.088e-01, 1.169e-01, 6.529e-03, 5.188e-02, -1.206e-01, -5.968e-02));
	r += mul(s0_8, M4(-1.026e-01, -2.394e-02, 6.885e-02, -4.658e-02, -1.129e-01, -6.994e-02, 1.111e-01, 4.625e-03, -4.336e-02, 1.499e-02, -1.024e-02, 8.367e-03, -2.918e-02, -1.492e-02, 5.493e-02, 5.931e-03));
	r += mul(s1_0, M4(1.839e-01, -1.633e-01, 1.218e-01, 3.019e-02, -1.160e-01, -1.464e-01, 1.557e-02, 7.677e-03, 5.663e-02, -1.675e-02, 3.546e-02, -4.790e-03, -1.436e-01, 1.427e-01, 6.581e-02, 2.200e-02));
	r += mul(s1_1, M4(-2.072e-01, -1.327e-01, -1.639e-01, 1.708e-02, 1.345e-01, -1.179e-01, 1.964e-02, -2.644e-02, 7.615e-03, -1.938e-03, -1.634e-01, 6.600e-03, 2.123e-01, 4.022e-01, 4.493e-01, -3.878e-02));
	r += mul(s1_2, M4(1.678e-02, 1.577e-01, 1.184e-02, 1.633e-02, 1.226e-01, 1.753e-01, -4.471e-01, -3.397e-03, -5.559e-02, -1.344e-01, -1.796e-02, 6.636e-03, 1.596e-01, 1.876e-01, -3.721e-01, -3.353e-02));
	r += mul(s1_3, M4(3.920e-01, -2.608e-01, -3.321e-02, 7.701e-03, 5.066e-02, -3.328e-02, 2.507e-01, 1.522e-02, -7.143e-02, 1.840e-02, 6.424e-02, -1.717e-02, -7.252e-02, -9.082e-02, -6.397e-02, 1.305e-02));
	r += mul(s1_4, M4(-5.170e-01, 2.560e-01, -2.968e-02, 2.065e-01, 3.728e-01, 4.050e-01, 2.469e-01, -1.113e-01, 2.251e-01, -1.985e-01, 3.133e-01, 5.323e-02, 3.669e-01, 2.966e-02, 3.569e-01, 4.154e-01));
	r += mul(s1_5, M4(-2.602e-02, 1.476e-01, 2.122e-02, 1.701e-01, 1.535e-01, 9.911e-02, -7.549e-02, 4.289e-02, 1.399e-01, 1.567e-01, 9.551e-02, 6.459e-02, -5.110e-03, 8.849e-02, 2.446e-02, 9.312e-02));
	r += mul(s1_6, M4(2.012e-01, -3.111e-02, 2.701e-02, 7.891e-03, -2.057e-02, -4.347e-02, -6.169e-02, 2.447e-02, 1.619e-03, 5.715e-03, -4.280e-03, -9.128e-03, 2.403e-02, -2.049e-03, -2.384e-03, -3.474e-02));
	r += mul(s1_7, M4(5.174e-02, 7.311e-02, -9.622e-03, 1.928e-01, -1.714e-01, 1.399e-01, 1.265e-01, 2.692e-02, 6.997e-02, 6.945e-02, -1.467e-01, -1.337e-03, 4.337e-02, 4.335e-02, 5.079e-02, 1.067e-01));
	r += mul(s1_8, M4(-1.003e-01, -4.592e-02, 5.646e-02, -6.444e-02, -1.389e-01, -1.180e-01, 2.479e-01, -1.106e-02, -2.324e-02, 6.603e-03, -3.604e-03, -1.763e-02, -2.106e-02, -9.502e-03, 1.276e-02, 2.384e-02));
	r += V4(-8.514e-03, -3.793e-03, 7.295e-04, -2.475e-01);
	return r;
}
void Pass4(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 5
//!DESC CuNNy-8x4C-BILINEAR-CHROMA-NVL-conv4
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-3.676e-02, -1.767e-02, 6.188e-03, -5.773e-02, -1.189e-02, 2.325e-02, 8.383e-02, -3.402e-02, 1.944e-01, 4.307e-02, -1.411e-01, -7.140e-02, 3.736e-01, 1.274e-01, -1.289e-02, 3.162e-01));
	r += mul(s0_1, M4(1.539e-01, -2.358e-02, 2.860e-02, 4.993e-02, -1.238e-01, -2.085e-02, 8.425e-02, 6.725e-02, 1.647e-01, 1.499e-01, -7.269e-02, 1.386e-01, 1.801e+00, 5.456e-01, -1.295e+00, 5.763e-01));
	r += mul(s0_2, M4(1.625e-01, 7.483e-02, -6.076e-02, 7.918e-02, -9.273e-02, -1.509e-01, 1.024e-01, -2.197e-01, 7.168e-02, 5.722e-03, -3.077e-02, -5.174e-02, 9.382e-01, -4.286e-01, 8.659e-01, -1.332e+00));
	r += mul(s0_3, M4(-1.455e-01, 7.685e-02, 1.975e-01, 5.090e-02, 1.023e-01, 6.277e-02, 5.944e-02, 7.483e-02, -2.391e-02, -8.813e-02, -1.809e-01, -1.743e-01, 8.390e-02, 7.603e-02, 4.695e-01, -8.022e-03));
	r += mul(s0_4, M4(-2.873e-01, 2.456e-01, 5.854e-01, 3.322e-01, 2.703e-01, 3.152e-01, -3.552e-02, 3.452e-01, 3.262e-01, 3.360e-01, -2.896e-01, -9.320e-02, 4.314e-01, 7.398e-01, -1.048e-01, 1.513e-01));
	r += mul(s0_5, M4(-5.379e-01, 7.287e-01, -3.085e-01, -1.949e-02, 3.261e-03, -2.721e-01, 2.222e-01, -6.664e-01, 3.525e-02, 9.631e-02, -1.388e-01, -2.500e-01, 3.861e-01, 8.186e-03, 1.275e-01, 5.903e-02));
	r += mul(s0_6, M4(-6.857e-02, 1.274e-02, 1.821e-01, 8.241e-02, -1.276e-01, -4.738e-02, 6.098e-02, 1.757e-02, 1.761e-02, -4.685e-03, -1.102e-03, 7.354e-02, 2.153e-02, -1.219e-01, 1.724e-01, -1.549e-01));
	r += mul(s0_7, M4(-8.456e-02, 6.352e-02, 2.231e-01, 2.145e-02, -5.351e-02, -2.051e-01, 2.070e-01, -2.929e-01, -3.545e-02, 1.624e-02, -2.300e-01, -8.798e-02, 1.624e-01, 4.507e-02, -1.299e-01, 1.832e-01));
	r += mul(s0_8, M4(9.800e-03, 1.597e-01, -4.345e-02, 6.098e-02, -1.370e-01, 6.643e-03, 2.101e-02, -2.995e-01, 1.410e-01, 9.259e-02, -2.898e-02, 1.209e-01, 9.795e-02, -1.361e-01, 2.929e-01, 6.749e-02));
	r += mul(s1_0, M4(4.576e-02, -7.136e-03, 7.342e-02, -4.218e-02, 3.870e-02, 2.307e-03, -5.160e-02, -8.696e-03, -8.575e-02, 1.545e-02, 6.989e-02, -2.093e-02, -9.668e-02, -6.952e-02, -1.249e-01, 1.304e-01));
	r += mul(s1_1, M4(1.542e-01, 5.109e-02, -3.108e-02, -1.033e-01, 1.619e-02, 4.643e-02, 1.486e-02, 1.267e-01, 2.235e-02, -5.813e-03, -8.495e-04, 1.908e-01, 1.540e-01, -8.470e-02, 9.120e-02, -1.723e-01));
	r += mul(s1_2, M4(8.537e-02, 1.225e-01, -7.283e-02, 1.158e-01, -6.123e-02, -1.042e-01, 4.087e-02, -8.384e-02, 5.258e-02, -4.093e-02, 3.309e-02, 9.986e-02, -7.007e-02, 1.480e-01, 5.192e-02, 3.318e-02));
	r += mul(s1_3, M4(3.361e-02, 9.307e-03, -3.023e-02, 6.748e-02, 1.082e-01, 6.321e-03, -1.343e-01, -1.567e-02, -1.557e-01, 4.554e-02, 3.924e-01, 8.822e-03, 4.173e-02, 5.385e-02, 9.500e-02, -1.268e-01));
	r += mul(s1_4, M4(-1.042e-01, 8.812e-02, 2.471e-01, 1.662e-01, 3.028e-01, 1.193e-01, -4.693e-01, 1.597e-01, -8.052e-02, 3.301e-01, -9.885e-03, 2.660e-01, -4.734e-02, 1.842e-01, 1.307e-01, 1.792e-01));
	r += mul(s1_5, M4(-2.343e-01, 5.895e-01, -8.442e-02, 4.053e-01, 2.357e-02, -4.077e-01, 1.227e-01, -6.556e-01, -3.779e-02, 2.456e-02, 1.090e-01, -2.162e-01, -1.350e-01, -6.115e-02, -1.600e-01, 4.724e-02));
	r += mul(s1_6, M4(-6.287e-02, 3.128e-02, -1.785e-02, 5.115e-02, -3.769e-02, -1.151e-01, -1.437e-01, -3.382e-02, 1.046e-03, 1.837e-02, 8.892e-02, 1.023e-01, 1.786e-02, -6.666e-02, -6.119e-02, -1.394e-01));
	r += mul(s1_7, M4(-3.754e-02, -7.155e-02, 1.274e-02, 6.665e-02, -1.018e-01, -1.828e-01, 1.500e-01, -3.326e-01, -8.959e-02, 4.663e-02, 1.161e-01, -2.245e-02, 9.193e-02, -8.759e-04, -4.141e-02, 1.792e-02));
	r += mul(s1_8, M4(7.187e-03, 3.733e-02, -1.265e-01, -3.609e-02, 8.565e-02, -7.095e-02, 1.238e-01, -1.268e-01, 3.070e-02, 4.798e-02, 4.422e-02, -2.306e-02, 4.623e-02, -1.008e-01, 2.641e-02, 2.434e-02));
	r += V4(-9.185e-03, 1.211e-02, 7.601e-03, 2.614e-03);
	return r;
}
void Pass5(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 6
//!DESC CuNNy-8x4C-BILINEAR-CHROMA-NVL-conv5
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-1.734e-03, -1.186e-02, -3.912e-02, 6.120e-02, 1.333e-01, 3.168e-02, 8.320e-02, 6.683e-03, -1.019e-02, -2.003e-02, -8.244e-04, 3.541e-02, -1.266e-01, -1.386e-02, -6.522e-02, 4.726e-02));
	r += mul(s0_1, M4(-7.060e-02, -6.632e-03, -2.401e-02, 1.074e-01, -7.993e-03, 2.105e-02, 8.404e-02, -3.302e-02, -2.051e-01, -1.978e-02, -9.253e-02, 8.458e-02, -1.961e-01, 4.656e-03, -4.742e-02, -4.062e-02));
	r += mul(s0_2, M4(7.949e-02, -3.559e-02, 1.934e-02, 1.606e-02, -4.847e-03, 4.163e-02, 6.714e-02, -3.261e-02, 2.511e-02, -9.439e-02, 1.004e-03, 1.441e-01, -7.373e-02, -6.913e-02, 1.537e-02, -3.690e-02));
	r += mul(s0_3, M4(1.927e-02, -1.016e-01, 6.660e-03, 6.089e-02, 2.959e-01, 9.724e-02, 1.459e-01, 1.668e-01, 3.685e-02, -1.843e-02, -1.671e-02, -7.942e-02, -2.093e-01, -1.285e-01, -1.246e-01, -2.803e-01));
	r += mul(s0_4, M4(-4.159e-01, -2.192e-01, -5.213e-01, 5.191e-01, -1.126e-01, 2.869e-01, 4.164e-01, 1.995e-01, -6.800e-02, -2.095e-01, -3.126e-01, -3.101e-01, -5.667e-01, -2.407e-02, -1.984e-01, -2.271e-01));
	r += mul(s0_5, M4(1.208e-01, -1.499e-01, 1.236e-01, 2.829e-01, -3.266e-03, -1.681e-02, -6.840e-02, 7.177e-02, 2.172e-01, 6.947e-02, 1.791e-01, -3.532e-02, -2.092e-01, -3.044e-02, -1.424e-01, -4.164e-02));
	r += mul(s0_6, M4(-5.002e-02, -7.260e-03, -2.923e-02, 1.868e-01, 7.990e-02, -3.033e-03, -5.785e-02, 2.552e-01, -4.070e-02, 2.266e-02, -1.398e-02, 8.668e-02, -7.449e-02, -4.804e-03, -3.529e-02, -2.690e-01));
	r += mul(s0_7, M4(-4.003e-03, 2.687e-01, 4.312e-04, 2.284e-02, 1.704e-01, 1.069e-01, 1.704e-01, -1.161e-01, -8.011e-02, 1.596e-01, 3.081e-02, -1.174e-02, -1.878e-01, -5.137e-01, 8.193e-02, -2.777e-01));
	r += mul(s0_8, M4(8.222e-02, 7.839e-02, -1.225e-01, -6.122e-03, 1.713e-01, 3.478e-02, 2.069e-02, 8.840e-02, -1.104e-02, 8.858e-02, -1.082e-01, 1.303e-01, -1.513e-01, -6.141e-02, -6.522e-02, 4.737e-02));
	r += mul(s1_0, M4(-1.646e-02, 3.114e-02, 7.004e-03, 1.301e-01, -1.653e-01, 8.585e-02, -5.847e-02, 8.676e-02, -7.300e-02, -1.153e-02, -1.759e-02, 9.889e-02, 2.660e-02, -2.806e-02, 5.133e-03, -1.150e-02));
	r += mul(s1_1, M4(-1.964e-01, -1.815e-03, 6.074e-02, 9.048e-02, -2.218e-01, -6.531e-02, -4.807e-02, 7.374e-02, -2.328e-01, -2.129e-02, 5.437e-02, 9.074e-02, 4.329e-02, 2.557e-02, -9.438e-02, 6.211e-02));
	r += mul(s1_2, M4(-4.427e-02, -2.505e-03, 1.943e-02, -9.299e-03, -6.636e-02, -1.534e-02, 9.891e-02, -7.367e-04, -8.770e-02, 9.710e-03, 1.038e-01, 2.408e-02, 5.066e-02, -8.501e-02, -4.086e-02, 3.094e-02));
	r += mul(s1_3, M4(8.868e-02, -6.474e-03, -5.959e-02, -5.972e-02, -1.938e-01, 1.796e-01, 9.455e-02, 4.293e-02, -4.871e-02, 5.085e-03, -2.007e-03, -4.199e-03, 1.748e-01, -1.807e-01, -3.525e-02, -1.965e-01));
	r += mul(s1_4, M4(-4.036e-01, -3.685e-01, -5.020e-01, 1.308e-01, -4.092e-01, 1.792e-01, 1.149e+00, -4.624e-01, 1.362e-01, -6.598e-02, -2.842e-01, -3.525e-01, -1.380e-01, 3.049e-02, -3.824e-01, 5.703e-01));
	r += mul(s1_5, M4(-6.781e-02, -1.632e-01, -1.738e-02, 1.101e-01, -1.044e-01, -6.707e-03, -5.133e-02, -9.604e-02, -3.136e-01, 7.812e-02, -6.082e-01, -9.672e-02, 8.656e-02, -2.075e-01, 1.090e-01, 1.265e-01));
	r += mul(s1_6, M4(-6.157e-02, -7.292e-03, -2.192e-02, 6.920e-02, -1.026e-01, 1.844e-03, -1.133e-02, 2.863e-01, -3.317e-02, 3.389e-02, 1.229e-03, 4.086e-02, 6.488e-02, -2.412e-02, 4.287e-03, -6.517e-02));
	r += mul(s1_7, M4(6.373e-02, 3.785e-01, -1.860e-02, -8.862e-02, -1.319e-01, 3.064e-01, 2.021e-01, -6.242e-01, -1.316e-02, 2.000e-01, 5.943e-02, -3.710e-01, 4.829e-03, -4.643e-01, 5.872e-02, 2.167e-01));
	r += mul(s1_8, M4(1.969e-01, -8.417e-02, 6.199e-02, 8.365e-02, 8.034e-02, 1.239e-01, -5.153e-03, -2.429e-02, 4.577e-02, -1.673e-01, -3.218e-02, 1.587e-01, -3.527e-02, -2.204e-02, -3.943e-02, 1.072e-01));
	r += V4(1.535e-03, -4.135e-03, -7.338e-03, 7.752e-03);
	return r;
}
void Pass6(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 7
//!DESC CuNNy-8x4C-BILINEAR-CHROMA-NVL-conv6
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(2.176e-02, 1.847e-02, 1.019e-01, 1.747e-04, 8.287e-03, -4.171e-01, 1.253e-02, -2.536e-02, 3.177e-02, 1.788e-02, 2.410e-02, 2.981e-02, 4.317e-02, 1.298e-01, -3.287e-02, 3.187e-03));
	r += mul(s0_1, M4(-5.521e-03, 1.228e-01, 1.661e-02, 2.015e-01, 4.196e-02, -2.168e-01, 1.699e-01, 1.492e-02, -5.665e-02, 1.604e-01, -1.348e-02, 1.062e-01, -8.954e-02, 8.609e-02, 8.288e-02, 1.773e-02));
	r += mul(s0_2, M4(-5.628e-02, 1.255e-01, -1.428e-02, -8.177e-02, -1.776e-02, -3.636e-02, 4.097e-02, -8.454e-02, 2.962e-02, -9.181e-03, -2.554e-02, 1.117e-02, 3.999e-02, -1.084e-01, 8.258e-02, -9.206e-02));
	r += mul(s0_3, M4(-4.752e-02, 7.935e-02, -3.886e-02, 3.913e-03, 1.884e-02, -2.883e-01, -3.220e-01, 2.058e-02, 8.984e-02, 8.993e-01, 2.117e-01, 7.541e-02, -8.031e-02, 4.108e-01, 9.490e-02, 1.101e-01));
	r += mul(s0_4, M4(7.723e-02, -1.180e-01, -5.879e-01, -8.994e-01, -5.619e-02, -2.664e-02, -2.003e-01, -8.946e-02, -2.025e-01, 1.117e-01, 1.667e-01, 6.541e-01, 2.897e-01, -7.555e-02, 2.056e-01, 1.242e-01));
	r += mul(s0_5, M4(1.898e-01, -6.163e-02, -2.202e-02, 3.803e-01, 8.275e-02, -6.912e-02, 3.091e-03, -5.653e-03, 1.551e-03, 6.486e-02, -6.045e-02, -1.257e-01, -1.528e-01, 1.085e-01, 1.068e-01, -1.468e-01));
	r += mul(s0_6, M4(-3.432e-03, 1.896e-01, -4.846e-02, -4.297e-02, 1.451e-01, 9.671e-02, -8.896e-02, 1.340e-02, -1.493e-01, -1.613e-01, 3.665e-02, -1.280e-02, 1.350e-02, -1.205e-01, 5.892e-03, 1.224e-02));
	r += mul(s0_7, M4(-1.696e-01, 7.058e-02, 1.880e-01, 6.646e-02, 8.374e-02, 6.151e-02, -7.174e-02, -6.569e-02, -2.231e-01, -2.457e-01, 2.235e-01, 5.459e-02, -1.178e-01, 3.966e-02, -2.780e-02, -3.577e-02));
	r += mul(s0_8, M4(-1.851e-01, 1.194e-01, -1.983e-02, -2.718e-02, 4.957e-02, -1.252e-03, -3.626e-02, 6.605e-03, 7.941e-02, -5.566e-02, -3.899e-02, 1.087e-01, 6.579e-03, 3.322e-02, 6.392e-02, -9.936e-04));
	r += mul(s1_0, M4(3.364e-03, 2.396e-01, -9.616e-03, -2.548e-04, 5.856e-02, -1.593e-01, 5.116e-02, -7.232e-03, 1.845e-02, 1.695e-01, -1.291e-01, -4.133e-02, 2.017e-02, -2.125e-01, 9.240e-02, 2.577e-02));
	r += mul(s1_1, M4(-1.131e-02, -1.021e-02, 7.738e-02, -7.821e-02, 7.876e-01, -2.725e-01, 9.352e-02, 2.046e-01, -7.139e-02, 3.547e-02, -8.330e-02, -3.872e-02, -6.274e-02, 5.636e-02, -3.860e-01, 1.626e-01));
	r += mul(s1_2, M4(-6.192e-02, 2.587e-02, -1.506e-02, 4.182e-02, 3.944e-02, -1.417e-02, -2.075e-02, 6.981e-02, 3.746e-02, -7.767e-04, -3.027e-02, -4.504e-02, -1.148e-02, 1.319e-02, 1.998e-01, -1.840e-01));
	r += mul(s1_3, M4(-7.968e-02, 4.890e-02, 2.282e-01, 1.470e-01, -6.779e-02, 1.754e-01, 6.616e-02, 2.810e-03, 1.890e-01, 6.726e-01, -1.751e-01, -4.008e-02, 9.523e-03, 1.660e-01, -7.107e-02, 8.373e-02));
	r += mul(s1_4, M4(5.072e-01, -6.419e-02, -1.585e+00, -4.672e-01, -7.473e-01, -5.283e-02, 3.227e-01, 5.123e-02, 7.246e-02, -1.156e-01, 1.730e-01, 3.309e-01, 8.971e-01, -2.699e-01, -3.198e-01, 2.861e-01));
	r += mul(s1_5, M4(1.843e-01, -1.205e-01, -7.786e-02, 1.575e-01, -8.726e-02, -5.333e-02, 9.025e-02, 8.104e-02, -1.930e-02, 3.022e-02, -1.837e-02, -7.886e-02, 3.855e-01, 1.424e-01, -1.259e-01, -3.634e-02));
	r += mul(s1_6, M4(-1.831e-02, 2.783e-01, 1.988e-01, 4.209e-02, 7.099e-02, 3.181e-02, -7.265e-02, -1.979e-02, -1.286e-01, 5.967e-02, 6.747e-03, 1.832e-02, 1.101e-01, 1.420e-02, -4.060e-02, 1.401e-03));
	r += mul(s1_7, M4(2.281e-02, 2.568e-03, -6.249e-03, 8.859e-02, -9.237e-02, -1.590e-02, 1.009e-01, -4.061e-02, -1.706e-01, -1.477e-01, 1.733e-01, 8.120e-03, 2.888e-01, 7.136e-02, -4.101e-03, 7.589e-02));
	r += mul(s1_8, M4(1.285e-01, -3.235e-02, -9.848e-02, -1.155e-01, -3.568e-02, -3.771e-02, 2.191e-03, 2.903e-02, 9.057e-02, 4.358e-02, -3.231e-02, 9.302e-02, 9.062e-02, 6.323e-02, 5.181e-02, 1.001e-01));
	r += V4(-3.460e-03, 6.037e-03, 5.875e-03, 1.106e-03);
	return r;
}
void Pass7(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 8
//!DESC CuNNy-8x4C-BILINEAR-CHROMA-NVL-conv7
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(5.332e-01, 1.758e+00, 7.200e-03, 6.070e-01, -8.457e-03, 3.409e-02, -6.058e-03, -3.406e-02, 1.744e-02, 1.145e-01, 5.436e-02, 2.409e-02, 1.322e-02, -1.039e-01, -1.256e-02, 3.797e-02));
	r += mul(s0_1, M4(-9.115e-02, 7.363e-01, 2.524e-01, -9.673e-01, -3.358e-03, -1.268e-01, 2.975e-02, -5.971e-02, -6.716e-02, -1.228e-01, -3.089e-02, -1.566e-02, -2.222e-02, 1.726e-01, -6.247e-02, 3.857e-02));
	r += mul(s0_2, M4(-9.604e-02, 7.326e-03, -7.280e-02, -1.623e-01, 7.292e-03, -2.201e-02, -1.467e-01, 1.295e-01, -3.310e-02, -3.084e-02, -5.669e-02, 1.006e-02, 1.373e-02, 1.426e-02, 3.208e-02, -9.401e-02));
	r += mul(s0_3, M4(5.567e-01, -1.509e-01, -2.239e-01, -3.976e-01, 2.065e-02, 3.517e-02, 1.467e-02, 1.764e-02, -2.797e-02, 2.407e-01, -1.653e-01, 3.496e-02, -1.439e-02, -8.572e-01, -1.406e-01, -1.391e-01));
	r += mul(s0_4, M4(-6.513e-02, -1.305e-01, -7.299e-02, 4.550e-01, 1.345e-01, -3.115e-01, 3.411e-01, 1.372e-01, -4.982e-02, 2.261e-01, 6.840e-01, 3.044e-01, -1.103e-01, 5.220e-01, -6.564e-02, 2.999e-01));
	r += mul(s0_5, M4(2.020e-02, 1.770e-01, 2.460e-01, -3.271e-01, -7.884e-02, 2.590e-01, 1.230e-01, -2.569e-01, -1.378e-03, 1.207e-01, 1.607e-01, -1.743e-01, 7.559e-02, 9.819e-02, 3.479e-02, -9.645e-02));
	r += mul(s0_6, M4(-1.777e-02, -1.360e-02, 1.551e-02, -1.303e-02, 4.040e-02, 1.989e-03, -3.408e-02, 1.218e-02, 7.264e-02, 1.362e-02, 1.575e-02, 6.555e-03, -9.345e-02, -7.395e-02, -7.396e-02, 3.454e-02));
	r += mul(s0_7, M4(3.278e-02, -1.796e-02, 1.962e-01, -9.297e-02, -6.922e-02, 4.075e-03, 1.064e-01, -4.347e-02, 9.500e-02, -1.986e-02, -1.340e-01, -2.885e-02, 3.887e-01, -3.243e-01, 5.506e-02, 2.803e-01));
	r += mul(s0_8, M4(1.427e-02, -8.596e-03, 1.128e-02, -7.908e-02, 6.769e-02, -1.074e-02, -7.959e-02, -4.177e-02, -2.092e-02, 1.041e-02, -8.702e-02, 7.056e-02, 1.191e-01, -9.990e-02, -7.835e-02, 1.835e-01));
	r += mul(s1_0, M4(1.953e-02, 1.100e-01, -1.276e-01, 1.715e-01, 3.333e-02, -2.107e-02, 3.490e-02, 5.236e-03, 1.276e-02, -7.652e-02, 2.142e-01, -3.434e-02, 1.495e-03, -4.933e-02, 1.134e-02, -3.911e-02));
	r += mul(s1_1, M4(-1.184e-02, -2.055e-02, 2.175e-02, 8.204e-03, -2.373e-02, -3.381e-01, -3.166e-01, -6.316e-04, -1.750e-01, -4.151e-01, 1.469e-01, -9.768e-02, -4.952e-02, 4.488e-02, 1.847e-02, -8.114e-02));
	r += mul(s1_2, M4(-5.530e-03, -6.521e-03, -1.674e-03, 1.468e-02, 3.464e-02, -2.048e-01, -6.386e-02, 1.700e-01, -7.251e-02, -7.211e-02, -5.684e-02, 8.481e-02, 1.799e-02, 9.467e-03, -5.492e-02, 2.266e-03));
	r += mul(s1_3, M4(3.914e-02, -3.310e-02, 1.520e-01, 7.213e-02, 1.277e-02, 1.080e-01, -8.517e-03, -2.152e-02, 6.264e-02, -1.396e-01, -1.333e-01, 7.923e-02, -7.245e-02, 1.111e-01, -4.212e-02, -9.838e-02));
	r += mul(s1_4, M4(1.783e-01, -4.735e-02, 3.174e-01, 4.816e-01, 1.227e+00, -3.713e-01, 6.311e-01, 8.014e-02, -5.889e-01, -3.001e-01, 1.484e-01, 1.262e+00, -4.806e-01, 3.138e-01, 3.225e-01, -1.027e+00));
	r += mul(s1_5, M4(3.234e-02, 9.788e-02, 9.032e-02, -2.832e-02, 4.306e-01, 2.023e-01, 5.994e-01, 5.619e-01, -5.053e-02, 3.360e-01, 1.155e-01, -2.041e-01, -1.863e-02, -1.627e-01, 7.440e-02, 4.580e-02));
	r += mul(s1_6, M4(1.287e-01, 6.866e-02, -9.978e-02, 2.326e-02, 1.014e-01, 2.322e-02, -7.973e-02, 1.905e-02, 2.729e-03, 1.208e-02, 1.011e-01, 2.261e-02, 5.169e-02, 1.908e-02, -7.998e-02, 5.499e-02));
	r += mul(s1_7, M4(1.556e-01, -6.164e-02, 3.766e-02, -7.281e-02, 1.934e-01, -1.904e-01, 5.450e-02, -2.396e-01, -3.972e-02, -7.644e-03, 4.138e-02, 6.439e-02, 3.071e-02, -9.826e-02, 1.950e-01, -1.357e-01));
	r += mul(s1_8, M4(8.230e-03, -6.128e-03, -1.432e-01, 9.644e-02, 2.291e-01, -1.184e-01, -8.926e-01, 4.821e-01, -2.550e-02, -8.863e-03, -3.115e-02, -4.216e-03, 1.637e-02, -5.545e-02, -3.800e-02, 1.145e-01));
	r += V4(7.025e-04, 3.867e-03, 5.965e-03, -4.963e-03);
	return r;
}
void Pass8(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 9
//!DESC CuNNy-8x4C-BILINEAR-CHROMA-NVL-conv8
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(8.657e-02, -1.429e-01, 8.164e-02, -4.807e-02, 1.221e-02, -1.292e-02, 1.383e-02, -1.405e-03, -4.655e-02, 3.174e-02, -7.865e-03, -2.639e-02, -1.026e-02, -3.503e-02, -6.049e-02, 1.155e-01));
	r += mul(s0_1, M4(4.866e-02, 1.559e-01, 2.588e-01, -1.906e-01, 2.509e-02, 7.416e-03, 1.362e-02, -5.577e-02, -2.681e-02, -4.198e-02, -1.033e-02, 1.028e-01, 7.174e-03, 1.928e-01, 1.334e-01, 4.454e-02));
	r += mul(s0_2, M4(3.461e-03, -2.197e-02, -4.166e-03, 2.118e-02, 6.106e-03, -5.771e-03, -1.194e-02, -3.281e-02, 1.697e-04, -3.041e-02, 1.321e-02, 2.475e-03, -1.162e-03, -1.521e-02, -1.072e-01, 1.047e-01));
	r += mul(s0_3, M4(-6.591e-01, -2.623e-01, -1.910e-01, 2.447e-03, -1.306e-01, 9.722e-03, -4.751e-02, 1.639e-01, -2.088e-02, 7.808e-02, 6.465e-02, 3.486e-01, 6.588e-01, 2.961e-01, 2.085e-01, 5.191e-01));
	r += mul(s0_4, M4(-9.437e-02, 7.078e-02, -9.053e-01, 2.214e-01, -8.618e-02, -2.618e-01, 3.591e-02, 4.404e-01, 1.939e-01, -1.011e-01, 1.236e-01, -4.777e-01, -2.262e-01, -7.949e-01, 3.252e-01, -7.444e-01));
	r += mul(s0_5, M4(3.361e-02, -5.219e-02, 3.863e-02, -9.447e-02, -4.553e-02, 1.274e-01, 2.930e-01, -1.197e-01, 6.323e-02, -1.968e-01, -1.078e-01, -6.457e-02, -6.155e-02, 2.495e-01, 7.324e-01, -2.284e-01));
	r += mul(s0_6, M4(1.851e-01, -1.748e-03, 2.387e-03, -7.612e-03, 6.630e-02, 5.725e-02, 3.102e-03, 1.853e-01, 1.196e-02, 1.829e-02, -1.741e-02, -7.520e-04, -1.642e-02, 2.673e-02, 4.047e-03, -7.664e-03));
	r += mul(s0_7, M4(1.421e-01, 8.017e-03, 2.881e-01, -4.878e-02, 1.925e-02, -3.749e-02, 1.660e-01, -2.979e-01, 1.936e-01, -4.486e-02, 7.986e-02, -1.738e-01, -6.813e-02, -1.266e-01, -2.207e-03, -2.585e-01));
	r += mul(s0_8, M4(2.223e-02, -3.205e-02, -4.232e-02, 3.287e-02, -1.415e-02, 1.191e-02, -2.559e-02, 7.461e-03, -2.082e-03, -4.675e-02, 4.719e-02, 1.054e-02, -6.420e-02, 1.058e-01, -1.204e-01, 7.778e-02));
	r += mul(s1_0, M4(-4.170e-02, 4.981e-03, 1.603e-02, 1.788e-01, -2.496e-02, -3.830e-03, 3.944e-03, 8.636e-02, -5.798e-02, 5.528e-02, 1.076e-02, 1.292e-01, -1.636e-02, 3.276e-02, -3.368e-03, 1.174e-01));
	r += mul(s1_1, M4(4.114e-02, -9.211e-02, 2.653e-02, -1.681e-01, 2.641e-02, -1.284e-01, -3.591e-02, -1.031e-01, 6.896e-03, -2.515e-02, -1.171e-01, 6.189e-02, -4.139e-02, -1.664e-03, -2.576e-02, 9.303e-02));
	r += mul(s1_2, M4(2.931e-03, 1.597e-01, 1.374e-01, 4.604e-02, -5.506e-02, -4.823e-02, -1.020e-02, -5.867e-02, 2.790e-02, -7.642e-02, -2.686e-02, -3.166e-02, -8.829e-03, -1.001e-04, -1.881e-02, 3.213e-02));
	r += mul(s1_3, M4(-1.304e-02, 2.236e-02, -2.813e-02, 2.417e-02, -1.462e-01, 1.000e-02, -3.891e-02, 1.194e-01, -4.238e-01, 2.037e-01, 2.441e-02, 5.137e-01, 2.339e-01, -6.922e-02, 5.043e-02, 2.666e-01));
	r += mul(s1_4, M4(-6.274e-01, 3.741e-01, -1.134e-01, 5.875e-02, 2.170e-01, 4.432e-02, -6.887e-02, 6.466e-01, 5.176e-01, -8.734e-01, -8.066e-01, -4.509e-01, 1.203e-01, -2.822e-01, 5.830e-02, -2.437e-01));
	r += mul(s1_5, M4(1.565e-01, -3.079e-01, -4.282e-01, -1.300e-02, 1.939e-02, -3.018e-01, -7.210e-01, -3.942e-02, 7.600e-02, -1.555e-01, -2.316e-01, 6.826e-02, 5.340e-02, -6.103e-02, -3.805e-02, -1.179e-01));
	r += mul(s1_6, M4(1.186e-02, -2.611e-02, -1.284e-02, 4.221e-02, 3.335e-02, 1.956e-02, -1.618e-02, 6.339e-02, 8.741e-02, 7.447e-02, 6.961e-02, 5.059e-02, 1.196e-01, 2.541e-02, -2.642e-03, 1.810e-02));
	r += mul(s1_7, M4(3.497e-01, -7.261e-02, 9.127e-02, -1.228e-01, 4.131e-01, 6.803e-03, 1.104e-01, -1.039e-01, 1.226e-01, -9.012e-02, 6.961e-02, -6.347e-02, 8.829e-02, -9.437e-03, 9.101e-02, -6.696e-02));
	r += mul(s1_8, M4(-6.404e-03, -3.674e-02, 1.264e-01, 2.529e-02, 5.421e-02, -2.232e-01, 2.456e-01, -2.826e-01, -3.291e-03, -4.599e-02, 1.854e-02, 1.473e-02, -1.547e-02, -1.155e-02, -9.224e-03, 4.092e-02));
	r += V4(-1.785e-03, 3.599e-03, 6.469e-04, -5.247e-03);
	return r;
}
void Pass9(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 10
//!DESC CuNNy-8x4C-BILINEAR-CHROMA-NVL-out
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-3.489e-02, 1.513e-02, -5.465e-03, -8.576e-03, -5.045e-03, 2.261e-03, -1.366e-02, -1.096e-02, 1.167e-01, -1.329e-02, 1.169e-02, -8.719e-03, -2.075e-02, 1.374e-02, 1.376e-02, 2.132e-02));
	r += mul(s0_1, M4(-8.568e-02, 7.439e-03, 2.347e-02, 4.065e-02, 1.106e-01, 1.793e-02, 1.490e-02, 1.886e-03, -7.642e-02, 6.164e-02, -6.165e-02, -2.533e-02, -8.995e-02, -1.509e-01, 1.107e-02, 2.119e-02));
	r += mul(s0_2, M4(-2.268e-01, 5.616e-02, -2.922e-02, -9.102e-03, -8.633e-03, 4.719e-02, -8.641e-03, -1.260e-02, -5.079e-03, -4.135e-02, 7.902e-03, -6.729e-04, -5.553e-02, 1.531e-02, -1.428e-02, 6.469e-02));
	r += mul(s0_3, M4(4.163e-02, -1.024e-02, 1.461e-02, 3.786e-02, -1.470e-01, 1.309e-02, 6.665e-02, 4.089e-02, -1.537e-01, 1.736e-02, 1.982e-04, -1.753e-01, -1.954e-02, 2.572e-03, -1.587e-01, 9.479e-02));
	r += mul(s0_4, M4(3.584e-01, -3.862e-02, 2.095e-01, 1.008e-01, -3.258e-01, -8.658e-01, 1.062e-01, -2.476e-01, 1.786e-01, 2.368e-01, 1.100e-01, 3.877e-01, 9.473e-01, 1.893e-01, 2.882e-01, -6.063e-01));
	r += mul(s0_5, M4(-2.408e-01, 7.544e-02, -1.421e-01, 6.348e-01, -7.349e-02, -1.310e-01, 1.212e-02, 1.072e-01, 2.533e-02, 6.285e-02, -2.364e-05, -2.426e-02, 4.294e-03, 1.978e-01, -1.555e-02, 1.441e-01));
	r += mul(s0_6, M4(-8.927e-03, 1.363e-02, -2.753e-02, -2.120e-02, 2.081e-02, 3.315e-02, 1.216e-02, -3.239e-03, 4.314e-02, -6.660e-02, 1.479e-01, 9.661e-02, -4.858e-02, 3.735e-02, -1.075e-02, 5.126e-02));
	r += mul(s0_7, M4(-4.379e-02, 7.001e-02, -1.451e-01, -1.184e-01, -2.566e-02, 4.824e-02, -1.055e-01, -1.219e-01, 6.811e-02, 7.347e-02, 1.411e-01, 1.783e-01, -1.151e-02, -1.121e-02, 1.918e-01, 1.692e-01));
	r += mul(s0_8, M4(-6.021e-02, -1.347e-02, -6.069e-02, -2.359e-01, -1.825e-02, -7.855e-03, -4.807e-02, -5.017e-02, 4.227e-03, 1.741e-02, -1.102e-02, -1.922e-02, 9.650e-03, -1.442e-03, 1.445e-02, -2.545e-02));
	r += mul(s1_0, M4(-7.105e-02, 3.870e-02, 2.832e-02, -5.939e-03, -4.445e-04, 7.848e-03, 3.793e-03, -8.730e-04, 3.702e-01, 1.153e-02, -1.672e-01, -1.080e-01, -3.992e-02, 1.280e-02, 5.316e-03, -1.014e-02));
	r += mul(s1_1, M4(5.090e-02, -6.114e-02, -7.871e-02, -1.253e-02, 9.743e-02, 2.598e-02, -4.411e-03, 3.241e-02, -2.035e-01, 4.679e-01, -1.201e-01, -2.685e-01, -3.932e-02, -4.432e-02, -3.499e-02, -9.284e-03));
	r += mul(s1_2, M4(-8.124e-02, -7.050e-02, -3.882e-02, 8.613e-03, -1.834e-02, 5.157e-02, -1.034e-02, -9.479e-03, -1.052e-03, -1.538e-01, 1.728e-02, 2.197e-02, 8.783e-03, -1.174e-02, -2.464e-03, 1.188e-03));
	r += mul(s1_3, M4(2.883e-02, -9.305e-04, 9.840e-03, 6.336e-02, 3.764e-03, -2.687e-02, 3.523e-02, 5.435e-03, -5.604e-02, 1.591e-01, -3.779e-01, -1.743e-01, 5.995e-02, -2.007e-02, -4.276e-02, 3.285e-02));
	r += mul(s1_4, M4(1.440e-01, -2.153e-01, 8.087e-01, 2.251e-01, -8.283e-01, -2.466e-01, -1.966e-01, -1.778e-01, -8.230e-02, -7.837e-02, 4.884e-01, 4.639e-01, 2.789e-01, 1.204e-01, 1.725e-01, 3.278e-02));
	r += mul(s1_5, M4(-7.549e-02, -8.965e-02, 3.244e-02, 1.691e-01, -9.510e-02, -1.304e-01, -5.180e-02, 2.353e-01, 3.590e-02, 5.586e-02, -6.034e-02, 3.741e-02, 6.066e-02, 2.371e-01, 9.590e-03, 4.400e-03));
	r += mul(s1_6, M4(-7.965e-03, 1.426e-02, -4.389e-02, -1.907e-02, 1.570e-02, 2.356e-02, -1.432e-02, 1.720e-03, 2.189e-03, -5.383e-02, 1.558e-01, 4.117e-02, -1.718e-02, 1.214e-02, 2.220e-02, -1.724e-02));
	r += mul(s1_7, M4(-2.585e-02, 4.186e-02, -1.104e-01, -1.126e-01, 3.309e-02, 2.777e-02, -2.500e-01, -1.073e-01, 1.023e-01, 4.012e-02, 8.184e-02, 2.144e-01, 3.434e-02, -4.677e-04, 1.946e-01, 1.008e-01));
	r += mul(s1_8, M4(-4.358e-02, -2.959e-02, -8.968e-02, -9.916e-02, -4.443e-02, -4.672e-02, -3.636e-02, 4.450e-02, -4.979e-03, 3.705e-02, -5.105e-03, -4.042e-02, 3.057e-03, 2.808e-03, -2.308e-02, 7.762e-02));
	r += V4(2.602e-03, 1.864e-03, 2.002e-03, 1.127e-03);
	return tanh(r);
}
void Pass10(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 11
//!DESC CuNNy-8x4C-BILINEAR-CHROMA-NVL-shuffle
//!STYLE PS
//!IN t1, INPUT
float4 Pass11(float2 pos) {
	float2 pt = float2(GetInputPt());
	static const float3x3 rgb2yuv = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081};
	static const float3x3 yuv2rgb = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float4 r = 0.0;
	float2 size = float2(GetInputSize());
	float2 f = frac(pos * size);
	float3 yuv = mul(rgb2yuv, INPUT.SampleLevel(SL, pos, 0).rgb);
	int2 i = int2(f * 2.0);
	r.r = t1.SampleLevel(SP, (float2(0.5, 0.5) - f) * pt + pos, 0)[2*i.y + i.x];
	r.r += yuv.r;
	r.a = 1.0;
	r.r = clamp(r, 0.0, 1.0);
	float3 px = mul(yuv2rgb, float3(r.r, yuv.yz));
	return float4(px, 1.0);
}
