// CuNNy 2x4C BILINEAR CHROMA NVL
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

//!MAGPIE EFFECT
//!VERSION 3
//!OUTPUT_WIDTH INPUT_WIDTH * 2
//!OUTPUT_HEIGHT INPUT_HEIGHT * 2

//!TEXTURE
Texture2D INPUT;


//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t1;

//!PASS 1
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-NVL-in
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) (dot(float3(3.037e-01, 5.840e-01, 1.288e-01), O(INPUT, float2(x, y)).rgb) + -8.534e-01)
float4 f0(float2 pt, float2 pos, min16float s0_0, min16float s0_1, min16float s0_2, min16float s0_3, min16float s0_4, min16float s0_5, min16float s0_6, min16float s0_7, min16float s0_8) {
	V4 r = 0.0;
	r += V4(-7.905e-03, -4.187e-02, -8.070e-03, 9.303e-02) * s0_0;
	r += V4(3.992e-02, 6.699e-01, -2.401e-02, -4.124e-02) * s0_1;
	r += V4(-1.060e-02, -8.784e-02, -1.225e-02, -5.001e-02) * s0_2;
	r += V4(-1.152e-02, 2.698e-02, -3.684e-02, -2.491e-01) * s0_3;
	r += V4(-1.151e-01, -6.709e-01, 7.157e-01, -1.150e-01) * s0_4;
	r += V4(5.507e-02, 1.065e-01, -7.598e-03, 2.093e-01) * s0_5;
	r += V4(5.765e-01, 1.874e-02, -4.911e-03, -4.676e-01) * s0_6;
	r += V4(-4.932e-01, -1.806e-02, -2.807e-02, 7.447e-01) * s0_7;
	r += V4(-3.458e-02, -1.473e-03, -1.295e-02, -1.248e-01) * s0_8;
	r += V4(7.208e-05, -5.610e-04, -9.286e-02, 7.905e-04);
	return r;
}
void Pass1(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float s0_0 = l0(-1.0, -1.0);
	min16float s0_1 = l0(0.0, -1.0);
	min16float s0_2 = l0(1.0, -1.0);
	min16float s0_3 = l0(-1.0, 0.0);
	min16float s0_4 = l0(0.0, 0.0);
	min16float s0_5 = l0(1.0, 0.0);
	min16float s0_6 = l0(-1.0, 1.0);
	min16float s0_7 = l0(0.0, 1.0);
	min16float s0_8 = l0(1.0, 1.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8);
}
//!PASS 2
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-NVL-conv1
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-2.104e-01, 6.387e-01, 1.549e-01, -1.070e-01, 1.062e-01, 6.555e-02, -4.658e-02, -8.146e-02, -3.936e-01, -1.902e-01, -4.501e-01, 6.423e-01, -3.570e-02, -2.289e-01, -9.638e-02, 1.519e-01));
	r += mul(s0_1, M4(-2.386e-01, -2.532e-01, -2.753e-01, -6.894e-01, -1.140e-01, 1.202e-01, -4.199e-03, 1.008e-01, 3.215e-01, -6.116e-01, 6.478e-01, 8.120e-01, -5.974e-01, -3.497e-01, -5.747e-01, 1.298e-01));
	r += mul(s0_2, M4(1.844e-01, 4.042e-01, 8.926e-01, 1.707e-01, -3.528e-02, 1.385e-02, -5.596e-02, 5.202e-02, 3.201e-01, 1.200e-02, -1.190e-01, 1.227e+00, 1.677e-01, -2.867e-01, 6.141e-03, 4.698e-02));
	r += mul(s0_3, M4(-8.077e-02, 5.020e-01, 2.611e-01, -1.460e-01, -2.540e-01, 4.551e-01, -2.189e-01, -3.397e-01, -2.855e+00, -1.225e+00, 1.758e-01, 3.990e-01, -1.307e-01, -1.082e-01, 4.184e-02, -3.087e-02));
	r += mul(s0_4, M4(3.355e-01, 5.801e-01, -8.907e-02, -5.252e-01, 8.691e-02, -4.598e-01, -5.097e-01, -1.305e+00, -3.436e+00, 3.617e+00, 7.221e+00, 6.866e+00, 1.821e-01, -7.402e-01, -6.528e-01, -1.713e-02));
	r += mul(s0_5, M4(-1.340e-01, 7.520e-01, 2.828e-01, 3.380e-01, 2.538e-01, -4.974e-02, -6.501e-02, -1.023e-02, 1.688e-01, -8.635e-01, 1.210e+00, 9.079e-01, -5.797e-02, -7.135e-02, 4.042e-02, 2.754e-01));
	r += mul(s0_6, M4(4.182e-02, 4.278e-01, 2.026e-01, 2.713e-02, -4.110e-01, -5.498e-02, 1.996e-02, -2.483e-01, 2.418e-01, 8.167e-01, -3.577e-01, 3.298e-02, -2.083e-02, -1.183e-01, 2.661e-01, 5.826e-03));
	r += mul(s0_7, M4(-6.246e-02, 1.578e-01, -2.805e-01, -1.547e-01, -8.397e-01, 3.506e-01, 9.497e-01, 6.174e-02, 6.442e-01, -1.830e+00, -4.461e-01, 8.617e-01, -6.714e-02, -1.397e-01, -8.859e-02, -2.105e-02));
	r += mul(s0_8, M4(3.589e-02, 1.939e-01, -2.309e-02, 1.440e-01, 5.451e-02, 1.573e-01, 3.095e-01, 2.183e-01, 4.717e-01, -3.969e-01, 1.432e-01, 3.312e-01, 6.714e-02, -4.895e-02, -1.117e-01, 4.138e-02));
	r += mul(s1_0, M4(-1.792e-01, -3.134e-01, -1.694e-02, 2.012e-01, 6.415e-02, -9.128e-02, 1.032e-01, -3.594e-02, -6.713e-02, -7.985e-02, 3.706e-02, -1.177e-01, -1.607e-01, 3.680e-01, 1.314e-01, -4.126e-02));
	r += mul(s1_1, M4(2.993e-01, -7.994e-01, -6.154e-01, 8.064e-01, -1.721e-01, 5.206e-02, 1.392e-01, 3.515e-02, -1.528e-02, 1.344e-01, -7.510e-02, -2.606e-02, -3.955e-01, 1.677e-03, 2.651e-02, 1.613e-02));
	r += mul(s1_2, M4(-3.858e-01, -1.402e-01, -3.838e-03, 2.498e-01, -1.485e-02, -1.355e-02, 1.329e-02, -8.815e-02, 7.104e-02, 7.579e-02, 3.170e-02, 8.396e-02, 1.318e-01, 2.589e-01, -7.692e-02, -1.028e-01));
	r += mul(s1_3, M4(-9.592e-02, 1.908e-04, 2.063e-01, -4.643e-02, 3.840e-02, -2.738e-01, -8.410e-02, 1.592e-01, 3.370e-02, -1.039e-01, -2.205e-01, -9.004e-02, -3.700e-02, 5.215e-01, 1.886e-01, -9.808e-02));
	r += mul(s1_4, M4(5.533e-01, -2.742e-01, -6.075e-01, -7.526e-02, 2.143e-01, -4.217e-01, -6.253e-01, -2.791e-01, 1.582e-02, -1.620e-01, -1.969e-02, 1.585e-01, 3.252e-01, 1.754e-01, -2.409e-01, -2.961e-01));
	r += mul(s1_5, M4(-3.862e-01, -8.539e-02, -2.038e-01, 2.822e-01, 2.602e-02, -1.334e-01, -1.125e-01, -3.173e-01, -3.651e-02, 1.181e-01, 1.528e-01, 3.069e-02, -1.401e-01, 4.842e-01, 5.232e-02, 1.510e-01));
	r += mul(s1_6, M4(4.973e-02, -1.352e-01, 2.358e-01, 2.247e-02, 7.607e-03, -1.182e-02, -1.881e-02, 9.078e-02, -1.904e-01, 1.136e-01, 3.668e-02, -1.252e-02, 4.939e-02, 5.176e-01, 2.647e-01, 1.588e-02));
	r += mul(s1_7, M4(-1.553e-02, -2.718e-01, -2.510e-01, -5.477e-02, -7.168e-01, 3.729e-01, -3.935e-02, 8.610e-01, 1.026e-01, 3.011e-02, 1.004e-01, 1.597e-02, -8.276e-02, 3.096e-01, -1.042e-01, -6.905e-02));
	r += mul(s1_8, M4(2.412e-02, -2.033e-01, -6.485e-02, 5.888e-02, -2.404e-01, -7.874e-02, -2.328e-01, -2.627e-02, 8.610e-02, -1.274e-01, -3.639e-02, -4.308e-02, -1.999e-02, 1.499e-01, -5.976e-02, 6.099e-02));
	r += V4(1.814e-04, 2.587e-03, 2.285e-03, 6.881e-03);
	return r;
}
void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 3
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-NVL-conv2
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-6.400e-02, 5.266e-02, 1.158e-01, -7.745e-02, 1.320e-02, -5.473e-02, -6.666e-02, 7.967e-02, 5.365e-02, 2.328e-01, 1.346e-01, -1.226e-01, 2.443e-03, 1.331e-01, 1.251e-02, 7.764e-03));
	r += mul(s0_1, M4(-6.546e-02, 2.266e-01, 1.781e-02, -3.713e-02, -9.304e-02, 2.290e-02, 8.350e-02, -8.179e-02, 6.714e-02, 9.906e-02, 4.551e-02, -4.615e-03, -8.948e-02, -3.588e-01, -1.176e-01, 1.666e-01));
	r += mul(s0_2, M4(2.583e-02, 1.005e-01, 1.443e-02, -6.958e-02, -7.251e-02, -3.721e-02, -1.395e-01, 8.506e-02, 1.151e-02, -4.094e-02, 2.074e-02, 1.984e-02, 1.050e-01, 2.510e-01, 2.239e-01, -1.333e-01));
	r += mul(s0_3, M4(-1.067e-01, -1.249e-01, 2.449e-02, -3.503e-02, -5.701e-02, 4.823e-02, -1.048e-01, -4.230e-02, 5.147e-02, 2.525e-03, -1.294e-01, -6.701e-02, 2.388e-01, 2.998e-01, 3.089e-02, -8.740e-02));
	r += mul(s0_4, M4(-7.510e-02, -6.337e-01, -1.024e+00, 4.150e-01, -1.305e-01, -4.524e-01, -1.400e-01, 2.647e-01, 1.729e-01, 4.014e-01, 4.230e-01, -1.461e-01, -9.339e-01, -1.820e+00, -9.238e-01, 7.992e-01));
	r += mul(s0_5, M4(-9.425e-04, 2.226e-02, -6.012e-02, -1.975e-02, 1.685e-01, 1.363e-01, 1.819e-01, -1.031e-01, -6.017e-02, -1.112e-02, -6.517e-02, 4.244e-02, -2.065e-01, -2.334e-01, -1.470e-01, 2.024e-02));
	r += mul(s0_6, M4(2.021e-05, 4.650e-02, 8.160e-02, -5.762e-02, 1.783e-02, 3.837e-02, 9.999e-02, -6.508e-02, -3.541e-03, -8.352e-02, -3.266e-02, 1.018e-01, 8.352e-02, 1.202e-01, 1.141e-01, -1.255e-01));
	r += mul(s0_7, M4(3.202e-02, -3.768e-02, 1.528e-01, -7.470e-02, 2.109e-02, 5.848e-02, -8.585e-02, -1.426e-02, -4.100e-02, 2.556e-02, 1.081e-01, -3.860e-03, 1.882e-02, 3.848e-01, 1.624e-01, -2.319e-01));
	r += mul(s0_8, M4(3.372e-02, -1.957e-02, 1.538e-01, -5.759e-02, -6.966e-02, -1.183e-02, 4.311e-02, -1.207e-01, -1.730e-02, -8.374e-02, -1.440e-01, 1.274e-01, 2.967e-02, 2.016e-01, 2.145e-01, -2.088e-01));
	r += mul(s1_0, M4(-3.422e-02, 1.342e-02, -4.138e-02, 1.080e-02, -3.154e-02, 9.148e-02, 1.663e-01, -1.353e-01, -3.845e-02, 2.066e-01, 2.801e-02, -1.033e-01, -7.117e-03, -1.343e-01, -2.701e-02, 1.140e-01));
	r += mul(s1_1, M4(-1.401e-01, 2.870e-01, -4.046e-02, 3.612e-03, 7.715e-01, 1.452e-01, 1.983e-01, 2.861e-01, -6.285e-03, 2.803e-01, -4.818e-02, 1.806e-02, 1.063e-03, -1.363e-01, 3.126e-02, -4.699e-02));
	r += mul(s1_2, M4(-3.562e-02, 4.418e-02, -1.539e-01, 1.265e-01, -1.002e-01, -5.137e-01, 8.882e-02, -7.334e-02, -6.506e-02, -2.398e-01, -2.976e-02, 6.469e-02, 8.184e-03, 1.088e-01, 2.372e-02, -3.673e-02));
	r += mul(s1_3, M4(-3.276e-02, -2.253e-02, -3.602e-02, -5.310e-02, 8.077e-02, 1.117e-02, 1.125e-01, 6.687e-02, 3.506e-02, -8.102e-03, -4.258e-02, -4.578e-02, 5.506e-02, 1.294e-01, 6.530e-02, -8.265e-02));
	r += mul(s1_4, M4(3.271e-01, 2.940e-01, 1.470e-01, -4.196e-01, -1.180e-01, 2.383e-01, -3.779e-01, -1.388e-01, 1.133e+00, 1.395e+00, 1.387e+00, -8.354e-01, -2.840e-01, -4.165e-01, -4.268e-01, 4.424e-01));
	r += mul(s1_5, M4(-4.837e-02, 1.595e-01, -5.431e-01, 3.487e-01, -2.021e-02, 4.248e-01, 4.893e-01, -7.271e-01, -1.494e-01, -1.057e-01, 7.498e-02, -9.681e-02, -4.973e-02, -2.241e-01, -8.209e-02, -7.170e-03));
	r += mul(s1_6, M4(3.268e-03, -1.072e-01, -1.277e-02, 6.868e-02, 4.912e-02, 7.982e-02, 2.952e-02, -5.797e-02, -7.121e-02, -2.423e-02, -7.984e-02, -2.398e-02, -2.562e-02, 3.456e-02, 1.867e-03, -2.100e-02));
	r += mul(s1_7, M4(3.496e-02, 3.557e-02, 1.714e-01, 4.064e-02, -2.288e-03, 3.176e-02, 8.881e-02, -7.147e-02, -1.480e-01, 1.222e-01, 1.042e-01, -2.290e-01, 4.114e-02, 1.045e-01, 7.759e-02, -1.509e-01));
	r += mul(s1_8, M4(-6.115e-02, -1.237e-02, -1.203e-01, 6.792e-02, 2.579e-02, 6.821e-02, 3.841e-02, 2.291e-04, -2.854e-02, -1.094e-01, -6.097e-02, 4.228e-02, -1.792e-02, -2.734e-02, 2.748e-01, -1.704e-01));
	r += V4(-1.666e-03, -3.827e-03, -3.237e-03, 3.711e-03);
	return r;
}
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 4
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-NVL-out
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(1.164e-01, -1.822e-02, 9.113e-03, -4.930e-03, -1.003e-01, 5.764e-02, -6.470e-02, -7.179e-04, -1.130e-01, -7.348e-02, 1.974e-02, -7.644e-03, -2.075e-01, -9.351e-02, -9.491e-02, -3.531e-02));
	r += mul(s0_1, M4(-2.421e-02, -1.343e-01, -9.838e-02, -2.524e-02, 1.071e-01, 5.115e-02, -5.089e-02, -3.886e-02, -2.568e-01, -3.488e-02, 2.192e-01, 1.243e-01, -2.190e-02, -7.364e-02, 3.082e-02, 3.949e-02));
	r += mul(s0_2, M4(-8.125e-02, 7.768e-02, 2.912e-03, 6.267e-02, 7.752e-03, 3.672e-02, -1.859e-02, -1.476e-02, -1.047e-02, -1.782e-01, -2.981e-02, 1.819e-03, -4.302e-02, -9.549e-02, -4.594e-02, -2.997e-02));
	r += mul(s0_3, M4(-2.192e-02, -5.571e-02, 9.336e-03, 2.212e-03, -2.627e-01, 1.158e-01, -2.368e-01, 8.567e-02, 6.371e-02, -3.577e-02, 2.313e-02, -3.381e-02, -8.960e-02, -8.571e-02, -1.920e-01, -3.462e-02));
	r += mul(s0_4, M4(4.834e-01, -2.568e-01, -3.528e-01, -1.494e+00, 2.188e-01, -4.671e-01, 9.091e-01, 2.686e-01, 3.920e-01, 8.783e-01, -4.540e-01, 6.232e-01, 2.243e-01, 4.963e-01, 4.868e-01, 3.604e-01));
	r += mul(s0_5, M4(-8.872e-02, 7.251e-02, -1.251e-01, 1.021e-01, -1.479e-02, 1.788e-02, -8.663e-02, 9.471e-02, 5.190e-02, -5.358e-02, 2.056e-01, -2.549e-01, 1.128e-03, -1.938e-02, 3.410e-02, 1.608e-02));
	r += mul(s0_6, M4(-6.142e-02, -1.461e-02, 3.664e-02, 4.815e-02, -1.821e-02, -1.341e-02, -1.086e-01, -1.650e-02, 2.857e-02, 1.957e-02, 4.921e-02, -3.692e-03, -2.106e-02, -4.530e-02, -7.397e-02, -3.527e-02));
	r += mul(s0_7, M4(-1.062e-01, -2.153e-01, 1.299e-01, 1.313e-01, 7.685e-02, 2.212e-01, -1.549e-01, -8.501e-02, -5.276e-02, -1.704e-02, 2.911e-02, 7.537e-02, 2.200e-02, 8.085e-02, -4.407e-02, 7.948e-02));
	r += mul(s0_8, M4(-3.120e-02, -5.847e-02, 2.177e-03, 8.968e-02, -1.571e-02, 7.935e-02, -6.326e-02, -5.264e-02, 7.956e-03, -6.040e-02, 8.755e-02, -5.002e-02, -2.337e-05, 4.227e-03, -9.494e-03, -4.798e-02));
	r += mul(s1_0, M4(6.159e-02, 1.282e-02, 2.655e-02, -4.380e-03, -7.598e-02, -3.723e-02, -9.029e-03, -6.686e-03, -6.616e-02, -3.723e-02, -5.531e-02, -1.326e-02, -2.447e-01, -6.714e-02, -6.652e-02, -2.189e-02));
	r += mul(s1_1, M4(-3.501e-02, -5.123e-02, -8.718e-02, -4.175e-02, 5.720e-03, -5.307e-02, -8.703e-03, 3.381e-02, -1.797e-02, 2.703e-02, 8.348e-02, 7.980e-03, -2.631e-01, -2.638e-02, 2.036e-01, 1.640e-01));
	r += mul(s1_2, M4(2.899e-03, 4.081e-02, 3.173e-02, 6.773e-03, -1.261e-02, 1.237e-02, -4.595e-03, -1.185e-02, -1.672e-02, -9.741e-02, -4.870e-02, -5.596e-03, -5.041e-02, -1.690e-01, -5.611e-02, 7.737e-02));
	r += mul(s1_3, M4(4.919e-03, -3.873e-02, 3.726e-02, -5.530e-02, -1.086e-01, -4.847e-02, -1.504e-01, -2.845e-02, 4.945e-02, 2.923e-02, 5.630e-03, 1.230e-02, -3.218e-01, 6.321e-02, -2.489e-01, 6.914e-02));
	r += mul(s1_4, M4(-2.576e-01, -5.225e-01, -4.541e-01, -2.725e-01, 1.265e-01, 3.405e-01, 3.333e-01, 1.412e-01, 2.279e-01, 3.412e-01, 3.119e-01, 3.442e-01, 1.293e+00, 3.156e-01, 1.836e-01, 3.855e-02));
	r += mul(s1_5, M4(-1.821e-02, 1.238e-01, 2.438e-02, -8.200e-02, 2.572e-02, -7.448e-02, -1.972e-02, 5.835e-02, -3.798e-02, 1.390e-02, 2.386e-02, -1.636e-03, -2.194e-02, 7.428e-02, 1.318e-01, -1.842e-01));
	r += mul(s1_6, M4(-1.103e-02, 5.087e-03, 3.066e-02, -6.541e-03, -1.955e-02, -4.932e-02, -8.521e-02, -2.530e-02, 1.030e-02, 6.237e-03, 3.664e-02, 4.494e-02, -5.054e-02, -6.861e-02, -1.033e-01, -1.238e-04));
	r += mul(s1_7, M4(2.004e-02, 1.649e-02, 1.294e-01, -1.272e-01, -1.015e-02, 5.872e-02, -1.062e-01, 6.470e-02, 8.583e-03, 1.949e-02, 2.485e-02, 5.239e-02, -5.022e-02, 1.470e-01, -4.849e-02, 5.570e-02));
	r += mul(s1_8, M4(-1.577e-02, -6.619e-02, -2.241e-02, 1.169e-01, 1.108e-02, 1.425e-02, 2.866e-03, -5.994e-02, 8.432e-03, 3.060e-03, 2.341e-03, -2.904e-02, -3.759e-02, -1.766e-02, 2.510e-02, -8.905e-02));
	r += V4(-6.771e-04, -5.952e-04, -6.187e-04, -5.665e-04);
	return tanh(r);
}
void Pass4(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 5
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-NVL-shuffle
//!STYLE PS
//!IN t1, INPUT
float4 Pass5(float2 pos) {
	float2 pt = float2(GetInputPt());
	static const float3x3 rgb2yuv = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081};
	static const float3x3 yuv2rgb = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float4 r = 0.0;
	float2 size = float2(GetInputSize());
	float2 f = frac(pos * size);
	float3 yuv = mul(rgb2yuv, INPUT.SampleLevel(SL, pos, 0).rgb);
	int2 i = int2(f * 2.0);
	r.r = t1.SampleLevel(SP, (float2(0.5, 0.5) - f) * pt + pos, 0)[2*i.y + i.x];
	r.r += yuv.r;
	r.a = 1.0;
	r.r = clamp(r, 0.0, 1.0);
	float3 px = mul(yuv2rgb, float3(r.r, yuv.yz));
	return float4(px, 1.0);
}
