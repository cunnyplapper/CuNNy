// CuNNy 2x4C BILINEAR CHROMA NVL
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

//!MAGPIE EFFECT
//!VERSION 3
//!OUTPUT_WIDTH INPUT_WIDTH * 2
//!OUTPUT_HEIGHT INPUT_HEIGHT * 2

//!TEXTURE
Texture2D INPUT;


//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R16G16B16A16_FLOAT
Texture2D t0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R16G16B16A16_FLOAT
Texture2D t1;

//!PASS 1
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-NVL-in
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) (dot(float3(-1.912e+00, -3.674e+00, -7.951e-01), O(INPUT, float2(x, y)).rgb) + 4.304e+00)
float4 f0(float2 pt, float2 pos, min16float s0_0, min16float s0_1, min16float s0_2, min16float s0_3, min16float s0_4, min16float s0_5, min16float s0_6, min16float s0_7, min16float s0_8) {
	V4 r = 0.0;
	r += V4(-1.531e-01, -4.135e-03, 1.616e-01, -8.114e-04) * s0_0;
	r += V4(2.599e-02, -4.119e-03, 1.237e-02, -7.401e-03) * s0_1;
	r += V4(1.218e-01, 7.787e-03, -1.631e-01, 8.412e-03) * s0_2;
	r += V4(-1.626e-01, 7.999e-03, -1.274e-01, 1.347e-02) * s0_3;
	r += V4(1.987e-01, 1.860e-01, 1.062e-01, -1.870e-01) * s0_4;
	r += V4(-4.974e-03, -1.927e-01, 7.884e-03, -4.296e-03) * s0_5;
	r += V4(2.998e-01, -3.763e-03, -3.847e-02, -1.409e-02) * s0_6;
	r += V4(-1.967e-01, -2.018e-03, -1.284e-01, 2.014e-01) * s0_7;
	r += V4(-1.263e-01, 5.204e-03, 1.668e-01, -9.625e-03) * s0_8;
	r += V4(-8.971e-03, -1.079e-03, 7.743e-03, -1.131e-03);
	return r;
}
void Pass1(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float s0_0 = l0(-1.0, -1.0);
	min16float s0_1 = l0(0.0, -1.0);
	min16float s0_2 = l0(1.0, -1.0);
	min16float s0_3 = l0(-1.0, 0.0);
	min16float s0_4 = l0(0.0, 0.0);
	min16float s0_5 = l0(1.0, 0.0);
	min16float s0_6 = l0(-1.0, 1.0);
	min16float s0_7 = l0(0.0, 1.0);
	min16float s0_8 = l0(1.0, 1.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8);
}
//!PASS 2
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-NVL-conv1
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(2.430e-02, -4.137e-03, 5.642e-02, 5.698e-03, 1.347e-01, -4.070e-03, -2.631e-01, 5.601e-02, -6.273e-03, 1.767e-02, 5.464e-02, 9.663e-03, 5.372e-02, 1.013e-01, 9.663e-02, -7.978e-02));
	r += mul(s0_1, M4(8.072e-02, -1.284e-01, 1.527e-02, 2.935e-02, -4.914e-02, -5.896e-02, -6.783e-02, -2.482e-01, -8.386e-02, -2.580e-02, -7.185e-03, -3.259e-02, -3.317e-01, -6.612e-01, -4.118e-02, -4.028e-01));
	r += mul(s0_2, M4(6.569e-02, -9.545e-03, -8.010e-02, -1.566e-02, -9.497e-02, -2.303e-03, 1.117e-01, -1.520e-01, 4.071e-02, -3.715e-02, -6.623e-02, 3.211e-02, -2.011e-02, 4.312e-02, -9.997e-02, -4.093e-01));
	r += mul(s0_3, M4(-5.168e-03, -1.383e-02, -3.528e-02, -3.616e-03, 6.120e-01, 3.466e-02, 1.449e-01, -4.484e-02, -5.834e-02, 3.406e-02, -1.017e-02, -3.553e-02, 2.352e-02, 2.951e-02, -4.382e-02, 1.797e-02));
	r += mul(s0_4, M4(2.036e-01, -7.270e-02, 1.009e-01, 2.907e-02, -7.697e-01, -2.453e-01, 6.875e-02, 4.934e-02, -1.813e-01, 1.080e-01, -7.856e-02, -1.199e-01, 1.244e-01, 1.442e-01, -1.472e-02, 5.476e-01));
	r += mul(s0_5, M4(-4.285e-03, 5.499e-02, 1.117e-01, 1.174e-01, 1.228e-02, -1.000e-02, -5.701e-03, -1.463e-01, 6.470e-02, 7.782e-02, -9.638e-02, 1.156e-01, 8.152e-03, 4.925e-02, -6.719e-05, 5.319e-01));
	r += mul(s0_6, M4(-5.455e-03, 2.981e-03, -2.474e-02, -1.162e-02, 2.527e-01, -3.650e-02, 2.005e-02, 9.986e-02, 9.297e-03, -5.418e-03, 1.179e-02, 2.603e-02, 5.288e-02, 7.181e-03, -5.719e-02, -6.763e-02));
	r += mul(s0_7, M4(1.842e-02, -2.311e-02, 2.308e-02, 1.021e-02, -1.353e-01, -1.778e-03, 7.237e-03, 1.821e-01, 6.801e-02, 7.801e-02, -9.143e-03, -6.139e-03, 8.716e-02, 7.733e-02, 5.649e-02, 5.208e-02));
	r += mul(s0_8, M4(-1.195e-02, -4.871e-02, 3.825e-03, 8.392e-03, 6.276e-02, 2.989e-02, -1.162e-01, 2.666e-01, -4.704e-02, 9.114e-03, 3.723e-02, -4.723e-02, -1.008e-01, -7.056e-02, 6.413e-02, 4.108e-02));
	r += mul(s1_0, M4(-2.117e-02, 1.092e-02, 3.067e-02, -8.824e-03, 8.718e-02, 7.738e-02, -9.096e-04, 5.241e-02, 2.802e-02, -5.565e-03, 3.923e-02, 9.868e-04, -1.875e-02, 1.802e-01, 3.616e-01, 2.364e-02));
	r += mul(s1_1, M4(-1.190e-01, -2.260e-02, -2.476e-02, -5.720e-02, 5.283e-02, -1.101e-01, 4.607e-02, -5.295e-02, 7.054e-02, -1.213e-01, -1.498e-02, 1.621e-02, -1.214e-01, -1.988e-01, 6.939e-01, -7.364e-02));
	r += mul(s1_2, M4(4.108e-02, -1.288e-02, -9.139e-02, 4.701e-02, -6.085e-02, -1.174e-02, 1.169e-01, -1.987e-01, 4.602e-02, 1.282e-04, -5.456e-02, -5.818e-02, 4.224e-02, -4.577e-02, -4.578e-02, 5.320e-02));
	r += mul(s1_3, M4(1.660e-02, 4.290e-03, -8.116e-03, 1.983e-02, -1.890e-01, 6.035e-01, -1.649e-01, 5.606e-02, 5.201e-02, -1.154e-02, 1.249e-01, 6.601e-03, -2.607e-01, 3.033e-02, -4.560e-01, -1.107e-01));
	r += mul(s1_4, M4(-1.924e-02, 5.236e-02, -1.354e-01, -6.599e-02, -1.877e-01, -2.401e-01, 3.996e-01, 3.739e-01, 1.201e-01, -5.365e-02, 2.319e-01, -5.257e-03, 1.189e-01, 1.563e-01, -3.596e-01, 1.416e-01));
	r += mul(s1_5, M4(-7.485e-02, 1.263e-01, 3.400e-02, -1.349e-01, 2.560e-02, 2.043e-02, -1.127e-02, -1.266e-01, 5.394e-02, 6.519e-02, -6.090e-02, 3.291e-01, 1.583e-01, -1.384e-01, -7.229e-02, 1.484e-03));
	r += mul(s1_6, M4(2.361e-02, 2.741e-03, 2.265e-02, 5.502e-03, 1.160e-01, 4.230e-02, -1.164e-01, 2.769e-02, 1.120e-02, -3.506e-02, -6.000e-02, -4.441e-02, 5.434e-02, -1.361e-02, -9.390e-02, -1.253e-01));
	r += mul(s1_7, M4(-2.684e-02, 4.071e-02, 5.160e-02, 9.010e-02, 8.715e-02, -1.882e-01, -9.500e-03, -3.115e-01, 1.860e-01, -1.057e-02, 4.244e-02, -1.622e-03, 8.572e-02, 5.824e-02, 4.479e-02, 6.395e-02));
	r += mul(s1_8, M4(-3.921e-02, -6.562e-03, 2.550e-02, -8.311e-03, 1.069e-01, -3.117e-03, -1.086e-01, 1.324e-01, -3.476e-02, -1.918e-02, 1.195e-02, 1.783e-02, -1.294e-01, -5.995e-02, 2.508e-02, 1.913e-02));
	r += V4(-2.187e-03, -2.786e-03, -6.134e-04, -1.239e-03);
	return r;
}
void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 3
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-NVL-conv2
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-4.846e-02, -2.034e-02, 2.924e-02, 1.717e-03, -3.448e-02, -6.551e-01, 1.527e-01, -5.112e-02, -1.450e-01, -2.372e-03, 7.690e-02, 2.152e-02, -4.059e-02, -1.742e-01, -1.057e-01, 5.552e-04));
	r += mul(s0_1, M4(-1.119e-01, -4.113e-02, 2.106e-02, 2.874e-02, 1.409e-01, -5.534e-01, 2.146e-01, -4.383e-01, -1.037e-01, 6.989e-01, -1.226e-02, -7.068e-02, 3.387e-02, -3.330e-01, 5.510e-02, -3.877e-01));
	r += mul(s0_2, M4(-5.196e-02, 9.788e-02, 2.508e-02, -2.021e-01, 3.564e-02, -9.499e-02, 6.274e-02, 1.606e-02, -1.062e-02, -8.141e-02, 1.019e-01, 4.953e-01, 6.626e-03, -2.271e-02, 7.819e-03, 1.604e-03));
	r += mul(s0_3, M4(8.813e-02, 8.226e-02, -9.998e-02, -3.202e-03, 6.895e-01, -6.290e-01, 8.584e-01, -9.519e-02, 5.899e-02, -1.057e-01, 5.070e-02, -8.758e-03, -1.238e-01, 6.485e-02, 1.431e-01, -2.952e-03));
	r += mul(s0_4, M4(-8.488e-01, 1.666e-01, 9.367e-02, 1.160e-01, 1.671e-01, 1.082e+00, -5.659e-01, 1.145e+00, 5.449e-01, 2.705e-01, -6.934e-01, 5.026e-02, 1.274e-01, -5.308e-02, -1.099e-01, 2.679e-02));
	r += mul(s0_5, M4(8.620e-02, -3.818e-01, 3.477e-02, -4.072e-01, 4.575e-02, -7.469e-02, -5.889e-02, -1.112e-01, -6.368e-02, -1.402e-01, 3.563e-02, -9.544e-02, 8.421e-03, -1.061e-02, -7.742e-03, -1.532e-02));
	r += mul(s0_6, M4(-3.781e-02, -3.873e-02, 1.357e-02, 6.248e-03, -1.761e-01, -1.734e-01, 1.704e-01, -2.437e-02, -3.264e-02, 8.432e-03, 1.956e-02, 2.586e-04, 2.411e-02, 1.319e-02, -1.117e-02, -2.730e-03));
	r += mul(s0_7, M4(1.218e-01, -3.270e-02, -1.391e-01, -2.238e-02, -9.698e-02, 6.542e-03, 1.580e-01, -2.757e-02, -3.215e-03, -3.204e-03, 1.804e-02, -1.200e-02, 3.456e-02, 3.528e-02, -4.444e-02, 2.453e-02));
	r += mul(s0_8, M4(1.228e-01, -3.857e-02, -1.147e-01, -3.104e-02, 1.736e-02, -1.057e-02, -2.889e-02, 2.271e-02, 6.588e-03, -6.679e-03, -5.967e-04, 1.754e-02, -4.471e-03, -4.312e-03, 2.678e-03, -8.989e-03));
	r += mul(s1_0, M4(-8.412e-02, -2.820e-01, 1.142e-01, 3.210e-02, -3.001e-02, -5.091e-02, 2.390e-02, 3.020e-03, 8.029e-03, 3.138e-02, -1.360e-02, 3.605e-03, 2.096e-02, 3.817e-01, -1.606e-01, -4.246e-03));
	r += mul(s1_1, M4(6.781e-03, 2.926e-01, 3.333e-02, -1.617e-01, 1.752e-02, -4.072e-01, 1.819e-01, -3.121e-02, -2.164e-02, -3.207e-02, -1.724e-02, 1.716e-02, 9.732e-03, -1.743e-01, -4.918e-02, 7.265e-02));
	r += mul(s1_2, M4(-2.338e-02, 7.305e-02, 7.704e-03, 1.143e-01, 1.468e-02, 5.121e-02, 1.077e-02, -8.765e-02, 1.954e-02, -8.304e-02, 4.602e-02, -6.407e-02, 1.134e-02, -1.251e-02, -1.674e-02, -1.629e-02));
	r += mul(s1_3, M4(-6.435e-01, 8.821e-02, 3.859e-01, 7.251e-02, -4.895e-02, -7.664e-02, 1.004e-01, 1.108e-02, -1.147e-01, -8.134e-02, 2.963e-03, 1.523e-02, 6.963e-01, -3.962e-01, -6.101e-01, -7.931e-02));
	r += mul(s1_4, M4(6.148e-02, -4.346e-01, -1.463e-01, -3.898e-01, -3.838e-01, 1.803e-01, 7.263e-02, 3.944e-02, -1.728e-01, 2.568e-01, 7.365e-02, -1.289e-01, -8.953e-02, -1.646e-01, -7.202e-02, -1.358e-01));
	r += mul(s1_5, M4(5.749e-02, -1.364e-01, -2.011e-02, -9.373e-02, -2.869e-02, 1.263e-01, 1.241e-02, -4.383e-02, 8.347e-02, -3.164e-01, 4.755e-02, -1.675e-01, 1.770e-02, -2.658e-02, -6.433e-03, -2.365e-02));
	r += mul(s1_6, M4(3.866e-02, -7.444e-02, 1.323e-01, 6.138e-03, -4.821e-02, -5.476e-02, 3.807e-02, 6.987e-03, 1.938e-01, -4.127e-03, -8.257e-02, -1.156e-02, 8.809e-03, 8.618e-02, 1.893e-01, 3.531e-04));
	r += mul(s1_7, M4(2.816e-02, 7.709e-02, 2.343e-02, 1.265e-01, -8.003e-02, -9.365e-02, 6.047e-02, -1.577e-02, 3.252e-01, 8.292e-02, -3.508e-01, 5.720e-02, -6.265e-03, 1.164e-01, 4.347e-03, 1.656e-01));
	r += mul(s1_8, M4(-2.252e-02, 4.957e-02, 8.004e-03, 4.426e-02, -3.244e-02, -5.170e-02, 1.922e-02, -2.423e-02, 1.106e-01, 4.232e-02, -1.556e-01, -1.149e-02, -1.452e-03, 1.041e-02, -4.178e-03, 3.477e-03));
	r += V4(2.989e-03, 2.388e-03, -1.774e-03, 1.327e-03);
	return r;
}
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 4
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-NVL-out
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(5.615e-02, 5.328e-03, -7.708e-03, 4.143e-03, -4.572e-03, 3.756e-04, 1.044e-02, -4.067e-04, -2.181e-02, 2.174e-02, 9.220e-03, 1.898e-02, 5.810e-02, 4.627e-02, -4.991e-02, 1.470e-02));
	r += mul(s0_1, M4(-2.114e-01, 2.945e-02, 1.039e-01, 1.479e-02, -6.762e-02, -4.523e-02, 3.598e-02, -1.198e-02, -2.098e-02, -6.849e-02, -4.117e-02, -4.678e-02, 1.001e-02, 2.114e-02, 1.242e-02, -4.488e-03));
	r += mul(s0_2, M4(-4.239e-02, -2.829e-03, -5.934e-02, -3.866e-02, 4.429e-03, -2.821e-02, -3.317e-03, 1.046e-02, 4.404e-02, 5.832e-02, 6.188e-03, 3.256e-02, 4.940e-03, -5.733e-04, 5.405e-03, -2.508e-04));
	r += mul(s0_3, M4(2.962e-02, 3.079e-02, 9.200e-02, -1.777e-03, -9.773e-03, 6.255e-03, 2.385e-02, 9.917e-03, 3.969e-02, 4.096e-02, -9.108e-02, 5.820e-02, 4.009e-01, 3.078e-01, 3.350e-01, 1.450e-01));
	r += mul(s0_4, M4(-3.887e-01, -3.406e-01, -6.035e-01, -1.092e-01, -2.134e-01, -2.896e-01, -4.057e-01, -2.117e-01, -6.290e-01, -6.076e-01, -3.662e-02, -4.111e-01, 1.117e-01, 2.104e-01, 1.372e-01, 8.565e-02));
	r += mul(s0_5, M4(-3.515e-02, 8.277e-02, -4.597e-02, 3.903e-02, -2.187e-02, 3.188e-02, -2.200e-02, -2.028e-03, 7.007e-02, 4.094e-02, 2.542e-02, 1.588e-01, 4.982e-04, -1.809e-02, 1.154e-03, -7.222e-03));
	r += mul(s0_6, M4(-1.573e-02, -2.216e-03, -2.128e-02, -1.879e-02, 1.812e-02, 9.708e-03, -3.095e-02, 4.284e-02, 1.681e-03, 4.057e-03, 3.128e-02, -2.809e-03, -1.665e-01, -9.758e-02, -3.174e-01, -2.750e-01));
	r += mul(s0_7, M4(1.150e-01, 9.951e-02, 2.324e-01, 2.017e-01, 2.808e-02, 6.180e-02, 4.188e-02, -2.721e-02, 1.097e-01, 1.126e-01, 1.754e-01, 2.319e-01, 2.691e-02, -1.020e-01, 4.602e-03, 3.650e-03));
	r += mul(s0_8, M4(-3.922e-03, 2.881e-02, 1.540e-02, 9.616e-02, -1.260e-02, 9.732e-03, 1.813e-02, -5.037e-02, -2.133e-02, 3.154e-02, -1.583e-02, 1.023e-01, -4.631e-04, -2.047e-03, -6.862e-03, 1.556e-03));
	r += mul(s1_0, M4(1.184e-02, 8.454e-03, 9.369e-03, 3.294e-03, 2.387e-02, -1.654e-02, 1.351e-02, -4.683e-03, -2.562e-03, -2.342e-03, 3.551e-02, -1.126e-03, 9.349e-02, 7.104e-02, -7.056e-02, -8.032e-03));
	r += mul(s1_1, M4(-1.089e-01, -4.506e-02, 5.579e-02, 3.998e-03, -2.975e-02, -4.430e-02, -1.025e-03, -2.975e-02, -8.958e-02, -3.690e-02, -4.888e-02, -1.849e-02, 1.026e-02, 9.316e-02, -3.870e-02, -3.310e-02));
	r += mul(s1_2, M4(-5.976e-02, -1.202e-01, -3.242e-02, 2.464e-02, 9.422e-03, 2.170e-03, -1.431e-02, -5.216e-04, -2.435e-02, 1.890e-01, 9.504e-03, 2.793e-02, 6.417e-03, 2.826e-02, -1.501e-02, 2.688e-02));
	r += mul(s1_3, M4(4.822e-02, 4.040e-02, 2.733e-02, 1.629e-02, 5.917e-02, -3.514e-02, 4.642e-02, -4.367e-02, 2.412e-02, 4.717e-03, -2.472e-02, 3.530e-02, 2.143e-01, 4.077e-01, 3.345e-01, 1.831e-01));
	r += mul(s1_4, M4(-3.605e-01, -3.860e-01, -5.098e-01, -1.812e-01, -8.887e-01, -1.070e-02, -4.033e-01, 1.250e-01, -4.312e-01, -3.154e-01, -5.527e-01, -3.604e-01, 3.550e-01, -7.363e-01, 6.777e-01, 1.460e-01));
	r += mul(s1_5, M4(3.449e-01, 2.900e-01, -5.660e-02, -5.569e-01, 4.444e-02, -1.018e-01, 1.688e-02, 2.029e-02, -2.212e-03, 1.233e-01, -2.214e-02, 2.273e-01, -5.631e-02, 5.579e-02, -3.630e-02, 1.318e-02));
	r += mul(s1_6, M4(-1.452e-02, -9.987e-03, -1.796e-02, -2.257e-02, 4.234e-02, -1.279e-02, -1.796e-02, 2.089e-02, 7.064e-04, 6.678e-03, 7.723e-03, 3.577e-03, -1.567e-01, -9.599e-02, -3.144e-01, -2.939e-01));
	r += mul(s1_7, M4(1.124e-01, 8.374e-02, 2.725e-01, 2.329e-01, 4.112e-02, 6.567e-02, -7.177e-02, 4.880e-02, 1.092e-01, 8.423e-02, 2.202e-01, 1.938e-01, 3.927e-02, -6.839e-03, 3.797e-02, -1.897e-01));
	r += mul(s1_8, M4(-4.891e-02, 5.087e-03, 2.668e-02, 1.843e-01, 2.497e-03, -8.639e-03, -1.082e-03, -5.732e-03, -1.377e-02, 2.960e-02, -1.102e-03, 9.540e-02, -1.789e-02, 2.350e-02, -2.142e-02, 1.243e-02));
	r += V4(1.002e-03, 6.328e-04, 1.303e-03, 8.414e-04);
	return tanh(r);
}
void Pass4(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 5
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-NVL-shuffle
//!STYLE PS
//!IN t1, INPUT
float4 Pass5(float2 pos) {
	float2 pt = float2(GetInputPt());
	static const float3x3 rgb2yuv = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081};
	static const float3x3 yuv2rgb = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float4 r = 0.0;
	float2 size = float2(GetInputSize());
	float2 f = frac(pos * size);
	float3 yuv = mul(rgb2yuv, INPUT.SampleLevel(SL, pos, 0).rgb);
	int2 i = int2(f * 2.0);
	r.r = t1.SampleLevel(SP, (float2(0.5, 0.5) - f) * pt + pos, 0)[2*i.y + i.x];
	r.r += yuv.r;
	r.a = 1.0;
	r.r = clamp(r, 0.0, 1.0);
	float3 px = mul(yuv2rgb, float3(r.r, yuv.yz));
	return float4(px, 1.0);
}
