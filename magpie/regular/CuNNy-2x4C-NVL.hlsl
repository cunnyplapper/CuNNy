// CuNNy 2x4C BILINEAR CHROMA NVL
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

//!MAGPIE EFFECT
//!VERSION 3
//!OUTPUT_WIDTH INPUT_WIDTH * 2
//!OUTPUT_HEIGHT INPUT_HEIGHT * 2

//!TEXTURE
Texture2D INPUT;


//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t1;

//!PASS 1
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-NVL-in
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) (dot(float3(-0.6347615718841553, -1.2072083950042725, -0.2620399594306946), O(INPUT, float2(x, y)).rgb) + 0.22421786189079285)
float4 f0(float2 pt, float2 pos, min16float s0_0, min16float s0_1, min16float s0_2, min16float s0_3, min16float s0_4, min16float s0_5, min16float s0_6, min16float s0_7, min16float s0_8) {
	V4 r = 0.0;
	r += V4(-2.054e-02, 3.469e-02, 4.302e-02, -1.674e-02) * s0_0;
	r += V4(2.407e-02, -3.946e-02, -8.474e-02, -1.281e-03) * s0_1;
	r += V4(-8.316e-03, -6.494e-03, -6.444e-02, 1.090e-02) * s0_2;
	r += V4(-2.664e-01, -5.332e-01, 1.343e-01, 3.273e-02) * s0_3;
	r += V4(2.226e-01, 4.956e-01, 1.990e-01, 5.143e-01) * s0_4;
	r += V4(4.342e-02, 5.066e-02, -4.268e-01, -2.894e-02) * s0_5;
	r += V4(-2.529e-01, -1.107e-02, -1.851e-01, -1.708e-02) * s0_6;
	r += V4(2.074e-01, 3.324e-02, 3.408e-01, -5.137e-01) * s0_7;
	r += V4(4.943e-02, -2.454e-02, 4.186e-02, 1.616e-02) * s0_8;
	r += V4(-4.516e-05, -1.286e-03, -6.867e-03, -7.156e-04);
	return r;
}
void Pass1(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float s0_0 = l0(-1.0, -1.0);
	min16float s0_1 = l0(0.0, -1.0);
	min16float s0_2 = l0(1.0, -1.0);
	min16float s0_3 = l0(-1.0, 0.0);
	min16float s0_4 = l0(0.0, 0.0);
	min16float s0_5 = l0(1.0, 0.0);
	min16float s0_6 = l0(-1.0, 1.0);
	min16float s0_7 = l0(0.0, 1.0);
	min16float s0_8 = l0(1.0, 1.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8);
}
//!PASS 2
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-NVL-conv1
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(6.834e-02, 3.337e-02, -7.939e-03, 1.823e-01, -1.115e-01, -6.237e-02, 1.513e-02, -1.340e-01, -4.379e-02, -1.188e-02, 1.072e-02, -6.707e-02, -2.766e-01, -1.547e-01, 4.090e-02, -1.558e-01));
	r += mul(s0_1, M4(5.413e-01, 4.310e-02, 4.241e-02, 2.850e-01, -6.363e-01, -4.452e-02, -1.260e-01, -1.795e-01, -2.639e-01, -2.762e-01, -1.658e-02, -1.899e-01, -1.669e-01, -1.539e-02, 5.839e-02, 1.332e-01));
	r += mul(s0_2, M4(-2.621e-01, -3.116e-01, 3.990e-02, -2.529e-01, 1.672e-01, 2.524e-01, -1.268e-02, 2.053e-01, 8.062e-03, 7.093e-03, -3.177e-02, 1.768e-03, -6.378e-02, -7.489e-02, -2.533e-02, 2.327e-02));
	r += mul(s0_3, M4(2.029e-02, -2.110e-01, -5.181e-02, -2.515e-01, -6.955e-02, -1.061e-02, 2.054e-01, 8.605e-02, -1.781e-01, -3.389e-01, 2.979e-01, -1.727e-01, -3.311e-02, -8.747e-02, 1.104e-01, 9.688e-03));
	r += mul(s0_4, M4(-1.015e-01, -7.559e-02, 1.552e-01, -4.324e-01, 3.410e-01, 3.779e-01, -3.721e-01, 1.850e-01, 9.691e-02, -1.971e-02, -2.509e-01, -3.312e-01, 2.918e-01, -6.271e-02, -2.827e-01, 2.319e-01));
	r += mul(s0_5, M4(-2.533e-01, 5.372e-01, 1.782e-01, -5.578e-02, 2.479e-01, -7.572e-01, -8.622e-02, -6.987e-01, -8.676e-02, -6.790e-02, 5.141e-02, -1.223e-01, 1.081e-01, 1.369e-01, -2.630e-01, -9.918e-02));
	r += mul(s0_6, M4(-1.333e-01, 4.741e-02, -1.061e-01, -2.203e-01, 1.430e-01, 1.987e-01, -6.311e-03, 3.530e-01, 7.544e-02, -8.585e-02, 1.528e-01, 2.071e-01, 2.946e-02, -6.519e-02, 2.256e-02, 1.813e-01));
	r += mul(s0_7, M4(9.888e-02, 1.458e-01, -8.550e-02, 1.429e-01, -7.573e-02, -6.207e-02, 1.968e-01, 3.916e-01, -2.561e-02, -5.341e-02, 2.357e-01, -4.735e-01, 7.756e-03, -9.731e-02, 1.189e-01, -1.694e-01));
	r += mul(s0_8, M4(-5.336e-02, 3.509e-02, 2.519e-02, 5.071e-02, 1.198e-01, -2.939e-01, -1.411e-01, -2.852e-01, -3.809e-02, 3.383e-03, -1.539e-02, -1.521e-01, -2.241e-02, 1.120e-01, 2.258e-02, -6.121e-02));
	r += mul(s1_0, M4(8.100e-03, 1.357e-02, -4.165e-02, 1.667e-02, 1.768e-02, 8.067e-03, 2.375e-02, -1.274e-02, -1.288e-01, -7.814e-02, 8.210e-03, -2.230e-02, 2.531e-01, 1.311e-01, 3.461e-02, 1.255e-01));
	r += mul(s1_1, M4(-1.924e-01, -1.972e-02, 4.408e-02, -5.803e-02, 2.185e-01, -1.003e-02, 3.258e-02, 8.972e-02, 4.163e-02, -5.342e-03, -5.773e-02, -1.282e-01, 3.857e-01, 3.687e-01, -3.330e-01, -1.155e-01));
	r += mul(s1_2, M4(3.955e-01, 1.446e-01, 1.343e-01, 2.947e-01, -1.292e-01, 1.458e-01, -1.560e-01, -5.763e-02, 2.602e-03, -6.614e-03, 2.399e-02, 1.800e-02, 2.061e-01, 1.509e-01, -2.622e-02, -1.204e-01));
	r += mul(s1_3, M4(3.212e-02, 7.307e-04, -3.727e-02, 9.218e-02, -5.863e-03, 4.729e-02, -7.726e-02, -1.060e-01, 6.239e-02, 3.837e-02, -2.359e-01, -8.652e-02, 1.337e-02, 2.961e-01, -7.823e-02, -4.892e-02));
	r += mul(s1_4, M4(-1.967e-01, 3.860e-01, -2.146e-01, -1.636e-01, 9.492e-02, -2.086e-01, 2.349e-01, 1.589e-01, -1.557e-01, -1.811e-01, 2.529e-01, -2.224e-01, 3.775e-02, -4.201e-01, -1.036e-01, 2.241e-01));
	r += mul(s1_5, M4(-2.125e-02, 8.048e-02, -4.058e-02, 5.076e-02, 1.086e-01, 1.219e-01, -3.475e-01, 4.197e-01, 3.498e-02, 6.972e-02, -6.518e-02, 2.993e-02, 1.594e-02, -2.758e-01, 1.411e-01, 6.175e-02));
	r += mul(s1_6, M4(7.983e-02, -7.766e-02, 1.097e-01, 2.087e-01, -1.470e-01, 1.272e-02, 2.791e-02, -2.173e-01, -1.450e-01, 4.381e-02, -1.243e-01, -3.545e-01, -2.904e-03, 5.748e-02, -1.960e-02, -1.766e-01));
	r += mul(s1_7, M4(-1.117e-01, -9.986e-02, 1.091e-01, -1.371e-01, 1.831e-01, -6.640e-02, -2.017e-01, 1.299e-01, 2.161e-02, 1.209e-01, -2.291e-01, 2.529e-01, -2.739e-02, 5.254e-02, -1.130e-01, 2.487e-01));
	r += mul(s1_8, M4(2.124e-02, -8.789e-02, -3.773e-02, -4.556e-02, -5.775e-02, -1.206e-01, 5.374e-02, 2.826e-01, 3.820e-02, -8.179e-02, -4.592e-03, 1.341e-02, 2.718e-02, -7.119e-02, -8.820e-03, 5.745e-02));
	r += V4(-5.660e-03, -3.248e-03, 1.110e-03, -5.076e-03);
	return r;
}
void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = max(-s0_0, 0.0);
	V4 s1_1 = max(-s0_1, 0.0);
	V4 s1_2 = max(-s0_2, 0.0);
	V4 s1_3 = max(-s0_3, 0.0);
	V4 s1_4 = max(-s0_4, 0.0);
	V4 s1_5 = max(-s0_5, 0.0);
	V4 s1_6 = max(-s0_6, 0.0);
	V4 s1_7 = max(-s0_7, 0.0);
	V4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 3
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-NVL-conv2
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(5.652e-02, 1.459e-01, 1.221e-01, -5.062e-02, 4.335e-02, -1.332e-01, -1.577e-01, 3.332e-02, -6.978e-02, -2.330e-02, -1.286e-01, 6.100e-02, 1.467e-01, -1.091e-01, -5.973e-02, -1.117e-02));
	r += mul(s0_1, M4(4.211e-02, 3.090e-03, 3.643e-01, -9.313e-02, -9.230e-02, -1.506e-01, -6.947e-01, 1.558e-01, -1.909e-02, 1.597e-01, -2.700e-01, 3.290e-01, 8.670e-02, -8.909e-02, -1.194e-02, 2.280e-01));
	r += mul(s0_2, M4(-1.370e-02, 1.398e-01, -2.200e-02, -1.038e-01, 4.832e-02, -1.489e-01, -7.115e-02, 1.870e-01, -7.882e-02, -2.659e-01, -1.661e-01, 7.162e-02, 7.202e-02, 6.257e-02, -3.649e-02, 4.896e-02));
	r += mul(s0_3, M4(-1.063e-01, 7.105e-02, 8.909e-02, 5.008e-02, 1.860e-01, 3.642e-02, 7.300e-02, -2.997e-02, -1.595e-01, 1.627e-02, 1.062e-01, 4.175e-02, 2.627e-01, 1.440e-02, 2.169e-02, 3.306e-02));
	r += mul(s0_4, M4(8.065e-01, 1.183e+00, 5.102e-01, 3.791e-03, 1.025e-01, -1.270e+00, -4.484e-01, -2.020e-01, -3.504e-01, 9.398e-02, 3.619e-02, 2.181e+00, -3.661e-01, -7.324e-01, -6.074e-01, -2.463e-01));
	r += mul(s0_5, M4(5.576e-02, 1.599e-01, -2.378e-01, 6.357e-03, 6.815e-02, -8.948e-02, -2.629e-01, 3.133e-02, 1.586e-02, -2.649e-03, 3.978e-01, 2.593e-01, 4.044e-02, 8.587e-02, 8.189e-03, 5.921e-02));
	r += mul(s0_6, M4(-1.929e-01, 6.732e-02, -3.039e-02, 5.396e-03, 1.325e-01, -3.100e-02, 1.785e-02, 6.625e-02, 4.813e-02, 4.196e-03, -5.012e-02, -3.230e-02, 2.399e-01, -9.442e-02, -4.763e-02, 3.475e-02));
	r += mul(s0_7, M4(3.298e-01, 1.780e-01, -1.201e-01, -9.603e-03, -8.843e-02, -2.274e-01, 1.423e-01, 1.233e-01, 2.509e-01, -1.522e-01, -9.109e-02, -9.293e-03, -5.039e-02, -1.676e-01, 2.653e-02, 1.500e-01));
	r += mul(s0_8, M4(-1.291e-02, -7.634e-02, -3.601e-02, -2.428e-02, 8.598e-03, -8.139e-02, -1.228e-02, 4.937e-02, -2.077e-01, 1.678e-01, 5.077e-02, -6.267e-02, 3.176e-02, 1.011e-02, -6.909e-02, -1.278e-02));
	r += mul(s1_0, M4(-7.742e-03, -3.102e-02, 2.672e-02, -2.661e-02, 2.462e-02, 5.215e-02, 8.689e-02, -9.459e-03, -1.187e-01, 1.011e-01, 8.281e-02, -2.399e-02, 2.437e-02, 7.832e-03, -4.358e-02, 2.890e-02));
	r += mul(s1_1, M4(1.336e-02, 6.132e-03, -1.313e-01, 7.155e-02, 2.625e-02, 8.201e-02, 3.940e-01, -1.548e-01, 1.031e-02, 1.755e-02, 4.149e-01, -6.180e-02, -6.335e-03, -1.191e-02, -2.510e-01, 1.440e-01));
	r += mul(s1_2, M4(1.935e-02, -2.111e-02, 9.394e-04, 2.618e-02, -3.518e-02, 1.014e-01, 4.656e-02, -8.520e-02, -2.981e-03, 1.684e-02, 1.253e-01, -4.321e-02, 1.035e-02, -5.623e-02, -3.676e-02, 3.625e-02));
	r += mul(s1_3, M4(1.528e-01, -5.090e-02, 1.122e-01, -8.447e-03, 2.323e-02, 5.349e-02, -1.021e-01, -1.923e-02, -1.107e-01, -6.439e-02, -2.637e-02, -6.663e-03, 5.182e-02, 4.152e-02, 2.686e-02, 3.043e-02));
	r += mul(s1_4, M4(4.732e-03, 2.606e-03, -1.685e-01, 8.096e-02, 1.641e-02, -1.509e-01, 1.549e-02, 1.026e-01, 2.068e-01, 1.179e-01, -9.424e-01, 5.470e-02, -7.623e-02, -3.832e-03, 3.903e-01, -2.017e-01));
	r += mul(s1_5, M4(1.617e-02, 7.007e-02, 1.102e-01, 8.391e-02, -2.203e-02, 8.812e-02, 7.912e-02, -8.814e-02, -5.911e-03, -1.768e-02, 2.943e-02, -1.902e-02, -7.211e-04, -6.372e-02, -6.170e-02, 4.065e-02));
	r += mul(s1_6, M4(1.726e-01, 5.623e-02, -7.091e-02, -5.569e-02, -1.679e-02, -1.029e-02, 4.068e-04, 2.074e-02, 9.147e-02, -2.994e-02, -4.420e-02, 4.202e-03, -1.372e-01, 8.175e-02, 5.099e-03, 1.092e-02));
	r += mul(s1_7, M4(-4.709e-02, -5.358e-02, -1.341e-01, -1.032e-02, 1.472e-03, 8.636e-03, 6.347e-03, -3.526e-02, -1.646e-01, -4.717e-02, 1.951e-02, -1.123e-02, 4.206e-02, -2.971e-03, -3.394e-02, 6.947e-02));
	r += mul(s1_8, M4(-4.840e-04, 8.975e-02, 1.062e-01, -9.399e-02, 1.960e-02, 7.156e-03, -2.935e-02, 2.467e-02, 2.264e-02, 7.819e-02, 2.551e-02, 6.419e-02, 1.058e-03, 5.095e-03, 3.821e-02, 3.427e-03));
	r += V4(2.438e-03, 3.268e-03, -5.392e-03, 1.333e-03);
	return r;
}
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = max(-s0_0, 0.0);
	V4 s1_1 = max(-s0_1, 0.0);
	V4 s1_2 = max(-s0_2, 0.0);
	V4 s1_3 = max(-s0_3, 0.0);
	V4 s1_4 = max(-s0_4, 0.0);
	V4 s1_5 = max(-s0_5, 0.0);
	V4 s1_6 = max(-s0_6, 0.0);
	V4 s1_7 = max(-s0_7, 0.0);
	V4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 4
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-NVL-out
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-1.774e-02, 1.645e-04, 1.768e-02, 1.905e-02, -1.566e-02, -3.408e-02, -8.020e-03, 3.523e-02, 3.107e-02, -1.382e-02, 2.709e-02, -1.620e-02, -1.554e-03, 3.992e-04, 1.587e-03, 1.920e-03));
	r += mul(s0_1, M4(-9.128e-03, 2.712e-02, 1.719e-02, -5.208e-02, -3.748e-02, -9.403e-02, 5.689e-02, 1.217e-03, -7.091e-02, 1.483e-02, -1.103e-02, 4.922e-02, 1.547e-02, -8.125e-03, -5.899e-02, 3.613e-02));
	r += mul(s0_2, M4(2.446e-02, 1.661e-02, -4.846e-02, 6.982e-02, -2.435e-02, -1.778e-02, 4.602e-02, 2.219e-03, 2.793e-02, 2.229e-03, -7.217e-03, -2.203e-02, -2.955e-02, 4.380e-02, -1.804e-02, -7.739e-02));
	r += mul(s0_3, M4(-3.845e-02, -7.765e-03, -8.765e-02, 2.399e-03, 5.496e-03, 2.310e-02, -1.724e-01, 3.889e-02, 7.935e-02, -1.595e-01, 1.792e-01, -6.357e-02, -7.639e-03, -3.145e-05, -1.272e-02, 4.915e-03));
	r += mul(s0_4, M4(1.435e-01, -1.043e-01, -1.174e-01, -1.460e-01, 1.170e-01, 1.023e-01, -1.039e-01, -4.717e-01, 3.537e-01, 6.621e-01, -2.388e-01, 1.538e-01, 2.300e-01, 4.772e-03, 2.746e-01, -2.746e-02));
	r += mul(s0_5, M4(2.475e-02, 2.046e-01, 8.653e-02, 6.861e-02, -3.456e-02, -7.158e-02, -2.951e-02, 6.849e-03, -1.523e-02, 3.203e-02, -3.833e-03, -1.543e-02, -1.577e-01, -3.121e-02, -1.091e-01, 1.200e-01));
	r += mul(s0_6, M4(3.035e-02, 8.525e-03, 4.666e-02, -1.930e-02, -1.624e-02, -2.170e-03, 8.243e-02, 2.940e-02, 5.012e-02, -2.009e-03, 2.199e-03, -4.143e-02, 9.660e-03, 3.164e-03, 2.106e-02, 8.341e-03));
	r += mul(s0_7, M4(-2.248e-02, 3.626e-02, 1.790e-01, 1.848e-01, -6.488e-03, -2.857e-03, -7.625e-03, 1.077e-01, -1.048e-01, 1.766e-02, 1.505e-01, 2.549e-01, 5.766e-03, 2.570e-02, 2.806e-02, 8.563e-03));
	r += mul(s0_8, M4(7.550e-03, -1.444e-02, 2.369e-04, 2.448e-02, -2.299e-03, -1.088e-02, -1.646e-02, -2.936e-02, -3.238e-02, -4.211e-02, 1.954e-02, 2.993e-02, -1.418e-02, -3.079e-02, -5.530e-02, -2.081e-02));
	r += mul(s1_0, M4(-3.433e-02, 2.471e-03, 3.593e-02, -5.569e-02, -8.533e-04, 2.692e-02, 8.483e-03, -1.945e-02, 2.219e-02, -1.667e-02, 6.345e-04, 1.119e-03, 1.694e-01, 1.219e-01, -8.868e-02, -2.439e-02));
	r += mul(s1_1, M4(-9.513e-01, 9.627e-01, -7.065e-01, 5.259e-01, 7.396e-02, 6.385e-02, -5.988e-02, -3.715e-02, -8.354e-04, -2.793e-02, 9.642e-02, 4.192e-03, -3.763e-02, 9.017e-02, -9.045e-02, -1.203e-01));
	r += mul(s1_2, M4(5.647e-01, -9.696e-01, 2.893e-01, 7.584e-02, 1.705e-01, -1.883e-01, 1.538e-02, -3.210e-02, -2.095e-02, -4.871e-02, 5.856e-02, 3.444e-02, 3.475e-02, -8.505e-03, 3.468e-03, -4.415e-02));
	r += mul(s1_3, M4(5.481e-03, -4.603e-04, 1.062e-02, 2.228e-02, -1.353e-02, -1.092e-02, -9.898e-04, 5.661e-02, -2.017e-02, 1.813e-02, -1.277e-02, -8.718e-03, -1.563e+00, -4.544e-01, 1.253e+00, 4.497e-01));
	r += mul(s1_4, M4(-5.875e-02, -8.226e-02, 2.004e-02, 3.946e-01, -5.723e-01, 4.073e-01, -1.003e-02, 4.698e-01, -1.542e-01, -1.588e-01, -2.340e-01, -1.672e-01, -2.236e-01, -1.125e+00, -1.821e-01, 7.569e-01));
	r += mul(s1_5, M4(1.952e-01, -2.588e-01, 5.376e-01, -8.976e-01, 1.675e-01, -7.990e-03, 3.174e-01, -3.429e-01, 1.824e-02, 7.797e-04, 5.390e-02, -1.511e-03, 1.083e-01, 6.913e-02, 2.580e-02, -5.387e-02));
	r += mul(s1_6, M4(-2.021e-02, -2.630e-03, -3.333e-02, 1.074e-02, 5.513e-04, -6.665e-02, 3.529e-02, -8.471e-02, -2.473e-02, 2.546e-02, -3.990e-02, 2.518e-02, 2.928e-01, 2.282e-01, -3.704e-01, -1.157e-01));
	r += mul(s1_7, M4(-3.448e-03, -4.189e-02, -7.040e-02, -1.185e-01, 1.814e-01, -7.641e-02, -1.977e-01, 3.257e-02, 7.758e-03, -7.642e-02, -1.068e-01, -1.793e-01, -1.406e-02, 1.535e-01, -9.930e-02, -8.982e-02));
	r += mul(s1_8, M4(-3.329e-02, 1.153e-03, -2.141e-02, -8.790e-03, -9.447e-02, 3.248e-02, -4.285e-02, 2.072e-01, 7.325e-04, 2.585e-02, -7.647e-03, 8.807e-03, 2.778e-02, -1.692e-02, 4.273e-02, -9.670e-02));
	r += V4(1.782e-04, 1.032e-03, 1.138e-03, 2.006e-03);
	return tanh(r);
}
void Pass4(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = max(-s0_0, 0.0);
	V4 s1_1 = max(-s0_1, 0.0);
	V4 s1_2 = max(-s0_2, 0.0);
	V4 s1_3 = max(-s0_3, 0.0);
	V4 s1_4 = max(-s0_4, 0.0);
	V4 s1_5 = max(-s0_5, 0.0);
	V4 s1_6 = max(-s0_6, 0.0);
	V4 s1_7 = max(-s0_7, 0.0);
	V4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 5
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-NVL-shuffle
//!STYLE PS
//!IN t1, INPUT
float4 Pass5(float2 pos) {
	float2 pt = float2(GetInputPt());
	const static float3x3 rgb2yuv = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081};
	const static float3x3 yuv2rgb = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float4 r = 0.0;
	float2 size = float2(GetInputSize());
	float2 f = frac(pos * size);
	float3 yuv = mul(rgb2yuv, INPUT.SampleLevel(SL, pos, 0).rgb);
	int2 i = int2(f * 2.0);
	r.r = t1.SampleLevel(SP, (float2(0.5, 0.5) - f) * pt + pos, 0)[2*i.y + i.x];
	r.r += yuv.r;
	r.a = 1.0;
	r.r = clamp(r, 0.0, 1.0);
	float3 px = mul(yuv2rgb, float3(r.r, yuv.yz));
	return float4(px, 1.0);
}
