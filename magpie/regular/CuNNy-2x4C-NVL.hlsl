// CuNNy 2x4C BILINEAR CHROMA NVL
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

//!MAGPIE EFFECT
//!VERSION 3
//!OUTPUT_WIDTH INPUT_WIDTH * 2
//!OUTPUT_HEIGHT INPUT_HEIGHT * 2

//!TEXTURE
Texture2D INPUT;


//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t1;

//!PASS 1
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-NVL-in
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) (dot(float3(-9.472e-01, -1.793e+00, -4.145e-01), O(INPUT, float2(x, y)).rgb) + 2.730e+00)
float4 f0(float2 pt, float2 pos, min16float s0_0, min16float s0_1, min16float s0_2, min16float s0_3, min16float s0_4, min16float s0_5, min16float s0_6, min16float s0_7, min16float s0_8) {
	V4 r = 0.0;
	r += V4(9.337e-02, -4.172e-02, 3.586e-02, -7.178e-03) * s0_0;
	r += V4(-3.819e-01, 6.141e-02, -2.498e-02, -9.789e-03) * s0_1;
	r += V4(4.446e-03, -5.774e-03, -5.873e-03, -5.151e-03) * s0_2;
	r += V4(-1.289e-01, 4.993e-02, -2.965e-01, -1.692e-02) * s0_3;
	r += V4(2.939e-01, -4.007e-01, -4.624e-02, 3.291e-01) * s0_4;
	r += V4(1.218e-01, 4.705e-02, 5.237e-02, -6.505e-03) * s0_5;
	r += V4(3.157e-02, 2.976e-01, -6.421e-02, -2.802e-03) * s0_6;
	r += V4(6.732e-02, 2.932e-02, 3.882e-01, -1.409e-02) * s0_7;
	r += V4(-1.036e-01, -3.602e-02, -3.734e-02, -4.384e-03) * s0_8;
	r += V4(5.784e-03, -1.713e-03, -1.678e-03, 1.073e-01);
	return r;
}
void Pass1(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float s0_0 = l0(-1.0, -1.0);
	min16float s0_1 = l0(0.0, -1.0);
	min16float s0_2 = l0(1.0, -1.0);
	min16float s0_3 = l0(-1.0, 0.0);
	min16float s0_4 = l0(0.0, 0.0);
	min16float s0_5 = l0(1.0, 0.0);
	min16float s0_6 = l0(-1.0, 1.0);
	min16float s0_7 = l0(0.0, 1.0);
	min16float s0_8 = l0(1.0, 1.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8);
}
//!PASS 2
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-NVL-conv1
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-4.552e-02, 4.460e-02, -5.138e-02, 1.419e-02, -2.380e-03, 1.196e-01, -3.906e-02, 6.020e-02, -2.433e-02, 2.882e-02, -2.218e-02, -5.264e-02, 6.479e-02, -6.697e-02, 8.014e-02, 5.700e-02));
	r += mul(s0_1, M4(4.525e-02, -5.357e-02, 4.236e-02, -3.193e-02, 2.998e-01, 2.764e-01, -2.356e-01, 3.042e-02, -2.628e-01, 3.389e-01, -4.603e-01, 2.013e-01, -1.127e-01, -8.247e-02, -2.167e-02, 1.127e-01));
	r += mul(s0_2, M4(-7.893e-03, 4.967e-02, -6.042e-02, 1.296e-02, 1.611e-01, 9.594e-02, -2.517e-02, -8.412e-04, -1.517e-01, -1.377e-01, -1.497e-01, 3.211e-02, 3.647e-02, 6.960e-02, 7.915e-02, -8.474e-02));
	r += mul(s0_3, M4(2.160e-01, -1.342e-01, 9.884e-02, -1.067e-01, 3.960e-02, 1.038e-01, -2.167e-01, 2.077e-01, -5.176e-01, 1.391e-01, -1.995e-01, 9.742e-02, 3.016e-03, -2.672e-02, 4.516e-02, 4.699e-02));
	r += mul(s0_4, M4(-1.274e-01, 7.690e-02, 9.302e-02, 1.059e-01, 4.347e-01, -2.413e-01, 5.175e-01, -2.879e-02, 7.202e-02, -3.975e-01, 3.987e-01, -3.695e-01, 4.752e-02, 2.698e-03, 2.838e-01, -1.062e-01));
	r += mul(s0_5, M4(-1.165e-01, 7.209e-02, -1.526e-01, 5.412e-02, 2.007e-01, 3.174e-01, 1.363e-01, 2.744e-01, -1.074e-01, -2.360e-01, 3.668e-01, 7.036e-02, -1.150e-02, -3.901e-02, -1.467e-01, 1.425e-02));
	r += mul(s0_6, M4(-8.985e-02, -1.567e-02, -1.390e-01, 3.844e-02, 1.251e-01, 2.568e-02, -2.614e-02, 2.905e-02, -7.626e-02, 8.130e-02, -2.192e-01, 1.889e-01, -6.608e-03, 7.248e-02, -1.067e-01, -1.573e-01));
	r += mul(s0_7, M4(4.945e-02, -3.811e-01, 7.390e-01, -3.266e-01, -3.788e-03, -4.402e-02, 1.043e-01, -1.921e-01, -1.191e-01, 1.763e-01, -2.132e-01, 1.841e-01, -1.314e-02, 5.312e-02, -1.694e-01, 1.024e-01));
	r += mul(s0_8, M4(-5.169e-02, 1.637e-02, -6.849e-02, 1.122e-01, 1.306e-01, -7.494e-02, 1.495e-01, -4.825e-02, -6.932e-02, -3.002e-02, 2.117e-01, -8.423e-02, -9.536e-03, 1.411e-02, -4.113e-02, 1.322e-02));
	r += mul(s1_0, M4(-6.402e-02, -5.286e-03, 2.669e-02, 1.597e-02, -3.643e-01, 1.042e-01, -5.518e-02, 4.088e-02, 1.190e-01, -7.007e-02, 1.019e-01, -2.824e-02, 5.412e-03, 2.209e-01, -2.463e-01, 2.680e-01));
	r += mul(s1_1, M4(8.149e-02, -7.543e-02, 1.027e-01, -4.167e-02, -1.910e-01, 3.737e-03, -1.611e-01, 2.271e-01, 6.111e-02, 1.489e-01, -1.409e-01, 4.600e-01, -3.419e-02, 5.739e-01, -3.405e-01, -4.451e-01));
	r += mul(s1_2, M4(2.091e-02, 3.725e-02, 1.145e-02, 1.889e-02, 6.063e-02, 1.083e-01, 3.782e-03, -1.415e-02, 1.606e-01, -4.365e-02, 6.856e-02, -6.417e-02, 5.356e-02, -4.891e-01, 1.594e-01, 1.962e-01));
	r += mul(s1_3, M4(1.666e-01, -3.118e-01, 2.320e-01, -3.819e-02, -3.604e-01, 1.711e-01, -3.256e-01, 2.115e-01, -1.635e-01, 1.636e-01, -7.602e-02, 9.497e-02, 6.737e-01, 4.796e-01, -7.398e-01, 6.654e-01));
	r += mul(s1_4, M4(-5.605e-02, -1.264e-01, 1.909e-01, 2.582e-01, 1.449e-01, -5.158e-02, 6.074e-01, -3.788e-02, 4.416e-01, -3.306e-01, 6.113e-01, -3.424e-01, -1.620e-01, 1.944e+00, -4.954e+00, 5.076e+00));
	r += mul(s1_5, M4(-8.520e-02, 9.156e-02, -9.713e-02, 4.116e-02, -3.224e-01, 2.744e-01, -4.541e-01, 8.717e-02, 1.909e-01, -1.545e-01, -1.419e-02, -2.116e-01, 2.542e-01, -1.247e+00, 1.277e-01, 3.405e-01));
	r += mul(s1_6, M4(-6.759e-02, 5.606e-02, -3.928e-02, 2.765e-02, 6.679e-03, -6.225e-03, -8.064e-02, 7.519e-03, 2.466e-01, 8.004e-02, -1.392e-01, 1.646e-01, 3.360e-01, 2.056e-01, -7.494e-01, -2.812e-01));
	r += mul(s1_7, M4(1.822e-01, -3.230e-01, 3.819e-01, -6.993e-01, -3.017e-01, -9.399e-02, 1.381e-01, -9.408e-02, 1.289e-01, 1.509e-01, -2.202e-01, 1.851e-01, 9.454e-01, -3.746e-01, 1.033e+00, 1.590e+00));
	r += mul(s1_8, M4(3.584e-02, 2.991e-02, -2.900e-01, -3.916e-02, -1.221e-01, -2.276e-02, 9.452e-02, -1.003e-01, 5.066e-02, -6.764e-02, 1.744e-01, -1.606e-01, -3.274e-01, -2.784e-01, -8.271e-02, 4.459e-01));
	r += V4(1.339e-03, 4.346e-03, -5.816e-03, 3.540e-03);
	return r;
}
void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 3
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-NVL-conv2
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-8.032e-02, 5.878e-02, -9.361e-03, 6.724e-04, 2.055e-01, -1.236e-01, 1.174e-01, 1.792e-02, 2.437e-01, -3.070e-02, -1.380e-04, -5.627e-02, 1.260e-01, -1.108e-01, -2.153e-01, -1.058e-01));
	r += mul(s0_1, M4(3.487e-01, -5.356e-01, -7.642e-02, -1.340e-01, -2.549e-01, 3.155e-01, 7.179e-02, 1.573e-01, -1.932e-01, 2.882e-01, -4.091e-01, -1.948e-01, -7.316e-02, -2.741e-02, -1.590e-01, 2.897e-01));
	r += mul(s0_2, M4(2.826e-02, 3.724e-02, -2.600e-02, 4.834e-01, -5.408e-02, -2.369e-03, 1.202e-01, -2.965e-01, 8.691e-02, -4.868e-02, 2.826e-02, -1.883e-01, 2.794e-02, -8.171e-03, -4.040e-02, 1.820e-01));
	r += mul(s0_3, M4(-1.089e-02, -5.621e-02, 3.464e-02, 3.479e-02, 1.849e-01, 8.511e-03, 2.087e-01, 5.781e-02, -2.290e-01, 3.135e-01, -2.777e-02, -7.300e-02, -2.644e-02, -3.857e-01, 2.861e-01, 9.068e-02));
	r += mul(s0_4, M4(1.571e-01, -1.594e-01, 2.606e-01, 6.951e-02, -5.079e-01, 9.982e-02, -6.074e-01, -3.009e-01, 1.734e-01, -3.795e-01, -5.120e-02, -8.278e-02, 1.160e-01, 1.264e-01, 6.956e-02, -2.743e-01));
	r += mul(s0_5, M4(2.147e-01, -3.961e-02, -2.095e-01, -3.338e-01, 9.549e-02, -2.910e-02, 2.333e-01, 4.465e-01, 1.377e-01, -1.257e-01, 9.490e-02, 2.026e-01, -1.538e-01, 1.177e-01, -2.452e-01, -1.489e-01));
	r += mul(s0_6, M4(7.128e-02, -9.789e-02, 2.863e-02, 2.443e-02, -4.397e-02, 2.665e-02, 1.790e-02, -1.873e-02, 2.612e-03, 8.433e-03, -4.305e-03, -1.318e-02, 8.472e-02, -6.427e-02, 1.316e-01, 1.049e-01));
	r += mul(s0_7, M4(1.184e-01, -2.144e-01, -5.362e-02, -4.022e-02, 1.057e-01, -3.265e-02, 1.958e-01, 2.353e-02, 5.607e-02, -7.593e-02, 9.036e-02, 5.705e-02, -3.528e-02, 3.028e-03, -5.150e-02, -4.013e-02));
	r += mul(s0_8, M4(5.628e-03, -9.545e-02, -7.298e-02, -4.236e-03, 6.900e-02, -1.560e-02, 1.067e-02, 1.294e-01, 5.212e-02, -2.761e-02, 2.177e-02, 2.315e-02, -4.319e-02, 1.391e-02, 1.672e-02, -1.208e-01));
	r += mul(s1_0, M4(1.273e-02, -5.267e-02, -2.544e-02, -1.077e-02, 2.104e-01, -2.096e-01, 1.074e-01, 5.566e-02, 2.666e-01, -1.429e-01, 7.611e-02, -2.757e-02, 4.895e-02, -1.558e-02, 4.637e-02, -8.729e-04));
	r += mul(s1_1, M4(4.773e-02, 1.326e-01, -1.135e-01, -9.880e-02, 1.246e-01, -2.187e-02, -2.407e-01, 6.809e-02, -5.332e-01, 5.140e-01, 2.070e-03, 1.872e-01, -1.027e-02, 5.537e-02, -1.697e-01, -6.181e-02));
	r += mul(s1_2, M4(1.873e-01, -1.104e-01, -1.745e-01, -3.018e-01, 1.255e-01, -9.095e-02, 3.291e-02, -1.265e-01, 4.065e-02, -7.127e-02, 9.543e-02, -3.213e-01, -4.457e-02, 1.713e-02, 5.580e-02, -2.555e-02));
	r += mul(s1_3, M4(9.019e-02, -1.553e-01, 1.986e-02, -1.937e-02, 1.150e-01, -1.202e-01, 5.019e-01, 2.850e-01, -2.087e-01, 2.803e-01, 1.329e-01, 7.584e-02, -2.093e-01, 1.204e-01, -2.024e-03, -8.261e-03));
	r += mul(s1_4, M4(-9.951e-02, 1.908e-01, -3.318e-01, -2.183e-01, -2.078e-01, 5.216e-02, -4.555e-01, -8.188e-01, 3.211e-02, 2.449e-01, -2.026e-01, -2.241e-01, -6.301e-01, -1.661e-02, -2.919e-01, 6.301e-03));
	r += mul(s1_5, M4(-2.466e-01, 6.858e-02, -2.663e-01, -1.132e-01, 1.127e-01, -1.062e-01, 7.221e-02, 6.045e-02, 1.081e-02, -9.380e-02, 2.007e-01, 3.144e-02, 4.260e-03, 7.290e-02, -9.980e-02, 1.362e-01));
	r += mul(s1_6, M4(-3.212e-02, -8.252e-03, -8.808e-02, -3.880e-02, 7.973e-02, -1.402e-01, -6.226e-02, 8.449e-03, 6.718e-02, -1.073e-01, -1.174e-01, -2.722e-02, 1.397e-01, -2.205e-02, 6.421e-02, 5.782e-02));
	r += mul(s1_7, M4(2.594e-02, -7.209e-02, -1.972e-02, -7.405e-02, 3.455e-02, -1.078e-01, 1.165e-01, 3.189e-02, -9.007e-03, -8.754e-02, -2.130e-01, 8.133e-03, 1.053e-01, 4.455e-02, 2.514e-01, 2.307e-01));
	r += mul(s1_8, M4(2.743e-02, 1.204e-02, 9.692e-02, 2.409e-02, 4.374e-02, -2.127e-02, 5.584e-03, -3.222e-02, 4.694e-02, 8.868e-04, 8.783e-02, 8.560e-02, 9.089e-02, -1.431e-01, 1.380e-01, 9.654e-02));
	r += V4(5.644e-03, -2.306e-03, 5.051e-03, 4.678e-03);
	return r;
}
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 4
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-NVL-out
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-9.445e-03, 1.757e-03, 1.331e-02, -5.557e-03, 1.068e-01, -5.090e-03, -1.516e-02, -3.966e-02, -4.492e-02, 1.315e-02, 1.602e-02, 1.859e-02, 1.562e-02, -2.227e-02, -3.166e-02, -1.703e-02));
	r += mul(s0_1, M4(7.740e-02, 6.844e-03, -3.546e-03, 1.481e-02, -6.018e-02, -1.567e-01, 7.649e-02, 1.090e-01, 1.592e-01, -3.695e-02, 1.748e-02, -1.623e-02, 3.099e-02, 1.045e-01, -6.135e-02, -1.261e-02));
	r += mul(s0_2, M4(-4.474e-02, 3.895e-02, -1.585e-02, 3.300e-03, -1.037e-01, 1.086e-01, -8.282e-02, 5.614e-02, -5.309e-02, 6.634e-02, -7.433e-02, -3.821e-02, 9.913e-03, -2.639e-03, -4.096e-03, -2.776e-02));
	r += mul(s0_3, M4(-2.279e-02, -1.733e-02, -2.486e-02, -1.394e-02, -1.997e-01, 9.745e-02, -1.510e-01, 6.840e-02, 1.044e-01, 8.667e-02, -1.062e-01, 1.841e-02, -1.274e-01, -1.427e-01, 1.108e-01, -3.201e-02));
	r += mul(s0_4, M4(5.734e-01, 1.872e-01, 1.482e-01, 1.378e-02, 9.395e-01, 1.548e-01, 4.380e-01, -6.973e-01, -5.120e-02, -1.987e-01, 3.110e-01, -2.163e-01, 4.393e-03, 2.417e-01, 1.675e-01, 4.142e-01));
	r += mul(s0_5, M4(-2.439e-02, 3.682e-01, -3.988e-02, 1.753e-01, -2.062e-02, 3.769e-01, -6.364e-04, 4.971e-01, 3.517e-03, 8.723e-02, -1.236e-03, 2.800e-01, -1.916e-03, -6.783e-02, -6.559e-03, -2.022e-02));
	r += mul(s0_6, M4(-2.644e-02, -1.090e-02, 7.691e-03, 3.772e-03, -7.575e-02, -2.300e-02, -4.797e-02, 1.228e-01, 1.531e-02, -3.400e-02, 1.009e-01, 7.722e-03, -3.476e-02, 4.847e-02, -2.319e-01, -1.517e-02));
	r += mul(s0_7, M4(1.168e-02, -5.164e-02, 4.170e-01, 1.626e-01, 2.549e-02, -1.142e-01, 3.096e-01, 1.136e-01, -2.616e-02, 4.925e-02, -1.219e-01, 4.538e-02, 1.050e-02, -8.613e-02, -3.067e-02, -1.773e-01));
	r += mul(s0_8, M4(-2.122e-02, 1.055e-01, 3.406e-02, 2.979e-01, 4.627e-03, 3.650e-02, 2.076e-02, 9.986e-02, 1.210e-02, -2.495e-02, 1.121e-03, -8.255e-02, -1.501e-02, -2.577e-02, -1.371e-02, -4.416e-02));
	r += mul(s1_0, M4(7.641e-03, 3.757e-02, 8.346e-03, 1.163e-02, -1.763e-02, 1.539e-02, 1.551e-02, 6.347e-03, -2.048e-02, -5.408e-02, 6.935e-02, -5.957e-03, 6.270e-02, 3.063e-02, -7.653e-02, -5.747e-02));
	r += mul(s1_1, M4(3.604e-02, -1.616e-01, 7.691e-02, 8.829e-02, 7.989e-02, -7.738e-02, -1.972e-02, -8.395e-03, -3.188e-02, -4.871e-02, 6.088e-02, 8.017e-02, -6.261e-02, 1.783e-01, -6.665e-02, -3.353e-02));
	r += mul(s1_2, M4(-4.676e-02, 2.168e-02, -1.140e-01, -4.368e-03, -3.425e-02, 1.441e-01, -5.866e-02, -1.036e-02, -9.710e-03, 5.945e-02, -4.401e-02, 5.661e-03, 2.358e-02, -9.988e-02, 3.055e-02, -3.079e-03));
	r += mul(s1_3, M4(4.427e-02, -3.906e-02, -2.456e-01, 2.370e-02, -1.243e-02, 1.313e-02, -7.345e-02, -5.251e-03, 1.404e-01, 4.304e-02, -1.181e-02, -6.074e-02, -3.311e-01, -7.493e-02, 1.155e-01, 1.081e-01));
	r += mul(s1_4, M4(3.905e-01, 8.075e-01, 4.270e-01, -1.019e-01, 3.584e-01, 4.035e-02, 1.838e-01, -1.450e-01, 1.637e-01, 3.952e-01, -4.132e-01, -1.953e-01, 2.446e-01, -4.834e-01, 6.592e-01, 6.474e-01));
	r += mul(s1_5, M4(1.523e-03, 1.534e-01, 6.395e-02, 2.427e-01, 2.340e-02, 3.640e-01, 8.920e-02, 4.549e-01, 1.006e-01, 7.007e-02, 9.494e-02, 7.815e-02, -9.448e-02, 5.065e-02, -1.293e-02, -7.401e-02));
	r += mul(s1_6, M4(2.063e-02, -2.205e-01, 2.598e-01, -7.985e-02, 1.104e-03, -1.123e-02, 2.503e-02, 1.456e-02, 5.285e-02, 1.520e-02, -2.135e-02, 3.955e-03, -2.216e-02, 4.150e-02, -1.313e-01, 3.702e-03));
	r += mul(s1_7, M4(1.274e-01, -4.334e-02, 7.934e-02, 2.092e-01, -2.195e-02, -3.658e-02, 2.520e-01, 8.862e-02, -1.213e-01, -2.999e-03, 3.684e-03, -1.879e-03, 9.580e-02, -1.555e-02, -4.318e-02, -2.842e-01));
	r += mul(s1_8, M4(1.407e-02, 1.860e-01, 6.167e-02, 2.753e-01, -2.860e-03, 3.972e-02, 2.239e-02, 1.656e-01, -3.264e-02, -8.328e-02, 4.096e-02, -4.628e-02, -6.041e-02, 4.163e-02, -1.034e-01, -1.201e-02));
	r += V4(-1.659e-03, -2.198e-03, -1.644e-03, -2.159e-03);
	return tanh(r);
}
void Pass4(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 5
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-NVL-shuffle
//!STYLE PS
//!IN t1, INPUT
float4 Pass5(float2 pos) {
	float2 pt = float2(GetInputPt());
	static const float3x3 rgb2yuv = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081};
	static const float3x3 yuv2rgb = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float4 r = 0.0;
	float2 size = float2(GetInputSize());
	float2 f = frac(pos * size);
	float3 yuv = mul(rgb2yuv, INPUT.SampleLevel(SL, pos, 0).rgb);
	int2 i = int2(f * 2.0);
	r.r = t1.SampleLevel(SP, (float2(0.5, 0.5) - f) * pt + pos, 0)[2*i.y + i.x];
	r.r += yuv.r;
	r.a = 1.0;
	r.r = clamp(r, 0.0, 1.0);
	float3 px = mul(yuv2rgb, float3(r.r, yuv.yz));
	return float4(px, 1.0);
}
