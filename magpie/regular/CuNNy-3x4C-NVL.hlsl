// CuNNy 3x4C BILINEAR CHROMA NVL
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

//!MAGPIE EFFECT
//!VERSION 3
//!OUTPUT_WIDTH INPUT_WIDTH * 2
//!OUTPUT_HEIGHT INPUT_HEIGHT * 2

//!TEXTURE
Texture2D INPUT;


//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t1;

//!PASS 1
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-in
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) (dot(float3(-6.637e-01, -1.277e+00, -2.744e-01), O(INPUT, float2(x, y)).rgb) + 1.745e+00)
float4 f0(float2 pt, float2 pos, min16float s0_0, min16float s0_1, min16float s0_2, min16float s0_3, min16float s0_4, min16float s0_5, min16float s0_6, min16float s0_7, min16float s0_8) {
	V4 r = 0.0;
	r += V4(-2.531e-03, 2.009e-01, -3.111e-02, 2.983e-03) * s0_0;
	r += V4(6.236e-02, 1.078e-01, -5.509e-02, -5.098e-01) * s0_1;
	r += V4(-4.506e-02, -7.907e-02, 9.204e-02, 3.222e-02) * s0_2;
	r += V4(1.378e-03, -1.993e-02, -9.493e-02, 2.471e-02) * s0_3;
	r += V4(-4.912e-01, -3.089e-01, -2.820e-01, 5.059e-01) * s0_4;
	r += V4(4.798e-01, 4.057e-02, -3.938e-02, -4.639e-02) * s0_5;
	r += V4(3.694e-03, -1.125e-01, 1.313e-01, -2.186e-02) * s0_6;
	r += V4(-7.928e-03, -2.291e-02, 3.193e-01, 3.483e-03) * s0_7;
	r += V4(-2.686e-03, 1.880e-01, -3.821e-02, 9.564e-03) * s0_8;
	r += V4(-1.354e-03, 2.240e-03, 3.195e-03, 1.562e-03);
	return r;
}
void Pass1(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float s0_0 = l0(-1.0, -1.0);
	min16float s0_1 = l0(0.0, -1.0);
	min16float s0_2 = l0(1.0, -1.0);
	min16float s0_3 = l0(-1.0, 0.0);
	min16float s0_4 = l0(0.0, 0.0);
	min16float s0_5 = l0(1.0, 0.0);
	min16float s0_6 = l0(-1.0, 1.0);
	min16float s0_7 = l0(0.0, 1.0);
	min16float s0_8 = l0(1.0, 1.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8);
}
//!PASS 2
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-conv1
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(1.001e-01, 2.183e-01, -4.157e-02, -3.034e-02, 1.505e-01, 9.366e-03, -1.913e-02, -3.139e-03, -1.433e-01, 1.909e-02, 4.864e-02, 7.398e-03, -4.310e-02, 1.472e-02, -2.110e-02, 8.552e-03));
	r += mul(s0_1, M4(1.111e-01, 2.324e-02, -1.757e-01, -1.850e-02, 1.203e-01, 1.062e-01, -1.020e-01, 1.575e-02, 1.936e-02, 1.584e-01, -2.556e-01, 6.669e-02, -6.272e-02, -1.238e-02, -2.548e-02, -2.658e-02));
	r += mul(s0_2, M4(5.537e-02, -1.021e-02, 6.316e-03, -6.280e-03, 5.297e-02, 2.777e-02, 1.363e-02, 2.001e-02, 4.773e-02, 2.376e-02, 2.113e-01, -1.903e-02, -1.770e-02, -1.071e-02, -2.311e-02, 8.133e-03));
	r += mul(s0_3, M4(-1.961e-01, 5.210e-01, 2.251e-01, 4.469e-01, 3.197e-01, 5.872e-02, -5.537e-02, -4.219e-02, 3.420e-01, -4.909e-02, -3.205e-01, 3.882e-02, -5.086e-02, -2.959e-01, 5.280e-02, -1.277e-02));
	r += mul(s0_4, M4(-1.802e-01, -8.866e-02, -5.354e-01, -1.997e-01, 1.115e-01, -1.579e-01, 3.856e-02, -1.037e-01, -2.085e-01, 6.198e-02, -4.052e-01, 5.628e-02, -2.456e-01, 2.548e-01, 3.139e-02, -6.964e-03));
	r += mul(s0_5, M4(3.992e-02, -1.207e-03, 2.074e-02, 8.702e-03, 2.057e-01, 1.187e-01, 3.235e-01, -5.216e-03, -2.124e-01, 9.288e-02, 5.698e-01, -3.151e-02, 1.377e-01, 1.401e-01, -8.956e-02, -1.075e-02));
	r += mul(s0_6, M4(1.694e-01, 1.417e-01, 6.171e-01, -3.474e-02, 2.275e-01, -9.033e-02, -1.496e-01, 2.578e-02, 3.975e-01, -7.970e-02, -4.026e-02, -6.154e-03, 1.587e-01, 1.074e-02, 3.015e-01, -6.191e-02));
	r += mul(s0_7, M4(-1.004e-01, 6.400e-02, 4.693e-01, 1.694e-01, 4.639e-01, -5.931e-02, -2.528e-01, 1.101e-02, -1.621e-02, 6.117e-02, -2.350e-02, -1.937e-02, -1.276e-01, -1.491e-01, 3.193e-01, -9.711e-02));
	r += mul(s0_8, M4(-2.016e-01, -4.294e-02, -1.578e-01, -1.467e-02, 1.160e-01, 3.470e-03, 4.966e-02, 3.287e-03, -6.540e-02, 3.262e-02, 2.026e-01, 7.593e-03, -7.777e-02, -1.585e-02, -6.611e-01, -2.725e-01));
	r += mul(s1_0, M4(-1.033e-01, 3.760e-01, 1.346e-02, -3.857e-03, -5.088e-02, -3.941e-02, 8.783e-03, -7.532e-03, 1.794e-01, 4.220e-02, 2.678e-02, -6.636e-02, 1.593e-01, 5.135e-02, -5.070e-02, 5.081e-03));
	r += mul(s1_1, M4(-4.602e-02, 4.916e-02, -4.201e-02, -4.734e-02, -1.187e-01, 2.496e-02, 8.324e-03, 1.364e-02, -1.647e-01, 9.005e-02, 2.051e-01, 7.594e-02, -2.192e-02, 1.647e-02, -3.845e-02, -2.515e-02));
	r += mul(s1_2, M4(5.604e-02, -1.071e-02, 2.088e-02, -6.328e-03, -1.157e-01, 2.124e-02, -1.126e-01, -2.348e-02, 1.494e-01, -3.001e-02, 8.569e-02, 2.809e-03, 5.723e-03, -2.767e-03, 3.581e-02, 3.210e-02));
	r += mul(s1_3, M4(9.488e-03, 2.919e-01, 1.038e-01, 3.303e-02, 3.768e-02, 7.228e-02, 1.489e-02, -5.013e-03, 6.164e-01, -1.038e-01, -2.119e-01, -2.555e-02, 1.203e-01, -3.101e-01, -6.863e-02, -1.927e-02));
	r += mul(s1_4, M4(-1.688e-01, 6.122e-04, 2.454e-01, -1.907e-01, -4.951e-01, -6.667e-02, -2.202e-02, -3.652e-02, -4.150e-01, -1.772e-03, 1.848e-01, 1.686e-02, 5.555e-02, 1.221e-01, 3.104e-02, -8.960e-02));
	r += mul(s1_5, M4(-2.732e-02, 9.983e-03, 2.126e-02, 1.546e-02, 5.473e-03, 1.538e-01, 7.892e-02, -3.943e-02, -2.510e-01, 4.794e-02, 9.148e-02, -2.055e-02, 2.562e-02, 1.685e-01, 2.023e-01, 1.946e-02));
	r += mul(s1_6, M4(3.058e-01, 5.528e-02, 7.594e-02, -1.480e-02, -1.519e-01, -7.231e-02, -4.140e-02, 3.265e-02, 6.973e-02, -4.507e-02, -7.671e-03, 4.540e-03, 1.278e-01, 1.265e-01, -4.249e-02, -2.192e-02));
	r += mul(s1_7, M4(2.979e-01, -2.579e-02, -1.172e-01, 2.101e-01, 1.732e-01, -2.288e-02, -1.239e-02, 3.294e-02, -4.918e-02, 2.643e-02, -8.143e-02, -3.006e-02, 2.342e-01, -8.035e-02, -1.872e-01, -6.816e-01));
	r += mul(s1_8, M4(-1.043e-01, -5.798e-02, -2.767e-02, 1.039e-02, -7.376e-02, 3.254e-02, 5.100e-02, -2.899e-02, -5.782e-02, 1.273e-02, -2.669e-02, 2.236e-02, -1.875e-01, -3.960e-02, -1.132e-01, -1.584e-01));
	r += V4(1.899e-03, 1.423e-03, 2.124e-04, 1.160e-03);
	return r;
}
void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 3
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-conv2
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-1.767e-02, -1.197e-02, -4.041e-02, -2.046e-02, 1.667e-02, -6.550e-04, 2.293e-02, 6.558e-02, 1.135e-01, -1.918e-01, -2.711e-01, -9.979e-02, -4.753e-02, 9.950e-02, 7.495e-02, -1.986e-02));
	r += mul(s0_1, M4(-4.159e-02, -5.851e-02, 9.707e-03, -5.097e-02, 7.507e-02, -5.955e-02, 6.631e-02, 6.148e-02, 6.956e-02, -2.193e-01, -2.049e-02, -2.104e-01, -7.642e-02, 4.594e-01, -1.016e-02, 1.317e-02));
	r += mul(s0_2, M4(-2.597e-02, -1.569e-03, 2.215e-02, -2.119e-02, -8.420e-02, 1.346e-01, 5.505e-02, -4.333e-02, 8.317e-02, -1.734e-02, -9.486e-02, 4.749e-03, 4.290e-03, 3.770e-02, 1.047e-01, -1.584e-02));
	r += mul(s0_3, M4(4.853e-02, -1.118e-02, 5.945e-03, -8.818e-03, -9.133e-02, 8.169e-02, -4.325e-03, 1.646e-02, 1.277e-01, 6.765e-04, -6.004e-02, 1.371e-01, -1.923e-02, 8.569e-02, 3.447e-01, 2.241e-02));
	r += mul(s0_4, M4(-4.115e-02, 2.205e-02, 1.116e-01, -7.049e-03, 1.189e-01, 2.339e-01, 5.175e-01, 2.029e-01, -7.284e-02, 9.415e-02, 3.419e-01, -1.567e-01, 1.254e-01, -7.751e-01, -3.341e-01, 5.773e-02));
	r += mul(s0_5, M4(5.481e-02, 5.146e-03, -2.700e-02, -9.755e-03, -8.223e-02, 2.171e-01, -2.056e-01, -6.430e-02, -1.331e-02, -1.447e-02, -8.722e-02, 9.339e-02, -1.439e-02, -6.021e-02, -2.045e-02, -5.860e-02));
	r += mul(s0_6, M4(-8.083e-03, 2.846e-02, 1.372e-02, 2.205e-02, -1.134e-01, 2.135e-02, 1.203e-01, -1.118e-01, 9.810e-03, 5.561e-03, -6.820e-03, 1.795e-02, 1.637e-02, -4.285e-02, -7.410e-02, 3.199e-02));
	r += mul(s0_7, M4(7.241e-03, -4.711e-02, -5.238e-02, -1.095e-02, 3.613e-02, -1.872e-01, -5.684e-01, 1.323e-01, 1.947e-02, 1.146e-02, 5.793e-02, -2.743e-02, -1.474e-03, 1.362e-02, -3.035e-02, -1.094e-01));
	r += mul(s0_8, M4(-1.170e-02, 1.076e-02, 7.922e-03, -1.156e-02, 3.060e-02, -7.739e-02, -1.505e-01, 4.041e-02, -3.443e-03, 4.406e-02, 3.004e-03, 5.308e-02, 7.113e-03, -1.842e-02, 2.056e-03, 1.381e-02));
	r += mul(s1_0, M4(-2.596e-01, 1.165e-01, 1.276e-02, 7.567e-02, -6.226e-03, 2.550e-02, 5.030e-02, 1.993e-02, -6.464e-02, -3.494e-02, -8.379e-02, -8.207e-02, 1.312e-01, -2.607e-01, -6.508e-01, -9.789e-02));
	r += mul(s1_1, M4(-5.211e-01, -2.337e-01, -5.862e-02, -9.965e-02, -4.381e-02, 2.562e-02, 4.125e-02, 1.126e-02, -1.145e-01, 2.370e-02, 7.440e-03, 3.404e-02, -2.561e+00, 3.011e-01, -3.002e-02, -1.009e+00));
	r += mul(s1_2, M4(-1.967e-01, -2.274e-01, 1.233e-01, -8.604e-02, 7.529e-02, -2.321e-02, 4.365e-02, -1.058e-01, -5.459e-02, -6.931e-03, 2.620e-02, -2.157e-02, 1.740e-02, 1.169e-01, 4.250e-02, -1.651e-01));
	r += mul(s1_3, M4(-8.595e-02, -1.345e-02, 7.842e-02, -1.319e-02, 3.758e-02, 1.125e-02, -1.372e-01, 2.854e-02, 3.383e-02, -6.469e-02, 6.990e-02, -5.184e-02, 4.537e-03, 2.122e-01, 8.467e-01, 1.436e-01));
	r += mul(s1_4, M4(-2.874e-01, 3.322e-01, 5.491e-01, 1.052e-01, 3.422e-01, -2.898e-01, 2.783e-01, 2.161e-01, -2.286e-01, -5.237e-02, 2.430e-01, -1.959e-01, -4.505e-02, -4.390e-01, -5.363e-01, 9.689e-01));
	r += mul(s1_5, M4(3.669e-02, -1.959e-01, 2.151e-01, -9.886e-01, -1.554e-02, 2.773e-01, -1.890e-01, -2.341e-01, 2.853e-03, -2.394e-02, 6.240e-02, -3.151e-02, -1.105e-02, 4.750e-02, -1.224e-01, -2.000e-02));
	r += mul(s1_6, M4(-9.242e-03, -3.059e-02, 1.913e-02, -2.549e-02, -4.360e-02, 6.110e-03, -4.483e-02, 5.854e-03, -3.929e-02, 5.490e-02, 8.928e-02, 1.802e-02, 4.735e-03, 7.992e-02, 5.953e-02, 1.167e-02));
	r += mul(s1_7, M4(-2.569e-02, -2.559e-03, 2.134e-02, 9.825e-03, -1.579e-02, 3.554e-02, -3.703e-01, 2.231e-01, -3.459e-02, -3.130e-02, 7.557e-02, -9.580e-02, 1.460e-02, -1.395e-02, 1.072e-01, -7.941e-02));
	r += mul(s1_8, M4(-8.957e-02, 4.806e-02, -3.273e-02, 2.204e-01, -1.753e-02, 3.572e-02, 1.101e-01, -9.561e-02, -1.462e-02, 9.221e-04, 1.775e-03, -1.388e-02, -7.156e-03, 3.843e-02, 2.104e-02, 2.884e-02));
	r += V4(9.459e-04, -8.801e-04, -8.157e-04, 1.812e-03);
	return r;
}
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 4
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-conv3
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(8.755e-02, 5.580e-02, -1.438e-02, 1.710e-02, 2.072e-02, 2.264e-02, -7.499e-03, 4.875e-02, 4.782e-02, -2.360e-03, 9.121e-03, -1.898e-02, -3.164e-01, -9.034e-02, -9.362e-03, 4.651e-02));
	r += mul(s0_1, M4(7.983e-02, -6.519e-02, -1.745e-02, -3.234e-02, 1.077e-01, -1.275e-02, -1.801e-02, -5.469e-02, 7.694e-02, -8.211e-02, 7.965e-02, -8.210e-02, -4.947e-02, 2.454e-01, -6.169e-02, 2.678e-03));
	r += mul(s0_2, M4(-2.448e-02, -3.124e-02, 1.972e-02, 1.286e-04, -3.626e-02, 5.561e-03, -3.507e-03, 1.974e-02, -5.599e-02, -7.184e-02, 8.813e-02, 8.276e-02, -8.915e-03, 6.215e-03, 3.212e-03, -1.072e-03));
	r += mul(s0_3, M4(-4.267e-02, -8.424e-03, -1.195e-02, 6.581e-02, -1.764e-01, -8.723e-02, -2.715e-03, 4.736e-02, -1.249e-01, -8.340e-03, 4.410e-02, -7.575e-02, -3.746e-02, 3.358e-03, 9.330e-03, -5.485e-02));
	r += mul(s0_4, M4(-1.714e-01, -9.942e-02, 2.260e-02, -5.213e-02, 1.388e+00, -3.332e-02, -1.371e-01, -2.627e-01, -1.254e+00, -1.062e-01, 4.853e-01, -4.875e-01, -6.135e-02, 1.822e-02, -3.701e-01, 1.204e-01));
	r += mul(s0_5, M4(-4.634e-03, -4.590e-02, 6.215e-02, -3.040e-02, -1.636e-01, -7.398e-02, 6.612e-02, 8.130e-02, 1.446e-01, -3.843e-02, 4.652e-01, 1.612e-01, 1.168e-02, 3.821e-02, -5.385e-02, 1.634e-02));
	r += mul(s0_6, M4(-1.615e-03, -7.108e-03, -8.673e-02, 1.053e-02, -2.654e-02, 7.201e-04, -7.105e-03, 1.090e-02, 4.138e-02, 2.704e-02, 9.204e-02, -7.980e-02, -1.287e-02, 8.266e-03, -6.847e-03, 1.126e-02));
	r += mul(s0_7, M4(2.982e-02, 2.307e-02, 2.618e-02, -1.219e-01, -4.808e-02, -3.075e-02, -2.803e-01, 4.914e-02, 1.124e-01, -5.649e-03, 3.017e-01, -1.188e-01, 3.062e-02, 2.794e-02, -4.511e-02, 5.600e-02));
	r += mul(s0_8, M4(6.429e-02, 2.000e-03, 3.149e-02, -9.382e-03, -1.634e-01, 5.645e-03, 2.544e-02, 2.399e-02, -2.716e-02, 1.900e-03, 1.782e-01, 3.912e-02, -1.409e-02, 3.170e-03, -2.838e-02, 8.780e-03));
	r += mul(s1_0, M4(6.852e-02, 1.266e-02, -2.566e-02, 9.810e-02, 1.337e-01, 3.991e-02, -1.108e-02, 6.759e-03, -5.901e-02, -6.241e-02, 7.981e-02, -1.234e-01, -2.765e-01, -6.575e-02, 2.412e-02, 1.424e-02));
	r += mul(s1_1, M4(4.772e-02, -3.009e-02, -1.549e-01, 2.995e-03, 4.137e-01, 2.736e-02, -3.257e-02, -6.960e-02, 6.557e-02, -9.203e-02, 4.059e-02, -2.460e-02, 4.473e-01, 1.725e+00, 3.291e-01, 2.483e-01));
	r += mul(s1_2, M4(5.625e-02, 1.314e-01, -8.665e-02, 1.092e-02, 2.917e-02, -6.325e-03, -8.841e-03, 2.404e-02, -1.395e-01, -1.057e-01, 8.251e-03, 4.558e-02, 1.003e-01, 3.037e-01, -1.284e-01, -4.535e-02));
	r += mul(s1_3, M4(-3.253e-01, -2.015e-01, 2.390e-02, -8.942e-02, -3.109e-02, 1.751e-02, -3.561e-02, 1.606e-01, 3.583e-02, -1.200e-02, -9.503e-02, -4.840e-02, -8.293e-02, 8.722e-03, 1.448e-02, 2.240e-02));
	r += mul(s1_4, M4(1.803e+00, 1.738e+00, -2.320e-01, 4.772e-01, -1.586e-02, -6.373e-02, 4.600e-01, 5.756e-02, -2.299e-01, -3.897e-03, -4.030e-01, -1.030e-01, 7.497e-02, 7.409e-02, 1.390e-01, 1.040e-01));
	r += mul(s1_5, M4(4.209e-01, -4.112e-01, -5.489e-01, -1.618e-01, -7.681e-02, -2.998e-03, 2.692e-02, 3.659e-02, -1.179e-01, -5.602e-02, 1.033e-01, 3.042e-02, 3.076e-01, 1.251e-01, 1.190e-01, 7.453e-03));
	r += mul(s1_6, M4(4.750e-01, 7.809e-02, -5.621e-02, -3.200e-01, -1.449e-03, 7.862e-04, -3.106e-02, 1.702e-02, 3.304e-02, 9.427e-03, -8.813e-03, -3.892e-03, -1.747e-02, 5.039e-05, 2.347e-02, -1.302e-02));
	r += mul(s1_7, M4(2.022e-01, 2.000e-01, -2.180e+00, 4.435e+00, 3.945e-02, -2.842e-04, 2.927e-02, -2.239e-02, 8.454e-03, 1.715e-02, 8.471e-02, -3.920e-02, -3.152e-02, -1.547e-02, -4.846e-02, 2.302e-02));
	r += mul(s1_8, M4(-1.418e+00, -7.073e-03, -2.275e+00, -2.252e-02, -1.103e-02, 1.957e-03, 1.797e-02, -8.082e-03, 2.657e-02, 1.039e-02, 3.621e-02, -4.712e-03, -2.587e-03, 2.116e-03, -6.993e-03, 2.862e-02));
	r += V4(1.564e-03, -1.862e-03, 1.069e-03, -1.952e-03);
	return r;
}
void Pass4(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 5
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-out
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(2.671e-04, 1.010e-02, -2.143e-02, -4.040e-02, -1.507e-01, 8.983e-02, 3.338e-04, 6.198e-02, -2.117e-01, 2.370e-02, 5.597e-02, 1.441e-02, -2.470e-01, 3.840e-02, -1.747e-02, -1.663e-02));
	r += mul(s0_1, M4(-2.667e-02, -1.651e-02, -1.513e-02, -8.768e-03, 3.812e-02, -1.643e-02, -7.060e-03, -1.642e-02, 1.658e-01, -4.248e-01, -1.707e-02, -9.204e-02, 2.774e-01, -5.311e-01, -2.310e-02, -1.099e-01));
	r += mul(s0_2, M4(-2.653e-03, -1.102e-02, -5.160e-03, -5.845e-03, -2.436e-02, -2.332e-02, -2.782e-02, -1.219e-02, -3.397e-02, 2.139e-02, -8.731e-02, 4.845e-02, -1.304e-01, -1.328e-01, -5.345e-02, -1.466e-02));
	r += mul(s0_3, M4(5.071e-02, -3.326e-03, -3.419e-02, -5.137e-02, -4.774e-01, 7.794e-01, -3.528e-01, 3.394e-01, 3.018e-01, 4.361e-02, -4.251e-01, -1.489e-01, 3.942e-01, -3.356e-02, -2.125e-01, -1.626e-01));
	r += mul(s0_4, M4(2.155e-01, 3.942e-01, 5.275e-02, 1.831e-01, -4.445e-01, -5.870e-02, -7.718e-03, -3.311e-01, 2.958e-03, 6.429e-01, 5.684e-01, 1.204e-01, 1.722e+00, -1.373e+00, 1.792e+00, -1.473e+00));
	r += mul(s0_5, M4(4.330e-02, 1.072e-01, 2.772e-02, 4.244e-02, 2.564e-02, -2.279e-02, -7.045e-03, -2.414e-02, -5.893e-04, -1.062e-01, 1.114e-02, 3.677e-03, -3.518e-02, 7.133e-01, -9.790e-02, 2.958e-01));
	r += mul(s0_6, M4(-1.790e-02, 2.620e-02, -9.022e-02, 1.644e-03, -2.794e-01, 1.130e+00, -1.560e+00, 1.155e+00, -2.583e-02, -7.303e-02, 5.406e-02, 3.098e-02, -1.492e-01, 8.946e-03, 1.957e-01, -6.151e-02));
	r += mul(s0_7, M4(-5.874e-02, -6.469e-02, 2.295e-01, 2.330e-01, 4.166e-02, -7.793e-01, 1.440e-01, 2.270e-01, 2.831e-02, 5.842e-03, -4.883e-02, 4.488e-02, -1.528e-01, 4.668e-02, 1.223e-01, -1.776e-02));
	r += mul(s0_8, M4(1.430e-02, 6.212e-04, 2.911e-02, 4.664e-02, 1.282e-03, -6.933e-02, -1.535e-02, -1.573e-01, -7.462e-03, -9.432e-03, -1.886e-02, -2.588e-02, 1.528e-02, 5.834e-02, -6.188e-02, 1.451e-01));
	r += mul(s1_0, M4(-4.223e-02, 5.398e-03, 1.549e-02, 6.221e-03, 3.625e-02, 1.025e-02, 2.183e-03, 1.651e-03, 1.265e-01, 1.940e-02, -1.460e-01, -1.019e-01, -4.939e-02, -2.802e-03, -1.078e-02, -2.843e-02));
	r += mul(s1_1, M4(4.533e-02, -9.400e-02, 1.470e-02, -1.774e-02, -5.318e-03, 1.018e-01, 6.382e-03, 4.065e-02, -1.949e-01, 1.362e-01, -8.756e-02, -1.592e-01, -6.811e-02, -1.880e-01, -9.003e-02, -4.114e-02));
	r += mul(s1_2, M4(-4.065e-02, 2.000e-03, 2.843e-04, 4.239e-02, 1.984e-02, -7.361e-03, 9.966e-03, -1.904e-02, 1.364e-02, -5.408e-02, 1.106e-03, 1.570e-02, -1.163e-01, -1.055e-01, -8.812e-02, -1.135e-01));
	r += mul(s1_3, M4(5.088e-02, 5.115e-02, -1.304e-01, -2.851e-02, -6.675e-02, -3.259e-02, 1.111e-01, 6.020e-02, -1.382e-01, -3.133e-02, 7.308e-02, -1.046e-01, 1.307e-02, 5.220e-03, -1.353e-01, -6.518e-02));
	r += mul(s1_4, M4(7.921e-01, 2.926e-01, 1.020e-01, -2.705e-01, -5.099e-01, -2.549e-01, -8.283e-02, 1.880e-01, 1.880e-01, -5.070e-02, 3.053e-01, 7.403e-01, 1.998e-01, 7.575e-02, 3.236e-01, 2.485e-02));
	r += mul(s1_5, M4(-3.735e-02, 1.997e-01, -5.186e-02, 1.190e-01, 7.690e-02, -6.238e-02, 9.980e-02, 1.269e-03, 2.619e-03, 8.154e-02, -4.104e-02, -1.087e-01, 1.029e-01, 3.419e-01, 1.462e-01, 2.788e-01));
	r += mul(s1_6, M4(-5.937e-02, -2.325e-02, 1.238e-02, 3.122e-02, 5.334e-02, 2.359e-02, -1.385e-02, 5.809e-03, -1.280e-02, -5.756e-03, -9.809e-04, -8.451e-03, 2.096e-03, -6.027e-03, -2.020e-02, 9.369e-03));
	r += mul(s1_7, M4(-5.308e-02, -1.531e-02, 2.456e-01, 1.681e-01, 2.124e-03, 8.911e-02, -4.615e-01, -3.369e-01, 3.455e-02, -6.543e-03, 4.359e-02, 1.083e-02, -2.434e-02, -8.512e-03, 3.258e-02, 2.394e-02));
	r += mul(s1_8, M4(3.115e-02, -3.555e-02, 4.529e-02, 2.488e-03, -3.357e-02, -9.726e-02, 4.833e-03, -8.976e-02, -1.440e-02, 9.385e-03, -1.973e-02, -2.190e-02, -8.177e-04, -9.797e-03, 3.796e-02, 7.391e-02));
	r += V4(-6.652e-04, -5.017e-04, -2.418e-04, -2.491e-04);
	return tanh(r);
}
void Pass5(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 6
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-shuffle
//!STYLE PS
//!IN t0, INPUT
float4 Pass6(float2 pos) {
	float2 pt = float2(GetInputPt());
	static const float3x3 rgb2yuv = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081};
	static const float3x3 yuv2rgb = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float4 r = 0.0;
	float2 size = float2(GetInputSize());
	float2 f = frac(pos * size);
	float3 yuv = mul(rgb2yuv, INPUT.SampleLevel(SL, pos, 0).rgb);
	int2 i = int2(f * 2.0);
	r.r = t0.SampleLevel(SP, (float2(0.5, 0.5) - f) * pt + pos, 0)[2*i.y + i.x];
	r.r += yuv.r;
	r.a = 1.0;
	r.r = clamp(r, 0.0, 1.0);
	float3 px = mul(yuv2rgb, float3(r.r, yuv.yz));
	return float4(px, 1.0);
}
