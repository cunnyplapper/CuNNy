// CuNNy 3x4C BILINEAR CHROMA NVL
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

//!MAGPIE EFFECT
//!VERSION 3
//!OUTPUT_WIDTH INPUT_WIDTH * 2
//!OUTPUT_HEIGHT INPUT_HEIGHT * 2

//!TEXTURE
Texture2D INPUT;


//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t1;

//!PASS 1
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-in
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) (dot(float3(0.4795670509338379, 0.9113263487815857, 0.19936037063598633), O(INPUT, float2(x, y)).rgb) + -0.8429033756256104)
float4 f0(float2 pt, float2 pos, min16float s0_0, min16float s0_1, min16float s0_2, min16float s0_3, min16float s0_4, min16float s0_5, min16float s0_6, min16float s0_7, min16float s0_8) {
	V4 r = 0.0;
	r += V4(8.349e-03, -2.094e-02, 1.209e-01, 4.854e-01) * s0_0;
	r += V4(2.115e-01, 5.840e-01, -4.390e-01, -4.834e-01) * s0_1;
	r += V4(2.717e-02, -4.049e-03, 4.096e-02, -5.051e-03) * s0_2;
	r += V4(-2.555e-02, 2.906e-02, 4.308e-02, -1.110e-03) * s0_3;
	r += V4(-5.451e-01, -6.035e-01, -6.091e-02, -2.608e-03) * s0_4;
	r += V4(5.467e-02, 1.144e-02, 5.121e-02, 7.115e-03) * s0_5;
	r += V4(8.388e-03, 7.454e-03, 2.118e-02, -1.023e-02) * s0_6;
	r += V4(-3.053e-02, 3.141e-04, -3.259e-03, 4.451e-03) * s0_7;
	r += V4(2.914e-01, -8.001e-03, 4.056e-02, 5.033e-03) * s0_8;
	r += V4(7.486e-04, 1.642e-03, 2.101e-03, 1.161e-03);
	return r;
}
void Pass1(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float s0_0 = l0(-1.0, -1.0);
	min16float s0_1 = l0(0.0, -1.0);
	min16float s0_2 = l0(1.0, -1.0);
	min16float s0_3 = l0(-1.0, 0.0);
	min16float s0_4 = l0(0.0, 0.0);
	min16float s0_5 = l0(1.0, 0.0);
	min16float s0_6 = l0(-1.0, 1.0);
	min16float s0_7 = l0(0.0, 1.0);
	min16float s0_8 = l0(1.0, 1.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8);
}
//!PASS 2
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-conv1
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(4.106e-01, -1.007e-01, 2.447e-01, -4.011e-01, -3.614e-02, 2.293e-01, 1.394e-01, -3.563e-02, 1.475e-01, 1.744e-01, -1.204e-01, -1.360e-01, -7.055e-02, 4.934e-02, 1.334e-01, 2.338e-02));
	r += mul(s0_1, M4(-1.126e-01, -3.962e-01, 1.539e-01, -5.462e-02, -5.217e-02, 1.646e-01, -3.063e-01, 1.951e-01, -6.589e-02, -1.580e-02, -6.285e-03, -7.689e-02, -5.525e-02, -6.566e-02, -3.506e-01, 1.792e-01));
	r += mul(s0_2, M4(1.014e-01, 1.769e-01, 7.814e-02, -1.471e-01, -2.037e-01, -5.176e-01, -3.916e-01, 1.202e-01, -3.564e-01, -5.587e-01, -3.750e-01, 1.927e-01, 6.243e-02, 1.702e-01, 4.532e-02, -2.421e-01));
	r += mul(s0_3, M4(1.048e-01, 3.663e-01, 4.195e-01, 8.823e-02, 1.806e-01, -1.170e-01, 7.350e-02, -1.999e-01, -2.507e-01, 1.382e-01, 2.309e-02, 4.968e-02, 7.045e-02, -1.436e-01, -3.941e-02, 6.101e-02));
	r += mul(s0_4, M4(-4.131e-02, 8.683e-02, -1.795e-01, -2.017e-01, -3.291e-01, 2.248e-01, -1.686e-01, 8.847e-01, -3.859e-03, 1.183e-01, 2.123e-01, 3.035e-01, 2.261e-01, -1.646e-01, -4.305e-01, 8.938e-02));
	r += mul(s0_5, M4(-6.539e-02, -4.172e-02, -2.112e-01, 7.170e-02, -6.585e-02, -2.800e-01, 2.621e-01, -4.546e-01, 3.256e-01, -4.207e-01, 1.120e-01, -3.740e-01, -1.999e-02, -1.745e-01, 3.401e-02, -1.486e-01));
	r += mul(s0_6, M4(3.972e-02, -1.528e-01, -1.207e-01, -1.416e-02, 1.370e-02, -8.622e-02, -1.303e-01, 7.876e-02, -3.227e-02, 3.770e-02, -2.842e-01, -1.333e-01, 1.261e-01, -4.921e-03, 7.317e-02, 7.598e-02));
	r += mul(s0_7, M4(-8.187e-02, 8.464e-03, -3.477e-02, 2.537e-02, -6.717e-02, 2.174e-01, 2.069e-01, -8.205e-02, 2.000e-01, 2.241e-01, 3.915e-01, -2.901e-02, 4.017e-02, 1.939e-01, 1.997e-01, 2.293e-01));
	r += mul(s0_8, M4(-3.842e-02, 5.959e-02, 1.773e-01, -6.433e-02, -2.997e-02, 2.278e-01, 2.813e-01, -1.461e-01, 2.402e-02, 2.938e-01, 4.391e-02, 2.033e-01, 5.239e-02, -3.888e-02, 1.530e-01, -3.799e-01));
	r += mul(s1_0, M4(-3.408e-01, -2.250e-01, -3.740e-01, 6.660e-01, -1.586e-03, -2.383e-02, -9.068e-02, -7.378e-02, -1.466e-01, -2.095e-01, 6.555e-02, 1.522e-01, 5.105e-02, -1.447e-03, -8.624e-02, -4.655e-02));
	r += mul(s1_1, M4(1.241e-01, 4.436e-01, -1.236e-01, 7.406e-02, 4.376e-02, -2.001e-01, 2.176e-01, -2.048e-01, 2.122e-02, 9.553e-02, 5.838e-02, 8.862e-02, 8.236e-02, -6.223e-02, 2.534e-01, -1.763e-01));
	r += mul(s1_2, M4(-2.263e-01, -1.919e-01, -2.233e-02, 1.062e-01, 2.692e-01, 3.643e-01, 2.893e-01, -1.933e-02, 3.359e-01, 4.499e-01, 3.213e-01, -2.124e-01, -1.002e-01, -1.412e-01, -1.703e-02, 1.951e-01));
	r += mul(s1_3, M4(-1.376e-01, -2.744e-01, -3.333e-01, 4.983e-04, 6.528e-02, 1.428e-01, -7.887e-02, 5.488e-01, 1.812e-01, -2.127e-01, -9.057e-02, -1.459e-01, -2.598e-02, 1.218e-01, 1.193e-01, 1.294e-01));
	r += mul(s1_4, M4(-8.523e-02, -1.313e-01, 1.227e-01, -5.070e-02, 1.232e-01, -3.153e-01, 5.188e-01, -4.615e-01, -2.660e-04, -2.072e-01, -1.267e-01, -1.351e-01, -1.028e-01, 1.902e-01, 2.568e-01, 1.970e-02));
	r += mul(s1_5, M4(1.144e-01, 4.393e-02, 1.081e-01, -1.117e-01, -1.372e-01, 2.448e-01, -2.718e-01, 3.038e-01, -3.715e-01, 5.845e-01, 5.597e-02, 3.432e-01, 6.621e-02, -6.297e-02, -3.460e-01, -2.440e-02));
	r += mul(s1_6, M4(2.182e-02, 1.649e-01, 8.765e-02, 1.018e-01, 4.068e-02, 9.254e-02, 1.433e-01, -1.126e-02, -8.354e-02, -5.387e-02, 2.547e-01, -7.612e-02, 6.034e-03, 5.792e-02, -7.003e-02, 7.446e-02));
	r += mul(s1_7, M4(-4.647e-02, 7.828e-02, 1.529e-01, -7.705e-02, -4.931e-01, -2.568e-01, -2.965e-01, 2.170e-01, -1.666e-01, -1.724e-01, -3.598e-01, -3.825e-02, 1.962e-01, -1.211e-01, -1.326e-01, 4.834e-01));
	r += mul(s1_8, M4(-2.165e-02, -7.736e-02, -1.105e-01, -3.674e-02, -4.247e-01, -3.434e-01, -3.213e-01, -2.680e-02, 2.380e-01, -2.558e-01, -1.388e-01, 1.751e-02, -1.138e+00, -5.244e-02, -7.233e-02, -2.132e-01));
	r += V4(-2.037e-03, 2.461e-03, 1.762e-03, 6.809e-05);
	return r;
}
void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = max(-s0_0, 0.0);
	V4 s1_1 = max(-s0_1, 0.0);
	V4 s1_2 = max(-s0_2, 0.0);
	V4 s1_3 = max(-s0_3, 0.0);
	V4 s1_4 = max(-s0_4, 0.0);
	V4 s1_5 = max(-s0_5, 0.0);
	V4 s1_6 = max(-s0_6, 0.0);
	V4 s1_7 = max(-s0_7, 0.0);
	V4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 3
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-conv2
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(3.819e-02, 3.193e-02, -4.571e-02, 3.245e-02, -5.157e-02, 1.121e-01, -9.168e-02, -6.021e-03, -2.480e-03, -8.380e-02, 6.221e-02, 3.027e-02, -2.985e-02, 7.227e-03, -4.481e-02, -8.102e-03));
	r += mul(s0_1, M4(-2.978e-01, 2.279e-01, -2.505e-01, 4.842e-02, 8.033e-02, 1.376e-01, -2.979e-01, -7.222e-02, -2.016e-01, -4.838e-02, 1.704e-01, -1.569e-02, 1.109e-02, -5.252e-03, -1.938e-01, -5.896e-02));
	r += mul(s0_2, M4(1.985e-01, 5.333e-01, -4.561e-01, -5.246e-02, 1.759e-02, 5.981e-02, -2.073e-01, -9.351e-02, 7.032e-03, 5.078e-02, 9.601e-02, 1.043e-01, -4.319e-04, -5.548e-02, 1.962e-01, 6.735e-02));
	r += mul(s0_3, M4(9.561e-02, -1.052e-01, -2.539e-02, 4.648e-02, -9.024e-03, -6.345e-02, -2.390e-02, -3.632e-02, -4.471e-02, 6.323e-02, -2.724e-02, 4.264e-02, 3.175e-02, 4.691e-02, -2.149e-03, -7.902e-02));
	r += mul(s0_4, M4(-1.039e-02, -5.488e-01, -2.377e-01, 5.342e-01, 1.898e-01, 6.275e-02, 3.823e-02, -1.338e-01, -4.912e-01, 1.846e-02, -1.652e-01, 3.887e-02, -2.288e-01, 1.902e-01, 2.627e-01, -1.714e-01));
	r += mul(s0_5, M4(-5.736e-02, -7.971e-02, 2.590e-01, 6.995e-03, 6.525e-02, 2.166e-01, -3.525e-01, -1.055e-01, -1.606e-02, -1.323e-01, 1.961e-01, -4.023e-02, 2.357e-02, 3.094e-01, 1.567e-01, 4.268e-01));
	r += mul(s0_6, M4(2.619e-02, 1.986e-03, 2.961e-02, -7.583e-02, -3.892e-02, 8.480e-02, -2.464e-01, -1.733e-01, 1.005e-02, -5.257e-02, 1.792e-01, 1.626e-01, -8.061e-03, 1.029e-02, -2.039e-02, 4.441e-02));
	r += mul(s0_7, M4(-3.036e-01, -1.926e-01, 1.797e-01, 8.735e-03, 3.920e-01, -1.346e-01, -1.227e-01, -4.580e-01, -3.569e-01, 1.247e-01, 2.235e-02, 3.877e-01, -1.185e-01, 6.898e-02, -1.475e-01, 5.642e-02));
	r += mul(s0_8, M4(-2.126e-01, -1.736e-01, 1.574e-01, -6.834e-03, 1.042e-01, -3.604e-01, 4.996e-02, -3.486e-01, -1.720e-01, 2.321e-01, -3.899e-02, 2.826e-01, 8.686e-02, -6.584e-02, -3.825e-03, -6.377e-02));
	r += mul(s1_0, M4(-5.496e-02, -4.222e-02, -2.792e-03, -3.556e-02, 5.450e-02, -7.865e-02, -5.855e-02, -2.291e-02, -9.608e-02, 6.813e-02, 1.043e-01, 7.489e-02, 1.209e-01, 8.399e-02, 8.350e-02, -2.453e-02));
	r += mul(s1_1, M4(8.849e-03, -2.157e-01, 1.732e-01, 5.515e-02, -2.454e-02, -3.195e-02, -9.855e-02, -7.056e-02, 5.327e-02, 5.454e-02, 1.054e-01, 1.350e-01, -5.746e-02, 1.120e-01, -3.249e-02, -1.117e-01));
	r += mul(s1_2, M4(-2.777e-02, -1.721e-01, 1.597e-01, 1.089e-02, 8.376e-03, 2.531e-02, -3.925e-02, -2.716e-02, -1.008e-02, -2.791e-02, 3.193e-02, 2.950e-02, 4.427e-02, 1.731e-01, -1.270e-01, 2.411e-02));
	r += mul(s1_3, M4(-3.763e-01, 1.254e-01, -1.312e-01, -7.604e-02, 4.453e-02, 1.177e-01, -3.188e-01, -3.846e-02, -2.851e-02, -1.417e-01, 2.746e-01, 1.440e-01, 1.953e-01, -2.118e-01, 3.612e-02, 1.981e-01));
	r += mul(s1_4, M4(1.616e-01, 7.593e-02, 2.356e-02, -2.483e-01, -8.994e-03, 7.006e-02, -6.024e-01, -2.298e-02, 7.541e-02, -4.059e-02, 3.311e-01, 1.234e-01, -2.117e-01, 2.983e-01, -2.857e-01, 3.157e-01));
	r += mul(s1_5, M4(-4.486e-02, 2.053e-01, -9.017e-02, 1.365e-01, -4.920e-02, -2.339e-01, -2.839e-02, -2.074e-01, 4.369e-02, 3.876e-01, 5.166e-02, 4.580e-01, -1.472e-02, -1.368e-01, -1.077e-02, -6.616e-02));
	r += mul(s1_6, M4(6.312e-04, 3.218e-02, 5.600e-03, 5.530e-02, 3.420e-01, -1.283e-01, 1.056e-01, 7.868e-02, -1.665e-01, 1.778e-02, -2.581e-02, -5.222e-02, -2.093e-02, -2.099e-02, 1.870e-02, 5.300e-03));
	r += mul(s1_7, M4(-5.676e-02, 5.203e-02, -6.860e-02, 3.769e-02, -4.574e-02, 1.500e-01, -1.920e-01, 1.313e-01, -1.114e-01, -1.834e-01, 2.026e-01, -2.089e-02, 2.705e-01, 3.211e-02, 4.535e-02, -1.238e-01));
	r += mul(s1_8, M4(2.129e-02, -1.489e-02, -5.727e-02, -1.047e-01, -1.917e-02, 2.914e-01, -2.014e-01, 1.469e-01, 3.575e-02, -1.683e-01, 2.251e-01, 4.187e-02, 6.045e-02, -4.654e-02, 7.980e-02, -3.764e-02));
	r += V4(-1.580e-03, 1.243e-03, -2.609e-03, 3.403e-03);
	return r;
}
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = max(-s0_0, 0.0);
	V4 s1_1 = max(-s0_1, 0.0);
	V4 s1_2 = max(-s0_2, 0.0);
	V4 s1_3 = max(-s0_3, 0.0);
	V4 s1_4 = max(-s0_4, 0.0);
	V4 s1_5 = max(-s0_5, 0.0);
	V4 s1_6 = max(-s0_6, 0.0);
	V4 s1_7 = max(-s0_7, 0.0);
	V4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 4
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-conv3
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(1.239e-02, -2.339e-01, 2.404e-02, -7.202e-02, 1.063e-02, -2.888e-02, -1.437e-02, 9.925e-03, 1.055e-02, 4.524e-02, -2.532e-02, 1.957e-02, -2.234e-02, -5.508e-02, -1.878e-02, -1.030e-04));
	r += mul(s0_1, M4(-1.381e-01, -2.927e-01, -3.995e-01, 1.529e-01, 9.024e-03, -5.015e-02, -4.839e-02, 8.862e-02, 2.132e-02, 1.199e-01, -2.533e-03, 1.101e-04, 6.693e-02, -5.458e-02, -8.382e-02, 1.384e-01));
	r += mul(s0_2, M4(4.212e-02, 3.081e-02, 9.793e-02, 2.173e-01, -3.771e-02, -3.263e-02, 3.357e-02, -4.333e-02, -4.598e-02, 6.218e-02, 5.029e-02, -5.113e-02, 6.583e-02, 1.337e-02, -1.038e-01, 1.431e-01));
	r += mul(s0_3, M4(3.141e-01, 4.795e-02, 1.027e-01, 1.867e-01, 1.422e-01, 9.276e-02, -3.929e-03, -1.191e-02, 1.111e-01, 5.062e-02, -1.581e-02, -2.345e-02, 3.912e-02, 9.121e-02, 4.327e-02, 6.812e-03));
	r += mul(s0_4, M4(2.842e-01, 1.576e-01, -1.715e+00, 2.119e+00, -7.018e-02, -1.125e-02, 5.215e-02, -3.271e-01, 3.515e-01, 1.203e+00, -5.206e-01, 2.511e-01, -6.046e-02, -1.189e-01, -1.179e-01, -1.755e-01));
	r += mul(s0_5, M4(-1.188e-02, 1.222e-01, 2.865e-01, -3.927e-01, 3.197e-02, -1.274e-01, -2.888e-01, 2.549e-01, -1.320e-02, 1.090e-01, 8.116e-03, 3.921e-02, -5.686e-02, 1.096e-01, 2.939e-01, -3.564e-01));
	r += mul(s0_6, M4(-1.417e-01, -3.538e-02, -5.231e-02, 3.723e-02, -2.909e-02, 4.113e-02, 2.492e-02, -3.650e-02, 1.666e-01, 2.356e-02, -1.538e-01, 6.270e-02, 8.634e-02, -5.361e-03, -6.285e-03, -2.978e-02));
	r += mul(s0_7, M4(1.654e+00, -4.443e-01, -1.340e+00, 8.501e-02, -6.504e-01, -5.407e-02, 1.314e-01, 2.004e-02, 9.329e-02, 1.119e-01, -6.279e-01, -4.562e-01, 5.415e-01, -8.449e-03, -7.576e-02, 6.216e-02));
	r += mul(s0_8, M4(1.018e-01, -6.482e-02, -6.778e-01, 4.137e-01, -3.083e-02, 5.112e-02, 3.225e-01, -4.240e-01, 3.724e-02, 9.984e-02, 5.953e-02, -2.178e-01, 2.788e-02, -5.678e-02, -3.447e-01, 4.541e-01));
	r += mul(s1_0, M4(3.259e-02, 2.719e-02, 2.555e-02, -2.029e-02, -7.399e-03, -2.326e-02, -4.775e-03, 2.910e-02, 3.943e-02, 2.364e-02, -3.105e-02, 1.901e-02, 4.260e-02, -1.073e-02, -2.596e-02, 5.291e-02));
	r += mul(s1_1, M4(2.758e-02, 7.259e-02, -3.088e-02, 5.468e-03, -3.305e-02, -1.999e-02, 2.464e-02, -3.278e-02, 4.162e-02, -3.091e-02, -6.414e-02, 1.025e-01, -2.886e-02, -9.641e-02, -5.063e-02, 6.013e-02));
	r += mul(s1_2, M4(-1.927e-02, 4.617e-02, -1.956e-03, -8.911e-02, 3.937e-02, 3.239e-03, -1.629e-02, 5.506e-02, 2.255e-02, -8.073e-03, -5.787e-02, 4.383e-02, -6.237e-02, 1.119e-02, 8.358e-02, -7.015e-02));
	r += mul(s1_3, M4(-3.272e-02, -9.836e-03, -7.092e-03, 2.237e-02, 4.582e-02, -2.877e-01, 1.070e-02, -8.207e-02, -1.208e-01, -7.300e-02, -3.625e-02, 3.162e-02, 2.339e-01, -2.621e-02, -6.848e-02, 1.360e-02));
	r += mul(s1_4, M4(8.471e-02, -4.233e-02, -4.135e-02, 4.360e-02, -6.836e-03, 2.159e-01, -2.141e-01, 1.247e-01, -3.312e-02, -3.158e-02, 1.319e-01, -9.177e-02, 5.488e-01, -1.930e-01, -9.117e-01, 7.801e-01));
	r += mul(s1_5, M4(9.449e-02, 8.964e-02, -8.470e-02, 4.129e-01, -3.529e-02, 1.208e-01, 2.584e-01, -2.534e-01, 1.038e-02, 9.853e-02, 9.403e-02, -9.748e-02, 2.664e-02, -9.868e-02, -6.465e-01, 4.497e-01));
	r += mul(s1_6, M4(1.726e-02, 1.671e-02, -6.044e-03, -1.296e-02, -1.047e-01, 1.599e-02, 2.404e-01, 1.338e-01, -8.087e-02, -1.964e-02, 1.263e-02, 3.134e-03, 3.457e-02, 2.641e-02, 2.168e-02, -4.284e-03));
	r += mul(s1_7, M4(-2.370e-01, 3.943e-02, 4.281e-02, -1.298e-02, 4.005e-01, 1.692e-02, 3.294e-01, -5.828e-02, 6.426e-01, 1.947e-02, -9.301e-02, 8.349e-03, -7.480e-01, 2.685e-03, 1.401e-01, 4.542e-02));
	r += mul(s1_8, M4(-8.837e-03, 6.443e-02, 2.783e-01, -3.214e-01, 1.246e-02, -1.421e-01, -1.471e-01, 3.572e-01, 4.726e-02, -5.385e-02, -3.701e-01, 3.667e-01, -4.058e-02, 2.325e-02, 4.036e-01, -3.995e-01));
	r += V4(2.605e-03, 3.871e-04, -3.006e-03, 1.606e-03);
	return r;
}
void Pass4(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = max(-s0_0, 0.0);
	V4 s1_1 = max(-s0_1, 0.0);
	V4 s1_2 = max(-s0_2, 0.0);
	V4 s1_3 = max(-s0_3, 0.0);
	V4 s1_4 = max(-s0_4, 0.0);
	V4 s1_5 = max(-s0_5, 0.0);
	V4 s1_6 = max(-s0_6, 0.0);
	V4 s1_7 = max(-s0_7, 0.0);
	V4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 5
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-out
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(1.252e-02, -1.825e-02, 2.245e-03, -1.254e-02, 9.449e-02, -4.958e-03, 2.606e-02, 2.311e-03, 1.645e+00, -6.395e-02, -5.968e-01, -2.764e-01, 2.571e-01, 1.763e-01, 4.182e-02, -2.370e-02));
	r += mul(s0_1, M4(6.426e-01, -9.532e-02, 3.643e-01, 6.598e-02, -1.444e-01, 2.070e-01, -1.437e-01, 2.229e-02, -1.072e-01, 1.246e+00, -1.274e-01, -4.581e-01, -2.646e-01, 2.744e-01, -2.529e-01, -3.427e-02));
	r += mul(s0_2, M4(-4.840e-02, 5.211e-01, -5.260e-02, 1.322e-01, -6.364e-03, -9.265e-02, 2.780e-03, -6.661e-02, -1.909e-02, 1.072e-01, -1.176e-01, -9.591e-03, 1.381e-02, -1.243e-01, 4.412e-03, -4.383e-02));
	r += mul(s0_3, M4(-1.067e-01, -2.228e-02, 4.165e-02, 3.916e-02, 3.055e-01, 1.082e-01, 1.870e-01, -1.169e-01, -2.763e-01, 2.644e-02, 1.288e-01, 2.998e-01, 2.002e-01, 1.145e-01, 4.789e-01, 4.232e-01));
	r += mul(s0_4, M4(-2.690e-01, -2.725e-01, 2.911e-02, -3.076e-01, -2.549e-01, -1.723e-01, -2.510e-01, 2.803e-01, 3.623e-02, -2.192e-01, -2.212e-01, -5.727e-01, -2.218e-01, -3.359e-01, -2.100e-01, 9.033e-02));
	r += mul(s0_5, M4(-1.061e-01, -1.538e-01, -1.199e-01, 2.095e-01, 4.236e-02, -2.769e-02, -1.984e-02, -1.145e-01, -1.532e-02, -3.381e-02, -4.097e-02, -5.379e-02, -6.694e-03, -6.369e-02, -2.069e-03, -1.218e-01));
	r += mul(s0_6, M4(1.376e-02, 4.373e-03, -6.616e-02, -3.747e-02, -1.041e-01, 1.426e-01, 1.250e-01, 3.955e-01, 1.248e-02, 4.615e-03, -3.824e-02, -1.226e-04, 5.187e-02, 3.504e-03, 1.314e-01, -8.765e-02));
	r += mul(s0_7, M4(1.776e-02, -9.459e-03, -1.071e-01, -9.557e-02, 1.476e-01, -6.553e-02, 1.017e-01, -3.213e-01, -1.978e-03, 2.066e-02, -1.534e-02, 4.162e-02, -1.341e-02, -9.059e-03, -1.052e-01, -1.531e-02));
	r += mul(s0_8, M4(1.318e-02, 3.860e-02, 2.399e-02, -2.631e-02, 1.984e-02, 1.621e-02, 1.099e-02, 1.116e-03, 5.797e-03, 2.071e-03, 1.837e-02, -2.679e-02, 2.170e-02, -3.034e-02, 1.824e-02, -7.012e-02));
	r += mul(s1_0, M4(-9.158e-02, -2.753e-02, 1.169e-01, 3.735e-02, 3.506e-01, 1.019e-01, -1.657e-01, -2.006e-01, -5.840e-01, -4.965e-02, -1.850e-01, 3.821e-02, -8.613e-01, 2.521e-02, 4.468e-02, 2.191e-01));
	r += mul(s1_1, M4(-3.650e-01, 4.537e-01, -7.949e-01, -4.009e-01, 2.146e-02, 1.595e-01, 4.146e-02, 2.292e-02, 6.813e-02, -5.506e-01, 1.097e-01, -1.275e-01, 2.959e-01, -2.676e-01, 2.268e-01, -4.239e-02));
	r += mul(s1_2, M4(4.789e-02, -9.279e-01, 2.940e-01, 1.805e-03, 2.215e-02, 1.674e-02, 2.453e-02, 1.638e-02, 1.349e-02, 9.065e-05, 2.434e-02, 3.107e-02, 3.415e-02, 5.811e-02, 1.416e-02, -4.421e-03));
	r += mul(s1_3, M4(3.456e-02, 4.777e-03, 1.056e-02, 3.149e-02, -9.395e-01, -4.482e-01, 8.785e-01, 2.452e-01, 2.835e-01, 3.545e-02, -4.699e-01, -2.129e-01, 9.543e-02, -1.033e-01, -6.194e-01, -5.891e-01));
	r += mul(s1_4, M4(3.429e-02, 8.618e-02, 5.761e-01, 3.916e-01, 7.293e-02, 4.015e-01, -2.648e-01, 8.197e-01, 2.229e-01, 4.736e-01, 2.894e-01, -1.737e-01, -2.114e-01, 7.738e-02, 2.205e-01, 5.918e-01));
	r += mul(s1_5, M4(6.144e-02, 3.406e-02, 1.360e-01, 1.987e-01, 2.513e-03, 8.369e-02, -4.312e-02, -7.264e-02, -5.313e-04, 4.450e-02, 8.282e-03, 5.193e-02, -1.105e-02, -9.835e-03, 2.129e-02, 3.741e-02));
	r += mul(s1_6, M4(-1.028e-02, 1.401e-02, 2.799e-02, 2.375e-02, 8.481e-02, 7.374e-02, -8.848e-01, -1.958e-01, -5.212e-02, -6.443e-03, 1.477e-01, 1.004e-01, 1.779e-02, -3.845e-02, -1.008e-01, -7.884e-02));
	r += mul(s1_7, M4(1.206e-02, 1.389e-02, 6.717e-02, 5.781e-02, 7.505e-02, 9.087e-02, 6.680e-02, -2.877e-01, -5.851e-03, -1.512e-02, 9.374e-03, 1.283e-01, 5.448e-04, 2.485e-02, 3.187e-02, 2.324e-03));
	r += mul(s1_8, M4(2.528e-02, -4.729e-03, -1.966e-02, -3.699e-02, -1.672e-02, -9.790e-02, 8.626e-03, -4.264e-02, -2.206e-03, -3.342e-03, -1.252e-02, 2.469e-02, -1.602e-02, 4.079e-03, -1.388e-02, 2.678e-02));
	r += V4(-9.060e-04, 1.932e-04, -6.487e-04, 3.428e-04);
	return tanh(r);
}
void Pass5(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = max(-s0_0, 0.0);
	V4 s1_1 = max(-s0_1, 0.0);
	V4 s1_2 = max(-s0_2, 0.0);
	V4 s1_3 = max(-s0_3, 0.0);
	V4 s1_4 = max(-s0_4, 0.0);
	V4 s1_5 = max(-s0_5, 0.0);
	V4 s1_6 = max(-s0_6, 0.0);
	V4 s1_7 = max(-s0_7, 0.0);
	V4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 6
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-shuffle
//!STYLE PS
//!IN t0, INPUT
float4 Pass6(float2 pos) {
	float2 pt = float2(GetInputPt());
	const static float3x3 rgb2yuv = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081};
	const static float3x3 yuv2rgb = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float4 r = 0.0;
	float2 size = float2(GetInputSize());
	float2 f = frac(pos * size);
	float3 yuv = mul(rgb2yuv, INPUT.SampleLevel(SL, pos, 0).rgb);
	int2 i = int2(f * 2.0);
	r.r = t0.SampleLevel(SP, (float2(0.5, 0.5) - f) * pt + pos, 0)[2*i.y + i.x];
	r.r += yuv.r;
	r.a = 1.0;
	r.r = clamp(r, 0.0, 1.0);
	float3 px = mul(yuv2rgb, float3(r.r, yuv.yz));
	return float4(px, 1.0);
}
