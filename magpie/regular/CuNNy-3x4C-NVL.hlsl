// CuNNy 3x4C BILINEAR CHROMA NVL
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

//!MAGPIE EFFECT
//!VERSION 3
//!OUTPUT_WIDTH INPUT_WIDTH * 2
//!OUTPUT_HEIGHT INPUT_HEIGHT * 2

//!TEXTURE
Texture2D INPUT;


//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t1;

//!PASS 1
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-in
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) (dot(float3(6.553e-01, 1.263e+00, 2.804e-01), O(INPUT, float2(x, y)).rgb) + -1.321e+00)
float4 f0(float2 pt, float2 pos, min16float s0_0, min16float s0_1, min16float s0_2, min16float s0_3, min16float s0_4, min16float s0_5, min16float s0_6, min16float s0_7, min16float s0_8) {
	V4 r = 0.0;
	r += V4(-4.678e-02, -6.665e-02, 9.022e-03, -3.039e-02) * s0_0;
	r += V4(-1.773e-02, 5.928e-02, 4.268e-01, -1.421e-01) * s0_1;
	r += V4(3.366e-03, -1.142e-04, -8.821e-02, 3.409e-02) * s0_2;
	r += V4(2.360e-01, 2.415e-01, -3.330e-01, -4.063e-01) * s0_3;
	r += V4(5.967e-02, -6.374e-01, -1.675e-01, 5.879e-01) * s0_4;
	r += V4(2.147e-05, 3.057e-01, 1.707e-01, -1.127e-03) * s0_5;
	r += V4(1.825e-02, 1.103e-01, 4.333e-02, 1.650e-03) * s0_6;
	r += V4(-7.529e-02, 4.200e-02, -4.018e-02, -1.341e-03) * s0_7;
	r += V4(8.820e-03, -5.692e-02, -2.200e-02, -4.053e-02) * s0_8;
	r += V4(6.997e-03, 4.482e-03, -3.229e-04, 1.150e-03);
	return r;
}
void Pass1(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float s0_0 = l0(-1.0, -1.0);
	min16float s0_1 = l0(0.0, -1.0);
	min16float s0_2 = l0(1.0, -1.0);
	min16float s0_3 = l0(-1.0, 0.0);
	min16float s0_4 = l0(0.0, 0.0);
	min16float s0_5 = l0(1.0, 0.0);
	min16float s0_6 = l0(-1.0, 1.0);
	min16float s0_7 = l0(0.0, 1.0);
	min16float s0_8 = l0(1.0, 1.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8);
}
//!PASS 2
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-conv1
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-2.836e-01, 1.809e-02, 1.145e-01, -6.881e-02, 2.079e-01, 3.649e-02, -2.958e-03, 6.582e-02, -1.279e-01, 9.433e-03, -1.194e-01, -1.925e-02, -7.783e-02, -2.246e-02, 4.352e-02, 1.352e-02));
	r += mul(s0_1, M4(-9.980e-02, -7.014e-02, -9.418e-02, -5.919e-02, -1.548e-01, 1.393e-01, 2.143e-01, -1.257e-01, -1.151e-02, 6.238e-02, -3.605e-01, 2.967e-02, -1.201e-01, -5.606e-03, 1.324e-01, 2.782e-03));
	r += mul(s0_2, M4(2.979e-01, -1.285e-01, -3.966e-02, 3.423e-02, -7.312e-02, 1.929e-02, -2.750e-02, 7.007e-02, 5.482e-02, -2.127e-02, -2.435e-02, -1.339e-02, 2.858e-02, -2.462e-02, 1.322e-01, 1.837e-02));
	r += mul(s0_3, M4(-2.150e-01, 8.518e-02, -1.400e-01, -1.787e-02, 4.576e-01, 1.392e-01, 1.077e-01, 9.114e-02, 3.638e-01, 6.835e-02, 1.520e-02, 3.028e-02, 1.006e-01, 1.202e-01, 1.646e-01, -5.019e-02));
	r += mul(s0_4, M4(-1.373e-01, 9.999e-02, 1.065e-01, 2.241e-02, -1.706e-01, -1.124e-01, -2.611e-01, 4.556e-02, -8.511e-02, 2.098e-01, -1.889e-01, -1.860e-01, 3.173e-01, -3.457e-02, 2.739e-01, 6.733e-02));
	r += mul(s0_5, M4(5.604e-01, -5.683e-02, 1.310e-01, 1.709e-01, 1.837e-02, -5.569e-03, -2.354e-02, 5.555e-02, -3.473e-02, -2.717e-03, -2.348e-01, -5.108e-03, 1.489e-01, 1.174e-01, 9.579e-02, -4.278e-01));
	r += mul(s0_6, M4(-3.278e-01, 8.916e-02, 1.019e-01, 3.081e-01, 9.515e-02, -1.233e-01, -6.554e-02, -4.136e-04, 1.006e-01, 1.427e-01, -1.099e-01, 5.146e-02, -2.094e-02, -1.451e-01, 2.140e-01, 1.052e-01));
	r += mul(s0_7, M4(-1.353e-02, 1.556e-02, -2.356e-01, -2.559e-01, -1.616e-01, 3.118e-02, -1.037e-01, -4.565e-02, -2.163e-01, 7.715e-01, -1.869e-01, -1.560e-01, -2.368e-01, -6.855e-01, 6.834e-02, -7.706e-02));
	r += mul(s0_8, M4(2.171e-01, -5.450e-02, 5.886e-02, -1.095e-01, 2.678e-02, 1.837e-02, -3.911e-02, -9.350e-02, -4.659e-03, -1.737e-02, -1.025e-01, -7.874e-02, 9.224e-02, -2.378e-01, 8.149e-02, -3.065e-01));
	r += mul(s1_0, M4(-2.998e-01, 8.220e-02, -7.268e-02, -8.892e-02, 2.588e-01, 2.093e-02, -2.885e-03, 4.002e-02, -7.866e-02, -3.650e-02, 2.920e-01, -5.141e-02, -5.920e-02, 3.976e-03, -6.967e-02, 1.736e-03));
	r += mul(s1_1, M4(-6.157e-02, -6.106e-02, -1.663e-01, 1.927e-03, -1.238e-01, 1.147e-01, 1.608e-01, -1.314e-01, -3.018e-02, 1.494e-02, 1.156e-02, -2.359e-03, -1.577e-01, 1.077e-01, -4.634e-01, -5.747e-02));
	r += mul(s1_2, M4(2.959e-01, -1.502e-01, 5.260e-03, 8.896e-02, -5.476e-02, 1.308e-02, -5.189e-02, 4.489e-02, 4.161e-02, -3.820e-02, 9.092e-02, 2.500e-02, 3.168e-02, -2.572e-03, -2.384e-01, 2.152e-02));
	r += mul(s1_3, M4(-1.781e-01, 9.094e-02, -2.903e-02, -2.949e-02, 6.543e-01, 1.321e-01, 5.326e-01, 7.893e-02, 3.135e-01, 4.631e-03, 3.202e-01, 5.263e-02, 2.340e-04, 1.791e-01, -3.311e-01, -6.365e-02));
	r += mul(s1_4, M4(6.744e-02, 1.223e-01, 2.957e-01, -2.225e-02, -5.020e-01, -2.768e-01, 7.684e-02, 6.233e-02, -2.234e-02, 1.228e-01, 2.517e-01, -1.762e-01, 1.333e-01, 1.234e-01, -3.269e-01, 9.127e-03));
	r += mul(s1_5, M4(2.197e-01, -1.979e-01, -3.901e-03, 2.318e-01, -5.430e-03, -3.408e-02, 5.955e-02, 1.376e-03, 3.768e-02, 2.796e-02, 1.358e-01, -2.736e-02, 2.842e-01, 1.128e-01, -1.008e-01, -5.019e-01));
	r += mul(s1_6, M4(-3.271e-01, 8.051e-02, 1.079e-01, 2.743e-01, 4.042e-02, -2.004e-01, 3.602e-02, -8.495e-02, -1.427e-02, 4.731e-02, 1.389e-01, 1.304e-01, 3.140e-02, -3.695e-02, -2.474e-02, 1.511e-01));
	r += mul(s1_7, M4(6.117e-02, -1.940e-02, -2.341e-01, -4.013e-01, -1.675e-01, -7.918e-02, 6.430e-02, -3.763e-02, -1.486e-01, 6.855e-01, 1.994e-01, -7.047e-02, -1.807e-01, -6.169e-01, -1.079e-01, -7.510e-02));
	r += mul(s1_8, M4(2.239e-01, 5.796e-02, 1.034e-01, -5.238e-02, -7.154e-03, 6.453e-02, 1.148e-01, -1.694e-01, 3.136e-02, 8.159e-04, 9.486e-02, -1.068e-01, 1.577e-01, -1.044e-01, 4.542e-02, -4.482e-01));
	r += V4(-1.051e-03, 1.677e-03, -3.120e-03, 1.528e-03);
	return r;
}
void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 3
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-conv2
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-9.442e-03, 5.213e-02, 7.554e-03, 2.182e-03, -3.614e-02, 2.895e-02, 2.049e-02, -1.334e-01, -2.774e-02, 4.846e-02, 1.027e-02, -1.314e-02, 1.130e-01, 1.655e-01, 4.248e-01, -4.404e-01));
	r += mul(s0_1, M4(3.899e-02, -2.615e-01, 8.670e-02, -7.840e-02, 1.707e-02, -1.210e-01, -5.761e-01, 4.136e-02, 9.394e-03, 8.764e-02, -5.066e-02, 5.919e-03, -6.062e-02, 6.744e-02, 2.012e-01, -2.580e-01));
	r += mul(s0_2, M4(-8.865e-02, -1.785e-01, -1.561e-01, 2.497e-02, 5.166e-03, 9.037e-03, -1.509e-01, 1.954e-02, 6.662e-02, -6.112e-02, -3.596e-02, 5.165e-02, -2.568e-02, -7.772e-03, 5.151e-02, -4.363e-02));
	r += mul(s0_3, M4(1.188e-01, -3.706e-02, -4.081e-02, 6.408e-02, 9.263e-02, 2.156e-02, 2.389e-01, -3.175e-01, -3.106e-02, -2.298e-02, 9.448e-02, -1.341e-01, 4.795e-01, -2.416e-01, -2.446e-01, 2.694e-01));
	r += mul(s0_4, M4(-3.992e-02, 2.803e-01, -3.298e-02, 2.557e-02, -6.133e-02, -1.178e-01, 3.541e-01, 3.174e-01, 8.712e-02, 2.297e-01, 3.139e-01, -6.274e-02, -1.635e-02, -1.502e-01, -2.752e-01, 4.228e-01));
	r += mul(s0_5, M4(-7.024e-02, -3.414e-01, -4.404e-01, -1.319e-02, 4.366e-02, -2.911e-02, 7.913e-02, -1.971e-02, 1.499e-01, 4.168e-02, -3.836e-01, 2.026e-01, 2.658e-02, 1.995e-02, -7.346e-02, 1.104e-02));
	r += mul(s0_6, M4(2.449e-02, 1.178e-02, 2.254e-02, -4.715e-02, 7.055e-02, 1.660e-02, 1.086e-02, 8.004e-03, 1.509e-01, -2.686e-01, -1.812e-01, 2.300e-01, 5.376e-02, -8.895e-02, -1.191e-01, 1.072e-01));
	r += mul(s0_7, M4(1.257e-01, -1.614e-01, -1.314e-01, 1.930e-01, -4.882e-02, -4.181e-03, -4.042e-02, -4.626e-02, -2.080e-01, -4.441e-02, 6.390e-02, -9.045e-02, -3.760e-02, -1.138e-01, -7.611e-02, 8.518e-02));
	r += mul(s0_8, M4(-1.363e-01, -5.435e-02, 1.134e-01, -1.423e-01, 4.870e-02, 4.968e-02, 4.114e-02, 1.966e-02, 2.941e-02, 3.570e-02, -3.376e-02, 6.345e-02, -1.458e-03, -3.674e-02, -8.933e-03, 4.034e-02));
	r += mul(s1_0, M4(-1.042e-02, 1.173e-02, 2.577e-02, -1.921e-02, -2.368e-01, 3.395e-02, 1.065e-01, -2.214e-01, -5.885e-03, -1.372e-02, 1.345e-02, -3.048e-02, 8.097e-02, -1.495e-01, 3.343e-02, -1.135e-01));
	r += mul(s1_1, M4(5.976e-02, 3.563e-01, 4.981e-01, -6.351e-01, 1.561e-02, 5.617e-01, -1.118e-03, -3.486e-01, -7.852e-03, -1.700e-03, -6.673e-02, 3.539e-03, -6.325e-02, -3.369e-01, -3.721e-01, 1.841e-01));
	r += mul(s1_2, M4(-3.332e-02, 1.279e-01, 2.042e-01, -1.851e-01, -3.578e-02, -3.616e-02, -1.074e-01, 3.740e-02, 8.761e-03, 3.015e-03, 3.161e-02, -2.275e-02, -4.559e-03, -8.369e-03, 3.165e-02, 1.591e-02));
	r += mul(s1_3, M4(8.472e-02, -3.584e-01, 5.213e-04, 7.643e-02, -8.824e-02, -1.003e-01, 1.820e-01, -2.306e-01, 1.413e-02, 8.130e-02, 9.951e-02, -1.265e-01, 3.426e-01, -7.948e-02, -1.084e-01, -5.432e-02));
	r += mul(s1_4, M4(-5.957e-01, 6.824e-01, 3.821e-01, -1.763e-01, 3.435e-02, 3.759e-02, 5.900e-02, 7.907e-01, 1.388e-02, -9.013e-02, 6.653e-02, -4.941e-03, -1.918e-01, -1.778e-01, -1.743e-02, -4.523e-02));
	r += mul(s1_5, M4(-1.684e-02, -9.496e-02, -1.009e-01, 1.411e-01, 7.529e-03, -9.309e-02, -7.304e-03, 4.285e-02, -6.009e-03, 2.563e-02, -2.702e-02, 1.675e-02, 1.038e-02, 2.556e-02, -4.745e-02, -3.722e-03));
	r += mul(s1_6, M4(-3.590e-02, -1.050e-01, -7.076e-04, -9.501e-02, -1.330e-02, 1.087e-02, -9.373e-03, -7.301e-03, -4.821e-02, -4.918e-02, 2.007e-03, -1.393e-02, 4.504e-02, -7.245e-02, 5.373e-02, -7.550e-02));
	r += mul(s1_7, M4(2.842e-01, -3.603e-01, -4.984e-01, 6.348e-01, -5.517e-02, -2.771e-02, -4.319e-02, -6.161e-02, 1.420e-01, -5.654e-02, -9.156e-02, 2.046e-01, -1.255e-01, 4.498e-02, 1.982e-01, -2.446e-01));
	r += mul(s1_8, M4(2.107e-03, -2.293e-01, -2.627e-01, 2.743e-01, 2.921e-02, -3.471e-03, -4.082e-02, 7.717e-02, -6.583e-02, -1.452e-02, 4.363e-02, -1.387e-01, -1.045e-02, 1.310e-02, 4.623e-02, -1.827e-02));
	r += V4(1.387e-03, 3.587e-03, -2.397e-03, 1.253e-03);
	return r;
}
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 4
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-conv3
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-3.448e-02, 2.110e-02, -1.678e-02, 5.793e-02, -9.010e-02, 2.977e-03, 1.386e-03, 1.082e-01, -1.881e-01, 2.492e-02, 1.831e-01, 9.425e-02, -1.067e-01, 4.608e-02, 8.869e-03, 4.782e-02));
	r += mul(s0_1, M4(2.135e-02, 1.622e-02, -1.680e-02, 1.124e-01, -2.785e-02, -5.088e-02, 3.503e-02, 6.165e-02, 5.127e-02, 1.222e-02, -3.046e-03, -1.761e-01, -2.311e-01, -9.362e-02, 3.528e-04, 1.747e-01));
	r += mul(s0_2, M4(2.150e-01, -4.013e-02, 1.467e-02, -2.509e-01, 6.487e-02, 2.254e-02, -2.389e-02, 1.545e-01, -8.581e-02, -3.153e-02, -3.826e-03, 6.106e-02, 2.402e-01, 4.052e-02, 4.221e-03, -2.368e-01));
	r += mul(s0_3, M4(-2.810e-03, 2.370e-02, 9.183e-03, -2.614e-02, 7.231e-03, 1.284e-01, 1.762e-02, -2.284e-02, -6.270e-01, 3.096e-01, -1.898e+00, 5.606e-01, -7.909e-02, 2.568e-01, -2.634e-02, 1.567e-01));
	r += mul(s0_4, M4(5.488e-01, -1.105e-01, -5.857e-02, -3.126e-01, -2.575e-01, -2.079e-01, -1.293e-01, 4.852e-01, 4.524e-01, -2.134e-01, 1.463e-02, -3.350e-01, -2.946e-01, -2.666e-01, -1.828e-02, -2.510e-01));
	r += mul(s0_5, M4(-3.773e-01, -7.101e-02, -2.517e-02, 1.248e-01, 2.472e-01, 2.627e-01, 3.733e-02, -4.848e-01, 5.879e-03, 2.476e-02, -2.815e-02, -6.849e-02, 1.661e-01, 9.452e-02, -5.524e-03, -7.992e-02));
	r += mul(s0_6, M4(7.240e-03, -2.925e-02, -2.521e-03, 4.520e-02, 7.343e-02, -6.959e-02, -4.551e-02, -5.827e-02, -1.220e-01, 8.176e-02, -1.231e-02, 8.910e-02, -2.033e-02, 4.232e-02, 4.428e-02, -4.992e-02));
	r += mul(s0_7, M4(-1.366e-01, 1.265e-01, -1.703e-02, 1.299e-01, -9.868e-02, 7.965e-02, 2.311e-03, -2.826e-03, 1.675e-01, -6.814e-02, -3.510e-03, -1.363e-01, 1.008e-01, -6.717e-02, 2.705e-02, -6.279e-02));
	r += mul(s0_8, M4(-5.468e-02, 5.806e-03, 4.433e-03, 4.458e-02, 2.842e-01, -1.105e-01, -5.259e-03, -1.938e-01, -6.665e-02, 2.049e-02, 5.723e-03, 5.042e-02, -2.544e-02, 1.645e-02, -4.977e-03, 3.698e-02));
	r += mul(s1_0, M4(-4.736e-01, 2.330e-01, -5.851e-02, 4.400e-01, -1.295e-01, 2.199e-02, -1.959e-02, 1.432e-01, -2.740e-02, 1.951e-02, 9.498e-03, 2.534e-02, -1.022e-01, 6.501e-03, -7.930e-02, -1.614e-02));
	r += mul(s1_1, M4(-7.688e-01, -8.777e-02, 3.319e-02, 8.887e-01, -1.260e-01, -4.822e-02, 1.185e-02, 6.199e-02, 1.077e-01, -1.690e-02, -6.081e-03, -1.406e-01, -2.795e-01, -4.774e-02, -7.344e-02, -2.437e-01));
	r += mul(s1_2, M4(6.303e-01, 1.185e-01, 2.384e-02, -9.818e-01, 2.476e-01, 2.286e-02, 9.801e-03, -2.666e-01, -3.743e-02, 8.634e-04, -1.027e-03, -1.446e-02, -5.733e-02, 7.582e-02, -1.838e-02, -2.316e-01));
	r += mul(s1_3, M4(-2.962e-01, 2.248e-01, 2.427e-01, 8.639e-02, -6.761e-02, 8.918e-02, 4.094e-02, 1.841e-01, -4.758e-01, 1.566e-01, -6.181e-02, 5.488e-01, -8.218e-02, 1.461e-01, 1.994e-01, 1.070e-01));
	r += mul(s1_4, M4(1.186e+00, -9.395e-01, 1.847e-02, -2.133e-01, 4.236e-02, -8.502e-02, 8.491e-03, -5.382e-02, 3.896e-01, -2.007e-01, 3.995e-03, -8.965e-01, -6.202e-02, -1.996e+00, 3.010e-02, 1.072e-01));
	r += mul(s1_5, M4(-2.479e-01, 6.861e-02, -5.359e-02, -1.376e-01, 2.873e-01, -8.115e-02, 5.725e-03, 3.164e-03, -1.668e-01, 4.780e-04, -1.298e-02, 9.498e-02, 6.074e-02, 7.261e-02, -2.325e-02, -1.238e-02));
	r += mul(s1_6, M4(-1.413e-01, 1.411e-01, -5.145e-02, 1.577e-01, -3.308e-02, -6.763e-02, -8.716e-02, 7.884e-02, -1.355e-01, 9.350e-02, 1.411e-01, 8.911e-02, -1.192e-02, -1.088e-02, -5.750e-02, 1.971e-02));
	r += mul(s1_7, M4(-3.408e-01, 2.324e-01, 2.447e-02, 2.684e-01, -8.759e-03, 1.140e-01, -7.595e-02, -9.795e-02, 1.330e-01, -7.343e-02, 3.678e-02, 2.957e-03, 1.279e-01, -7.889e-02, -1.549e-02, -1.524e-01));
	r += mul(s1_8, M4(-9.977e-02, 1.259e-01, 4.673e-02, -2.881e-02, 2.743e-01, -8.238e-02, -9.260e-03, -1.919e-01, -4.991e-02, 2.219e-02, 7.104e-03, 7.753e-03, -1.924e-02, 3.817e-03, -9.888e-03, -2.620e-03));
	r += V4(-2.099e-03, 1.633e-03, -2.366e-04, 9.614e-04);
	return r;
}
void Pass4(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 5
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-out
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(1.276e-02, 1.577e-02, -1.744e-02, -4.088e-04, 1.276e-01, 2.239e-02, 9.421e-03, -1.034e-02, -7.491e-02, -3.391e-02, -2.311e-02, 3.894e-02, -1.680e-04, 3.332e-02, -4.350e-02, -7.526e-03));
	r += mul(s0_1, M4(9.253e-02, 2.792e-02, 3.903e-03, 5.547e-03, 9.122e-02, 1.909e-01, 1.012e-01, 1.274e-01, 1.799e-01, -1.935e-02, -2.746e-02, 4.615e-02, 4.011e-02, 5.386e-02, 1.169e-02, -2.437e-02));
	r += mul(s0_2, M4(3.739e-04, 1.945e-02, -1.221e-02, -2.159e-02, 8.373e-02, 1.052e-01, -1.560e-02, -3.904e-03, -6.275e-02, 1.565e-01, -1.033e-01, -1.694e-01, 1.133e-02, 5.752e-03, 1.671e-03, -7.318e-04));
	r += mul(s0_3, M4(-1.130e-01, -3.551e-02, 1.425e-02, 2.051e-04, -3.919e-02, -1.682e-03, 1.533e-02, 1.760e-02, -5.797e-03, -7.957e-02, 1.498e-01, 1.099e-03, -3.055e-01, 1.101e-02, 6.158e-02, 4.857e-02));
	r += mul(s0_4, M4(-7.445e-01, -2.222e-01, -2.134e-01, -6.583e-02, -2.080e-02, -4.659e-02, -2.862e-01, -1.772e-01, -7.487e-01, 6.083e-02, 5.371e-01, -1.628e-01, -1.223e-01, -6.465e-01, -5.011e-02, -1.331e-01));
	r += mul(s0_5, M4(2.447e-01, -2.065e-01, 9.983e-02, 4.031e-02, -8.286e-03, -1.169e-02, 6.214e-02, -3.002e-02, -2.117e+00, -2.607e+00, 1.704e+00, 2.426e+00, -2.659e-02, -4.450e-02, 2.764e-03, 1.947e-02));
	r += mul(s0_6, M4(1.066e-02, 1.178e-02, -6.812e-02, -1.882e-03, -7.603e-03, -1.784e-03, 2.025e-02, -2.590e-03, 4.335e-02, 8.243e-02, -1.044e-01, 1.118e-02, 1.380e-02, 1.251e-02, -8.726e-02, 2.720e-02));
	r += mul(s0_7, M4(1.028e-01, 3.020e-02, -2.215e-01, -8.083e-02, -9.143e-04, -6.398e-03, -2.249e-02, -1.692e-03, 1.122e-01, 3.248e-02, 3.216e-01, -1.558e-01, 2.662e-02, 6.793e-02, -2.885e-02, -1.858e-01));
	r += mul(s0_8, M4(1.240e-03, 7.172e-03, 1.511e-01, -1.096e-01, 6.068e-03, 2.092e-03, -7.328e-04, 1.139e-03, 1.260e-01, 1.360e-01, -1.872e-01, 2.246e-01, -3.693e-03, 4.102e-03, -7.861e-03, -1.822e-02));
	r += mul(s1_0, M4(-3.846e-02, 5.547e-02, -7.804e-03, -1.403e-02, 1.004e-02, 4.163e-02, 2.932e-02, 2.050e-02, -3.332e-03, 5.452e-03, -1.918e-03, -2.133e-03, 1.377e-02, 1.178e-02, -3.137e-02, -7.904e-03));
	r += mul(s1_1, M4(8.032e-02, 1.269e-02, -2.842e-02, -8.934e-03, 9.579e-02, 1.430e-01, 4.480e-02, 1.252e-02, -1.547e-02, 3.357e-02, 8.179e-02, -1.346e-02, 9.300e-02, 4.217e-02, -3.364e-02, -1.456e-02));
	r += mul(s1_2, M4(1.517e-02, 1.358e-02, -1.145e-02, -1.299e-02, 3.686e-01, -1.606e-01, -5.382e-02, 1.803e-01, -2.155e-01, -2.751e-01, 2.427e-01, 3.096e-01, 3.994e-03, 3.865e-03, -9.125e-03, -2.730e-02));
	r += mul(s1_3, M4(-2.295e-01, 2.442e-02, -1.744e-01, 1.780e-01, 2.247e-02, 1.377e-02, -4.729e-02, -3.136e-02, 4.338e-03, 2.737e-04, 1.128e-02, -1.132e-03, -1.352e-01, -7.055e-02, -1.134e-02, -2.012e-03));
	r += mul(s1_4, M4(-9.797e-02, -5.608e-01, 5.382e-02, -3.076e-01, -2.485e-01, 7.359e-02, -3.643e-01, 1.317e-01, -4.602e-02, -7.362e-03, -4.627e-03, 3.402e-02, -7.839e-01, -2.511e-01, -9.724e-02, -6.939e-02));
	r += mul(s1_5, M4(-1.996e-02, -2.592e-02, 1.260e-02, 1.427e-02, 8.475e-01, -8.517e-01, 1.380e+00, -1.572e+00, 5.432e-02, 1.845e-02, -2.095e-01, -2.388e-01, -1.605e-02, 4.529e-02, -6.538e-02, 1.599e-01));
	r += mul(s1_6, M4(-1.360e-02, 2.802e-02, -8.755e-03, -3.283e-02, 9.486e-04, 1.088e-03, -2.960e-02, 8.038e-04, -2.657e-04, -1.501e-03, 1.524e-03, -6.052e-04, 1.800e-02, 1.963e-02, -5.245e-02, -1.100e-02));
	r += mul(s1_7, M4(3.053e-02, 5.155e-02, -5.315e-02, -1.304e-01, 1.177e-02, -4.187e-03, -4.464e-02, -3.903e-03, -2.310e-03, -2.484e-03, -1.257e-02, 9.371e-04, 1.155e-01, 2.382e-02, -2.046e-01, -1.097e-01));
	r += mul(s1_8, M4(-4.778e-05, 9.426e-04, -8.261e-03, -1.040e-02, 1.064e-02, 2.277e-02, -5.064e-02, -3.189e-02, 1.515e-03, 2.938e-03, 4.775e-03, -6.612e-03, -1.908e-02, 3.328e-02, -8.526e-02, 1.428e-01));
	r += V4(-4.473e-04, -4.126e-04, 3.403e-04, 3.176e-04);
	return tanh(r);
}
void Pass5(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 6
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-shuffle
//!STYLE PS
//!IN t0, INPUT
float4 Pass6(float2 pos) {
	float2 pt = float2(GetInputPt());
	static const float3x3 rgb2yuv = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081};
	static const float3x3 yuv2rgb = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float4 r = 0.0;
	float2 size = float2(GetInputSize());
	float2 f = frac(pos * size);
	float3 yuv = mul(rgb2yuv, INPUT.SampleLevel(SL, pos, 0).rgb);
	int2 i = int2(f * 2.0);
	r.r = t0.SampleLevel(SP, (float2(0.5, 0.5) - f) * pt + pos, 0)[2*i.y + i.x];
	r.r += yuv.r;
	r.a = 1.0;
	r.r = clamp(r, 0.0, 1.0);
	float3 px = mul(yuv2rgb, float3(r.r, yuv.yz));
	return float4(px, 1.0);
}
