// CuNNy 3x4C BILINEAR CHROMA NVL
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

//!MAGPIE EFFECT
//!VERSION 3
//!OUTPUT_WIDTH INPUT_WIDTH * 2
//!OUTPUT_HEIGHT INPUT_HEIGHT * 2

//!TEXTURE
Texture2D INPUT;


//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t1;

//!PASS 1
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-in
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) (dot(float3(3.432e-01, 6.552e-01, 1.483e-01), O(INPUT, float2(x, y)).rgb) + -1.053e+00)
float4 f0(float2 pt, float2 pos, min16float s0_0, min16float s0_1, min16float s0_2, min16float s0_3, min16float s0_4, min16float s0_5, min16float s0_6, min16float s0_7, min16float s0_8) {
	V4 r = 0.0;
	r += V4(-6.774e-02, 8.286e-03, -1.497e-02, 1.703e-02) * s0_0;
	r += V4(2.845e-01, 1.186e-03, 5.059e-01, -1.272e-02) * s0_1;
	r += V4(1.905e-01, 2.936e-03, -1.331e-02, 9.556e-03) * s0_2;
	r += V4(-1.416e-01, -3.440e-03, 2.287e-01, -3.405e-01) * s0_3;
	r += V4(-3.926e-01, 2.899e-02, -7.102e-01, 8.260e-01) * s0_4;
	r += V4(4.900e-02, 3.327e-03, -8.782e-02, -2.521e-02) * s0_5;
	r += V4(1.753e-01, 2.310e-02, -3.625e-02, -2.603e-02) * s0_6;
	r += V4(-6.178e-03, -5.706e-01, 3.384e-02, -4.700e-01) * s0_7;
	r += V4(-9.302e-02, 2.801e-02, 9.448e-02, 2.416e-02) * s0_8;
	r += V4(-4.457e-03, 4.282e-02, 1.386e-03, -3.844e-03);
	return r;
}
void Pass1(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float s0_0 = l0(-1.0, -1.0);
	min16float s0_1 = l0(0.0, -1.0);
	min16float s0_2 = l0(1.0, -1.0);
	min16float s0_3 = l0(-1.0, 0.0);
	min16float s0_4 = l0(0.0, 0.0);
	min16float s0_5 = l0(1.0, 0.0);
	min16float s0_6 = l0(-1.0, 1.0);
	min16float s0_7 = l0(0.0, 1.0);
	min16float s0_8 = l0(1.0, 1.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8);
}
//!PASS 2
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-conv1
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(1.297e-01, -4.976e-02, -1.333e-01, -3.592e-01, 1.011e-01, 6.331e-02, -1.811e-01, -3.343e-01, -5.784e-02, 1.616e-02, 8.809e-02, 1.749e-01, -3.308e-02, 1.881e-01, 1.533e-01, 1.926e-01));
	r += mul(s0_1, M4(1.149e-01, 9.866e-02, -7.640e-02, 4.100e-01, 1.082e-01, -1.313e-01, 1.831e-01, 2.728e-01, -1.610e-01, -3.820e-02, 7.808e-02, -1.341e-01, 7.299e-02, -1.254e+00, 6.195e-01, -1.807e-02));
	r += mul(s0_2, M4(-2.034e-02, 2.456e-02, 7.409e-02, 1.971e-02, -3.817e-02, -4.389e-02, -1.741e-02, 1.986e-02, -1.013e-01, -4.208e-02, -9.947e-02, -1.483e-01, -1.898e-01, 4.943e-02, 1.829e-01, -1.353e-01));
	r += mul(s0_3, M4(2.016e-01, -1.728e-01, 2.311e-02, -4.208e-01, -2.237e-01, 7.590e-02, 6.446e-02, -1.526e-01, -1.089e-01, -3.365e-01, 1.450e-01, -1.327e-01, 4.099e-02, -1.116e-01, 8.793e-02, 4.383e-03));
	r += mul(s0_4, M4(1.340e-01, 1.175e-01, -7.984e-02, -4.034e-01, -4.071e-02, 4.005e-02, -5.165e-02, -7.007e-02, 6.502e-03, -3.383e-01, 7.538e-02, 7.285e-01, 3.330e-01, 3.084e-01, -4.096e-01, -6.543e-01));
	r += mul(s0_5, M4(1.626e-01, -8.042e-02, 5.378e-03, -5.856e-02, 5.052e-02, -4.054e-03, 4.800e-02, -1.304e-03, -2.173e-01, -1.150e-01, -2.931e-01, 9.253e-02, 2.699e-01, -5.220e-02, 4.697e-01, 1.841e-01));
	r += mul(s0_6, M4(-1.189e-02, 6.714e-02, -2.422e-02, 6.448e-02, 1.148e-02, -2.578e-02, -6.287e-02, 1.685e-01, 5.923e-02, -2.686e-02, -3.223e-02, -3.729e-02, 3.123e-02, -4.651e-02, -6.874e-02, -2.881e-01));
	r += mul(s0_7, M4(4.339e-02, -2.670e-02, -2.840e-01, 8.065e-02, -2.825e-02, -5.931e-02, 1.519e-01, 8.071e-02, -7.282e-02, -1.455e-01, -1.185e-01, 5.551e-01, 1.538e-01, 1.046e-01, -2.473e-01, -6.086e-02));
	r += mul(s0_8, M4(-1.086e-01, 8.086e-02, -1.333e-01, -6.055e-02, 5.899e-02, 8.392e-02, -1.335e-01, 2.010e-02, -1.018e-01, -7.634e-02, -1.860e-01, -5.916e-03, -2.763e-02, -4.561e-02, 9.084e-02, -5.828e-02));
	r += mul(s1_0, M4(1.627e-02, -1.284e-01, -8.251e-02, -2.782e-01, 6.033e+00, -5.606e-01, -7.143e-01, -1.927e+00, 4.760e-02, 7.194e-02, 8.704e-02, 1.985e-01, -7.446e-02, 1.239e-01, 4.618e-02, 1.987e-01));
	r += mul(s1_1, M4(-1.478e-01, -5.035e-02, -2.264e-02, 4.207e-01, 9.720e+00, -2.643e-01, 6.774e+00, 8.942e+00, 5.290e-02, 1.139e-01, -8.607e-02, -1.567e-01, 2.442e-01, -3.726e-01, 1.538e-01, -1.464e-01));
	r += mul(s1_2, M4(-4.798e-02, 3.872e-03, 3.164e-02, -4.500e-02, 8.958e-01, 7.074e-01, 2.371e+00, 4.051e-01, 5.881e-02, 7.348e-02, 9.548e-03, -1.499e-01, 6.858e-02, 7.228e-02, 1.068e-01, -8.437e-02));
	r += mul(s1_3, M4(3.434e-02, -2.703e-01, 1.799e-02, -2.325e-01, -1.127e+00, 7.135e-01, 1.083e-01, -1.128e-02, 9.505e-02, -1.794e-01, 5.936e-02, -5.255e-02, -9.432e-02, -1.098e-01, 1.030e-01, -2.939e-02));
	r += mul(s1_4, M4(-1.909e-01, 3.042e-01, 2.427e-01, -7.909e-02, 1.769e-01, -5.148e-01, -5.759e-01, -3.236e-01, 1.229e+00, 3.583e-01, -1.989e-01, 7.249e-01, 1.611e-01, -2.214e-03, -5.098e-01, -2.626e-01));
	r += mul(s1_5, M4(1.167e-01, -6.019e-02, 4.515e-02, 2.812e-03, 4.828e-01, -2.283e-01, -2.169e-01, -6.637e-02, 3.030e-02, 2.230e-02, -1.315e-01, -5.398e-04, 1.130e-01, -1.462e-01, 3.721e-01, 2.134e-01));
	r += mul(s1_6, M4(3.960e-02, -3.209e-02, 1.125e-02, 7.136e-02, 1.802e-01, 3.400e-02, 5.890e-03, -2.979e-01, 6.651e-02, 1.048e-01, -1.709e-01, -4.262e-01, 3.697e-02, -2.980e-02, -7.044e-02, -1.528e-01));
	r += mul(s1_7, M4(-6.410e-02, -1.031e-01, -2.703e-01, -1.202e-01, -2.271e-01, 2.578e-01, 4.661e-01, -2.051e-01, -5.042e-02, 1.037e-01, -6.032e-01, 1.292e-01, 2.452e-02, 8.638e-02, -1.255e-01, -5.005e-02));
	r += mul(s1_8, M4(-1.249e-01, -7.127e-02, -2.627e-01, -2.168e-02, -3.832e-01, 2.793e-02, -1.562e-01, -1.583e-01, -1.159e-01, -5.402e-02, -1.381e-01, -5.554e-02, -1.844e-01, -6.533e-02, 1.178e-01, 4.371e-02));
	r += V4(1.616e-03, -3.737e-03, -2.031e-03, -7.253e-03);
	return r;
}
void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 3
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-conv2
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-2.911e-02, 1.273e-02, 5.604e-02, 2.681e-01, 3.063e-01, -6.774e-02, 3.688e-01, -2.329e-01, -4.653e-03, 5.503e-02, -1.847e-02, 1.776e-02, -5.570e-03, 7.968e-03, 2.716e-02, 9.553e-02));
	r += mul(s0_1, M4(6.114e-02, 1.221e-01, -1.057e-01, 1.761e-01, 2.348e-01, -4.257e-01, 4.406e-01, -9.081e-02, 5.283e-02, -1.087e-01, -1.183e-01, -9.418e-02, 1.393e-01, 2.902e-01, 1.010e-01, -1.064e-01));
	r += mul(s0_2, M4(8.632e-02, 1.270e-04, 4.381e-02, -3.733e-02, 2.454e-01, 1.091e-01, 3.564e-01, -2.167e-03, -1.288e-01, -2.387e-02, 3.113e-02, 8.406e-02, 8.207e-02, 1.257e-01, -2.047e-01, -1.750e-01));
	r += mul(s0_3, M4(4.104e-03, -7.033e-03, -5.747e-02, 1.561e-01, 3.284e-01, 1.268e-01, 3.043e-01, -3.246e-02, 5.421e-02, -1.353e-01, -2.657e-02, -1.398e-01, -2.560e-02, 8.896e-03, -6.004e-03, -4.900e-02));
	r += mul(s0_4, M4(4.966e-01, -4.928e-01, 4.284e-01, -7.445e-01, -8.457e-01, 5.601e-02, -6.264e-01, 1.525e+00, -8.231e-02, -6.660e-01, -3.304e-01, 1.074e+00, 2.293e-01, -1.279e-02, 1.304e-01, -7.410e-01));
	r += mul(s0_5, M4(-1.244e-01, 2.494e-02, 4.578e-01, 2.411e-01, 6.615e-01, 8.491e-02, 2.023e-01, -1.646e-01, -3.863e-02, -3.089e-02, -6.693e-02, -3.731e-02, -5.020e-01, -2.858e-01, 7.805e-01, -3.049e-01));
	r += mul(s0_6, M4(-1.519e-01, -1.291e-01, 9.621e-03, -2.172e-01, 1.177e+00, 2.427e-01, 2.242e-01, -2.860e-01, 8.226e-02, 2.864e-02, 2.651e-02, -3.926e-02, -3.944e-02, 1.802e-02, -1.320e-02, -1.477e-02));
	r += mul(s0_7, M4(6.356e-01, 1.185e-01, -8.090e-02, 4.903e-01, -1.667e-01, -4.997e-01, 5.074e-01, -7.183e-01, -7.435e-02, -1.186e-01, 1.803e-02, -6.532e-02, -1.322e-01, 2.364e-01, -4.283e-02, 6.508e-02));
	r += mul(s0_8, M4(9.673e-02, 5.890e-02, 1.913e-01, -1.120e-01, 5.645e-01, 2.502e-01, 5.267e-01, -2.203e-02, -6.709e-03, 3.745e-02, 1.526e-02, 7.651e-02, -1.757e-01, -1.579e-01, -2.638e-02, -1.676e-01));
	r += mul(s1_0, M4(6.551e-03, -3.517e-04, 2.870e-02, 1.549e-02, -2.678e-03, 4.209e-02, -1.195e-02, 1.065e-02, 1.449e-02, 2.395e-01, 5.798e-02, 3.750e-02, 6.113e-02, -2.231e-02, -2.650e-02, -8.108e-02));
	r += mul(s1_1, M4(-1.155e-01, -1.055e-01, -6.830e-02, 5.699e-02, -1.909e-02, -4.998e-02, -6.652e-02, 5.877e-02, 1.348e-01, 2.292e-01, 3.888e-02, -4.047e-01, 6.535e-02, -1.223e-01, -1.043e-01, 1.238e-01));
	r += mul(s1_2, M4(2.442e-02, -2.513e-02, 1.018e-01, 1.125e-02, -3.277e-02, -1.630e-03, 4.315e-02, 1.425e-02, 5.001e-03, 5.191e-02, 6.731e-02, -1.395e-01, 3.743e-02, 3.411e-02, -1.999e-01, 4.143e-02));
	r += mul(s1_3, M4(3.901e-02, -3.943e-02, -2.275e-02, 9.391e-02, -5.748e-02, -4.382e-02, -4.317e-03, 1.130e-01, 1.794e-01, 3.055e-01, 4.900e-02, -5.176e-01, -7.576e-03, -6.713e-03, -5.540e-02, 2.615e-02));
	r += mul(s1_4, M4(-9.945e-02, -2.294e-01, -7.935e-02, 3.453e-01, -2.657e-01, -6.437e-02, -3.863e-02, 2.172e-01, -8.798e-02, -1.540e-01, -1.155e+00, -8.389e-01, -8.035e-02, -3.551e-01, 2.752e-02, 1.027e-01));
	r += mul(s1_5, M4(6.366e-02, 4.249e-02, 2.039e-01, -9.260e-02, -4.100e-02, 6.022e-02, 1.054e-01, -5.103e-03, 7.933e-02, 2.591e-03, -1.304e-01, -4.306e-02, -7.880e-02, 1.906e-01, 1.684e-01, -7.148e-02));
	r += mul(s1_6, M4(-2.343e-02, -1.382e-01, 5.595e-03, -7.678e-02, -1.460e-02, -1.672e-01, 5.651e-02, 5.890e-02, 2.482e-01, 4.704e-02, 3.821e-02, -6.314e-02, -4.638e-02, -7.251e-02, 5.566e-03, 9.142e-02));
	r += mul(s1_7, M4(8.746e-02, 1.960e-01, 6.092e-02, -8.040e-02, 2.803e-01, -1.772e-02, -1.087e-01, -4.200e-02, -4.775e-01, -4.107e-01, 1.070e-01, -2.385e-01, -1.706e-01, -1.137e-01, -2.443e-02, 1.499e-01));
	r += mul(s1_8, M4(-1.664e-01, -1.149e-01, -4.085e-02, -2.360e-01, 4.569e-02, 1.836e-01, -1.453e-03, -1.655e-01, 3.737e-02, -6.102e-03, 4.650e-02, 1.909e-01, 1.263e-01, 2.092e-01, -3.625e-02, -4.364e-02));
	r += V4(2.301e-03, 3.213e-03, 1.680e-03, -5.936e-03);
	return r;
}
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 4
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-conv3
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-1.172e-01, -2.199e-02, 5.459e-02, -3.678e-02, -6.210e-02, -1.005e-02, 5.253e-02, -3.051e-02, 4.327e-03, 3.428e-02, -2.225e-02, 4.935e-02, -1.189e-01, -2.057e-02, 9.237e-02, 3.612e-02));
	r += mul(s0_1, M4(-2.994e-02, -1.238e-01, 1.404e-01, 1.535e-01, 4.514e-02, -1.980e-02, -1.323e-01, -5.038e-02, 8.052e-02, -3.621e-02, 2.250e-02, -3.634e-02, 9.891e-02, -2.570e-01, 4.893e-01, 2.955e-01));
	r += mul(s0_2, M4(8.372e-02, 3.026e-03, -2.989e-02, 1.110e-02, 6.132e-02, 2.771e-02, 2.222e-01, 1.677e-02, -4.145e-02, 1.605e-02, -1.457e-02, -3.244e-02, -3.123e-02, 3.660e-02, 5.648e-02, -9.615e-02));
	r += mul(s0_3, M4(-1.736e-02, -6.809e-02, 5.095e-02, -1.570e-02, -5.995e-02, 4.502e-02, 4.917e-02, -7.155e-02, 2.147e-01, 2.182e-02, -1.870e-01, 2.662e-02, -5.237e-02, 1.352e-02, -2.256e-02, -1.299e-01));
	r += mul(s0_4, M4(-1.249e-01, 1.371e-01, 2.568e-01, 2.034e-01, -1.558e-01, -1.956e-01, -3.167e-02, -2.513e-01, -2.611e-01, -1.008e-02, 2.306e-01, -2.207e-01, -6.887e-01, -6.973e-01, 7.759e-01, 8.379e-01));
	r += mul(s0_5, M4(-8.004e-02, -1.018e-01, -1.519e-01, 2.731e-02, 3.565e-01, 2.034e-01, 1.571e-01, -1.224e-01, -4.947e-02, -7.203e-02, 6.144e-02, 5.173e-02, 2.569e-02, 9.430e-03, 1.185e-02, -6.470e-02));
	r += mul(s0_6, M4(-4.905e-02, -2.263e-02, 5.501e-02, 6.323e-02, -8.136e-03, 7.792e-03, -1.994e-02, -4.924e-02, 1.233e-01, 6.165e-02, -6.722e-02, 3.263e-02, -2.821e-02, -1.291e-02, -1.331e-02, -4.748e-03));
	r += mul(s0_7, M4(1.891e-02, -5.324e-02, -2.822e-02, -6.457e-02, -7.357e-02, 6.966e-02, 5.849e-03, 5.600e-02, -7.881e-02, -1.362e-01, -6.384e-03, 8.358e-02, -9.134e-02, 2.163e-02, 7.828e-02, 8.074e-02));
	r += mul(s0_8, M4(-8.082e-02, 3.358e-02, 4.802e-02, -4.866e-02, 2.533e-01, 3.556e-02, -1.348e-01, -2.689e-02, 9.000e-03, -1.533e-02, 7.592e-02, 5.871e-02, -5.066e-02, 9.529e-03, 7.220e-03, -6.310e-03));
	r += mul(s1_0, M4(-4.785e-02, 2.616e-02, -2.386e-02, 4.502e-02, -2.994e-01, -1.266e-02, 2.339e-01, 1.843e-01, 2.686e-01, 2.691e-02, -1.712e-01, -1.052e-01, -2.043e-02, -2.254e-02, 2.319e-02, -8.057e-03));
	r += mul(s1_1, M4(3.214e-01, -2.405e-01, 9.896e-01, 4.575e-01, 2.105e-01, -2.895e-01, 4.013e-01, 2.166e-01, 1.182e-01, 4.809e-03, -2.740e-01, -3.928e-02, -3.822e-03, -2.591e-02, 1.166e-01, -2.559e-02));
	r += mul(s1_2, M4(-1.045e-01, 1.625e-01, -5.181e-01, -1.810e-01, 1.500e-02, 2.774e-02, -1.389e-03, -8.022e-02, 9.306e-02, -8.791e-02, 2.549e-01, 1.732e-01, 1.198e-01, -8.673e-03, -6.325e-03, -1.957e-02));
	r += mul(s1_3, M4(2.706e-01, -1.360e-02, -2.132e-01, 1.054e-01, -1.935e-02, 4.381e-04, 4.272e-02, 4.113e-02, 1.426e-01, -9.934e-02, 2.021e-01, 7.939e-01, -3.499e-02, 9.447e-03, 6.768e-03, -9.353e-02));
	r += mul(s1_4, M4(3.697e-01, 7.410e-01, 3.176e-01, 3.784e-01, -3.959e-01, -8.578e-02, -4.330e-02, -4.678e-01, 9.980e-01, -1.207e+00, 2.030e+00, 1.161e+00, -1.078e-01, 1.795e-02, 8.791e-02, 1.077e-01));
	r += mul(s1_5, M4(-1.879e-01, -2.864e-01, 9.888e-02, 7.794e-02, -3.214e-02, 7.344e-02, -7.104e-02, -1.499e-01, 1.724e-01, 8.419e-02, -1.564e-01, 6.716e-02, -3.854e-02, 4.254e-03, 2.671e-02, -6.867e-02));
	r += mul(s1_6, M4(1.910e-01, -6.621e-03, -1.724e-01, -5.653e-02, -1.963e-02, -6.277e-02, -9.100e-03, -3.611e-02, -1.067e-01, -1.983e-01, 5.123e-02, 5.905e-01, 1.780e-02, 3.483e-03, -3.760e-02, -1.891e-02));
	r += mul(s1_7, M4(9.362e-02, -1.479e-02, -6.874e-03, 7.555e-02, -1.092e-01, 1.547e-01, 3.261e-02, -5.727e-02, 3.307e-01, 1.529e-01, -4.653e-02, 4.245e-01, 9.862e-02, 2.071e-03, -3.772e-02, -1.470e-02));
	r += mul(s1_8, M4(2.878e-02, 9.735e-03, 2.427e-02, 2.427e-02, -6.569e-02, 9.249e-03, -9.788e-03, -1.974e-02, 9.668e-02, -5.508e-02, 5.542e-03, -6.081e-02, -5.649e-03, 3.107e-02, -1.647e-02, 9.996e-03));
	r += V4(-5.844e-03, -2.024e-03, 3.094e-03, 6.005e-04);
	return r;
}
void Pass4(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 5
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-out
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(6.636e-02, -1.472e-01, 6.552e-02, -1.933e-02, -5.884e-02, 1.473e-02, 7.440e-02, 3.952e-02, -6.884e-02, -4.700e-02, 5.586e-02, 1.898e-02, -6.763e-02, -7.337e-03, 4.185e-02, 6.150e-02));
	r += mul(s0_1, M4(-1.587e-01, -2.956e-01, 2.783e-01, -1.881e-02, 4.773e-02, -5.450e-02, 9.544e-02, 3.045e-02, -4.117e-02, -8.232e-02, 3.601e-02, 4.895e-02, 1.445e-01, -1.755e-02, 1.150e-01, 6.236e-02));
	r += mul(s0_2, M4(-6.665e-02, 2.290e-01, -8.715e-02, -8.553e-04, 9.930e-02, 5.791e-02, 6.189e-02, 9.604e-02, 2.555e-03, 3.100e-03, 1.319e-02, 1.377e-02, -1.374e-03, 6.860e-02, 5.065e-03, 4.968e-02));
	r += mul(s0_3, M4(1.757e-01, -4.016e-02, 2.647e-01, -1.163e-01, 3.982e-01, -4.334e-02, -2.161e-01, -9.206e-02, 4.755e-01, 8.609e-02, 6.531e-02, -1.049e-01, -5.094e-02, 5.410e-02, -2.211e-01, 1.047e-01));
	r += mul(s0_4, M4(-3.213e-01, 8.926e-01, -9.120e-01, 2.834e-01, -1.028e+00, 5.792e-01, -6.258e-01, 5.182e-01, 1.450e-01, 5.120e-01, -1.042e-01, 6.063e-02, -3.396e-01, -3.826e-01, -1.877e-01, -6.128e-01));
	r += mul(s0_5, M4(2.519e-01, -2.446e-01, 7.439e-02, 2.232e-01, 8.987e-02, 2.017e-02, 9.416e-02, -3.174e-01, -3.166e-03, -2.949e-02, 6.507e-03, -5.635e-02, 7.059e-03, -8.562e-02, -1.570e-02, 4.336e-02));
	r += mul(s0_6, M4(-2.962e-02, 1.001e-02, 6.338e-02, 1.884e-02, 1.550e-02, -7.204e-02, 1.144e-01, -1.102e-01, -4.382e-02, 1.318e-02, 9.642e-02, -1.018e-02, -8.549e-03, -1.192e-03, 2.866e-02, 1.792e-02));
	r += mul(s0_7, M4(1.306e-02, -6.687e-02, 1.425e-01, 2.427e-01, 1.023e-01, 9.645e-02, -2.068e-01, -1.052e-01, -5.573e-03, -5.227e-02, 2.163e-01, 2.646e-01, 2.405e-02, -5.645e-03, -1.022e-01, -3.111e-02));
	r += mul(s0_8, M4(5.607e-02, -6.886e-02, 2.096e-01, -2.261e-01, 3.094e-03, -4.268e-02, 2.838e-02, 1.066e-01, 6.429e-03, -7.136e-03, 3.223e-03, 4.096e-02, 6.384e-04, 1.829e-02, 8.463e-04, -7.397e-02));
	r += mul(s1_0, M4(-6.666e-02, -1.801e-02, 3.100e-02, 1.295e-02, -1.850e-02, 1.001e-03, 2.850e-02, 2.391e-02, -2.060e-02, -2.326e-02, 1.088e-02, -1.246e-03, -2.137e-03, 9.673e-03, -3.667e-03, 3.868e-03));
	r += mul(s1_1, M4(-7.194e-02, -9.351e-02, 2.035e-02, 3.223e-02, 1.217e-02, -1.978e-01, 2.343e-01, 9.051e-02, -3.577e-02, -2.377e-03, 3.692e-03, 2.696e-02, 1.111e-01, 5.659e-02, 9.189e-02, -1.317e-02));
	r += mul(s1_2, M4(5.739e-03, -7.537e-03, 1.551e-02, 2.455e-02, 2.565e-02, 1.195e-01, 2.567e-02, 1.286e-01, 5.866e-02, -7.252e-02, 4.590e-02, -8.585e-04, 7.887e-03, 7.886e-02, 2.455e-02, 8.240e-02));
	r += mul(s1_3, M4(3.193e-01, 1.113e-01, -8.179e-02, 1.026e-03, 5.657e-02, 3.749e-02, 8.480e-02, 5.138e-02, 3.666e-01, -6.272e-03, -7.788e-02, -5.396e-02, -1.207e-01, -1.819e-02, 1.757e-02, 2.874e-02));
	r += mul(s1_4, M4(6.421e-02, 1.666e-01, -4.071e-02, -1.910e-01, 4.579e-02, 7.634e-02, -4.387e-01, -3.407e-01, -1.165e-01, 9.063e-01, -2.163e-01, 2.744e-01, -5.957e-01, -5.254e-01, -5.106e-01, -1.028e-01));
	r += mul(s1_5, M4(-1.664e-03, 7.739e-02, -9.324e-03, 2.167e-02, -1.200e-02, -7.105e-02, 1.632e-02, -1.270e-01, 5.600e-02, -7.956e-02, 8.571e-02, -1.649e-01, 2.150e-02, 3.767e-02, 1.785e-02, -9.558e-02));
	r += mul(s1_6, M4(-4.114e-02, 7.728e-03, 1.353e-01, 1.806e-02, -2.353e-02, -5.242e-03, -1.702e-02, -8.005e-03, -9.792e-02, -7.496e-02, 3.525e-01, -2.497e-02, 5.467e-02, 4.665e-02, -4.540e-02, 1.169e-02));
	r += mul(s1_7, M4(7.769e-03, -1.224e-02, 2.489e-02, 1.170e-01, -3.693e-02, -5.680e-02, 8.353e-02, 3.198e-02, 4.577e-02, -8.712e-02, 4.112e-02, 3.506e-01, 2.274e-02, 3.582e-02, -9.733e-02, -1.155e-01));
	r += mul(s1_8, M4(-7.182e-03, -1.174e-02, -4.321e-03, 2.233e-02, 8.037e-03, -2.864e-02, 2.184e-02, 2.472e-02, 5.098e-03, -4.358e-02, 4.944e-02, 3.734e-02, -1.923e-02, 6.990e-03, 4.411e-03, 5.807e-03));
	r += V4(-7.415e-04, -8.165e-04, -1.125e-03, -1.219e-03);
	return tanh(r);
}
void Pass5(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 6
//!DESC CuNNy-3x4C-BILINEAR-CHROMA-NVL-shuffle
//!STYLE PS
//!IN t0, INPUT
float4 Pass6(float2 pos) {
	float2 pt = float2(GetInputPt());
	static const float3x3 rgb2yuv = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081};
	static const float3x3 yuv2rgb = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float4 r = 0.0;
	float2 size = float2(GetInputSize());
	float2 f = frac(pos * size);
	float3 yuv = mul(rgb2yuv, INPUT.SampleLevel(SL, pos, 0).rgb);
	int2 i = int2(f * 2.0);
	r.r = t0.SampleLevel(SP, (float2(0.5, 0.5) - f) * pt + pos, 0)[2*i.y + i.x];
	r.r += yuv.r;
	r.a = 1.0;
	r.r = clamp(r, 0.0, 1.0);
	float3 px = mul(yuv2rgb, float3(r.r, yuv.yz));
	return float4(px, 1.0);
}
