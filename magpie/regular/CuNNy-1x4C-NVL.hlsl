// CuNNy 1x4C BILINEAR CHROMA NVL
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

//!MAGPIE EFFECT
//!VERSION 3
//!OUTPUT_WIDTH INPUT_WIDTH * 2
//!OUTPUT_HEIGHT INPUT_HEIGHT * 2

//!TEXTURE
Texture2D INPUT;


//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t1;

//!PASS 1
//!DESC CuNNy-1x4C-BILINEAR-CHROMA-NVL-in
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) (dot(float3(1.2728482484817505, 2.406472682952881, 0.534406304359436), O(INPUT, float2(x, y)).rgb) + -2.224195957183838)
float4 f0(float2 pt, float2 pos, min16float s0_0, min16float s0_1, min16float s0_2, min16float s0_3, min16float s0_4, min16float s0_5, min16float s0_6, min16float s0_7, min16float s0_8) {
	V4 r = 0.0;
	r += V4(5.356e-03, -9.484e-02, -2.562e-02, 1.140e-01) * s0_0;
	r += V4(9.104e-03, 4.067e-02, -4.669e-03, -9.214e-02) * s0_1;
	r += V4(-9.962e-03, 1.469e-01, 2.631e-02, -1.233e-01) * s0_2;
	r += V4(-2.567e-03, 4.407e-02, 5.017e-02, -4.325e-02) * s0_3;
	r += V4(1.719e-03, 1.519e-01, 2.666e-01, 2.064e-01) * s0_4;
	r += V4(2.547e-01, -2.021e-01, -3.157e-01, -1.967e-02) * s0_5;
	r += V4(-4.171e-03, 7.933e-02, -1.630e-02, -1.228e-01) * s0_6;
	r += V4(-4.281e-03, -9.358e-02, -1.196e-02, -2.431e-02) * s0_7;
	r += V4(-2.495e-01, -7.279e-02, 3.084e-02, 1.071e-01) * s0_8;
	r += V4(-2.590e-03, 1.081e-03, 2.782e-03, -6.213e-04);
	return r;
}
void Pass1(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float s0_0 = l0(-1.0, -1.0);
	min16float s0_1 = l0(0.0, -1.0);
	min16float s0_2 = l0(1.0, -1.0);
	min16float s0_3 = l0(-1.0, 0.0);
	min16float s0_4 = l0(0.0, 0.0);
	min16float s0_5 = l0(1.0, 0.0);
	min16float s0_6 = l0(-1.0, 1.0);
	min16float s0_7 = l0(0.0, 1.0);
	min16float s0_8 = l0(1.0, 1.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8);
}
//!PASS 2
//!DESC CuNNy-1x4C-BILINEAR-CHROMA-NVL-conv1
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-3.564e-01, 7.102e-02, 4.747e-01, -9.406e-01, 9.240e-02, -6.775e-02, -5.718e-02, 3.533e-02, -5.579e-02, 5.630e-02, 9.886e-02, 1.073e-02, -4.726e-02, 1.783e-02, 3.213e-02, 5.238e-02));
	r += mul(s0_1, M4(3.347e-01, -1.071e-01, 1.332e-02, -3.006e-02, 5.749e-02, 2.153e-02, 1.255e-01, -8.037e-02, 1.858e-02, -1.218e-01, -1.519e-01, -5.014e-02, 5.213e-02, 9.057e-02, 1.403e-01, 2.005e-02));
	r += mul(s0_2, M4(-5.365e-03, 4.820e-02, -3.105e-02, 1.319e-02, 7.546e-02, -1.244e-01, 2.681e-02, -8.008e-02, -2.508e-02, 1.381e-01, -1.160e-01, 9.548e-02, 3.472e-02, 6.300e-02, 3.762e-02, -4.068e-02));
	r += mul(s0_3, M4(7.452e-02, -1.791e-01, -2.185e-01, -2.062e-02, -3.034e-02, 4.196e-02, 3.584e-01, 1.111e-01, -3.106e-02, -6.562e-02, 1.149e-01, -1.500e-01, -6.214e-02, 5.310e-02, 5.447e-02, 1.461e-01));
	r += mul(s0_4, M4(-1.542e-01, 3.829e-01, -7.376e-02, -6.603e-03, 3.271e-01, -4.631e-01, -1.968e-01, -1.748e-01, -8.613e-02, -2.684e-02, 1.190e-01, 1.038e-01, 1.142e-01, 3.191e-02, -4.111e-01, -3.636e-02));
	r += mul(s0_5, M4(9.892e-02, -1.655e-01, -1.753e-01, -1.727e-02, -1.659e-02, -1.386e-01, -8.705e-02, 2.941e-02, 1.773e-01, 3.205e-02, -2.538e-02, -1.088e-01, -3.319e-01, 3.473e-01, 3.378e-02, -9.775e-03));
	r += mul(s0_6, M4(3.235e-02, -6.182e-02, -4.210e-02, 8.160e-03, -2.156e-02, 2.114e-02, -1.120e-01, -8.686e-03, -2.633e-02, -5.977e-02, 4.700e-02, 6.470e-02, 1.041e-02, 3.165e-03, -1.253e-01, -1.238e-02));
	r += mul(s0_7, M4(-1.586e-02, 8.066e-02, -1.360e-02, 9.888e-02, -6.897e-02, 1.400e-01, 1.696e-01, -1.867e-02, 1.802e-01, -1.644e-01, -1.533e-01, 7.535e-02, -1.509e-01, 2.705e-01, 1.928e-01, -1.406e-02));
	r += mul(s0_8, M4(3.277e-02, -4.504e-02, 5.705e-03, -1.883e-02, -7.225e-03, -1.165e-01, 5.676e-02, -1.742e-01, -1.228e-01, 3.505e-01, 1.284e-01, 6.760e-02, -2.114e-03, -1.294e-01, 1.499e-02, -1.199e-01));
	r += mul(s1_0, M4(-1.347e-01, 9.433e-02, 7.164e-02, 3.578e-02, 6.778e-02, -2.426e-02, -2.692e-02, -9.388e-02, -7.781e-02, 7.124e-03, -6.665e-02, -7.352e-02, -6.240e-02, 5.477e-02, 6.534e-03, -3.046e-02));
	r += mul(s1_1, M4(-2.549e-01, 1.816e-01, -9.974e-03, -1.479e-02, -2.691e-02, -1.653e-01, -1.694e-01, -3.596e-02, -1.184e-01, 2.134e-01, 1.888e-01, 9.839e-02, -7.246e-02, 1.421e-02, -1.266e-01, 9.900e-03));
	r += mul(s1_2, M4(-1.458e-03, 1.496e-02, 2.816e-02, -3.922e-02, -6.468e-02, -2.176e-02, -3.944e-02, 5.240e-02, 1.145e-01, -9.617e-02, 8.765e-02, -1.051e-01, -1.099e-01, 1.046e-01, -1.208e-02, 9.914e-02));
	r += mul(s1_3, M4(-1.214e-01, -2.745e-02, 5.285e-04, 7.153e-02, 9.596e-02, -1.240e-01, -1.105e-01, -2.493e-01, -8.716e-02, 1.040e-01, 1.590e-01, -2.689e-01, 2.393e-02, 6.611e-03, -2.511e-01, -8.731e-02));
	r += mul(s1_4, M4(3.196e-01, -3.604e-01, 1.161e-03, 1.344e-02, -1.401e-01, 1.205e-02, 4.486e-01, -7.665e-02, -4.373e-01, 2.179e-02, 1.763e-01, 1.711e-02, -2.534e-01, 4.059e-01, 2.548e-01, -4.193e-02));
	r += mul(s1_5, M4(-8.407e-02, 2.088e-01, 1.492e-01, 3.208e-02, 1.899e-01, -2.261e-01, 1.149e-01, -5.500e-02, 2.045e-01, 1.616e-01, 1.996e-02, 3.748e-02, -7.735e-02, 1.055e-01, -3.073e-02, 2.544e-02));
	r += mul(s1_6, M4(3.490e-02, -8.127e-02, -1.413e-01, -1.835e-02, 8.721e-04, 1.648e-02, 1.841e-01, 1.274e-02, 7.246e-02, -5.220e-02, -1.265e-01, -8.419e-02, -6.247e-03, 7.340e-03, 7.619e-02, 2.868e-03));
	r += mul(s1_7, M4(-7.690e-02, 1.218e-01, -7.223e-02, -6.741e-02, 1.062e-01, -2.529e-01, -7.185e-02, -4.391e-02, -1.149e-01, -6.858e-02, -4.229e-01, -3.406e-02, 6.348e-02, -7.012e-02, -1.116e-01, 3.261e-02));
	r += mul(s1_8, M4(-4.509e-02, 6.873e-02, -2.369e-02, 8.703e-03, 9.186e-02, -3.137e-02, -3.965e-03, 7.573e-02, 2.923e-02, 2.615e-02, -2.056e-01, -3.845e-02, -7.641e-02, 1.758e-01, 9.730e-03, 1.150e-01));
	r += V4(-2.709e-04, 3.436e-04, -9.686e-04, -1.918e-03);
	return r;
}
void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = max(-s0_0, 0.0);
	V4 s1_1 = max(-s0_1, 0.0);
	V4 s1_2 = max(-s0_2, 0.0);
	V4 s1_3 = max(-s0_3, 0.0);
	V4 s1_4 = max(-s0_4, 0.0);
	V4 s1_5 = max(-s0_5, 0.0);
	V4 s1_6 = max(-s0_6, 0.0);
	V4 s1_7 = max(-s0_7, 0.0);
	V4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 3
//!DESC CuNNy-1x4C-BILINEAR-CHROMA-NVL-out
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-1.880e-01, 1.003e-02, 1.678e-01, 1.518e-01, -1.023e-01, -5.084e-02, 1.801e-01, 5.180e-02, 1.277e-02, 6.206e-03, -8.563e-03, -3.619e-04, -6.700e-01, 6.898e-01, -1.321e-01, 9.126e-02));
	r += mul(s0_1, M4(-8.423e-02, -1.156e-01, 9.936e-02, 1.496e-01, -1.503e-02, 3.107e-03, 2.508e-02, 1.394e-01, 1.802e-01, 4.695e-02, -9.430e-02, -9.650e-02, 9.943e-02, 3.629e-01, -1.999e-01, -5.589e-02));
	r += mul(s0_2, M4(1.573e-02, 9.264e-03, 9.776e-03, 4.791e-03, -9.574e-03, -2.739e-02, -2.552e-03, -1.587e-02, 4.651e-02, 1.063e-01, -6.677e-02, -1.105e-01, 1.038e-01, -8.008e-02, -9.693e-02, 3.382e-02));
	r += mul(s0_3, M4(4.307e-01, -3.489e-01, -1.733e-01, -4.911e-01, -4.286e-02, 2.605e-02, -4.575e-01, -5.982e-03, -5.602e-03, -2.991e-02, -2.777e-02, 1.370e-02, -5.299e-01, 4.527e-01, -1.287e+00, 9.385e-01));
	r += mul(s0_4, M4(-2.085e-01, -1.133e-01, -4.111e-01, -4.736e-01, -1.987e-02, -9.888e-02, -1.440e-01, -4.198e-01, -5.254e-01, -6.152e-01, 1.314e-01, -1.552e-01, 1.309e+00, -2.568e+00, 1.742e+00, -7.078e-01));
	r += mul(s0_5, M4(1.422e-02, 5.432e-02, 3.763e-03, 3.319e-02, 2.785e-02, 3.650e-02, 5.193e-03, 6.127e-03, 1.850e-01, 1.991e-01, 2.725e-01, 4.326e-01, -1.474e-01, 4.550e-01, 1.029e-01, 2.139e-01));
	r += mul(s0_6, M4(7.171e-02, 2.383e-03, 2.949e-01, 5.111e-03, 1.794e-02, 1.153e-02, 9.942e-02, -1.924e-02, -1.236e-02, -6.664e-03, 2.309e-02, -1.137e-02, 3.740e-02, -5.857e-02, 1.213e-01, -1.658e-02));
	r += mul(s0_7, M4(1.733e-01, 2.809e-01, 2.803e-01, 4.478e-01, 1.265e-01, 1.450e-01, 2.241e-01, 3.117e-01, 2.999e-02, -4.114e-02, -1.206e-01, -1.548e-01, -1.531e-01, 1.883e-01, 5.643e-02, -1.186e+00));
	r += mul(s0_8, M4(6.166e-03, 1.519e-02, 3.162e-02, 5.118e-02, 1.143e-02, 3.235e-02, 2.186e-02, 4.900e-02, 6.930e-02, 1.227e-01, 6.672e-02, 1.019e-01, -1.634e-01, 2.500e-01, -1.339e-01, 3.723e-01));
	r += mul(s1_0, M4(2.133e-02, -2.853e-02, -6.372e-02, -4.036e-02, -2.686e-01, 1.209e-01, 2.967e-03, 4.326e-02, 1.382e-02, -4.526e-03, -4.059e-02, -1.834e-02, -2.045e-02, 1.187e-02, 2.514e-02, 2.733e-02));
	r += mul(s1_1, M4(3.965e-02, 6.964e-02, -6.318e-02, -3.991e-02, 9.930e-02, -2.901e-01, 2.830e-02, -1.514e-02, 7.104e-02, 3.150e-01, -2.254e-01, -2.262e-01, -4.327e-02, -5.491e-02, 1.581e-02, 1.711e-02));
	r += mul(s1_2, M4(1.715e-02, 6.928e-03, -9.467e-03, -2.695e-02, -3.739e-03, 4.959e-02, -6.751e-03, 6.173e-02, 1.713e-02, -1.038e-01, 8.177e-02, 6.477e-02, -2.496e-02, -2.308e-02, 2.236e-02, 3.109e-02));
	r += mul(s1_3, M4(2.398e-01, -2.985e-02, 3.802e-01, -5.931e-02, 1.693e-01, 4.641e-01, -4.217e-01, 2.529e-01, 4.199e-02, 1.504e-03, 6.956e-02, -6.640e-02, 1.353e-02, -2.575e-02, -5.028e-02, -2.508e-02));
	r += mul(s1_4, M4(1.499e-02, 4.036e-01, 2.046e-01, 6.035e-01, 1.644e-01, 2.744e-01, 3.018e-01, -3.087e-02, 4.280e-02, 1.883e-01, 2.802e-01, 5.430e-01, 9.738e-02, 1.646e-01, -4.702e-02, 2.460e-02));
	r += mul(s1_5, M4(1.285e-03, -6.569e-02, 7.924e-03, -5.085e-02, -3.772e-02, -7.543e-03, -7.391e-03, 1.696e-02, -1.582e-01, -2.528e-01, -2.378e-01, -3.779e-01, -9.448e-02, -1.008e-01, -1.147e-01, -1.825e-01));
	r += mul(s1_6, M4(-8.276e-02, -5.730e-02, -1.333e-01, -3.548e-02, -9.891e-02, -4.039e-02, -6.518e-02, 3.834e-02, 5.310e-03, -1.878e-03, 1.388e-02, -3.137e-02, 3.763e-03, 4.603e-03, 2.729e-02, -5.487e-03));
	r += mul(s1_7, M4(-2.143e-01, -2.588e-01, -3.009e-01, -3.662e-01, -1.362e-01, -2.066e-01, -1.955e-01, -2.310e-01, 3.795e-02, 5.405e-02, 4.674e-02, 1.469e-01, 3.429e-02, 5.796e-02, 1.366e-01, 1.538e-01));
	r += mul(s1_8, M4(-1.133e-03, -5.354e-02, -1.836e-02, -6.211e-02, -1.184e-02, -2.398e-02, -3.699e-02, -3.905e-02, -4.431e-02, -5.508e-02, -9.936e-02, -1.538e-01, -5.769e-03, -4.655e-02, -4.328e-03, 3.875e-03));
	r += V4(2.716e-05, -1.498e-04, 6.790e-05, -1.365e-04);
	return tanh(r);
}
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = max(-s0_0, 0.0);
	V4 s1_1 = max(-s0_1, 0.0);
	V4 s1_2 = max(-s0_2, 0.0);
	V4 s1_3 = max(-s0_3, 0.0);
	V4 s1_4 = max(-s0_4, 0.0);
	V4 s1_5 = max(-s0_5, 0.0);
	V4 s1_6 = max(-s0_6, 0.0);
	V4 s1_7 = max(-s0_7, 0.0);
	V4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 4
//!DESC CuNNy-1x4C-BILINEAR-CHROMA-NVL-shuffle
//!STYLE PS
//!IN t0, INPUT
float4 Pass4(float2 pos) {
	float2 pt = float2(GetInputPt());
	const static float3x3 rgb2yuv = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081};
	const static float3x3 yuv2rgb = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float4 r = 0.0;
	float2 size = float2(GetInputSize());
	float2 f = frac(pos * size);
	float3 yuv = mul(rgb2yuv, INPUT.SampleLevel(SL, pos, 0).rgb);
	int2 i = int2(f * 2.0);
	r.r = t0.SampleLevel(SP, (float2(0.5, 0.5) - f) * pt + pos, 0)[2*i.y + i.x];
	r.r += yuv.r;
	r.a = 1.0;
	r.r = clamp(r, 0.0, 1.0);
	float3 px = mul(yuv2rgb, float3(r.r, yuv.yz));
	return float4(px, 1.0);
}
