// CuNNy 4x4C BILINEAR CHROMA NVL
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

//!MAGPIE EFFECT
//!VERSION 3
//!OUTPUT_WIDTH INPUT_WIDTH * 2
//!OUTPUT_HEIGHT INPUT_HEIGHT * 2

//!TEXTURE
Texture2D INPUT;


//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t1;

//!PASS 1
//!DESC CuNNy-4x4C-BILINEAR-CHROMA-NVL-in
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) (dot(float3(4.700e-01, 8.981e-01, 2.008e-01), O(INPUT, float2(x, y)).rgb) + -1.006e+00)
float4 f0(float2 pt, float2 pos, min16float s0_0, min16float s0_1, min16float s0_2, min16float s0_3, min16float s0_4, min16float s0_5, min16float s0_6, min16float s0_7, min16float s0_8) {
	V4 r = 0.0;
	r += V4(-9.303e-02, 5.264e-01, -1.070e-01, -1.300e-03) * s0_0;
	r += V4(-1.211e-01, -2.282e-02, -1.440e-01, -7.969e-03) * s0_1;
	r += V4(-4.664e-02, -3.235e-02, 1.222e-01, 1.692e-02) * s0_2;
	r += V4(-2.607e-01, -4.379e-01, 3.953e-01, -3.359e-02) * s0_3;
	r += V4(7.716e-01, -6.867e-02, -4.716e-01, 2.608e-02) * s0_4;
	r += V4(-2.614e-02, 3.963e-02, -1.203e-01, -1.332e-02) * s0_5;
	r += V4(-4.397e-02, -4.626e-02, 1.867e-01, -5.681e-01) * s0_6;
	r += V4(-9.936e-02, 5.078e-02, 1.353e-01, 5.762e-01) * s0_7;
	r += V4(8.255e-03, -9.735e-03, 2.911e-03, 3.984e-03) * s0_8;
	r += V4(7.604e-02, -1.195e-04, -1.128e-03, -4.021e-04);
	return r;
}
void Pass1(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float s0_0 = l0(-1.0, -1.0);
	min16float s0_1 = l0(0.0, -1.0);
	min16float s0_2 = l0(1.0, -1.0);
	min16float s0_3 = l0(-1.0, 0.0);
	min16float s0_4 = l0(0.0, 0.0);
	min16float s0_5 = l0(1.0, 0.0);
	min16float s0_6 = l0(-1.0, 1.0);
	min16float s0_7 = l0(0.0, 1.0);
	min16float s0_8 = l0(1.0, 1.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8);
}
//!PASS 2
//!DESC CuNNy-4x4C-BILINEAR-CHROMA-NVL-conv1
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-4.339e-02, 1.768e-02, -1.324e-01, 2.398e-01, -3.045e-02, 2.345e-02, -3.516e-02, 3.454e-02, -1.513e-02, 2.068e-01, -1.347e-02, -4.555e-02, 4.385e-01, 2.008e-01, -4.086e-01, 8.087e-02));
	r += mul(s0_1, M4(2.048e-02, -1.337e-01, 8.259e-02, -1.785e-01, 7.424e-03, 5.433e-02, 1.095e-02, 1.004e-02, -3.086e-02, 2.959e-01, 1.582e-01, -1.459e-02, -1.110e-01, 2.873e-01, -1.238e-01, 8.332e-02));
	r += mul(s0_2, M4(1.889e-02, 1.857e-01, 1.318e-02, -1.395e-02, -6.457e-03, 7.012e-02, 5.221e-02, -1.839e-02, -5.764e-02, 2.202e-01, -4.681e-03, 8.820e-02, -2.199e-01, -1.617e-01, -1.062e-01, 4.919e-02));
	r += mul(s0_3, M4(-6.973e-01, -1.243e-01, -7.477e-02, 2.861e-02, -7.878e-02, -1.142e-01, -6.969e-02, 2.085e-01, -2.092e-01, -3.825e-03, -1.412e-01, 2.761e-01, 1.280e-01, 1.187e-01, -3.222e-01, 2.156e-01));
	r += mul(s0_4, M4(8.460e-01, 5.059e-01, 1.703e-01, -5.371e-01, 3.076e-01, 9.393e-02, -2.488e-01, -3.088e-01, -1.298e-01, 8.204e-02, 4.594e-01, -6.762e-02, 3.983e-01, 9.283e-02, -3.562e-01, 2.378e-01));
	r += mul(s0_5, M4(1.235e-01, -3.215e-01, -5.407e-02, 4.672e-02, -1.362e-01, 1.276e-01, -1.081e-01, 1.599e-01, -4.860e-02, 6.245e-02, 2.046e-01, -1.047e-01, -3.073e-02, -3.038e-01, 2.351e-02, -1.480e-01));
	r += mul(s0_6, M4(1.976e-01, -9.699e-02, 2.741e-03, -2.631e-01, -1.022e-02, -6.355e-02, -3.429e-01, 1.275e-02, 1.476e-02, -8.567e-02, -1.372e-01, -1.264e-01, 6.305e-02, -4.117e-03, -1.404e-01, 2.671e-02));
	r += mul(s0_7, M4(-4.251e-01, -1.722e-01, -1.347e-01, 7.731e-01, 2.227e-01, 3.443e-02, -3.576e-02, -2.518e-01, -1.094e-01, -5.164e-02, 5.567e-01, 1.536e-01, -1.012e-01, 2.394e-02, -4.072e-02, 4.784e-02));
	r += mul(s0_8, M4(-1.965e-02, 1.610e-01, 1.099e-01, -6.847e-02, -5.103e-02, 2.977e-01, -1.159e-01, -3.236e-01, 3.451e-02, 1.659e-01, 3.932e-01, -2.167e-01, -1.394e-02, -2.578e-02, 1.116e-01, -1.863e-02));
	r += mul(s1_0, M4(-9.274e-02, -1.540e-03, 7.923e-02, 1.643e-01, 2.449e-02, 4.802e-02, -7.538e-02, 4.143e-02, 6.685e-02, 1.925e-01, -2.959e-01, 5.142e-02, 5.832e-02, 3.952e-03, -3.235e-02, -7.366e-03));
	r += mul(s1_1, M4(9.207e-03, -1.953e-01, 1.001e-01, -1.753e-01, -2.003e-02, 7.297e-02, -1.233e-02, 1.857e-02, 1.423e-02, 1.830e-01, -1.115e-01, 5.730e-02, 3.709e-02, 1.296e-01, 6.036e-01, -2.074e-01));
	r += mul(s1_2, M4(-1.320e-02, 9.011e-02, -4.550e-02, -5.711e-04, 7.358e-03, 1.361e-01, 6.660e-02, -2.455e-02, 2.267e-02, 1.945e-01, 2.416e-03, 3.452e-02, -4.145e-02, -6.173e-02, 2.863e-01, -2.336e-01));
	r += mul(s1_3, M4(-3.542e-01, 8.421e-02, -2.442e-01, 9.776e-02, -1.162e-01, -1.391e-01, -9.203e-02, 2.096e-01, 2.183e-01, 5.313e-02, -6.538e-01, 3.721e-01, -1.908e-01, 3.841e-02, 5.333e-02, 7.864e-02));
	r += mul(s1_4, M4(4.618e-01, 5.237e-01, 1.309e-01, -2.893e-01, 7.430e-02, -3.217e-02, -5.607e-02, -4.067e-01, -5.858e-02, 9.304e-02, -3.413e-01, 2.657e-01, 4.049e-01, -2.157e-02, -4.158e-01, 5.440e-01));
	r += mul(s1_5, M4(1.561e-02, -4.424e-01, -1.097e-01, 5.034e-02, 6.913e-02, -4.813e-03, 2.439e-02, -5.331e-02, -7.829e-02, -3.626e-02, -2.234e-01, 3.353e-02, -1.391e-02, -1.890e-01, 4.304e-02, 8.123e-02));
	r += mul(s1_6, M4(3.831e-01, -4.114e-02, -8.387e-02, -2.450e-01, -5.501e-02, -6.329e-02, -2.682e-01, -1.214e-02, 7.690e-02, -7.807e-02, -5.714e-01, 8.982e-03, 1.377e-02, -5.841e-02, -1.665e-01, -2.139e-03));
	r += mul(s1_7, M4(-5.139e-01, -1.471e-01, 1.623e-01, 5.605e-01, -3.550e-01, -1.225e-01, 8.165e-01, -3.375e-01, -2.093e-01, -8.179e-02, 9.697e-03, 2.982e-01, -1.499e-02, -1.898e-02, -2.255e-01, 5.698e-02));
	r += mul(s1_8, M4(2.380e-02, 6.988e-02, 1.522e-01, -1.211e-01, -4.502e-02, 1.870e-01, 1.077e-01, 5.450e-02, 4.604e-02, 1.303e-01, 7.719e-02, -1.439e-01, 7.735e-03, 3.146e-02, 1.760e-01, 4.579e-02));
	r += V4(-4.041e-04, -1.893e-03, 1.794e-03, -4.156e-03);
	return r;
}
void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 3
//!DESC CuNNy-4x4C-BILINEAR-CHROMA-NVL-conv2
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(4.765e-02, -5.246e-02, 7.286e-02, -5.531e-02, -5.307e-02, 5.465e-02, -1.086e-01, 7.689e-02, -6.634e-03, -7.653e-02, 9.383e-02, -6.249e-02, -1.294e-01, -2.291e-01, 3.553e-02, 2.111e-02));
	r += mul(s0_1, M4(-5.775e-02, 9.697e-02, 1.580e-02, 2.775e-02, 1.893e-01, 8.160e-02, -7.591e-02, 1.815e-02, -1.666e-01, -1.642e-01, -2.826e-02, -1.061e-01, -7.265e-01, -2.347e-01, 2.535e-02, 1.616e-01));
	r += mul(s0_2, M4(1.396e-02, 2.510e-01, -2.433e-02, 1.236e-01, 5.041e-03, -2.153e-03, 2.836e-03, -5.532e-02, -9.809e-02, -3.027e-02, 4.405e-02, 1.562e-01, -3.807e-01, 7.017e-02, -9.106e-02, 6.764e-02));
	r += mul(s0_3, M4(-2.653e-02, -2.100e-01, 1.229e-01, 2.349e-01, 6.709e-02, 3.028e-01, -1.613e-01, -3.632e-02, -4.796e-02, -2.217e-02, 2.468e-02, 1.106e-01, 6.243e-02, -4.485e-02, 1.219e-01, 5.949e-01));
	r += mul(s0_4, M4(2.454e-01, -3.087e-01, -7.171e-02, 1.746e-01, -5.284e-01, -1.104e-01, 4.389e-01, -1.313e-01, 1.060e-01, 4.254e-03, -3.770e-01, -4.398e-01, 4.105e-01, 1.157e-01, 3.974e-01, -2.466e-01));
	r += mul(s0_5, M4(3.047e-01, 2.992e-02, 7.050e-01, 2.840e-01, 1.223e-02, 6.557e-02, -3.042e-02, -2.138e-02, -5.940e-02, -5.799e-02, -4.743e-02, -3.533e-02, 1.960e-02, 8.426e-02, 9.491e-02, -2.287e-02));
	r += mul(s0_6, M4(-1.291e-02, 9.524e-03, 9.107e-03, -8.135e-02, 2.462e-02, 8.201e-02, -7.315e-02, 5.317e-02, 2.096e-03, 1.726e-02, 9.685e-03, 2.648e-02, -4.622e-02, 1.481e-02, 1.087e-01, -2.560e-02));
	r += mul(s0_7, M4(-8.142e-02, 1.017e-01, -1.178e-01, 2.007e-02, 1.076e-01, 2.111e-02, -1.515e-01, -2.666e-01, -1.869e-02, -4.133e-02, -3.879e-03, 1.382e-01, -3.700e-02, -7.154e-03, 8.378e-02, 1.784e-01));
	r += mul(s0_8, M4(8.606e-02, -4.221e-02, 1.028e-01, 2.192e-02, -4.041e-02, 1.652e-02, -2.168e-03, 1.280e-01, 9.583e-03, -9.929e-03, 5.214e-03, -1.124e-01, 3.892e-02, 5.911e-03, 1.202e-02, 1.766e-01));
	r += mul(s1_0, M4(4.744e-03, 5.472e-02, 7.983e-02, -1.692e-01, 1.556e-02, 7.787e-02, -9.101e-02, -2.854e-02, 3.586e-03, -4.596e-02, 1.057e-01, 1.683e-01, -4.118e-03, -3.247e-01, 9.944e-02, -1.670e-01));
	r += mul(s1_1, M4(4.474e-02, -9.545e-02, 9.622e-02, -1.812e-02, 3.243e-01, 2.405e-01, 8.394e-02, 3.812e-02, -3.604e-01, 1.175e-01, 1.289e-01, 7.207e-01, -4.896e-01, -2.909e-01, 2.180e-01, -5.280e-02));
	r += mul(s1_2, M4(-6.300e-02, 2.020e-02, 1.239e-02, 5.066e-02, -4.127e-02, -1.879e-02, -6.544e-02, -1.719e-02, -1.321e-01, 1.144e-01, -1.394e-01, 2.706e-01, -3.033e-01, 7.882e-02, -1.743e-01, 8.682e-02));
	r += mul(s1_3, M4(-6.332e-02, 3.382e-01, 1.361e-01, -5.055e-03, -2.688e-02, 8.540e-01, -3.868e-01, -1.760e-01, -5.601e-02, -2.673e-01, 1.226e-01, 7.949e-01, -1.017e-01, -1.371e-01, 4.827e-02, 3.004e-01));
	r += mul(s1_4, M4(2.210e-01, -3.945e-01, -5.248e-01, 1.003e-01, 1.185e-01, 1.212e-03, 9.709e-01, 4.915e-01, -2.421e-02, -4.593e-02, -7.466e-02, 2.423e-01, -1.513e-02, -6.863e-02, -4.758e-01, -3.413e-01));
	r += mul(s1_5, M4(-9.280e-03, -1.019e-01, 2.015e-01, 7.259e-03, 4.989e-02, 4.258e-02, 7.462e-02, 4.065e-02, 3.994e-02, -2.017e-02, 1.624e-01, 3.369e-01, 1.297e-03, 1.417e-02, 1.015e-01, 7.025e-02));
	r += mul(s1_6, M4(4.872e-02, 5.774e-02, 1.181e-02, 1.966e-02, 1.813e-02, 1.753e-01, -3.158e-01, 1.071e-01, -1.327e-02, -2.938e-02, 4.004e-02, 5.725e-02, -2.376e-02, 4.285e-03, -9.109e-03, 6.264e-02));
	r += mul(s1_7, M4(-1.682e-02, 5.409e-02, -9.200e-02, -2.437e-01, 2.182e-01, -5.031e-02, 2.375e-02, -1.362e-01, -8.227e-02, 7.633e-03, 3.265e-02, 3.268e-01, 8.416e-03, 9.297e-03, -1.194e-01, -6.935e-02));
	r += mul(s1_8, M4(1.280e-02, -7.388e-03, -2.144e-01, -2.692e-01, 2.766e-02, -5.339e-02, -2.210e-02, 6.709e-03, -6.079e-02, 3.413e-03, 8.129e-02, 4.467e-01, 2.482e-02, -1.630e-02, 2.837e-02, 1.763e-02));
	r += V4(-1.766e-03, -5.161e-03, -6.883e-03, -7.612e-03);
	return r;
}
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 4
//!DESC CuNNy-4x4C-BILINEAR-CHROMA-NVL-conv3
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-3.578e-02, 3.801e-02, -3.432e-02, 3.008e-02, -8.135e-03, -3.049e-02, -1.338e-02, -9.682e-03, -2.166e-02, 7.664e-02, -1.686e-03, -1.288e-02, -6.370e-02, 6.079e-03, 2.926e-02, -2.568e-02));
	r += mul(s0_1, M4(-5.706e-02, 7.516e-02, -8.900e-02, 2.666e-02, -2.322e-02, -1.782e-01, -4.678e-02, -3.164e-02, -1.760e-01, 7.081e-02, -4.541e-01, 9.626e-02, 1.689e-01, 3.348e-01, -1.058e-01, -1.314e-01));
	r += mul(s0_2, M4(-4.849e-02, 3.710e-02, 6.082e-02, 1.634e-02, 1.655e-01, 2.232e-02, -1.067e-01, -1.824e-02, -6.664e-02, 6.355e-02, -6.718e-02, 2.104e-02, 8.552e-02, -1.350e-02, -1.264e-01, -9.853e-02));
	r += mul(s0_3, M4(-2.246e-02, 2.792e-01, -1.391e-01, 4.834e-02, 3.867e-02, 2.098e-01, -2.333e-02, 3.045e-02, -5.443e-02, -8.209e-02, 8.089e-02, -1.543e-02, -3.582e-02, -2.340e-02, 1.231e-01, -2.874e-02));
	r += mul(s0_4, M4(-6.812e-01, -2.110e-01, 2.842e-01, 8.370e-02, -3.970e-01, -1.103e-01, 1.608e-01, 3.361e-01, 3.073e-01, -2.225e-01, -9.958e-02, -2.160e-01, -3.049e-01, -6.376e-01, -1.396e-01, -1.504e-01));
	r += mul(s0_5, M4(-8.072e-02, 6.803e-03, 7.300e-02, 9.201e-02, 6.419e-01, -1.742e-01, -2.757e-01, 2.822e-01, 2.452e-01, -4.265e-02, -1.032e-01, 1.408e-01, 2.114e-01, 6.705e-02, -1.685e-01, 7.123e-01));
	r += mul(s0_6, M4(-8.741e-02, -6.238e-01, 2.815e-02, -2.789e-02, 1.739e-02, -1.233e-01, 7.351e-03, -6.063e-02, -6.778e-03, 1.465e-01, 3.686e-02, -2.240e-02, 2.898e-02, 1.072e-01, 2.715e-02, -2.751e-02));
	r += mul(s0_7, M4(-3.034e-02, 4.069e-01, -4.970e-02, -2.301e-01, 1.565e-01, 3.206e-01, 1.450e-01, -6.544e-02, -5.968e-04, 1.558e-01, 6.487e-02, 9.190e-02, 6.053e-03, 5.786e-01, 1.636e-01, -1.636e-02));
	r += mul(s0_8, M4(-5.895e-02, -1.431e-01, -3.496e-02, 2.275e-01, 4.093e-02, 1.331e-01, 5.722e-02, -2.456e-01, 1.106e-02, 8.230e-02, 2.877e-02, -2.280e-02, -2.618e-02, 1.249e-01, 5.144e-03, 1.434e-02));
	r += mul(s1_0, M4(1.347e-02, 4.921e-03, 1.961e-02, 7.619e-03, 1.946e-05, 4.879e-02, 7.971e-04, 8.335e-03, -8.645e-03, 3.038e-02, 5.953e-03, 2.040e-02, 1.388e-02, -7.047e-03, 2.337e-02, 8.844e-04));
	r += mul(s1_1, M4(-2.791e-02, -1.895e-02, -1.767e-03, -1.777e-03, -5.162e-02, -4.354e-02, 9.874e-02, -8.927e-03, -5.042e-02, -1.038e-01, -2.064e-01, 1.989e-02, -3.127e-02, 5.411e-02, -5.783e-02, 4.702e-03));
	r += mul(s1_2, M4(2.164e-02, 6.787e-03, 6.066e-02, -3.418e-02, 1.863e-02, 1.853e-02, -7.228e-02, 4.968e-02, -3.977e-02, -7.370e-03, -6.622e-02, -4.441e-02, 2.417e-02, -3.309e-02, -6.665e-02, 1.946e-02));
	r += mul(s1_3, M4(1.203e-01, 1.341e-01, -8.128e-02, 5.964e-02, 2.154e-03, 4.886e-02, -3.284e-02, 2.708e-03, -1.468e-01, -1.665e-01, 2.062e-02, 2.856e-02, 4.627e-02, 4.556e-02, -2.354e-02, 3.793e-03));
	r += mul(s1_4, M4(-2.202e-01, -1.995e-01, 7.018e-01, -7.207e-02, -6.989e-02, 1.307e-01, 2.152e-01, 9.811e-03, 2.615e-01, -4.770e-01, -2.178e-01, -1.616e-01, -1.889e-01, -5.250e-02, 1.560e-01, 7.008e-02));
	r += mul(s1_5, M4(-4.351e-02, 5.172e-02, 1.088e-01, 2.435e-02, 2.822e-01, -1.087e-01, -9.863e-02, 1.041e-01, 3.214e-01, -1.566e-01, -1.076e-01, -5.859e-03, 8.258e-02, 4.237e-02, 4.194e-02, -3.378e-02));
	r += mul(s1_6, M4(-9.601e-02, -1.059e+00, 8.569e-03, 1.923e-02, 2.580e-02, -1.509e-01, 4.995e-02, -4.096e-02, 1.408e-02, -1.350e-01, 8.564e-02, 2.405e-02, 9.980e-03, -1.023e-01, 2.541e-02, -3.296e-02));
	r += mul(s1_7, M4(1.024e-01, 1.331e-02, -3.334e-01, -8.024e-01, 1.371e-01, 6.297e-01, 6.796e-03, -1.629e-01, 9.409e-02, 4.762e-02, 2.646e-01, -1.304e-01, -2.795e-02, 6.410e-02, 1.222e-02, -1.243e-01));
	r += mul(s1_8, M4(-7.107e-02, -1.487e-01, -1.576e-01, 2.510e-01, -1.655e-01, 9.233e-02, 8.439e-02, 3.861e-02, 1.005e-01, 1.174e-01, 4.442e-02, -2.719e-01, -1.399e-02, 1.713e-02, -7.891e-03, 1.446e-02));
	r += V4(3.890e-03, 6.116e-03, 8.528e-04, 3.012e-04);
	return r;
}
void Pass4(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 5
//!DESC CuNNy-4x4C-BILINEAR-CHROMA-NVL-conv4
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(1.528e-01, 5.285e-02, -5.398e-03, 2.353e-02, -1.449e-02, 3.610e-03, -5.378e-03, 3.770e-03, -2.505e-01, -2.975e-02, -9.168e-02, -6.115e-02, -1.988e-01, 9.780e-03, 9.236e-02, -8.751e-02));
	r += mul(s0_1, M4(2.468e-02, -1.526e-02, -1.079e-01, 1.162e-02, 3.017e-01, 6.749e-03, 8.839e-02, -7.715e-03, -7.325e-01, 5.328e-02, 1.361e-01, 3.467e-02, 5.593e-02, -1.227e-01, -9.795e-02, 1.105e-01));
	r += mul(s0_2, M4(-1.642e-02, -1.046e-02, -3.011e-02, -8.084e-04, 3.451e-03, 3.506e-04, -6.666e-02, 1.070e-02, 4.471e-02, -9.729e-02, -3.205e-03, 8.610e-02, 8.217e-03, -1.751e-03, 2.008e-02, -5.561e-03));
	r += mul(s0_3, M4(-2.684e-01, -5.684e-01, -3.408e-01, -4.098e-01, -7.472e-04, 2.338e-02, 5.155e-03, 1.288e-02, -6.302e-02, 2.795e-01, 2.525e-02, -2.960e-01, -2.481e-02, 1.960e-01, 2.679e-02, -2.261e-01));
	r += mul(s0_4, M4(-2.418e-01, -2.754e-01, 2.363e-01, 7.007e-02, -1.597e-01, -4.072e-01, 4.273e-02, 2.264e-01, -4.250e-01, 1.512e-01, 4.053e-01, -2.032e-01, -2.233e-01, -5.982e-02, -7.343e-02, 1.517e-01));
	r += mul(s0_5, M4(-4.549e-02, -4.580e-02, -5.392e-02, 4.411e-02, -5.147e-02, 1.229e-02, 7.882e-02, 1.199e-02, -3.672e-02, 7.918e-02, -1.347e-01, 1.199e-01, -9.183e-03, -9.277e-03, 5.438e-02, -1.837e-02));
	r += mul(s0_6, M4(1.219e-01, 3.916e-01, -1.096e-01, -3.792e-02, -2.309e-02, -2.656e-03, 4.078e-03, -1.594e-02, 9.312e-03, -1.743e-01, -1.318e-02, -2.632e-02, 1.846e-01, -3.799e-01, 2.150e-02, -1.239e-01));
	r += mul(s0_7, M4(1.594e-01, -2.749e-02, -2.105e-02, -7.251e-02, -1.057e-01, 3.076e-01, -1.216e-02, 8.668e-02, 1.073e-01, -6.265e-01, 7.006e-02, -1.418e-01, -3.130e-02, -6.465e-02, 1.755e-02, 7.690e-02));
	r += mul(s0_8, M4(3.658e-02, 7.319e-03, 1.059e-02, 2.709e-02, -6.141e-03, 6.518e-02, -1.540e-02, -2.313e-02, 2.930e-02, -4.818e-02, -4.490e-03, 4.209e-02, -3.652e-02, -4.255e-02, 6.874e-03, 8.637e-03));
	r += mul(s1_0, M4(4.003e-02, 1.553e-02, 8.824e-02, -4.860e-02, -1.458e-02, -3.942e-02, -9.961e-03, 7.321e-02, -9.849e-03, 4.138e-03, 3.871e-03, 1.031e-02, 2.549e-01, -1.237e-01, -7.279e-02, 3.442e-01));
	r += mul(s1_1, M4(-8.181e-02, -8.081e-02, -6.168e-02, 5.401e-02, 3.368e-01, 2.549e-01, 1.730e-01, -8.519e-01, 8.887e-02, -7.039e-03, 1.374e-02, 6.187e-03, 2.628e-01, -1.821e-01, -3.015e+00, 1.150e-01));
	r += mul(s1_2, M4(-2.913e-02, -1.925e-02, 9.381e-03, 1.961e-02, 5.705e-02, -1.743e-01, 3.145e-01, 1.420e-01, -4.699e-02, -9.863e-03, -1.701e-02, 2.167e-03, 1.982e-01, -1.110e-01, 1.103e-03, -1.774e-02));
	r += mul(s1_3, M4(-1.871e-01, -1.387e-01, -2.722e-02, -5.099e-01, 5.431e-03, -6.713e-03, 2.628e-02, 2.670e-02, 7.148e-02, 3.194e-02, 2.524e-02, -1.548e-01, -2.278e-01, 7.682e-01, -8.018e-03, -8.473e-01));
	r += mul(s1_4, M4(2.251e-02, -1.281e-01, -2.486e-01, -6.250e-02, 3.366e-02, -9.749e-01, 3.129e-03, 2.423e-01, -5.544e-01, -2.329e-01, 5.510e-02, 1.097e-01, 2.917e-01, 8.788e-01, 1.320e-02, 2.662e-01));
	r += mul(s1_5, M4(-1.117e-02, 8.386e-03, 3.089e-02, 2.854e-02, -4.132e-03, 1.110e-01, 7.211e-02, -7.300e-02, -6.532e-02, -3.674e-02, -1.219e-01, 4.724e-02, -3.503e-03, 5.960e-02, 1.239e-01, -1.094e-01));
	r += mul(s1_6, M4(3.152e-02, 4.820e-02, -4.079e-02, -1.072e-01, -5.238e-02, 1.589e-02, 8.005e-03, -1.613e-02, 5.303e-02, -1.032e-01, 1.598e-02, 5.941e-03, 1.169e-01, -6.360e-01, -6.879e-03, -2.281e-01));
	r += mul(s1_7, M4(5.208e-02, 1.739e-01, -2.350e-02, -5.334e-02, -8.446e-02, 3.463e-01, 1.225e-02, 9.839e-02, 3.319e-01, -4.577e-01, 9.691e-03, -1.003e-01, 2.363e-02, -2.011e-01, 8.882e-02, 7.837e-02));
	r += mul(s1_8, M4(-1.515e-02, 1.662e-02, -3.921e-03, -2.553e-03, -3.992e-02, -2.247e-02, -1.346e-02, -8.071e-03, 6.005e-02, -6.876e-02, -1.742e-02, 5.370e-02, -5.986e-02, -1.266e-01, 3.133e-02, -2.325e-02));
	r += V4(-6.393e-04, 3.673e-03, 1.364e-03, 1.096e-03);
	return r;
}
void Pass5(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 6
//!DESC CuNNy-4x4C-BILINEAR-CHROMA-NVL-out
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-6.800e-03, -1.529e-02, 5.415e-03, -6.390e-03, 8.960e-02, -1.203e-02, 1.031e-02, -1.741e-02, -4.992e-02, -3.731e-02, 1.969e-03, 2.219e-02, -3.672e-03, -5.141e-03, -2.389e-03, -4.645e-03));
	r += mul(s0_1, M4(1.260e-02, 1.837e-02, -2.222e-02, 1.102e-02, 1.131e-01, 3.091e-01, 6.711e-02, 8.934e-02, -4.235e-02, -1.184e-01, 1.853e-02, 4.316e-03, -3.495e-03, 4.205e-02, -1.056e-03, 8.478e-03));
	r += mul(s0_2, M4(2.377e-03, -7.988e-03, 9.290e-03, -1.206e-02, -1.323e-01, -1.772e-01, 2.521e-02, 2.052e-02, 5.255e-03, 3.964e-02, -1.032e-02, -2.534e-02, -8.389e-02, -1.218e-01, -2.264e-02, -3.284e-02));
	r += mul(s0_3, M4(1.229e-01, -7.395e-02, 7.118e-02, -4.730e-02, 7.935e-02, 5.704e-04, 9.327e-02, -1.613e-02, 1.714e-01, 4.339e-02, 6.369e-02, -1.900e-02, -4.174e-02, -1.050e-02, -7.619e-03, 1.885e-03));
	r += mul(s0_4, M4(6.491e-02, 3.605e-01, -1.252e-01, 6.116e-02, 1.779e-02, 2.157e-01, -1.065e-01, 3.682e-01, -7.208e-02, 4.589e-01, -2.844e-01, -5.288e-02, -3.199e-02, -1.013e-01, 3.382e-02, 8.456e-03));
	r += mul(s0_5, M4(1.748e-02, -5.974e-02, 2.273e-02, -5.459e-02, -7.250e-02, -2.454e-01, -1.899e-01, -5.684e-01, 2.503e-02, -1.938e-01, 4.065e-02, -2.697e-02, -1.214e-01, -1.431e-01, -1.677e-01, -1.382e-01));
	r += mul(s0_6, M4(-4.032e-02, 1.076e-01, 3.213e-02, -3.694e-02, 6.359e-03, -2.017e-03, 1.827e-02, -7.025e-03, 2.003e-02, -2.865e-02, 5.677e-02, 9.129e-03, -2.680e-02, 7.487e-03, -3.410e-02, 6.020e-03));
	r += mul(s0_7, M4(-2.709e-01, -5.515e-01, 6.323e-01, 6.774e-01, -9.679e-03, 1.734e-02, 2.336e-02, 6.721e-02, 7.790e-02, 8.911e-02, 8.576e-02, 2.368e-01, 7.689e-02, -8.535e-03, 9.887e-02, -1.199e-01));
	r += mul(s0_8, M4(-1.793e-02, 5.295e-02, 6.916e-03, 5.072e-02, 6.623e-04, -4.201e-02, -1.543e-02, -4.844e-02, -2.216e-02, -7.300e-02, -3.699e-02, -1.806e-01, 9.320e-02, 1.848e-01, 2.087e-01, 3.823e-01));
	r += mul(s1_0, M4(1.234e-02, 7.339e-03, 2.661e-02, -1.027e-02, 9.231e-02, -3.177e-02, 3.026e-02, -1.876e-02, -1.144e-02, -8.384e-03, 5.320e-02, -1.171e-02, -1.428e-01, 6.570e-02, -4.096e-02, 6.172e-02));
	r += mul(s1_1, M4(-1.804e-01, -6.860e-02, -3.659e-02, 3.251e-02, -3.940e-01, 3.513e-01, 3.428e-01, 2.231e-01, -1.597e-01, 1.260e-01, 6.281e-03, -1.333e-01, 1.008e+00, -4.984e-01, 1.246e-02, -2.663e-01));
	r += mul(s1_2, M4(-8.421e-03, -8.483e-02, -9.699e-03, -4.358e-02, -7.390e-02, -5.585e-01, -4.102e-02, 2.037e-01, 1.388e-02, -1.898e-01, 4.042e-02, -1.040e-02, -3.105e-02, -3.119e-01, 3.168e-02, -1.582e-02));
	r += mul(s1_3, M4(3.822e-03, -2.493e-02, 5.058e-02, -1.037e-02, 7.983e-02, -1.023e-02, 6.927e-02, -3.261e-02, 3.096e-01, -6.372e-02, 1.184e-02, -1.052e-01, -1.080e-01, 2.393e-02, -1.006e-01, 6.665e-02));
	r += mul(s1_4, M4(3.651e-01, 2.959e-01, -8.011e-02, 1.825e-01, 7.826e-02, 2.062e-01, -5.041e-02, 3.117e-01, -1.243e+00, 1.110e+00, -1.277e+00, 1.019e+00, 7.443e-02, -4.212e-01, 9.791e-01, -3.996e-01));
	r += mul(s1_5, M4(-9.413e-02, -3.328e-02, 9.351e-03, -1.821e-01, -7.054e-02, -1.727e-01, -1.372e-01, -4.452e-01, 1.448e-01, -4.315e-02, 9.935e-02, -2.108e-01, -9.718e-02, 4.109e-02, -2.408e-01, -7.176e-01));
	r += mul(s1_6, M4(-5.542e-04, 1.406e-02, 8.116e-03, 2.364e-03, 1.052e-02, 2.400e-03, 2.489e-02, 2.419e-03, -1.996e-03, -5.578e-02, 1.170e-01, -8.900e-02, 3.708e-02, -2.574e-03, -2.767e-02, -5.404e-03));
	r += mul(s1_7, M4(-7.411e-04, -2.510e-02, 9.398e-02, 2.277e-02, 8.516e-03, 3.479e-02, -9.956e-03, 7.093e-02, 1.568e-01, 3.790e-02, -4.513e-02, 3.271e-01, 7.801e-02, 3.724e-02, 4.498e-02, -1.003e-01));
	r += mul(s1_8, M4(-1.187e-03, 7.638e-03, 1.956e-02, 9.839e-02, -1.015e-02, -3.193e-02, -3.042e-02, -9.497e-02, -4.891e-02, -8.402e-02, -1.568e-02, -1.433e-01, 4.627e-02, 1.470e-01, 8.912e-02, 3.909e-01));
	r += V4(1.748e-04, 7.329e-05, 1.787e-04, 1.830e-04);
	return tanh(r);
}
void Pass6(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = -max(-s0_0, 0.0);
	V4 s1_1 = -max(-s0_1, 0.0);
	V4 s1_2 = -max(-s0_2, 0.0);
	V4 s1_3 = -max(-s0_3, 0.0);
	V4 s1_4 = -max(-s0_4, 0.0);
	V4 s1_5 = -max(-s0_5, 0.0);
	V4 s1_6 = -max(-s0_6, 0.0);
	V4 s1_7 = -max(-s0_7, 0.0);
	V4 s1_8 = -max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 7
//!DESC CuNNy-4x4C-BILINEAR-CHROMA-NVL-shuffle
//!STYLE PS
//!IN t1, INPUT
float4 Pass7(float2 pos) {
	float2 pt = float2(GetInputPt());
	static const float3x3 rgb2yuv = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081};
	static const float3x3 yuv2rgb = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float4 r = 0.0;
	float2 size = float2(GetInputSize());
	float2 f = frac(pos * size);
	float3 yuv = mul(rgb2yuv, INPUT.SampleLevel(SL, pos, 0).rgb);
	int2 i = int2(f * 2.0);
	r.r = t1.SampleLevel(SP, (float2(0.5, 0.5) - f) * pt + pos, 0)[2*i.y + i.x];
	r.r += yuv.r;
	r.a = 1.0;
	r.r = clamp(r, 0.0, 1.0);
	float3 px = mul(yuv2rgb, float3(r.r, yuv.yz));
	return float4(px, 1.0);
}
