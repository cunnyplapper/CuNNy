// CuNNy 4x4C BILINEAR CHROMA NVL
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

//!MAGPIE EFFECT
//!VERSION 3
//!OUTPUT_WIDTH INPUT_WIDTH * 2
//!OUTPUT_HEIGHT INPUT_HEIGHT * 2

//!TEXTURE
Texture2D INPUT;


//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t1;

//!PASS 1
//!DESC CuNNy-4x4C-BILINEAR-CHROMA-NVL-in
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) (dot(float3(0.3308510184288025, 0.6325868964195251, 0.13373680412769318), O(INPUT, float2(x, y)).rgb) + -0.907126247882843)
float4 f0(float2 pt, float2 pos, min16float s0_0, min16float s0_1, min16float s0_2, min16float s0_3, min16float s0_4, min16float s0_5, min16float s0_6, min16float s0_7, min16float s0_8) {
	V4 r = 0.0;
	r += V4(-3.325e-02, 2.779e-02, -6.752e-02, -5.332e-01) * s0_0;
	r += V4(6.032e-01, -2.032e-02, -1.580e-01, 3.188e-02) * s0_1;
	r += V4(-1.784e-02, -4.187e-02, 1.018e-01, 9.011e-03) * s0_2;
	r += V4(-6.035e-01, -4.642e-02, 4.072e-01, 2.432e-02) * s0_3;
	r += V4(3.278e-02, -8.105e-01, -2.378e-01, -7.213e-03) * s0_4;
	r += V4(2.533e-02, 3.975e-01, -2.627e-01, 4.583e-03) * s0_5;
	r += V4(2.604e-02, 1.547e-02, -2.029e-01, 1.975e-03) * s0_6;
	r += V4(-2.743e-02, 4.603e-01, 4.846e-01, 3.345e-03) * s0_7;
	r += V4(-3.804e-03, 1.589e-02, -6.285e-02, -3.901e-04) * s0_8;
	r += V4(-1.449e-03, 5.266e-04, -1.866e-03, 8.480e-02);
	return r;
}
void Pass1(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float s0_0 = l0(-1.0, -1.0);
	min16float s0_1 = l0(0.0, -1.0);
	min16float s0_2 = l0(1.0, -1.0);
	min16float s0_3 = l0(-1.0, 0.0);
	min16float s0_4 = l0(0.0, 0.0);
	min16float s0_5 = l0(1.0, 0.0);
	min16float s0_6 = l0(-1.0, 1.0);
	min16float s0_7 = l0(0.0, 1.0);
	min16float s0_8 = l0(1.0, 1.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8);
}
//!PASS 2
//!DESC CuNNy-4x4C-BILINEAR-CHROMA-NVL-conv1
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-6.228e-02, 4.094e-02, -2.241e-01, 5.623e-02, 1.880e-01, -3.369e-01, -3.731e-02, -3.623e-01, -1.293e-01, 4.700e-01, -4.210e-01, 4.082e-01, 4.721e-02, 2.627e-02, 7.780e-02, 7.051e-02));
	r += mul(s0_1, M4(-6.714e-02, -9.155e-02, 8.785e-02, -1.641e-02, 2.772e-01, -6.990e-01, 5.207e-01, -5.957e-01, -9.004e-02, -3.216e-01, 3.039e-01, 1.864e-02, -6.454e-02, 1.265e-01, -2.349e-01, 2.406e-02));
	r += mul(s0_2, M4(3.255e-02, -7.690e-02, -3.623e-02, -2.618e-02, 2.439e-02, -1.076e-01, 8.077e-02, -2.330e-01, 1.496e-01, -9.604e-02, 1.589e-01, -1.430e-01, -8.402e-02, -1.071e-01, -1.125e-01, 6.714e-02));
	r += mul(s0_3, M4(6.713e-02, 2.836e-01, -1.937e-01, -9.843e-03, 1.116e-01, -4.522e-01, 6.335e-01, 6.969e-02, 2.313e-01, 1.998e-01, -2.533e-01, 1.576e-01, -3.872e-02, 9.729e-02, 1.752e-02, 4.083e-03));
	r += mul(s0_4, M4(1.938e-01, -8.283e-02, 3.226e-02, 2.126e-01, -5.254e-01, -3.435e-01, -2.407e-01, -1.053e-01, 9.016e-02, 4.045e-01, 2.725e-01, 3.119e-01, -1.560e-01, 4.085e-01, 3.936e-02, 2.461e-01));
	r += mul(s0_5, M4(-3.575e-01, 1.601e-01, -7.489e-02, 1.848e-01, 6.714e-02, -9.496e-02, 3.628e-02, -2.494e-01, -2.726e-02, 2.153e-01, -1.294e-01, 1.286e-02, 1.782e-01, -1.060e-01, 1.227e-01, -3.669e-02));
	r += mul(s0_6, M4(-4.102e-03, 7.365e-02, 1.313e-01, 1.968e-01, 2.560e-02, -1.580e-01, -4.552e-04, -1.374e-01, 7.061e-02, 1.418e-01, -1.303e-02, 1.494e-01, -7.095e-02, -6.270e-02, -3.642e-02, -4.661e-02));
	r += mul(s0_7, M4(1.269e-01, 1.297e-01, 2.931e-01, 4.934e-01, -2.270e-01, -4.532e-03, 3.894e-02, -6.948e-02, 1.594e-01, 1.408e-01, 6.829e-02, 2.028e-01, 9.127e-03, -2.910e-01, 1.672e-01, -1.622e-01));
	r += mul(s0_8, M4(-1.012e+00, 9.799e-02, 1.158e-01, -3.775e-01, 9.274e-02, -6.380e-03, -8.745e-02, -1.491e-02, 5.882e-02, 1.062e-01, 3.858e-02, 1.556e-01, 1.752e-01, -9.399e-02, -4.288e-02, -1.597e-01));
	r += mul(s1_0, M4(1.042e-01, -8.826e-02, 1.935e-01, -1.534e-01, -1.398e-01, -7.043e-02, 7.751e-02, 4.945e-02, 8.982e-02, 1.479e-01, 2.358e-01, 1.124e-01, 4.659e-01, -2.025e-01, -2.984e-01, -1.555e-01));
	r += mul(s1_1, M4(1.078e-02, 2.881e-01, -1.588e-01, 9.806e-02, -1.221e-01, -1.233e-01, -4.086e-01, -1.591e-01, 1.238e-01, 6.191e-01, -2.782e-01, 3.105e-01, 2.541e-01, 4.376e-01, -1.811e-01, 1.748e-01));
	r += mul(s1_2, M4(-6.399e-02, 1.576e-01, 3.417e-02, 1.820e-01, -6.220e-03, -1.560e-01, -4.723e-02, -1.328e-01, -7.116e-02, 2.959e-01, -1.335e-01, 4.430e-01, 3.330e-01, -1.026e-01, 1.205e-01, -5.293e-01));
	r += mul(s1_3, M4(-1.747e-01, 6.709e-02, 9.595e-02, 1.841e-01, 4.982e-02, -2.510e-01, -4.344e-01, -2.282e-01, 6.506e-02, -3.449e-01, 4.088e-01, 2.550e-01, -2.746e-02, 3.746e-01, -2.002e-01, 4.603e-01));
	r += mul(s1_4, M4(-1.099e-01, 5.316e-02, 1.404e-01, 8.503e-02, -5.767e-01, 2.646e-01, 2.139e-01, -1.035e+00, -1.195e-01, 5.637e-02, -1.479e-01, 2.979e-01, -1.617e-02, -4.016e-01, -2.770e-01, -1.234e-01));
	r += mul(s1_5, M4(1.241e-01, 1.997e-01, 2.478e-01, 1.133e-01, -5.672e-02, -3.306e-02, -9.195e-02, 3.208e-02, -2.678e-01, 1.808e-01, 1.136e-01, 1.560e-01, -5.669e-01, -9.335e-01, -8.146e-01, -7.992e-02));
	r += mul(s1_6, M4(-2.094e-02, 4.201e-02, -8.715e-02, 2.965e-03, -5.842e-02, 2.890e-02, -1.906e-03, 6.723e-02, 5.661e-04, -1.332e-01, 6.608e-02, -2.141e-03, 4.055e-01, -7.263e-01, 1.697e-02, -4.008e-01));
	r += mul(s1_7, M4(-1.661e-01, 2.244e-01, -8.413e-02, 3.818e-01, 2.358e-01, -1.717e-01, -7.547e-02, -1.893e-01, -2.300e-01, 2.385e-01, 4.001e-02, 3.140e-01, -7.914e-02, 1.769e+00, -1.091e+00, 1.685e-01));
	r += mul(s1_8, M4(-7.305e-01, 2.480e-01, -2.240e-02, -2.426e-01, -3.503e-02, 2.585e-02, 3.659e-02, 5.817e-02, 2.388e-02, 2.152e-02, 9.026e-03, 1.554e-01, 1.976e+00, -1.819e+00, 1.716e+00, -2.603e+00));
	r += V4(1.071e-02, -2.015e-03, -3.696e-03, -9.431e-04);
	return r;
}
void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = max(-s0_0, 0.0);
	V4 s1_1 = max(-s0_1, 0.0);
	V4 s1_2 = max(-s0_2, 0.0);
	V4 s1_3 = max(-s0_3, 0.0);
	V4 s1_4 = max(-s0_4, 0.0);
	V4 s1_5 = max(-s0_5, 0.0);
	V4 s1_6 = max(-s0_6, 0.0);
	V4 s1_7 = max(-s0_7, 0.0);
	V4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 3
//!DESC CuNNy-4x4C-BILINEAR-CHROMA-NVL-conv2
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(1.105e+00, -3.935e-01, -9.140e-02, 3.936e-01, 1.587e-01, -1.169e-01, -5.819e-02, 3.000e-02, 2.289e-02, -2.334e-02, 1.683e-02, -4.877e-03, -1.401e-02, 1.246e-01, -1.538e-01, -6.491e-03));
	r += mul(s0_1, M4(1.072e+00, 2.650e-01, -4.847e-01, 5.762e-01, 1.673e-01, 3.431e-02, 3.526e-01, 9.298e-02, -7.415e-02, 7.882e-02, -2.162e-02, 1.096e-02, -2.057e-01, -6.963e-02, -3.058e-01, -6.227e-02));
	r += mul(s0_2, M4(-4.780e-01, 3.654e-01, -3.085e-01, -1.730e-01, 2.615e-02, 1.621e-01, -2.859e-03, 4.376e-03, -8.863e-02, -4.854e-02, -1.310e-02, -5.799e-02, 2.284e-02, -1.453e-01, -6.633e-02, -4.302e-03));
	r += mul(s0_3, M4(9.782e-01, 1.247e-04, -4.580e-01, 7.946e-02, -4.878e-02, -1.127e-01, 2.590e-01, -2.072e-01, -5.701e-02, -1.033e-01, 2.350e-01, -2.020e-01, 1.265e-01, 8.474e-02, -1.948e-01, 2.183e-01));
	r += mul(s0_4, M4(1.676e+00, 6.164e-01, -1.305e+00, 7.637e-01, -1.999e-01, 4.406e-01, -3.058e-02, 3.561e-03, 2.051e-02, 4.353e-01, -4.212e-01, 1.128e-01, 3.312e-01, -2.379e-01, -6.438e-02, 1.263e-02));
	r += mul(s0_5, M4(-3.638e-01, 6.165e-01, 3.374e-02, 5.311e-02, 7.349e-02, 7.888e-02, 6.518e-03, 1.054e-01, -2.236e-01, -1.794e-01, -1.785e-01, -7.984e-02, -4.863e-02, 1.135e-01, -4.523e-02, -1.186e-01));
	r += mul(s0_6, M4(-3.818e-01, 3.508e-01, -3.806e-01, -4.034e-01, -4.968e-02, 4.575e-02, -7.497e-02, -3.395e-01, 1.234e-02, 1.506e-02, -5.666e-02, -2.786e-01, -7.285e-03, -5.270e-02, 9.497e-02, 2.172e-01));
	r += mul(s0_7, M4(-4.791e-01, -2.320e-01, -1.617e-02, -3.281e-01, -6.970e-02, -3.428e-01, 2.537e-03, -2.666e-01, -1.607e-01, -1.921e-01, -1.302e-01, -8.278e-01, 2.487e-02, 2.770e-01, -5.657e-02, 2.016e-01));
	r += mul(s0_8, M4(-4.736e-01, -5.529e-01, 2.586e-01, 9.733e-03, -1.548e-02, -1.160e-01, -1.265e-01, -7.156e-02, -1.752e-01, -4.932e-01, 3.414e-05, -3.089e-02, 1.382e-01, 7.640e-02, 2.133e-02, 1.057e-01));
	r += mul(s1_0, M4(-2.229e-01, 1.054e-01, 1.179e-01, -4.215e-02, 7.757e-02, 7.291e-02, -4.503e-02, 5.488e-02, -6.428e-02, 2.377e-02, 6.433e-02, -2.319e-02, 3.053e-02, -4.150e-02, -4.601e-02, 6.901e-03));
	r += mul(s1_1, M4(-1.421e-01, -4.897e-02, -9.741e-02, -6.803e-02, 2.749e-02, -1.357e-01, -1.391e-01, 1.767e-02, 1.139e-02, 1.629e-01, -3.829e-01, -1.730e-03, 1.705e-01, 5.901e-02, 2.631e-01, 5.383e-02));
	r += mul(s1_2, M4(5.384e-03, -7.886e-02, -3.518e-02, 1.222e-02, 1.703e-01, -6.750e-02, 8.707e-02, 1.738e-01, 3.303e-02, 6.862e-02, 1.094e-01, 4.198e-02, -5.890e-03, 3.836e-03, 1.241e-01, -3.509e-02));
	r += mul(s1_3, M4(6.386e-03, 1.171e-01, -1.227e-01, 2.154e-01, 9.972e-02, 3.661e-02, -7.137e-02, 1.951e-01, 1.629e-02, 2.271e-01, -4.445e-01, 1.314e-01, 3.222e-02, -1.545e-01, 2.409e-01, -1.805e-01));
	r += mul(s1_4, M4(1.948e-01, -2.484e-01, 1.282e-01, 1.057e-01, -4.456e-01, -8.550e-02, -3.965e-01, -2.379e-01, -5.798e-01, -7.889e-02, -9.457e-02, -1.869e-01, 7.241e-01, 3.624e-01, -4.281e-01, 3.468e-01));
	r += mul(s1_5, M4(-2.934e-02, 8.325e-02, 6.716e-03, -4.552e-02, -1.545e-01, -3.780e-01, 1.851e-01, 4.554e-02, 1.910e-02, 8.969e-02, 3.849e-01, -8.284e-02, 3.148e-02, 9.801e-02, -9.414e-02, 1.145e-01));
	r += mul(s1_6, M4(3.409e-02, -7.028e-02, 7.598e-02, 3.088e-01, 2.173e-01, -1.526e-01, 2.261e-01, 3.604e-01, 1.669e-02, -6.919e-03, 1.192e-01, 3.428e-01, -4.429e-02, 2.162e-02, -7.467e-02, -4.307e-01));
	r += mul(s1_7, M4(-2.210e-02, 2.958e-01, 4.568e-03, 1.152e-01, 1.831e-01, 2.698e-01, 1.840e-01, 6.284e-01, 9.561e-02, 1.229e-01, 3.149e-01, 8.223e-01, 2.338e-02, -3.610e-01, -8.981e-02, 1.419e-02));
	r += mul(s1_8, M4(5.359e-02, 8.081e-02, 5.944e-03, 5.532e-02, 4.917e-01, 2.746e-01, -1.715e-02, -6.830e-03, 4.529e-02, 3.940e-01, 9.985e-02, -1.031e-01, 4.445e-02, -1.383e-02, -2.045e-02, -1.833e-02));
	r += V4(8.427e-03, 4.456e-03, -1.651e-05, 1.762e-03);
	return r;
}
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = max(-s0_0, 0.0);
	V4 s1_1 = max(-s0_1, 0.0);
	V4 s1_2 = max(-s0_2, 0.0);
	V4 s1_3 = max(-s0_3, 0.0);
	V4 s1_4 = max(-s0_4, 0.0);
	V4 s1_5 = max(-s0_5, 0.0);
	V4 s1_6 = max(-s0_6, 0.0);
	V4 s1_7 = max(-s0_7, 0.0);
	V4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 4
//!DESC CuNNy-4x4C-BILINEAR-CHROMA-NVL-conv3
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(3.284e-02, -2.580e-02, -1.655e-02, 4.089e-02, 4.153e-02, 1.060e-02, 3.198e-02, -1.737e-02, 4.040e-02, 8.534e-02, -2.083e-02, -3.102e-02, -3.353e-02, 1.228e-01, 1.067e-02, -1.109e-01));
	r += mul(s0_1, M4(7.416e-02, -1.685e-01, -1.593e-02, 1.361e-01, 4.008e-02, -4.789e-03, -4.387e-02, 1.141e-02, -7.971e-02, -1.590e-02, -5.446e-02, 1.395e-01, -2.164e-01, 4.111e-01, 1.229e-02, -2.937e-01));
	r += mul(s0_2, M4(-1.237e-02, -3.825e-02, 1.764e-02, 7.073e-02, -4.076e-02, 2.171e-02, 4.284e-02, -2.573e-02, -4.060e-02, 5.282e-02, -1.973e-02, 5.795e-02, 4.254e-02, -3.410e-02, 1.148e-03, -9.302e-02));
	r += mul(s0_3, M4(-3.168e-02, 5.642e-02, 3.989e-03, -1.299e-02, -9.896e-02, 8.418e-02, -4.596e-02, 7.398e-02, -2.039e-02, 1.560e-01, -1.261e-02, -8.813e-02, 3.685e-03, -4.448e-02, 5.508e-02, 4.228e-02));
	r += mul(s0_4, M4(8.710e-02, 2.525e-01, -1.807e-02, -1.305e-01, 3.416e-01, -1.755e-01, 7.984e-02, 1.412e-01, 9.072e-03, 8.429e-01, 7.378e-03, -7.907e-01, 1.003e-01, -5.624e-01, -9.498e-02, 3.611e-01));
	r += mul(s0_5, M4(2.377e-02, -7.721e-02, -2.874e-02, 6.018e-02, -1.526e-02, 7.440e-02, 1.988e-02, -7.526e-02, 7.736e-03, 3.225e-01, -1.012e-01, -2.502e-01, -1.260e-01, 1.328e-01, 9.350e-02, -1.169e-01));
	r += mul(s0_6, M4(1.168e-02, -6.455e-02, 3.892e-03, 1.457e-03, -2.993e-02, -2.952e-01, 1.472e-02, -1.327e-01, 4.617e-02, 3.958e-01, -2.126e-02, 7.651e-02, 2.102e-03, 1.978e-02, 1.233e-02, 1.152e-02));
	r += mul(s0_7, M4(2.108e-02, 8.033e-02, 1.607e-02, -2.139e-03, 1.064e-01, 1.804e-01, 5.011e-02, -3.452e-02, 2.069e-02, 1.408e+00, -2.023e-01, 1.500e+00, -1.292e-02, 6.694e-02, 3.659e-02, 6.790e-03));
	r += mul(s0_8, M4(-5.836e-03, 9.488e-02, -1.837e-02, -3.400e-02, 1.390e-02, -3.367e-02, -8.722e-03, 9.286e-02, -9.325e-02, 2.030e-01, -3.467e-02, 1.089e-01, -4.749e-02, -1.082e-01, -1.719e-02, 6.711e-02));
	r += mul(s1_0, M4(-4.258e-02, 8.616e-02, 1.140e-02, -4.168e-02, -6.854e-02, 1.047e-01, -3.866e-02, -6.959e-02, -3.210e-02, 5.140e-03, -1.498e-02, -1.125e-03, 2.439e-02, -9.980e-02, 2.840e-02, -7.056e-03));
	r += mul(s1_1, M4(-3.819e-02, 1.268e-01, 8.756e-03, -1.000e-01, -1.188e-01, 1.594e-01, 1.992e-02, -1.003e-01, -2.562e-02, -5.584e-03, 3.775e-02, -2.336e-02, 1.745e-01, -5.040e-02, 3.829e-02, 4.982e-02));
	r += mul(s1_2, M4(2.055e-02, -1.119e-02, -3.398e-02, -5.192e-03, -2.672e-02, 1.941e-02, -2.999e-02, -2.246e-02, -5.538e-03, 3.148e-04, -1.536e-02, 8.678e-03, 3.186e-02, 7.004e-02, 3.519e-02, -4.860e-02));
	r += mul(s1_3, M4(-3.255e-02, -3.967e-02, 7.834e-03, 4.324e-02, 6.958e-02, 1.059e-01, -3.354e-02, -6.600e-02, 4.578e-02, -7.071e-02, 6.981e-03, 5.515e-03, -4.300e-03, -2.465e-02, 6.643e-02, 5.672e-03));
	r += mul(s1_4, M4(-1.313e-01, -6.742e-01, 1.746e-02, 4.155e-01, -9.686e-01, 6.704e-01, -9.741e-02, -3.449e-01, -1.548e-01, -8.572e-03, 1.681e-02, -3.832e-02, -6.283e-01, 1.753e-01, 1.552e+00, -7.417e-01));
	r += mul(s1_5, M4(3.759e-02, -1.774e-02, -6.369e-02, 1.782e-01, -5.847e-03, 1.172e-01, 4.383e-02, -1.097e-01, -2.642e-02, 3.092e-02, 5.638e-02, -2.515e-02, 1.394e-02, 2.419e-02, 1.903e-02, -1.391e-01));
	r += mul(s1_6, M4(-2.550e-02, -1.578e-01, 4.361e-03, -3.307e-02, 5.934e-02, 5.923e-01, -9.498e-02, 1.374e-01, 1.225e-02, 1.294e-01, -1.920e-02, 5.286e-02, -3.435e-04, 3.399e-02, 2.291e-02, -4.428e-02));
	r += mul(s1_7, M4(5.009e-02, -8.733e-01, -2.493e-02, -6.248e-01, -1.025e-01, 3.981e-01, -1.557e-02, 7.016e-01, -7.682e-02, -5.154e-02, 5.606e-02, -5.357e-02, -2.054e-02, -3.682e-01, 3.724e-02, 3.558e-01));
	r += mul(s1_8, M4(1.000e-01, -9.602e-02, 4.309e-02, -5.032e-02, -5.975e-02, 1.345e-02, -2.850e-02, 6.557e-03, 2.082e-02, -8.766e-02, -3.863e-02, 4.214e-02, 8.521e-02, -1.167e-01, 8.221e-02, 3.841e-03));
	r += V4(-3.578e-03, 1.524e-03, 1.636e-04, -5.412e-03);
	return r;
}
void Pass4(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = max(-s0_0, 0.0);
	V4 s1_1 = max(-s0_1, 0.0);
	V4 s1_2 = max(-s0_2, 0.0);
	V4 s1_3 = max(-s0_3, 0.0);
	V4 s1_4 = max(-s0_4, 0.0);
	V4 s1_5 = max(-s0_5, 0.0);
	V4 s1_6 = max(-s0_6, 0.0);
	V4 s1_7 = max(-s0_7, 0.0);
	V4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 5
//!DESC CuNNy-4x4C-BILINEAR-CHROMA-NVL-conv4
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-2.010e-01, 2.858e-01, 1.708e-03, -3.332e-02, 5.255e-02, 5.798e-02, -3.222e-02, -3.259e-02, 2.459e-02, 1.239e-01, -8.286e-02, -7.400e-02, 1.546e-01, 6.397e-03, 9.211e-02, -1.112e-01));
	r += mul(s0_1, M4(1.956e-01, -5.216e-01, -3.628e-01, 2.826e-01, 9.119e-02, 4.823e-02, 2.958e-01, -1.372e-01, 7.404e-02, -3.293e-01, 1.487e-01, 6.458e-03, -2.046e-01, 4.929e-01, 6.424e-01, -1.628e-01));
	r += mul(s0_2, M4(2.273e-02, -8.518e-02, -8.899e-02, 6.210e-02, 7.007e-02, -1.116e-01, -9.970e-03, 3.468e-02, -6.620e-02, 4.041e-02, -2.411e-02, 3.627e-03, -1.929e-01, 2.084e-01, -3.456e-02, 4.796e-02));
	r += mul(s0_3, M4(-2.423e-01, 6.948e-01, 2.744e-01, 3.317e-02, 3.625e-02, -7.415e-03, 1.614e-02, 7.202e-02, -6.653e-02, 2.690e-02, -7.982e-03, 1.751e-01, 6.971e-03, 1.655e-01, 7.141e-02, -1.392e-01));
	r += mul(s0_4, M4(1.152e+00, -9.479e-01, 1.476e-01, -7.054e-04, -2.202e-01, 5.203e-05, -2.302e-01, 1.378e-01, -2.223e-01, 1.201e-01, -1.288e-01, -4.719e-01, -2.410e-01, 1.314e-02, 7.954e-03, -9.404e-01));
	r += mul(s0_5, M4(1.543e-03, 1.222e-01, 7.641e-02, -1.790e-01, -6.807e-03, 6.557e-02, 8.082e-03, 3.384e-02, 1.987e-01, -2.143e-01, 3.566e-03, -8.326e-04, 7.691e-02, 1.099e-02, 5.486e-02, 5.916e-02));
	r += mul(s0_6, M4(3.560e-01, 3.358e-02, 1.552e-01, 6.973e-01, 4.285e-02, 1.234e-02, 3.942e-02, 6.297e-02, 1.108e-02, -4.661e-02, -5.125e-02, 1.017e-01, 2.237e-02, -1.587e-02, -7.795e-03, 6.274e-02));
	r += mul(s0_7, M4(2.945e-01, -3.806e-01, -1.990e-02, 2.538e-01, 4.050e-04, -3.336e-02, -3.636e-02, 8.056e-02, 1.644e-02, 2.740e-02, 5.808e-03, 8.909e-02, -2.122e-02, 3.019e-02, 6.471e-03, -3.249e-02));
	r += mul(s0_8, M4(5.666e-02, -2.982e-02, 2.304e-02, 3.482e-02, 2.324e-02, -4.168e-02, -5.817e-03, -2.673e-02, -1.250e-02, 8.071e-03, -1.390e-02, 1.348e-02, -7.800e-03, 2.337e-02, 6.649e-03, 1.080e-02));
	r += mul(s1_0, M4(8.197e-02, -5.525e-02, 1.265e-01, -2.264e-02, -4.790e-02, -6.681e-02, 1.341e-01, 2.578e-02, 9.105e-02, 3.216e-01, 3.154e-01, 3.784e-02, -4.279e-02, -1.848e-02, 1.021e-02, 3.807e-02));
	r += mul(s1_1, M4(-5.382e-02, -8.286e-03, -1.090e-01, 5.455e-02, -2.124e-01, 5.888e-01, -8.254e-01, 3.407e-02, 6.549e-01, -1.055e+00, 1.038e-01, 2.246e-01, 2.999e-02, 1.123e-01, -2.779e-01, 1.240e-01));
	r += mul(s1_2, M4(-2.337e-02, -6.368e-03, -2.174e-02, -3.347e-02, 3.261e-01, -5.605e-01, -7.756e-02, 2.578e-02, -3.701e-01, 5.349e-02, -2.922e-01, -1.162e-03, 1.461e-01, -4.976e-02, 7.513e-02, -2.165e-02));
	r += mul(s1_3, M4(2.618e-01, 8.468e-02, 2.008e-01, -4.579e-01, -1.916e-02, 4.608e-02, -6.066e-02, -9.200e-02, 1.445e+00, 2.199e+00, 8.314e-01, -1.761e+00, -9.549e-02, -1.105e-01, -6.286e-02, 1.018e-01));
	r += mul(s1_4, M4(-2.017e-01, -3.308e-02, -3.440e-01, 3.708e-02, 5.741e-02, 2.397e-01, 5.685e-01, -8.340e-01, 4.717e+00, -3.809e-01, 2.024e+00, 2.809e+00, -1.663e-01, 3.655e-01, 2.148e-03, 1.461e-01));
	r += mul(s1_5, M4(1.016e-01, -1.306e-01, 4.212e-02, -1.286e-01, -2.861e-01, 1.924e-02, -1.435e-01, -5.290e-02, 5.897e-01, -9.529e-02, 2.075e-01, 6.973e-01, -6.421e-02, 6.510e-02, -3.167e-03, -6.677e-02));
	r += mul(s1_6, M4(6.163e-02, 4.357e-02, 2.166e-01, -4.743e-02, 2.118e-02, -9.760e-03, 1.763e-03, 4.777e-02, 6.809e-01, 3.818e-01, 7.161e-01, 9.197e-01, -4.677e-02, -3.570e-02, -6.665e-02, -3.669e-02));
	r += mul(s1_7, M4(7.288e-02, 4.136e-02, 6.352e-03, 5.583e-01, 2.446e-03, 2.987e-02, 5.383e-02, -3.136e-02, 6.426e-01, -2.764e-02, 3.819e-01, 9.392e-01, 2.342e-02, -1.590e-02, -1.900e-03, 2.200e-02));
	r += mul(s1_8, M4(-5.515e-02, 2.302e-02, -3.081e-02, 2.720e-02, -1.626e-01, 1.392e-01, -1.411e-02, -1.715e-01, 2.216e-02, -8.234e-02, -1.058e-02, -1.340e-01, -2.270e-02, 1.301e-02, 2.996e-03, -6.200e-02));
	r += V4(1.460e-03, -5.426e-05, 1.340e-03, 4.628e-04);
	return r;
}
void Pass5(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = max(-s0_0, 0.0);
	V4 s1_1 = max(-s0_1, 0.0);
	V4 s1_2 = max(-s0_2, 0.0);
	V4 s1_3 = max(-s0_3, 0.0);
	V4 s1_4 = max(-s0_4, 0.0);
	V4 s1_5 = max(-s0_5, 0.0);
	V4 s1_6 = max(-s0_6, 0.0);
	V4 s1_7 = max(-s0_7, 0.0);
	V4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 6
//!DESC CuNNy-4x4C-BILINEAR-CHROMA-NVL-out
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define V4 min16float4
#define M4 min16float4x4
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8) {
	V4 r = 0.0;
	r += mul(s0_0, M4(-8.638e-02, 3.830e-02, 9.400e-03, 1.879e-02, 1.397e-02, 6.587e-03, 3.285e-02, -5.918e-03, -1.684e-02, 2.065e-02, -4.305e-03, 8.340e-03, 6.910e-02, 1.152e-03, 3.897e-02, -3.670e-02));
	r += mul(s0_1, M4(1.068e-01, -2.712e-01, -6.214e-02, -4.438e-02, -1.345e-01, -1.324e-01, 9.943e-02, 9.393e-05, -9.979e-02, -1.176e-01, 5.808e-02, 8.084e-03, -1.636e-01, -3.037e-01, -1.106e-01, 6.455e-02));
	r += mul(s0_2, M4(1.533e-02, 2.045e-01, 2.970e-02, 2.077e-02, 2.096e-02, 3.593e-02, 2.318e-03, 2.707e-02, 2.947e-02, -9.020e-02, -7.789e-02, 2.038e-02, -3.940e-03, -2.744e-02, -3.046e-02, -3.308e-02));
	r += mul(s0_3, M4(2.481e-01, -7.396e-02, 2.469e-02, -3.635e-02, -7.949e-02, -2.617e-02, -1.111e-01, 7.229e-03, -7.544e-02, 6.811e-03, -1.392e-01, 2.364e-03, -1.265e-01, -2.882e-03, -9.846e-02, 8.270e-03));
	r += mul(s0_4, M4(-4.262e-01, 7.200e-01, 2.989e-02, 3.330e-01, -4.444e-01, 4.111e-01, -6.777e-01, -1.305e-01, 7.682e-01, -3.154e-01, 5.939e-01, -4.992e-01, 1.327e-01, -2.192e-01, -5.395e-02, -5.166e-01));
	r += mul(s0_5, M4(-1.837e-02, -3.763e-01, -9.158e-02, -1.867e-01, -2.179e-02, -3.532e-01, -5.111e-02, -1.382e-01, -9.630e-03, 4.565e-01, 1.255e-01, 4.482e-01, 1.199e-02, 1.082e-01, 2.008e-02, 3.609e-02));
	r += mul(s0_6, M4(3.726e-02, -8.897e-03, 1.668e-01, 9.880e-04, 3.796e-02, 9.946e-04, 7.690e-02, -5.183e-03, -1.656e-02, -9.200e-03, -6.584e-02, 1.366e-02, -1.298e-02, 7.878e-04, -6.882e-02, 3.161e-03));
	r += mul(s0_7, M4(-1.107e-01, -5.506e-02, -2.038e-01, 2.693e-01, -1.228e-01, -1.049e-02, -1.679e-01, 2.422e-01, 1.274e-01, 2.820e-02, 2.017e-01, -2.002e-01, 2.983e-02, 1.055e-02, 5.751e-02, -8.520e-02));
	r += mul(s0_8, M4(-3.183e-04, -2.285e-02, 2.942e-02, -1.047e-01, 5.675e-03, -1.374e-02, 5.882e-02, -8.113e-02, -1.906e-03, 3.111e-02, -4.700e-02, 1.306e-01, -2.138e-03, -2.221e-03, -4.342e-03, 2.826e-02));
	r += mul(s1_0, M4(-9.716e-03, 1.083e-02, -1.694e-02, -8.923e-03, 4.170e-03, -9.597e-02, 1.468e-02, 1.142e-02, -5.413e-03, -1.609e-02, -2.849e-02, 1.651e-02, 3.084e-02, -2.350e-02, -1.582e-02, -2.307e-02));
	r += mul(s1_1, M4(2.456e-01, 4.406e-02, 1.553e-02, 1.024e-01, 1.793e-02, 1.763e-01, -1.053e-02, -2.558e-03, 6.062e-02, 8.264e-02, -2.277e-02, -4.967e-02, 4.054e-01, 3.263e-01, -1.425e-01, -3.113e-02));
	r += mul(s1_2, M4(-4.406e-02, -5.563e-02, -3.173e-02, -7.397e-02, -4.100e-03, -1.054e-01, -1.825e-02, -7.342e-03, -2.950e-02, -2.536e-02, 3.881e-02, 2.755e-02, -8.458e-03, 1.134e-01, 1.991e-03, -4.407e-02));
	r += mul(s1_3, M4(-7.889e-02, 2.920e-02, -1.573e-01, -4.464e-02, 9.693e-02, -6.505e-02, 2.842e-01, -5.529e-02, 1.042e-01, 3.021e-02, 8.814e-02, 5.500e-02, 2.583e-02, 1.593e-02, 1.236e-01, -2.871e-03));
	r += mul(s1_4, M4(6.270e-01, -4.792e-01, 3.572e-02, -9.434e-01, 3.058e-01, 8.377e-02, 1.163e-01, 1.633e-01, -7.597e-01, -1.372e-01, 1.136e-01, 2.215e-01, -9.949e-02, 2.204e-02, 3.819e-01, 4.742e-01));
	r += mul(s1_5, M4(4.742e-02, 4.330e-01, 8.387e-02, 1.226e-01, 2.588e-02, 2.998e-01, 7.893e-02, 1.655e-01, -9.155e-02, -5.471e-01, -1.088e-01, -2.349e-01, -3.268e-02, -7.593e-02, -4.989e-02, 2.241e-02));
	r += mul(s1_6, M4(-2.081e-02, -1.107e-02, -1.494e-01, 5.090e-02, -3.383e-02, -1.818e-02, -1.757e-01, 1.769e-02, 8.769e-03, 4.371e-03, 8.371e-02, -2.575e-02, 7.651e-03, 8.379e-03, 4.340e-02, 7.338e-03));
	r += mul(s1_7, M4(8.336e-02, 4.817e-02, 2.627e-01, -2.959e-01, 9.006e-02, -3.319e-02, 1.480e-01, -1.558e-01, -7.808e-02, 3.134e-02, -2.705e-01, 1.982e-01, -6.646e-03, -3.285e-02, -3.413e-02, 4.944e-02));
	r += mul(s1_8, M4(-1.100e-02, -1.664e-02, -3.179e-02, 1.461e-01, 1.293e-02, -1.062e-02, -1.727e-02, 6.274e-02, 1.712e-02, 3.575e-02, -1.579e-02, -1.647e-01, -1.022e-02, 7.638e-03, -6.909e-03, -2.251e-02));
	r += V4(4.084e-04, 3.336e-04, 2.741e-04, 1.664e-04);
	return tanh(r);
}
void Pass6(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0 = l0(-1.0, -1.0);
	V4 s0_1 = l0(0.0, -1.0);
	V4 s0_2 = l0(1.0, -1.0);
	V4 s0_3 = l0(-1.0, 0.0);
	V4 s0_4 = l0(0.0, 0.0);
	V4 s0_5 = l0(1.0, 0.0);
	V4 s0_6 = l0(-1.0, 1.0);
	V4 s0_7 = l0(0.0, 1.0);
	V4 s0_8 = l0(1.0, 1.0);
	V4 s1_0 = max(-s0_0, 0.0);
	V4 s1_1 = max(-s0_1, 0.0);
	V4 s1_2 = max(-s0_2, 0.0);
	V4 s1_3 = max(-s0_3, 0.0);
	V4 s1_4 = max(-s0_4, 0.0);
	V4 s1_5 = max(-s0_5, 0.0);
	V4 s1_6 = max(-s0_6, 0.0);
	V4 s1_7 = max(-s0_7, 0.0);
	V4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 7
//!DESC CuNNy-4x4C-BILINEAR-CHROMA-NVL-shuffle
//!STYLE PS
//!IN t1, INPUT
float4 Pass7(float2 pos) {
	float2 pt = float2(GetInputPt());
	const static float3x3 rgb2yuv = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081};
	const static float3x3 yuv2rgb = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float4 r = 0.0;
	float2 size = float2(GetInputSize());
	float2 f = frac(pos * size);
	float3 yuv = mul(rgb2yuv, INPUT.SampleLevel(SL, pos, 0).rgb);
	int2 i = int2(f * 2.0);
	r.r = t1.SampleLevel(SP, (float2(0.5, 0.5) - f) * pt + pos, 0)[2*i.y + i.x];
	r.r += yuv.r;
	r.a = 1.0;
	r.r = clamp(r, 0.0, 1.0);
	float3 px = mul(yuv2rgb, float3(r.r, yuv.yz));
	return float4(px, 1.0);
}
