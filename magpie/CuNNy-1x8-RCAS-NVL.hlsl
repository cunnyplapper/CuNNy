// CuNNy 1x8 RCAS NVL
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

//!MAGPIE EFFECT
//!VERSION 3
//!OUTPUT_WIDTH INPUT_WIDTH * 2
//!OUTPUT_HEIGHT INPUT_HEIGHT * 2

//!TEXTURE
Texture2D INPUT;

//!TEXTURE
//!WIDTH INPUT_WIDTH * 2
//!HEIGHT INPUT_HEIGHT * 2
//!FORMAT R8_UNORM
Texture2D easu;

//!TEXTURE
//!WIDTH INPUT_WIDTH * 2
//!HEIGHT INPUT_HEIGHT * 2
//!FORMAT R8_UNORM
Texture2D rcas;

//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_UNORM
Texture2D up_0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_UNORM
Texture2D up_1;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_UNORM
Texture2D conv1_0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_UNORM
Texture2D conv1_1;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D down;

// FSR mpv | modified
// Copyright (c) 2021 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// FidelityFX FSR v1.0.2 by AMD
// ported to mpv by agyild

//!PASS 1
//!DESC CuNNy-EASU
//!STYLE PS
//!IN INPUT
//!OUT easu

float GetLuma(float3 rgb) {
	return dot(float3(0.299, 0.587, 0.114), rgb);
}

float APrxLoRcpF1(float a) {
	return asfloat(uint(0x7ef07ebb) - asuint(a));
}

float APrxLoRsqF1(float a) {
	return asfloat(uint(0x5f347d74) - (asuint(a) >> uint(1)));
}

float AMin3F1(float x, float y, float z) {

	return min(x, min(y, z));
}

float AMax3F1(float x, float y, float z) {
	return max(x, max(y, z));
}

void tap(inout float aC, inout float aW, float2 off, float2 dir, float2 len,
         float lob, float clp, float c){
	float2 v;
	v.x = (off.x * ( dir.x)) + (off.y * dir.y);
	v.y = (off.x * (-dir.y)) + (off.y * dir.x);
	v *= len;
	float d2 = v.x * v.x + v.y * v.y;
	d2 = min(d2, clp);
	float wB = float(2.0 / 5.0) * d2 + -1.0;

	float wA = lob * d2 + -1.0;
	wB *= wB;
	wA *= wA;
	wB = float(25.0 / 16.0) * wB + float(-(25.0 / 16.0 - 1.0));
	float w = wB * wA;
	aC += c * w;
	aW += w;
}

void set(inout float2 dir, inout float len, float2 pp, bool biS, bool biT,
         bool biU, bool biV, float lA, float lB, float lC, float lD, float lE){

	float w = 0.0;
	if (biS)
		w = (1.0 - pp.x) * (1.0 - pp.y);
	if (biT)
		w =        pp.x  * (1.0 - pp.y);
	if (biU)
		w = (1.0 - pp.x) *        pp.y;

	if (biV)
		w =        pp.x  *        pp.y;
	float dc = lD - lC;
	float cb = lC - lB;
	float lenX = max(abs(dc), abs(cb));
	lenX = APrxLoRcpF1(lenX);
	float dirX = lD - lB;
	lenX = clamp(abs(dirX) * lenX, 0.0, 1.0);
	lenX *= lenX;
	float ec = lE - lC;

	float ca = lC - lA;
	float lenY = max(abs(ec), abs(ca));
	lenY = APrxLoRcpF1(lenY);
	float dirY = lE - lA;
	lenY = clamp(abs(dirY) * lenY, 0.0, 1.0);
	lenY *= lenY;
	dir += float2(dirX, dirY) * w;
	len += dot(float2(w, w), float2(lenX, lenY));
}

float4 Pass1(float2 pos) {
	float2 pt = float2(GetInputPt());
	float2 size = float2(GetInputSize());
	float4 pix = float4(0.0, 0.0, 0.0, 1.0);
	float2 pp = pos * size - float2(0.5, 0.5);
	float2 fp = floor(pp);
	pp -= fp;
	float b = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2(0.5, -0.5)) * pt), 0).rgb);
	float c = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2(1.5, -0.5)) * pt), 0).rgb);
	float e = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2(-0.5, 0.5)) * pt), 0).rgb);
	float f = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2( 0.5, 0.5)) * pt), 0).rgb);
	float g = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2( 1.5, 0.5)) * pt), 0).rgb);
	float h = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2( 2.5, 0.5)) * pt), 0).rgb);
	float i = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2(-0.5, 1.5)) * pt), 0).rgb);
	float j = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2( 0.5, 1.5)) * pt), 0).rgb);
	float k = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2( 1.5, 1.5)) * pt), 0).rgb);
	float l = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2( 2.5, 1.5)) * pt), 0).rgb);
	float n = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2(0.5, 2.5) ) * pt), 0).rgb);
	float o = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2(1.5, 2.5) ) * pt), 0).rgb);
	float4 bczzL = float4(b, c, 0.0, 0.0);
	float4 ijfeL = float4(i, j, f, e);
	float4 klhgL = float4(k, l, h, g);
	float4 zzonL = float4(0.0, 0.0, o, n);
	float bL = bczzL.x;
	float cL = bczzL.y;
	float iL = ijfeL.x;
	float jL = ijfeL.y;
	float fL = ijfeL.z;
	float eL = ijfeL.w;
	float kL = klhgL.x;
	float lL = klhgL.y;
	float hL = klhgL.z;
	float gL = klhgL.w;
	float oL = zzonL.z;
	float nL = zzonL.w;
	float2 dir = float2(0.0, 0.0);
	float len = 0.0;
	set(dir, len, pp, true, false, false, false, bL, eL, fL, gL, jL);
	set(dir, len, pp, false, true, false, false, cL, fL, gL, hL, kL);
	set(dir, len, pp, false, false, true, false, fL, iL, jL, kL, nL);
	set(dir, len, pp, false, false, false, true, gL, jL, kL, lL, oL);
	float2 dir2 = dir * dir;
	float dirR = dir2.x + dir2.y;
	bool zro = dirR < float(1.0 / 32768.0);
	dirR = APrxLoRsqF1(dirR);
	dirR = zro ? 1.0 : dirR;
	dir.x = zro ? 1.0 : dir.x;
	dir *= float2(dirR, dirR);
	len = len * 0.5;
	len *= len;
	float stretch = (dir.x * dir.x + dir.y * dir.y) * APrxLoRcpF1(max(abs(dir.x), abs(dir.y)));
	float2 len2 = float2(1.0 + (stretch - 1.0) * len, 1.0 + -0.5 * len);
	float lob = 0.5 + float((1.0 / 4.0 - 0.04) - 0.5) * len;
	float clp = APrxLoRcpF1(lob);
	float aC = 0.0;
	float aW = 0.0;
	tap(aC, aW, float2( 0.0,-1.0) - pp, dir, len2, lob, clp, bL);
	tap(aC, aW, float2( 1.0,-1.0) - pp, dir, len2, lob, clp, cL);
	tap(aC, aW, float2(-1.0, 1.0) - pp, dir, len2, lob, clp, iL);
	tap(aC, aW, float2( 0.0, 1.0) - pp, dir, len2, lob, clp, jL);
	tap(aC, aW, float2( 0.0, 0.0) - pp, dir, len2, lob, clp, fL);
	tap(aC, aW, float2(-1.0, 0.0) - pp, dir, len2, lob, clp, eL);
	tap(aC, aW, float2( 1.0, 1.0) - pp, dir, len2, lob, clp, kL);
	tap(aC, aW, float2( 2.0, 1.0) - pp, dir, len2, lob, clp, lL);
	tap(aC, aW, float2( 2.0, 0.0) - pp, dir, len2, lob, clp, hL);
	tap(aC, aW, float2( 1.0, 0.0) - pp, dir, len2, lob, clp, gL);
	tap(aC, aW, float2( 1.0, 2.0) - pp, dir, len2, lob, clp, oL);
	tap(aC, aW, float2( 0.0, 2.0) - pp, dir, len2, lob, clp, nL);
	pix.r = aC / aW;
	float min1 = min(AMin3F1(fL, gL, jL), kL);
	float max1 = max(AMax3F1(fL, gL, jL), kL);
	pix.r = clamp(pix.r, min1, max1);
	pix.r = clamp(pix.r, 0.0, 1.0);
	return pix;
}

//!PASS 2
//!DESC CuNNy-RCAS
//!STYLE PS
//!IN easu
//!OUT rcas

// CuNNy: do not change unless changed during training as well
#define SHARPNESS 2.0
#define FSR_RCAS_LIMIT (0.25 - (1.0 / 16.0))

float APrxMedRcpF1(float a) {
	float b = asfloat(uint(0x7ef19fff) - asuint(a));
	return b * (-b * a + 2.0);
}

float AMax3F1(float x, float y, float z) {
	return max(x, max(y, z)); 
}


float AMin3F1(float x, float y, float z) {
	return min(x, min(y, z));
}

float4 Pass2(float2 pos) {
	float2 pt = float2(GetInputPt());
	float2 size = float2(GetInputSize());
	float3 bde = easu.Gather(SP, pos + pt * float2(-0.5, -0.5), 0).xyz;
	float b = bde.z;
	float d = bde.x;
	float e = bde.y;
	float2 fh = easu.Gather(SP, pos + pt * float2(0.5, 0.5), 0).zx;
	float f = fh.x;
	float h = fh.y;
	float mn1L = min(AMin3F1(b, d, f), h);
	float mx1L = max(AMax3F1(b, d, f), h);
	float2 peakC = float2(1.0, -1.0 * 4.0);
	float hitMinL = min(mn1L, e) / (4.0 * mx1L);
	float hitMaxL = (peakC.x - max(mx1L, e)) / (4.0 * mn1L + peakC.y);
	float lobeL = max(-hitMinL, hitMaxL);
	float lobe = max(float(-FSR_RCAS_LIMIT), min(lobeL, 0.0)) * exp2(-clamp(float(SHARPNESS), 0.0, 2.0));
	float nz = 0.25 * b + 0.25 * d + 0.25 * f + 0.25 * h - e;
	nz = clamp(abs(nz) * APrxMedRcpF1(AMax3F1(AMax3F1(b, d, e), f, h) - AMin3F1(AMin3F1(b, d, e), f, h)), 0.0, 1.0);
	nz = -0.5 * nz + 1.0;
	lobe *= nz;
	float rcpL = APrxMedRcpF1(4.0 * lobe + 1.0);
	float4 pix = float4(0.0, 0.0, 0.0, 1.0);
	pix.r = float((lobe * b + lobe * d + lobe * h + lobe * f + e) * rcpL);
	return pix;
}

//!PASS 3
//!DESC CuNNy-1x8-RCAS-NVL-up
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT up_0, up_1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) dot(float3(0.299, 0.587, 0.114), O(INPUT, float2(x, y)).rgb)
float4 f0(float2 pt, float2 pos, min16float s0_0, min16float s0_1, min16float s0_2, min16float s0_3, min16float s0_4, min16float s0_5, min16float s0_6, min16float s0_7, min16float s0_8) {
	min16float4 r = 0.0;
	r += min16float4(-0.10277801752090454, 0.022329114377498627, -0.01886836625635624, -0.10473615676164627) * s0_0;
	r += min16float4(-0.03698883205652237, -0.06566043943166733, 0.3193359076976776, 0.1459885686635971) * s0_1;
	r += min16float4(0.13037109375, -0.07621882110834122, 0.31956279277801514, 0.005318517331033945) * s0_2;
	r += min16float4(-0.0014601761940866709, 0.11630011349916458, 0.022225642576813698, 0.0810597762465477) * s0_3;
	r += min16float4(0.3093647360801697, 0.48187148571014404, -0.212604358792305, -0.3580533266067505) * s0_4;
	r += min16float4(-0.2888166308403015, -0.2495117038488388, -0.505845844745636, 0.15390506386756897) * s0_5;
	r += min16float4(0.08662302792072296, -0.010285641066730022, 0.0027989796362817287, 0.0616445392370224) * s0_6;
	r += min16float4(0.16127148270606995, 0.022961802780628204, -0.0062072002328932285, 0.1090259999036789) * s0_7;
	r += min16float4(-0.2527404725551605, 0.05012449994683266, 0.08449463546276093, 0.23779292404651642) * s0_8;
	r += float4(-0.0022665057331323624, -0.01153835654258728, 0.01222059316933155, 0.042349714785814285);
	return max(r, 0.0);
}
float4 f1(float2 pt, float2 pos, min16float s0_0, min16float s0_1, min16float s0_2, min16float s0_3, min16float s0_4, min16float s0_5, min16float s0_6, min16float s0_7, min16float s0_8) {
	min16float4 r = 0.0;
	r += min16float4(-0.004778016824275255, -0.03835749626159668, -0.08157328516244888, -0.01926054246723652) * s0_0;
	r += min16float4(0.3129503130912781, 0.007293058093637228, 0.044072456657886505, 0.037368807941675186) * s0_1;
	r += min16float4(0.2587890326976776, 0.031364504247903824, 0.03796377405524254, -0.02960117906332016) * s0_2;
	r += min16float4(0.01123255304992199, 0.4219076335430145, -0.32772448658943176, 0.08507031947374344) * s0_3;
	r += min16float4(-0.15890130400657654, -0.42285144329071045, 0.4213730990886688, -0.4736317992210388) * s0_4;
	r += min16float4(-0.45393455028533936, 0.00016284134471789002, -0.07266610860824585, -0.09411550313234329) * s0_5;
	r += min16float4(-0.008823010139167309, -0.016745690256357193, 0.11442465335130692, -0.05583883821964264) * s0_6;
	r += min16float4(-0.03156315162777901, 0.044217798858881, 0.11261671781539917, 0.4672323167324066) * s0_7;
	r += min16float4(0.07641954720020294, -0.025171693414449692, -0.24072265625, 0.07641765475273132) * s0_8;
	r += float4(-0.007456867024302483, -0.0010352302342653275, -0.0027586473152041435, 0.00632941210642457);
	return max(r, 0.0);
}
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float s0_0 = l0(-1.0, -1.0);
	min16float s0_1 = l0(0.0, -1.0);
	min16float s0_2 = l0(1.0, -1.0);
	min16float s0_3 = l0(-1.0, 0.0);
	min16float s0_4 = l0(0.0, 0.0);
	min16float s0_5 = l0(1.0, 0.0);
	min16float s0_6 = l0(-1.0, 1.0);
	min16float s0_7 = l0(0.0, 1.0);
	min16float s0_8 = l0(1.0, 1.0);
	up_0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8);
	up_1[gxy] = f1(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8);
}
//!PASS 4
//!DESC CuNNy-1x8-RCAS-NVL-conv1
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN up_0, up_1
//!OUT conv1_0, conv1_1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) O(up_0, float2(x, y))
#define l1(x, y) O(up_1, float2(x, y))
float4 f0(float2 pt, float2 pos, min16float4 s0_0, min16float4 s0_1, min16float4 s0_2, min16float4 s0_3, min16float4 s0_4, min16float4 s0_5, min16float4 s0_6, min16float4 s0_7, min16float4 s0_8, min16float4 s1_0, min16float4 s1_1, min16float4 s1_2, min16float4 s1_3, min16float4 s1_4, min16float4 s1_5, min16float4 s1_6, min16float4 s1_7, min16float4 s1_8) {
	min16float4 r = 0.0;
	r += mul(s0_0, min16float4x4(-0.09060372412204742, -0.07401826977729797, 0.015957679599523544, 0.0018321925308555365, 0.14443133771419525, -0.0472257062792778, 0.03978855907917023, -0.06509383022785187, 0.07602129876613617, -0.09341257065534592, 0.126458540558815, -0.00785884726792574, -0.027800211682915688, -0.13464191555976868, -0.011549855582416058, -0.022918881848454475));
	r += mul(s0_1, min16float4x4(-0.1079024076461792, -0.037901926785707474, 0.08551662415266037, 0.021561307832598686, 0.0009496503625996411, -0.0374920628964901, -0.0022078228648751974, -0.15285328030586243, -0.2458065003156662, -0.157073512673378, 0.15188507735729218, 0.06780717521905899, 0.03285630792379379, -0.19407068192958832, 0.1213168352842331, -0.0865209624171257));
	r += mul(s0_2, min16float4x4(-0.04052000120282173, 0.03821997344493866, -0.0028072090353816748, -0.0390109121799469, -0.1889760047197342, -0.08857180923223495, -0.0415310300886631, -0.1478690654039383, -0.23714400827884674, 0.10094859451055527, 0.000505629985127598, 0.0321844220161438, -0.09528809785842896, -0.1554931253194809, -0.050855595618486404, -0.017883680760860443));
	r += mul(s0_3, min16float4x4(-0.2620237469673157, -0.024927400052547455, -0.6603207588195801, 0.021004915237426758, -0.010624658316373825, -0.03872111067175865, 0.035902321338653564, -0.19056136906147003, 0.39133259654045105, -0.1569729894399643, -0.513604462146759, -0.054659757763147354, -0.3972928524017334, -0.101994089782238, 0.3856385052204132, -0.06547576934099197));
	r += mul(s0_4, min16float4x4(-0.5566191077232361, -0.04695168137550354, -0.2538638710975647, 0.06497509032487869, -0.2202095240354538, -0.023840900510549545, 0.10299136489629745, -0.07606182992458344, -0.02131204679608345, -0.016025926917791367, -0.012173516675829887, 0.09527283161878586, 0.001426205737516284, -0.15339507162570953, -0.339112788438797, -0.07341840118169785));
	r += mul(s0_5, min16float4x4(-0.1777488887310028, -0.031117593869566917, -0.2913833260536194, -0.08082479238510132, -0.33323654532432556, -0.005426459945738316, -0.05357401818037033, -0.00543573871254921, -0.12225814908742905, -0.06804151087999344, 0.03144503012299538, 0.04633753001689911, -0.2693510353565216, -0.005294381640851498, 0.03520679473876953, -0.11490985006093979));
	r += mul(s0_6, min16float4x4(0.04154716059565544, -0.07121056318283081, -0.061062928289175034, -0.08109279721975327, 0.42375415563583374, 0.030174612998962402, -0.03687511384487152, -0.011443919502198696, 0.5673859715461731, 0.03755936026573181, 0.49188920855522156, -0.13526463508605957, 0.017548376694321632, -0.12891830503940582, -0.13101279735565186, -0.04400395229458809));
	r += mul(s0_7, min16float4x4(0.6880254149436951, -0.10883843153715134, 0.2432481050491333, -0.021774262189865112, 0.20995910465717316, -0.10481869429349899, -0.33584505319595337, -0.041066188365221024, 0.19526691734790802, 0.02047021873295307, 0.03104243613779545, -0.02497086673974991, 0.6966360211372375, -0.053894370794296265, 0.19049088656902313, -0.10002362728118896));
	r += mul(s0_8, min16float4x4(0.18537932634353638, 0.010879767127335072, -0.27637892961502075, -0.0016690896591171622, -0.05137469992041588, -0.055838990956544876, 0.16758492588996887, -0.08595230430364609, -0.3625737726688385, -0.0028476689476519823, -0.15613093972206116, -0.04901653155684471, 0.04224089905619621, -0.09275627136230469, -0.05026998743414879, -0.12532058358192444));
	r += mul(s1_0, min16float4x4(-0.05215774103999138, -0.03647032752633095, -0.17495867609977722, -0.11404317617416382, -0.22197598218917847, -0.05841519683599472, 0.0011178930290043354, 0.04427384212613106, 0.19630193710327148, -0.15502986311912537, 0.01888946443796158, -0.06464045494794846, 0.020676933228969574, 0.020420992746949196, -0.10268858075141907, -0.13619674742221832));
	r += mul(s1_1, min16float4x4(0.24360086023807526, 0.04554928094148636, -0.10810738801956177, -0.12580350041389465, -0.2958984971046448, -0.017308110371232033, -0.6265689730644226, -0.053877636790275574, 0.22385923564434052, -0.04660755768418312, 0.2016487568616867, -0.05648905783891678, -0.19695259630680084, -0.06385316699743271, -0.008484557271003723, 0.012067602016031742));
	r += mul(s1_2, min16float4x4(0.23394432663917542, 0.012784077785909176, -0.0843583345413208, -0.12237676233053207, -0.2526433765888214, -0.07985860109329224, -0.21643666923046112, 0.005826800595968962, 0.26306089758872986, -0.10575330257415771, 0.14022943377494812, -0.13464456796646118, 0.346027135848999, -0.023262057453393936, 0.1459532082080841, -0.21732981503009796));
	r += mul(s1_3, min16float4x4(-0.222483292222023, 0.052017610520124435, -0.6928901672363281, -0.06800880283117294, 0.018949469551444054, -0.09497703611850739, -0.08666232228279114, -0.060049332678318024, -0.12886017560958862, -0.1397092342376709, 0.08717332780361176, -0.0685712993144989, -0.3529733121395111, 0.011036822572350502, -0.12113897502422333, -0.0063814036548137665));
	r += mul(s1_4, min16float4x4(-0.13718780875205994, 0.11222613602876663, -0.4126018285751343, -0.0009459989960305393, -0.3592853546142578, 0.003007834078744054, -1.9097365140914917, -0.03374816104769707, 0.42480501532554626, -0.11855579912662506, 0.02961749956011772, -0.09614204615354538, -1.6753661632537842, -0.08529230207204819, 0.23489488661289215, -0.08877509087324142));
	r += mul(s1_5, min16float4x4(0.07373978197574615, 0.05766338109970093, -0.11751270294189453, -0.06359303742647171, 0.5675426721572876, -0.13435527682304382, 0.5253909826278687, -0.09094051271677017, 0.15847983956336975, -0.020180976018309593, 0.30067378282546997, -0.007327864412218332, 0.4462677836418152, 0.0687427967786789, 0.2495114505290985, 0.08101219683885574));
	r += mul(s1_6, min16float4x4(-0.01946822553873062, -0.08681469410657883, 0.1519055962562561, -0.0036107979249209166, -0.06149981543421745, 0.008175024762749672, 0.05528556928038597, -0.009616078808903694, 0.15592238306999207, -0.018906261771917343, -0.02758908085525036, -0.07903313636779785, -0.21779729425907135, -0.0763137936592102, 0.03287428617477417, 0.061602119356393814));
	r += mul(s1_7, min16float4x4(0.058619335293769836, 0.02526482753455639, 0.0408039353787899, -0.08468441665172577, -0.2833763062953949, 0.022445842623710632, 0.8613326549530029, 0.07872645556926727, -0.7532967329025269, -0.045895762741565704, 0.011745404452085495, -0.05577177554368973, -0.28614187240600586, -0.053398799151182175, -0.021455466747283936, -0.010299124754965305));
	r += mul(s1_8, min16float4x4(0.3037315607070923, 0.002657258650287986, 0.12032260000705719, -0.09506334364414215, 0.14796192944049835, 0.04128255695104599, 0.5996094346046448, -0.038748499006032944, -0.2681288719177246, 0.09510327875614166, 0.25879183411598206, -0.017690641805529594, -0.36426737904548645, -0.038614749908447266, 0.11626987159252167, 0.09436410665512085));
	r += float4(-0.007489417213946581, -0.0573265366256237, -0.03649885952472687, -0.04326564073562622);
	return max(r, 0.0);
}
float4 f1(float2 pt, float2 pos, min16float4 s0_0, min16float4 s0_1, min16float4 s0_2, min16float4 s0_3, min16float4 s0_4, min16float4 s0_5, min16float4 s0_6, min16float4 s0_7, min16float4 s0_8, min16float4 s1_0, min16float4 s1_1, min16float4 s1_2, min16float4 s1_3, min16float4 s1_4, min16float4 s1_5, min16float4 s1_6, min16float4 s1_7, min16float4 s1_8) {
	min16float4 r = 0.0;
	r += mul(s0_0, min16float4x4(-0.1547936648130417, -0.3579001724720001, -0.15578235685825348, 0.08249834924936295, -0.07934233546257019, 0.2004045844078064, -0.0071802600286901, 0.0012862753355875611, 0.26273563504219055, 0.18506601452827454, 0.025231795385479927, -0.13866767287254333, -0.20360493659973145, 0.08326806873083115, -0.03155374154448509, -0.23939292132854462));
	r += mul(s0_1, min16float4x4(-0.32387444376945496, -0.2944827377796173, -0.5697441697120667, -0.0011257275473326445, 0.0007035029120743275, -0.21634958684444427, 0.07503827661275864, -0.19406652450561523, -0.22398407757282257, 0.30746471881866455, 0.38801684975624084, -0.04804392158985138, -0.009886583313345909, -0.22269770503044128, -0.0017584500601515174, -0.20138633251190186));
	r += mul(s0_2, min16float4x4(-0.07060319930315018, -0.23598836362361908, -0.6464850902557373, -0.06786515563726425, 0.10099626332521439, 0.01792217046022415, -0.07089076191186905, -0.15243659913539886, 0.10376434773206711, 0.3123873770236969, 0.30957022309303284, -0.20997236669063568, 0.1306278258562088, -0.05016065388917923, 0.010409054346382618, -0.1330053210258484));
	r += mul(s0_3, min16float4x4(-0.4822865426540375, -0.1352056860923767, -0.1793155074119568, -0.1280166208744049, 0.047356050461530685, -0.19494163990020752, -0.02311917394399643, -0.06933416426181793, 0.5123698115348816, -0.34277963638305664, -0.07938285171985626, -0.1028747484087944, -0.12899275124073029, 0.2358403503894806, 0.03309287875890732, -0.20157259702682495));
	r += mul(s0_4, min16float4x4(-0.6432636976242065, 0.17916959524154663, -0.3603344261646271, -0.04699520021677017, -0.13113436102867126, -0.21064944565296173, -0.47879335284233093, -0.1637798696756363, -0.6742880940437317, -0.13024647533893585, 0.07070177048444748, 0.030357077717781067, 0.4124220311641693, -0.14776279032230377, 0.29576051235198975, -0.27854979038238525));
	r += mul(s0_5, min16float4x4(-1.081102967262268, 0.048072125762701035, -0.38034817576408386, -0.16575489938259125, 0.08210714161396027, 0.10640839487314224, 0.5293188691139221, -0.09809581190347672, 0.11137598007917404, -0.20445340871810913, -0.0971747413277626, 0.06736037880182266, -0.1945512890815735, 0.14108794927597046, -0.35973626375198364, -0.39227885007858276));
	r += mul(s0_6, min16float4x4(0.192032128572464, -0.00324147567152977, 0.10649663209915161, -0.08338538557291031, 0.07587577402591705, -0.021836820989847183, -0.018980378285050392, -0.10359145700931549, -0.301116406917572, 0.15285280346870422, -0.022897057235240936, -0.11245390772819519, 0.09949260950088501, -0.018458396196365356, 0.031779538840055466, 0.0029428256675601006));
	r += mul(s0_7, min16float4x4(0.4332353174686432, 0.1444850116968155, 0.1381637454032898, -0.10800512880086899, 0.13146252930164337, 0.13146032392978668, 0.12389171868562698, -0.22410118579864502, 0.09180000424385071, 0.08475794643163681, -0.3883850872516632, -0.013400156982243061, -0.19911441206932068, 0.11199256032705307, 0.024381591007113457, -0.1482892483472824));
	r += mul(s0_8, min16float4x4(-0.341050922870636, -0.08649087697267532, -0.13686443865299225, -0.16637606918811798, -0.1945188045501709, 0.06131984665989876, -0.09364733844995499, 0.0042821322567760944, 0.2203071564435959, 0.16862444579601288, 0.2244884967803955, 0.13164843618869781, 0.07245739549398422, -0.05496804043650627, -0.032349299639463425, -0.08221561461687088));
	r += mul(s1_0, min16float4x4(-0.36305171251296997, -0.1651303470134735, -0.05298113450407982, -0.11637217551469803, -0.035816293209791183, -0.0452614463865757, -0.03720015659928322, -0.17361250519752502, 0.18285150825977325, 0.11938939243555069, 0.10470566898584366, -0.14765287935733795, 0.032308176159858704, 0.14261622726917267, -0.025600189343094826, -0.08942938596010208));
	r += mul(s1_1, min16float4x4(0.25483831763267517, -0.22049328684806824, -0.4197433888912201, -0.09894298017024994, 0.15342874825000763, 0.10409428924322128, -0.026054419577121735, -0.12267887592315674, 0.02212386205792427, 0.30906128883361816, 0.31161338090896606, -0.11873991787433624, -0.1344967782497406, 0.6910889148712158, 0.4220907390117645, -0.25012320280075073));
	r += mul(s1_2, min16float4x4(-0.14487354457378387, -0.3798810839653015, -0.27768656611442566, -0.07060980796813965, 0.28417328000068665, 0.1645430028438568, 0.14465638995170593, -0.015816854313015938, 0.19485093653202057, 0.3095727860927582, 0.5969698429107666, -0.09129972010850906, -0.28919747471809387, 0.08930789679288864, 0.09190003573894501, -0.11117979139089584));
	r += mul(s1_3, min16float4x4(-0.662587583065033, 0.4667551517486572, 0.328296422958374, -0.11519160866737366, -0.02235296741127968, 0.17210263013839722, 0.01980929635465145, -0.03305169939994812, 0.08257491141557693, -0.07099323719739914, -0.0773565024137497, -0.01340788509696722, 0.19384770095348358, -0.3482348918914795, -0.057152729481458664, -0.11435610800981522));
	r += mul(s1_4, min16float4x4(0.7519526481628418, 0.16648031771183014, -0.3136172890663147, 0.07038198411464691, 0.4168199896812439, 0.13363870978355408, 0.4985473155975342, -0.10113130509853363, -0.9976123571395874, -0.16388073563575745, -0.25108134746551514, -0.08333215862512589, -0.5554326176643372, -1.2380081415176392, 0.020371442660689354, -0.20038363337516785));
	r += mul(s1_5, min16float4x4(-0.04535041004419327, 0.24257516860961914, 0.19103270769119263, -0.056161414831876755, 1.0974704027175903, 0.7256100177764893, 1.1398658752441406, -0.09062078595161438, 0.4892389476299286, -0.14013364911079407, 0.05604034662246704, -0.0847041979432106, 0.2861364483833313, -0.17645229399204254, 0.1707623451948166, -0.1985022872686386));
	r += mul(s1_6, min16float4x4(0.0997520238161087, -0.15835320949554443, 0.09298811852931976, -0.05844618380069733, -0.13822981715202332, -0.10183785855770111, 0.04129360616207123, -0.2063417136669159, -0.2280232161283493, -0.004795803222805262, -0.02890651673078537, -0.041965268552303314, 0.0379825085401535, -0.04235720634460449, -0.11112954467535019, -0.03921569138765335));
	r += mul(s1_7, min16float4x4(-0.4171260893344879, 0.06565679609775543, 0.37982556223869324, 0.07582999765872955, 0.0006342625711113214, -0.291158527135849, 0.11663445830345154, -0.028773121535778046, -0.30890998244285583, -0.0011142103467136621, -0.11351674050092697, -0.17188990116119385, -0.2899104356765747, 0.01446553599089384, -0.0005471507320180535, -0.04328285530209541));
	r += mul(s1_8, min16float4x4(-0.3429490029811859, -0.10738490521907806, -0.2079160511493683, -0.01861840859055519, 0.7725644111633301, -0.47985097765922546, 0.09792949259281158, -0.06649885326623917, -0.8492676019668579, 0.11018887162208557, 0.0701265037059784, -0.0510421097278595, 0.11010000109672546, -0.06295793503522873, -0.11238152533769608, 0.033205993473529816));
	r += float4(-0.011041401885449886, -0.01577245257794857, -0.0185552891343832, -0.06933513283729553);
	return max(r, 0.0);
}
void Pass4(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float4 s0_0 = l0(-1.0, -1.0);
	min16float4 s0_1 = l0(0.0, -1.0);
	min16float4 s0_2 = l0(1.0, -1.0);
	min16float4 s0_3 = l0(-1.0, 0.0);
	min16float4 s0_4 = l0(0.0, 0.0);
	min16float4 s0_5 = l0(1.0, 0.0);
	min16float4 s0_6 = l0(-1.0, 1.0);
	min16float4 s0_7 = l0(0.0, 1.0);
	min16float4 s0_8 = l0(1.0, 1.0);
	min16float4 s1_0 = l1(-1.0, -1.0);
	min16float4 s1_1 = l1(0.0, -1.0);
	min16float4 s1_2 = l1(1.0, -1.0);
	min16float4 s1_3 = l1(-1.0, 0.0);
	min16float4 s1_4 = l1(0.0, 0.0);
	min16float4 s1_5 = l1(1.0, 0.0);
	min16float4 s1_6 = l1(-1.0, 1.0);
	min16float4 s1_7 = l1(0.0, 1.0);
	min16float4 s1_8 = l1(1.0, 1.0);
	conv1_0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
	conv1_1[gxy] = f1(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 5
//!DESC CuNNy-1x8-RCAS-NVL-down
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN conv1_0, conv1_1
//!OUT down
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) O(conv1_0, float2(x, y))
#define l1(x, y) O(conv1_1, float2(x, y))
float4 f0(float2 pt, float2 pos, min16float4 s0_0, min16float4 s0_1, min16float4 s0_2, min16float4 s0_3, min16float4 s0_4, min16float4 s0_5, min16float4 s0_6, min16float4 s0_7, min16float4 s0_8, min16float4 s1_0, min16float4 s1_1, min16float4 s1_2, min16float4 s1_3, min16float4 s1_4, min16float4 s1_5, min16float4 s1_6, min16float4 s1_7, min16float4 s1_8) {
	min16float4 r = 0.0;
	r += mul(s0_0, min16float4x4(-0.598045825958252, 0.16297943890094757, 0.1764475703239441, 0.17014513909816742, 0.057743728160858154, -0.09445656090974808, 0.019076254218816757, -0.02588137984275818, -0.012398929335176945, 0.018600119277834892, -0.05102154612541199, 0.02207690104842186, 0.1647297739982605, 0.08252759277820587, 0.09379490464925766, 0.06407687813043594));
	r += mul(s0_1, min16float4x4(0.07309731841087341, -1.186781644821167, 0.23770612478256226, -0.15876814723014832, -0.06096366047859192, 0.008126912638545036, -0.10972792655229568, -0.21803085505962372, 0.1655314862728119, 0.2685546875, -0.19609543681144714, -0.17417240142822266, 0.10627596825361252, 0.022809268906712532, -0.038817375898361206, -0.02529861405491829));
	r += mul(s0_2, min16float4x4(-0.08879883587360382, 0.1713847517967224, -0.046300288289785385, 0.1908915638923645, 0.06391986459493637, 0.005497152451425791, -0.05408260598778725, 0.0484970286488533, -0.01773187704384327, 0.004277931060642004, -0.003685712581500411, 0.02008640579879284, 0.07390042394399643, -0.013210934586822987, 0.002538198372349143, -0.07280383259057999));
	r += mul(s0_3, min16float4x4(0.10219655930995941, 0.15369611978530884, -0.4018805921077728, 0.045936524868011475, -0.17833173274993896, 0.07588522881269455, -0.10041845589876175, -0.10514628887176514, -0.009123304858803749, -0.06371936947107315, 0.17626982927322388, -0.05871474742889404, 0.0057806652039289474, 0.08312935382127762, -0.016000427305698395, 0.20177923142910004));
	r += mul(s0_4, min16float4x4(0.25293055176734924, 0.18076278269290924, 0.1733735203742981, -0.3896835148334503, 0.06940529495477676, -0.0824296623468399, 0.26248595118522644, 0.03344119340181351, -0.17825770378112793, -0.04446554183959961, 0.2998906075954437, 0.6151339411735535, 0.0721016600728035, 0.08988719433546066, -0.1554662436246872, -0.00767845194786787));
	r += mul(s0_5, min16float4x4(0.037066590040922165, -0.0024690614081919193, -0.08032528311014175, -0.05324932560324669, -0.04377084970474243, 0.10930055379867554, 0.020845619961619377, 0.09413359314203262, 0.02312057465314865, -0.004925851710140705, -0.030700797215104103, -0.03959472477436066, -0.060004182159900665, 0.04271653667092323, 0.04944825544953346, 0.0734545961022377));
	r += mul(s0_6, min16float4x4(-0.00023133201466407627, -0.0005659869057126343, -0.023511582985520363, 0.006411115173250437, 0.0838468000292778, -0.010194127447903156, 0.08722405880689621, 0.14592084288597107, 0.001953881001099944, -0.005456072743982077, 0.004122764337807894, -0.010706555098295212, 0.1319747120141983, -0.07616087794303894, -0.08858014643192291, -0.005175996571779251));
	r += mul(s0_7, min16float4x4(-0.004007834009826183, -0.000868550967425108, 0.02779100090265274, 0.017553379759192467, 0.056800272315740585, -0.14382535219192505, -0.008120205253362656, -0.0754835233092308, -0.0008383463136851788, 0.007674438413232565, -0.013553800992667675, 0.012727998197078705, -0.02165869064629078, 0.20769141614437103, -0.0559401735663414, -0.076158806681633));
	r += mul(s0_8, min16float4x4(0.010945416055619717, -0.004888419061899185, 0.012365306727588177, -0.02470938302576542, -0.07382085919380188, 0.04619002342224121, -0.10650498420000076, -0.13630595803260803, -0.005388614255934954, 0.00045404775300994515, -0.0062566716223955154, -0.0017177070258185267, 0.006443634629249573, -0.023391593247652054, 0.07774785161018372, -0.01988714002072811));
	r += mul(s1_0, min16float4x4(-0.760438859462738, 0.2716718316078186, -0.22025543451309204, 0.1952710598707199, -0.025170475244522095, -0.00094629917293787, 0.0025451809633523226, -0.0035584464203566313, 0.1235220655798912, 0.024553172290325165, -0.002376051852479577, -0.0249609537422657, 0.01985406130552292, 0.0768924355506897, 0.0007588361040689051, -0.21195650100708008));
	r += mul(s1_1, min16float4x4(0.3631093204021454, -0.27480146288871765, 0.06980334222316742, 0.21273081004619598, -0.04919541999697685, -0.021597648039460182, 0.006234648171812296, 0.011572145856916904, -0.05470377206802368, 0.0016632353654131293, -0.008503817021846771, 0.05918670445680618, 0.053376130759716034, 0.07141999900341034, -0.16816698014736176, -0.05988696962594986));
	r += mul(s1_2, min16float4x4(-0.027531135827302933, 0.002525900723412633, 0.016402771696448326, -8.489600440952927e-05, 0.008846482262015343, -0.013117504306137562, -0.008668501861393452, -0.005898250732570887, 0.025584690272808075, 0.01687885820865631, 0.014091572724282742, -0.03605007007718086, 0.027520112693309784, 0.15487146377563477, -0.15558622777462006, -0.09155667573213577));
	r += mul(s1_3, min16float4x4(0.2587883472442627, 0.07741514593362808, -0.47322431206703186, 0.2184806615114212, -0.03723251074552536, -0.05163183435797691, -0.10248791426420212, 0.01607796549797058, 0.23778998851776123, -0.34386110305786133, 0.7859739065170288, 0.025580285117030144, 0.036177780479192734, -0.030725862830877304, -0.04946369305253029, -0.027036914601922035));
	r += mul(s1_4, min16float4x4(0.26448115706443787, -0.40875160694122314, 0.5488384962081909, -1.0212297439575195, 0.4521621763706207, 0.6504120826721191, -0.21194592118263245, -0.16406390070915222, -0.4619288444519043, -0.07382798194885254, -0.2922430634498596, 0.3994140028953552, -0.024488093331456184, 0.05861092731356621, -0.07415100932121277, -0.1444406658411026));
	r += mul(s1_5, min16float4x4(-0.1481066793203354, 0.13037876784801483, -0.06465334445238113, 0.14210477471351624, 0.007561448961496353, -0.04057128727436066, 0.054652854800224304, -0.058232493698596954, -0.0019569790456444025, -0.060747236013412476, 0.05786770582199097, -0.024272441864013672, 0.05430207774043083, 0.15074671804904938, -0.08840493857860565, -0.14814485609531403));
	r += mul(s1_6, min16float4x4(-0.055749885737895966, -0.04160836711525917, 0.10668419301509857, -0.029749896377325058, -0.0069393981248140335, 0.035029180347919464, -0.13426780700683594, 0.0021695843897759914, 0.07400551438331604, 0.11791546642780304, -0.30384594202041626, -0.0906316414475441, 0.01996649242937565, 0.08359044045209885, 0.0527067668735981, -0.0891551524400711));
	r += mul(s1_7, min16float4x4(0.046750687062740326, 0.011299033649265766, 0.0983598381280899, -0.08622249960899353, -0.19231513142585754, -0.17411354184150696, 0.051665980368852615, 0.058739546686410904, 0.14194262027740479, 0.13600993156433105, -0.147954523563385, -0.45419666171073914, -0.07061804831027985, -0.011599622666835785, -0.010897341184318066, 0.07516380399465561));
	r += mul(s1_8, min16float4x4(0.009731356985867023, 0.07106242328882217, -0.06720823794603348, 0.10724114626646042, 0.005232337396591902, -0.026445897296071053, 0.07609941065311432, 0.0033026242163032293, -0.007279388140887022, 0.001453245640732348, -0.027935663238167763, 0.028374643996357918, -0.0534997396171093, -0.010991418734192848, -0.11164719611406326, 0.006900879554450512));
	r += float4(-7.814807467809715e-09, -5.519001700093895e-09, -8.32319191346187e-09, -7.679133773308422e-09);
	return tanh(r);
}
void Pass5(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float4 s0_0 = l0(-1.0, -1.0);
	min16float4 s0_1 = l0(0.0, -1.0);
	min16float4 s0_2 = l0(1.0, -1.0);
	min16float4 s0_3 = l0(-1.0, 0.0);
	min16float4 s0_4 = l0(0.0, 0.0);
	min16float4 s0_5 = l0(1.0, 0.0);
	min16float4 s0_6 = l0(-1.0, 1.0);
	min16float4 s0_7 = l0(0.0, 1.0);
	min16float4 s0_8 = l0(1.0, 1.0);
	min16float4 s1_0 = l1(-1.0, -1.0);
	min16float4 s1_1 = l1(0.0, -1.0);
	min16float4 s1_2 = l1(1.0, -1.0);
	min16float4 s1_3 = l1(-1.0, 0.0);
	min16float4 s1_4 = l1(0.0, 0.0);
	min16float4 s1_5 = l1(1.0, 0.0);
	min16float4 s1_6 = l1(-1.0, 1.0);
	min16float4 s1_7 = l1(0.0, 1.0);
	min16float4 s1_8 = l1(1.0, 1.0);
	down[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 6
//!DESC CuNNy-1x8-RCAS-NVL-shuffle
//!STYLE PS
//!IN down, INPUT, rcas
float4 Pass6(float2 pos) {
	float2 pt = float2(GetInputPt());
	const static float3x3 rgb2yuv = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081};
	const static float3x3 yuv2rgb = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float4 r = 0.0;
	float2 size = float2(GetInputSize());
	float2 f = frac(pos * size);
	float3 yuv = mul(rgb2yuv, INPUT.SampleLevel(SL, pos, 0).rgb);
	int2 i = int2(f * 2.0);
	r.r = down.SampleLevel(SP, (float2(0.5, 0.5) - f) * pt + pos, 0)[2*i.y + i.x];
	r.r += rcas.SampleLevel(SP, pos, 0).r;
	r.a = 1.0;
	r.r = clamp(r, 0.0, 1.0);
	float3 px = mul(yuv2rgb, float3(r.r, yuv.yz));
	return float4(px, 1.0);
}
