// CuNNy 1x8 NVL
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

//!MAGPIE EFFECT
//!VERSION 3
//!OUTPUT_WIDTH INPUT_WIDTH * 2
//!OUTPUT_HEIGHT INPUT_HEIGHT * 2

//!TEXTURE
Texture2D INPUT;

//!TEXTURE
//!WIDTH INPUT_WIDTH * 2
//!HEIGHT INPUT_HEIGHT * 2
//!FORMAT R16_FLOAT
Texture2D easu;

//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R16G16B16A16_FLOAT
Texture2D up_0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R16G16B16A16_FLOAT
Texture2D up_1;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R16G16B16A16_FLOAT
Texture2D conv1_0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R16G16B16A16_FLOAT
Texture2D conv1_1;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R16G16B16A16_FLOAT
Texture2D down;

// FSR mpv | modified
// Copyright (c) 2021 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// FidelityFX FSR v1.0.2 by AMD
// ported to mpv by agyild

//!PASS 1
//!STYLE PS
//!IN INPUT
//!OUT easu

float GetLuma(float3 rgb) {
	return dot(float3(0.299, 0.587, 0.114), rgb);
}

float APrxLoRcpF1(float a) {
	return asfloat(uint(0x7ef07ebb) - asuint(a));
}

float APrxLoRsqF1(float a) {
	return asfloat(uint(0x5f347d74) - (asuint(a) >> uint(1)));
}

float AMin3F1(float x, float y, float z) {

	return min(x, min(y, z));
}

float AMax3F1(float x, float y, float z) {
	return max(x, max(y, z));
}

void tap(inout float aC, inout float aW, float2 off, float2 dir, float2 len,
         float lob, float clp, float c){
	float2 v;
	v.x = (off.x * ( dir.x)) + (off.y * dir.y);
	v.y = (off.x * (-dir.y)) + (off.y * dir.x);
	v *= len;
	float d2 = v.x * v.x + v.y * v.y;
	d2 = min(d2, clp);
	float wB = float(2.0 / 5.0) * d2 + -1.0;

	float wA = lob * d2 + -1.0;
	wB *= wB;
	wA *= wA;
	wB = float(25.0 / 16.0) * wB + float(-(25.0 / 16.0 - 1.0));
	float w = wB * wA;
	aC += c * w;
	aW += w;
}

void set(inout float2 dir, inout float len, float2 pp, bool biS, bool biT,
         bool biU, bool biV, float lA, float lB, float lC, float lD, float lE){

	float w = 0.0;
	if (biS)
		w = (1.0 - pp.x) * (1.0 - pp.y);
	if (biT)
		w =        pp.x  * (1.0 - pp.y);
	if (biU)
		w = (1.0 - pp.x) *        pp.y;

	if (biV)
		w =        pp.x  *        pp.y;
	float dc = lD - lC;
	float cb = lC - lB;
	float lenX = max(abs(dc), abs(cb));
	lenX = APrxLoRcpF1(lenX);
	float dirX = lD - lB;
	lenX = clamp(abs(dirX) * lenX, 0.0, 1.0);
	lenX *= lenX;
	float ec = lE - lC;

	float ca = lC - lA;
	float lenY = max(abs(ec), abs(ca));
	lenY = APrxLoRcpF1(lenY);
	float dirY = lE - lA;
	lenY = clamp(abs(dirY) * lenY, 0.0, 1.0);
	lenY *= lenY;
	dir += float2(dirX, dirY) * w;
	len += dot(float2(w, w), float2(lenX, lenY));
}

float4 Pass1(float2 pos) {
	float2 pt = float2(GetInputPt());
	float2 size = float2(GetInputSize());
	float4 pix = float4(0.0, 0.0, 0.0, 1.0);
	float2 pp = pos * size - float2(0.5, 0.5);
	float2 fp = floor(pp);
	pp -= fp;
	float b = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2(0.5, -0.5)) * pt), 0).rgb);
	float c = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2(1.5, -0.5)) * pt), 0).rgb);
	float e = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2(-0.5, 0.5)) * pt), 0).rgb);
	float f = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2( 0.5, 0.5)) * pt), 0).rgb);
	float g = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2( 1.5, 0.5)) * pt), 0).rgb);
	float h = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2( 2.5, 0.5)) * pt), 0).rgb);
	float i = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2(-0.5, 1.5)) * pt), 0).rgb);
	float j = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2( 0.5, 1.5)) * pt), 0).rgb);
	float k = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2( 1.5, 1.5)) * pt), 0).rgb);
	float l = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2( 2.5, 1.5)) * pt), 0).rgb);
	float n = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2(0.5, 2.5) ) * pt), 0).rgb);
	float o = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2(1.5, 2.5) ) * pt), 0).rgb);
	float4 bczzL = float4(b, c, 0.0, 0.0);
	float4 ijfeL = float4(i, j, f, e);
	float4 klhgL = float4(k, l, h, g);
	float4 zzonL = float4(0.0, 0.0, o, n);
	float bL = bczzL.x;
	float cL = bczzL.y;
	float iL = ijfeL.x;
	float jL = ijfeL.y;
	float fL = ijfeL.z;
	float eL = ijfeL.w;
	float kL = klhgL.x;
	float lL = klhgL.y;
	float hL = klhgL.z;
	float gL = klhgL.w;
	float oL = zzonL.z;
	float nL = zzonL.w;
	float2 dir = float2(0.0, 0.0);
	float len = 0.0;
	set(dir, len, pp, true, false, false, false, bL, eL, fL, gL, jL);
	set(dir, len, pp, false, true, false, false, cL, fL, gL, hL, kL);
	set(dir, len, pp, false, false, true, false, fL, iL, jL, kL, nL);
	set(dir, len, pp, false, false, false, true, gL, jL, kL, lL, oL);
	float2 dir2 = dir * dir;
	float dirR = dir2.x + dir2.y;
	bool zro = dirR < float(1.0 / 32768.0);
	dirR = APrxLoRsqF1(dirR);
	dirR = zro ? 1.0 : dirR;
	dir.x = zro ? 1.0 : dir.x;
	dir *= float2(dirR, dirR);
	len = len * 0.5;
	len *= len;
	float stretch = (dir.x * dir.x + dir.y * dir.y) * APrxLoRcpF1(max(abs(dir.x), abs(dir.y)));
	float2 len2 = float2(1.0 + (stretch - 1.0) * len, 1.0 + -0.5 * len);
	float lob = 0.5 + float((1.0 / 4.0 - 0.04) - 0.5) * len;
	float clp = APrxLoRcpF1(lob);
	float aC = 0.0;
	float aW = 0.0;
	tap(aC, aW, float2( 0.0,-1.0) - pp, dir, len2, lob, clp, bL);
	tap(aC, aW, float2( 1.0,-1.0) - pp, dir, len2, lob, clp, cL);
	tap(aC, aW, float2(-1.0, 1.0) - pp, dir, len2, lob, clp, iL);
	tap(aC, aW, float2( 0.0, 1.0) - pp, dir, len2, lob, clp, jL);
	tap(aC, aW, float2( 0.0, 0.0) - pp, dir, len2, lob, clp, fL);
	tap(aC, aW, float2(-1.0, 0.0) - pp, dir, len2, lob, clp, eL);
	tap(aC, aW, float2( 1.0, 1.0) - pp, dir, len2, lob, clp, kL);
	tap(aC, aW, float2( 2.0, 1.0) - pp, dir, len2, lob, clp, lL);
	tap(aC, aW, float2( 2.0, 0.0) - pp, dir, len2, lob, clp, hL);
	tap(aC, aW, float2( 1.0, 0.0) - pp, dir, len2, lob, clp, gL);
	tap(aC, aW, float2( 1.0, 2.0) - pp, dir, len2, lob, clp, oL);
	tap(aC, aW, float2( 0.0, 2.0) - pp, dir, len2, lob, clp, nL);
	pix.r = aC / aW;
	float min1 = min(AMin3F1(fL, gL, jL), kL);
	float max1 = max(AMax3F1(fL, gL, jL), kL);
	pix.r = clamp(pix.r, min1, max1);
	pix.r = clamp(pix.r, 0.0, 1.0);
	return pix;
}

//!PASS 2
//!DESC CuNNy-1x8-NVL-up
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT up_0, up_1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) dot(float3(0.299, 0.587, 0.114), O(INPUT, float2(x, y)).rgb)
float4 f0(float2 pt, float2 pos, float s0_0, float s0_1, float s0_2, float s0_3, float s0_4, float s0_5, float s0_6, float s0_7, float s0_8) {
	float4 r = 0.0;
	r += float4(-0.043744105845689774, -0.06239123269915581, -0.059747010469436646, 0.013964143581688404) * s0_0;
	r += float4(-0.08032776415348053, 0.0026282011531293392, -0.17165768146514893, 0.08706772327423096) * s0_1;
	r += float4(-0.005708885379135609, 0.08848506957292557, 0.01916441321372986, 0.3454064130783081) * s0_2;
	r += float4(-0.2161337435245514, -0.25301599502563477, 0.1430664360523224, 0.017652111127972603) * s0_3;
	r += float4(0.5471255779266357, 0.4853515326976776, 0.3975534737110138, -0.040456242859363556) * s0_4;
	r += float4(-0.0739976316690445, 0.011477517895400524, -0.09165844321250916, -0.4267580211162567) * s0_5;
	r += float4(-0.0005308257532306015, -0.009537641890347004, -0.09016085416078568, -0.02017432078719139) * s0_6;
	r += float4(0.0762864500284195, -0.16416563093662262, -0.24266617000102997, -0.007528574671596289) * s0_7;
	r += float4(-0.19744983315467834, -0.08959925174713135, 0.0930166020989418, 0.036964260041713715) * s0_8;
	r += float4(-0.0007136883796192706, -0.0030821715481579304, -0.0026445186231285334, 0.00046920927707105875);
	return max(r, 0.0);
}
float4 f1(float2 pt, float2 pos, float s0_0, float s0_1, float s0_2, float s0_3, float s0_4, float s0_5, float s0_6, float s0_7, float s0_8) {
	float4 r = 0.0;
	r += float4(-0.05023977532982826, 0.051541492342948914, 0.001435832236893475, -0.0839357003569603) * s0_0;
	r += float4(-0.19981245696544647, -0.1811523139476776, 0.0041415272280573845, -0.18798828125) * s0_1;
	r += float4(0.07594867795705795, -0.09386619925498962, -0.0020511336624622345, 0.030637675896286964) * s0_2;
	r += float4(0.26105737686157227, -0.2623330354690552, -0.007734113372862339, 0.02218628115952015) * s0_3;
	r += float4(-0.17627012729644775, 0.4947436451911926, -0.4511154294013977, 0.49957093596458435) * s0_4;
	r += float4(0.21462714672088623, -0.014485829509794712, 0.023985419422388077, -0.28423044085502625) * s0_5;
	r += float4(0.08224841952323914, -0.0323539599776268, 0.0019496288150548935, 0.052854813635349274) * s0_6;
	r += float4(0.014693398028612137, -0.04316264018416405, 0.43261709809303284, 0.008416397497057915) * s0_7;
	r += float4(-0.20278890430927277, 0.08291063457727432, -1.0193523849011399e-05, -0.0562254898250103) * s0_8;
	r += float4(0.001813923823647201, -0.0002569578355178237, 0.0006093141855672002, 0.0007847464876249433);
	return max(r, 0.0);
}
void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	float s0_0 = l0(-1.0, -1.0);
	float s0_1 = l0(0.0, -1.0);
	float s0_2 = l0(1.0, -1.0);
	float s0_3 = l0(-1.0, 0.0);
	float s0_4 = l0(0.0, 0.0);
	float s0_5 = l0(1.0, 0.0);
	float s0_6 = l0(-1.0, 1.0);
	float s0_7 = l0(0.0, 1.0);
	float s0_8 = l0(1.0, 1.0);
	up_0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8);
	up_1[gxy] = f1(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8);
}
//!PASS 3
//!DESC CuNNy-1x8-NVL-conv1
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN up_0, up_1
//!OUT conv1_0, conv1_1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) O(up_0, float2(x, y))
#define l1(x, y) O(up_1, float2(x, y))
float4 f0(float2 pt, float2 pos, float4 s0_0, float4 s0_1, float4 s0_2, float4 s0_3, float4 s0_4, float4 s0_5, float4 s0_6, float4 s0_7, float4 s0_8, float4 s1_0, float4 s1_1, float4 s1_2, float4 s1_3, float4 s1_4, float4 s1_5, float4 s1_6, float4 s1_7, float4 s1_8) {
	float4 r = 0.0;
	r += mul(s0_0, float4x4(0.1844685673713684, 0.6182945966720581, 0.4534028172492981, 0.5800437927246094, -0.15566234290599823, -0.3310547471046448, -0.14013740420341492, -0.3660754859447479, 0.09134723991155624, 0.01816772110760212, 0.10488183796405792, 0.19389963150024414, 0.04332777485251427, -0.018366770818829536, 0.023479171097278595, -0.002950849710032344));
	r += mul(s0_1, float4x4(0.06713857501745224, 0.2214808315038681, 0.2515758275985718, -0.05710623413324356, -0.039279840886592865, 0.21237754821777344, 0.0019496005261316895, 0.14261753857135773, -0.036220382899045944, 0.4909592866897583, 0.6742994785308838, 8.458143565803766e-05, -0.032900359481573105, 0.012791079469025135, -0.03937550261616707, -0.13329650461673737));
	r += mul(s0_2, float4x4(0.046993743628263474, 0.31966161727905273, 0.12587858736515045, 0.36026474833488464, -0.00931462086737156, 0.14642736315727234, 0.2849029004573822, -0.1105683296918869, -0.006827636156231165, 0.26114973425865173, 0.0768577978014946, 0.3379313051700592, -0.02561292052268982, -0.01308845728635788, -0.015927258878946304, -0.043828610330820084));
	r += mul(s0_3, float4x4(0.6370639204978943, -0.02777867019176483, 0.07165076583623886, -0.0690094381570816, -0.2626931071281433, -0.042581889778375626, -0.11098192632198334, 0.36256295442581177, 0.16511157155036926, 0.12367510050535202, -0.011503292247653008, 0.20872506499290466, 0.26939427852630615, 0.25937420129776, 0.604574978351593, -0.18904034793376923));
	r += mul(s0_4, float4x4(0.08312135189771652, -0.9678571224212646, -0.19753921031951904, -0.8544151186943054, -0.02582623064517975, -0.7694500088691711, -0.04046446830034256, -0.42566314339637756, -0.05906039476394653, -0.4460523724555969, 0.14775562286376953, -0.3596777021884918, -0.09885240346193314, 0.020320527255535126, -0.2601262629032135, 0.10039504617452621));
	r += mul(s0_5, float4x4(0.03107045218348503, 0.12450189143419266, 0.5585224628448486, 0.05872304365038872, -0.00015435065142810345, 0.08469554036855698, -0.2373015284538269, 0.2893217206001282, 0.010350698605179787, -0.4619829058647156, 0.22060535848140717, -0.3567354679107666, 0.0037599746137857437, -0.21437092125415802, -0.07329367101192474, -0.16698120534420013));
	r += mul(s0_6, float4x4(0.22925232350826263, 0.21110250055789948, 0.050161994993686676, 0.20898547768592834, 0.030061285942792892, 0.0777360051870346, -0.046516407281160355, -0.2509790062904358, 0.060033168643713, 0.0350884273648262, 0.037493616342544556, 0.06204843521118164, -0.03659415990114212, -0.4086119830608368, -0.12873975932598114, 0.2404685765504837));
	r += mul(s0_7, float4x4(0.2407272756099701, 0.014520736411213875, -0.020232386887073517, 0.12552301585674286, -0.4114280343055725, -0.16726157069206238, -0.03291502222418785, -0.4192919433116913, 0.08638009428977966, 0.03354405239224434, -0.029417475685477257, 0.44805610179901123, 0.016741810366511345, 0.32108473777770996, 0.09879586845636368, 0.4027712643146515));
	r += mul(s0_8, float4x4(0.012624355964362621, 0.21385343372821808, 0.30971044301986694, 0.10329051315784454, -0.04251590371131897, -0.3327793478965759, -0.13333430886268616, 0.04919969290494919, 0.03902612626552582, 0.053338419646024704, 0.11872678995132446, 0.06169339641928673, 0.03503509983420372, 0.0754847601056099, 0.060206715017557144, -0.07397616654634476));
	r += mul(s1_0, float4x4(0.025858618319034576, -0.006145370192825794, 0.030436847358942032, 0.09238726645708084, -0.16359084844589233, -0.28223100304603577, -0.24387286603450775, -0.2646668255329132, -0.012916999869048595, -0.01052364706993103, 0.12629616260528564, -0.3204604387283325, -0.0584397129714489, -0.21834687888622284, -0.22802938520908356, -0.5633291602134705));
	r += mul(s1_1, float4x4(0.0964428260922432, -0.2542104423046112, -0.0021391205955296755, 0.026060029864311218, -0.050864171236753464, -0.3896421194076538, -0.07971049100160599, -0.27299702167510986, 0.09622303396463394, 0.2805030643939972, -0.10578299313783646, 0.009672533720731735, -0.007918332703411579, -0.12957577407360077, -0.4127265512943268, 0.21926730871200562));
	r += mul(s1_2, float4x4(0.0027670697309076786, 0.20285725593566895, 0.01657123863697052, 0.21731054782867432, -0.010284162126481533, 0.07498137652873993, -0.0002499433176126331, -0.23390527069568634, 0.01325910072773695, 0.05662040039896965, -0.05376734957098961, 0.048823606222867966, -0.01837354525923729, -0.3295939862728119, -0.27355295419692993, -0.18157042562961578));
	r += mul(s1_3, float4x4(-0.20437981188297272, -0.1440882831811905, 0.024394439533352852, -0.22412961721420288, -0.30054613947868347, 0.11423089355230331, 0.0037535950541496277, -0.15461181104183197, 0.9424576163291931, -0.17146052420139313, -0.020054303109645844, -0.41499051451683044, 0.10014678537845612, 0.18470332026481628, 0.23383522033691406, 0.11447692662477493));
	r += mul(s1_4, float4x4(-0.1366729438304901, -0.4197390079498291, -0.13167855143547058, -0.2684813141822815, 0.155753031373024, -0.2119397073984146, 0.0639859139919281, -1.5182002782821655, -0.01921742409467697, 0.23936568200588226, 0.31347042322158813, 0.36425745487213135, -0.1928747147321701, 0.5530344247817993, -0.7270469069480896, 0.15202055871486664));
	r += mul(s1_5, float4x4(-0.07950044423341751, -0.07659207284450531, -0.18594004213809967, 0.03624778613448143, 0.06855326145887375, 0.6043109893798828, 0.21255815029144287, 0.49962317943573, -0.06905899941921234, 0.07436247169971466, -0.18025623261928558, 0.1422460377216339, -0.07377053052186966, -0.0861898735165596, -0.2902374565601349, -0.21725372970104218));
	r += mul(s1_6, float4x4(-0.12644128501415253, 0.017598696053028107, -0.010684872977435589, -0.055358123034238815, -0.2090998739004135, -0.31465914845466614, 0.05214599147439003, -0.04223260283470154, -1.540903091430664, -0.1825326383113861, -0.04109568893909454, -0.04166603460907936, 0.02024911530315876, -0.133022740483284, 0.09790433198213577, 0.14988677203655243));
	r += mul(s1_7, float4x4(-0.0443732887506485, 0.24406439065933228, -0.012581315822899342, 0.016799332574009895, 0.12068786472082138, -0.1736755669116974, 0.1160115897655487, 0.07350142300128937, 0.03403230756521225, -0.02167513221502304, 0.049060605466365814, 0.04397120326757431, -0.16519998013973236, 0.18188217282295227, 0.18765656650066376, 0.30208736658096313));
	r += mul(s1_8, float4x4(0.061855558305978775, -0.027870185673236847, -0.12127652019262314, -0.10034444183111191, 0.009280017577111721, -0.07287456840276718, 0.11126300692558289, 0.07951658964157104, -0.05266118794679642, 0.00366570963524282, -0.01187809556722641, -0.08576186746358871, -0.0005197043064981699, -0.17465852200984955, -0.3681640326976776, -0.021960962563753128));
	r += float4(-0.002008624840527773, -0.002750973217189312, -0.005555205512791872, -0.002840836998075247);
	return max(r, 0.0);
}
float4 f1(float2 pt, float2 pos, float4 s0_0, float4 s0_1, float4 s0_2, float4 s0_3, float4 s0_4, float4 s0_5, float4 s0_6, float4 s0_7, float4 s0_8, float4 s1_0, float4 s1_1, float4 s1_2, float4 s1_3, float4 s1_4, float4 s1_5, float4 s1_6, float4 s1_7, float4 s1_8) {
	float4 r = 0.0;
	r += mul(s0_0, float4x4(0.3652486801147461, 0.19581206142902374, -0.2724543511867523, -0.09333142638206482, -0.2584473490715027, -0.18701975047588348, -0.02770102210342884, -0.07828330248594284, 0.15678367018699646, 0.027456609532237053, 0.06359358876943588, 0.03115873597562313, 0.023633768782019615, -0.12297485023736954, 0.008034894242882729, -0.026819827035069466));
	r += mul(s0_1, float4x4(-0.5240981578826904, 0.25491440296173096, -0.7325870394706726, 0.035168904811143875, -0.16873757541179657, -0.028148451820015907, 0.11923588812351227, -0.04181535542011261, 0.008379212580621243, 0.3353819251060486, -0.2456068992614746, -0.14050738513469696, 0.01640942133963108, 0.2547541856765747, -0.03191714733839035, -0.09577338397502899));
	r += mul(s0_2, float4x4(0.4285026490688324, -1.2998896837234497, 0.08204742521047592, -0.014955300837755203, 0.3022995889186859, 1.0117191076278687, -0.2173045426607132, 0.06438125669956207, -0.49862319231033325, -0.005807784385979176, -0.2225000411272049, -0.10484867542982101, -0.022077225148677826, -0.3076073229312897, 0.09155801683664322, -0.08943569660186768));
	r += mul(s0_3, float4x4(-0.0633460283279419, 0.11473090201616287, 0.14675334095954895, -0.07313041388988495, 0.016722382977604866, 0.0977952852845192, 0.08521489799022675, -0.08469141274690628, 0.18823742866516113, 0.2563845217227936, -0.07120809704065323, -0.11941461265087128, -0.3585430681705475, 0.12831099331378937, -0.19077689945697784, 0.09630025178194046));
	r += mul(s0_4, float4x4(-0.21342281997203827, 0.1904335618019104, -0.47912338376045227, -0.005907949525862932, -1.6326786279678345, -0.5018566250801086, -0.17544302344322205, -0.07329455018043518, 0.8554012775421143, 0.20313133299350739, 0.352122962474823, -0.21596279740333557, -0.4882715940475464, -1.3236197233200073, 0.8319034576416016, -0.036260638386011124));
	r += mul(s0_5, float4x4(-0.31850820779800415, 0.04599892720580101, -0.9745780229568481, -0.04051056504249573, 0.066139817237854, 0.08670028299093246, -1.447533130645752, -0.03955701366066933, -0.7825343608856201, -0.07057573646306992, -0.5020098090171814, 0.060089386999607086, -0.12405049055814743, -0.7180502414703369, 0.13562451303005219, -0.014218087308108807));
	r += mul(s0_6, float4x4(-0.00371057097800076, 0.14507722854614258, -0.05994261056184769, 0.0836608037352562, 0.12310825288295746, -0.07533074170351028, 0.10428965091705322, 0.08810165524482727, 0.041626542806625366, 0.1335066854953766, -0.04612750560045242, -0.32070642709732056, 0.04502691701054573, 0.35719186067581177, -0.6035356521606445, -0.030829941853880882));
	r += mul(s0_7, float4x4(-0.052963949739933014, 0.021504053846001625, -0.061827439814805984, 0.05128035321831703, -0.2529524564743042, 0.05925995856523514, 0.2397361397743225, 0.030801549553871155, 0.14024798572063446, 0.10794427990913391, -0.19188734889030457, -0.10956309735774994, 0.7636827826499939, -0.39751768112182617, -0.3424549698829651, 0.02853792905807495));
	r += mul(s0_8, float4x4(-0.4497546851634979, 0.02249130606651306, 0.14056676626205444, -0.1380743533372879, -0.3234914541244507, -0.24283316731452942, -0.342661589384079, 0.006420813035219908, -0.1800384372472763, -0.09158548712730408, 0.07231426984071732, -0.15015804767608643, -0.17729176580905914, 0.05900988727807999, 0.22010713815689087, -0.12651483714580536));
	r += mul(s1_0, float4x4(0.08329752832651138, -0.008819191716611385, -0.17650246620178223, 0.010562877170741558, 0.06209472194314003, -0.05035451054573059, 0.3114056885242462, 0.10175593197345734, -0.21935726702213287, -0.23222072422504425, 0.36609163880348206, -0.1174338087439537, -0.179245725274086, -0.3952600955963135, 0.26817038655281067, -0.03896861895918846));
	r += mul(s1_1, float4x4(-0.1645500212907791, -0.04356357455253601, -0.43845123052597046, -0.10269533097743988, 0.09351591765880585, -0.2356278896331787, -0.45506638288497925, 0.11321894824504852, 0.513629674911499, 0.4451409578323364, 0.3564786911010742, -0.022311702370643616, 0.17218497395515442, -0.2507100999355316, -1.1596086025238037, -0.03361601009964943));
	r += mul(s1_2, float4x4(0.04736686125397682, 0.48128563165664673, 0.028339385986328125, 0.0039054707158356905, 0.12401983141899109, 0.28128907084465027, 0.12590067088603973, 0.018110858276486397, -0.0012405982706695795, 0.6660381555557251, -0.7558465003967285, -0.0782543495297432, -0.21767102181911469, -3.1783807277679443, -0.24139294028282166, -0.07565319538116455));
	r += mul(s1_3, float4x4(-0.04254263639450073, 0.019462183117866516, 0.13189244270324707, -0.02288476750254631, 0.022432418540120125, -0.10224718600511551, -0.31736451387405396, 0.05596042796969414, -0.6154532432556152, -0.47465184330940247, 0.19128602743148804, -0.03711100295186043, -0.14317211508750916, -0.16591313481330872, -0.5193879008293152, -0.04255293309688568));
	r += mul(s1_4, float4x4(-0.3017631769180298, -0.13143189251422882, 0.2979586124420166, -0.14394941926002502, -1.3534198999404907, -2.0580601692199707, -0.11337447166442871, -0.20201732218265533, 0.09787734597921371, 0.09543944895267487, 0.20919351279735565, -0.2175409197807312, -0.11563800275325775, 0.0444047749042511, 0.5344950556755066, -0.0074144224636256695));
	r += mul(s1_5, float4x4(0.11015812307596207, -0.3972942531108856, -0.24660736322402954, 0.04438306763768196, 0.17793616652488708, -0.16181282699108124, 0.1954232156276703, 0.05539526045322418, -0.04100000485777855, 0.1033552885055542, -0.2617057263851166, -0.17339883744716644, -0.7260426878929138, -0.49377134442329407, -0.035708535462617874, -0.07094027101993561));
	r += mul(s1_6, float4x4(-0.13799484074115753, -0.003961498383432627, 0.056710969656705856, -0.07921937108039856, -0.23487044870853424, -0.0787065178155899, -0.03332629054784775, 0.027423853054642677, -0.1000882089138031, -0.045464880764484406, -0.0355546660721302, -0.0539630725979805, -0.01806846261024475, 0.1313118189573288, -0.29360905289649963, -0.008912863209843636));
	r += mul(s1_7, float4x4(0.6487323641777039, 0.19002555310726166, 0.17335017025470734, -0.03683457523584366, -0.046859242022037506, -0.4425395727157593, -0.14037437736988068, -0.028530670329928398, -0.1805526465177536, -0.010381133295595646, -0.03336966410279274, -0.05704209581017494, 0.5063573718070984, 0.14184445142745972, -0.26262348890304565, -0.14971284568309784));
	r += mul(s1_8, float4x4(0.10189803689718246, -0.043307650834321976, 0.10418588668107986, -0.21682162582874298, -0.09342950582504272, 0.06613555550575256, 0.10364370793104172, -0.0408705472946167, 0.06711689382791519, 0.062065284699201584, 0.035429924726486206, -0.027341457083821297, -0.26062965393066406, 0.20443964004516602, 0.05215178057551384, 0.029115991666913033));
	r += float4(-0.005006740335375071, -0.0025748356711119413, -0.004119948484003544, -0.07478201389312744);
	return max(r, 0.0);
}
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	float4 s0_0 = l0(-1.0, -1.0);
	float4 s0_1 = l0(0.0, -1.0);
	float4 s0_2 = l0(1.0, -1.0);
	float4 s0_3 = l0(-1.0, 0.0);
	float4 s0_4 = l0(0.0, 0.0);
	float4 s0_5 = l0(1.0, 0.0);
	float4 s0_6 = l0(-1.0, 1.0);
	float4 s0_7 = l0(0.0, 1.0);
	float4 s0_8 = l0(1.0, 1.0);
	float4 s1_0 = l1(-1.0, -1.0);
	float4 s1_1 = l1(0.0, -1.0);
	float4 s1_2 = l1(1.0, -1.0);
	float4 s1_3 = l1(-1.0, 0.0);
	float4 s1_4 = l1(0.0, 0.0);
	float4 s1_5 = l1(1.0, 0.0);
	float4 s1_6 = l1(-1.0, 1.0);
	float4 s1_7 = l1(0.0, 1.0);
	float4 s1_8 = l1(1.0, 1.0);
	conv1_0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
	conv1_1[gxy] = f1(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 4
//!DESC CuNNy-1x8-NVL-down
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN conv1_0, conv1_1
//!OUT down
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) O(conv1_0, float2(x, y))
#define l1(x, y) O(conv1_1, float2(x, y))
float4 f0(float2 pt, float2 pos, float4 s0_0, float4 s0_1, float4 s0_2, float4 s0_3, float4 s0_4, float4 s0_5, float4 s0_6, float4 s0_7, float4 s0_8, float4 s1_0, float4 s1_1, float4 s1_2, float4 s1_3, float4 s1_4, float4 s1_5, float4 s1_6, float4 s1_7, float4 s1_8) {
	float4 r = 0.0;
	r += mul(s0_0, float4x4(-0.02552962675690651, -5.050989670962736e-07, -0.03000698797404766, 0.0005354669410735369, -0.027686230838298798, -0.0048433528281748295, -0.023035969585180283, 0.005844067316502333, 0.09003287553787231, -0.0007595779607072473, 0.0299683790653944, 0.006466286722570658, 0.09198728203773499, -0.02824925072491169, -0.003649333491921425, -0.043541911989450455));
	r += mul(s0_1, float4x4(-0.04994042590260506, -0.07970971614122391, -0.050823673605918884, -0.03851115703582764, 0.12754736840724945, 0.08573976159095764, -0.09247225522994995, -0.07166113704442978, -0.12939000129699707, -0.06364328414201736, 0.03403383865952492, 0.02871239185333252, -0.07020130753517151, -0.10229191184043884, 0.10912209749221802, 0.08990200608968735));
	r += mul(s0_2, float4x4(0.4729170799255371, 0.5891324877738953, 0.024374961853027344, 0.02300572581589222, 0.0079299071803689, 0.015341706573963165, 0.010497316718101501, -0.003065324854105711, -0.05823350325226784, -0.013395857065916061, -0.005675675347447395, 0.006945320870727301, -0.06221802532672882, -0.08863792568445206, -0.01728350855410099, -0.02411249279975891));
	r += mul(s0_3, float4x4(-0.07132323831319809, -0.002834279090166092, -0.0062234303914010525, 0.0038896165788173676, -0.2329779714345932, 0.04415141046047211, 0.14749737083911896, 0.03615245223045349, 0.26923274993896484, -0.018812740221619606, 0.266612708568573, -0.020630892366170883, 0.19498953223228455, 0.02739551104605198, -0.0852515697479248, 0.02019883133471012));
	r += mul(s0_4, float4x4(-0.11027432978153229, -0.05329298973083496, -0.0315251350402832, -0.011907282285392284, -0.19977019727230072, -0.9719045162200928, 0.7832031846046448, 0.36239588260650635, -0.3645060956478119, 0.30375945568084717, -0.8805372714996338, -0.12670476734638214, 0.5625874996185303, 0.10183683782815933, -0.25927311182022095, -1.035337209701538));
	r += mul(s0_5, float4x4(-0.34667980670928955, -0.12148504704236984, 0.08864165097475052, 0.4916827976703644, 0.02411482110619545, 0.10615301132202148, 0.047603074461221695, 0.15576092898845673, 0.07878758758306503, -0.03858785331249237, -0.005336776375770569, -0.1589455008506775, -0.022005736827850342, 0.11007005721330643, -0.059937600046396255, 0.0030474793165922165));
	r += mul(s0_6, float4x4(-0.0003143097274005413, 2.128999949491117e-05, -0.04893086105585098, -0.014523137360811234, -0.019618429243564606, -0.02809937298297882, -0.05621885880827904, 0.0013943561352789402, -0.011577002704143524, -6.218766793608665e-05, 0.031063910573720932, -0.02148222178220749, -0.027482789009809494, 0.0004113157046958804, 0.08456436544656754, 0.018542909994721413));
	r += mul(s0_7, float4x4(0.02357492223381996, 0.005999738350510597, -0.05372391268610954, -0.039195191115140915, 0.040983159095048904, 0.04824250191450119, 0.10658609867095947, -0.044598933309316635, -0.0010771354427561164, 0.0010469756089150906, 0.24560537934303284, 0.24381175637245178, -0.010018941946327686, -0.03991907835006714, 0.0396696962416172, 0.05966084823012352));
	r += mul(s0_8, float4x4(0.002486893441528082, 0.021409165114164352, -0.07739859819412231, -0.07157865166664124, -0.009233168326318264, -0.018375255167484283, -0.01972905732691288, 0.04753223806619644, -0.0031332301441580057, -0.0009380801930092275, 0.02394997328519821, 0.09555690735578537, 0.007402378134429455, -0.004431283101439476, -0.0065071661956608295, -0.03696347773075104));
	r += mul(s1_0, float4x4(-0.9127377867698669, 0.3332728445529938, -0.22257620096206665, 0.11315777897834778, 0.15869185328483582, 0.024012070149183273, 0.02928251214325428, -0.005280595272779465, 0.09289585798978806, 0.041291553527116776, -0.019102714955806732, -0.03359787538647652, 0.0693427175283432, -0.23110216856002808, -0.044960591942071915, -0.0290530938655138));
	r += mul(s1_1, float4x4(0.28550270199775696, 0.05018508434295654, -0.008130448870360851, 0.18881192803382874, 0.024576636031270027, -0.23412244021892548, -0.030581487342715263, -0.018045753240585327, -0.04878653213381767, -0.005953992251306772, -0.004636841360479593, -0.011006548069417477, -0.0330856554210186, 0.14571917057037354, 0.1969630867242813, -0.029094254598021507));
	r += mul(s1_2, float4x4(-0.02521841786801815, -0.028662363067269325, 0.0006425341125577688, -0.025512678548693657, -0.03836007043719292, 0.06719373911619186, 0.0038847585674375296, 0.016557667404413223, -0.0035289092920720577, -0.016627797856926918, -0.002541120396926999, -5.963137823528086e-07, 0.07031039148569107, -0.13967497646808624, -0.016583632677793503, -0.09244787693023682));
	r += mul(s1_3, float4x4(0.20544420182704926, 0.06553596258163452, -0.5528405904769897, 0.3623531460762024, -0.9023851752281189, 0.7445542812347412, 0.04709654301404953, 0.2945130467414856, -0.965179443359375, -0.4120095372200012, 0.4465588927268982, -0.016613908112049103, 0.11826854944229126, 0.16372933983802795, -0.00626846170052886, 0.06697744131088257));
	r += mul(s1_4, float4x4(0.7786774635314941, -1.0117515325546265, 0.9067954421043396, -0.6648141741752625, 0.4687148928642273, -0.525488018989563, 0.3663204312324524, -0.4423856735229492, 0.4273551404476166, -0.10669910162687302, -0.09440147876739502, 0.23193426430225372, 0.0388253852725029, -0.04602799192070961, -0.048549238592386246, 0.16433462500572205));
	r += mul(s1_5, float4x4(-0.18996155261993408, 0.16553696990013123, -0.06192561984062195, 0.058965910226106644, 0.021419664844870567, 0.021677907556295395, -0.040324315428733826, 0.0695367231965065, 0.034970007836818695, 0.08613936603069305, -0.02200629934668541, -0.050447508692741394, -0.0003721028915606439, 0.17607338726520538, 0.008928774856030941, -0.031085079535841942));
	r += mul(s1_6, float4x4(0.09593839943408966, -0.08423087000846863, 0.14041782915592194, -0.12280115485191345, -0.1611126959323883, 0.256206750869751, -0.9764827489852905, 0.7931873798370361, 0.5423265695571899, 0.04435265064239502, -0.7835590243339539, 0.2420026808977127, 0.028089890256524086, -0.02292412891983986, -0.12279821932315826, 0.012321656569838524));
	r += mul(s1_7, float4x4(-0.03473149612545967, 0.2628456950187683, 0.10485504567623138, -0.43262842297554016, -0.24626868963241577, 0.20947425067424774, -0.03025040403008461, 0.05132114514708519, 0.2924439609050751, 1.0410491228103638, -0.159791961312294, -0.8793293833732605, -0.05429422855377197, -0.18088531494140625, 0.026270005851984024, 0.007111665792763233));
	r += mul(s1_8, float4x4(-0.037972696125507355, 0.04378920793533325, -0.051915787160396576, 0.2665969431400299, 0.01231902651488781, -0.04111815616488457, 0.013518834486603737, -0.0596902035176754, 0.06440015137195587, 0.10616277903318405, -0.021061165258288383, -0.021145321428775787, -0.04087351635098457, -0.10816843807697296, -0.05664575845003128, -0.16760186851024628));
	r += float4(-7.090811493526417e-09, -7.524683987014669e-09, -8.129003248313893e-09, -1.496711377058091e-08);
	return tanh(r);
}
void Pass4(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	float4 s0_0 = l0(-1.0, -1.0);
	float4 s0_1 = l0(0.0, -1.0);
	float4 s0_2 = l0(1.0, -1.0);
	float4 s0_3 = l0(-1.0, 0.0);
	float4 s0_4 = l0(0.0, 0.0);
	float4 s0_5 = l0(1.0, 0.0);
	float4 s0_6 = l0(-1.0, 1.0);
	float4 s0_7 = l0(0.0, 1.0);
	float4 s0_8 = l0(1.0, 1.0);
	float4 s1_0 = l1(-1.0, -1.0);
	float4 s1_1 = l1(0.0, -1.0);
	float4 s1_2 = l1(1.0, -1.0);
	float4 s1_3 = l1(-1.0, 0.0);
	float4 s1_4 = l1(0.0, 0.0);
	float4 s1_5 = l1(1.0, 0.0);
	float4 s1_6 = l1(-1.0, 1.0);
	float4 s1_7 = l1(0.0, 1.0);
	float4 s1_8 = l1(1.0, 1.0);
	down[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 5
//!DESC CuNNy-1x8-NVL-shuffle
//!STYLE PS
//!IN down, INPUT, easu
float4 Pass5(float2 pos) {
	float2 pt = float2(GetInputPt());
	const static float3x3 rgb2yuv = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081};
	const static float3x3 yuv2rgb = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float4 r = 0.0;
	float2 size = float2(GetInputSize());
	float2 f = frac(pos * size);
	float3 yuv = mul(rgb2yuv, INPUT.SampleLevel(SL, pos, 0).rgb);
	int2 i = int2(f * 2.0);
	r.r = down.SampleLevel(SP, (float2(0.5, 0.5) - f) * pt + pos, 0)[2*i.y + i.x];
	r.r += easu.SampleLevel(SP, pos, 0).r;
	r.a = 1.0;
	r.r = clamp(r, 0.0, 1.0);
	float3 px = mul(yuv2rgb, float3(r.r, yuv.yz));
	return float4(px, 1.0);
}
