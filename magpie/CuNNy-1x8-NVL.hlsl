// CuNNy 1x8 NVL
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

//!MAGPIE EFFECT
//!VERSION 4

//!TEXTURE
Texture2D INPUT;

//!TEXTURE
//!WIDTH INPUT_WIDTH * 2
//!HEIGHT INPUT_HEIGHT * 2
Texture2D OUTPUT;

//!TEXTURE
//!WIDTH INPUT_WIDTH * 2
//!HEIGHT INPUT_HEIGHT * 2
//!FORMAT R16_FLOAT
Texture2D easu;

//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_UNORM
Texture2D up_0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_UNORM
Texture2D up_1;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_UNORM
Texture2D conv1_0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_UNORM
Texture2D conv1_1;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D down;

// FSR mpv | modified
// Copyright (c) 2021 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// FidelityFX FSR v1.0.2 by AMD
// ported to mpv by agyild

//!PASS 1
//!STYLE PS
//!IN INPUT
//!OUT easu

float GetLuma(float3 rgb) {
	return dot(float3(0.299, 0.587, 0.114), rgb);
}

float APrxLoRcpF1(float a) {
	return asfloat(uint(0x7ef07ebb) - asuint(a));
}

float APrxLoRsqF1(float a) {
	return asfloat(uint(0x5f347d74) - (asuint(a) >> uint(1)));
}

float AMin3F1(float x, float y, float z) {

	return min(x, min(y, z));
}

float AMax3F1(float x, float y, float z) {
	return max(x, max(y, z));
}

void tap(inout float aC, inout float aW, float2 off, float2 dir, float2 len,
         float lob, float clp, float c){
	float2 v;
	v.x = (off.x * ( dir.x)) + (off.y * dir.y);
	v.y = (off.x * (-dir.y)) + (off.y * dir.x);
	v *= len;
	float d2 = v.x * v.x + v.y * v.y;
	d2 = min(d2, clp);
	float wB = float(2.0 / 5.0) * d2 + -1.0;

	float wA = lob * d2 + -1.0;
	wB *= wB;
	wA *= wA;
	wB = float(25.0 / 16.0) * wB + float(-(25.0 / 16.0 - 1.0));
	float w = wB * wA;
	aC += c * w;
	aW += w;
}

void set(inout float2 dir, inout float len, float2 pp, bool biS, bool biT,
         bool biU, bool biV, float lA, float lB, float lC, float lD, float lE){

	float w = 0.0;
	if (biS)
		w = (1.0 - pp.x) * (1.0 - pp.y);
	if (biT)
		w =        pp.x  * (1.0 - pp.y);
	if (biU)
		w = (1.0 - pp.x) *        pp.y;

	if (biV)
		w =        pp.x  *        pp.y;
	float dc = lD - lC;
	float cb = lC - lB;
	float lenX = max(abs(dc), abs(cb));
	lenX = APrxLoRcpF1(lenX);
	float dirX = lD - lB;
	lenX = clamp(abs(dirX) * lenX, 0.0, 1.0);
	lenX *= lenX;
	float ec = lE - lC;

	float ca = lC - lA;
	float lenY = max(abs(ec), abs(ca));
	lenY = APrxLoRcpF1(lenY);
	float dirY = lE - lA;
	lenY = clamp(abs(dirY) * lenY, 0.0, 1.0);
	lenY *= lenY;
	dir += float2(dirX, dirY) * w;
	len += dot(float2(w, w), float2(lenX, lenY));
}

float4 Pass1(float2 pos) {
	float2 pt = float2(GetInputPt());
	float2 size = float2(GetInputSize());
	float4 pix = float4(0.0, 0.0, 0.0, 1.0);
	float2 pp = pos * size - float2(0.5, 0.5);
	float2 fp = floor(pp);
	pp -= fp;
	float b = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2(0.5, -0.5)) * pt), 0).rgb);
	float c = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2(1.5, -0.5)) * pt), 0).rgb);
	float e = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2(-0.5, 0.5)) * pt), 0).rgb);
	float f = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2( 0.5, 0.5)) * pt), 0).rgb);
	float g = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2( 1.5, 0.5)) * pt), 0).rgb);
	float h = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2( 2.5, 0.5)) * pt), 0).rgb);
	float i = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2(-0.5, 1.5)) * pt), 0).rgb);
	float j = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2( 0.5, 1.5)) * pt), 0).rgb);
	float k = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2( 1.5, 1.5)) * pt), 0).rgb);
	float l = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2( 2.5, 1.5)) * pt), 0).rgb);
	float n = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2(0.5, 2.5) ) * pt), 0).rgb);
	float o = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2(1.5, 2.5) ) * pt), 0).rgb);
	float4 bczzL = float4(b, c, 0.0, 0.0);
	float4 ijfeL = float4(i, j, f, e);
	float4 klhgL = float4(k, l, h, g);
	float4 zzonL = float4(0.0, 0.0, o, n);
	float bL = bczzL.x;
	float cL = bczzL.y;
	float iL = ijfeL.x;
	float jL = ijfeL.y;
	float fL = ijfeL.z;
	float eL = ijfeL.w;
	float kL = klhgL.x;
	float lL = klhgL.y;
	float hL = klhgL.z;
	float gL = klhgL.w;
	float oL = zzonL.z;
	float nL = zzonL.w;
	float2 dir = float2(0.0, 0.0);
	float len = 0.0;
	set(dir, len, pp, true, false, false, false, bL, eL, fL, gL, jL);
	set(dir, len, pp, false, true, false, false, cL, fL, gL, hL, kL);
	set(dir, len, pp, false, false, true, false, fL, iL, jL, kL, nL);
	set(dir, len, pp, false, false, false, true, gL, jL, kL, lL, oL);
	float2 dir2 = dir * dir;
	float dirR = dir2.x + dir2.y;
	bool zro = dirR < float(1.0 / 32768.0);
	dirR = APrxLoRsqF1(dirR);
	dirR = zro ? 1.0 : dirR;
	dir.x = zro ? 1.0 : dir.x;
	dir *= float2(dirR, dirR);
	len = len * 0.5;
	len *= len;
	float stretch = (dir.x * dir.x + dir.y * dir.y) * APrxLoRcpF1(max(abs(dir.x), abs(dir.y)));
	float2 len2 = float2(1.0 + (stretch - 1.0) * len, 1.0 + -0.5 * len);
	float lob = 0.5 + float((1.0 / 4.0 - 0.04) - 0.5) * len;
	float clp = APrxLoRcpF1(lob);
	float aC = 0.0;
	float aW = 0.0;
	tap(aC, aW, float2( 0.0,-1.0) - pp, dir, len2, lob, clp, bL);
	tap(aC, aW, float2( 1.0,-1.0) - pp, dir, len2, lob, clp, cL);
	tap(aC, aW, float2(-1.0, 1.0) - pp, dir, len2, lob, clp, iL);
	tap(aC, aW, float2( 0.0, 1.0) - pp, dir, len2, lob, clp, jL);
	tap(aC, aW, float2( 0.0, 0.0) - pp, dir, len2, lob, clp, fL);
	tap(aC, aW, float2(-1.0, 0.0) - pp, dir, len2, lob, clp, eL);
	tap(aC, aW, float2( 1.0, 1.0) - pp, dir, len2, lob, clp, kL);
	tap(aC, aW, float2( 2.0, 1.0) - pp, dir, len2, lob, clp, lL);
	tap(aC, aW, float2( 2.0, 0.0) - pp, dir, len2, lob, clp, hL);
	tap(aC, aW, float2( 1.0, 0.0) - pp, dir, len2, lob, clp, gL);
	tap(aC, aW, float2( 1.0, 2.0) - pp, dir, len2, lob, clp, oL);
	tap(aC, aW, float2( 0.0, 2.0) - pp, dir, len2, lob, clp, nL);
	pix.r = aC / aW;
	float min1 = min(AMin3F1(fL, gL, jL), kL);
	float max1 = max(AMax3F1(fL, gL, jL), kL);
	pix.r = clamp(pix.r, min1, max1);
	pix.r = clamp(pix.r, 0.0, 1.0);
	return pix;
}

//!DESC CuNNy-1x8-NVL-up
//!PASS 2
//!BLOCK_SIZE 16
//!NUM_THREADS 64
//!IN INPUT
//!OUT up_0, up_1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) dot(float3(0.299, 0.587, 0.114), O(INPUT, float2(x, y)).rgb)
void hook(uint2 gxy, float2 pos) {
	float2 pt = float2(GetInputPt());
	min16float s0[9] = {l0(-1.0, -1.0),l0(0.0, -1.0),l0(1.0, -1.0),l0(-1.0, 0.0),l0(0.0, 0.0),l0(1.0, 0.0),l0(-1.0, 1.0),l0(0.0, 1.0),l0(1.0, 1.0)};
	float4 r0 = 0.0;
	float4 r1 = 0.0;
	r0 += min16float4(0.01751221902668476, 0.2666139006614685, -0.0025295226369053125, -0.009971766732633114) * s0[0];
	r0 += min16float4(0.0689067393541336, -0.3681640923023224, -0.025462670251727104, 0.05938264727592468) * s0[1];
	r0 += min16float4(-0.4521484971046448, 0.03639581799507141, 0.036488041281700134, -0.31933051347732544) * s0[2];
	r0 += min16float4(-0.01387517899274826, 0.07670941948890686, 0.01200773660093546, 0.0011349940905347466) * s0[3];
	r0 += min16float4(-0.03624885529279709, -0.2121686041355133, -0.4081815481185913, 0.022313067689538002) * s0[4];
	r0 += min16float4(0.4277907907962799, 0.2633430063724518, 0.3870810866355896, 0.485923707485199) * s0[5];
	r0 += min16float4(0.006785644683986902, 0.0521555095911026, -0.017263073474168777, -0.005994848441332579) * s0[6];
	r0 += min16float4(-0.032103605568408966, -0.07325348258018494, 0.059178512543439865, 0.08887021243572235) * s0[7];
	r0 += min16float4(0.019542260095477104, -0.04100462421774864, -0.041137535125017166, -0.327148973941803) * s0[8];
	r0 += float4(-0.0038827513344585896, 0.0006187527324073017, 0.001968933967873454, 0.004495310131460428);
	r0 = max(r0, 0.0);
	r1 += min16float4(-0.023348134011030197, 0.029964270070195198, 0.033921822905540466, 0.11245281994342804) * s0[0];
	r1 += min16float4(-0.11508679389953613, -0.03941734880208969, 0.4599609076976776, -0.10821323841810226) * s0[1];
	r1 += min16float4(0.06856042891740799, 0.016628295183181763, -0.06567320972681046, -0.03471212834119797) * s0[2];
	r1 += min16float4(-0.018406081944704056, 0.019128410145640373, 0.010813700035214424, 0.28356093168258667) * s0[3];
	r1 += min16float4(0.46062323451042175, -0.2424532175064087, -0.4614977538585663, -0.2594160735607147) * s0[4];
	r1 += min16float4(-0.3439331650733948, -0.3330077826976776, 0.0326826274394989, 0.052913837134838104) * s0[5];
	r1 += min16float4(0.01312769204378128, -0.0304598156362772, -0.008237304165959358, 0.2910624146461487) * s0[6];
	r1 += min16float4(0.17473284900188446, 0.2465817928314209, 0.0042584678158164024, -0.3193362057209015) * s0[7];
	r1 += min16float4(-0.21239684522151947, 0.3303908407688141, -0.0012528744991868734, -0.013950296677649021) * s0[8];
	r1 += float4(0.00662585673853755, 0.005894849076867104, 0.004212360363453627, -0.0007474907324649394);
	r1 = max(r1, 0.0);
	up_0[gxy] = r0;
	up_1[gxy] = r1;
}
void Pass2(uint2 blockStart, uint3 tid) {
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	};
	float2 pos = (gxy + 0.5) * GetInputPt();
	float2 step = 8 * GetInputPt();
	hook(gxy, pos);
	gxy.x += 8u;
	pos.x += step.x;
	if (gxy.x < size.x || gxy.y < size.y) {
		hook(gxy, pos);
	}
	gxy.y += 8u;
	pos.y += step.y;
	if (gxy.x < size.x || gxy.y < size.y) {
		hook(gxy, pos);
	}
	gxy.x -= 8u;
	pos.x -= step.x;
	if (gxy.x < size.x || gxy.y < size.y) {
		hook(gxy, pos);
	}
}

//!DESC CuNNy-1x8-NVL-conv1
//!PASS 3
//!BLOCK_SIZE 16
//!NUM_THREADS 64
//!IN up_0, up_1
//!OUT conv1_0, conv1_1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) O(up_0, float2(x, y))
#define l1(x, y) O(up_1, float2(x, y))
void hook(uint2 gxy, float2 pos) {
	float2 pt = float2(GetInputPt());
	min16float4 s0[9] = {l0(-1.0, -1.0),l0(0.0, -1.0),l0(1.0, -1.0),l0(-1.0, 0.0),l0(0.0, 0.0),l0(1.0, 0.0),l0(-1.0, 1.0),l0(0.0, 1.0),l0(1.0, 1.0)};
	min16float4 s1[9] = {l1(-1.0, -1.0),l1(0.0, -1.0),l1(1.0, -1.0),l1(-1.0, 0.0),l1(0.0, 0.0),l1(1.0, 0.0),l1(-1.0, 1.0),l1(0.0, 1.0),l1(1.0, 1.0)};
	float4 r0 = 0.0;
	float4 r1 = 0.0;
	r0 += mul(s0[0], min16float4x4(0.04399535804986954, -0.6049975156784058, -0.6026935577392578, 0.11942355334758759, -0.03161380812525749, -0.0013325732434168458, 0.03723984956741333, 0.22104142606258392, 0.2447095513343811, -0.22821201384067535, -0.04922092705965042, 0.2934899628162384, -0.1498958319425583, 0.9410887956619263, 1.014674186706543, -0.25293296575546265));
	r0 += mul(s0[1], min16float4x4(-0.044321805238723755, -0.32022103667259216, -0.27636709809303284, -0.17823880910873413, 0.10776976495981216, -0.05138735473155975, -0.09327191114425659, -0.16807501018047333, -0.18987210094928741, -0.23567737638950348, 0.15870144963264465, 0.11363767832517624, 0.12426862120628357, 0.4198511242866516, 0.4104878604412079, 0.3095031976699829));
	r0 += mul(s0[2], min16float4x4(-0.023990655317902565, -0.10715620964765549, -0.09626118838787079, 0.07775411754846573, 0.03531351685523987, 0.1313580423593521, 0.15348103642463684, -0.07791479676961899, -0.04614553228020668, -0.09133439511060715, -0.10211394727230072, -0.13913613557815552, 0.0041792807169258595, 0.13037802278995514, 0.07682084292173386, -0.059867653995752335));
	r0 += mul(s0[3], min16float4x4(0.7507988214492798, -6.2848663330078125, 0.5878561735153198, 0.6979657411575317, 0.1291627138853073, 0.20557565987110138, -0.27448785305023193, 0.2310369312763214, 0.5488249063491821, 0.034083858132362366, 0.09415361285209656, -0.43065088987350464, -0.2705096900463104, 0.18308140337467194, -1.6221543550491333, -0.7327868938446045));
	r0 += mul(s0[4], min16float4x4(-0.633481502532959, 0.23971350491046906, 0.28417593240737915, -0.6351405382156372, -0.2694375514984131, 0.9636188745498657, 0.7567101716995239, -0.42070502042770386, -1.3990190029144287, -0.23319220542907715, -0.11276558041572571, 0.2916542887687683, 0.2647923529148102, -0.2867414355278015, -0.4410187602043152, 0.4892227053642273));
	r0 += mul(s0[5], min16float4x4(-0.03390960395336151, 0.03651217743754387, 0.055081743746995926, 0.10692644119262695, -0.026869380846619606, 0.4308648705482483, 0.4469008147716522, 0.08974866569042206, 0.12266958504915237, -0.16006943583488464, -0.24374018609523773, 0.0360429622232914, 0.026576288044452667, -0.09106706082820892, -0.17157790064811707, -0.14492161571979523));
	r0 += mul(s0[6], min16float4x4(0.6557782292366028, 0.32218751311302185, -0.17822542786598206, 0.7167902588844299, 0.04238753765821457, -0.012804308906197548, 0.36285674571990967, 0.22094066441059113, 0.09045074880123138, 0.12819257378578186, -0.26866644620895386, -0.16356845200061798, -0.10669153928756714, -0.09612219035625458, 0.025699838995933533, -0.19579756259918213));
	r0 += mul(s0[7], min16float4x4(-0.3290925920009613, 0.12988027930259705, -0.10944049805402756, -0.4560048580169678, -0.07833840698003769, 0.3335442543029785, 0.10457735508680344, -0.23271264135837555, -0.13085314631462097, -0.24081695079803467, -0.5937548875808716, 0.16174684464931488, 0.11764048784971237, -0.008946566842496395, -0.10672659426927567, 0.10571835935115814));
	r0 += mul(s0[8], min16float4x4(-0.11339160799980164, 0.13870444893836975, -0.21663080155849457, -0.06990589201450348, 0.11013901233673096, 0.23880070447921753, -0.04028826206922531, 0.09344583749771118, -0.13911426067352295, -0.2850833237171173, -0.03718075156211853, -0.19621455669403076, -0.0346212312579155, -0.030623113736510277, -0.03963785618543625, 0.061283938586711884));
	r0 += mul(s1[0], min16float4x4(0.07381416857242584, -0.5564454197883606, -0.26325100660324097, 0.08212573081254959, -0.32805201411247253, 0.2347695678472519, 0.17153437435626984, -0.6507178544998169, -0.025453506037592888, -0.1635742038488388, -0.0323324091732502, -0.016543541103601456, 0.009505040943622589, 0.05499551072716713, 0.052046552300453186, -0.16668790578842163));
	r0 += mul(s1[1], min16float4x4(0.14682184159755707, 0.04322590306401253, -0.32129403948783875, -0.5505583882331848, 0.38466328382492065, -0.4530584216117859, 0.04534054547548294, 0.195176362991333, 0.030639659613370895, -0.42289015650749207, -0.22989332675933838, -0.07652805000543594, -0.26084595918655396, -0.08121047168970108, -0.1998729556798935, 0.41170215606689453));
	r0 += mul(s1[2], min16float4x4(-0.04090786352753639, -0.04876617714762688, 0.01244093757122755, 0.01612255722284317, 0.022979462519288063, 0.16643060743808746, 0.14438968896865845, -0.03833414241671562, 0.01742878369987011, -0.03542608767747879, 0.08269166201353073, 0.08665845543146133, 0.03498397022485733, -0.3914114832878113, -0.4160337746143341, -0.11683705449104309));
	r0 += mul(s1[3], min16float4x4(-0.1630435287952423, -0.04348539188504219, 0.18368519842624664, 0.6195083856582642, -0.3569531738758087, -0.2063884288072586, -0.0649871751666069, -0.523258626461029, 0.18800470232963562, -0.08811130374670029, 0.004965189378708601, 0.014681939035654068, -0.03318353742361069, -0.23908104002475739, -0.06792496144771576, -0.16643480956554413));
	r0 += mul(s1[4], min16float4x4(-0.2900385558605194, -0.24884085357189178, 0.21323862671852112, -0.6550238132476807, 0.019648995250463486, 0.03203759714961052, -0.009197616949677467, 0.03030727244913578, -0.5815553069114685, 0.5718286633491516, 0.6502864956855774, -0.032997556030750275, -0.5236845016479492, -0.46415019035339355, -0.41894954442977905, 0.13630639016628265));
	r0 += mul(s1[5], min16float4x4(-0.03874361142516136, 0.004805588163435459, 0.04706259071826935, 0.1764654815196991, 0.21843895316123962, -0.1534745991230011, 0.40288811922073364, 0.10328753292560577, 0.16354209184646606, 0.10043302923440933, -0.21080632507801056, -0.2805781364440918, 0.006328775081783533, 0.004087724722921848, -0.0668744295835495, -0.0189940445125103));
	r0 += mul(s1[6], min16float4x4(0.2390293926000595, 0.2870491147041321, -0.07796820998191833, 0.08964730054140091, -0.007894682697951794, -0.027354663237929344, -0.17843249440193176, -0.050917793065309525, -0.18659275770187378, 0.07478734850883484, -0.18506750464439392, 0.11157277971506119, 0.010206530801951885, 0.08471623808145523, -0.06852903962135315, -0.004394962918013334));
	r0 += mul(s1[7], min16float4x4(-0.12989656627178192, 0.1528317779302597, 0.13671991229057312, 0.11161541193723679, 0.05987435579299927, 0.04112702235579491, -0.025372497737407684, 0.09270033985376358, 0.19203625619411469, -0.025152603164315224, -0.3854871094226837, -0.24112147092819214, -0.0314687043428421, -0.21381507813930511, 0.10767311602830887, 0.11471005529165268));
	r0 += mul(s1[8], min16float4x4(0.008312050253152847, 0.039523810148239136, 0.028299354016780853, -0.10180162638425827, -0.029645483940839767, -0.026226812973618507, -0.16851116716861725, -0.08674656599760056, 0.09741350263357162, 0.052887726575136185, -0.43287381529808044, -0.5553503632545471, -0.01949136331677437, -0.07032556086778641, 0.06170608475804329, -0.2659863531589508));
	r0 += float4(-0.00464687729254365, -0.012571350671350956, -0.0034013690892606974, 0.0004939124919474125);
	r0 = max(r0, 0.0);
	r1 += mul(s0[0], min16float4x4(-5.239376544952393, -0.07103113830089569, 0.1911906599998474, -0.28017476201057434, 0.17849795520305634, -0.04640576243400574, 0.04585035890340805, -0.0837254673242569, -0.053363192826509476, -0.1479092389345169, 0.29769137501716614, -0.19935843348503113, -0.020642220973968506, 0.11119163036346436, -0.4160221815109253, 0.3154093623161316));
	r1 += mul(s0[1], min16float4x4(-1.5061042308807373, 0.02060713805258274, -0.032750099897384644, 0.005123042967170477, -0.8261315822601318, 0.08071088790893555, -0.10292088240385056, 0.034777287393808365, -0.49820035696029663, -0.03699573129415512, -0.4500218331813812, -0.17645876109600067, 0.10365224629640579, -0.059014420956373215, 0.18402670323848724, -0.020559359341859818));
	r1 += mul(s0[2], min16float4x4(-4.752663612365723, 0.004816093482077122, -0.11740773171186447, -0.036714594811201096, 0.2424280047416687, -0.04367808997631073, -0.21024823188781738, -0.09106332063674927, -0.5685461163520813, -0.0845288634300232, -0.023414453491568565, 0.011800467036664486, -3.2935984134674072, 0.00988234207034111, 0.148868590593338, 0.04880182072520256));
	r1 += mul(s0[3], min16float4x4(-0.1619601547718048, -0.16625893115997314, 0.2595579922199249, -0.4873393476009369, -0.3070071041584015, 0.0056547014974057674, 0.1118987426161766, 0.021301019936800003, -0.2655995488166809, -0.06958010047674179, -2.612806558609009, -0.6975421905517578, -0.16342522203922272, 0.1462872475385666, -0.2880440354347229, 0.18511976301670074));
	r1 += mul(s0[4], min16float4x4(0.3120073974132538, 0.1699817031621933, -0.001979513792321086, 0.15409968793392181, -0.9709765315055847, 0.20318026840686798, 1.0149534940719604, 0.1311899870634079, -5.817239284515381, -0.7089841961860657, -0.11992186307907104, 0.2751595675945282, 0.13767221570014954, -0.11049167066812515, -0.3634788393974304, -0.05999311804771423));
	r1 += mul(s0[5], min16float4x4(-1.2847124338150024, 0.03763411566615105, -0.24834996461868286, 0.08129952847957611, 0.14002501964569092, -0.249562069773674, 0.06139184162020683, -0.17453689873218536, -0.9866522550582886, 0.4213983416557312, 0.026520749554038048, 0.33237671852111816, 0.02501682937145233, -0.12294764816761017, 0.2641597092151642, 0.026564106345176697));
	r1 += mul(s0[6], min16float4x4(1.5064418315887451, -0.6756876111030579, 0.28794345259666443, -0.5258267521858215, -0.0025270204059779644, 0.06367063522338867, -0.3832009732723236, 0.07245685160160065, 0.03937257081270218, 0.11243633180856705, -0.3092394769191742, -0.25551775097846985, 0.26918715238571167, -0.05432908982038498, 0.07391858100891113, 0.09518662840127945));
	r1 += mul(s0[7], min16float4x4(-0.1725660115480423, 0.6738280057907104, 0.5277562141418457, 1.1652889251708984, 0.19886036217212677, 0.9532480835914612, 0.0354754775762558, 0.26386529207229614, -0.28085365891456604, -0.8000186085700989, -0.5065591335296631, -0.02659100666642189, -0.012003757990896702, -0.0676240548491478, -0.11947102844715118, -0.06393013149499893));
	r1 += mul(s0[8], min16float4x4(0.033850908279418945, 0.4797718822956085, 0.08462687581777573, 0.4425341784954071, 0.15910448133945465, -0.18065956234931946, 0.11291174590587616, -0.02642400935292244, -1.0167568922042847, 0.3992816209793091, 0.08221208304166794, 0.21337482333183289, -0.16323637962341309, -0.04253765940666199, 0.07358971983194351, -0.09759809076786041));
	r1 += mul(s1[0], min16float4x4(-0.45341870188713074, 0.008358582854270935, -0.16923882067203522, 0.04727109521627426, -0.9841853976249695, 0.20631766319274902, -0.05082031711935997, 0.28657951951026917, -1.7271130084991455, -0.011439688503742218, 0.10757128894329071, -0.022130629047751427, 0.17076438665390015, 0.00489335460588336, -0.07106158882379532, -0.003327184822410345));
	r1 += mul(s1[1], min16float4x4(-0.25571590662002563, -0.04880079999566078, -0.31771087646484375, 0.04437137395143509, -0.4587459862232208, -0.3924587368965149, 0.15232017636299133, -0.2820044457912445, 0.17515666782855988, 0.06330186873674393, -0.03658038377761841, 0.07983491569757462, 0.07416683435440063, -0.22479300200939178, -0.2529340982437134, -0.09655649214982986));
	r1 += mul(s1[2], min16float4x4(-2.454864740371704, 0.07985443621873856, -0.03071392886340618, 0.11205397546291351, 0.6891140937805176, -0.1664905846118927, -0.03514914959669113, -0.4814406633377075, -0.5855758190155029, -0.06650933623313904, -0.11230368912220001, -0.05911826714873314, -0.08905034512281418, 0.06050166115164757, 0.10760059207677841, 0.48250502347946167));
	r1 += mul(s1[3], min16float4x4(0.1606915444135666, -0.075434610247612, 0.467938631772995, -0.0810958668589592, -1.5814018249511719, 0.36035406589508057, -0.1896107941865921, 0.3067324459552765, -8.135725975036621, -0.009848764166235924, -0.05300571396946907, -0.06568054854869843, -2.823369026184082, -0.019262030720710754, 0.04985477402806282, -0.011135284788906574));
	r1 += mul(s1[4], min16float4x4(-0.13693080842494965, -0.0842617005109787, 0.21720562875270844, -0.5683119297027588, -0.6353164315223694, 0.18998189270496368, -0.047007523477077484, 0.10881292074918747, 0.13976944983005524, -0.03689904510974884, -0.008438085205852985, -0.24771685898303986, -0.2559796869754791, -0.28561004996299744, -0.640903890132904, -0.07982902228832245));
	r1 += mul(s1[5], min16float4x4(-0.9126787781715393, -0.17328840494155884, -0.20338734984397888, -0.24116818606853485, 0.8136789202690125, -0.5625149607658386, -0.23485642671585083, -0.324638307094574, -0.6556939482688904, 0.03604504093527794, 0.20295459032058716, 0.09115998446941376, -0.032210588455200195, 0.8835356831550598, -0.14311586320400238, -0.07849397510290146));
	r1 += mul(s1[6], min16float4x4(0.17363141477108002, -0.09105275571346283, -0.5409907102584839, 0.12830646336078644, -1.0913723707199097, 0.05110383406281471, -0.1724451184272766, 0.1792762279510498, -2.407927989959717, -0.13106651604175568, 0.04113510251045227, -0.1014561876654625, -6.032677173614502, 0.009125350043177605, 0.025933390483260155, -0.017353085801005363));
	r1 += mul(s1[7], min16float4x4(0.2561662793159485, -0.06199362501502037, 0.1574089527130127, -0.15971700847148895, 0.17984476685523987, 0.004203571937978268, -0.011408661492168903, -0.7227691411972046, 0.06023980304598808, -0.09483698755502701, -5.745368480682373, 0.0793459415435791, 0.0008420925005339086, -0.24601249396800995, 0.38040903210639954, -0.3149305582046509));
	r1 += mul(s1[8], min16float4x4(-0.9633539915084839, 0.13792002201080322, 0.03225187584757805, 0.17138683795928955, -0.18270333111286163, -0.24267543852329254, 0.0025099357590079308, -0.05983343720436096, -0.18075944483280182, 0.010896647348999977, 0.062270697206258774, -0.455453097820282, 0.11345462501049042, -0.04914003610610962, -0.1414182335138321, 0.03140513598918915));
	r1 += float4(0.02471994049847126, -0.00018901289149653167, 0.000642989412881434, 0.003410005709156394);
	r1 = max(r1, 0.0);
	conv1_0[gxy] = r0;
	conv1_1[gxy] = r1;
}
void Pass3(uint2 blockStart, uint3 tid) {
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	};
	float2 pos = (gxy + 0.5) * GetInputPt();
	float2 step = 8 * GetInputPt();
	hook(gxy, pos);
	gxy.x += 8u;
	pos.x += step.x;
	if (gxy.x < size.x || gxy.y < size.y) {
		hook(gxy, pos);
	}
	gxy.y += 8u;
	pos.y += step.y;
	if (gxy.x < size.x || gxy.y < size.y) {
		hook(gxy, pos);
	}
	gxy.x -= 8u;
	pos.x -= step.x;
	if (gxy.x < size.x || gxy.y < size.y) {
		hook(gxy, pos);
	}
}

//!DESC CuNNy-1x8-NVL-down
//!PASS 4
//!BLOCK_SIZE 16
//!NUM_THREADS 64
//!IN conv1_0, conv1_1
//!OUT down
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) O(conv1_0, float2(x, y))
#define l1(x, y) O(conv1_1, float2(x, y))
void hook(uint2 gxy, float2 pos) {
	float2 pt = float2(GetInputPt());
	min16float4 s0[9] = {l0(-1.0, -1.0),l0(0.0, -1.0),l0(1.0, -1.0),l0(-1.0, 0.0),l0(0.0, 0.0),l0(1.0, 0.0),l0(-1.0, 1.0),l0(0.0, 1.0),l0(1.0, 1.0)};
	min16float4 s1[9] = {l1(-1.0, -1.0),l1(0.0, -1.0),l1(1.0, -1.0),l1(-1.0, 0.0),l1(0.0, 0.0),l1(1.0, 0.0),l1(-1.0, 1.0),l1(0.0, 1.0),l1(1.0, 1.0)};
	float4 r0 = 0.0;
	r0 += mul(s0[0], min16float4x4(-0.010380236431956291, 6.881738954689354e-05, 0.0034534609876573086, 0.00010143258259631693, 0.006890492979437113, -0.014331430196762085, -0.033181075006723404, -0.005313754081726074, 0.001980309374630451, -0.0057263728231191635, 0.02602711133658886, 0.008266985416412354, -0.008756065741181374, -0.008581189438700676, -0.02038080058991909, 0.002709799911826849));
	r0 += mul(s0[1], min16float4x4(-0.008532100357115269, 0.02830844558775425, -0.09024593979120255, -0.014322873204946518, -0.2827795445919037, -0.07806815207004547, 0.07547441869974136, 0.032583028078079224, 0.30288562178611755, 0.15065047144889832, -0.09001173079013824, -0.05302385985851288, -0.11892908811569214, 0.11625400185585022, 0.18981315195560455, -0.021050289273262024));
	r0 += mul(s0[2], min16float4x4(-0.013100143522024155, -0.17769095301628113, -0.018779901787638664, -0.007850510999560356, -0.019871851429343224, -0.18188056349754333, 0.01885935477912426, 0.050251055508852005, 0.02577545866370201, 0.15623152256011963, -0.004144349601119757, -0.04082411527633667, 0.026992611587047577, -0.1600811630487442, 0.012193042784929276, -0.09744168072938919));
	r0 += mul(s0[3], min16float4x4(0.01173409540206194, -0.0001272382214665413, -0.010141951963305473, -0.00018319771334063262, 0.04209021106362343, 0.2219759225845337, -0.21257495880126953, 0.025868220254778862, -0.06918682157993317, -0.06628222018480301, 0.23990000784397125, -0.015120244584977627, 0.045783355832099915, -0.01980755291879177, 0.03245903179049492, -0.027785958722233772));
	r0 += mul(s0[4], min16float4x4(0.5449731945991516, -0.08864619582891464, 0.5725699067115784, -0.017254384234547615, 0.7341365218162537, 0.14231586456298828, -0.624488353729248, -0.7949249744415283, -1.1367217302322388, -0.720943808555603, 0.6217631697654724, 0.8625430464744568, -1.0273436307907104, 0.4784466624259949, -0.8877072930335999, 0.4453684389591217));
	r0 += mul(s0[5], min16float4x4(-0.34046444296836853, 0.09513987600803375, -0.13893058896064758, 0.031330645084381104, -0.01214548945426941, 0.4078526794910431, -0.018688293173909187, -0.05160967633128166, 0.07397837191820145, -0.3427726626396179, 0.071197010576725, 0.04338766634464264, 0.03719548135995865, 0.25097474455833435, 0.012652073986828327, 0.23483602702617645));
	r0 += mul(s0[6], min16float4x4(-0.003811497241258621, 1.471732275604154e-06, -0.007528318557888269, 2.0076133750990266e-06, 0.015483598224818707, -0.05061139911413193, 0.16721758246421814, -0.11690178513526917, 0.020194143056869507, 0.015221255831420422, -0.16389614343643188, -0.015058127231895924, -0.012686047703027725, 0.0068419575691223145, -0.0031158355996012688, -5.799508357995364e-07));
	r0 += mul(s0[7], min16float4x4(-0.0973668247461319, -0.01346773561090231, 0.025166310369968414, -0.015051054768264294, -0.07641614973545074, -0.024134043604135513, 0.28027021884918213, 0.5488284826278687, 0.04620901495218277, 0.06680406630039215, 0.02385762333869934, -0.15162603557109833, 0.20061656832695007, 0.002198215341195464, -0.21337509155273438, 0.21164482831954956));
	r0 += mul(s0[8], min16float4x4(0.000952509930357337, 0.04966988041996956, -0.04265006259083748, 0.11159180104732513, -0.005724118556827307, -0.008602739311754704, -0.025619113817811012, -0.005755878519266844, 0.01646440103650093, 0.01478509046137333, -0.07330719381570816, -0.05084092915058136, -0.012677679769694805, -0.13394048810005188, 0.07478637248277664, -0.10630569607019424));
	r0 += mul(s1[0], min16float4x4(-0.023552799597382545, 0.01164418924599886, -0.049777641892433167, 0.07515313476324081, 0.5415225625038147, -0.6881905198097229, 0.15748214721679688, 0.011158755980432034, 0.16067974269390106, 0.07986215502023697, -0.05150071159005165, -0.02567962184548378, 0.0259613785892725, 0.6701669692993164, -0.0437999852001667, 0.0756911039352417));
	r0 += mul(s1[1], min16float4x4(1.09669828414917, -1.0105732679367065, 0.8683963418006897, -0.8261750340461731, -0.059936877340078354, 0.3492516875267029, -0.0016531087458133698, 0.1037847101688385, -0.026242420077323914, 0.3467368185520172, -0.06762739270925522, -0.038467615842819214, 0.05896018072962761, -0.27301478385925293, -0.009170513600111008, -0.11125528067350388));
	r0 += mul(s1[2], min16float4x4(-1.4980885982513428, 1.607566237449646, -1.0970290899276733, 1.1695512533187866, -0.0018855682574212551, 0.00038968323497101665, 1.9227570646762615e-06, -2.1197165551711805e-06, -0.019658537581562996, -0.018381159752607346, 0.002498979913070798, 7.933597885312338e-07, 0.0033762846142053604, -6.829538324382156e-05, -1.6813110050861724e-06, -4.476578851608792e-06));
	r0 += mul(s1[3], min16float4x4(0.11237473785877228, -0.056895662099123, 0.002422387944534421, -0.05125835910439491, 0.1829030066728592, -0.2475576102733612, 0.5022828578948975, -1.1442067623138428, -0.21154636144638062, 0.42697134613990784, -0.3197449743747711, -0.0026595399249345064, -0.10177978128194809, 0.009304393082857132, -0.44238969683647156, 0.22161924839019775));
	r0 += mul(s1[4], min16float4x4(1.3641740083694458, -1.6067768335342407, 1.261718511581421, -1.2281527519226074, -0.015328154899179935, 0.07834707200527191, -0.09154151380062103, 0.3452828824520111, -0.3671720027923584, -1.207443118095398, 0.8340450525283813, 0.3431943356990814, -0.02164660021662712, -0.013122640550136566, 0.032518669962882996, -0.21693666279315948));
	r0 += mul(s1[5], min16float4x4(-1.5577683448791504, 1.4287738800048828, -1.5222926139831543, 1.7693771123886108, 7.951763905111875e-07, -0.0010516783222556114, -4.3431071389932185e-05, 0.0006770709296688437, 0.057052429765462875, 0.17360129952430725, -0.09311508387327194, 0.11495386809110641, 0.00438172509893775, -0.006256541237235069, 0.006708345841616392, -0.00012478533608373255));
	r0 += mul(s1[6], min16float4x4(-0.0930902436375618, 0.16552376747131348, 0.028636835515499115, 0.07068900018930435, 0.0313812755048275, 0.007063725963234901, 0.05004754289984703, 0.1645299196243286, -0.10082894563674927, -0.06127046048641205, 0.30374178290367126, -0.012740072794258595, -0.008766625076532364, 0.008111339993774891, -0.015438352711498737, -0.015100373886525631));
	r0 += mul(s1[7], min16float4x4(1.7964668273925781, -1.4179275035858154, 2.0766711235046387, -2.0827479362487793, 0.0031034843996167183, -0.007791419047862291, 0.012426788918673992, -0.04627125337719917, 0.36482998728752136, 0.10361874103546143, -0.6369287371635437, 0.18067191541194916, -0.005912811495363712, -0.019192760810256004, -0.008274288848042488, -0.03308522701263428));
	r0 += mul(s1[8], min16float4x4(-1.1204185485839844, 0.8682882189750671, -1.3944894075393677, 1.175783634185791, 2.2880399228597526e-06, 4.279978384147398e-05, 3.21925945172552e-05, -0.0006970546673983335, -0.04026547074317932, 0.23267042636871338, 0.0016406291397288442, -0.5136712193489075, -0.00010920033673755825, 0.0017458612564951181, -0.004926948342472315, -0.004665779881179333));
	r0 += float4(-1.2303838836658088e-08, -8.162625242391641e-09, -1.34965336684445e-08, -7.071213836695733e-09);
	r0 = tanh(r0);
	down[gxy] = r0;
}
void Pass4(uint2 blockStart, uint3 tid) {
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	};
	float2 pos = (gxy + 0.5) * GetInputPt();
	float2 step = 8 * GetInputPt();
	hook(gxy, pos);
	gxy.x += 8u;
	pos.x += step.x;
	if (gxy.x < size.x || gxy.y < size.y) {
		hook(gxy, pos);
	}
	gxy.y += 8u;
	pos.y += step.y;
	if (gxy.x < size.x || gxy.y < size.y) {
		hook(gxy, pos);
	}
	gxy.x -= 8u;
	pos.x -= step.x;
	if (gxy.x < size.x || gxy.y < size.y) {
		hook(gxy, pos);
	}
}

//!DESC CuNNy-1x8-NVL-shuffle
//!PASS 5
//!STYLE PS
//!IN down, easu, INPUT
//!OUT OUTPUT
float4 Pass5(float2 pos) {
	float2 pt = float2(GetInputPt());
	const static float2x3 rgb2uv = {-0.169, -0.331, 0.5, 0.5, -0.419, -0.081};
	const static float3x3 yuv2rgb = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float4 r = 0.0;
	float2 size = float2(GetInputSize());
	float2 f = frac(pos * size);
	int2 i = int2(f * 2.0);
	r.r = down.SampleLevel(SP, (float2(0.5, 0.5) - f) * pt + pos, 0)[2*i.y + i.x];
	r.r += easu.SampleLevel(SP, pos, 0).r;
	r.a = 1.0;
	r.r = clamp(r, 0.0, 1.0);
	float2 uv = mul(rgb2uv, INPUT.SampleLevel(SL, pos, 0).rgb);
	float3 px = mul(yuv2rgb, float3(r.r, uv));
	return float4(px, 1.0);
}
