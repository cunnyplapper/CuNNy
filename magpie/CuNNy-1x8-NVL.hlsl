// CuNNy 1x8 NVL
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

//!MAGPIE EFFECT
//!VERSION 4

//!TEXTURE
Texture2D INPUT;

//!TEXTURE
//!WIDTH INPUT_WIDTH * 2
//!HEIGHT INPUT_HEIGHT * 2
Texture2D OUTPUT;

//!TEXTURE
//!WIDTH INPUT_WIDTH * 2
//!HEIGHT INPUT_HEIGHT * 2
//!FORMAT R16_FLOAT
Texture2D easu;

//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R16G16B16A16_FLOAT
Texture2D up_0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R16G16B16A16_FLOAT
Texture2D up_1;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R16G16B16A16_FLOAT
Texture2D conv1_0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R16G16B16A16_FLOAT
Texture2D conv1_1;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R16G16B16A16_FLOAT
Texture2D down;

// FSR mpv | modified
// Copyright (c) 2021 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// FidelityFX FSR v1.0.2 by AMD
// ported to mpv by agyild

//!PASS 1
//!STYLE PS
//!IN INPUT
//!OUT easu

float GetLuma(float3 rgb) {
	return dot(float3(0.299, 0.587, 0.114), rgb);
}

float APrxLoRcpF1(float a) {
	return asfloat(uint(0x7ef07ebb) - asuint(a));
}

float APrxLoRsqF1(float a) {
	return asfloat(uint(0x5f347d74) - (asuint(a) >> uint(1)));
}

float AMin3F1(float x, float y, float z) {

	return min(x, min(y, z));
}

float AMax3F1(float x, float y, float z) {
	return max(x, max(y, z));
}

void tap(inout float aC, inout float aW, float2 off, float2 dir, float2 len,
         float lob, float clp, float c){
	float2 v;
	v.x = (off.x * ( dir.x)) + (off.y * dir.y);
	v.y = (off.x * (-dir.y)) + (off.y * dir.x);
	v *= len;
	float d2 = v.x * v.x + v.y * v.y;
	d2 = min(d2, clp);
	float wB = float(2.0 / 5.0) * d2 + -1.0;

	float wA = lob * d2 + -1.0;
	wB *= wB;
	wA *= wA;
	wB = float(25.0 / 16.0) * wB + float(-(25.0 / 16.0 - 1.0));
	float w = wB * wA;
	aC += c * w;
	aW += w;
}

void set(inout float2 dir, inout float len, float2 pp, bool biS, bool biT,
         bool biU, bool biV, float lA, float lB, float lC, float lD, float lE){

	float w = 0.0;
	if (biS)
		w = (1.0 - pp.x) * (1.0 - pp.y);
	if (biT)
		w =        pp.x  * (1.0 - pp.y);
	if (biU)
		w = (1.0 - pp.x) *        pp.y;

	if (biV)
		w =        pp.x  *        pp.y;
	float dc = lD - lC;
	float cb = lC - lB;
	float lenX = max(abs(dc), abs(cb));
	lenX = APrxLoRcpF1(lenX);
	float dirX = lD - lB;
	lenX = clamp(abs(dirX) * lenX, 0.0, 1.0);
	lenX *= lenX;
	float ec = lE - lC;

	float ca = lC - lA;
	float lenY = max(abs(ec), abs(ca));
	lenY = APrxLoRcpF1(lenY);
	float dirY = lE - lA;
	lenY = clamp(abs(dirY) * lenY, 0.0, 1.0);
	lenY *= lenY;
	dir += float2(dirX, dirY) * w;
	len += dot(float2(w, w), float2(lenX, lenY));
}

float4 Pass1(float2 pos) {
	float2 pt = float2(GetInputPt());
	float2 size = float2(GetInputSize());
	float4 pix = float4(0.0, 0.0, 0.0, 1.0);
	float2 pp = pos * size - float2(0.5, 0.5);
	float2 fp = floor(pp);
	pp -= fp;
	float b = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2(0.5, -0.5)) * pt), 0).rgb);
	float c = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2(1.5, -0.5)) * pt), 0).rgb);
	float e = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2(-0.5, 0.5)) * pt), 0).rgb);
	float f = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2( 0.5, 0.5)) * pt), 0).rgb);
	float g = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2( 1.5, 0.5)) * pt), 0).rgb);
	float h = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2( 2.5, 0.5)) * pt), 0).rgb);
	float i = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2(-0.5, 1.5)) * pt), 0).rgb);
	float j = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2( 0.5, 1.5)) * pt), 0).rgb);
	float k = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2( 1.5, 1.5)) * pt), 0).rgb);
	float l = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2( 2.5, 1.5)) * pt), 0).rgb);
	float n = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2(0.5, 2.5) ) * pt), 0).rgb);
	float o = GetLuma(INPUT.SampleLevel(SP, float2((fp + float2(1.5, 2.5) ) * pt), 0).rgb);
	float4 bczzL = float4(b, c, 0.0, 0.0);
	float4 ijfeL = float4(i, j, f, e);
	float4 klhgL = float4(k, l, h, g);
	float4 zzonL = float4(0.0, 0.0, o, n);
	float bL = bczzL.x;
	float cL = bczzL.y;
	float iL = ijfeL.x;
	float jL = ijfeL.y;
	float fL = ijfeL.z;
	float eL = ijfeL.w;
	float kL = klhgL.x;
	float lL = klhgL.y;
	float hL = klhgL.z;
	float gL = klhgL.w;
	float oL = zzonL.z;
	float nL = zzonL.w;
	float2 dir = float2(0.0, 0.0);
	float len = 0.0;
	set(dir, len, pp, true, false, false, false, bL, eL, fL, gL, jL);
	set(dir, len, pp, false, true, false, false, cL, fL, gL, hL, kL);
	set(dir, len, pp, false, false, true, false, fL, iL, jL, kL, nL);
	set(dir, len, pp, false, false, false, true, gL, jL, kL, lL, oL);
	float2 dir2 = dir * dir;
	float dirR = dir2.x + dir2.y;
	bool zro = dirR < float(1.0 / 32768.0);
	dirR = APrxLoRsqF1(dirR);
	dirR = zro ? 1.0 : dirR;
	dir.x = zro ? 1.0 : dir.x;
	dir *= float2(dirR, dirR);
	len = len * 0.5;
	len *= len;
	float stretch = (dir.x * dir.x + dir.y * dir.y) * APrxLoRcpF1(max(abs(dir.x), abs(dir.y)));
	float2 len2 = float2(1.0 + (stretch - 1.0) * len, 1.0 + -0.5 * len);
	float lob = 0.5 + float((1.0 / 4.0 - 0.04) - 0.5) * len;
	float clp = APrxLoRcpF1(lob);
	float aC = 0.0;
	float aW = 0.0;
	tap(aC, aW, float2( 0.0,-1.0) - pp, dir, len2, lob, clp, bL);
	tap(aC, aW, float2( 1.0,-1.0) - pp, dir, len2, lob, clp, cL);
	tap(aC, aW, float2(-1.0, 1.0) - pp, dir, len2, lob, clp, iL);
	tap(aC, aW, float2( 0.0, 1.0) - pp, dir, len2, lob, clp, jL);
	tap(aC, aW, float2( 0.0, 0.0) - pp, dir, len2, lob, clp, fL);
	tap(aC, aW, float2(-1.0, 0.0) - pp, dir, len2, lob, clp, eL);
	tap(aC, aW, float2( 1.0, 1.0) - pp, dir, len2, lob, clp, kL);
	tap(aC, aW, float2( 2.0, 1.0) - pp, dir, len2, lob, clp, lL);
	tap(aC, aW, float2( 2.0, 0.0) - pp, dir, len2, lob, clp, hL);
	tap(aC, aW, float2( 1.0, 0.0) - pp, dir, len2, lob, clp, gL);
	tap(aC, aW, float2( 1.0, 2.0) - pp, dir, len2, lob, clp, oL);
	tap(aC, aW, float2( 0.0, 2.0) - pp, dir, len2, lob, clp, nL);
	pix.r = aC / aW;
	float min1 = min(AMin3F1(fL, gL, jL), kL);
	float max1 = max(AMax3F1(fL, gL, jL), kL);
	pix.r = clamp(pix.r, min1, max1);
	pix.r = clamp(pix.r, 0.0, 1.0);
	return pix;
}

//!DESC CuNNy-1x8-NVL-up
//!PASS 2
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT up_0, up_1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) dot(float3(0.299, 0.587, 0.114), O(INPUT, float2(x, y)).rgb)
void hook(uint2 gxy, float2 pos) {
	float2 pt = float2(GetInputPt());
	min16float s0_0 = l0(-1.0, -1.0);
	min16float s0_1 = l0(0.0, -1.0);
	min16float s0_2 = l0(1.0, -1.0);
	min16float s0_3 = l0(-1.0, 0.0);
	min16float s0_4 = l0(0.0, 0.0);
	min16float s0_5 = l0(1.0, 0.0);
	min16float s0_6 = l0(-1.0, 1.0);
	min16float s0_7 = l0(0.0, 1.0);
	min16float s0_8 = l0(1.0, 1.0);
	float4 r0 = 0.0;
	float4 r1 = 0.0;
	r0 += min16float4(-0.054820023477077484, -0.2920571267604828, -0.04748551547527313, -0.004693559370934963) * s0_0;
	r0 += min16float4(0.053705912083387375, -0.3458843529224396, -0.0028813141398131847, -0.0015312780160456896) * s0_1;
	r0 += min16float4(0.010579042136669159, -0.0304567813873291, 0.04020439833402634, 0.009771411307156086) * s0_2;
	r0 += min16float4(0.4306636154651642, 0.1455385833978653, 0.017602436244487762, 0.010792038403451443) * s0_3;
	r0 += min16float4(-0.4666585326194763, 0.17488735914230347, -0.41843703389167786, -0.41786447167396545) * s0_4;
	r0 += min16float4(0.03967307507991791, 0.037943869829177856, 0.37528854608535767, -0.0045715877786278725) * s0_5;
	r0 += min16float4(0.03243124857544899, 0.15022848546504974, 0.03955446183681488, -0.003922578413039446) * s0_6;
	r0 += min16float4(0.008463692851364613, 0.14525023102760315, -0.01114064734429121, 0.4169921576976776) * s0_7;
	r0 += min16float4(-0.04905854910612106, 0.009949792176485062, 0.010607154108583927, -0.005584361031651497) * s0_8;
	r0 += float4(-0.0016644868301227689, 0.0015777356456965208, 0.0006613464211113751, 0.00015682556841056794);
	up_0[gxy] = max(r0, 0.0);
	r1 += min16float4(-0.2250647097826004, -0.24951176345348358, 0.09061732143163681, 0.07935073226690292) * s0_0;
	r1 += min16float4(-0.04155300557613373, 0.10596523433923721, 0.3076161742210388, -0.06828856468200684) * s0_1;
	r1 += min16float4(-0.11785978078842163, 0.1595880687236786, -0.014437695033848286, 0.006027989089488983) * s0_2;
	r1 += min16float4(0.08035653084516525, 0.055578965693712234, -0.03603336960077286, 0.12573669850826263) * s0_3;
	r1 += min16float4(0.38090071082115173, -0.32294878363609314, -0.4503556489944458, -0.18943756818771362) * s0_4;
	r1 += min16float4(0.1303710788488388, 0.11375819891691208, 0.12134808301925659, 0.07741200178861618) * s0_5;
	r1 += min16float4(-0.1465606391429901, 0.22839830815792084, -0.04701072722673416, -0.06567437946796417) * s0_6;
	r1 += min16float4(-0.020121067762374878, 0.11306750029325485, 0.04375554621219635, 0.30922505259513855) * s0_7;
	r1 += min16float4(-0.03984402120113373, -0.2077992707490921, -0.014047539792954922, -0.068146251142025) * s0_8;
	r1 += float4(0.007897156290709972, -0.0026960549876093864, -0.0013987786369398236, -0.021781807765364647);
	up_1[gxy] = max(r1, 0.0);
}
void Pass2(uint2 blockStart, uint3 tid) {
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	};
	float2 pos = (gxy + 0.5) * GetInputPt();
	float2 step = 8 * GetInputPt();
	hook(gxy, pos);
}

//!DESC CuNNy-1x8-NVL-conv1
//!PASS 3
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN up_0, up_1
//!OUT conv1_0, conv1_1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) O(up_0, float2(x, y))
#define l1(x, y) O(up_1, float2(x, y))
void hook(uint2 gxy, float2 pos) {
	float2 pt = float2(GetInputPt());
	min16float4 s0_0 = l0(-1.0, -1.0);
	min16float4 s0_1 = l0(0.0, -1.0);
	min16float4 s0_2 = l0(1.0, -1.0);
	min16float4 s0_3 = l0(-1.0, 0.0);
	min16float4 s0_4 = l0(0.0, 0.0);
	min16float4 s0_5 = l0(1.0, 0.0);
	min16float4 s0_6 = l0(-1.0, 1.0);
	min16float4 s0_7 = l0(0.0, 1.0);
	min16float4 s0_8 = l0(1.0, 1.0);
	min16float4 s1_0 = l1(-1.0, -1.0);
	min16float4 s1_1 = l1(0.0, -1.0);
	min16float4 s1_2 = l1(1.0, -1.0);
	min16float4 s1_3 = l1(-1.0, 0.0);
	min16float4 s1_4 = l1(0.0, 0.0);
	min16float4 s1_5 = l1(1.0, 0.0);
	min16float4 s1_6 = l1(-1.0, 1.0);
	min16float4 s1_7 = l1(0.0, 1.0);
	min16float4 s1_8 = l1(1.0, 1.0);
	float4 r0 = 0.0;
	float4 r1 = 0.0;
	r0 += mul(s0_0, min16float4x4(-0.007711550686508417, -0.049342263489961624, -0.17273452877998352, -0.17274507880210876, 0.04992786422371864, -0.1364241987466812, -0.0957849994301796, 0.08457630127668381, -0.10377029329538345, 0.8533421754837036, 0.24830634891986847, -0.12258931994438171, -0.152624249458313, 0.6154379844665527, 0.48754242062568665, 0.0291892196983099));
	r0 += mul(s0_1, min16float4x4(-0.23179998993873596, -0.3136829435825348, -0.47904279828071594, 0.31615957617759705, -0.005904750432819128, -0.17174476385116577, 0.050780460238456726, 0.09652688354253769, 0.04212174192070961, 0.24933156371116638, 0.27547550201416016, 0.5027342438697815, 0.04621877148747444, 0.8821753263473511, 0.9242908358573914, 0.858207106590271));
	r0 += mul(s0_2, min16float4x4(0.00232261442579329, -0.2566039264202118, 0.27408698201179504, -0.22163215279579163, -0.03283698111772537, 0.020067919045686722, -0.23131510615348816, -0.2293257862329483, 0.11826194822788239, -0.11131216585636139, 0.17246226966381073, -0.05219903588294983, 0.1280866265296936, 0.24986915290355682, 0.8013296723365784, 0.2892354130744934));
	r0 += mul(s0_3, min16float4x4(-0.043117593973875046, -0.10561920702457428, 0.006882015615701675, -0.10457190871238708, 0.04676087945699692, -0.040945492684841156, 0.13656410574913025, 0.2195567637681961, 0.2900449335575104, -0.32128599286079407, -0.5276216864585876, 0.03824428468942642, -0.08104867488145828, -0.1222187802195549, 0.3375447988510132, 0.22877897322177887));
	r0 += mul(s0_4, min16float4x4(-1.9336044788360596, 0.45429307222366333, 0.31224656105041504, -0.07673794776201248, 0.0032274641562253237, -0.31938880681991577, -0.292978972196579, -0.5997492671012878, 0.3847721219062805, -0.23737788200378418, 0.10368239134550095, 0.1334107667207718, 0.5807671546936035, 0.26894277334213257, 0.353952556848526, 0.20226439833641052));
	r0 += mul(s0_5, min16float4x4(0.562568187713623, 0.3292882442474365, 0.07805757224559784, -0.13696745038032532, -0.12837177515029907, -0.17770208418369293, -0.22336776554584503, -0.21009542047977448, 0.12693798542022705, 0.009749725461006165, -0.28100717067718506, 0.17249524593353271, 0.47618913650512695, 0.11162016540765762, -0.5341925024986267, -0.27719646692276));
	r0 += mul(s0_6, min16float4x4(-0.05661534145474434, 0.09303727000951767, 0.03743267431855202, 0.3425094485282898, 0.01751544326543808, 0.01996712200343609, 0.07354290038347244, 0.060964617878198624, -0.054439645260572433, -0.13341081142425537, -0.15961800515651703, 0.35483118891716003, 0.12945644557476044, -0.09473831951618195, -0.02100803144276142, 0.5897971391677856));
	r0 += mul(s0_7, min16float4x4(0.01856297440826893, -0.05118745192885399, -0.13457295298576355, 0.007518440950661898, -0.10215754061937332, -0.04030889272689819, -0.21100331842899323, -0.821506142616272, -0.2354942262172699, 0.05151871219277382, 0.12176791578531265, -0.34372925758361816, 0.2671581208705902, -0.1624538004398346, -0.04006709158420563, -0.3354555666446686));
	r0 += mul(s0_8, min16float4x4(0.5644534826278687, -0.02248028852045536, -0.25674325227737427, 0.3231327533721924, -0.5410647988319397, 0.005582233890891075, 0.07244621962308884, 0.38449445366859436, 0.031892646104097366, -0.0018894795794039965, 0.12894856929779053, -0.045316800475120544, 0.19873173534870148, -0.0468733012676239, -0.2518570125102997, -0.11376456171274185));
	r0 += mul(s1_0, min16float4x4(-0.03929635509848595, -0.06860464811325073, 0.13371077179908752, -0.16360116004943848, 0.02573387883603573, -0.18869850039482117, -0.11494825780391693, 0.03977350890636444, -0.07859040796756744, 0.12813502550125122, 0.14108091592788696, 0.07915271073579788, 0.09975258260965347, -0.17857588827610016, -0.014014381915330887, -0.08398072421550751));
	r0 += mul(s1_1, min16float4x4(-0.0592096745967865, -0.11886949092149734, 0.05999249592423439, 0.02026432938873768, 0.05399719253182411, -0.1164555549621582, -0.14200101792812347, -0.794905424118042, 0.12645134329795837, -0.061961688101291656, -0.20922015607357025, -0.06251555681228638, 0.0589970164000988, -0.17179729044437408, -0.29143205285072327, -0.24215303361415863));
	r0 += mul(s1_2, min16float4x4(0.06710091978311539, 0.01090469490736723, 0.2509767413139343, 0.1645686775445938, -0.11159873753786087, 0.0688207745552063, -0.4662029445171356, 0.019737500697374344, -0.044776879251003265, -0.04758889228105545, 0.08831848204135895, -0.003781593171879649, -0.09327693283557892, 0.1002345159649849, -0.4755880534648895, 0.01856159046292305));
	r0 += mul(s1_3, min16float4x4(0.03513672947883606, -0.23023821413516998, -0.08854103833436966, -0.6257010698318481, 0.0037239540833979845, -0.04761587455868721, -0.11125738173723221, -0.7868746519088745, -0.11921799927949905, 0.13500066101551056, -0.2128542959690094, -0.12452393025159836, 0.07749508321285248, 0.43058982491493225, 0.09669613093137741, 0.09247768670320511));
	r0 += mul(s1_4, min16float4x4(-0.015972528606653214, -0.0018859460251405835, -0.5685542225837708, -0.10874517261981964, -0.262417197227478, -0.14804884791374207, -0.7471670508384705, -0.8484847545623779, -1.123482584953308, -0.13591249287128448, 0.618575394153595, -0.811241626739502, -0.2579115629196167, -0.15856651961803436, -0.04209592938423157, 0.020052829757332802));
	r0 += mul(s1_5, min16float4x4(0.07688036561012268, 0.04230409860610962, -0.5886482000350952, -0.03133229538798332, -0.27264583110809326, -0.02559618093073368, -0.18637388944625854, -0.10692695528268814, -0.21540005505084991, -0.15023931860923767, 0.10760463029146194, -0.1670311987400055, -0.037272483110427856, -0.07575274258852005, 0.4258389472961426, 0.011415757238864899));
	r0 += mul(s1_6, min16float4x4(0.046509917825460434, -0.08797891438007355, -0.0024752675089985132, -0.23880961537361145, 0.0009874537354335189, -0.041441768407821655, -0.14635790884494781, -0.6825968623161316, 0.11868866533041, 0.17718219757080078, -0.16305240988731384, -0.026738015934824944, 0.0389360636472702, 0.027636831626296043, 0.0697869136929512, -0.1586848795413971));
	r0 += mul(s1_7, min16float4x4(-0.04197480157017708, 0.06471671164035797, 0.15792891383171082, 0.0021909396164119244, -0.14622898399829865, 0.018157819285988808, 0.03813251852989197, -4.256772081134841e-05, 0.5509845018386841, -0.09303945302963257, -0.6700252294540405, -0.06143442541360855, 0.045395273715257645, -0.029667574912309647, 0.014002878218889236, 0.23143325746059418));
	r0 += mul(s1_8, min16float4x4(-0.039226483553647995, 0.03694132715463638, 0.07079160213470459, 0.1340709626674652, -0.17538166046142578, 0.004953417461365461, 0.1878238320350647, -0.2679068446159363, 0.3095393180847168, -0.02885567583143711, -0.09851941466331482, -0.14851625263690948, 0.07250761240720749, 0.017402537167072296, 0.16091561317443848, 0.08033210784196854));
	r0 += float4(-0.010246732272207737, -0.0008637912687845528, -0.0014950576005503535, -0.003957714419811964);
	conv1_0[gxy] = max(r0, 0.0);
	r1 += mul(s0_0, min16float4x4(-0.029752565547823906, 0.0013803922338411212, 0.08153698593378067, -0.2990878224372864, -0.07632127404212952, -0.09924380481243134, -0.061405979096889496, -0.15416501462459564, 0.07299409061670303, 0.18805405497550964, 0.034323550760746, -0.22002115845680237, 1.1520589590072632, 0.3269565999507904, 0.21135124564170837, 0.3442142903804779));
	r1 += mul(s0_1, min16float4x4(0.42867690324783325, 0.011119467206299305, -0.020548705011606216, -0.3154169023036957, -0.05332023277878761, 0.00010113588359672576, 0.0644666999578476, 0.3414336144924164, -0.0020057475194334984, 0.17239172756671906, -0.1986677497625351, -0.020443111658096313, 0.38307562470436096, 0.6438885927200317, 0.32141557335853577, 0.3605740964412689));
	r1 += mul(s0_2, min16float4x4(-0.5815477967262268, -0.15639252960681915, -0.01687394641339779, -0.48352837562561035, -0.024365520104765892, -0.007640129886567593, -0.026614995673298836, -0.2957479655742645, -0.11808349192142487, -0.10220281779766083, -0.08544086664915085, 0.05826735496520996, -1.053699254989624, 0.3209470510482788, -0.3175889849662781, 0.8342682123184204));
	r1 += mul(s0_3, min16float4x4(0.06391963362693787, -0.024686405435204506, 0.027216283604502678, 0.1318584382534027, 0.10402105003595352, -0.06613323837518692, -0.04093405604362488, -0.00993805006146431, -0.03530324250459671, 0.009783007204532623, 0.610893189907074, 0.12818081676959991, 0.10262740403413773, 0.25516340136528015, 0.7660160660743713, 0.24300752580165863));
	r1 += mul(s0_4, min16float4x4(0.6620932221412659, 0.09160765260457993, 0.10495342314243317, -0.22687554359436035, -1.1224384307861328, -0.3390943109989166, -0.1065971627831459, -0.34816208481788635, 0.087917760014534, 0.22032462060451508, -0.795208215713501, -0.5383779406547546, 0.3362855911254883, 1.176956295967102, 0.5918093919754028, -0.004492553416639566));
	r1 += mul(s0_5, min16float4x4(-0.7753416299819946, -0.06554673612117767, -0.013656975701451302, 0.13262362778186798, 0.4429222643375397, -0.2565094530582428, 0.15084680914878845, -0.27572524547576904, -0.10892236977815628, 0.009965954348444939, 0.09866995364427567, -0.36818480491638184, -0.33537453413009644, 0.5532976984977722, -0.3200623691082001, -0.21854788064956665));
	r1 += mul(s0_6, min16float4x4(-0.02132384479045868, 0.03239000216126442, 0.021753089502453804, 0.07693595439195633, -0.0169496089220047, 0.07033392786979675, 0.0071593825705349445, 0.10717017948627472, 0.21105051040649414, -0.03724569454789162, 0.03484363108873367, -0.024052035063505173, -0.051836516708135605, -0.20453256368637085, 0.13233132660388947, -0.023670900613069534));
	r1 += mul(s0_7, min16float4x4(-0.05661562830209732, -0.018745822831988335, 0.21632419526576996, 0.13819119334220886, -0.02626275084912777, -0.18018174171447754, -0.57488614320755, 0.013418168760836124, 0.02721681073307991, -0.09430558234453201, -0.1720569133758545, -0.003049649763852358, 0.07025934755802155, -1.2753121852874756, 0.20947793126106262, 0.045320287346839905));
	r1 += mul(s0_8, min16float4x4(-0.057996682822704315, 0.32166680693626404, 0.10315290838479996, 0.018804403021931648, 0.029195299372076988, -0.32533684372901917, 0.12732955813407898, 0.0073430719785392284, -0.00806881207972765, 0.011804808862507343, -0.05849764496088028, 0.09354256093502045, -0.04962170496582985, -0.031977176666259766, -0.013567987829446793, -0.08028644323348999));
	r1 += mul(s1_0, min16float4x4(0.11754821240901947, 0.06814984977245331, 0.06198051571846008, 0.03428507596254349, -0.1597370207309723, -0.04781925305724144, -0.028891650959849358, 0.20578604936599731, 0.033669643104076385, 0.09594764560461044, -0.024696798995137215, 0.13322314620018005, 0.01272953674197197, -0.14862921833992004, -0.17905505001544952, -0.028630075976252556));
	r1 += mul(s1_1, min16float4x4(0.07855192571878433, 0.035743292421102524, -0.02718132734298706, -1.245384931564331, -0.16693450510501862, -0.06289329379796982, 0.06798823177814484, -0.7882293462753296, -0.5437582731246948, -0.0942375436425209, -0.057228632271289825, -0.528637170791626, -0.399414986371994, -0.3970833420753479, 0.10611329227685928, -0.17961588501930237));
	r1 += mul(s1_2, min16float4x4(0.051300156861543655, 0.04710010066628456, -0.009173382073640823, -0.3794562518596649, 0.002359496196731925, 0.0494203083217144, -0.03437865152955055, -0.5683016777038574, 0.3124749958515167, 0.027019944041967392, 0.026268916204571724, 0.4988258183002472, 0.2940405309200287, 0.019845185801386833, 0.24428756535053253, 0.0815531462430954));
	r1 += mul(s1_3, min16float4x4(-0.12290214747190475, -0.02472463808953762, -0.08305169641971588, -0.13525696098804474, -0.021870164200663567, -0.009926513768732548, -0.0730939581990242, -0.3539567291736603, -0.171355202794075, 0.12057711184024811, 0.23118874430656433, 0.2641240060329437, 0.06600917130708694, -0.023871639743447304, -0.09277603775262833, 0.018579214811325073));
	r1 += mul(s1_4, min16float4x4(-0.15847964584827423, -0.12842169404029846, -0.05163149908185005, -0.32681113481521606, -0.17185749113559723, -0.21964924037456512, -0.3447569012641907, -0.572028636932373, 0.3609343469142914, 0.02343027852475643, -2.12823224067688, 0.2115723192691803, -0.020318493247032166, 0.2419460266828537, -0.337056964635849, -0.15764565765857697));
	r1 += mul(s1_5, min16float4x4(0.013297904282808304, -0.02478880062699318, 0.02932017296552658, 0.22790426015853882, 0.20076055824756622, -0.07173683494329453, 0.03283579647541046, 0.0672530010342598, 0.15171483159065247, -0.06670369952917099, -0.1440148502588272, 0.3193357288837433, 0.05691806972026825, 0.15350377559661865, 0.14138437807559967, -0.0426613949239254));
	r1 += mul(s1_6, min16float4x4(0.014865312725305557, -0.06069393455982208, -0.028772199526429176, 0.16640228033065796, -0.022336825728416443, -0.0796787366271019, -0.053580865263938904, -0.028847381472587585, -0.07607141882181168, 0.139155313372612, 0.2575285732746124, -0.15252889692783356, -0.10911877453327179, 0.15250267088413239, 0.12939435243606567, 0.16604331135749817));
	r1 += mul(s1_7, min16float4x4(-0.1260307878255844, -0.0376003161072731, -0.09137517958879471, 0.20227845013141632, 0.09544866532087326, -0.23757140338420868, -0.0798015147447586, -0.23765762150287628, -0.34750550985336304, -0.06046601012349129, 0.21411830186843872, -0.3748466968536377, -0.04068008065223694, -0.08721055835485458, 0.01658971607685089, 0.06032862141728401));
	r1 += mul(s1_8, min16float4x4(0.13525404036045074, -0.10402088612318039, 0.015274163335561752, -0.06566216051578522, 0.015079658478498459, 0.018603062257170677, 0.011206040158867836, -0.12272225320339203, -0.252153217792511, 0.05794018879532814, 0.11741794645786285, 0.03802243620157242, 0.11075890064239502, 0.0378572940826416, -0.030584093183279037, 0.08662164956331253));
	r1 += float4(-0.0038468826096504927, -0.0007361012976616621, -0.005323419347405434, -0.0021330793388187885);
	conv1_1[gxy] = max(r1, 0.0);
}
void Pass3(uint2 blockStart, uint3 tid) {
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	};
	float2 pos = (gxy + 0.5) * GetInputPt();
	float2 step = 8 * GetInputPt();
	hook(gxy, pos);
}

//!DESC CuNNy-1x8-NVL-down
//!PASS 4
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN conv1_0, conv1_1
//!OUT down
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) O(conv1_0, float2(x, y))
#define l1(x, y) O(conv1_1, float2(x, y))
void hook(uint2 gxy, float2 pos) {
	float2 pt = float2(GetInputPt());
	min16float4 s0_0 = l0(-1.0, -1.0);
	min16float4 s0_1 = l0(0.0, -1.0);
	min16float4 s0_2 = l0(1.0, -1.0);
	min16float4 s0_3 = l0(-1.0, 0.0);
	min16float4 s0_4 = l0(0.0, 0.0);
	min16float4 s0_5 = l0(1.0, 0.0);
	min16float4 s0_6 = l0(-1.0, 1.0);
	min16float4 s0_7 = l0(0.0, 1.0);
	min16float4 s0_8 = l0(1.0, 1.0);
	min16float4 s1_0 = l1(-1.0, -1.0);
	min16float4 s1_1 = l1(0.0, -1.0);
	min16float4 s1_2 = l1(1.0, -1.0);
	min16float4 s1_3 = l1(-1.0, 0.0);
	min16float4 s1_4 = l1(0.0, 0.0);
	min16float4 s1_5 = l1(1.0, 0.0);
	min16float4 s1_6 = l1(-1.0, 1.0);
	min16float4 s1_7 = l1(0.0, 1.0);
	min16float4 s1_8 = l1(1.0, 1.0);
	float4 r0 = 0.0;
	r0 += mul(s0_0, min16float4x4(0.24665740132331848, -0.12549011409282684, 0.0032265859190374613, -0.014817643910646439, 0.015633393079042435, -3.1510422559222206e-05, 0.00014121714048087597, -9.011464463526409e-09, -0.02255851775407791, -0.0017571644857525826, -0.020650653168559074, -0.010760223492980003, 0.011660538613796234, 0.033581022173166275, -0.027341190725564957, 0.017767200246453285));
	r0 += mul(s0_1, min16float4x4(0.06526108831167221, 0.3713751435279846, -0.10199599713087082, -0.24365036189556122, -0.0611802339553833, -0.00678669661283493, 0.011133965104818344, 0.005335934925824404, -0.0778823122382164, -0.003489771857857704, -0.0008436940843239427, 0.0014504939317703247, 0.15261855721473694, -0.2206951528787613, 0.04886549711227417, -0.07181470096111298));
	r0 += mul(s0_2, min16float4x4(0.0033498096745461226, 0.010518603958189487, -0.00476476363837719, -0.004353840835392475, 0.0015546982176601887, -0.0029802273493260145, -0.0032688623759895563, -0.002481024479493499, 0.07442200928926468, 0.031567517668008804, -0.010306935757398605, -0.010152937844395638, 0.3185918629169464, -0.6725711822509766, 0.14702296257019043, 0.004961950704455376));
	r0 += mul(s0_3, min16float4x4(0.07410256564617157, -0.12451664358377457, 0.18112365901470184, -0.239973247051239, -0.06713557988405228, -0.016591202467679977, 0.026194587349891663, 0.009144971147179604, -0.42880553007125854, 0.12528249621391296, 0.18573223054409027, 0.022151054814457893, 0.05466487631201744, -0.06658533960580826, 0.013010864146053791, -0.05238426476716995));
	r0 += mul(s0_4, min16float4x4(-0.22509720921516418, 0.1264646053314209, -0.02062801457941532, 0.745671272277832, -0.18074123561382294, -0.10755331069231033, 0.14801399409770966, 0.18407517671585083, -0.1243685930967331, -0.9966052770614624, 0.19452323019504547, 0.26526927947998047, -0.8417957425117493, 0.9082686901092529, -0.08438308537006378, 0.2776917815208435));
	r0 += mul(s0_5, min16float4x4(-0.002812215592712164, -0.020964214578270912, 0.005028944928199053, 0.00022707630705554038, -0.011664440855383873, -0.28849518299102783, 0.12068053334951401, 0.10599891096353531, -0.03229958936572075, -0.02988908439874649, 0.030828528106212616, -0.01699046790599823, 0.35160619020462036, -0.14068183302879333, 0.45798608660697937, -0.8397566676139832));
	r0 += mul(s0_6, min16float4x4(-0.0010155870113521814, -0.028569765388965607, 0.04992618039250374, 0.0023107167799025774, 0.026639334857463837, -0.012215097434818745, 0.02268768846988678, -0.030469780787825584, 0.1079050824046135, 0.11121968179941177, -0.4311272203922272, 0.07981951534748077, 0.06920027732849121, -0.07507781684398651, 0.11282539367675781, -0.0513019785284996));
	r0 += mul(s0_7, min16float4x4(0.02911549247801304, -0.01099903229624033, -0.008382060565054417, -0.07153360545635223, 0.1474226713180542, 0.2724141776561737, -0.630638599395752, 0.15088148415088654, -0.00974158477038145, 0.12556543946266174, 0.188210591673851, -0.18013134598731995, -0.003619152819737792, 0.19470906257629395, -0.7054580450057983, 0.5959483981132507));
	r0 += mul(s0_8, min16float4x4(-0.0005966339376755059, 0.0017799879424273968, -0.0006019699503667653, -0.0026116168592125177, 0.26282140612602234, -0.16651013493537903, -0.0564088448882103, -1.1049895286560059, 0.04800638556480408, -0.0041817184537649155, -0.08955787867307663, -0.13336247205734253, -0.11741538345813751, 0.10766713321208954, -0.053819235414266586, 0.20606385171413422));
	r0 += mul(s1_0, min16float4x4(-0.004072170238941908, 0.00018686424300540239, -0.008161136880517006, 0.004931537434458733, 0.13091158866882324, -0.11753280460834503, 0.048227839171886444, -0.03748151287436485, 0.017627816647291183, 0.03161356970667839, -0.03577582538127899, -0.00915069691836834, -0.07400208711624146, 0.0037345485761761665, 0.003625566139817238, 0.02756728045642376));
	r0 += mul(s1_1, min16float4x4(-0.006831084843724966, -0.12587472796440125, 0.053792208433151245, 0.03037933260202408, 0.4223293960094452, 0.7792986631393433, -0.23196549713611603, -0.11955785751342773, 0.22613397240638733, 0.09253241866827011, -0.10620196908712387, -0.064155213534832, 0.07069624215364456, -0.07430854439735413, -0.03401750698685646, -0.03125353902578354));
	r0 += mul(s1_2, min16float4x4(-0.0324350968003273, -0.01656327024102211, 0.020619016140699387, -0.0005607729544863105, -0.04181375727057457, -0.05504242703318596, 0.0037803167942911386, -0.0014563188888132572, -0.018396170809864998, -0.18705621361732483, 0.033708542585372925, 0.01905706152319908, 0.0012441384606063366, 0.07684622704982758, -0.0029541486874222755, -0.01540448609739542));
	r0 += mul(s1_3, min16float4x4(0.022435331717133522, -0.016242099925875664, 0.014829173684120178, -0.0063553061336278915, -0.004195199813693762, 0.07131831347942352, -0.14116933941841125, 0.017680354416370392, -0.037870146334171295, -0.013787563890218735, 0.0143867377191782, 0.019105546176433563, 0.2542816996574402, 0.002666990039870143, -0.10869082063436508, -0.09337793290615082));
	r0 += mul(s1_4, min16float4x4(-0.7520285248756409, 0.3116224408149719, -0.39645904302597046, 0.03487012907862663, -0.31933653354644775, -0.2088571935892105, 0.24519796669483185, 0.20048953592777252, 0.23281461000442505, -0.24886904656887054, 0.8922268748283386, -0.10132152587175369, -0.7637395262718201, 0.04460066184401512, 0.4951815903186798, 0.2915230095386505));
	r0 += mul(s1_5, min16float4x4(0.08298534154891968, -0.14288198947906494, 0.07131963223218918, 0.0671488419175148, -0.043992962688207626, 0.022653762251138687, 0.021951407194137573, 0.1655825674533844, -0.18501690030097961, 0.12159275263547897, -0.1712883561849594, 0.14135397970676422, 0.06288475543260574, -0.5304607152938843, 0.021962951868772507, 0.16134130954742432));
	r0 += mul(s1_6, min16float4x4(-0.01996280811727047, 0.019685868173837662, 0.0033095211256295443, -0.003647084813565016, -0.037441808730363846, 0.010969764553010464, -0.00858079083263874, 0.0020012608729302883, -8.281490590889007e-05, 0.0010333731770515442, -0.004451286979019642, -0.002431980101391673, 0.45020171999931335, 0.19577395915985107, -0.7684970498085022, 0.0060724131762981415));
	r0 += mul(s1_7, min16float4x4(0.06119509041309357, 0.0001568235456943512, -0.2117399126291275, 0.13038893043994904, 0.007332730572670698, -0.019235722720623016, 0.0032473024912178516, -0.03476253151893616, 0.00598351564258337, 0.010716499760746956, -0.07834900170564651, 0.009061983786523342, 0.3936557471752167, 0.6433013081550598, -0.06636882573366165, -0.8503521680831909));
	r0 += mul(s1_8, min16float4x4(0.15198664367198944, -0.08677881211042404, 0.09216191619634628, -0.26855599880218506, 0.01397004071623087, -0.007611593697220087, 0.0023117924574762583, 0.013569841161370277, -0.05628044530749321, 0.053648900240659714, -0.002151189837604761, 0.11156291514635086, -0.059459853917360306, 0.028437398374080658, -0.00769487489014864, 0.13340947031974792));
	r0 += float4(-1.0647026371657375e-08, -8.514428273542762e-09, -1.248915282303642e-08, -1.4507981482836385e-08);
	down[gxy] = tanh(r0);
}
void Pass4(uint2 blockStart, uint3 tid) {
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	};
	float2 pos = (gxy + 0.5) * GetInputPt();
	float2 step = 8 * GetInputPt();
	hook(gxy, pos);
}

//!DESC CuNNy-1x8-NVL-shuffle
//!PASS 5
//!STYLE PS
//!IN down, easu, INPUT
//!OUT OUTPUT
float4 Pass5(float2 pos) {
	float2 pt = float2(GetInputPt());
	const static float2x3 rgb2uv = {-0.169, -0.331, 0.5, 0.5, -0.419, -0.081};
	const static float3x3 yuv2rgb = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float4 r = 0.0;
	float2 size = float2(GetInputSize());
	float2 f = frac(pos * size);
	int2 i = int2(f * 2.0);
	r.r = down.SampleLevel(SP, (float2(0.5, 0.5) - f) * pt + pos, 0)[2*i.y + i.x];
	r.r += easu.SampleLevel(SP, pos, 0).r;
	r.a = 1.0;
	r.r = clamp(r, 0.0, 1.0);
	float2 uv = mul(rgb2uv, INPUT.SampleLevel(SL, pos, 0).rgb);
	float3 px = mul(yuv2rgb, float3(r.r, uv));
	return float4(px, 1.0);
}
