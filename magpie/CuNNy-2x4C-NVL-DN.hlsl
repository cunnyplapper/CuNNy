// CuNNy 2x4C BILINEAR CHROMA NVL DN
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

//!MAGPIE EFFECT
//!VERSION 3
//!OUTPUT_WIDTH INPUT_WIDTH * 2
//!OUTPUT_HEIGHT INPUT_HEIGHT * 2

//!TEXTURE
Texture2D INPUT;

//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D in_0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D conv1_0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D conv2_0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D out_0;

//!PASS 1
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-NVL-DN-in
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT in_0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) (dot(float3(0.8770148754119873, 1.4996901750564575, 0.42353740334510803), O(INPUT, float2(x, y)).rgb) + -2.381671905517578)
float4 f0(float2 pt, float2 pos, min16float s0_0, min16float s0_1, min16float s0_2, min16float s0_3, min16float s0_4, min16float s0_5, min16float s0_6, min16float s0_7, min16float s0_8) {
	min16float4 r = 0.0;
	r += min16float4(-0.025937916710972786, 0.07446420192718506, 0.06007172539830208, 0.018128061667084694) * s0_0;
	r += min16float4(0.36775583028793335, 0.0504145510494709, -0.0700712725520134, 0.015258828178048134) * s0_1;
	r += min16float4(0.011915451847016811, 0.10565422475337982, 0.010072361677885056, -0.026717619970440865) * s0_2;
	r += min16float4(0.0037736878730356693, 0.04876691848039627, -0.3466796875, -0.021421467885375023) * s0_3;
	r += min16float4(-0.37597593665122986, -0.5165454745292664, 0.02052338793873787, -0.3174701929092407) * s0_4;
	r += min16float4(0.014310721307992935, 0.10034145414829254, 0.05871472507715225, 0.3349609076976776) * s0_5;
	r += min16float4(0.018136756494641304, 0.11717496067285538, 0.06381642818450928, 0.008817941881716251) * s0_6;
	r += min16float4(-0.002858038293197751, 0.03556329011917114, 0.26855483651161194, 0.05108213052153587) * s0_7;
	r += min16float4(-0.011852136813104153, -0.017365576699376106, -0.0659167692065239, -0.06249527260661125) * s0_8;
	r += min16float4(0.002161929616704583, 0.0021341319661587477, 0.0008315913728438318, 0.0006614383892156184);
	return r;
}
void Pass1(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float s0_0 = l0(-1.0, -1.0);
	min16float s0_1 = l0(0.0, -1.0);
	min16float s0_2 = l0(1.0, -1.0);
	min16float s0_3 = l0(-1.0, 0.0);
	min16float s0_4 = l0(0.0, 0.0);
	min16float s0_5 = l0(1.0, 0.0);
	min16float s0_6 = l0(-1.0, 1.0);
	min16float s0_7 = l0(0.0, 1.0);
	min16float s0_8 = l0(1.0, 1.0);
	in_0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8);
}
//!PASS 2
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-NVL-DN-conv1
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN in_0
//!OUT conv1_0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) O(in_0, float2(x, y))
float4 f0(float2 pt, float2 pos, min16float4 s0_0, min16float4 s0_1, min16float4 s0_2, min16float4 s0_3, min16float4 s0_4, min16float4 s0_5, min16float4 s0_6, min16float4 s0_7, min16float4 s0_8, min16float4 s1_0, min16float4 s1_1, min16float4 s1_2, min16float4 s1_3, min16float4 s1_4, min16float4 s1_5, min16float4 s1_6, min16float4 s1_7, min16float4 s1_8) {
	min16float4 r = 0.0;
	r += mul(s0_0, min16float4x4(-0.10076205432415009, -0.043043989688158035, -0.17945772409439087, 0.03898013383150101, 0.07539635896682739, 0.05744624510407448, 0.0002764470409601927, 0.004892216995358467, -0.0793517455458641, -0.09854954481124878, 0.02556162141263485, 0.10522478818893433, 0.09108994156122208, -0.08551730960607529, -0.13924124836921692, 0.10500553250312805));
	r += mul(s0_1, min16float4x4(-0.0023428956046700478, -0.1272563487291336, 0.10275387018918991, 0.005152553785592318, 0.15366384387016296, -0.007041139528155327, 0.23142127692699432, -0.1985754370689392, -0.032646819949150085, -0.1586899310350418, 0.6493474245071411, 0.09684834629297256, -0.08975669741630554, 0.002491259016096592, -0.3325800895690918, 0.32324233651161194));
	r += mul(s0_2, min16float4x4(-0.03696020692586899, -0.02217407338321209, -0.16835716366767883, 0.12328813970088959, 0.011306092143058777, 0.13818326592445374, 0.04279038682579994, -0.04257221519947052, -0.2802739143371582, -0.01271695178002119, 0.06751356273889542, -0.04305468872189522, -0.055957645177841187, 0.027687719091773033, -0.09260769188404083, 0.17232605814933777));
	r += mul(s0_3, min16float4x4(-0.02388928271830082, -0.05603048577904701, 0.06350112706422806, 0.01765649951994419, -0.060793790966272354, -0.0052211349830031395, -0.09017747640609741, -0.13328802585601807, 0.03860302269458771, 0.01943383552134037, 0.05276079475879669, 0.13492901623249054, -0.03463493660092354, -0.2473589926958084, -0.0246004369109869, -0.21799075603485107));
	r += mul(s0_4, min16float4x4(0.003638830268755555, 0.06959819048643112, -0.12623947858810425, 0.3486327826976776, 0.0771040990948677, -0.1592312753200531, -0.03868868201971054, -0.40084904432296753, 0.3935617506504059, 0.25683584809303284, 0.15575990080833435, -0.053593408316373825, -0.17038649320602417, 0.12906481325626373, 0.12374518811702728, 0.4846396744251251));
	r += mul(s0_5, min16float4x4(-0.03233937919139862, 0.10173403471708298, -0.16162081062793732, 0.15573133528232574, 0.14609412848949432, -0.24752457439899445, 0.21914216876029968, -0.2447224110364914, -0.31549176573753357, 0.28006425499916077, 0.06600777804851532, 0.16874946653842926, -0.23001036047935486, -0.021428417414426804, -0.04554261639714241, 0.09679137915372849));
	r += mul(s0_6, min16float4x4(-0.2224278748035431, 0.04446486383676529, -0.022830773144960403, -0.43851974606513977, -0.06360258162021637, -0.07215707749128342, -0.11499053239822388, 0.010309433564543724, -0.051476385444402695, 0.007891257293522358, 0.11290426552295685, 0.05091853067278862, 0.9438666105270386, 0.3409821689128876, -0.01903783716261387, -0.04424942657351494));
	r += mul(s0_7, min16float4x4(0.12377641350030899, 0.10722696781158447, 0.15275883674621582, -0.35938575863838196, 0.16955232620239258, -0.22901038825511932, -0.3569938838481903, 0.05454787239432335, -0.02756117843091488, 0.22371987998485565, 0.0637212023139, -0.05691223591566086, -0.05595150962471962, 0.10046565532684326, 0.254149466753006, -0.3825177252292633));
	r += mul(s0_8, min16float4x4(0.05251973122358322, -0.1735713630914688, 0.0547957681119442, -0.09806220978498459, 0.19278256595134735, -0.025642357766628265, 0.02350541576743126, -0.10465246438980103, -0.11220943182706833, -0.005526503082364798, 0.13460305333137512, 0.021166084334254265, 0.03990551084280014, 0.03705334663391113, -0.1103314459323883, 0.04059528559446335));
	r += mul(s1_0, min16float4x4(0.0663747489452362, -0.11617179960012436, 0.07055647671222687, 0.019421763718128204, 0.01448096800595522, 0.04940345510840416, -0.04162764549255371, -0.1153731569647789, 0.06529414653778076, -0.020398123189806938, 0.06399409472942352, 0.13355094194412231, 0.015205920673906803, -0.2100764513015747, -0.07242771983146667, 0.09340788424015045));
	r += mul(s1_1, min16float4x4(-0.03782941773533821, 0.028025498613715172, -0.11808393150568008, 0.09106281399726868, -0.12890246510505676, 0.2568705081939697, -0.2775530219078064, -0.026178551837801933, -0.12736870348453522, 0.14984698593616486, -0.3786291182041168, 0.3904731869697571, 0.13553950190544128, -0.5168801546096802, 0.3011729419231415, 0.1692339926958084));
	r += mul(s1_2, min16float4x4(0.09468178451061249, -0.0852329432964325, 0.11255040764808655, 0.019966337829828262, -0.0038185662124305964, -0.07633253931999207, -0.0583503320813179, -0.03852076455950737, 0.13002321124076843, 0.011599716730415821, 0.03462277725338936, 0.19096878170967102, -0.05289502814412117, -0.14721615612506866, 0.10963187366724014, -0.004051343072205782));
	r += mul(s1_3, min16float4x4(0.10478707402944565, -0.1256444752216339, -0.4345897138118744, -0.11798045039176941, 0.09994291514158249, 0.11052995920181274, -0.04605063423514366, -0.045662835240364075, -0.07143008708953857, -0.04462827369570732, 0.10621383786201477, -0.026572072878479958, 0.5672397613525391, 0.32502540946006775, -0.18665668368339539, 0.25099503993988037));
	r += mul(s1_4, min16float4x4(0.14359654486179352, -0.45745593309402466, -0.07068241387605667, 0.08216126263141632, -0.12032050639390945, 0.026993559673428535, -0.23574198782444, -0.22417627274990082, -0.181972473859787, 0.155933678150177, 0.24477678537368774, 0.16287818551063538, 0.17156995832920074, -0.18687744438648224, 0.13317778706550598, 0.14403502643108368));
	r += mul(s1_5, min16float4x4(0.04401133581995964, -0.48534831404685974, 0.1303800344467163, 0.18628908693790436, -0.03170093148946762, 0.5632010698318481, -0.2509765625, -0.02466551773250103, -0.09921152889728546, -0.20726044476032257, 0.319115549325943, -0.006122017279267311, 0.0005776702892035246, -0.14082013070583344, 0.09805506467819214, 0.05879010260105133));
	r += mul(s1_6, min16float4x4(0.49313563108444214, 0.04990323260426521, -0.18918439745903015, 0.11532353609800339, -0.06566480547189713, -0.004815764259546995, -0.031603727489709854, -0.07298237830400467, 0.124409019947052, 0.08911089599132538, 0.0294804610311985, 0.015003608539700508, -0.5872119069099426, 0.3215867877006531, 0.3259817063808441, -0.27600017189979553));
	r += mul(s1_7, min16float4x4(1.2876243591308594, 0.7089821100234985, 0.11236494779586792, 0.10618096590042114, 0.13801032304763794, -0.44768768548965454, -0.4520050287246704, 0.05968492105603218, -0.06518552452325821, 0.19074200093746185, 0.3525358736515045, -0.030297348275780678, 0.07239681482315063, 0.31738415360450745, -0.0697249099612236, -0.13706955313682556));
	r += mul(s1_8, min16float4x4(-0.23649735748767853, 0.12188263982534409, -0.05043928697705269, -0.12133151292800903, -0.040979549288749695, 0.03766051307320595, -0.06861153990030289, 0.10069586336612701, 0.17492465674877167, 0.09172134101390839, -0.042764194309711456, 0.030098898336291313, -0.027519559487700462, -0.139188751578331, 0.08730880916118622, -0.06313170492649078));
	r += min16float4(0.0006971293478272855, -0.0017315993318334222, -0.004022377077490091, -0.0006634753081016243);
	return r;
}
void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float4 s0_0 = l0(-1.0, -1.0);
	min16float4 s0_1 = l0(0.0, -1.0);
	min16float4 s0_2 = l0(1.0, -1.0);
	min16float4 s0_3 = l0(-1.0, 0.0);
	min16float4 s0_4 = l0(0.0, 0.0);
	min16float4 s0_5 = l0(1.0, 0.0);
	min16float4 s0_6 = l0(-1.0, 1.0);
	min16float4 s0_7 = l0(0.0, 1.0);
	min16float4 s0_8 = l0(1.0, 1.0);
	min16float4 s1_0 = max(-s0_0, 0.0);
	min16float4 s1_1 = max(-s0_1, 0.0);
	min16float4 s1_2 = max(-s0_2, 0.0);
	min16float4 s1_3 = max(-s0_3, 0.0);
	min16float4 s1_4 = max(-s0_4, 0.0);
	min16float4 s1_5 = max(-s0_5, 0.0);
	min16float4 s1_6 = max(-s0_6, 0.0);
	min16float4 s1_7 = max(-s0_7, 0.0);
	min16float4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	conv1_0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 3
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-NVL-DN-conv2
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN conv1_0
//!OUT conv2_0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) O(conv1_0, float2(x, y))
float4 f0(float2 pt, float2 pos, min16float4 s0_0, min16float4 s0_1, min16float4 s0_2, min16float4 s0_3, min16float4 s0_4, min16float4 s0_5, min16float4 s0_6, min16float4 s0_7, min16float4 s0_8, min16float4 s1_0, min16float4 s1_1, min16float4 s1_2, min16float4 s1_3, min16float4 s1_4, min16float4 s1_5, min16float4 s1_6, min16float4 s1_7, min16float4 s1_8) {
	min16float4 r = 0.0;
	r += mul(s0_0, min16float4x4(-0.04972332343459129, -0.09008153527975082, -0.009380203671753407, -0.11305675655603409, -0.05310029909014702, -0.005833422299474478, 0.05830811336636543, -0.0422399640083313, 0.06283186376094818, -0.06371629983186722, 0.03764548525214195, -0.14210493862628937, 0.03055853769183159, -0.03186389431357384, -9.41026009968482e-05, -0.13264451920986176));
	r += mul(s0_1, min16float4x4(-0.0412701778113842, 0.033899009227752686, -0.004008833318948746, -0.04087381809949875, -0.01669558696448803, -0.03270689398050308, -0.14403986930847168, 0.18257887661457062, 0.1170402318239212, -0.05272179841995239, -0.32492315769195557, 0.15480126440525055, -0.03768392652273178, 0.08540593087673187, -0.004837035201489925, -0.029984446242451668));
	r += mul(s0_2, min16float4x4(-0.10179748386144638, -0.04477814957499504, -0.06441047042608261, 0.04089396819472313, -0.03461797162890434, 0.004599354229867458, 0.022334977984428406, 0.021415594965219498, 0.019328905269503593, -0.0787099227309227, -0.04848131537437439, -0.18606851994991302, 0.014093976467847824, 0.0587279312312603, 0.05821405351161957, -0.04218702018260956));
	r += mul(s0_3, min16float4x4(0.10207477957010269, 0.10530844330787659, -0.07277790457010269, 0.12831217050552368, 0.28768569231033325, 0.04115406423807144, -0.055330317467451096, -0.45532411336898804, 0.060512617230415344, 0.12063413113355637, -0.0639563798904419, 0.3016204237937927, 0.06580713391304016, -0.05759025737643242, 0.24843324720859528, -0.7167969942092896));
	r += mul(s0_4, min16float4x4(0.0043634166941046715, -0.08714532852172852, -0.09789708256721497, 0.31486621499061584, -0.2212301343679428, -0.027830777689814568, -0.4276372492313385, -0.1161264181137085, 0.5616417527198792, 0.42019525170326233, 0.8616235852241516, -0.013317529112100601, 0.006106385961174965, 0.3583976924419403, -0.22290141880512238, 0.35634151101112366));
	r += mul(s0_5, min16float4x4(-0.05080089718103409, 0.03503243625164032, -0.02027127891778946, 0.08652684092521667, 0.1687658131122589, 0.19863232970237732, 0.11475139856338501, -0.021512361243367195, -0.02887185662984848, 0.009235521778464317, -0.17144639790058136, -0.03211631998419762, -0.03979118540883064, 0.13916024565696716, 0.029331253841519356, 0.06531552970409393));
	r += mul(s0_6, min16float4x4(-0.04925394430756569, -0.04285682737827301, 0.04814532399177551, 0.03756370767951012, 0.12225670367479324, 0.0948835238814354, -0.08137918263673782, -0.08325353264808655, -0.12231603264808655, -0.11017388850450516, 0.04278457537293434, 0.07635726034641266, 0.16657637059688568, 0.16250455379486084, -0.1450393944978714, -0.11839524656534195));
	r += mul(s0_7, min16float4x4(0.037363819777965546, 0.08129872381687164, 0.18606241047382355, -0.014488877728581429, -0.15606795251369476, -0.20867469906806946, -0.17672424018383026, 0.06164628267288208, 0.04071580991148949, 0.12580807507038116, 0.17511260509490967, -0.020011305809020996, 0.06446923315525055, -0.2646486759185791, 0.05033405125141144, -0.017968179658055305));
	r += mul(s0_8, min16float4x4(0.0048350016586482525, -0.00566234951838851, 0.008020053617656231, -0.007546306122094393, 0.02337944693863392, 0.054557137191295624, 0.04553030803799629, 0.0031597851775586605, 0.07971453666687012, 0.015973925590515137, 0.027800247073173523, -0.028147945180535316, 0.05217234790325165, 0.0482034869492054, 0.008392369374632835, 0.03418143093585968));
	r += mul(s1_0, min16float4x4(-0.2893579602241516, -0.2528970241546631, -0.010030344128608704, -0.0862550437450409, 0.028242241591215134, 0.037212666124105453, -0.05063894763588905, 0.17029982805252075, -0.14119544625282288, -0.1042480617761612, 0.012637212872505188, -0.041996873915195465, 0.08269248157739639, 0.06323599815368652, -0.022076424211263657, 0.13866081833839417));
	r += mul(s1_1, min16float4x4(0.8027697205543518, 1.1372103691101074, 0.4983590543270111, 0.14039136469364166, 0.07836694270372391, 0.037828829139471054, 0.09301740676164627, -0.058608103543519974, 0.32099905610084534, 0.3332188129425049, 0.10316414386034012, 0.11533231288194656, -0.260024756193161, -0.37011730670928955, -0.03779660537838936, -0.08380570262670517));
	r += mul(s1_2, min16float4x4(0.0025890283286571503, -0.07781379669904709, -0.06390237808227539, -0.028352264314889908, -0.021805277094244957, -0.07780148833990097, -0.03625020757317543, 0.00949124712496996, -0.06325928866863251, -0.14699284732341766, -0.027667222544550896, -0.0532006174325943, 0.01465134508907795, -0.013417224399745464, -0.008758957497775555, 0.04300031438469887));
	r += mul(s1_3, min16float4x4(-0.06918058544397354, -0.1938447654247284, -0.2485153079032898, -0.006403896026313305, 0.011288460344076157, 0.13882750272750854, -0.06469833850860596, 0.684983491897583, 0.09183292090892792, -0.082766592502594, 0.0006782920099794865, -0.420108437538147, -0.09474679827690125, 0.03883130103349686, 0.13621638715267181, 0.22218789160251617));
	r += mul(s1_4, min16float4x4(0.1198141798377037, 0.188190758228302, 0.4248073995113373, -0.19998657703399658, 0.43464937806129456, 0.05828002095222473, 0.26576295495033264, -0.35213616490364075, -0.41043809056282043, -0.02389657311141491, 0.01712592877447605, -0.15801474452018738, 0.1936214566230774, 0.18310311436653137, 0.5034822821617126, -0.15940114855766296));
	r += mul(s1_5, min16float4x4(-0.09162057936191559, -0.08625750243663788, -0.061513762921094894, 0.031184474006295204, 0.07753404229879379, -0.019289620220661163, 0.056384261697530746, -0.07562613487243652, -0.03491971641778946, 0.07491032779216766, -0.06643721461296082, 0.10167961567640305, -0.053784534335136414, -0.12181665748357773, 0.046915408223867416, -0.11258015036582947));
	r += mul(s1_6, min16float4x4(-0.013107556849718094, 0.002690772293135524, 0.01549302227795124, -0.0391116738319397, -0.3234616219997406, -0.311522513628006, 0.09183444827795029, 0.17826567590236664, 0.1015952005982399, 0.12277067452669144, -0.01126142032444477, -0.09547101706266403, -0.09938115626573563, -0.06575002521276474, 0.041366096585989, 0.06228362396359444));
	r += mul(s1_7, min16float4x4(-0.07601849734783173, -0.13325446844100952, -0.12475608289241791, 0.02071288973093033, -0.020688138902187347, 0.26660171151161194, 0.01445549726486206, 0.06467299908399582, -0.037000834941864014, -0.2228384166955948, -0.19031193852424622, -0.027077792212367058, 0.23081830143928528, 0.21081854403018951, 0.06810502707958221, -0.10769735276699066));
	r += mul(s1_8, min16float4x4(0.017002621665596962, 0.004696917720139027, 0.0571187362074852, 0.003519166726619005, -0.031618595123291016, -0.0015973657136783004, -0.003888312028720975, -0.0016257405513897538, -0.01408200990408659, -0.09881322830915451, 0.05530285835266113, 0.0032765225041657686, -0.08953915536403656, -0.15472528338432312, -0.05797257646918297, -0.007433002348989248));
	r += min16float4(0.0054129958152771, 0.005264881532639265, 0.0025025061331689358, -0.004955383017659187);
	return r;
}
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float4 s0_0 = l0(-1.0, -1.0);
	min16float4 s0_1 = l0(0.0, -1.0);
	min16float4 s0_2 = l0(1.0, -1.0);
	min16float4 s0_3 = l0(-1.0, 0.0);
	min16float4 s0_4 = l0(0.0, 0.0);
	min16float4 s0_5 = l0(1.0, 0.0);
	min16float4 s0_6 = l0(-1.0, 1.0);
	min16float4 s0_7 = l0(0.0, 1.0);
	min16float4 s0_8 = l0(1.0, 1.0);
	min16float4 s1_0 = max(-s0_0, 0.0);
	min16float4 s1_1 = max(-s0_1, 0.0);
	min16float4 s1_2 = max(-s0_2, 0.0);
	min16float4 s1_3 = max(-s0_3, 0.0);
	min16float4 s1_4 = max(-s0_4, 0.0);
	min16float4 s1_5 = max(-s0_5, 0.0);
	min16float4 s1_6 = max(-s0_6, 0.0);
	min16float4 s1_7 = max(-s0_7, 0.0);
	min16float4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	conv2_0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 4
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-NVL-DN-out
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN conv2_0
//!OUT out_0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) O(conv2_0, float2(x, y))
float4 f0(float2 pt, float2 pos, min16float4 s0_0, min16float4 s0_1, min16float4 s0_2, min16float4 s0_3, min16float4 s0_4, min16float4 s0_5, min16float4 s0_6, min16float4 s0_7, min16float4 s0_8, min16float4 s1_0, min16float4 s1_1, min16float4 s1_2, min16float4 s1_3, min16float4 s1_4, min16float4 s1_5, min16float4 s1_6, min16float4 s1_7, min16float4 s1_8) {
	min16float4 r = 0.0;
	r += mul(s0_0, min16float4x4(-0.2495204508304596, -0.07864594459533691, -0.033250950276851654, 0.036531850695610046, 0.32539936900138855, 0.09651068598031998, 0.03144190460443497, -0.05705040320754051, -0.23647458851337433, -0.11456691473722458, -0.018009820953011513, 0.04593665152788162, -0.12939436733722687, -0.02726827561855316, -0.03896540775895119, 0.02239891327917576));
	r += mul(s0_1, min16float4x4(-0.05871197208762169, -0.17889034748077393, 0.021072864532470703, 0.020812934264540672, -0.08908355236053467, 0.12408982962369919, 0.024923181161284447, 0.06593693792819977, 0.35474470257759094, 0.13325081765651703, -0.07695025950670242, -0.24037660658359528, 0.23877255618572235, 0.05327771231532097, -0.015592092648148537, -0.09614130854606628));
	r += mul(s0_2, min16float4x4(0.03869539871811867, 0.06663203984498978, 0.033567819744348526, 0.03767397999763489, -0.012087216600775719, -0.025206103920936584, -0.013216054998338223, 0.00020412886806298047, -0.021296555176377296, -0.0365411676466465, -0.026104982942342758, -0.06277886778116226, -0.021423837170004845, 0.06421375274658203, 0.004315957892686129, 0.0013332547387108207));
	r += mul(s0_3, min16float4x4(0.06615602225065231, 0.03390428423881531, -0.29493942856788635, -0.18921120464801788, -0.09555283188819885, 0.012203945778310299, 0.40727484226226807, 0.22175228595733643, -0.005297881085425615, 0.016999004408717155, -0.22998619079589844, -0.14502207934856415, 0.012409534305334091, 0.08521007746458054, -0.18875782191753387, -0.08873502165079117));
	r += mul(s0_4, min16float4x4(0.10346351563930511, 0.25292980670928955, 0.20988616347312927, 0.12196921557188034, -0.10131559520959854, -0.35913845896720886, -0.35999107360839844, -0.238772913813591, -0.02060382068157196, 0.057784292846918106, 0.43828341364860535, 0.4286891222000122, 0.09956495463848114, -0.3826291561126709, 0.6035163998603821, 0.0958431139588356));
	r += mul(s0_5, min16float4x4(0.021013006567955017, 0.07944364100694656, -0.006701193284243345, 0.0979020968079567, -0.0154849449172616, -0.04884561523795128, 0.031058557331562042, -0.023954782634973526, -0.00877865869551897, -0.06710914522409439, 0.02374706044793129, -0.004221297334879637, -0.029736826196312904, 0.15003401041030884, -0.04050794243812561, 0.20685723423957825));
	r += mul(s0_6, min16float4x4(-0.018239879980683327, -0.04162563756108284, -0.010908165946602821, 0.011858038604259491, 0.027310574427247047, 0.027995049953460693, 0.023990605026483536, 0.028747938573360443, 0.0012704891851171851, 0.0017836799379438162, -0.0063993860967457294, -0.006209318060427904, -0.036971528083086014, -0.016353828832507133, 0.08204729110002518, 0.10180643945932388));
	r += mul(s0_7, min16float4x4(-0.013766470365226269, 0.01580931432545185, -0.09308282285928726, -0.059209875762462616, -0.0142115643247962, -0.02997002564370632, 0.03181944787502289, -0.03131450340151787, -0.011964552104473114, -0.011631282977759838, -0.008209792897105217, 0.005098788533359766, -0.03137333691120148, -0.021199136972427368, -0.36825186014175415, -0.3427739143371582));
	r += mul(s0_8, min16float4x4(0.036448635160923004, 0.04717932641506195, 0.018746059387922287, 0.01727226749062538, -0.013210988603532314, -0.024108074605464935, -0.03479043021798134, -0.05188022926449776, -0.012581504881381989, -0.00606323080137372, -0.018740123137831688, -0.011890174821019173, 0.00946213398128748, 0.09916798770427704, -0.032708991318941116, 0.029627768322825432));
	r += mul(s1_0, min16float4x4(0.2948271334171295, 0.03991396725177765, 0.05410461500287056, -0.005397896748036146, -0.2919926643371582, -0.13613994419574738, -0.030015351250767708, 0.006291388068348169, 0.22627820074558258, 0.08422412723302841, -0.0065074097365140915, -0.06263935565948486, 0.13330049812793732, 0.04553401842713356, 0.001235709059983492, -0.025085950270295143));
	r += mul(s1_1, min16float4x4(0.05379338189959526, 0.1401366889476776, -0.08367011696100235, -0.033703483641147614, -0.08955886214971542, -0.08937212079763412, 0.06116689369082451, -0.04012750834226608, -0.13431784510612488, 0.16874465346336365, 0.06273947656154633, 0.11052285879850388, -0.24485306441783905, -0.04337206482887268, 0.013379658572375774, 0.1115710437297821));
	r += mul(s1_2, min16float4x4(-0.10276912152767181, 0.0051277498714625835, -0.06322090327739716, -0.0900397002696991, 0.06009320542216301, 0.06041978299617767, 0.031189724802970886, 0.03137101233005524, 0.02629266493022442, -0.05727287009358406, 0.06818816065788269, 0.11908992379903793, -0.0283821914345026, -0.0624779611825943, -0.017100516706705093, -0.012851336970925331));
	r += mul(s1_3, min16float4x4(0.008258013986051083, -0.08955152332782745, 0.33559393882751465, 0.1499006748199463, 0.04209760203957558, 0.044556230306625366, -0.3762124180793762, -0.2939141094684601, 0.027856891974806786, -0.08276718854904175, 0.30175718665122986, 0.08002634346485138, -0.08572544157505035, -0.04432777687907219, 0.16455796360969543, 0.10424809157848358));
	r += mul(s1_4, min16float4x4(-0.9064529538154602, -0.0997999757528305, 0.05424113571643829, -0.07763095945119858, 0.5488281846046448, 0.7390848398208618, -0.3740389943122864, 0.47184309363365173, -0.22336284816265106, 0.06349048018455505, -0.8652383685112, -0.02922165021300316, 0.28617408871650696, -0.0005726086674258113, -0.38040032982826233, -0.3525405824184418));
	r += mul(s1_5, min16float4x4(0.025821970775723457, -0.36426982283592224, 0.004715361632406712, 0.5261649489402771, 0.14305874705314636, 0.03630642220377922, 0.035683661699295044, -0.4678265452384949, 0.08799430727958679, 0.14695821702480316, 0.07166092842817307, -0.306383341550827, -0.14207755029201508, 0.010154582560062408, -0.017422320321202278, 0.0053034271113574505));
	r += mul(s1_6, min16float4x4(0.012900559231638908, 0.02737533487379551, 0.016327990218997, -0.044039495289325714, 0.0022382002789527178, -0.008175675757229328, -0.07408715784549713, -0.028997108340263367, 0.02257297746837139, -0.012064940296113491, 0.03820997104048729, -0.030201159417629242, 0.01989614963531494, 0.012237323448061943, -0.06572389602661133, -0.04455608129501343));
	r += mul(s1_7, min16float4x4(0.05457441881299019, -0.07447874546051025, 0.048709675669670105, 0.2822156250476837, -0.012132331728935242, 0.015817051753401756, 0.09540637582540512, -0.057212527841329575, -0.005884210579097271, -0.01321004144847393, 0.1115851178765297, 0.09584285318851471, 0.019502276554703712, 0.049090608954429626, 0.3896643817424774, 0.27832040190696716));
	r += mul(s1_8, min16float4x4(0.08860600739717484, 0.06617066264152527, -0.025761323049664497, -0.31708696484565735, -0.035337645560503006, -0.0540786050260067, 0.11488589644432068, 0.13984805345535278, 0.0034637805074453354, -0.0447734035551548, 0.026890812441706657, 0.04014386236667633, 0.023161696270108223, -0.07738858461380005, -0.008227229118347168, -0.05754345655441284));
	r += min16float4(0.0002057901001535356, 0.0007218256941996515, -0.0006545642390847206, -0.0001556084316689521);
	return tanh(r);
}
void Pass4(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float4 s0_0 = l0(-1.0, -1.0);
	min16float4 s0_1 = l0(0.0, -1.0);
	min16float4 s0_2 = l0(1.0, -1.0);
	min16float4 s0_3 = l0(-1.0, 0.0);
	min16float4 s0_4 = l0(0.0, 0.0);
	min16float4 s0_5 = l0(1.0, 0.0);
	min16float4 s0_6 = l0(-1.0, 1.0);
	min16float4 s0_7 = l0(0.0, 1.0);
	min16float4 s0_8 = l0(1.0, 1.0);
	min16float4 s1_0 = max(-s0_0, 0.0);
	min16float4 s1_1 = max(-s0_1, 0.0);
	min16float4 s1_2 = max(-s0_2, 0.0);
	min16float4 s1_3 = max(-s0_3, 0.0);
	min16float4 s1_4 = max(-s0_4, 0.0);
	min16float4 s1_5 = max(-s0_5, 0.0);
	min16float4 s1_6 = max(-s0_6, 0.0);
	min16float4 s1_7 = max(-s0_7, 0.0);
	min16float4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	out_0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 5
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-NVL-DN-shuffle
//!STYLE PS
//!IN out_0, INPUT
float4 Pass5(float2 pos) {
	float2 pt = float2(GetInputPt());
	const static float3x3 rgb2yuv = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081};
	const static float3x3 yuv2rgb = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float4 r = 0.0;
	float2 size = float2(GetInputSize());
	float2 f = frac(pos * size);
	float3 yuv = mul(rgb2yuv, INPUT.SampleLevel(SL, pos, 0).rgb);
	int2 i = int2(f * 2.0);
	r.r = out_0.SampleLevel(SP, (float2(0.5, 0.5) - f) * pt + pos, 0)[2*i.y + i.x];
	r.r += yuv.r;
	r.a = 1.0;
	r.r = clamp(r, 0.0, 1.0);
	float3 px = mul(yuv2rgb, float3(r.r, yuv.yz));
	return float4(px, 1.0);
}
