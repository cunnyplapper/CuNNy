// CuNNy 2x4C BILINEAR CHROMA DS NVL
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

//!MAGPIE EFFECT
//!VERSION 3
//!OUTPUT_WIDTH INPUT_WIDTH * 2
//!OUTPUT_HEIGHT INPUT_HEIGHT * 2

//!TEXTURE
Texture2D INPUT;


//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D in_0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D conv1_0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D conv2_0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D out_0;

//!PASS 1
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-DS-NVL-in
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT in_0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) (dot(float3(0.4949652850627899, 0.9485184550285339, 0.21538716554641724), O(INPUT, float2(x, y)).rgb) + -1.1150093078613281)
float4 f0(float2 pt, float2 pos, min16float s0_0, min16float s0_1, min16float s0_2, min16float s0_3, min16float s0_4, min16float s0_5, min16float s0_6, min16float s0_7, min16float s0_8) {
	min16float4 r = 0.0;
	r += min16float4(0.0151735190, -0.0430908427, -0.0057974816, -0.1606256366) * s0_0;
	r += min16float4(-0.5996093750, 0.0433832854, 0.3283467889, 0.1332066357) * s0_1;
	r += min16float4(0.5589051247, 0.0293413680, -0.5722654462, 0.0130280182) * s0_2;
	r += min16float4(-0.0480042286, 0.1117704734, -0.2775327563, 0.3701152205) * s0_3;
	r += min16float4(0.1420259774, -0.2143554091, 0.6422863007, 0.2220991254) * s0_4;
	r += min16float4(-0.0808395296, 0.0737885609, 0.0769086555, -0.0783165842) * s0_5;
	r += min16float4(0.0329481661, 0.0428486355, -0.0447994024, 0.0867156908) * s0_6;
	r += min16float4(0.0632376671, -0.3236753643, -0.1986207962, -0.6586490273) * s0_7;
	r += min16float4(-0.0821992829, 0.0119143100, 0.0525598451, 0.0749505162) * s0_8;
	r += min16float4(0.0001295595575356856, -0.00173832883592695, -0.0013772373786196113, 0.002234430518001318);
	return r;
}
void Pass1(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float s0_0 = l0(-1.0, -1.0);
	min16float s0_1 = l0(0.0, -1.0);
	min16float s0_2 = l0(1.0, -1.0);
	min16float s0_3 = l0(-1.0, 0.0);
	min16float s0_4 = l0(0.0, 0.0);
	min16float s0_5 = l0(1.0, 0.0);
	min16float s0_6 = l0(-1.0, 1.0);
	min16float s0_7 = l0(0.0, 1.0);
	min16float s0_8 = l0(1.0, 1.0);
	in_0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8);
}
//!PASS 2
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-DS-NVL-conv1
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN in_0
//!OUT conv1_0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) O(in_0, float2(x, y))
float4 f0(float2 pt, float2 pos, min16float4 s0_0, min16float4 s0_1, min16float4 s0_2, min16float4 s0_3, min16float4 s0_4, min16float4 s0_5, min16float4 s0_6, min16float4 s0_7, min16float4 s0_8, min16float4 s1_0, min16float4 s1_1, min16float4 s1_2, min16float4 s1_3, min16float4 s1_4, min16float4 s1_5, min16float4 s1_6, min16float4 s1_7, min16float4 s1_8) {
	min16float4 r = 0.0;
	r += mul(s0_0, min16float4x4(-0.0867370293, 0.0000332648, 0.0487699732, -0.1979221851, 0.0961812958, -0.0548471510, -0.0883141756, 0.1449405253, -0.0887731016, 0.0055416198, 0.0645137876, 0.0228660796, -0.0685138032, 0.0774599463, 0.0079961112, 0.0181001779));
	r += mul(s0_1, min16float4x4(0.1675172001, 0.1284193695, -0.0093366234, 0.2017341405, 0.0919825658, 0.3306449056, 0.3502118587, 0.3539310992, 0.2426440865, 0.2416996211, 0.0037010319, 0.3741043508, -0.0928090364, 0.0932605043, -0.1012975946, 0.3330082595));
	r += mul(s0_2, min16float4x4(-0.0648990348, -0.1391687989, 0.0261255652, -0.2381943613, 0.3545095623, 0.1538565904, 0.1160108671, -0.1744360477, -0.0776163414, -0.1342771500, -0.0007744564, -0.3115223646, -0.2502416074, 0.0296068415, -0.1538105756, 0.0437729061));
	r += mul(s0_3, min16float4x4(-0.3727702498, -0.1558564901, -0.1049591899, 0.1177406684, -0.1139951721, -0.1360413432, 0.0443687439, -0.3131183386, -0.0681174919, -0.1655209363, -0.1214176118, -0.1376237422, -0.0575507432, -0.0397542641, -0.2468028069, 0.0435029343));
	r += mul(s0_4, min16float4x4(-0.5820791125, -0.2493917942, -0.3759758174, -0.1054754555, 0.0971863717, 0.2978808880, 0.1690647155, 0.0342821814, -0.5409862399, -0.5049511790, -0.1712598652, 0.3562779129, 0.6386712193, 0.1139268428, -0.1037204117, 0.0138498498));
	r += mul(s0_5, min16float4x4(0.1997568160, 0.0034233045, 0.1206587926, -0.4208989739, 0.0617885068, -0.0210082214, 0.1415347457, 0.1837949455, 0.3216034174, -0.0259944927, 0.2133795321, -0.6083435416, -0.3310760260, 0.1913240701, -0.0503051542, 0.1751891822));
	r += mul(s0_6, min16float4x4(0.1510178149, 0.2115583718, 0.0021707073, -0.1230651960, -0.6074539423, -0.3812047839, -0.2025863826, 0.0861861184, 0.1700397134, 0.0067927591, -0.0067029502, -0.0369804874, 0.2587890923, 0.2339638919, 0.1159739718, -0.0295221992));
	r += mul(s0_7, min16float4x4(0.5123332739, 0.7516751885, 0.3251961172, 0.0908890739, 0.0409613177, -0.0881063715, -0.2270666957, 0.1195739806, 0.8847671747, 0.6542967558, 0.7071871758, 0.1870108843, -0.1630561799, -0.1698701531, -0.0884313062, -0.0979936272));
	r += mul(s0_8, min16float4x4(-0.2925472260, -0.0094008064, -0.1264643818, 0.1920263022, -0.0188059025, -0.0985001773, -0.3017578125, -0.4405036569, -0.0741348714, -0.2327299118, -0.1129113212, 0.0059124716, -0.0688926280, 0.0530497991, 0.1495236307, 0.1840842068));
	r += mul(s1_0, min16float4x4(0.1199114472, -0.0160287041, -0.0199831054, -0.0669442266, -0.0924604684, 0.0528642274, 0.0377195813, -0.1408347487, 0.1150104776, -0.0364098400, -0.0245751124, -0.0146317510, 0.1232913062, 0.0274880957, -0.0163150914, 0.0374441408));
	r += mul(s1_1, min16float4x4(-0.2084440887, -0.1733452231, 0.0097315321, -0.4011291564, 0.0182949454, -0.4065276980, -0.2249322981, -0.2407433689, -0.1863698214, -0.1850623339, 0.0155452499, -0.4272495806, -0.4496818781, 0.1089216173, 0.0340632387, -0.6347447038));
	r += mul(s1_2, min16float4x4(0.0788469464, 0.1440490484, -0.0151200732, 0.3115190566, -0.2750193477, -0.3237029016, 0.0019581974, -0.0787572637, 0.0369486436, 0.1383087933, -0.0347550027, 0.1499215364, 0.0135926362, 0.2483632714, -0.2368747741, -0.2551742792));
	r += mul(s1_3, min16float4x4(0.1918971092, 0.1733395755, 0.1130041704, -0.3779255748, 0.1038200855, 0.1840897053, -0.0217023864, 0.3147610426, -0.0003502190, 0.0562685914, 0.2075171322, 0.0314380452, -0.0152346650, 0.0614628904, 0.1450191140, -0.0325959139));
	r += mul(s1_4, min16float4x4(0.1577141285, 0.3408198357, 0.1487489343, -0.2689540982, -0.2578998804, -0.1784399599, -0.2139723599, -0.0346190035, 0.7184539437, 0.3818359971, 0.3382285535, 0.0195251368, -0.5516201854, 0.1528347731, -0.2057206184, -0.1664951891));
	r += mul(s1_5, min16float4x4(-0.3154298365, 0.0949793160, -0.2195091248, 0.6825461984, -0.1595675498, 0.1101505831, -0.3758056164, 0.0016190510, -0.2509791851, -0.0671309084, -0.1723646522, 0.4772811532, 0.1314482987, -0.1254786849, 0.0658694655, -0.2763629854));
	r += mul(s1_6, min16float4x4(-0.2336170375, -0.2062411159, -0.0126268566, 0.0093122153, 0.6230462193, 0.3681616783, 0.1518543661, -0.0740127563, -0.0327924006, -0.0760050565, 0.0208803918, -0.0016428597, -0.2724607289, -0.1957990378, -0.1149888188, 0.0632070228));
	r += mul(s1_7, min16float4x4(-0.9033520222, -0.3330548406, -0.6777421832, -0.0822408274, 0.0084288437, 0.1144362316, 0.2879332006, -0.1085727438, -0.5632317066, -0.6230468750, -0.3698530197, -0.1752960235, 0.0923231617, 0.1381255388, -0.0607115775, 0.0730996728));
	r += mul(s1_8, min16float4x4(0.1596850753, 0.2161621451, 0.1364534795, -0.0860739723, 0.0308355559, 0.0920481160, 0.3642379045, 0.3794518411, 0.2407516092, 0.0516256914, 0.2072331905, -0.1207040176, -0.0336731784, 0.0232677478, -0.1614109576, -0.2164259106));
	r += min16float4(-0.0008737175958231091, 0.001307013793848455, 0.000675866031087935, -0.004873157944530249);
	return r;
}
void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float4 s0_0 = l0(-1.0, -1.0);
	min16float4 s0_1 = l0(0.0, -1.0);
	min16float4 s0_2 = l0(1.0, -1.0);
	min16float4 s0_3 = l0(-1.0, 0.0);
	min16float4 s0_4 = l0(0.0, 0.0);
	min16float4 s0_5 = l0(1.0, 0.0);
	min16float4 s0_6 = l0(-1.0, 1.0);
	min16float4 s0_7 = l0(0.0, 1.0);
	min16float4 s0_8 = l0(1.0, 1.0);
	min16float4 s1_0 = max(-s0_0, 0.0);
	min16float4 s1_1 = max(-s0_1, 0.0);
	min16float4 s1_2 = max(-s0_2, 0.0);
	min16float4 s1_3 = max(-s0_3, 0.0);
	min16float4 s1_4 = max(-s0_4, 0.0);
	min16float4 s1_5 = max(-s0_5, 0.0);
	min16float4 s1_6 = max(-s0_6, 0.0);
	min16float4 s1_7 = max(-s0_7, 0.0);
	min16float4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	conv1_0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 3
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-DS-NVL-conv2
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN conv1_0
//!OUT conv2_0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) O(conv1_0, float2(x, y))
float4 f0(float2 pt, float2 pos, min16float4 s0_0, min16float4 s0_1, min16float4 s0_2, min16float4 s0_3, min16float4 s0_4, min16float4 s0_5, min16float4 s0_6, min16float4 s0_7, min16float4 s0_8, min16float4 s1_0, min16float4 s1_1, min16float4 s1_2, min16float4 s1_3, min16float4 s1_4, min16float4 s1_5, min16float4 s1_6, min16float4 s1_7, min16float4 s1_8) {
	min16float4 r = 0.0;
	r += mul(s0_0, min16float4x4(0.0100677516, 0.0146524254, -0.0506934412, -0.0034686490, 0.0032986901, -0.0425773039, -0.0990169495, 0.0019212554, 0.2061073631, -0.1039087474, -0.2319576889, -0.0713473484, -0.0147185763, -0.0173542164, 0.0587280057, 0.0077765854));
	r += mul(s0_1, min16float4x4(-0.0443018898, -0.0691079199, 0.1440473348, 0.0117268907, 0.0472430550, 0.0455242880, -0.0696408972, -0.0504968725, 0.0367941186, -0.0641708151, -0.2495028228, -0.4736531675, -0.0046482580, -0.0332744010, 0.0130756339, 0.0521011129));
	r += mul(s0_2, min16float4x4(-0.0100690424, 0.0192745961, -0.0923688561, -0.3388612568, -0.0668564141, 0.0289903749, 0.0512238704, -0.0637700781, 0.0600790903, -0.1112967134, 0.0181217212, -0.0720644519, 0.0458638445, -0.0123026073, -0.0364834629, -0.0057174750));
	r += mul(s0_3, min16float4x4(-0.1110854447, 0.0562895462, 0.0905812755, 0.0049322704, 0.2627067864, -0.0858087316, -0.4057447314, -0.0011054049, -0.0839917585, -0.0435809158, 0.5878897309, -0.0294863731, -0.0301655456, 0.0147360563, -0.0567573011, -0.0009448191));
	r += mul(s0_4, min16float4x4(0.0303350016, 0.0260185320, 0.2630647719, 0.1557193547, -0.0444040783, 0.1255646199, -0.0335903727, -0.2814554870, -0.4363694787, -0.0175388232, -0.2016597092, 0.3232305646, 0.0343185030, 0.2880454063, -0.1280581355, -0.2750976682));
	r += mul(s0_5, min16float4x4(0.1129074171, 2.5448052883, -0.4111328721, 0.1907296628, 0.0112640196, 0.2133729011, 0.0286875274, 0.3524114192, -0.0661975369, -0.3212648928, 0.2310972959, -0.2430513948, 0.0418223143, -0.0792749003, -0.0275573246, 0.1253577918));
	r += mul(s0_6, min16float4x4(0.0440655313, -0.0297268089, -0.0281408671, -0.0026073235, -0.1013107002, 0.0323223658, 0.2819475532, -0.0070792395, 0.0401550494, 0.0051387828, -0.3321464658, 0.0325869545, 0.0518063195, -0.0240706820, -0.3520945311, 0.0478874221));
	r += mul(s0_7, min16float4x4(-0.0977049470, 0.0746196583, 0.0547464788, -0.0494018346, -0.1573400497, -0.0103132557, 0.0465204269, 0.0918530598, 0.2396782935, -0.0008505062, 0.1782441735, -0.1019124910, -2.4388496876, 0.0543004759, 0.6994894743, 0.4697684646));
	r += mul(s0_8, min16float4x4(-0.0685856789, -0.0474193729, -0.1516942084, 0.0092239724, 0.0204772316, -0.0335561074, -0.0591707081, -0.0398159325, -0.0278655291, 0.0546745099, 0.0628221333, 0.0006840347, -0.0209670067, -0.0505000912, 0.0443688147, 0.0600848496));
	r += mul(s1_0, min16float4x4(-0.0063106897, 0.0094232745, 0.0158960260, -0.0051262882, 0.0415588394, 0.0411327220, -0.0050259670, -0.0635511726, -0.1567370445, 0.0408942439, 0.2663923204, 0.1051468328, 0.0227636155, -0.0122177117, -0.0328703895, 0.0026424080));
	r += mul(s1_1, min16float4x4(0.0094355205, 0.0803234354, -0.0155224623, -0.0350922383, 0.3160386682, -0.5761060119, -0.4417667091, 0.7695791721, 0.0981817693, -0.0711510926, -0.0351363719, -0.1410392374, 0.0070958701, -0.0340416580, -0.0335696340, 0.0023984902));
	r += mul(s1_2, min16float4x4(-0.0333271101, 0.0067131585, -0.0108628133, -0.0037789440, 0.0280042309, 0.0523420945, -0.0588783659, -0.1585295647, 0.0305122845, -0.0715482533, 0.0287822410, 0.0276420563, -0.0066223103, 0.0268610734, 0.0052820826, 0.0206999835));
	r += mul(s1_3, min16float4x4(0.0227029324, 0.0006602632, -0.0019286196, 0.0111548696, -0.3603492081, 0.1183648631, -0.0240952801, -0.0047108172, 0.0975111499, 0.0151454788, 0.0325738005, 0.0422672890, -0.0993566364, 0.0415537320, 0.2441824824, 0.0007402017));
	r += mul(s1_4, min16float4x4(-0.2744219303, -0.0374627598, 0.5943744183, 0.0680859163, 0.3698591888, 0.0962457880, 0.9162512422, -0.1783941090, 0.0265090782, -0.2118736655, -0.1575729549, 0.1676215529, 0.1159667745, -0.0183197949, -0.2055668980, -0.1550119817));
	r += mul(s1_5, min16float4x4(-0.0170461852, -0.0769848302, -0.0313758217, -0.6348156929, -0.2263249010, -0.0090389242, -0.0825996548, -0.4795913994, 0.0425306633, 0.0968184993, -0.0177551266, 0.2094748616, -0.0180180632, 0.0222957265, 0.0247209780, -0.0105169965));
	r += mul(s1_6, min16float4x4(-0.0699795038, 0.0450444333, -0.0059687104, -0.0103442781, -0.0016558135, -0.0642081350, -0.0964274779, 0.0419900417, -0.0144466646, 0.0584686249, 0.1986819208, -0.0391884148, 0.0650708079, -0.0134379426, 0.1268443018, -0.0111583211));
	r += mul(s1_7, min16float4x4(0.2735795081, -0.1084404588, -0.0006494346, -0.0217690002, 0.0118868779, -0.0260337088, 0.1127771214, -0.0378314666, -0.1232942641, 0.0655988157, -0.1758220345, 0.0426001549, 0.1349141151, -0.1079781502, -0.2159818560, -0.0236927252));
	r += mul(s1_8, min16float4x4(-0.0318580791, 0.0350199193, 0.0138004832, 0.0098412810, -0.0463136770, -0.0188742746, 0.0252078176, -0.0734782070, -0.0176754333, 0.0593896843, 0.0413915142, 0.0474388897, -0.0307250079, 0.1298474967, 0.0425891206, 0.1570120156));
	r += min16float4(-0.0023541299160569906, 0.0011784174712374806, 0.0034707633312791586, -0.0021479162387549877);
	return r;
}
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float4 s0_0 = l0(-1.0, -1.0);
	min16float4 s0_1 = l0(0.0, -1.0);
	min16float4 s0_2 = l0(1.0, -1.0);
	min16float4 s0_3 = l0(-1.0, 0.0);
	min16float4 s0_4 = l0(0.0, 0.0);
	min16float4 s0_5 = l0(1.0, 0.0);
	min16float4 s0_6 = l0(-1.0, 1.0);
	min16float4 s0_7 = l0(0.0, 1.0);
	min16float4 s0_8 = l0(1.0, 1.0);
	min16float4 s1_0 = max(-s0_0, 0.0);
	min16float4 s1_1 = max(-s0_1, 0.0);
	min16float4 s1_2 = max(-s0_2, 0.0);
	min16float4 s1_3 = max(-s0_3, 0.0);
	min16float4 s1_4 = max(-s0_4, 0.0);
	min16float4 s1_5 = max(-s0_5, 0.0);
	min16float4 s1_6 = max(-s0_6, 0.0);
	min16float4 s1_7 = max(-s0_7, 0.0);
	min16float4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	conv2_0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 4
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-DS-NVL-out
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN conv2_0
//!OUT out_0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) O(conv2_0, float2(x, y))
float4 f0(float2 pt, float2 pos, min16float4 s0_0, min16float4 s0_1, min16float4 s0_2, min16float4 s0_3, min16float4 s0_4, min16float4 s0_5, min16float4 s0_6, min16float4 s0_7, min16float4 s0_8, min16float4 s1_0, min16float4 s1_1, min16float4 s1_2, min16float4 s1_3, min16float4 s1_4, min16float4 s1_5, min16float4 s1_6, min16float4 s1_7, min16float4 s1_8) {
	min16float4 r = 0.0;
	r += mul(s0_0, min16float4x4(0.1469833851, 0.0333037376, 0.0220042653, 0.0133285131, 0.0222488418, 0.0081928549, -0.0141713349, -0.0000077699, -0.0115093440, 0.0168767553, 0.0195904616, 0.0158085432, -0.2705070674, -0.0707681030, 0.0713690445, 0.0531972945));
	r += mul(s0_1, min16float4x4(-0.1199842468, 0.1595818102, -0.1239946485, -0.1257849187, 0.0008700808, 0.0671388507, -0.0046863365, 0.0016695331, -0.0202361494, -0.0675511360, -0.0910882205, -0.0804139003, -0.0282941870, -0.1799598634, 0.0785131529, 0.0167723466));
	r += mul(s0_2, min16float4x4(0.0077442499, -0.0099833459, -0.0093926704, -0.0434510633, -0.0062715034, -0.0063636736, 0.0006363816, 0.0030852591, -0.0754450634, -0.0988778174, -0.0345666446, -0.0350289233, 0.0128160007, -0.0199777447, -0.0046954895, 0.0253049992));
	r += mul(s0_3, min16float4x4(-0.2947867513, -0.0729852766, 0.3618391454, -0.0554413088, -0.1237793639, -0.0065014535, -0.0636661798, -0.0420077927, -0.0020009389, -0.0221556928, -0.0234577861, -0.0147330230, 0.5996093154, -0.0367417261, -0.5564163923, -0.5901993513));
	r += mul(s0_4, min16float4x4(-0.7912981510, -0.2822045684, -0.3644984663, 1.2383505106, 0.0062953685, -0.0033921339, 0.0099155130, 0.0974073112, 0.0201397669, 0.0056670853, 0.1095116213, 0.0472472012, -0.0002541759, 0.2221660465, -0.0147585748, -0.0624205619));
	r += mul(s0_5, min16float4x4(0.0227840375, 0.0225337949, 0.0908825547, -0.1061404124, -0.0064909207, -0.0004057094, -0.0062512360, -0.0080437530, -0.0328055136, 0.0284932647, -0.0802887082, -0.0184673108, 0.0148672806, 0.0164327901, 0.0226416644, -0.0036993304));
	r += mul(s0_6, min16float4x4(-0.0321931392, 0.0244694687, -0.0675974265, -0.0367315188, 0.0110433539, -0.0057226685, -0.0358531103, -0.0049841604, 0.0087023694, 0.0016497017, -0.0011886096, 0.0034102767, -0.0274212714, -0.0445449799, 0.1066925153, -0.0038272748));
	r += mul(s0_7, min16float4x4(0.0101710474, 0.0300841294, -0.0681977719, 0.0067836009, 0.0090457825, 0.0076040546, -0.0136041790, -0.0245110188, 0.0058892365, 0.0065580136, -0.0112577695, -0.0041884128, -0.0075178342, 0.0169088412, 0.0372181237, 0.0415632501));
	r += mul(s0_8, min16float4x4(-0.0133919297, -0.0346974991, -0.0503837653, -0.0679163113, -0.0068488088, 0.0031660707, -0.0050464412, -0.0003092758, 0.0036988878, 0.0063873190, 0.0350600071, 0.0334650166, 0.0043538134, 0.0032018640, 0.0018953043, 0.0065138247));
	r += mul(s1_0, min16float4x4(0.0046405140, -0.0562743060, -0.0940721855, -0.0406678617, -0.1220198125, -0.1472547501, 0.0382055379, 0.0350220092, -0.0777934417, -0.0198327173, -0.0375900567, 0.0055208667, 0.0168984979, 0.0271674283, 0.0022321122, 0.0013273039));
	r += mul(s1_1, min16float4x4(0.0186042432, 0.1276876926, 0.0419528261, -0.0166527946, -0.1411296576, -0.2340143174, 0.0300423633, 0.0254552457, 0.2529303133, 0.0614027269, 0.0289418641, 0.0303139798, 0.0202222373, 0.0426291935, -0.0074249012, 0.0014731919));
	r += mul(s1_2, min16float4x4(0.0222213548, 0.0306638721, 0.0053899954, 0.0090015894, -0.0773941800, -0.1082235798, -0.0257050898, -0.0343039371, 0.0444608070, 0.0930175930, 0.0138855567, 0.0343362764, 0.0001820821, -0.0065903906, 0.0015807431, -0.0035898453));
	r += mul(s1_3, min16float4x4(0.0313627571, 0.0238690041, 0.1625974327, 0.0428688712, 0.7012487054, -0.0582850277, -0.1243266538, -0.1188349873, -0.0081705507, 0.0677100345, -0.1180594116, 0.0729903728, 0.2372856438, 0.1596072912, 0.1207411513, 0.0741085336));
	r += mul(s1_4, min16float4x4(-0.0217595939, -0.0059927022, -0.0034234799, 0.1239757836, -0.0426845402, 1.3320842981, -0.5449243188, -0.3544922471, 0.2025912553, -0.6621252894, 0.7917517424, -0.4185162783, -0.0308560282, -0.0771789327, 0.0041739587, 0.0503583066));
	r += mul(s1_5, min16float4x4(0.0160498060, -0.0094125876, 0.0248065833, 0.0088224877, 0.0355354212, -0.1018091142, 0.0071303621, -0.1232968941, -0.0275683925, 0.0381013863, -0.0161914080, 0.1975961775, -0.0082784472, -0.0166455507, -0.0052741249, -0.0356241018));
	r += mul(s1_6, min16float4x4(0.0064185378, 0.0004875443, 0.0125991292, -0.0005061160, -0.0062079448, 0.0101752570, 0.2202143818, 0.0133642051, -0.0357663594, -0.0197098069, 0.0182479117, -0.0142537663, -0.0337961279, -0.0028211742, 0.0980131328, 0.0253373198));
	r += mul(s1_7, min16float4x4(-0.0085925255, -0.0058532720, -0.0148680219, -0.0107077919, -0.0907033533, -0.0525064096, -0.0555282794, 0.3114514053, 0.0441051461, 0.0183221120, -0.0670271888, -0.0425069109, -0.0240127016, -0.0438191630, -0.0447038524, -0.1105743721));
	r += mul(s1_8, min16float4x4(0.0007579895, -0.0017809047, -0.0050861542, -0.0081504788, 0.0365006737, 0.0011901956, 0.0592463240, 0.0651882440, 0.0131043121, 0.0026481834, -0.0387018137, -0.0448493697, -0.0112349736, -0.0270501282, -0.0111382240, -0.0126553709));
	r += min16float4(-0.00018317752983421087, -0.00015192912542261183, -0.0002872671466320753, -9.292783215641975e-05);
	return tanh(r);
}
void Pass4(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float4 s0_0 = l0(-1.0, -1.0);
	min16float4 s0_1 = l0(0.0, -1.0);
	min16float4 s0_2 = l0(1.0, -1.0);
	min16float4 s0_3 = l0(-1.0, 0.0);
	min16float4 s0_4 = l0(0.0, 0.0);
	min16float4 s0_5 = l0(1.0, 0.0);
	min16float4 s0_6 = l0(-1.0, 1.0);
	min16float4 s0_7 = l0(0.0, 1.0);
	min16float4 s0_8 = l0(1.0, 1.0);
	min16float4 s1_0 = max(-s0_0, 0.0);
	min16float4 s1_1 = max(-s0_1, 0.0);
	min16float4 s1_2 = max(-s0_2, 0.0);
	min16float4 s1_3 = max(-s0_3, 0.0);
	min16float4 s1_4 = max(-s0_4, 0.0);
	min16float4 s1_5 = max(-s0_5, 0.0);
	min16float4 s1_6 = max(-s0_6, 0.0);
	min16float4 s1_7 = max(-s0_7, 0.0);
	min16float4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	out_0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 5
//!DESC CuNNy-2x4C-BILINEAR-CHROMA-DS-NVL-shuffle
//!STYLE PS
//!IN out_0, INPUT
float4 Pass5(float2 pos) {
	float2 pt = float2(GetInputPt());
	const static float3x3 rgb2yuv = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081};
	const static float3x3 yuv2rgb = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float4 r = 0.0;
	float2 size = float2(GetInputSize());
	float2 f = frac(pos * size);
	float3 yuv = mul(rgb2yuv, INPUT.SampleLevel(SL, pos, 0).rgb);
	int2 i = int2(f * 2.0);
	r.r = out_0.SampleLevel(SP, (float2(0.5, 0.5) - f) * pt + pos, 0)[2*i.y + i.x];
	r.r += yuv.r;
	r.a = 1.0;
	r.r = clamp(r, 0.0, 1.0);
	float3 px = mul(yuv2rgb, float3(r.r, yuv.yz));
	return float4(px, 1.0);
}
