// CuNNy 4x4C BILINEAR CHROMA NVL DN
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

//!MAGPIE EFFECT
//!VERSION 3
//!OUTPUT_WIDTH INPUT_WIDTH * 2
//!OUTPUT_HEIGHT INPUT_HEIGHT * 2

//!TEXTURE
Texture2D INPUT;

//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D in_0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D conv1_0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D conv2_0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D conv3_0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D conv4_0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D out_0;

//!PASS 1
//!DESC CuNNy-4x4C-BILINEAR-CHROMA-NVL-DN-in
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT in_0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) (dot(float3(0.5488279461860657, 0.9394575357437134, 0.24167011678218842), O(INPUT, float2(x, y)).rgb) + -1.3105825185775757)
float4 f0(float2 pt, float2 pos, min16float s0_0, min16float s0_1, min16float s0_2, min16float s0_3, min16float s0_4, min16float s0_5, min16float s0_6, min16float s0_7, min16float s0_8) {
	min16float4 r = 0.0;
	r += min16float4(0.0020655987318605185, -0.03356922045350075, -0.01799333468079567, 0.0066736857406795025) * s0_0;
	r += min16float4(0.07009562104940414, 0.1587616354227066, 0.02623334713280201, 0.0086967246606946) * s0_1;
	r += min16float4(-0.3455633819103241, -0.13349950313568115, -0.0471983440220356, -0.002834260929375887) * s0_2;
	r += min16float4(0.004135172348469496, 0.06278888881206512, 0.06753692775964737, 0.04705836996436119) * s0_3;
	r += min16float4(0.028603393584489822, 0.20278915762901306, 0.5247594714164734, -0.6753702759742737) * s0_4;
	r += min16float4(0.016927039250731468, -0.2694718837738037, -0.0685986652970314, 0.039621151983737946) * s0_5;
	r += min16float4(0.003136660670861602, 0.004715156741440296, -0.11136806011199951, -0.0584995336830616) * s0_6;
	r += min16float4(0.0012426928151398897, 0.29977211356163025, -0.21055319905281067, 0.6621092557907104) * s0_7;
	r += min16float4(0.010766484774649143, -0.29584407806396484, -0.07572603970766068, -0.025662671774625778) * s0_8;
	r += min16float4(0.08181721717119217, 0.0012778216041624546, 0.10376346111297607, -0.00012604572111740708);
	return r;
}
void Pass1(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float s0_0 = l0(-1.0, -1.0);
	min16float s0_1 = l0(0.0, -1.0);
	min16float s0_2 = l0(1.0, -1.0);
	min16float s0_3 = l0(-1.0, 0.0);
	min16float s0_4 = l0(0.0, 0.0);
	min16float s0_5 = l0(1.0, 0.0);
	min16float s0_6 = l0(-1.0, 1.0);
	min16float s0_7 = l0(0.0, 1.0);
	min16float s0_8 = l0(1.0, 1.0);
	in_0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8);
}
//!PASS 2
//!DESC CuNNy-4x4C-BILINEAR-CHROMA-NVL-DN-conv1
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN in_0
//!OUT conv1_0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) O(in_0, float2(x, y))
float4 f0(float2 pt, float2 pos, min16float4 s0_0, min16float4 s0_1, min16float4 s0_2, min16float4 s0_3, min16float4 s0_4, min16float4 s0_5, min16float4 s0_6, min16float4 s0_7, min16float4 s0_8, min16float4 s1_0, min16float4 s1_1, min16float4 s1_2, min16float4 s1_3, min16float4 s1_4, min16float4 s1_5, min16float4 s1_6, min16float4 s1_7, min16float4 s1_8) {
	min16float4 r = 0.0;
	r += mul(s0_0, min16float4x4(-0.0026479228399693966, 0.12133694440126419, 0.028885649517178535, 0.11874714493751526, 0.03143412619829178, -0.0950346291065216, 0.15530671179294586, -0.11742255091667175, 0.026798056438565254, 0.035408634692430496, -0.06366441398859024, -0.0035087259020656347, -0.060288842767477036, -0.1410701423883438, 0.6356220245361328, -0.013541343621909618));
	r += mul(s0_1, min16float4x4(-0.023379717022180557, -0.02731817029416561, 0.03311784192919731, 0.056660301983356476, 0.037956248968839645, 0.03952779248356819, -0.2464100569486618, -0.08961988240480423, -0.17624014616012573, -0.01913263089954853, -0.07450810819864273, -0.17240214347839355, -0.5996137857437134, 0.07563657313585281, 0.4533708393573761, 2.063766442006454e-05));
	r += mul(s0_2, min16float4x4(0.005236816126853228, 0.027733497321605682, 0.05035335198044777, -0.0749271959066391, 0.035630736500024796, 0.011094924062490463, -0.14598938822746277, 0.16297169029712677, 0.07601137459278107, -0.13309429585933685, 0.07421663403511047, -0.2152325063943863, -0.35518595576286316, -0.0695195123553276, -0.20981788635253906, -0.04838291183114052));
	r += mul(s0_3, min16float4x4(-0.09710760414600372, -0.10105348378419876, -0.20696218311786652, -0.24365299940109253, -0.03660073131322861, -0.5524096488952637, -0.41428548097610474, -0.08745046705007553, -0.07330912351608276, -0.5405689477920532, -0.37263572216033936, -0.06477450579404831, 0.08127930015325546, 0.43456095457077026, 0.7268985509872437, -0.16148784756660461));
	r += mul(s0_4, min16float4x4(-0.15793295204639435, -0.006365075707435608, 0.1161729097366333, 0.007099838927388191, 0.21656465530395508, -0.21907103061676025, 0.22414754331111908, 0.18988899886608124, 0.15305429697036743, 0.4311792552471161, -0.01780976541340351, -0.29980218410491943, 0.5135782957077026, -0.6425776481628418, -0.6230464577674866, 0.15666677057743073));
	r += mul(s0_5, min16float4x4(0.048682451248168945, 0.00932438112795353, 0.0583135150372982, -0.06779094785451889, -0.16012950241565704, 0.0541025772690773, 0.09440353512763977, -0.04007076099514961, 0.32716450095176697, 0.04679720476269722, 0.16101697087287903, 0.12142906337976456, -0.5410158634185791, 0.016343992203474045, -0.21429423987865448, -0.03606885299086571));
	r += mul(s0_6, min16float4x4(0.03453642874956131, 4.6357079554582015e-05, 0.11442052572965622, 0.15354329347610474, 0.037663497030735016, -0.4354168772697449, -0.26442718505859375, 0.19286678731441498, 0.13011102378368378, -0.06531374156475067, -0.029553120955824852, 0.08099906146526337, 0.03144802153110504, 0.2339003086090088, 0.11772263795137405, -0.10343275964260101));
	r += mul(s0_7, min16float4x4(0.10636357963085175, -0.017588626593351364, -0.1775151640176773, 0.07086953520774841, -0.2499813437461853, 0.008806997910141945, -0.11469228565692902, -0.17697854340076447, -0.21546655893325806, 0.15640802681446075, 0.17780758440494537, 0.3905410170555115, 0.04645094275474548, -0.12096067517995834, -0.021526867523789406, -0.056716665625572205));
	r += mul(s0_8, min16float4x4(0.12841768562793732, -0.04351375997066498, -0.08848774433135986, -0.04499095305800438, 0.018129536882042885, -0.028593096882104874, -0.04761596769094467, -0.023814937099814415, -0.1512417048215866, -0.042217593640089035, -0.0504385307431221, 0.10128668695688248, -0.08507661521434784, -0.010053113102912903, -0.07737739384174347, -0.26650211215019226));
	r += mul(s1_0, min16float4x4(0.09860560297966003, -0.022299354895949364, 0.06167437508702278, -0.07340765744447708, 0.0744936466217041, 0.07856758683919907, -0.02588965743780136, -0.10315395891666412, 0.017273910343647003, -0.039975978434085846, 0.12620022892951965, 0.11043811589479446, 0.022603336721658707, 0.18571904301643372, 0.15592139959335327, 0.5435176491737366));
	r += mul(s1_1, min16float4x4(0.1034666895866394, 0.03641080483794212, -0.45601019263267517, -0.07274196296930313, -0.00783295277506113, -0.060499779880046844, 0.10662514716386795, -0.02737533673644066, 0.054926831275224686, 0.03549683094024658, 0.1429446041584015, -0.00021568717784248292, 0.7836335897445679, -0.08746108412742615, -0.4475955069065094, 0.595987856388092));
	r += mul(s1_2, min16float4x4(0.2952231764793396, 0.010014289058744907, 0.09510164707899094, 0.14597240090370178, -0.10815370082855225, -0.04504210874438286, 0.032679565250873566, -0.19262801110744476, -0.1562301367521286, 0.10495960712432861, -0.06937593966722488, 0.13264474272727966, 0.08438199013471603, 0.1274183690547943, 0.053321149200201035, 0.25198131799697876));
	r += mul(s1_3, min16float4x4(0.2851940393447876, 0.35374775528907776, -0.1300230324268341, 0.23813796043395996, -0.21352438628673553, 0.5355144143104553, 0.13313618302345276, 0.024697115644812584, -0.02783764712512493, 0.5917712450027466, -0.09025999903678894, 0.21142147481441498, -0.1637035757303238, -0.5332033634185791, -0.2755686044692993, -0.1372060775756836));
	r += mul(s1_4, min16float4x4(0.5552823543548584, 0.08300399780273438, 0.2397487312555313, 0.4035017490386963, -0.19162717461585999, 0.13625463843345642, -0.08230261504650116, -0.16181065142154694, 0.05139864981174469, -0.285712867975235, 0.03872383385896683, -0.2242082953453064, -0.1394711583852768, 0.5800853967666626, 0.27671894431114197, -0.5665032267570496));
	r += mul(s1_5, min16float4x4(0.07442554086446762, 0.06455009430646896, -0.002303049899637699, 0.11728242039680481, 0.1854100227355957, 0.002910572336986661, -0.03807070106267929, 0.07618842273950577, 0.15875297784805298, 0.00855520274490118, 0.08207599073648453, -0.011011715978384018, -0.01931488886475563, -0.04594120755791664, -0.13064119219779968, -0.21370455622673035));
	r += mul(s1_6, min16float4x4(-0.8859658241271973, 0.30455732345581055, 0.28076422214508057, -2.5681118965148926, -0.04869876429438591, 0.4747975170612335, 0.32522693276405334, 0.05633533000946045, -0.11115565896034241, 0.10364086925983429, -0.05649808794260025, 0.016413778066635132, 0.1052251011133194, -0.19703707098960876, -0.1373029351234436, -0.17710937559604645));
	r += mul(s1_7, min16float4x4(-0.23516778647899628, -0.055537305772304535, -0.05741550400853157, 0.012394956313073635, 0.15256427228450775, 0.04034169390797615, -0.04799586161971092, 0.16312918066978455, -0.0452377051115036, -0.22740739583969116, -0.1547112911939621, 0.34907791018486023, 0.0787305161356926, 0.138156920671463, 0.03752756863832474, -0.2057836502790451));
	r += mul(s1_8, min16float4x4(-0.2743881046772003, 0.17900756001472473, 0.15853601694107056, -0.002309350064024329, -0.02861851453781128, 0.0015338644152507186, -0.04402827471494675, -0.04526249319314957, 0.17003244161605835, -0.006148729473352432, 0.1870078146457672, 0.2348822057247162, 0.2568363845348358, -0.013703159987926483, 0.018232185393571854, -0.06031014397740364));
	r += min16float4(-0.010492843575775623, 0.01782301440834999, 0.020217403769493103, 0.0056931511498987675);
	return r;
}
void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float4 s0_0 = l0(-1.0, -1.0);
	min16float4 s0_1 = l0(0.0, -1.0);
	min16float4 s0_2 = l0(1.0, -1.0);
	min16float4 s0_3 = l0(-1.0, 0.0);
	min16float4 s0_4 = l0(0.0, 0.0);
	min16float4 s0_5 = l0(1.0, 0.0);
	min16float4 s0_6 = l0(-1.0, 1.0);
	min16float4 s0_7 = l0(0.0, 1.0);
	min16float4 s0_8 = l0(1.0, 1.0);
	min16float4 s1_0 = max(-s0_0, 0.0);
	min16float4 s1_1 = max(-s0_1, 0.0);
	min16float4 s1_2 = max(-s0_2, 0.0);
	min16float4 s1_3 = max(-s0_3, 0.0);
	min16float4 s1_4 = max(-s0_4, 0.0);
	min16float4 s1_5 = max(-s0_5, 0.0);
	min16float4 s1_6 = max(-s0_6, 0.0);
	min16float4 s1_7 = max(-s0_7, 0.0);
	min16float4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	conv1_0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 3
//!DESC CuNNy-4x4C-BILINEAR-CHROMA-NVL-DN-conv2
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN conv1_0
//!OUT conv2_0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) O(conv1_0, float2(x, y))
float4 f0(float2 pt, float2 pos, min16float4 s0_0, min16float4 s0_1, min16float4 s0_2, min16float4 s0_3, min16float4 s0_4, min16float4 s0_5, min16float4 s0_6, min16float4 s0_7, min16float4 s0_8, min16float4 s1_0, min16float4 s1_1, min16float4 s1_2, min16float4 s1_3, min16float4 s1_4, min16float4 s1_5, min16float4 s1_6, min16float4 s1_7, min16float4 s1_8) {
	min16float4 r = 0.0;
	r += mul(s0_0, min16float4x4(-0.07174527645111084, 0.03027801588177681, -0.17623214423656464, -0.06085299700498581, -0.08381333202123642, -0.008102977648377419, 0.010526028461754322, -0.003446374787017703, -0.008722016587853432, 0.05857240781188011, 0.06504393368959427, 0.0013784428592771292, 0.0019136560149490833, -0.027909666299819946, 0.22313471138477325, 0.04680434241890907));
	r += mul(s0_1, min16float4x4(-0.07460769265890121, -0.1450454145669937, -0.02912113070487976, 0.02210974134504795, 0.1243409514427185, -0.07456792891025543, -0.14790752530097961, 0.1265188306570053, -0.39160171151161194, 0.3850768208503723, 0.031433168798685074, -0.08891698718070984, -0.028216611593961716, 0.037570755928754807, -0.11565874516963959, -0.03576064854860306));
	r += mul(s0_2, min16float4x4(-0.06794961541891098, -0.11787569522857666, -0.1264311969280243, -0.08061865717172623, 0.14304639399051666, -0.3277011513710022, -0.05138841271400452, 0.010261362418532372, -0.1383993774652481, 0.14889775216579437, 0.32714247703552246, -0.02658708766102791, -0.02899457886815071, 0.17470309138298035, -0.020677709951996803, 0.038689322769641876));
	r += mul(s0_3, min16float4x4(0.03682216256856918, -0.09619913250207901, -0.4397298991680145, -0.12058041244745255, -0.24528643488883972, 0.1230800524353981, -0.06882572919130325, -0.024625323712825775, 0.24070045351982117, -0.0891033411026001, 0.1397605687379837, 0.0008936289232224226, 0.014321508817374706, -0.15462346374988556, -0.12082193791866302, 0.03420590981841087));
	r += mul(s0_4, min16float4x4(-0.45229852199554443, 0.11304551362991333, -0.3505135476589203, -0.5293190479278564, 0.2477927803993225, -0.10187485069036484, 0.27079981565475464, -0.2567557394504547, -0.44606974720954895, 0.3942781686782837, 0.6464405655860901, -0.007668513339012861, 0.0951366052031517, -0.4225153923034668, 0.239942267537117, 0.5971640944480896));
	r += mul(s0_5, min16float4x4(0.025774281471967697, 0.03829582780599594, -0.17614983022212982, -0.04532197490334511, 0.08033964782953262, -0.5672555565834045, -0.16643939912319183, 0.1419859081506729, -0.2861117422580719, -0.012270897626876831, 0.339494913816452, -0.14754483103752136, -0.12099835276603699, -0.004509924910962582, 0.022719617933034897, -0.03594416007399559));
	r += mul(s0_6, min16float4x4(-0.011117505840957165, -0.04661283269524574, -0.140145406126976, -0.08804405480623245, -0.09112265706062317, 0.0909939557313919, 0.015355103649199009, -0.02927720732986927, 0.06851205974817276, 0.07690722495317459, 0.17725405097007751, 0.05659731104969978, -0.0953659638762474, 0.14240731298923492, -0.03421974182128906, -0.05843792483210564));
	r += mul(s0_7, min16float4x4(-0.04805765673518181, -0.018033010885119438, 0.00041232031071558595, -0.17636661231517792, -0.07210829108953476, 0.03307037800550461, -0.07926982641220093, -0.10452257096767426, 0.03106270544230938, 0.16943341493606567, 0.2466399371623993, 0.18963317573070526, -0.03112388215959072, 0.021134672686457634, 0.23585069179534912, -1.2021112442016602));
	r += mul(s0_8, min16float4x4(0.05055519565939903, 0.009750599972903728, 0.031968336552381516, 0.0472719743847847, 0.02541711926460266, -0.14177875220775604, -0.009931834414601326, -0.6637343764305115, -0.04787883907556534, 0.135478213429451, 0.13525354862213135, -0.11600193381309509, 0.01880859024822712, 0.14462576806545258, 0.19068291783332825, 0.005855429917573929));
	r += mul(s1_0, min16float4x4(0.44161057472229004, -0.4697233736515045, 0.0974489226937294, 0.13824860751628876, -0.11890153586864471, 0.04064856469631195, -0.10129611939191818, -0.023050524294376373, 0.16946804523468018, -0.023889891803264618, 0.17601867020130157, 0.025278743356466293, -0.07323001325130463, 0.17529365420341492, 0.13426703214645386, -0.05238400027155876));
	r += mul(s1_1, min16float4x4(0.08323612064123154, 0.06015118211507797, -0.28336092829704285, -0.0005346370162442327, -0.23911866545677185, -0.19061219692230225, -0.2249232679605484, -0.15513621270656586, 0.3458350896835327, -0.11044205725193024, 0.3876139521598816, 0.09057480096817017, -0.12094943970441818, 0.39199697971343994, -0.007679148111492395, 0.015885859727859497));
	r += mul(s1_2, min16float4x4(-0.060315899550914764, -0.045727942138910294, 0.004609475377947092, -0.028436284512281418, -0.04613127186894417, 0.020724911242723465, -0.18207110464572906, -0.012386112473905087, 0.10425960272550583, 0.03134942799806595, 0.0692712664604187, 0.10814503580331802, 0.06621994823217392, -0.04834891855716705, 0.02640918269753456, 0.06296661496162415));
	r += mul(s1_3, min16float4x4(0.34616929292678833, -0.5010678768157959, -0.1094437837600708, -0.041974958032369614, 0.030834682285785675, -0.005748576484620571, 0.0418991856276989, 0.04054136201739311, 0.027503710240125656, 0.06518609821796417, 0.023728864267468452, -0.03245358169078827, 0.15725018084049225, -0.06890524923801422, 0.17242921888828278, -0.03797396272420883));
	r += mul(s1_4, min16float4x4(0.15347282588481903, -0.3149336874485016, -0.019298233091831207, 0.2826780378818512, -1.0982745885849, 0.3994327187538147, -0.4482576251029968, 0.2715977430343628, 0.39450275897979736, -0.17442069947719574, 0.048581019043922424, -0.043728094547986984, 0.09454398602247238, -0.08408825099468231, 0.034262195229530334, -0.08079177141189575));
	r += mul(s1_5, min16float4x4(-0.22073781490325928, -0.05487687140703201, 0.0018011706415563822, -0.11497938632965088, 0.4228450357913971, 0.006341209169477224, 0.05991281196475029, -0.09313172101974487, 0.22889447212219238, 0.22730888426303864, 0.08778935670852661, 0.21537935733795166, -0.07543568313121796, -0.09038455039262772, -0.009684093296527863, -0.10930745303630829));
	r += mul(s1_6, min16float4x4(0.05882951244711876, -0.05123486742377281, -0.03356597572565079, 0.15184567868709564, -0.10193631798028946, 0.05822189524769783, -0.05745461583137512, -0.03414376825094223, 0.08051708340644836, 0.031137119978666306, 0.12682852149009705, -0.013585254549980164, 0.04992518573999405, -0.01872086711227894, 0.10455110669136047, -0.04223015159368515));
	r += mul(s1_7, min16float4x4(-0.053644027560949326, 0.00819520652294159, -0.1110830083489418, 0.2677457332611084, 0.008961521089076996, -0.22678083181381226, -0.14566990733146667, -0.3420964479446411, 0.13506218791007996, -0.028212524950504303, 0.17936010658740997, -0.25426051020622253, 0.01249297708272934, 0.021619994193315506, 0.02404223009943962, 0.15810301899909973));
	r += mul(s1_8, min16float4x4(-0.09841310977935791, -0.0562102235853672, -0.0851840004324913, -0.06268393248319626, 0.16356627643108368, -0.23697634041309357, -0.16203643381595612, -0.12162665277719498, 0.06292524933815002, 0.16745370626449585, 0.2760077714920044, 0.26660245656967163, -0.044695690274238586, -0.00586769450455904, -0.022862719371914864, -0.0558452308177948));
	r += min16float4(-0.014565513469278812, -0.005905325524508953, 0.006476057693362236, -0.007140645291656256);
	return r;
}
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float4 s0_0 = l0(-1.0, -1.0);
	min16float4 s0_1 = l0(0.0, -1.0);
	min16float4 s0_2 = l0(1.0, -1.0);
	min16float4 s0_3 = l0(-1.0, 0.0);
	min16float4 s0_4 = l0(0.0, 0.0);
	min16float4 s0_5 = l0(1.0, 0.0);
	min16float4 s0_6 = l0(-1.0, 1.0);
	min16float4 s0_7 = l0(0.0, 1.0);
	min16float4 s0_8 = l0(1.0, 1.0);
	min16float4 s1_0 = max(-s0_0, 0.0);
	min16float4 s1_1 = max(-s0_1, 0.0);
	min16float4 s1_2 = max(-s0_2, 0.0);
	min16float4 s1_3 = max(-s0_3, 0.0);
	min16float4 s1_4 = max(-s0_4, 0.0);
	min16float4 s1_5 = max(-s0_5, 0.0);
	min16float4 s1_6 = max(-s0_6, 0.0);
	min16float4 s1_7 = max(-s0_7, 0.0);
	min16float4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	conv2_0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 4
//!DESC CuNNy-4x4C-BILINEAR-CHROMA-NVL-DN-conv3
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN conv2_0
//!OUT conv3_0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) O(conv2_0, float2(x, y))
float4 f0(float2 pt, float2 pos, min16float4 s0_0, min16float4 s0_1, min16float4 s0_2, min16float4 s0_3, min16float4 s0_4, min16float4 s0_5, min16float4 s0_6, min16float4 s0_7, min16float4 s0_8, min16float4 s1_0, min16float4 s1_1, min16float4 s1_2, min16float4 s1_3, min16float4 s1_4, min16float4 s1_5, min16float4 s1_6, min16float4 s1_7, min16float4 s1_8) {
	min16float4 r = 0.0;
	r += mul(s0_0, min16float4x4(-0.04601229354739189, -0.033381856977939606, -0.03805774822831154, -0.07180238515138626, 0.14720876514911652, 0.030868645757436752, -0.008471435867249966, -0.019502859562635422, -0.0671403706073761, -0.007179350592195988, 0.03407320752739906, -0.01928596943616867, 0.4850732386112213, 0.09498364478349686, 0.5176544189453125, 0.7564455270767212));
	r += mul(s0_1, min16float4x4(-0.0512874498963356, -0.036030907183885574, 0.0908767431974411, 0.027174992486834526, 0.15900705754756927, -0.06621763855218887, -0.11358319967985153, -0.080810546875, -0.005655599292367697, 0.0099128233268857, -0.04068293049931526, 0.09985724836587906, 0.08718567341566086, -1.1757335662841797, -0.9523851275444031, 0.10585611313581467));
	r += mul(s0_2, min16float4x4(0.013465246185660362, -0.040180910378694534, 0.08776593208312988, 0.06850536912679672, 0.013675197027623653, -0.08581597357988358, -0.16355732083320618, -0.06807223707437515, 0.08376650512218475, -0.07321754097938538, -0.003255936549976468, -0.000826759438496083, -0.07523580640554428, -0.2139347940683365, -0.5799819231033325, -0.2106846570968628));
	r += mul(s0_3, min16float4x4(1.2699698209762573, -0.029373351484537125, 0.49964508414268494, 0.15828505158424377, 0.17506399750709534, -0.0840790718793869, 0.2783142626285553, 0.24566622078418732, 0.1171613410115242, 0.05514082312583923, -0.05891722813248634, -0.038549333810806274, -0.42196235060691833, -0.12328524142503738, 0.1694631725549698, -0.3879314661026001));
	r += mul(s0_4, min16float4x4(0.11439903825521469, -0.5316498875617981, -0.01645781844854355, 0.43267199397087097, 0.036713216453790665, -0.5312350392341614, 0.7522662878036499, -0.2092398703098297, 0.015095029957592487, 0.07407455146312714, -0.5186535120010376, -0.3486325144767761, 0.5058477520942688, 1.0641343593597412, -0.03723084181547165, -0.004909438546746969));
	r += mul(s0_5, min16float4x4(0.021363280713558197, -0.07053375244140625, -0.029299437999725342, 0.02519458346068859, -0.11976707726716995, -0.04155409708619118, 0.04102963209152222, 0.07301410287618637, -0.00492166168987751, -0.13159127533435822, 0.18785306811332703, 0.07390829175710678, 0.04623851552605629, 0.4150344729423523, 0.2500758171081543, -0.1906651109457016));
	r += mul(s0_6, min16float4x4(0.12070858478546143, 0.11364661902189255, -0.03749058395624161, 0.0930013358592987, 0.05168265476822853, 0.07842686027288437, -0.053831037133932114, 0.055044397711753845, 0.02084096148610115, -0.08335182815790176, 0.06274297833442688, -0.0616937018930912, 0.08593171089887619, 0.07452809810638428, 0.05181923136115074, 0.0652795284986496));
	r += mul(s0_7, min16float4x4(-0.07387281209230423, -0.0011062665143981576, -0.12133780121803284, -0.2357160598039627, 0.2010972797870636, 0.008380478248000145, -0.019969824701547623, -0.2268846184015274, 0.05360554903745651, -0.01555265299975872, 0.13330088555812836, 0.342753529548645, -0.052905820310115814, 0.12455114722251892, -0.057461928576231, -0.0010758000425994396));
	r += mul(s0_8, min16float4x4(-0.018454115837812424, 0.05025959387421608, -0.008521806448698044, 0.020420599728822708, 0.03951997309923172, -0.11373674124479294, 0.10063637048006058, 0.2275509387254715, 0.05609054118394852, -0.11757348477840424, -0.0885361060500145, -0.10890953987836838, -0.06468150019645691, -0.04757419973611832, -0.1104663833975792, -0.0505390428006649));
	r += mul(s1_0, min16float4x4(0.05642000585794449, -0.006862381938844919, 0.0829344093799591, 0.10035492479801178, -0.033229198306798935, -0.006809989456087351, 0.03093426302075386, 0.047256551682949066, -0.010029172524809837, 0.01689285598695278, 0.025997139513492584, 0.11460425704717636, -0.04009397700428963, -0.04411659762263298, -0.003459320170804858, -0.09989529848098755));
	r += mul(s1_1, min16float4x4(0.030138392001390457, 0.04207809269428253, -0.1508154571056366, -0.011830147355794907, -0.005147675052285194, -0.07035589218139648, 0.06412839144468307, 0.05676324665546417, 0.015005814842879772, -0.04504358768463135, -0.006536590401083231, -0.09301299601793289, -0.04800475761294365, 0.058961719274520874, 0.030090710148215294, 0.07682611048221588));
	r += mul(s1_2, min16float4x4(-0.014356788247823715, 0.07988695800304413, -0.06037919968366623, -0.09366749972105026, -0.0005897802766412497, 0.025192005559802055, -0.015339172445237637, 0.01339929923415184, -0.00956257339566946, 0.014012214727699757, 0.00612901896238327, 0.028845634311437607, 0.017563655972480774, 0.013609143905341625, 0.009850787930190563, 0.03137931972742081));
	r += mul(s1_3, min16float4x4(-0.019432032480835915, 0.08961158990859985, -0.2607530653476715, -0.19598741829395294, -0.21171726286411285, 0.13112108409404755, -0.3681541681289673, -0.3416507840156555, -0.029608329758048058, -0.08619822561740875, 0.2959046959877014, 0.2144853174686432, 0.09834237396717072, 0.00501839816570282, -0.023405013605952263, -0.11569478362798691));
	r += mul(s1_4, min16float4x4(-0.11707103997468948, 0.09607876092195511, -0.2940741777420044, -0.2124234437942505, 0.0802968218922615, 0.22234371304512024, -0.1682528853416443, 0.23972684144973755, 0.33004242181777954, -0.14315679669380188, -0.07108737528324127, 0.2778308689594269, -0.27923303842544556, -0.116301029920578, 0.14130569994449615, -0.24753448367118835));
	r += mul(s1_5, min16float4x4(-0.07390020787715912, 0.39443162083625793, 0.20418937504291534, -0.14994768798351288, 0.025366974994540215, -0.08077181875705719, -0.006665991153568029, -0.047054536640644073, 0.019360190257430077, 0.0902409553527832, -0.12762130796909332, -0.12077438086271286, -0.015860337764024734, 0.050097040832042694, 0.004566843621432781, 0.07610838115215302));
	r += mul(s1_6, min16float4x4(-0.061757661402225494, -0.08314324170351028, 0.024216819554567337, 0.005253588315099478, -0.19411730766296387, -0.12100320309400558, 0.06455500423908234, -0.04731777682900429, 0.21346181631088257, 0.1372072994709015, 0.011508543975651264, 0.17521938681602478, 0.049171172082424164, 0.015668291598558426, -0.010235640220344067, 0.041470661759376526));
	r += mul(s1_7, min16float4x4(0.13623541593551636, 0.014354441314935684, 0.08407152444124222, 0.17629754543304443, 0.1411130726337433, 0.09178167581558228, 0.05247141793370247, 0.30590471625328064, -0.13873553276062012, -0.2253098487854004, -0.1959734559059143, -0.4775395691394806, -0.02766507863998413, -0.024433743208646774, -0.011469116434454918, -0.050897400826215744));
	r += mul(s1_8, min16float4x4(0.06791674345731735, 0.020495736971497536, 0.021743077784776688, 0.028826776891946793, -0.0186111181974411, -0.07668716460466385, -0.01973869279026985, -0.019362542778253555, -0.10756954550743103, 0.10919562727212906, 0.07059746980667114, -0.05073149874806404, 0.009367972612380981, 0.046752724796533585, 0.02116040140390396, 0.008361978456377983));
	r += min16float4(0.007575302850455046, -0.014377009123563766, 0.0004639538819901645, 0.00839050579816103);
	return r;
}
void Pass4(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float4 s0_0 = l0(-1.0, -1.0);
	min16float4 s0_1 = l0(0.0, -1.0);
	min16float4 s0_2 = l0(1.0, -1.0);
	min16float4 s0_3 = l0(-1.0, 0.0);
	min16float4 s0_4 = l0(0.0, 0.0);
	min16float4 s0_5 = l0(1.0, 0.0);
	min16float4 s0_6 = l0(-1.0, 1.0);
	min16float4 s0_7 = l0(0.0, 1.0);
	min16float4 s0_8 = l0(1.0, 1.0);
	min16float4 s1_0 = max(-s0_0, 0.0);
	min16float4 s1_1 = max(-s0_1, 0.0);
	min16float4 s1_2 = max(-s0_2, 0.0);
	min16float4 s1_3 = max(-s0_3, 0.0);
	min16float4 s1_4 = max(-s0_4, 0.0);
	min16float4 s1_5 = max(-s0_5, 0.0);
	min16float4 s1_6 = max(-s0_6, 0.0);
	min16float4 s1_7 = max(-s0_7, 0.0);
	min16float4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	conv3_0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 5
//!DESC CuNNy-4x4C-BILINEAR-CHROMA-NVL-DN-conv4
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN conv3_0
//!OUT conv4_0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) O(conv3_0, float2(x, y))
float4 f0(float2 pt, float2 pos, min16float4 s0_0, min16float4 s0_1, min16float4 s0_2, min16float4 s0_3, min16float4 s0_4, min16float4 s0_5, min16float4 s0_6, min16float4 s0_7, min16float4 s0_8, min16float4 s1_0, min16float4 s1_1, min16float4 s1_2, min16float4 s1_3, min16float4 s1_4, min16float4 s1_5, min16float4 s1_6, min16float4 s1_7, min16float4 s1_8) {
	min16float4 r = 0.0;
	r += mul(s0_0, min16float4x4(0.0135522885248065, 0.04063338041305542, -0.002898724051192403, -0.0494384765625, -0.17235000431537628, 0.14896070957183838, 0.005618369672447443, -0.06251367181539536, 0.018493158742785454, -0.20362158119678497, 0.04091648384928703, 0.10620235651731491, 0.09444370865821838, -0.03234873712062836, 0.06323277205228806, -0.0547596737742424));
	r += mul(s0_1, min16float4x4(-0.025220535695552826, -0.10946476459503174, -0.01237806212157011, 0.16251535713672638, -0.08302132785320282, 0.11665822565555573, -0.0981067568063736, -0.5664572715759277, 0.10881176590919495, -0.41338008642196655, -0.10257516801357269, 0.7363282442092896, 0.09666009247303009, -0.1411154568195343, -0.20030313730239868, 0.1442360281944275));
	r += mul(s0_2, min16float4x4(0.0018754085758700967, 0.008663227781653404, -0.02775888331234455, -0.08361289650201797, -0.01420851331204176, -0.007895682007074356, 0.08756539225578308, 0.05510784685611725, 0.024701213464140892, -0.08461370319128036, -0.1170681044459343, 0.03922879695892334, 0.011256312020123005, -0.02652849815785885, -0.05676506459712982, -0.010426406748592854));
	r += mul(s0_3, min16float4x4(-0.022304173558950424, -0.028138644993305206, -0.04614247381687164, 0.009325465187430382, 0.13915996253490448, 0.8504067063331604, 0.11389504373073578, -0.12426573038101196, -0.14857527613639832, 0.09617551416158676, 0.11728225648403168, 0.14173473417758942, -0.27017274498939514, -0.062301985919475555, 0.05184832587838173, 0.1650819033384323));
	r += mul(s0_4, min16float4x4(0.15767385065555573, 0.1643984615802765, 0.2544192373752594, -0.1586558222770691, 0.03292996063828468, -0.09939500689506531, 0.6587615013122559, 0.059917353093624115, 0.30566370487213135, -0.712348997592926, -0.5760238766670227, -0.6277976036071777, -0.11349733173847198, 0.07625863701105118, 0.13623036444187164, -0.10633248090744019));
	r += mul(s0_5, min16float4x4(-0.013923648744821548, -0.030863264575600624, -0.14222683012485504, 0.0646376684308052, 0.016527868807315826, 0.09895098954439163, 0.21316349506378174, -0.13138754665851593, 0.014698012731969357, -0.022960206493735313, 0.05400843173265457, -0.022192280739545822, -0.030848169699311256, 0.01325661689043045, 0.04229876026511192, -0.006013635080307722));
	r += mul(s0_6, min16float4x4(0.025273896753787994, 0.018159937113523483, 0.004852737300097942, 0.0032467138953506947, 0.17432156205177307, 0.04206356778740883, 0.002901764353737235, -0.08969734609127045, -0.05412934347987175, -0.011427256278693676, -0.030518073588609695, 0.07580077648162842, -0.02465960755944252, 0.017343029379844666, 0.00849868729710579, 0.032334696501493454));
	r += mul(s0_7, min16float4x4(-0.05793309584259987, -0.008666051551699638, 0.0017373275477439165, 0.04167051985859871, 0.20088358223438263, 0.07470940053462982, 0.03644127771258354, -0.02485136315226555, -0.010887915268540382, -0.08758077770471573, -0.06007913500070572, -0.02735016867518425, -0.024059755727648735, 0.03715008869767189, 0.007065020967274904, -0.002308817580342293));
	r += mul(s0_8, min16float4x4(-0.0012156844604760408, -0.027531633153557777, -0.018898464739322662, -0.014371758326888084, -0.0018663053633645177, 0.03889399394392967, 0.017407840117812157, 0.015724219381809235, 0.008918444626033306, 0.02280389331281185, 0.03065708465874195, -0.0025590474251657724, 0.01090281829237938, -0.008057445287704468, -0.024213803932070732, 0.007263800594955683));
	r += mul(s1_0, min16float4x4(0.008929593488574028, 0.23695024847984314, -0.008625262416899204, -0.1539176106452942, -0.00713803805410862, 0.08371897041797638, 0.004406570456922054, -0.08686475455760956, 0.026804793626070023, 0.009647827595472336, -0.007215296849608421, -0.041604701429605484, -0.10158393532037735, 0.024831438437104225, 0.005536694545298815, 0.07919909060001373));
	r += mul(s1_1, min16float4x4(0.00855326373130083, -0.1749490201473236, 0.48680543899536133, 0.06703457236289978, -0.006344221532344818, -0.014085700735449791, -0.052689943462610245, 0.09141038358211517, 0.027273721992969513, -0.03746113181114197, -0.017050014808773994, -0.05887646600604057, -0.18620023131370544, 0.24853277206420898, -0.06511172652244568, -0.21932752430438995));
	r += mul(s1_2, min16float4x4(-0.003943234216421843, -0.010842172428965569, -0.41504451632499695, -0.32181158661842346, 0.0030084040481597185, 0.008887183852493763, 0.09108295291662216, 0.022895902395248413, -0.011941365897655487, 0.013642091304063797, -0.08963757753372192, -0.11596687883138657, -0.04650067910552025, -0.031978536397218704, 0.2764337956905365, 0.2192392796278));
	r += mul(s1_3, min16float4x4(0.15526467561721802, 0.3883967697620392, 0.0881044939160347, -0.07516469806432724, -0.06531499326229095, -0.2744726836681366, -0.23574981093406677, 0.04087549075484276, -0.0005820199730806053, -0.16747254133224487, -0.10761069506406784, -0.06495016068220139, 0.09233634918928146, 0.05284757912158966, 0.009577789343893528, -0.04732075706124306));
	r += mul(s1_4, min16float4x4(-1.369587779045105, -0.3687320351600647, -0.06340568512678146, -0.0319240540266037, 0.05846456438302994, 0.08425337076187134, 0.07710428535938263, -0.2160632163286209, -0.112564817070961, -0.23292754590511322, 0.0064473538659513, 0.3821580708026886, 0.6880248785018921, -0.47313907742500305, -0.26860371232032776, -0.0928637906908989));
	r += mul(s1_5, min16float4x4(-0.15782524645328522, -0.2787092626094818, -0.12682735919952393, -0.09502322971820831, 0.018453672528266907, 0.016161637380719185, 0.01540044229477644, 0.04503004997968674, -0.021168844774365425, -0.08098261803388596, -0.08672694861888885, 0.007032919675111771, 0.10966474562883377, 0.24621924757957458, 0.16455043852329254, -0.0017810487188398838));
	r += mul(s1_6, min16float4x4(-0.13818199932575226, 0.009259669110178947, 0.0038928573485463858, 0.09475748240947723, 0.07451567053794861, 0.026657836511731148, 0.011102230288088322, -0.015033820644021034, 0.026330288499593735, 0.002525455318391323, 0.008533357642591, 0.024565504863858223, 0.06066782400012016, 0.004294675309211016, -0.0066307783126831055, -0.062391944229602814));
	r += mul(s1_7, min16float4x4(0.049223966896533966, 0.3095925748348236, 0.08859223872423172, -0.03295149654150009, -0.01408243365585804, -0.02705925703048706, -0.041484929621219635, 0.021740520372986794, 0.0013770981458947062, 0.005217504687607288, -0.010343638248741627, -0.005890105850994587, 0.049839407205581665, -0.10864114761352539, -0.03189854696393013, -0.01226855255663395));
	r += mul(s1_8, min16float4x4(-0.006318474188446999, 0.14201557636260986, 0.07573581486940384, -0.005969606339931488, 0.009477938525378704, -0.006183247547596693, 0.00930284895002842, -0.007845367304980755, 0.005468443967401981, -0.022084619849920273, -0.008549745194613934, 0.04887734353542328, 0.011883220635354519, 0.012894894927740097, -0.0017798641929402947, 0.02531314827501774));
	r += min16float4(-0.001542389509268105, 0.003075048327445984, 0.0009274610783904791, -0.00679340586066246);
	return r;
}
void Pass5(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float4 s0_0 = l0(-1.0, -1.0);
	min16float4 s0_1 = l0(0.0, -1.0);
	min16float4 s0_2 = l0(1.0, -1.0);
	min16float4 s0_3 = l0(-1.0, 0.0);
	min16float4 s0_4 = l0(0.0, 0.0);
	min16float4 s0_5 = l0(1.0, 0.0);
	min16float4 s0_6 = l0(-1.0, 1.0);
	min16float4 s0_7 = l0(0.0, 1.0);
	min16float4 s0_8 = l0(1.0, 1.0);
	min16float4 s1_0 = max(-s0_0, 0.0);
	min16float4 s1_1 = max(-s0_1, 0.0);
	min16float4 s1_2 = max(-s0_2, 0.0);
	min16float4 s1_3 = max(-s0_3, 0.0);
	min16float4 s1_4 = max(-s0_4, 0.0);
	min16float4 s1_5 = max(-s0_5, 0.0);
	min16float4 s1_6 = max(-s0_6, 0.0);
	min16float4 s1_7 = max(-s0_7, 0.0);
	min16float4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	conv4_0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 6
//!DESC CuNNy-4x4C-BILINEAR-CHROMA-NVL-DN-out
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN conv4_0
//!OUT out_0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) O(conv4_0, float2(x, y))
float4 f0(float2 pt, float2 pos, min16float4 s0_0, min16float4 s0_1, min16float4 s0_2, min16float4 s0_3, min16float4 s0_4, min16float4 s0_5, min16float4 s0_6, min16float4 s0_7, min16float4 s0_8, min16float4 s1_0, min16float4 s1_1, min16float4 s1_2, min16float4 s1_3, min16float4 s1_4, min16float4 s1_5, min16float4 s1_6, min16float4 s1_7, min16float4 s1_8) {
	min16float4 r = 0.0;
	r += mul(s0_0, min16float4x4(-0.008502798154950142, -0.015120238997042179, 0.02873774990439415, -0.0287281796336174, -0.016510462388396263, 0.008685525506734848, -0.01148865558207035, 0.0236179381608963, 0.011025141924619675, -0.018718549981713295, -0.003243151353672147, 0.018624095246195793, 0.0016093848971650004, 0.022710470482707024, -0.0009667656267993152, 0.0005873474292457104));
	r += mul(s0_1, min16float4x4(0.03478638827800751, -0.13944993913173676, -0.014345561154186726, -0.018260657787322998, 0.07787735015153885, -0.0005776101024821401, 0.051795415580272675, -0.034057460725307465, -0.017272956669330597, -0.01455884799361229, -0.03571811690926552, 0.04182617366313934, 0.01365226786583662, 0.050897955894470215, 0.007493087090551853, -0.01160349976271391));
	r += mul(s0_2, min16float4x4(0.01932489685714245, 0.22124753892421722, -0.05357261747121811, -0.003372694132849574, -0.014252310618758202, 0.07656064629554749, -0.0036708954721689224, -0.048404596745967865, -0.01567632146179676, 0.015114347450435162, 0.0027218072209507227, 0.022277479991316795, 0.02374310977756977, -0.010071750730276108, 0.008575957268476486, -0.014186018146574497));
	r += mul(s0_3, min16float4x4(-0.07944892346858978, 0.015212307684123516, -0.08375106751918793, 0.025478597730398178, -0.03106236830353737, 0.009966454468667507, -0.06811931729316711, 0.001993319485336542, 0.0725134015083313, -0.09253200888633728, 0.12378046661615372, -0.11658846586942673, -0.041267286986112595, 0.012648451142013073, -0.08424544334411621, 0.03794503211975098));
	r += mul(s0_4, min16float4x4(-0.02348926104605198, -0.17052990198135376, 0.15868237614631653, -0.1557616889476776, -0.39355534315109253, 0.15591660141944885, -0.3642610013484955, 0.06814896315336227, -0.33463650941848755, -0.19023838639259338, 0.0907614678144455, -0.1015617772936821, -0.41131478548049927, 0.19483032822608948, -0.054350707679986954, 0.09527627378702164));
	r += mul(s0_5, min16float4x4(-0.09106186777353287, 0.0006607481627725065, 0.2959005534648895, 0.5880880951881409, 0.10163750499486923, -0.39745768904685974, 0.2109910249710083, 0.08959273993968964, 0.01781402714550495, 0.0663287565112114, -0.04136445000767708, 0.1427762359380722, -0.004919751547276974, -0.36425790190696716, 0.09277673065662384, -0.027553103864192963));
	r += mul(s0_6, min16float4x4(-0.038221731781959534, 0.005069348961114883, -0.052674613893032074, 0.01881011575460434, 0.015596196055412292, -0.013394754379987717, 0.03504754230380058, -0.0031717768870294094, -0.00970546342432499, 0.014188572764396667, -0.047003407031297684, -0.022378049790859222, -0.040153078734874725, -0.06630290299654007, -0.01190540473908186, -0.010794204659759998));
	r += mul(s0_7, min16float4x4(-0.053098056465387344, -0.020559316501021385, -0.06241166591644287, -0.10189767181873322, 0.02214609831571579, -0.0020616615656763315, 0.04631814360618591, 0.10257432609796524, 0.05139271542429924, 0.04649990051984787, -0.35278838872909546, -0.11676007509231567, -0.08311489969491959, -0.03246466442942619, -0.5221304297447205, -0.013561449944972992));
	r += mul(s0_8, min16float4x4(0.012850753031671047, -0.025224829092621803, -0.012972247786819935, -0.030178885906934738, 0.06368257105350494, -0.007450450677424669, 0.0894332081079483, -0.14755503833293915, 0.03576480969786644, 0.0910211130976677, -0.05475814267992973, -0.1367909163236618, -0.00042315994505770504, 0.030403433367609978, 0.023592323064804077, -0.15367387235164642));
	r += mul(s1_0, min16float4x4(0.014004332944750786, -0.013805223628878593, 0.0056138173677027225, 0.01796940714120865, -0.015379217453300953, -0.022048769518733025, -0.0019828893709927797, -0.003455056343227625, -0.004441320896148682, 0.004040595144033432, -0.004315055441111326, -0.025712287053465843, -0.0006930163945071399, -0.032425109297037125, 0.005812346003949642, 0.000585057947319001));
	r += mul(s1_1, min16float4x4(-0.09279736131429672, 0.10287142544984818, -0.0399387925863266, 0.045025408267974854, -0.05097833275794983, -0.09085490554571152, -0.0018125827191397548, 0.03255632892251015, 0.01515834592282772, -0.015349594876170158, 0.008472544141113758, -0.03240220621228218, -0.0175035260617733, -0.030978593975305557, -0.010175755247473717, 0.007368108257651329));
	r += mul(s1_2, min16float4x4(0.0004790834500454366, -0.19873079657554626, 0.028793800622224808, -0.07592718303203583, -0.039771754294633865, -0.04159674048423767, -0.017508935183286667, 0.025334281846880913, 0.007613204885274172, -0.005149992648512125, -0.002194649074226618, -0.023465517908334732, -0.006148591637611389, 0.011322279460728168, -0.00509277218952775, 0.009674177505075932));
	r += mul(s1_3, min16float4x4(0.08339634537696838, -0.016930975019931793, 0.06811551004648209, -0.03623886778950691, 0.03612034395337105, -0.0063881827518343925, 0.019477276131510735, -0.009357537142932415, -0.010574501939117908, 0.07683820277452469, -0.14517199993133545, 0.08821506053209305, 0.08147342503070831, -0.0186407919973135, 0.05847223848104477, -0.03507056087255478));
	r += mul(s1_4, min16float4x4(-0.033641744405031204, 0.30637431144714355, -0.28872349858283997, 0.17236337065696716, 0.4990234673023224, 0.034306228160858154, 0.23468716442584991, -0.15188288688659668, -0.14988015592098236, 0.4599687457084656, -0.04222985729575157, 0.1358853578567505, 0.24736221134662628, 0.11687836796045303, 0.10768896341323853, -0.10242123156785965));
	r += mul(s1_5, min16float4x4(-0.1557025909423828, -0.36034083366394043, 0.02237628772854805, -0.2841806411743164, -0.01838712766766548, 0.05306278541684151, -0.09572256356477737, -0.03946454077959061, -0.0005218428559601307, -0.008249151520431042, -0.006081454921513796, -0.00448986329138279, 0.044114600867033005, 0.12948520481586456, -0.007667638827115297, 0.029243608936667442));
	r += mul(s1_6, min16float4x4(0.031615450978279114, -0.004668141715228558, 0.04242716729640961, -0.025812486186623573, -0.023443954065442085, -2.9946289942017756e-05, -0.026477348059415817, -0.00887451134622097, 0.00472004571929574, -0.02777296118438244, 0.11602163314819336, 0.0005116110551171005, 0.058672476559877396, 0.01059580035507679, 0.06762667745351791, -0.034727323800325394));
	r += mul(s1_7, min16float4x4(0.013691081665456295, 0.0007072030566632748, 0.13718177378177643, 0.10904353857040405, -0.08223406225442886, -0.05756552517414093, 0.047603409737348557, -0.11063572019338608, 0.013044571503996849, 0.006771756336092949, -0.034325845539569855, 0.34871378540992737, 0.10083024203777313, 0.047293536365032196, 0.06189610809087753, 0.12107241898775101));
	r += mul(s1_8, min16float4x4(0.02797134593129158, 0.04938569292426109, -0.03261345997452736, 0.0041517578065395355, -0.007763626053929329, -0.044660311192274094, -0.040893420577049255, -0.12203485518693924, 0.008839664980769157, 0.0068754167295992374, 0.05783868581056595, 0.0872589722275734, 0.00858656782656908, 0.0618695393204689, 0.02844252809882164, 0.10020904988050461));
	r += min16float4(-0.003562937257811427, -0.0027023986913263798, -0.002082764869555831, -0.0012852244544774294);
	return tanh(r);
}
void Pass6(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float4 s0_0 = l0(-1.0, -1.0);
	min16float4 s0_1 = l0(0.0, -1.0);
	min16float4 s0_2 = l0(1.0, -1.0);
	min16float4 s0_3 = l0(-1.0, 0.0);
	min16float4 s0_4 = l0(0.0, 0.0);
	min16float4 s0_5 = l0(1.0, 0.0);
	min16float4 s0_6 = l0(-1.0, 1.0);
	min16float4 s0_7 = l0(0.0, 1.0);
	min16float4 s0_8 = l0(1.0, 1.0);
	min16float4 s1_0 = max(-s0_0, 0.0);
	min16float4 s1_1 = max(-s0_1, 0.0);
	min16float4 s1_2 = max(-s0_2, 0.0);
	min16float4 s1_3 = max(-s0_3, 0.0);
	min16float4 s1_4 = max(-s0_4, 0.0);
	min16float4 s1_5 = max(-s0_5, 0.0);
	min16float4 s1_6 = max(-s0_6, 0.0);
	min16float4 s1_7 = max(-s0_7, 0.0);
	min16float4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	out_0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 7
//!DESC CuNNy-4x4C-BILINEAR-CHROMA-NVL-DN-shuffle
//!STYLE PS
//!IN out_0, INPUT
float4 Pass7(float2 pos) {
	float2 pt = float2(GetInputPt());
	const static float3x3 rgb2yuv = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081};
	const static float3x3 yuv2rgb = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float4 r = 0.0;
	float2 size = float2(GetInputSize());
	float2 f = frac(pos * size);
	float3 yuv = mul(rgb2yuv, INPUT.SampleLevel(SL, pos, 0).rgb);
	int2 i = int2(f * 2.0);
	r.r = out_0.SampleLevel(SP, (float2(0.5, 0.5) - f) * pt + pos, 0)[2*i.y + i.x];
	r.r += yuv.r;
	r.a = 1.0;
	r.r = clamp(r, 0.0, 1.0);
	float3 px = mul(yuv2rgb, float3(r.r, yuv.yz));
	return float4(px, 1.0);
}
