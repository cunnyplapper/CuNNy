// CuNNy 1x4C BILINEAR NVL
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

//!MAGPIE EFFECT
//!VERSION 3
//!OUTPUT_WIDTH INPUT_WIDTH * 2
//!OUTPUT_HEIGHT INPUT_HEIGHT * 2

//!TEXTURE
Texture2D INPUT;


//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D up_0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D conv1_0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D down;

//!PASS 1
//!DESC CuNNy-1x4C-BILINEAR-NVL-up
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT up_0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) dot(float3(0.299, 0.587, 0.114), O(INPUT, float2(x, y)).rgb)
float4 f0(float2 pt, float2 pos, min16float s0_0, min16float s0_1, min16float s0_2, min16float s0_3, min16float s0_4, min16float s0_5, min16float s0_6, min16float s0_7, min16float s0_8) {
	min16float4 r = 0.0;
	r += min16float4(-0.21143901348114014, 0.006890841759741306, 0.013879661448299885, -0.009000078774988651) * s0_0;
	r += min16float4(-0.2407226711511612, -0.017880840227007866, -0.01822921633720398, 0.012909064069390297) * s0_1;
	r += min16float4(0.033584028482437134, 0.00831381231546402, -0.003914106637239456, -0.005069078411906958) * s0_2;
	r += min16float4(0.14048731327056885, 0.006962064187973738, -0.22190572321414948, 0.005355123896151781) * s0_3;
	r += min16float4(0.304474800825119, 0.41839519143104553, 0.10597430169582367, 0.3806971311569214) * s0_4;
	r += min16float4(-0.024960048496723175, -0.4208984076976776, 0.10620183497667313, -0.02196365036070347) * s0_5;
	r += min16float4(0.034790363162755966, -0.014522403478622437, -0.2646484375, 0.005324854515492916) * s0_6;
	r += min16float4(-0.029562445357441902, -0.000642273691482842, 0.3840321898460388, -0.3916015625) * s0_7;
	r += min16float4(-0.007768439594656229, 0.013008699752390385, -0.10247009247541428, 0.023794829845428467) * s0_8;
	r += float4(0.0011116209207102656, 0.0005319190095178783, 0.0019447633530944586, 0.0005909214960411191);
	return r;
}
void Pass1(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float s0_0 = l0(-1.0, -1.0);
	min16float s0_1 = l0(0.0, -1.0);
	min16float s0_2 = l0(1.0, -1.0);
	min16float s0_3 = l0(-1.0, 0.0);
	min16float s0_4 = l0(0.0, 0.0);
	min16float s0_5 = l0(1.0, 0.0);
	min16float s0_6 = l0(-1.0, 1.0);
	min16float s0_7 = l0(0.0, 1.0);
	min16float s0_8 = l0(1.0, 1.0);
	up_0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8);
}
//!PASS 2
//!DESC CuNNy-1x4C-BILINEAR-NVL-conv1
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN up_0
//!OUT conv1_0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) O(up_0, float2(x, y))
float4 f0(float2 pt, float2 pos, min16float4 s0_0, min16float4 s0_1, min16float4 s0_2, min16float4 s0_3, min16float4 s0_4, min16float4 s0_5, min16float4 s0_6, min16float4 s0_7, min16float4 s0_8, min16float4 s1_0, min16float4 s1_1, min16float4 s1_2, min16float4 s1_3, min16float4 s1_4, min16float4 s1_5, min16float4 s1_6, min16float4 s1_7, min16float4 s1_8) {
	min16float4 r = 0.0;
	r += mul(s0_0, min16float4x4(-0.02007834054529667, 0.055792197585105896, -0.009943518787622452, -0.05435846745967865, -0.59413743019104, 0.5837074518203735, -0.685648500919342, -0.5878908634185791, 0.006371940020471811, -0.07271409034729004, 0.11214393377304077, -0.011739630252122879, -0.2763651907444, -0.4047160744667053, -0.4636993706226349, 0.32698723673820496));
	r += mul(s0_1, min16float4x4(0.020417047664523125, -0.07964076101779938, -0.004702500067651272, 0.048958465456962585, 0.06970451772212982, -0.06774482876062393, -0.04773016646504402, 0.10570692270994186, -0.017748268321156502, -0.02363884449005127, 0.10423793643712997, 0.12048902362585068, -0.06544164568185806, -0.03674802929162979, 0.059372175484895706, 1.5909693241119385));
	r += mul(s0_2, min16float4x4(-0.0065194605849683285, 0.03331958130002022, 0.0007677769172005355, 0.07800888270139694, 0.0276334248483181, -0.015002137050032616, 0.01741190440952778, -0.002281968016177416, 0.15804710984230042, -0.25933051109313965, 0.05520497262477875, 0.09219685196876526, 0.3961171805858612, 0.5102552175521851, 0.06723454594612122, -0.4169926047325134));
	r += mul(s0_3, min16float4x4(0.006576587911695242, 0.10229534655809402, -0.3251267671585083, -0.009434088133275509, 0.17702946066856384, -0.738745391368866, 0.3797200918197632, -0.4183844029903412, -0.01157833356410265, 0.08180118352174759, -0.0905761644244194, 0.017734192311763763, 0.03218904137611389, -0.008069431409239769, 0.3357090950012207, 0.10065869987010956));
	r += mul(s0_4, min16float4x4(0.0065836128778755665, -0.018478961661458015, 0.18212608993053436, 0.01949220895767212, 0.040335655212402344, 0.44042977690696716, -0.0024226917885243893, -0.1961079239845276, -0.008486115373671055, 0.1176648736000061, 0.007113747764378786, -0.06722704321146011, -0.10033299773931503, -0.2223920077085495, -0.21716588735580444, -0.12744233012199402));
	r += mul(s0_5, min16float4x4(-0.03282839432358742, -0.06500139832496643, 0.09564623236656189, 0.11258655041456223, 0.005403740797191858, -0.12326950579881668, -0.004652396775782108, 0.0820445716381073, 0.04731569439172745, -0.19805370271205902, -0.06991858035326004, 0.3445435166358948, 0.0957925096154213, 0.18896488845348358, -0.0831938236951828, 0.04919493943452835));
	r += mul(s0_6, min16float4x4(0.19084110856056213, -0.044840309768915176, 0.12049537897109985, -0.04996867850422859, 0.12243571132421494, -0.14312081038951874, 0.1446181982755661, -0.05655631050467491, -0.008999846875667572, -0.018831409513950348, -0.006454917602241039, 0.006028011441230774, 0.009325088933110237, 0.0024482225999236107, -0.0712309181690216, 0.013152912259101868));
	r += mul(s0_7, min16float4x4(0.566250205039978, 0.14103947579860687, -0.47308114171028137, -0.42624136805534363, -0.07004497945308685, -0.34865429997444153, 0.05461466312408447, 0.08905086666345596, -0.025578156113624573, -0.09981489926576614, -0.09844052791595459, -0.016896221786737442, -0.012915341183543205, -0.05196360871195793, 0.05334256961941719, 0.04195597395300865));
	r += mul(s0_8, min16float4x4(-0.1206812933087349, -0.27297624945640564, 0.11718038469552994, 0.5391399264335632, -0.028593197464942932, 0.14054091274738312, -0.011691121384501457, -0.07886537164449692, 0.006989364977926016, 0.09114228188991547, -0.02438976801931858, -0.027810633182525635, 0.002250382909551263, 0.04306543618440628, 0.028992097824811935, -0.054058294743299484));
	r += mul(s1_0, min16float4x4(-0.03222395479679108, -0.012154907919466496, -0.015154631808400154, -0.03744165599346161, -0.3203456401824951, 0.0044204192236065865, 0.18817520141601562, 0.12900640070438385, 0.024752842262387276, 0.007395519874989986, -0.38624757528305054, 0.009016044437885284, -0.37536531686782837, 0.16839221119880676, -0.16838960349559784, -0.03336993604898453));
	r += mul(s1_1, min16float4x4(0.04478681832551956, 0.05854608863592148, 0.013972901739180088, 0.058504678308963776, -0.0310239028185606, 0.09099069237709045, 0.04263942316174507, -0.03077993355691433, 0.2210981696844101, -0.77468341588974, 0.7480463981628418, 0.5554556250572205, -0.8459922075271606, 0.46978989243507385, 0.17674191296100616, -0.2816082239151001));
	r += mul(s1_2, min16float4x4(-0.1098664402961731, 0.010721834376454353, -0.05276300385594368, -0.0003457908460404724, 0.014597034081816673, 0.10515456646680832, -0.01629854552447796, 0.0917154848575592, -0.06806692481040955, 0.4793650209903717, 0.016279447823762894, 0.2680874168872833, -0.08342324942350388, 0.4727410078048706, -0.06671768426895142, 0.12016768008470535));
	r += mul(s1_3, min16float4x4(-0.020350884646177292, -0.044067684561014175, -0.15747369825839996, 0.07889717072248459, -0.8733975887298584, 0.4872840940952301, -1.1250842809677124, 0.3817045986652374, -0.08620056509971619, -0.0025950828567147255, -0.3221815824508667, -0.0014061798574402928, -0.30856791138648987, -0.6572526097297668, 0.13679248094558716, 0.10093412548303604));
	r += mul(s1_4, min16float4x4(0.6665012240409851, 0.7001127600669861, -0.9073741436004639, 0.4142245948314667, 1.5974544286727905, 0.18605461716651917, 0.008635747246444225, -0.6379813551902771, -0.09048733860254288, -0.23842106759548187, -0.0904180034995079, 0.3187759518623352, 0.6426826119422913, -1.2937020063400269, 0.0035877374466508627, 0.36163759231567383));
	r += mul(s1_5, min16float4x4(-0.48380953073501587, -0.6595313549041748, -0.3254653215408325, 0.5834179520606995, -0.05591275915503502, 0.06275224685668945, 0.03056466206908226, -0.10034096986055374, 0.04599793627858162, 0.7246081829071045, -0.022904811426997185, -0.32128581404685974, 0.5683498978614807, 0.49860888719558716, 0.013299777172505856, -0.5771461725234985));
	r += mul(s1_6, min16float4x4(0.004771827254444361, 0.027294855564832687, 0.22131432592868805, 0.016325693577528, 0.0386529266834259, -0.48339909315109253, 0.6972295641899109, -0.00044048644485883415, 0.011399993672966957, -0.014206725172698498, -0.013186460360884666, 0.046752478927373886, 0.0010145147098228335, -0.09296096116304398, 0.16956402361392975, -0.006700505036860704));
	r += mul(s1_7, min16float4x4(0.02749411202967167, 0.4567049443721771, 0.967434287071228, 0.026481157168745995, 0.03795166313648224, 0.05289315804839134, 0.045280855149030685, -0.14858944714069366, 0.049150608479976654, 0.09503723680973053, -0.035711754113435745, 0.04040641710162163, -0.00313031324185431, 0.1654045730829239, 0.04553239420056343, -0.040748827159404755));
	r += mul(s1_8, min16float4x4(-0.02239796705543995, -0.38190242648124695, 0.12441881746053696, 0.19970262050628662, 0.05790293961763382, -0.06788171827793121, -0.01713143289089203, 0.02063940279185772, -0.006049719173461199, -0.012885707430541515, 0.010871618054807186, 0.052835654467344284, -0.027453841641545296, -0.10473667830228806, -0.009930779226124287, 0.06664422154426575));
	r += float4(-3.8041741845518118e-06, 0.0010307164629921317, 1.4787177860853262e-05, 0.0012710726587101817);
	return r;
}
void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float4 s0_0 = l0(-1.0, -1.0);
	min16float4 s0_1 = l0(0.0, -1.0);
	min16float4 s0_2 = l0(1.0, -1.0);
	min16float4 s0_3 = l0(-1.0, 0.0);
	min16float4 s0_4 = l0(0.0, 0.0);
	min16float4 s0_5 = l0(1.0, 0.0);
	min16float4 s0_6 = l0(-1.0, 1.0);
	min16float4 s0_7 = l0(0.0, 1.0);
	min16float4 s0_8 = l0(1.0, 1.0);
	min16float4 s1_0 = max(-s0_0, 0.0);
	min16float4 s1_1 = max(-s0_1, 0.0);
	min16float4 s1_2 = max(-s0_2, 0.0);
	min16float4 s1_3 = max(-s0_3, 0.0);
	min16float4 s1_4 = max(-s0_4, 0.0);
	min16float4 s1_5 = max(-s0_5, 0.0);
	min16float4 s1_6 = max(-s0_6, 0.0);
	min16float4 s1_7 = max(-s0_7, 0.0);
	min16float4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	conv1_0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 3
//!DESC CuNNy-1x4C-BILINEAR-NVL-down
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN conv1_0
//!OUT down
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) O(conv1_0, float2(x, y))
float4 f0(float2 pt, float2 pos, min16float4 s0_0, min16float4 s0_1, min16float4 s0_2, min16float4 s0_3, min16float4 s0_4, min16float4 s0_5, min16float4 s0_6, min16float4 s0_7, min16float4 s0_8, min16float4 s1_0, min16float4 s1_1, min16float4 s1_2, min16float4 s1_3, min16float4 s1_4, min16float4 s1_5, min16float4 s1_6, min16float4 s1_7, min16float4 s1_8) {
	min16float4 r = 0.0;
	r += mul(s0_0, min16float4x4(-0.09029644727706909, -0.01904185675084591, -0.04236111789941788, 0.04428136348724365, -0.12722717225551605, -0.010888718068599701, -0.08362018316984177, -0.05097433924674988, 0.027403265237808228, -0.011402801610529423, -0.014758451841771603, -0.027511676773428917, 0.06237668916583061, -0.045798979699611664, 0.018945813179016113, -0.03186022490262985));
	r += mul(s0_1, min16float4x4(0.01162190455943346, -0.02441384457051754, 0.008055412210524082, 0.014209596440196037, 0.13112279772758484, -0.24072308838367462, 0.18603402376174927, -0.10376676172018051, 0.24576358497142792, -0.14163321256637573, -0.014169227331876755, -0.04126865044236183, -0.016049833968281746, -0.013290218077600002, 0.0277272779494524, 0.011773725040256977));
	r += mul(s0_2, min16float4x4(0.004137570038437843, -0.034552015364170074, 0.018641356378793716, 0.002224429277703166, -0.0036705618258565664, 0.02083355374634266, -0.01640840619802475, -0.007780231069773436, 0.0067898062989115715, 0.5133089423179626, -0.3305710256099701, -0.24781763553619385, -0.04184449836611748, 0.03650413453578949, -0.01412940677255392, 0.01959136314690113));
	r += mul(s0_3, min16float4x4(0.006619333289563656, 0.12106798589229584, 0.05666962265968323, 0.13483670353889465, 0.2233506143093109, -0.2836831212043762, 0.1564265936613083, -0.13175271451473236, -0.02451072260737419, 0.01349598914384842, -0.007181739434599876, 0.006100626662373543, -0.05707830563187599, 0.06298258900642395, 0.10180546343326569, 0.0350654236972332));
	r += mul(s0_4, min16float4x4(0.013736908324062824, -0.23729971051216125, -0.013450207188725471, -0.2509767413139343, -0.04481039568781853, 0.7453173995018005, -0.26269710063934326, 0.3032192885875702, 0.16650758683681488, -0.010976477526128292, 0.36230525374412537, -0.17677262425422668, 0.07953892648220062, 0.07081028819084167, -0.16250330209732056, -0.032078973948955536));
	r += mul(s0_5, min16float4x4(-0.0037763731088489294, -0.029310213401913643, -0.013640182092785835, -0.032426122575998306, -0.010225466452538967, -0.008600395172834396, 0.01751801371574402, 0.038992732763290405, -0.3384287357330322, -0.21337194740772247, 0.24904952943325043, 0.7778934240341187, 0.042811084538698196, -0.0934268906712532, 0.037560995668172836, -0.03381505608558655));
	r += mul(s0_6, min16float4x4(-0.04220375791192055, 0.08286081254482269, -0.08295630663633347, 0.05541764572262764, -0.013106528669595718, 0.012688924558460712, 0.043328046798706055, -0.0284078661352396, -0.0051217214204370975, -0.0038734283298254013, 0.003059669630602002, -0.00047158478992059827, -0.007240028120577335, 0.008952787145972252, -0.16479387879371643, 0.004790343809872866));
	r += mul(s0_7, min16float4x4(-0.05982077121734619, 0.005788532551378012, -0.0724736824631691, -0.024113154038786888, -0.04821661487221718, -0.07583057135343552, 0.04605191946029663, 0.14209038019180298, 0.01139115821570158, 0.015487013384699821, 0.02312171272933483, 0.004552794154733419, -0.0011442971881479025, -0.027397243306040764, 0.22394788265228271, 0.056274592876434326));
	r += mul(s0_8, min16float4x4(0.017320768907666206, 0.02216986007988453, -0.002003937028348446, -0.03283733129501343, 0.016580183058977127, -0.023130297660827637, 0.007511812262237072, -0.03161894902586937, -0.007155359257012606, -0.014586937613785267, -0.033570051193237305, -0.010302713140845299, 0.04446784779429436, 0.06438794732093811, -0.0515250526368618, -0.05777451768517494));
	r += mul(s1_0, min16float4x4(0.07930149137973785, 0.00801762193441391, 0.048441097140312195, -0.01177488174289465, 0.1439450979232788, -0.033587634563446045, 0.10672912746667862, 0.019589785486459732, -0.02458961494266987, 0.002871706848964095, 0.007877504453063011, 0.014550001360476017, -0.05133404582738876, 0.148464635014534, -0.0705563873052597, 0.031964756548404694));
	r += mul(s1_1, min16float4x4(-0.029688946902751923, 0.04200117290019989, -0.03795525059103966, 0.08546260744333267, -0.4012371003627777, 0.2251078337430954, 0.029518630355596542, 0.17047329246997833, -0.10375749319791794, 0.0956755205988884, -0.05879588797688484, 0.04271457716822624, -0.0625927597284317, 0.26072728633880615, -0.10834727436304092, -0.06680253148078918));
	r += mul(s1_2, min16float4x4(-0.06087130308151245, 0.13134782016277313, -0.06768294423818588, 0.06790228933095932, 0.08422362059354782, -0.21842409670352936, 0.10373957455158234, 0.019860705360770226, 0.10667373239994049, -0.05134850740432739, -0.016194181516766548, -0.06305105984210968, -0.013481546193361282, -0.05225261300802231, 0.03686656802892685, -0.023870838806033134));
	r += mul(s1_3, min16float4x4(-0.1164608746767044, 0.04840712621808052, -0.14794930815696716, 0.017988191917538643, -0.01100671011954546, 0.007856865413486958, 0.060699328780174255, -0.05335147678852081, 0.00993327982723713, -0.008562161587178707, 0.006089893635362387, -0.005292505491524935, -0.844048798084259, 0.34863296151161194, -0.10667596012353897, 0.3796280026435852));
	r += mul(s1_4, min16float4x4(0.9004458785057068, -0.10422476381063461, 0.3094741404056549, -0.5058123469352722, -0.12427302449941635, 0.15770864486694336, -0.8115535378456116, 0.03731969743967056, -0.2104489654302597, -0.06518585979938507, -0.18707039952278137, 0.04672728478908539, 0.8355795741081238, -1.3945311307907104, 0.18003210425376892, 0.20858414471149445));
	r += mul(s1_5, min16float4x4(-0.17626900970935822, 0.2570675313472748, -0.18506275117397308, 0.1597444713115692, 0.13922618329524994, 0.03607255592942238, 0.12426897883415222, -0.27444612979888916, -0.35106268525123596, -0.42675575613975525, 0.2643814980983734, 0.08119890093803406, -0.12416240572929382, 0.3798987865447998, -0.15572886168956757, -0.018452918156981468));
	r += mul(s1_6, min16float4x4(0.01956423558294773, -0.06031963229179382, 0.10130321979522705, 0.0022611995227634907, 0.024855762720108032, -0.00958855077624321, 0.02282988280057907, 0.011014332063496113, 0.006147042382508516, 0.005607801955193281, -0.011721163056790829, -0.0019774576649069786, 0.1507260650396347, 0.041521333158016205, -0.4125578999519348, 0.3409128785133362));
	r += mul(s1_7, min16float4x4(-0.14013494551181793, -0.14110037684440613, 0.3607398271560669, 0.12939506769180298, 0.010322627611458302, -0.07008327543735504, 0.08471687138080597, -0.0656718835234642, 0.026164252310991287, -0.011125687509775162, -0.0562773272395134, -0.06225932016968727, 0.1620783805847168, -0.04244174435734749, 0.9863313436508179, -1.298841953277588));
	r += mul(s1_8, min16float4x4(-0.04565517231822014, -0.02571062557399273, -0.01291726902127266, 0.12017233669757843, 0.025220168754458427, -0.03475648909807205, 0.014516483061015606, 0.03342457115650177, 0.1706976592540741, 0.16359208524227142, -0.09643931686878204, -0.13548235595226288, -0.17077305912971497, -0.06947638839483261, -0.03925454616546631, 0.3938308358192444));
	r += float4(-0.00015197411994449794, -7.605229620821774e-05, 7.197139348136261e-05, 0.00013713825319427997);
	return tanh(r);
}
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float4 s0_0 = l0(-1.0, -1.0);
	min16float4 s0_1 = l0(0.0, -1.0);
	min16float4 s0_2 = l0(1.0, -1.0);
	min16float4 s0_3 = l0(-1.0, 0.0);
	min16float4 s0_4 = l0(0.0, 0.0);
	min16float4 s0_5 = l0(1.0, 0.0);
	min16float4 s0_6 = l0(-1.0, 1.0);
	min16float4 s0_7 = l0(0.0, 1.0);
	min16float4 s0_8 = l0(1.0, 1.0);
	min16float4 s1_0 = max(-s0_0, 0.0);
	min16float4 s1_1 = max(-s0_1, 0.0);
	min16float4 s1_2 = max(-s0_2, 0.0);
	min16float4 s1_3 = max(-s0_3, 0.0);
	min16float4 s1_4 = max(-s0_4, 0.0);
	min16float4 s1_5 = max(-s0_5, 0.0);
	min16float4 s1_6 = max(-s0_6, 0.0);
	min16float4 s1_7 = max(-s0_7, 0.0);
	min16float4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	down[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 4
//!DESC CuNNy-1x4C-BILINEAR-NVL-shuffle
//!STYLE PS
//!IN down, INPUT
float4 Pass4(float2 pos) {
	float2 pt = float2(GetInputPt());
	const static float3x3 rgb2yuv = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081};
	const static float3x3 yuv2rgb = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float4 r = 0.0;
	float2 size = float2(GetInputSize());
	float2 f = frac(pos * size);
	float3 yuv = mul(rgb2yuv, INPUT.SampleLevel(SL, pos, 0).rgb);
	int2 i = int2(f * 2.0);
	r.r = down.SampleLevel(SP, (float2(0.5, 0.5) - f) * pt + pos, 0)[2*i.y + i.x];
	r.r += yuv.r;
	r.a = 1.0;
	r.r = clamp(r, 0.0, 1.0);
	float3 px = mul(yuv2rgb, float3(r.r, yuv.yz));
	return float4(px, 1.0);
}
