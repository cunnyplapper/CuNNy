// CuNNy 1x4C BILINEAR CHROMA NVL
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

//!MAGPIE EFFECT
//!VERSION 3
//!OUTPUT_WIDTH INPUT_WIDTH * 2
//!OUTPUT_HEIGHT INPUT_HEIGHT * 2

//!TEXTURE
Texture2D INPUT;

//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D in_0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D conv1_0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D out_0;

//!PASS 1
//!DESC CuNNy-1x4C-BILINEAR-CHROMA-NVL-in
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT in_0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) (dot(float3(-1.2935184240341187, -2.3293423652648926, -0.5961052179336548), O(INPUT, float2(x, y)).rgb) + 3.2710530757904053)
float4 f0(float2 pt, float2 pos, min16float s0_0, min16float s0_1, min16float s0_2, min16float s0_3, min16float s0_4, min16float s0_5, min16float s0_6, min16float s0_7, min16float s0_8) {
	min16float4 r = 0.0;
	r += min16float4(0.0033560688607394695, 0.22295020520687103, -0.08567342907190323, -0.007819266989827156) * s0_0;
	r += min16float4(-0.008576152846217155, -0.05238250270485878, -0.014106979593634605, 0.31535640358924866) * s0_1;
	r += min16float4(0.004778063856065273, -0.03203678876161575, 0.16997520625591278, 0.006231635343283415) * s0_2;
	r += min16float4(-0.34538474678993225, -0.04467674717307091, -0.008320263586938381, 0.018307162448763847) * s0_3;
	r += min16float4(0.36705490946769714, -0.2958984076976776, -0.26789891719818115, -0.3408203423023224) * s0_4;
	r += min16float4(-0.00465471250936389, 0.053442057222127914, 0.04382626339793205, 0.009267576970160007) * s0_5;
	r += min16float4(-0.008713733404874802, -0.04253387823700905, 0.1831735223531723, -0.006039094179868698) * s0_6;
	r += min16float4(-0.007306753192096949, 0.05897706747055054, 0.06488259136676788, 0.00748061016201973) * s0_7;
	r += min16float4(0.00010234749061055481, 0.13321097195148468, -0.08683134615421295, -0.0013077292824164033) * s0_8;
	r += min16float4(0.0010188933229073882, 0.0004930049763061106, 0.00146624562330544, -0.0005145595059730113);
	return r;
}
void Pass1(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float s0_0 = l0(-1.0, -1.0);
	min16float s0_1 = l0(0.0, -1.0);
	min16float s0_2 = l0(1.0, -1.0);
	min16float s0_3 = l0(-1.0, 0.0);
	min16float s0_4 = l0(0.0, 0.0);
	min16float s0_5 = l0(1.0, 0.0);
	min16float s0_6 = l0(-1.0, 1.0);
	min16float s0_7 = l0(0.0, 1.0);
	min16float s0_8 = l0(1.0, 1.0);
	in_0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8);
}
//!PASS 2
//!DESC CuNNy-1x4C-BILINEAR-CHROMA-NVL-conv1
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN in_0
//!OUT conv1_0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) O(in_0, float2(x, y))
float4 f0(float2 pt, float2 pos, min16float4 s0_0, min16float4 s0_1, min16float4 s0_2, min16float4 s0_3, min16float4 s0_4, min16float4 s0_5, min16float4 s0_6, min16float4 s0_7, min16float4 s0_8, min16float4 s1_0, min16float4 s1_1, min16float4 s1_2, min16float4 s1_3, min16float4 s1_4, min16float4 s1_5, min16float4 s1_6, min16float4 s1_7, min16float4 s1_8) {
	min16float4 r = 0.0;
	r += mul(s0_0, min16float4x4(-0.2436542958021164, 0.1733410507440567, 0.13834844529628754, 0.17260757088661194, 0.13632605969905853, 0.0012092306278645992, -0.03763505816459656, -0.03164516016840935, 0.022009272128343582, -0.008595914579927921, -0.026667747646570206, 7.740845467196777e-05, 0.03785239905118942, -0.10131096094846725, -0.11490219831466675, -0.05722104012966156));
	r += mul(s0_1, min16float4x4(0.08803839236497879, 0.2800017297267914, 0.2612466812133789, -0.024466272443532944, -0.01135015208274126, 0.26336783170700073, 0.22508932650089264, 0.14794142544269562, 0.013351870700716972, 0.29589903354644775, 0.24267630279064178, 0.23512113094329834, -0.022052235901355743, 0.05408646911382675, 0.06664039194583893, 0.027138831093907356));
	r += mul(s0_2, min16float4x4(0.031445395201444626, -0.08573585748672485, -0.054334644228219986, -0.10669410228729248, 0.02282809652388096, 0.02546992152929306, 0.018389230594038963, 0.00341655220836401, -0.04035525768995285, 0.022325096651911736, 0.05233139172196388, 0.019135598093271255, -0.108207106590271, -0.12200693786144257, -0.10484688729047775, -0.09301629662513733));
	r += mul(s0_3, min16float4x4(0.0492824986577034, -0.029675722122192383, -0.0724591463804245, -0.04356366768479347, 0.05971614271402359, 0.3212890326976776, 0.25487786531448364, 0.1844763159751892, -0.014542876742780209, 0.2568359971046448, 0.24055425822734833, 0.15791088342666626, -0.07407976686954498, 0.13357344269752502, 0.0063653914257884026, -0.16116522252559662));
	r += mul(s0_4, min16float4x4(-0.20947284996509552, 0.06951838731765747, -0.36420977115631104, 0.1577148288488388, 0.13003690540790558, -0.2453882098197937, -0.17431598901748657, -0.11560235172510147, -0.5329605340957642, -0.33631381392478943, -0.18501242995262146, -0.08251015841960907, 0.29112744331359863, 0.08867053687572479, -0.08321981132030487, -0.4151036739349365));
	r += mul(s0_5, min16float4x4(-0.011794432066380978, -0.13134807348251343, -0.027810463681817055, -0.37339600920677185, 0.03403771296143532, -0.013145938515663147, -0.07689870148897171, -0.06813598424196243, 0.01461818441748619, -0.00876579713076353, -0.006024436559528112, 0.014594526030123234, -0.006944160908460617, 0.06325801461935043, 0.04648090898990631, -0.08549211919307709));
	r += mul(s0_6, min16float4x4(0.16640084981918335, 0.08381260186433792, 0.050901107490062714, 0.004709204658865929, 0.04671123996376991, 0.03427387401461601, 0.004698445554822683, 0.0057889544405043125, -0.06626869738101959, 0.017560021951794624, 0.018950337544083595, 0.04468732699751854, 0.1623331755399704, 0.023403504863381386, -0.22467945516109467, 0.09850344806909561));
	r += mul(s0_7, min16float4x4(-0.010219458490610123, -0.08663026243448257, -0.09741229563951492, -0.023256346583366394, 0.029064174741506577, -0.005243659019470215, -0.06860139966011047, -0.08520449697971344, 0.007523627951741219, -0.019099712371826172, -0.0012306991266086698, -0.024290069937705994, -0.21729262173175812, -0.04103763401508331, 0.5722792148590088, 0.5292970538139343));
	r += mul(s0_8, min16float4x4(-0.03406490385532379, -0.07835593074560165, 0.04551120847463608, 0.16162140667438507, 0.00587621470913291, -0.025920305401086807, 0.027999401092529297, 0.027384957298636436, -0.03561524674296379, 0.019512617960572243, 0.045460138469934464, 0.056042227894067764, -0.0038828460965305567, -0.019741686061024666, 0.005509837530553341, 0.10864260047674179));
	r += mul(s1_0, min16float4x4(0.009426388889551163, -0.14208990335464478, -0.1224324107170105, -0.10274334996938705, 0.014255721122026443, 0.016553733497858047, 0.006855664774775505, -0.006031185854226351, -0.24560071527957916, 0.026133228093385696, 0.06214816868305206, 0.05167121812701225, -0.23974812030792236, 0.15771245956420898, 0.165787011384964, 0.05602741241455078));
	r += mul(s1_1, min16float4x4(-0.06219891458749771, -0.1407526284456253, -0.26032280921936035, -0.03210955485701561, 0.16359543800354004, -0.31170716881752014, -0.2650647461414337, -0.16552665829658508, -0.318406343460083, -0.2824971377849579, -0.10692723840475082, -0.10191963613033295, 0.07599261403083801, -0.031038282439112663, -0.0671403631567955, -0.06608317792415619));
	r += mul(s1_2, min16float4x4(0.1548062115907669, 0.04042951017618179, -0.010269727557897568, -0.2519090175628662, 0.094000905752182, -0.08374263346195221, -0.08188848942518234, -0.03042859211564064, -0.036911867558956146, -0.007456188090145588, 0.013443157076835632, 0.003321801545098424, 0.1717069000005722, 0.11030366271734238, 0.04378833994269371, 0.04557706415653229));
	r += mul(s1_3, min16float4x4(-0.06675596535205841, 0.0312519408762455, 0.056027498096227646, 0.046974726021289825, 0.2213512510061264, -0.36182039976119995, -0.30129021406173706, -0.24547339975833893, -0.29399192333221436, -0.26465079188346863, -0.14013688266277313, -0.04482924938201904, 0.051135435700416565, -0.016427528113126755, -0.12329693883657455, 0.13448774814605713));
	r += mul(s1_4, min16float4x4(0.26237136125564575, 0.3916015326976776, -0.04299095273017883, 0.010397067293524742, 0.10085191577672958, 0.1654864400625229, 0.05272463336586952, -0.034481946378946304, 0.015767524018883705, 0.3740241229534149, 0.3368886411190033, 0.25970807671546936, -0.08853067457675934, 0.47580888867378235, 0.11740019172430038, -0.15103834867477417));
	r += mul(s1_5, min16float4x4(-0.17996765673160553, -0.046295225620269775, 0.4853522777557373, 0.5224199295043945, 0.030703308060765266, 0.0009664585231803358, 0.008402053266763687, -0.02297893539071083, -0.06967361271381378, 0.08961796015501022, 0.07787831127643585, 0.10592211037874222, -0.007324301637709141, -0.1247139424085617, -0.010889283381402493, -0.14004436135292053));
	r += mul(s1_6, min16float4x4(-0.12230046838521957, -0.08392500877380371, -0.07788234949111938, -0.05506470426917076, 0.13135327398777008, -0.07603653520345688, -0.051903463900089264, -0.09216099232435226, -0.020388096570968628, -0.014209710992872715, -0.004175064153969288, 0.009935520589351654, -0.002017509425058961, -0.07596560567617416, -0.09235348552465439, -0.09763359278440475));
	r += mul(s1_7, min16float4x4(-0.04634258523583412, 0.034059084951877594, -0.06860539317131042, 0.10792519897222519, 0.016202591359615326, -0.004434893373399973, -0.006956807337701321, 0.0459129698574543, -0.08330223709344864, 0.070560023188591, 0.08147668838500977, 0.06114966422319412, -0.00779735529795289, -0.2010568231344223, -0.368056058883667, -0.007024810649454594));
	r += mul(s1_8, min16float4x4(0.023245036602020264, -0.023798568174242973, 0.06788848340511322, -0.036901433020830154, -0.006667356006801128, 0.006288496777415276, 0.015238367021083832, 0.007672903593629599, -0.050890032202005386, 0.01339307613670826, -0.0371830090880394, -0.04929807037115097, -0.06617210060358047, -0.07689668983221054, 0.15864475071430206, 0.04153615981340408));
	r += min16float4(-0.0005107847391627729, -8.31900179036893e-05, -2.263986061734613e-05, -0.00014496297808364034);
	return r;
}
void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float4 s0_0 = l0(-1.0, -1.0);
	min16float4 s0_1 = l0(0.0, -1.0);
	min16float4 s0_2 = l0(1.0, -1.0);
	min16float4 s0_3 = l0(-1.0, 0.0);
	min16float4 s0_4 = l0(0.0, 0.0);
	min16float4 s0_5 = l0(1.0, 0.0);
	min16float4 s0_6 = l0(-1.0, 1.0);
	min16float4 s0_7 = l0(0.0, 1.0);
	min16float4 s0_8 = l0(1.0, 1.0);
	min16float4 s1_0 = max(-s0_0, 0.0);
	min16float4 s1_1 = max(-s0_1, 0.0);
	min16float4 s1_2 = max(-s0_2, 0.0);
	min16float4 s1_3 = max(-s0_3, 0.0);
	min16float4 s1_4 = max(-s0_4, 0.0);
	min16float4 s1_5 = max(-s0_5, 0.0);
	min16float4 s1_6 = max(-s0_6, 0.0);
	min16float4 s1_7 = max(-s0_7, 0.0);
	min16float4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	conv1_0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 3
//!DESC CuNNy-1x4C-BILINEAR-CHROMA-NVL-out
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN conv1_0
//!OUT out_0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) O(conv1_0, float2(x, y))
float4 f0(float2 pt, float2 pos, min16float4 s0_0, min16float4 s0_1, min16float4 s0_2, min16float4 s0_3, min16float4 s0_4, min16float4 s0_5, min16float4 s0_6, min16float4 s0_7, min16float4 s0_8, min16float4 s1_0, min16float4 s1_1, min16float4 s1_2, min16float4 s1_3, min16float4 s1_4, min16float4 s1_5, min16float4 s1_6, min16float4 s1_7, min16float4 s1_8) {
	min16float4 r = 0.0;
	r += mul(s0_0, min16float4x4(-0.011716793291270733, 0.0023923174012452364, -0.0026871466543525457, 0.008987720124423504, -0.005260551813989878, 0.008318350650370121, 0.0027493187226355076, -0.0035481208469718695, -0.047574203461408615, 0.0769033208489418, -0.07998476177453995, 0.031160704791545868, -0.03942616656422615, -0.06980442255735397, 0.0716661810874939, 0.02128898724913597));
	r += mul(s0_1, min16float4x4(0.020694797858595848, -0.009110762737691402, -0.013238883577287197, -0.007376720663160086, -0.0059388745576143265, -0.01782512478530407, 0.005738467443734407, -0.00672892015427351, 0.07008088380098343, -0.017814284190535545, -0.028092967346310616, -0.08771207183599472, -0.07056079059839249, -0.06380973011255264, 0.03729311749339104, 0.10864269733428955));
	r += mul(s0_2, min16float4x4(0.04101283475756645, 0.02936462126672268, -0.024267088621854782, -0.014849004335701466, -0.0439019650220871, -0.036988772451877594, -0.005343438126146793, 0.01310630701482296, 0.0832892581820488, 0.04016610607504845, 0.054086022078990936, 0.01021817047148943, -0.008250262588262558, 0.04601175710558891, -0.0042747315019369125, -0.0011926215374842286));
	r += mul(s0_3, min16float4x4(0.03455431014299393, -0.004596445709466934, 0.0024454607628285885, -0.00073754828190431, -0.021169522777199745, -0.0010872130515053868, -0.031930338591337204, 0.013865100219845772, -0.07367017865180969, 0.05736028403043747, -0.08661437034606934, 0.1363740861415863, 0.09247950464487076, -0.01710132509469986, 0.0416339747607708, -0.0626184344291687));
	r += mul(s0_4, min16float4x4(-0.4813697338104248, 0.08121248334646225, 0.06065337359905243, 0.03883654251694679, -0.14697103202342987, -0.11199609190225601, -0.04090844839811325, -0.007797725964337587, -0.13817891478538513, -0.43775615096092224, 0.2548839747905731, -0.22002270817756653, -0.09252023696899414, 0.2618841230869293, -0.47651004791259766, -0.19641096889972687));
	r += mul(s0_5, min16float4x4(0.09346252679824829, -0.5269617438316345, 0.19543218612670898, 0.04963046684861183, 0.0064076827839016914, -0.01003680657595396, 0.008269445970654488, -0.025780055671930313, -0.16600964963436127, -0.14846351742744446, -0.022023756057024002, 0.004830989055335522, 0.14424866437911987, 0.00991752278059721, 0.05571230873465538, -0.008252891711890697));
	r += mul(s0_6, min16float4x4(0.05721762031316757, -0.014920740388333797, 0.02015131153166294, -0.04064246267080307, -0.058779407292604446, 0.005224431864917278, -0.046471934765577316, 0.012296179309487343, 0.009403185918927193, -0.015330195426940918, 0.07600691169500351, -0.010392537340521812, 0.08088761568069458, 0.03097405657172203, 0.01690877415239811, -0.013845063745975494));
	r += mul(s0_7, min16float4x4(0.06711149215698242, 0.22802747786045074, -0.47449275851249695, 0.08736468106508255, 0.007587102707475424, 0.010754178278148174, -0.0066469828598201275, 0.00211728154681623, 0.16649796068668365, 0.04128357023000717, -0.0012782547855749726, -0.028071926906704903, -0.1762697696685791, 0.014534026384353638, -0.12548808753490448, 0.046410102397203445));
	r += mul(s0_8, min16float4x4(0.056496839970350266, 0.09274952113628387, 0.09788798540830612, -0.24548111855983734, 0.12081138789653778, -0.010213477537035942, -0.024392234161496162, -0.1662730574607849, 0.011151258833706379, 0.14892609417438507, -0.12911422550678253, 0.0019987965933978558, -0.002118198899552226, -0.14134244620800018, 0.1313476711511612, -0.014005607925355434));
	r += mul(s1_0, min16float4x4(0.029520876705646515, -0.004811038728803396, -0.007863699458539486, -0.0031267672311514616, 0.04278344288468361, -0.02755042351782322, -0.0413794219493866, -0.0053090848959982395, 0.0120469331741333, -0.014176758006215096, 0.01563107967376709, 0.0006288447766564786, -0.0011827261187136173, 0.007215282879769802, -0.007741219364106655, 0.006854800041764975));
	r += mul(s1_1, min16float4x4(0.009836291894316673, 0.016661304980516434, 0.006253065541386604, -0.023324597626924515, 0.1449415385723114, 0.26464778184890747, -0.20166265964508057, -0.20734038949012756, 0.008227705955505371, 0.028506625443696976, -0.015686510130763054, 0.03649359941482544, 0.03424576297402382, 0.0011863579275086522, 0.020569760352373123, -0.02105470933020115));
	r += mul(s1_2, min16float4x4(-0.025281595066189766, 0.020057156682014465, -0.0328378900885582, 0.003154172096401453, 0.09395530819892883, 0.0759131982922554, -0.01873764395713806, -0.08795338869094849, -0.09462324529886246, -0.052611321210861206, -0.06767139583826065, 0.0032552285119891167, -0.01799553819000721, 0.00025785589241422713, 0.0001333899999735877, 0.004328524228185415));
	r += mul(s1_3, min16float4x4(-0.009130250662565231, 0.0057393512688577175, 0.0035175352822989225, -0.02056152932345867, 0.1674225628376007, -0.19973224401474, 0.242128387093544, -0.21588599681854248, 0.036074426025152206, 0.014480152167379856, -0.007759260479360819, -0.035278283059597015, -0.007963630370795727, -0.04721967130899429, -0.016551706939935684, -0.005527464672923088));
	r += mul(s1_4, min16float4x4(0.017734406515955925, 0.060057610273361206, 0.12061654776334763, 0.045285288244485855, -0.642552375793457, 0.08710314333438873, 0.08231645822525024, 0.8486204743385315, 0.40711644291877747, 0.004355188924819231, 0.3016936182975769, -0.1354958713054657, 0.24829959869384766, 0.26604509353637695, 0.018275467678904533, -0.021345069631934166));
	r += mul(s1_5, min16float4x4(0.06567403674125671, -0.010001962073147297, 0.0014083633432164788, 0.1145029291510582, 0.03390795737504959, -0.14203132688999176, 0.10591607540845871, 0.02228432148694992, -0.011384859681129456, 0.276698499917984, -0.10568825155496597, 0.17026855051517487, -0.07869715988636017, -0.0392732247710228, -0.05065690353512764, 0.009376334957778454));
	r += mul(s1_6, min16float4x4(-0.030342815443873405, -0.011264828033745289, 0.006656025070697069, 0.019346263259649277, 0.11450633406639099, -0.023490404710173607, 0.09399513155221939, -0.112564317882061, -0.05822664126753807, 0.0007384480559267104, -0.022249635308980942, 0.029862618073821068, -0.08476204425096512, -0.05504205450415611, -0.028345340862870216, 0.010106349363923073));
	r += mul(s1_7, min16float4x4(0.06879480928182602, -0.029861077666282654, -0.02491130493581295, 0.022923901677131653, 0.059816233813762665, 0.11595644801855087, -0.1613263040781021, 0.013704091310501099, -0.1247602105140686, -0.06517649441957474, -0.00831170566380024, 0.06372154504060745, 0.010041115805506706, -0.11735434830188751, 0.21435576677322388, 0.1173519566655159));
	r += mul(s1_8, min16float4x4(-0.045330680906772614, 0.0439973808825016, 0.0455046147108078, -0.015220913104712963, -0.01105077750980854, 0.014121292158961296, 0.019836271181702614, 0.0060296994633972645, -0.00010530302097322419, -0.06969376653432846, 0.07133054733276367, 0.0006864459137432277, 0.012303898110985756, 0.07543941587209702, -0.04797850549221039, 0.0009539515594951808));
	r += min16float4(-7.491873839171603e-05, -3.449025462032296e-05, -0.00011035328498110175, -9.329249587608501e-05);
	return tanh(r);
}
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float4 s0_0 = l0(-1.0, -1.0);
	min16float4 s0_1 = l0(0.0, -1.0);
	min16float4 s0_2 = l0(1.0, -1.0);
	min16float4 s0_3 = l0(-1.0, 0.0);
	min16float4 s0_4 = l0(0.0, 0.0);
	min16float4 s0_5 = l0(1.0, 0.0);
	min16float4 s0_6 = l0(-1.0, 1.0);
	min16float4 s0_7 = l0(0.0, 1.0);
	min16float4 s0_8 = l0(1.0, 1.0);
	min16float4 s1_0 = max(-s0_0, 0.0);
	min16float4 s1_1 = max(-s0_1, 0.0);
	min16float4 s1_2 = max(-s0_2, 0.0);
	min16float4 s1_3 = max(-s0_3, 0.0);
	min16float4 s1_4 = max(-s0_4, 0.0);
	min16float4 s1_5 = max(-s0_5, 0.0);
	min16float4 s1_6 = max(-s0_6, 0.0);
	min16float4 s1_7 = max(-s0_7, 0.0);
	min16float4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	out_0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 4
//!DESC CuNNy-1x4C-BILINEAR-CHROMA-NVL-shuffle
//!STYLE PS
//!IN out_0, INPUT
float4 Pass4(float2 pos) {
	float2 pt = float2(GetInputPt());
	const static float3x3 rgb2yuv = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081};
	const static float3x3 yuv2rgb = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float4 r = 0.0;
	float2 size = float2(GetInputSize());
	float2 f = frac(pos * size);
	float3 yuv = mul(rgb2yuv, INPUT.SampleLevel(SL, pos, 0).rgb);
	int2 i = int2(f * 2.0);
	r.r = out_0.SampleLevel(SP, (float2(0.5, 0.5) - f) * pt + pos, 0)[2*i.y + i.x];
	r.r += yuv.r;
	r.a = 1.0;
	r.r = clamp(r, 0.0, 1.0);
	float3 px = mul(yuv2rgb, float3(r.r, yuv.yz));
	return float4(px, 1.0);
}
