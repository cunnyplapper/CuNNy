// CuNNy 1x4C BILINEAR CHROMA TEST NVL
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

//!MAGPIE EFFECT
//!VERSION 3
//!OUTPUT_WIDTH INPUT_WIDTH * 2
//!OUTPUT_HEIGHT INPUT_HEIGHT * 2

//!TEXTURE
Texture2D INPUT;


//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_SNORM
Texture2D t1;

//!PASS 1
//!DESC CuNNy-1x4C-BILINEAR-CHROMA-TEST-NVL-in
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) (dot(float3(-0.715873122215271, -1.34689462184906, -0.2895980775356293), O(INPUT, float2(x, y)).rgb) + 2.3331551551818848)
float4 f0(float2 pt, float2 pos, min16float s0_0, min16float s0_1, min16float s0_2, min16float s0_3, min16float s0_4, min16float s0_5, min16float s0_6, min16float s0_7, min16float s0_8) {
	min16float4 r = 0.0;
	r += min16float4(-0.0126322648, 0.0107601602, -0.0097983992, 0.0462557413) * s0_0;
	r += min16float4(0.1573418975, -0.0249976646, 0.0016607732, -0.1243394986) * s0_1;
	r += min16float4(0.0455510914, 0.0098620867, 0.0028613398, -0.0391146243) * s0_2;
	r += min16float4(0.0896523148, 0.0105833644, -0.0032040540, -0.3798041046) * s0_3;
	r += min16float4(-0.5699034333, -0.4951007366, -0.4892858863, 0.5562186241) * s0_4;
	r += min16float4(0.0316768289, 0.0491806604, 0.4990234077, -0.0493853539) * s0_5;
	r += min16float4(0.0115378695, -0.0195775740, 0.0142909139, -0.0819013044) * s0_6;
	r += min16float4(0.2465412617, 0.5175781250, 0.0360267274, 0.1176129207) * s0_7;
	r += min16float4(-0.0020359592, -0.0597033612, -0.0505828373, -0.0428466350) * s0_8;
	r += min16float4(-0.0009517722064629197, -0.0014529350446537137, 0.00018788989109452814, 0.0024675994645804167);
	return r;
}
void Pass1(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float s0_0 = l0(-1.0, -1.0);
	min16float s0_1 = l0(0.0, -1.0);
	min16float s0_2 = l0(1.0, -1.0);
	min16float s0_3 = l0(-1.0, 0.0);
	min16float s0_4 = l0(0.0, 0.0);
	min16float s0_5 = l0(1.0, 0.0);
	min16float s0_6 = l0(-1.0, 1.0);
	min16float s0_7 = l0(0.0, 1.0);
	min16float s0_8 = l0(1.0, 1.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8);
}
//!PASS 2
//!DESC CuNNy-1x4C-BILINEAR-CHROMA-TEST-NVL-conv1
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t0
//!OUT t1
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) O(t0, float2(x, y))
float4 f0(float2 pt, float2 pos, min16float4 s0_0, min16float4 s0_1, min16float4 s0_2, min16float4 s0_3, min16float4 s0_4, min16float4 s0_5, min16float4 s0_6, min16float4 s0_7, min16float4 s0_8, min16float4 s1_0, min16float4 s1_1, min16float4 s1_2, min16float4 s1_3, min16float4 s1_4, min16float4 s1_5, min16float4 s1_6, min16float4 s1_7, min16float4 s1_8) {
	min16float4 r = 0.0;
	r += mul(s0_0, min16float4x4(0.0017344136, -0.0525990501, 0.1293321401, -0.0244855452, 0.1391528696, -0.1747712195, -0.2165216208, 0.0006316163, -0.0610262305, 0.1350469589, -0.1847385466, -0.0365763269, -0.0257279351, 0.0394397788, 0.0328742899, 0.0299063530));
	r += mul(s0_1, min16float4x4(-0.0107099256, -0.1612704694, -0.3072096407, 0.1420909762, -0.1619609147, -0.1712116152, 0.7783957124, 0.0143623687, -0.1101078093, -0.0147596877, 0.3122264445, -0.2062652707, 0.1097455546, 0.0905716345, -0.1333138496, -0.0109663149));
	r += mul(s0_2, min16float4x4(0.1913738549, -0.0445442386, 0.2465111911, 0.1254007220, -0.0522140190, -0.0207653679, 0.2138562500, -0.0116606429, 0.0323031880, 0.0073945546, 0.0053772796, -0.0239480492, 0.1008315161, 0.0491954647, 0.1036351025, -0.0075818677));
	r += mul(s0_3, min16float4x4(-0.2568878233, 0.1105543375, 0.1140109003, 0.0290466528, 0.2128338963, -0.0545634665, -0.1695457101, -0.0455593765, -0.0435955264, -0.2699806392, -0.3949677646, 0.0710419789, 0.0377034582, 0.0063713165, -0.0283829607, -0.0128481258));
	r += mul(s0_4, min16float4x4(0.2452749759, 0.7950845361, 0.2452287376, -0.3288494945, -0.0599813536, 0.6503252387, 0.0620801970, 0.4012832046, -0.2447463721, -0.0345115550, 0.5410158634, 0.3504453003, -0.0735084489, 0.0606071874, 0.1963315010, 0.0437015854));
	r += mul(s0_5, min16float4x4(0.1521608829, 0.0323581994, -0.3544380069, -0.2425642163, -0.1684579849, 0.1006308645, 0.0915602595, 0.1572928429, 0.0491340198, 0.0096356990, -0.0043325364, -0.0318493694, 0.1286209673, 0.0276605804, -0.2539274693, -0.3642203808));
	r += mul(s0_6, min16float4x4(-0.0338108949, -0.3780199587, -0.0797448307, 0.1162191182, 0.0013183426, 0.2330949903, 0.0401602462, -0.0690921247, 0.0615824722, 0.2218148410, -0.0139272902, -0.0518942215, 0.0075994879, -0.0676181689, -0.0153525695, 0.0010351735));
	r += mul(s0_7, min16float4x4(0.0174630266, -0.3860743046, -0.2151203007, 0.5214838982, -0.0067803040, 0.1566896290, 0.1284186989, -0.2495082319, 0.0263031330, 0.2133279592, 0.1361047029, -0.1064144149, -0.0203392264, -0.1063898131, -0.0911767110, 0.0271319766));
	r += mul(s0_8, min16float4x4(-0.0880517438, -0.2241182774, 0.0705299228, 0.3340637386, 0.0676264912, 0.1635713875, -0.0404086821, -0.2299798727, 0.0057773166, -0.0083867991, -0.0061181881, -0.0096739754, -0.0972328633, -0.1280724108, 0.1159371361, 0.1997705847));
	r += mul(s1_0, min16float4x4(0.0497614704, -0.0425096229, 0.0345481262, -0.0639318600, 0.2114927024, 0.0151451621, 0.1352542192, 0.0168790016, 0.1451500803, -0.1720660329, -0.1652324200, -0.0667164847, -0.0047526122, 0.0479836427, -0.0389396772, 0.0012047724));
	r += mul(s1_1, min16float4x4(-0.0581954904, -0.0140471244, 0.0350939482, 0.0929332450, -0.1971048415, -0.1242781281, -0.4387269914, -0.5657125115, -0.0254507232, 0.0098757092, 0.1344240308, -0.0631307885, 0.0670154914, 0.1712199003, 0.3090330064, -0.0744939744));
	r += mul(s1_2, min16float4x4(-0.0967640206, -0.0727622285, -0.0834960416, -0.0594540723, 0.0448003747, -0.0175465681, 0.2802738249, -0.1929503083, -0.0259647742, 0.0112822549, 0.0048025614, 0.0006622754, -0.2246676981, 0.0698309541, -0.2861326337, -0.2250975817));
	r += mul(s1_3, min16float4x4(-0.1175292879, -0.0342952982, 0.0079990625, -0.0209553204, 0.1031628549, 0.2052940577, 0.0457774401, 0.0309253968, 0.4462919533, 0.2262027562, -0.1351857483, 0.0651201010, 0.0159619916, -0.0430875830, -0.0406340510, 0.0096422452));
	r += mul(s1_4, min16float4x4(0.0981601477, 0.0631661192, -0.0524578467, -0.1202173606, -0.1665048301, -0.1733401269, -0.0777806938, -0.0324005708, 0.0758934990, -0.0895460919, -0.0434051529, 0.1420892924, 0.4772280753, -0.7011718154, -0.1028261036, -0.1527820677));
	r += mul(s1_5, min16float4x4(-0.0303175859, -0.0247206762, 0.1323236972, 0.1960474700, 0.1145134121, 0.0109552275, -0.0170119815, -0.0204557180, -0.0070558926, 0.0009485771, 0.0118746031, 0.0394370370, -0.3603515029, -0.0928899944, 0.3774579167, 0.2242195606));
	r += mul(s1_6, min16float4x4(-0.0023894773, 0.2533770800, 0.0311081950, -0.0057352846, 0.0008535566, -0.1111702919, -0.0054528485, 0.0425249003, -0.0773881152, 0.4360618889, 0.0672503859, -0.0759260952, 0.0398511067, 0.0950529575, 0.0101177394, -0.0428373925));
	r += mul(s1_7, min16float4x4(-0.0193898436, -0.2516734302, 0.1417091042, -0.3857739568, 0.0118331453, 0.1303898692, -0.0876451358, 0.1333052516, -0.0598994717, 0.1130370870, -0.0890804976, -0.0330139957, 0.0344481543, 0.0280632097, 0.0847168267, 0.0029402454));
	r += mul(s1_8, min16float4x4(0.1172624528, 0.1140148416, -0.1232636943, -0.1003471687, -0.0661621988, -0.0692382082, 0.0637201890, 0.1076670438, -0.0051331888, -0.0012188627, 0.0116167525, -0.0283698346, 0.0587479323, 0.1313482970, -0.0979012251, -0.1772691607));
	r += min16float4(0.000573850586079061, 0.001640833099372685, 0.001807940541766584, -0.001292877015657723);
	return r;
}
void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float4 s0_0 = l0(-1.0, -1.0);
	min16float4 s0_1 = l0(0.0, -1.0);
	min16float4 s0_2 = l0(1.0, -1.0);
	min16float4 s0_3 = l0(-1.0, 0.0);
	min16float4 s0_4 = l0(0.0, 0.0);
	min16float4 s0_5 = l0(1.0, 0.0);
	min16float4 s0_6 = l0(-1.0, 1.0);
	min16float4 s0_7 = l0(0.0, 1.0);
	min16float4 s0_8 = l0(1.0, 1.0);
	min16float4 s1_0 = max(-s0_0, 0.0);
	min16float4 s1_1 = max(-s0_1, 0.0);
	min16float4 s1_2 = max(-s0_2, 0.0);
	min16float4 s1_3 = max(-s0_3, 0.0);
	min16float4 s1_4 = max(-s0_4, 0.0);
	min16float4 s1_5 = max(-s0_5, 0.0);
	min16float4 s1_6 = max(-s0_6, 0.0);
	min16float4 s1_7 = max(-s0_7, 0.0);
	min16float4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t1[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 3
//!DESC CuNNy-1x4C-BILINEAR-CHROMA-TEST-NVL-out
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN t1
//!OUT t0
#define O(t, p) t.SampleLevel(SP, pos + p * pt, 0)
#define l0(x, y) O(t1, float2(x, y))
float4 f0(float2 pt, float2 pos, min16float4 s0_0, min16float4 s0_1, min16float4 s0_2, min16float4 s0_3, min16float4 s0_4, min16float4 s0_5, min16float4 s0_6, min16float4 s0_7, min16float4 s0_8, min16float4 s1_0, min16float4 s1_1, min16float4 s1_2, min16float4 s1_3, min16float4 s1_4, min16float4 s1_5, min16float4 s1_6, min16float4 s1_7, min16float4 s1_8) {
	min16float4 r = 0.0;
	r += mul(s0_0, min16float4x4(-0.0112640578, 0.0074890791, -0.0049924599, 0.0079494314, -0.0633319244, -0.0015811378, -0.0180222373, -0.0132528162, -0.0124306493, -0.0340116918, -0.0009090255, -0.0032960277, 0.0040306076, -0.0470346361, 0.0223616045, -0.0216608644));
	r += mul(s0_1, min16float4x4(-0.0137036135, 0.0067072278, -0.0670676082, 0.0142707108, 0.1946753412, 0.0430437177, -0.1228178218, -0.0920421556, -0.0201706216, -0.0197713189, 0.0150542539, 0.0091843028, 0.0055020847, -0.0189505089, 0.0238876566, 0.0456321128));
	r += mul(s0_2, min16float4x4(0.0061080279, -0.0613790490, 0.0067414022, -0.0042304303, -0.0543213636, -0.0420503281, 0.0128461290, -0.0320625193, -0.0146012269, 0.0032717888, 0.0014952447, 0.0065890816, -0.0154168447, -0.0154531933, 0.0064900564, 0.0024097860));
	r += mul(s0_3, min16float4x4(0.0104644159, 0.0013450789, -0.0010579784, -0.0063330354, 0.0083285775, -0.0022156273, -0.0122524519, -0.0074313432, -0.0094246250, -0.0601898618, -0.0406164862, -0.0306130052, 0.5183266997, 0.0837993622, -0.7133402228, 0.2056129724));
	r += mul(s0_4, min16float4x4(0.2613204718, -0.0336036868, 0.2613124251, -0.0050501158, -0.0219899230, 0.0192863196, 0.0949603319, 0.1528327763, -0.1420896798, 0.0428383201, -0.0889400244, -0.0912536904, 0.2309467345, 0.8515864611, -0.2456236780, -1.2808122635));
	r += mul(s0_5, min16float4x4(-0.2467217892, 0.3331193924, -0.1319042742, 0.1983181685, -0.1192586571, -0.1987303793, -0.0795422271, -0.2045536637, -0.0045318357, -0.0381694324, -0.0216815807, -0.0416260809, 0.0271850899, -0.1346206069, -0.0308176856, 0.0897082984));
	r += mul(s0_6, min16float4x4(0.0277375653, 0.0200792942, 0.0255982690, 0.0315257795, 0.0142652383, 0.0108157238, 0.0033061476, 0.0030193594, 0.0637398958, -0.0101375012, 0.1459970921, -0.0460405722, 0.0213616174, 0.0954044685, 0.1575543284, 0.0025658901));
	r += mul(s0_7, min16float4x4(-0.0069140224, 0.0271630939, 0.0642184615, 0.0013183303, -0.0124341007, -0.0023540342, -0.0065464410, -0.0048776665, 0.1517887264, 0.2545156181, 0.0866610631, 0.3720703423, -0.0608571954, -0.1042618155, 0.0039199498, 0.1903858930));
	r += mul(s0_8, min16float4x4(-0.0647073686, -0.0764160752, -0.1087214425, 0.0027417897, 0.0004744563, -0.0080517530, -0.0038843832, -0.0130539006, 0.0221386235, 0.0507588945, 0.0234988425, 0.0489044599, 0.0355394669, 0.0162237342, 0.0024905915, -0.0289754644));
	r += mul(s1_0, min16float4x4(-0.0367370434, 0.0131614422, -0.0102338465, -0.0021255270, 0.0025213649, 0.0012290766, 0.0623385943, 0.0160528105, -0.0144564388, 0.0080616958, -0.0029320589, 0.0026864223, 0.0142899267, -0.0066112871, 0.0252104923, -0.0043194774));
	r += mul(s1_1, min16float4x4(-0.0681113973, 0.0944594443, 0.0061788778, 0.0812979937, 0.0847168416, 0.0928683951, -0.1302321702, -0.0870716870, 0.0318472236, 0.0145172039, -0.0318997279, -0.0073849717, -0.0263013206, 0.0294875614, -0.0289957039, 0.0062088021));
	r += mul(s1_2, min16float4x4(0.0164649617, 0.0214946158, 0.0272047166, 0.0160280447, 0.0222738311, 0.0179003738, 0.0087956786, 0.0101960748, 0.0415960625, -0.0188803878, 0.0014071625, 0.0018142170, 0.0230955947, -0.0177616626, 0.0059165903, -0.0136997635));
	r += mul(s1_3, min16float4x4(-0.0929413214, 0.1323261112, -0.0685765520, 0.0846420676, 0.0168717578, 0.0807429031, -0.0683625862, 0.0138969421, 0.0426794142, 0.0011507443, 0.0037758902, 0.0313711464, 0.0050669252, -0.0389836840, -0.0171401668, -0.0224877857));
	r += mul(s1_4, min16float4x4(0.6894534826, -1.0380902290, 0.3419337273, -0.6386718750, -0.7558612227, -0.5996088982, 0.6442020535, 0.3475623429, -0.1154640689, 0.1556291729, 0.1869929284, 0.0695790723, 0.1563825756, 0.1815102398, 0.0173985753, 0.0033512099));
	r += mul(s1_5, min16float4x4(-0.0389434136, -0.0171180926, -0.0700662360, -0.0340679884, 0.2457617521, 0.0165929217, 0.0976052508, 0.3154245019, 0.0681131408, 0.0218844507, 0.0508683585, 0.0298483223, 0.0117766457, 0.0150224054, 0.0283951517, 0.0474539809));
	r += mul(s1_6, min16float4x4(-0.0484952144, 0.0113408240, -0.0856472626, 0.0497630201, 0.0073558786, -0.0247715507, -0.0328111239, -0.0099070845, -0.0134969112, -0.0381162874, 0.0149295274, -0.0576811098, -0.1143372580, -0.0764144361, -0.0372175686, -0.1132683307));
	r += mul(s1_7, min16float4x4(-0.0400328599, 0.0802817792, 0.1315280348, -0.3097379804, 0.0533810072, 0.0363464281, 0.0115635488, -0.0769020095, -0.3408209085, -0.0509036109, -0.6621090174, 0.0548093058, -0.0480086803, -0.1381906867, -0.0195032656, 0.0639093295));
	r += mul(s1_8, min16float4x4(0.0316227339, 0.0438397750, 0.0252189413, 0.0732004493, 0.0128137441, 0.0373334065, -0.0450460799, -0.0362756178, 0.0359273627, -0.0752937198, 0.0530098788, -0.1464113295, -0.0258133039, 0.0107665826, -0.0252930783, -0.0416329429));
	r += min16float4(6.585673691006377e-05, -0.00016439985483884811, 8.783092926023528e-05, -9.658004273660481e-05);
	return tanh(r);
}
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 size = GetInputSize();
	if (gxy.x >= size.x || gxy.y >= size.y) {
		return;
	}
	float2 pos = (gxy + 0.5) * pt;
	min16float4 s0_0 = l0(-1.0, -1.0);
	min16float4 s0_1 = l0(0.0, -1.0);
	min16float4 s0_2 = l0(1.0, -1.0);
	min16float4 s0_3 = l0(-1.0, 0.0);
	min16float4 s0_4 = l0(0.0, 0.0);
	min16float4 s0_5 = l0(1.0, 0.0);
	min16float4 s0_6 = l0(-1.0, 1.0);
	min16float4 s0_7 = l0(0.0, 1.0);
	min16float4 s0_8 = l0(1.0, 1.0);
	min16float4 s1_0 = max(-s0_0, 0.0);
	min16float4 s1_1 = max(-s0_1, 0.0);
	min16float4 s1_2 = max(-s0_2, 0.0);
	min16float4 s1_3 = max(-s0_3, 0.0);
	min16float4 s1_4 = max(-s0_4, 0.0);
	min16float4 s1_5 = max(-s0_5, 0.0);
	min16float4 s1_6 = max(-s0_6, 0.0);
	min16float4 s1_7 = max(-s0_7, 0.0);
	min16float4 s1_8 = max(-s0_8, 0.0);
	s0_0 = max(s0_0, 0.0);
	s0_1 = max(s0_1, 0.0);
	s0_2 = max(s0_2, 0.0);
	s0_3 = max(s0_3, 0.0);
	s0_4 = max(s0_4, 0.0);
	s0_5 = max(s0_5, 0.0);
	s0_6 = max(s0_6, 0.0);
	s0_7 = max(s0_7, 0.0);
	s0_8 = max(s0_8, 0.0);
	t0[gxy] = f0(pt, pos, s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8);
}
//!PASS 4
//!DESC CuNNy-1x4C-BILINEAR-CHROMA-TEST-NVL-shuffle
//!STYLE PS
//!IN t0, INPUT
float4 Pass4(float2 pos) {
	float2 pt = float2(GetInputPt());
	const static float3x3 rgb2yuv = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081};
	const static float3x3 yuv2rgb = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float4 r = 0.0;
	float2 size = float2(GetInputSize());
	float2 f = frac(pos * size);
	float3 yuv = mul(rgb2yuv, INPUT.SampleLevel(SL, pos, 0).rgb);
	int2 i = int2(f * 2.0);
	r.r = t0.SampleLevel(SP, (float2(0.5, 0.5) - f) * pt + pos, 0)[2*i.y + i.x];
	r.r += yuv.r;
	r.a = 1.0;
	r.r = clamp(r, 0.0, 1.0);
	float3 px = mul(yuv2rgb, float3(r.r, yuv.yz));
	return float4(px, 1.0);
}
