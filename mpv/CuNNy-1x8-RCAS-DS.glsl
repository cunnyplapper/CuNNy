// CuNNy 1x8 RCAS DS
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

// FSR mpv | modified
// Copyright (c) 2021 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// FidelityFX FSR v1.0.2 by AMD
// ported to mpv by agyild

//!DESC CuNNy-EASU
//!HOOK LUMA
//!BIND LUMA
//!SAVE easu
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
//!COMPONENTS 1

float APrxLoRcpF1(float a) {
	return uintBitsToFloat(uint(0x7ef07ebb) - floatBitsToUint(a));
}

float APrxLoRsqF1(float a) {
	return uintBitsToFloat(uint(0x5f347d74) - (floatBitsToUint(a) >> uint(1)));
}

float AMin3F1(float x, float y, float z) {
	return min(x, min(y, z));
}

float AMax3F1(float x, float y, float z) {
	return max(x, max(y, z));
}

void tap(inout float aC, inout float aW, vec2 off, vec2 dir, vec2 len,
         float lob, float clp, float c){
	vec2 v;
	v.x = (off.x * ( dir.x)) + (off.y * dir.y);
	v.y = (off.x * (-dir.y)) + (off.y * dir.x);
	v *= len;
	float d2 = v.x * v.x + v.y * v.y;
	d2 = min(d2, clp);
	float wB = float(2.0 / 5.0) * d2 + -1.0;
	float wA = lob * d2 + -1.0;
	wB *= wB;
	wA *= wA;
	wB = float(25.0 / 16.0) * wB + float(-(25.0 / 16.0 - 1.0));
	float w = wB * wA;
	aC += c * w;
	aW += w;
}

void set(inout vec2 dir, inout float len, vec2 pp, bool biS, bool biT,
         bool biU, bool biV, float lA, float lB, float lC, float lD, float lE){
	float w = 0.0;
	if (biS)
		w = (1.0 - pp.x) * (1.0 - pp.y);
	if (biT)
		w =        pp.x  * (1.0 - pp.y);
	if (biU)
		w = (1.0 - pp.x) *        pp.y;
	if (biV)
		w =        pp.x  *        pp.y;
	float dc = lD - lC;
	float cb = lC - lB;
	float lenX = max(abs(dc), abs(cb));
	lenX = APrxLoRcpF1(lenX);
	float dirX = lD - lB;
	lenX = clamp(abs(dirX) * lenX, 0.0, 1.0);
	lenX *= lenX;
	float ec = lE - lC;
	float ca = lC - lA;
	float lenY = max(abs(ec), abs(ca));
	lenY = APrxLoRcpF1(lenY);
	float dirY = lE - lA;
	lenY = clamp(abs(dirY) * lenY, 0.0, 1.0);
	lenY *= lenY;
	dir += vec2(dirX, dirY) * w;
	len += dot(vec2(w), vec2(lenX, lenY));
}

vec4 hook() {
	vec4 pix = vec4(0.0, 0.0, 0.0, 1.0);
	vec2 pp = LUMA_pos * LUMA_size - vec2(0.5);
	vec2 fp = floor(pp);
	pp -= fp;
#if (defined(LUMA_gather) && (__VERSION__ >= 400 || (GL_ES && __VERSION__ >= 310)))
	vec4 bczzL = LUMA_gather(vec2((fp + vec2(1.0, -1.0)) * LUMA_pt), 0);
	vec4 ijfeL = LUMA_gather(vec2((fp + vec2(0.0,  1.0)) * LUMA_pt), 0);
	vec4 klhgL = LUMA_gather(vec2((fp + vec2(2.0,  1.0)) * LUMA_pt), 0);
	vec4 zzonL = LUMA_gather(vec2((fp + vec2(1.0,  3.0)) * LUMA_pt), 0);
#else
	float b = LUMA_tex(vec2((fp + vec2(0.5, -0.5)) * LUMA_pt)).r;
	float c = LUMA_tex(vec2((fp + vec2(1.5, -0.5)) * LUMA_pt)).r;
	float e = LUMA_tex(vec2((fp + vec2(-0.5, 0.5)) * LUMA_pt)).r;
	float f = LUMA_tex(vec2((fp + vec2( 0.5, 0.5)) * LUMA_pt)).r;
	float g = LUMA_tex(vec2((fp + vec2( 1.5, 0.5)) * LUMA_pt)).r;
	float h = LUMA_tex(vec2((fp + vec2( 2.5, 0.5)) * LUMA_pt)).r;
	float i = LUMA_tex(vec2((fp + vec2(-0.5, 1.5)) * LUMA_pt)).r;
	float j = LUMA_tex(vec2((fp + vec2( 0.5, 1.5)) * LUMA_pt)).r;
	float k = LUMA_tex(vec2((fp + vec2( 1.5, 1.5)) * LUMA_pt)).r;
	float l = LUMA_tex(vec2((fp + vec2( 2.5, 1.5)) * LUMA_pt)).r;
	float n = LUMA_tex(vec2((fp + vec2(0.5, 2.5) ) * LUMA_pt)).r;
	float o = LUMA_tex(vec2((fp + vec2(1.5, 2.5) ) * LUMA_pt)).r;
	vec4 bczzL = vec4(b, c, 0.0, 0.0);
	vec4 ijfeL = vec4(i, j, f, e);
	vec4 klhgL = vec4(k, l, h, g);
	vec4 zzonL = vec4(0.0, 0.0, o, n);
#endif
	float bL = bczzL.x;
	float cL = bczzL.y;
	float iL = ijfeL.x;
	float jL = ijfeL.y;
	float fL = ijfeL.z;
	float eL = ijfeL.w;
	float kL = klhgL.x;
	float lL = klhgL.y;
	float hL = klhgL.z;
	float gL = klhgL.w;
	float oL = zzonL.z;
	float nL = zzonL.w;
	vec2 dir = vec2(0.0);
	float len = 0.0;
	set(dir, len, pp, true, false, false, false, bL, eL, fL, gL, jL);
	set(dir, len, pp, false, true, false, false, cL, fL, gL, hL, kL);
	set(dir, len, pp, false, false, true, false, fL, iL, jL, kL, nL);
	set(dir, len, pp, false, false, false, true, gL, jL, kL, lL, oL);
	vec2 dir2 = dir * dir;
	float dirR = dir2.x + dir2.y;
	bool zro = dirR < float(1.0 / 32768.0);
	dirR = APrxLoRsqF1(dirR);
	dirR = zro ? 1.0 : dirR;
	dir.x = zro ? 1.0 : dir.x;
	dir *= vec2(dirR);
	len = len * 0.5;
	len *= len;
	float stretch = (dir.x * dir.x + dir.y * dir.y) * APrxLoRcpF1(max(abs(dir.x), abs(dir.y)));
	vec2 len2 = vec2(1.0 + (stretch - 1.0) * len, 1.0 + -0.5 * len);
	float lob = 0.5 + float((1.0 / 4.0 - 0.04) - 0.5) * len;
	float clp = APrxLoRcpF1(lob);
	float aC = 0.0;
	float aW = 0.0;
	tap(aC, aW, vec2( 0.0,-1.0) - pp, dir, len2, lob, clp, bL);
	tap(aC, aW, vec2( 1.0,-1.0) - pp, dir, len2, lob, clp, cL);
	tap(aC, aW, vec2(-1.0, 1.0) - pp, dir, len2, lob, clp, iL);
	tap(aC, aW, vec2( 0.0, 1.0) - pp, dir, len2, lob, clp, jL);
	tap(aC, aW, vec2( 0.0, 0.0) - pp, dir, len2, lob, clp, fL);
	tap(aC, aW, vec2(-1.0, 0.0) - pp, dir, len2, lob, clp, eL);
	tap(aC, aW, vec2( 1.0, 1.0) - pp, dir, len2, lob, clp, kL);
	tap(aC, aW, vec2( 2.0, 1.0) - pp, dir, len2, lob, clp, lL);
	tap(aC, aW, vec2( 2.0, 0.0) - pp, dir, len2, lob, clp, hL);
	tap(aC, aW, vec2( 1.0, 0.0) - pp, dir, len2, lob, clp, gL);
	tap(aC, aW, vec2( 1.0, 2.0) - pp, dir, len2, lob, clp, oL);
	tap(aC, aW, vec2( 0.0, 2.0) - pp, dir, len2, lob, clp, nL);
	pix.r = aC / aW;
	float min1 = min(AMin3F1(fL, gL, jL), kL);
	float max1 = max(AMax3F1(fL, gL, jL), kL);
	pix.r = clamp(pix.r, min1, max1);
	pix.r = clamp(pix.r, 0.0, 1.0);
	return pix;
}

//!DESC CuNNy-RCAS
//!HOOK LUMA
//!BIND easu
//!SAVE rcas
//!WIDTH easu.w
//!HEIGHT easu.h
//!COMPONENTS 1

// CuNNy: do not change unless changed during training as well
#define SHARPNESS 0.5
#define FSR_RCAS_LIMIT (0.25 - (1.0 / 16.0))

float APrxMedRcpF1(float a) {
	float b = uintBitsToFloat(uint(0x7ef19fff) - floatBitsToUint(a));
	return b * (-b * a + 2.0);
}

float AMax3F1(float x, float y, float z) {
	return max(x, max(y, z)); 
}


float AMin3F1(float x, float y, float z) {
	return min(x, min(y, z));
}

vec4 hook() {
#if (defined(easu_gather) && (__VERSION__ >= 400 || (GL_ES && __VERSION__ >= 310)))
	vec3 bde = easu_gather(easu_pos + easu_pt * vec2(-0.5), 0).xyz;
	float b = bde.z;
	float d = bde.x;
	float e = bde.y;
	vec2 fh = easu_gather(easu_pos + easu_pt * vec2(0.5), 0).zx;
	float f = fh.x;
	float h = fh.y;
#else
	float b = easu_texOff(vec2( 0.0, -1.0)).r;
	float d = easu_texOff(vec2(-1.0,  0.0)).r;
	float e = easu_tex(easu_pos).r;
	float f = easu_texOff(vec2(1.0, 0.0)).r;
	float h = easu_texOff(vec2(0.0, 1.0)).r;
#endif
	float mn1L = min(AMin3F1(b, d, f), h);
	float mx1L = max(AMax3F1(b, d, f), h);
	vec2 peakC = vec2(1.0, -1.0 * 4.0);
	float hitMinL = min(mn1L, e) / (4.0 * mx1L);
	float hitMaxL = (peakC.x - max(mx1L, e)) / (4.0 * mn1L + peakC.y);
	float lobeL = max(-hitMinL, hitMaxL);
	float lobe = max(float(-FSR_RCAS_LIMIT), min(lobeL, 0.0)) * exp2(-clamp(float(SHARPNESS), 0.0, 2.0));
	float nz = 0.25 * b + 0.25 * d + 0.25 * f + 0.25 * h - e;
	nz = clamp(abs(nz) * APrxMedRcpF1(AMax3F1(AMax3F1(b, d, e), f, h) - AMin3F1(AMin3F1(b, d, e), f, h)), 0.0, 1.0);
	nz = -0.5 * nz + 1.0;
	lobe *= nz;
	float rcpL = APrxMedRcpF1(4.0 * lobe + 1.0);
	vec4 pix = vec4(0.0, 0.0, 0.0, 1.0);
	pix.r = float((lobe * b + lobe * d + lobe * h + lobe * f + e) * rcpL);
	return pix;
}

//!DESC CuNNy-1x8-RCAS-DS-up:0
//!HOOK LUMA
//!BIND LUMA
//!SAVE up_0
//!WIDTH LUMA.w
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#define l0(x, y) LUMA_texOff(vec2(x, y)).r
vec4 hook() {
	vec4 r = vec4(0.0);
	r += vec4(-0.09983619302511215, -0.023581018671393394, -0.03674285486340523, -0.08593554049730301) * l0(-1.0, -1.0);
	r += vec4(0.36621102690696716, 0.06319908052682877, 0.04519573599100113, 0.04542158544063568) * l0(0.0, -1.0);
	r += vec4(-0.10320127755403519, -0.043343834578990936, -0.007959948852658272, -0.029820149764418602) * l0(1.0, -1.0);
	r += vec4(-0.04697101563215256, 0.12838056683540344, 0.3474977910518646, -0.23291015625) * l0(-1.0, 0.0);
	r += vec4(0.24902066588401794, 0.07455739378929138, -0.33737751841545105, 0.4111233651638031) * l0(0.0, 0.0);
	r += vec4(0.02237960882484913, 0.15741784870624542, 0.0007521830266341567, 0.002922964747995138) * l0(1.0, 0.0);
	r += vec4(-0.05179672688245773, -0.13622067868709564, -0.006525920704007149, -0.021629709750413895) * l0(-1.0, 1.0);
	r += vec4(-0.10657978802919388, -0.6124366521835327, -0.020535707473754883, -0.07557281106710434) * l0(0.0, 1.0);
	r += vec4(-0.07198882848024368, 0.09683511406183243, 0.016825884580612183, -0.005120371002703905) * l0(1.0, 1.0);
	r += vec4(-0.08818819373846054, 0.1142306923866272, 0.010650663636624813, -0.009150049649178982);
	return max(r, 0.0);
}

//!DESC CuNNy-1x8-RCAS-DS-up:1
//!HOOK LUMA
//!BIND LUMA
//!SAVE up_1
//!WIDTH LUMA.w
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#define l0(x, y) LUMA_texOff(vec2(x, y)).r
vec4 hook() {
	vec4 r = vec4(0.0);
	r += vec4(0.006374721881002188, -0.039354223757982254, 0.025331521406769753, 0.018688851967453957) * l0(-1.0, -1.0);
	r += vec4(0.06898398697376251, 0.020728126168251038, -0.022543685510754585, -0.05904901400208473) * l0(0.0, -1.0);
	r += vec4(0.2958984076976776, -0.012501399032771587, -0.10407590866088867, 0.040677718818187714) * l0(1.0, -1.0);
	r += vec4(0.01688419282436371, 0.10634831339120865, 0.016954638063907623, -0.017717232927680016) * l0(-1.0, 0.0);
	r += vec4(-0.31035077571868896, -0.12349360436201096, -0.12255576997995377, -0.3721311092376709) * l0(0.0, 0.0);
	r += vec4(-0.09820428490638733, 0.06479410082101822, 0.3837890923023224, -0.014736996963620186) * l0(1.0, 0.0);
	r += vec4(-0.019867656752467155, -0.0012622877256944776, -0.00450145173817873, 0.077366903424263) * l0(-1.0, 1.0);
	r += vec4(0.01703079789876938, -0.058972302824258804, -0.07836882770061493, 0.28027355670928955) * l0(0.0, 1.0);
	r += vec4(0.023094236850738525, 0.0363263376057148, 0.125489741563797, 0.038953203707933426) * l0(1.0, 1.0);
	r += vec4(0.004579460714012384, -0.1459479033946991, -0.0205368772149086, 0.01152791827917099);
	return max(r, 0.0);
}

//!DESC CuNNy-1x8-RCAS-DS-conv1:0
//!HOOK LUMA
//!BIND up_0
//!BIND up_1
//!SAVE conv1_0
//!WIDTH LUMA.w
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#define l0(x, y) up_0_texOff(vec2(x, y))
#define l1(x, y) up_1_texOff(vec2(x, y))
vec4 hook() {
	vec4 r = vec4(0.0);
	r += mat4(0.07148157060146332, -0.014163610525429249, 0.24583527445793152, -0.04812086746096611, -0.11208737641572952, 0.12471911311149597, 0.21205908060073853, -0.07372555881738663, 0.017002420499920845, 0.08018974214792252, 0.02286720648407936, 0.046836189925670624, 0.04510396346449852, -0.06664463877677917, 0.05853790044784546, -0.00032620251295156777) * l0(-1.0, -1.0);
	r += mat4(-0.020563771948218346, -0.045420654118061066, -0.024733275175094604, 0.10218511521816254, -0.8018803596496582, -0.10818691551685333, -0.646479606628418, -0.28326234221458435, 0.2908416986465454, -0.3742125332355499, 0.5514072775840759, 0.3231673538684845, -0.017690075561404228, -0.15110446512699127, 0.16539911925792694, 0.10111032426357269) * l0(0.0, -1.0);
	r += mat4(-0.023650048300623894, 0.022742077708244324, -0.10020856559276581, 0.17535074055194855, -0.09787432849407196, 0.07407565414905548, -0.24672847986221313, -0.18307867646217346, 0.1623077541589737, -0.14052289724349976, -0.011103540658950806, 0.15740731358528137, 0.11016369611024857, -0.09780709445476532, -0.0027534125838428736, -0.18654689192771912) * l0(1.0, -1.0);
	r += mat4(-0.16229675710201263, 0.01802031882107258, -0.4521788954734802, -0.24041004478931427, 0.1112479493021965, -0.018313763663172722, -0.04302692413330078, -0.07237382978200912, -0.17694036662578583, -0.056701865047216415, 0.2980899214744568, -0.14969615638256073, 0.09741279482841492, 0.037469375878572464, -0.5301302671432495, 0.09774258732795715) * l0(-1.0, 0.0);
	r += mat4(-0.12417665123939514, 0.1880549192428589, -0.24904142320156097, -0.6782456636428833, -0.06191383674740791, -0.07001113891601562, -0.29505181312561035, 0.1660059690475464, 0.23299269378185272, -1.803680419921875, -2.256209135055542, 0.14449146389961243, 0.3165440261363983, -0.21613173186779022, -0.17271393537521362, -0.29955580830574036) * l0(0.0, 0.0);
	r += mat4(-0.013990616425871849, 0.10936544835567474, -0.04693984240293503, 0.21982014179229736, 0.17644667625427246, -0.00699180644005537, -0.2697339355945587, 0.20069506764411926, 0.29303672909736633, 0.22697214782238007, -0.7662451267242432, 0.33907514810562134, 0.034069087356328964, -0.4417133331298828, -0.43786388635635376, -0.07499688118696213) * l0(1.0, 0.0);
	r += mat4(-0.1804514080286026, -0.0808129757642746, -0.32289013266563416, 0.06370829045772552, 0.02824137918651104, 0.0020664792973548174, 0.1266021430492401, -0.019942253828048706, -0.05178017169237137, 0.029793022200465202, -0.14736992120742798, -0.23227769136428833, 0.17730075120925903, -0.015972424298524857, -0.030540570616722107, -0.01928085647523403) * l0(-1.0, 1.0);
	r += mat4(-0.30062535405158997, 0.20476697385311127, -0.26135995984077454, -0.34941884875297546, 0.06560355424880981, 0.0036161646712571383, 0.18986384570598602, -0.022598562762141228, -0.04457775130867958, -0.25319772958755493, -0.16985823214054108, -0.02137896604835987, 0.3486429452896118, -0.2669201195240021, 0.44445404410362244, 0.38410335779190063) * l0(0.0, 1.0);
	r += mat4(-0.14055629074573517, 0.08263954520225525, -0.11587005108594894, -0.19215615093708038, 0.07396716624498367, 0.016792943701148033, -0.08141905069351196, 0.12017066776752472, 0.2445993721485138, 0.07973278313875198, -0.37635600566864014, 0.23057591915130615, 0.21429184079170227, -0.4389486014842987, -0.39471545815467834, 0.3393308222293854) * l0(1.0, 1.0);
	r += mat4(0.03263241425156593, -0.08381325006484985, 0.0007042130455374718, -0.12827077507972717, 0.07005814462900162, 0.05592600628733635, 0.09335461258888245, 0.03898535668849945, -0.08422012627124786, -0.09451933950185776, 0.05652790889143944, -0.18510748445987701, 0.4017751216888428, 0.05602912977337837, 0.16324669122695923, 0.15386752784252167) * l1(-1.0, -1.0);
	r += mat4(0.030193088576197624, 0.056755371391773224, 0.09472326189279556, 0.0530899316072464, 0.05452163890004158, 0.0205072034150362, 0.05755224451422691, 0.49971622228622437, -0.03881441056728363, 0.08562736958265305, 0.171353280544281, 0.4677726626396179, 0.21923881769180298, 0.03557905927300453, 0.009116014465689659, -0.14009986817836761) * l1(0.0, -1.0);
	r += mat4(-0.1551184356212616, 0.08660426735877991, 0.002790721831843257, -0.16886644065380096, 0.017875030636787415, 0.024432286620140076, -0.022505801171064377, 0.03512999415397644, -0.07221651077270508, 0.04357662424445152, -0.04253813251852989, -0.054976169019937515, 0.4468928873538971, 0.15769554674625397, -0.21046888828277588, 0.12926658987998962) * l1(1.0, -1.0);
	r += mat4(0.3894980847835541, -0.37873515486717224, -0.02657299116253853, 0.3667265772819519, -0.04900968447327614, 0.05085191875696182, 0.2558628022670746, -0.11118588596582413, 0.18994145095348358, -0.12567561864852905, 0.2856878936290741, -0.4024367332458496, 0.4040485620498657, -0.03477579355239868, 0.1583189219236374, 0.16650159657001495) * l1(-1.0, 0.0);
	r += mat4(0.20072923600673676, -0.6913219690322876, -0.42235302925109863, 0.07269687205553055, 0.27811917662620544, 0.05093616247177124, 0.13987737894058228, -0.043044205754995346, -0.4104516804218292, 0.21612697839736938, 0.45215657353401184, -0.2879767119884491, -0.07460519671440125, -0.863494336605072, 0.2700797915458679, 0.1352987289428711) * l1(0.0, 0.0);
	r += mat4(0.08054076135158539, -0.13086368143558502, -0.23654493689537048, 0.1519797295331955, -0.04690485820174217, -0.013758155517280102, -0.0688738003373146, 0.1358814835548401, -0.026831218972802162, -0.037802085280418396, 0.005261253099888563, 0.09750287979841232, 0.11312250047922134, -0.25367021560668945, -0.4521183371543884, 0.13152197003364563) * l1(1.0, 0.0);
	r += mat4(0.563657283782959, 0.03534521907567978, 0.5581505298614502, 0.5037265419960022, -0.11241016536951065, 0.04855905845761299, -0.1154552772641182, -0.01933453418314457, -0.2351534515619278, -0.18286935985088348, -0.20960573852062225, 0.30164918303489685, 0.04932883009314537, 0.06560737639665604, 0.30429014563560486, -0.006352750584483147) * l1(-1.0, 1.0);
	r += mat4(0.38113343715667725, -0.03337952867150307, -0.2683029770851135, 0.06551837176084518, -0.3617126941680908, 0.04783686250448227, -0.10267677158117294, -0.02859831415116787, 0.0005400791997089982, 0.15047866106033325, -0.16216737031936646, 0.11239734292030334, 0.08111836761236191, -0.08324062079191208, -0.5800676345825195, -0.050649892538785934) * l1(0.0, 1.0);
	r += mat4(0.1722044199705124, -0.02251463010907173, -0.21048139035701752, 0.11112088710069656, -0.12765243649482727, 0.005144849419593811, -0.1246589869260788, 0.07166586816310883, -0.07943509519100189, 0.009374856017529964, -0.027709180489182472, -0.07887035608291626, 0.06197289004921913, 0.09336954355239868, -0.14353621006011963, 0.02869606576859951) * l1(1.0, 1.0);
	r += vec4(-0.04920852556824684, 0.054324183613061905, -0.06693349033594131, -0.05010337755084038);
	return max(r, 0.0);
}

//!DESC CuNNy-1x8-RCAS-DS-conv1:1
//!HOOK LUMA
//!BIND up_0
//!BIND up_1
//!SAVE conv1_1
//!WIDTH LUMA.w
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#define l0(x, y) up_0_texOff(vec2(x, y))
#define l1(x, y) up_1_texOff(vec2(x, y))
vec4 hook() {
	vec4 r = vec4(0.0);
	r += mat4(0.2740112245082855, 0.14200615882873535, 0.1460191309452057, 0.05449321120977402, -0.37402626872062683, -0.09561698138713837, 0.23152899742126465, 0.1694227010011673, -0.07875319570302963, -0.5333875417709351, 0.009486870840191841, 0.009645266458392143, -0.009285852313041687, -0.2783304750919342, -0.2163258045911789, -0.024182096123695374) * l0(-1.0, -1.0);
	r += mat4(0.3400011658668518, 0.01191732194274664, 0.13986435532569885, 0.27584871649742126, -0.8091188669204712, -0.3606717884540558, -0.7660927772521973, -0.3574976623058319, 0.320451557636261, -0.12804251909255981, 0.6842963695526123, -0.2065558135509491, 0.22789962589740753, 0.4150398373603821, 0.21137772500514984, 0.2463945746421814) * l0(0.0, -1.0);
	r += mat4(-0.10980069637298584, 0.11050310730934143, -0.024501118808984756, 0.03447458893060684, 0.18939140439033508, -0.14295470714569092, -0.6191172003746033, -0.7570033669471741, -0.13490410149097443, 0.222026064991951, -0.051063016057014465, 0.06943757086992264, 0.1335943341255188, 0.1967836171388626, 0.35810211300849915, 0.43463003635406494) * l0(1.0, -1.0);
	r += mat4(-0.07558611780405045, 0.31789568066596985, -0.16355790197849274, 0.12275973707437515, 0.20263798534870148, 0.008598263375461102, 0.0591430701315403, -0.014895277097821236, -0.30790337920188904, -0.28251582384109497, 0.09870205819606781, 0.06853988766670227, -0.3876941204071045, -0.020779263228178024, -0.5879014134407043, -0.09348164498806) * l0(-1.0, 0.0);
	r += mat4(-0.5063378810882568, -0.18147329986095428, -0.15674036741256714, -0.06838255375623703, 0.051630910485982895, -0.026937736198306084, 0.03536870703101158, 0.22209346294403076, 0.44447946548461914, 0.2778874635696411, -0.2739469110965729, -0.21135485172271729, -0.3754444718360901, 0.03718222677707672, -0.18786020576953888, -0.26856762170791626) * l0(0.0, 0.0);
	r += mat4(0.01812310703098774, -0.31293898820877075, -0.15320099890232086, -0.35413220524787903, 0.059761252254247665, 0.0514037050306797, 0.28401175141334534, 0.1271430104970932, -0.030579963698983192, 0.39205044507980347, -0.38703781366348267, 0.3419528901576996, 0.15771886706352234, -0.34863853454589844, 0.3371593654155731, 0.15378287434577942) * l0(1.0, 0.0);
	r += mat4(0.17862646281719208, -0.20069235563278198, -0.5434598922729492, -0.10668837279081345, -0.0808391273021698, 0.07104197144508362, 0.14233435690402985, -0.09487392753362656, 0.020932050421833992, -0.1792326122522354, -0.03946623578667641, -0.0928235650062561, 0.19496801495552063, 0.08784233778715134, -0.08779092878103256, 0.06421931833028793) * l0(-1.0, 1.0);
	r += mat4(-0.1399434357881546, -0.4092298150062561, -0.003890054067596793, 0.2466592788696289, 0.06117123365402222, 0.06225050240755081, 0.05518379062414169, 0.06620705872774124, 0.08169922232627869, 0.4468516707420349, 0.49887019395828247, 0.2574288547039032, 0.49515408277511597, -0.12038780003786087, 0.27666541934013367, -0.2456095814704895) * l0(0.0, 1.0);
	r += mat4(-0.041419096291065216, -0.3083800971508026, -0.32184088230133057, -0.15691620111465454, -0.1403786689043045, 0.048870254307985306, 0.06423665583133698, -0.035068102180957794, 0.13668060302734375, 0.5160307884216309, 0.463909775018692, 0.1556384265422821, 0.02305523306131363, 0.015442540869116783, 0.20165112614631653, -0.26596274971961975) * l0(1.0, 1.0);
	r += mat4(-0.04426468536257744, -0.02633059211075306, -0.05304006487131119, -0.3193361163139343, 0.018955834209918976, -0.00013029284309595823, 0.046751148998737335, 0.03555651009082794, -0.07197976112365723, -0.11262556165456772, -0.12106842547655106, 0.13118617236614227, 0.23026864230632782, 0.045887213200330734, 0.29980745911598206, -0.07817386835813522) * l1(-1.0, -1.0);
	r += mat4(0.06061701104044914, -0.1520659476518631, 0.1994621604681015, -0.6152364611625671, 0.04082538187503815, 0.04758536443114281, 0.28176066279411316, 0.1052289828658104, -0.13126209378242493, 0.11527570337057114, 0.05018236115574837, -0.20095130801200867, -0.03429783880710602, 0.04106869176030159, -0.35809603333473206, 0.38448965549468994) * l1(0.0, -1.0);
	r += mat4(-0.02596142329275608, 0.062143389135599136, -0.19432829320430756, -0.3061400353908539, -0.010012880899012089, 0.01301556546241045, 0.027678607031702995, 0.010965419933199883, -0.03601289540529251, -0.01793856732547283, -0.031775884330272675, -0.13292819261550903, 0.07397136837244034, -0.0592627078294754, 0.1352633833885193, -0.15533927083015442) * l1(1.0, -1.0);
	r += mat4(0.18163767457008362, 0.3460955321788788, 0.005337385460734367, -0.012833613902330399, 0.044264055788517, -0.022317610681056976, -0.10423850268125534, 0.044476043432950974, -0.013092508539557457, -0.3191329836845398, 0.1904171258211136, -0.2597600519657135, 0.9048099517822266, 0.07965076714754105, 0.14694269001483917, 0.06326044350862503) * l1(-1.0, 0.0);
	r += mat4(0.7152155041694641, 0.32805562019348145, 0.19755296409130096, 0.6518227458000183, 0.11837883293628693, 0.19736464321613312, 0.0341065414249897, 0.26134464144706726, 0.2449345886707306, 0.4637017250061035, 0.05752493068575859, 0.1717698574066162, 0.14918436110019684, -0.3472816050052643, -0.3822905123233795, -0.2867966294288635) * l1(0.0, 0.0);
	r += mat4(-0.20209330320358276, 0.13166460394859314, -0.4849754571914673, 0.41846930980682373, -0.19265182316303253, -0.021018151193857193, -0.19180463254451752, 0.024545423686504364, -0.034402769058942795, 0.18221648037433624, -0.10424253344535828, 0.09816412627696991, 0.0655520036816597, 0.41420412063598633, -0.19869808852672577, 0.11407966166734695) * l1(1.0, 0.0);
	r += mat4(-0.36952897906303406, 0.2728177309036255, -0.12940549850463867, 0.25014227628707886, 0.07291445136070251, 0.06944811344146729, 0.07940181344747543, -0.03423624485731125, 0.05624799802899361, 0.1238396093249321, 0.2710002064704895, 0.2565115988254547, -0.8830840587615967, -0.11872696876525879, 0.36397743225097656, 0.028693925589323044) * l1(-1.0, 1.0);
	r += mat4(0.26124200224876404, -0.1630552113056183, 0.4150881767272949, -0.0393529087305069, 0.20360860228538513, 0.06207747757434845, 0.12279044836759567, -0.09871064126491547, -0.13197821378707886, 0.04810597747564316, 0.20618639886379242, 0.06159190461039543, 0.019119594246149063, 0.00569530064240098, -0.523021936416626, 0.11594996601343155) * l1(0.0, 1.0);
	r += mat4(0.003941567149013281, -0.054540276527404785, -0.3686612546443939, 0.26471057534217834, -0.019947601482272148, -0.028317783027887344, 0.09723305702209473, -0.0866253674030304, 0.03254857286810875, -0.06792924553155899, -0.15479572117328644, -0.07496821135282516, -0.2199704647064209, -0.22283115983009338, -0.10014763474464417, 0.09906695783138275) * l1(1.0, 1.0);
	r += vec4(-0.04924163967370987, -0.07641620188951492, -0.06815943121910095, -0.045042674988508224);
	return max(r, 0.0);
}

//!DESC CuNNy-1x8-RCAS-DS-down
//!HOOK LUMA
//!BIND conv1_0
//!BIND conv1_1
//!SAVE down
//!WIDTH LUMA.w
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#define l0(x, y) conv1_0_texOff(vec2(x, y))
#define l1(x, y) conv1_1_texOff(vec2(x, y))
vec4 hook() {
	vec4 r = vec4(0.0);
	r += mat4(-0.0952180027961731, -0.0318400040268898, -0.0317879281938076, 0.0006688114372082055, 0.07447891682386398, 0.043672192841768265, 0.08369702100753784, -0.007271528709679842, -0.058827951550483704, 0.11841055750846863, 0.022897517308592796, 0.00782543234527111, -0.1296718865633011, 0.012249917723238468, 0.054786790162324905, -0.012407943606376648) * l0(-1.0, -1.0);
	r += mat4(0.014878359623253345, -0.03367794305086136, -0.11512157320976257, -0.1270301789045334, 0.0010452753631398082, 0.017391549423336983, 0.1297750473022461, 0.1673639416694641, 0.42860832810401917, -0.5335463881492615, 0.16064216196537018, -0.16589467227458954, 0.17762824892997742, -0.04066177085042, 0.05190834030508995, 0.0867469385266304) * l0(0.0, -1.0);
	r += mat4(-0.013868925161659718, -0.0646643415093422, 0.01897822506725788, -0.027600061148405075, 0.04500839486718178, 0.08421622216701508, -0.07348598539829254, 0.008706342428922653, -0.23154844343662262, 0.22803610563278198, -0.009912479668855667, 0.03859791159629822, -0.05373239889740944, -0.006219871807843447, 0.0395469069480896, -0.004494820721447468) * l0(1.0, -1.0);
	r += mat4(-0.2065812051296234, -0.07437055557966232, -0.11667880415916443, -0.07290566712617874, -0.08959925919771194, 0.056383758783340454, -0.08475830405950546, 0.05123861879110336, -0.0781371146440506, 0.1096348762512207, -0.19686514139175415, 0.1431274563074112, 0.25094476342201233, 0.3378475606441498, -0.5214844346046448, -0.035634685307741165) * l0(-1.0, 0.0);
	r += mat4(0.4290046989917755, 0.22050224244594574, 0.6348320841789246, 0.4519062638282776, -0.34082064032554626, -0.4111328721046448, -0.35844579339027405, -0.4129924774169922, 0.4680063724517822, -0.23857368528842926, 0.7421513199806213, -0.5566430687904358, 0.024310778826475143, -0.377897709608078, 0.004888605326414108, -0.6915379166603088) * l0(0.0, 0.0);
	r += mat4(-0.18408234417438507, -0.117893747985363, -0.13820645213127136, -0.010822538286447525, 0.24073608219623566, 0.12744076550006866, 0.24254661798477173, 0.11649738997220993, -0.187405526638031, -0.27441713213920593, -0.509148120880127, 0.049471452832221985, 0.01943873055279255, 0.3060415983200073, -0.14959560334682465, 0.009130639024078846) * l0(1.0, 0.0);
	r += mat4(0.016254864633083344, 0.01960184797644615, -0.10588596016168594, 0.02059057168662548, 0.08862044662237167, -0.008888541720807552, 0.06909020990133286, 0.048785436898469925, -0.015103469602763653, -0.032254330813884735, -0.006981705781072378, 0.04825582727789879, -0.01460806280374527, -0.13709722459316254, 0.4251387119293213, 0.13915789127349854) * l0(-1.0, 1.0);
	r += mat4(-0.03446878120303154, -0.04516075924038887, -0.09064950793981552, -0.15127170085906982, 0.12751547992229462, 0.16265495121479034, 0.02384934574365616, 0.014311322011053562, 0.004167742561548948, -0.07543720304965973, -0.006026511546224356, -0.03966487944126129, -0.10326480865478516, -0.04229903966188431, 0.060687776654958725, 0.0848010703921318) * l0(0.0, 1.0);
	r += mat4(0.01187007687985897, -0.008406301960349083, -0.045042734593153, -0.12746544182300568, -0.06624852865934372, 0.010882983915507793, 0.0499035120010376, 0.09440162777900696, 0.058411069214344025, 0.10431947559118271, 0.1342383176088333, 0.007533911615610123, -0.09592367708683014, -0.04378548264503479, -0.012371191754937172, 0.23035594820976257) * l0(1.0, 1.0);
	r += mat4(0.026571614667773247, -0.0541415773332119, 0.03429794684052467, 0.009247617796063423, 0.2271159142255783, 0.20997634530067444, 0.046249423176050186, -0.054175376892089844, -0.0028778754640370607, -0.09204438328742981, -0.037888213992118835, 0.03578855097293854, -0.4891459345817566, -0.06076875701546669, 0.13396000862121582, 0.13980278372764587) * l1(-1.0, -1.0);
	r += mat4(0.3134171962738037, 0.10277209430932999, 0.009048990905284882, 0.014583487994968891, 0.17692260444164276, -0.14723381400108337, -0.03335212543606758, -0.0004915965837426484, -0.19761192798614502, 0.38901442289352417, -0.19538193941116333, 0.06439036875963211, -0.027611805126070976, -0.4706621468067169, 0.18199408054351807, 0.14795438945293427) * l1(0.0, -1.0);
	r += mat4(0.10704810917377472, 0.440814733505249, -0.06747769564390182, -0.0029085709247738123, 0.015570343472063541, 0.31400489807128906, -0.07807563245296478, -0.03085913695394993, 0.10179807245731354, -0.15968619287014008, 0.05831005424261093, 0.0034688496962189674, 0.03508429601788521, 0.08066805452108383, -0.026555955410003662, 0.03935163840651512) * l1(1.0, -1.0);
	r += mat4(0.18431678414344788, -0.029327066615223885, 0.2503805160522461, 0.017756370827555656, -0.715296745300293, -0.07024038583040237, -0.41608747839927673, 0.2173914611339569, 0.3163294792175293, -0.05598720908164978, 0.2638203799724579, -0.1573566049337387, 0.41663649678230286, -0.03902246803045273, -0.44954368472099304, -0.20230606198310852) * l1(-1.0, 0.0);
	r += mat4(-0.7136144042015076, -0.21918858587741852, -0.05410926789045334, -0.04507555067539215, 0.46588924527168274, -0.3350224494934082, 0.4270644187927246, -0.6425801515579224, -0.5504834651947021, 0.4002518057823181, -0.2213898003101349, 0.7223707437515259, 0.03859032690525055, 0.5566409826278687, -0.23291023075580597, -0.37255242466926575) * l1(0.0, 0.0);
	r += mat4(-0.07090252637863159, -0.2814731299877167, 0.17792046070098877, 0.4674970507621765, -0.13067619502544403, 0.005052078980952501, 0.050559062510728836, 0.42344701290130615, 0.16921810805797577, -0.37597471475601196, 0.15568256378173828, -0.43928709626197815, 0.10011480003595352, 0.0161727424710989, 0.09351522475481033, 0.012804406695067883) * l1(1.0, 0.0);
	r += mat4(0.03318013250827789, 0.0023680836893618107, 0.02664872072637081, -0.07320179045200348, 0.010431979782879353, 0.106193907558918, -0.1220426857471466, 0.06274629384279251, -0.009413553401827812, -0.029967499896883965, 0.1041635274887085, -0.038950882852077484, -0.00954093411564827, 0.02481619454920292, 0.24439628422260284, 0.04583515226840973) * l1(-1.0, 1.0);
	r += mat4(0.05807262286543846, 0.10506433993577957, -0.31152254343032837, 0.0016539235366508365, -0.0030770525336265564, -0.05970592051744461, 0.24658404290676117, 0.10209883749485016, 0.019924741238355637, 0.04565102234482765, -0.3330078721046448, 0.03544488176703453, 0.0528206005692482, 0.02607499621808529, 0.12087202817201614, 0.33945173025131226) * l1(0.0, 1.0);
	r += mat4(0.08566505461931229, 0.10420538485050201, -0.007273372728377581, -0.19397297501564026, 0.042814116925001144, -0.010214493609964848, -0.05945794656872749, -0.1004234179854393, -0.008884173817932606, 0.13226522505283356, 0.06481722742319107, 0.04194849357008934, 0.0026789961848407984, 0.03522253781557083, 0.08072052896022797, 0.07862044870853424) * l1(1.0, 1.0);
	r += vec4(-0.001371880411170423, -0.001407562755048275, -0.0013315462274476886, -0.0013590300222858787);
	return tanh(r);
}

//!DESC CuNNy-1x8-RCAS-DS-shuffle
//!HOOK LUMA
//!BIND down
//!BIND rcas
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 1
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
vec4 hook() {
	vec4 r = vec4(0.0);
	vec2 f = fract(down_pos * down_size);
	ivec2 i = ivec2(f * vec2(2.0));
	r.r = down_tex((vec2(0.5) - f) * down_pt + down_pos)[2*i.y + i.x];
	r.r += rcas_tex(rcas_pos).r;
	r.a = 1.0;
	return clamp(r, 0.0, 1.0);
}
