// CuNNy 4x8C RCAS DS
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

// FSR mpv | modified
// Copyright (c) 2021 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// FidelityFX FSR v1.0.2 by AMD
// ported to mpv by agyild

//!DESC CuNNy-4x8C-RCAS-DS-EASU
//!HOOK LUMA
//!BIND LUMA
//!SAVE easu
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
//!COMPONENTS 1

float APrxLoRcpF1(float a) {
	return uintBitsToFloat(uint(0x7ef07ebb) - floatBitsToUint(a));
}

float APrxLoRsqF1(float a) {
	return uintBitsToFloat(uint(0x5f347d74) - (floatBitsToUint(a) >> uint(1)));
}

float AMin3F1(float x, float y, float z) {
	return min(x, min(y, z));
}

float AMax3F1(float x, float y, float z) {
	return max(x, max(y, z));
}

void tap(inout float aC, inout float aW, vec2 off, vec2 dir, vec2 len,
         float lob, float clp, float c){
	vec2 v;
	v.x = (off.x * ( dir.x)) + (off.y * dir.y);
	v.y = (off.x * (-dir.y)) + (off.y * dir.x);
	v *= len;
	float d2 = v.x * v.x + v.y * v.y;
	d2 = min(d2, clp);
	float wB = float(2.0 / 5.0) * d2 + -1.0;
	float wA = lob * d2 + -1.0;
	wB *= wB;
	wA *= wA;
	wB = float(25.0 / 16.0) * wB + float(-(25.0 / 16.0 - 1.0));
	float w = wB * wA;
	aC += c * w;
	aW += w;
}

void set(inout vec2 dir, inout float len, vec2 pp, bool biS, bool biT,
         bool biU, bool biV, float lA, float lB, float lC, float lD, float lE){
	float w = 0.0;
	if (biS)
		w = (1.0 - pp.x) * (1.0 - pp.y);
	if (biT)
		w =        pp.x  * (1.0 - pp.y);
	if (biU)
		w = (1.0 - pp.x) *        pp.y;
	if (biV)
		w =        pp.x  *        pp.y;
	float dc = lD - lC;
	float cb = lC - lB;
	float lenX = max(abs(dc), abs(cb));
	lenX = APrxLoRcpF1(lenX);
	float dirX = lD - lB;
	lenX = clamp(abs(dirX) * lenX, 0.0, 1.0);
	lenX *= lenX;
	float ec = lE - lC;
	float ca = lC - lA;
	float lenY = max(abs(ec), abs(ca));
	lenY = APrxLoRcpF1(lenY);
	float dirY = lE - lA;
	lenY = clamp(abs(dirY) * lenY, 0.0, 1.0);
	lenY *= lenY;
	dir += vec2(dirX, dirY) * w;
	len += dot(vec2(w), vec2(lenX, lenY));
}

vec4 hook() {
	vec4 pix = vec4(0.0, 0.0, 0.0, 1.0);
	vec2 pp = LUMA_pos * LUMA_size - vec2(0.5);
	vec2 fp = floor(pp);
	pp -= fp;
#if (defined(LUMA_gather) && (__VERSION__ >= 400 || (GL_ES && __VERSION__ >= 310)))
	vec4 bczzL = LUMA_gather(vec2((fp + vec2(1.0, -1.0)) * LUMA_pt), 0);
	vec4 ijfeL = LUMA_gather(vec2((fp + vec2(0.0,  1.0)) * LUMA_pt), 0);
	vec4 klhgL = LUMA_gather(vec2((fp + vec2(2.0,  1.0)) * LUMA_pt), 0);
	vec4 zzonL = LUMA_gather(vec2((fp + vec2(1.0,  3.0)) * LUMA_pt), 0);
#else
	float b = LUMA_tex(vec2((fp + vec2(0.5, -0.5)) * LUMA_pt)).r;
	float c = LUMA_tex(vec2((fp + vec2(1.5, -0.5)) * LUMA_pt)).r;
	float e = LUMA_tex(vec2((fp + vec2(-0.5, 0.5)) * LUMA_pt)).r;
	float f = LUMA_tex(vec2((fp + vec2( 0.5, 0.5)) * LUMA_pt)).r;
	float g = LUMA_tex(vec2((fp + vec2( 1.5, 0.5)) * LUMA_pt)).r;
	float h = LUMA_tex(vec2((fp + vec2( 2.5, 0.5)) * LUMA_pt)).r;
	float i = LUMA_tex(vec2((fp + vec2(-0.5, 1.5)) * LUMA_pt)).r;
	float j = LUMA_tex(vec2((fp + vec2( 0.5, 1.5)) * LUMA_pt)).r;
	float k = LUMA_tex(vec2((fp + vec2( 1.5, 1.5)) * LUMA_pt)).r;
	float l = LUMA_tex(vec2((fp + vec2( 2.5, 1.5)) * LUMA_pt)).r;
	float n = LUMA_tex(vec2((fp + vec2(0.5, 2.5) ) * LUMA_pt)).r;
	float o = LUMA_tex(vec2((fp + vec2(1.5, 2.5) ) * LUMA_pt)).r;
	vec4 bczzL = vec4(b, c, 0.0, 0.0);
	vec4 ijfeL = vec4(i, j, f, e);
	vec4 klhgL = vec4(k, l, h, g);
	vec4 zzonL = vec4(0.0, 0.0, o, n);
#endif
	float bL = bczzL.x;
	float cL = bczzL.y;
	float iL = ijfeL.x;
	float jL = ijfeL.y;
	float fL = ijfeL.z;
	float eL = ijfeL.w;
	float kL = klhgL.x;
	float lL = klhgL.y;
	float hL = klhgL.z;
	float gL = klhgL.w;
	float oL = zzonL.z;
	float nL = zzonL.w;
	vec2 dir = vec2(0.0);
	float len = 0.0;
	set(dir, len, pp, true, false, false, false, bL, eL, fL, gL, jL);
	set(dir, len, pp, false, true, false, false, cL, fL, gL, hL, kL);
	set(dir, len, pp, false, false, true, false, fL, iL, jL, kL, nL);
	set(dir, len, pp, false, false, false, true, gL, jL, kL, lL, oL);
	vec2 dir2 = dir * dir;
	float dirR = dir2.x + dir2.y;
	bool zro = dirR < float(1.0 / 32768.0);
	dirR = APrxLoRsqF1(dirR);
	dirR = zro ? 1.0 : dirR;
	dir.x = zro ? 1.0 : dir.x;
	dir *= vec2(dirR);
	len = len * 0.5;
	len *= len;
	float stretch = (dir.x * dir.x + dir.y * dir.y) * APrxLoRcpF1(max(abs(dir.x), abs(dir.y)));
	vec2 len2 = vec2(1.0 + (stretch - 1.0) * len, 1.0 + -0.5 * len);
	float lob = 0.5 + float((1.0 / 4.0 - 0.04) - 0.5) * len;
	float clp = APrxLoRcpF1(lob);
	float aC = 0.0;
	float aW = 0.0;
	tap(aC, aW, vec2( 0.0,-1.0) - pp, dir, len2, lob, clp, bL);
	tap(aC, aW, vec2( 1.0,-1.0) - pp, dir, len2, lob, clp, cL);
	tap(aC, aW, vec2(-1.0, 1.0) - pp, dir, len2, lob, clp, iL);
	tap(aC, aW, vec2( 0.0, 1.0) - pp, dir, len2, lob, clp, jL);
	tap(aC, aW, vec2( 0.0, 0.0) - pp, dir, len2, lob, clp, fL);
	tap(aC, aW, vec2(-1.0, 0.0) - pp, dir, len2, lob, clp, eL);
	tap(aC, aW, vec2( 1.0, 1.0) - pp, dir, len2, lob, clp, kL);
	tap(aC, aW, vec2( 2.0, 1.0) - pp, dir, len2, lob, clp, lL);
	tap(aC, aW, vec2( 2.0, 0.0) - pp, dir, len2, lob, clp, hL);
	tap(aC, aW, vec2( 1.0, 0.0) - pp, dir, len2, lob, clp, gL);
	tap(aC, aW, vec2( 1.0, 2.0) - pp, dir, len2, lob, clp, oL);
	tap(aC, aW, vec2( 0.0, 2.0) - pp, dir, len2, lob, clp, nL);
	pix.r = aC / aW;
	float min1 = min(AMin3F1(fL, gL, jL), kL);
	float max1 = max(AMax3F1(fL, gL, jL), kL);
	pix.r = clamp(pix.r, min1, max1);
	pix.r = clamp(pix.r, 0.0, 1.0);
	return pix;
}

//!DESC CuNNy-4x8C-RCAS-DS-RCAS
//!HOOK LUMA
//!BIND easu
//!SAVE rcas
//!WIDTH easu.w
//!HEIGHT easu.h
//!COMPONENTS 1

// CuNNy: do not change unless changed during training as well
#define SHARPNESS 2.0
#define FSR_RCAS_LIMIT (0.25 - (1.0 / 16.0))

float APrxMedRcpF1(float a) {
	float b = uintBitsToFloat(uint(0x7ef19fff) - floatBitsToUint(a));
	return b * (-b * a + 2.0);
}

float AMax3F1(float x, float y, float z) {
	return max(x, max(y, z)); 
}


float AMin3F1(float x, float y, float z) {
	return min(x, min(y, z));
}

vec4 hook() {
#if (defined(easu_gather) && (__VERSION__ >= 400 || (GL_ES && __VERSION__ >= 310)))
	vec3 bde = easu_gather(easu_pos + easu_pt * vec2(-0.5), 0).xyz;
	float b = bde.z;
	float d = bde.x;
	float e = bde.y;
	vec2 fh = easu_gather(easu_pos + easu_pt * vec2(0.5), 0).zx;
	float f = fh.x;
	float h = fh.y;
#else
	float b = easu_texOff(vec2( 0.0, -1.0)).r;
	float d = easu_texOff(vec2(-1.0,  0.0)).r;
	float e = easu_tex(easu_pos).r;
	float f = easu_texOff(vec2(1.0, 0.0)).r;
	float h = easu_texOff(vec2(0.0, 1.0)).r;
#endif
	float mn1L = min(AMin3F1(b, d, f), h);
	float mx1L = max(AMax3F1(b, d, f), h);
	vec2 peakC = vec2(1.0, -1.0 * 4.0);
	float hitMinL = min(mn1L, e) / (4.0 * mx1L);
	float hitMaxL = (peakC.x - max(mx1L, e)) / (4.0 * mn1L + peakC.y);
	float lobeL = max(-hitMinL, hitMaxL);
	float lobe = max(float(-FSR_RCAS_LIMIT), min(lobeL, 0.0)) * exp2(-clamp(float(SHARPNESS), 0.0, 2.0));
	float nz = 0.25 * b + 0.25 * d + 0.25 * f + 0.25 * h - e;
	nz = clamp(abs(nz) * APrxMedRcpF1(AMax3F1(AMax3F1(b, d, e), f, h) - AMin3F1(AMin3F1(b, d, e), f, h)), 0.0, 1.0);
	nz = -0.5 * nz + 1.0;
	lobe *= nz;
	float rcpL = APrxMedRcpF1(4.0 * lobe + 1.0);
	vec4 pix = vec4(0.0, 0.0, 0.0, 1.0);
	pix.r = float((lobe * b + lobe * d + lobe * h + lobe * f + e) * rcpL);
	return pix;
}


//!DESC CuNNy-4x8C-RCAS-DS-in
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND LUMA
//!SAVE in
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) F(texelFetch(LUMA_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(1, 1) + ivec2(0, 0), 0).r)
shared F g[1][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = LUMA_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			g[0][ay][ax] = l0(x - 1, y - 1);
		}
	}
	barrier();
	F s[3][3][1];
	V4 r0 = V4(0.0);
	V4 r1 = V4(0.0);
	s[0][0][0] = g[0][xy.y+0][xy.x+0];
	s[0][1][0] = g[0][xy.y+0][xy.x+1];
	s[0][2][0] = g[0][xy.y+0][xy.x+2];
	s[1][0][0] = g[0][xy.y+1][xy.x+0];
	s[1][1][0] = g[0][xy.y+1][xy.x+1];
	s[1][2][0] = g[0][xy.y+1][xy.x+2];
	s[2][0][0] = g[0][xy.y+2][xy.x+0];
	s[2][1][0] = g[0][xy.y+2][xy.x+1];
	s[2][2][0] = g[0][xy.y+2][xy.x+2];
	r0 += V4(-8.457e-02, -1.022e-03, -5.860e-02, 1.174e-01) * s[0][0][0];
	r1 += V4(-2.535e-02, 3.665e-02, 1.267e-01, -1.440e-01) * s[0][0][0];
	r0 += V4(6.619e-03, 1.554e-03, -3.561e-01, -1.362e-01) * s[0][1][0];
	r1 += V4(1.773e-01, -4.080e-01, 1.363e-01, 2.739e-01) * s[0][1][0];
	r0 += V4(3.476e-02, 1.245e-03, 9.049e-02, -6.503e-02) * s[0][2][0];
	r1 += V4(-5.121e-03, 3.943e-02, 4.416e-02, -1.936e-02) * s[0][2][0];
	r0 += V4(2.693e-02, -1.828e-03, -3.489e-01, -2.392e-01) * s[1][0][0];
	r1 += V4(-4.335e-01, 5.268e-01, 1.543e-01, 1.863e-01) * s[1][0][0];
	r0 += V4(9.051e-02, 1.497e-03, -9.912e-02, 2.706e-01) * s[1][1][0];
	r1 += V4(2.319e-01, -1.778e-01, -4.541e-01, 2.110e-01) * s[1][1][0];
	r0 += V4(8.634e-02, -1.215e-02, 7.563e-02, 8.799e-02) * s[1][2][0];
	r1 += V4(2.123e-02, -2.378e-02, -1.589e-02, -2.801e-01) * s[1][2][0];
	r0 += V4(-2.856e-02, 2.798e-03, 1.195e-01, 1.412e-01) * s[2][0][0];
	r1 += V4(-4.902e-02, -6.015e-02, 1.151e-02, -5.060e-04) * s[2][0][0];
	r0 += V4(2.080e-01, -9.106e-03, 1.255e-01, -1.655e-01) * s[2][1][0];
	r1 += V4(7.251e-02, 7.788e-02, -3.848e-02, -1.474e-01) * s[2][1][0];
	r0 += V4(3.597e-02, 4.169e-01, -5.020e-02, 7.744e-04) * s[2][2][0];
	r1 += V4(1.924e-02, -1.263e-02, 2.104e-02, -8.382e-02) * s[2][2][0];
	r0 += V4(-1.883e-01, -9.185e-03, 2.294e-01, -1.279e-02);
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-3.487e-02, -7.315e-05, -1.189e-02, 7.046e-03);
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-4x8C-RCAS-DS-conv1
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND in
//!BIND LUMA
//!SAVE conv1
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 g[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = in_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			g[0][ay][ax] = l0(x - 1, y - 1);
			g[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s[3][3][2];
	V4 r0 = V4(0.0);
	V4 r1 = V4(0.0);
	s[0][0][0] = max(g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[0][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[0][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[0][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[0][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[0][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[0][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(-1.120e-01, -1.963e-02, -6.212e-02, 2.001e-02, 1.675e-01, 6.406e-03, 2.096e-02, -1.479e-01, 4.332e-02, 8.533e-02, -1.329e-02, 3.567e-02, -2.995e-01, 6.722e-02, -1.608e-04, -2.803e-02) * s[0][0][0];
	r1 += M4(5.833e-02, -8.611e-02, -2.474e-01, 5.760e-02, -1.710e-01, -5.739e-02, 1.617e-02, 1.455e-01, -2.482e-02, 1.362e-01, 1.238e-02, 1.239e-02, 2.943e-02, -5.914e-02, 1.562e-01, 1.720e-01) * s[0][0][0];
	r0 += M4(-5.946e-03, 6.508e-02, -1.284e-01, 1.399e-01, 2.428e+00, 1.052e+00, -4.174e-01, -1.508e+00, -3.370e-02, 5.778e-02, 7.968e-03, 1.376e-02, -2.288e-01, 1.082e-01, -1.056e-02, 5.893e-02) * s[0][0][1];
	r1 += M4(6.543e-02, -2.055e-01, -1.799e-01, 4.323e-02, 4.139e+00, 3.518e+00, -1.309e+00, 8.829e-01, -1.457e-03, 1.626e-01, -2.951e-02, 4.158e-02, 9.484e-02, -1.838e-01, 7.347e-02, 6.367e-02) * s[0][0][1];
	r0 += M4(4.031e-02, -8.765e-02, 5.230e-02, -1.680e-01, 8.369e-02, 5.434e-02, -6.799e-02, -5.018e-02, 7.552e-03, -8.346e-02, -2.237e-01, -4.399e-02, -8.535e-01, -1.929e-02, 2.359e-01, 5.346e-02) * s[0][1][0];
	r1 += M4(9.998e-02, -8.536e-02, -4.290e-02, 1.075e-01, 6.608e-02, 2.210e-02, -9.061e-02, -3.748e-02, 3.417e-03, 1.160e-01, 1.220e-01, -1.701e-01, -1.871e-01, -3.876e-02, 9.363e-02, -6.393e-02) * s[0][1][0];
	r0 += M4(2.078e-02, -3.444e-01, 3.591e-02, -1.500e-01, -2.362e+00, 1.186e+00, 3.465e-01, -4.358e-01, 5.170e-02, 3.725e-02, -2.892e-01, 5.231e-02, -6.577e-01, 2.011e-01, 8.708e-02, 1.262e-01) * s[0][1][1];
	r1 += M4(3.309e-01, 2.051e-01, -3.042e-02, 2.150e-02, 1.309e+00, -3.145e+00, -7.006e-03, 3.268e-01, 9.260e-03, 1.458e-01, 1.582e-01, -1.125e-01, -6.782e-02, -3.405e-02, -1.733e-01, -5.429e-02) * s[0][1][1];
	r0 += M4(-7.862e-02, -8.393e-02, -2.239e-02, -3.384e-02, 1.207e-01, -8.647e-02, -7.011e-02, -2.204e-02, 1.606e-01, 4.636e-02, -1.765e-01, 1.391e-01, 1.605e-01, -4.888e-02, -9.715e-02, 5.768e-02) * s[0][2][0];
	r1 += M4(-7.837e-02, -2.196e-01, -1.354e-01, -1.070e-01, 3.999e-02, 1.123e-01, 4.862e-02, -8.467e-03, 1.137e-01, 6.142e-02, -3.115e-01, 4.016e-02, 1.538e-02, -9.024e-02, -3.468e-01, -6.779e-02) * s[0][2][0];
	r0 += M4(-7.569e-02, -2.095e-01, -3.239e-02, 2.797e-02, 4.713e-01, 6.653e-01, -6.857e-01, 1.837e-01, 1.905e-01, 1.467e-02, -1.564e-01, 5.540e-02, 1.660e-01, 1.143e-01, 4.398e-02, -5.380e-03) * s[0][2][1];
	r1 += M4(-1.277e-01, -2.367e-01, -9.705e-02, -3.018e-01, 1.992e-01, 1.213e-01, 1.010e+00, 1.514e-01, 4.227e-02, 1.340e-02, -2.382e-01, -1.919e-02, 9.187e-03, -4.977e-02, 1.451e-01, 4.726e-02) * s[0][2][1];
	r0 += M4(1.168e-01, -2.317e-03, 1.895e-01, 9.317e-02, -1.617e-01, 1.417e-01, -6.576e-02, 6.375e-02, 1.625e-01, 2.342e-01, -5.251e-02, 6.120e-02, 1.820e-01, -1.890e-01, 1.268e-01, -4.045e-02) * s[1][0][0];
	r1 += M4(-2.865e-01, 4.233e-02, 1.100e-02, 1.010e-01, 7.034e-03, 3.720e-02, -5.203e-02, -5.086e-02, 9.844e-02, -1.895e-01, -2.263e-01, 2.497e-02, -1.919e-02, 1.532e-01, 3.035e-02, 4.897e-02) * s[1][0][0];
	r0 += M4(2.559e-01, 1.577e-01, 1.290e-01, 2.064e-01, -4.085e-01, 8.794e-01, 1.598e+00, 1.070e+00, 8.473e-02, 2.281e-01, -3.876e-02, -1.070e-02, 3.077e-01, -1.707e-01, -3.089e-02, -1.510e-02) * s[1][0][1];
	r1 += M4(-7.755e-02, 6.878e-04, 5.054e-03, -1.347e-01, 5.522e-01, 8.561e-01, 2.348e-01, -3.856e-01, 1.111e-01, -2.092e-01, -2.153e-01, 2.399e-02, 9.794e-03, 2.744e-01, 2.370e-01, -6.195e-02) * s[1][0][1];
	r0 += M4(1.003e-01, -1.304e-01, -1.325e-01, -1.686e-01, 1.016e-03, -1.068e-01, 3.315e-02, 1.496e-02, 1.597e-02, 1.452e-02, 2.213e-02, 5.408e-02, 3.054e-01, -3.682e-01, 5.725e-02, -4.153e-02) * s[1][1][0];
	r1 += M4(-3.244e-01, 1.049e-02, 1.243e-01, -1.003e-01, 1.194e-01, -5.440e-03, -4.879e-02, 1.070e-01, -1.723e-01, 4.566e-02, 2.252e-01, -2.110e-01, -1.165e-01, 1.752e-02, -3.888e-01, 9.421e-02) * s[1][1][0];
	r0 += M4(1.022e-01, -2.998e-01, 2.222e-03, -2.063e-01, -4.127e-01, 1.106e+00, 1.253e+00, 8.862e-01, 5.554e-03, -8.671e-04, -1.018e-03, 1.018e-01, 5.341e-01, -2.604e-01, -2.278e-01, -2.861e-01) * s[1][1][1];
	r1 += M4(1.548e-01, 1.628e-02, 1.220e-01, 4.920e-02, 3.922e-01, 2.506e-01, -8.495e-01, -2.421e-01, 6.268e-03, 2.450e-02, 1.140e-01, -6.364e-02, 8.233e-02, 1.595e-01, -6.820e-02, 1.713e-01) * s[1][1][1];
	r0 += M4(1.143e-01, -1.176e-01, 1.421e-01, -8.967e-02, 1.178e-02, 3.845e-02, 9.754e-02, -6.564e-02, -3.081e-02, 4.959e-02, -3.658e-02, -1.218e-01, -1.734e-01, 8.571e-03, 2.094e-02, 1.047e-01) * s[1][2][0];
	r1 += M4(7.081e-02, 1.169e-01, -7.200e-02, -4.691e-02, 2.959e-02, -1.586e-02, 3.706e-02, 1.192e-01, -2.291e-01, -2.169e-02, 1.972e-01, -7.440e-02, -3.382e-02, 2.359e-01, -3.256e-01, 2.829e-02) * s[1][2][0];
	r0 += M4(9.252e-02, 3.700e-02, 2.394e-02, -1.576e-01, -5.797e-01, 1.254e-01, 5.518e-01, 2.393e-01, -7.896e-02, 4.372e-02, -1.300e-02, -2.436e-02, 9.261e-02, 1.653e-02, 4.826e-02, -2.664e-02) * s[1][2][1];
	r1 += M4(1.008e-01, 4.840e-02, -1.331e-01, -1.304e-02, 4.129e-02, 6.338e-01, -5.964e-01, -1.149e-01, -5.643e-02, -1.451e-01, 1.608e-01, -8.107e-02, -8.111e-02, 2.764e-02, -7.378e-02, -2.008e-02) * s[1][2][1];
	r0 += M4(-9.674e-02, -2.686e-01, 1.028e-01, -4.160e-03, 4.402e-03, 2.558e-02, 1.218e-02, -1.065e-01, -3.327e-02, -2.513e-02, 9.641e-02, -8.739e-02, 8.876e-02, -1.168e-01, -6.733e-02, 1.199e-01) * s[2][0][0];
	r1 += M4(-2.045e-02, 3.654e-02, 1.919e-01, -1.851e-02, 2.639e-02, 4.289e-02, -5.620e-04, 6.134e-02, 2.677e-02, 4.026e-02, -1.804e-01, 1.694e-01, -1.579e-01, -5.253e-03, 1.458e-01, -3.050e-01) * s[2][0][0];
	r0 += M4(-1.179e-01, -2.466e-01, 1.134e-01, -2.315e-02, 7.341e-01, 3.991e-01, -3.665e-02, -1.160e-01, 9.258e-02, -7.762e-03, 4.764e-02, -1.316e-01, 1.052e-01, -9.553e-02, -1.188e-01, 1.732e-01) * s[2][0][1];
	r1 += M4(-7.349e-02, 9.882e-02, 1.898e-01, 4.477e-02, 1.581e-01, 1.008e-01, -5.733e-01, 3.395e-02, -4.393e-02, 3.292e-04, -1.831e-01, 4.329e-02, -2.877e-02, -5.818e-02, 1.590e-01, -1.070e-01) * s[2][0][1];
	r0 += M4(-2.836e-02, -1.653e-02, -2.336e-01, -1.107e-01, -2.118e-02, -2.982e-03, 7.720e-02, 2.461e-02, 2.727e-02, 1.952e-01, 6.966e-02, 2.829e-01, -2.044e-01, 7.221e-02, -4.495e-01, -2.824e-01) * s[2][1][0];
	r1 += M4(8.723e-02, 2.055e-02, 4.023e-03, -1.227e-01, 4.144e-02, 1.274e-01, 6.277e-02, 3.950e-02, -2.587e-02, -1.797e-02, 5.805e-02, -2.014e-01, -7.655e-02, 1.196e-01, 3.032e-02, -1.887e-01) * s[2][1][0];
	r0 += M4(-4.781e-02, -5.925e-02, -1.614e-01, -7.942e-02, 2.666e-01, 3.189e-01, -1.840e-01, 5.680e-04, -8.456e-02, 9.649e-02, 2.114e-01, 2.693e-01, -2.947e-01, 2.960e-02, -8.316e-02, 1.055e-01) * s[2][1][1];
	r1 += M4(3.765e-02, -1.390e-04, 7.675e-02, -8.029e-02, 4.073e-01, -2.181e-01, 4.123e-01, -4.130e-01, 1.485e-02, 7.128e-02, -1.556e-02, -2.195e-02, 3.595e-02, 6.730e-02, 1.328e-01, -5.501e-02) * s[2][1][1];
	r0 += M4(2.040e-02, 9.012e-03, -1.739e-01, 6.330e-02, -1.186e-02, -1.568e-03, 8.664e-02, -4.015e-02, -2.960e-02, 6.004e-02, 1.724e-01, -6.936e-02, -1.353e-01, -6.580e-02, -1.315e-01, -2.331e-01) * s[2][2][0];
	r1 += M4(2.669e-03, -7.542e-02, -1.101e-01, -5.944e-02, -1.352e-02, -2.202e-02, 4.288e-02, 1.351e-03, 6.768e-03, -8.207e-02, 1.374e-02, 1.030e-01, -1.420e-01, 1.060e-01, 3.275e-01, -9.191e-02) * s[2][2][0];
	r0 += M4(-3.472e-03, -6.347e-02, -2.174e-01, 1.143e-02, 1.522e-02, -4.510e-01, -9.492e-01, -2.551e-01, 5.777e-02, 1.731e-01, 1.787e-01, -4.763e-02, 4.848e-03, 3.555e-02, -3.881e-02, 8.754e-02) * s[2][2][1];
	r1 += M4(-6.270e-02, -6.296e-02, -1.431e-01, -2.001e-01, 7.927e-02, -1.983e-01, -9.179e-02, -1.865e-01, -1.363e-01, -5.083e-02, 1.078e-01, 1.616e-01, 1.798e-02, -1.619e-02, 7.849e-02, 4.526e-02) * s[2][2][1];
	s[0][0][0] = max(g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[1][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[1][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[1][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[1][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[1][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[1][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(1.086e-01, -5.941e-02, -1.534e-01, -6.555e-03, -1.151e-01, -1.536e-01, -5.801e-02, 5.488e-02, 1.206e-01, 6.325e-03, -1.458e-01, 7.307e-02, 1.641e-01, 1.334e-01, -9.605e-03, 1.029e-01) * s[0][0][0];
	r1 += M4(1.057e-01, 3.736e-02, 9.194e-02, -4.531e-02, -3.486e-02, 1.137e-01, 1.411e-01, -1.090e-01, 1.268e-01, -1.963e-03, -1.162e-01, -1.292e-01, 9.513e-02, 2.179e-01, 1.504e-01, -2.041e-01) * s[0][0][0];
	r0 += M4(-7.002e-02, -3.093e-01, -9.612e-02, 5.576e-02, -2.740e-02, 9.858e-02, -5.697e-02, 1.019e-02, 8.129e-02, -5.827e-02, -1.392e-01, 1.653e-01, 1.220e-01, 3.076e-01, -1.134e-01, 1.266e-01) * s[0][0][1];
	r1 += M4(2.493e-02, 1.265e-01, 4.917e-02, -3.757e-02, 1.488e-02, -1.094e-02, 9.829e-02, -1.022e-01, 1.672e-01, 9.903e-02, -1.932e-01, 8.968e-03, 1.821e-01, -2.196e-01, 1.001e-01, 2.221e-02) * s[0][0][1];
	r0 += M4(-5.652e-02, 2.409e-01, -5.896e-02, -2.144e-01, 2.350e-01, 9.358e-03, 1.705e-01, 6.282e-02, 3.019e-01, 2.059e-01, -1.787e-01, -2.179e-01, -2.292e-01, 2.962e-02, 5.361e-03, -4.436e-02) * s[0][1][0];
	r1 += M4(-5.163e-02, 1.105e-01, 1.303e-01, -1.801e-02, 1.177e-01, 1.342e-01, -2.744e-01, 1.773e-01, 3.787e-02, 1.934e-01, 3.432e-01, -3.916e-02, 1.205e-01, 6.179e-02, 2.580e-02, 3.478e-02) * s[0][1][0];
	r0 += M4(2.014e-01, 9.814e-02, -1.489e-01, 4.363e-02, 2.251e-01, 3.079e-01, 9.839e-02, -1.807e-01, 3.091e-02, -2.104e-01, -9.481e-03, 3.837e-02, -2.571e-01, -2.940e-02, -1.259e-01, 1.418e-01) * s[0][1][1];
	r1 += M4(2.995e-02, 1.371e-01, 6.549e-02, -1.607e-01, 1.043e-01, -1.702e-02, 2.608e-02, 2.331e-01, -9.393e-02, 1.401e-01, 7.621e-02, 1.360e-01, 1.997e-01, -2.519e-01, -1.104e-01, 2.561e-01) * s[0][1][1];
	r0 += M4(8.757e-03, 9.960e-02, 8.282e-02, 3.578e-02, 5.996e-02, -2.879e-01, 5.372e-02, 3.256e-02, -6.975e-02, -1.188e-01, 6.581e-02, -1.329e-01, 1.336e-01, -1.565e-03, 2.058e-03, 2.629e-02) * s[0][2][0];
	r1 += M4(8.024e-02, 1.019e-01, 7.096e-02, -2.281e-01, -8.506e-02, -1.258e-02, -2.789e-01, 9.733e-02, -1.004e-02, 8.055e-02, -5.210e-02, -2.037e-01, -4.531e-02, -2.009e-02, -1.404e-01, 9.472e-03) * s[0][2][0];
	r0 += M4(-3.625e-02, -1.752e-01, -5.448e-02, 6.866e-02, 1.446e-02, -1.105e-02, 3.693e-02, -1.354e-01, -4.054e-02, 3.256e-02, 8.393e-02, -1.469e-01, 1.486e-01, -1.017e-01, -4.455e-02, 1.508e-01) * s[0][2][1];
	r1 += M4(-3.298e-02, -1.367e-01, -2.768e-01, 1.721e-02, 2.588e-03, -4.258e-02, 1.039e-01, 8.471e-02, 1.317e-02, -1.091e-02, -2.419e-01, 5.115e-03, 1.272e-03, -9.433e-02, -1.005e-01, 3.723e-02) * s[0][2][1];
	r0 += M4(-1.145e-01, 2.877e-02, 1.658e-02, -1.739e-01, 6.870e-02, 7.865e-02, 1.858e-01, 1.562e-01, 2.798e-01, -1.519e-01, -1.175e-01, 2.894e-01, -3.252e-01, -3.216e-02, 1.489e-02, 7.148e-02) * s[1][0][0];
	r1 += M4(-9.877e-02, 7.370e-02, 3.817e-02, 2.038e-02, 9.363e-02, -7.724e-02, -6.021e-02, 2.549e-01, -1.017e-01, -5.341e-02, -2.132e-01, -2.577e-01, -2.039e-02, -5.605e-02, 2.388e-01, -2.087e-01) * s[1][0][0];
	r0 += M4(-3.929e-02, -4.932e-02, 5.551e-02, 2.705e-02, 1.646e-01, -4.558e-02, 1.875e-01, -1.287e-01, -6.062e-02, 3.745e-02, -1.637e-01, 5.406e-02, -4.131e-01, 8.288e-02, -1.281e-01, 1.271e-01) * s[1][0][1];
	r1 += M4(-5.235e-02, -2.529e-01, -3.476e-03, -6.164e-02, 5.196e-02, 1.589e-01, -2.411e-04, 1.349e-01, -3.968e-02, -2.942e-01, -1.732e-01, 3.758e-03, 1.984e-02, -1.663e-01, -1.831e-01, -2.224e-01) * s[1][0][1];
	r0 += M4(-3.560e-01, 2.457e-01, -8.577e-02, -8.381e-02, -4.583e-01, -2.809e-01, 8.660e-02, 2.443e-01, 7.123e-01, 3.999e-01, -2.655e-01, 9.918e-02, 1.488e-01, -3.576e-03, -9.394e-03, -1.548e-01) * s[1][1][0];
	r1 += M4(-1.453e-01, -7.389e-02, 2.604e-01, -1.182e-01, -4.447e-02, 4.393e-02, -5.785e-02, -1.734e-01, -2.391e-01, -2.392e-01, 4.755e-01, -9.828e-02, 1.679e-02, 3.906e-02, 2.257e-01, 2.755e-01) * s[1][1][0];
	r0 += M4(4.693e-01, 1.468e-01, -2.112e-01, 1.766e-01, 3.946e-02, 7.794e-02, -4.462e-01, -5.952e-02, -4.232e-01, 1.959e-01, 6.934e-02, 1.902e-01, 1.146e-01, 2.556e-01, 2.990e-02, -1.602e-01) * s[1][1][1];
	r1 += M4(-6.611e-02, -3.318e-01, 9.211e-02, 2.687e-02, 5.313e-02, 1.544e-01, 4.750e-02, -6.113e-01, -2.055e-01, -1.232e-01, 5.731e-02, -5.782e-02, 9.178e-02, 1.172e-02, -2.912e-01, 3.918e-02) * s[1][1][1];
	r0 += M4(1.921e-01, -2.366e-01, -2.176e-01, 1.576e-01, -3.710e-02, -3.238e-01, 6.755e-02, 8.872e-02, 1.433e-01, 2.531e-01, 1.837e-02, -2.996e-02, -2.311e-03, -6.089e-02, -1.524e-01, -1.338e-01) * s[1][2][0];
	r1 += M4(-9.058e-02, -4.215e-02, 1.255e-01, -2.042e-01, -2.125e-04, 2.078e-01, -5.846e-01, 1.219e-01, 6.738e-02, 2.615e-01, 1.101e-02, 7.853e-02, 1.222e-02, 5.633e-02, 6.230e-02, -9.645e-02) * s[1][2][0];
	r0 += M4(-1.493e-02, -2.447e-01, -1.890e-01, 1.333e-01, 3.381e-01, 1.152e-01, -7.963e-02, -3.931e-01, -1.615e-02, 1.803e-01, 4.191e-01, 1.536e-01, -1.246e-02, -2.004e-01, -7.363e-02, -1.269e-01) * s[1][2][1];
	r1 += M4(-1.788e-01, -1.683e-01, 1.250e-02, -6.108e-02, 1.237e-02, 1.176e-01, 4.194e-01, -2.143e-01, 7.789e-02, 1.613e-02, 2.502e-01, 6.869e-02, -6.682e-03, -9.042e-03, -1.915e-01, -6.936e-02) * s[1][2][1];
	r0 += M4(9.246e-02, 1.027e-01, 8.646e-02, 3.091e-02, 1.005e-01, 3.552e-02, 1.971e-02, 1.401e-01, -3.251e-05, -3.593e-03, 1.952e-01, -3.692e-01, -6.764e-02, 5.775e-02, 2.124e-01, -5.547e-02) * s[2][0][0];
	r1 += M4(6.397e-03, 4.613e-02, 2.460e-02, 1.377e-02, -4.870e-02, -9.513e-02, -1.120e-01, -2.034e-03, -9.142e-02, -5.947e-02, 1.774e-01, 1.677e-01, -4.277e-02, 9.662e-02, 8.623e-02, 1.179e-02) * s[2][0][0];
	r0 += M4(1.967e-01, 1.562e-01, 1.326e-01, 8.790e-02, 1.222e-01, 6.213e-02, 1.485e-03, 4.425e-02, 8.549e-02, 1.098e-02, 1.263e-01, -1.305e-01, -2.528e-01, 9.424e-02, 2.284e-01, 1.743e-01) * s[2][0][1];
	r1 += M4(-2.885e-02, -1.759e-02, -1.549e-03, 2.142e-02, -7.432e-04, 2.356e-02, -7.222e-02, -1.653e-02, -1.179e-01, -2.629e-02, 1.244e-01, 1.407e-01, 8.901e-03, 1.890e-01, -5.978e-02, -3.258e-02) * s[2][0][1];
	r0 += M4(1.417e-01, -1.999e-01, 1.069e-01, -1.564e-01, 4.103e-02, -1.062e-01, -2.055e-01, 3.519e-01, -1.011e-02, -3.788e-02, 4.244e-02, -5.408e-01, 1.130e-01, -1.004e-01, 4.945e-02, -1.663e-01) * s[2][1][0];
	r1 += M4(-2.615e-02, 1.165e-01, -2.925e-01, 2.251e-01, -1.899e-01, -1.810e-01, 1.358e-01, 1.568e-01, 1.125e-01, 1.611e-02, -6.412e-02, 3.978e-01, 6.345e-02, 1.928e-01, -6.626e-02, 6.902e-02) * s[2][1][0];
	r0 += M4(3.618e-01, -9.396e-02, 3.348e-01, 1.252e-01, -4.970e-02, 9.862e-02, -8.473e-02, -3.769e-02, 5.856e-02, -7.279e-02, 4.624e-01, -1.421e-01, 5.616e-03, 6.636e-02, 5.113e-02, -3.631e-02) * s[2][1][1];
	r1 += M4(-6.214e-02, 1.636e-01, -4.848e-02, 2.031e-01, 1.991e-03, 1.140e-01, -1.668e-01, -1.563e-01, 1.247e-01, -8.331e-02, 2.155e-01, 1.159e-01, 5.139e-02, 1.486e-01, -1.452e-01, 8.876e-03) * s[2][1][1];
	r0 += M4(-6.137e-02, 5.125e-02, -1.264e-01, -6.208e-02, -4.147e-02, -2.534e-01, -5.970e-01, -8.561e-02, -1.170e-01, -4.413e-02, -1.694e-01, -3.555e-01, 5.393e-02, 1.191e-02, 1.398e-01, -1.079e-01) * s[2][2][0];
	r1 += M4(-5.268e-02, -1.410e-01, -2.068e-01, 1.891e-01, 2.320e-02, -1.133e-01, 6.895e-02, 3.776e-01, -5.859e-02, 2.996e-03, -7.673e-03, -8.826e-02, -2.352e-02, -6.428e-02, 7.535e-02, 6.383e-02) * s[2][2][0];
	r0 += M4(-6.231e-02, -1.035e-03, 1.473e-02, -1.334e-01, 6.073e-03, 2.124e-01, 5.449e-01, -1.850e-01, 7.627e-02, -9.993e-02, 6.771e-03, 3.183e-02, 5.781e-03, -1.664e-01, 7.715e-02, -4.252e-02) * s[2][2][1];
	r1 += M4(-3.117e-02, 5.042e-03, -1.891e-01, 9.700e-03, 6.200e-02, 1.625e-01, 4.391e-02, -3.472e-01, 2.057e-02, 1.265e-01, -1.108e-01, 5.749e-02, 9.003e-02, -1.519e-01, -3.800e-02, 1.279e-01) * s[2][2][1];
	r0 += V4(-7.222e-03, 2.332e-01, -2.850e-02, 5.069e-02);
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(1.367e-01, -4.870e-02, 3.605e-03, -9.551e-02);
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-4x8C-RCAS-DS-conv2
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv1
//!BIND LUMA
//!SAVE conv2
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 g[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv1_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			g[0][ay][ax] = l0(x - 1, y - 1);
			g[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s[3][3][2];
	V4 r0 = V4(0.0);
	V4 r1 = V4(0.0);
	s[0][0][0] = max(g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[0][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[0][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[0][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[0][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[0][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[0][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(4.846e-02, -4.677e-03, 4.034e-02, 2.794e-02, -1.290e-02, 1.260e-01, -5.363e-02, -9.666e-03, -1.709e-02, 1.111e-01, 9.062e-02, 1.928e-01, 2.401e-02, -1.201e-01, 1.821e-01, -5.375e-02) * s[0][0][0];
	r1 += M4(3.753e-02, -3.802e-02, 2.372e-02, -6.328e-02, 2.593e-02, 4.626e-02, -1.508e-01, -1.136e-01, -5.867e-02, 1.411e-01, -3.573e-01, -8.662e-02, 6.109e-02, 2.268e-03, 1.090e-01, 1.292e-01) * s[0][0][0];
	r0 += M4(-4.300e-02, 2.707e-02, 3.817e-02, 3.922e-02, -4.857e-02, -8.222e-02, 1.470e-01, 2.199e-02, 3.483e-03, 2.457e-01, -3.342e-02, 1.372e-01, -3.151e-03, -5.774e-02, 1.597e-01, 4.277e-02) * s[0][0][1];
	r1 += M4(-1.484e-02, 1.475e-02, -1.143e-01, -1.413e-01, -1.384e-01, 8.352e-02, -4.713e-02, -7.786e-02, -1.082e-01, 2.705e-02, -1.052e-01, -1.621e-01, 4.978e-02, -9.051e-04, 7.844e-02, 8.300e-02) * s[0][0][1];
	r0 += M4(1.205e-01, 1.272e-01, -8.894e-02, -6.456e-02, -1.783e-01, -1.072e-01, 2.189e-01, 2.793e-02, -5.384e-02, 2.590e-02, 4.804e-02, -1.817e-01, 6.683e-02, -9.279e-02, 1.520e-01, -1.678e-01) * s[0][1][0];
	r1 += M4(-2.131e-02, 5.167e-02, -1.913e-01, -2.600e-01, 1.032e-01, -5.481e-02, 1.896e-01, 2.392e-01, -3.175e-02, -1.080e-01, -1.601e-01, -1.746e-01, -7.042e-02, 1.031e-01, 8.609e-02, -4.730e-02) * s[0][1][0];
	r0 += M4(3.178e-02, 1.048e-01, -2.033e-01, 5.846e-02, -3.067e-01, 3.267e-03, 2.201e-01, -4.797e-02, 1.086e-01, 1.623e-01, 1.394e-01, -2.353e-01, 1.197e-01, -2.381e-01, 8.656e-02, -1.392e-01) * s[0][1][1];
	r1 += M4(-1.367e-01, 6.872e-02, -3.974e-01, -1.964e-01, -3.430e-02, 2.074e-02, 1.716e-01, 2.979e-01, 4.747e-02, -1.783e-01, -9.055e-02, -2.984e-01, -1.587e-01, 5.647e-02, 1.670e-01, 3.123e-02) * s[0][1][1];
	r0 += M4(5.859e-02, -1.843e-02, -5.785e-03, -1.565e-01, 1.110e-01, -1.700e-02, 1.319e-01, 1.012e-01, -1.006e-01, -5.538e-03, -3.664e-02, 1.297e-01, -2.737e-02, 1.746e-03, 1.635e-01, -1.603e-01) * s[0][2][0];
	r1 += M4(-3.800e-02, -4.933e-02, 7.496e-02, 1.810e-02, 2.821e-02, 3.038e-02, 3.894e-02, 1.748e-02, -1.703e-01, -7.769e-03, -7.547e-02, 1.502e-01, -9.942e-03, -4.512e-02, -6.047e-02, 1.086e-01) * s[0][2][0];
	r0 += M4(1.354e-01, -6.371e-02, 9.247e-02, -2.958e-01, 1.285e-01, -7.342e-02, 2.294e-01, 9.239e-02, 7.174e-02, 1.727e-02, -4.286e-02, 2.691e-02, -6.203e-02, -7.533e-02, 6.460e-02, -1.191e-01) * s[0][2][1];
	r1 += M4(1.464e-01, 5.568e-02, -6.387e-02, 2.932e-02, 9.019e-02, -7.925e-02, -3.418e-03, -7.007e-02, 1.537e-02, 8.533e-02, -6.372e-02, 5.231e-02, 6.089e-03, 9.012e-03, -3.005e-02, 1.353e-01) * s[0][2][1];
	r0 += M4(1.765e-01, 6.304e-02, -5.073e-02, -2.292e-02, -6.552e-02, 7.570e-02, 1.027e-01, -8.716e-02, 2.536e-01, 2.994e-02, -1.127e-01, -2.706e-02, 9.067e-02, -4.695e-02, 3.344e-02, -1.638e-01) * s[1][0][0];
	r1 += M4(-8.340e-02, 4.820e-02, 2.855e-02, -1.762e-01, -3.805e-02, -1.045e-01, 4.385e-02, 1.079e-02, -1.924e-01, 1.132e-01, -3.095e-02, -1.150e-01, -4.148e-02, 2.177e-02, -2.400e-02, -4.569e-02) * s[1][0][0];
	r0 += M4(3.462e-02, 5.235e-02, 3.628e-02, -6.809e-02, 7.119e-03, 2.004e-01, 1.686e-01, -1.010e-01, -1.838e-01, 2.753e-01, 5.264e-02, -8.260e-02, 1.681e-01, 4.609e-02, 6.871e-03, -5.978e-02) * s[1][0][1];
	r1 += M4(-9.545e-02, 3.805e-02, -1.159e-01, -9.942e-02, -4.680e-02, 4.323e-02, 1.030e-01, 1.280e-01, -2.404e-02, -1.726e-01, 3.208e-02, -3.576e-02, 2.271e-02, 1.980e-02, -9.792e-02, -7.278e-02) * s[1][0][1];
	r0 += M4(-1.966e-01, -5.109e-01, -2.244e-02, 2.001e-01, 1.188e-01, 7.570e-02, -8.935e-02, 2.316e-01, -4.470e-02, -5.155e-01, -3.215e-01, 3.995e-01, 1.370e-01, 1.935e-01, 3.438e-01, -9.080e-02) * s[1][1][0];
	r1 += M4(3.311e-01, -3.308e-01, 2.325e-01, -2.099e-01, -9.961e-02, -9.364e-02, -1.812e-01, -1.680e-01, 5.215e-01, 2.284e-01, 8.803e-02, 9.687e-02, 1.997e-02, 1.093e-01, -2.156e-01, -3.453e-02) * s[1][1][0];
	r0 += M4(-3.860e-01, -1.918e-01, 1.975e-01, 3.096e-01, 5.984e-02, 2.155e-02, 2.694e-02, 3.050e-01, -9.701e-03, 1.442e-02, 1.930e-01, 1.308e-01, 8.283e-02, 1.420e-01, 1.269e-01, -2.046e-01) * s[1][1][1];
	r1 += M4(2.093e-01, -6.877e-01, 4.463e-01, 1.827e-01, 2.878e-02, 1.404e-03, -1.587e-01, -1.463e-01, 3.003e-01, -2.263e-01, 1.345e-01, 2.017e-01, -4.160e-02, 2.036e-01, -1.086e-01, -7.318e-02) * s[1][1][1];
	r0 += M4(1.247e-01, 3.168e-01, -1.816e-01, -1.341e-02, -5.880e-02, -1.116e-01, 5.364e-02, -3.486e-02, 2.158e-01, 3.013e-01, -1.569e-01, -1.575e-01, 9.620e-02, -1.882e-02, 1.260e-01, 2.853e-01) * s[1][2][0];
	r1 += M4(-3.333e-03, 2.458e-01, 2.499e-02, -4.716e-01, -6.210e-02, 6.848e-03, 4.999e-02, 1.417e-02, -8.504e-02, 1.349e-01, 9.497e-02, -4.082e-02, 2.829e-02, 2.517e-01, 1.351e-02, 7.162e-02) * s[1][2][0];
	r0 += M4(4.976e-01, 4.096e-02, 4.016e-02, -7.937e-02, -2.310e-03, -1.255e-01, 2.462e-01, -5.435e-02, 1.536e-01, 1.440e-01, -1.883e-01, -9.159e-02, -6.072e-02, -2.435e-03, 1.265e-01, 1.598e-01) * s[1][2][1];
	r1 += M4(-2.852e-02, -1.168e-01, 1.970e-01, -9.569e-02, -1.299e-01, -5.592e-02, -2.285e-02, 1.404e-02, -7.850e-03, 9.792e-02, 6.166e-02, -3.049e-03, 2.513e-02, 1.805e-01, 5.062e-04, 8.191e-02) * s[1][2][1];
	r0 += M4(8.967e-02, -1.911e-02, 7.598e-02, 3.185e-02, -8.326e-02, -7.279e-04, 2.257e-01, -5.216e-02, 1.743e-01, 1.484e-02, -1.906e-01, 7.390e-02, 9.056e-02, -2.218e-03, -6.720e-03, 3.437e-02) * s[2][0][0];
	r1 += M4(-5.444e-02, -2.836e-04, 4.352e-02, -1.190e-01, 3.199e-02, 1.916e-02, -1.305e-02, -1.062e-01, -1.284e-01, 6.992e-02, 4.368e-02, -1.609e-02, 2.557e-02, 2.020e-02, 3.630e-02, 3.506e-02) * s[2][0][0];
	r0 += M4(-3.630e-02, 1.292e-01, -2.608e-02, -1.466e-02, -2.244e-01, -6.010e-02, 3.378e-01, -1.373e-01, -4.354e-02, 3.788e-02, -1.167e-01, -1.013e-02, 3.723e-05, -2.222e-02, 3.199e-02, -5.688e-03) * s[2][0][1];
	r1 += M4(4.759e-02, 3.852e-02, -1.042e-01, -6.351e-02, 9.164e-02, -5.863e-02, -7.621e-02, -1.410e-01, 6.236e-02, 6.185e-02, -6.306e-03, -4.519e-02, 4.672e-02, -8.943e-02, 9.448e-02, -1.845e-02) * s[2][0][1];
	r0 += M4(4.366e-02, 5.137e-02, -1.507e-01, -2.320e-02, -1.759e-02, -6.004e-03, 6.026e-02, 6.661e-02, 1.587e-01, 1.788e-01, -1.036e-01, -3.239e-02, 3.657e-02, -5.532e-02, -1.189e-01, 1.608e-01) * s[2][1][0];
	r1 += M4(-2.665e-01, 1.508e-01, -5.534e-02, -4.889e-01, -6.187e-02, -1.977e-01, -1.483e-03, -9.155e-02, 4.100e-02, 2.158e-01, -7.593e-02, -2.200e-01, 7.148e-03, 1.253e-01, 1.176e-01, 1.852e-01) * s[2][1][0];
	r0 += M4(1.003e-01, -9.058e-02, 1.076e-01, -2.232e-01, -2.117e-01, -5.529e-02, 1.617e-01, 1.393e-01, -1.217e-01, -8.423e-02, 1.194e-01, -5.800e-02, 5.302e-02, -1.108e-02, -1.028e-01, 1.029e-01) * s[2][1][1];
	r1 += M4(-3.663e-01, 1.694e-01, 3.615e-02, -1.588e-01, 3.388e-02, -3.984e-01, 7.212e-02, -9.453e-02, -8.553e-02, -6.102e-02, -1.036e-02, 5.473e-02, 1.590e-01, 1.534e-01, -4.211e-03, 2.764e-01) * s[2][1][1];
	r0 += M4(-1.042e-01, 4.196e-02, -1.029e-01, 9.135e-02, -2.388e-02, 2.414e-02, 8.436e-02, -6.873e-02, -2.298e-03, 6.224e-02, -2.271e-02, 6.099e-02, -1.076e-02, 4.214e-02, -3.449e-02, -4.954e-02) * s[2][2][0];
	r1 += M4(5.873e-02, 5.254e-02, -4.037e-03, -3.357e-01, 8.170e-03, -6.164e-03, -4.124e-02, -4.456e-02, 4.713e-02, -2.483e-03, 1.966e-02, -4.065e-02, 9.596e-02, 1.899e-01, -1.436e-02, 7.458e-02) * s[2][2][0];
	r0 += M4(1.473e-01, -7.800e-02, -4.661e-02, -1.920e-02, 3.879e-02, 3.811e-02, 9.065e-02, -1.443e-01, 3.860e-02, -6.565e-02, -2.494e-02, 7.814e-02, -1.290e-02, 9.705e-02, 2.948e-02, -1.313e-01) * s[2][2][1];
	r1 += M4(-1.548e-01, -1.185e-01, -4.102e-02, 2.760e-02, 1.520e-01, 4.748e-03, -6.102e-02, -1.991e-02, -5.847e-02, -6.497e-02, -2.234e-02, -3.385e-03, 5.268e-02, 1.005e-01, -2.296e-02, -5.633e-02) * s[2][2][1];
	s[0][0][0] = max(g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[1][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[1][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[1][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[1][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[1][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[1][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(-8.167e-02, 3.228e-02, 6.130e-02, -5.947e-02, 5.848e-02, -3.801e-02, -1.876e-02, 4.920e-02, -3.240e-02, -5.910e-02, 2.579e-02, -1.805e-02, 4.161e-02, -6.672e-02, -1.694e-02, -2.220e-02) * s[0][0][0];
	r1 += M4(2.912e-02, -3.516e-02, 1.189e-01, 6.862e-02, -2.768e-02, 2.428e-02, -1.303e-02, -7.938e-02, 5.978e-02, -7.680e-03, 1.602e-01, -1.382e-01, 1.542e-01, -3.859e-02, 2.666e-01, 2.595e-02) * s[0][0][0];
	r0 += M4(2.693e-01, -7.811e-01, 2.535e-01, 2.090e-01, 1.898e-01, 1.121e-01, -4.897e-02, -1.575e-02, 5.882e-02, 4.046e-02, -3.993e-02, 9.009e-02, -2.248e-02, -8.138e-02, 7.102e-02, -5.206e-02) * s[0][0][1];
	r1 += M4(-2.115e-01, 2.226e-01, -2.785e-01, 1.413e-01, 1.548e-01, 3.160e-02, -1.539e-01, -5.540e-02, 2.194e-02, -6.751e-02, 9.683e-02, -1.045e-01, 1.218e-01, -1.058e-01, 9.850e-02, -2.366e-03) * s[0][0][1];
	r0 += M4(6.398e-02, 7.940e-02, 6.727e-02, 7.108e-02, -8.777e-02, 4.098e-02, 2.863e-02, -3.201e-02, 3.574e-02, 1.074e-01, -4.212e-02, 2.820e-02, 4.986e-02, 1.320e-02, -2.124e-01, -9.380e-02) * s[0][1][0];
	r1 += M4(-1.862e-01, -2.989e-02, -2.540e-01, -8.763e-02, 1.644e-02, 2.593e-02, 7.144e-02, -3.489e-02, -2.486e-02, 1.363e-01, 1.287e-01, -1.989e-01, -6.423e-02, 1.911e-01, -1.682e-01, -1.146e-01) * s[0][1][0];
	r0 += M4(1.126e-01, -1.496e+00, 5.271e-01, -1.101e-02, 2.977e-02, -2.038e-01, 2.464e-02, -1.604e-01, 2.601e-02, -8.230e-02, -1.306e-01, -1.889e-01, -2.104e-02, 6.613e-02, -2.531e-01, -2.588e-02) * s[0][1][1];
	r1 += M4(-4.483e-01, 1.479e-02, -9.223e-02, -1.398e-01, -7.506e-02, 2.228e-02, -2.463e-02, 5.413e-02, -2.271e-01, 9.198e-02, -8.478e-02, -3.043e-01, -1.420e-01, 1.754e-01, -3.427e-01, -2.620e-01) * s[0][1][1];
	r0 += M4(-1.515e-02, 1.939e-02, 9.611e-02, 2.151e-02, -4.112e-03, -2.429e-02, 2.438e-02, -4.910e-02, -1.607e-02, 6.202e-02, 2.541e-02, 1.517e-01, -7.235e-02, 4.673e-03, 1.322e-01, -8.271e-02) * s[0][2][0];
	r1 += M4(9.870e-02, 2.192e-02, 8.765e-02, -3.292e-02, -1.362e-01, -2.597e-02, -9.407e-03, -1.536e-01, -1.112e-02, 6.461e-02, -4.154e-02, -7.730e-02, 3.563e-02, 3.704e-02, 2.446e-02, 1.942e-02) * s[0][2][0];
	r0 += M4(-1.467e-01, -1.804e-01, 5.952e-01, 1.861e-01, 4.684e-02, 8.796e-02, -1.134e-02, -9.247e-02, -4.767e-02, 1.037e-01, -4.867e-02, -1.704e-01, -4.980e-02, 1.409e-01, -3.210e-02, -2.167e-02) * s[0][2][1];
	r1 += M4(-2.060e-01, -3.114e-01, -1.741e-02, -3.625e-01, 3.778e-03, -1.610e-02, 6.852e-02, -8.117e-02, -1.073e-01, -2.059e-02, 4.429e-02, -7.729e-02, -1.110e-03, -6.997e-03, 4.820e-02, -1.076e-01) * s[0][2][1];
	r0 += M4(1.663e-02, -3.231e-02, -7.347e-02, 7.512e-02, 3.746e-02, 6.895e-02, -2.574e-02, 1.445e-01, -9.028e-02, 1.880e-01, 5.498e-02, -1.661e-03, 1.711e-01, -1.004e-01, 5.951e-02, -2.940e-05) * s[1][0][0];
	r1 += M4(1.327e-02, -4.388e-02, 3.124e-02, -1.025e-01, -3.894e-02, 1.671e-03, -2.507e-01, -1.876e-01, -3.591e-01, 1.712e-02, -3.380e-01, 8.501e-02, -9.133e-02, 1.929e-01, -2.386e-01, -1.916e-02) * s[1][0][0];
	r0 += M4(5.850e-01, -9.223e-01, 1.110e-01, -1.265e-02, 8.041e-02, -7.979e-02, -2.257e-02, -2.471e-02, 1.532e-02, -9.291e-02, 3.788e-02, -7.318e-02, 1.588e-01, -7.940e-02, 8.244e-02, -7.084e-02) * s[1][0][1];
	r1 += M4(4.849e-01, -4.009e-02, 3.036e-01, -1.338e-01, 3.369e-02, -1.293e-02, -4.387e-01, -2.537e-01, -1.436e-01, 1.044e-01, 1.422e-01, -1.223e-01, -1.812e-01, 1.704e-01, -4.089e-01, -1.098e-01) * s[1][0][1];
	r0 += M4(-5.615e-02, -6.313e-02, 6.937e-02, 7.740e-03, -2.196e-01, 1.130e-01, -5.665e-02, -2.023e-01, 1.938e-01, 2.197e-01, -2.147e-02, -1.048e-01, -7.413e-02, -7.441e-02, -1.050e-01, 1.696e-01) * s[1][1][0];
	r1 += M4(1.557e-01, -2.958e-02, 1.487e-01, 2.410e-01, -3.001e-02, -7.891e-04, 5.763e-02, -1.341e-01, 7.727e-02, -5.722e-01, -2.825e-01, -6.291e-02, 1.747e-01, -2.215e-01, 1.303e-01, 4.739e-02) * s[1][1][0];
	r0 += M4(-9.173e-01, -1.858e+00, -6.056e-01, 2.511e-01, -3.140e-01, -7.837e-02, -6.931e-02, 2.066e-01, 3.809e-02, 3.397e-01, -2.301e-02, -4.153e-01, -3.594e-01, -1.995e-01, -4.544e-01, 2.143e-01) * s[1][1][1];
	r1 += M4(1.366e+00, 8.999e-01, 3.719e-01, 3.626e-01, 1.793e-01, 1.683e-01, 1.759e-01, -2.165e-01, 5.287e-03, -8.320e-02, -3.229e-01, -1.855e-01, 2.280e-01, -4.415e-03, 2.545e-01, 1.103e-01) * s[1][1][1];
	r0 += M4(1.152e-01, -6.609e-02, 1.401e-02, 2.285e-02, -8.221e-02, -3.231e-03, -2.007e-02, 1.203e-01, -6.083e-03, 9.722e-02, -4.122e-03, 3.775e-01, -9.929e-03, -1.026e-01, -4.321e-02, -1.613e-01) * s[1][2][0];
	r1 += M4(9.527e-02, -5.027e-02, -7.202e-02, -1.113e-01, 1.422e-02, -3.057e-01, -4.453e-02, 8.255e-03, 6.811e-02, -9.005e-02, -2.616e-02, -1.220e-01, -7.216e-03, -2.362e-01, -9.639e-02, 7.154e-02) * s[1][2][0];
	r0 += M4(-4.302e-01, -4.441e-01, -8.464e-02, -4.854e-01, -1.894e-01, 6.210e-02, 8.610e-03, -7.287e-02, -8.844e-02, 4.773e-02, -1.093e-01, 1.045e-01, -8.650e-02, -2.785e-02, 1.403e-01, -1.624e-01) * s[1][2][1];
	r1 += M4(8.870e-02, -7.634e-01, -1.268e-01, -2.361e-01, 5.898e-02, -4.579e-01, -1.824e-01, -2.758e-02, 4.171e-02, -3.951e-02, 4.431e-04, -2.827e-01, 1.973e-02, -5.447e-02, -2.903e-02, 3.886e-02) * s[1][2][1];
	r0 += M4(-8.472e-02, -1.739e-02, -1.337e-01, 1.554e-02, 9.103e-02, 1.151e-01, 2.223e-01, -1.846e-01, -1.601e-01, 8.468e-02, 5.617e-02, -2.399e-02, -2.390e-02, 1.224e-01, 8.039e-02, -2.124e-02) * s[2][0][0];
	r1 += M4(4.262e-02, 1.603e-01, -3.547e-02, 5.353e-02, -6.383e-02, 6.465e-03, 1.091e-01, -1.392e-01, 3.837e-02, -4.349e-02, -1.834e-01, -1.398e-01, -4.039e-02, -2.492e-02, 3.786e-02, 7.951e-02) * s[2][0][0];
	r0 += M4(-4.768e-03, -3.700e-01, 1.205e-01, 1.149e-01, 6.958e-02, 1.242e-01, 8.645e-02, -3.775e-02, -8.999e-02, -7.142e-02, 1.401e-01, 2.790e-02, 2.418e-01, 2.419e-01, 4.415e-02, -1.667e-01) * s[2][0][1];
	r1 += M4(-1.534e-01, -1.638e-02, -1.944e-01, -9.191e-02, -1.273e-01, -8.105e-03, -5.921e-02, -7.687e-02, -5.912e-02, -1.952e-02, -7.190e-02, -4.247e-01, -1.156e-01, 3.904e-02, -4.468e-02, -5.738e-02) * s[2][0][1];
	r0 += M4(9.338e-02, 1.160e-01, -1.402e-02, 1.086e-01, 1.765e-01, 4.462e-03, -1.323e-01, 4.323e-03, 5.721e-02, 1.090e-01, 8.377e-02, -5.961e-02, 7.884e-02, -1.373e-01, -3.684e-02, 6.544e-02) * s[2][1][0];
	r1 += M4(-1.369e-01, 9.719e-02, -4.668e-02, 5.691e-02, -3.581e-01, -3.051e-02, 2.108e-01, -4.977e-03, -2.606e-01, 7.941e-02, -4.048e-02, -1.913e-01, -3.736e-02, 5.511e-02, 1.437e-02, 6.138e-02) * s[2][1][0];
	r0 += M4(1.547e-01, 1.540e-01, 3.087e-01, 2.652e-01, -4.394e-02, -8.101e-02, -2.146e-02, 2.889e-01, 3.188e-02, -5.401e-02, 2.156e-02, -1.260e-02, 1.161e-01, 6.924e-02, -3.038e-01, 2.276e-02) * s[2][1][1];
	r1 += M4(-7.407e-02, -8.368e-02, -3.316e-01, 7.747e-02, -1.551e-01, 1.106e-01, 1.658e-01, 5.925e-02, 1.604e-01, -4.633e-02, 3.523e-02, 6.234e-03, 5.284e-02, 1.521e-01, 3.948e-03, 2.268e-02) * s[2][1][1];
	r0 += M4(-2.424e-02, -1.187e-01, 1.477e-03, -8.136e-02, 2.459e-02, 8.893e-02, 1.236e-02, 6.408e-02, 1.247e-03, -8.397e-02, 2.931e-03, 1.712e-01, -5.531e-03, 3.354e-02, 3.596e-02, 3.728e-02) * s[2][2][0];
	r1 += M4(-1.806e-01, -9.832e-02, 4.037e-03, 1.204e-02, -1.635e-01, 2.124e-01, 1.636e-01, 1.497e-01, -1.414e-03, 7.899e-02, -1.044e-02, 6.256e-02, 1.033e-01, 1.194e-01, -1.380e-02, 3.431e-02) * s[2][2][0];
	r0 += M4(1.900e-01, 5.508e-03, 2.013e-01, -7.682e-02, 9.000e-02, -1.331e-01, -1.130e-02, 1.149e-01, -8.744e-03, -2.065e-01, 7.421e-02, 1.716e-02, 1.625e-02, 7.172e-03, -6.189e-02, 1.029e-01) * s[2][2][1];
	r1 += M4(-9.423e-02, 2.512e-02, 7.425e-02, 4.363e-02, -5.498e-02, 2.180e-01, -4.307e-02, 1.703e-01, -4.210e-02, -9.377e-02, 3.213e-02, 2.644e-02, 1.068e-01, 1.373e-01, 4.818e-02, 1.114e-01) * s[2][2][1];
	r0 += V4(5.969e-02, -3.661e-02, 1.539e-01, -8.126e-02);
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(3.108e-02, 1.035e-01, 2.165e-02, 7.349e-02);
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-4x8C-RCAS-DS-conv3
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv2
//!BIND LUMA
//!SAVE conv3
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(texelFetch(conv2_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv2_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 g[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv2_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			g[0][ay][ax] = l0(x - 1, y - 1);
			g[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s[3][3][2];
	V4 r0 = V4(0.0);
	V4 r1 = V4(0.0);
	s[0][0][0] = max(g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[0][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[0][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[0][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[0][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[0][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[0][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(1.871e-02, -1.072e-01, 3.639e-02, 1.258e-02, -4.403e-03, 1.025e-02, 7.946e-02, -2.818e-02, -1.461e-01, 6.637e-02, 7.661e-02, 3.862e-03, -5.761e-02, -6.912e-02, 3.395e-02, 8.761e-02) * s[0][0][0];
	r1 += M4(9.874e-02, 1.694e-04, -9.879e-03, 1.016e-02, -2.578e-02, -1.610e-01, -9.987e-02, -1.169e-02, -4.848e-02, 4.215e-04, 9.906e-03, 1.791e-01, -1.284e-01, -8.313e-02, -4.821e-02, 6.742e-02) * s[0][0][0];
	r0 += M4(-9.610e-02, -7.157e-02, 6.049e-02, -9.361e-02, -7.631e-03, 3.391e-02, 2.191e-02, 1.156e-02, -1.242e-01, -8.834e-02, 4.610e-02, -6.095e-02, 2.798e-01, -1.513e-01, 1.142e-02, 3.445e-01) * s[0][0][1];
	r1 += M4(1.947e-01, -4.353e-02, 2.084e-02, -9.004e-03, -2.807e-02, -9.242e-04, -9.271e-02, 2.828e-02, -1.202e-01, 3.027e-02, -4.585e-02, 3.158e-01, -2.633e-01, 1.472e-02, -8.543e-02, -1.708e-02) * s[0][0][1];
	r0 += M4(-2.174e-01, -2.254e-03, 2.141e-01, 5.198e-02, -4.820e-01, 1.522e-01, 6.782e-03, -1.562e-01, -1.230e-01, -6.844e-02, -3.254e-02, -4.170e-02, -7.332e-02, -1.519e-01, 4.471e-02, 3.497e-02) * s[0][1][0];
	r1 += M4(-1.191e-01, 1.365e-01, -8.801e-03, 2.109e-01, 9.251e-02, 3.743e-02, 1.483e-02, 1.880e-01, 2.912e-02, -1.289e-01, -6.277e-02, -9.321e-02, -6.517e-02, -1.272e-01, -7.545e-02, -1.055e-01) * s[0][1][0];
	r0 += M4(-8.096e-02, 3.011e-01, 1.934e-01, -2.158e-01, -1.104e-01, -5.885e-02, -5.410e-02, -3.069e-02, -2.313e-01, -1.112e-01, 2.492e-02, 5.032e-02, 2.750e-01, -3.918e-01, 3.020e-01, 3.472e-01) * s[0][1][1];
	r1 += M4(-4.675e-02, -2.352e-02, 8.845e-02, 1.885e-01, 5.465e-02, -9.323e-02, -7.596e-02, 8.448e-02, 6.318e-02, -1.372e-01, 3.289e-02, 3.146e-01, -4.552e-02, 1.826e-02, -2.731e-02, -5.587e-02) * s[0][1][1];
	r0 += M4(-1.741e-01, 1.366e-01, 6.926e-02, -1.229e-03, 9.931e-02, 1.222e-02, -6.113e-02, -1.195e-01, 7.047e-03, 1.096e-01, -2.330e-02, -9.797e-02, -2.150e-02, 2.731e-02, 7.144e-02, -4.816e-02) * s[0][2][0];
	r1 += M4(2.623e-02, 2.966e-02, -1.100e-02, 5.690e-03, 7.970e-02, 4.212e-02, 1.002e-02, -2.210e-02, 9.890e-03, 6.838e-03, 1.050e-01, 1.499e-01, 4.896e-02, 2.068e-02, -1.225e-02, 5.378e-02) * s[0][2][0];
	r0 += M4(-4.637e-02, 3.426e-02, 9.246e-02, -3.111e-02, 6.526e-02, -7.530e-02, -8.307e-02, -2.604e-02, -1.286e-01, 4.571e-02, 2.733e-02, -3.170e-02, -2.305e-02, 1.256e-01, 7.191e-02, -2.823e-02) * s[0][2][1];
	r1 += M4(9.329e-02, 1.079e-01, -1.120e-01, 3.115e-02, 1.312e-02, 1.483e-02, 2.599e-02, -9.481e-02, 9.016e-02, 2.645e-03, 1.097e-01, 1.604e-01, 1.006e-01, -4.050e-02, 1.997e-02, 7.386e-02) * s[0][2][1];
	r0 += M4(2.256e-03, -1.183e-01, -2.962e-03, 1.592e-01, 5.470e-03, 9.157e-02, 1.172e-01, -1.134e-01, 1.346e-01, -5.646e-02, 1.274e-01, 7.135e-02, -6.113e-02, 6.282e-02, -3.142e-02, -1.609e-01) * s[1][0][0];
	r1 += M4(-1.323e-02, 5.080e-03, -8.987e-02, -3.414e-02, -1.679e-02, -6.575e-02, 8.501e-02, 4.742e-02, -1.194e-01, -3.325e-02, -4.500e-02, -4.000e-04, -1.491e-02, 1.527e-01, 7.587e-02, -3.939e-02) * s[1][0][0];
	r0 += M4(-2.849e-02, -8.859e-02, 2.322e-01, 1.522e-02, 1.114e-01, -1.566e-01, 7.722e-03, 7.000e-02, 1.819e-02, 1.564e-01, 1.458e-01, 4.451e-02, 5.627e-01, 6.828e-02, 3.267e-01, -1.314e-01) * s[1][0][1];
	r1 += M4(-1.379e-01, -1.186e-01, -2.036e-01, -6.520e-02, -8.770e-02, 4.497e-02, 9.235e-02, 3.258e-02, -4.820e-02, 9.194e-02, 1.419e-02, 1.810e-01, -1.353e-01, 4.951e-01, -2.208e-01, -5.670e-02) * s[1][0][1];
	r0 += M4(-1.180e-01, -4.831e-02, 2.930e-01, 2.854e-01, 2.007e-01, 6.597e-01, 1.312e-01, 3.324e-01, 1.557e-01, -1.088e-01, -1.432e-01, 1.934e-01, -2.976e-01, -1.442e-01, 1.419e-01, -1.603e-01) * s[1][1][0];
	r1 += M4(-3.369e-01, 1.006e-02, 2.228e-01, -5.639e-02, -1.426e-01, -3.552e-02, 8.872e-01, 1.070e-01, -7.766e-04, 2.183e-01, -5.557e-02, -1.237e-01, 6.886e-02, -6.858e-02, -1.033e-01, -4.774e-02) * s[1][1][0];
	r0 += M4(1.306e-01, -5.540e-02, 2.486e-02, 8.995e-02, 1.414e-02, 9.140e-02, 1.240e-01, 4.326e-01, 2.415e-01, 4.305e-01, -4.785e-02, 8.526e-02, 1.518e-01, 1.209e-01, 3.345e-01, -2.485e-01) * s[1][1][1];
	r1 += M4(-5.520e-03, -6.974e-02, -2.104e-02, -6.576e-02, -9.982e-02, 7.699e-02, 2.940e-01, -4.896e-02, -5.154e-02, 2.712e-01, -5.898e-02, 4.490e-01, 2.885e-01, 9.973e-03, -2.324e-01, -2.248e-02) * s[1][1][1];
	r0 += M4(-1.706e-02, 2.057e-01, -2.588e-01, -2.786e-02, 4.341e-02, 5.840e-02, -1.470e-01, 5.809e-02, -1.428e-02, 1.922e-02, -3.489e-02, 1.323e-01, 6.142e-02, -3.036e-02, 2.090e-02, 2.497e-02) * s[1][2][0];
	r1 += M4(1.940e-01, 1.795e-01, -1.831e-01, 1.072e-02, -8.720e-02, -1.297e-02, 1.411e-01, -8.664e-03, 5.603e-02, -2.801e-02, 1.012e-02, 7.780e-02, -8.751e-02, 3.310e-03, 4.473e-03, 1.138e-02) * s[1][2][0];
	r0 += M4(8.528e-02, -7.643e-02, 2.771e-02, 1.397e-02, 5.997e-02, -7.672e-02, -1.909e-01, 1.191e-01, 3.754e-03, 2.792e-02, -1.051e-01, 2.355e-01, 5.446e-02, 8.126e-02, -1.343e-01, 5.441e-03) * s[1][2][1];
	r1 += M4(7.756e-02, -9.593e-02, -2.973e-02, -1.552e-02, 5.960e-02, 1.034e-01, -3.972e-02, -2.622e-02, -9.718e-03, 2.935e-02, -8.724e-02, 2.235e-01, 1.082e-01, 7.440e-02, -1.886e-01, 4.749e-02) * s[1][2][1];
	r0 += M4(2.235e-02, 1.089e-02, -4.880e-02, -2.305e-02, 3.649e-03, 6.859e-02, 3.297e-02, -9.126e-02, -5.036e-02, 3.941e-02, 1.123e-02, -1.018e-01, -2.824e-02, -1.192e-01, -1.605e-02, 1.015e-01) * s[2][0][0];
	r1 += M4(-8.275e-02, 1.036e-01, 7.007e-02, -1.160e-03, 5.102e-03, -1.178e-01, -3.328e-03, -1.405e-02, 6.397e-03, -5.822e-02, 1.008e-01, 3.360e-02, -6.408e-02, -4.674e-02, -7.352e-03, 1.116e-02) * s[2][0][0];
	r0 += M4(-1.368e-02, -9.820e-02, -2.577e-02, 3.357e-02, -4.447e-02, 2.093e-02, 4.041e-03, -6.902e-02, -2.172e-01, 2.849e-01, 1.002e-01, -1.037e-01, -7.133e-02, 1.473e-03, 9.757e-02, -9.812e-02) * s[2][0][1];
	r1 += M4(-5.893e-03, 1.313e-01, 3.235e-02, -1.512e-03, -3.353e-02, -7.345e-05, 6.677e-03, -2.053e-02, 6.905e-02, -1.153e-01, -1.903e-02, 3.241e-02, -2.765e-02, -1.557e-01, 2.700e-01, 2.157e-02) * s[2][0][1];
	r0 += M4(6.068e-02, -7.712e-03, 1.012e-01, -9.668e-02, 8.276e-02, 1.815e-02, 6.735e-02, 6.232e-02, 7.308e-02, -1.468e-02, -9.470e-03, -1.791e-01, 8.199e-02, -9.183e-02, -4.387e-02, -1.244e-02) * s[2][1][0];
	r1 += M4(1.471e-01, -1.078e-02, -1.287e-02, 6.544e-03, -8.061e-02, 5.492e-02, 4.004e-02, 2.434e-02, 4.601e-02, 4.641e-02, -8.921e-02, 2.605e-02, 6.500e-02, 2.094e-01, -1.421e-01, -5.812e-02) * s[2][1][0];
	r0 += M4(-5.363e-02, 1.195e-01, 6.615e-02, 6.224e-03, 3.575e-02, 3.111e-02, 2.232e-02, -1.052e-01, -6.876e-02, 2.603e-01, -8.336e-03, 3.038e-01, 3.500e-01, -6.229e-03, 2.062e-01, -1.300e-01) * s[2][1][1];
	r1 += M4(-4.054e-03, -1.755e-01, 1.754e-02, 1.601e-02, -2.596e-02, 9.467e-02, -4.446e-03, 4.567e-03, -5.163e-02, -2.871e-01, 2.327e-01, 9.226e-02, 1.695e-01, 3.707e-01, -2.901e-01, -5.611e-02) * s[2][1][1];
	r0 += M4(3.622e-02, 6.361e-02, -5.247e-02, -7.893e-02, -5.262e-02, -5.232e-02, -2.775e-02, 3.697e-02, -4.400e-02, 1.935e-02, 6.806e-02, 9.601e-03, -2.105e-02, 1.410e-02, -3.092e-02, 7.054e-03) * s[2][2][0];
	r1 += M4(1.229e-01, 8.188e-02, 4.464e-02, 6.114e-02, 5.164e-02, 2.764e-02, 7.541e-02, -2.723e-02, 2.999e-02, -2.126e-02, 2.076e-02, 6.129e-02, -1.553e-02, -4.131e-02, 9.336e-02, 2.188e-02) * s[2][2][0];
	r0 += M4(2.568e-02, 4.788e-03, -9.706e-03, -2.432e-02, -4.067e-02, -1.132e-01, 6.371e-02, -4.942e-02, 8.694e-03, -9.900e-02, 6.646e-02, 1.159e-01, 3.931e-02, 2.157e-02, -6.457e-02, -1.350e-02) * s[2][2][1];
	r1 += M4(6.135e-02, -9.938e-03, 2.793e-02, 4.227e-02, 1.492e-01, 2.834e-02, 2.266e-02, -3.505e-02, 7.599e-02, 4.014e-01, -1.694e-01, 3.617e-02, 1.082e-01, -5.940e-03, 5.650e-02, 6.192e-02) * s[2][2][1];
	s[0][0][0] = max(g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[1][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[1][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[1][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[1][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[1][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[1][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(2.903e-02, -5.097e-02, -1.038e-01, -6.851e-03, -1.101e-01, 6.971e-02, 1.080e-01, -6.033e-04, 5.534e-02, -7.725e-03, 4.508e-02, 9.582e-03, -4.788e-02, -2.021e-02, -1.676e-01, -2.238e-02) * s[0][0][0];
	r1 += M4(1.907e-02, -9.160e-02, 4.263e-02, -4.316e-02, -3.275e-02, -1.870e-01, -1.057e-01, 7.638e-02, 4.538e-02, -8.949e-03, -1.145e-03, -1.014e-02, -5.221e-02, 5.806e-02, 6.181e-02, 5.061e-03) * s[0][0][0];
	r0 += M4(-6.269e-02, -7.520e-02, 1.015e-01, 5.381e-02, -1.374e-01, 1.019e-01, -8.477e-02, -1.553e-01, 3.727e-02, 3.982e-02, -1.668e-02, 6.137e-02, -2.460e-02, -7.126e-02, 1.589e-01, -1.062e-01) * s[0][0][1];
	r1 += M4(-4.093e-02, -2.339e-01, -5.052e-02, 6.427e-02, 2.531e-02, 2.207e-02, -5.816e-02, 1.545e-01, -4.857e-02, -4.911e-02, 1.898e-03, -2.784e-02, 3.843e-02, -9.642e-02, -5.213e-02, -3.681e-02) * s[0][0][1];
	r0 += M4(1.401e-01, 2.328e-01, -1.674e-01, -1.486e-01, 3.301e-02, -2.568e-02, -3.718e-02, -1.462e-01, 1.944e-01, 2.336e-02, -3.735e-02, -1.809e-01, -2.647e-01, 2.732e-02, 1.769e-01, 5.459e-02) * s[0][1][0];
	r1 += M4(1.614e-01, -3.249e-01, 1.417e-01, -1.280e-01, 7.569e-02, -1.217e-01, 3.282e-02, 2.144e-01, 1.146e-01, 1.173e-01, 1.160e-02, 4.782e-02, -1.641e-01, -1.372e-01, 1.274e-01, -6.810e-02) * s[0][1][0];
	r0 += M4(1.776e-01, 3.022e-02, -6.372e-02, 1.033e-01, 1.766e-01, 3.618e-02, 7.578e-04, -2.530e-01, -2.372e-01, -4.438e-02, 3.758e-02, 8.827e-02, 1.382e-01, 2.175e-01, -1.305e-01, -1.339e-01) * s[0][1][1];
	r1 += M4(1.087e-01, -7.795e-02, 8.885e-02, -9.486e-02, -3.315e-02, 2.426e-02, -6.712e-02, 3.002e-01, -4.964e-02, 8.688e-02, 7.543e-02, -1.372e-01, -5.992e-02, -1.509e-01, 8.960e-02, -1.044e-01) * s[0][1][1];
	r0 += M4(4.287e-02, 9.197e-02, -7.080e-03, -5.649e-02, 5.601e-02, -6.177e-02, -2.430e-02, -3.270e-02, 8.200e-03, 8.998e-02, -5.273e-02, -8.716e-02, 4.015e-02, -1.196e-01, 4.749e-02, 1.257e-01) * s[0][2][0];
	r1 += M4(1.595e-01, -2.354e-02, -1.767e-01, -9.167e-02, -4.085e-02, -4.580e-03, 5.846e-03, -3.885e-02, -2.473e-02, 4.418e-02, 4.377e-02, 2.968e-02, 1.624e-01, 1.680e-01, -1.372e-01, 1.077e-02) * s[0][2][0];
	r0 += M4(8.904e-02, -6.792e-03, -1.693e-03, -1.733e-02, 6.816e-02, 8.941e-02, -7.753e-02, -1.226e-01, -1.475e-01, 2.975e-02, 3.872e-02, 1.008e-01, -1.916e-01, -7.494e-02, 1.714e-01, 1.836e-02) * s[0][2][1];
	r1 += M4(-1.003e-02, 2.054e-02, 3.579e-02, -8.595e-02, -5.473e-02, 3.980e-02, -1.841e-02, 1.071e-03, -2.688e-02, 1.375e-03, 5.288e-02, 7.004e-02, -3.788e-02, -4.601e-02, 1.629e-02, -6.677e-02) * s[0][2][1];
	r0 += M4(1.617e-01, -2.382e-01, -6.119e-02, 1.965e-01, 1.664e-01, 1.715e-01, 6.551e-02, -1.715e-02, 1.483e-01, -3.284e-03, -4.489e-02, 1.806e-02, -2.121e-02, -3.627e-03, 9.535e-02, 1.303e-01) * s[1][0][0];
	r1 += M4(-1.286e-01, -1.213e-02, 2.416e-02, 1.067e-01, 1.467e-01, 3.017e-01, 3.284e-03, 4.685e-02, 2.135e-01, 2.953e-01, 4.141e-02, 3.962e-03, -1.676e-01, -5.847e-02, -1.374e-02, 4.286e-02) * s[1][0][0];
	r0 += M4(4.273e-02, -3.136e-02, -4.299e-02, -1.528e-01, 3.872e-01, -1.094e-01, -2.285e-01, 6.648e-02, -1.673e-02, 2.143e-02, -1.323e-01, 3.743e-02, -7.625e-02, -5.783e-02, 4.552e-02, 1.256e-01) * s[1][0][1];
	r1 += M4(-2.615e-02, 3.558e-02, -9.752e-02, 1.117e-01, 4.232e-01, -5.883e-02, 2.675e-01, 3.053e-02, -8.782e-02, 3.393e-01, 5.746e-03, -7.349e-02, 5.177e-02, -1.758e-01, 1.550e-01, -2.580e-03) * s[1][0][1];
	r0 += M4(-8.175e-02, -3.350e-01, -8.215e-02, 8.107e-02, 2.182e-01, -2.426e-01, -6.899e-02, -1.077e-01, 2.177e-01, 2.078e-01, 1.594e-01, -1.953e-01, 2.120e-02, 8.282e-03, 1.165e-01, 2.019e-02) * s[1][1][0];
	r1 += M4(1.650e-01, -5.944e-02, -5.476e-01, -1.626e-01, -1.346e-01, -1.791e-01, 5.484e-02, 1.461e-01, 1.692e-01, -3.167e-01, 3.238e-01, 1.460e-01, -3.070e-01, 1.721e-01, -9.691e-02, -2.355e-02) * s[1][1][0];
	r0 += M4(-7.813e-02, -1.444e-01, -3.575e-02, -3.155e-01, 3.321e-01, -1.807e-01, -5.462e-01, -6.701e-02, -2.284e-01, 4.962e-01, 1.626e-01, -1.088e-01, 3.272e-02, 5.650e-02, -1.431e-01, 2.441e-02) * s[1][1][1];
	r1 += M4(4.580e-01, -2.825e-02, -2.298e-01, -1.257e-01, -5.215e-01, -2.898e-01, 2.618e-01, 1.220e-01, 2.774e-02, -1.960e-01, -5.223e-02, 8.435e-02, 6.919e-02, 9.784e-02, 1.821e-01, 4.507e-02) * s[1][1][1];
	r0 += M4(-3.394e-02, 2.526e-04, -6.058e-02, 7.117e-02, -4.278e-02, -5.594e-02, 1.255e-01, -8.751e-02, 2.889e-01, 3.599e-02, -1.367e-01, -6.382e-03, -2.652e-01, 1.100e-01, 1.867e-01, 4.149e-03) * s[1][2][0];
	r1 += M4(-1.480e-01, -1.393e-01, 2.166e-01, -1.780e-02, 6.404e-03, -4.094e-02, 2.721e-02, 8.666e-02, 9.000e-02, 1.219e-01, 1.803e-01, -1.486e-03, 9.117e-02, 2.360e-02, 6.240e-02, -2.229e-02) * s[1][2][0];
	r0 += M4(2.043e-02, 1.333e-01, -4.138e-02, 3.886e-02, -9.250e-02, 9.553e-04, -2.502e-02, 6.731e-02, -1.494e-01, 1.484e-02, 1.331e-02, 8.843e-02, 1.631e-01, 2.162e-02, -4.534e-02, -6.013e-02) * s[1][2][1];
	r1 += M4(-1.657e-01, -3.123e-02, 2.846e-01, -5.592e-02, 9.991e-02, -8.330e-02, -3.290e-02, 8.396e-02, 1.304e-01, 1.535e-01, -1.116e-01, 2.565e-03, -3.903e-02, 7.440e-02, 7.250e-02, -1.180e-02) * s[1][2][1];
	r0 += M4(-4.985e-02, -6.626e-02, -8.482e-02, 9.869e-02, -3.986e-02, -2.480e-02, -5.046e-02, 1.682e-03, -4.465e-02, -9.865e-03, -8.135e-02, 2.057e-02, -4.772e-02, -8.802e-03, 4.824e-02, -1.811e-01) * s[2][0][0];
	r1 += M4(-5.060e-02, -4.815e-02, 4.544e-02, -1.388e-02, 4.820e-02, -6.628e-02, -3.260e-02, 8.323e-03, 1.267e-01, -8.138e-02, -1.224e-02, -1.132e-03, -9.029e-02, -3.980e-02, 3.214e-02, 7.838e-03) * s[2][0][0];
	r0 += M4(4.890e-03, 5.026e-02, -3.129e-02, 5.570e-03, -1.301e-01, -1.163e-02, -1.185e-01, 1.675e-01, -3.600e-02, 2.289e-01, -6.529e-02, -1.427e-01, 3.882e-02, 2.305e-02, 2.321e-02, -8.934e-03) * s[2][0][1];
	r1 += M4(-2.852e-02, -6.260e-02, 1.060e-01, 1.959e-02, 2.443e-02, -3.529e-01, 2.305e-03, -2.799e-02, -4.872e-02, 5.082e-02, -6.120e-02, -2.038e-02, 3.560e-02, 1.121e-01, -6.860e-02, -1.567e-02) * s[2][0][1];
	r0 += M4(-9.058e-02, 7.948e-02, 6.616e-02, 8.820e-02, -3.118e-02, -1.180e-01, -4.090e-02, -3.342e-02, 5.335e-02, 2.284e-02, -4.202e-02, 2.734e-01, -2.632e-02, 3.412e-02, 6.681e-02, -3.738e-02) * s[2][1][0];
	r1 += M4(-1.399e-01, -7.049e-02, 5.516e-02, -2.576e-03, -2.151e-01, -8.534e-02, -8.618e-02, 6.379e-02, 7.605e-03, -7.441e-02, 2.136e-01, -1.833e-02, 2.777e-01, 1.926e-01, -5.030e-02, 2.164e-02) * s[2][1][0];
	r0 += M4(3.684e-02, -4.604e-02, 5.426e-02, 5.142e-02, -9.503e-02, 2.831e-02, -1.445e-01, -5.480e-03, 1.511e-02, 1.501e-01, 1.161e-01, 9.772e-02, -2.981e-02, 1.844e-02, 8.683e-02, 2.283e-02) * s[2][1][1];
	r1 += M4(-1.437e-02, -4.517e-03, 3.087e-02, 3.339e-02, -3.877e-01, -9.512e-02, 6.220e-02, -4.736e-03, 1.026e-03, 1.381e-01, -7.486e-02, -3.796e-02, -2.067e-02, -1.768e-01, 3.791e-02, 1.912e-02) * s[2][1][1];
	r0 += M4(-8.112e-02, -5.554e-02, 6.266e-02, 1.262e-01, -8.762e-02, -1.274e-03, 8.578e-02, 6.168e-02, -2.160e-02, -1.822e-02, 3.226e-02, 1.124e-01, 2.123e-01, 3.666e-02, 9.828e-02, -1.247e-01) * s[2][2][0];
	r1 += M4(-6.293e-02, -8.235e-02, -1.946e-02, 5.982e-03, -1.963e-02, -8.279e-02, -2.024e-02, 2.797e-02, -3.977e-02, 6.965e-02, 1.871e-01, -3.738e-02, 1.682e-01, 2.005e-02, 1.837e-02, 6.516e-03) * s[2][2][0];
	r0 += M4(4.996e-02, 7.027e-03, -7.481e-02, -1.751e-02, -8.554e-02, 7.738e-03, 1.197e-01, -8.258e-04, 5.244e-02, -1.291e-01, -6.888e-02, 1.472e-02, -9.656e-02, 1.566e-02, 7.917e-04, -1.039e-02) * s[2][2][1];
	r1 += M4(-3.170e-02, 4.899e-02, 2.699e-02, 1.012e-02, -4.052e-02, -9.587e-03, -8.400e-02, -1.219e-03, -2.960e-02, 1.277e-01, -1.885e-02, -4.737e-02, 9.440e-02, 4.593e-02, -2.056e-02, -3.524e-02) * s[2][2][1];
	r0 += V4(2.688e-03, -1.124e-02, -1.097e-02, 1.018e-02);
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-2.423e-02, -1.627e-02, 1.045e-02, 6.249e-02);
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-4x8C-RCAS-DS-conv4
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv3
//!BIND LUMA
//!SAVE conv4
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(texelFetch(conv3_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv3_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 g[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv3_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			g[0][ay][ax] = l0(x - 1, y - 1);
			g[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s[3][3][2];
	V4 r0 = V4(0.0);
	V4 r1 = V4(0.0);
	s[0][0][0] = max(g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[0][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[0][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[0][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[0][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[0][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[0][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(-7.157e-04, 3.915e-02, 2.819e-02, -8.237e-03, -1.344e-02, 6.028e-02, 3.045e-02, 6.919e-02, 8.064e-03, -4.090e-02, 1.339e-02, 1.656e-02, 4.724e-02, 1.048e-01, 1.431e-02, 3.194e-02) * s[0][0][0];
	r1 += M4(-6.401e-02, -4.384e-02, 3.308e-02, 2.082e-01, -4.645e-02, -7.058e-02, 7.627e-02, 1.402e-02, 4.997e-03, 4.827e-02, 3.713e-02, 4.539e-02, 1.906e-02, -5.191e-02, -1.986e-03, 9.430e-03) * s[0][0][0];
	r0 += M4(1.069e-02, 4.662e-02, 4.801e-04, -9.700e-03, -8.141e-03, 3.485e-02, 4.736e-03, 6.674e-02, -2.290e-02, 1.235e-01, 9.407e-02, -5.092e-02, 7.320e-03, 8.991e-02, -1.698e-02, 5.364e-02) * s[0][0][1];
	r1 += M4(1.147e-03, 5.662e-02, 4.258e-02, 1.578e-03, 1.096e-02, -1.189e-01, 4.355e-02, -2.773e-02, -5.689e-02, 7.881e-02, -6.527e-02, 2.453e-01, 1.978e-02, -1.089e-01, 3.466e-02, 7.849e-02) * s[0][0][1];
	r0 += M4(2.121e-02, -8.736e-02, -1.142e-01, 1.635e-01, -2.250e-03, 2.125e-01, 3.657e-02, 7.807e-02, -1.960e-02, -1.843e-02, -9.883e-03, 9.125e-03, -3.825e-02, 1.827e-01, 1.013e-02, 1.329e-02) * s[0][1][0];
	r1 += M4(2.598e-01, 4.308e-02, -6.569e-02, -2.690e-02, -7.587e-02, 2.150e-01, 4.335e-02, -3.314e-03, -1.063e-01, -7.357e-03, -6.105e-03, -5.375e-02, 9.138e-02, 1.804e-01, -1.021e-02, -2.786e-02) * s[0][1][0];
	r0 += M4(-1.613e-02, 7.764e-02, -2.311e-02, -4.793e-02, -1.076e-01, 7.799e-02, 2.514e-02, 6.726e-02, 1.110e-01, -8.395e-02, -6.882e-02, 2.651e-01, -2.782e-02, 6.040e-02, -6.913e-02, 8.031e-02) * s[0][1][1];
	r1 += M4(-2.699e-02, 7.602e-02, 1.958e-02, -1.239e-02, 1.674e-01, 7.379e-02, -1.767e-02, 1.448e-02, 1.661e-01, 7.492e-02, -1.054e-01, -1.765e-01, 1.053e-01, 1.180e-01, -3.086e-02, -1.989e-02) * s[0][1][1];
	r0 += M4(-8.391e-03, 2.496e-02, -1.283e-02, -1.315e-02, 4.326e-02, 1.300e-01, -5.755e-02, 4.633e-03, -9.449e-03, -1.487e-03, -1.364e-02, 3.219e-03, 6.652e-02, 8.256e-02, 1.154e-02, -7.654e-02) * s[0][2][0];
	r1 += M4(-1.166e-02, 9.736e-02, -6.031e-02, 3.308e-02, -2.358e-01, -5.625e-03, 1.228e-01, 6.005e-03, -9.540e-02, 4.854e-02, -2.956e-02, -2.500e-02, -5.645e-02, -7.686e-03, 6.781e-02, -3.983e-03) * s[0][2][0];
	r0 += M4(-6.082e-04, 3.300e-02, -6.935e-03, -5.758e-02, -5.030e-02, 3.895e-02, -3.604e-02, 1.121e-02, 1.817e-02, 4.013e-03, 1.471e-01, 5.984e-02, 1.691e-02, 1.251e-02, -3.163e-02, -6.564e-02) * s[0][2][1];
	r1 += M4(-4.858e-02, 4.580e-02, 1.716e-02, 2.182e-02, -5.213e-02, -4.608e-02, 2.122e-02, -2.735e-02, -7.413e-02, 8.916e-02, -8.983e-02, -7.394e-02, -3.108e-02, -5.923e-02, 2.998e-02, -1.103e-02) * s[0][2][1];
	r0 += M4(-2.859e-02, 6.176e-02, 5.898e-02, 1.998e-02, 5.992e-03, -1.099e-01, 7.621e-03, -4.697e-02, 3.580e-02, 2.772e-02, 3.034e-02, -3.884e-02, -4.227e-03, -1.016e-01, 4.283e-02, -7.738e-02) * s[1][0][0];
	r1 += M4(6.803e-02, -1.290e-01, 8.047e-03, 5.366e-02, 6.815e-02, -1.043e-01, -1.183e-01, 2.791e-01, -2.619e-02, 4.380e-02, 4.116e-02, 1.630e-01, 9.875e-02, -2.027e-02, -4.700e-02, 3.746e-02) * s[1][0][0];
	r0 += M4(8.146e-03, 3.691e-02, -1.269e-02, 5.899e-02, -3.150e-02, -1.971e-02, 2.231e-02, 1.172e-02, -1.496e-01, 6.210e-02, -8.492e-02, 9.501e-02, -4.552e-02, -3.065e-02, 3.419e-02, -6.957e-02) * s[1][0][1];
	r1 += M4(-2.897e-02, -1.382e-01, -2.943e-02, 1.167e-01, 3.989e-02, -2.791e-02, -1.642e-02, 4.474e-02, -1.609e-02, 2.682e-01, 1.120e-01, 2.312e-01, 5.575e-03, -4.359e-02, -5.259e-02, 2.498e-02) * s[1][0][1];
	r0 += M4(-2.384e-02, -4.773e-01, 5.667e-02, -2.259e-01, -8.627e-02, -1.637e-01, 1.442e-02, -1.080e-01, 1.019e-01, 1.123e-01, -7.406e-02, -1.263e-01, -1.431e-01, -6.323e-02, -1.161e-01, 8.532e-02) * s[1][1][0];
	r1 += M4(8.916e-02, 2.514e-01, -2.657e-01, 5.283e-02, 8.425e-02, 5.286e-01, -5.124e-01, 1.791e-01, -6.766e-02, 2.294e-02, 1.295e-01, 3.166e-02, 2.544e-02, 1.611e-01, -2.224e-01, 7.285e-02) * s[1][1][0];
	r0 += M4(2.619e-02, -9.402e-03, -6.499e-03, 7.827e-02, -1.124e-01, -9.393e-02, 2.075e-02, 6.748e-02, 8.227e-01, 7.715e-01, 3.578e-01, -1.303e-01, -1.284e-01, 1.384e-01, -6.958e-02, -1.180e-01) * s[1][1][1];
	r1 += M4(-5.755e-02, 1.544e-02, -1.200e-01, 2.327e-02, 1.487e-03, 9.884e-03, -1.732e-01, 1.363e-01, -2.157e-01, -2.420e-01, 5.259e-02, -5.465e-01, -3.049e-01, 3.290e-01, -2.414e-01, 1.122e-02) * s[1][1][1];
	r0 += M4(6.456e-02, 2.745e-02, -1.040e-01, -1.896e-02, 4.281e-02, -2.174e-01, -3.521e-01, -7.795e-02, 2.262e-03, -2.290e-02, -5.483e-02, -7.409e-02, 1.645e-01, 5.351e-02, -1.067e-01, 1.015e-01) * s[1][2][0];
	r1 += M4(5.724e-02, 1.290e-02, 1.018e-01, 5.262e-02, 1.422e-01, 6.770e-02, -4.177e-02, -4.091e-02, 6.194e-02, 4.352e-02, 3.791e-02, 2.033e-02, -3.337e-02, 7.269e-02, 1.219e-01, -3.502e-02) * s[1][2][0];
	r0 += M4(9.497e-02, 9.647e-04, -7.007e-02, 8.058e-02, -1.385e-02, -3.182e-02, -1.081e-01, 1.518e-01, -1.511e-02, -1.798e-01, 2.829e-01, -2.316e-01, 7.652e-02, 1.279e-01, -5.365e-02, -3.782e-02) * s[1][2][1];
	r1 += M4(-2.085e-02, 2.716e-02, 9.088e-02, 2.824e-02, 7.865e-02, 1.210e-02, -8.149e-02, -5.724e-02, 8.617e-02, -8.613e-02, -1.135e-02, 1.226e-01, -6.489e-02, -1.873e-01, 1.249e-01, -4.047e-02) * s[1][2][1];
	r0 += M4(1.126e-01, 7.333e-03, -9.641e-03, 9.794e-02, 3.294e-02, 1.615e-02, 4.611e-02, -1.681e-02, -2.993e-03, 3.362e-02, 3.714e-02, 5.450e-02, 1.395e-02, 3.156e-02, 2.242e-02, 3.873e-02) * s[2][0][0];
	r1 += M4(9.995e-02, -2.205e-02, -4.306e-02, 1.909e-01, 1.701e-02, 2.835e-03, 2.917e-02, 2.015e-02, 2.117e-02, -6.044e-02, -5.074e-02, 9.100e-03, -4.922e-02, 3.636e-02, 3.477e-02, 2.461e-03) * s[2][0][0];
	r0 += M4(-3.452e-02, -6.470e-02, -5.023e-02, -3.005e-02, -5.876e-03, 1.249e-02, 6.038e-03, 1.453e-02, -2.012e-01, 1.366e-01, 3.039e-02, 6.370e-02, -3.705e-02, 2.484e-02, -3.150e-02, -8.577e-03) * s[2][0][1];
	r1 += M4(8.626e-02, -2.152e-02, -5.173e-03, 9.737e-02, 7.796e-04, -1.431e-02, 2.973e-02, -6.517e-02, -8.535e-02, 1.374e-01, -2.174e-02, -1.512e-02, 8.816e-02, 8.274e-02, -2.552e-02, 1.165e-01) * s[2][0][1];
	r0 += M4(-1.018e-01, 3.896e-01, -8.130e-02, 3.325e-01, -2.508e-02, 3.319e-02, 1.658e-02, -3.519e-02, 2.455e-03, 5.524e-03, 3.606e-02, -7.998e-03, -3.689e-02, 5.276e-02, 2.995e-02, 1.043e-01) * s[2][1][0];
	r1 += M4(-9.747e-03, 8.081e-02, 5.478e-02, 1.038e-01, -4.003e-02, 1.689e-01, -4.939e-02, 1.204e-01, 4.696e-02, 3.466e-02, -6.699e-02, 1.053e-02, -3.360e-02, -3.539e-02, -7.675e-02, -2.113e-02) * s[2][1][0];
	r0 += M4(-2.615e-02, 5.962e-02, 3.689e-02, -9.470e-03, -4.418e-02, -3.897e-02, 1.155e-02, -3.915e-02, 3.471e-01, -1.881e-03, 3.549e-01, 1.697e-01, -5.899e-02, -1.268e-02, -7.669e-02, 4.648e-02) * s[2][1][1];
	r1 += M4(-1.040e-02, -2.869e-03, 4.470e-03, -1.924e-02, 3.879e-03, -8.043e-02, 3.527e-02, 1.642e-02, 2.736e-02, 2.301e-01, -8.503e-02, -2.462e-01, 2.686e-01, -1.496e-02, -2.772e-01, 2.392e-02) * s[2][1][1];
	r0 += M4(9.025e-02, 7.886e-02, -7.593e-02, 1.734e-01, 6.391e-02, -2.129e-02, 8.205e-02, -8.081e-02, -4.883e-02, -2.097e-02, -1.255e-01, -3.106e-02, 9.058e-02, -2.959e-02, -2.260e-03, 1.914e-02) * s[2][2][0];
	r1 += M4(-3.019e-02, 2.706e-02, 5.767e-02, -2.592e-02, 3.375e-02, -1.409e-02, 5.747e-02, 4.924e-02, -3.720e-02, 2.656e-02, 2.917e-02, -2.437e-02, -3.874e-02, 5.060e-03, 6.189e-02, -4.855e-02) * s[2][2][0];
	r0 += M4(5.258e-03, -3.547e-02, -5.351e-02, 8.136e-03, -4.687e-02, -2.918e-02, 6.993e-02, -1.937e-02, 1.131e-01, 1.179e-01, -1.415e-01, 2.313e-01, 2.203e-02, -1.843e-02, -1.909e-01, -4.290e-02) * s[2][2][1];
	r1 += M4(-4.842e-02, -9.888e-03, 6.803e-02, -4.126e-03, 9.632e-03, 2.987e-02, 1.722e-02, -2.133e-02, -1.042e-01, -3.596e-02, 1.238e-01, -2.462e-02, 2.615e-02, -6.320e-02, 7.263e-02, -1.758e-02) * s[2][2][1];
	s[0][0][0] = max(g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[1][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[1][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[1][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[1][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[1][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[1][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(-4.681e-02, 3.861e-02, -1.822e-02, 7.718e-03, 2.954e-02, -6.134e-02, -1.341e-02, -1.425e-02, 3.129e-02, -8.274e-02, 2.175e-02, -4.093e-02, 4.575e-03, 2.806e-02, -3.152e-02, -4.648e-02) * s[0][0][0];
	r1 += M4(2.440e-02, -1.342e-02, -4.585e-03, -5.136e-02, 5.043e-02, 1.860e-02, -3.162e-02, 3.531e-02, 6.748e-02, 1.881e-02, -3.209e-02, -1.304e-01, -7.436e-04, 1.740e-02, -3.708e-03, 6.165e-02) * s[0][0][0];
	r0 += M4(8.521e-04, -2.792e-02, -4.934e-03, -5.547e-02, -1.919e-02, -3.087e-02, 5.456e-03, 2.927e-02, 4.217e-03, -3.304e-02, 1.010e-02, -7.568e-02, 5.704e-02, 1.323e-01, 1.401e-02, -2.336e-02) * s[0][0][1];
	r1 += M4(1.165e-01, 1.613e-01, -8.877e-02, -1.027e-02, 2.691e-02, -1.372e-01, -2.858e-02, 5.374e-02, -2.298e-02, 6.386e-03, -6.756e-03, -8.130e-02, -1.333e-01, 8.954e-02, 5.446e-02, 1.818e-01) * s[0][0][1];
	r0 += M4(-7.413e-02, 1.071e-01, -7.375e-02, -3.310e-02, 1.274e-01, 7.205e-03, 2.854e-02, 1.205e-02, -3.154e-02, -2.395e-02, 5.242e-02, -1.636e-01, 2.108e-02, 1.557e-02, -2.209e-02, -1.269e-03) * s[0][1][0];
	r1 += M4(-2.074e-03, 1.862e-01, -8.638e-02, -2.106e-02, -1.518e-01, -1.468e-01, 6.042e-02, 3.352e-02, -4.761e-02, -9.378e-02, -1.055e-01, 7.759e-02, 7.206e-02, -7.156e-03, 7.996e-03, 4.686e-02) * s[0][1][0];
	r0 += M4(-1.966e-02, -8.757e-02, 1.452e-03, -8.187e-02, 2.643e-02, -9.479e-02, -1.560e-02, 7.869e-02, 1.736e-02, -3.499e-02, -7.570e-02, -1.713e-01, 1.751e-02, 2.725e-01, -1.724e-01, 1.162e-01) * s[0][1][1];
	r1 += M4(1.710e-01, 7.580e-03, -1.221e-01, 3.918e-02, -1.081e-01, 5.466e-02, -1.048e-01, 1.793e-02, -4.553e-02, 1.146e-02, -1.339e-03, 3.705e-02, 1.498e-01, 7.994e-02, -8.678e-03, 9.261e-02) * s[0][1][1];
	r0 += M4(-3.325e-02, -1.509e-01, -1.306e-01, -6.816e-02, 5.151e-02, 1.125e-02, 6.916e-02, 1.620e-02, 1.996e-02, -1.746e-02, 5.530e-02, 2.738e-02, 1.289e-02, 2.371e-02, -2.881e-03, -3.325e-02) * s[0][2][0];
	r1 += M4(-1.027e-02, -2.215e-01, 5.620e-03, -7.645e-02, -1.850e-03, 1.252e-01, -4.714e-02, 3.688e-02, 1.362e-01, -2.629e-02, -6.637e-02, 2.888e-02, 3.936e-02, 6.451e-02, -1.197e-02, 2.093e-02) * s[0][2][0];
	r0 += M4(4.063e-02, -8.542e-02, -3.794e-02, 4.099e-03, -3.974e-03, 1.938e-02, -9.420e-02, 1.316e-01, 1.054e-02, 4.390e-02, 2.071e-04, -5.048e-02, 3.706e-02, 1.682e-01, -8.660e-02, 1.197e-02) * s[0][2][1];
	r1 += M4(9.327e-02, -8.348e-02, 3.775e-03, -2.247e-02, 7.882e-02, -1.597e-03, 9.889e-03, 2.681e-02, 5.023e-02, 5.703e-02, 1.592e-02, 3.581e-02, -3.268e-02, 1.087e-01, -1.590e-01, -2.184e-02) * s[0][2][1];
	r0 += M4(-8.847e-03, -1.333e-01, 1.904e-02, -3.867e-02, 4.622e-03, -5.035e-03, -4.965e-04, -1.228e-02, 7.600e-02, 1.170e-01, -4.334e-02, 3.130e-02, -5.330e-02, -6.372e-02, -4.503e-02, 3.802e-02) * s[1][0][0];
	r1 += M4(1.183e-02, -1.195e-01, -7.988e-02, 7.834e-02, 2.725e-02, 4.485e-02, -5.944e-02, 7.544e-02, -5.135e-02, 1.194e-02, -1.030e-02, 7.932e-02, 1.723e-03, -3.662e-02, -3.992e-02, -1.210e-01) * s[1][0][0];
	r0 += M4(-3.256e-02, -3.835e-02, -2.723e-02, 2.208e-02, 3.060e-02, -2.010e-02, 3.723e-02, -1.448e-02, 7.980e-02, 4.746e-02, -1.653e-02, 3.980e-02, 1.001e-01, 2.800e-01, -9.726e-02, -6.936e-02) * s[1][0][1];
	r1 += M4(4.900e-02, 1.530e-01, -2.846e-02, -1.424e-01, -4.774e-02, -2.466e-01, -1.257e-01, 1.152e-01, -5.062e-02, -9.087e-02, 2.319e-02, 5.170e-02, 1.167e-01, -1.419e-02, -5.979e-01, -1.241e-01) * s[1][0][1];
	r0 += M4(-1.741e-01, -2.243e-01, -1.141e-01, -2.942e-02, 1.160e-01, -1.112e-01, -8.019e-02, -1.361e-01, -4.793e-02, -8.643e-02, -3.916e-01, 1.962e-01, -2.067e-03, 5.136e-02, 1.255e-01, 1.115e-01) * s[1][1][0];
	r1 += M4(3.270e-02, 3.843e-01, 4.012e-02, -3.879e-02, 8.100e-02, 1.011e-01, 6.478e-02, -5.503e-02, -2.416e-01, -1.461e-01, -5.737e-01, -2.977e-01, -7.234e-02, -1.773e-02, -1.769e-02, -1.639e-02) * s[1][1][0];
	r0 += M4(7.156e-02, -9.546e-02, -6.881e-03, 7.195e-02, 9.157e-02, -5.633e-02, -1.604e-01, -2.509e-01, 3.422e-03, -1.225e-01, -2.220e-01, -5.811e-03, 4.982e-02, -4.272e-01, 2.080e-01, -4.386e-01) * s[1][1][1];
	r1 += M4(8.917e-02, -1.473e-02, -1.507e-02, -1.219e-01, -3.515e-02, 1.599e-01, 2.517e-01, -3.526e-02, 8.779e-02, -1.075e-01, -1.697e-01, -2.115e-01, 3.990e-01, 5.917e-02, -8.638e-01, -1.845e-02) * s[1][1][1];
	r0 += M4(9.369e-02, 3.213e-02, -2.310e-01, -1.175e-01, -9.606e-02, -4.504e-02, -1.319e-01, -2.191e-01, 3.626e-02, 4.065e-02, 4.002e-01, 7.700e-02, 6.153e-02, 1.997e-02, -8.799e-03, 6.141e-02) * s[1][2][0];
	r1 += M4(5.796e-02, -4.552e-01, 7.340e-02, -5.477e-02, -1.048e-01, 1.592e-01, 5.117e-02, 1.846e-03, -9.398e-02, -5.396e-02, -8.670e-02, 4.992e-02, -1.749e-01, -8.960e-02, 1.143e-01, -5.847e-02) * s[1][2][0];
	r0 += M4(2.953e-03, 1.175e-01, 2.064e-01, 2.928e-02, -8.506e-02, -3.934e-02, -1.979e-03, -1.804e-01, 4.255e-02, 4.440e-02, 2.236e-01, 3.554e-02, 1.127e-01, -2.510e-01, 4.110e-01, -2.347e-01) * s[1][2][1];
	r1 += M4(4.230e-02, 6.610e-02, -9.329e-02, 6.458e-02, -1.065e-01, -1.158e-01, -3.975e-02, -4.548e-02, -7.401e-02, 2.417e-02, 1.203e-02, 4.061e-02, -3.119e-01, 1.703e-01, -3.906e-01, 2.489e-02) * s[1][2][1];
	r0 += M4(9.787e-03, 5.149e-02, 2.656e-02, 1.905e-02, -3.673e-02, -1.771e-02, 3.478e-02, 2.465e-02, 1.893e-03, 4.903e-03, -1.999e-03, 2.456e-02, -1.774e-02, -1.778e-03, 1.114e-02, -2.679e-02) * s[2][0][0];
	r1 += M4(-3.060e-02, 1.723e-02, -6.958e-02, 2.845e-02, -6.280e-02, -1.565e-02, -4.837e-02, 7.833e-03, -3.743e-02, -7.301e-02, 6.145e-03, -6.437e-02, -1.781e-02, 3.953e-02, -1.161e-02, 4.633e-02) * s[2][0][0];
	r0 += M4(5.552e-03, 7.220e-02, 1.551e-02, 6.771e-02, -3.899e-02, 4.246e-02, 3.640e-02, 2.308e-02, 4.645e-02, -2.315e-02, 4.132e-02, 4.076e-02, 4.484e-01, 4.224e-02, -1.458e-01, -1.472e-01) * s[2][0][1];
	r1 += M4(-8.811e-02, 5.823e-02, -6.608e-03, -1.024e-01, -1.670e-02, -8.352e-03, 2.653e-02, 1.667e-02, -4.484e-02, -1.169e-01, -3.302e-02, -2.943e-02, -1.468e-01, -5.166e-01, -8.792e-01, -1.124e-01) * s[2][0][1];
	r0 += M4(1.790e-02, -1.358e-02, -9.836e-02, -9.156e-03, 7.619e-02, -1.322e-01, -3.517e-02, 9.107e-02, 9.467e-02, -4.745e-02, -1.888e-02, -1.294e-01, -3.605e-02, 1.856e-02, -1.773e-02, -9.034e-03) * s[2][1][0];
	r1 += M4(7.492e-03, 2.423e-02, -1.894e-03, -1.122e-01, 7.041e-03, 5.309e-03, -1.100e-02, -7.613e-04, 2.277e-02, 3.561e-02, 6.149e-02, -7.837e-02, 4.697e-02, 8.451e-02, 4.147e-02, 1.318e-02) * s[2][1][0];
	r0 += M4(7.062e-02, 2.242e-02, 7.171e-02, 1.905e-03, 2.475e-02, 9.484e-03, 3.937e-02, 6.821e-02, 8.921e-02, -4.175e-02, -2.681e-02, -1.739e-02, 3.175e-01, -6.159e-01, -5.765e-01, 6.089e-01) * s[2][1][1];
	r1 += M4(-5.640e-02, 8.751e-03, 6.762e-02, -7.423e-02, 7.543e-02, 3.408e-02, -7.893e-02, 9.023e-02, 7.280e-04, 1.175e-01, 8.518e-02, -4.717e-02, -4.732e-01, 6.356e-02, -1.380e+00, -5.354e-01) * s[2][1][1];
	r0 += M4(-9.438e-02, 7.394e-02, -4.070e-02, 8.070e-02, 7.272e-02, 1.385e-02, -7.056e-02, -1.864e-02, -7.073e-02, 2.660e-02, -3.322e-02, -4.432e-03, -1.360e-02, -5.891e-02, -7.401e-02, -6.862e-02) * s[2][2][0];
	r1 += M4(1.297e-02, -1.339e-01, 3.951e-02, -3.967e-02, -1.862e-02, -4.785e-03, 6.843e-02, 1.950e-02, 1.315e-02, -2.410e-02, -5.917e-02, 9.504e-03, 8.812e-02, -3.727e-02, -6.742e-02, 1.501e-02) * s[2][2][0];
	r0 += M4(1.136e-02, -6.628e-03, 4.651e-02, 4.913e-02, 4.553e-02, -1.128e-02, -1.305e-01, 8.127e-02, -1.402e-02, 5.294e-02, -5.252e-03, 2.296e-02, -2.283e-01, -1.277e-01, 8.502e-01, -2.300e-01) * s[2][2][1];
	r1 += M4(-2.424e-02, -3.260e-02, 8.317e-03, -1.328e-02, 6.472e-02, -1.432e-02, -2.954e-02, 2.585e-02, -1.219e-02, 5.438e-02, -3.351e-02, 1.120e-02, 1.618e-01, 2.265e-01, -7.158e-01, 2.642e-01) * s[2][2][1];
	r0 += V4(1.073e-02, -1.824e-02, 5.123e-03, -1.154e-02);
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(4.488e-03, 8.533e-03, -1.672e-02, 3.663e-03);
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-4x8C-RCAS-DS-out-shuffle
//!HOOK LUMA
//!COMPUTE 16 16 8 8
//!BIND LUMA
//!BIND conv4
//!BIND rcas
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 1
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(texelFetch(conv4_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv4_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 g[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv4_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			g[0][ay][ax] = l0(x - 1, y - 1);
			g[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s[3][3][2];
	V4 r0 = V4(0.0);
	s[0][0][0] = max(g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[0][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[0][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[0][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[0][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[0][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[0][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(1.934e-02, 1.104e-02, -2.484e-02, 3.293e-02, -1.233e-01, -1.474e-04, 7.500e-03, 5.361e-02, 1.292e-01, 1.769e-02, -5.587e-02, -6.519e-02, -3.998e-02, 5.957e-02, 9.790e-02, 2.515e-02) * s[0][0][0];
	r0 += M4(-5.059e-02, 1.056e-01, 2.474e-02, 4.887e-02, -1.419e-02, -7.353e-03, -1.157e-02, -2.399e-02, -2.001e-02, 5.178e-02, 6.067e-03, 1.912e-02, 1.205e-01, 6.209e-02, 7.643e-03, 2.625e-02) * s[0][0][1];
	r0 += M4(4.447e-02, 1.446e-02, -8.204e-03, -8.156e-02, 3.262e-02, -2.165e-02, 1.870e-02, -3.227e-02, -1.313e-01, -6.070e-02, 5.362e-03, 9.226e-03, -1.709e-01, -2.647e-01, 7.165e-02, 1.108e-01) * s[0][1][0];
	r0 += M4(-8.482e-02, 2.031e-01, 7.259e-03, -1.202e-01, 8.819e-03, 1.295e-02, -1.897e-02, -1.443e-02, 1.951e-02, -7.215e-02, -3.284e-02, -2.428e-02, -1.958e-01, -1.117e-01, 1.646e-02, -2.555e-02) * s[0][1][1];
	r0 += M4(-2.757e-02, 1.325e-02, 3.065e-02, 6.800e-02, 1.153e-02, -3.019e-02, 5.999e-03, 2.226e-02, -1.787e-02, -3.597e-02, -4.907e-03, -1.935e-02, 1.137e-02, 2.108e-03, -1.672e-02, 1.357e-02) * s[0][2][0];
	r0 += M4(3.296e-02, -7.344e-02, -1.395e-02, 7.498e-02, 6.708e-03, -8.832e-03, -5.688e-03, 3.007e-03, -2.243e-02, 2.914e-03, 1.353e-02, -3.541e-02, 5.342e-02, 1.933e-02, -2.147e-02, -3.732e-03) * s[0][2][1];
	r0 += M4(8.143e-02, 3.026e-02, 8.507e-02, -5.335e-02, -9.868e-04, -1.363e-01, 1.680e-01, -7.721e-02, -2.512e-01, -3.496e-01, 4.394e-01, -1.333e-01, 5.119e-01, 1.173e-01, -4.602e-01, -2.319e-02) * s[1][0][0];
	r0 += M4(-7.516e-03, -2.783e-02, -1.102e-01, 4.660e-02, 3.210e-02, -1.088e-01, -3.832e-02, -2.259e-02, -1.067e-01, -1.140e-01, -7.468e-02, -2.697e-02, -3.672e-02, 1.666e-02, 8.525e-02, 1.467e-02) * s[1][0][1];
	r0 += M4(-2.057e-01, -2.431e-03, 1.347e-02, 2.020e-01, -5.059e-01, -1.744e-01, 1.268e-01, 5.059e-01, 1.524e-01, 3.534e-01, -4.114e-02, 4.029e-01, 5.343e-01, 8.418e-01, -4.157e-01, -8.397e-01) * s[1][1][0];
	r0 += M4(-6.938e-01, 4.404e-01, -5.230e-01, 7.018e-01, -9.866e-02, 1.385e-01, -1.566e-02, 4.680e-02, 1.958e-01, 5.540e-02, 2.105e-01, 6.058e-02, 2.064e-01, 7.864e-02, -1.620e-01, -1.114e-01) * s[1][1][1];
	r0 += M4(8.815e-02, -4.919e-02, -4.512e-02, -1.148e-01, 5.091e-02, -1.634e-01, 5.853e-02, -7.600e-02, 1.796e-02, 6.438e-02, 1.877e-02, 4.749e-02, -1.126e-02, 7.896e-02, 1.839e-02, 4.505e-02) * s[1][2][0];
	r0 += M4(1.502e-01, -1.179e-01, 1.254e-01, -2.728e-01, 5.090e-02, -5.872e-02, 2.535e-02, -6.422e-02, -2.328e-02, 4.969e-02, -2.049e-02, 9.760e-02, -4.779e-02, 2.502e-02, 2.991e-02, 5.111e-02) * s[1][2][1];
	r0 += M4(-2.608e-02, -5.562e-03, 2.692e-02, 5.883e-02, 1.596e-02, 9.118e-03, 1.232e-02, -2.534e-02, 1.101e-01, 6.903e-02, -2.310e-01, -1.801e-02, -1.068e-01, -2.331e-02, 6.123e-02, 6.861e-03) * s[2][0][0];
	r0 += M4(-1.141e-02, 1.836e-02, 5.281e-02, 1.682e-03, -1.947e-02, 5.355e-03, 1.045e-01, -3.965e-02, 4.455e-02, 1.262e-02, -6.045e-02, -5.869e-02, 1.488e-02, 1.331e-03, -4.486e-03, 1.970e-02) * s[2][0][1];
	r0 += M4(3.935e-02, -1.643e-02, -1.163e-01, -8.810e-02, 1.108e-01, 5.614e-02, -1.323e-01, -7.317e-02, -1.697e-02, 6.929e-02, 2.254e-02, -3.097e-02, -1.772e-01, -1.870e-01, 7.201e-02, 1.450e-01) * s[2][1][0];
	r0 += M4(3.392e-02, -3.992e-02, -2.667e-01, 1.526e-02, -1.527e-03, -5.249e-02, -6.028e-02, 1.038e-01, -5.332e-02, 1.567e-02, 1.660e-02, -4.457e-02, -5.578e-02, -8.440e-03, 5.096e-02, 4.648e-02) * s[2][1][1];
	r0 += M4(-3.196e-02, 9.207e-03, 1.600e-02, -1.643e-02, -4.260e-02, 1.782e-02, 4.219e-02, 2.013e-02, -1.638e-02, 9.911e-03, -1.899e-02, -1.636e-02, 3.720e-02, -1.149e-02, -2.014e-02, -2.840e-02) * s[2][2][0];
	r0 += M4(-4.353e-02, 4.544e-03, 1.961e-02, 2.623e-02, -2.267e-02, -2.016e-03, 4.934e-02, 1.741e-02, 1.664e-02, -6.311e-03, -2.281e-02, -8.713e-03, 1.190e-02, -2.315e-02, -1.111e-02, -3.161e-02) * s[2][2][1];
	s[0][0][0] = max(g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[1][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[1][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[1][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[1][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[1][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[1][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(-1.241e-02, 1.236e-02, 4.253e-03, 1.055e-02, 2.817e-02, -8.423e-03, -1.071e-02, -2.508e-03, -3.636e-02, -4.333e-02, 2.402e-02, -2.407e-02, 3.379e-03, -1.122e-02, -1.071e-03, 2.314e-03) * s[0][0][0];
	r0 += M4(-2.521e-02, 7.772e-03, 4.268e-03, 8.845e-03, 2.368e-02, 3.945e-03, -6.993e-03, -2.155e-03, -1.157e-02, -3.996e-02, 1.425e-02, -1.029e-02, -1.100e-02, 8.090e-03, 2.517e-02, -1.640e-02) * s[0][0][1];
	r0 += M4(3.539e-02, 1.888e-02, 3.212e-02, 1.292e-03, 2.375e-02, 3.337e-02, -6.359e-03, -4.115e-03, 1.033e-01, 8.650e-02, -6.967e-02, 4.674e-02, -1.177e-01, -3.952e-02, -2.088e-02, -5.547e-02) * s[0][1][0];
	r0 += M4(3.850e-03, -1.250e-02, -1.407e-02, -2.110e-02, 7.957e-02, -2.412e-03, -2.341e-02, 5.180e-03, -8.868e-04, 3.284e-02, -8.874e-03, 5.556e-02, -6.688e-02, -1.121e-01, 1.087e-01, -3.947e-02) * s[0][1][1];
	r0 += M4(2.223e-03, 5.185e-03, -3.198e-03, 3.112e-02, -5.543e-02, -3.381e-02, 1.509e-02, -2.570e-02, -6.552e-02, -6.061e-02, 9.018e-05, -9.759e-02, 6.269e-02, 2.780e-02, 1.553e-02, 7.378e-02) * s[0][2][0];
	r0 += M4(-8.776e-03, -2.008e-02, -8.522e-03, -7.574e-03, -8.130e-02, -3.395e-03, 1.692e-02, -1.257e-02, -4.255e-02, -4.218e-02, -1.002e-02, -4.799e-02, -4.165e-03, -5.880e-02, 7.329e-02, 2.533e-01) * s[0][2][1];
	r0 += M4(-5.165e-02, -1.457e-01, -4.750e-02, -3.065e-02, -3.815e-02, 5.214e-02, 2.558e-02, 2.878e-03, 8.234e-03, -6.548e-03, -7.202e-02, -3.135e-03, 1.637e-02, -8.814e-03, -7.989e-03, -2.361e-02) * s[1][0][0];
	r0 += M4(-4.430e-02, -1.013e-01, -4.263e-02, -3.311e-02, -8.824e-02, 1.677e-01, -5.164e-02, 4.774e-02, -2.506e-02, 3.533e-02, -4.967e-02, 4.730e-03, -2.026e-02, 7.471e-02, -4.453e-02, 5.109e-02) * s[1][0][1];
	r0 += M4(3.301e-01, 3.057e-01, -1.420e-01, -5.455e-02, -2.755e-03, -1.134e-01, 2.802e-02, -6.445e-02, 4.427e-01, 2.751e-01, 5.042e-01, 2.029e-01, 6.180e-02, 1.712e-02, -9.603e-02, 1.931e-02) * s[1][1][0];
	r0 += M4(1.165e-01, 1.850e-01, 1.403e-01, 1.061e-01, 4.957e-01, -6.387e-01, 3.706e-01, -3.624e-01, 2.534e-01, 1.167e-01, 1.996e-01, 1.182e-02, 3.954e-01, -3.566e-01, 1.448e-01, -1.970e-01) * s[1][1][1];
	r0 += M4(6.711e-02, 2.131e-01, 1.304e-03, -9.212e-02, 8.774e-02, 8.264e-02, -6.057e-02, 5.880e-02, 8.097e-03, 1.626e-01, -6.539e-02, 1.779e-01, -8.752e-02, -8.075e-02, 2.765e-02, -6.261e-02) * s[1][2][0];
	r0 += M4(5.106e-02, 4.413e-02, 2.276e-02, 6.948e-02, -2.372e-02, 8.695e-02, -1.372e-01, 5.431e-02, -1.834e-02, 7.300e-02, -4.040e-02, 9.040e-02, -2.646e-01, 6.152e-01, -3.626e-01, -1.036e-01) * s[1][2][1];
	r0 += M4(5.144e-02, 2.381e-02, 1.400e-01, -6.958e-02, -2.187e-03, -1.644e-02, -2.752e-02, 2.478e-02, 3.534e-03, 7.800e-03, -7.283e-06, 4.128e-03, -2.044e-02, -2.884e-03, 2.080e-02, 6.076e-03) * s[2][0][0];
	r0 += M4(4.943e-03, 2.999e-03, -1.090e-02, -4.192e-02, -4.278e-02, 7.964e-03, -5.507e-02, 1.041e-01, 1.611e-02, 9.677e-03, 1.892e-02, 2.400e-02, 5.096e-03, -8.275e-03, -2.053e-05, 3.038e-02) * s[2][0][1];
	r0 += M4(-7.402e-01, -3.666e-01, 6.152e-01, 6.810e-01, 2.784e-02, 2.850e-02, 1.091e-02, -5.096e-03, -1.923e-02, 1.723e-03, 6.409e-02, 9.058e-02, 1.445e-02, -1.247e-02, 5.528e-02, 5.768e-03) * s[2][1][0];
	r0 += M4(-6.362e-02, -4.809e-02, -9.899e-03, 1.184e-01, 7.085e-02, -3.119e-02, 2.890e-01, -3.526e-01, -2.191e-02, 6.181e-03, 3.230e-02, 6.569e-02, 1.441e-02, 8.755e-02, 8.007e-03, -1.285e-01) * s[2][1][1];
	r0 += M4(4.162e-02, -3.194e-01, 4.439e-02, 2.284e-01, -2.394e-02, -1.810e-02, 4.934e-02, -8.820e-03, 5.396e-03, -1.351e-02, 2.477e-04, -2.774e-02, 2.393e-02, 4.187e-02, -3.830e-02, -1.094e-02) * s[2][2][0];
	r0 += M4(-4.973e-02, -5.158e-02, -7.502e-03, -1.003e-01, -2.291e-02, -1.257e-02, -1.707e-02, 1.061e-02, 4.556e-03, -1.729e-02, -1.264e-03, -2.185e-02, -5.203e-02, -5.744e-02, -7.182e-02, 2.871e-01) * s[2][2][1];
	r0 += V4(2.113e-03, 2.145e-03, 2.833e-03, 2.711e-03);
	r0 = tanh(r0);
	vec2 opt = 0.5 * LUMA_pt;
	vec2 fpos = (vec2(opos) + vec2(0.5)) * opt;
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0.x + rcas_tex(fpos + vec2(0.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r0.y + rcas_tex(fpos + vec2(1.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(0, 1), vec4(r0.z + rcas_tex(fpos + vec2(0.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 1), vec4(r0.w + rcas_tex(fpos + vec2(1.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
}
