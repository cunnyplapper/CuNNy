// CuNNy 4x8C RCAS DS
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

// FSR mpv | modified
// Copyright (c) 2021 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// FidelityFX FSR v1.0.2 by AMD
// ported to mpv by agyild

//!DESC CuNNy-EASU
//!HOOK LUMA
//!BIND LUMA
//!SAVE easu
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
//!COMPONENTS 1

float APrxLoRcpF1(float a) {
	return uintBitsToFloat(uint(0x7ef07ebb) - floatBitsToUint(a));
}

float APrxLoRsqF1(float a) {
	return uintBitsToFloat(uint(0x5f347d74) - (floatBitsToUint(a) >> uint(1)));
}

float AMin3F1(float x, float y, float z) {
	return min(x, min(y, z));
}

float AMax3F1(float x, float y, float z) {
	return max(x, max(y, z));
}

void tap(inout float aC, inout float aW, vec2 off, vec2 dir, vec2 len,
         float lob, float clp, float c){
	vec2 v;
	v.x = (off.x * ( dir.x)) + (off.y * dir.y);
	v.y = (off.x * (-dir.y)) + (off.y * dir.x);
	v *= len;
	float d2 = v.x * v.x + v.y * v.y;
	d2 = min(d2, clp);
	float wB = float(2.0 / 5.0) * d2 + -1.0;
	float wA = lob * d2 + -1.0;
	wB *= wB;
	wA *= wA;
	wB = float(25.0 / 16.0) * wB + float(-(25.0 / 16.0 - 1.0));
	float w = wB * wA;
	aC += c * w;
	aW += w;
}

void set(inout vec2 dir, inout float len, vec2 pp, bool biS, bool biT,
         bool biU, bool biV, float lA, float lB, float lC, float lD, float lE){
	float w = 0.0;
	if (biS)
		w = (1.0 - pp.x) * (1.0 - pp.y);
	if (biT)
		w =        pp.x  * (1.0 - pp.y);
	if (biU)
		w = (1.0 - pp.x) *        pp.y;
	if (biV)
		w =        pp.x  *        pp.y;
	float dc = lD - lC;
	float cb = lC - lB;
	float lenX = max(abs(dc), abs(cb));
	lenX = APrxLoRcpF1(lenX);
	float dirX = lD - lB;
	lenX = clamp(abs(dirX) * lenX, 0.0, 1.0);
	lenX *= lenX;
	float ec = lE - lC;
	float ca = lC - lA;
	float lenY = max(abs(ec), abs(ca));
	lenY = APrxLoRcpF1(lenY);
	float dirY = lE - lA;
	lenY = clamp(abs(dirY) * lenY, 0.0, 1.0);
	lenY *= lenY;
	dir += vec2(dirX, dirY) * w;
	len += dot(vec2(w), vec2(lenX, lenY));
}

vec4 hook() {
	vec4 pix = vec4(0.0, 0.0, 0.0, 1.0);
	vec2 pp = LUMA_pos * LUMA_size - vec2(0.5);
	vec2 fp = floor(pp);
	pp -= fp;
#if (defined(LUMA_gather) && (__VERSION__ >= 400 || (GL_ES && __VERSION__ >= 310)))
	vec4 bczzL = LUMA_gather(vec2((fp + vec2(1.0, -1.0)) * LUMA_pt), 0);
	vec4 ijfeL = LUMA_gather(vec2((fp + vec2(0.0,  1.0)) * LUMA_pt), 0);
	vec4 klhgL = LUMA_gather(vec2((fp + vec2(2.0,  1.0)) * LUMA_pt), 0);
	vec4 zzonL = LUMA_gather(vec2((fp + vec2(1.0,  3.0)) * LUMA_pt), 0);
#else
	float b = LUMA_tex(vec2((fp + vec2(0.5, -0.5)) * LUMA_pt)).r;
	float c = LUMA_tex(vec2((fp + vec2(1.5, -0.5)) * LUMA_pt)).r;
	float e = LUMA_tex(vec2((fp + vec2(-0.5, 0.5)) * LUMA_pt)).r;
	float f = LUMA_tex(vec2((fp + vec2( 0.5, 0.5)) * LUMA_pt)).r;
	float g = LUMA_tex(vec2((fp + vec2( 1.5, 0.5)) * LUMA_pt)).r;
	float h = LUMA_tex(vec2((fp + vec2( 2.5, 0.5)) * LUMA_pt)).r;
	float i = LUMA_tex(vec2((fp + vec2(-0.5, 1.5)) * LUMA_pt)).r;
	float j = LUMA_tex(vec2((fp + vec2( 0.5, 1.5)) * LUMA_pt)).r;
	float k = LUMA_tex(vec2((fp + vec2( 1.5, 1.5)) * LUMA_pt)).r;
	float l = LUMA_tex(vec2((fp + vec2( 2.5, 1.5)) * LUMA_pt)).r;
	float n = LUMA_tex(vec2((fp + vec2(0.5, 2.5) ) * LUMA_pt)).r;
	float o = LUMA_tex(vec2((fp + vec2(1.5, 2.5) ) * LUMA_pt)).r;
	vec4 bczzL = vec4(b, c, 0.0, 0.0);
	vec4 ijfeL = vec4(i, j, f, e);
	vec4 klhgL = vec4(k, l, h, g);
	vec4 zzonL = vec4(0.0, 0.0, o, n);
#endif
	float bL = bczzL.x;
	float cL = bczzL.y;
	float iL = ijfeL.x;
	float jL = ijfeL.y;
	float fL = ijfeL.z;
	float eL = ijfeL.w;
	float kL = klhgL.x;
	float lL = klhgL.y;
	float hL = klhgL.z;
	float gL = klhgL.w;
	float oL = zzonL.z;
	float nL = zzonL.w;
	vec2 dir = vec2(0.0);
	float len = 0.0;
	set(dir, len, pp, true, false, false, false, bL, eL, fL, gL, jL);
	set(dir, len, pp, false, true, false, false, cL, fL, gL, hL, kL);
	set(dir, len, pp, false, false, true, false, fL, iL, jL, kL, nL);
	set(dir, len, pp, false, false, false, true, gL, jL, kL, lL, oL);
	vec2 dir2 = dir * dir;
	float dirR = dir2.x + dir2.y;
	bool zro = dirR < float(1.0 / 32768.0);
	dirR = APrxLoRsqF1(dirR);
	dirR = zro ? 1.0 : dirR;
	dir.x = zro ? 1.0 : dir.x;
	dir *= vec2(dirR);
	len = len * 0.5;
	len *= len;
	float stretch = (dir.x * dir.x + dir.y * dir.y) * APrxLoRcpF1(max(abs(dir.x), abs(dir.y)));
	vec2 len2 = vec2(1.0 + (stretch - 1.0) * len, 1.0 + -0.5 * len);
	float lob = 0.5 + float((1.0 / 4.0 - 0.04) - 0.5) * len;
	float clp = APrxLoRcpF1(lob);
	float aC = 0.0;
	float aW = 0.0;
	tap(aC, aW, vec2( 0.0,-1.0) - pp, dir, len2, lob, clp, bL);
	tap(aC, aW, vec2( 1.0,-1.0) - pp, dir, len2, lob, clp, cL);
	tap(aC, aW, vec2(-1.0, 1.0) - pp, dir, len2, lob, clp, iL);
	tap(aC, aW, vec2( 0.0, 1.0) - pp, dir, len2, lob, clp, jL);
	tap(aC, aW, vec2( 0.0, 0.0) - pp, dir, len2, lob, clp, fL);
	tap(aC, aW, vec2(-1.0, 0.0) - pp, dir, len2, lob, clp, eL);
	tap(aC, aW, vec2( 1.0, 1.0) - pp, dir, len2, lob, clp, kL);
	tap(aC, aW, vec2( 2.0, 1.0) - pp, dir, len2, lob, clp, lL);
	tap(aC, aW, vec2( 2.0, 0.0) - pp, dir, len2, lob, clp, hL);
	tap(aC, aW, vec2( 1.0, 0.0) - pp, dir, len2, lob, clp, gL);
	tap(aC, aW, vec2( 1.0, 2.0) - pp, dir, len2, lob, clp, oL);
	tap(aC, aW, vec2( 0.0, 2.0) - pp, dir, len2, lob, clp, nL);
	pix.r = aC / aW;
	float min1 = min(AMin3F1(fL, gL, jL), kL);
	float max1 = max(AMax3F1(fL, gL, jL), kL);
	pix.r = clamp(pix.r, min1, max1);
	pix.r = clamp(pix.r, 0.0, 1.0);
	return pix;
}

//!DESC CuNNy-RCAS
//!HOOK LUMA
//!BIND easu
//!SAVE rcas
//!WIDTH easu.w
//!HEIGHT easu.h
//!COMPONENTS 1

// CuNNy: do not change unless changed during training as well
#define SHARPNESS 2.0
#define FSR_RCAS_LIMIT (0.25 - (1.0 / 16.0))

float APrxMedRcpF1(float a) {
	float b = uintBitsToFloat(uint(0x7ef19fff) - floatBitsToUint(a));
	return b * (-b * a + 2.0);
}

float AMax3F1(float x, float y, float z) {
	return max(x, max(y, z)); 
}


float AMin3F1(float x, float y, float z) {
	return min(x, min(y, z));
}

vec4 hook() {
#if (defined(easu_gather) && (__VERSION__ >= 400 || (GL_ES && __VERSION__ >= 310)))
	vec3 bde = easu_gather(easu_pos + easu_pt * vec2(-0.5), 0).xyz;
	float b = bde.z;
	float d = bde.x;
	float e = bde.y;
	vec2 fh = easu_gather(easu_pos + easu_pt * vec2(0.5), 0).zx;
	float f = fh.x;
	float h = fh.y;
#else
	float b = easu_texOff(vec2( 0.0, -1.0)).r;
	float d = easu_texOff(vec2(-1.0,  0.0)).r;
	float e = easu_tex(easu_pos).r;
	float f = easu_texOff(vec2(1.0, 0.0)).r;
	float h = easu_texOff(vec2(0.0, 1.0)).r;
#endif
	float mn1L = min(AMin3F1(b, d, f), h);
	float mx1L = max(AMax3F1(b, d, f), h);
	vec2 peakC = vec2(1.0, -1.0 * 4.0);
	float hitMinL = min(mn1L, e) / (4.0 * mx1L);
	float hitMaxL = (peakC.x - max(mx1L, e)) / (4.0 * mn1L + peakC.y);
	float lobeL = max(-hitMinL, hitMaxL);
	float lobe = max(float(-FSR_RCAS_LIMIT), min(lobeL, 0.0)) * exp2(-clamp(float(SHARPNESS), 0.0, 2.0));
	float nz = 0.25 * b + 0.25 * d + 0.25 * f + 0.25 * h - e;
	nz = clamp(abs(nz) * APrxMedRcpF1(AMax3F1(AMax3F1(b, d, e), f, h) - AMin3F1(AMin3F1(b, d, e), f, h)), 0.0, 1.0);
	nz = -0.5 * nz + 1.0;
	lobe *= nz;
	float rcpL = APrxMedRcpF1(4.0 * lobe + 1.0);
	vec4 pix = vec4(0.0, 0.0, 0.0, 1.0);
	pix.r = float((lobe * b + lobe * d + lobe * h + lobe * f + e) * rcpL);
	return pix;
}


//!DESC CuNNy-4x8C-RCAS-DS-in
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND LUMA
//!SAVE in
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
	#define V4 f16vec4
	#define M4 f16mat4
	#define F float16_t
#else
	#define V4 vec4
	#define M4 mat4
	#define F float
#endif
#define l0(x, y) F(texelFetch(LUMA_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(1, 1) + ivec2(0, 0), 0).r)
vec4 f0(F s0_0, F s0_1, F s0_2, F s0_3, F s0_4, F s0_5, F s0_6, F s0_7, F s0_8) {
	V4 r = V4(0.0);
	r += V4(1.241e-01, 1.929e-01, -5.454e-04, 6.968e-03) * s0_0;
	r += V4(-1.321e-01, 1.801e-01, 1.214e-03, -2.619e-02) * s0_1;
	r += V4(7.679e-02, 2.054e-02, -1.721e-03, 1.995e-02) * s0_2;
	r += V4(-1.544e-02, 4.685e-03, 4.541e-01, 3.018e-02) * s0_3;
	r += V4(3.705e-02, -3.623e-01, -4.537e-01, -3.913e-02) * s0_4;
	r += V4(-6.380e-03, -9.440e-02, -1.303e-03, -3.799e-01) * s0_5;
	r += V4(-2.501e-01, 1.716e-03, 1.576e-04, -2.868e-02) * s0_6;
	r += V4(1.252e-01, -3.074e-02, -1.008e-03, 2.562e-01) * s0_7;
	r += V4(-8.369e-02, 8.663e-02, 8.000e-04, 1.587e-01) * s0_8;
	r += V4(1.044e-01, -6.450e-03, 4.720e-04, 1.119e-03);
	return vec4(r);
	
}
vec4 f1(F s0_0, F s0_1, F s0_2, F s0_3, F s0_4, F s0_5, F s0_6, F s0_7, F s0_8) {
	V4 r = V4(0.0);
	r += V4(2.248e-01, 7.845e-03, 2.796e-02, 5.208e-02) * s0_0;
	r += V4(-2.822e-03, -2.672e-02, -2.305e-01, -7.837e-02) * s0_1;
	r += V4(1.933e-03, 1.399e-02, -9.186e-03, 4.762e-02) * s0_2;
	r += V4(-5.651e-02, -5.083e-03, -2.523e-01, 1.721e-01) * s0_3;
	r += V4(1.333e-01, 5.137e-02, 1.224e-01, -2.094e-01) * s0_4;
	r += V4(-1.872e-02, -4.223e-02, 1.062e-01, -1.861e-01) * s0_5;
	r += V4(1.047e-02, -1.582e-02, 1.020e-01, 6.274e-02) * s0_6;
	r += V4(-2.746e-02, 6.686e-04, -6.338e-02, -2.613e-02) * s0_7;
	r += V4(-8.503e-04, -3.271e-01, -3.552e-02, 9.868e-02) * s0_8;
	r += V4(-9.003e-03, 3.024e-02, 2.155e-01, -1.072e-03);
	return vec4(r);
	
}
void hook() {
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + ivec2(gl_LocalInvocationID.xy);
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = LUMA_pt;
	F s0_0 = l0(-1, -1);
	F s0_1 = l0(0, -1);
	F s0_2 = l0(1, -1);
	F s0_3 = l0(-1, 0);
	F s0_4 = l0(0, 0);
	F s0_5 = l0(1, 0);
	F s0_6 = l0(-1, 1);
	F s0_7 = l0(0, 1);
	F s0_8 = l0(1, 1);
	imageStore(out_image, opos + ivec2(0, 0), f0(s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8));
	imageStore(out_image, opos + ivec2(1, 0), f1(s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8));
}


//!DESC CuNNy-4x8C-RCAS-DS-conv1
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND in
//!BIND LUMA
//!SAVE conv1
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
	#define V4 f16vec4
	#define M4 f16mat4
	#define F float16_t
#else
	#define V4 vec4
	#define M4 mat4
	#define F float
#endif
#define l0(x, y) V4(texelFetch(in_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(in_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
vec4 f0(V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8, V4 s2_0, V4 s2_1, V4 s2_2, V4 s2_3, V4 s2_4, V4 s2_5, V4 s2_6, V4 s2_7, V4 s2_8, V4 s3_0, V4 s3_1, V4 s3_2, V4 s3_3, V4 s3_4, V4 s3_5, V4 s3_6, V4 s3_7, V4 s3_8) {
	V4 r = V4(0.0);
	r += M4(-6.433e-03, 8.377e-02, -6.064e-02, 6.757e-02, -1.215e-01, -1.101e-01, 2.949e-02, -2.093e-01, 1.209e-01, -1.026e-01, 1.863e-02, -5.106e-02, 5.553e-01, -1.597e-01, 1.687e-01, -1.066e-01) * s0_0;
	r += M4(4.265e-01, 1.593e-01, -2.050e-02, -6.445e-02, -3.297e-02, 3.384e-02, 2.140e-01, 1.314e-01, 3.146e-01, -1.480e-01, -1.678e-03, -1.519e-01, 2.340e-01, -6.334e-02, 8.661e-01, -1.313e-01) * s0_1;
	r += M4(-1.742e-01, 7.858e-03, 1.181e-01, -1.006e-01, 1.711e-03, -4.796e-03, -1.126e-01, 2.993e-02, -3.148e-01, -1.830e-01, -5.804e-01, -7.593e-02, 1.381e-01, -1.602e-01, -2.448e-02, -1.193e-02) * s0_2;
	r += M4(-1.759e-02, -1.482e-01, -8.911e-02, 6.341e-02, -1.552e-01, -1.920e-01, 1.258e-01, -2.209e-01, 2.322e-01, 2.144e-01, -1.814e-01, -3.183e-02, 1.382e-01, 5.656e-01, 6.020e-02, 7.878e-01) * s0_3;
	r += M4(5.954e-02, -1.193e-01, -8.075e-02, -1.568e-01, -3.385e-01, -2.183e-01, -3.628e-02, 6.225e-02, -1.341e-01, 2.483e-01, -1.683e-01, 3.730e-01, 3.662e-01, -9.296e-02, -2.608e-01, 1.289e-01) * s0_4;
	r += M4(-1.615e-01, 1.532e-01, 7.377e-02, -7.255e-02, -3.171e-01, 2.319e-02, 2.823e-01, -1.887e-03, 4.439e-01, -1.922e-01, 4.981e-01, 2.868e-02, 3.925e-02, 1.450e-01, -4.581e-02, 1.382e-01) * s0_5;
	r += M4(-3.033e-02, 2.231e-02, 1.173e-02, -1.697e-01, -7.764e-02, 3.037e-01, -6.219e-02, 2.651e-01, -9.095e-02, 8.750e-02, 8.193e-03, 1.723e-01, 4.235e-03, 9.967e-02, -6.176e-02, 6.618e-02) * s0_6;
	r += M4(1.072e-02, -9.438e-02, 5.751e-02, 1.894e-04, -1.008e-01, 4.536e-01, 4.048e-02, 1.959e-01, -1.455e-01, 3.168e-01, -5.830e-02, -9.937e-02, -2.145e-01, 1.302e-01, 3.398e-02, 5.617e-02) * s0_7;
	r += M4(9.788e-02, -5.535e-02, -2.790e-02, -1.828e-02, -8.647e-02, 1.623e-01, 6.254e-02, -4.038e-01, 3.246e-01, -1.783e-01, -3.076e-03, -4.033e-02, 2.107e-02, -1.001e-01, -7.439e-03, -2.097e-02) * s0_8;
	r += M4(1.376e-02, 1.387e-02, -8.951e-02, 1.141e-01, 7.206e-03, -8.860e-04, 1.289e-01, -8.277e-02, 6.614e-04, 1.055e-01, 5.097e-02, -4.641e-02, -3.089e-02, -2.954e-01, 4.696e-01, 1.716e-01) * s1_0;
	r += M4(1.107e-01, 1.425e-01, 3.055e-02, 1.253e-01, -1.011e-02, 6.027e-02, 1.470e-01, -4.566e-02, 9.222e-02, 3.916e-02, 1.984e-01, 1.840e-01, -7.429e-02, -2.155e-03, 7.588e-01, -3.027e-02) * s1_1;
	r += M4(-2.236e-01, 2.958e-01, 2.887e-01, -1.401e-01, -6.976e-02, 8.805e-03, 9.569e-02, 1.495e-01, 2.475e-02, 5.259e-02, 5.655e-01, 1.874e-01, -8.171e-02, -6.242e-02, 7.342e-02, -1.241e-01) * s1_2;
	r += M4(7.581e-02, -9.766e-02, -2.698e-02, -5.852e-03, 1.499e-01, 7.368e-02, 8.517e-02, 1.145e-01, 4.718e-03, -1.859e-01, -1.479e-01, -6.616e-02, -4.421e-01, -4.998e-01, 1.905e-02, -6.031e-02) * s1_3;
	r += M4(-2.112e-01, -1.657e-01, -7.772e-02, 3.740e-03, -8.723e-02, 3.363e-01, -4.548e-02, 1.128e-01, -3.061e-01, -7.132e-01, -2.446e-01, 6.078e-02, -2.632e-01, 1.176e-01, -3.285e-02, -1.516e-03) * s1_4;
	r += M4(-4.878e-02, -5.324e-02, -1.090e-01, -1.601e-01, 2.855e-01, -1.188e-01, 6.159e-02, -3.620e-02, 3.693e-01, -2.241e-02, -6.394e-01, 1.876e-01, 7.626e-02, 1.684e-01, -5.954e-02, 1.191e-01) * s1_5;
	r += M4(-7.625e-02, -1.286e-02, -7.761e-03, -1.762e-01, 2.832e-02, 4.757e-02, -1.329e-01, 3.043e-01, -1.119e-01, -6.084e-02, 5.980e-02, -4.297e-02, -7.697e-02, -1.094e-01, 1.014e-02, -2.569e-02) * s1_6;
	r += M4(-3.042e-02, -1.552e-01, 9.120e-02, 2.310e-03, 1.022e-01, -1.775e-01, -6.749e-02, -1.658e-01, -2.030e-02, -5.559e-02, -8.869e-02, -5.441e-02, -1.651e-01, -1.065e-01, -3.296e-02, -3.161e-02) * s1_7;
	r += M4(1.453e-01, 1.240e-01, -4.802e-02, 1.754e-01, 3.110e-01, 2.490e-01, -1.797e-01, -8.823e-02, 1.254e-01, 1.319e-01, -1.941e-02, 1.829e-02, -3.382e-02, -4.630e-02, 1.317e-02, -2.048e-02) * s1_8;
	r += M4(-5.023e-02, -9.272e-03, -1.312e-01, -1.143e-02, -1.831e+00, 2.149e-01, -7.314e-02, 2.185e+00, -1.891e-02, -1.018e-01, 2.054e-01, -2.713e-02, 9.128e-03, 1.017e-01, 2.397e-01, 2.096e-01) * s2_0;
	r += M4(2.697e-02, -1.362e-01, 1.817e-02, -1.596e-02, 4.776e-01, -3.619e-01, -3.076e-01, 3.597e-01, -8.454e-02, 2.449e-03, 1.190e-01, 6.524e-02, -1.964e-01, 2.097e-02, 1.424e-01, 1.155e-01) * s2_1;
	r += M4(9.059e-02, -2.044e-02, -7.675e-02, 1.089e-02, 7.313e-02, 5.237e-02, 9.751e-02, 6.810e-01, 6.517e-02, 6.523e-02, 1.519e-01, -2.339e-02, 1.222e-02, 1.290e-01, -3.750e-02, -1.984e-02) * s2_2;
	r += M4(-1.132e-01, -1.001e-02, -4.700e-02, 9.794e-02, -4.293e-01, 7.095e-01, 2.456e-01, 8.975e-01, 1.335e-01, 1.195e-01, -1.633e-01, -2.760e-01, -2.963e-01, -3.301e-02, -5.669e-02, 6.042e-02) * s2_3;
	r += M4(-6.765e-02, 5.238e-02, -1.814e-01, 6.279e-03, 4.287e-01, -3.881e-01, 1.842e-01, -4.063e-01, 7.837e-02, 1.195e-01, -9.131e-02, -9.255e-02, -1.337e-01, -3.464e-01, 4.352e-02, 4.672e-01) * s2_4;
	r += M4(5.874e-02, -2.826e-02, 1.390e-01, -5.864e-02, -3.588e-02, -7.862e-02, 2.201e-01, 3.268e-01, 6.439e-02, -2.651e-02, -7.247e-02, 2.026e-01, 1.630e-01, -2.046e-01, -2.756e-01, -2.900e-01) * s2_5;
	r += M4(1.098e-01, -8.759e-04, -5.363e-03, -1.514e-01, 4.579e-02, -3.842e-01, 5.763e-03, 1.273e-01, 7.189e-02, 9.926e-02, 4.028e-02, 9.495e-02, 8.071e-02, -1.360e-01, -9.970e-04, -1.428e-01) * s2_6;
	r += M4(1.100e-01, 5.181e-03, 7.505e-02, -2.083e-02, -3.805e-01, 1.113e-01, -2.266e-01, -2.816e-01, -1.165e-01, -5.369e-02, -1.061e-02, -1.217e-03, -2.598e-02, -5.995e-01, -1.704e-02, 6.648e-02) * s2_7;
	r += M4(8.921e-02, 1.598e-01, -6.176e-02, 4.499e-02, -8.138e-02, 7.042e-02, -3.731e-02, -2.704e-01, 1.633e-01, -9.655e-02, 5.885e-02, 1.120e-02, -4.569e-03, 1.280e-01, 8.642e-05, -3.728e-03) * s2_8;
	r += M4(-1.893e-01, -1.755e-01, -7.627e-02, 2.691e-01, 6.077e-02, -5.537e-02, -1.595e-01, 2.696e-01, -5.197e-02, -6.729e-02, 2.452e-01, 3.909e-02, 6.665e-02, -5.150e-02, 1.168e-01, 9.673e-03) * s3_0;
	r += M4(-4.288e-01, 1.094e-01, -6.600e-02, 1.825e-01, 1.080e-01, -5.823e-02, -1.237e-01, -4.229e-02, -1.152e-01, 4.438e-02, 9.109e-02, 3.661e-02, 9.099e-02, -4.032e-02, 2.907e-01, 1.140e-01) * s3_1;
	r += M4(-4.017e-01, -3.557e-01, 4.987e-01, 2.197e-01, -9.482e-02, 1.878e-02, -1.684e-02, -1.104e-01, 1.153e-01, -1.222e-01, 2.763e-01, 1.598e-01, 3.439e-02, 3.897e-02, -2.634e-02, -8.924e-02) * s3_2;
	r += M4(-1.725e-01, 1.080e+00, 2.110e-01, 9.083e-01, -1.215e-02, -8.765e-02, 1.864e-02, -2.044e-02, 1.650e-01, 3.865e-01, 1.352e-03, -3.859e-01, 8.076e-03, 4.520e-02, 1.858e-02, -2.110e-02) * s3_3;
	r += M4(1.046e+00, 8.364e-01, 1.606e-01, -1.141e+00, -5.526e-02, 1.367e-01, -3.994e-02, 4.496e-02, 1.153e-01, 2.325e-01, 7.502e-02, 4.844e-02, 3.679e-02, 1.558e-01, 1.151e-02, 2.303e-02) * s3_4;
	r += M4(6.497e-01, 1.853e-01, -9.283e-02, 5.015e-01, 5.492e-02, -3.074e-02, -8.749e-03, 1.660e-02, 3.118e-02, -1.552e-01, -5.801e-01, -9.826e-02, -4.258e-03, -2.579e-01, -2.270e-01, -4.390e-02) * s3_5;
	r += M4(-5.615e-01, -1.530e-01, 2.018e-01, -3.307e-01, -1.652e-01, -5.950e-02, -2.062e-02, 1.335e-01, -3.917e-02, -9.458e-02, -9.638e-04, -2.122e-02, 5.009e-02, 8.475e-02, -9.882e-03, -5.719e-02) * s3_6;
	r += M4(1.013e+00, -1.341e+00, 3.156e-01, -6.143e-01, -5.083e-02, -1.943e-02, -6.227e-02, 3.732e-04, -2.097e-01, -6.082e-01, 4.668e-02, 3.282e-02, -1.360e-01, -6.000e-03, -3.313e-02, 6.759e-02) * s3_7;
	r += M4(1.802e+00, 1.208e-01, 1.927e-01, -3.427e+00, -2.704e-02, 3.583e-02, 1.656e-02, -6.917e-02, -8.566e-02, 7.912e-02, 3.303e-02, 9.162e-02, 1.635e-01, -1.354e-02, 1.517e-02, -3.530e-02) * s3_8;
	r += V4(-8.918e-02, -3.888e-02, -4.080e-02, 6.958e-02);
	return vec4(r);
	
}
vec4 f1(V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8, V4 s2_0, V4 s2_1, V4 s2_2, V4 s2_3, V4 s2_4, V4 s2_5, V4 s2_6, V4 s2_7, V4 s2_8, V4 s3_0, V4 s3_1, V4 s3_2, V4 s3_3, V4 s3_4, V4 s3_5, V4 s3_6, V4 s3_7, V4 s3_8) {
	V4 r = V4(0.0);
	r += M4(-3.677e-02, -1.338e-01, -3.430e-02, -4.709e-02, 9.463e-02, 1.547e-01, -1.027e-01, 9.319e-02, -9.426e-02, 7.915e-02, 3.491e-02, -9.622e-03, 1.211e-01, 7.355e-01, 9.493e-02, 4.294e-02) * s0_0;
	r += M4(-8.200e-02, -5.478e-03, -4.045e-02, -4.560e-03, -1.112e-01, 1.987e-01, 1.061e-01, 9.700e-02, -1.363e-02, 3.749e-01, 3.831e-01, -5.963e-02, 5.804e-02, 4.831e-01, 2.116e-01, -5.120e-02) * s0_1;
	r += M4(-7.669e-02, -9.162e-02, -4.273e-02, 1.398e-01, -1.999e-01, 1.480e-01, 2.954e-02, 5.938e-02, 9.592e-02, 2.646e-01, 2.986e-02, -9.725e-03, 1.453e-01, -1.341e-02, 3.457e-02, 7.192e-02) * s0_2;
	r += M4(-7.242e-02, -3.142e-02, 4.119e-02, -6.108e-02, -3.075e-02, -2.841e-01, -1.628e-01, -2.055e-01, -8.691e-02, -5.547e-02, 6.277e-02, -4.802e-02, -9.691e-02, -1.219e-01, 1.023e-01, -1.372e-02) * s0_3;
	r += M4(-2.894e-01, 4.522e-02, 1.487e-01, -2.620e-01, -4.415e-01, 1.419e-01, 1.030e-01, -6.129e-02, 9.320e-02, -4.909e-01, 1.087e+00, -2.442e-01, 9.212e-02, -1.753e-01, -7.414e-02, 1.988e-01) * s0_4;
	r += M4(-3.449e-01, 1.370e-01, 5.609e-02, 1.361e-01, -3.761e-01, 3.088e-01, -6.660e-02, -5.146e-03, 5.946e-02, -6.547e-01, -1.231e-01, -8.700e-02, -4.036e-02, -4.114e-02, -6.045e-02, -1.239e-01) * s0_5;
	r += M4(1.229e-01, -9.708e-03, -6.633e-02, 7.707e-03, -1.799e-01, -4.591e-02, -1.782e-01, 1.199e-01, -5.119e-02, -4.585e-02, -8.291e-03, -3.847e-02, 1.738e-01, 2.764e-02, -1.489e-01, 1.589e-01) * s0_6;
	r += M4(1.385e-01, -3.755e-02, -9.291e-02, -1.499e-02, -3.640e-01, -1.866e-01, -1.786e-01, -9.219e-02, -1.687e-01, -1.084e-01, -4.694e-02, 3.741e-02, -8.374e-02, 7.484e-03, -2.937e-02, -5.509e-02) * s0_7;
	r += M4(5.829e-02, 1.575e-02, -9.394e-02, 6.084e-02, -2.326e-02, 1.016e-01, -2.073e-01, -5.335e-02, 5.863e-02, -2.029e-01, -1.700e-01, 4.145e-02, 3.173e-03, -2.214e-02, 3.709e-03, -2.731e-02) * s0_8;
	r += M4(9.639e-02, -8.944e-02, 2.464e-02, -3.599e-02, 2.932e-02, 1.176e-01, -9.334e-02, -1.144e-02, 4.688e-02, 1.212e-01, 7.531e-03, -9.714e-02, -5.535e-01, 1.810e-02, -2.821e-01, -1.687e-01) * s1_0;
	r += M4(8.007e-02, -1.851e-01, -2.524e-01, 2.962e-02, -8.642e-03, 2.184e-01, 1.188e-01, 4.461e-02, 1.872e-01, -1.587e-01, -8.178e-02, 1.200e-01, -7.728e-01, 2.425e-01, -2.569e-01, -8.416e-02) * s1_1;
	r += M4(-7.984e-02, -1.238e-01, 3.102e-01, -1.058e-01, -1.057e-01, -2.100e-02, -5.859e-02, -6.331e-02, -3.056e-01, -5.777e-01, -1.151e-01, -1.874e-01, -6.404e-02, 3.649e-02, -5.884e-02, 3.965e-03) * s1_2;
	r += M4(-1.028e-02, 1.854e-03, 4.622e-02, 1.953e-02, 3.078e-02, -1.472e-01, 3.332e-02, 2.275e-02, 1.208e-01, -2.569e-02, -1.538e-01, -1.886e-03, 2.464e-01, 5.343e-03, 1.561e-01, -5.018e-02) * s1_3;
	r += M4(-6.476e-02, 1.977e-01, 4.128e-02, 3.510e-02, 2.760e-01, -4.151e-01, 2.290e-01, -1.558e-01, 1.976e-01, 4.146e-02, 1.843e-01, -8.630e-02, -1.875e-01, 1.595e-02, -2.029e-01, 7.113e-02) * s1_4;
	r += M4(-2.686e-01, 3.376e-01, -1.023e-01, -6.037e-02, 1.482e-01, -1.547e-03, -2.111e-02, -5.014e-02, -7.824e-01, 3.808e-01, -8.137e-01, 4.229e-01, -3.026e-01, 9.745e-03, 1.104e-01, -1.499e-01) * s1_5;
	r += M4(1.480e-01, -2.948e-02, -6.019e-02, -8.455e-03, 6.544e-02, -6.861e-02, -3.328e-01, 1.115e-01, 1.547e-02, -6.125e-02, 1.216e-01, -6.764e-02, 1.771e-01, -1.431e-02, -1.072e-01, 3.176e-02) * s1_6;
	r += M4(1.657e-01, -1.252e-01, 1.172e-03, -2.457e-02, 1.273e-01, -1.685e-01, -1.884e-01, 6.437e-02, 9.359e-03, 1.963e-01, -7.410e-02, -5.416e-02, 4.515e-02, 9.062e-02, -5.494e-03, -4.993e-02) * s1_7;
	r += M4(1.699e-01, -2.385e-02, -3.537e-02, 1.402e-01, 2.236e-01, -4.089e-02, -2.223e-01, 3.293e-02, -2.628e-01, 2.353e-01, -6.213e-02, -2.839e-02, -1.136e-02, -6.859e-03, 6.888e-02, -7.179e-02) * s1_8;
	r += M4(-6.260e-02, -2.369e-02, -2.969e-02, -2.525e-02, 8.063e-01, -3.933e-01, 5.823e-01, 2.616e+00, -1.393e-01, 2.644e-02, -3.376e-02, -2.620e-02, -1.686e-01, -4.481e-02, 9.981e-02, -3.486e-01) * s2_0;
	r += M4(4.180e-02, -3.077e-01, 1.185e-01, -6.014e-02, 3.922e-01, -6.117e-01, 6.059e-01, 2.627e+00, -1.510e-01, 1.889e-01, 7.604e-02, -7.659e-02, 3.275e-01, 6.567e-02, -1.622e-01, -4.018e-02) * s2_1;
	r += M4(8.316e-02, 1.582e-02, -1.198e-01, 6.508e-02, 2.225e-01, -1.527e-01, 2.111e-02, 2.594e-01, 6.559e-02, 5.641e-03, -9.963e-02, 3.252e-02, -1.612e-01, -1.448e-01, -3.835e-01, -4.702e-02) * s2_2;
	r += M4(3.853e-02, 7.150e-02, -6.292e-02, 2.371e-01, -3.773e-01, -3.778e-01, -2.194e-01, 1.053e+00, 1.259e-01, 8.325e-02, -4.285e-02, -6.817e-02, 2.017e-01, 7.341e-02, 5.973e-02, 4.584e-01) * s2_3;
	r += M4(-1.790e-01, -6.843e-02, -7.849e-02, 2.037e-02, -2.103e-01, 4.252e-03, -4.342e-01, 6.814e-01, -3.332e-02, -5.180e-02, -4.620e-02, -1.442e-02, 5.844e-02, 2.241e-01, -2.464e-01, 8.230e-01) * s2_4;
	r += M4(4.797e-02, -1.986e-02, 7.284e-02, -3.993e-02, -1.285e-01, 2.724e-02, -9.570e-02, 1.965e-02, -9.572e-02, -9.303e-02, 6.735e-02, 7.142e-02, 3.528e-01, 4.950e-02, -5.266e-02, 1.347e-01) * s2_5;
	r += M4(-7.952e-02, 2.406e-02, 1.184e-01, -5.510e-02, 1.220e-01, -1.967e-01, -2.004e-01, 3.558e-02, 1.335e-01, -4.354e-02, 1.104e-02, -4.819e-03, 2.172e-01, 4.781e-02, 5.319e-02, -9.173e-02) * s2_6;
	r += M4(6.766e-02, 1.120e-01, -1.328e-01, 7.584e-05, -4.933e-02, 2.396e-02, -4.834e-03, -3.411e-01, -1.055e-02, 1.559e-02, 2.746e-01, -3.566e-02, 2.009e-01, -2.975e-01, 4.016e-02, -7.344e-02) * s2_7;
	r += M4(-7.176e-02, -3.816e-02, 2.210e-02, 1.463e-01, 1.979e-02, 2.307e-01, 1.946e-01, 8.747e-02, -2.164e-01, 9.481e-02, -2.224e-01, 1.778e-02, -3.481e-01, 1.378e-01, 7.042e-02, -1.636e-01) * s2_8;
	r += M4(3.255e-01, -4.464e-01, 3.053e-02, 4.156e-01, 3.205e-01, -1.470e-01, 1.683e-01, 1.984e-02, 1.009e-01, 6.713e-02, -1.363e-01, 1.158e-02, -6.725e-02, 4.467e-03, 1.533e-01, -5.049e-02) * s3_0;
	r += M4(-2.244e-02, -5.079e-01, 5.098e-01, -2.338e-01, 1.112e-01, -1.603e-01, 9.334e-02, -6.367e-02, 1.005e-01, 1.051e-01, 1.354e-01, 1.916e-02, -8.618e-02, 1.376e-01, 1.394e-01, -6.737e-02) * s3_1;
	r += M4(-3.599e-01, -1.636e-01, -8.073e-01, -5.885e-01, -6.840e-02, -9.051e-02, -7.087e-02, -1.094e-01, -1.627e-02, -5.654e-02, -3.094e-01, -8.983e-02, -2.255e-02, 8.377e-02, -1.557e-01, 1.109e-02) * s3_2;
	r += M4(6.132e-01, 3.585e-01, -1.238e-01, 1.684e-01, -3.526e-02, 4.131e-02, -7.984e-02, -9.194e-02, 2.451e-02, 1.747e-01, -5.615e-02, -1.173e-01, -2.127e-02, -3.771e-02, 1.147e-01, 6.486e-03) * s3_3;
	r += M4(6.493e-02, -2.145e+00, -1.336e+00, -1.894e+00, 2.723e-02, 1.775e-02, 1.101e-02, -2.860e-02, 1.786e-01, 5.538e-02, -1.695e-01, 1.137e-01, -1.605e-01, 1.444e-01, -1.166e-01, -3.208e-02) * s3_4;
	r += M4(5.060e-01, 1.553e-01, -1.373e+00, -2.036e+00, 5.269e-02, 1.399e-01, -6.257e-02, -7.662e-03, 2.683e-01, 7.836e-02, 9.440e-02, -1.941e-01, 2.655e-02, 4.092e-02, -2.511e-01, -9.645e-02) * s3_5;
	r += M4(5.194e-01, 6.024e-01, -4.814e-01, -3.251e-01, 7.919e-02, -3.308e-02, -9.571e-02, -2.805e-02, 1.301e-01, -1.138e-01, -1.183e-01, -6.378e-02, 1.274e-02, -5.452e-02, -5.906e-02, 1.066e-02) * s3_6;
	r += M4(7.825e-01, 2.474e-01, -2.379e-01, -2.186e-01, -1.213e-02, -3.324e-02, 1.049e-02, -2.707e-02, 1.308e-02, -1.566e-01, 4.174e-01, -2.369e-01, 8.925e-02, -1.811e-01, -2.072e-03, 2.357e-02) * s3_7;
	r += M4(-5.873e-01, -3.428e-01, -1.363e-01, -2.461e+00, -2.890e-02, -3.988e-02, 4.317e-02, -5.432e-02, 9.701e-02, -5.816e-03, 2.482e-02, -2.927e-02, -1.175e-01, -1.042e-01, 1.124e-01, -3.147e-02) * s3_8;
	r += V4(1.087e-01, -3.234e-02, 9.278e-03, -2.167e-01);
	return vec4(r);
	
}
void hook() {
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + ivec2(gl_LocalInvocationID.xy);
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = in_pt;
	V4 s0_0 = l0(-1, -1);
	V4 s2_0 = l1(-1, -1);
	V4 s0_1 = l0(0, -1);
	V4 s2_1 = l1(0, -1);
	V4 s0_2 = l0(1, -1);
	V4 s2_2 = l1(1, -1);
	V4 s0_3 = l0(-1, 0);
	V4 s2_3 = l1(-1, 0);
	V4 s0_4 = l0(0, 0);
	V4 s2_4 = l1(0, 0);
	V4 s0_5 = l0(1, 0);
	V4 s2_5 = l1(1, 0);
	V4 s0_6 = l0(-1, 1);
	V4 s2_6 = l1(-1, 1);
	V4 s0_7 = l0(0, 1);
	V4 s2_7 = l1(0, 1);
	V4 s0_8 = l0(1, 1);
	V4 s2_8 = l1(1, 1);
	V4 s1_0 = -max(-s0_0, V4(0.0));
	V4 s1_1 = -max(-s0_1, V4(0.0));
	V4 s1_2 = -max(-s0_2, V4(0.0));
	V4 s1_3 = -max(-s0_3, V4(0.0));
	V4 s1_4 = -max(-s0_4, V4(0.0));
	V4 s1_5 = -max(-s0_5, V4(0.0));
	V4 s1_6 = -max(-s0_6, V4(0.0));
	V4 s1_7 = -max(-s0_7, V4(0.0));
	V4 s1_8 = -max(-s0_8, V4(0.0));
	s0_0 = max(s0_0, V4(0.0));
	s0_1 = max(s0_1, V4(0.0));
	s0_2 = max(s0_2, V4(0.0));
	s0_3 = max(s0_3, V4(0.0));
	s0_4 = max(s0_4, V4(0.0));
	s0_5 = max(s0_5, V4(0.0));
	s0_6 = max(s0_6, V4(0.0));
	s0_7 = max(s0_7, V4(0.0));
	s0_8 = max(s0_8, V4(0.0));
	V4 s3_0 = -max(-s2_0, V4(0.0));
	V4 s3_1 = -max(-s2_1, V4(0.0));
	V4 s3_2 = -max(-s2_2, V4(0.0));
	V4 s3_3 = -max(-s2_3, V4(0.0));
	V4 s3_4 = -max(-s2_4, V4(0.0));
	V4 s3_5 = -max(-s2_5, V4(0.0));
	V4 s3_6 = -max(-s2_6, V4(0.0));
	V4 s3_7 = -max(-s2_7, V4(0.0));
	V4 s3_8 = -max(-s2_8, V4(0.0));
	s2_0 = max(s2_0, V4(0.0));
	s2_1 = max(s2_1, V4(0.0));
	s2_2 = max(s2_2, V4(0.0));
	s2_3 = max(s2_3, V4(0.0));
	s2_4 = max(s2_4, V4(0.0));
	s2_5 = max(s2_5, V4(0.0));
	s2_6 = max(s2_6, V4(0.0));
	s2_7 = max(s2_7, V4(0.0));
	s2_8 = max(s2_8, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0(s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8, s2_0, s2_1, s2_2, s2_3, s2_4, s2_5, s2_6, s2_7, s2_8, s3_0, s3_1, s3_2, s3_3, s3_4, s3_5, s3_6, s3_7, s3_8));
	imageStore(out_image, opos + ivec2(1, 0), f1(s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8, s2_0, s2_1, s2_2, s2_3, s2_4, s2_5, s2_6, s2_7, s2_8, s3_0, s3_1, s3_2, s3_3, s3_4, s3_5, s3_6, s3_7, s3_8));
}


//!DESC CuNNy-4x8C-RCAS-DS-conv2
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv1
//!BIND LUMA
//!SAVE conv2
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
	#define V4 f16vec4
	#define M4 f16mat4
	#define F float16_t
#else
	#define V4 vec4
	#define M4 mat4
	#define F float
#endif
#define l0(x, y) V4(texelFetch(conv1_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv1_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
vec4 f0(V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8, V4 s2_0, V4 s2_1, V4 s2_2, V4 s2_3, V4 s2_4, V4 s2_5, V4 s2_6, V4 s2_7, V4 s2_8, V4 s3_0, V4 s3_1, V4 s3_2, V4 s3_3, V4 s3_4, V4 s3_5, V4 s3_6, V4 s3_7, V4 s3_8) {
	V4 r = V4(0.0);
	r += M4(-7.008e-02, 9.442e-03, -5.874e-02, -1.250e-01, 3.014e-02, -4.033e-02, -3.416e-02, 5.017e-02, 1.490e-01, 6.209e-02, 1.890e-01, 1.358e-01, -1.800e-02, 7.187e-02, -2.623e-02, -2.266e-02) * s0_0;
	r += M4(6.555e-02, -1.461e-02, 6.823e-02, 2.085e-03, -1.294e-01, 4.188e-03, -8.194e-02, -7.320e-02, 1.890e-01, 6.502e-02, 1.714e-03, -1.718e-01, 2.153e-01, -7.762e-02, -1.279e-01, 1.018e-01) * s0_1;
	r += M4(-2.851e-02, -3.403e-02, 5.131e-02, -2.494e-02, 3.552e-01, -3.501e-01, 3.172e-02, 1.324e-01, 1.655e-02, -8.798e-03, -6.001e-02, 6.466e-02, 8.767e-02, -1.067e-01, 6.859e-02, 2.449e-02) * s0_2;
	r += M4(-9.190e-02, 6.394e-03, -9.252e-02, 6.565e-02, -5.424e-03, -3.305e-02, 6.764e-02, 4.432e-03, 2.201e-01, 2.797e-01, 1.654e-01, 2.659e-01, 4.457e-02, 7.933e-02, -2.293e-01, 3.802e-02) * s0_3;
	r += M4(-2.144e-01, 3.312e-01, 3.398e-01, 3.008e-01, -9.150e-02, -1.464e-01, -6.307e-02, -2.708e-01, -1.047e-01, 3.904e-01, -1.612e-01, 4.370e-01, 1.645e-01, 9.345e-02, -4.128e-01, 3.124e-02) * s0_4;
	r += M4(-5.733e-02, -1.578e-01, 1.748e-01, -4.408e-02, 2.835e-02, -4.080e-03, -3.190e-02, -1.634e-01, 4.974e-02, -5.634e-02, -2.619e-01, -4.056e-02, 1.834e-01, 1.742e-01, 1.470e-01, -3.577e-02) * s0_5;
	r += M4(2.242e-02, -1.421e-02, -9.613e-02, 1.619e-01, -3.374e-02, -2.037e-02, 1.294e-01, -6.175e-02, 2.001e-01, 1.042e-01, -3.065e-01, 2.946e-01, 1.896e-02, 3.375e-02, -1.000e-01, -3.369e-02) * s0_6;
	r += M4(-1.227e-01, -3.821e-02, -6.179e-02, -2.867e-02, -5.327e-03, -5.054e-02, -5.371e-02, -2.389e-02, -1.569e-01, 7.872e-03, -2.177e-01, -1.909e-01, 1.437e-01, -4.284e-02, -2.065e-02, 7.616e-02) * s0_7;
	r += M4(1.372e-01, 9.513e-02, 6.307e-02, -4.220e-02, -4.478e-02, -5.564e-02, -8.105e-02, -1.582e-02, 3.830e-01, 1.707e-02, -1.734e-01, 5.281e-02, -2.715e-02, -1.217e-01, -1.656e-02, -6.788e-02) * s0_8;
	r += M4(-1.983e-02, 4.991e-02, 3.798e-02, 1.034e-02, 1.334e-01, -1.236e-01, 1.216e-01, 3.337e-02, -3.893e-02, 1.063e-01, 5.192e-02, 5.302e-02, -1.627e-01, -1.806e-02, -1.365e-01, -1.184e-03) * s1_0;
	r += M4(-1.696e-03, -2.196e-01, 1.114e-01, 2.107e-01, 2.218e-02, -3.727e-01, 3.889e-01, -1.464e-01, -1.992e-01, 1.450e-01, -8.823e-02, -2.246e-01, -1.338e-01, -5.595e-02, 6.110e-02, 1.294e-01) * s1_1;
	r += M4(-8.077e-02, -1.662e-01, 7.118e-02, -3.559e-02, -2.035e-01, -2.275e-01, 1.601e-01, -2.743e-02, -1.497e-02, -8.643e-02, 5.964e-02, 9.001e-02, -5.042e-02, -1.440e-01, 9.376e-02, -2.569e-02) * s1_2;
	r += M4(-1.032e-01, 6.470e-02, -1.040e-01, -3.080e-01, 2.114e-01, -1.157e-01, 1.653e-02, -2.633e-02, -2.504e-01, -1.049e-01, 2.285e-01, 3.793e-02, 1.929e-01, -6.025e-02, 2.608e-02, 7.775e-02) * s1_3;
	r += M4(-2.030e-02, -1.584e-01, 3.173e-01, -1.938e-01, -2.454e-01, -4.056e-01, 2.041e-01, 8.144e-02, 1.267e-01, -1.183e-01, -7.827e-02, -2.468e-02, -4.162e-02, -1.077e-01, -1.932e-01, -3.779e-01) * s1_4;
	r += M4(1.191e-01, -1.490e-01, -6.844e-02, -2.622e-02, -1.509e-01, -1.803e-01, 1.914e-01, -2.547e-01, -2.701e-01, -9.675e-02, -2.912e-02, -5.322e-02, 2.647e-01, 8.470e-02, 1.392e-01, 1.528e-01) * s1_5;
	r += M4(-2.275e-02, -1.070e-02, -1.443e-01, -2.201e-02, 1.066e-01, 3.664e-02, -7.221e-02, -2.256e-02, -3.693e-02, -1.876e-02, 1.396e-01, -4.222e-01, -8.958e-02, -2.653e-02, -1.203e-01, 2.335e-02) * s1_6;
	r += M4(2.000e-01, -1.669e-02, -1.178e-01, -9.378e-02, 2.824e-02, 4.486e-02, -1.739e-01, -8.425e-02, -2.362e-01, -3.468e-01, -1.973e-02, -4.352e-01, -1.680e-01, -1.493e-01, 2.152e-01, 5.898e-03) * s1_7;
	r += M4(2.657e-01, 4.991e-02, -2.506e-03, 1.391e-01, -3.796e-01, 3.934e-02, -7.687e-02, -2.483e-01, -4.887e-02, 2.013e-01, -1.366e-01, -5.505e-02, -1.913e-01, -1.821e-01, -4.401e-02, -2.276e-02) * s1_8;
	r += M4(-2.903e-02, 1.241e-01, -5.638e-02, 3.167e-02, -6.751e-03, -3.309e-02, 1.579e-02, 1.363e-01, 4.819e-02, -1.068e-01, 1.348e-02, -1.278e-02, -2.671e-01, 1.261e-02, 2.182e-01, -3.055e-01) * s2_0;
	r += M4(-1.045e-01, 3.082e-02, -1.658e-01, -1.080e-01, -2.183e-01, -6.664e-02, -8.932e-02, -1.694e-01, -2.222e-01, -3.406e-03, 1.039e-01, 2.265e-01, 2.221e-01, -5.929e-01, -3.042e-01, -2.687e-01) * s2_1;
	r += M4(-1.252e-01, -1.812e-01, -2.053e-01, 3.902e-02, 7.856e-02, -1.285e-01, 3.396e-02, 6.560e-02, 7.091e-02, 3.342e-01, 1.424e-01, -1.477e-01, -3.194e-01, 7.284e-02, 5.686e-02, 3.402e-03) * s2_2;
	r += M4(1.362e-01, 5.217e-02, 1.372e-01, 2.584e-01, -2.091e-02, -6.207e-02, 1.420e-01, -6.712e-02, -6.030e-02, -5.136e-02, 1.312e-01, 6.210e-02, -7.121e-01, -1.464e-01, 1.087e-01, -6.635e-01) * s2_3;
	r += M4(-1.457e-01, 9.621e-02, -2.260e-01, -7.796e-02, 7.945e-03, -4.856e-02, 2.255e-01, -2.983e-01, 3.141e-02, -1.933e-01, -9.817e-02, -2.842e-01, 2.185e-01, -1.371e-02, 6.445e-02, 1.078e-01) * s2_4;
	r += M4(-2.202e-03, -1.744e-01, -2.140e-01, 8.326e-03, 1.796e-01, -2.614e-01, 2.971e-01, 9.602e-02, 1.007e-01, 3.778e-01, 3.057e-01, 9.028e-02, -4.407e-01, -4.878e-01, 5.268e-02, 1.038e-01) * s2_5;
	r += M4(-2.110e-02, -4.917e-02, -7.627e-02, 1.930e-02, -2.711e-02, -3.789e-02, 2.110e-02, -9.651e-02, -5.456e-02, 2.735e-02, 1.462e-01, 3.254e-02, -1.215e-01, 5.054e-03, -3.968e-02, 9.661e-02) * s2_6;
	r += M4(1.255e-01, -1.284e-01, -5.653e-02, 2.126e-02, 2.030e-02, -8.448e-02, 3.520e-01, -4.361e-01, -1.942e-02, 1.220e-02, 1.687e-01, 1.287e-01, 1.641e-01, -2.754e-01, -1.601e-01, 1.041e-01) * s2_7;
	r += M4(-6.355e-02, -1.169e-01, -1.208e-01, 5.671e-03, 8.123e-02, -3.673e-02, 7.862e-03, -1.109e-01, 4.896e-02, 3.569e-03, 1.612e-01, 7.840e-02, 1.991e-01, 2.881e-01, -9.816e-02, -5.252e-02) * s2_8;
	r += M4(2.190e-02, 1.278e-02, 1.411e-01, 2.220e-03, -1.344e-01, 3.564e-02, -6.172e-02, 3.393e-02, 4.135e-01, -2.601e-02, -1.792e-01, 4.437e-02, -2.355e-02, -3.656e-02, 8.778e-04, 4.767e-03) * s3_0;
	r += M4(-1.911e-02, -3.370e-02, 3.265e-02, 1.048e-01, 1.266e-01, -7.027e-02, -1.910e-02, -1.989e-01, 3.119e-02, 3.785e-01, -2.522e-01, 3.780e-01, 6.198e-02, 4.187e-02, 6.032e-02, -1.597e-01) * s3_1;
	r += M4(-2.080e-01, 6.349e-02, -1.112e-01, -1.513e-02, 3.552e-02, -6.100e-02, -3.130e-02, 1.294e-01, 1.188e-01, 2.070e-01, -6.054e-03, 1.262e-01, -3.936e-02, -1.030e-01, -7.319e-02, 3.935e-02) * s3_2;
	r += M4(1.671e-01, -1.516e-01, 2.360e-02, 1.851e-01, 4.034e-02, -1.165e-01, -2.389e-01, 2.001e-01, 4.175e-01, -1.173e-01, -2.864e-01, 4.255e-01, -1.404e-03, 2.635e-02, 1.759e-02, -2.834e-02) * s3_3;
	r += M4(-5.390e-02, -2.174e-01, 1.581e-01, -3.922e-01, 1.370e-01, 2.599e-01, -5.064e-01, 6.796e-01, -3.122e-01, -6.575e-01, 3.915e-01, -4.309e-01, -5.454e-02, 2.605e-01, 1.072e-01, 1.156e-01) * s3_4;
	r += M4(-2.685e-01, 1.268e-01, -9.400e-02, 1.640e-02, 5.845e-02, -5.136e-02, -1.823e-02, 1.389e-01, -3.732e-01, 1.120e-01, 2.074e-01, 4.973e-03, 8.885e-02, -2.529e-01, -2.846e-02, 4.015e-02) * s3_5;
	r += M4(-1.879e-02, 1.028e-01, 6.444e-02, 5.391e-02, -1.110e-01, 2.081e-01, -1.968e-01, 5.192e-02, 4.399e-02, -2.981e-02, -6.253e-02, 6.811e-02, -1.222e-01, -6.366e-02, -3.430e-02, 1.560e-02) * s3_6;
	r += M4(-1.812e-01, -7.557e-02, 1.989e-02, -8.254e-02, 6.171e-02, -1.283e-01, -2.555e-01, 9.513e-02, 3.127e-02, -2.058e-01, 1.665e-03, -9.195e-02, 5.188e-02, -1.658e-02, -1.085e-01, 8.940e-02) * s3_7;
	r += M4(-1.969e-01, -1.039e-02, -9.493e-02, -3.173e-02, 1.488e-01, -1.112e-02, -1.905e-01, 2.519e-02, 3.193e-02, 1.351e-01, -2.954e-04, -8.534e-02, 1.125e-01, 1.293e-01, 7.191e-02, -7.250e-02) * s3_8;
	r += V4(1.081e-02, -1.144e-03, -1.516e-02, 1.009e-02);
	return vec4(r);
	
}
vec4 f1(V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8, V4 s2_0, V4 s2_1, V4 s2_2, V4 s2_3, V4 s2_4, V4 s2_5, V4 s2_6, V4 s2_7, V4 s2_8, V4 s3_0, V4 s3_1, V4 s3_2, V4 s3_3, V4 s3_4, V4 s3_5, V4 s3_6, V4 s3_7, V4 s3_8) {
	V4 r = V4(0.0);
	r += M4(-5.008e-03, -1.763e-01, -9.398e-02, 1.027e-01, 1.168e-02, 4.017e-02, -7.401e-02, 1.038e-01, 4.659e-03, 1.751e-02, 9.806e-02, -8.663e-02, 2.466e-02, -2.303e-02, -2.509e-01, 4.167e-02) * s0_0;
	r += M4(-1.032e-01, -2.006e-01, 8.225e-02, -6.752e-02, 3.724e-02, 2.079e-01, 1.738e-01, -3.455e-02, 2.374e-02, -1.055e-01, -1.696e-02, -3.919e-02, 8.074e-02, 1.461e-01, -1.391e-01, -1.072e-01) * s0_1;
	r += M4(-1.406e-01, -1.190e-01, 1.361e-02, -1.916e-02, -7.320e-02, 2.470e-02, -1.277e-01, 8.718e-02, 6.969e-02, 1.942e-01, 5.222e-02, -8.323e-03, 3.248e-02, -2.662e-01, -1.835e-02, -8.040e-03) * s0_2;
	r += M4(-9.124e-03, -1.564e-03, 4.048e-02, -1.666e-01, 2.653e-02, 9.936e-02, 1.925e-02, 5.615e-02, 1.985e-01, 1.676e-01, -7.021e-02, 1.444e-01, 1.282e-01, -6.107e-03, 1.915e-02, 1.043e-01) * s0_3;
	r += M4(-2.060e-01, -3.545e-01, -1.402e-01, 6.532e-03, -7.995e-02, 1.908e-02, -7.423e-02, 1.361e-01, 3.551e-02, -1.164e-01, -1.838e-01, 6.476e-02, 3.536e-01, 4.133e-02, 3.432e-01, -2.143e-01) * s0_4;
	r += M4(-9.961e-02, -5.073e-02, 7.840e-02, 1.333e-01, 4.141e-04, 8.170e-02, -1.153e-01, 1.113e-01, 1.036e-01, 2.288e-01, -7.155e-02, -4.105e-02, 1.812e-01, 1.944e-02, 1.250e-02, -9.878e-02) * s0_5;
	r += M4(-3.422e-02, -6.503e-02, 1.373e-01, 5.423e-03, 3.287e-02, -5.758e-02, -5.769e-02, 4.863e-02, 7.176e-02, 1.414e-01, -4.555e-01, -1.588e-01, 2.191e-01, -1.085e-01, -3.918e-03, -6.003e-02) * s0_6;
	r += M4(3.368e-02, -6.672e-02, 1.826e-01, -1.484e-01, 1.095e-02, 7.062e-02, -3.504e-02, 9.735e-02, 2.427e-01, 5.205e-01, -1.694e-01, -1.936e-01, 1.963e-01, -1.100e-01, -2.130e-02, -8.868e-02) * s0_7;
	r += M4(-4.920e-02, -1.457e-01, 7.112e-02, -1.561e-02, -1.590e-02, 7.144e-02, -1.317e-01, 1.150e-01, 7.493e-02, 1.060e-01, -8.430e-02, 8.029e-02, 1.380e-01, 1.685e-01, -5.363e-02, 5.707e-02) * s0_8;
	r += M4(-2.279e-02, -1.695e-01, -1.057e-01, -4.385e-02, 3.309e-02, -3.642e-02, 4.501e-02, -3.699e-02, -9.265e-02, -7.014e-03, -2.767e-02, 4.684e-02, -9.427e-03, -8.167e-02, -1.675e-01, -1.065e-02) * s1_0;
	r += M4(-1.276e-01, -1.199e-01, 3.493e-02, 7.020e-03, 9.437e-03, 3.701e-02, 3.429e-01, -2.778e-01, 2.108e-03, 1.883e-02, -1.179e-01, 9.085e-02, -1.675e-03, -4.414e-02, 9.924e-02, -1.543e-01) * s1_1;
	r += M4(-2.057e-01, -1.846e-01, 2.914e-02, 3.403e-02, -7.248e-02, -3.775e-02, 3.345e-02, -1.878e-01, 2.737e-02, 6.303e-03, 3.979e-02, -8.852e-02, 5.251e-04, -1.288e-01, 1.255e-01, -7.382e-02) * s1_2;
	r += M4(6.477e-02, 1.486e-01, 3.993e-02, -1.327e-01, 2.974e-02, 7.011e-02, 4.492e-02, -3.526e-02, -1.694e-01, -5.214e-02, -1.027e-01, 1.140e-01, 8.395e-02, -1.910e-01, 2.594e-02, 1.471e-01) * s1_3;
	r += M4(1.382e-01, -1.802e-01, -4.825e-01, 5.667e-01, -1.370e-01, 3.136e-02, -2.397e-01, 9.439e-02, -1.070e-01, -1.225e-01, -2.543e-01, 2.303e-01, 2.577e-02, -2.332e-02, 1.284e-01, -2.051e-01) * s1_4;
	r += M4(-1.646e-01, -3.413e-01, -1.573e-01, 1.285e-01, -4.019e-02, -2.183e-01, 4.397e-02, -1.582e-01, 5.093e-02, 2.017e-01, -8.247e-02, 1.239e-02, 4.368e-02, -1.327e-01, -3.994e-02, -4.572e-02) * s1_5;
	r += M4(-7.587e-02, 1.392e-01, 8.192e-03, 7.440e-02, 6.067e-02, -5.949e-02, -5.977e-02, -4.951e-02, 8.082e-03, -1.840e-03, 1.797e-01, -5.349e-02, 7.920e-02, -9.831e-02, -1.687e-01, -7.555e-02) * s1_6;
	r += M4(-1.221e-01, -6.216e-02, -3.797e-02, -1.051e-01, -2.602e-02, 1.657e-02, -1.767e-01, -1.147e-01, 3.420e-02, 1.213e-01, 3.564e-01, -1.135e-01, 9.260e-02, -9.580e-02, -2.319e-01, -9.363e-02) * s1_7;
	r += M4(-4.333e-02, -5.109e-02, -6.057e-02, -1.741e-02, -3.438e-02, -2.428e-02, -4.036e-01, -1.818e-01, -7.647e-04, -8.649e-02, -9.040e-02, -1.298e-03, 6.138e-02, -2.533e-02, 6.575e-02, 2.375e-02) * s1_8;
	r += M4(-6.030e-02, -1.726e-01, -2.785e-01, 5.587e-02, -1.660e-02, -4.374e-02, 2.066e-02, -2.728e-02, 6.761e-02, 1.714e-01, 1.782e-01, 4.408e-02, -1.558e-01, -1.121e-01, -6.858e-02, -4.169e-01) * s2_0;
	r += M4(5.465e-02, -1.691e-01, -5.993e-02, -5.617e-02, 3.233e-02, 9.136e-02, -3.994e-02, 3.320e-02, 6.004e-03, -1.162e-02, -1.126e-02, 5.056e-03, -1.959e-01, -2.896e-01, -1.215e-01, -1.576e-01) * s2_1;
	r += M4(2.557e-02, 3.212e-02, 1.040e-02, -4.400e-02, 1.003e-02, 3.351e-02, 7.110e-02, 5.289e-02, -3.976e-02, -8.373e-02, -1.126e-01, -6.404e-02, -1.581e-02, -1.083e-01, 3.069e-02, -2.744e-01) * s2_2;
	r += M4(1.654e-01, -1.405e-04, -1.850e-02, 7.752e-02, -4.321e-02, -1.967e-01, 1.542e-02, 1.178e-01, -6.733e-02, 6.051e-02, -5.745e-02, -8.861e-02, -7.716e-01, -7.043e-02, 2.486e-01, -7.066e-01) * s2_3;
	r += M4(-1.935e-01, 3.096e-01, -1.643e-02, -2.422e-01, -1.686e-01, -2.210e-01, 1.786e-01, 3.219e-02, 4.242e-01, 2.022e-01, 3.008e-01, -1.352e-01, -1.050e+00, 8.771e-03, -4.675e-02, -1.242e+00) * s2_4;
	r += M4(1.024e-01, 5.924e-02, -8.899e-02, 1.518e-01, 8.374e-02, 7.749e-02, 1.372e-01, 2.707e-02, -1.215e-01, -3.933e-02, 1.052e-01, 2.444e-02, -1.111e-01, -1.292e-02, -8.284e-02, -2.255e-01) * s2_5;
	r += M4(8.080e-02, -5.677e-02, 2.003e-02, -2.355e-02, 5.664e-03, -1.779e-01, -1.227e-01, 3.075e-02, -1.160e-01, -2.153e-03, 3.790e-02, 3.498e-02, -2.903e-01, 2.463e-01, 4.581e-02, -3.932e-01) * s2_6;
	r += M4(1.574e-01, -1.669e-01, 7.058e-02, -2.174e-02, 7.573e-02, 1.023e-01, 1.141e-01, 4.860e-02, -6.933e-03, -4.891e-02, -6.034e-02, 8.707e-02, -1.173e-01, 1.286e-01, 5.766e-02, -3.821e-01) * s2_7;
	r += M4(1.097e-01, -1.700e-01, 3.994e-02, -4.986e-02, -3.258e-02, -1.993e-01, 9.461e-02, -1.996e-02, -8.628e-02, 5.553e-03, 5.704e-02, 3.819e-03, -4.545e-02, -1.496e-01, -6.527e-02, -2.057e-01) * s2_8;
	r += M4(-4.848e-02, -3.656e-02, -1.559e-01, 2.862e-02, -3.384e-02, 5.328e-02, -1.473e-03, -3.890e-02, 7.260e-02, -6.097e-02, 1.978e-01, 1.367e-02, -1.100e-01, -6.658e-04, 8.236e-02, -1.097e-02) * s3_0;
	r += M4(8.311e-02, -2.201e-01, 4.061e-02, -3.235e-03, 1.280e-01, 1.916e-01, 1.277e-01, -9.359e-02, 7.738e-04, -4.957e-02, 1.320e-02, -7.621e-02, -1.584e-01, -2.320e-01, 6.770e-02, 1.076e-01) * s3_1;
	r += M4(-4.888e-03, -1.701e-01, 5.301e-02, -9.916e-02, 3.625e-02, 1.370e-01, 1.544e-01, -5.169e-02, -6.194e-02, -2.018e-01, -1.030e-01, 6.070e-03, 1.964e-02, 2.026e-01, 4.659e-02, 2.799e-02) * s3_2;
	r += M4(7.821e-02, 1.407e-01, 1.247e-01, 1.087e-01, 2.402e-02, -1.756e-01, 3.169e-02, -2.312e-01, 4.773e-02, -3.932e-01, 9.210e-02, -2.189e-01, -9.918e-02, -4.732e-02, -5.090e-02, -4.347e-02) * s3_3;
	r += M4(3.147e-01, 1.556e-01, 2.515e-01, 1.646e-02, -1.226e-01, -4.188e-02, -6.254e-02, -1.618e-01, 4.801e-01, -1.284e-02, 2.895e-01, -1.532e-01, -6.759e-01, -2.034e-01, -1.995e-01, -9.682e-02) * s3_4;
	r += M4(1.993e-02, -3.563e-02, -1.120e-02, -1.067e-01, 8.181e-02, 3.975e-01, 1.235e-01, 4.245e-02, -6.025e-02, -2.418e-01, 2.453e-01, 1.265e-01, -4.366e-02, 1.168e-01, 6.429e-04, 7.793e-03) * s3_5;
	r += M4(7.298e-02, -1.835e-01, -2.204e-02, -1.035e-01, -3.941e-02, -1.793e-01, -1.449e-02, -2.241e-01, -8.146e-02, -2.253e-02, -2.335e-02, -4.668e-02, -1.628e-01, 1.147e-01, 1.581e-02, 2.470e-02) * s3_6;
	r += M4(1.484e-01, 1.530e-02, -1.898e-01, 1.081e-01, 1.357e-01, 4.950e-02, -7.575e-02, -1.150e-01, 7.581e-02, 4.905e-02, -1.150e-01, 2.997e-02, -2.289e-01, 1.087e-01, 1.295e-01, 4.986e-02) * s3_7;
	r += M4(6.992e-02, -2.186e-03, -2.066e-01, 1.659e-02, 3.570e-02, 3.926e-02, 7.012e-02, -9.813e-02, -4.463e-02, 5.139e-02, 9.070e-02, 8.629e-02, -8.839e-02, -1.743e-01, -9.955e-02, -7.059e-03) * s3_8;
	r += V4(6.323e-02, -8.112e-03, 1.856e-03, 4.018e-02);
	return vec4(r);
	
}
void hook() {
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + ivec2(gl_LocalInvocationID.xy);
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv1_pt;
	V4 s0_0 = l0(-1, -1);
	V4 s2_0 = l1(-1, -1);
	V4 s0_1 = l0(0, -1);
	V4 s2_1 = l1(0, -1);
	V4 s0_2 = l0(1, -1);
	V4 s2_2 = l1(1, -1);
	V4 s0_3 = l0(-1, 0);
	V4 s2_3 = l1(-1, 0);
	V4 s0_4 = l0(0, 0);
	V4 s2_4 = l1(0, 0);
	V4 s0_5 = l0(1, 0);
	V4 s2_5 = l1(1, 0);
	V4 s0_6 = l0(-1, 1);
	V4 s2_6 = l1(-1, 1);
	V4 s0_7 = l0(0, 1);
	V4 s2_7 = l1(0, 1);
	V4 s0_8 = l0(1, 1);
	V4 s2_8 = l1(1, 1);
	V4 s1_0 = -max(-s0_0, V4(0.0));
	V4 s1_1 = -max(-s0_1, V4(0.0));
	V4 s1_2 = -max(-s0_2, V4(0.0));
	V4 s1_3 = -max(-s0_3, V4(0.0));
	V4 s1_4 = -max(-s0_4, V4(0.0));
	V4 s1_5 = -max(-s0_5, V4(0.0));
	V4 s1_6 = -max(-s0_6, V4(0.0));
	V4 s1_7 = -max(-s0_7, V4(0.0));
	V4 s1_8 = -max(-s0_8, V4(0.0));
	s0_0 = max(s0_0, V4(0.0));
	s0_1 = max(s0_1, V4(0.0));
	s0_2 = max(s0_2, V4(0.0));
	s0_3 = max(s0_3, V4(0.0));
	s0_4 = max(s0_4, V4(0.0));
	s0_5 = max(s0_5, V4(0.0));
	s0_6 = max(s0_6, V4(0.0));
	s0_7 = max(s0_7, V4(0.0));
	s0_8 = max(s0_8, V4(0.0));
	V4 s3_0 = -max(-s2_0, V4(0.0));
	V4 s3_1 = -max(-s2_1, V4(0.0));
	V4 s3_2 = -max(-s2_2, V4(0.0));
	V4 s3_3 = -max(-s2_3, V4(0.0));
	V4 s3_4 = -max(-s2_4, V4(0.0));
	V4 s3_5 = -max(-s2_5, V4(0.0));
	V4 s3_6 = -max(-s2_6, V4(0.0));
	V4 s3_7 = -max(-s2_7, V4(0.0));
	V4 s3_8 = -max(-s2_8, V4(0.0));
	s2_0 = max(s2_0, V4(0.0));
	s2_1 = max(s2_1, V4(0.0));
	s2_2 = max(s2_2, V4(0.0));
	s2_3 = max(s2_3, V4(0.0));
	s2_4 = max(s2_4, V4(0.0));
	s2_5 = max(s2_5, V4(0.0));
	s2_6 = max(s2_6, V4(0.0));
	s2_7 = max(s2_7, V4(0.0));
	s2_8 = max(s2_8, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0(s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8, s2_0, s2_1, s2_2, s2_3, s2_4, s2_5, s2_6, s2_7, s2_8, s3_0, s3_1, s3_2, s3_3, s3_4, s3_5, s3_6, s3_7, s3_8));
	imageStore(out_image, opos + ivec2(1, 0), f1(s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8, s2_0, s2_1, s2_2, s2_3, s2_4, s2_5, s2_6, s2_7, s2_8, s3_0, s3_1, s3_2, s3_3, s3_4, s3_5, s3_6, s3_7, s3_8));
}


//!DESC CuNNy-4x8C-RCAS-DS-conv3
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv2
//!BIND LUMA
//!SAVE conv3
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
	#define V4 f16vec4
	#define M4 f16mat4
	#define F float16_t
#else
	#define V4 vec4
	#define M4 mat4
	#define F float
#endif
#define l0(x, y) V4(texelFetch(conv2_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv2_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
vec4 f0(V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8, V4 s2_0, V4 s2_1, V4 s2_2, V4 s2_3, V4 s2_4, V4 s2_5, V4 s2_6, V4 s2_7, V4 s2_8, V4 s3_0, V4 s3_1, V4 s3_2, V4 s3_3, V4 s3_4, V4 s3_5, V4 s3_6, V4 s3_7, V4 s3_8) {
	V4 r = V4(0.0);
	r += M4(-3.083e-02, 7.804e-02, 2.905e-02, -2.716e-02, 1.352e-01, -3.880e-02, 2.202e-03, -8.264e-02, 1.523e-02, -5.807e-02, -4.074e-02, 8.861e-02, -3.142e-02, 3.226e-02, -1.597e-02, 6.936e-03) * s0_0;
	r += M4(1.888e-02, 3.935e-02, 4.962e-02, 5.670e-02, 2.306e-01, -5.784e-02, 2.140e-02, 2.106e-01, 1.644e-01, -9.845e-02, 3.697e-02, -1.042e-01, -3.904e-03, 1.108e-02, -1.130e-01, 1.107e-03) * s0_1;
	r += M4(-3.914e-02, 2.962e-02, 1.788e-02, 5.735e-02, 1.893e-02, 2.751e-03, -5.285e-02, 6.484e-02, 1.331e-01, -1.739e-02, 2.662e-02, 3.945e-02, 4.856e-02, 1.044e-02, 5.632e-02, 4.603e-02) * s0_2;
	r += M4(-8.503e-02, 3.124e-02, 3.312e-02, -5.612e-02, -5.171e-02, 2.436e-03, 6.949e-02, -4.736e-02, -8.186e-04, 3.589e-02, 1.014e-03, 6.020e-02, 5.730e-02, 1.743e-02, -5.435e-03, -4.527e-02) * s0_3;
	r += M4(1.414e-01, 2.939e-02, 1.198e-01, -3.808e-01, -8.721e-02, -8.112e-02, -3.804e-02, 1.444e-01, 7.365e-02, -2.052e-01, 2.011e-02, 1.537e-01, -3.730e-02, -4.552e-01, -4.522e-01, 2.572e-01) * s0_4;
	r += M4(-4.722e-02, -6.317e-02, -2.670e-02, 5.058e-02, -2.924e-02, 5.100e-02, 7.937e-02, -2.029e-02, 1.268e-01, 7.794e-02, 5.291e-02, -4.560e-02, 1.086e-01, -4.971e-02, 1.537e-02, 8.718e-02) * s0_5;
	r += M4(-5.692e-02, 9.815e-02, 6.124e-02, -6.450e-02, 7.932e-02, -1.169e-02, 7.027e-02, -1.824e-02, -6.577e-03, -1.035e-02, -5.527e-03, -4.633e-02, 7.741e-02, -7.931e-02, -6.063e-02, 2.173e-02) * s0_6;
	r += M4(-5.800e-02, -4.658e-02, -5.781e-02, 4.892e-02, 2.971e-02, -3.354e-03, 4.577e-02, -5.553e-02, 8.859e-02, -6.920e-02, -2.953e-02, -7.914e-02, 3.658e-02, -1.675e-01, 7.227e-02, -7.046e-02) * s0_7;
	r += M4(1.418e-02, 3.439e-03, -1.257e-02, 1.261e-02, 5.892e-04, 5.044e-02, -1.828e-02, 2.171e-02, -5.235e-02, -5.757e-02, -1.451e-02, 3.022e-02, 8.381e-03, -6.762e-02, 7.722e-02, 7.834e-02) * s0_8;
	r += M4(-4.032e-02, 1.693e-01, -2.064e-01, 4.119e-03, 2.297e-01, 9.005e-02, 7.795e-02, 1.011e-01, 1.793e-02, 8.445e-02, -4.244e-02, -6.347e-02, -1.057e-01, -8.850e-03, -9.404e-02, 1.483e-02) * s1_0;
	r += M4(4.310e-01, 2.323e-01, -3.193e-01, -1.626e-01, 3.946e-01, 1.826e-01, -1.079e-01, 3.986e-01, 2.980e-01, 6.733e-02, 6.237e-02, 5.173e-02, -1.184e-01, -7.431e-03, -1.700e-01, -1.983e-01) * s1_1;
	r += M4(1.416e-01, -4.180e-02, -3.804e-02, -1.210e-01, 5.963e-02, 1.220e-01, -2.043e-02, 2.439e-02, 3.535e-03, 3.860e-02, -3.936e-02, 1.773e-01, -2.026e-01, 4.088e-02, 1.840e-02, -2.647e-01) * s1_2;
	r += M4(2.462e-01, 3.272e-01, 5.063e-01, -1.555e-01, 4.369e-01, 5.039e-02, 1.851e-01, 6.391e-02, 5.205e-02, 4.716e-04, 1.450e-01, -1.020e-01, -1.067e-01, 7.994e-02, 7.837e-02, -8.849e-02) * s1_3;
	r += M4(2.690e-01, 3.722e-01, 4.060e-01, -4.488e-02, 3.669e-01, 2.476e-01, -1.022e+00, 4.513e-02, 1.174e-01, -5.261e-01, 1.050e-01, 2.096e-02, -3.582e-01, -1.100e-01, -3.998e-01, -3.063e-01) * s1_4;
	r += M4(7.706e-03, -1.584e-01, 6.864e-02, 1.568e-01, 3.700e-01, 2.597e-01, 1.738e-02, -1.357e-01, 1.215e-01, 3.765e-02, 1.729e-01, 9.029e-02, 1.354e-02, 4.226e-02, 1.647e-01, -1.133e-01) * s1_5;
	r += M4(2.005e-01, 9.312e-02, 3.330e-01, 2.752e-01, 1.335e-01, -2.491e-01, 9.845e-02, 4.944e-02, 7.782e-02, -9.057e-02, 2.384e-02, -5.284e-02, -5.373e-02, 1.106e-01, -7.956e-03, -1.633e-01) * s1_6;
	r += M4(9.337e-02, 3.123e-01, -1.168e-01, -1.567e-01, -1.096e-01, 1.845e-01, -3.167e-02, 2.959e-01, 1.685e-01, -3.417e-01, 2.111e-01, 8.837e-02, -4.188e-02, 1.331e-01, 1.646e-01, 3.611e-02) * s1_7;
	r += M4(2.369e-01, 8.836e-03, -7.746e-02, 3.176e-02, 2.290e-01, 1.221e-01, 1.441e-02, -7.838e-03, 1.263e-01, -1.413e-01, 5.934e-02, 1.248e-01, -3.589e-02, 7.416e-02, 1.224e-01, -7.408e-02) * s1_8;
	r += M4(-3.370e-02, 1.316e-02, 1.651e-03, 7.784e-03, 5.329e-02, -1.296e-02, -7.640e-02, 7.753e-02, -6.395e-02, -3.956e-02, -5.087e-02, 9.468e-02, -1.224e-01, -1.603e-02, 3.516e-02, -9.737e-02) * s2_0;
	r += M4(9.622e-02, 2.399e-02, 7.313e-02, 1.392e-02, -1.121e-01, -9.989e-02, 5.651e-02, -1.431e-01, -1.096e-01, 9.068e-03, 1.040e-01, -1.363e-01, -9.115e-04, 1.403e-01, 6.181e-02, 4.163e-02) * s2_1;
	r += M4(-2.857e-02, 5.452e-02, -9.777e-03, -8.852e-02, 1.182e-01, -2.450e-02, -3.549e-02, -2.110e-02, 1.098e-01, 4.371e-02, -1.265e-01, 6.158e-02, -1.160e-01, -1.380e-02, -6.344e-02, -7.269e-02) * s2_2;
	r += M4(-6.341e-02, -1.733e-02, -7.142e-02, -1.392e-02, 1.403e-01, 9.396e-02, 2.756e-02, 7.832e-02, 4.371e-02, -1.207e-02, -1.539e-01, -7.286e-02, 6.342e-02, -1.581e-02, -9.125e-02, 6.672e-02) * s2_3;
	r += M4(-7.003e-02, -4.013e-02, 2.254e-02, 9.672e-03, 1.559e-01, -1.284e-02, 2.301e-02, -1.158e-01, 2.524e-01, 2.356e-01, 4.366e-01, -2.096e-01, 9.149e-02, 4.482e-02, 1.382e-01, -8.072e-02) * s2_4;
	r += M4(6.320e-03, -1.315e-01, 5.061e-04, 1.620e-02, 2.088e-02, 5.492e-02, -5.194e-02, 1.117e-01, -1.390e-01, -1.645e-01, -1.076e-01, 1.503e-01, -4.532e-02, 5.026e-02, 7.590e-02, -2.679e-01) * s2_5;
	r += M4(7.557e-02, 1.469e-02, 2.374e-02, -2.480e-02, -4.381e-02, -6.671e-02, -1.249e-01, -1.700e-02, -3.383e-02, -1.715e-02, -4.283e-02, -3.382e-02, -6.562e-02, 9.154e-02, 4.217e-02, -2.532e-04) * s2_6;
	r += M4(1.736e-02, 9.562e-03, 4.088e-02, 4.892e-02, -4.719e-02, 8.389e-03, -1.233e-01, 8.085e-02, -5.574e-02, 2.492e-03, -4.728e-02, 1.784e-01, -7.359e-02, 6.409e-02, -6.571e-02, -6.916e-02) * s2_7;
	r += M4(-1.925e-03, 6.519e-02, -3.048e-02, -2.261e-02, 4.733e-02, 5.180e-02, 5.895e-02, -8.399e-02, -1.073e-01, -1.010e-02, -5.760e-02, -1.436e-02, 9.219e-03, 1.428e-01, -5.102e-02, 3.308e-02) * s2_8;
	r += M4(-4.357e-01, 1.759e-01, -8.662e-02, 6.350e-01, 2.079e-01, -1.067e-01, -1.935e-01, 5.606e-02, -1.601e-01, -1.521e-01, -2.216e-01, 2.985e-01, -1.334e-01, 4.600e-02, -7.137e-02, 5.257e-03) * s3_0;
	r += M4(-1.433e-01, 1.830e-02, 2.330e-01, -1.743e-01, 6.758e-01, -8.790e-02, -2.032e-02, 1.823e-01, 9.500e-02, 5.440e-02, -2.160e-01, -1.893e-01, 8.220e-02, 1.901e-01, -9.984e-03, 1.456e-01) * s3_1;
	r += M4(-9.922e-02, 1.188e-01, -8.599e-01, 4.481e-01, 2.845e-01, 6.302e-02, 4.150e-02, 2.706e-01, 1.613e-01, 8.962e-02, -9.051e-02, -8.170e-02, -4.303e-02, 1.533e-02, -9.074e-02, 1.189e-01) * s3_2;
	r += M4(9.240e-02, 8.455e-01, -1.223e-01, 1.552e-01, 3.918e-01, 1.350e-01, -4.866e-02, 1.859e-01, 1.423e-02, -6.186e-02, -4.101e-02, -8.407e-02, 3.708e-02, -1.250e-01, -3.002e-01, 7.517e-02) * s3_3;
	r += M4(4.786e-01, 8.599e-01, 1.212e+00, 4.556e-01, 3.985e-01, -4.224e-01, -8.478e-02, 1.297e-01, 3.613e-01, 3.951e-01, 9.814e-02, 3.899e-01, 1.275e-01, -5.803e-01, -4.094e-01, 2.099e-01) * s3_4;
	r += M4(-1.033e-01, 3.970e-01, -3.904e-01, 9.204e-01, 4.424e-01, 1.319e-02, -8.561e-02, 2.466e-03, 4.796e-02, -1.139e-01, 1.570e-01, 1.844e-01, 1.381e-02, 5.816e-02, -1.081e-01, -1.785e-01) * s3_5;
	r += M4(-1.462e-01, 1.500e-01, -9.051e-02, 2.717e-01, 3.367e-01, -6.933e-02, 9.128e-02, 1.641e-01, 4.318e-02, -2.092e-02, -6.472e-03, 2.751e-02, -3.890e-02, 1.395e-02, -1.723e-01, 1.464e-01) * s3_6;
	r += M4(6.107e-02, 8.397e-01, 1.669e-01, 1.036e+00, 3.166e-01, -1.603e-02, -1.594e-01, 4.291e-01, -2.152e-02, -6.056e-02, 1.334e-01, -1.934e-01, -1.434e-01, -1.303e-01, -1.833e-01, 3.299e-02) * s3_7;
	r += M4(-2.016e-01, 6.041e-01, 1.521e-01, -2.004e-01, 2.881e-01, -1.199e-03, -2.362e-02, 1.938e-01, 8.706e-03, 5.066e-02, -8.488e-02, 8.596e-02, -2.301e-02, 1.121e-01, -7.356e-03, 3.228e-02) * s3_8;
	r += V4(1.064e-02, -6.773e-03, -4.936e-03, 1.162e-02);
	return vec4(r);
	
}
vec4 f1(V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8, V4 s2_0, V4 s2_1, V4 s2_2, V4 s2_3, V4 s2_4, V4 s2_5, V4 s2_6, V4 s2_7, V4 s2_8, V4 s3_0, V4 s3_1, V4 s3_2, V4 s3_3, V4 s3_4, V4 s3_5, V4 s3_6, V4 s3_7, V4 s3_8) {
	V4 r = V4(0.0);
	r += M4(2.850e-02, 6.238e-03, -1.496e-02, 2.469e-02, -4.716e-02, 8.508e-03, 4.298e-02, 6.830e-03, 1.765e-03, -2.781e-03, 1.418e-02, 3.942e-02, 7.200e-03, 4.622e-02, 1.798e-02, -4.562e-02) * s0_0;
	r += M4(1.287e-01, 5.593e-02, 2.180e-02, 3.360e-02, -5.023e-02, 3.471e-02, -1.639e-01, 8.890e-02, -1.162e-01, -2.401e-02, -1.121e-02, -6.427e-03, -3.967e-02, 7.173e-02, 3.750e-02, -1.298e-01) * s0_1;
	r += M4(5.392e-02, 9.443e-03, -1.036e-03, -6.859e-03, 7.133e-02, -2.794e-02, -3.087e-02, -2.088e-02, 1.630e-02, 5.835e-02, -5.318e-02, 6.268e-02, -5.460e-03, 3.672e-02, -4.152e-04, 5.963e-02) * s0_2;
	r += M4(3.911e-02, -1.160e-01, 2.094e-03, -4.136e-02, -2.170e-02, -4.016e-02, -2.983e-02, 2.052e-02, -6.179e-02, -4.684e-02, 5.838e-02, -1.327e-02, -9.515e-02, 1.008e-01, 9.360e-03, -8.815e-02) * s0_3;
	r += M4(-2.149e-01, 4.590e-02, 2.998e-01, 2.384e-02, 3.069e-01, 5.843e-02, -1.047e-01, 1.460e-01, -2.034e-01, -9.940e-03, 6.429e-02, 2.378e-01, 4.541e-01, -3.495e-02, 2.074e-01, 2.473e-01) * s0_4;
	r += M4(1.749e-02, 7.253e-02, -4.399e-02, 7.270e-02, -8.663e-02, -1.170e-01, -8.790e-02, 7.253e-02, -1.548e-01, -1.734e-01, -8.172e-02, 1.617e-01, 1.679e-02, 1.122e-01, -1.387e-01, -2.164e-03) * s0_5;
	r += M4(4.410e-02, 5.327e-02, -3.992e-02, -7.739e-02, -6.921e-02, 1.147e-01, -1.756e-02, -6.631e-02, -3.198e-02, -6.713e-02, -3.437e-03, 2.229e-02, -4.904e-02, -2.912e-02, 3.491e-02, 8.958e-02) * s0_6;
	r += M4(5.874e-02, 7.487e-02, 1.229e-01, -5.268e-02, -7.807e-02, -5.339e-04, -9.252e-02, 1.098e-01, -7.744e-02, 2.338e-02, -1.156e-02, -2.654e-03, -2.243e-01, 2.292e-02, -2.200e-02, 4.675e-02) * s0_7;
	r += M4(-2.248e-02, 2.099e-02, -6.215e-02, -7.573e-03, 4.519e-02, -3.803e-02, -4.977e-02, 6.267e-03, -1.240e-01, 4.292e-03, -8.897e-02, 1.666e-02, 3.151e-03, 1.405e-01, -9.385e-02, 3.199e-02) * s0_8;
	r += M4(1.495e-01, -6.854e-02, -1.701e-01, 1.502e-01, 2.016e-01, -2.097e-02, -3.131e-01, 3.718e-02, 6.854e-02, -2.699e-02, 2.154e-02, -1.832e-02, 2.739e-02, 4.049e-02, -1.754e-02, -1.567e-01) * s1_0;
	r += M4(3.492e-02, -2.725e-01, 3.263e-01, 2.717e-01, -6.162e-03, 1.406e-01, -1.356e-01, -1.075e-01, -1.873e-01, 1.733e-04, 5.164e-02, -9.721e-02, -1.227e-01, 7.282e-02, 1.807e-03, -3.311e-01) * s1_1;
	r += M4(7.033e-02, 1.950e-01, 3.784e-02, 2.911e-03, 1.463e-01, -5.418e-02, 8.778e-02, 6.308e-02, 1.696e-01, 4.947e-02, -9.672e-03, 1.843e-01, -4.679e-02, 3.102e-02, 1.283e-01, -1.808e-01) * s1_2;
	r += M4(-1.989e-01, 3.051e-01, -1.242e-01, 5.254e-01, -2.988e-02, 4.775e-02, -1.637e-01, 3.163e-01, -2.548e-01, 2.152e-02, -3.558e-02, -1.546e-02, 1.212e-02, 4.187e-02, -1.431e-01, -1.402e-01) * s1_3;
	r += M4(3.527e-02, -3.107e-01, 1.985e-01, 2.007e-01, -1.282e-02, -3.744e-01, -1.425e-01, -5.907e-01, 1.220e-01, 1.879e-01, 3.175e-01, 4.060e-01, 6.377e-01, -6.139e-01, 3.526e-01, -1.455e-02) * s1_4;
	r += M4(-1.572e-01, 1.924e-01, 2.907e-01, -5.192e-02, -2.296e-02, -2.071e-01, -1.023e-01, 1.924e-01, -1.108e-01, 5.270e-02, -3.200e-01, 2.719e-01, -5.230e-02, -2.079e-01, -3.798e-03, -1.097e-01) * s1_5;
	r += M4(-7.150e-02, 1.458e-01, -4.120e-01, -1.206e-01, -2.956e-02, 1.399e-01, -2.796e-01, 1.559e-01, -4.120e-02, 3.619e-02, 2.132e-02, -1.208e-02, -4.292e-03, -2.724e-02, 6.369e-02, -2.449e-02) * s1_6;
	r += M4(3.623e-01, 6.155e-02, 2.307e-01, 3.943e-02, 1.645e-04, 9.590e-02, -2.480e-01, -1.028e-01, -2.357e-01, 3.251e-01, -5.791e-03, 1.844e-01, -1.078e-01, 1.362e-01, 1.213e-01, -1.041e-01) * s1_7;
	r += M4(4.861e-02, -1.006e-01, 2.587e-01, 4.925e-02, -1.441e-02, -1.665e-01, -5.913e-02, 3.634e-02, -1.526e-01, 1.570e-01, -2.771e-01, 1.151e-01, 6.840e-02, 7.300e-02, 1.390e-01, -1.897e-02) * s1_8;
	r += M4(-1.119e-02, -5.636e-02, -1.044e-02, -3.219e-02, -4.739e-02, 4.923e-02, 4.754e-03, 9.271e-03, -2.623e-02, 3.394e-02, -4.142e-02, -3.597e-02, -2.014e-02, -6.418e-02, 3.674e-02, 1.345e-02) * s2_0;
	r += M4(-1.037e-01, -2.670e-02, -3.216e-02, 6.120e-02, 7.685e-02, 4.620e-02, 9.949e-04, 6.727e-03, 1.712e-01, -3.556e-02, 6.472e-02, -5.790e-03, -1.074e-01, -2.335e-02, -8.592e-03, -5.825e-02) * s2_1;
	r += M4(2.974e-02, 3.907e-03, 3.679e-02, -4.949e-02, -7.343e-04, 1.601e-02, 3.616e-02, 3.504e-02, -1.760e-01, -2.028e-02, 3.188e-03, -3.952e-02, 2.210e-02, -8.181e-02, 6.372e-02, -1.710e-01) * s2_2;
	r += M4(2.662e-02, 9.443e-02, -3.577e-02, -7.586e-02, 8.975e-03, -1.314e-01, 5.028e-02, 7.516e-02, 2.552e-02, -2.932e-02, 1.243e-01, -5.890e-03, 5.975e-02, 3.097e-02, -4.830e-02, 8.327e-03) * s2_3;
	r += M4(4.334e-02, 6.240e-02, 3.239e-02, 1.463e-01, -9.331e-02, 1.509e-02, 6.042e-02, -5.879e-02, -1.041e-01, 9.533e-03, -2.114e-01, -1.134e-01, 2.065e-02, -1.431e-01, 9.405e-02, 3.290e-02) * s2_4;
	r += M4(-3.393e-02, 1.038e-01, 7.829e-02, -1.421e-02, 5.322e-04, -8.931e-02, -1.222e-01, -7.281e-02, -9.470e-02, -6.067e-02, 1.393e-01, -5.241e-02, -1.683e-01, -2.373e-02, 1.739e-01, 9.144e-02) * s2_5;
	r += M4(-1.666e-02, -3.283e-02, 1.781e-02, 2.398e-02, 1.297e-01, 5.261e-02, -7.397e-02, 6.881e-02, -4.092e-02, 7.725e-02, 5.096e-02, 1.504e-02, 1.082e-03, 8.527e-02, 3.516e-03, -5.737e-02) * s2_6;
	r += M4(2.065e-03, -1.024e-01, -9.788e-02, -7.631e-03, -6.254e-02, 1.087e-02, -9.509e-02, 2.122e-02, 3.328e-02, 7.916e-02, -1.469e-01, 9.347e-02, 1.487e-02, -1.653e-01, -1.175e-01, 4.309e-02) * s2_7;
	r += M4(1.898e-02, -1.224e-02, 5.892e-02, -5.230e-02, 2.882e-02, -3.073e-02, 3.071e-02, -2.227e-02, -1.485e-02, 4.272e-02, 8.543e-02, 5.688e-02, -6.410e-02, -2.742e-02, 6.277e-02, -6.607e-02) * s2_8;
	r += M4(-1.507e-01, -1.146e-01, -3.538e-01, 1.643e-01, 7.355e-02, -6.833e-02, 9.273e-02, 1.561e-01, 5.295e-02, -2.468e-01, 3.838e-02, -6.384e-02, 5.800e-02, 5.189e-02, -1.298e-01, -1.440e-01) * s3_0;
	r += M4(-4.645e-01, -4.281e-01, 1.726e-01, -4.135e-01, -1.235e-01, 2.050e-02, -1.078e-01, 2.257e-01, -4.009e-01, -6.804e-01, 2.841e-01, 1.590e-02, 5.559e-02, 5.025e-02, -1.362e-01, -1.293e-01) * s3_1;
	r += M4(-2.853e-01, -5.119e-01, -5.830e-01, -8.160e-01, -4.620e-03, 4.034e-02, -7.113e-02, 3.030e-01, -4.781e-02, -3.174e-01, -1.389e-01, -1.041e-01, 5.569e-02, -2.279e-02, 8.369e-02, -4.992e-02) * s3_2;
	r += M4(1.022e-01, -4.245e-01, 2.079e-01, 1.777e-01, 6.685e-02, -2.325e-01, 1.024e-01, 3.118e-01, 2.143e-01, -1.724e-02, 7.240e-02, 1.078e-01, 1.772e-01, 8.507e-04, 1.992e-01, 8.216e-02) * s3_3;
	r += M4(-1.420e+00, 1.271e+00, -1.206e+00, -6.503e-01, -5.456e-01, 1.455e-01, 9.949e-02, 6.465e-01, -4.444e-02, -1.408e-01, -6.570e-01, -4.753e-02, 4.340e-01, 1.479e-01, 8.978e-02, 1.699e-01) * s3_4;
	r += M4(-2.569e-01, 8.168e-01, -3.996e-01, -9.952e-01, -1.276e-01, -9.343e-02, -3.760e-01, 1.396e-01, -3.336e-02, 6.586e-02, 2.337e-01, 7.463e-02, -1.857e-02, -1.744e-01, -3.410e-02, 3.442e-02) * s3_5;
	r += M4(-1.670e-01, 9.897e-02, -5.271e-02, -1.865e-01, -1.369e-01, 7.078e-03, -2.908e-01, 2.528e-01, -1.173e-01, 2.767e-02, 7.051e-03, 3.763e-02, 8.506e-02, 2.260e-02, 2.370e-02, -2.229e-02) * s3_6;
	r += M4(2.706e-02, -2.461e-02, -9.223e-01, -4.638e-01, -2.740e-01, -3.755e-01, -1.985e-01, 1.179e-01, 3.403e-02, -9.203e-02, -8.586e-02, 4.579e-02, 2.954e-01, -2.679e-02, -2.746e-01, -9.639e-02) * s3_7;
	r += M4(3.189e-01, 2.273e-01, 8.611e-01, -3.973e-01, -7.356e-02, -7.349e-02, 7.319e-02, 4.975e-02, 6.184e-02, 4.242e-02, -9.001e-02, 1.439e-02, 5.680e-02, -3.186e-02, 9.372e-02, -1.273e-01) * s3_8;
	r += V4(8.364e-03, 6.533e-03, -1.065e-02, 6.711e-03);
	return vec4(r);
	
}
void hook() {
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + ivec2(gl_LocalInvocationID.xy);
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv2_pt;
	V4 s0_0 = l0(-1, -1);
	V4 s2_0 = l1(-1, -1);
	V4 s0_1 = l0(0, -1);
	V4 s2_1 = l1(0, -1);
	V4 s0_2 = l0(1, -1);
	V4 s2_2 = l1(1, -1);
	V4 s0_3 = l0(-1, 0);
	V4 s2_3 = l1(-1, 0);
	V4 s0_4 = l0(0, 0);
	V4 s2_4 = l1(0, 0);
	V4 s0_5 = l0(1, 0);
	V4 s2_5 = l1(1, 0);
	V4 s0_6 = l0(-1, 1);
	V4 s2_6 = l1(-1, 1);
	V4 s0_7 = l0(0, 1);
	V4 s2_7 = l1(0, 1);
	V4 s0_8 = l0(1, 1);
	V4 s2_8 = l1(1, 1);
	V4 s1_0 = -max(-s0_0, V4(0.0));
	V4 s1_1 = -max(-s0_1, V4(0.0));
	V4 s1_2 = -max(-s0_2, V4(0.0));
	V4 s1_3 = -max(-s0_3, V4(0.0));
	V4 s1_4 = -max(-s0_4, V4(0.0));
	V4 s1_5 = -max(-s0_5, V4(0.0));
	V4 s1_6 = -max(-s0_6, V4(0.0));
	V4 s1_7 = -max(-s0_7, V4(0.0));
	V4 s1_8 = -max(-s0_8, V4(0.0));
	s0_0 = max(s0_0, V4(0.0));
	s0_1 = max(s0_1, V4(0.0));
	s0_2 = max(s0_2, V4(0.0));
	s0_3 = max(s0_3, V4(0.0));
	s0_4 = max(s0_4, V4(0.0));
	s0_5 = max(s0_5, V4(0.0));
	s0_6 = max(s0_6, V4(0.0));
	s0_7 = max(s0_7, V4(0.0));
	s0_8 = max(s0_8, V4(0.0));
	V4 s3_0 = -max(-s2_0, V4(0.0));
	V4 s3_1 = -max(-s2_1, V4(0.0));
	V4 s3_2 = -max(-s2_2, V4(0.0));
	V4 s3_3 = -max(-s2_3, V4(0.0));
	V4 s3_4 = -max(-s2_4, V4(0.0));
	V4 s3_5 = -max(-s2_5, V4(0.0));
	V4 s3_6 = -max(-s2_6, V4(0.0));
	V4 s3_7 = -max(-s2_7, V4(0.0));
	V4 s3_8 = -max(-s2_8, V4(0.0));
	s2_0 = max(s2_0, V4(0.0));
	s2_1 = max(s2_1, V4(0.0));
	s2_2 = max(s2_2, V4(0.0));
	s2_3 = max(s2_3, V4(0.0));
	s2_4 = max(s2_4, V4(0.0));
	s2_5 = max(s2_5, V4(0.0));
	s2_6 = max(s2_6, V4(0.0));
	s2_7 = max(s2_7, V4(0.0));
	s2_8 = max(s2_8, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0(s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8, s2_0, s2_1, s2_2, s2_3, s2_4, s2_5, s2_6, s2_7, s2_8, s3_0, s3_1, s3_2, s3_3, s3_4, s3_5, s3_6, s3_7, s3_8));
	imageStore(out_image, opos + ivec2(1, 0), f1(s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8, s2_0, s2_1, s2_2, s2_3, s2_4, s2_5, s2_6, s2_7, s2_8, s3_0, s3_1, s3_2, s3_3, s3_4, s3_5, s3_6, s3_7, s3_8));
}


//!DESC CuNNy-4x8C-RCAS-DS-conv4
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv3
//!BIND LUMA
//!SAVE conv4
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
	#define V4 f16vec4
	#define M4 f16mat4
	#define F float16_t
#else
	#define V4 vec4
	#define M4 mat4
	#define F float
#endif
#define l0(x, y) V4(texelFetch(conv3_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv3_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
vec4 f0(V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8, V4 s2_0, V4 s2_1, V4 s2_2, V4 s2_3, V4 s2_4, V4 s2_5, V4 s2_6, V4 s2_7, V4 s2_8, V4 s3_0, V4 s3_1, V4 s3_2, V4 s3_3, V4 s3_4, V4 s3_5, V4 s3_6, V4 s3_7, V4 s3_8) {
	V4 r = V4(0.0);
	r += M4(-3.331e-02, 1.960e-02, 4.045e-02, -1.850e-02, -2.317e-02, -7.383e-03, 2.197e-02, 6.357e-03, 1.250e-01, 1.203e-02, -2.520e-02, 3.683e-02, 5.241e-02, 5.207e-02, -1.544e-02, -3.804e-02) * s0_0;
	r += M4(4.258e-02, 3.417e-02, -6.370e-02, -1.372e-01, -2.456e-01, -9.831e-02, -9.146e-02, 8.693e-02, 9.355e-02, -5.535e-02, 1.059e-02, 8.940e-03, 7.492e-03, -2.783e-01, -9.559e-02, 2.146e-01) * s0_1;
	r += M4(4.641e-02, -1.900e-02, 1.339e-02, -1.611e-02, 2.833e-02, -4.499e-02, 7.821e-03, -6.588e-02, 4.715e-02, 2.043e-02, -5.006e-02, -5.887e-02, 7.318e-02, -5.888e-03, 3.921e-02, 1.306e-01) * s0_2;
	r += M4(-1.283e-02, -8.150e-02, -3.817e-02, 1.148e-01, 2.163e-01, 1.160e-01, -4.486e-02, 6.111e-02, -1.235e-01, -1.091e-01, 5.740e-02, -4.375e-02, -3.341e-02, -2.702e-01, -9.307e-03, -1.899e-02) * s0_3;
	r += M4(-1.097e-01, -1.411e-01, -8.960e-02, 1.357e-01, -3.323e-01, 1.773e-01, -6.953e-02, -1.167e-01, 1.454e-01, 2.863e-01, 1.017e-03, 1.065e-01, 2.635e-01, -8.442e-02, -3.246e-01, -2.238e-01) * s0_4;
	r += M4(1.536e-02, 3.774e-02, 1.825e-02, 4.069e-02, -1.224e-01, -1.766e-01, -1.029e-01, 3.899e-02, -7.399e-02, 3.379e-02, 6.332e-02, 9.986e-02, -1.428e-01, -1.107e-01, 4.119e-02, -1.003e-01) * s0_5;
	r += M4(1.179e-01, 1.484e-02, 4.891e-02, -2.998e-02, -5.541e-02, 8.384e-03, -4.424e-02, 7.380e-02, -2.017e-02, -2.988e-02, 1.211e-02, -2.471e-02, -3.368e-02, -2.619e-01, -1.986e-01, 9.317e-02) * s0_6;
	r += M4(-4.253e-02, -1.446e-02, -2.644e-02, -4.561e-01, 1.506e-02, 5.846e-02, 1.281e-02, 7.303e-02, 7.619e-02, -2.807e-03, -5.946e-03, -1.549e-01, -5.700e-02, 1.538e-01, -7.512e-02, 2.696e-01) * s0_7;
	r += M4(8.050e-03, 4.302e-02, -9.664e-03, -1.106e-01, 8.235e-02, -6.632e-02, -2.241e-02, 5.185e-02, -3.229e-02, 4.365e-03, 8.993e-03, -1.298e-01, 2.869e-02, -1.012e-01, 7.691e-02, 5.272e-02) * s0_8;
	r += M4(-3.252e-02, -1.759e-02, 9.963e-03, 5.377e-02, -6.720e-02, 2.794e-02, -1.740e-02, 1.826e-02, 1.499e-01, 3.743e-02, -5.331e-03, 1.183e-01, 7.190e-02, -4.653e-02, -5.079e-02, 2.557e-02) * s1_0;
	r += M4(-3.542e-02, 8.608e-03, -3.847e-02, 2.538e-02, -2.613e-01, -5.590e-02, 7.280e-02, 4.911e-02, -3.095e-03, -4.626e-02, 4.707e-02, 1.406e-01, 4.183e-02, -3.633e-02, 3.204e-02, 1.714e-01) * s1_1;
	r += M4(-6.305e-03, 3.243e-02, -1.058e-02, -6.322e-02, 5.846e-02, -3.699e-02, -9.755e-02, -9.253e-02, 8.560e-03, -1.809e-02, 5.116e-02, 4.037e-02, 4.020e-02, 1.251e-02, 3.906e-02, 6.477e-02) * s1_2;
	r += M4(1.530e-02, -8.446e-02, 1.183e-01, -8.323e-02, 5.347e-02, 8.785e-02, -2.080e-03, 4.314e-02, -1.745e-01, -2.025e-01, 4.172e-02, 9.202e-03, -4.800e-02, -7.204e-02, -7.367e-04, -5.185e-03) * s1_3;
	r += M4(7.080e-02, 4.542e-02, -7.721e-02, 1.417e-01, -1.511e-01, 5.588e-01, -2.400e-02, -4.170e-01, 3.115e-01, 1.448e-01, -3.626e-02, 2.746e-01, 4.282e-01, 4.386e-02, 9.204e-02, 9.065e-03) * s1_4;
	r += M4(-1.293e-01, -9.155e-02, -2.824e-02, -1.021e-02, -3.236e-02, -1.107e-01, -2.498e-01, -3.067e-02, -4.650e-02, -6.099e-02, -2.328e-02, 2.244e-01, 1.257e-01, -2.391e-02, -3.947e-02, 9.237e-02) * s1_5;
	r += M4(1.128e-01, -1.558e-01, -8.639e-02, 5.754e-02, 3.245e-02, 9.857e-02, -3.754e-02, -5.260e-03, -1.174e-02, -9.180e-03, 1.419e-02, 3.710e-02, -2.444e-03, 2.814e-02, -2.185e-02, 7.805e-03) * s1_6;
	r += M4(-9.643e-02, 1.346e-01, 1.630e-02, -1.135e-01, -7.056e-02, -5.180e-02, -3.254e-02, 1.704e-01, -1.677e-02, -1.173e-01, 5.311e-02, -5.655e-02, -4.140e-02, -1.008e-01, -1.067e-01, 2.639e-02) * s1_7;
	r += M4(1.301e-02, 2.821e-03, -8.216e-03, -6.248e-02, 3.555e-02, -4.772e-02, 5.469e-02, 1.558e-01, -2.889e-02, 3.122e-02, 5.443e-02, -2.010e-02, -1.184e-02, 3.811e-02, 4.956e-02, 5.652e-02) * s1_8;
	r += M4(2.206e-02, -9.027e-03, 7.314e-02, 4.426e-02, 4.552e-02, 7.986e-02, 3.658e-03, 9.649e-02, 1.147e-01, 5.357e-02, 4.421e-02, 1.023e-01, -1.007e-01, 2.211e-02, -7.007e-02, -3.942e-02) * s2_0;
	r += M4(7.105e-02, 4.566e-02, -6.272e-02, 6.850e-02, -7.541e-02, 2.381e-02, 9.667e-02, -7.091e-03, -5.198e-02, -1.025e-02, 1.365e-01, 1.544e-01, -6.913e-02, 4.982e-02, 1.760e-02, -4.227e-02) * s2_1;
	r += M4(2.257e-02, 1.486e-02, 6.676e-03, -6.688e-02, -7.775e-02, -4.397e-02, -4.494e-02, -4.958e-02, -1.897e-02, 4.066e-03, 3.622e-02, 9.499e-02, 9.965e-03, 1.541e-02, 2.067e-02, -1.923e-02) * s2_2;
	r += M4(-7.978e-02, -2.046e-01, 5.581e-02, -4.922e-02, 2.354e-01, -8.034e-02, -1.706e-01, 7.330e-03, -9.292e-02, -2.310e-01, -9.743e-02, 9.403e-02, 9.384e-02, 2.047e-01, 1.203e-01, 8.611e-02) * s2_3;
	r += M4(1.326e-01, 3.209e-01, 1.930e-01, 5.189e-02, 1.296e-01, 6.867e-02, -2.212e-01, 5.022e-02, 1.303e-01, -1.797e-01, -1.695e-02, -3.419e-02, 3.174e-01, -2.031e-01, -1.363e-01, 9.178e-02) * s2_4;
	r += M4(-6.075e-02, 2.981e-02, -5.875e-02, 9.640e-02, 1.165e-01, -7.988e-03, -7.938e-02, 3.018e-02, 1.304e-01, 4.297e-02, 2.106e-02, -2.320e-02, 8.904e-02, -2.631e-02, -6.657e-02, 1.038e-01) * s2_5;
	r += M4(-2.912e-02, -1.969e-02, -8.012e-03, 1.221e-02, -1.060e-01, -9.753e-02, -1.242e-01, 8.302e-02, 4.711e-03, -2.731e-02, -3.537e-03, -1.654e-02, -2.589e-02, -1.082e-01, -3.909e-02, 3.395e-02) * s2_6;
	r += M4(-1.621e-01, -1.761e-01, 6.986e-03, -3.562e-03, -3.892e-02, 2.570e-02, -5.902e-02, 7.033e-02, -3.859e-02, 3.082e-02, -2.607e-02, -7.487e-02, -2.131e-02, -4.835e-02, 2.682e-02, 1.391e-01) * s2_7;
	r += M4(-1.763e-03, 2.497e-02, 1.763e-02, 4.022e-02, 3.177e-02, -6.854e-03, -5.377e-02, 3.858e-02, 1.390e-02, 9.260e-04, -4.566e-03, 6.256e-02, -2.794e-03, -7.775e-02, -5.557e-02, 6.119e-02) * s2_8;
	r += M4(5.219e-02, -1.066e-02, 4.039e-02, 1.187e-01, -3.586e-04, 1.714e-02, 7.754e-02, 8.673e-02, 1.573e-01, -5.703e-02, -1.923e-02, 1.698e-01, -2.828e-02, -6.415e-03, -4.724e-02, -6.372e-02) * s3_0;
	r += M4(1.623e-01, 2.703e-02, -1.381e-01, -3.193e-04, -1.066e-01, 3.340e-02, 1.141e-01, 6.478e-01, 2.556e-02, -2.113e-02, 2.219e-01, 2.095e-01, 1.001e-01, 5.304e-02, 9.069e-02, -4.172e-02) * s3_1;
	r += M4(4.656e-02, -1.690e-02, -4.452e-02, -4.169e-02, 1.396e-02, -3.466e-03, -1.481e-02, -4.027e-03, 8.124e-02, -1.686e-03, 1.180e-02, 2.679e-02, -7.943e-02, -4.926e-02, 3.258e-02, -3.663e-02) * s3_2;
	r += M4(-5.784e-02, -1.308e-01, 1.825e-02, -5.040e-02, 1.047e-01, -2.686e-01, -1.242e-01, 1.236e-01, -8.149e-03, -9.149e-02, 1.707e-02, 8.940e-03, 7.531e-02, 2.225e-01, 6.301e-02, 7.444e-02) * s3_3;
	r += M4(2.003e-01, 1.088e-01, 1.606e-01, -7.154e-02, 2.161e-01, 4.287e-02, -3.323e-02, 6.979e-01, 2.935e-01, -2.582e-01, 9.938e-02, 5.560e-02, 1.231e-01, -7.251e-02, 2.959e-02, -5.391e-02) * s3_4;
	r += M4(-2.980e-02, -2.002e-02, -9.582e-02, 4.652e-02, -9.795e-02, -1.831e-01, -2.664e-02, 4.690e-02, 5.300e-02, -4.877e-02, 1.385e-02, 8.701e-02, 1.139e-01, 9.790e-02, 3.795e-02, 6.805e-02) * s3_5;
	r += M4(-1.942e-02, 3.978e-02, 2.240e-03, 2.437e-02, -1.496e-02, -1.248e-01, 1.915e-02, -2.216e-02, -4.153e-02, -1.242e-01, -6.517e-02, 8.145e-02, -2.039e-01, -8.331e-02, -3.610e-02, 3.485e-02) * s3_6;
	r += M4(-7.669e-02, 3.521e-02, 3.828e-02, -5.456e-02, -6.109e-02, 4.206e-02, 4.290e-02, -1.685e-01, 4.489e-03, -7.848e-02, -6.145e-02, -1.703e-02, -9.049e-02, -1.084e-01, -7.931e-02, 1.017e-01) * s3_7;
	r += M4(-1.388e-02, -3.079e-02, -3.046e-02, -1.404e-02, 3.262e-02, -4.416e-02, -6.146e-02, -1.754e-02, 2.870e-02, -4.805e-02, 8.438e-03, 2.236e-02, 2.628e-02, -4.392e-02, -3.318e-03, 9.112e-02) * s3_8;
	r += V4(-6.209e-03, 8.941e-03, 2.559e-03, -6.175e-03);
	return vec4(r);
	
}
vec4 f1(V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8, V4 s2_0, V4 s2_1, V4 s2_2, V4 s2_3, V4 s2_4, V4 s2_5, V4 s2_6, V4 s2_7, V4 s2_8, V4 s3_0, V4 s3_1, V4 s3_2, V4 s3_3, V4 s3_4, V4 s3_5, V4 s3_6, V4 s3_7, V4 s3_8) {
	V4 r = V4(0.0);
	r += M4(-6.153e-05, -8.109e-03, 5.910e-02, 1.299e-02, -3.529e-03, -8.335e-04, 3.132e-02, 8.170e-02, 4.854e-03, -4.528e-02, 1.824e-02, -9.359e-03, 8.617e-02, -1.509e-01, -7.094e-02, -1.759e-02) * s0_0;
	r += M4(1.739e-02, -3.001e-02, -1.373e-02, -1.606e-02, -5.677e-03, 2.105e-01, 2.424e-02, -1.959e-02, -4.187e-02, -1.062e-01, 1.600e-01, 4.848e-02, -1.077e-01, 9.164e-04, 2.270e-01, 2.353e-02) * s0_1;
	r += M4(-3.547e-02, -6.421e-02, -8.263e-03, -1.341e-01, 8.533e-02, -7.774e-02, 8.277e-02, 1.198e-01, -3.488e-02, 1.216e-02, 3.699e-02, -1.052e-01, -3.883e-02, -4.705e-03, 1.062e-01, -3.017e-02) * s0_2;
	r += M4(-2.607e-02, -5.752e-02, 4.693e-02, 1.167e-01, -5.000e-02, 8.809e-03, 3.496e-02, 9.436e-03, 3.398e-02, -1.784e-02, -1.000e-01, -1.317e-02, -4.070e-02, -1.027e-02, 1.116e-01, 3.924e-02) * s0_3;
	r += M4(1.626e-01, 1.055e-02, -1.200e-01, -7.636e-02, 3.589e-02, 4.375e-01, 1.212e-02, 7.270e-02, 1.658e-02, 1.269e-01, 5.148e-01, 6.746e-03, 6.385e-02, -2.161e-01, 1.379e-01, -8.527e-02) * s0_4;
	r += M4(-1.480e-01, 8.667e-02, -1.934e-02, 1.533e-01, 1.814e-01, -1.562e-01, 1.176e-01, -1.842e-04, -7.164e-02, 1.082e-01, 6.240e-02, -1.411e-01, 1.334e-01, 1.031e-01, 2.653e-02, -1.552e-01) * s0_5;
	r += M4(-1.090e-02, -8.097e-02, -4.752e-03, -1.145e-03, 5.248e-03, 9.103e-02, 1.057e-02, 2.399e-02, -1.851e-02, -7.368e-03, -4.950e-02, -1.209e-02, -1.839e-03, -8.233e-02, 8.813e-02, 3.946e-02) * s0_6;
	r += M4(8.255e-02, 7.378e-03, -7.758e-02, 1.755e-03, -1.425e-02, 7.085e-02, -3.848e-02, -3.727e-02, 3.306e-02, -7.369e-02, 2.558e-02, 2.359e-03, -1.504e-02, 2.331e-01, 5.210e-02, 5.403e-03) * s0_7;
	r += M4(-3.187e-02, 2.242e-02, 6.138e-02, 4.677e-02, 6.775e-02, -5.682e-02, 2.113e-02, -4.704e-03, -9.456e-02, 8.162e-02, -4.327e-03, -5.717e-03, 4.139e-02, -1.104e-01, 8.418e-02, 3.874e-02) * s0_8;
	r += M4(-1.094e-02, 2.271e-02, 4.593e-02, 2.781e-02, 3.177e-02, 6.456e-02, -3.421e-02, -8.470e-03, 6.089e-03, -7.146e-02, 8.961e-02, -2.156e-03, 3.895e-02, -7.391e-02, 2.392e-02, -5.154e-02) * s1_0;
	r += M4(3.088e-02, 2.900e-02, -3.069e-02, -5.046e-02, -1.150e-02, 2.540e-01, 1.312e-01, 1.228e-01, -3.611e-02, 1.432e-02, 1.265e-01, 6.231e-02, -1.298e-01, 4.248e-02, 1.215e-01, 9.350e-02) * s1_1;
	r += M4(-4.969e-02, 7.578e-03, -2.239e-02, -9.913e-02, 8.865e-02, -1.152e-02, 6.754e-02, 2.060e-01, 1.287e-02, -1.295e-02, 1.150e-01, -5.581e-02, 6.696e-02, 2.229e-03, 4.070e-02, -3.006e-02) * s1_2;
	r += M4(1.055e-01, -2.630e-01, 7.378e-02, -5.833e-02, 3.412e-02, -2.748e-02, -8.521e-02, -1.041e-02, 6.594e-02, -4.608e-02, -1.049e-01, 5.554e-03, 3.262e-02, -7.828e-02, 3.299e-02, -3.355e-02) * s1_3;
	r += M4(-8.133e-02, -2.110e-03, -5.557e-02, 1.343e-01, -9.727e-02, 3.190e-01, 3.135e-01, 1.438e-01, -1.055e-02, 9.288e-02, -8.133e-02, -7.874e-03, -4.527e-02, -2.783e-01, 1.340e-01, -3.593e-02) * s1_4;
	r += M4(-7.976e-02, 7.385e-05, 2.126e-02, -4.840e-02, 2.725e-01, -7.663e-02, 4.065e-02, 4.768e-02, -4.630e-03, -2.984e-02, 3.435e-02, -2.443e-01, -2.816e-02, 1.036e-02, 3.872e-02, 1.646e-02) * s1_5;
	r += M4(7.298e-02, -1.091e-01, 2.321e-03, 6.714e-02, -8.674e-03, 7.704e-02, 2.434e-02, 9.614e-03, -1.102e-02, 2.685e-02, -1.181e-02, 2.893e-03, -7.124e-03, 1.588e-02, 2.952e-02, 8.465e-03) * s1_6;
	r += M4(-3.773e-02, 1.950e-01, -4.146e-02, 4.048e-02, -4.341e-02, 1.609e-01, -1.222e-02, -3.655e-03, 2.249e-02, -6.451e-02, -1.110e-01, -1.930e-02, -1.878e-03, 1.642e-02, 1.341e-02, -8.478e-03) * s1_7;
	r += M4(7.779e-02, -7.299e-02, 1.576e-02, -4.764e-03, 1.148e-01, -7.901e-02, -1.705e-04, 1.692e-02, -8.649e-02, 4.031e-02, 5.854e-02, 5.005e-02, -1.531e-02, 2.704e-02, 1.473e-02, 2.045e-02) * s1_8;
	r += M4(5.078e-03, -2.924e-02, 1.585e-02, -1.204e-02, -6.783e-02, 6.616e-02, -1.619e-02, 7.296e-02, 3.941e-02, -1.142e-01, 4.676e-02, -3.598e-02, -2.751e-02, 1.363e-01, -5.516e-02, -9.685e-03) * s2_0;
	r += M4(-5.030e-02, 8.447e-02, -2.350e-02, -2.670e-02, 1.333e-01, -1.356e-02, -2.475e-02, -4.500e-02, -9.514e-02, 5.358e-02, 8.716e-03, 1.705e-01, 1.019e-01, 4.525e-02, -9.225e-02, 3.673e-02) * s2_1;
	r += M4(1.442e-02, -1.501e-02, 6.884e-02, -2.266e-03, -5.138e-03, 4.550e-02, 2.502e-02, 1.110e-01, 3.422e-02, 7.691e-02, -3.558e-02, 8.799e-02, 6.509e-03, -3.170e-02, 5.179e-03, 9.463e-02) * s2_2;
	r += M4(7.702e-02, -1.315e-01, -1.421e-01, 5.026e-03, -6.964e-03, -1.171e-01, 5.956e-02, 1.815e-02, 4.651e-02, -9.646e-02, -4.204e-03, 4.894e-02, -1.826e-02, -1.249e-02, -7.571e-02, -5.066e-02) * s2_3;
	r += M4(-1.580e-01, 2.561e-01, -2.212e-01, 7.334e-02, 8.415e-02, -2.636e-01, -5.795e-02, 6.982e-02, 1.101e-01, -1.304e-01, -1.248e-01, 6.477e-02, -1.029e-01, -8.882e-02, -1.934e-01, 1.641e-01) * s2_4;
	r += M4(1.198e-01, 1.547e-02, -7.052e-02, -1.463e-01, 2.844e-02, -1.604e-02, -3.019e-03, 4.740e-02, -2.514e-02, 1.116e-01, 5.605e-03, 8.964e-02, 1.900e-01, -1.059e-01, -1.226e-01, -1.043e-01) * s2_5;
	r += M4(-6.656e-03, 6.150e-02, 1.877e-02, 1.896e-02, 1.654e-02, 7.446e-02, 3.801e-03, 2.140e-02, 5.146e-03, 2.542e-03, 8.813e-03, 1.227e-02, 7.285e-03, 3.534e-02, -9.702e-02, -2.337e-02) * s2_6;
	r += M4(-1.781e-02, 1.091e-01, -8.427e-02, -3.452e-02, 2.989e-02, 6.960e-02, 2.693e-02, -1.409e-02, 2.872e-02, 5.052e-02, 5.848e-03, 3.306e-02, -7.940e-02, 2.007e-01, -4.167e-02, 4.384e-02) * s2_7;
	r += M4(-1.075e-02, 3.507e-02, 2.219e-02, 5.132e-02, 9.890e-02, -2.854e-02, 5.692e-02, 9.193e-03, 3.333e-02, -2.416e-03, -3.269e-02, 1.904e-02, 1.130e-01, -2.778e-02, -1.793e-02, -8.551e-03) * s2_8;
	r += M4(-1.529e-02, -2.146e-02, -3.934e-02, 5.066e-02, -3.655e-02, -8.187e-02, 1.204e-01, -2.813e-02, 7.049e-02, -1.109e-01, -4.730e-02, -4.093e-03, -4.407e-02, 5.240e-02, -2.137e-02, 7.814e-02) * s3_0;
	r += M4(-4.773e-02, 5.409e-03, -1.604e-01, 9.561e-03, -9.580e-02, 1.665e-01, -6.176e-03, -1.196e-01, -9.819e-02, -6.569e-02, 2.289e-02, 2.031e-01, 1.250e-01, -1.260e-01, 7.994e-03, -1.020e-01) * s3_1;
	r += M4(1.411e-02, -4.696e-02, -5.937e-03, -9.573e-02, -1.561e-01, 8.661e-03, 5.642e-02, -2.017e-01, 1.040e-01, -5.774e-02, -3.580e-02, -1.137e-01, -1.786e-02, 3.496e-02, 7.405e-03, 2.265e-01) * s3_2;
	r += M4(7.837e-02, -7.593e-02, -1.936e-01, 5.191e-03, 2.060e-02, -2.549e-01, 1.562e-01, 1.402e-02, 5.858e-02, -1.564e-01, -1.920e-01, -2.513e-04, -1.003e-01, 1.489e-01, -4.000e-03, -5.791e-02) * s3_3;
	r += M4(-1.536e-01, 1.519e-01, -4.834e-01, 1.061e-01, -2.221e-01, 1.424e-01, 1.678e-02, -1.955e-02, 1.653e-02, 1.218e-01, 8.373e-02, 1.484e-01, 7.909e-02, -2.060e-01, -4.149e-02, 6.975e-02) * s3_4;
	r += M4(1.093e-01, 7.688e-03, -1.332e-01, -1.324e-01, -1.046e-01, -8.324e-02, 1.498e-01, -2.124e-02, 9.427e-02, -4.644e-02, 4.161e-02, 7.602e-03, 3.855e-02, 4.801e-02, -7.847e-02, 1.642e-02) * s3_5;
	r += M4(-1.308e-02, 4.789e-02, -6.033e-02, 3.933e-03, -3.991e-02, -6.604e-03, -2.558e-02, -1.620e-03, 5.921e-02, -4.032e-02, 1.077e-02, 3.754e-02, -2.095e-02, 1.880e-01, -9.146e-02, 1.145e-02) * s3_6;
	r += M4(2.335e-03, 5.865e-02, -3.856e-03, -3.504e-02, -2.432e-02, 3.106e-02, 2.963e-02, -1.511e-02, 3.251e-02, 3.071e-03, -1.123e-01, 6.612e-02, -9.012e-03, 1.140e-01, -2.801e-02, -1.627e-02) * s3_7;
	r += M4(1.035e-02, -2.634e-02, 3.910e-02, -2.730e-03, 7.387e-02, -5.548e-02, 4.159e-02, -8.846e-03, 2.744e-02, -1.300e-03, -4.822e-02, -1.725e-02, 7.431e-02, 5.833e-02, -3.763e-02, -4.502e-02) * s3_8;
	r += V4(8.048e-04, 3.312e-03, 3.507e-02, -3.937e-03);
	return vec4(r);
	
}
void hook() {
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + ivec2(gl_LocalInvocationID.xy);
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv3_pt;
	V4 s0_0 = l0(-1, -1);
	V4 s2_0 = l1(-1, -1);
	V4 s0_1 = l0(0, -1);
	V4 s2_1 = l1(0, -1);
	V4 s0_2 = l0(1, -1);
	V4 s2_2 = l1(1, -1);
	V4 s0_3 = l0(-1, 0);
	V4 s2_3 = l1(-1, 0);
	V4 s0_4 = l0(0, 0);
	V4 s2_4 = l1(0, 0);
	V4 s0_5 = l0(1, 0);
	V4 s2_5 = l1(1, 0);
	V4 s0_6 = l0(-1, 1);
	V4 s2_6 = l1(-1, 1);
	V4 s0_7 = l0(0, 1);
	V4 s2_7 = l1(0, 1);
	V4 s0_8 = l0(1, 1);
	V4 s2_8 = l1(1, 1);
	V4 s1_0 = -max(-s0_0, V4(0.0));
	V4 s1_1 = -max(-s0_1, V4(0.0));
	V4 s1_2 = -max(-s0_2, V4(0.0));
	V4 s1_3 = -max(-s0_3, V4(0.0));
	V4 s1_4 = -max(-s0_4, V4(0.0));
	V4 s1_5 = -max(-s0_5, V4(0.0));
	V4 s1_6 = -max(-s0_6, V4(0.0));
	V4 s1_7 = -max(-s0_7, V4(0.0));
	V4 s1_8 = -max(-s0_8, V4(0.0));
	s0_0 = max(s0_0, V4(0.0));
	s0_1 = max(s0_1, V4(0.0));
	s0_2 = max(s0_2, V4(0.0));
	s0_3 = max(s0_3, V4(0.0));
	s0_4 = max(s0_4, V4(0.0));
	s0_5 = max(s0_5, V4(0.0));
	s0_6 = max(s0_6, V4(0.0));
	s0_7 = max(s0_7, V4(0.0));
	s0_8 = max(s0_8, V4(0.0));
	V4 s3_0 = -max(-s2_0, V4(0.0));
	V4 s3_1 = -max(-s2_1, V4(0.0));
	V4 s3_2 = -max(-s2_2, V4(0.0));
	V4 s3_3 = -max(-s2_3, V4(0.0));
	V4 s3_4 = -max(-s2_4, V4(0.0));
	V4 s3_5 = -max(-s2_5, V4(0.0));
	V4 s3_6 = -max(-s2_6, V4(0.0));
	V4 s3_7 = -max(-s2_7, V4(0.0));
	V4 s3_8 = -max(-s2_8, V4(0.0));
	s2_0 = max(s2_0, V4(0.0));
	s2_1 = max(s2_1, V4(0.0));
	s2_2 = max(s2_2, V4(0.0));
	s2_3 = max(s2_3, V4(0.0));
	s2_4 = max(s2_4, V4(0.0));
	s2_5 = max(s2_5, V4(0.0));
	s2_6 = max(s2_6, V4(0.0));
	s2_7 = max(s2_7, V4(0.0));
	s2_8 = max(s2_8, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0(s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8, s2_0, s2_1, s2_2, s2_3, s2_4, s2_5, s2_6, s2_7, s2_8, s3_0, s3_1, s3_2, s3_3, s3_4, s3_5, s3_6, s3_7, s3_8));
	imageStore(out_image, opos + ivec2(1, 0), f1(s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8, s2_0, s2_1, s2_2, s2_3, s2_4, s2_5, s2_6, s2_7, s2_8, s3_0, s3_1, s3_2, s3_3, s3_4, s3_5, s3_6, s3_7, s3_8));
}


//!DESC CuNNy-4x8C-RCAS-DS-out
//!HOOK LUMA
//!COMPUTE 8 8 8 8
//!BIND conv4
//!BIND LUMA
//!SAVE out
//!WIDTH LUMA.w
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
	#define V4 f16vec4
	#define M4 f16mat4
	#define F float16_t
#else
	#define V4 vec4
	#define M4 mat4
	#define F float
#endif
#define l0(x, y) V4(texelFetch(conv4_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv4_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
vec4 f0(V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8, V4 s2_0, V4 s2_1, V4 s2_2, V4 s2_3, V4 s2_4, V4 s2_5, V4 s2_6, V4 s2_7, V4 s2_8, V4 s3_0, V4 s3_1, V4 s3_2, V4 s3_3, V4 s3_4, V4 s3_5, V4 s3_6, V4 s3_7, V4 s3_8) {
	V4 r = V4(0.0);
	r += M4(-3.742e-02, -2.285e-03, 8.929e-03, 2.423e-02, -4.529e-02, 3.686e-02, -1.193e-02, 4.260e-03, -1.386e-02, 2.522e-02, -1.826e-02, -1.833e-02, 8.772e-02, 3.317e-02, -1.227e-01, -4.936e-02) * s0_0;
	r += M4(-1.004e-01, -7.256e-02, 3.560e-02, 3.821e-02, 4.794e-02, -4.655e-02, 9.600e-02, 5.649e-02, 6.830e-03, -2.674e-02, -2.391e-02, -4.579e-02, 8.536e-02, 8.649e-02, -8.531e-02, -1.637e-01) * s0_1;
	r += M4(1.240e-02, -4.073e-03, 1.152e-02, 6.030e-03, 1.307e-02, 4.237e-02, -1.492e-03, 1.082e-02, 2.865e-02, 2.616e-02, 5.800e-03, 7.528e-03, 3.183e-03, 2.398e-02, 7.776e-03, 1.110e-03) * s0_2;
	r += M4(1.260e-01, -9.522e-02, -2.859e-02, -1.422e-01, -2.628e-02, 4.759e-02, -1.000e-01, 8.054e-02, 8.784e-02, -3.433e-02, 1.174e-01, -3.846e-02, -4.627e-01, 5.021e-02, 3.779e-01, 1.506e-01) * s0_3;
	r += M4(-1.819e-02, 6.337e-01, -4.287e-01, 1.512e-01, 3.723e-02, -4.082e-02, -9.573e-02, -3.193e-01, 2.919e-01, 2.360e-01, 1.029e-01, 1.845e-01, -3.681e-01, -8.702e-01, 5.423e-01, 5.761e-01) * s0_4;
	r += M4(1.149e-01, -8.358e-02, 6.417e-02, -1.746e-01, 3.594e-03, 3.977e-03, -1.918e-02, 7.695e-03, -4.825e-02, 3.725e-02, 3.425e-02, 4.041e-02, 1.978e-03, 1.020e-02, -7.210e-02, 9.193e-02) * s0_5;
	r += M4(4.100e-03, 1.797e-02, -7.547e-02, -6.117e-02, -4.154e-03, -1.654e-03, 1.745e-03, -1.749e-02, 6.945e-02, 3.854e-02, -1.304e-01, -1.508e-02, 1.421e-01, 3.475e-02, -2.027e-01, 4.173e-04) * s0_6;
	r += M4(-6.365e-02, -3.125e-02, -1.057e-01, -9.032e-03, 1.492e-02, 8.152e-04, 7.886e-02, 1.073e-01, -1.472e-01, -1.459e-01, 1.663e-01, -2.166e-01, 1.658e-01, 2.065e-01, -3.620e-02, -2.588e-01) * s0_7;
	r += M4(1.925e-03, -1.810e-02, 4.607e-02, -1.193e-02, -2.223e-02, 1.456e-03, 8.992e-03, 1.035e-02, -1.412e-04, -2.421e-02, -6.957e-02, 4.439e-02, -3.845e-02, 3.182e-02, 1.411e-03, 2.180e-02) * s0_8;
	r += M4(2.535e-02, -9.739e-03, -1.183e-02, 2.946e-02, 4.866e-02, 3.868e-03, -2.326e-02, -1.885e-03, -3.236e-02, -2.242e-02, -3.546e-02, -1.797e-02, 4.692e-03, -1.561e-03, 1.331e-02, 3.238e-03) * s1_0;
	r += M4(-6.275e-02, 1.178e-02, -2.535e-02, -4.554e-02, -4.610e-02, 6.115e-02, 1.373e-01, 1.161e-02, 1.481e-02, 2.008e-02, -3.379e-02, -4.111e-02, 2.465e-02, 3.428e-02, 1.285e-02, 2.391e-02) * s1_1;
	r += M4(1.166e-02, -1.930e-02, 8.885e-03, 1.801e-02, 1.106e-01, 2.432e-02, -2.195e-02, 4.308e-02, 1.996e-02, 2.041e-02, -6.912e-03, -4.580e-03, 1.494e-02, 8.090e-03, 1.407e-02, 8.447e-03) * s1_2;
	r += M4(3.085e-02, -6.278e-02, 9.742e-02, -9.203e-02, -1.023e-02, 3.697e-02, -5.576e-02, 1.828e-02, -1.008e-01, -1.723e-02, 3.512e-02, -2.111e-02, -2.758e-02, 5.664e-02, -1.735e-02, 3.599e-02) * s1_3;
	r += M4(-2.293e-02, 1.431e-01, -5.239e-02, 2.217e-01, 2.304e-01, 7.857e-02, -4.535e-01, -3.216e-01, -2.457e-03, -1.036e-01, 1.236e-01, 1.636e-01, 6.349e-03, -8.734e-02, 1.384e-02, -4.749e-02) * s1_4;
	r += M4(1.797e-02, -3.481e-02, 3.085e-02, -4.043e-02, 2.510e-02, 1.205e-01, 8.081e-02, -1.292e-01, -6.210e-02, -1.281e-02, 9.556e-03, 1.096e-02, 2.590e-03, 2.572e-02, -2.303e-02, -1.623e-02) * s1_5;
	r += M4(1.161e-03, -1.011e-03, -1.357e-02, -1.890e-02, -5.100e-04, 7.456e-03, 4.098e-03, -1.514e-02, 3.215e-02, 3.223e-02, -1.807e-02, 4.824e-02, -7.587e-03, -1.345e-03, -5.640e-02, -1.105e-02) * s1_6;
	r += M4(-2.618e-02, -2.205e-02, -3.905e-02, -3.733e-02, -3.007e-02, -3.094e-02, 8.152e-02, 1.092e-01, -1.103e-02, -1.242e-02, -9.497e-02, -1.793e-01, 1.205e-02, 1.863e-02, 1.405e-02, -2.293e-02) * s1_7;
	r += M4(1.151e-02, -1.184e-03, 8.847e-03, -8.633e-03, -6.066e-03, 6.647e-03, -1.423e-02, 7.901e-03, 1.120e-02, -1.157e-02, -2.057e-02, -1.334e-02, -2.816e-03, -4.115e-03, 2.082e-02, 2.630e-02) * s1_8;
	r += M4(3.721e-02, 6.072e-03, -7.058e-03, 3.164e-02, 2.245e-02, -1.041e-02, -4.095e-02, 2.452e-02, -4.418e-03, 3.502e-03, -1.796e-03, 2.285e-03, -6.688e-03, -8.562e-04, 1.175e-02, -8.320e-03) * s2_0;
	r += M4(2.798e-02, 5.951e-02, 6.066e-02, 8.964e-03, -3.963e-02, 2.717e-02, -1.693e-03, -5.384e-02, 1.219e-02, 1.603e-02, 8.074e-03, 1.665e-02, -2.037e-02, -9.227e-03, -1.348e-02, 2.625e-02) * s2_1;
	r += M4(5.327e-03, 5.234e-03, -7.376e-04, 6.751e-03, -1.360e-02, -3.359e-02, -7.585e-03, 9.290e-03, 2.250e-03, -1.140e-02, 3.526e-03, -2.229e-03, 1.231e-02, 6.701e-03, -8.635e-04, -3.734e-03) * s2_2;
	r += M4(-1.058e-01, 1.514e-02, 6.844e-02, -1.220e-02, 3.472e-03, -6.275e-02, 1.247e-01, -9.309e-02, 2.160e-02, -1.655e-02, 2.845e-02, -1.809e-02, -5.668e-03, -4.378e-02, -3.950e-02, -6.705e-03) * s2_3;
	r += M4(-8.687e-02, -8.079e-02, -1.348e-01, 4.465e-02, -1.224e-01, 1.703e-02, -1.141e-01, 2.002e-01, -2.586e-01, -1.594e-01, -1.992e-01, -8.693e-02, 6.735e-02, 5.299e-02, -5.629e-03, -5.868e-02) * s2_4;
	r += M4(2.909e-02, -8.549e-03, 4.026e-02, -1.444e-02, 7.718e-02, -3.781e-03, 6.163e-02, -4.309e-02, 5.393e-02, 1.826e-02, 4.655e-02, 2.619e-03, -3.697e-02, -1.379e-02, -1.727e-02, 1.552e-03) * s2_5;
	r += M4(7.639e-02, 2.274e-02, -5.634e-02, 8.178e-04, 3.399e-02, -1.051e-03, 5.833e-03, 7.173e-03, -5.848e-03, 1.191e-02, 9.029e-03, 2.667e-02, 3.632e-02, 6.343e-02, 3.923e-02, 3.190e-02) * s2_6;
	r += M4(-7.156e-02, -1.503e-02, -6.271e-02, -8.036e-02, -3.498e-02, -1.231e-02, -8.479e-02, -9.255e-02, 3.632e-02, -2.595e-03, -4.187e-02, -8.968e-02, -3.615e-02, -1.410e-02, 5.202e-02, 6.075e-02) * s2_7;
	r += M4(2.902e-02, -1.047e-02, 1.740e-02, -4.540e-03, 8.392e-03, 6.282e-03, 2.013e-02, 7.535e-03, -8.322e-03, -4.440e-03, -3.333e-03, 5.956e-03, 1.210e-02, -3.048e-03, 7.620e-03, -7.976e-03) * s2_8;
	r += M4(-2.512e-02, -2.425e-04, 2.306e-02, 1.303e-02, -3.568e-02, -3.207e-02, -4.339e-02, 3.842e-02, 2.736e-02, 2.747e-02, -3.847e-03, -1.040e-02, -7.264e-03, -4.271e-02, 5.999e-02, -4.183e-02) * s3_0;
	r += M4(-7.058e-03, 7.298e-02, -3.999e-03, 3.152e-02, 3.011e-02, 9.463e-02, -9.359e-02, -1.071e-01, 2.797e-03, 1.233e-02, 2.559e-02, 5.352e-02, -7.005e-03, -2.860e-04, 7.965e-03, 3.772e-02) * s3_1;
	r += M4(1.782e-02, 7.442e-03, 1.757e-03, 6.440e-03, -3.917e-02, -4.723e-02, 3.265e-02, -1.725e-02, -2.511e-03, 6.902e-03, 1.366e-03, -1.181e-02, -1.180e-02, -1.077e-02, -3.151e-03, 4.654e-03) * s3_2;
	r += M4(-7.718e-01, 8.968e-01, -6.054e-01, 3.037e-01, 6.446e-02, -1.411e-01, 1.938e-01, -1.499e-01, -3.504e-02, -1.400e-02, -2.328e-02, 1.332e-03, 6.281e-01, -4.778e-01, -1.152e-01, -1.338e-01) * s3_3;
	r += M4(1.623e-01, -2.358e-01, 2.032e-02, -1.293e-01, -7.199e-01, 1.679e-01, -1.189e-01, 7.387e-01, -4.551e-01, -3.949e-01, -4.274e-01, -3.396e-01, -1.173e-02, 6.254e-02, 1.644e-02, -1.780e-01) * s3_4;
	r += M4(-3.650e-02, 8.929e-04, -1.595e-02, -2.899e-02, 2.202e-01, -1.484e-01, 1.343e-01, -4.346e-02, 6.174e-02, 2.333e-02, 6.679e-02, 5.007e-03, -1.260e-02, 3.701e-02, -4.142e-02, -3.594e-02) * s3_5;
	r += M4(5.636e-02, -1.199e-01, -3.246e-01, 3.681e-01, 1.778e-02, -2.207e-02, 1.948e-02, -2.890e-02, 1.102e-02, 1.511e-02, 3.021e-02, 5.108e-02, 2.549e-01, -1.729e-01, 6.992e-01, -7.287e-01) * s3_6;
	r += M4(-8.777e-02, -3.566e-02, 3.930e-02, -1.855e-01, -1.995e-02, 5.310e-02, -2.222e-01, -4.679e-02, 8.156e-03, -2.772e-02, -5.064e-02, -1.620e-01, 1.270e-02, 3.267e-03, -3.153e-02, 1.256e-01) * s3_7;
	r += M4(2.828e-02, 1.169e-03, 3.952e-03, 2.394e-02, -1.749e-02, 2.574e-03, 4.760e-02, 1.544e-02, 9.557e-04, -3.866e-03, -5.660e-04, 4.895e-02, -9.301e-03, -1.458e-02, -6.386e-03, 1.856e-02) * s3_8;
	r += V4(5.556e-03, 5.388e-03, 5.954e-03, 5.878e-03);
	return vec4(tanh(r));
	
}
void hook() {
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + ivec2(gl_LocalInvocationID.xy);
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(1, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv4_pt;
	V4 s0_0 = l0(-1, -1);
	V4 s2_0 = l1(-1, -1);
	V4 s0_1 = l0(0, -1);
	V4 s2_1 = l1(0, -1);
	V4 s0_2 = l0(1, -1);
	V4 s2_2 = l1(1, -1);
	V4 s0_3 = l0(-1, 0);
	V4 s2_3 = l1(-1, 0);
	V4 s0_4 = l0(0, 0);
	V4 s2_4 = l1(0, 0);
	V4 s0_5 = l0(1, 0);
	V4 s2_5 = l1(1, 0);
	V4 s0_6 = l0(-1, 1);
	V4 s2_6 = l1(-1, 1);
	V4 s0_7 = l0(0, 1);
	V4 s2_7 = l1(0, 1);
	V4 s0_8 = l0(1, 1);
	V4 s2_8 = l1(1, 1);
	V4 s1_0 = -max(-s0_0, V4(0.0));
	V4 s1_1 = -max(-s0_1, V4(0.0));
	V4 s1_2 = -max(-s0_2, V4(0.0));
	V4 s1_3 = -max(-s0_3, V4(0.0));
	V4 s1_4 = -max(-s0_4, V4(0.0));
	V4 s1_5 = -max(-s0_5, V4(0.0));
	V4 s1_6 = -max(-s0_6, V4(0.0));
	V4 s1_7 = -max(-s0_7, V4(0.0));
	V4 s1_8 = -max(-s0_8, V4(0.0));
	s0_0 = max(s0_0, V4(0.0));
	s0_1 = max(s0_1, V4(0.0));
	s0_2 = max(s0_2, V4(0.0));
	s0_3 = max(s0_3, V4(0.0));
	s0_4 = max(s0_4, V4(0.0));
	s0_5 = max(s0_5, V4(0.0));
	s0_6 = max(s0_6, V4(0.0));
	s0_7 = max(s0_7, V4(0.0));
	s0_8 = max(s0_8, V4(0.0));
	V4 s3_0 = -max(-s2_0, V4(0.0));
	V4 s3_1 = -max(-s2_1, V4(0.0));
	V4 s3_2 = -max(-s2_2, V4(0.0));
	V4 s3_3 = -max(-s2_3, V4(0.0));
	V4 s3_4 = -max(-s2_4, V4(0.0));
	V4 s3_5 = -max(-s2_5, V4(0.0));
	V4 s3_6 = -max(-s2_6, V4(0.0));
	V4 s3_7 = -max(-s2_7, V4(0.0));
	V4 s3_8 = -max(-s2_8, V4(0.0));
	s2_0 = max(s2_0, V4(0.0));
	s2_1 = max(s2_1, V4(0.0));
	s2_2 = max(s2_2, V4(0.0));
	s2_3 = max(s2_3, V4(0.0));
	s2_4 = max(s2_4, V4(0.0));
	s2_5 = max(s2_5, V4(0.0));
	s2_6 = max(s2_6, V4(0.0));
	s2_7 = max(s2_7, V4(0.0));
	s2_8 = max(s2_8, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0(s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8, s2_0, s2_1, s2_2, s2_3, s2_4, s2_5, s2_6, s2_7, s2_8, s3_0, s3_1, s3_2, s3_3, s3_4, s3_5, s3_6, s3_7, s3_8));
}


//!DESC CuNNy-4x8C-RCAS-DS-shuffle
//!HOOK LUMA
//!BIND out
//!BIND rcas
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 1
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
	#define V4 f16vec4
	#define M4 f16mat4
	#define F float16_t
#else
	#define V4 vec4
	#define M4 mat4
	#define F float
#endif
vec4 hook() {
	vec4 r = vec4(0.0);
	vec2 f = fract(out_pos * out_size);
	ivec2 i = ivec2(f * vec2(2.0));
	r.r = out_tex((vec2(0.5) - f) * out_pt + out_pos)[2*i.y + i.x];
	r.r += rcas_tex(rcas_pos).r;
	r.a = 1.0;
	return clamp(r, 0.0, 1.0);
}
