// CuNNy 1x8
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

// FSR mpv | modified
// Copyright (c) 2021 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// FidelityFX FSR v1.0.2 by AMD
// ported to mpv by agyild

//!DESC CuNNy-EASU
//!HOOK LUMA
//!BIND LUMA
//!SAVE easu
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
//!COMPONENTS 1

float APrxLoRcpF1(float a) {
	return uintBitsToFloat(uint(0x7ef07ebb) - floatBitsToUint(a));
}

float APrxLoRsqF1(float a) {
	return uintBitsToFloat(uint(0x5f347d74) - (floatBitsToUint(a) >> uint(1)));
}

float AMin3F1(float x, float y, float z) {
	return min(x, min(y, z));
}

float AMax3F1(float x, float y, float z) {
	return max(x, max(y, z));
}

void tap(inout float aC, inout float aW, vec2 off, vec2 dir, vec2 len,
         float lob, float clp, float c){
	vec2 v;
	v.x = (off.x * ( dir.x)) + (off.y * dir.y);
	v.y = (off.x * (-dir.y)) + (off.y * dir.x);
	v *= len;
	float d2 = v.x * v.x + v.y * v.y;
	d2 = min(d2, clp);
	float wB = float(2.0 / 5.0) * d2 + -1.0;
	float wA = lob * d2 + -1.0;
	wB *= wB;
	wA *= wA;
	wB = float(25.0 / 16.0) * wB + float(-(25.0 / 16.0 - 1.0));
	float w = wB * wA;
	aC += c * w;
	aW += w;
}

void set(inout vec2 dir, inout float len, vec2 pp, bool biS, bool biT,
         bool biU, bool biV, float lA, float lB, float lC, float lD, float lE){
	float w = 0.0;
	if (biS)
		w = (1.0 - pp.x) * (1.0 - pp.y);
	if (biT)
		w =        pp.x  * (1.0 - pp.y);
	if (biU)
		w = (1.0 - pp.x) *        pp.y;
	if (biV)
		w =        pp.x  *        pp.y;
	float dc = lD - lC;
	float cb = lC - lB;
	float lenX = max(abs(dc), abs(cb));
	lenX = APrxLoRcpF1(lenX);
	float dirX = lD - lB;
	lenX = clamp(abs(dirX) * lenX, 0.0, 1.0);
	lenX *= lenX;
	float ec = lE - lC;
	float ca = lC - lA;
	float lenY = max(abs(ec), abs(ca));
	lenY = APrxLoRcpF1(lenY);
	float dirY = lE - lA;
	lenY = clamp(abs(dirY) * lenY, 0.0, 1.0);
	lenY *= lenY;
	dir += vec2(dirX, dirY) * w;
	len += dot(vec2(w), vec2(lenX, lenY));
}

vec4 hook() {
	vec4 pix = vec4(0.0, 0.0, 0.0, 1.0);
	vec2 pp = LUMA_pos * LUMA_size - vec2(0.5);
	vec2 fp = floor(pp);
	pp -= fp;
#if (defined(LUMA_gather) && (__VERSION__ >= 400 || (GL_ES && __VERSION__ >= 310)))
	vec4 bczzL = LUMA_gather(vec2((fp + vec2(1.0, -1.0)) * LUMA_pt), 0);
	vec4 ijfeL = LUMA_gather(vec2((fp + vec2(0.0,  1.0)) * LUMA_pt), 0);
	vec4 klhgL = LUMA_gather(vec2((fp + vec2(2.0,  1.0)) * LUMA_pt), 0);
	vec4 zzonL = LUMA_gather(vec2((fp + vec2(1.0,  3.0)) * LUMA_pt), 0);
#else
	float b = LUMA_tex(vec2((fp + vec2(0.5, -0.5)) * LUMA_pt)).r;
	float c = LUMA_tex(vec2((fp + vec2(1.5, -0.5)) * LUMA_pt)).r;
	float e = LUMA_tex(vec2((fp + vec2(-0.5, 0.5)) * LUMA_pt)).r;
	float f = LUMA_tex(vec2((fp + vec2( 0.5, 0.5)) * LUMA_pt)).r;
	float g = LUMA_tex(vec2((fp + vec2( 1.5, 0.5)) * LUMA_pt)).r;
	float h = LUMA_tex(vec2((fp + vec2( 2.5, 0.5)) * LUMA_pt)).r;
	float i = LUMA_tex(vec2((fp + vec2(-0.5, 1.5)) * LUMA_pt)).r;
	float j = LUMA_tex(vec2((fp + vec2( 0.5, 1.5)) * LUMA_pt)).r;
	float k = LUMA_tex(vec2((fp + vec2( 1.5, 1.5)) * LUMA_pt)).r;
	float l = LUMA_tex(vec2((fp + vec2( 2.5, 1.5)) * LUMA_pt)).r;
	float n = LUMA_tex(vec2((fp + vec2(0.5, 2.5) ) * LUMA_pt)).r;
	float o = LUMA_tex(vec2((fp + vec2(1.5, 2.5) ) * LUMA_pt)).r;
	vec4 bczzL = vec4(b, c, 0.0, 0.0);
	vec4 ijfeL = vec4(i, j, f, e);
	vec4 klhgL = vec4(k, l, h, g);
	vec4 zzonL = vec4(0.0, 0.0, o, n);
#endif
	float bL = bczzL.x;
	float cL = bczzL.y;
	float iL = ijfeL.x;
	float jL = ijfeL.y;
	float fL = ijfeL.z;
	float eL = ijfeL.w;
	float kL = klhgL.x;
	float lL = klhgL.y;
	float hL = klhgL.z;
	float gL = klhgL.w;
	float oL = zzonL.z;
	float nL = zzonL.w;
	vec2 dir = vec2(0.0);
	float len = 0.0;
	set(dir, len, pp, true, false, false, false, bL, eL, fL, gL, jL);
	set(dir, len, pp, false, true, false, false, cL, fL, gL, hL, kL);
	set(dir, len, pp, false, false, true, false, fL, iL, jL, kL, nL);
	set(dir, len, pp, false, false, false, true, gL, jL, kL, lL, oL);
	vec2 dir2 = dir * dir;
	float dirR = dir2.x + dir2.y;
	bool zro = dirR < float(1.0 / 32768.0);
	dirR = APrxLoRsqF1(dirR);
	dirR = zro ? 1.0 : dirR;
	dir.x = zro ? 1.0 : dir.x;
	dir *= vec2(dirR);
	len = len * 0.5;
	len *= len;
	float stretch = (dir.x * dir.x + dir.y * dir.y) * APrxLoRcpF1(max(abs(dir.x), abs(dir.y)));
	vec2 len2 = vec2(1.0 + (stretch - 1.0) * len, 1.0 + -0.5 * len);
	float lob = 0.5 + float((1.0 / 4.0 - 0.04) - 0.5) * len;
	float clp = APrxLoRcpF1(lob);
	float aC = 0.0;
	float aW = 0.0;
	tap(aC, aW, vec2( 0.0,-1.0) - pp, dir, len2, lob, clp, bL);
	tap(aC, aW, vec2( 1.0,-1.0) - pp, dir, len2, lob, clp, cL);
	tap(aC, aW, vec2(-1.0, 1.0) - pp, dir, len2, lob, clp, iL);
	tap(aC, aW, vec2( 0.0, 1.0) - pp, dir, len2, lob, clp, jL);
	tap(aC, aW, vec2( 0.0, 0.0) - pp, dir, len2, lob, clp, fL);
	tap(aC, aW, vec2(-1.0, 0.0) - pp, dir, len2, lob, clp, eL);
	tap(aC, aW, vec2( 1.0, 1.0) - pp, dir, len2, lob, clp, kL);
	tap(aC, aW, vec2( 2.0, 1.0) - pp, dir, len2, lob, clp, lL);
	tap(aC, aW, vec2( 2.0, 0.0) - pp, dir, len2, lob, clp, hL);
	tap(aC, aW, vec2( 1.0, 0.0) - pp, dir, len2, lob, clp, gL);
	tap(aC, aW, vec2( 1.0, 2.0) - pp, dir, len2, lob, clp, oL);
	tap(aC, aW, vec2( 0.0, 2.0) - pp, dir, len2, lob, clp, nL);
	pix.r = aC / aW;
	float min1 = min(AMin3F1(fL, gL, jL), kL);
	float max1 = max(AMax3F1(fL, gL, jL), kL);
	pix.r = clamp(pix.r, min1, max1);
	pix.r = clamp(pix.r, 0.0, 1.0);
	return pix;
}

//!DESC CuNNy-1x8-up:0
//!HOOK LUMA
//!BIND LUMA
//!SAVE up_0
//!WIDTH LUMA.w
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#define l0(x, y) LUMA_texOff(vec2(x, y)).r
vec4 hook() {
	vec4 r = vec4(0.0);
	r += vec4(-0.006919504143297672, 0.01791999489068985, -0.38378873467445374, -0.12407830357551575) * l0(-1.0, -1.0);
	r += vec4(0.04064825922250748, 0.004546383395791054, 0.04932861402630806, 0.06764516234397888) * l0(0.0, -1.0);
	r += vec4(-0.011255110614001751, -0.039548445492982864, 0.03210436552762985, 0.03726158291101456) * l0(1.0, -1.0);
	r += vec4(0.07950811833143234, -0.03772658482193947, 0.17243434488773346, -0.29902973771095276) * l0(-1.0, 0.0);
	r += vec4(-0.2911006808280945, 0.46944546699523926, 0.20990921556949615, 0.3955078125) * l0(0.0, 0.0);
	r += vec4(-0.19235052168369293, -0.2757476568222046, -0.011502360925078392, -0.0010088941780850291) * l0(1.0, 0.0);
	r += vec4(-0.045886747539043427, -0.00036536852712742984, 0.010925495065748692, 0.07691486924886703) * l0(-1.0, 1.0);
	r += vec4(0.4775388836860657, -0.01825782284140587, 0.03523997217416763, -0.11758486181497574) * l0(0.0, 1.0);
	r += vec4(-0.0332166887819767, -0.09741222113370895, -0.0049179550260305405, -0.029016783460974693) * l0(1.0, 1.0);
	r += vec4(-0.002551176119595766, 0.007338774856179953, -0.002876539248973131, -0.0001776682329364121);
	return max(r, 0.0);
}

//!DESC CuNNy-1x8-up:1
//!HOOK LUMA
//!BIND LUMA
//!SAVE up_1
//!WIDTH LUMA.w
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#define l0(x, y) LUMA_texOff(vec2(x, y)).r
vec4 hook() {
	vec4 r = vec4(0.0);
	r += vec4(-0.010291606187820435, 0.017387907952070236, -0.1115747019648552, -0.06722317636013031) * l0(-1.0, -1.0);
	r += vec4(0.0215784702450037, -0.007742179092019796, -0.36058661341667175, 0.16748087108135223) * l0(0.0, -1.0);
	r += vec4(-0.007727382704615593, 0.5389401912689209, 0.07769150286912918, 0.11107699573040009) * l0(1.0, -1.0);
	r += vec4(-0.2568359673023224, 0.00918642058968544, 0.07010279595851898, 0.10620111972093582) * l0(-1.0, 0.0);
	r += vec4(0.43753352761268616, -0.0394773855805397, 0.3955078423023224, -0.4554615914821625) * l0(0.0, 0.0);
	r += vec4(-0.19007252156734467, -0.09685642272233963, -0.06909682601690292, -0.06826777011156082) * l0(1.0, 0.0);
	r += vec4(-0.020889801904559135, -0.025236494839191437, 0.03105032630264759, 0.1453554481267929) * l0(-1.0, 1.0);
	r += vec4(0.039560697972774506, 0.026789138093590736, -0.023134225979447365, 0.0905361995100975) * l0(0.0, 1.0);
	r += vec4(-0.015594751574099064, 0.060912538319826126, -0.017600517719984055, -0.03869752585887909) * l0(1.0, 1.0);
	r += vec4(0.006241412367671728, -0.001579960691742599, 0.0019543301314115524, 0.004495611414313316);
	return max(r, 0.0);
}

//!DESC CuNNy-1x8-conv1:0
//!HOOK LUMA
//!BIND up_0
//!BIND up_1
//!SAVE conv1_0
//!WIDTH LUMA.w
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#define l0(x, y) up_0_texOff(vec2(x, y))
#define l1(x, y) up_1_texOff(vec2(x, y))
vec4 hook() {
	vec4 r = vec4(0.0);
	r += mat4(-0.014629354700446129, -0.25207462906837463, -0.09813707321882248, 0.07884062081575394, -0.0642537996172905, -0.035984672605991364, -0.1464637815952301, 0.04892656207084656, 0.015817604959011078, 0.12744420766830444, 0.02719542756676674, -0.04405301436781883, -0.17845173180103302, -0.09223787486553192, -0.23269328474998474, 0.018884044140577316) * l0(-1.0, -1.0);
	r += mat4(0.05587845668196678, -0.16580085456371307, -0.29164382815361023, 0.03909303992986679, 0.25554585456848145, 0.2894464135169983, 0.013900667428970337, -0.020860789343714714, 0.02876865118741989, 0.26919811964035034, 0.00587145471945405, -0.06573882699012756, -0.13009138405323029, -0.01980188675224781, 0.08816475421190262, 0.09268254041671753) * l0(0.0, -1.0);
	r += mat4(-0.21297098696231842, -0.11157670617103577, 0.17626895010471344, 0.006430053152143955, 0.07752369344234467, -0.041672900319099426, -0.0054735541343688965, -0.0345340259373188, -0.010124627500772476, 0.045974232256412506, -0.021128712221980095, -0.05181680619716644, -0.007171473931521177, 0.04968680813908577, 0.048492174595594406, 0.03636340796947479) * l0(1.0, -1.0);
	r += mat4(0.25438162684440613, 0.1705857366323471, 0.3307892382144928, 0.2494155466556549, 0.28974732756614685, 0.08514769375324249, -0.18707354366779327, 0.047474607825279236, 0.05092921853065491, 0.2510462701320648, 0.02756570652127266, -0.1450679898262024, 0.022642558440566063, -0.22344401478767395, -0.4794921576976776, -0.12297161668539047) * l0(-1.0, 0.0);
	r += mat4(-0.06905336678028107, 0.20448268949985504, -0.3077488839626312, -0.16935259103775024, -0.5395130515098572, -0.12851622700691223, 0.18156763911247253, -0.8865218162536621, -0.14723017811775208, -0.16762101650238037, -0.07817864418029785, -0.15071257948875427, 0.08255075663328171, -0.2842734158039093, -2.1129417419433594, -0.02397518791258335) * l0(0.0, 0.0);
	r += mat4(0.3419491648674011, -0.026160670444369316, 0.3400907516479492, -0.014735618606209755, -2.6891088485717773, -0.0433148518204689, -0.41655153036117554, 0.050844255834817886, -0.12129330635070801, -0.4307757318019867, 0.17906641960144043, 0.16064105927944183, 0.5292923450469971, 0.18707740306854248, 0.15555094182491302, 0.02545243129134178) * l0(1.0, 0.0);
	r += mat4(0.12055905908346176, 0.07558616250753403, 0.14267610013484955, -0.04066557437181473, 0.26283353567123413, 0.00011514721700223163, -0.09973081946372986, -0.07507675886154175, 0.22812816500663757, 0.04090952128171921, -0.04779566451907158, 0.06608346849679947, -0.1079820990562439, -0.13427308201789856, -0.13411042094230652, 0.007233423180878162) * l0(-1.0, 1.0);
	r += mat4(0.14151118695735931, 0.04899175465106964, -0.05155915766954422, -0.01236618123948574, -0.14910519123077393, 0.18896496295928955, 0.4658234715461731, 0.0689907893538475, -0.20850419998168945, -0.40136629343032837, -0.21727843582630157, -0.024532262235879898, -0.2613707482814789, -0.2771695554256439, -0.2721516788005829, -0.017221126705408096) * l0(0.0, 1.0);
	r += mat4(-0.24943813681602478, -0.028027929365634918, 0.022955099120736122, -0.06414986401796341, -0.12838707864284515, -0.03246982768177986, -0.17308509349822998, 0.09642941504716873, -0.07378745824098587, 0.08494129031896591, 0.09793739765882492, 0.5814858078956604, 0.12953472137451172, 0.011550018563866615, -0.19677698612213135, -0.10798940062522888) * l0(1.0, 1.0);
	r += mat4(0.04354597255587578, -0.2834113538265228, 0.4128938317298889, 0.24279600381851196, 0.0304870642721653, -0.05482270568609238, -0.018119728192687035, -0.019203057512640953, -0.018124781548976898, -0.3695456385612488, 0.0025412491522729397, 0.07016246765851974, 0.05142408236861229, 0.1021728664636612, 0.08143383264541626, -0.1254878044128418) * l1(-1.0, -1.0);
	r += mat4(0.46152931451797485, -0.04101167991757393, -0.17706899344921112, 0.2509130537509918, -0.024316346272826195, -0.0663084164261818, -0.08971993625164032, -0.07346629351377487, 0.10199618339538574, -0.030577639117836952, 0.01406695693731308, 0.049922339618206024, -0.1925841122865677, 0.03243282437324524, 0.07775937020778656, 0.1429646909236908) * l1(0.0, -1.0);
	r += mat4(0.048329804092645645, 0.05579618364572525, 0.34079694747924805, -0.11611520498991013, 0.014862455427646637, 0.0159393809735775, 0.006178133189678192, 0.014585870318114758, -0.10183459520339966, -0.10275843739509583, -0.14598780870437622, -0.084048330783844, 0.10761215537786484, -0.010485910810530186, 0.12174071371555328, 0.06335330754518509) * l1(1.0, -1.0);
	r += mat4(-0.2109188288450241, 0.5120928287506104, 0.8482226133346558, -0.04999502748250961, -0.12071922421455383, 0.01075125765055418, 0.1519482284784317, 0.4108043313026428, -0.01332052517682314, -0.1865149289369583, 0.1628519743680954, 0.4033201336860657, -0.06496880203485489, -0.16568416357040405, -0.1769360899925232, 0.08570895344018936) * l1(-1.0, 0.0);
	r += mat4(0.10356586426496506, -0.024983180686831474, -0.6366350650787354, 0.05063347890973091, 0.028400277718901634, 0.21888454258441925, -0.0801786482334137, 0.006210700608789921, 0.19915607571601868, -0.09360021352767944, -0.06535102427005768, 0.32178881764411926, -1.1915013790130615, -0.4886553883552551, -0.40234971046447754, 0.06806982308626175) * l1(0.0, 0.0);
	r += mat4(-0.5608181953430176, 0.18849749863147736, 0.06487946212291718, 0.2415553480386734, -0.02487432025372982, -0.06300707161426544, 0.06333962827920914, -0.03357547149062157, -0.18919581174850464, 0.23566888272762299, -0.20494605600833893, -0.2205253392457962, 0.22462213039398193, 0.18408158421516418, -0.03830721601843834, -0.05230456590652466) * l1(1.0, 0.0);
	r += mat4(0.2872806489467621, 0.012876207940280437, -0.22557662427425385, 0.03968388959765434, 0.04384426400065422, -0.39358627796173096, -0.014121887274086475, -0.23207318782806396, -0.20913128554821014, 0.1991707682609558, -0.014615582302212715, -0.15402533113956451, 0.02378937043249607, -0.009468339383602142, -0.40144404768943787, 0.06830841302871704) * l1(-1.0, 1.0);
	r += mat4(0.04465261101722717, 0.15673941373825073, -0.01929776556789875, 0.11381220817565918, -0.0564490370452404, 0.3780069053173065, 0.04623691365122795, -0.15072934329509735, 0.36051398515701294, 0.29012376070022583, 0.0903155580163002, -0.05236364156007767, -0.35254886746406555, 0.056218307465314865, -0.07989158481359482, 0.03146657720208168) * l1(0.0, 1.0);
	r += mat4(0.30604538321495056, 0.02030220441520214, -0.46725672483444214, -0.18494759500026703, 0.11298718303442001, -0.019474370405077934, -0.04294118285179138, 0.029480015859007835, -0.5568841099739075, 0.34797346591949463, -1.2539125680923462, -0.5648987889289856, -0.40366819500923157, -0.029001180082559586, 0.09199211746454239, 0.01466499362140894) * l1(1.0, 1.0);
	r += vec4(-0.0043169055134058, -0.007223822176456451, -0.009690308012068272, -0.001252617104910314);
	return max(r, 0.0);
}

//!DESC CuNNy-1x8-conv1:1
//!HOOK LUMA
//!BIND up_0
//!BIND up_1
//!SAVE conv1_1
//!WIDTH LUMA.w
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#define l0(x, y) up_0_texOff(vec2(x, y))
#define l1(x, y) up_1_texOff(vec2(x, y))
vec4 hook() {
	vec4 r = vec4(0.0);
	r += mat4(0.7003119587898254, -0.03649546205997467, -0.03528464958071709, 0.11204785108566284, -0.21052852272987366, -0.10030648857355118, 0.07164859771728516, 0.15230318903923035, -0.008370444178581238, -0.07454050332307816, -0.02276386134326458, -0.032813746482133865, -0.30867478251457214, -0.023448361083865166, 0.1037609651684761, 0.2237919569015503) * l0(-1.0, -1.0);
	r += mat4(0.048033345490694046, -0.037103619426488876, 0.011088081635534763, -0.17990532517433167, -0.4291188716888428, -0.06428590416908264, -0.024442661553621292, -0.09898380935192108, -0.4120778441429138, 0.0017944080755114555, -0.13613367080688477, -0.004778666887432337, -0.12644532322883606, -0.1701812744140625, 0.21683841943740845, 0.5666191577911377) * l0(0.0, -1.0);
	r += mat4(0.01985361985862255, 0.01948690414428711, 0.03514673933386803, 0.05238081514835358, -0.04393991455435753, 0.03256744146347046, 0.030186647549271584, -0.004525239113718271, -0.01635776273906231, -0.030168728902935982, 0.054286889731884, 0.13543924689292908, 0.047427836805582047, -0.054678142070770264, 0.05060097947716713, -0.1829948127269745) * l0(1.0, -1.0);
	r += mat4(-0.44307848811149597, -0.016976065933704376, 0.5410217642784119, 0.033557988703250885, -0.07830476760864258, 0.023964207619428635, -0.49718496203422546, -0.03234700486063957, 0.14954668283462524, -0.10796095430850983, 0.06946006417274475, -0.1193842962384224, -0.7011561393737793, -0.06384637951850891, -0.4638872444629669, 0.01745985448360443) * l0(-1.0, 0.0);
	r += mat4(0.02297060564160347, 0.023103754967451096, -0.006050648633390665, -0.05357874184846878, -0.018016494810581207, 0.01621200144290924, -0.33300724625587463, -0.08368656784296036, 0.22542887926101685, -0.03595590591430664, -0.37792956829071045, 0.040725503116846085, -2.3743138313293457, -0.1417878419160843, -0.3368534445762634, -0.07218785583972931) * l0(0.0, 0.0);
	r += mat4(0.0881962850689888, -0.025917209684848785, -0.07073488086462021, -0.007431012112647295, -0.18077106773853302, -0.03882226347923279, -0.11977313458919525, -0.001778234145604074, -0.09536057710647583, -0.006995602510869503, -0.05955410376191139, -0.02699410170316696, -0.24557028710842133, -0.14956779778003693, -0.07687341421842575, -0.16921019554138184) * l0(1.0, 0.0);
	r += mat4(-0.13322396576404572, -0.03170342743396759, -0.5899838209152222, -0.02778232842683792, -0.13332028687000275, -0.04797946661710739, 0.31532156467437744, 0.009362570941448212, -0.11307372897863388, -0.05128653720021248, -0.04037562757730484, -0.04694625735282898, -0.02332739159464836, -0.04942622408270836, -0.4945417642593384, -0.016661591827869415) * l0(-1.0, 1.0);
	r += mat4(-0.040040913969278336, -0.05357871577143669, -0.09737995266914368, -0.028137054294347763, 0.07547219842672348, -0.053665630519390106, -0.07634105533361435, -0.04528762400150299, 0.23261533677577972, -0.059649888426065445, 0.18885134160518646, -0.004884603898972273, 0.09299296885728836, -0.08582770079374313, -0.23082445561885834, -0.03581197187304497) * l0(0.0, 1.0);
	r += mat4(-0.004165872000157833, -0.010010936297476292, -0.036404795944690704, 0.005782438442111015, 0.0017883441178128123, 0.05515427887439728, -0.007962490431964397, -0.002158717717975378, -0.05774854123592377, 0.032623741775751114, -0.10710115730762482, 0.003284767735749483, -0.06469694525003433, -0.050460729748010635, -0.15609465539455414, -0.025817973539233208) * l0(1.0, 1.0);
	r += mat4(0.5854341387748718, -0.005437872372567654, -0.1350492238998413, -0.13928057253360748, 0.17792780697345734, 0.02228526957333088, 0.02884184569120407, -0.30177199840545654, 0.5839847922325134, -0.04348599165678024, 0.06393709033727646, -0.07653512060642242, -0.2666020095348358, -0.00489741051569581, -0.04600357264280319, 0.03450924530625343) * l1(-1.0, -1.0);
	r += mat4(0.590264618396759, -0.04860369488596916, 0.020343776792287827, -0.2891513407230377, 0.0257205031812191, -0.08214987069368362, -0.05060078203678131, -0.1122700646519661, 0.014364493079483509, 0.03363145887851715, -0.0009716239874251187, -0.3666594624519348, -0.25016483664512634, 0.010427855886518955, 0.06846305727958679, 0.023370184004306793) * l1(0.0, -1.0);
	r += mat4(0.1596628874540329, -0.010966534726321697, -0.031865525990724564, -0.03204282745718956, 0.007856207899749279, -0.015238854102790356, -0.010592065751552582, -0.010232423432171345, 0.10881293565034866, -0.050811413675546646, -0.039111651480197906, -0.26464930176734924, 0.015711084008216858, -0.03115302510559559, 0.10717890411615372, 0.10229036957025528) * l1(1.0, -1.0);
	r += mat4(0.7640076279640198, 0.013430802151560783, 0.8340144157409668, 0.015908487141132355, 0.11857619136571884, -0.054505884647369385, 0.23376372456550598, 0.6240586042404175, 0.09439978748559952, -0.021881453692913055, 0.3554641008377075, 0.021206768229603767, 0.30761680006980896, 0.00019336082914378494, -0.5488624572753906, -0.020278271287679672) * l1(-1.0, 0.0);
	r += mat4(0.06721105426549911, -0.06764740496873856, 0.5917941927909851, 0.22021488845348358, -0.07040014117956161, -0.10371293127536774, 0.02752683497965336, -0.1221814677119255, -0.4330621361732483, -0.08610132336616516, 0.2978318929672241, -0.30281180143356323, 0.24459758400917053, -0.041200026869773865, -0.20263749361038208, -0.14204534888267517) * l1(0.0, 0.0);
	r += mat4(0.24347402155399323, 0.029892561957240105, 0.16968297958374023, -0.009359793737530708, 0.027582310140132904, 0.02721041440963745, 0.016069142147898674, 0.039091091603040695, -0.12223441898822784, -0.050972387194633484, 0.03998100012540817, -0.13216237723827362, -0.06609763950109482, 0.051221445202827454, -0.035453226417303085, -0.0423160158097744) * l1(1.0, 0.0);
	r += mat4(-0.13109946250915527, -0.06590816378593445, 0.2214515209197998, 0.015208804048597813, -0.23235145211219788, -0.024791210889816284, -0.09485799074172974, -0.0017127771861851215, 0.1834501028060913, -0.002411543857306242, 0.2624727189540863, 0.08366141468286514, -0.045383937656879425, 0.02677031047642231, -0.24942979216575623, 0.055541813373565674) * l1(-1.0, 1.0);
	r += mat4(-0.10414659231901169, -0.043027687817811966, 0.09936659038066864, 0.02589314989745617, 0.009097429923713207, -0.0613192655146122, -0.009402414783835411, -0.08677996695041656, -0.21364860236644745, -0.04009729251265526, -0.11658188700675964, -0.003439453663304448, 0.2897920608520508, -0.040034905076026917, 0.3720701038837433, 0.06421514600515366) * l1(0.0, 1.0);
	r += mat4(-0.011685200035572052, 0.044165123254060745, 0.13368190824985504, -0.050883449614048004, 0.0008412942406721413, -0.06883759796619415, -0.002143140649423003, -0.01900126226246357, 0.006683673709630966, -0.05430242046713829, -0.02339163050055504, 0.09643257409334183, 0.043364934623241425, 0.06438089907169342, 0.08164513111114502, 0.11535930633544922) * l1(1.0, 1.0);
	r += vec4(-0.012309986166656017, -0.044456079602241516, -0.01892015151679516, -0.0057503702118992805);
	return max(r, 0.0);
}

//!DESC CuNNy-1x8-down
//!HOOK LUMA
//!BIND conv1_0
//!BIND conv1_1
//!SAVE down
//!WIDTH LUMA.w
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#define l0(x, y) conv1_0_texOff(vec2(x, y))
#define l1(x, y) conv1_1_texOff(vec2(x, y))
vec4 hook() {
	vec4 r = vec4(0.0);
	r += mat4(-0.1287759691476822, 0.3194839656352997, 0.22016532719135284, 0.017564313486218452, 0.09008772671222687, 0.06615984439849854, 0.04992912709712982, -0.03945792093873024, -0.7911301851272583, 0.40977761149406433, -0.33010411262512207, -0.015409705229103565, -0.00044420818448998034, -0.009584958665072918, -0.005743443500250578, 0.025447793304920197) * l0(-1.0, -1.0);
	r += mat4(0.4169937074184418, -0.6894547343254089, 0.028381941840052605, -0.09945230185985565, -0.027091173455119133, -0.11731289327144623, 0.22607408463954926, 0.15381938219070435, 0.5965044498443604, -0.368287593126297, 0.06616479903459549, -0.2106129676103592, 0.04292818903923035, 0.044811226427555084, -0.043636806309223175, -0.020693445578217506) * l0(0.0, -1.0);
	r += mat4(-0.12491345405578613, 0.22291576862335205, -0.09372207522392273, 0.020827798172831535, -0.05408870801329613, -0.014308951795101166, -0.017492054030299187, 0.035027943551540375, -0.07166147977113724, 0.07979085296392441, 0.02549360692501068, 0.012447390705347061, 0.03139842674136162, 0.012205393053591251, 0.00037378628621809185, -0.04773005098104477) * l0(1.0, -1.0);
	r += mat4(-0.46585971117019653, 0.4170023202896118, -0.744820237159729, 0.6036091446876526, -0.028518104925751686, 0.19340458512306213, -0.17235179245471954, 0.14822416007518768, -0.07478559017181396, 0.1961553990840912, -0.5683689117431641, 0.49127843976020813, 0.11975351721048355, 0.02262307144701481, 0.11742911487817764, 0.021428201347589493) * l0(-1.0, 0.0);
	r += mat4(0.3053995668888092, 0.07982010394334793, 0.6272086501121521, -0.5461941957473755, 0.15576575696468353, -0.32910194993019104, -0.3396048843860626, -0.7832027077674866, 0.6777502298355103, -0.9567875862121582, 1.0277806520462036, -0.9215535521507263, -0.6340189576148987, -0.2407224178314209, -0.32609254121780396, -0.03466546908020973) * l0(0.0, 0.0);
	r += mat4(-0.04734010621905327, -0.018410494551062584, -0.10803583264350891, 0.19680927693843842, 0.005473279394209385, 0.212909996509552, -0.006708709057420492, 0.06176937744021416, -0.12745952606201172, 0.4365229308605194, -0.19098137319087982, 0.3006245195865631, 0.12330115586519241, -0.21147266030311584, 0.11240188777446747, -0.09865743666887283) * l0(1.0, 0.0);
	r += mat4(-0.10291317850351334, 0.06323326379060745, -0.19880802929401398, 0.1968012899160385, -0.04861663654446602, -0.002474401146173477, 0.001842004363425076, -0.004706484265625477, 0.08792136609554291, -0.17408116161823273, 0.12879785895347595, -0.11793975532054901, 0.013232205994427204, -0.014183229766786098, 0.01820525899529457, -0.04727565497159958) * l0(-1.0, 1.0);
	r += mat4(-0.0981455147266388, -0.006844630930572748, -0.035836465656757355, 0.12560062110424042, -0.017287179827690125, -0.0044438098557293415, 0.15286175906658173, 0.08666864782571793, 0.08065477758646011, 0.09864174574613571, 0.23144546151161194, -0.23107634484767914, 0.116937056183815, 0.111642025411129, -0.07788274437189102, 0.007963896729052067) * l0(0.0, 1.0);
	r += mat4(0.031632207334041595, -0.029236432164907455, 0.032860033214092255, -0.08960434794425964, 0.0024645840749144554, -0.08329087495803833, -0.06068596616387367, -0.022826634347438812, -0.013590189628303051, 0.007525176741182804, 0.0069839125499129295, 0.27636703848838806, -0.039627302438020706, 0.06079952046275139, 0.06860972940921783, 0.10517621785402298) * l0(1.0, 1.0);
	r += mat4(0.023309405893087387, -0.017631085589528084, 0.0056539420038461685, -0.016208689659833908, -0.030458755791187286, -0.017225943505764008, -0.09448741376399994, -0.05952497944235802, -0.017297537997364998, 0.003778198268264532, 0.005283038131892681, -0.0010733582312241197, 0.02147400565445423, -0.023011386394500732, 0.02423226833343506, -0.05097847431898117) * l1(-1.0, -1.0);
	r += mat4(0.011770296841859818, -0.005596821662038565, -0.060943424701690674, -0.041205838322639465, 0.008222457952797413, 0.02022392489016056, -0.06652232259511948, 0.03513708710670471, 0.4854789674282074, -0.009370097890496254, -0.09302092343568802, -0.11742556840181351, -0.10176239907741547, -0.09009867906570435, 0.1323748081922531, 0.09647272527217865) * l1(0.0, -1.0);
	r += mat4(-0.05628173053264618, 0.03397861868143082, -0.0052908421494066715, -0.044492967426776886, 0.056779008358716965, 0.08093666285276413, 0.028125787153840065, -0.09580258280038834, 0.3273335099220276, 0.8867771029472351, -0.12378440797328949, 0.011020672507584095, -0.06900398433208466, 0.01935376599431038, -0.10628204792737961, 0.03324379399418831) * l1(1.0, -1.0);
	r += mat4(-0.05721839517354965, 0.01972423493862152, -0.08178911358118057, -0.00498991459608078, -0.011821752414107323, 0.005061452742666006, 0.018897725269198418, -0.007871480658650398, -0.1013220027089119, -0.0495389848947525, 0.1213897094130516, 0.04419892653822899, 0.03803589195013046, 0.027282776311039925, -0.08032653480768204, -0.02359992265701294) * l1(-1.0, 0.0);
	r += mat4(-0.5535674691200256, -0.23888865113258362, 0.16735737025737762, -0.064960777759552, -0.009090246632695198, 0.14492297172546387, 0.023721178993582726, -0.05157659575343132, -0.39985159039497375, -0.1636246144771576, 0.6044172644615173, 0.16726085543632507, 0.6191081404685974, 0.13135017454624176, -0.20581555366516113, -0.3941354751586914) * l1(0.0, 0.0);
	r += mat4(-0.0347067266702652, -0.3291112780570984, 0.11844576150178909, 0.3677251636981964, -0.031755972653627396, -0.02761627547442913, -0.042621154338121414, 0.030225444585084915, -0.4433431029319763, -0.6272200345993042, 0.23681700229644775, 0.8936775922775269, -0.11506183445453644, 0.3611152470111847, -0.06741750985383987, 0.04625098779797554) * l1(1.0, 0.0);
	r += mat4(0.08862452954053879, -0.01952558383345604, -0.05829871818423271, -0.04185321182012558, -0.09632516652345657, 0.01628684066236019, 0.044134318828582764, 0.04361464083194733, -0.0026918379589915276, -0.004777680616825819, -0.011859266087412834, -0.007913300767540932, -0.16553285717964172, -0.007536071818321943, -0.023870980367064476, 0.05179089680314064) * l1(-1.0, 1.0);
	r += mat4(0.5136756896972656, 0.2937489151954651, -0.6816380620002747, -0.18455949425697327, 0.06732089817523956, 0.1323402374982834, 0.040952540934085846, -0.0032380069606006145, -0.018556509166955948, -0.05113336443901062, 0.011000796221196651, 0.032593920826911926, 0.40139633417129517, -0.3516818583011627, 1.171779990196228, 0.2261316180229187) * l1(0.0, 1.0);
	r += mat4(0.3232416808605194, 0.6935985684394836, -0.08549226075410843, -0.6481090784072876, -0.015369279310107231, 0.052285633981227875, 0.035712409764528275, 0.04019812494516373, 0.0392773300409317, 0.10046746581792831, -0.08951655775308609, -0.05729038640856743, -0.3328351080417633, 0.2314308136701584, -0.1997181475162506, 0.6230482459068298) * l1(1.0, 1.0);
	r += vec4(-3.1086386798051535e-08, -2.8280473074460133e-08, -2.5020591820634763e-08, -2.4470717008284737e-08);
	return tanh(r);
}

//!DESC CuNNy-1x8-shuffle
//!HOOK LUMA
//!BIND down
//!BIND easu
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 1
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
vec4 hook() {
	vec4 r = vec4(0.0);
	vec2 f = fract(down_pos * down_size);
	ivec2 i = ivec2(f * vec2(2.0));
	r.r = down_tex((vec2(0.5) - f) * down_pt + down_pos)[2*i.y + i.x];
	r.r += easu_tex(easu_pos).r;
	r.a = 1.0;
	return clamp(r, 0.0, 1.0);
}
