// CuNNy 6x8C DS
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

// FSR mpv | modified
// Copyright (c) 2021 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// FidelityFX FSR v1.0.2 by AMD
// ported to mpv by agyild

//!DESC CuNNy-EASU
//!HOOK LUMA
//!BIND LUMA
//!SAVE easu
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
//!COMPONENTS 1

float APrxLoRcpF1(float a) {
	return uintBitsToFloat(uint(0x7ef07ebb) - floatBitsToUint(a));
}

float APrxLoRsqF1(float a) {
	return uintBitsToFloat(uint(0x5f347d74) - (floatBitsToUint(a) >> uint(1)));
}

float AMin3F1(float x, float y, float z) {
	return min(x, min(y, z));
}

float AMax3F1(float x, float y, float z) {
	return max(x, max(y, z));
}

void tap(inout float aC, inout float aW, vec2 off, vec2 dir, vec2 len,
         float lob, float clp, float c){
	vec2 v;
	v.x = (off.x * ( dir.x)) + (off.y * dir.y);
	v.y = (off.x * (-dir.y)) + (off.y * dir.x);
	v *= len;
	float d2 = v.x * v.x + v.y * v.y;
	d2 = min(d2, clp);
	float wB = float(2.0 / 5.0) * d2 + -1.0;
	float wA = lob * d2 + -1.0;
	wB *= wB;
	wA *= wA;
	wB = float(25.0 / 16.0) * wB + float(-(25.0 / 16.0 - 1.0));
	float w = wB * wA;
	aC += c * w;
	aW += w;
}

void set(inout vec2 dir, inout float len, vec2 pp, bool biS, bool biT,
         bool biU, bool biV, float lA, float lB, float lC, float lD, float lE){
	float w = 0.0;
	if (biS)
		w = (1.0 - pp.x) * (1.0 - pp.y);
	if (biT)
		w =        pp.x  * (1.0 - pp.y);
	if (biU)
		w = (1.0 - pp.x) *        pp.y;
	if (biV)
		w =        pp.x  *        pp.y;
	float dc = lD - lC;
	float cb = lC - lB;
	float lenX = max(abs(dc), abs(cb));
	lenX = APrxLoRcpF1(lenX);
	float dirX = lD - lB;
	lenX = clamp(abs(dirX) * lenX, 0.0, 1.0);
	lenX *= lenX;
	float ec = lE - lC;
	float ca = lC - lA;
	float lenY = max(abs(ec), abs(ca));
	lenY = APrxLoRcpF1(lenY);
	float dirY = lE - lA;
	lenY = clamp(abs(dirY) * lenY, 0.0, 1.0);
	lenY *= lenY;
	dir += vec2(dirX, dirY) * w;
	len += dot(vec2(w), vec2(lenX, lenY));
}

vec4 hook() {
	vec4 pix = vec4(0.0, 0.0, 0.0, 1.0);
	vec2 pp = LUMA_pos * LUMA_size - vec2(0.5);
	vec2 fp = floor(pp);
	pp -= fp;
#if (defined(LUMA_gather) && (__VERSION__ >= 400 || (GL_ES && __VERSION__ >= 310)))
	vec4 bczzL = LUMA_gather(vec2((fp + vec2(1.0, -1.0)) * LUMA_pt), 0);
	vec4 ijfeL = LUMA_gather(vec2((fp + vec2(0.0,  1.0)) * LUMA_pt), 0);
	vec4 klhgL = LUMA_gather(vec2((fp + vec2(2.0,  1.0)) * LUMA_pt), 0);
	vec4 zzonL = LUMA_gather(vec2((fp + vec2(1.0,  3.0)) * LUMA_pt), 0);
#else
	float b = LUMA_tex(vec2((fp + vec2(0.5, -0.5)) * LUMA_pt)).r;
	float c = LUMA_tex(vec2((fp + vec2(1.5, -0.5)) * LUMA_pt)).r;
	float e = LUMA_tex(vec2((fp + vec2(-0.5, 0.5)) * LUMA_pt)).r;
	float f = LUMA_tex(vec2((fp + vec2( 0.5, 0.5)) * LUMA_pt)).r;
	float g = LUMA_tex(vec2((fp + vec2( 1.5, 0.5)) * LUMA_pt)).r;
	float h = LUMA_tex(vec2((fp + vec2( 2.5, 0.5)) * LUMA_pt)).r;
	float i = LUMA_tex(vec2((fp + vec2(-0.5, 1.5)) * LUMA_pt)).r;
	float j = LUMA_tex(vec2((fp + vec2( 0.5, 1.5)) * LUMA_pt)).r;
	float k = LUMA_tex(vec2((fp + vec2( 1.5, 1.5)) * LUMA_pt)).r;
	float l = LUMA_tex(vec2((fp + vec2( 2.5, 1.5)) * LUMA_pt)).r;
	float n = LUMA_tex(vec2((fp + vec2(0.5, 2.5) ) * LUMA_pt)).r;
	float o = LUMA_tex(vec2((fp + vec2(1.5, 2.5) ) * LUMA_pt)).r;
	vec4 bczzL = vec4(b, c, 0.0, 0.0);
	vec4 ijfeL = vec4(i, j, f, e);
	vec4 klhgL = vec4(k, l, h, g);
	vec4 zzonL = vec4(0.0, 0.0, o, n);
#endif
	float bL = bczzL.x;
	float cL = bczzL.y;
	float iL = ijfeL.x;
	float jL = ijfeL.y;
	float fL = ijfeL.z;
	float eL = ijfeL.w;
	float kL = klhgL.x;
	float lL = klhgL.y;
	float hL = klhgL.z;
	float gL = klhgL.w;
	float oL = zzonL.z;
	float nL = zzonL.w;
	vec2 dir = vec2(0.0);
	float len = 0.0;
	set(dir, len, pp, true, false, false, false, bL, eL, fL, gL, jL);
	set(dir, len, pp, false, true, false, false, cL, fL, gL, hL, kL);
	set(dir, len, pp, false, false, true, false, fL, iL, jL, kL, nL);
	set(dir, len, pp, false, false, false, true, gL, jL, kL, lL, oL);
	vec2 dir2 = dir * dir;
	float dirR = dir2.x + dir2.y;
	bool zro = dirR < float(1.0 / 32768.0);
	dirR = APrxLoRsqF1(dirR);
	dirR = zro ? 1.0 : dirR;
	dir.x = zro ? 1.0 : dir.x;
	dir *= vec2(dirR);
	len = len * 0.5;
	len *= len;
	float stretch = (dir.x * dir.x + dir.y * dir.y) * APrxLoRcpF1(max(abs(dir.x), abs(dir.y)));
	vec2 len2 = vec2(1.0 + (stretch - 1.0) * len, 1.0 + -0.5 * len);
	float lob = 0.5 + float((1.0 / 4.0 - 0.04) - 0.5) * len;
	float clp = APrxLoRcpF1(lob);
	float aC = 0.0;
	float aW = 0.0;
	tap(aC, aW, vec2( 0.0,-1.0) - pp, dir, len2, lob, clp, bL);
	tap(aC, aW, vec2( 1.0,-1.0) - pp, dir, len2, lob, clp, cL);
	tap(aC, aW, vec2(-1.0, 1.0) - pp, dir, len2, lob, clp, iL);
	tap(aC, aW, vec2( 0.0, 1.0) - pp, dir, len2, lob, clp, jL);
	tap(aC, aW, vec2( 0.0, 0.0) - pp, dir, len2, lob, clp, fL);
	tap(aC, aW, vec2(-1.0, 0.0) - pp, dir, len2, lob, clp, eL);
	tap(aC, aW, vec2( 1.0, 1.0) - pp, dir, len2, lob, clp, kL);
	tap(aC, aW, vec2( 2.0, 1.0) - pp, dir, len2, lob, clp, lL);
	tap(aC, aW, vec2( 2.0, 0.0) - pp, dir, len2, lob, clp, hL);
	tap(aC, aW, vec2( 1.0, 0.0) - pp, dir, len2, lob, clp, gL);
	tap(aC, aW, vec2( 1.0, 2.0) - pp, dir, len2, lob, clp, oL);
	tap(aC, aW, vec2( 0.0, 2.0) - pp, dir, len2, lob, clp, nL);
	pix.r = aC / aW;
	float min1 = min(AMin3F1(fL, gL, jL), kL);
	float max1 = max(AMax3F1(fL, gL, jL), kL);
	pix.r = clamp(pix.r, min1, max1);
	pix.r = clamp(pix.r, 0.0, 1.0);
	return pix;
}


//!DESC CuNNy-6x8C-DS-in
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND LUMA
//!SAVE in
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
	#define V4 f16vec4
	#define M4 f16mat4
	#define F float16_t
#else
	#define V4 vec4
	#define M4 mat4
	#define F float
#endif
#define l0(x, y) F(texelFetch(LUMA_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(1, 1) + ivec2(0, 0), 0).r)
shared F s0[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += V4(2.266e-02, -4.873e-02, 2.058e-02, -3.282e-02) * s0[y+0][x+0];
	r += V4(-2.144e-02, 9.076e-02, 2.728e-02, 6.191e-02) * s0[y+0][x+1];
	r += V4(7.771e-03, 2.292e-02, -9.219e-02, -3.211e-02) * s0[y+0][x+2];
	r += V4(1.644e-01, 4.300e-02, 5.517e-02, 1.249e-01) * s0[y+1][x+0];
	r += V4(-3.134e-01, 1.009e-01, 2.317e-01, 2.146e-01) * s0[y+1][x+1];
	r += V4(1.033e-01, 2.817e-03, 5.988e-02, 1.018e-01) * s0[y+1][x+2];
	r += V4(1.265e-01, -3.151e-02, -1.116e-01, 1.096e-01) * s0[y+2][x+0];
	r += V4(2.304e-02, 3.650e-02, -2.543e-01, -4.808e-01) * s0[y+2][x+1];
	r += V4(-1.179e-01, -2.417e-01, 1.118e-01, -6.714e-02) * s0[y+2][x+2];
	r += V4(2.868e-02, -1.187e-02, -5.663e-04, 1.530e-03);
	return vec4(r);
}
vec4 f1(int x, int y) {
	V4 r = V4(0.0);
	r += V4(2.265e-01, -3.922e-02, 2.971e-02, -2.550e-01) * s0[y+0][x+0];
	r += V4(2.241e-01, 1.611e-01, 8.880e-02, -8.848e-02) * s0[y+0][x+1];
	r += V4(2.049e-04, -1.579e-02, 2.833e-03, 1.153e-01) * s0[y+0][x+2];
	r += V4(-5.117e-01, 3.480e-02, 2.253e-01, -1.870e-01) * s0[y+1][x+0];
	r += V4(9.397e-02, 2.294e-01, 1.033e-01, 5.082e-01) * s0[y+1][x+1];
	r += V4(-1.800e-02, -7.730e-03, -3.301e-02, -1.028e-01) * s0[y+1][x+2];
	r += V4(-3.858e-02, -2.216e-02, -2.720e-02, 1.023e-02) * s0[y+2][x+0];
	r += V4(-1.316e-02, 4.820e-04, -2.509e-02, 1.749e-02) * s0[y+2][x+1];
	r += V4(2.957e-02, -1.188e-02, 1.322e-01, -9.692e-03) * s0[y+2][x+2];
	r += V4(1.426e-03, -9.673e-03, -1.223e-01, -6.800e-03);
	return vec4(r);
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = LUMA_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
		}
	}
	barrier();
	vec4 r0 = f0(xy.x, xy.y);
	vec4 r1 = f1(xy.x, xy.y);
	imageStore(out_image, opos + ivec2(0, 0), r0);
	imageStore(out_image, opos + ivec2(1, 0), r1);
}


//!DESC CuNNy-6x8C-DS-conv1
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND in
//!BIND LUMA
//!SAVE conv1
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
	#define V4 f16vec4
	#define M4 f16mat4
	#define F float16_t
#else
	#define V4 vec4
	#define M4 mat4
	#define F float
#endif
#define l0(x, y) V4(texelFetch(in_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(in_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 s0[10][10];
shared V4 s1[10][10];
shared V4 s2[10][10];
shared V4 s3[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += M4(7.163e-02, 5.026e-02, -4.042e-02, 8.951e-04, 1.735e-01, 5.964e-01, -5.002e-01, -1.064e-01, -1.310e-01, 4.321e-02, -6.432e-02, 1.509e-01, 2.439e-01, 3.105e-01, -9.985e-02, -1.800e-01) * s0[y+0][x+0];
	r += M4(1.305e-01, -3.501e-01, 7.393e-02, 1.136e-01, -2.612e-01, 2.326e-01, 3.210e-01, 4.102e-01, -2.589e-03, -3.924e-02, -1.627e-02, -2.571e-01, -2.177e-01, -4.166e-01, 6.436e-02, -3.293e-01) * s0[y+0][x+1];
	r += M4(-2.188e-02, -2.283e-02, -3.302e-02, -1.095e-02, -2.790e-02, 4.950e-02, 7.339e-02, 1.155e-01, 1.699e-01, 1.869e-01, 6.266e-02, -2.034e-01, -3.952e-02, -2.762e-01, 1.014e-02, -3.976e-02) * s0[y+0][x+2];
	r += M4(5.930e-02, 2.509e-01, -3.016e-01, 3.524e-03, -3.900e-01, 2.055e-01, -3.311e-01, -7.814e-02, -1.133e-01, -4.944e-02, 6.510e-02, 5.625e-02, 2.175e-01, -1.257e-01, -2.776e-01, 5.258e-02) * s0[y+1][x+0];
	r += M4(8.931e-02, -5.334e-02, 2.046e-01, -7.527e-02, -3.293e-01, 7.304e-02, -2.064e-01, 1.342e-01, 1.233e-01, 8.202e-02, 9.853e-02, 1.343e-01, 6.601e-02, -2.603e-01, -8.688e-03, 1.181e-01) * s0[y+1][x+1];
	r += M4(5.613e-02, -1.686e-02, 1.021e-01, 3.448e-02, 1.903e-01, -3.358e-02, -9.262e-02, -9.535e-03, 9.634e-03, 2.164e-02, 7.005e-02, 3.066e-02, -1.238e-01, -2.467e-02, -1.768e-04, 2.750e-02) * s0[y+1][x+2];
	r += M4(-1.252e-01, -4.476e-02, 3.710e-01, -7.392e-02, 7.703e-02, -6.419e-02, -8.668e-02, -2.239e-01, 2.252e-01, 8.915e-02, -1.462e-01, -9.434e-02, -3.784e-02, 1.637e-02, 2.290e-01, 8.738e-02) * s0[y+2][x+0];
	r += M4(1.050e-01, -2.484e-02, -2.923e-01, 4.086e-03, 7.116e-02, -5.800e-03, 1.278e-01, 4.403e-02, -1.604e-01, -1.164e-01, 1.049e-01, -1.926e-02, -4.404e-02, -1.553e-02, -1.906e-01, 7.156e-02) * s0[y+2][x+1];
	r += M4(9.548e-02, -6.177e-03, -1.037e-01, 4.372e-02, -2.182e-01, -3.867e-04, 5.785e-02, 5.533e-02, 3.716e-03, 3.731e-02, -6.839e-02, 1.693e-02, -1.333e-01, 5.413e-02, 3.103e-02, 4.080e-02) * s0[y+2][x+2];
	r += M4(2.819e-01, 7.467e-03, 4.775e-01, 3.043e-01, -2.386e-02, -3.127e-02, -2.138e-02, -2.361e-02, -2.485e-01, 2.330e-01, -1.099e-01, 2.422e-01, -1.622e-03, 2.382e-01, 5.497e-03, 1.518e-01) * s1[y+0][x+0];
	r += M4(1.604e-02, -6.347e-03, -4.268e-01, 1.996e-01, -5.016e-03, -1.967e-01, -2.511e-02, -4.772e-02, 2.727e-01, 2.949e-01, -1.162e-01, 3.575e-02, 1.130e-01, 2.310e-01, 1.680e-01, -2.078e-01) * s1[y+0][x+1];
	r += M4(-1.909e-01, -3.257e-01, -4.010e-01, -2.502e-01, 1.732e-02, -2.902e-02, 4.009e-02, -9.331e-02, -3.197e-02, 3.644e-02, -1.186e-01, -2.360e-01, 1.914e-01, 1.698e-01, 1.609e-01, 7.427e-02) * s1[y+0][x+2];
	r += M4(1.319e-01, 2.078e-01, 3.592e-01, -1.109e-01, 3.087e-01, -1.516e-01, -5.009e-02, -3.001e-03, -4.673e-01, 1.612e-01, -1.582e-01, -4.194e-02, -4.025e-01, -1.604e-01, 1.003e-03, 2.235e-01) * s1[y+1][x+0];
	r += M4(1.373e-01, 9.780e-02, -4.624e-01, -3.050e-01, -2.223e-01, 1.423e-01, -6.430e-03, 1.744e-02, 2.769e-01, 4.524e-02, 3.760e-01, 2.754e-01, 2.100e-01, 3.053e-01, 2.467e-01, -5.032e-02) * s1[y+1][x+1];
	r += M4(-2.850e-01, -1.794e-01, -4.853e-01, 2.658e-01, 2.194e-01, -4.233e-02, -4.946e-02, 6.272e-02, -1.184e-01, -2.880e-01, -2.115e-01, 1.389e-01, 1.695e-01, 2.610e-01, 2.012e-01, -5.928e-03) * s1[y+1][x+2];
	r += M4(-1.475e-02, -1.522e-01, -1.884e-01, 6.015e-02, 1.850e-01, 8.552e-02, 2.211e-01, -3.264e-02, 5.687e-02, -1.525e-01, -2.777e-01, -1.949e-02, -5.528e-02, 8.317e-02, 2.151e-01, -9.053e-02) * s1[y+2][x+0];
	r += M4(9.560e-03, -2.984e-01, -4.887e-01, -2.789e-01, -2.553e-01, 2.231e-02, 1.942e-01, 1.568e-01, 2.236e-02, 1.435e-02, 7.169e-02, -2.691e-02, -4.672e-02, 1.998e-02, 2.064e-01, -3.071e-02) * s1[y+2][x+1];
	r += M4(-1.120e-01, -1.642e-01, 1.293e-01, -2.996e-02, -8.289e-02, 1.577e-02, -5.140e-02, 5.944e-02, -1.541e-03, -8.973e-03, -3.508e-01, -1.202e-02, 1.917e-01, 1.139e-01, 2.393e-01, -8.652e-02) * s1[y+2][x+2];
	r += M4(-1.791e-02, 8.367e-02, 1.597e-01, 1.305e-01, -3.693e-02, -1.078e-01, 7.676e-02, -7.610e-02, 7.661e-02, 2.861e-02, -2.328e-02, 6.977e-02, 3.591e-02, 7.009e-03, -8.445e-02, 2.647e-01) * s2[y+0][x+0];
	r += M4(-2.278e-02, 9.204e-02, -1.566e-01, -1.313e-01, 2.979e-02, -5.336e-02, 6.745e-02, -3.089e-02, -6.853e-02, -5.149e-02, 1.724e-01, 5.141e-02, -4.186e-02, 4.434e-01, -1.319e-01, 3.180e-02) * s2[y+0][x+1];
	r += M4(2.201e-03, 2.707e-03, -1.385e-03, -4.822e-02, 4.381e-02, 1.610e-02, 8.364e-02, -1.937e-01, 4.437e-03, 4.621e-02, -3.748e-02, 8.000e-02, -3.015e-02, -1.347e-01, 6.719e-02, -1.322e-01) * s2[y+0][x+2];
	r += M4(-1.201e-01, -1.833e-01, 1.980e-01, 6.148e-02, 1.688e-01, -5.280e-02, 1.117e-01, -1.743e-02, -4.481e-02, -1.101e-01, -1.746e-01, 2.334e-01, -9.749e-02, 1.187e-01, 2.690e-01, -5.376e-02) * s2[y+1][x+0];
	r += M4(-7.715e-02, -1.294e-01, -1.313e-01, -3.055e-01, -2.789e-01, 1.854e-01, -1.101e-01, 1.455e-01, 7.132e-03, 2.192e-02, 1.295e-01, 9.975e-02, -5.564e-01, -4.541e-02, -1.392e-01, 5.314e-01) * s2[y+1][x+1];
	r += M4(1.128e-04, -4.321e-01, -1.513e-01, -3.799e-01, -8.568e-02, 1.383e-02, -9.457e-02, 3.693e-02, 4.933e-02, -7.022e-02, 8.005e-02, 1.302e-01, -4.424e-01, -3.055e-01, -8.184e-02, -9.048e-02) * s2[y+1][x+2];
	r += M4(1.592e-01, -2.836e-02, 1.915e-01, 5.071e-02, 1.991e-01, -3.999e-02, -2.067e-02, 9.667e-02, 9.179e-04, -1.017e-01, -3.935e-02, 1.549e-01, 1.025e-01, 1.590e-02, -1.793e-01, 5.647e-02) * s2[y+2][x+0];
	r += M4(-5.627e-03, -2.017e-01, 1.968e-01, -3.512e-02, -1.528e-02, 2.458e-02, 2.172e-02, -4.020e-02, 7.935e-02, 1.649e-01, -1.747e-01, 1.221e-01, -1.066e-01, -2.177e-01, -3.230e-01, -1.798e-01) * s2[y+2][x+1];
	r += M4(-2.492e-01, -4.052e-01, 1.772e-01, -8.344e-02, -1.285e-01, 5.582e-02, 3.632e-02, -1.093e-01, -7.708e-02, 3.054e-02, -3.779e-03, 9.866e-03, -2.207e-01, -2.453e-01, -3.706e-01, -1.436e-01) * s2[y+2][x+2];
	r += M4(1.556e-02, 3.093e-02, 1.220e-02, 1.948e-01, 1.663e-01, 3.707e-01, 2.592e-01, -1.076e+00, 5.304e-02, -8.320e-02, -1.678e-02, 9.078e-02, -4.722e-02, -1.308e-01, 2.290e-02, 1.889e-01) * s3[y+0][x+0];
	r += M4(-4.354e-02, 2.817e-01, -9.034e-02, -2.056e-01, 1.834e-01, 1.159e+00, 3.012e-02, -5.170e-01, -3.155e-02, -1.263e-02, 8.078e-02, -2.802e-01, -1.668e-01, 4.116e-01, -4.584e-02, -2.763e-01) * s3[y+0][x+1];
	r += M4(-9.937e-03, -1.759e-01, -1.029e-01, 8.521e-02, 9.237e-01, 3.858e-01, 1.656e-02, -1.266e+00, -7.571e-02, -1.254e-02, -2.485e-03, 4.826e-02, 4.186e-02, 2.831e-02, 1.070e-01, -2.006e-01) * s3[y+0][x+2];
	r += M4(-3.237e-01, -5.470e-02, 2.456e-01, 1.605e-01, 2.452e-01, -1.374e-01, 6.540e-01, -6.004e-01, -8.970e-02, -7.119e-02, -3.577e-02, 3.012e-01, -1.304e-01, 8.550e-02, 4.656e-01, -4.355e-02) * s3[y+1][x+0];
	r += M4(-8.872e-02, 3.246e-01, -5.035e-01, -2.952e-01, 8.772e-02, 1.258e+00, 1.045e+00, 8.752e-01, 1.236e-01, 1.911e-01, -2.372e-02, 2.358e-02, -3.138e-02, 5.545e-01, -1.504e-01, 2.159e-01) * s3[y+1][x+1];
	r += M4(-1.456e-01, 6.766e-02, 1.953e-02, 5.799e-02, 5.112e-01, -4.453e-02, -1.871e-01, -1.944e-01, 1.573e-01, 6.289e-03, 7.040e-02, 1.897e-01, -1.549e-02, 1.006e-01, 9.350e-03, -7.861e-02) * s3[y+1][x+2];
	r += M4(-2.535e-01, 1.842e-01, 4.030e-01, 2.494e-02, 3.058e-01, 1.874e-01, -4.906e-01, -3.008e-01, -1.480e-01, -1.807e-01, -1.425e-01, -1.871e-01, -6.026e-02, 1.507e-01, 1.026e-01, -1.251e-01) * s3[y+2][x+0];
	r += M4(-2.390e-01, 2.246e-01, 2.248e-01, 1.451e-01, -1.428e-01, 7.994e-01, 4.070e-02, 1.450e+00, 1.983e-01, 1.454e-01, -8.324e-02, 4.055e-01, -1.463e-01, 9.902e-02, 3.673e-02, -2.463e-01) * s3[y+2][x+1];
	r += M4(3.629e-01, 1.553e-01, -5.078e-02, 3.253e-01, 2.113e-01, 1.823e-01, 6.666e-01, -1.137e+00, -6.210e-02, -8.134e-02, 2.102e-01, -3.038e-01, 4.963e-02, -7.006e-02, -4.193e-02, -1.057e-01) * s3[y+2][x+2];
	r += V4(-8.668e-03, 2.592e-02, 2.325e-02, -2.080e-01);
	return vec4(r);
}
vec4 f1(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-5.397e-02, 1.509e-01, -1.141e-01, 1.336e-01, -3.547e-01, -3.018e-01, 5.193e-01, -8.010e-02, 9.908e-02, 7.450e-02, -1.489e-01, 6.317e-02, -1.784e-02, -2.351e-01, 7.039e-02, -2.837e-02) * s0[y+0][x+0];
	r += M4(-5.776e-02, -1.264e-01, -1.131e-01, -1.742e-01, -2.620e-03, -3.075e-01, 7.372e-02, 2.706e-01, -9.806e-02, -1.242e-01, -5.309e-03, 1.112e-01, 5.580e-02, 2.402e-01, -2.886e-01, -2.226e-01) * s0[y+0][x+1];
	r += M4(-1.019e-01, 1.612e-02, 6.182e-02, 1.867e-02, -1.120e-01, -2.142e-01, 1.809e-02, -4.658e-02, 4.832e-03, -3.701e-02, 5.687e-02, -7.699e-03, 1.897e-01, 6.533e-02, -6.386e-02, -2.697e-01) * s0[y+0][x+2];
	r += M4(1.008e-01, -5.228e-02, -4.513e-02, 1.946e-02, -1.900e-01, 1.279e-01, 3.925e-01, -6.206e-02, 7.040e-02, -4.632e-02, -9.775e-02, 5.595e-03, 1.324e-01, -5.495e-02, -3.186e-01, 1.618e-01) * s0[y+1][x+0];
	r += M4(-7.176e-02, 5.919e-01, 1.935e-01, -1.692e-01, 2.249e-01, -3.196e-01, 1.145e-01, 2.880e-01, 9.251e-02, -1.406e-01, -1.993e-01, 9.255e-02, 1.448e-01, -2.897e-01, -4.066e-01, 1.253e-01) * s0[y+1][x+1];
	r += M4(-2.063e-02, -4.973e-02, 3.329e-02, 1.527e-01, -5.878e-02, 2.203e-01, 8.415e-04, 6.123e-03, 5.524e-02, 1.336e-01, 9.781e-02, -2.345e-01, -6.443e-02, 7.425e-02, 9.711e-03, -7.484e-02) * s0[y+1][x+2];
	r += M4(-6.147e-02, -1.233e-02, 3.165e-03, 1.338e-01, -2.360e-01, -1.851e-01, -6.882e-02, -1.713e-01, -8.851e-03, 8.740e-02, 7.343e-02, 1.634e-01, -4.906e-02, -7.690e-02, -5.773e-02, -2.995e-02) * s0[y+2][x+0];
	r += M4(-3.880e-02, -9.599e-02, -2.305e-02, 1.990e-01, 2.212e-01, -2.649e-01, -4.347e-01, -1.694e-01, -5.664e-04, -3.767e-02, 2.169e-01, -9.383e-02, 6.789e-02, -1.824e-01, -8.211e-02, 5.749e-02) * s0[y+2][x+1];
	r += M4(8.975e-02, 7.921e-02, 4.318e-03, 7.830e-02, 2.297e-01, -1.826e-01, 1.327e-02, 6.692e-02, 3.953e-02, -1.011e-01, 1.202e-01, -1.294e-01, -2.118e-01, 5.893e-02, 2.496e-01, 4.595e-02) * s0[y+2][x+2];
	r += M4(1.084e-01, -1.606e-01, -1.695e-01, 1.803e-01, -3.127e-02, 1.378e-01, 1.769e-01, -4.515e-02, 1.236e-01, 3.115e-01, -1.362e-01, 2.608e-01, -9.645e-02, -1.062e-01, 9.559e-02, 1.184e-01) * s1[y+0][x+0];
	r += M4(2.971e-02, -2.515e-01, -1.432e-01, 4.799e-02, 6.402e-02, 8.212e-02, 2.680e-02, -5.847e-02, -1.727e-01, -8.108e-02, -5.824e-02, 7.994e-02, -2.257e-02, 8.569e-02, 1.037e-01, 6.824e-02) * s1[y+0][x+1];
	r += M4(3.119e-01, -5.000e-01, 1.112e-01, 7.568e-02, -2.161e-02, -1.056e-01, -1.251e-01, 1.098e-05, -1.367e-01, -1.959e-01, 3.673e-03, 1.123e-01, -5.412e-02, 2.674e-01, 4.422e-02, 6.682e-02) * s1[y+0][x+2];
	r += M4(2.797e-01, -4.912e-01, -1.667e-01, -1.674e-01, 6.307e-02, 8.740e-02, -2.834e-01, 4.869e-02, 2.244e-01, 1.087e-01, -2.407e-01, 1.557e-01, -6.725e-03, -2.773e-01, -2.380e-01, 1.333e-01) * s1[y+1][x+0];
	r += M4(-3.146e-01, 2.397e-02, 4.134e-02, -3.922e-01, -3.066e-02, 2.918e-01, -1.272e-03, -8.530e-02, -9.772e-03, 1.261e-01, -3.540e-01, 1.194e-01, -1.013e-01, -1.801e-01, -4.489e-01, 1.028e-01) * s1[y+1][x+1];
	r += M4(4.760e-01, -3.970e-01, -4.945e-01, 6.996e-02, 5.814e-03, 7.326e-02, 1.534e-02, -6.565e-02, 9.244e-02, 5.749e-02, 1.052e-01, 1.862e-02, -1.538e-01, 1.513e-01, 1.517e-02, 8.081e-02) * s1[y+1][x+2];
	r += M4(-1.518e-02, -4.656e-02, -6.985e-02, 1.642e-01, -7.197e-02, 4.375e-02, -1.080e-01, 1.702e-02, -6.688e-04, -3.002e-02, -2.912e-01, 1.616e-01, -4.565e-02, 1.167e-01, -1.100e-01, -1.246e-01) * s1[y+2][x+0];
	r += M4(-2.588e-01, -3.169e-01, -1.885e-01, 1.712e-01, -1.183e-01, 1.930e-01, -3.652e-02, 1.123e-01, 2.194e-01, 1.653e-01, 1.607e-01, 3.960e-02, 1.329e-01, -6.233e-02, 2.968e-03, -4.741e-02) * s1[y+2][x+1];
	r += M4(2.881e-01, -4.104e-01, -1.226e-01, -1.626e-01, 1.067e-02, -2.806e-01, -4.338e-02, 8.611e-02, 1.045e-01, -1.910e-01, -7.462e-02, -4.612e-02, 3.653e-02, -9.252e-02, 1.103e-01, -1.540e-01) * s1[y+2][x+2];
	r += M4(-1.495e-02, -7.568e-02, 5.364e-02, 6.713e-02, 3.498e-03, -3.610e-02, -7.782e-02, 3.001e-02, -1.209e-02, -1.036e-01, 4.861e-02, 4.681e-02, 1.131e-01, -2.800e-01, 9.760e-02, 1.296e-01) * s2[y+0][x+0];
	r += M4(-6.686e-02, 1.146e-01, 8.285e-02, -1.263e-01, 1.077e-01, -7.439e-02, -1.077e-01, -1.723e-02, 9.815e-02, 1.643e-01, -1.567e-01, -5.060e-02, -3.081e-01, 1.691e-02, 6.094e-02, -1.572e-01) * s2[y+0][x+1];
	r += M4(1.352e-01, -1.803e-01, 5.617e-02, 3.669e-02, -7.146e-02, 1.202e-01, 4.442e-04, 5.020e-03, 3.023e-02, -7.701e-02, 2.438e-02, 8.078e-02, 1.094e-01, 1.329e-01, -1.637e-01, 2.658e-02) * s2[y+0][x+2];
	r += M4(2.001e-01, -4.852e-02, -7.773e-02, -5.702e-02, 1.532e-01, -6.439e-02, -1.148e-01, 1.282e-03, 1.382e-01, 1.579e-01, 7.060e-02, -7.073e-02, 4.346e-02, -4.200e-02, -1.830e-01, -1.096e-01) * s2[y+1][x+0];
	r += M4(-1.887e-02, 2.076e-02, -2.727e-01, -4.359e-02, -2.239e-03, 8.302e-02, -6.089e-02, 5.260e-02, 2.718e-02, -9.561e-02, 4.872e-03, 1.007e-01, 3.415e-01, -7.034e-01, -6.214e-01, 5.725e-01) * s2[y+1][x+1];
	r += M4(1.410e-01, 1.968e-01, 1.015e-01, 7.821e-03, 1.402e-01, -5.160e-02, 5.224e-02, 1.349e-01, 1.876e-01, -2.344e-02, -4.941e-02, 4.713e-02, -3.390e-04, 9.857e-02, 9.817e-03, -1.042e-01) * s2[y+1][x+2];
	r += M4(4.908e-02, -1.382e-01, -9.273e-02, 8.164e-03, 7.605e-02, 4.560e-02, 5.130e-02, -9.833e-03, 1.941e-01, 3.997e-02, 5.732e-02, -3.568e-03, 9.594e-02, -1.734e-01, -7.296e-02, 1.575e-02) * s2[y+2][x+0];
	r += M4(9.484e-02, 9.944e-03, -1.250e-01, 2.775e-02, 5.592e-02, -3.526e-02, 2.058e-01, 2.905e-01, 9.229e-02, 3.760e-03, 1.525e-01, 4.734e-02, -2.025e-01, 5.083e-02, 4.502e-01, -1.217e-01) * s2[y+2][x+1];
	r += M4(1.788e-01, 7.726e-02, -6.513e-02, 1.362e-01, -6.499e-02, 1.563e-01, 3.740e-03, -1.753e-01, -6.850e-02, -9.758e-02, -1.644e-01, 1.067e-01, -3.121e-01, -2.679e-01, 1.605e-01, -2.438e-02) * s2[y+2][x+2];
	r += M4(-7.406e-02, 5.040e-03, 3.113e-02, 7.544e-02, -8.898e-02, 3.494e-01, 5.282e-01, 5.651e-01, -2.356e-01, -2.148e-01, -6.228e-03, 6.757e-02, 4.198e-02, -1.518e-02, -3.649e-02, 1.334e-01) * s3[y+0][x+0];
	r += M4(9.733e-03, 1.721e-02, 2.554e-02, -5.928e-02, -7.415e-01, 5.297e-01, 7.255e-01, 6.296e-01, 2.614e-01, 2.493e-01, -3.722e-02, -4.672e-04, -2.912e-02, 9.460e-02, 1.316e-01, -8.201e-02) * s3[y+0][x+1];
	r += M4(1.522e-02, -2.585e-02, -1.943e-02, 1.129e-01, 1.919e-01, 1.927e-01, 7.258e-01, 5.166e-01, -4.967e-02, 7.935e-02, -9.456e-02, -5.602e-02, 3.112e-02, 1.938e-01, 6.889e-02, 3.957e-02) * s3[y+0][x+2];
	r += M4(1.155e-01, 6.148e-02, -3.266e-02, -2.900e-02, 7.734e-01, -8.291e-01, 1.373e+00, 1.005e+00, 2.696e-01, 1.870e-01, 1.884e-01, -1.146e-01, -1.585e-01, 1.628e-01, -2.308e-01, -1.635e-01) * s3[y+1][x+0];
	r += M4(-2.434e-01, -5.040e-01, -1.385e-01, 3.559e-02, -2.247e-01, -7.133e-01, 1.098e+00, 1.533e+00, 2.163e-01, -3.039e-01, 2.065e-02, 4.496e-01, 3.474e-01, -6.544e-01, -3.071e-01, 4.130e-01) * s3[y+1][x+1];
	r += M4(2.561e-03, 2.552e-02, 4.438e-02, 4.382e-02, -1.368e-02, 4.499e-01, 6.797e-01, 8.389e-01, -1.742e-01, -2.606e-01, 2.188e-02, 1.998e-01, 1.127e-01, 1.692e-03, 2.036e-01, -2.019e-01) * s3[y+1][x+2];
	r += M4(-9.483e-02, 2.644e-02, -1.247e-01, -5.827e-02, -4.822e-01, -7.157e-01, 4.452e-01, 7.510e-01, -8.466e-02, -8.392e-02, 6.221e-02, -1.160e-01, 1.176e-01, 2.210e-01, 1.248e-01, 1.311e-01) * s3[y+2][x+0];
	r += M4(-7.561e-02, -2.784e-01, -3.056e-01, -4.685e-02, -1.845e-01, -3.811e-01, -5.305e-01, 1.204e+00, 2.946e-01, 1.646e-01, 6.091e-02, 1.735e-02, 5.220e-02, 7.123e-01, 4.983e-01, -2.177e-01) * s3[y+2][x+1];
	r += M4(-1.361e-01, -3.385e-02, -1.193e-01, 2.324e-02, 8.826e-02, 1.059e+00, 2.094e-01, 5.716e-01, -2.269e-01, -6.153e-02, -8.850e-02, 5.212e-02, 4.067e-02, -1.539e-01, 2.422e-02, -2.506e-01) * s3[y+2][x+2];
	r += V4(-1.551e-01, -3.940e-02, 3.472e-02, 4.531e-02);
	return vec4(r);
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = in_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
			s2[ay][ax] = l1(x - 1, y - 1);
			s1[ay][ax] = -max(-s0[ay][ax], V4(0.0));
			s0[ay][ax] = max(s0[ay][ax], V4(0.0));
			s3[ay][ax] = -max(-s2[ay][ax], V4(0.0));
			s2[ay][ax] = max(s2[ay][ax], V4(0.0));
		}
	}
	barrier();
	vec4 r0 = f0(xy.x, xy.y);
	vec4 r1 = f1(xy.x, xy.y);
	imageStore(out_image, opos + ivec2(0, 0), r0);
	imageStore(out_image, opos + ivec2(1, 0), r1);
}


//!DESC CuNNy-6x8C-DS-conv2
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv1
//!BIND LUMA
//!SAVE conv2
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
	#define V4 f16vec4
	#define M4 f16mat4
	#define F float16_t
#else
	#define V4 vec4
	#define M4 mat4
	#define F float
#endif
#define l0(x, y) V4(texelFetch(conv1_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv1_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 s0[10][10];
shared V4 s1[10][10];
shared V4 s2[10][10];
shared V4 s3[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-1.097e-01, -1.092e-02, 4.528e-02, 1.042e-01, -2.670e-02, 8.484e-02, -3.029e-02, -5.574e-03, 1.437e-02, 1.165e-01, 3.209e-02, -1.522e-03, 2.666e-02, 1.029e-01, -2.548e-01, 5.397e-02) * s0[y+0][x+0];
	r += M4(-3.789e-01, 2.628e-02, -3.053e-01, 1.103e-01, 1.324e-01, -1.214e-01, 2.046e-01, -1.590e-01, -1.238e-01, -1.095e-01, 2.863e-01, -1.855e-01, 2.622e-01, 6.052e-02, 1.077e-01, -1.796e-01) * s0[y+0][x+1];
	r += M4(-7.643e-02, -1.775e-02, -1.517e-01, -3.184e-01, 3.354e-02, -4.222e-01, -4.698e-02, 2.438e-02, -1.519e-01, 1.030e-01, -2.462e-01, -3.351e-02, 9.568e-02, -5.101e-02, 2.544e-01, -4.058e-02) * s0[y+0][x+2];
	r += M4(-2.542e-01, -8.066e-02, -2.693e-01, 6.975e-02, -1.064e-02, -1.896e-01, -4.407e-01, 1.891e-01, -7.890e-02, 2.522e-02, -1.854e-01, 8.168e-02, 1.808e-01, -3.723e-01, 5.969e-02, 1.334e-01) * s0[y+1][x+0];
	r += M4(-2.698e-02, 9.505e-02, -1.194e-01, 2.910e-01, 1.158e-01, 2.659e-01, -3.792e-01, 2.868e-01, 1.323e-02, -1.400e-01, 1.478e-01, -6.361e-02, 2.093e-01, 3.995e-02, -5.915e-02, 1.222e-01) * s0[y+1][x+1];
	r += M4(1.101e-02, 5.774e-02, 4.590e-01, -8.983e-02, -1.124e-01, -5.728e-01, 4.320e-01, -2.432e-01, 1.607e-01, 2.292e-01, -2.020e-01, -4.578e-02, 3.257e-01, -1.792e-01, -1.290e-01, 2.349e-02) * s0[y+1][x+2];
	r += M4(-3.390e-02, 1.291e-01, -9.160e-02, 5.886e-02, -5.134e-02, -3.629e-01, 3.372e-01, 1.237e-01, -2.796e-02, 1.758e-01, -1.174e-01, 8.797e-02, -5.355e-02, 2.223e-01, -3.358e-01, -1.421e-01) * s0[y+2][x+0];
	r += M4(3.135e-02, 1.888e-01, -3.583e-02, 1.200e-01, 1.878e-01, 1.932e-01, 1.034e-01, -2.833e-01, 5.521e-02, 6.467e-02, -3.626e-01, -5.454e-02, 6.729e-02, 9.249e-02, 1.377e-01, 1.842e-01) * s0[y+2][x+1];
	r += M4(-5.688e-03, 1.383e-01, 2.172e-01, 1.427e-02, -7.613e-02, -1.822e-01, -2.166e-01, 1.252e-01, 2.159e-02, 1.483e-01, 3.506e-01, 3.804e-02, 1.744e-02, 1.601e-01, -1.290e-01, 1.592e-01) * s0[y+2][x+2];
	r += M4(1.089e-01, -1.199e-01, 4.654e-02, 2.695e-02, -2.777e-02, -5.021e-02, -7.300e-02, -6.002e-02, -4.547e-02, 1.823e-02, 8.284e-02, 2.939e-02, 4.103e-02, 1.340e-02, -6.706e-02, 1.033e-01) * s1[y+0][x+0];
	r += M4(-1.159e-01, -3.725e-02, -2.502e-01, 1.970e-01, 2.315e-02, 7.360e-02, -1.333e-01, 3.629e-02, -4.065e-02, 1.846e-01, -1.964e-01, 2.368e-01, 8.473e-02, -3.726e-02, 1.830e-01, -5.108e-02) * s1[y+0][x+1];
	r += M4(9.516e-02, 5.947e-02, 2.595e-01, 1.104e-02, 1.182e-01, 1.554e-02, 3.537e-02, 4.188e-02, -1.768e-02, 1.149e-02, -2.469e-01, 1.172e-01, 3.964e-02, -4.168e-02, 8.268e-03, -1.009e-01) * s1[y+0][x+2];
	r += M4(-1.760e-01, -8.068e-03, -5.610e-02, -5.116e-02, -2.072e-02, -3.199e-01, -7.710e-02, 2.168e-01, -1.131e-01, 2.010e-01, -1.444e-01, 5.336e-02, -2.585e-03, -3.037e-01, -2.388e-01, 2.511e-01) * s1[y+1][x+0];
	r += M4(-1.071e-01, -2.172e-01, -2.282e-01, 2.593e-01, 8.678e-02, 1.651e-01, -2.189e-01, -5.246e-02, 6.086e-02, 1.122e-01, -1.704e-01, -2.605e-02, 2.577e-01, -3.459e-02, -1.264e-01, 5.845e-02) * s1[y+1][x+1];
	r += M4(1.541e-01, -1.004e-01, -4.356e-03, 4.970e-02, -8.968e-02, -1.431e-01, -1.169e-01, -1.184e-01, 4.086e-02, 1.685e-01, -1.186e-02, -1.067e-01, 8.360e-02, -7.232e-02, 9.711e-02, 6.970e-02) * s1[y+1][x+2];
	r += M4(1.135e-03, 4.911e-03, -3.417e-02, 6.028e-02, -4.630e-02, -1.594e-01, 2.262e-02, 6.348e-02, 3.297e-02, -3.129e-02, -8.418e-02, 5.873e-02, -6.060e-03, 1.066e-01, -9.955e-02, -7.828e-02) * s1[y+2][x+0];
	r += M4(-1.384e-01, 1.333e-01, 2.208e-01, 8.587e-02, 2.382e-01, 2.206e-01, -4.143e-01, -1.314e-01, 2.480e-02, -1.663e-01, 1.414e-01, -9.644e-02, 8.874e-02, 4.222e-02, -5.742e-02, 1.898e-01) * s1[y+2][x+1];
	r += M4(9.823e-02, -1.003e-01, 3.428e-01, -1.401e-02, -4.496e-02, 1.508e-01, -8.967e-02, -6.935e-02, -1.161e-01, 3.777e-02, 2.182e-01, 6.829e-02, 8.265e-02, 6.026e-02, -1.615e-01, 1.514e-01) * s1[y+2][x+2];
	r += M4(7.392e-02, 6.697e-02, 8.372e-03, -8.200e-02, -1.736e-01, 3.110e-01, 5.658e-02, -8.781e-02, -6.724e-02, 7.008e-02, 1.159e-01, 1.386e-01, 1.329e-02, -1.979e-02, -5.167e-03, 3.743e-02) * s2[y+0][x+0];
	r += M4(4.680e-02, 6.594e-02, 3.469e-02, -1.494e-01, 1.569e-01, 2.002e-02, 2.001e-01, -1.674e-01, 1.150e-01, 6.584e-02, 1.038e-01, 2.171e-01, -1.125e-01, -2.347e-01, 9.620e-02, -6.359e-02) * s2[y+0][x+1];
	r += M4(1.330e-01, -4.397e-02, -5.334e-02, 7.682e-02, 7.891e-02, -6.825e-02, 1.671e-01, 8.538e-02, -9.625e-04, -2.582e-02, -6.327e-02, -3.830e-02, -7.877e-02, -1.088e-02, 1.901e-01, -2.331e-01) * s2[y+0][x+2];
	r += M4(2.448e-02, 1.133e-02, -6.003e-02, 8.116e-02, 3.287e-01, 1.069e-01, 3.257e-01, -3.218e-01, 1.627e-02, 2.456e-01, -1.685e-01, -1.532e-01, -1.072e-01, -5.324e-02, 5.808e-03, 1.953e-04) * s2[y+1][x+0];
	r += M4(1.023e-01, -2.897e-02, 5.483e-02, -7.638e-02, -1.514e-01, 1.434e-01, 2.692e-01, -1.610e-01, -5.880e-02, 8.145e-02, 2.447e-01, 3.164e-01, 1.065e-01, 6.515e-02, 5.926e-03, 7.908e-02) * s2[y+1][x+1];
	r += M4(3.091e-02, -1.230e-01, 2.037e-01, -7.570e-02, 2.339e-01, -1.429e-01, -2.037e-01, 6.201e-03, -1.780e-01, 7.716e-02, 1.253e-01, 6.299e-02, 1.565e-02, -1.613e-01, -1.317e-02, -5.713e-02) * s2[y+1][x+2];
	r += M4(3.461e-02, 5.958e-02, 8.615e-02, -1.410e-01, -1.358e-02, -2.576e-01, 1.111e-01, -1.186e-01, 3.675e-02, 2.670e-03, -2.174e-01, 4.311e-02, -1.585e-02, 1.363e-01, -1.880e-01, 7.234e-02) * s2[y+2][x+0];
	r += M4(6.018e-02, 1.506e-01, 2.081e-01, 2.248e-02, -1.471e-01, 3.279e-02, 4.350e-02, 1.079e-01, 1.054e-01, -1.526e-02, -5.707e-02, 7.844e-02, 3.137e-02, 2.329e-01, -1.423e-01, -1.414e-02) * s2[y+2][x+1];
	r += M4(7.220e-02, 5.335e-02, -2.587e-02, -2.039e-02, 4.948e-02, -3.815e-02, -1.115e-01, -6.646e-02, 5.249e-02, 1.414e-01, -7.279e-02, 8.703e-03, 1.621e-01, 1.769e-02, -4.947e-02, 4.761e-02) * s2[y+2][x+2];
	r += M4(-4.261e-03, 1.616e-01, 1.825e-02, 3.933e-03, -1.224e-02, -2.413e-01, 2.416e-01, -5.909e-02, 6.994e-02, 4.280e-02, 2.016e-01, -8.169e-03, 1.425e-01, -1.776e-01, -4.950e-02, 3.104e-01) * s3[y+0][x+0];
	r += M4(1.062e-01, 1.216e-02, -5.424e-02, -8.656e-02, 1.027e-01, 6.939e-02, 6.748e-02, 2.458e-01, 3.037e-01, -1.492e-02, 3.089e-01, -2.660e-01, -4.061e-02, -1.175e-01, 3.213e-02, 1.571e-01) * s3[y+0][x+1];
	r += M4(9.609e-02, 3.423e-02, -1.291e-01, 2.682e-03, 5.566e-02, 9.166e-03, 4.578e-02, 1.819e-03, 1.216e-01, -1.764e-01, 1.240e-01, -1.960e-01, 2.187e-02, -1.036e-01, 9.310e-02, -2.148e-01) * s3[y+0][x+2];
	r += M4(-2.504e-03, -4.709e-02, -1.990e-02, -4.185e-02, 1.554e-03, 1.074e-01, 1.313e-01, -1.742e-01, 8.273e-02, -2.645e-02, -2.613e-01, -7.937e-02, -4.984e-02, -6.409e-01, 1.034e-01, -3.450e-02) * s3[y+1][x+0];
	r += M4(2.673e-01, -2.998e-01, 1.699e-01, 5.006e-03, -2.188e-01, -4.200e-02, -3.861e-02, 9.157e-02, -3.091e-01, -2.653e-01, -8.061e-02, -1.426e-01, 6.692e-01, -2.238e-01, -6.958e-04, -4.296e-01) * s3[y+1][x+1];
	r += M4(1.009e-02, 3.599e-02, 1.483e-01, -2.253e-01, 9.948e-02, 6.952e-02, -7.110e-02, -2.564e-02, -1.208e-01, -1.956e-01, 9.827e-02, -8.769e-02, 5.010e-02, -8.118e-02, -2.974e-01, 7.243e-02) * s3[y+1][x+2];
	r += M4(8.515e-02, 6.665e-02, 1.703e-01, -1.243e-01, 3.888e-02, 2.838e-02, 1.224e-01, -9.205e-02, -2.268e-02, 8.390e-02, -1.279e-01, 4.763e-02, -1.934e-01, -2.425e-01, 2.880e-02, 1.388e-01) * s3[y+2][x+0];
	r += M4(6.876e-02, 1.249e-01, 1.215e-01, -5.548e-03, -8.104e-02, -1.569e-02, -2.563e-01, 3.921e-02, 5.340e-02, -7.797e-02, 6.860e-02, 4.044e-02, -4.204e-01, -1.359e-01, 3.118e-01, -1.796e-01) * s3[y+2][x+1];
	r += M4(7.028e-02, 5.536e-02, 5.792e-02, 2.439e-02, 2.712e-02, 3.907e-02, -1.462e-01, 1.828e-02, 6.806e-02, 3.128e-02, 1.889e-01, 1.940e-02, 1.863e-01, -1.213e-01, -1.375e-01, -1.760e-01) * s3[y+2][x+2];
	r += V4(-1.865e-01, -5.969e-02, -3.786e-02, 1.231e-01);
	return vec4(r);
}
vec4 f1(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-7.826e-02, -1.490e-01, -2.100e-01, 1.529e-01, 2.807e-01, 7.588e-02, -9.593e-02, -1.247e-02, 2.369e-01, -5.770e-02, -2.105e-03, -2.402e-02, 3.151e-03, -1.210e-01, 1.200e-01, -5.758e-02) * s0[y+0][x+0];
	r += M4(9.312e-02, 1.900e-01, -1.505e-01, -4.689e-03, -3.118e-01, 9.026e-02, 1.695e-01, -1.213e-01, 2.168e-01, 3.175e-02, 8.249e-02, -1.539e-01, -1.525e-01, -3.654e-02, 4.107e-02, 1.468e-01) * s0[y+0][x+1];
	r += M4(-3.018e-01, 1.813e-01, -2.230e-01, 1.056e-01, 1.961e-01, -8.832e-02, -1.186e-01, 3.301e-02, 1.167e-01, -7.372e-02, -1.611e-01, -1.189e-01, 1.075e-01, 2.368e-02, 7.560e-02, 4.448e-02) * s0[y+0][x+2];
	r += M4(1.131e-01, 2.231e-02, 1.557e-01, -1.560e-01, 1.845e-01, -1.998e-01, 2.373e-01, -4.570e-01, 1.038e-01, 5.062e-02, -6.632e-02, -3.699e-02, -8.247e-02, -4.255e-02, 2.609e-02, -3.000e-02) * s0[y+1][x+0];
	r += M4(1.418e-02, -1.204e-01, 1.358e-01, 1.139e-01, -2.972e-01, -3.682e-01, -2.119e-01, -3.151e-01, 5.214e-02, 1.933e-01, 2.095e-01, -3.100e-01, -1.721e-03, 2.223e-01, -1.912e-01, -2.706e-01) * s0[y+1][x+1];
	r += M4(-1.881e-01, 1.094e-01, -3.058e-01, -1.475e-02, 1.683e-01, -5.713e-02, -3.356e-01, 3.734e-03, 1.543e-02, 1.995e-01, 1.917e-01, -1.648e-01, 2.467e-02, 1.699e-01, -8.789e-02, -3.654e-02) * s0[y+1][x+2];
	r += M4(-2.582e-02, -7.103e-02, -1.508e-01, -2.289e-02, 1.675e-01, 3.486e-02, 2.223e-01, -3.575e-01, -2.313e-02, -1.998e-02, -3.667e-02, 3.839e-02, 1.562e-01, -1.549e-01, -1.811e-01, -1.142e-02) * s0[y+2][x+0];
	r += M4(1.753e-02, -3.046e-02, 3.618e-02, 2.858e-02, -1.481e-01, -5.857e-02, -2.866e-01, -5.965e-01, -8.396e-03, 6.070e-02, 9.971e-02, -7.203e-02, 7.385e-02, -4.912e-02, 2.372e-01, 6.453e-02) * s0[y+2][x+1];
	r += M4(-1.637e-02, -1.428e-01, 1.402e-01, 3.780e-02, 3.864e-02, 3.285e-02, -7.840e-02, -5.301e-02, 6.778e-03, 3.056e-02, -4.339e-02, 1.446e-01, 1.676e-01, -5.764e-02, 7.844e-02, -1.231e-01) * s0[y+2][x+2];
	r += M4(7.426e-03, -3.424e-02, 3.214e-02, -5.138e-02, 7.008e-02, 1.583e-02, -8.057e-02, 2.768e-02, 2.059e-02, 9.187e-03, -8.767e-02, -9.574e-02, -1.875e-03, -2.848e-02, 1.579e-01, 5.899e-02) * s1[y+0][x+0];
	r += M4(-7.920e-02, -3.959e-02, 1.387e-01, -2.410e-02, -6.250e-02, 9.494e-02, 4.240e-03, -2.413e-03, 9.297e-03, 2.537e-02, -1.147e-01, 5.174e-02, -1.106e-01, -3.403e-03, -5.401e-03, -8.270e-03) * s1[y+0][x+1];
	r += M4(-7.861e-02, 2.004e-01, 1.800e-01, -7.708e-03, 8.157e-02, -4.328e-03, 4.360e-02, 1.188e-01, 6.426e-02, -7.790e-02, 1.097e-01, 8.457e-02, 2.940e-02, -5.039e-02, -2.018e-02, 2.439e-02) * s1[y+0][x+2];
	r += M4(1.063e-02, 3.632e-02, -2.371e-02, 1.032e-01, 1.265e-01, -1.171e-01, 1.740e-01, -1.057e-01, -5.347e-02, 7.888e-02, 1.412e-02, 1.231e-01, 1.621e-03, -1.274e-01, 3.858e-03, -1.472e-01) * s1[y+1][x+0];
	r += M4(1.338e-01, -6.545e-02, -1.978e-01, -1.938e-02, 4.083e-03, -1.267e-03, -1.926e-01, -3.837e-01, -1.621e-01, 1.772e-01, 1.728e-01, 1.108e-01, -1.080e-01, 1.057e-01, -3.183e-01, -5.416e-03) * s1[y+1][x+1];
	r += M4(-4.732e-02, 2.371e-01, 3.552e-02, -1.542e-01, -1.189e-02, -1.896e-01, 2.525e-02, -1.004e-01, 2.199e-02, 2.172e-01, -2.095e-01, 7.878e-03, 6.909e-02, -3.655e-02, -6.331e-02, -2.905e-02) * s1[y+1][x+2];
	r += M4(-1.318e-02, 3.971e-02, 4.456e-02, -2.081e-02, -4.129e-02, -9.995e-02, -1.022e-01, -2.970e-02, -8.329e-02, -3.520e-02, -1.045e-01, 1.897e-02, 8.036e-02, -2.468e-01, -8.818e-02, 4.966e-02) * s1[y+2][x+0];
	r += M4(-3.027e-02, 4.564e-02, 1.111e-01, 1.133e-01, -7.229e-02, 1.960e-01, 1.349e-01, -4.637e-01, -2.240e-02, 3.084e-02, 1.513e-01, -1.303e-02, 5.064e-02, -1.411e-01, 2.901e-02, 5.541e-02) * s1[y+2][x+1];
	r += M4(1.928e-02, 1.453e-01, 7.936e-02, 7.437e-02, -6.476e-02, -1.029e-01, 5.237e-02, 2.309e-02, 7.486e-02, 6.790e-02, -9.254e-02, 2.235e-01, 2.545e-01, -1.759e-02, 2.600e-02, -1.447e-01) * s1[y+2][x+2];
	r += M4(1.913e-01, -1.149e-01, 5.890e-02, -1.233e-01, -1.232e-02, -3.576e-03, -2.282e-01, -1.732e-01, -1.297e-02, 4.999e-02, 3.951e-02, -1.106e-01, -4.684e-02, 7.781e-02, 2.314e-02, 8.122e-02) * s2[y+0][x+0];
	r += M4(-3.237e-02, 2.990e-01, -7.567e-02, 4.283e-03, -1.852e-01, 1.935e-01, -3.308e-01, -1.905e-01, -3.794e-01, 6.350e-02, -1.023e-01, -5.400e-02, -5.155e-02, -1.451e-02, 7.000e-02, 3.682e-01) * s2[y+0][x+1];
	r += M4(-5.642e-02, 1.176e-01, -2.766e-02, 2.625e-01, 1.669e-01, 1.320e-01, 2.642e-01, -4.178e-03, 3.130e-02, 3.639e-02, -9.051e-02, -4.772e-02, -4.336e-02, -6.534e-02, -9.209e-02, 2.478e-02) * s2[y+0][x+2];
	r += M4(-4.956e-02, 4.770e-02, 1.591e-01, -8.624e-02, 2.343e-01, 2.523e-01, 1.640e-01, -2.051e-01, -1.456e-01, -6.899e-02, -2.838e-01, -5.842e-02, 2.292e-02, 2.285e-02, 5.705e-02, 2.098e-01) * s2[y+1][x+0];
	r += M4(1.914e-01, 1.504e-01, 1.022e-02, -1.833e-01, 2.278e-01, -8.699e-02, 1.626e-01, 1.801e-01, -1.093e-01, -7.864e-02, 3.767e-02, 3.074e-01, -1.274e-01, 9.366e-02, -2.806e-01, -9.243e-02) * s2[y+1][x+1];
	r += M4(-9.503e-02, 5.195e-02, -1.210e-02, 5.122e-03, 1.189e-01, 2.048e-01, 1.424e-01, -9.514e-02, 1.162e-01, -1.075e-01, 2.414e-01, -5.330e-02, -8.944e-02, 1.489e-01, 8.478e-02, -1.877e-01) * s2[y+1][x+2];
	r += M4(-5.417e-02, 2.053e-01, -2.362e-01, -1.440e-01, 8.906e-02, 1.718e-01, 3.079e-01, -1.112e-01, 1.960e-02, -1.521e-01, 1.555e-01, -2.350e-02, -7.378e-03, 1.994e-02, -2.200e-01, -1.542e-01) * s2[y+2][x+0];
	r += M4(2.644e-03, 3.866e-02, 4.993e-02, 5.901e-02, 2.873e-02, 1.998e-02, 1.036e-01, 1.202e-01, -1.673e-01, 2.668e-02, -1.813e-01, -9.334e-03, 5.358e-02, 1.070e-03, 1.918e-02, -8.093e-02) * s2[y+2][x+1];
	r += M4(-2.254e-01, 1.050e-01, 4.281e-02, 3.106e-01, -5.322e-02, -2.348e-02, 1.313e-01, -6.284e-02, 1.445e-01, -9.078e-02, -7.381e-03, -6.027e-03, 5.300e-02, -1.282e-02, 7.410e-02, -1.843e-01) * s2[y+2][x+2];
	r += M4(1.367e-01, -9.912e-02, 1.215e-01, -1.126e-01, -1.616e-01, 8.838e-02, 2.636e-02, 1.417e-02, -7.318e-02, 1.047e-01, 6.564e-01, 1.355e-01, -1.457e-01, -4.058e-01, -1.355e-01, -1.366e-02) * s3[y+0][x+0];
	r += M4(4.009e-03, 2.904e-01, -3.353e-02, 6.727e-02, -2.829e-01, -2.647e-03, -3.350e-01, -3.677e-02, 1.391e-01, 3.461e-01, 1.463e-01, -2.549e-01, -5.093e-03, -1.462e-01, 4.573e-01, 2.611e-01) * s3[y+0][x+1];
	r += M4(1.198e-01, 5.727e-02, 7.997e-02, 1.587e-01, 8.015e-02, -3.524e-02, -4.717e-02, 1.125e-01, 7.155e-02, 1.717e-01, -1.273e-01, -1.315e-02, 1.113e-01, -2.509e-01, -5.478e-01, 3.712e-01) * s3[y+0][x+2];
	r += M4(-5.924e-02, 1.428e-01, 1.706e-01, -1.158e-01, 1.049e-01, 1.433e-01, -1.780e-01, -9.857e-04, -9.203e-02, 3.252e-01, -1.871e-01, 1.983e-01, -4.199e-01, -1.007e-02, 1.961e-01, 2.250e-01) * s3[y+1][x+0];
	r += M4(-3.115e-01, 3.632e-01, 9.285e-02, 1.904e-01, 9.029e-02, -3.721e-03, 2.635e-01, -1.262e-02, 1.777e-01, -2.807e-01, 2.530e-01, 9.410e-03, -8.186e-01, 8.489e-01, 1.529e-03, -4.270e-01) * s3[y+1][x+1];
	r += M4(-1.187e-01, -2.185e-01, -1.487e-01, -4.553e-02, -6.567e-02, -2.005e-01, 2.755e-02, -9.727e-02, -2.846e-02, 6.402e-02, 2.944e-01, -1.917e-02, -3.602e-01, -7.407e-02, -2.087e-01, -1.399e-01) * s3[y+1][x+2];
	r += M4(-2.360e-02, 2.305e-01, -2.979e-01, -9.250e-02, -8.196e-03, 7.609e-03, 1.579e-01, 3.230e-02, 9.450e-02, -6.748e-03, -1.684e-02, 7.713e-02, -1.997e-01, 5.527e-02, -3.023e-01, -1.932e-01) * s3[y+2][x+0];
	r += M4(1.239e-01, -2.447e-02, -1.499e-03, -7.994e-02, 1.009e-02, -1.620e-01, -1.279e-01, 1.598e-01, -8.029e-02, 4.101e-03, -1.909e-01, -5.016e-02, -5.292e-01, 3.019e-01, -6.086e-01, -4.254e-01) * s3[y+2][x+1];
	r += M4(-2.300e-01, 1.226e-01, 8.688e-03, 2.096e-01, 1.607e-02, -7.349e-02, -4.534e-02, -1.263e-01, 6.211e-02, 1.666e-01, 1.944e-02, 1.606e-01, -1.931e-01, -1.124e-01, 2.764e-01, -3.670e-01) * s3[y+2][x+2];
	r += V4(-8.503e-02, -2.969e-02, 7.957e-02, -7.516e-03);
	return vec4(r);
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv1_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
			s2[ay][ax] = l1(x - 1, y - 1);
			s1[ay][ax] = -max(-s0[ay][ax], V4(0.0));
			s0[ay][ax] = max(s0[ay][ax], V4(0.0));
			s3[ay][ax] = -max(-s2[ay][ax], V4(0.0));
			s2[ay][ax] = max(s2[ay][ax], V4(0.0));
		}
	}
	barrier();
	vec4 r0 = f0(xy.x, xy.y);
	vec4 r1 = f1(xy.x, xy.y);
	imageStore(out_image, opos + ivec2(0, 0), r0);
	imageStore(out_image, opos + ivec2(1, 0), r1);
}


//!DESC CuNNy-6x8C-DS-conv3
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv2
//!BIND LUMA
//!SAVE conv3
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
	#define V4 f16vec4
	#define M4 f16mat4
	#define F float16_t
#else
	#define V4 vec4
	#define M4 mat4
	#define F float
#endif
#define l0(x, y) V4(texelFetch(conv2_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv2_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 s0[10][10];
shared V4 s1[10][10];
shared V4 s2[10][10];
shared V4 s3[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-3.578e-02, -3.065e-02, 1.167e-02, 7.039e-02, 8.413e-02, 5.097e-02, 3.557e-02, 5.618e-02, 5.725e-02, -5.354e-02, 4.574e-02, -7.161e-02, 2.124e-02, 6.428e-03, 1.088e-02, -1.026e-01) * s0[y+0][x+0];
	r += M4(2.842e-01, 6.811e-02, 2.272e-01, -1.889e-01, 1.844e-01, 9.123e-02, 6.162e-02, -2.333e-01, -6.899e-02, 5.264e-02, 1.083e-02, 6.861e-02, 9.300e-02, -3.014e-02, 7.692e-03, 2.945e-02) * s0[y+0][x+1];
	r += M4(1.206e-01, -3.195e-02, -2.827e-03, -4.882e-01, 4.713e-02, -5.773e-02, 5.524e-02, -1.597e-01, 1.757e-02, 1.392e-01, 1.049e-02, 1.921e-03, 7.277e-02, -4.135e-02, -1.081e-01, -1.873e-03) * s0[y+0][x+2];
	r += M4(5.621e-02, 2.103e-01, -1.095e-02, 3.578e-01, -1.217e-01, 1.020e-01, 8.526e-02, 9.439e-02, -8.204e-02, 8.170e-02, -7.805e-02, 7.395e-03, -1.958e-01, 2.877e-01, 5.652e-02, 1.792e-01) * s0[y+1][x+0];
	r += M4(-6.575e-02, -8.285e-02, -2.253e-01, 2.837e-01, -1.903e-01, 6.404e-03, -2.011e-01, 4.368e-02, 1.007e-01, 6.343e-02, 1.372e-01, 1.076e-01, 1.650e-02, 3.238e-02, 8.936e-02, 8.355e-02) * s0[y+1][x+1];
	r += M4(-7.347e-02, -1.187e-01, -5.581e-02, -3.277e-01, 4.137e-02, -3.112e-02, -8.892e-02, -1.699e-01, -1.360e-01, -8.062e-02, 4.954e-03, 2.209e-02, -6.591e-02, 1.725e-01, -2.521e-02, 9.341e-02) * s0[y+1][x+2];
	r += M4(3.177e-01, -1.507e-03, 2.620e-01, -2.054e-01, 1.392e-01, -3.183e-02, -3.240e-03, 3.783e-02, -1.079e-03, 6.565e-02, -2.109e-02, -3.966e-02, 2.202e-01, 6.519e-02, 2.608e-01, 1.318e-01) * s0[y+2][x+0];
	r += M4(-2.426e-02, -1.011e-01, 2.578e-01, -2.702e-01, -3.092e-02, 1.233e-01, -3.009e-02, -2.076e-01, 7.495e-02, -5.631e-02, 6.158e-02, -8.922e-02, -6.412e-02, 9.330e-02, 4.768e-01, 1.323e-01) * s0[y+2][x+1];
	r += M4(3.250e-02, 1.599e-01, -4.981e-02, -1.090e-01, 1.375e-01, 5.298e-03, -3.297e-03, -1.490e-01, -1.654e-02, -3.786e-02, 3.558e-02, -1.804e-02, -1.887e-01, 4.917e-02, 9.934e-02, -5.807e-02) * s0[y+2][x+2];
	r += M4(-4.079e-02, 8.497e-03, -3.356e-02, 3.028e-02, -5.250e-02, 1.145e-01, 4.672e-02, 7.515e-02, 2.341e-01, -3.702e-01, 7.761e-02, -1.462e-01, 7.607e-02, -2.811e-03, 3.730e-02, -1.183e-01) * s1[y+0][x+0];
	r += M4(9.204e-02, 6.567e-02, 9.173e-02, -1.272e-01, 5.315e-02, 1.160e-01, 6.902e-02, -1.213e-01, 4.909e-03, -1.161e+00, 8.745e-02, -1.516e-01, -5.317e-02, -1.373e-02, 1.416e-01, 3.404e-02) * s1[y+0][x+1];
	r += M4(4.046e-02, -1.466e-01, -7.969e-02, -1.043e-01, 1.499e-01, -1.573e-01, 1.378e-01, -2.645e-02, 2.078e-01, -6.067e-01, -1.188e-01, 1.332e-01, 7.678e-02, -3.162e-02, -2.667e-02, -1.199e-01) * s1[y+0][x+2];
	r += M4(-3.225e-02, 8.700e-02, 1.499e-01, 1.283e-01, -1.061e-01, 3.232e-01, 7.794e-02, 4.862e-02, -8.160e-02, -3.049e-01, -1.878e-01, 7.006e-02, -9.156e-02, 4.326e-02, -6.842e-03, -7.256e-02) * s1[y+1][x+0];
	r += M4(1.323e-01, -4.799e-03, -2.650e-01, 1.984e-01, -5.439e-02, -1.008e-01, 3.735e-02, -6.962e-02, -8.340e-02, -6.015e-01, -1.773e-01, 1.094e-01, 1.531e-01, -1.192e-01, -4.256e-03, -1.116e-01) * s1[y+1][x+1];
	r += M4(-1.479e-01, -1.588e-01, 4.929e-02, 3.813e-02, 4.567e-02, 1.825e-01, -1.786e-01, -8.375e-02, -9.626e-02, -4.325e-01, -8.609e-02, 7.006e-02, 3.257e-02, -4.456e-02, -1.455e-01, 1.508e-01) * s1[y+1][x+2];
	r += M4(8.955e-02, -3.366e-02, -2.534e-02, -3.507e-02, -9.601e-02, -1.335e-01, 1.011e-01, 2.496e-02, -2.747e-02, -4.225e-01, 2.024e-01, -5.732e-02, 1.707e-01, -3.276e-03, -1.114e-02, -9.433e-03) * s1[y+2][x+0];
	r += M4(-1.417e-01, -6.962e-02, 2.332e-01, 5.112e-02, -2.609e-01, -7.939e-02, -1.127e-01, -4.581e-01, -1.812e-01, -2.972e-01, -6.086e-02, 9.256e-03, -5.174e-02, 2.534e-02, 1.949e-01, -7.034e-02) * s1[y+2][x+1];
	r += M4(-2.751e-02, 2.026e-01, -1.203e-02, 5.988e-02, -3.424e-02, -2.056e-03, 1.966e-01, 1.109e-02, -1.142e-01, -1.750e-01, -1.184e-01, 2.450e-02, -1.665e-01, -1.629e-01, 1.672e-01, 6.024e-02) * s1[y+2][x+2];
	r += M4(-3.144e-02, -3.124e-01, -4.273e-02, -5.840e-01, -1.966e-01, 2.192e-02, -4.629e-02, 1.199e-01, -4.901e-03, -7.059e-02, -1.712e-02, 1.258e-01, 5.335e-02, -1.111e-03, 5.966e-02, -1.208e-01) * s2[y+0][x+0];
	r += M4(-2.739e-01, -7.665e-02, -1.605e-01, -6.176e-01, -9.562e-02, 8.282e-02, 7.464e-04, -1.403e-02, -1.401e-01, -7.662e-02, 3.654e-02, 7.672e-02, -1.427e-01, -2.544e-02, -1.151e-01, -2.790e-02) * s2[y+0][x+1];
	r += M4(-5.633e-02, 3.886e-01, -3.714e-01, 1.692e-02, -1.740e-02, 1.046e-01, 1.747e-02, 6.202e-02, 3.686e-02, -4.510e-02, -5.488e-02, 1.874e-01, 1.143e-01, -4.900e-02, -5.333e-02, -2.626e-03) * s2[y+0][x+2];
	r += M4(-6.043e-02, 1.236e-01, -1.532e-01, -3.450e-01, 3.659e-02, 4.813e-02, -1.257e-02, 1.859e-01, 8.360e-02, -5.323e-02, 1.462e-01, 1.412e-01, 1.086e-01, -5.933e-03, -1.140e-03, -1.538e-01) * s2[y+1][x+0];
	r += M4(-1.087e+00, 1.126e+00, 2.924e-02, -7.230e-01, 1.594e-02, -1.235e-01, -2.368e-01, -5.700e-02, -1.405e-01, 3.199e-01, 9.936e-02, 1.517e-01, -2.396e-01, 2.052e-01, 7.317e-02, 9.237e-02) * s2[y+1][x+1];
	r += M4(-2.086e-02, 4.934e-01, -1.373e-01, -3.092e-02, 1.042e-01, 1.084e-01, -3.723e-02, -1.139e-02, -1.236e-01, -6.244e-02, -2.000e-02, 1.045e-01, 1.382e-01, 3.034e-02, -2.578e-02, 1.311e-01) * s2[y+1][x+2];
	r += M4(-3.543e-01, 2.774e-02, -2.475e-01, -2.221e-02, 6.074e-02, -3.477e-02, 1.688e-01, 1.031e-02, -9.319e-02, 8.246e-03, -2.700e-02, 1.168e-01, -2.783e-01, -1.441e-01, 4.659e-02, 3.404e-01) * s2[y+2][x+0];
	r += M4(6.405e-01, 5.268e-01, -7.371e-01, 5.345e-02, -1.141e-01, 7.488e-02, 6.848e-02, -1.247e-02, -6.042e-02, 1.584e-01, 3.407e-02, 1.060e-01, 1.353e-01, 1.127e-01, -3.559e-01, 2.586e-01) * s2[y+2][x+1];
	r += M4(1.064e-01, -2.027e-01, -2.163e-01, 2.230e-02, 1.349e-01, -1.509e-02, -7.399e-02, -5.720e-02, 7.146e-02, -1.814e-02, -2.971e-02, 3.371e-02, -8.030e-02, 2.429e-02, 7.816e-03, 1.437e-01) * s2[y+2][x+2];
	r += M4(-1.257e-02, -1.210e-01, 8.282e-03, -3.277e-02, -5.831e-02, 9.477e-02, -8.023e-02, 7.300e-02, 8.712e-03, -1.931e-02, -1.756e-04, 8.604e-02, 1.531e-01, -1.152e-01, 1.128e-01, -9.846e-02) * s3[y+0][x+0];
	r += M4(-1.497e-01, 3.019e-02, 4.717e-02, -1.727e-02, -8.609e-02, 9.937e-02, -6.277e-03, 1.284e-01, 3.083e-02, 5.012e-02, -3.394e-03, -9.850e-02, 2.472e-02, -8.482e-02, 1.180e-01, -2.368e-01) * s3[y+0][x+1];
	r += M4(1.329e-02, 1.759e-01, -3.095e-02, 2.378e-02, -5.639e-02, 1.668e-01, 2.604e-02, 1.279e-03, 1.299e-01, 1.136e-02, -7.306e-02, 1.094e-01, 2.116e-01, -1.011e-01, 1.006e-02, -2.059e-01) * s3[y+0][x+2];
	r += M4(9.376e-02, 1.553e-01, -4.420e-03, -2.867e-02, -1.275e-01, 4.910e-02, -6.546e-02, 4.206e-01, 9.925e-02, 1.366e-01, 1.675e-01, -6.613e-02, 2.681e-01, 4.828e-02, -1.299e-01, 2.376e-02) * s3[y+1][x+0];
	r += M4(-1.401e-01, 7.952e-02, 1.640e-01, -1.505e-01, 7.686e-02, -1.707e-01, -1.460e-01, 3.895e-02, -1.713e-01, 4.165e-01, -4.094e-02, 1.856e-01, -3.063e-02, 1.464e-01, 2.382e-01, -7.872e-02) * s3[y+1][x+1];
	r += M4(-5.606e-02, 4.616e-02, 1.077e-02, 1.830e-01, 1.944e-01, 1.751e-01, -1.019e-01, 4.400e-02, -5.311e-02, 3.732e-02, 1.053e-01, -1.672e-02, 3.055e-01, 2.578e-02, 2.588e-02, -9.894e-02) * s3[y+1][x+2];
	r += M4(-1.984e-01, 7.762e-02, -8.170e-02, 1.331e-01, 1.170e-01, 6.963e-02, 2.748e-01, 5.015e-02, -2.081e-02, 2.542e-02, 1.651e-02, 6.240e-02, -5.623e-02, 1.782e-01, -2.315e-01, 7.836e-02) * s3[y+2][x+0];
	r += M4(4.867e-01, 1.138e-01, -2.826e-01, 2.069e-02, 2.644e-02, 1.265e-01, 3.998e-03, -3.375e-04, 3.246e-02, 1.631e-01, 6.783e-02, 1.100e-01, 1.030e-01, 1.049e-02, -2.084e-01, 2.049e-02) * s3[y+2][x+1];
	r += M4(6.921e-02, -7.441e-02, -8.299e-02, 4.077e-02, 3.335e-02, -1.121e-01, 4.206e-02, 1.227e-01, 1.052e-01, -2.350e-02, 1.025e-01, -1.412e-01, 1.017e-01, 4.768e-02, -8.469e-02, -4.627e-02) * s3[y+2][x+2];
	r += V4(4.497e-02, 9.503e-03, -3.033e-02, -3.675e-02);
	return vec4(r);
}
vec4 f1(int x, int y) {
	V4 r = V4(0.0);
	r += M4(1.635e-01, -1.556e-01, -2.517e-01, 2.228e-02, -1.292e-02, -4.473e-02, 9.380e-02, 7.220e-02, 3.429e-02, 6.312e-02, 3.523e-02, -6.778e-03, 2.003e-02, -1.865e-03, 4.661e-02, 2.037e-02) * s0[y+0][x+0];
	r += M4(-3.295e-01, -1.857e-01, -2.684e-01, 1.443e-01, 5.995e-02, -6.518e-02, -5.928e-02, 1.660e-01, 5.326e-02, -5.067e-02, 7.349e-02, 5.680e-03, 1.283e-01, 1.118e-01, 1.130e-02, -8.317e-03) * s0[y+0][x+1];
	r += M4(8.740e-02, -1.366e-01, 4.795e-02, 8.990e-02, 1.595e-01, -3.474e-02, -2.839e-02, 4.016e-02, -5.344e-02, -1.324e-02, 1.015e-01, -3.467e-03, 2.724e-02, 1.735e-02, -9.757e-02, 2.958e-02) * s0[y+0][x+2];
	r += M4(-1.271e-01, -3.682e-01, -1.680e-01, 1.343e-01, 1.783e-01, -3.885e-02, -1.263e-01, -1.757e-02, 5.719e-02, 2.332e-02, 4.509e-02, 4.605e-02, -1.972e-01, -3.334e-03, 6.324e-02, 3.044e-01) * s0[y+1][x+0];
	r += M4(-3.170e-01, -3.154e-01, 5.168e-02, -2.939e-01, 1.720e-01, -7.784e-02, -8.183e-02, -4.237e-01, -8.297e-02, -1.223e-01, -1.438e-01, -7.854e-02, 1.744e-01, -1.350e-01, 1.392e-01, 1.519e-01) * s0[y+1][x+1];
	r += M4(3.580e-01, -2.335e-01, 1.469e-01, 6.854e-02, 2.956e-02, 1.171e-01, 5.720e-02, 7.744e-03, 1.174e-01, 1.369e-02, 2.493e-01, -4.548e-02, -5.969e-02, -6.707e-02, 1.514e-02, -6.961e-02) * s0[y+1][x+2];
	r += M4(-2.238e-04, -1.792e-01, -1.054e-01, 1.238e-01, -9.450e-02, -4.028e-02, 2.133e-02, 3.516e-02, -7.051e-02, -2.555e-02, 8.469e-02, -1.621e-02, -1.079e-01, -1.222e-01, 9.407e-02, -1.187e-02) * s0[y+2][x+0];
	r += M4(8.431e-01, -2.178e-01, 9.955e-02, 1.444e-01, -1.271e-01, -1.682e-02, 1.173e-01, -1.102e-02, 4.786e-02, 3.604e-02, 5.485e-02, -2.240e-02, 2.238e-01, 2.213e-01, 2.187e-01, 7.079e-02) * s0[y+2][x+1];
	r += M4(1.708e-02, -3.461e-01, 3.072e-01, -1.392e-02, -6.091e-03, 4.783e-02, 1.152e-01, -7.229e-03, -1.434e-02, -2.063e-02, 8.502e-02, 3.505e-03, -1.065e-01, 1.388e-02, 6.236e-02, -1.224e-02) * s0[y+2][x+2];
	r += M4(8.274e-02, -3.720e-02, -6.730e-02, 1.182e-01, 1.487e-01, 7.220e-02, 3.247e-01, -1.391e-01, 3.400e-01, 3.935e-02, -4.817e-01, 2.169e-01, -2.018e-02, -2.875e-02, -3.915e-02, 8.414e-02) * s1[y+0][x+0];
	r += M4(-9.992e-02, -9.798e-02, -1.107e-02, -4.425e-02, -6.672e-02, 6.122e-02, 2.925e-01, -1.179e-01, 6.726e-01, 1.487e-01, -1.041e+00, 5.140e-01, 6.776e-02, 2.356e-02, -4.071e-02, -4.783e-02) * s1[y+0][x+1];
	r += M4(-1.044e-02, -8.764e-02, 3.088e-02, -5.751e-02, 1.026e-01, 7.643e-02, 1.348e-01, -1.729e-01, 2.996e-01, -6.859e-02, -2.173e-01, 9.563e-02, -9.536e-02, 5.236e-02, -1.529e-01, 3.237e-02) * s1[y+0][x+2];
	r += M4(-1.850e-01, -4.125e-02, -7.389e-02, 2.882e-01, 7.907e-02, 2.929e-02, 3.715e-02, -2.078e-02, 1.194e-01, -2.287e-02, -3.998e-01, 4.259e-01, 6.679e-02, -2.175e-02, -8.282e-02, 8.485e-02) * s1[y+1][x+0];
	r += M4(1.899e-01, -7.070e-03, 1.969e-02, -2.230e-01, -1.100e-01, -5.170e-02, -2.514e-01, -2.740e-01, 2.847e-01, 5.150e-02, -1.007e+00, 1.930e-01, 5.938e-01, -2.739e-01, 7.416e-02, -3.419e-01) * s1[y+1][x+1];
	r += M4(2.110e-01, -2.446e-02, 7.694e-02, -1.588e-02, 1.609e-02, 1.441e-01, -1.126e-01, -3.941e-03, 5.067e-01, 7.431e-02, -9.236e-01, 4.528e-03, -9.731e-02, 1.718e-01, -2.401e-01, -3.545e-02) * s1[y+1][x+2];
	r += M4(1.094e-01, -1.343e-01, 2.794e-02, -1.021e-03, -1.753e-01, -7.444e-02, -8.355e-02, 4.718e-02, 1.135e-01, -4.864e-02, -5.481e-01, 3.115e-01, -3.886e-02, -7.519e-02, -7.934e-02, -3.429e-02) * s1[y+2][x+0];
	r += M4(2.059e-01, 8.121e-02, -2.852e-04, 3.688e-02, 7.241e-03, 7.347e-02, 1.548e-01, -6.789e-02, 3.587e-01, -7.180e-02, -3.042e-01, 1.003e-01, -7.024e-02, 1.076e-01, -4.629e-02, -2.435e-02) * s1[y+2][x+1];
	r += M4(-9.545e-02, -2.358e-01, 3.520e-02, 1.215e-02, -7.209e-02, 5.334e-02, -8.843e-02, -1.644e-01, 1.122e-01, 5.450e-02, -4.776e-01, 1.950e-01, -1.229e-01, 4.716e-02, -1.616e-01, 4.414e-02) * s1[y+2][x+2];
	r += M4(2.387e-02, 1.564e-03, -3.172e-01, 2.509e-02, -1.602e-01, -1.724e-01, 6.432e-02, 3.778e-02, 6.202e-02, -4.546e-02, 7.124e-02, -8.665e-02, -2.381e-02, -5.574e-02, -3.285e-02, -1.599e-02) * s2[y+0][x+0];
	r += M4(2.098e-01, -2.749e-01, -3.714e-02, 2.218e-01, -6.383e-02, -4.764e-02, 1.026e-02, -1.945e-02, 1.861e-02, -8.156e-02, 9.934e-02, 8.283e-02, -2.105e-02, -1.111e-02, 6.535e-02, 5.784e-02) * s2[y+0][x+1];
	r += M4(2.782e-01, -5.715e-02, 1.591e-01, 1.757e-01, -2.757e-02, -4.432e-03, 2.987e-03, -1.664e-03, 1.728e-02, -2.596e-02, -1.207e-01, -7.883e-03, 1.547e-02, 1.449e-02, -2.464e-02, 7.324e-03) * s2[y+0][x+2];
	r += M4(-3.027e-01, 6.657e-02, -1.792e-01, -1.700e-01, -2.097e-01, -7.220e-02, -2.260e-01, 1.869e-01, 2.436e-01, 4.450e-02, 5.035e-03, -1.420e-01, 1.167e-01, -1.011e-02, 1.739e-02, -6.082e-02) * s2[y+1][x+0];
	r += M4(-2.093e-01, 9.250e-02, 2.015e-02, -1.552e-01, -2.673e-01, -1.231e-01, 7.456e-02, -2.914e-01, 9.256e-02, 1.265e-01, 3.274e-01, 1.303e-01, 5.985e-02, 3.178e-02, -6.170e-02, 3.330e-01) * s2[y+1][x+1];
	r += M4(-7.861e-02, 2.584e-02, -1.324e-01, 1.276e-01, 1.427e-02, -3.388e-02, 1.779e-02, -5.762e-02, 6.085e-02, -3.534e-02, -1.269e-01, 1.883e-01, 1.306e-01, -1.030e-01, -1.606e-01, -3.512e-02) * s2[y+1][x+2];
	r += M4(1.035e-01, -9.492e-02, 8.836e-02, 1.321e-01, 3.965e-03, 1.840e-02, 5.270e-02, 7.983e-02, 8.452e-02, 1.012e-02, -6.493e-02, 9.967e-03, 2.251e-01, 1.453e-02, -4.537e-02, 1.294e-03) * s2[y+2][x+0];
	r += M4(4.600e-02, 6.052e-02, -2.181e-01, 1.982e-03, 4.068e-02, -1.574e-01, 1.480e-01, -2.567e-03, -9.581e-02, -5.988e-02, -3.007e-02, 1.284e-03, -1.427e-01, -2.282e-02, -1.652e-02, 6.109e-02) * s2[y+2][x+1];
	r += M4(-1.001e-01, -1.768e-01, -4.085e-01, 1.468e-02, 9.741e-02, 6.511e-02, 2.130e-02, 3.561e-02, 3.951e-02, -5.907e-03, 2.370e-02, 5.425e-02, -1.286e-02, -2.200e-02, -5.610e-02, -1.549e-02) * s2[y+2][x+2];
	r += M4(1.103e-01, 3.704e-03, -3.934e-03, 6.445e-03, -1.420e-01, -6.294e-02, 3.746e-02, 6.595e-02, -5.278e-02, 3.509e-02, 8.043e-02, -8.437e-03, 2.002e-01, -2.342e-02, 1.338e-02, -1.606e-01) * s3[y+0][x+0];
	r += M4(2.920e-02, -9.383e-04, 4.334e-02, 2.094e-02, -1.032e-01, -5.039e-02, 1.014e-01, -1.219e-01, -1.392e-01, 2.915e-02, 1.720e-01, 4.118e-02, 2.076e-01, 1.550e-02, -2.451e-01, 1.896e-01) * s3[y+0][x+1];
	r += M4(-8.127e-02, -5.702e-02, 1.208e-01, -9.211e-05, -1.121e-01, 5.241e-02, 1.208e-01, -9.006e-02, -3.140e-02, 4.459e-02, 1.128e-01, -3.398e-02, -5.304e-02, -8.044e-02, 2.449e-02, 1.606e-01) * s3[y+0][x+2];
	r += M4(3.944e-02, 1.018e-02, 3.792e-02, -7.155e-02, -1.193e-01, -2.251e-02, -1.186e-01, 1.628e-01, 1.445e-01, 1.077e-01, 7.726e-02, -2.467e-01, 1.084e-01, 4.245e-02, 1.241e-02, -2.350e-01) * s3[y+1][x+0];
	r += M4(-4.750e-02, 5.750e-02, 7.125e-02, 8.563e-02, 2.026e-01, -6.852e-01, -1.103e-01, -9.701e-02, -1.708e-01, 1.474e-01, 3.864e-01, 1.010e-01, 4.302e-01, 7.015e-02, 1.156e-02, 4.399e-01) * s3[y+1][x+1];
	r += M4(-8.445e-02, -1.011e-02, -7.167e-03, 3.699e-02, -1.112e-01, -6.996e-02, 1.344e-01, -2.056e-02, -1.003e-01, 1.109e-01, -7.378e-02, -2.264e-02, -6.867e-02, -1.291e-01, -1.460e-01, 2.465e-02) * s3[y+1][x+2];
	r += M4(1.540e-01, -1.067e-01, 1.555e-01, 7.833e-02, 1.082e-01, 6.213e-02, 7.314e-02, 1.605e-01, -7.666e-02, 6.117e-02, 2.640e-02, -5.866e-02, -7.016e-03, 5.143e-02, 1.537e-01, 7.115e-02) * s3[y+2][x+0];
	r += M4(-5.781e-02, 1.386e-01, -1.656e-02, 2.876e-02, -8.373e-02, -1.770e-01, 2.324e-01, 4.026e-02, -4.516e-02, 1.947e-02, -1.409e-01, 7.849e-02, -2.868e-01, -8.306e-02, -4.123e-01, 2.047e-02) * s3[y+2][x+1];
	r += M4(-1.362e-01, -1.101e-01, 2.060e-02, 2.219e-02, 3.911e-02, 2.676e-02, 1.434e-04, -6.016e-03, -1.299e-02, 5.507e-02, 1.548e-01, -9.698e-03, -9.569e-02, -3.101e-02, -1.513e-01, 3.064e-02) * s3[y+2][x+2];
	r += V4(1.052e-01, 1.730e-01, -8.023e-04, 3.626e-02);
	return vec4(r);
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv2_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
			s2[ay][ax] = l1(x - 1, y - 1);
			s1[ay][ax] = -max(-s0[ay][ax], V4(0.0));
			s0[ay][ax] = max(s0[ay][ax], V4(0.0));
			s3[ay][ax] = -max(-s2[ay][ax], V4(0.0));
			s2[ay][ax] = max(s2[ay][ax], V4(0.0));
		}
	}
	barrier();
	vec4 r0 = f0(xy.x, xy.y);
	vec4 r1 = f1(xy.x, xy.y);
	imageStore(out_image, opos + ivec2(0, 0), r0);
	imageStore(out_image, opos + ivec2(1, 0), r1);
}


//!DESC CuNNy-6x8C-DS-conv4
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv3
//!BIND LUMA
//!SAVE conv4
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
	#define V4 f16vec4
	#define M4 f16mat4
	#define F float16_t
#else
	#define V4 vec4
	#define M4 mat4
	#define F float
#endif
#define l0(x, y) V4(texelFetch(conv3_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv3_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 s0[10][10];
shared V4 s1[10][10];
shared V4 s2[10][10];
shared V4 s3[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += M4(2.149e-02, -3.034e-02, 8.157e-03, 3.707e-02, -6.663e-02, 1.379e-01, 3.335e-02, -9.705e-02, -1.263e-01, 1.486e-01, -1.246e-02, -1.049e-01, 1.513e-02, -4.891e-02, -4.001e-02, 5.422e-03) * s0[y+0][x+0];
	r += M4(1.028e-01, 5.103e-02, 2.843e-01, -5.451e-03, -1.145e-01, 3.219e-02, -7.592e-02, 4.416e-02, 8.861e-03, -9.996e-02, -1.229e-01, -5.273e-02, -2.699e-02, -2.387e-01, 1.480e-01, 8.911e-02) * s0[y+0][x+1];
	r += M4(4.258e-02, -1.371e-01, -1.891e-02, 9.263e-02, -5.681e-03, -1.164e-01, 1.635e-03, -3.606e-02, -2.492e-03, -9.399e-02, 8.515e-02, 3.000e-02, 3.078e-02, 2.954e-02, -9.005e-02, -5.467e-02) * s0[y+0][x+2];
	r += M4(-2.986e-03, -5.074e-02, -5.158e-03, 5.338e-02, 3.644e-02, -1.497e-02, 8.095e-02, 9.397e-02, 2.207e-02, 1.067e-01, 1.421e-01, 9.212e-02, -4.521e-02, 8.322e-04, 9.991e-02, 1.211e-01) * s0[y+1][x+0];
	r += M4(1.008e-01, -9.797e-02, 3.037e-01, 3.387e-01, -2.878e-01, 1.643e-01, -7.695e-02, 1.177e-02, -1.411e-01, 9.142e-02, 6.478e-02, 9.276e-02, 9.988e-03, 1.431e-01, -2.698e-01, -2.366e-01) * s0[y+1][x+1];
	r += M4(3.151e-02, 1.715e-01, -5.992e-02, -2.835e-01, 2.719e-02, 4.495e-02, -4.167e-02, -3.121e-02, 6.815e-02, 4.167e-02, -6.775e-02, -8.582e-02, 1.446e-01, -1.389e-01, -4.958e-02, -1.101e-01) * s0[y+1][x+2];
	r += M4(1.246e-02, -1.136e-01, 1.609e-01, 6.344e-02, 7.429e-02, -3.651e-02, -1.956e-02, 4.255e-02, 3.388e-02, 3.783e-02, -6.602e-03, -4.256e-02, -4.537e-02, -5.962e-02, 1.116e-01, -1.597e-02) * s0[y+2][x+0];
	r += M4(2.057e-02, 7.296e-02, 1.729e-01, 1.840e-01, -3.531e-02, -1.542e-02, -7.538e-03, -4.936e-02, -4.566e-02, 5.174e-02, 1.253e-01, -3.095e-02, -6.942e-04, -4.655e-04, -2.294e-01, -5.018e-02) * s0[y+2][x+1];
	r += M4(-1.062e-02, 2.452e-01, -6.132e-02, 1.862e-02, 7.088e-03, 1.677e-03, 2.220e-02, 4.374e-02, 3.749e-02, 4.600e-02, 2.721e-02, 1.236e-02, -3.831e-02, -8.074e-02, 3.977e-02, 3.891e-02) * s0[y+2][x+2];
	r += M4(1.631e-02, -1.864e-01, 1.152e-01, 8.383e-02, 1.986e-02, 2.537e-01, -7.631e-02, -1.094e-01, -7.669e-02, -3.181e-03, -1.275e-01, 1.516e-02, -5.622e-02, -8.209e-03, -1.687e-02, -1.230e-03) * s1[y+0][x+0];
	r += M4(5.914e-02, -2.120e-01, 1.661e-01, -1.301e-02, 3.263e-02, 1.526e-01, 4.194e-02, -7.916e-02, 1.819e-01, -2.994e-02, -3.332e-01, -2.575e-01, 7.255e-02, -9.825e-02, 4.235e-02, 1.452e-02) * s1[y+0][x+1];
	r += M4(4.826e-02, -1.411e-01, 1.593e-02, -4.316e-02, -9.087e-03, 5.668e-02, -2.159e-01, -2.220e-01, 2.765e-01, -2.325e-01, 1.128e-01, 3.762e-02, 6.241e-02, 9.474e-02, -1.274e-02, 1.257e-02) * s1[y+0][x+2];
	r += M4(-1.039e-02, 2.729e-02, -1.623e-01, -1.112e-01, 1.461e-01, 1.648e-01, 2.424e-01, -5.578e-02, -1.461e-02, -2.458e-02, 3.298e-02, 3.550e-02, 4.015e-02, 8.568e-02, 5.442e-02, -7.738e-02) * s1[y+1][x+0];
	r += M4(2.979e-02, -7.167e-02, 1.231e-01, 6.616e-02, -2.176e-01, 7.047e-01, 2.113e-01, -1.255e-01, -1.200e-01, -7.250e-02, -1.568e-01, 1.809e-01, 1.538e-01, 2.532e-01, -7.438e-02, 2.279e-01) * s1[y+1][x+1];
	r += M4(1.110e-01, -6.084e-02, -9.297e-02, -2.052e-01, 2.633e-01, -1.342e-01, -9.952e-02, -8.625e-03, 1.515e-02, -2.638e-03, -9.514e-02, -4.375e-02, 9.788e-02, 3.094e-01, 1.440e-02, 1.843e-01) * s1[y+1][x+2];
	r += M4(7.272e-02, -4.968e-02, 7.884e-02, -1.133e-02, 1.305e-01, -7.177e-02, 2.775e-01, -4.298e-02, -3.116e-02, 7.612e-03, -4.009e-02, 7.942e-03, 1.914e-02, 9.318e-03, -4.682e-02, 1.979e-02) * s1[y+2][x+0];
	r += M4(1.890e-02, 4.134e-03, 7.027e-02, 8.521e-02, -1.277e-01, 3.235e-01, 2.293e-02, -1.608e-01, -4.527e-02, -2.528e-02, 1.033e-01, -1.146e-03, 8.303e-04, 2.778e-02, 8.630e-02, -2.141e-02) * s1[y+2][x+1];
	r += M4(-1.094e-02, 4.330e-02, 1.030e-02, 7.220e-02, -9.350e-02, 3.125e-01, 2.912e-02, 2.824e-01, 1.596e-02, 3.310e-02, 1.037e-02, 4.976e-02, -4.851e-02, 3.578e-02, 3.875e-02, -2.477e-02) * s1[y+2][x+2];
	r += M4(4.430e-02, -2.609e-02, -7.294e-02, 3.962e-02, -8.425e-02, -9.547e-03, -3.171e-02, 2.950e-02, -3.898e-02, -1.859e-01, -9.783e-03, -1.577e-01, 4.808e-02, 2.564e-02, -1.877e-02, 9.352e-03) * s2[y+0][x+0];
	r += M4(1.126e-01, -1.704e-03, 2.373e-02, 3.778e-02, -2.993e-02, -7.859e-02, 1.124e-01, -1.234e-01, 3.968e-02, -2.038e-01, -7.550e-03, -2.827e-01, -9.124e-02, 1.607e-02, 6.263e-02, 1.804e-01) * s2[y+0][x+1];
	r += M4(-4.418e-03, -1.998e-02, -1.044e-01, -1.270e-02, -4.578e-02, -5.075e-02, -6.585e-02, -9.356e-02, -3.184e-03, 3.198e-02, -1.269e-02, -1.354e-01, 6.119e-02, -7.930e-02, 4.803e-02, 2.476e-02) * s2[y+0][x+2];
	r += M4(1.164e-01, -1.234e-01, 7.178e-02, 4.015e-02, 2.374e-02, 8.794e-02, -1.612e-02, 6.978e-03, 4.617e-02, -9.337e-02, -1.695e-01, -1.259e-01, 8.771e-02, -1.275e-01, 1.652e-01, 2.809e-02) * s2[y+1][x+0];
	r += M4(-1.242e-01, 2.621e-01, 1.299e-01, 3.508e-01, 4.689e-01, 7.046e-02, -6.135e-02, 4.287e-02, 1.520e-02, 8.325e-02, -6.238e-02, 1.470e-01, -4.199e-01, 1.565e-01, 4.521e-01, 1.792e-01) * s2[y+1][x+1];
	r += M4(7.252e-02, 2.212e-02, -8.899e-02, -2.867e-02, -6.753e-02, -8.512e-03, 3.419e-02, 4.304e-02, 3.625e-02, 6.034e-03, 3.206e-02, 5.823e-03, -2.037e-01, 2.228e-01, -2.123e-02, -1.440e-01) * s2[y+1][x+2];
	r += M4(1.353e-02, -1.023e-01, -1.197e-02, 2.120e-02, -9.840e-02, -2.586e-02, 5.773e-02, 6.694e-02, 1.407e-02, 3.084e-02, -4.939e-02, -2.419e-02, -5.414e-02, 7.004e-02, 1.946e-02, 3.124e-02) * s2[y+2][x+0];
	r += M4(-1.255e-01, -7.881e-02, 1.008e-01, 8.617e-02, -3.767e-02, 9.406e-03, -2.188e-03, 1.214e-01, -4.322e-02, -8.943e-02, -1.118e-02, -6.208e-02, 3.096e-02, -1.562e-01, -2.929e-02, -1.164e-01) * s2[y+2][x+1];
	r += M4(1.037e-01, 1.211e-02, -7.213e-03, -5.067e-02, -6.691e-02, -4.924e-03, -4.303e-02, -4.428e-02, -4.714e-02, -2.977e-02, 1.352e-02, 6.286e-02, 9.062e-02, -3.024e-02, 2.874e-03, 8.501e-02) * s2[y+2][x+2];
	r += M4(-6.525e-02, 5.544e-02, -4.553e-02, -2.549e-01, -3.326e-01, -1.783e-01, -4.018e-01, -1.345e-01, -1.203e-01, 3.505e-03, 6.956e-02, 1.428e-01, 1.492e-02, -1.612e-01, -6.010e-02, 4.001e-02) * s3[y+0][x+0];
	r += M4(6.587e-02, 4.282e-02, -7.373e-02, -2.324e-01, -6.243e-01, -1.412e-02, -2.151e-01, 6.746e-02, 1.062e-01, -3.452e-02, 1.400e-01, -3.175e-01, -1.049e-01, -1.832e-01, -8.930e-03, 8.247e-02) * s3[y+0][x+1];
	r += M4(-9.534e-02, 8.180e-02, 4.382e-03, -4.898e-02, -5.105e-01, 6.309e-02, -4.146e-01, -4.501e-02, 9.738e-02, 9.487e-02, -6.939e-02, -1.937e-01, 3.459e-02, -4.901e-02, -5.786e-02, -3.066e-02) * s3[y+0][x+2];
	r += M4(1.253e-01, -1.575e-02, -2.081e-01, -8.782e-02, -3.480e-01, -1.055e-01, -7.613e-02, -1.989e-01, -2.250e-01, 3.699e-01, -1.825e-01, -2.220e-01, -7.821e-03, -9.131e-02, -1.496e-02, -1.357e-01) * s3[y+1][x+0];
	r += M4(-1.876e-01, 1.884e-01, -1.349e-01, 3.184e-02, -7.781e-01, 5.324e-01, 4.462e-01, 5.558e-01, 1.393e-02, 2.452e-01, 4.273e-02, 2.349e-01, -4.889e-02, 1.558e-01, 1.534e-01, 1.615e-01) * s3[y+1][x+1];
	r += M4(4.519e-02, -5.799e-02, -6.011e-02, 7.615e-03, -4.400e-01, -1.198e-01, -4.006e-02, 6.792e-02, 3.646e-02, 1.620e-01, -4.949e-02, -1.014e-01, -3.047e-02, 1.917e-01, -1.223e-01, -1.258e-01) * s3[y+1][x+2];
	r += M4(-4.473e-02, -1.096e-01, -6.518e-02, 8.399e-03, -3.178e-01, 1.051e-01, -1.950e-01, 1.201e-01, -2.826e-02, 3.836e-02, -1.128e-01, -1.251e-01, 4.992e-02, 1.394e-01, -4.436e-02, 7.035e-02) * s3[y+2][x+0];
	r += M4(-6.226e-02, -2.363e-02, -1.982e-02, 4.333e-02, -3.386e-01, -1.282e-01, 2.337e-01, -3.437e-01, 6.196e-02, -1.579e-01, 1.750e-02, -1.668e-01, 4.056e-02, -4.273e-02, -9.100e-02, -8.408e-02) * s3[y+2][x+1];
	r += M4(-7.106e-03, 1.643e-01, 3.239e-02, 4.066e-02, -2.803e-01, -3.887e-01, -5.805e-03, -3.234e-01, 1.838e-02, 8.743e-02, -2.773e-03, 8.325e-02, -8.322e-03, -8.675e-03, -3.115e-02, 1.225e-01) * s3[y+2][x+2];
	r += V4(-5.607e-02, -2.078e-02, -1.815e-02, -3.895e-02);
	return vec4(r);
}
vec4 f1(int x, int y) {
	V4 r = V4(0.0);
	r += M4(2.232e-02, -1.290e-01, -5.112e-03, -1.094e-02, -2.054e-01, 1.209e-02, -6.516e-02, -7.382e-02, 3.103e-02, 1.064e-01, 1.098e-01, 4.949e-02, 3.506e-02, -5.660e-03, 6.087e-03, -8.929e-03) * s0[y+0][x+0];
	r += M4(-2.373e-02, 2.112e-02, 1.823e-02, -7.900e-03, -2.144e-01, -8.763e-02, -1.152e-01, -5.836e-02, -6.196e-02, 1.878e-01, -3.310e-02, 2.183e-01, -9.406e-02, 4.455e-02, -6.589e-02, 7.875e-02) * s0[y+0][x+1];
	r += M4(5.887e-02, 2.560e-02, -1.277e-01, 1.243e-02, -4.444e-03, -3.086e-02, 3.079e-02, 6.857e-03, 3.665e-02, -5.601e-02, 1.073e-01, -9.124e-02, -8.012e-02, -1.888e-01, 1.090e-02, -4.994e-02) * s0[y+0][x+2];
	r += M4(-4.081e-02, -1.658e-01, -1.415e-01, 7.765e-02, -1.880e-02, 9.844e-02, 5.035e-02, -5.521e-02, 8.598e-02, 8.213e-02, 3.348e-01, 1.209e-01, -5.250e-02, 6.909e-02, -2.261e-02, -2.132e-02) * s0[y+1][x+0];
	r += M4(2.401e-01, 4.728e-01, -3.174e-01, 2.163e-01, -7.524e-02, -3.118e-01, -4.727e-02, -2.829e-01, -3.311e-01, -2.040e-02, 4.513e-01, 1.670e-01, -3.953e-01, -4.959e-02, -5.233e-02, -1.174e-01) * s0[y+1][x+1];
	r += M4(2.666e-01, -6.292e-02, 6.454e-03, -3.727e-02, -6.302e-02, -7.930e-02, -5.435e-02, -1.165e-01, 8.284e-03, -1.513e-01, 2.286e-02, -2.433e-02, -1.845e-01, -6.336e-02, -1.260e-01, 3.258e-02) * s0[y+1][x+2];
	r += M4(3.614e-02, 3.058e-04, 1.352e-01, 1.341e-01, -6.554e-02, 1.196e-02, -1.099e-01, -6.066e-02, 3.554e-02, -2.096e-03, 1.106e-01, 1.200e-02, 9.953e-02, 7.798e-02, -5.006e-02, 5.320e-02) * s0[y+2][x+0];
	r += M4(4.260e-02, 1.504e-01, 2.856e-02, 7.276e-03, -1.436e-02, -5.455e-02, 5.182e-02, -3.278e-02, 1.063e-01, -2.054e-01, 1.520e-02, -6.132e-02, -2.709e-03, -1.093e-01, -2.437e-01, -9.202e-02) * s0[y+2][x+1];
	r += M4(-7.799e-02, 6.127e-02, 4.926e-02, 2.148e-02, 5.064e-02, -3.803e-02, 3.763e-02, -2.159e-02, 3.263e-02, 3.100e-03, -2.617e-03, -8.647e-02, 5.441e-02, -1.255e-01, -1.502e-03, 1.545e-01) * s0[y+2][x+2];
	r += M4(8.782e-02, 3.745e-02, -3.167e-02, 3.710e-02, 2.213e-02, -2.118e-01, -1.251e-01, -1.291e-01, -1.439e-01, -8.167e-03, -4.858e-02, 1.889e-02, 2.172e-02, -7.173e-03, -9.200e-03, -3.330e-02) * s1[y+0][x+0];
	r += M4(-6.777e-02, -1.018e-01, -5.154e-02, -9.525e-02, -7.727e-02, 2.284e-01, -2.033e-02, 1.969e-02, -2.868e-01, 2.239e-02, -1.761e-01, 5.404e-02, -6.301e-02, -5.992e-02, -8.926e-03, 1.126e-02) * s1[y+0][x+1];
	r += M4(-7.184e-02, -1.910e-01, -8.608e-02, -1.412e-01, -1.188e-01, -3.358e-02, 1.143e-01, -8.109e-02, -7.299e-02, -3.337e-02, -5.326e-02, -7.034e-02, -3.532e-02, -6.328e-02, 2.183e-02, -6.519e-02) * s1[y+0][x+2];
	r += M4(-1.179e-01, -1.411e-01, -7.298e-02, -3.823e-02, 3.395e-01, 1.948e-01, 1.860e-01, -1.102e-01, -1.137e-01, 8.766e-02, 7.446e-02, 1.963e-01, -1.471e-01, -5.631e-02, 2.743e-02, 2.300e-02) * s1[y+1][x+0];
	r += M4(-3.270e-02, 2.128e-01, -3.408e-01, 9.251e-02, 5.040e-01, -8.754e-02, 5.455e-02, -3.018e-01, -5.387e-01, -2.674e-01, 6.275e-02, 1.617e-01, 2.809e-01, -3.458e-02, -6.910e-02, -2.099e-01) * s1[y+1][x+1];
	r += M4(1.965e-02, -1.536e-01, -3.180e-02, 2.405e-02, 6.614e-02, 4.793e-02, 3.311e-02, -1.364e-01, -4.845e-02, -1.889e-01, -1.599e-01, 2.376e-01, 6.913e-02, 2.698e-01, -5.179e-02, 1.147e-01) * s1[y+1][x+2];
	r += M4(8.495e-02, 3.011e-03, 1.253e-01, 6.736e-03, 1.846e-01, 3.961e-02, 3.371e-02, 1.757e-02, -2.946e-02, 4.306e-02, -8.323e-02, -3.174e-02, -2.163e-02, 3.146e-02, -1.499e-02, 2.936e-03) * s1[y+2][x+0];
	r += M4(4.420e-02, -1.837e-03, 8.061e-02, 7.943e-02, 1.003e-01, 1.095e-02, 3.509e-02, 1.545e-01, 3.487e-02, -1.792e-01, -1.294e-01, 9.649e-02, 1.616e-01, -8.696e-02, 2.453e-01, 2.033e-01) * s1[y+2][x+1];
	r += M4(-5.012e-02, 2.186e-02, -4.252e-03, 1.203e-01, 6.400e-02, 2.198e-01, 1.111e-01, -6.641e-02, -1.497e-02, 3.051e-02, 4.191e-02, 9.313e-02, 7.275e-02, 1.633e-01, 1.638e-01, 5.011e-02) * s1[y+2][x+2];
	r += M4(-1.530e-02, -8.189e-02, -8.136e-03, 4.658e-02, 2.936e-02, -4.757e-02, -1.640e-02, -3.158e-02, -8.866e-03, -4.411e-02, 3.020e-02, 1.118e-01, -2.398e-02, -4.354e-02, -4.099e-03, 2.190e-02) * s2[y+0][x+0];
	r += M4(-4.873e-02, -4.328e-03, 1.149e-02, -6.321e-02, -2.806e-02, 1.804e-01, 1.049e-01, -3.258e-02, 8.641e-02, -3.848e-02, 6.770e-02, 8.769e-02, 4.034e-03, 7.135e-02, -2.305e-02, 2.354e-01) * s2[y+0][x+1];
	r += M4(-1.526e-02, -1.661e-02, -4.652e-02, -1.126e-01, 7.982e-03, -9.569e-02, -8.213e-02, 4.519e-02, 1.021e-01, -6.760e-02, -3.072e-02, -2.441e-02, -6.696e-04, 9.839e-02, 1.337e-03, 1.634e-01) * s2[y+0][x+2];
	r += M4(1.034e-01, -1.154e-02, -3.617e-02, -3.475e-02, -1.441e-01, 3.273e-02, 2.849e-02, -7.017e-02, 3.530e-03, -6.849e-02, -1.251e-01, 7.299e-02, 1.856e-01, -4.550e-02, 7.974e-03, -1.751e-02) * s2[y+1][x+0];
	r += M4(8.734e-02, 4.203e-01, 1.488e-01, 8.814e-02, -7.051e-03, -2.097e-01, 4.019e-02, -1.576e-01, -1.665e-01, -3.443e-02, -1.207e-01, 1.259e-01, -3.240e-02, 9.329e-02, 1.216e-01, 1.147e-02) * s2[y+1][x+1];
	r += M4(7.102e-04, -6.198e-03, 4.668e-02, 5.261e-02, 1.163e-01, 7.747e-02, -1.182e-02, 3.516e-02, -1.242e-02, -1.838e-02, -2.458e-02, 3.202e-02, 2.102e-01, 2.510e-01, 5.080e-02, 4.019e-02) * s2[y+1][x+2];
	r += M4(4.539e-03, 5.913e-02, 1.122e-01, -3.491e-02, 5.264e-02, -3.950e-02, 5.774e-03, 6.299e-02, 9.984e-03, 2.873e-02, -1.039e-01, 1.469e-02, -6.039e-03, 8.217e-02, -1.947e-01, -1.227e-02) * s2[y+2][x+0];
	r += M4(7.058e-02, 1.228e-01, 8.888e-02, 1.595e-01, 3.294e-02, 1.102e-01, -6.759e-02, 1.468e-01, 1.263e-02, -1.185e-01, -1.215e-01, 4.041e-02, -6.518e-02, -7.246e-03, 3.287e-02, -2.837e-01) * s2[y+2][x+1];
	r += M4(-5.543e-03, 3.410e-02, 6.741e-02, 4.386e-02, -9.330e-03, 2.404e-02, 3.824e-02, 8.804e-02, -1.100e-02, 8.834e-03, -5.315e-02, 2.027e-03, -5.056e-02, 1.523e-01, 2.226e-02, -3.354e-01) * s2[y+2][x+2];
	r += M4(-1.137e-01, 4.995e-02, -3.004e-02, 8.550e-02, -1.842e-01, -2.096e-01, -1.836e-01, -5.932e-04, 3.048e-01, 1.275e-01, 1.911e-01, 3.230e-01, -1.233e-01, 2.653e-02, 9.516e-02, 5.988e-02) * s3[y+0][x+0];
	r += M4(-1.029e-01, -1.169e-01, -1.248e-01, 9.107e-03, -2.176e-01, 1.684e-01, -3.645e-01, -4.384e-02, 1.704e-02, -3.917e-02, 7.302e-02, 5.269e-02, -4.322e-02, -1.063e-01, 4.739e-02, -1.669e-02) * s3[y+0][x+1];
	r += M4(-1.695e-03, 3.309e-02, -6.114e-02, -3.063e-02, -2.526e-01, -2.808e-01, 1.097e-01, 8.070e-02, 1.274e-01, -1.465e-01, -1.103e-02, -1.658e-01, 1.196e-01, -7.196e-02, 4.879e-02, 5.998e-02) * s3[y+0][x+2];
	r += M4(5.188e-02, -5.044e-02, -1.749e-01, -1.233e-01, 1.064e-01, 4.592e-01, -5.155e-02, 4.064e-02, -3.228e-03, 3.035e-03, -6.905e-02, 3.210e-02, -9.848e-02, -1.247e-01, -2.635e-02, -2.210e-02) * s3[y+1][x+0];
	r += M4(-2.268e-06, -1.581e-02, 2.321e-01, -1.667e-01, 2.487e-01, -5.640e-01, 2.347e-01, -5.345e-01, -4.642e-02, 2.143e-01, -2.016e-02, 2.477e-01, -3.864e-01, -3.477e-01, 2.242e-02, -6.210e-02) * s3[y+1][x+1];
	r += M4(2.653e-02, 2.908e-02, 8.852e-02, -7.236e-03, -2.004e-01, -4.229e-01, 2.053e-01, 3.000e-02, 9.819e-02, 4.315e-04, 8.684e-02, 6.429e-02, 6.171e-02, -2.110e-01, -3.653e-02, -1.464e-01) * s3[y+1][x+2];
	r += M4(4.300e-02, 5.129e-02, 3.975e-03, 5.086e-02, 2.016e-01, 6.154e-02, -2.530e-01, 2.388e-01, 1.285e-01, 1.073e-01, -6.955e-02, 1.766e-01, -1.934e-02, 9.148e-02, -1.107e-01, 4.680e-02) * s3[y+2][x+0];
	r += M4(8.268e-02, -2.346e-02, -5.893e-02, 2.912e-01, 3.844e-01, -2.115e-01, -5.121e-01, 1.893e-01, 1.253e-01, -3.262e-02, -3.982e-02, -2.097e-02, -3.008e-02, -2.989e-01, -5.043e-02, 1.833e-01) * s3[y+2][x+1];
	r += M4(7.494e-02, -8.132e-02, -1.262e-02, 1.817e-02, -5.026e-02, -3.616e-01, -3.266e-01, 1.458e-01, 1.368e-02, 1.235e-01, 1.844e-01, -2.812e-02, -6.150e-02, -3.035e-02, 2.658e-02, 4.609e-02) * s3[y+2][x+2];
	r += V4(-1.500e-02, -2.210e-02, -3.851e-02, -7.940e-03);
	return vec4(r);
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv3_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
			s2[ay][ax] = l1(x - 1, y - 1);
			s1[ay][ax] = -max(-s0[ay][ax], V4(0.0));
			s0[ay][ax] = max(s0[ay][ax], V4(0.0));
			s3[ay][ax] = -max(-s2[ay][ax], V4(0.0));
			s2[ay][ax] = max(s2[ay][ax], V4(0.0));
		}
	}
	barrier();
	vec4 r0 = f0(xy.x, xy.y);
	vec4 r1 = f1(xy.x, xy.y);
	imageStore(out_image, opos + ivec2(0, 0), r0);
	imageStore(out_image, opos + ivec2(1, 0), r1);
}


//!DESC CuNNy-6x8C-DS-conv5
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv4
//!BIND LUMA
//!SAVE conv5
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
	#define V4 f16vec4
	#define M4 f16mat4
	#define F float16_t
#else
	#define V4 vec4
	#define M4 mat4
	#define F float
#endif
#define l0(x, y) V4(texelFetch(conv4_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv4_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 s0[10][10];
shared V4 s1[10][10];
shared V4 s2[10][10];
shared V4 s3[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-1.698e-01, 3.059e-02, -1.493e-01, -5.464e-02, -2.044e-01, 4.371e-03, 1.142e-01, -2.144e-02, 5.608e-02, 3.818e-02, -6.356e-02, 4.065e-02, -1.902e-02, -4.637e-02, 1.323e-01, -8.535e-02) * s0[y+0][x+0];
	r += M4(4.093e-02, 1.974e-01, -5.391e-02, -1.767e-01, 2.268e-02, -9.482e-02, 3.104e-01, -1.417e-01, -9.192e-03, -4.223e-02, -8.692e-02, 1.899e-01, 7.949e-02, 9.893e-02, -3.419e-02, -1.067e-01) * s0[y+0][x+1];
	r += M4(1.926e-02, 3.733e-02, -5.788e-02, 5.921e-02, -7.450e-02, -5.205e-02, 7.593e-02, -1.022e-02, 5.649e-03, 3.714e-02, -1.031e-01, 1.064e-02, 1.330e-02, -5.566e-02, -2.493e-02, -7.447e-02) * s0[y+0][x+2];
	r += M4(-1.160e-01, 3.540e-01, -4.539e-01, -1.206e-01, -3.333e-02, 1.557e-01, 2.979e-01, 3.307e-01, -2.391e-02, 1.044e-01, 6.384e-03, -1.360e-01, 4.481e-02, -3.690e-02, 1.638e-01, 1.438e-01) * s0[y+1][x+0];
	r += M4(4.365e-01, 3.956e-01, -8.509e-01, 1.624e-01, -3.125e-01, 5.838e-02, 2.776e-01, 1.936e-01, -1.366e-01, -6.632e-02, 7.670e-02, 4.272e-03, -2.336e-01, -1.252e-01, 3.340e-01, -2.242e-01) * s0[y+1][x+1];
	r += M4(-7.665e-02, 3.415e-02, -1.579e-01, -3.963e-02, 5.342e-02, 1.183e-01, 1.184e-01, 5.807e-02, 5.980e-02, 2.482e-01, -1.200e-01, 1.385e-02, 9.961e-02, 1.421e-01, -1.345e-04, -9.701e-02) * s0[y+1][x+2];
	r += M4(-6.116e-02, 2.136e-01, 1.146e-01, -1.411e-01, -1.473e-01, 2.337e-01, -1.715e-02, -1.388e-02, 5.279e-02, -8.729e-03, 7.501e-02, 6.105e-02, -2.367e-02, 1.276e-01, -1.186e-01, -7.251e-02) * s0[y+2][x+0];
	r += M4(1.095e-01, 1.948e-01, -1.895e-01, 6.819e-02, 1.832e-02, 2.905e-01, 5.443e-02, -2.562e-01, 3.954e-02, -7.539e-03, -8.811e-02, -2.949e-02, -2.371e-02, 2.732e-01, -9.626e-02, -1.919e-01) * s0[y+2][x+1];
	r += M4(-1.728e-01, -2.240e-02, -8.373e-02, 1.343e-03, 5.217e-02, 1.130e-01, 2.900e-01, -2.372e-01, 7.079e-02, 3.697e-02, 1.005e-01, 3.475e-02, -7.387e-03, 2.919e-02, -9.205e-02, -5.244e-02) * s0[y+2][x+2];
	r += M4(-1.211e-03, -4.225e-02, 2.477e-02, -7.387e-03, 5.259e-03, 9.208e-03, -2.884e-02, -7.732e-02, 1.709e-02, -5.189e-03, -4.168e-02, -1.245e-02, 2.199e-02, -1.041e-02, 5.954e-02, 1.554e-02) * s1[y+0][x+0];
	r += M4(7.221e-02, -1.959e-02, 1.748e-03, 7.185e-02, 2.355e-02, -4.844e-02, 1.972e-02, 1.141e-01, -8.659e-02, 2.612e-02, -4.957e-02, -3.743e-02, -6.057e-02, 6.638e-02, -8.976e-02, 9.038e-02) * s1[y+0][x+1];
	r += M4(-3.345e-02, 1.465e-02, -1.096e-02, -5.688e-03, -2.299e-03, 2.262e-02, 4.123e-02, -4.504e-02, -5.931e-02, -8.932e-03, 3.767e-03, -9.972e-03, -3.967e-02, -3.308e-02, -6.989e-02, 5.518e-02) * s1[y+0][x+2];
	r += M4(-2.981e-03, 4.116e-02, 4.544e-02, -4.425e-02, -2.496e-04, 5.092e-02, 2.030e-02, 1.163e-01, -1.569e-02, -3.993e-02, 5.909e-02, -6.227e-02, -2.566e-02, -8.618e-02, 6.363e-03, 1.215e-01) * s1[y+1][x+0];
	r += M4(2.727e-01, -3.917e-02, -2.931e-02, 1.531e-01, -1.360e-01, -1.100e-01, 1.421e-01, -5.871e-02, -2.884e-01, 2.872e-03, 5.648e-02, -3.038e-01, -2.400e-01, -5.353e-03, 4.458e-02, -3.895e-01) * s1[y+1][x+1];
	r += M4(9.391e-02, 5.394e-02, -5.018e-02, -4.967e-02, 1.401e-01, 7.593e-02, 9.793e-02, -1.151e-01, -1.008e-01, 5.253e-02, 9.857e-02, -1.741e-01, -1.707e-02, 7.547e-02, 1.974e-02, -1.045e-01) * s1[y+1][x+2];
	r += M4(-4.651e-02, 3.709e-02, 5.486e-02, -7.919e-02, -3.213e-02, 2.677e-02, -1.845e-02, -4.405e-02, 1.827e-02, -5.390e-03, -1.389e-01, -3.203e-02, -2.140e-02, -2.057e-04, -5.945e-02, -1.424e-02) * s1[y+2][x+0];
	r += M4(3.331e-02, -5.072e-02, -1.368e-02, -1.274e-01, 5.219e-04, -9.998e-02, 1.524e-02, -5.612e-02, 6.707e-02, -1.247e-01, -6.211e-02, -1.171e-01, 5.950e-02, 6.457e-02, 6.947e-02, -1.135e-01) * s1[y+2][x+1];
	r += M4(9.304e-03, 3.508e-02, 6.496e-02, 5.402e-02, 7.488e-02, -7.524e-02, -2.947e-02, 8.117e-02, 1.509e-01, -1.737e-02, 4.486e-02, -4.603e-02, 2.481e-02, 9.944e-02, -2.786e-02, -4.919e-02) * s1[y+2][x+2];
	r += M4(-1.848e-03, 3.785e-02, 3.407e-02, 7.648e-02, -8.319e-02, -6.814e-02, -3.040e-02, 9.110e-02, -3.051e-02, -4.527e-02, 1.008e-01, -3.466e-02, 7.406e-02, -7.934e-02, -2.046e-01, -5.411e-02) * s2[y+0][x+0];
	r += M4(3.517e-02, -6.042e-02, 1.501e-01, 6.261e-02, -1.953e-01, 5.614e-03, -9.267e-02, -5.353e-03, 2.242e-02, 9.777e-02, -2.737e-01, -1.681e-01, 9.314e-02, 4.152e-02, 1.052e-01, -2.777e-02) * s2[y+0][x+1];
	r += M4(-1.862e-03, 2.311e-02, 3.811e-02, 9.554e-02, -4.300e-02, -3.846e-02, -5.700e-02, -3.117e-02, 8.581e-02, 2.143e-02, 9.714e-02, 4.256e-02, -4.265e-02, -3.095e-02, 3.151e-02, 1.349e-02) * s2[y+0][x+2];
	r += M4(8.779e-03, -4.753e-02, 2.928e-02, 3.118e-02, -1.199e-01, 1.157e-01, -4.648e-02, -4.005e-02, 3.087e-03, 7.502e-02, 1.976e-02, 2.121e-02, 2.041e-02, -1.360e-01, -1.710e-02, 1.233e-01) * s2[y+1][x+0];
	r += M4(1.710e-01, 3.421e-01, -1.360e-01, -2.815e-01, -5.758e-02, 2.529e-01, 1.776e-01, 4.251e-02, -5.923e-02, -1.748e-01, 2.653e-02, -1.097e-01, -1.088e-01, -2.202e-01, -3.824e-02, 8.525e-02) * s2[y+1][x+1];
	r += M4(-1.265e-01, -5.929e-02, 1.372e-01, 1.496e-02, -1.243e-01, 6.325e-03, 3.459e-02, -9.370e-02, 2.029e-02, 2.835e-02, 3.601e-02, -4.485e-02, -9.541e-02, 1.037e-02, -4.868e-02, -8.374e-02) * s2[y+1][x+2];
	r += M4(6.034e-02, -1.058e-01, -2.893e-02, 3.920e-02, -3.563e-02, 9.264e-03, -1.781e-02, -2.008e-02, -1.182e-02, 2.094e-02, -1.284e-02, -4.391e-02, -3.937e-02, 6.768e-02, 1.576e-02, -1.005e-02) * s2[y+2][x+0];
	r += M4(6.638e-02, 1.088e-01, 1.178e-01, 2.379e-01, -7.593e-02, -3.747e-02, -7.066e-02, -5.596e-02, 1.193e-01, -3.529e-03, 6.059e-03, 8.130e-02, -5.193e-02, 1.242e-02, 7.122e-02, -1.323e-01) * s2[y+2][x+1];
	r += M4(-2.141e-01, -1.994e-02, -1.586e-01, 6.777e-02, 2.825e-02, 2.400e-02, -1.597e-02, -1.921e-02, -3.528e-02, -1.054e-02, 2.488e-02, 2.459e-02, -3.341e-02, 3.990e-02, -2.734e-02, -6.116e-02) * s2[y+2][x+2];
	r += M4(-3.657e-03, -6.171e-02, 4.312e-02, -1.906e-02, -5.449e-02, 1.095e-03, 1.385e-02, 8.125e-02, -1.382e-02, 2.374e-02, -1.656e-02, 2.513e-02, 1.230e-02, 2.347e-02, -1.887e-03, -1.300e-01) * s3[y+0][x+0];
	r += M4(2.767e-02, -3.317e-02, 2.268e-01, -1.471e-01, -7.886e-02, 3.946e-02, -9.048e-02, -7.963e-02, -6.814e-02, 1.880e-02, 1.302e-01, 8.767e-02, 1.108e-01, 8.957e-02, 1.063e-02, -7.293e-02) * s3[y+0][x+1];
	r += M4(-3.625e-02, -2.038e-02, 7.394e-02, -3.489e-02, -2.231e-02, -1.250e-01, 3.603e-02, 4.363e-03, -1.169e-02, 1.617e-01, -1.635e-02, 9.249e-03, -1.609e-02, 1.214e-02, 6.224e-02, -3.223e-02) * s3[y+0][x+2];
	r += M4(4.256e-03, -2.694e-02, 2.489e-02, -5.795e-02, -5.427e-02, 1.547e-01, 5.113e-02, -1.237e-01, -7.065e-02, 4.246e-02, 1.565e-02, 1.249e-01, 7.069e-02, -7.430e-02, 5.846e-02, 3.657e-02) * s3[y+1][x+0];
	r += M4(2.167e-01, 3.608e-01, 1.613e-01, -2.312e-01, 1.140e-01, 2.138e-01, -3.962e-02, 3.523e-02, -1.223e-01, -1.282e-01, -2.472e-01, 3.857e-02, 2.034e-01, 2.454e-02, -6.218e-02, 1.763e-01) * s3[y+1][x+1];
	r += M4(-8.081e-02, -3.758e-02, -1.634e-02, -6.809e-03, -7.053e-02, -6.962e-02, 3.839e-02, 1.079e-01, -1.256e-01, 3.670e-02, 3.017e-02, 9.173e-02, 1.469e-02, -3.070e-02, -1.291e-02, -2.431e-02) * s3[y+1][x+2];
	r += M4(8.479e-02, -3.977e-02, 6.375e-02, -4.443e-02, -3.563e-02, -7.333e-02, 4.874e-02, 7.785e-03, -4.426e-02, 2.586e-02, -4.960e-02, -1.569e-02, -3.963e-03, -4.399e-03, -2.048e-03, 1.489e-02) * s3[y+2][x+0];
	r += M4(9.251e-02, 1.233e-01, 1.334e-01, 4.399e-02, -4.224e-02, -8.679e-02, -4.673e-02, 7.934e-02, -8.088e-03, 3.364e-02, 2.767e-02, -1.324e-02, 5.153e-02, -9.707e-02, -4.411e-03, 6.244e-03) * s3[y+2][x+1];
	r += M4(-6.547e-02, 4.920e-02, -4.436e-02, -6.282e-02, -3.977e-02, -8.072e-02, 3.015e-02, 1.796e-02, -9.011e-02, 6.868e-02, 2.214e-02, -3.379e-02, 1.116e-02, 6.317e-02, 2.375e-02, -2.107e-02) * s3[y+2][x+2];
	r += V4(1.982e-02, -1.169e-02, -1.406e-02, 2.284e-03);
	return vec4(r);
}
vec4 f1(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-5.901e-02, -2.214e-02, -6.200e-02, -1.214e-01, 1.187e-02, 7.161e-02, -6.997e-02, -8.356e-02, 3.316e-02, -2.826e-02, -2.654e-02, 6.501e-03, 3.104e-04, 5.244e-02, -4.784e-02, -3.787e-02) * s0[y+0][x+0];
	r += M4(-1.077e-01, 4.584e-02, 2.390e-01, 1.927e-01, 1.747e-01, 1.840e-02, 6.448e-02, -9.453e-02, -1.849e-01, -1.105e-02, 3.210e-02, 4.909e-02, 8.278e-02, 1.344e-02, -1.209e-01, -6.849e-02) * s0[y+0][x+1];
	r += M4(-1.967e-03, -2.444e-02, -7.008e-02, 2.913e-02, 7.585e-02, -1.057e-01, 2.485e-02, 1.097e-01, -1.220e-02, -6.543e-02, 7.841e-03, -8.280e-02, 3.468e-02, -6.590e-04, -1.064e-01, -5.860e-02) * s0[y+0][x+2];
	r += M4(-1.062e-02, -8.228e-02, -5.897e-01, -2.337e-01, -3.729e-02, -2.747e-01, 3.456e-01, 6.411e-01, 4.749e-02, -1.321e-01, -6.237e-02, 2.422e-02, 5.597e-02, 5.328e-02, -1.231e-01, -5.981e-02) * s0[y+1][x+0];
	r += M4(-1.189e-01, -8.902e-02, -2.541e-01, -1.109e-01, 4.615e-01, -8.929e-01, -1.617e-01, 3.148e-01, -1.314e-01, -1.532e-01, 3.258e-01, 1.255e-01, -2.544e-01, -9.905e-02, 3.552e-02, 9.547e-02) * s0[y+1][x+1];
	r += M4(9.417e-05, 1.824e-01, 2.342e-02, 1.129e-01, -4.422e-01, -2.439e-02, 2.871e-01, 1.021e-01, 6.402e-03, -1.540e-01, -6.016e-04, 7.415e-03, -5.638e-02, 8.010e-02, -1.616e-01, -7.877e-02) * s0[y+1][x+2];
	r += M4(-2.719e-02, -4.026e-01, 1.854e-01, 2.494e-01, 1.375e-01, -5.591e-02, -1.095e-01, -2.204e-02, 1.049e-02, -1.339e-01, 8.212e-02, 4.700e-02, 1.518e-01, 3.393e-02, -1.244e-01, -1.676e-01) * s0[y+2][x+0];
	r += M4(-2.111e-01, -1.320e-01, 7.981e-02, 6.668e-02, 3.948e-02, -2.264e-02, 3.667e-01, 1.549e-01, -2.040e-01, -1.635e-01, 5.533e-02, 7.795e-02, 1.491e-02, 3.723e-02, -1.965e-01, -1.327e-01) * s0[y+2][x+1];
	r += M4(4.878e-02, -1.614e-02, 2.337e-03, 2.798e-02, 3.373e-01, -9.294e-02, 5.420e-02, 1.218e-01, -9.592e-02, -7.169e-02, 3.114e-02, 3.144e-02, -5.209e-02, 5.931e-02, -7.450e-02, 9.714e-03) * s0[y+2][x+2];
	r += M4(-4.959e-02, 2.242e-02, -1.030e-01, -4.033e-02, 4.478e-02, -1.030e-02, -2.834e-02, -5.708e-02, -4.003e-02, 1.182e-01, 2.254e-02, -4.661e-02, -3.164e-02, -4.263e-02, 9.607e-02, 9.557e-02) * s1[y+0][x+0];
	r += M4(-1.804e-02, -3.781e-02, 1.028e-01, 9.178e-02, -6.156e-02, 3.056e-02, -8.124e-03, 4.502e-03, 4.929e-02, -6.156e-02, 3.599e-02, 1.249e-01, 6.396e-02, -1.637e-02, 1.502e-03, -3.097e-02) * s1[y+0][x+1];
	r += M4(2.771e-02, -5.701e-02, -6.785e-02, -6.962e-02, -2.529e-02, -1.820e-02, 5.185e-02, -3.502e-02, -4.246e-02, 2.206e-02, -2.541e-02, 1.268e-02, -5.163e-02, -3.496e-03, -9.586e-03, 1.084e-02) * s1[y+0][x+2];
	r += M4(-4.135e-02, 7.269e-03, -1.115e-01, 2.699e-02, -4.127e-02, -8.080e-02, 1.244e-01, 2.206e-01, -7.540e-02, 1.878e-01, 9.945e-02, 1.179e-01, -2.093e-03, 6.466e-02, 1.633e-01, -1.117e-01) * s1[y+1][x+0];
	r += M4(-1.919e-01, 4.703e-02, -1.313e-01, -1.623e-01, -1.199e-01, -8.036e-02, -6.956e-02, 9.650e-02, -1.850e-02, -2.916e-01, 9.698e-02, 3.334e-01, 2.067e-01, -3.165e-02, 1.567e-01, 9.977e-02) * s1[y+1][x+1];
	r += M4(4.873e-02, 3.886e-02, -4.180e-02, -2.307e-02, -2.717e-02, -4.209e-02, 4.576e-02, 2.200e-02, -4.536e-02, -3.886e-02, -4.093e-02, 9.072e-02, 1.164e-01, -2.617e-02, -4.061e-02, -3.930e-02) * s1[y+1][x+2];
	r += M4(4.507e-03, -5.645e-02, 8.581e-02, 8.420e-02, -4.153e-02, 2.818e-02, 5.763e-02, -1.356e-02, -4.592e-02, 1.244e-01, -4.042e-02, -1.472e-01, 2.998e-02, 2.034e-02, 1.270e-03, -5.023e-02) * s1[y+2][x+0];
	r += M4(7.328e-02, 1.212e-01, -1.763e-03, -7.906e-02, 7.673e-02, 4.123e-02, 4.041e-02, -5.517e-02, -6.126e-02, 6.026e-02, 3.701e-02, -1.422e-01, 1.423e-01, -6.189e-02, -4.995e-02, -1.041e-01) * s1[y+2][x+1];
	r += M4(8.544e-02, 2.480e-02, -6.729e-02, 1.375e-02, -2.246e-02, 2.157e-02, -1.659e-02, -4.541e-02, 1.750e-03, 1.973e-02, 2.716e-02, -1.452e-02, 1.512e-01, 2.570e-02, -4.928e-02, 2.188e-03) * s1[y+2][x+2];
	r += M4(-2.190e-02, 2.030e-02, 4.317e-02, 3.923e-02, -3.343e-02, 5.015e-02, -8.800e-02, -1.666e-01, 1.144e-01, -4.583e-02, 1.157e-01, 7.056e-02, 8.192e-02, 8.600e-02, -7.840e-02, -2.647e-01) * s2[y+0][x+0];
	r += M4(-2.240e-02, 3.779e-03, 8.773e-02, 7.595e-02, -7.181e-02, -3.920e-03, 6.372e-02, -3.377e-02, 2.080e-01, -1.406e-01, -2.734e-02, 1.440e-01, 4.460e-02, -4.870e-02, 4.117e-02, 2.258e-01) * s2[y+0][x+1];
	r += M4(-6.222e-02, -1.739e-02, -5.154e-02, -3.403e-02, -1.467e-02, 5.160e-02, 2.236e-02, -1.258e-02, 3.278e-02, 1.190e-01, -3.225e-02, -3.568e-02, 1.000e-01, -1.210e-01, -2.637e-02, -9.985e-02) * s2[y+0][x+2];
	r += M4(5.481e-02, -3.101e-02, 4.396e-02, 4.131e-02, -7.719e-02, -2.842e-01, -4.306e-02, 2.465e-01, 2.232e-01, -1.161e-02, -4.315e-02, -1.427e-01, 8.785e-02, -5.428e-02, 1.575e-02, -1.295e-02) * s2[y+1][x+0];
	r += M4(5.544e-01, -1.439e-01, 2.110e-01, -7.932e-02, -5.273e-01, -3.558e-01, 2.137e-02, 2.729e-02, 3.808e-01, -9.573e-03, 3.528e-02, 1.545e-01, -3.491e-01, 1.221e-01, 4.561e-02, 1.261e-01) * s2[y+1][x+1];
	r += M4(2.136e-01, 4.345e-02, 1.341e-02, 8.172e-02, 5.324e-02, -5.725e-02, -2.063e-02, -4.246e-02, 2.456e-01, -1.017e-01, -2.698e-02, 1.617e-02, -1.238e-01, 1.072e-01, 5.604e-02, 1.644e-02) * s2[y+1][x+2];
	r += M4(-5.523e-02, 1.127e-02, 9.272e-02, -4.481e-02, -1.923e-02, -1.124e-02, -1.678e-02, -8.616e-02, 5.051e-02, 4.085e-02, -4.076e-03, -9.789e-03, -8.001e-02, 3.445e-02, 1.731e-02, 2.412e-02) * s2[y+2][x+0];
	r += M4(1.900e-01, -1.194e-01, -4.004e-03, 1.272e-01, -5.823e-02, 1.419e-01, 2.649e-02, -4.768e-02, -5.550e-02, -1.725e-03, -4.088e-02, 7.248e-02, -3.087e-02, 5.995e-02, -1.353e-02, -3.076e-02) * s2[y+2][x+1];
	r += M4(-1.176e-02, 2.315e-02, 4.981e-02, 6.197e-02, 5.493e-03, 2.765e-02, -2.438e-02, -3.414e-03, 5.146e-02, -4.533e-02, 4.815e-03, 1.602e-02, 9.942e-03, 8.556e-02, -3.448e-02, -7.042e-02) * s2[y+2][x+2];
	r += M4(1.180e-02, 2.522e-02, -1.077e-02, -8.078e-02, -5.213e-02, -1.736e-02, -6.959e-04, -2.877e-02, 4.938e-02, -1.013e-01, 1.787e-02, -2.387e-02, -4.724e-03, -3.055e-02, 8.040e-02, 1.016e-01) * s3[y+0][x+0];
	r += M4(2.130e-02, 2.717e-02, -3.396e-03, -1.388e-02, 4.264e-02, 1.039e-01, -1.242e-02, -1.744e-01, -1.066e-01, -1.447e-01, 1.905e-01, 2.369e-01, 6.214e-02, -5.163e-02, -6.813e-02, 8.937e-02) * s3[y+0][x+1];
	r += M4(-3.570e-02, -6.008e-03, 1.215e-02, 5.284e-02, -2.884e-02, 1.070e-01, 3.770e-03, 4.395e-02, 1.569e-02, -7.310e-02, -1.884e-02, 1.860e-02, 2.246e-03, -4.655e-02, 6.026e-02, -2.513e-03) * s3[y+0][x+2];
	r += M4(8.236e-02, -3.557e-02, -6.486e-02, 2.395e-03, -1.099e-01, -1.313e-01, 1.670e-02, 1.896e-01, 8.571e-02, -9.364e-02, 1.212e-01, 3.577e-02, -6.680e-02, 7.210e-02, -2.588e-02, 8.705e-02) * s3[y+1][x+0];
	r += M4(2.090e-02, 2.807e-01, -1.249e-01, -5.537e-02, 4.696e-02, 5.897e-02, -5.062e-02, -2.017e-03, -2.837e-02, -2.212e-01, 1.073e-01, 1.543e-01, -1.002e-01, -5.534e-02, -8.228e-02, -2.404e-02) * s3[y+1][x+1];
	r += M4(-6.761e-02, 4.311e-02, 4.962e-03, -1.778e-02, -2.618e-02, 3.027e-02, 6.795e-02, -1.207e-02, -2.996e-02, -1.412e-01, 3.222e-02, 4.954e-02, -2.232e-02, -4.252e-02, 5.221e-02, 1.056e-02) * s3[y+1][x+2];
	r += M4(-3.057e-02, -8.416e-02, -1.041e-01, 4.977e-02, -8.617e-02, 5.674e-02, 1.015e-02, 9.164e-02, 2.902e-02, 8.268e-03, -3.412e-02, -1.002e-01, 1.947e-02, 4.845e-03, -1.299e-02, 6.868e-02) * s3[y+2][x+0];
	r += M4(2.407e-02, 1.069e-01, -3.417e-03, -8.684e-03, -3.051e-02, 5.958e-02, -1.854e-02, 4.915e-02, 3.090e-02, 4.131e-05, 1.863e-02, -1.407e-03, -4.152e-02, 5.590e-02, 2.744e-02, -5.123e-03) * s3[y+2][x+1];
	r += M4(-8.081e-03, 8.054e-02, -6.444e-03, 1.137e-02, -1.761e-02, 2.459e-02, 8.675e-02, 1.097e-02, 2.473e-02, -8.689e-02, 6.211e-02, 5.090e-03, 1.542e-02, -5.315e-02, -4.650e-03, 2.122e-02) * s3[y+2][x+2];
	r += V4(5.019e-03, 1.117e-02, -5.908e-03, -1.890e-02);
	return vec4(r);
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv4_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
			s2[ay][ax] = l1(x - 1, y - 1);
			s1[ay][ax] = -max(-s0[ay][ax], V4(0.0));
			s0[ay][ax] = max(s0[ay][ax], V4(0.0));
			s3[ay][ax] = -max(-s2[ay][ax], V4(0.0));
			s2[ay][ax] = max(s2[ay][ax], V4(0.0));
		}
	}
	barrier();
	vec4 r0 = f0(xy.x, xy.y);
	vec4 r1 = f1(xy.x, xy.y);
	imageStore(out_image, opos + ivec2(0, 0), r0);
	imageStore(out_image, opos + ivec2(1, 0), r1);
}


//!DESC CuNNy-6x8C-DS-conv6
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv5
//!BIND LUMA
//!SAVE conv6
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
	#define V4 f16vec4
	#define M4 f16mat4
	#define F float16_t
#else
	#define V4 vec4
	#define M4 mat4
	#define F float
#endif
#define l0(x, y) V4(texelFetch(conv5_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv5_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 s0[10][10];
shared V4 s1[10][10];
shared V4 s2[10][10];
shared V4 s3[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-8.536e-02, 3.105e-02, 1.675e-02, -2.304e-03, -7.630e-02, -1.490e-02, -2.665e-02, -3.599e-02, -1.223e-01, 4.572e-02, -9.748e-02, -1.882e-01, 7.107e-03, 4.515e-02, -1.505e-02, -1.229e-02) * s0[y+0][x+0];
	r += M4(8.934e-03, 4.607e-02, 2.504e-02, 8.737e-02, -5.340e-02, 1.743e-03, 5.667e-02, -2.190e-02, 2.555e-01, 1.404e-01, -4.961e-02, -2.374e-01, -1.237e-02, -8.090e-02, 2.009e-02, 1.741e-02) * s0[y+0][x+1];
	r += M4(-2.447e-03, 3.231e-02, 3.454e-02, -3.521e-02, 5.215e-02, -3.581e-02, 4.667e-02, 4.201e-02, 2.843e-02, -3.888e-02, -1.863e-02, -1.484e-01, 1.853e-02, 1.762e-03, -1.153e-01, 3.126e-02) * s0[y+0][x+2];
	r += M4(-1.391e-01, 6.578e-02, -6.023e-02, -1.569e-01, 7.982e-02, 8.248e-02, -3.269e-03, -9.022e-03, -1.784e-01, -7.081e-02, 1.514e-01, 1.056e-01, 4.242e-02, -2.630e-02, 7.654e-02, 6.266e-03) * s0[y+1][x+0];
	r += M4(8.600e-02, -5.764e-02, 1.592e-01, -1.607e-01, -5.056e-01, -9.574e-02, 9.546e-02, 1.606e-01, -1.143e-01, 5.446e-01, 4.616e-01, 4.140e-01, -5.349e-02, 1.036e-01, -6.616e-02, -9.296e-02) * s0[y+1][x+1];
	r += M4(5.638e-02, -9.589e-02, 2.005e-01, 1.359e-01, 5.249e-02, 8.295e-03, 2.097e-01, 2.578e-02, -4.733e-02, 1.264e-01, -1.620e-01, 5.495e-02, 2.555e-03, 2.259e-02, 5.798e-02, -9.795e-02) * s0[y+1][x+2];
	r += M4(1.083e-01, -1.184e-02, -2.315e-02, -4.971e-02, -2.264e-02, 1.410e-02, 5.979e-02, -3.257e-02, 1.607e-01, 1.926e-02, -5.931e-02, -1.235e-01, -7.585e-02, 3.658e-02, 3.281e-02, -2.150e-02) * s0[y+2][x+0];
	r += M4(-1.494e-02, 1.449e-02, -1.126e-01, 1.259e-01, -1.665e-01, 2.209e-02, 8.201e-02, 2.949e-02, -3.468e-01, 4.914e-02, -6.390e-02, 1.796e-01, 8.608e-02, -1.006e-02, 8.137e-03, -4.133e-02) * s0[y+2][x+1];
	r += M4(-5.284e-02, 3.441e-04, 3.553e-02, 4.051e-02, -4.623e-02, 2.257e-02, 2.873e-02, -1.265e-03, 4.091e-02, -5.828e-02, -4.799e-02, -9.423e-02, -4.575e-02, 4.557e-02, -3.072e-02, -3.165e-02) * s0[y+2][x+2];
	r += M4(-4.117e-02, -6.927e-03, 8.379e-05, 1.903e-02, -6.368e-02, 6.944e-02, -9.985e-02, -8.330e-02, -6.041e-02, 3.286e-02, -3.552e-02, -2.626e-02, -1.023e-01, 8.727e-04, 1.124e-01, 7.944e-02) * s1[y+0][x+0];
	r += M4(4.212e-02, 1.441e-01, -5.179e-02, -5.881e-02, 1.455e-02, -1.141e-02, 4.485e-02, -1.462e-01, 3.592e-02, -7.593e-02, 8.048e-02, -3.455e-02, 3.448e-03, 1.224e-01, 1.587e-01, -2.154e-01) * s1[y+0][x+1];
	r += M4(1.613e-02, 7.937e-02, 5.507e-03, -6.162e-02, 9.761e-02, -5.910e-02, 1.921e-02, -6.531e-02, -1.465e-02, -2.318e-03, -6.711e-02, 5.700e-02, -5.704e-02, 8.614e-02, 1.555e-01, -1.319e-01) * s1[y+0][x+2];
	r += M4(-7.959e-02, 2.085e-01, -5.532e-02, -2.580e-01, 9.245e-02, 7.371e-03, -1.274e-01, -8.599e-02, 2.333e-03, 2.389e-02, -2.882e-02, -6.213e-02, 6.582e-02, 7.301e-02, -9.098e-02, -1.392e-01) * s1[y+1][x+0];
	r += M4(5.856e-02, -1.366e-01, 1.532e-02, -1.896e-01, -2.963e-02, 9.756e-03, 1.008e-01, 4.400e-02, 1.147e-02, -3.138e-02, 2.725e-01, 2.277e-01, -3.839e-01, 2.629e-01, -2.886e-01, 6.519e-02) * s1[y+1][x+1];
	r += M4(4.549e-02, -5.137e-03, 8.183e-02, 9.800e-03, 1.260e-02, -3.961e-02, -2.005e-03, 5.580e-02, -1.037e-01, 7.201e-02, -3.606e-02, -1.480e-01, -2.039e-01, 1.150e-02, -2.571e-01, -2.618e-01) * s1[y+1][x+2];
	r += M4(1.528e-01, -7.152e-02, 1.718e-02, 3.004e-02, -2.952e-02, 3.676e-02, 2.133e-02, -3.481e-02, 5.208e-02, 3.306e-04, -1.075e-02, 1.330e-03, -6.431e-02, 7.305e-02, -5.222e-02, -1.435e-01) * s1[y+2][x+0];
	r += M4(-1.680e-01, 6.410e-02, -1.185e-01, 6.978e-02, -1.061e-01, -1.741e-02, 3.816e-02, -1.361e-02, -1.819e-02, -1.553e-02, -2.509e-03, 8.340e-02, 2.011e-02, -8.911e-02, 1.934e-01, -2.422e-01) * s1[y+2][x+1];
	r += M4(-5.466e-02, -2.938e-02, 2.074e-02, -1.281e-02, -7.696e-03, 4.646e-02, -3.092e-03, 3.886e-02, -1.367e-02, -1.459e-02, -1.588e-02, 1.814e-03, -3.356e-02, -3.033e-02, 3.407e-02, 1.275e-01) * s1[y+2][x+2];
	r += M4(6.567e-02, -3.647e-02, -9.800e-03, 6.363e-03, 8.183e-02, -3.889e-02, 3.326e-02, 2.530e-02, -5.295e-02, 3.957e-02, -5.783e-02, -2.835e-02, 5.930e-02, -1.692e-02, 5.305e-02, -3.607e-02) * s2[y+0][x+0];
	r += M4(-6.430e-02, -7.106e-02, -1.258e-01, 1.316e-01, -1.008e-01, 9.932e-02, -2.395e-01, -4.796e-02, -1.263e-01, 9.082e-02, -8.900e-03, -2.642e-02, -8.001e-02, -4.894e-02, 1.776e-02, -1.533e-02) * s2[y+0][x+1];
	r += M4(3.501e-02, 3.121e-02, -2.567e-02, 8.083e-02, 7.160e-02, -9.068e-02, 1.107e-01, -1.083e-01, 9.987e-02, 2.085e-01, -2.203e-04, -1.727e-01, -1.569e-02, 3.052e-02, 7.180e-02, -1.512e-01) * s2[y+0][x+2];
	r += M4(-3.482e-02, 2.338e-02, 2.605e-02, 3.846e-02, -3.996e-02, 1.684e-02, -2.336e-02, 7.967e-02, 1.211e-01, 6.881e-02, -9.929e-02, -1.901e-01, -1.095e-01, 2.437e-02, -3.679e-03, 1.304e-01) * s2[y+1][x+0];
	r += M4(1.459e-03, 1.914e-01, 7.292e-02, -2.766e-01, 8.723e-02, 9.223e-02, 1.651e-01, -1.160e-01, 1.674e-01, 3.972e-02, 3.822e-02, -2.708e-01, -3.818e-01, 7.051e-02, 3.371e-01, 2.660e-01) * s2[y+1][x+1];
	r += M4(-2.140e-02, 8.354e-03, 1.803e-01, -9.095e-02, -1.322e-01, -4.700e-02, 2.191e-02, 1.843e-01, -3.093e-01, -7.591e-02, -1.215e-02, -1.176e-01, 2.561e-01, 2.694e-03, -8.433e-03, 1.940e-01) * s2[y+1][x+2];
	r += M4(7.165e-02, -2.187e-02, -3.282e-02, 4.860e-02, -7.995e-02, 6.895e-02, 1.499e-02, -1.499e-01, 4.224e-02, -1.426e-02, 3.003e-02, -2.845e-03, 3.739e-02, -1.467e-02, -8.480e-03, 6.885e-04) * s2[y+2][x+0];
	r += M4(8.399e-02, 2.159e-02, -3.748e-02, -6.594e-02, -7.546e-02, -1.402e-02, 8.181e-02, -6.271e-02, -2.801e-01, 1.381e-01, 5.536e-02, -1.243e-01, -1.642e-01, 1.757e-02, 1.942e-02, -1.137e-01) * s2[y+2][x+1];
	r += M4(-7.306e-02, 1.413e-02, -6.393e-02, -1.712e-02, 2.839e-02, 1.272e-02, 5.359e-02, -4.322e-02, 6.205e-02, 1.232e-02, -1.636e-02, -4.843e-02, -5.402e-02, 1.276e-02, 1.102e-01, -7.334e-02) * s2[y+2][x+2];
	r += M4(4.502e-02, -8.157e-02, 1.123e-01, 6.428e-03, 9.692e-02, -6.273e-02, 2.790e-02, 2.976e-02, -3.473e-02, 3.006e-02, -4.904e-02, 1.357e-03, 1.111e-01, -6.030e-02, 6.908e-02, 2.656e-02) * s3[y+0][x+0];
	r += M4(-1.420e-02, -1.435e-02, -2.134e-01, 7.780e-02, -1.515e-01, -6.422e-02, -2.113e-01, 1.028e-01, -7.983e-02, 6.388e-02, -2.492e-02, -1.282e-05, -1.947e-02, -1.163e-01, -5.479e-02, 1.100e-01) * s3[y+0][x+1];
	r += M4(1.948e-02, -3.648e-02, 5.705e-02, 2.152e-02, -4.218e-02, -1.953e-02, 7.941e-02, -9.444e-03, 9.855e-02, 5.506e-02, 6.301e-02, 7.132e-03, -7.216e-02, -6.600e-02, -9.483e-02, 2.657e-02) * s3[y+0][x+2];
	r += M4(-1.368e-01, -8.038e-02, 8.563e-02, 2.486e-01, -4.659e-02, 3.120e-02, -4.816e-02, 4.677e-02, 3.586e-02, 7.315e-03, 1.643e-02, -5.518e-02, -6.745e-02, -7.999e-03, 2.415e-02, 9.815e-02) * s3[y+1][x+0];
	r += M4(-4.345e-02, 1.116e-01, -1.672e-01, -2.344e-01, 1.155e-01, 1.363e-01, 1.472e-01, -1.794e-01, 6.059e-02, 1.032e-01, 1.274e-01, -1.743e-01, -2.003e-01, -8.488e-03, -7.341e-02, -5.128e-02) * s3[y+1][x+1];
	r += M4(2.411e-03, 1.447e-02, 1.764e-01, 4.568e-02, -1.449e-03, -6.816e-02, 5.051e-02, 8.943e-02, 5.910e-02, -1.183e-01, 3.123e-01, 3.769e-02, 1.558e-01, -5.307e-02, 1.618e-01, 5.112e-02) * s3[y+1][x+2];
	r += M4(-5.050e-03, -1.541e-02, -1.594e-02, 2.765e-02, 4.069e-02, 3.548e-03, 1.655e-02, -4.593e-02, 2.374e-02, 1.502e-02, -1.286e-02, -3.744e-02, -2.289e-02, -8.235e-03, 3.334e-02, 1.534e-02) * s3[y+2][x+0];
	r += M4(5.799e-02, 2.529e-02, -1.741e-02, -3.633e-02, -2.728e-01, -6.529e-03, 7.238e-02, 3.110e-02, -1.429e-01, 5.303e-02, 6.958e-02, -1.323e-01, 2.883e-03, -5.538e-03, 4.961e-02, 6.348e-02) * s3[y+2][x+1];
	r += M4(-6.470e-02, -2.236e-03, 1.517e-02, -5.829e-03, -5.444e-02, 1.506e-02, 2.319e-02, 1.604e-02, -1.300e-02, -1.867e-03, 8.077e-03, 5.849e-02, -6.124e-02, 2.548e-02, 2.278e-02, 1.945e-02) * s3[y+2][x+2];
	r += V4(1.254e-02, -1.472e-03, -7.558e-03, 2.128e-03);
	return vec4(r);
}
vec4 f1(int x, int y) {
	V4 r = V4(0.0);
	r += M4(1.941e-02, 2.672e-02, -9.256e-02, 8.358e-02, 1.929e-04, 5.572e-02, 4.026e-02, -2.907e-02, 3.444e-02, 7.382e-02, 1.638e-02, 2.144e-02, 5.861e-03, -1.887e-02, 3.212e-02, 1.877e-03) * s0[y+0][x+0];
	r += M4(4.889e-02, 1.593e-01, 7.422e-02, -1.003e-01, 4.741e-03, 4.408e-02, -1.202e-01, 1.597e-02, -3.349e-02, 1.309e-02, -1.749e-02, -3.589e-01, 1.237e-02, -1.424e-02, -5.435e-02, -5.379e-02) * s0[y+0][x+1];
	r += M4(-1.464e-02, -2.072e-02, -5.441e-02, 1.229e-01, 2.596e-02, 8.786e-02, 3.415e-02, -6.833e-02, -4.416e-02, -7.672e-02, -2.209e-02, 5.392e-02, -2.382e-02, -1.550e-02, 2.554e-02, -1.044e-01) * s0[y+0][x+2];
	r += M4(-1.772e-02, 1.144e-01, -1.478e-01, -2.865e-02, -6.238e-02, -3.949e-04, -7.205e-03, 5.743e-02, 2.017e-01, -5.376e-02, 3.225e-03, 2.609e-03, -1.554e-02, -9.317e-03, 3.629e-02, 1.136e-01) * s0[y+1][x+0];
	r += M4(-2.671e-02, 7.415e-02, 1.509e-01, 2.559e-01, 2.174e-01, 3.972e-01, -1.688e-01, -2.006e-01, -2.115e-01, -1.166e-01, 2.037e-02, 9.867e-02, -3.496e-02, 4.971e-02, -2.103e-02, -2.548e-02) * s0[y+1][x+1];
	r += M4(7.983e-02, 1.540e-01, 3.206e-02, -3.634e-02, 1.006e-01, 9.559e-02, 1.014e-01, -2.620e-03, 1.174e-01, 2.574e-02, 1.290e-01, 1.065e-01, -6.462e-02, 1.166e-02, 6.190e-02, 8.175e-03) * s0[y+1][x+2];
	r += M4(-5.044e-02, -8.270e-02, -1.004e-01, -3.294e-02, 4.141e-02, -1.282e-02, 2.442e-05, 4.100e-02, -8.027e-02, 7.920e-02, -7.527e-03, -3.465e-02, 3.147e-02, 4.509e-02, 2.216e-02, 2.436e-02) * s0[y+2][x+0];
	r += M4(8.882e-02, 5.831e-02, 1.324e-01, 1.757e-03, -2.445e-03, 7.319e-04, -1.077e-01, -3.636e-02, 2.963e-02, -1.978e-01, 1.430e-01, -3.785e-02, -6.579e-02, -5.485e-02, -6.519e-02, -1.192e-01) * s0[y+2][x+1];
	r += M4(1.333e-01, 3.685e-02, -4.395e-03, -2.215e-02, 8.472e-02, -1.388e-02, 5.470e-02, -3.541e-02, 8.960e-02, -9.691e-02, 1.830e-02, 2.428e-03, -1.606e-02, -8.356e-04, 1.345e-01, -2.523e-03) * s0[y+2][x+2];
	r += M4(1.174e-02, -8.427e-02, -7.752e-02, 2.325e-02, -2.717e-02, 1.170e-01, 4.407e-02, -2.826e-02, 1.407e-02, 1.136e-02, 1.376e-02, 7.706e-03, 6.972e-02, 1.599e-02, 1.687e-02, 1.499e-01) * s1[y+0][x+0];
	r += M4(1.708e-03, 6.684e-02, 1.018e-01, -1.243e-01, -4.256e-03, 2.186e-01, -6.455e-02, -7.242e-02, -3.120e-03, 1.680e-02, -1.803e-02, -7.668e-02, -3.940e-02, -4.184e-01, -7.723e-02, -1.258e-01) * s1[y+0][x+1];
	r += M4(-2.575e-03, -1.836e-02, -1.682e-02, 4.961e-02, -6.394e-03, 1.465e-01, 5.546e-02, -1.112e-01, 3.232e-03, 3.505e-03, -3.954e-04, -3.286e-02, -2.117e-02, 4.402e-02, -1.061e-02, -8.294e-02) * s1[y+0][x+2];
	r += M4(7.207e-03, 5.471e-02, -6.762e-02, 2.863e-02, -1.253e-01, 5.020e-02, -1.166e-01, -3.451e-02, -9.403e-03, -4.548e-02, 1.113e-02, -1.990e-02, -1.203e-02, 6.336e-02, -3.309e-02, 1.750e-01) * s1[y+1][x+0];
	r += M4(5.225e-02, 1.018e-01, 2.027e-01, -5.126e-01, 5.761e-02, -1.689e-01, -9.822e-02, -7.640e-03, 1.229e-01, -1.014e-01, -1.066e-02, 1.641e-01, 1.114e-01, -3.082e-02, 8.449e-03, -2.081e-01) * s1[y+1][x+1];
	r += M4(2.439e-02, -6.763e-02, -2.116e-02, 2.019e-03, 3.525e-02, 1.956e-01, 1.479e-01, -1.016e-01, -1.154e-01, -1.974e-01, -2.453e-02, 8.279e-02, 2.002e-01, -3.493e-02, -3.352e-02, 1.714e-01) * s1[y+1][x+2];
	r += M4(-1.418e-02, -1.014e-01, -1.489e-01, -5.306e-02, -9.107e-02, 4.795e-02, 1.305e-02, 5.702e-03, -4.529e-02, -4.749e-02, -1.579e-02, 8.884e-03, -2.975e-02, 9.026e-02, 1.225e-02, 5.373e-02) * s1[y+2][x+0];
	r += M4(-1.148e-01, 2.076e-01, 2.604e-01, -5.669e-02, 9.184e-02, 6.590e-02, -5.086e-02, -9.160e-02, 1.773e-01, -1.156e-01, -4.823e-02, 3.477e-02, 2.854e-01, -1.613e-01, 1.440e-03, 1.028e-01) * s1[y+2][x+1];
	r += M4(6.798e-02, 9.691e-03, -1.820e-02, -3.751e-02, -3.390e-02, 8.129e-02, 1.092e-01, -6.412e-02, -3.638e-03, 2.404e-02, 6.562e-03, -4.925e-02, -5.632e-02, 1.441e-01, -8.999e-02, -8.199e-02) * s1[y+2][x+2];
	r += M4(-2.462e-02, 3.278e-02, 1.174e-02, -7.060e-03, -5.595e-02, 5.509e-02, 1.536e-02, -4.444e-02, -2.475e-02, -2.018e-02, -3.475e-02, -3.250e-02, 1.247e-02, 1.550e-01, 6.668e-03, 1.253e-02) * s2[y+0][x+0];
	r += M4(-1.507e-02, 8.328e-03, 1.769e-02, -4.013e-02, -5.523e-02, -6.152e-02, 1.939e-02, 7.211e-02, -1.200e-02, -2.076e-01, -2.602e-02, 3.979e-02, 5.737e-02, 1.188e-01, 6.711e-02, 5.465e-02) * s2[y+0][x+1];
	r += M4(1.938e-02, 2.813e-02, 3.843e-02, -6.016e-02, 5.755e-02, 3.382e-01, -1.030e-02, -1.101e-01, 2.072e-02, -5.039e-03, 3.333e-02, -1.238e-01, -2.325e-02, 2.499e-02, -1.627e-02, 3.893e-03) * s2[y+0][x+2];
	r += M4(1.121e-01, -2.534e-02, 1.331e-01, -2.428e-02, 2.440e-02, -4.249e-02, 3.776e-02, -4.384e-02, -6.468e-02, -2.069e-02, -9.528e-02, -8.886e-03, 3.739e-02, 6.663e-02, -1.307e-02, -6.633e-02) * s2[y+1][x+0];
	r += M4(-1.480e-01, -1.017e-01, -2.086e-01, 7.639e-02, -1.827e-01, -4.622e-01, -1.840e-01, 2.709e-01, 1.279e-01, 3.385e-02, 1.674e-01, 1.481e-01, 4.954e-02, -1.357e-01, 9.732e-02, 1.199e-01) * s2[y+1][x+1];
	r += M4(-2.769e-02, -1.605e-02, 8.375e-02, -6.699e-03, 9.350e-02, 2.098e-01, -5.338e-02, -1.307e-01, -9.128e-03, -1.560e-01, -7.092e-02, 1.236e-02, 1.667e-01, 1.761e-01, 1.557e-01, -1.528e-01) * s2[y+1][x+2];
	r += M4(-6.223e-02, 4.552e-03, -9.482e-03, -3.628e-02, -1.663e-02, 6.640e-02, 1.118e-02, 9.169e-03, 1.986e-02, -5.640e-02, -1.272e-02, 2.185e-02, 1.459e-02, -3.839e-02, -7.615e-02, 1.131e-02) * s2[y+2][x+0];
	r += M4(-8.237e-02, -4.858e-02, 7.577e-02, 1.199e-02, 1.101e-01, 1.011e-01, 2.543e-02, -8.638e-03, 3.219e-02, 3.012e-02, 1.479e-01, 1.966e-02, 1.303e-01, 1.962e-01, 5.808e-02, -1.857e-03) * s2[y+2][x+1];
	r += M4(7.984e-02, -1.356e-02, 1.348e-01, -7.015e-02, 5.512e-02, -5.011e-02, -2.964e-02, 1.597e-02, 1.813e-02, 2.827e-02, -4.930e-02, -1.375e-01, -1.857e-02, 1.372e-01, 1.101e-02, 6.388e-02) * s2[y+2][x+2];
	r += M4(1.788e-03, -2.446e-02, 3.791e-02, -2.151e-02, -4.221e-02, 7.876e-02, -1.513e-03, -3.318e-03, -1.337e-02, -6.673e-03, -1.412e-03, -4.889e-02, -2.122e-02, 6.163e-02, 1.350e-02, 4.038e-02) * s3[y+0][x+0];
	r += M4(-7.300e-02, -1.389e-02, -5.946e-02, 1.016e-02, 7.854e-04, -1.967e-02, -4.723e-03, 3.626e-02, -4.893e-02, -7.750e-02, -1.218e-01, 4.470e-02, 9.848e-03, 3.853e-02, 8.322e-02, 1.574e-02) * s3[y+0][x+1];
	r += M4(1.120e-02, 2.466e-02, 7.075e-02, -2.376e-02, 4.554e-02, 2.549e-02, -4.270e-02, 7.168e-03, 4.598e-02, 5.448e-03, 1.075e-01, 4.327e-02, -2.715e-02, 8.735e-02, -1.244e-01, 2.754e-02) * s3[y+0][x+2];
	r += M4(1.223e-01, 1.089e-01, 3.374e-02, -3.794e-02, -1.160e-03, 5.001e-02, -1.750e-02, 4.981e-03, -5.779e-03, -6.725e-02, -6.912e-03, 1.964e-02, 6.417e-02, 4.252e-02, 3.950e-02, -1.376e-02) * s3[y+1][x+0];
	r += M4(-1.838e-01, -6.048e-02, -3.525e-01, 1.045e-01, -1.948e-01, -1.081e-01, 3.449e-02, 9.684e-02, 5.841e-02, 1.668e-02, -9.553e-02, 1.821e-01, -9.983e-02, 4.487e-02, -1.532e-02, -3.290e-02) * s3[y+1][x+1];
	r += M4(9.138e-02, -1.692e-03, 7.887e-02, 1.424e-02, 8.755e-02, -6.558e-02, 1.162e-01, -2.578e-02, 1.513e-01, 1.129e-02, 1.095e-01, 2.674e-02, -2.444e-02, 1.685e-01, -2.135e-01, 3.611e-02) * s3[y+1][x+2];
	r += M4(4.817e-02, 1.027e-02, -2.467e-02, -3.560e-02, 4.921e-02, -1.395e-02, -8.179e-02, 5.997e-02, -4.913e-02, 2.489e-02, 6.867e-03, -2.673e-02, 6.102e-02, -9.900e-03, 9.418e-03, 2.505e-03) * s3[y+2][x+0];
	r += M4(-2.071e-01, 3.370e-02, -1.370e-02, 1.920e-02, 9.370e-02, 1.248e-01, 9.263e-02, -5.703e-02, 6.984e-02, 7.031e-03, 3.155e-03, 7.513e-02, -9.296e-02, 1.540e-02, -8.925e-02, -2.517e-03) * s3[y+2][x+1];
	r += M4(1.017e-01, -2.459e-02, 9.177e-02, -1.527e-03, 2.014e-02, 4.185e-02, -5.865e-02, -2.481e-02, 1.834e-01, 4.701e-02, 3.646e-02, -9.519e-02, 7.156e-02, 8.674e-02, -4.481e-02, 2.764e-02) * s3[y+2][x+2];
	r += V4(-1.000e-02, -6.019e-03, 3.603e-03, -1.182e-02);
	return vec4(r);
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv5_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
			s2[ay][ax] = l1(x - 1, y - 1);
			s1[ay][ax] = -max(-s0[ay][ax], V4(0.0));
			s0[ay][ax] = max(s0[ay][ax], V4(0.0));
			s3[ay][ax] = -max(-s2[ay][ax], V4(0.0));
			s2[ay][ax] = max(s2[ay][ax], V4(0.0));
		}
	}
	barrier();
	vec4 r0 = f0(xy.x, xy.y);
	vec4 r1 = f1(xy.x, xy.y);
	imageStore(out_image, opos + ivec2(0, 0), r0);
	imageStore(out_image, opos + ivec2(1, 0), r1);
}


//!DESC CuNNy-6x8C-DS-out
//!HOOK LUMA
//!COMPUTE 8 8 8 8
//!BIND conv6
//!BIND LUMA
//!SAVE out
//!WIDTH LUMA.w
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
	#define V4 f16vec4
	#define M4 f16mat4
	#define F float16_t
#else
	#define V4 vec4
	#define M4 mat4
	#define F float
#endif
#define l0(x, y) V4(texelFetch(conv6_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv6_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 s0[10][10];
shared V4 s1[10][10];
shared V4 s2[10][10];
shared V4 s3[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += M4(1.165e-02, 2.727e-02, 1.107e-02, 2.384e-02, -6.104e-02, 1.904e-02, -1.141e-02, 1.387e-02, -7.642e-02, -7.933e-02, 3.343e-02, -2.161e-02, -1.265e-01, 4.328e-03, -4.272e-02, -4.585e-03) * s0[y+0][x+0];
	r += M4(-1.015e-01, 1.679e-02, 2.298e-02, 2.568e-02, 4.400e-02, -2.367e-02, 3.843e-02, 5.120e-02, -4.189e-05, -1.160e-01, 3.388e-02, 3.231e-02, 1.684e-01, 2.780e-03, -4.660e-02, -9.718e-02) * s0[y+0][x+1];
	r += M4(-1.425e-02, -9.281e-02, 4.184e-02, 7.639e-02, 9.845e-03, 5.826e-03, 1.524e-02, -5.737e-03, 1.334e-02, 6.909e-02, 8.543e-03, 1.695e-02, -2.332e-02, -2.864e-02, 1.852e-02, -5.655e-03) * s0[y+0][x+2];
	r += M4(4.511e-02, 9.268e-03, -2.939e-03, 1.012e-02, 3.732e-02, 2.112e-02, -8.905e-02, 8.736e-03, 3.662e-01, 1.249e-02, -1.522e-01, -8.439e-02, -1.315e-03, -1.038e-01, 1.197e-01, -3.064e-02) * s0[y+1][x+0];
	r += M4(5.865e-03, 1.022e-01, -2.183e-01, -3.534e-02, -2.597e-01, 4.441e-02, -5.772e-02, -1.296e-01, 7.417e-02, 6.660e-01, -5.152e-01, -4.238e-01, -6.426e-01, -1.685e-01, 3.389e-01, 5.645e-01) * s0[y+1][x+1];
	r += M4(4.620e-03, 4.066e-02, -6.435e-02, -1.657e-01, -8.585e-03, -2.428e-01, 4.594e-02, 6.854e-02, 1.158e-01, -7.332e-02, 7.677e-02, -6.372e-02, 5.433e-02, -2.725e-01, 2.779e-02, -2.545e-02) * s0[y+1][x+2];
	r += M4(-4.335e-02, -4.814e-03, 2.280e-02, 1.277e-02, -8.620e-03, -3.500e-03, 5.198e-02, -2.157e-03, -1.477e-02, -1.776e-02, 6.525e-02, -1.854e-02, 4.765e-02, 3.960e-03, 1.558e-02, -2.211e-02) * s0[y+2][x+0];
	r += M4(3.108e-03, -3.223e-02, 5.555e-02, 7.081e-02, 5.411e-02, 4.870e-02, 6.209e-02, 2.058e-01, -1.313e-01, -7.964e-02, -3.487e-02, 1.754e-01, 9.643e-02, 9.392e-02, -6.213e-02, -5.874e-02) * s0[y+2][x+1];
	r += M4(-1.043e-02, -4.981e-03, -1.367e-02, -1.240e-03, 4.046e-02, 4.309e-02, -1.741e-02, -1.063e-01, 3.746e-02, 1.863e-03, 2.379e-02, -7.213e-02, -2.070e-02, 1.797e-03, 1.253e-02, 4.095e-02) * s0[y+2][x+2];
	r += M4(1.246e-02, 3.400e-02, 2.159e-02, 3.291e-02, -3.163e-02, -9.635e-03, -2.122e-02, -2.590e-02, -6.443e-02, -1.737e-02, -5.686e-03, -2.789e-02, -2.016e-02, -4.112e-03, -2.526e-02, 9.885e-03) * s1[y+0][x+0];
	r += M4(-3.080e-01, -9.424e-02, 1.265e-01, 1.196e-01, 5.041e-02, 1.576e-01, 3.368e-02, 3.940e-02, -4.920e-02, -9.751e-02, 1.301e-02, 4.850e-03, 2.090e-02, 3.217e-03, 1.283e-02, -5.094e-02) * s1[y+0][x+1];
	r += M4(-3.706e-02, 8.911e-02, -2.173e-02, 1.607e-01, -3.885e-03, -1.304e-01, 8.183e-02, 2.466e-02, 1.059e-02, -2.055e-03, 6.965e-03, 2.788e-02, -2.552e-02, -5.213e-02, 2.034e-02, 3.413e-02) * s1[y+0][x+2];
	r += M4(8.014e-02, -2.599e-03, 1.074e-01, 2.796e-02, -2.929e-02, -6.817e-02, 2.348e-01, 6.283e-03, 9.890e-02, 1.847e-02, -6.660e-02, 1.126e-02, -2.230e-02, 4.444e-03, 3.229e-04, -1.266e-02) * s1[y+1][x+0];
	r += M4(-3.679e-02, 3.918e-01, -5.929e-01, 1.101e-01, -6.018e-01, -6.209e-01, -1.242e-01, 2.897e-01, -3.275e-02, 1.081e-01, -1.528e-02, -1.502e-01, -7.997e-02, -6.715e-02, 5.754e-02, 5.001e-02) * s1[y+1][x+1];
	r += M4(2.860e-02, 7.397e-02, -2.512e-02, -1.167e-01, -5.679e-03, 4.637e-03, 1.310e-01, -3.773e-02, 6.260e-02, -2.973e-02, 8.446e-02, 1.130e-01, 3.523e-02, -3.947e-02, -6.281e-03, -2.105e-02) * s1[y+1][x+2];
	r += M4(-1.934e-02, 1.113e-02, -1.375e-02, 7.118e-03, -1.431e-02, 2.456e-02, 2.970e-02, 8.053e-03, -2.888e-02, 1.176e-02, 5.579e-02, 3.332e-02, 3.332e-02, 6.882e-03, 1.052e-02, 8.454e-03) * s1[y+2][x+0];
	r += M4(-2.934e-02, -1.703e-02, 7.739e-02, 9.740e-02, -4.398e-02, 6.464e-03, 6.779e-01, 1.476e-01, -1.435e-02, -4.846e-02, -9.204e-02, 4.890e-02, 3.619e-02, 6.164e-02, 2.499e-04, 2.340e-02) * s1[y+2][x+1];
	r += M4(-2.072e-02, 3.788e-03, -1.924e-02, 4.946e-02, -6.823e-02, -2.352e-01, -1.124e-01, 2.464e-01, 3.656e-02, 5.591e-02, 1.654e-03, -9.893e-02, -7.520e-03, -1.261e-02, -1.198e-02, -4.102e-02) * s1[y+2][x+2];
	r += M4(-1.873e-02, -1.355e-02, 8.093e-02, 1.904e-02, -2.019e-02, 1.283e-02, -3.004e-03, 4.713e-03, 5.443e-02, -1.202e-02, -4.455e-02, 2.434e-03, 9.682e-02, 6.340e-03, 3.971e-02, 3.158e-02) * s2[y+0][x+0];
	r += M4(-6.200e-01, 1.178e-01, 1.916e-01, 4.014e-01, 1.011e-03, -3.599e-03, 1.423e-03, -8.204e-03, 1.155e-02, 5.112e-02, -4.508e-02, -1.087e-01, -4.867e-02, 7.650e-02, 1.378e-02, 5.976e-02) * s2[y+0][x+1];
	r += M4(-2.002e-02, -6.861e-02, -4.333e-02, 1.002e-01, 3.155e-02, -2.989e-02, 2.139e-02, 1.349e-02, 4.496e-03, 4.220e-02, -4.153e-02, -1.497e-02, -8.547e-03, 6.620e-02, -2.311e-02, 1.844e-02) * s2[y+0][x+2];
	r += M4(-1.833e-01, -2.346e-02, 1.141e-01, 2.052e-02, 1.200e-01, -4.769e-03, 9.927e-03, 7.672e-03, -4.949e-03, -2.779e-02, 1.553e-01, -2.744e-02, -1.402e-01, -2.362e-02, -2.790e-02, -4.213e-02) * s2[y+1][x+0];
	r += M4(4.470e-02, 2.192e-01, -3.076e-01, 6.353e-01, 2.500e-01, 4.076e-01, 1.236e-01, 1.989e-01, -5.207e-02, -4.132e-02, 4.716e-02, 2.257e-01, -3.999e-01, -5.722e-01, -4.494e-01, -3.945e-01) * s2[y+1][x+1];
	r += M4(-1.243e-02, -6.935e-02, 7.391e-02, -1.082e-01, -4.324e-03, 4.552e-02, 1.069e-02, -2.817e-02, -1.532e-02, -5.922e-02, 2.371e-02, -7.045e-03, 1.993e-02, 6.864e-02, -1.828e-02, -1.052e-02) * s2[y+1][x+2];
	r += M4(-3.796e-03, -8.944e-03, -3.023e-02, -1.713e-02, -2.113e-02, 7.515e-03, 6.563e-02, 1.097e-02, 1.196e-02, 2.087e-02, -4.904e-02, 1.085e-02, 5.606e-02, 2.666e-02, -7.302e-03, 1.410e-02) * s2[y+2][x+0];
	r += M4(-4.290e-02, 4.260e-02, -2.644e-02, 7.315e-02, 3.992e-02, -1.708e-03, 1.102e-01, 1.519e-01, 2.320e-02, 6.397e-03, -4.734e-02, -1.110e-01, 7.725e-02, 7.196e-02, 3.894e-02, -1.007e-01) * s2[y+2][x+1];
	r += M4(-4.992e-02, -2.985e-02, -2.575e-02, -6.054e-02, -1.489e-03, -5.623e-03, 9.796e-03, 4.007e-02, 1.359e-02, 3.137e-02, 1.438e-02, 1.047e-02, -2.743e-02, -1.200e-02, 4.187e-02, 1.160e-01) * s2[y+2][x+2];
	r += M4(4.752e-02, 3.369e-02, 3.921e-02, 2.066e-02, 6.353e-03, -5.073e-04, -8.671e-03, 6.961e-04, 7.154e-02, -1.116e-01, -5.574e-02, -5.617e-02, 8.149e-02, 1.406e-02, 1.733e-02, 1.815e-02) * s3[y+0][x+0];
	r += M4(9.884e-03, 8.740e-02, -2.293e-02, 1.729e-01, -5.386e-02, -6.713e-03, -9.706e-03, -1.215e-02, -3.795e-01, 5.110e-01, -1.909e-01, -5.086e-02, 1.345e-02, 1.076e-01, 2.216e-02, 5.209e-02) * s3[y+0][x+1];
	r += M4(-6.731e-02, -1.143e-02, -9.851e-02, -1.820e-01, 1.965e-02, -2.304e-02, 1.637e-02, 1.050e-02, 1.117e-01, -5.848e-02, 2.216e-02, -2.088e-02, 5.217e-03, 2.586e-02, -1.632e-02, 6.981e-03) * s3[y+0][x+2];
	r += M4(1.578e-02, -3.477e-03, 5.609e-02, 2.174e-02, 2.545e-02, -8.034e-03, -1.208e-05, -7.584e-03, 3.882e-02, -9.806e-02, 2.102e-01, -1.246e-01, -1.353e-01, -1.215e-02, -7.018e-02, -2.004e-02) * s3[y+1][x+0];
	r += M4(-2.601e-02, 7.403e-02, 7.952e-03, 2.415e-02, 2.101e-02, 6.711e-02, -1.994e-02, 7.446e-03, -4.424e-01, 1.672e-01, -5.098e-01, 8.466e-01, -1.435e-01, -2.417e-01, -1.584e-01, -1.421e-01) * s3[y+1][x+1];
	r += M4(-5.497e-02, -8.916e-02, 5.033e-03, 9.687e-02, -1.686e-02, 9.463e-03, -2.092e-02, -1.923e-02, 7.280e-02, -7.912e-02, 1.184e-01, -1.716e-01, 4.494e-02, -6.409e-03, 1.150e-02, -6.834e-02) * s3[y+1][x+2];
	r += M4(-1.083e-02, -1.501e-02, -1.101e-02, -3.271e-02, -2.038e-02, 5.414e-03, 3.262e-02, -1.504e-03, 3.544e-02, 5.362e-03, -1.861e-02, -2.394e-02, 4.355e-02, 1.312e-02, 2.310e-02, 2.683e-03) * s3[y+2][x+0];
	r += M4(-6.807e-03, 6.807e-03, 1.014e-02, 6.471e-02, 2.308e-02, -1.428e-02, 2.896e-02, 5.855e-02, 3.578e-02, 1.546e-02, -1.052e-01, -1.274e-01, 1.057e-01, 7.629e-02, 3.935e-02, -9.675e-03) * s3[y+2][x+1];
	r += M4(-1.335e-02, -9.708e-03, -3.659e-02, -6.227e-02, -1.366e-02, 9.600e-03, -1.003e-02, 8.545e-03, -1.091e-02, 3.048e-02, 2.713e-02, 5.853e-02, -6.587e-03, 7.908e-03, 4.836e-02, 7.152e-02) * s3[y+2][x+2];
	r += V4(7.458e-04, -2.828e-04, 1.217e-03, 1.727e-04);
	return tanh(vec4(r));
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(1, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv6_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
			s2[ay][ax] = l1(x - 1, y - 1);
			s1[ay][ax] = -max(-s0[ay][ax], V4(0.0));
			s0[ay][ax] = max(s0[ay][ax], V4(0.0));
			s3[ay][ax] = -max(-s2[ay][ax], V4(0.0));
			s2[ay][ax] = max(s2[ay][ax], V4(0.0));
		}
	}
	barrier();
	vec4 r0 = f0(xy.x, xy.y);
	imageStore(out_image, opos + ivec2(0, 0), r0);
}


//!DESC CuNNy-6x8C-DS-shuffle
//!HOOK LUMA
//!BIND out
//!BIND easu
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 1
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
	#define V4 f16vec4
	#define M4 f16mat4
	#define F float16_t
#else
	#define V4 vec4
	#define M4 mat4
	#define F float
#endif
vec4 hook() {
	vec4 r = vec4(0.0);
	vec2 f = fract(out_pos * out_size);
	ivec2 i = ivec2(f * vec2(2.0));
	r.r = out_tex((vec2(0.5) - f) * out_pt + out_pos)[2*i.y + i.x];
	r.r += easu_tex(easu_pos).r;
	r.a = 1.0;
	return clamp(r, 0.0, 1.0);
}
