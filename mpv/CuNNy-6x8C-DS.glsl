// CuNNy 6x8C DS
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

// FSR mpv | modified
// Copyright (c) 2021 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// FidelityFX FSR v1.0.2 by AMD
// ported to mpv by agyild

//!DESC CuNNy-6x8C-DS-EASU
//!HOOK LUMA
//!BIND LUMA
//!SAVE easu
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
//!COMPONENTS 1

float APrxLoRcpF1(float a) {
	return uintBitsToFloat(uint(0x7ef07ebb) - floatBitsToUint(a));
}

float APrxLoRsqF1(float a) {
	return uintBitsToFloat(uint(0x5f347d74) - (floatBitsToUint(a) >> uint(1)));
}

float AMin3F1(float x, float y, float z) {
	return min(x, min(y, z));
}

float AMax3F1(float x, float y, float z) {
	return max(x, max(y, z));
}

void tap(inout float aC, inout float aW, vec2 off, vec2 dir, vec2 len,
         float lob, float clp, float c){
	vec2 v;
	v.x = (off.x * ( dir.x)) + (off.y * dir.y);
	v.y = (off.x * (-dir.y)) + (off.y * dir.x);
	v *= len;
	float d2 = v.x * v.x + v.y * v.y;
	d2 = min(d2, clp);
	float wB = float(2.0 / 5.0) * d2 + -1.0;
	float wA = lob * d2 + -1.0;
	wB *= wB;
	wA *= wA;
	wB = float(25.0 / 16.0) * wB + float(-(25.0 / 16.0 - 1.0));
	float w = wB * wA;
	aC += c * w;
	aW += w;
}

void set(inout vec2 dir, inout float len, vec2 pp, bool biS, bool biT,
         bool biU, bool biV, float lA, float lB, float lC, float lD, float lE){
	float w = 0.0;
	if (biS)
		w = (1.0 - pp.x) * (1.0 - pp.y);
	if (biT)
		w =        pp.x  * (1.0 - pp.y);
	if (biU)
		w = (1.0 - pp.x) *        pp.y;
	if (biV)
		w =        pp.x  *        pp.y;
	float dc = lD - lC;
	float cb = lC - lB;
	float lenX = max(abs(dc), abs(cb));
	lenX = APrxLoRcpF1(lenX);
	float dirX = lD - lB;
	lenX = clamp(abs(dirX) * lenX, 0.0, 1.0);
	lenX *= lenX;
	float ec = lE - lC;
	float ca = lC - lA;
	float lenY = max(abs(ec), abs(ca));
	lenY = APrxLoRcpF1(lenY);
	float dirY = lE - lA;
	lenY = clamp(abs(dirY) * lenY, 0.0, 1.0);
	lenY *= lenY;
	dir += vec2(dirX, dirY) * w;
	len += dot(vec2(w), vec2(lenX, lenY));
}

vec4 hook() {
	vec4 pix = vec4(0.0, 0.0, 0.0, 1.0);
	vec2 pp = LUMA_pos * LUMA_size - vec2(0.5);
	vec2 fp = floor(pp);
	pp -= fp;
#if (defined(LUMA_gather) && (__VERSION__ >= 400 || (GL_ES && __VERSION__ >= 310)))
	vec4 bczzL = LUMA_gather(vec2((fp + vec2(1.0, -1.0)) * LUMA_pt), 0);
	vec4 ijfeL = LUMA_gather(vec2((fp + vec2(0.0,  1.0)) * LUMA_pt), 0);
	vec4 klhgL = LUMA_gather(vec2((fp + vec2(2.0,  1.0)) * LUMA_pt), 0);
	vec4 zzonL = LUMA_gather(vec2((fp + vec2(1.0,  3.0)) * LUMA_pt), 0);
#else
	float b = LUMA_tex(vec2((fp + vec2(0.5, -0.5)) * LUMA_pt)).r;
	float c = LUMA_tex(vec2((fp + vec2(1.5, -0.5)) * LUMA_pt)).r;
	float e = LUMA_tex(vec2((fp + vec2(-0.5, 0.5)) * LUMA_pt)).r;
	float f = LUMA_tex(vec2((fp + vec2( 0.5, 0.5)) * LUMA_pt)).r;
	float g = LUMA_tex(vec2((fp + vec2( 1.5, 0.5)) * LUMA_pt)).r;
	float h = LUMA_tex(vec2((fp + vec2( 2.5, 0.5)) * LUMA_pt)).r;
	float i = LUMA_tex(vec2((fp + vec2(-0.5, 1.5)) * LUMA_pt)).r;
	float j = LUMA_tex(vec2((fp + vec2( 0.5, 1.5)) * LUMA_pt)).r;
	float k = LUMA_tex(vec2((fp + vec2( 1.5, 1.5)) * LUMA_pt)).r;
	float l = LUMA_tex(vec2((fp + vec2( 2.5, 1.5)) * LUMA_pt)).r;
	float n = LUMA_tex(vec2((fp + vec2(0.5, 2.5) ) * LUMA_pt)).r;
	float o = LUMA_tex(vec2((fp + vec2(1.5, 2.5) ) * LUMA_pt)).r;
	vec4 bczzL = vec4(b, c, 0.0, 0.0);
	vec4 ijfeL = vec4(i, j, f, e);
	vec4 klhgL = vec4(k, l, h, g);
	vec4 zzonL = vec4(0.0, 0.0, o, n);
#endif
	float bL = bczzL.x;
	float cL = bczzL.y;
	float iL = ijfeL.x;
	float jL = ijfeL.y;
	float fL = ijfeL.z;
	float eL = ijfeL.w;
	float kL = klhgL.x;
	float lL = klhgL.y;
	float hL = klhgL.z;
	float gL = klhgL.w;
	float oL = zzonL.z;
	float nL = zzonL.w;
	vec2 dir = vec2(0.0);
	float len = 0.0;
	set(dir, len, pp, true, false, false, false, bL, eL, fL, gL, jL);
	set(dir, len, pp, false, true, false, false, cL, fL, gL, hL, kL);
	set(dir, len, pp, false, false, true, false, fL, iL, jL, kL, nL);
	set(dir, len, pp, false, false, false, true, gL, jL, kL, lL, oL);
	vec2 dir2 = dir * dir;
	float dirR = dir2.x + dir2.y;
	bool zro = dirR < float(1.0 / 32768.0);
	dirR = APrxLoRsqF1(dirR);
	dirR = zro ? 1.0 : dirR;
	dir.x = zro ? 1.0 : dir.x;
	dir *= vec2(dirR);
	len = len * 0.5;
	len *= len;
	float stretch = (dir.x * dir.x + dir.y * dir.y) * APrxLoRcpF1(max(abs(dir.x), abs(dir.y)));
	vec2 len2 = vec2(1.0 + (stretch - 1.0) * len, 1.0 + -0.5 * len);
	float lob = 0.5 + float((1.0 / 4.0 - 0.04) - 0.5) * len;
	float clp = APrxLoRcpF1(lob);
	float aC = 0.0;
	float aW = 0.0;
	tap(aC, aW, vec2( 0.0,-1.0) - pp, dir, len2, lob, clp, bL);
	tap(aC, aW, vec2( 1.0,-1.0) - pp, dir, len2, lob, clp, cL);
	tap(aC, aW, vec2(-1.0, 1.0) - pp, dir, len2, lob, clp, iL);
	tap(aC, aW, vec2( 0.0, 1.0) - pp, dir, len2, lob, clp, jL);
	tap(aC, aW, vec2( 0.0, 0.0) - pp, dir, len2, lob, clp, fL);
	tap(aC, aW, vec2(-1.0, 0.0) - pp, dir, len2, lob, clp, eL);
	tap(aC, aW, vec2( 1.0, 1.0) - pp, dir, len2, lob, clp, kL);
	tap(aC, aW, vec2( 2.0, 1.0) - pp, dir, len2, lob, clp, lL);
	tap(aC, aW, vec2( 2.0, 0.0) - pp, dir, len2, lob, clp, hL);
	tap(aC, aW, vec2( 1.0, 0.0) - pp, dir, len2, lob, clp, gL);
	tap(aC, aW, vec2( 1.0, 2.0) - pp, dir, len2, lob, clp, oL);
	tap(aC, aW, vec2( 0.0, 2.0) - pp, dir, len2, lob, clp, nL);
	pix.r = aC / aW;
	float min1 = min(AMin3F1(fL, gL, jL), kL);
	float max1 = max(AMax3F1(fL, gL, jL), kL);
	pix.r = clamp(pix.r, min1, max1);
	pix.r = clamp(pix.r, 0.0, 1.0);
	return pix;
}


//!DESC CuNNy-6x8C-DS-in
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND LUMA
//!SAVE in
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) F(texelFetch(LUMA_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(1, 1) + ivec2(0, 0), 0).r)
shared F g[1][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = LUMA_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			g[0][ay][ax] = l0(x - 1, y - 1);
		}
	}
	barrier();
	F s[3][3][1];
	V4 r0 = V4(0.0);
	V4 r1 = V4(0.0);
	s[0][0][0] = g[0][xy.y+0][xy.x+0];
	s[0][1][0] = g[0][xy.y+0][xy.x+1];
	s[0][2][0] = g[0][xy.y+0][xy.x+2];
	s[1][0][0] = g[0][xy.y+1][xy.x+0];
	s[1][1][0] = g[0][xy.y+1][xy.x+1];
	s[1][2][0] = g[0][xy.y+1][xy.x+2];
	s[2][0][0] = g[0][xy.y+2][xy.x+0];
	s[2][1][0] = g[0][xy.y+2][xy.x+1];
	s[2][2][0] = g[0][xy.y+2][xy.x+2];
	r0 += V4(-3.339e-02, -7.788e-02, -1.541e-01, -1.150e-02) * s[0][0][0];
	r1 += V4(1.163e-02, 9.686e-02, 1.176e-02, 8.580e-03) * s[0][0][0];
	r0 += V4(4.932e-02, -1.762e-01, 4.595e-02, -4.612e-01) * s[0][1][0];
	r1 += V4(-9.365e-02, -7.788e-02, 1.227e-01, -1.365e-01) * s[0][1][0];
	r0 += V4(-1.332e-01, 5.578e-02, -1.202e-01, 9.719e-03) * s[0][2][0];
	r1 += V4(-4.490e-02, 1.113e-02, 1.553e-02, 8.903e-02) * s[0][2][0];
	r0 += V4(-2.627e-01, 1.588e-01, 2.124e-01, 1.961e-04) * s[1][0][0];
	r1 += V4(-2.774e-02, -1.471e-01, -1.305e-01, -1.685e-01) * s[1][0][0];
	r0 += V4(-1.155e-02, 2.549e-01, -1.954e-01, 3.750e-01) * s[1][1][0];
	r1 += V4(-1.863e-01, -6.257e-02, 4.307e-01, -2.601e-01) * s[1][1][0];
	r0 += V4(-1.782e-02, -3.255e-01, 1.655e-01, 8.521e-02) * s[1][2][0];
	r1 += V4(-2.144e-01, 1.673e-01, 1.623e-01, -2.211e-02) * s[1][2][0];
	r0 += V4(-2.805e-02, -1.773e-01, -3.570e-02, 1.156e-02) * s[2][0][0];
	r1 += V4(-2.607e-03, -2.790e-01, 6.232e-02, -1.331e-01) * s[2][0][0];
	r0 += V4(2.832e-01, 2.214e-01, -1.091e-01, 7.983e-02) * s[2][1][0];
	r1 += V4(2.161e-01, 3.886e-01, -9.147e-02, 4.134e-02) * s[2][1][0];
	r0 += V4(1.809e-01, 1.835e-02, 2.008e-02, -7.844e-02) * s[2][2][0];
	r1 += V4(3.299e-01, -1.052e-01, -3.794e-02, 1.049e-01) * s[2][2][0];
	r0 += V4(-4.317e-02, -3.801e-04, 1.781e-03, 2.760e-04);
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(3.186e-02, -5.519e-03, -5.665e-02, 1.729e-01);
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-6x8C-DS-conv1
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND in
//!BIND LUMA
//!SAVE conv1
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 g[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = in_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			g[0][ay][ax] = l0(x - 1, y - 1);
			g[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s[3][3][2];
	V4 r0 = V4(0.0);
	V4 r1 = V4(0.0);
	s[0][0][0] = max(g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[0][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[0][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[0][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[0][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[0][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[0][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(1.164e-01, -3.204e-02, -8.910e-02, -4.311e-02, -1.740e-01, 1.110e-01, -1.040e-01, -1.408e-01, 2.120e-01, -1.322e-01, 1.032e-01, 2.159e-01, 3.579e-01, -1.140e-01, -3.194e-02, 8.928e-02) * s[0][0][0];
	r1 += M4(-1.497e-01, -9.796e-02, -8.725e-02, 1.716e-01, 8.724e-02, -2.072e-01, -4.970e-03, 1.304e-01, 1.681e-01, 2.814e-01, -2.193e-01, -5.077e-01, 2.115e-01, 8.304e-02, -8.546e-03, 1.439e-01) * s[0][0][0];
	r0 += M4(1.675e-01, 9.196e-02, -1.605e-01, -1.125e-01, 1.527e-02, 6.916e-03, -1.419e-01, -8.704e-02, -2.918e-02, -8.700e-02, 5.492e-02, -6.786e-02, 2.041e-01, -2.183e-01, 1.013e-01, -7.697e-02) * s[0][0][1];
	r1 += M4(5.095e-02, -9.762e-02, 6.534e-02, 6.298e-02, 6.876e-02, -1.037e-01, 4.447e-02, 4.248e-02, -5.811e-02, 6.247e-02, -3.310e-02, -9.714e-02, -9.042e-02, 2.583e-02, -5.693e-02, 1.937e-01) * s[0][0][1];
	r0 += M4(-2.276e-01, 4.567e-02, -3.943e-02, 1.330e-01, -3.946e-03, 6.614e-02, 3.464e-01, 1.112e-01, -4.174e-01, -3.990e-01, -4.492e-02, -9.443e-02, -1.021e-01, 3.534e-02, -4.479e-02, -1.357e-01) * s[0][1][0];
	r1 += M4(-3.974e-02, -1.311e-01, -1.704e-01, -2.528e-02, -2.388e-01, -3.734e-01, -7.589e-02, 1.981e-01, 1.595e-01, 2.353e-01, -6.671e-02, 7.758e-02, -1.806e-01, -4.533e-02, 1.106e-01, 1.034e-01) * s[0][1][0];
	r0 += M4(-2.727e-02, -1.786e-02, 1.033e-01, 2.984e-01, -1.191e-01, -1.775e-02, 2.220e-01, 2.241e-01, 2.601e-01, -4.400e-02, -6.383e-03, -4.655e-02, -2.323e-01, -3.328e-01, -1.197e-01, 1.273e-01) * s[0][1][1];
	r1 += M4(-5.571e-02, 3.496e-01, 3.163e-02, 5.077e-03, -1.671e-01, -1.712e-01, -8.559e-02, 1.302e-01, 3.424e-02, -9.675e-02, 8.182e-02, -3.938e-02, -1.438e-01, 1.064e-02, 9.968e-02, 4.308e-02) * s[0][1][1];
	r0 += M4(-3.811e-01, -1.188e-01, 5.982e-02, 8.042e-02, -1.792e-01, -1.757e-01, -2.037e-02, -6.213e-02, 4.216e-02, -4.239e-01, -1.561e-01, 2.693e-01, -1.634e-02, 1.371e-02, 8.436e-02, 6.737e-02) * s[0][2][0];
	r1 += M4(1.402e-01, -5.477e-02, 7.764e-03, -5.621e-02, 1.554e-01, -1.686e-01, -1.358e-01, -1.130e-01, -8.387e-03, -2.690e-01, -1.581e-01, -2.409e-01, -2.061e-02, -9.862e-03, 1.313e-02, -3.332e-02) * s[0][2][0];
	r0 += M4(-1.857e-01, 9.859e-02, 7.007e-02, 5.889e-02, 2.258e-01, -1.116e-01, -1.358e-02, -6.566e-02, 1.644e-02, -1.002e-03, -4.860e-02, -6.042e-02, -1.981e-02, 1.137e-01, 4.094e-02, -6.671e-03) * s[0][2][1];
	r1 += M4(-1.695e-02, 2.211e-01, -2.151e-02, 1.819e-02, -5.774e-02, 1.460e-01, -5.551e-02, -3.968e-03, -5.733e-02, -2.070e-02, -1.411e-02, -2.356e-03, -1.468e-01, -8.247e-02, -1.287e-02, -1.112e-01) * s[0][2][1];
	r0 += M4(-1.948e-01, -1.482e-01, -1.152e-01, -2.666e-02, -1.591e-02, -2.302e-01, -2.888e-01, -3.342e-01, 1.647e-01, 1.071e-01, 4.395e-01, 3.562e-01, -9.067e-02, 1.392e-01, -1.631e-01, 1.264e-01) * s[1][0][0];
	r1 += M4(5.088e-01, -8.644e-02, -3.577e-02, 1.032e-02, 6.607e-01, -2.204e-01, -8.071e-02, -1.689e-01, 9.046e-02, 4.235e-01, -7.173e-01, 9.209e-02, -1.994e-02, -9.606e-02, 5.185e-02, -6.513e-02) * s[1][0][0];
	r0 += M4(-5.851e-02, -1.462e-02, -4.744e-02, -1.810e-01, 1.412e-01, -4.484e-02, -5.029e-01, -2.748e-01, 1.949e-02, 1.814e-01, 4.046e-02, 5.213e-02, -1.541e-01, -9.939e-02, -1.724e-01, 3.931e-01) * s[1][0][1];
	r1 += M4(7.103e-02, -3.074e-02, -1.881e-01, -1.007e-01, 3.945e-02, -7.646e-02, 1.503e-01, -6.081e-02, -2.659e-02, 8.686e-02, -3.165e-01, -6.353e-02, -4.664e-01, 2.351e-01, 3.215e-02, -2.076e-01) * s[1][0][1];
	r0 += M4(-2.371e-01, -4.062e-01, 2.460e-01, 1.360e-01, -2.112e-02, -3.279e-01, 2.538e-01, 3.097e-01, 1.758e-01, 4.398e-01, -7.510e-01, -6.036e-01, -2.613e-01, 1.879e-01, 2.243e-01, -7.973e-02) * s[1][1][0];
	r1 += M4(5.988e-02, -3.127e-02, 7.781e-02, 2.775e-02, -2.458e-01, 1.868e-01, 1.376e-01, 5.229e-02, -7.513e-02, -1.145e-01, -3.214e-01, 3.286e-01, -4.081e-02, 2.744e-01, 8.384e-02, -5.780e-02) * s[1][1][0];
	r0 += M4(-1.054e-03, 2.764e-01, 3.651e-01, 6.377e-02, -1.394e-01, -4.754e-02, 5.491e-03, 3.449e-01, 2.953e-01, -8.991e-02, -3.018e-01, -7.283e-02, -4.561e-01, 2.276e-01, 1.915e-01, 6.183e-01) * s[1][1][1];
	r1 += M4(-2.459e-01, 6.360e-03, -1.136e-01, 5.091e-02, 1.585e-01, 2.396e-01, 1.367e-01, -3.050e-02, -1.021e-01, -1.365e-01, -2.050e-02, -3.926e-02, 4.812e-01, 2.259e-01, 2.028e-01, -3.272e-01) * s[1][1][1];
	r0 += M4(1.753e-01, -1.222e-01, -1.714e-01, 1.601e-01, 6.165e-02, -1.493e-02, 1.676e-01, 6.395e-02, -6.331e-02, -1.346e-01, 1.754e-01, 2.003e-01, 1.641e-01, 7.062e-02, 1.231e-01, 1.835e-01) * s[1][2][0];
	r1 += M4(2.344e-02, 2.072e-01, 1.274e-01, -1.835e-01, -3.808e-04, 2.022e-01, 5.285e-02, -3.250e-03, -1.328e-02, 9.764e-03, 2.048e-01, 4.999e-01, 8.678e-02, 2.001e-02, -8.368e-02, 2.973e-02) * s[1][2][0];
	r0 += M4(1.572e-01, 2.510e-01, 1.650e-02, 3.084e-02, 2.546e-01, 3.012e-01, -6.893e-02, -3.893e-02, 1.039e-01, 1.358e-01, 1.769e-01, 8.699e-02, -2.528e-02, 3.129e-01, 1.470e-01, 1.003e-01) * s[1][2][1];
	r1 += M4(1.411e-01, -1.475e-01, 4.691e-02, -1.431e-01, 4.750e-02, 1.822e-01, 3.283e-02, -3.034e-03, 1.385e-01, 5.411e-03, 1.951e-01, 6.454e-02, 1.761e-01, -1.490e-01, 1.294e-01, -2.677e-02) * s[1][2][1];
	r0 += M4(4.081e-02, -7.308e-02, -1.462e-01, -2.973e-02, -2.070e-01, 1.152e-01, 2.608e-01, -1.978e-01, 2.517e-02, 5.966e-01, 2.119e-01, -4.343e-02, 2.572e-02, -5.561e-02, 1.389e-01, 9.715e-02) * s[2][0][0];
	r1 += M4(1.493e-01, 2.698e-02, -1.139e-01, -5.228e-03, 3.879e-02, 4.549e-02, -3.135e-01, 1.536e-01, -2.861e-01, -1.412e-01, -1.165e-02, 8.118e-02, -1.916e-01, 2.412e-01, 3.485e-02, -1.251e-01) * s[2][0][0];
	r0 += M4(9.272e-02, -3.626e-02, -1.313e-01, -4.932e-02, -2.442e-01, -1.244e-02, -4.246e-02, -3.349e-02, -8.256e-02, -1.516e-01, 1.074e-01, 9.907e-02, -1.327e-01, -6.175e-03, 2.485e-01, 7.021e-02) * s[2][0][1];
	r1 += M4(9.619e-02, -1.347e-01, -4.839e-02, -3.725e-02, 7.823e-02, 1.983e-02, 1.092e-01, 5.821e-02, -2.173e-01, -3.547e-02, -1.090e-01, 1.429e-02, 3.851e-02, 6.410e-03, 1.467e-01, 3.093e-02) * s[2][0][1];
	r0 += M4(-2.160e-01, 9.741e-02, 2.420e-01, 1.939e-02, -3.668e-01, 2.721e-02, -1.333e-01, -3.614e-01, 1.757e-01, 5.160e-02, 5.827e-02, -5.625e-02, 5.321e-01, -1.665e-01, -1.738e-01, -7.873e-01) * s[2][1][0];
	r1 += M4(-1.121e-02, -5.618e-02, -9.724e-03, -5.383e-02, -5.377e-03, -4.650e-02, -1.742e-01, 5.396e-02, -1.878e-02, 1.456e-01, -5.930e-01, -4.809e-01, -3.513e-02, -4.530e-02, -9.750e-02, 1.260e-02) * s[2][1][0];
	r0 += M4(-4.272e-01, -5.184e-02, 2.195e-01, 7.473e-02, -1.393e-01, -1.703e-01, -3.152e-02, 9.651e-02, -6.656e-03, 4.887e-02, 1.223e-01, -1.128e-01, 1.640e-01, -2.203e-01, -3.852e-01, -8.215e-02) * s[2][1][1];
	r1 += M4(-2.707e-02, 1.512e-02, -3.027e-02, 8.128e-02, 4.695e-02, -3.521e-03, -7.510e-02, -6.879e-02, 1.067e-01, -2.151e-02, -1.199e-01, 9.007e-02, 2.791e-01, -3.896e-01, -1.989e-01, -1.037e-01) * s[2][1][1];
	r0 += M4(-6.447e-02, -4.958e-02, -6.977e-02, -8.076e-02, -1.985e-01, 8.893e-02, -4.864e-02, 3.210e-02, -2.104e-01, 2.701e-01, -2.707e-02, -5.721e-01, -4.214e-01, -2.135e-01, -5.267e-02, -1.392e-01) * s[2][2][0];
	r1 += M4(7.951e-02, 1.849e-01, -7.652e-02, 1.550e-01, -3.995e-02, -2.720e-01, 6.395e-02, -5.609e-02, -1.568e-01, 4.166e-01, -5.215e-01, -6.727e-02, -7.918e-02, 2.828e-01, -1.771e-02, 8.795e-03) * s[2][2][0];
	r0 += M4(1.553e-01, -2.731e-01, -9.449e-02, -5.891e-02, 4.281e-02, 6.318e-02, 5.850e-02, -5.385e-02, -7.989e-02, -7.352e-02, 1.996e-02, -1.917e-02, 1.586e-01, 1.819e-01, -1.322e-01, -5.943e-02) * s[2][2][1];
	r1 += M4(2.627e-02, 1.662e-02, 7.095e-02, 7.904e-02, 2.557e-02, -1.587e-01, 1.232e-02, -5.353e-02, 4.261e-02, 6.573e-02, -2.322e-01, -9.436e-02, 1.166e-01, -1.481e-01, 1.198e-01, 7.375e-02) * s[2][2][1];
	s[0][0][0] = max(g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[1][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[1][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[1][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[1][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[1][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[1][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(-2.605e-01, 2.097e-01, 1.193e-01, 1.526e-02, -1.272e-01, 8.088e-02, -2.609e-01, -8.179e-02, 9.259e-02, -1.584e-02, 8.886e-02, 9.587e-04, -9.047e-03, -2.920e-02, 2.385e-01, 1.002e-01) * s[0][0][0];
	r1 += M4(-1.602e-01, 1.173e-01, 3.136e-01, 3.846e-02, 1.581e-01, -2.673e-02, -4.280e-02, 2.200e-02, -1.022e-01, 1.536e-02, -5.375e-03, -6.450e-02, -1.563e-01, -6.869e-03, 1.661e-01, -4.419e-03) * s[0][0][0];
	r0 += M4(-1.308e-01, 2.546e-01, 8.332e-02, 3.516e-02, 2.004e-01, -5.135e-02, -1.317e-01, -6.380e-02, 2.119e-01, -3.663e-01, -6.902e-04, -1.856e-01, -1.102e-01, 1.544e-02, 2.650e-01, 1.496e-01) * s[0][0][1];
	r1 += M4(-1.633e-01, -1.519e-02, 1.507e-02, 3.616e-01, -5.075e-01, 2.997e-02, 4.780e-02, 1.275e-01, -1.507e-01, 2.395e-01, -1.276e-02, -2.040e-02, -2.939e-01, 3.530e-02, 8.551e-02, -2.677e-01) * s[0][0][1];
	r0 += M4(9.503e-02, 4.437e-01, -2.183e-01, 2.714e-03, 3.781e-03, 2.256e-01, 4.000e-01, 1.487e-01, 1.181e-01, -1.349e-01, 1.898e-01, -5.280e-02, 1.209e-01, 2.557e-01, -1.120e-01, -2.960e-02) * s[0][1][0];
	r1 += M4(-3.190e-02, 2.642e-01, 1.102e-01, -3.543e-02, -1.290e-01, 1.382e-02, -1.029e-01, 3.055e-01, 2.755e-02, -1.816e-01, 1.083e-02, 1.186e-01, -1.457e-01, 2.934e-01, -1.688e-01, -3.974e-01) * s[0][1][0];
	r0 += M4(-2.710e-01, -1.080e-02, 8.105e-02, -2.471e-01, -5.394e-01, -2.699e-02, 2.372e-01, 2.835e-01, 2.826e-01, -1.606e-01, 2.056e-01, -1.575e-01, 5.208e-02, 1.398e-01, 2.094e-02, 3.291e-02) * s[0][1][1];
	r1 += M4(-2.115e-02, 7.520e-02, 1.391e-02, 1.431e-02, 1.645e-01, 5.312e-02, 1.632e-01, 1.655e-02, -1.709e-01, -7.474e-01, 9.315e-02, -3.711e-02, -3.120e-02, 1.346e-01, -2.583e-01, -1.489e-01) * s[0][1][1];
	r0 += M4(-6.036e-02, 7.973e-02, -2.263e-02, -4.406e-02, -3.211e-01, -1.146e-01, -3.831e-01, 1.182e-01, -1.143e-01, -1.540e-03, -3.720e-02, -9.000e-02, -2.055e-01, -2.347e-02, 9.183e-03, -8.181e-02) * s[0][2][0];
	r1 += M4(-9.793e-02, 7.641e-02, 2.279e-02, 2.250e-02, 1.026e-01, -2.636e-02, 7.338e-02, -2.472e-02, 9.300e-02, 8.937e-02, 2.330e-02, -1.122e-01, 1.423e-01, -6.748e-02, 4.684e-02, -1.220e-01) * s[0][2][0];
	r0 += M4(7.936e-02, -3.249e-01, -8.368e-02, -1.052e-01, 4.305e-01, 1.641e-01, -8.632e-02, -7.320e-02, -1.928e-01, -3.057e-01, 1.591e-02, -1.278e-02, -5.488e-02, 8.032e-02, 2.391e-02, -6.341e-02) * s[0][2][1];
	r1 += M4(8.956e-02, 3.116e-01, -3.263e-02, -1.463e-02, 2.732e-01, -2.827e-03, 1.017e-01, 1.915e-02, 3.290e-01, 3.677e-01, 2.412e-02, -2.419e-01, 1.175e-02, -2.822e-02, -3.460e-02, -8.216e-02) * s[0][2][1];
	r0 += M4(2.282e-01, 1.207e-01, 1.784e-01, -3.509e-01, 4.528e-02, 2.256e-01, 1.325e-01, 8.899e-02, -2.503e-03, -1.159e-01, -1.508e-01, 5.458e-02, -1.180e-01, -1.296e-01, 3.839e-01, 2.099e-01) * s[1][0][0];
	r1 += M4(-1.539e-02, -6.185e-02, 2.056e-01, 5.583e-02, -1.584e-01, 1.656e-01, -6.869e-02, -1.591e-01, -9.012e-02, 7.548e-02, 5.351e-02, 1.660e-01, -2.234e-01, -5.129e-02, -8.683e-02, -6.605e-02) * s[1][0][0];
	r0 += M4(-8.755e-02, -1.505e-01, -5.902e-02, 2.670e-01, -3.047e-01, 1.304e-01, 1.193e-01, 1.340e-01, 1.314e-01, -4.393e-02, -2.394e-01, 1.207e-02, 3.802e-02, -1.214e-01, 2.697e-01, 1.949e-01) * s[1][0][1];
	r1 += M4(1.010e-01, -9.072e-02, 1.856e-01, -1.009e-01, -2.470e-01, 2.006e-01, -2.632e-01, -2.112e-01, 2.696e-01, 2.161e-01, 7.733e-01, 1.311e-01, -9.575e-02, -3.603e-02, 1.278e-01, 5.497e-02) * s[1][0][1];
	r0 += M4(1.652e-01, 1.226e-01, -1.625e-01, -2.868e-01, 5.563e-01, -1.606e-01, -8.750e-02, -1.696e-01, -1.354e-01, 1.206e-01, 3.258e-01, 2.675e-01, 6.641e-02, 1.005e-01, 1.715e-01, -2.153e-02) * s[1][1][0];
	r1 += M4(7.069e-02, -2.806e-01, -4.650e-02, -7.225e-02, -1.450e-01, -1.195e-01, -1.853e-01, 2.092e-01, -2.980e-03, -7.983e-02, -4.893e-02, 1.012e-01, 2.154e-01, -1.311e-01, -3.902e-01, -1.372e-02) * s[1][1][0];
	r0 += M4(-3.448e-01, -6.162e-01, -1.968e-01, -8.276e-02, 2.161e-01, -1.958e-01, 2.787e-01, -6.950e-02, -5.141e-01, -3.072e-01, 8.177e-01, 4.771e-01, -7.126e-03, 5.354e-02, 4.184e-03, -2.190e-01) * s[1][1][1];
	r1 += M4(2.549e-01, 2.320e-01, 6.821e-04, -1.891e-01, -1.539e-01, -2.513e-01, -1.850e-01, 8.696e-05, 1.325e-01, -5.405e-01, 4.780e-01, 4.376e-01, 7.591e-02, 9.032e-02, 6.483e-02, -1.270e-01) * s[1][1][1];
	r0 += M4(-1.443e-01, 1.642e-01, -3.406e-02, -7.427e-02, -1.541e-01, -5.098e-01, 7.643e-02, 3.404e-02, 7.037e-02, 7.745e-02, 2.864e-02, 5.660e-02, -2.372e-01, -1.604e-01, -8.128e-02, -1.447e-01) * s[1][2][0];
	r1 += M4(-1.327e-02, -3.563e-01, 1.516e-01, 4.774e-02, -3.858e-02, -1.459e-01, -1.064e-01, 2.150e-01, -1.809e-02, -1.352e-01, 2.829e-02, -7.733e-04, -2.138e-01, -8.185e-02, -1.053e-01, -1.454e-01) * s[1][2][0];
	r0 += M4(1.334e-01, -8.218e-02, 4.025e-02, 4.686e-02, -4.326e-02, -1.141e-01, 1.120e-01, 4.526e-02, 3.928e-01, 4.409e-01, -1.824e-01, -9.634e-02, -6.835e-02, -1.533e-01, 2.941e-03, -1.470e-01) * s[1][2][1];
	r1 += M4(-8.860e-03, -2.845e-03, 4.214e-02, 3.253e-02, 1.340e-01, -2.197e-02, -2.895e-01, 7.078e-02, -2.030e-01, -2.560e-01, -7.919e-02, -7.433e-03, -1.011e-01, 7.312e-04, 6.660e-02, 1.043e-02) * s[1][2][1];
	r0 += M4(-2.754e-02, -2.879e-02, 5.803e-02, 1.301e-01, 1.742e-01, -2.960e-02, -4.025e-02, -7.745e-03, -1.317e-03, -4.148e-02, -7.332e-02, -4.952e-02, 8.706e-02, 1.078e-01, 1.830e-01, 1.235e-01) * s[2][0][0];
	r1 += M4(-1.622e-01, 1.287e-03, 6.446e-02, -5.953e-02, -9.826e-02, 1.159e-02, 1.154e-01, -3.918e-02, -4.980e-02, -1.752e-02, 1.118e-01, 2.098e-01, -1.484e-01, 8.604e-02, 1.604e-01, 1.371e-01) * s[2][0][0];
	r0 += M4(3.369e-02, 7.320e-02, 4.944e-02, 7.652e-02, -6.178e-02, -1.041e-01, -1.496e-01, 2.089e-02, -1.332e-01, -1.019e-01, -1.281e-01, -2.356e-01, 6.830e-02, 9.017e-02, 5.904e-02, 2.060e-01) * s[2][0][1];
	r1 += M4(-9.237e-02, 5.546e-02, 1.508e-01, 1.672e-03, 1.215e-01, -1.629e-02, 1.272e-01, 9.657e-02, -4.945e-01, 2.214e-01, 5.939e-01, -5.975e-01, -1.498e-01, -9.351e-05, 3.009e-02, -2.104e-03) * s[2][0][1];
	r0 += M4(-1.173e-01, 3.136e-02, -1.167e-02, -1.848e-01, 2.070e-01, 7.140e-02, -1.605e-01, -1.390e-01, -2.666e-02, 4.312e-02, -2.687e-02, 1.067e-01, 2.429e-02, 1.084e-01, -1.966e-02, 1.564e-01) * s[2][1][0];
	r1 += M4(-2.057e-02, -1.199e-01, -1.926e-02, 8.262e-03, 4.300e-02, 2.174e-01, 5.779e-02, 2.944e-03, -1.827e-01, 9.965e-02, -1.771e-01, 1.781e-02, 1.998e-01, -1.938e-01, 5.406e-02, -2.106e-01) * s[2][1][0];
	r0 += M4(4.029e-02, 6.086e-02, 1.974e-03, -2.629e-02, 3.157e-02, 4.525e-02, -1.556e-01, 8.961e-02, 4.836e-02, 4.291e-01, 2.735e-01, 2.109e-01, -6.326e-02, 1.671e-01, -5.850e-02, 5.871e-02) * s[2][1][1];
	r1 += M4(-1.195e-02, -2.789e-02, -1.255e-01, -1.179e-02, 2.360e-01, 1.365e-01, 8.764e-02, 3.885e-02, 1.068e-01, -4.581e-01, 3.101e-01, -1.147e-01, 3.565e-02, -1.278e-01, 7.341e-02, -4.845e-02) * s[2][1][1];
	r0 += M4(6.385e-02, 3.500e-02, 3.568e-02, 3.853e-02, 1.244e-01, 5.619e-02, -2.588e-02, -6.303e-02, -1.372e-01, 1.338e-01, 1.224e-01, 3.431e-02, -2.650e-02, -1.472e-01, -1.802e-01, 1.762e-01) * s[2][2][0];
	r1 += M4(-2.476e-02, -5.231e-03, -5.581e-03, -1.312e-02, -6.824e-02, -2.742e-02, 1.280e-02, -1.515e-01, -1.920e-01, 1.973e-02, 3.886e-03, 8.609e-02, -1.750e-01, 1.253e-02, 7.255e-02, -2.809e-02) * s[2][2][0];
	r0 += M4(6.449e-02, 1.721e-01, 3.279e-02, -1.291e-02, -1.589e-01, -3.070e-02, -1.015e-01, 2.866e-02, -1.898e-01, 4.528e-01, -2.807e-01, 1.276e-01, -2.093e-01, -2.049e-01, -2.209e-02, 1.679e-01) * s[2][2][1];
	r1 += M4(-1.721e-02, 9.353e-02, -2.410e-02, -6.562e-03, 9.937e-02, 8.481e-02, -9.397e-02, -1.663e-01, -2.231e-01, 7.032e-02, -1.094e-01, -2.249e-02, 9.863e-03, -1.344e-01, -1.640e-02, -4.349e-02) * s[2][2][1];
	r0 += V4(3.868e-02, -4.431e-02, -5.808e-02, 9.690e-03);
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(9.155e-02, -4.639e-03, 1.003e-01, -2.409e-01);
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-6x8C-DS-conv2
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv1
//!BIND LUMA
//!SAVE conv2
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 g[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv1_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			g[0][ay][ax] = l0(x - 1, y - 1);
			g[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s[3][3][2];
	V4 r0 = V4(0.0);
	V4 r1 = V4(0.0);
	s[0][0][0] = max(g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[0][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[0][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[0][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[0][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[0][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[0][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(-2.487e-01, 1.803e-01, -6.745e-03, -9.802e-02, -4.852e-02, 1.747e-01, -4.642e-02, 8.523e-02, 3.155e-02, 1.051e-01, -5.395e-02, 7.834e-04, -3.077e-01, -3.046e-02, 4.316e-02, 5.284e-02) * s[0][0][0];
	r1 += M4(4.527e-02, 3.844e-02, -8.065e-02, -1.561e-02, 1.058e-01, 6.344e-02, -2.584e-02, 1.138e-01, -3.385e-02, 2.103e-02, -8.822e-02, 5.914e-02, -9.642e-02, 1.415e-02, -3.187e-02, -1.657e-01) * s[0][0][0];
	r0 += M4(3.707e-02, -1.524e-01, -1.168e-03, 3.327e-02, -6.710e-02, 8.776e-02, -1.724e-01, 8.695e-02, 5.501e-02, 1.857e-01, 1.053e-02, -9.241e-02, -4.131e-01, 1.417e-01, 8.027e-02, 1.124e-02) * s[0][0][1];
	r1 += M4(1.493e-01, -8.630e-03, -1.576e-01, 7.252e-02, -2.075e-02, 7.823e-02, -1.320e-01, 1.676e-01, -4.248e-02, -1.038e-02, -1.313e-02, -9.536e-02, 7.925e-02, 7.460e-02, -1.328e-01, -1.048e-01) * s[0][0][1];
	r0 += M4(-3.121e-01, -3.807e-02, -1.718e-01, -7.748e-02, -7.337e-02, 1.414e-01, 1.133e-01, 3.878e-02, 7.201e-02, -2.364e-01, 6.270e-03, 1.920e-01, 2.522e-02, 5.754e-02, -2.495e-01, -1.595e-01) * s[0][1][0];
	r1 += M4(-6.640e-02, -8.649e-02, -4.973e-02, 1.530e-01, -2.319e-01, -9.917e-02, 2.210e-01, -1.098e-01, -1.306e-01, 8.076e-02, 1.663e-01, 4.607e-02, -4.702e-01, -1.810e-01, 4.278e-01, 2.120e-01) * s[0][1][0];
	r0 += M4(-2.023e-02, -2.047e-01, -1.487e-01, -2.404e-02, -3.600e-02, -1.490e-01, 5.099e-03, 6.233e-02, -2.150e-01, 1.460e-01, -1.540e-01, 6.207e-02, -3.726e-01, 3.186e-01, -1.166e-01, -4.696e-02) * s[0][1][1];
	r1 += M4(-7.439e-02, -6.311e-02, -2.863e-02, 2.034e-01, -1.492e-01, -2.686e-01, 1.478e-01, -1.171e-01, -1.313e-01, 6.938e-02, 2.725e-01, -1.319e-01, -2.046e-01, -1.844e-01, 1.114e-01, 1.095e-01) * s[0][1][1];
	r0 += M4(-1.124e-01, -4.675e-03, -7.399e-02, -5.649e-02, -6.136e-02, -6.073e-02, -3.145e-02, 1.176e-01, 1.037e-01, -3.991e-01, -5.121e-02, 1.928e-01, 2.042e-01, 1.434e-01, -1.232e-02, 1.773e-01) * s[0][2][0];
	r1 += M4(-5.194e-03, -2.335e-03, -1.906e-01, -1.015e-01, 9.457e-02, 5.185e-02, -1.436e-01, -1.164e-02, 7.698e-02, -1.594e-02, -8.376e-02, -8.264e-02, -7.429e-02, -6.748e-02, -1.265e-02, 1.722e-01) * s[0][2][0];
	r0 += M4(9.783e-02, -9.119e-02, 9.169e-02, -3.453e-02, -9.088e-02, -4.916e-02, -1.070e-02, 5.623e-02, -6.706e-02, -3.027e-02, -2.260e-02, 1.092e-01, -6.107e-02, -3.122e-02, -8.369e-02, -1.312e-01) * s[0][2][1];
	r1 += M4(-5.883e-03, -7.422e-02, -8.362e-02, 1.120e-01, 4.458e-02, 6.004e-02, -3.314e-03, 5.989e-02, 1.499e-02, -2.792e-02, 1.780e-01, 1.139e-01, 2.224e-02, -1.601e-02, -1.423e-01, -2.360e-02) * s[0][2][1];
	r0 += M4(-1.028e-01, 1.646e-01, -7.236e-02, -7.851e-02, -1.004e-01, 1.272e-01, 1.973e-01, -1.433e-01, 2.281e-01, 8.890e-02, -7.680e-02, 1.616e-01, -1.055e-01, 8.887e-02, 5.855e-02, -1.044e-01) * s[1][0][0];
	r1 += M4(6.382e-03, 1.337e-01, -3.948e-02, -1.806e-01, 2.570e-02, 1.944e-01, -1.636e-01, 3.296e-02, -5.422e-02, 2.803e-02, 1.350e-01, -1.135e-01, -3.787e-02, 4.414e-02, -3.341e-03, 5.314e-02) * s[1][0][0];
	r0 += M4(2.271e-01, 6.273e-02, -4.323e-02, 5.338e-02, -4.344e-01, 1.177e-01, 1.032e-01, -2.513e-02, 2.249e-02, 1.300e-01, -3.837e-02, 9.140e-02, 1.329e-01, 1.549e-02, 4.541e-02, 4.141e-02) * s[1][0][1];
	r1 += M4(-1.513e-01, 1.280e-01, -4.308e-02, -5.425e-02, -1.102e-01, -9.220e-03, -2.755e-01, 5.232e-02, -3.061e-02, -1.162e-01, 2.021e-01, -1.420e-01, -3.191e-02, 9.069e-02, -1.067e-01, -2.707e-02) * s[1][0][1];
	r0 += M4(2.221e-01, 1.306e-01, 6.593e-02, -4.497e-02, 3.369e-01, 1.034e-01, -6.428e-02, 2.778e-01, 5.696e-01, -1.275e-01, 3.544e-01, -3.562e-01, 1.032e-01, -1.420e-01, -2.037e-01, 3.041e-01) * s[1][1][0];
	r1 += M4(-1.215e-01, -1.340e-02, 2.323e-01, -3.420e-01, 1.640e-01, 1.149e-02, -3.526e-02, 2.879e-01, 1.077e-02, 2.135e-01, 4.645e-02, 1.472e-01, 2.529e-01, 1.722e-01, -2.121e-01, 5.770e-01) * s[1][1][0];
	r0 += M4(4.452e-01, 1.145e-01, 1.401e-01, 7.707e-02, -1.777e-01, -1.181e-01, -1.432e-01, -1.017e-01, -1.844e-01, -1.049e-01, -1.281e-01, -1.069e-02, 1.861e-01, 9.741e-02, 1.237e-01, -1.845e-01) * s[1][1][1];
	r1 += M4(-1.835e-01, -5.005e-02, 2.725e-01, -6.582e-02, 2.204e-01, 1.026e-01, 3.641e-02, -3.733e-02, 2.248e-01, 1.790e-01, -3.433e-01, 2.281e-01, -1.976e-02, 2.539e-01, 9.536e-02, -4.400e-02) * s[1][1][1];
	r0 += M4(-1.727e-01, 1.846e-01, 8.204e-02, -6.213e-02, 1.178e-01, 2.599e-02, -3.384e-03, -3.623e-02, 2.477e-01, -2.977e-01, 2.261e-01, 1.520e-01, -1.210e-01, 9.519e-02, -4.479e-01, 2.968e-01) * s[1][2][0];
	r1 += M4(-1.200e-01, 7.642e-02, -9.445e-02, -1.231e-01, -1.898e-01, -5.481e-02, 5.910e-02, -8.107e-02, 4.561e-01, -1.496e-01, 5.895e-01, -2.785e-01, 9.331e-02, 6.795e-02, 2.926e-01, 4.438e-03) * s[1][2][0];
	r0 += M4(1.621e-02, -3.467e-02, 3.890e-03, -7.663e-02, -1.812e-02, -9.391e-04, -1.360e-01, -6.192e-02, -4.612e-01, -1.709e-01, -4.223e-01, 5.665e-01, -2.842e-01, -1.277e-01, -7.039e-02, -3.786e-02) * s[1][2][1];
	r1 += M4(-1.003e-01, 3.963e-02, -4.427e-02, -4.468e-02, -1.226e-03, 1.581e-02, 6.219e-02, -1.191e-01, 2.643e-01, -2.496e-02, -2.297e-01, -3.043e-01, 2.906e-01, 1.114e-01, 4.482e-02, -2.426e-01) * s[1][2][1];
	r0 += M4(-6.743e-02, 1.032e-01, -1.042e-01, -7.717e-02, 2.768e-02, -7.080e-02, 1.280e-01, 4.046e-02, -4.729e-02, 4.627e-02, -3.001e-02, 1.132e-02, 2.409e-02, -4.090e-02, 1.461e-01, -6.360e-02) * s[2][0][0];
	r1 += M4(1.781e-02, 1.937e-02, 1.854e-03, -1.980e-02, 9.653e-02, -9.279e-03, 7.960e-02, 6.031e-02, 2.102e-02, -6.242e-03, -2.384e-02, 8.902e-02, -3.166e-03, -6.595e-02, 1.550e-01, -2.670e-02) * s[2][0][0];
	r0 += M4(-4.647e-02, 1.154e-01, -8.436e-02, 4.429e-02, -3.068e-01, -8.132e-02, 2.305e-01, 7.758e-02, 9.897e-02, -1.336e-01, 2.068e-02, 2.824e-02, 8.218e-02, 6.038e-03, -4.139e-02, -5.413e-02) * s[2][0][1];
	r1 += M4(7.819e-03, -2.118e-02, -6.382e-02, -3.822e-02, 1.685e-01, -3.509e-02, -1.951e-01, 1.440e-01, -6.052e-02, -1.002e-02, 8.433e-02, 9.970e-03, -2.581e-02, -7.722e-04, 1.219e-01, -2.717e-02) * s[2][0][1];
	r0 += M4(4.090e-03, 9.901e-02, -1.446e-01, -8.550e-02, 7.236e-02, -4.676e-02, 4.133e-01, 5.761e-02, 2.004e-01, -2.100e-02, -7.688e-02, -6.827e-02, -4.656e-02, 5.546e-02, 2.324e-01, 8.618e-02) * s[2][1][0];
	r1 += M4(-7.713e-02, 3.252e-02, 1.257e-01, -3.916e-02, 2.173e-01, -9.235e-02, -2.192e-01, -2.305e-01, -2.281e-01, -4.877e-02, 1.227e-01, -1.202e-01, 2.144e-01, 4.727e-02, -3.232e-01, 7.408e-02) * s[2][1][0];
	r0 += M4(2.349e-01, -3.295e-03, -1.535e-01, 1.194e-01, 5.100e-02, -3.901e-02, 1.926e-01, -8.520e-02, 9.114e-02, -1.477e-01, 6.600e-02, 3.644e-02, 2.525e-02, -1.259e-01, 5.487e-02, 1.338e-02) * s[2][1][1];
	r1 += M4(-9.547e-03, -7.460e-02, 9.853e-02, 3.011e-02, 3.719e-02, -1.289e-01, -2.183e-01, -9.243e-02, -3.446e-02, 2.133e-02, 1.377e-01, 7.437e-02, 3.413e-02, -1.296e-01, -6.249e-02, 1.619e-02) * s[2][1][1];
	r0 += M4(-5.327e-02, 7.956e-02, -1.083e-02, -5.566e-04, 5.418e-02, 1.286e-02, -3.136e-02, -7.349e-02, 2.085e-01, 7.838e-02, -1.184e-01, 1.730e-03, -4.977e-02, 6.182e-02, 8.657e-03, 1.994e-01) * s[2][2][0];
	r1 += M4(-1.719e-02, -3.413e-02, 3.500e-03, -2.557e-02, -8.393e-02, 3.456e-02, 5.360e-02, -9.249e-02, -2.156e-02, -1.174e-01, 1.877e-01, -3.239e-02, -4.829e-02, -2.384e-02, 2.760e-02, -3.550e-03) * s[2][2][0];
	r0 += M4(9.123e-02, -9.332e-04, -8.242e-03, -1.052e-02, 6.323e-02, 2.298e-02, -5.897e-02, 3.295e-02, -5.292e-03, -1.739e-02, 1.464e-01, 1.348e-01, -8.923e-02, -1.112e-02, -1.233e-01, 1.287e-02) * s[2][2][1];
	r1 += M4(-2.754e-02, 6.412e-03, 1.362e-01, 7.001e-02, -1.174e-01, -9.733e-03, 2.533e-02, 1.408e-01, -1.364e-01, -3.401e-02, -1.122e-01, 1.021e-01, 1.964e-02, 7.228e-02, -1.739e-02, 7.946e-03) * s[2][2][1];
	s[0][0][0] = max(g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[1][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[1][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[1][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[1][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[1][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[1][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(-1.937e-01, 4.182e-02, -8.587e-03, -2.369e-02, 1.329e-02, -2.224e-01, -4.799e-02, 9.533e-02, -8.554e-02, 6.325e-02, -1.646e-02, 2.866e-02, -1.337e-02, 4.328e-04, -3.379e-02, 8.766e-02) * s[0][0][0];
	r1 += M4(8.072e-02, 3.967e-02, -1.705e-01, -4.497e-02, -5.889e-02, 1.462e-02, -2.119e-01, 1.324e-01, -5.453e-02, -5.436e-02, -5.758e-02, 4.202e-02, -1.048e-01, 2.254e-02, 5.385e-02, 8.335e-02) * s[0][0][0];
	r0 += M4(-5.172e-02, 5.105e-02, -6.010e-02, 4.564e-02, 6.741e-02, 1.034e-01, 6.130e-04, -8.331e-02, -3.343e-01, 5.467e-01, -1.034e-01, -1.593e-01, -5.546e-02, -2.288e-02, -9.414e-02, 3.999e-02) * s[0][0][1];
	r1 += M4(-5.455e-03, 2.201e-02, 2.528e-02, 3.404e-02, -1.727e-01, 1.412e-01, 1.887e-02, -1.274e-01, -8.567e-02, -1.181e-01, -2.169e-02, 2.029e-01, -4.656e-02, 4.812e-02, -9.519e-04, 4.731e-02) * s[0][0][1];
	r0 += M4(-7.086e-02, 1.363e-01, 3.955e-02, 1.154e-02, 1.037e-02, 1.032e-01, -1.044e-01, 1.677e-01, -3.578e-03, 1.377e-01, -6.211e-02, 1.381e-01, -4.148e-02, 6.313e-02, 2.187e-03, 6.789e-02) * s[0][1][0];
	r1 += M4(-2.105e-01, 4.028e-02, 1.833e-01, -2.034e-01, -1.368e-02, 2.636e-02, 3.457e-02, 1.289e-01, -7.322e-02, -2.042e-01, -1.057e-01, -5.857e-02, -1.541e-02, 1.421e-01, 8.169e-02, -1.342e-01) * s[0][1][0];
	r0 += M4(3.312e-02, 6.664e-02, 8.926e-02, 4.391e-02, 1.666e-02, 1.804e-02, -3.500e-02, 1.083e-02, -4.978e-01, 1.508e+00, 5.305e-03, 1.360e-01, -6.436e-02, 4.674e-02, 2.445e-02, -7.004e-03) * s[0][1][1];
	r1 += M4(-3.412e-01, -1.970e-02, 2.968e-01, -1.424e-01, 1.995e-01, -1.813e-02, -3.447e-02, -1.069e-01, -1.819e-01, -2.176e-01, 3.862e-01, 7.859e-01, -7.079e-02, 9.156e-02, 7.013e-02, -7.909e-02) * s[0][1][1];
	r0 += M4(-1.282e-01, -1.945e-02, -5.079e-02, -7.378e-02, 1.348e-01, -2.331e-01, 1.848e-02, -1.761e-01, -3.369e-02, -1.415e-02, -1.962e-01, -1.234e-01, -5.338e-02, 2.791e-02, -4.963e-02, 5.856e-02) * s[0][2][0];
	r1 += M4(-2.075e-02, -3.853e-02, -1.418e-01, -2.072e-03, 7.823e-02, -3.850e-02, -5.391e-02, -2.793e-03, -3.732e-02, 7.801e-02, -1.482e-02, 1.701e-01, 2.275e-02, 5.613e-02, -7.073e-02, 3.536e-02) * s[0][2][0];
	r0 += M4(9.149e-02, 8.715e-02, -1.657e-02, 1.753e-01, 3.269e-02, 1.185e-01, 1.443e-01, -3.956e-02, -3.574e-01, 2.364e+00, 2.705e-02, -4.835e-01, -3.101e-02, 4.386e-02, -6.521e-02, 1.481e-01) * s[0][2][1];
	r1 += M4(-2.913e-02, 3.216e-02, 2.285e-02, 1.480e-01, -2.364e-02, 8.327e-02, -1.012e-01, -1.194e-01, 4.188e-01, 2.030e-01, 1.025e+00, 6.247e-01, -5.857e-02, 6.492e-02, -1.216e-01, 2.123e-03) * s[0][2][1];
	r0 += M4(-2.221e-02, 6.636e-02, -4.493e-02, 1.135e-01, -1.811e-01, -1.850e-01, 1.070e-01, 2.387e-02, 5.422e-02, -4.630e-02, 3.828e-02, 9.805e-02, 1.404e-02, -6.967e-02, 1.006e-02, -1.481e-01) * s[1][0][0];
	r1 += M4(-1.290e-01, -9.473e-03, -5.943e-02, -2.147e-01, -6.131e-01, 2.277e-02, -1.551e-01, -5.270e-01, 1.450e-01, -2.244e-02, -7.682e-04, 6.602e-02, 4.527e-02, 7.992e-02, -9.605e-02, 4.048e-02) * s[1][0][0];
	r0 += M4(2.234e-02, 1.656e-01, 7.435e-02, 8.025e-02, -1.546e-01, -7.838e-02, -2.961e-02, -9.623e-02, -1.484e-02, 1.927e-02, 6.346e-03, 1.138e-01, 1.158e-01, 6.212e-02, 3.210e-02, -6.323e-02) * s[1][0][1];
	r1 += M4(-1.371e-01, 2.595e-02, 3.689e-02, -1.314e-01, -2.183e-02, -9.360e-02, -1.529e-02, -1.585e-01, 1.311e-01, -1.216e-02, 7.152e-02, 3.623e-01, 4.429e-02, 2.359e-01, -8.453e-02, -2.303e-02) * s[1][0][1];
	r0 += M4(-2.005e-01, -4.146e-02, -1.328e-02, -6.834e-02, 1.881e-01, 9.792e-02, -1.249e-01, -2.879e-01, -3.147e-02, -3.688e-02, 1.537e-01, -2.075e-01, 1.193e-01, -1.809e-02, -3.642e-02, -5.014e-02) * s[1][1][0];
	r1 += M4(1.095e-01, 9.238e-02, 1.543e-01, 7.086e-02, 1.187e-01, 9.623e-02, 1.437e-02, -9.145e-02, -1.777e-01, 2.173e-01, 1.541e-01, -2.347e-02, 6.134e-02, 1.476e-01, 3.899e-02, -1.648e-02) * s[1][1][0];
	r0 += M4(-1.786e-01, 4.941e-02, 8.330e-02, 1.196e-01, 9.696e-02, 2.819e-02, -5.718e-02, -1.086e-01, 1.045e-01, 1.033e+00, -2.823e-01, -8.499e-01, 1.209e-01, -1.812e-01, -7.335e-02, 1.376e-01) * s[1][1][1];
	r1 += M4(-2.140e-01, -6.797e-02, -3.803e-02, -1.028e-01, 1.669e-01, 1.322e-02, -1.784e-01, 2.983e-01, 2.864e-01, 4.052e-01, -1.042e-01, 9.805e-01, -2.669e-01, 1.359e-01, 1.346e-01, 7.116e-03) * s[1][1][1];
	r0 += M4(5.497e-02, -1.091e-01, 4.042e-02, -7.241e-02, -1.130e-02, -1.036e-01, -2.185e-01, 7.691e-02, 4.216e-02, 5.019e-02, -5.105e-02, 2.075e-02, 2.046e-01, 4.027e-02, 2.015e-02, -8.294e-02) * s[1][2][0];
	r1 += M4(3.924e-02, 1.641e-01, -2.232e-01, 2.012e-01, -1.941e-01, -1.990e-02, -1.685e-01, -3.062e-03, 9.971e-02, -4.376e-02, 1.754e-02, -3.239e-02, -8.288e-02, 2.371e-01, 1.659e-02, 1.023e-01) * s[1][2][0];
	r0 += M4(-2.025e-01, 1.327e-01, -1.988e-02, -7.864e-02, 1.401e-01, 1.632e-01, -2.432e-01, -7.455e-02, 1.658e-01, 1.125e+00, 6.597e-01, -2.254e+00, 4.826e-02, 1.801e-03, -4.155e-02, -1.863e-01) * s[1][2][1];
	r1 += M4(-2.776e-02, 1.154e-01, -1.087e-02, -3.653e-02, -1.412e-02, -8.570e-02, 1.146e-01, -9.435e-03, 1.601e-01, -6.833e-01, 4.452e-01, 2.644e-01, 3.701e-01, 2.220e-02, 1.750e-01, 6.233e-02) * s[1][2][1];
	r0 += M4(3.186e-03, -3.180e-02, 1.452e-02, 2.986e-02, -1.715e-01, -3.733e-01, -5.718e-02, -1.123e-01, 8.620e-02, 8.493e-02, -4.943e-02, 2.752e-02, -1.072e-01, -4.057e-03, 7.989e-02, -8.410e-02) * s[2][0][0];
	r1 += M4(-6.736e-02, -8.688e-02, 1.484e-01, 5.744e-03, -9.951e-02, -1.170e-01, 2.019e-04, -2.676e-01, -1.092e-03, 2.047e-02, -3.895e-02, -7.930e-03, -1.500e-01, 5.502e-02, 8.915e-02, -1.013e-01) * s[2][0][0];
	r0 += M4(8.620e-02, 5.465e-02, 9.378e-02, 7.238e-02, -1.081e-01, -2.782e-02, -1.264e-01, 3.967e-02, 2.889e-01, -9.959e-02, 6.841e-02, 5.411e-02, -8.250e-02, -2.330e-02, 6.703e-02, -1.832e-02) * s[2][0][1];
	r1 += M4(6.887e-02, -5.436e-02, 1.443e-01, 9.121e-02, -1.604e-01, -2.118e-03, 1.778e-01, -5.008e-03, -6.065e-02, -2.140e-02, 4.427e-02, 5.339e-03, -8.486e-02, 1.627e-01, 9.843e-02, 5.933e-02) * s[2][0][1];
	r0 += M4(6.430e-02, -1.933e-01, -1.349e-02, 9.138e-02, 4.093e-01, -3.946e-01, 1.814e-01, 3.934e-02, 2.154e-01, -3.788e-02, -8.058e-03, 8.769e-03, 5.289e-02, 5.873e-04, 8.243e-02, 1.806e-02) * s[2][1][0];
	r1 += M4(-9.300e-03, -1.122e-01, -1.009e-01, 9.822e-02, 2.701e-01, -3.758e-01, 4.017e-01, 7.886e-02, -6.535e-02, 4.696e-02, 1.842e-01, -2.351e-02, 1.150e-01, 1.817e-01, 6.211e-02, 2.390e-02) * s[2][1][0];
	r0 += M4(2.013e-01, -2.199e-02, 2.236e-01, -1.713e-02, -5.681e-02, 1.869e-02, 3.885e-01, -7.184e-02, -1.655e-01, -5.811e-01, 8.164e-01, -7.491e-02, 1.165e-01, 6.472e-02, 1.482e-01, -1.914e-02) * s[2][1][1];
	r1 += M4(-7.636e-02, -9.329e-02, 1.643e-01, -9.147e-02, 1.736e-01, 5.802e-02, 1.951e-01, 5.365e-02, -4.926e-02, -1.401e-01, 4.182e-01, 4.612e-01, 1.805e-01, -7.244e-02, -1.450e-01, -3.911e-02) * s[2][1][1];
	r0 += M4(3.837e-01, -2.150e-01, -1.461e-01, 8.684e-02, 6.568e-02, -2.725e-01, 1.129e-01, 1.012e-02, -6.428e-02, 8.104e-02, 1.463e-01, -3.263e-02, -1.521e-01, -8.191e-03, -7.840e-02, 1.730e-01) * s[2][2][0];
	r1 += M4(1.385e-02, -1.220e-02, -2.711e-01, 2.754e-01, -9.069e-02, -1.450e-02, -5.098e-01, 3.067e-01, 1.137e-01, -1.308e-01, -1.197e-01, -5.025e-02, 7.747e-02, 2.209e-01, -1.799e-01, 7.041e-03) * s[2][2][0];
	r0 += M4(3.468e-01, 4.482e-02, 2.635e-01, -1.677e-01, 9.567e-03, -4.115e-03, 2.167e-01, 6.236e-02, -5.198e-01, -5.851e-01, 9.698e-01, -7.943e-02, -1.281e-01, -3.531e-02, 2.577e-02, -6.077e-02) * s[2][2][1];
	r1 += M4(2.455e-02, -3.339e-03, -1.424e-01, -4.820e-02, 1.770e-01, -1.756e-02, -3.682e-01, -1.967e-01, 3.457e-01, -1.712e-01, -8.849e-02, 2.076e-01, -6.045e-02, 9.131e-02, -6.690e-02, -1.165e-01) * s[2][2][1];
	r0 += V4(-4.694e-02, -3.941e-02, 8.045e-03, 6.203e-05);
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(3.607e-02, -2.246e-01, -2.326e-02, -8.382e-03);
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-6x8C-DS-conv3
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv2
//!BIND LUMA
//!SAVE conv3
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(texelFetch(conv2_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv2_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 g[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv2_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			g[0][ay][ax] = l0(x - 1, y - 1);
			g[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s[3][3][2];
	V4 r0 = V4(0.0);
	V4 r1 = V4(0.0);
	s[0][0][0] = max(g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[0][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[0][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[0][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[0][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[0][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[0][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(6.015e-03, -9.197e-02, 4.634e-03, -2.274e-02, 4.755e-03, 5.532e-02, -1.137e-02, 4.601e-02, -1.363e-01, 6.990e-02, -8.022e-02, -3.960e-02, 4.834e-02, -1.057e-03, -1.568e-02, -1.239e-01) * s[0][0][0];
	r1 += M4(3.011e-02, 6.527e-03, -7.269e-02, 1.716e-02, -1.973e-03, 5.662e-03, -1.827e-03, -5.604e-02, -1.250e-02, -1.364e-01, 5.571e-01, 4.408e-03, -6.160e-02, 4.276e-04, 8.386e-02, 7.589e-02) * s[0][0][0];
	r0 += M4(-7.497e-02, -3.036e-01, -1.483e-02, 4.160e-01, -4.021e-02, -3.135e-02, -5.036e-02, -4.187e-02, -1.082e-01, 1.841e-01, 9.479e-02, -9.468e-02, -3.901e-02, 2.182e-01, 1.344e-01, 2.210e-01) * s[0][0][1];
	r1 += M4(4.481e-03, 1.130e-01, 5.988e-02, -1.247e-01, -3.382e-03, -9.404e-03, 9.774e-03, 1.880e-02, -2.088e-02, -1.121e-01, -8.372e-02, -7.527e-02, -5.044e-02, 1.131e-01, -1.099e-01, -4.527e-02) * s[0][0][1];
	r0 += M4(-6.181e-02, 2.940e-02, 4.022e-02, 2.212e-01, 5.961e-02, 5.792e-02, 1.356e-03, 5.188e-02, -1.472e-01, 1.938e-01, 1.566e-01, -1.102e-01, -2.162e-01, -1.143e-01, 1.588e-02, -2.388e-01) * s[0][1][0];
	r1 += M4(8.281e-02, 3.105e-03, 9.901e-02, -8.670e-02, 7.033e-02, 5.333e-03, 2.327e-02, -2.885e-02, -7.311e-02, -5.231e-02, 2.069e-01, 2.069e-01, 1.791e-02, -1.296e-01, 3.345e-02, -2.706e-02) * s[0][1][0];
	r0 += M4(4.614e-02, -7.445e-02, -3.585e-01, 5.623e-01, -5.465e-02, -1.905e-02, 6.795e-02, -7.264e-03, -2.070e-01, -1.427e-01, 3.186e-02, -3.399e-01, -2.165e-01, 1.821e-01, -6.681e-02, -2.343e-01) * s[0][1][1];
	r1 += M4(6.633e-02, -1.593e-01, 2.738e-01, -2.660e-01, -1.431e-02, -2.715e-02, 9.377e-02, -7.909e-03, -8.997e-03, -2.570e-02, -7.908e-02, -1.122e-01, 6.350e-02, -1.346e-01, 1.411e-01, -5.709e-02) * s[0][1][1];
	r0 += M4(4.031e-02, 8.199e-02, -1.550e-02, 8.269e-02, -9.922e-02, 1.078e-01, -3.266e-02, 4.174e-02, -6.661e-02, 8.300e-02, -1.890e-02, 2.298e-02, -6.575e-02, 1.304e-01, -4.688e-02, 7.557e-02) * s[0][2][0];
	r1 += M4(-1.339e-02, -5.207e-02, 8.382e-03, 4.454e-02, 1.347e-01, 3.427e-03, -2.399e-02, -4.392e-02, -3.098e-02, 5.829e-02, 3.972e-02, 3.762e-02, -1.252e-02, -4.068e-03, 8.032e-02, 6.065e-02) * s[0][2][0];
	r0 += M4(9.441e-02, -3.071e-02, 1.276e-01, 4.086e-01, -4.275e-02, 4.388e-02, 2.661e-02, 7.549e-02, 1.381e-01, -4.424e-02, -8.867e-02, -5.697e-02, -7.460e-02, 1.150e-01, -9.764e-02, 7.122e-02) * s[0][2][1];
	r1 += M4(-1.058e-03, -1.162e-01, -4.129e-02, -1.119e-01, 1.080e-02, -5.068e-02, -6.366e-02, -4.099e-02, -9.149e-02, 1.344e-01, 8.991e-02, -6.096e-02, -5.524e-02, 9.457e-02, 1.550e-01, -1.724e-02) * s[0][2][1];
	r0 += M4(-8.517e-02, 7.730e-02, -7.335e-03, -4.404e-02, -2.361e-02, 6.588e-02, -4.718e-02, -7.030e-03, -1.505e-01, 2.717e-01, -7.871e-02, 2.060e-01, 3.339e-01, 7.517e-02, 7.049e-02, -6.020e-02) * s[1][0][0];
	r1 += M4(2.859e-02, -1.106e-01, 1.003e-01, -4.259e-03, 1.972e-03, -9.200e-03, 3.679e-02, -8.322e-03, 8.559e-02, -2.735e-01, 4.576e-01, -2.658e-01, -8.126e-02, -1.224e-02, 9.965e-02, 5.349e-02) * s[1][0][0];
	r0 += M4(-5.651e-01, 9.895e-02, 8.673e-02, 8.239e-02, 2.598e-02, 2.367e-02, -1.031e-03, 2.586e-02, 3.472e-02, 1.177e-01, 3.511e-01, -6.808e-02, 1.772e-03, 2.227e-01, -2.484e-01, -1.418e-01) * s[1][0][1];
	r1 += M4(2.930e-02, -1.651e-01, 2.519e-02, -2.183e-01, -2.756e-02, 2.054e-02, 6.806e-02, 3.896e-02, 4.053e-02, 2.606e-02, 4.722e-02, 1.316e-01, -3.776e-01, -1.291e-01, -4.582e-01, 1.655e-01) * s[1][0][1];
	r0 += M4(6.856e-03, -8.275e-02, -1.550e-01, -2.106e-01, 1.489e-01, 6.112e-02, -3.166e-02, -2.693e-01, -3.406e-01, 2.560e-01, 2.244e-01, 2.056e-01, 5.259e-01, 2.816e-02, 2.923e-01, 1.725e-01) * s[1][1][0];
	r1 += M4(-1.646e-01, 1.332e-01, 2.662e-02, 6.812e-02, -2.067e-02, 9.187e-02, -1.059e-01, 1.048e-01, 5.706e-02, -2.581e-01, 1.816e-01, -1.831e-01, -5.275e-02, -2.211e-01, 7.634e-02, -1.022e-01) * s[1][1][0];
	r0 += M4(-1.143e-01, -8.380e-02, -1.544e-01, -3.405e-02, -9.790e-02, 8.491e-02, -2.105e-02, 1.878e-01, -3.862e-01, -1.223e-01, 2.189e-01, -1.657e-01, 1.793e-01, 8.265e-02, 1.519e-01, 5.657e-01) * s[1][1][1];
	r1 += M4(-1.663e-01, 4.355e-03, -1.844e-02, -2.463e-01, 8.082e-03, 2.131e-01, 1.517e-01, 7.050e-03, -5.213e-02, 1.232e-01, 9.205e-02, -1.619e-01, -1.568e-01, -1.552e-01, 3.241e-01, 2.318e-01) * s[1][1][1];
	r0 += M4(8.550e-02, -1.524e-02, 1.771e-02, -4.750e-02, 2.380e-01, 1.759e-01, -1.501e-01, -7.348e-02, -1.495e-01, 1.660e-01, -1.279e-02, -1.327e-02, -2.138e-01, 6.187e-02, -7.086e-02, 6.634e-02) * s[1][2][0];
	r1 += M4(4.055e-02, 5.151e-02, 1.452e-01, 5.904e-02, -1.249e-01, 6.518e-02, 3.395e-02, 3.097e-01, -5.157e-02, -1.452e-01, -1.429e-01, 1.237e-01, -4.218e-02, -7.661e-02, 1.480e-01, 4.260e-02) * s[1][2][0];
	r0 += M4(-3.826e-01, 1.147e-01, -2.458e-01, 8.672e-02, -2.969e-02, 1.665e-02, -4.251e-02, 1.016e-01, 2.897e-04, 7.418e-02, 1.295e-01, 7.903e-02, 5.876e-02, 8.523e-02, 9.569e-02, 8.910e-02) * s[1][2][1];
	r1 += M4(7.248e-03, -2.588e-01, 6.045e-02, -4.616e-01, -2.181e-01, 7.525e-02, 2.147e-01, 4.974e-02, -2.814e-02, 2.036e-01, -7.110e-02, -1.199e-02, 3.749e-02, -1.247e-02, 2.008e-02, 7.630e-02) * s[1][2][1];
	r0 += M4(9.290e-02, -5.004e-02, 9.136e-03, 3.523e-02, -1.329e-01, 2.233e-01, 8.961e-02, 1.479e-01, -4.303e-02, -4.176e-02, -2.490e-01, -1.939e-03, -1.372e-01, -2.225e-02, 2.179e-03, -2.089e-03) * s[2][0][0];
	r1 += M4(5.615e-03, -6.366e-03, -1.735e-03, 3.329e-02, 7.504e-02, -5.975e-02, -1.481e-01, 1.437e-02, -7.229e-02, -1.915e-01, 3.380e-03, -9.950e-03, 5.289e-02, -6.933e-02, -2.735e-02, 5.484e-02) * s[2][0][0];
	r0 += M4(-1.844e-01, -9.844e-02, -1.239e-01, 1.035e-01, 6.168e-02, -5.962e-02, 8.969e-02, 6.335e-02, 3.518e-02, -2.329e-02, 9.201e-02, 7.882e-02, -5.444e-02, -5.968e-03, -9.973e-02, 1.251e-01) * s[2][0][1];
	r1 += M4(-7.660e-02, -7.612e-02, 1.716e-01, -1.448e-01, 2.315e-02, -3.540e-03, -5.398e-02, -5.780e-03, 3.795e-02, -1.134e-02, -1.110e-01, -2.812e-02, 7.254e-02, 2.042e-02, -5.165e-02, 8.793e-03) * s[2][0][1];
	r0 += M4(-1.113e-01, 1.628e-01, 2.812e-02, 1.786e-02, 3.555e-01, 1.637e-01, -8.976e-02, -1.242e-01, 1.181e-01, 5.909e-02, -9.121e-02, -3.630e-02, -6.145e-03, -1.841e-01, 1.388e-01, -4.815e-02) * s[2][1][0];
	r1 += M4(1.478e-02, -2.171e-02, 2.652e-02, 2.239e-02, 6.798e-02, 2.112e-01, -7.054e-02, 2.287e-01, -1.630e-01, -2.533e-01, -1.553e-01, 1.855e-01, 1.411e-01, -1.360e-01, -1.330e-01, 8.076e-02) * s[2][1][0];
	r0 += M4(-2.364e-01, 4.235e-02, -9.990e-02, 1.084e-01, -5.650e-02, 1.303e-01, -3.100e-01, -1.802e-02, 1.753e-01, -7.103e-02, 8.116e-02, -3.515e-02, 1.698e-01, 6.659e-02, -9.598e-02, 1.005e-02) * s[2][1][1];
	r1 += M4(-1.669e-02, -2.519e-01, -1.224e-01, -2.787e-01, -5.919e-02, 3.347e-02, -5.263e-02, -1.670e-01, -1.167e-02, -5.594e-02, -5.819e-02, -4.726e-02, -4.390e-02, 1.314e-01, -1.703e-01, -1.129e-03) * s[2][1][1];
	r0 += M4(-4.397e-02, 5.381e-03, 1.228e-01, 3.796e-04, 2.809e-01, -2.279e-02, -1.889e-01, 6.858e-02, 1.864e-03, 1.043e-01, -1.708e-01, -6.728e-02, -1.876e-02, -7.498e-02, 1.003e-01, -1.041e-01) * s[2][2][0];
	r1 += M4(4.083e-04, 2.469e-02, 4.202e-02, -5.123e-02, 6.300e-03, 3.040e-01, 1.297e-01, 2.163e-01, -5.981e-02, -1.883e-02, -3.014e-02, 1.710e-01, 5.650e-02, -5.067e-02, -9.728e-02, -6.899e-02) * s[2][2][0];
	r0 += M4(-1.917e-01, -7.746e-02, -8.750e-02, -1.515e-01, -1.449e-01, 5.042e-02, -3.187e-03, -5.204e-03, -1.816e-02, 7.278e-02, 1.781e-02, 3.411e-02, 1.017e-01, -5.909e-02, -5.568e-02, -4.180e-02) * s[2][2][1];
	r1 += M4(5.378e-03, -3.427e-01, -1.992e-01, -2.982e-01, -1.333e-01, -3.329e-02, -3.678e-02, -2.549e-01, -1.176e-02, 6.416e-02, 5.417e-02, -1.622e-02, -2.692e-02, 6.167e-02, 3.538e-02, -1.026e-01) * s[2][2][1];
	s[0][0][0] = max(g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[1][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[1][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[1][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[1][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[1][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[1][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(5.994e-02, -1.076e-01, 8.550e-02, 1.097e-02, -1.942e-01, -2.252e-01, 1.144e-01, 2.551e-01, -1.471e-01, -1.318e-01, -1.695e-01, 5.459e-02, 1.087e-02, 5.326e-02, -4.022e-02, 6.151e-02) * s[0][0][0];
	r1 += M4(-6.878e-02, -6.750e-02, -6.931e-02, -7.091e-02, -2.116e-01, 8.959e-02, -6.108e-02, -6.315e-02, -1.494e-02, 8.935e-02, -4.695e-02, 6.754e-02, -2.163e-02, 1.579e-02, 5.969e-02, -3.829e-02) * s[0][0][0];
	r0 += M4(-7.850e-02, -7.627e-02, -7.524e-02, -1.233e-01, -5.816e-02, -2.510e-02, 1.120e-02, 4.277e-02, 1.901e-01, -2.838e-01, -5.618e-02, 8.307e-02, 5.242e-02, 1.219e-01, -5.158e-02, -8.609e-03) * s[0][0][1];
	r1 += M4(5.263e-02, -5.284e-02, 8.811e-02, 6.008e-02, -1.206e-01, -2.069e-02, 6.639e-02, -1.204e-01, -7.329e-02, 8.569e-02, -1.151e-02, -1.168e-01, -2.826e-02, -1.675e-02, -7.814e-03, 1.668e-01) * s[0][0][1];
	r0 += M4(9.783e-02, -1.047e-01, 3.312e-02, -5.026e-02, 3.016e-01, -3.332e-01, 6.840e-02, 3.048e-03, -3.205e-01, 5.608e-02, -7.362e-02, 1.868e-03, 1.882e-01, -1.000e-01, -2.886e-02, -1.197e-01) * s[0][1][0];
	r1 += M4(-3.611e-02, 7.328e-02, 1.397e-01, 3.152e-02, -4.650e-01, 3.369e-01, 6.139e-01, 2.393e-01, -1.907e-02, 1.424e-01, -9.755e-02, 1.269e-01, 3.024e-03, 2.304e-02, 2.011e-01, -2.133e-02) * s[0][1][0];
	r0 += M4(5.910e-02, 1.967e-02, 3.796e-02, -2.398e-01, 1.180e-02, -1.189e-01, -3.640e-02, 1.161e-01, 8.753e-02, -1.854e-01, -2.496e-02, -1.969e-02, 1.852e-01, -2.485e-01, -4.980e-02, -2.331e-01) * s[0][1][1];
	r1 += M4(2.831e-02, 5.860e-03, 8.080e-02, 1.054e-01, 1.042e-02, 1.226e-02, 1.023e-01, 3.751e-02, 2.522e-02, 1.225e-01, -2.508e-01, -3.958e-02, 3.215e-02, 1.411e-01, 6.255e-02, 1.907e-01) * s[0][1][1];
	r0 += M4(5.784e-02, -7.799e-02, 7.444e-02, -6.428e-02, 1.229e-01, -8.767e-02, 3.193e-01, 9.466e-02, 6.783e-03, 5.154e-02, -1.914e-02, 3.290e-02, -1.340e-01, -1.640e-02, -3.145e-02, -1.606e-01) * s[0][2][0];
	r1 += M4(7.151e-02, 5.729e-02, -5.924e-02, -8.002e-02, -4.743e-01, -8.442e-02, -1.785e-02, 4.655e-03, -1.255e-01, 8.702e-02, 8.003e-02, 4.686e-02, 1.516e-02, -3.234e-02, -3.426e-02, -3.891e-02) * s[0][2][0];
	r0 += M4(-2.218e-01, -1.136e-01, -6.331e-02, -1.699e-01, 9.988e-02, -1.194e-01, 6.909e-02, -1.768e-02, -3.983e-03, 1.161e-02, -2.412e-02, 7.680e-02, -1.580e-01, -1.267e-01, 2.881e-02, -1.944e-01) * s[0][2][1];
	r1 += M4(1.275e-01, -1.355e-01, -2.971e-02, 1.608e-02, -1.009e-01, 2.151e-02, 2.110e-02, -1.072e-02, -1.892e-02, 9.833e-02, 7.401e-02, 1.951e-03, 9.202e-02, 6.046e-02, -4.200e-03, 1.642e-01) * s[0][2][1];
	r0 += M4(-3.814e-02, 9.827e-02, 8.988e-02, 7.661e-03, -5.148e-01, -9.194e-02, -2.785e-01, -1.708e-01, -4.749e-02, -1.106e-01, -2.339e-01, -1.854e-01, -4.952e-02, -1.509e-02, 5.710e-02, 9.685e-02) * s[1][0][0];
	r1 += M4(-5.474e-02, -1.176e-02, 1.555e-02, -1.133e-01, -3.348e-01, 1.228e-01, 1.384e-01, -3.625e-02, -6.084e-02, 2.230e-02, -4.758e-02, -3.778e-02, -7.449e-02, 1.021e-01, -1.007e-01, 5.237e-02) * s[1][0][0];
	r0 += M4(-3.291e-01, 2.800e-01, -2.425e-01, 6.989e-03, 5.187e-02, -7.270e-02, -8.040e-02, -8.814e-02, 1.082e-01, -5.527e-02, -2.329e-01, 7.861e-02, -1.655e-01, 2.388e-02, 1.050e-01, -1.151e-01) * s[1][0][1];
	r1 += M4(7.680e-02, 3.123e-02, -2.339e-01, 1.633e-01, -9.304e-02, 6.248e-02, -7.883e-02, 1.462e-01, 4.827e-02, 9.951e-02, 2.107e-02, -3.549e-01, 1.536e-01, 6.581e-02, 1.301e-01, 4.063e-01) * s[1][0][1];
	r0 += M4(2.358e-01, -2.032e-01, 1.164e-01, -2.075e-01, 6.077e-01, 7.229e-02, -6.211e-01, -4.118e-02, -1.499e-01, -2.274e-01, -1.159e-02, 2.575e-01, 8.452e-02, 5.337e-02, -6.493e-02, -1.031e-02) * s[1][1][0];
	r1 += M4(2.934e-02, -6.980e-02, -5.573e-02, -2.305e-01, -7.658e-01, 7.198e-01, -4.952e-02, -4.372e-01, -1.642e-02, -1.372e-01, 7.677e-02, 1.032e-01, -1.200e-01, 4.148e-01, -2.788e-01, -1.543e-01) * s[1][1][0];
	r0 += M4(2.381e-01, 1.950e-01, -1.385e-01, -2.552e-01, -9.030e-02, 1.776e-01, -2.904e-02, -1.628e-01, 2.966e-01, 5.554e-03, 1.913e-01, 2.031e-01, 3.213e-01, -2.358e-01, -1.015e-01, -2.115e-01) * s[1][1][1];
	r1 += M4(-2.220e-01, 2.737e-01, 6.070e-02, 1.836e-02, 1.675e-01, 9.559e-02, -1.523e-02, 1.486e-01, 7.140e-02, -1.162e-01, -3.026e-01, -2.470e-01, -1.512e-01, 6.269e-01, -3.313e-01, 4.182e-02) * s[1][1][1];
	r0 += M4(9.996e-02, -7.374e-02, 1.371e-01, -9.421e-02, 1.398e-01, 2.559e-02, -2.721e-01, 1.447e-01, -1.609e-01, -3.262e-02, 1.620e-03, 6.976e-02, 5.304e-02, -7.521e-02, -2.826e-02, -1.279e-01) * s[1][2][0];
	r1 += M4(-3.354e-02, 4.264e-02, -1.795e-01, -1.318e-01, -6.071e-01, 1.303e-01, -2.630e-01, -3.762e-01, -4.651e-02, 2.261e-02, -4.059e-02, 8.465e-02, 4.586e-03, 5.027e-03, -1.528e-01, -1.281e-01) * s[1][2][0];
	r0 += M4(-2.189e-01, -3.032e-02, -2.043e-01, -2.504e-01, -3.863e-02, 2.264e-02, 2.767e-03, 3.076e-02, -9.870e-03, 1.954e-02, -5.413e-02, 3.027e-03, -1.008e-01, -6.689e-02, -2.211e-01, -1.668e-01) * s[1][2][1];
	r1 += M4(-5.194e-02, 6.768e-02, 1.938e-02, 1.337e-01, -3.592e-02, 3.061e-02, -8.221e-02, -3.160e-02, 3.325e-02, 4.444e-02, 7.591e-02, 6.426e-02, 1.646e-01, 1.715e-02, 1.565e-01, 7.259e-02) * s[1][2][1];
	r0 += M4(5.611e-02, 2.496e-01, 4.033e-02, 1.391e-01, -2.744e-03, 1.345e-01, 1.170e-01, -3.179e-02, 8.012e-02, -1.131e-02, -4.149e-02, 5.258e-02, -7.715e-03, -4.512e-02, 1.840e-03, -1.489e-02) * s[2][0][0];
	r1 += M4(3.854e-02, -5.415e-02, -4.120e-02, -2.901e-01, -2.749e-01, -7.794e-02, 2.570e-01, 3.067e-01, -2.263e-02, -7.485e-02, -1.058e-01, 4.629e-03, 5.520e-03, 7.209e-02, 1.666e-02, -2.817e-02) * s[2][0][0];
	r0 += M4(-1.426e-01, 1.708e-01, -1.307e-01, 5.317e-02, 2.969e-02, 8.163e-02, 2.964e-03, 4.402e-02, 1.168e-01, -6.896e-03, -1.417e-01, 2.961e-03, -1.983e-01, 1.253e-02, 1.233e-01, -2.773e-01) * s[2][0][1];
	r1 += M4(3.679e-02, -6.174e-02, 4.270e-02, -1.914e-01, -9.793e-02, -3.483e-02, 2.851e-02, -6.154e-02, 9.434e-02, -3.857e-02, -2.104e-02, -3.641e-01, 8.131e-02, 8.946e-02, -1.394e-01, 3.196e-01) * s[2][0][1];
	r0 += M4(2.002e-02, 2.011e-01, 6.514e-02, -2.919e-02, -3.812e-01, -4.982e-02, 3.914e-02, 2.510e-01, -9.370e-02, 4.822e-02, -3.288e-01, -3.019e-02, -1.269e-01, 1.591e-01, 6.077e-02, 7.387e-02) * s[2][1][0];
	r1 += M4(3.004e-02, -1.244e-01, -8.366e-02, -1.645e-01, -3.760e-01, -4.140e-01, -1.202e-01, -4.451e-01, -7.363e-02, 5.905e-02, -1.602e-02, 2.405e-01, 3.287e-02, 4.127e-03, 1.902e-02, -2.327e-01) * s[2][1][0];
	r0 += M4(1.158e-01, 2.481e-02, 6.566e-02, -1.187e-01, 2.560e-02, 1.384e-02, 3.427e-03, -6.816e-03, 2.994e-01, 5.840e-02, 4.550e-02, -6.209e-02, -2.773e-02, 2.149e-01, 1.745e-01, 9.112e-02) * s[2][1][1];
	r1 += M4(2.460e-02, 7.256e-02, 1.363e-01, 7.202e-02, -4.168e-02, -7.064e-02, 8.217e-02, 1.343e-03, 3.225e-02, 2.276e-01, 3.073e-02, 1.256e-01, 3.772e-02, 2.168e-01, 1.929e-01, -3.570e-01) * s[2][1][1];
	r0 += M4(1.665e-01, 3.473e-02, 1.088e-01, 8.103e-02, 2.663e-03, -9.808e-02, 2.991e-01, 1.816e-01, -1.262e-01, -1.321e-03, -7.438e-02, -6.319e-03, 1.009e-01, 5.340e-02, -2.509e-02, 8.483e-02) * s[2][2][0];
	r1 += M4(-1.196e-01, 5.856e-02, -2.057e-02, -1.420e-01, -2.531e-01, -3.626e-01, -3.619e-01, -1.438e-01, -5.670e-03, 8.374e-02, -5.015e-02, -1.011e-02, 2.496e-02, 2.822e-02, 8.864e-02, -2.154e-02) * s[2][2][0];
	r0 += M4(4.982e-03, -4.540e-02, -6.359e-02, -4.979e-03, -1.227e-02, 3.217e-02, 2.850e-02, 2.909e-02, 2.274e-02, -5.991e-02, -3.913e-02, -8.244e-02, -5.388e-02, 4.119e-02, -7.091e-02, -3.262e-02) * s[2][2][1];
	r1 += M4(4.788e-02, 6.378e-03, 1.086e-01, 5.920e-02, -9.560e-02, -6.757e-02, -1.194e-01, -1.067e-01, 8.315e-02, 1.948e-01, 8.355e-02, -4.377e-03, 1.111e-01, 1.436e-01, 1.692e-01, 2.270e-01) * s[2][2][1];
	r0 += V4(-2.984e-04, -5.177e-03, 5.839e-03, 1.341e-03);
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(9.945e-02, 2.801e-02, 2.529e-03, 2.933e-02);
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-6x8C-DS-conv4
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv3
//!BIND LUMA
//!SAVE conv4
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(texelFetch(conv3_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv3_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 g[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv3_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			g[0][ay][ax] = l0(x - 1, y - 1);
			g[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s[3][3][2];
	V4 r0 = V4(0.0);
	V4 r1 = V4(0.0);
	s[0][0][0] = max(g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[0][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[0][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[0][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[0][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[0][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[0][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(6.059e-02, 1.217e-02, -2.152e-02, -9.455e-02, 8.806e-02, -5.544e-02, 2.122e-02, -2.265e-02, -7.932e-02, 3.715e-02, 4.307e-02, 8.189e-02, -4.796e-02, -3.399e-02, -3.186e-02, 1.210e-01) * s[0][0][0];
	r1 += M4(6.479e-02, 2.562e-02, -6.499e-02, 5.270e-02, -1.168e-01, 1.126e-01, -1.478e-01, 4.711e-03, -2.817e-02, -3.595e-02, 7.002e-02, -7.563e-02, 1.467e-02, -6.714e-02, 8.959e-02, -4.640e-02) * s[0][0][0];
	r0 += M4(1.811e-01, -1.145e-01, -3.583e-02, -7.506e-02, 3.270e-02, 2.655e-02, 1.431e-01, 1.623e-02, -1.454e-01, 6.432e-02, -3.143e-03, -2.357e-02, 1.262e-04, 1.561e-02, -3.348e-02, -1.104e-01) * s[0][0][1];
	r1 += M4(-1.155e-01, 2.823e-01, -1.472e-01, 1.138e-01, 1.418e-01, -4.334e-02, -1.696e-02, -6.416e-02, 1.990e-02, 6.611e-02, -3.512e-02, 3.869e-02, -4.560e-02, -2.084e-02, -1.228e-01, 6.740e-04) * s[0][0][1];
	r0 += M4(1.121e-01, 9.391e-03, 6.813e-02, 6.970e-02, -9.394e-02, -2.934e-02, -1.076e-01, 5.004e-02, 7.047e-02, -6.608e-02, -5.603e-02, -1.763e-01, 3.692e-02, 1.076e-02, 6.091e-03, 1.147e-01) * s[0][1][0];
	r1 += M4(3.272e-03, -7.926e-02, 3.643e-02, 1.233e-01, -2.278e-02, 4.119e-02, -4.569e-02, -4.309e-02, -3.340e-02, 1.304e-01, -1.492e-01, -7.343e-02, -5.440e-02, 3.747e-02, 2.462e-02, -6.030e-02) * s[0][1][0];
	r0 += M4(3.474e-02, -1.116e-01, -3.094e-02, -1.004e-01, 5.477e-02, -1.731e-01, -1.245e-01, 2.597e-01, -1.745e-01, -4.890e-01, -6.431e-02, -9.124e-03, 6.421e-02, 2.061e-02, -5.707e-03, -1.110e-01) * s[0][1][1];
	r1 += M4(-4.112e-02, 3.096e-01, -9.279e-02, 6.600e-02, -1.286e-01, -5.580e-02, 4.757e-02, 1.282e-02, -2.082e-01, 2.619e-01, 1.235e-02, 6.552e-02, -1.427e-01, -2.728e-02, -1.669e-02, 1.023e-01) * s[0][1][1];
	r0 += M4(1.575e-02, 1.152e-01, -2.478e-03, -2.463e-02, 1.028e-03, 4.590e-02, -2.674e-02, 7.013e-03, -1.543e-02, -1.900e-01, -3.629e-02, -2.471e-02, 6.917e-03, 3.925e-02, 8.646e-04, 3.663e-02) * s[0][2][0];
	r1 += M4(-3.371e-02, -2.427e-03, -5.676e-02, 2.026e-02, -8.820e-03, -3.192e-02, -3.260e-02, 1.283e-02, -2.951e-02, -2.644e-02, -1.945e-02, -1.468e-02, 5.131e-02, 3.745e-02, -1.812e-02, -3.254e-02) * s[0][2][0];
	r0 += M4(-7.853e-02, -1.008e-01, 9.624e-02, 2.183e-04, 1.525e-01, -1.812e-01, -4.389e-02, 4.461e-02, 3.821e-03, -1.417e-01, -1.362e-02, -4.146e-02, -8.063e-02, -6.806e-02, -3.599e-03, -7.198e-02) * s[0][2][1];
	r1 += M4(-4.269e-02, -5.440e-02, 8.671e-02, -7.407e-02, -9.596e-02, 6.069e-02, -4.625e-02, 8.840e-02, -4.018e-02, -1.030e-01, 9.302e-03, 1.138e-01, -3.405e-02, -4.348e-02, -1.237e-02, -2.226e-02) * s[0][2][1];
	r0 += M4(-4.900e-02, -3.727e-03, -2.388e-02, 1.890e-01, 6.017e-02, -1.692e-02, 3.218e-03, -1.323e-01, -1.049e-01, 1.003e-01, 1.174e-01, -1.956e-01, -1.295e-01, -4.218e-03, 8.803e-02, -7.434e-03) * s[1][0][0];
	r1 += M4(4.111e-03, -5.123e-04, 4.860e-02, -1.218e-01, -3.882e-01, 1.449e-01, -2.511e-01, 1.345e-01, 1.399e-01, -8.082e-02, -4.889e-02, 7.439e-02, 1.559e-01, -6.163e-02, -2.911e-02, -4.250e-02) * s[1][0][0];
	r0 += M4(3.721e-01, -2.268e-01, 1.637e-01, 4.189e-01, 1.298e-01, -3.205e-02, 1.524e-02, -3.461e-02, 1.726e-01, -6.979e-02, 3.027e-03, 3.132e-01, 6.920e-02, 4.944e-02, -2.048e-02, -1.404e-01) * s[1][0][1];
	r1 += M4(-6.051e-01, 2.446e-01, 6.711e-02, -2.801e-02, -8.340e-02, -6.278e-02, -1.015e-01, 3.527e-02, 2.469e-01, -1.504e-02, 2.069e-01, -4.713e-02, 6.101e-02, -2.625e-02, -1.863e-01, 9.255e-02) * s[1][0][1];
	r0 += M4(-1.451e-01, 2.134e-01, 3.580e-02, -5.970e-02, 5.636e-03, 1.062e-02, -2.085e-01, -1.449e-02, 2.942e-01, 1.388e-02, 6.857e-02, -3.018e-01, 1.460e-01, -4.164e-01, 2.779e-01, 1.645e-01) * s[1][1][0];
	r1 += M4(1.936e-01, -4.558e-02, 8.717e-02, 1.210e-02, -9.721e-02, 1.800e-01, 7.281e-02, -1.954e-01, -7.789e-02, 1.039e-01, -1.628e-01, 2.979e-01, 3.056e-01, -4.950e-02, -1.255e-01, 5.558e-02) * s[1][1][0];
	r0 += M4(-5.678e-02, 1.508e-01, 1.140e-01, 4.903e-02, 2.743e-01, -5.248e-02, 1.708e-01, 1.542e-01, 1.250e-01, -4.237e-01, 1.408e-01, 1.157e-01, 3.518e-02, 1.660e-01, 7.393e-02, -2.568e-02) * s[1][1][1];
	r1 += M4(-2.009e-01, -3.012e-02, 1.526e-01, 3.781e-01, -3.166e-02, -5.722e-02, 1.855e-01, 5.213e-02, 1.329e-02, -1.744e-01, -5.124e-02, 1.149e-01, -9.072e-02, -1.349e-01, 8.976e-02, 4.139e-01) * s[1][1][1];
	r0 += M4(-1.145e-01, 9.992e-02, 3.886e-02, -7.233e-05, -8.271e-02, -5.063e-02, 1.460e-01, -8.781e-03, -2.255e-03, 1.913e-01, 6.134e-02, 8.987e-03, -5.896e-02, -1.817e-01, -9.490e-02, 1.223e-01) * s[1][2][0];
	r1 += M4(8.648e-02, 4.585e-02, 4.731e-02, 9.793e-02, 8.849e-02, 1.060e-01, -1.438e-02, 2.811e-03, 2.236e-02, 7.782e-02, 1.030e-01, -3.879e-02, 2.403e-02, 1.226e-01, -9.415e-02, -1.465e-01) * s[1][2][0];
	r0 += M4(-7.011e-02, -1.509e-02, 1.748e-01, 9.902e-02, 1.097e-02, -8.977e-02, -4.091e-02, 1.594e-02, -2.337e-01, 8.230e-04, 8.736e-02, 6.348e-03, 1.009e-02, -2.347e-02, -1.059e-01, -9.308e-03) * s[1][2][1];
	r1 += M4(-3.346e-02, 3.329e-02, 8.814e-02, 7.134e-02, -1.327e-02, 9.361e-02, -5.199e-02, 3.272e-02, 4.718e-04, 1.702e-01, 7.928e-02, 1.228e-02, -7.699e-02, 3.173e-02, -5.990e-02, 7.017e-02) * s[1][2][1];
	r0 += M4(-9.876e-02, 8.190e-02, 5.048e-02, -9.077e-02, -5.115e-02, 7.089e-02, 5.060e-02, -8.120e-02, -1.517e-01, -4.114e-02, 1.739e-02, -4.038e-03, 1.158e-01, -1.659e-02, -3.336e-02, 2.848e-01) * s[2][0][0];
	r1 += M4(-1.409e-02, -3.681e-02, 4.541e-02, 9.307e-04, -4.429e-02, 8.190e-02, -3.093e-02, -8.917e-03, 2.051e-02, -1.404e-02, -4.893e-02, -3.552e-02, 8.858e-02, 2.724e-01, 4.128e-02, -6.983e-02) * s[2][0][0];
	r0 += M4(3.217e-02, -1.090e-01, 9.722e-02, -1.225e-01, -2.542e-01, 1.219e-01, -4.158e-03, -9.899e-02, -4.412e-02, -8.340e-02, -4.520e-02, 1.826e-02, -5.461e-02, 8.616e-02, 1.101e-02, 1.138e-01) * s[2][0][1];
	r1 += M4(-1.551e-01, -7.576e-02, 1.686e-01, 7.068e-02, -9.980e-02, 3.255e-02, -5.634e-02, 4.235e-02, -1.003e-01, 1.760e-02, 6.015e-02, -8.434e-04, -4.331e-02, 1.147e-01, -8.161e-02, -4.320e-03) * s[2][0][1];
	r0 += M4(-5.096e-02, 1.137e-01, 1.417e-02, 4.352e-02, 1.033e-01, 7.337e-03, -1.535e-01, 1.754e-01, 1.161e-01, 9.840e-02, 2.224e-03, 1.645e-01, 3.168e-02, -9.466e-02, 3.746e-01, 1.745e-01) * s[2][1][0];
	r1 += M4(3.135e-02, 4.603e-02, -2.452e-02, 9.803e-02, 2.361e-03, 1.120e-01, 8.743e-04, 1.067e-01, -6.833e-02, 1.599e-01, 5.200e-02, 7.890e-03, 1.415e-01, -2.512e-01, 4.869e-02, -4.967e-01) * s[2][1][0];
	r0 += M4(2.261e-01, -2.491e-01, -1.692e-01, -1.260e-01, -5.253e-04, 1.037e-01, -1.541e-01, -7.559e-03, -1.815e-02, 2.019e-02, 1.520e-02, -1.947e-01, -1.290e-01, -2.323e-02, -4.406e-02, 1.501e-01) * s[2][1][1];
	r1 += M4(-7.176e-02, 2.504e-01, 6.363e-02, 1.068e-01, -4.458e-02, -8.956e-03, -3.140e-02, 2.190e-01, 3.122e-03, 2.650e-02, 2.948e-02, -5.244e-02, 3.067e-02, -2.094e-01, -4.340e-02, 6.099e-02) * s[2][1][1];
	r0 += M4(1.164e-01, 4.661e-02, 1.020e-01, -1.093e-02, 3.017e-02, 4.880e-03, -1.148e-02, 4.323e-03, 4.049e-02, -1.148e-02, -9.617e-02, 4.621e-02, -8.666e-02, -1.106e-01, 1.026e-01, 5.235e-02) * s[2][2][0];
	r1 += M4(-5.990e-02, -9.148e-04, -5.505e-02, -3.920e-02, -8.899e-03, -1.437e-02, -7.330e-03, -3.261e-02, 3.514e-02, -3.483e-02, 2.559e-02, 7.788e-02, 7.886e-02, 1.369e-01, -1.299e-03, -2.165e-01) * s[2][2][0];
	r0 += M4(1.255e-01, -8.509e-02, -9.564e-03, 4.723e-02, 7.013e-02, 6.666e-03, -1.920e-01, 1.120e-02, -5.311e-02, -3.106e-02, 6.361e-02, 6.693e-02, -5.941e-02, 1.374e-01, -7.697e-02, 8.226e-02) * s[2][2][1];
	r1 += M4(-2.120e-02, 7.909e-02, 1.454e-02, 5.798e-02, 6.101e-03, -6.909e-02, 3.147e-02, 3.421e-02, -2.981e-02, 1.461e-02, 6.227e-02, 3.103e-03, -2.058e-02, 1.419e-01, -4.254e-02, -1.284e-01) * s[2][2][1];
	s[0][0][0] = max(g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[1][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[1][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[1][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[1][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[1][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[1][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(7.197e-02, -5.262e-02, -3.651e-02, -9.588e-02, 6.734e-02, 6.626e-02, 2.611e-02, -1.705e-01, 4.662e-03, -9.465e-03, 2.198e-02, -5.352e-02, 3.680e-02, -1.239e-04, -4.201e-02, -1.275e-01) * s[0][0][0];
	r1 += M4(-4.006e-02, 1.039e-01, -6.879e-02, 3.648e-02, 8.477e-02, 1.403e-01, -5.427e-02, 9.437e-02, -1.458e-02, 1.970e-02, -9.057e-02, -7.240e-03, 1.452e-02, -1.153e-01, -1.588e-01, 1.577e-02) * s[0][0][0];
	r0 += M4(-9.895e-02, 1.793e-01, -3.058e-01, -3.917e-01, 2.974e-02, -7.245e-03, -7.704e-03, -1.555e-02, -6.632e-02, 1.880e-02, 6.912e-02, 3.251e-02, -3.252e-02, 6.564e-03, 2.375e-02, 6.755e-02) * s[0][0][1];
	r1 += M4(-5.434e-02, 3.136e-01, -4.058e-01, 3.607e-01, 3.750e-02, 3.304e-02, -2.301e-02, 3.485e-02, 8.591e-02, 6.482e-02, 6.909e-02, 2.922e-02, 7.299e-02, -8.760e-02, 1.387e-01, -1.634e-01) * s[0][0][1];
	r0 += M4(-3.600e-02, 8.964e-02, -7.643e-02, -8.375e-02, -2.346e-01, -5.221e-02, 1.424e-01, 1.236e-01, -2.278e-02, 1.234e-02, -3.978e-02, -5.146e-02, -2.679e-03, 5.293e-02, 1.660e-03, -9.939e-02) * s[0][1][0];
	r1 += M4(5.328e-02, -3.114e-02, 4.497e-02, 1.078e-01, 2.553e-02, -1.689e-02, 1.256e-01, -1.269e-01, -5.706e-02, -4.285e-02, -1.060e-01, -7.573e-02, -1.404e-01, 3.511e-02, -3.050e-02, 3.129e-01) * s[0][1][0];
	r0 += M4(4.776e-02, -3.869e-01, -8.648e-02, -4.664e-01, -3.591e-02, -1.826e-01, -9.595e-02, 2.945e-02, -4.808e-02, 2.807e-02, 2.843e-02, -1.357e-01, 6.090e-02, -5.678e-02, -6.994e-02, -4.477e-02) * s[0][1][1];
	r1 += M4(1.195e-03, 3.086e-01, -9.943e-02, 4.085e-01, -8.763e-02, 1.851e-01, -1.100e-01, 5.253e-02, 1.747e-01, 9.979e-02, -3.810e-03, -6.339e-02, -4.700e-02, -1.901e-01, -2.052e-01, 5.404e-02) * s[0][1][1];
	r0 += M4(3.118e-02, -3.481e-02, 9.448e-02, 3.504e-02, 9.210e-02, 1.724e-01, -4.784e-02, -4.192e-02, -6.221e-02, -6.715e-02, -7.403e-02, -4.569e-02, 7.532e-02, 1.073e-01, -9.989e-02, -6.701e-02) * s[0][2][0];
	r1 += M4(1.151e-02, 6.377e-02, -4.575e-03, -9.140e-03, 3.410e-02, 1.028e-01, -1.064e-01, 2.200e-02, 1.344e-02, -7.665e-02, 2.409e-02, 3.739e-02, -1.068e-01, -3.804e-02, 3.466e-02, 4.232e-02) * s[0][2][0];
	r0 += M4(-1.842e-01, -2.553e-01, -2.492e-01, 4.919e-02, 6.210e-02, 1.194e-02, 3.256e-02, 3.816e-02, -4.408e-02, -2.487e-02, 6.442e-02, -1.500e-01, -5.255e-03, 5.630e-02, -9.853e-02, -8.401e-03) * s[0][2][1];
	r1 += M4(-1.835e-01, -2.719e-01, 2.557e-02, 3.041e-01, 5.574e-04, 6.422e-02, -2.186e-03, -5.987e-03, 7.401e-02, -2.713e-02, -6.188e-03, 5.528e-03, -2.446e-02, -2.251e-01, 1.395e-01, -1.993e-02) * s[0][2][1];
	r0 += M4(-1.599e-01, -1.428e-02, -3.217e-02, 1.315e-01, 2.161e-02, 1.080e-01, 9.055e-02, -9.793e-02, 7.039e-02, -1.044e-01, -6.210e-02, 9.691e-02, -1.425e-01, 6.525e-02, -4.517e-03, -1.806e-01) * s[1][0][0];
	r1 += M4(7.584e-02, -1.000e-01, 2.271e-02, -1.420e-01, -1.891e-01, 2.346e-01, -2.901e-02, 2.895e-01, -5.187e-02, 1.370e-01, 5.546e-03, 2.617e-02, -7.960e-02, -5.013e-02, -2.808e-01, 2.203e-02) * s[1][0][0];
	r0 += M4(-2.811e-01, -1.400e-01, -2.535e-01, 5.018e-02, 9.514e-02, 7.454e-02, -1.520e-01, -1.958e-01, 2.267e-02, 4.724e-02, 5.595e-02, 8.419e-02, -3.750e-02, -5.580e-03, -3.328e-03, -4.090e-02) * s[1][0][1];
	r1 += M4(5.495e-01, -5.149e-01, -1.368e-01, 4.437e-01, -5.905e-02, 2.744e-01, -8.831e-02, 1.890e-01, 2.100e-01, 1.662e-01, 4.278e-02, 7.338e-02, 8.273e-02, -1.086e-01, -1.707e-01, -1.775e-02) * s[1][0][1];
	r0 += M4(-3.033e-02, 1.678e-01, -6.247e-02, 3.708e-01, -3.079e-01, 1.075e-01, -2.251e-01, 1.012e-01, 2.978e-01, -2.033e-01, -1.508e-01, 4.270e-02, -1.400e-01, -1.645e-02, -4.720e-02, -1.210e-01) * s[1][1][0];
	r1 += M4(3.122e-02, -2.316e-02, 1.535e-01, -2.165e-01, -1.178e-01, 8.163e-03, -2.952e-02, -1.798e-01, -8.252e-02, 3.788e-01, -5.506e-02, 3.011e-01, -2.084e-01, 8.013e-02, -1.197e-01, 1.529e-01) * s[1][1][0];
	r0 += M4(6.623e-01, -1.079e+00, 2.891e-01, 6.032e-01, -1.901e-01, 2.939e-01, -3.328e-01, -1.098e-02, 3.774e-01, -1.566e-01, 1.940e-01, 2.803e-01, -3.239e-02, 7.437e-02, 5.556e-02, 1.606e-01) * s[1][1][1];
	r1 += M4(1.152e-01, 9.032e-02, -4.365e-01, 6.690e-01, -1.654e-01, 4.408e-02, 1.798e-01, -1.516e-01, 1.112e-01, 1.586e-01, 1.542e-01, 7.960e-02, -2.373e-01, 3.672e-02, 2.442e-02, 1.024e-01) * s[1][1][1];
	r0 += M4(-5.499e-02, -9.893e-02, 8.167e-02, -1.009e-01, 2.612e-03, -2.294e-02, -1.146e-01, -1.203e-01, -2.081e-02, 2.019e-01, 3.375e-02, -5.010e-02, -2.699e-02, -2.902e-04, -6.743e-02, 1.191e-01) * s[1][2][0];
	r1 += M4(-5.999e-02, -2.706e-02, -8.146e-03, -5.321e-02, 3.689e-02, -4.988e-02, 4.626e-02, 1.001e-02, -1.716e-02, 7.271e-02, 5.089e-02, -2.949e-02, -5.470e-02, 8.032e-02, 3.748e-04, 5.898e-02) * s[1][2][0];
	r0 += M4(-1.814e-01, 9.550e-03, 1.336e-01, -1.276e-01, -6.847e-02, -1.441e-01, 3.945e-02, -2.318e-01, -1.316e-02, 1.591e-01, 3.348e-01, 8.346e-02, 5.137e-02, -2.259e-02, -5.060e-02, -2.376e-01) * s[1][2][1];
	r1 += M4(-3.041e-01, 8.407e-02, 2.647e-02, 3.575e-01, -1.916e-02, -4.036e-02, 1.289e-02, 7.032e-02, 9.979e-02, 9.118e-02, 1.744e-02, -1.283e-01, 1.441e-02, -2.570e-02, -1.488e-02, 1.359e-01) * s[1][2][1];
	r0 += M4(-7.860e-02, 7.215e-02, 7.757e-02, -1.932e-01, 4.431e-02, -5.572e-02, -2.203e-02, 9.525e-02, -4.432e-02, 6.377e-02, -8.608e-02, 7.498e-03, 3.785e-03, 1.336e-02, -8.076e-02, 7.158e-02) * s[2][0][0];
	r1 += M4(-3.524e-02, 5.351e-02, -1.066e-01, 8.034e-02, -5.839e-02, 1.052e-01, -7.780e-02, 1.094e-01, 1.192e-02, -4.266e-02, -4.141e-02, 3.741e-03, -5.752e-03, 6.594e-02, -2.242e-02, -4.237e-02) * s[2][0][0];
	r0 += M4(-2.567e-01, 2.076e-01, -1.986e-01, 4.904e-02, -3.447e-02, -1.976e-02, 6.495e-02, 9.108e-02, -8.174e-03, 1.246e-01, -1.319e-02, 8.057e-02, -5.433e-02, 5.282e-02, -7.104e-02, -6.373e-02) * s[2][0][1];
	r1 += M4(1.340e-01, -1.631e-01, -1.771e-01, 3.293e-01, 6.659e-02, -2.032e-02, 6.193e-03, -1.751e-02, 1.512e-01, 4.992e-02, 1.110e-01, -3.578e-02, -2.018e-02, 3.861e-03, -8.892e-02, -2.259e-02) * s[2][0][1];
	r0 += M4(1.126e-01, -7.207e-02, 3.021e-02, -2.000e-02, -3.779e-01, -5.815e-03, -1.420e-01, -9.680e-02, 1.249e-01, 1.338e-01, -1.174e-01, 2.960e-03, 8.925e-03, 1.665e-02, -7.480e-02, -8.549e-05) * s[2][1][0];
	r1 += M4(9.247e-03, -2.849e-02, 2.594e-02, 3.985e-02, -2.212e-01, 5.056e-02, 6.176e-02, -3.384e-02, -1.303e-02, 1.950e-01, -6.274e-02, 9.560e-02, 2.537e-02, -3.573e-02, -2.214e-02, 4.473e-02) * s[2][1][0];
	r0 += M4(1.193e-01, 2.538e-01, 2.957e-01, 1.938e-01, -1.268e-01, 1.265e-01, -1.579e-01, -1.011e-02, 1.466e-01, 1.438e-01, 1.241e-01, -9.102e-03, -4.459e-02, 2.490e-02, -2.134e-02, -8.063e-02) * s[2][1][1];
	r1 += M4(1.534e-01, -3.247e-01, 7.918e-02, 5.528e-01, -9.298e-02, 1.174e-01, -5.405e-02, -2.244e-02, 9.304e-02, 4.597e-02, 7.507e-02, 2.382e-02, 2.013e-02, 9.039e-03, -1.098e-01, 9.174e-02) * s[2][1][1];
	r0 += M4(3.625e-02, -9.346e-03, -1.916e-03, -5.283e-02, 1.012e-01, -1.193e-01, -4.654e-03, 4.702e-02, 1.122e-02, 9.051e-02, -3.357e-02, -2.320e-05, 1.326e-02, 3.589e-02, -2.328e-02, 1.066e-02) * s[2][2][0];
	r1 += M4(7.498e-03, -5.299e-02, -1.491e-02, 7.813e-02, 5.649e-02, -1.279e-01, 7.262e-02, 4.351e-02, -2.846e-02, 6.253e-02, -1.562e-02, 5.089e-03, -1.055e-03, 1.408e-02, 5.380e-02, 4.412e-03) * s[2][2][0];
	r0 += M4(-2.808e-01, 2.043e-01, -1.560e-01, 2.193e-01, 6.708e-02, 1.497e-02, -4.495e-02, 1.596e-01, 1.174e-01, -2.865e-02, 3.456e-02, -2.139e-02, 1.139e-01, 5.964e-02, 6.390e-02, 7.164e-02) * s[2][2][1];
	r1 += M4(-8.596e-02, 1.973e-01, -1.954e-01, 3.688e-01, -7.230e-03, -1.775e-02, -3.050e-02, 2.322e-02, -2.999e-02, -1.272e-02, -1.491e-02, -1.086e-01, 3.168e-02, -1.167e-02, -2.370e-02, 5.994e-02) * s[2][2][1];
	r0 += V4(1.613e-02, -1.860e-02, 2.728e-02, -9.778e-03);
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(1.317e-02, 4.004e-03, 5.861e-03, 1.404e-02);
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-6x8C-DS-conv5
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv4
//!BIND LUMA
//!SAVE conv5
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(texelFetch(conv4_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv4_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 g[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv4_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			g[0][ay][ax] = l0(x - 1, y - 1);
			g[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s[3][3][2];
	V4 r0 = V4(0.0);
	V4 r1 = V4(0.0);
	s[0][0][0] = max(g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[0][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[0][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[0][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[0][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[0][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[0][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(6.614e-02, 4.657e-02, -1.122e-01, 5.211e-02, -2.474e-02, -3.444e-02, 3.982e-02, 2.909e-02, -3.770e-02, 1.918e-02, 5.531e-02, -1.004e-01, 5.555e-02, -1.419e-02, 6.249e-02, 1.230e-01) * s[0][0][0];
	r1 += M4(4.114e-02, 6.076e-02, -4.572e-02, 3.274e-02, -2.860e-02, 3.454e-02, 1.360e-02, 7.177e-02, -3.347e-02, 8.056e-02, 1.376e-02, 1.021e-01, 3.604e-02, 6.670e-02, 2.534e-02, -8.590e-02) * s[0][0][0];
	r0 += M4(1.295e-02, 2.740e-02, 3.765e-02, -1.551e-02, -8.084e-03, -1.662e-01, -4.410e-02, 9.036e-02, -5.282e-02, -4.226e-02, -2.752e-01, -2.180e-02, -2.845e-02, -6.799e-02, 1.130e-01, 6.409e-02) * s[0][0][1];
	r1 += M4(3.917e-02, 1.081e-01, -2.105e-02, -4.894e-02, 5.794e-02, 2.554e-01, 4.966e-02, -1.470e-01, 5.038e-02, 9.365e-02, -2.468e-01, 2.901e-01, 1.878e-02, -6.989e-03, -1.053e-02, 7.820e-03) * s[0][0][1];
	r0 += M4(-4.989e-02, -8.419e-02, -8.053e-02, 3.232e-01, 5.656e-03, -2.360e-02, -1.027e-01, -2.959e-02, 1.368e-02, 4.577e-02, 4.919e-02, 4.037e-03, -8.188e-03, -1.299e-01, -1.225e-01, 4.295e-02) * s[0][1][0];
	r1 += M4(-2.836e-02, 1.351e-01, -1.362e-01, 1.701e-01, 9.307e-03, -4.247e-02, -4.046e-02, 1.651e-02, -5.494e-02, 4.316e-02, -4.353e-02, 2.765e-02, -1.752e-01, 1.073e-01, 7.507e-02, 8.460e-02) * s[0][1][0];
	r0 += M4(-5.580e-02, 5.076e-02, 9.358e-02, 3.009e-02, -1.192e-01, -6.966e-02, -1.432e-01, -2.701e-01, 1.398e-01, -2.392e-02, 1.336e-01, 2.331e-01, 9.151e-03, -4.877e-03, -1.094e-01, -7.961e-02) * s[0][1][1];
	r1 += M4(9.286e-03, 4.183e-02, -7.330e-02, 6.403e-02, -9.475e-02, 1.413e-01, 1.435e-01, -2.106e-01, -4.641e-02, -1.230e-02, -9.427e-02, 7.911e-02, -3.038e-02, -2.159e-02, 3.236e-02, -6.372e-02) * s[0][1][1];
	r0 += M4(-2.172e-02, 8.330e-03, -1.054e-01, 1.982e-01, 2.723e-03, -4.227e-02, 3.230e-02, -1.738e-03, 2.289e-02, 2.712e-03, 3.711e-02, 2.712e-02, -1.133e-02, -9.792e-02, 2.208e-02, -3.683e-02) * s[0][2][0];
	r1 += M4(-8.745e-02, -1.355e-01, -5.716e-02, -1.586e-01, -1.959e-02, 2.334e-02, -3.212e-03, 1.124e-02, 5.911e-02, 6.756e-02, 7.733e-03, 9.106e-02, -3.623e-02, 7.951e-02, -1.066e-01, 2.654e-02) * s[0][2][0];
	r0 += M4(-1.695e-02, 4.931e-02, 1.169e-02, -3.189e-02, -2.814e-02, -4.945e-03, 3.608e-02, -2.086e-01, 5.964e-02, 4.078e-03, -3.837e-02, 6.257e-02, 5.595e-02, -2.955e-02, 7.648e-02, -4.970e-02) * s[0][2][1];
	r1 += M4(1.247e-03, -3.673e-02, -1.996e-02, -5.441e-02, 1.742e-02, 1.088e-01, 2.524e-02, -6.666e-02, -3.054e-02, -7.986e-02, -7.323e-02, 6.755e-02, 7.544e-02, 8.554e-02, -2.907e-02, 2.858e-02) * s[0][2][1];
	r0 += M4(-3.639e-02, 2.796e-04, -1.994e-01, -1.180e-02, -2.807e-02, 1.528e-01, 1.613e-01, 2.801e-02, -2.967e-02, 2.298e-02, 4.231e-02, 7.822e-02, 9.145e-02, -1.627e-01, -2.837e-02, 9.907e-02) * s[1][0][0];
	r1 += M4(3.619e-02, -1.311e-01, -9.568e-02, -1.319e-01, -8.531e-02, -5.753e-03, 2.440e-02, -9.373e-02, 2.147e-02, 4.957e-02, 1.513e-01, 1.353e-01, 1.939e-02, -1.421e-01, 4.433e-02, 1.252e-01) * s[1][0][0];
	r0 += M4(-1.173e-01, 1.384e-02, 1.527e-01, -1.801e-02, 4.308e-02, 1.890e-01, 1.411e-01, 1.680e-02, -9.896e-03, -7.858e-02, -2.618e-01, 1.792e-01, 4.045e-02, -8.804e-02, 7.572e-02, 8.384e-02) * s[1][0][1];
	r1 += M4(2.636e-02, 1.422e-02, -6.671e-02, -9.051e-02, 4.278e-02, -6.668e-01, 5.870e-02, -6.400e-01, 2.972e-02, 7.409e-02, -1.472e-02, 1.959e-01, -5.135e-02, -4.166e-02, 2.623e-02, 5.633e-02) * s[1][0][1];
	r0 += M4(-3.800e-01, -1.391e-01, 6.617e-02, -2.965e-01, 5.422e-02, 4.069e-03, -1.145e-01, -3.591e-02, 4.187e-02, 1.233e-01, 1.454e-01, 1.773e-01, -8.004e-02, 5.614e-01, -4.438e-01, 3.149e-02) * s[1][1][0];
	r1 += M4(4.742e-02, -3.810e-01, -3.312e-01, 1.641e-01, -8.922e-02, -6.758e-02, 4.103e-02, -6.578e-02, 8.366e-02, -1.889e-01, -4.408e-02, 1.295e-01, 4.445e-02, -5.542e-01, 1.669e-01, -1.194e-01) * s[1][1][0];
	r0 += M4(-1.233e-02, -2.074e-02, 1.126e-01, -2.588e-01, 3.272e-02, 6.168e-01, -3.936e-01, -1.401e-03, 1.481e-01, -5.292e-01, 2.049e-01, -7.115e-02, -4.990e-02, 1.128e-01, -1.273e-01, -7.438e-02) * s[1][1][1];
	r1 += M4(-5.049e-02, -1.413e-01, 1.855e-02, 4.178e-02, 2.108e-02, 2.506e-01, 3.806e-01, 7.163e-02, 4.412e-02, -2.371e-01, -8.931e-02, 9.574e-02, 1.211e-01, -3.664e-02, -7.806e-02, -8.700e-02) * s[1][1][1];
	r0 += M4(4.553e-02, -8.114e-02, -6.914e-02, 2.733e-01, 7.149e-03, -2.581e-02, 4.667e-02, -3.307e-02, -1.741e-02, 3.580e-02, 3.780e-02, 2.215e-02, 4.939e-02, -1.120e-01, 4.298e-02, 9.585e-02) * s[1][2][0];
	r1 += M4(-7.232e-02, -3.895e-02, 6.713e-02, -8.521e-03, -5.282e-03, -7.439e-02, -7.240e-02, -2.686e-02, 1.386e-01, -3.858e-02, -3.357e-02, -2.715e-02, 1.554e-02, -1.638e-01, -7.448e-02, 6.664e-02) * s[1][2][0];
	r0 += M4(-6.269e-02, 2.502e-03, -4.531e-02, -4.118e-02, -9.938e-02, 1.490e-01, 2.553e-02, -1.449e-01, -9.139e-03, -4.260e-02, 4.340e-03, -6.530e-02, 3.128e-02, -7.330e-03, 1.677e-01, 5.432e-02) * s[1][2][1];
	r1 += M4(-1.010e-01, 3.264e-02, -2.590e-02, 5.862e-02, -3.399e-02, 9.935e-02, -1.085e-01, -1.973e-01, 2.062e-02, 8.975e-03, -8.490e-04, 4.621e-02, 7.267e-02, 1.192e-01, -2.955e-02, 1.253e-03) * s[1][2][1];
	r0 += M4(4.242e-05, 1.303e-02, -7.005e-02, -9.754e-02, -1.047e-01, 1.423e-01, 3.718e-02, -3.537e-02, -5.799e-02, 1.538e-02, 6.064e-02, 5.777e-03, -7.713e-02, 2.981e-02, 1.241e-01, -3.983e-02) * s[2][0][0];
	r1 += M4(-4.552e-02, 1.143e-02, -1.582e-02, -8.869e-02, -1.853e-02, -3.679e-02, -2.125e-02, -4.567e-02, 5.717e-03, -8.234e-04, -3.265e-02, 6.183e-02, 3.405e-02, -3.548e-02, 1.898e-02, 7.168e-02) * s[2][0][0];
	r0 += M4(-3.045e-02, -8.293e-02, 4.134e-02, -2.884e-02, 1.464e-01, 3.924e-01, -1.355e-01, -4.059e-01, -9.246e-04, -7.233e-02, 2.221e-02, -1.937e-02, -4.209e-02, 4.269e-02, 2.549e-03, 2.806e-02) * s[2][0][1];
	r1 += M4(3.863e-02, -1.093e-01, -3.337e-03, -2.517e-02, -1.032e-01, 3.138e-01, -1.026e-01, -4.112e-01, -6.350e-03, -2.415e-02, 2.589e-02, 1.258e-01, -4.112e-03, 1.249e-03, 1.084e-02, 3.240e-02) * s[2][0][1];
	r0 += M4(-6.218e-02, -7.678e-02, 2.441e-02, -1.292e-01, -2.610e-02, 2.395e-02, -2.964e-02, -1.351e-02, 6.877e-03, 8.301e-03, 2.948e-02, 5.621e-02, 3.603e-01, -1.149e-01, 4.305e-02, -2.140e-01) * s[2][1][0];
	r1 += M4(-5.931e-02, -3.004e-02, -8.671e-02, 1.345e-02, -1.474e-01, 1.691e-01, 5.214e-02, -2.050e-02, 2.756e-03, -2.682e-02, 3.593e-02, 3.528e-02, 3.591e-02, -2.865e-01, -1.509e-02, 8.539e-02) * s[2][1][0];
	r0 += M4(-3.698e-02, 1.160e-01, 4.171e-02, -3.710e-02, -2.186e-01, -8.602e-02, -4.241e-02, -1.528e-01, 4.094e-02, -2.085e-01, -1.611e-03, 8.360e-02, 1.073e-01, -3.472e-02, -2.048e-02, -4.157e-02) * s[2][1][1];
	r1 += M4(-1.163e-01, -7.110e-02, -2.363e-02, -1.248e-02, -3.446e-02, -9.526e-02, -2.104e-01, -4.118e-02, 7.411e-02, -1.350e-02, -2.159e-02, -1.029e-02, -6.103e-02, -5.564e-02, -5.864e-02, -3.400e-02) * s[2][1][1];
	r0 += M4(5.364e-02, -1.070e-01, -6.120e-02, 7.707e-02, 7.203e-03, -7.545e-02, -6.723e-03, 3.698e-02, -3.657e-02, 2.152e-02, 5.687e-02, -2.763e-02, 1.653e-02, -3.102e-03, 5.955e-02, -1.037e-01) * s[2][2][0];
	r1 += M4(1.800e-02, -4.760e-02, 7.934e-02, 2.526e-02, -2.158e-02, 6.718e-02, 3.369e-02, 3.982e-02, -3.156e-02, 1.934e-02, -5.224e-02, -1.823e-02, 8.788e-02, -1.183e-01, -1.519e-01, -3.677e-02) * s[2][2][0];
	r0 += M4(-8.712e-03, 1.637e-02, -6.283e-02, 1.916e-02, 3.633e-02, 3.297e-02, -5.415e-02, 9.317e-02, 5.493e-02, 4.476e-02, 3.339e-02, -1.916e-02, -3.592e-02, -2.761e-02, 2.323e-02, 4.779e-02) * s[2][2][1];
	r1 += M4(6.106e-02, -6.147e-02, 1.534e-02, 1.404e-02, -3.232e-02, 7.713e-02, 5.920e-02, 4.729e-03, -5.657e-02, -1.009e-01, -5.326e-02, 1.591e-02, 7.836e-03, 5.602e-02, -5.159e-02, -5.777e-02) * s[2][2][1];
	s[0][0][0] = max(g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[1][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[1][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[1][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[1][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[1][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[1][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(-5.965e-03, -7.359e-03, 1.250e-02, 4.773e-02, 7.742e-03, -1.500e-02, 8.087e-03, 6.116e-04, 3.859e-02, -1.113e-02, -5.729e-02, -7.446e-02, 4.155e-02, -6.200e-02, -1.556e-02, 5.906e-02) * s[0][0][0];
	r1 += M4(2.468e-02, -1.438e-02, 3.330e-02, 2.368e-02, -3.554e-02, 9.562e-03, -1.707e-02, 5.873e-02, 7.296e-02, -4.755e-02, 5.212e-02, -1.402e-01, 9.811e-02, -2.926e-03, 6.677e-02, -1.053e-01) * s[0][0][0];
	r0 += M4(2.249e-02, -1.015e-03, -9.197e-02, 6.664e-02, -1.054e-01, -1.509e-02, 1.649e-01, 5.646e-02, 1.841e-02, 2.241e-02, -1.389e-01, -5.324e-02, 7.293e-02, -3.469e-02, -3.404e-02, 1.998e-02) * s[0][0][1];
	r1 += M4(1.455e-02, -4.298e-02, 7.019e-02, 2.264e-02, -4.732e-02, 2.215e-02, 3.378e-02, 1.051e-01, -2.478e-02, 7.684e-02, -2.554e-02, 2.239e-02, -4.005e-02, -9.640e-03, 2.360e-03, -1.119e-01) * s[0][0][1];
	r0 += M4(-2.635e-02, 2.750e-02, -6.103e-02, -5.773e-05, 2.628e-02, 6.294e-03, -6.335e-02, -2.095e-02, 6.257e-03, -2.245e-02, -8.672e-02, -3.223e-01, -3.822e-02, -9.109e-02, 1.358e-01, -3.765e-01) * s[0][1][0];
	r1 += M4(2.629e-02, -5.327e-02, -4.978e-02, 2.314e-02, 1.169e-02, 2.752e-03, 4.255e-02, -6.332e-02, -9.985e-03, -2.760e-01, -1.369e-01, -8.830e-02, 1.804e-01, 6.234e-02, -5.144e-02, 4.741e-03) * s[0][1][0];
	r0 += M4(6.598e-03, 7.901e-02, -1.932e-01, -5.722e-02, -4.012e-02, 1.630e-01, -6.513e-02, -3.211e-02, -4.966e-02, -4.833e-02, 6.203e-02, 7.419e-05, -2.569e-03, -6.954e-02, -1.260e-01, -1.077e-01) * s[0][1][1];
	r1 += M4(8.303e-04, -9.889e-02, -1.045e-01, 1.336e-01, -1.304e-01, -2.164e-01, 1.176e-01, -5.441e-02, 9.093e-03, 1.257e-01, -6.775e-02, 3.857e-02, 3.358e-02, -3.634e-02, 1.349e-01, -3.658e-02) * s[0][1][1];
	r0 += M4(-5.103e-02, 6.254e-02, 5.484e-03, 3.261e-02, -4.018e-04, 7.119e-03, 6.251e-03, 3.731e-02, -4.885e-02, -7.744e-02, -3.134e-02, -2.432e-01, -2.728e-02, -4.001e-02, -5.326e-03, -1.127e-01) * s[0][2][0];
	r1 += M4(8.221e-02, 3.869e-02, 1.080e-01, -8.089e-02, -4.478e-02, -5.111e-02, -2.339e-03, 3.626e-02, 3.458e-02, -3.236e-02, -6.223e-02, 2.701e-02, 8.683e-02, 6.858e-02, 3.686e-02, -9.204e-03) * s[0][2][0];
	r0 += M4(3.359e-02, 7.900e-02, 2.837e-02, 1.499e-01, 2.171e-02, -1.082e-02, 9.923e-02, -1.926e-02, -7.364e-02, 5.531e-02, -6.722e-02, 3.025e-02, 3.263e-02, -9.111e-03, 3.166e-03, -5.898e-02) * s[0][2][1];
	r1 += M4(-4.872e-03, -2.537e-02, -1.103e-01, 1.503e-02, 2.519e-02, -1.486e-02, -1.809e-02, 6.314e-02, -1.033e-01, -6.564e-02, 6.389e-02, -1.083e-01, 2.372e-02, -4.159e-02, 1.468e-02, -2.732e-02) * s[0][2][1];
	r0 += M4(7.840e-02, 6.718e-02, 3.364e-02, -4.062e-02, 3.409e-02, 2.571e-02, 1.245e-01, 1.210e-02, -1.012e-01, 5.280e-02, 2.075e-01, 9.033e-02, 5.937e-02, 2.619e-02, 1.334e-01, 2.345e-02) * s[1][0][0];
	r1 += M4(3.331e-02, -4.993e-02, 4.296e-02, -5.282e-02, 4.156e-02, -7.867e-02, 1.529e-01, 4.417e-02, 1.036e-01, 2.529e-01, 2.058e-01, -6.252e-02, 1.284e-01, 2.928e-02, 1.729e-01, -5.705e-02) * s[1][0][0];
	r0 += M4(3.404e-02, -4.328e-03, -1.317e-01, -4.135e-02, -1.196e-01, -7.288e-02, -5.161e-02, 9.052e-02, 4.149e-02, 8.808e-02, -5.002e-02, 2.049e-02, 1.684e-01, 3.673e-02, -7.371e-02, 1.324e-01) * s[1][0][1];
	r1 += M4(1.442e-01, -7.019e-02, 1.214e-01, 4.592e-02, -4.027e-02, -3.591e-02, 2.270e-01, 1.921e-01, 4.801e-02, -2.855e-02, 2.627e-02, -2.437e-02, -2.203e-02, 6.244e-02, 3.155e-01, 2.754e-02) * s[1][0][1];
	r0 += M4(-3.054e-01, -1.904e-01, -3.799e-01, -1.187e-01, 1.228e-01, 1.053e-02, 9.901e-02, -5.847e-03, 1.997e-01, 3.764e-01, -2.684e-02, -1.995e-01, -2.499e-02, 1.963e-01, 7.220e-02, -2.582e-01) * s[1][1][0];
	r1 += M4(8.903e-02, 1.131e-01, -3.622e-01, 1.746e-01, 9.966e-03, 2.007e-01, -1.082e-01, 2.733e-02, -2.211e-01, 3.945e-01, 9.791e-02, -1.452e-01, -4.833e-01, 3.013e-02, -3.303e-01, 2.638e-01) * s[1][1][0];
	r0 += M4(-2.942e-02, -1.355e-01, -1.796e-01, -2.183e-01, 6.752e-01, 6.722e-02, 8.288e-02, -8.477e-02, 5.350e-02, -4.397e-02, -1.039e-01, 3.077e-02, 6.680e-02, 4.954e-01, 1.476e-01, -2.714e-01) * s[1][1][1];
	r1 += M4(1.351e-01, -2.010e-01, -3.642e-01, 1.031e-01, 6.613e-02, 1.167e-01, 2.706e-01, 8.471e-02, -2.974e-01, 6.704e-02, 2.050e-02, 1.454e-02, 3.492e-01, -1.662e-01, -3.774e-01, 1.530e-01) * s[1][1][1];
	r0 += M4(3.328e-02, 7.640e-02, 7.405e-02, -5.480e-02, -7.497e-02, -3.191e-02, -1.647e-01, 1.102e-01, -2.915e-02, -1.609e-01, -1.748e-02, -1.273e-01, -8.249e-02, 9.152e-02, -1.547e-02, -6.366e-02) * s[1][2][0];
	r1 += M4(-3.457e-02, 3.619e-02, 3.296e-02, -6.540e-02, 2.664e-02, 1.081e-02, 7.351e-02, -3.351e-02, 2.877e-02, 2.809e-01, -3.504e-02, 9.971e-02, 1.635e-01, 5.246e-02, 2.223e-02, -9.203e-04) * s[1][2][0];
	r0 += M4(-1.149e-01, -4.115e-01, 2.143e-02, -3.700e-02, -3.108e-02, -2.047e-01, 1.904e-01, 5.912e-02, 6.382e-03, 7.241e-03, -1.294e-01, 4.541e-03, 5.465e-02, 3.877e-02, -5.066e-02, 2.597e-02) * s[1][2][1];
	r1 += M4(-5.347e-02, 1.326e-01, 8.574e-02, 1.203e-01, 9.628e-03, -5.284e-02, 4.285e-02, 7.940e-02, -1.713e-01, -9.205e-03, 4.516e-02, -3.010e-02, 9.314e-02, 4.891e-02, -1.605e-02, -5.255e-02) * s[1][2][1];
	r0 += M4(-4.931e-02, 2.880e-02, -3.960e-03, -2.992e-02, 2.394e-03, 4.554e-02, 2.947e-02, 1.173e-02, -1.065e-01, 2.163e-01, 2.125e-01, -3.533e-03, -3.535e-02, 2.720e-02, -2.769e-02, -2.841e-02) * s[2][0][0];
	r1 += M4(4.181e-02, 2.541e-02, -4.204e-03, -2.874e-02, -2.888e-02, 7.151e-02, 7.261e-02, 4.995e-02, -2.115e-02, 1.914e-01, 4.066e-02, 2.698e-02, 3.749e-02, -1.067e-01, 5.987e-02, 1.453e-02) * s[2][0][0];
	r0 += M4(3.924e-02, 6.426e-02, -6.280e-02, 9.984e-02, -5.862e-02, -1.033e-01, 6.438e-02, -4.072e-02, -3.098e-02, 7.069e-02, 2.048e-02, -7.202e-02, -1.089e-01, 9.385e-02, 4.348e-02, -5.665e-02) * s[2][0][1];
	r1 += M4(2.742e-02, 5.165e-02, 1.820e-01, 9.559e-02, -8.746e-02, -1.016e-01, 1.049e-01, 1.207e-01, -5.662e-02, -1.713e-02, -1.058e-02, 5.654e-02, -3.613e-02, -1.664e-02, -1.249e-02, 1.132e-01) * s[2][0][1];
	r0 += M4(1.076e-02, -7.504e-02, -8.129e-02, -2.110e-02, 6.418e-02, -6.885e-02, -3.137e-02, 1.724e-01, 9.258e-02, -1.451e-01, -1.185e-01, -3.833e-02, -1.704e-01, 1.033e-01, -2.972e-02, 1.063e-02) * s[2][1][0];
	r1 += M4(-8.813e-02, -2.804e-02, -2.529e-02, 7.845e-02, 5.275e-02, -5.051e-02, -7.721e-02, 9.457e-02, 1.658e-02, 2.718e-01, 1.292e-01, 1.159e-01, 2.385e-01, 2.316e-02, -3.310e-02, -1.003e-01) * s[2][1][0];
	r0 += M4(1.328e-01, 1.744e-01, -1.042e-01, 1.588e-01, 3.787e-02, 6.884e-03, 1.494e-01, 1.689e-01, 4.640e-03, -9.149e-02, -6.052e-02, 2.410e-02, -1.084e-02, -4.149e-02, -1.853e-02, 1.089e-01) * s[2][1][1];
	r1 += M4(1.405e-01, 7.254e-02, 2.933e-02, 2.810e-02, -4.562e-02, -1.077e-01, 2.156e-01, 1.564e-01, -3.694e-02, -8.104e-03, -4.373e-02, -2.939e-02, 7.802e-02, 1.617e-01, 4.846e-02, -1.043e-01) * s[2][1][1];
	r0 += M4(3.895e-02, -1.011e-01, -3.342e-02, -4.173e-02, 3.415e-02, 2.360e-03, 2.702e-02, -4.221e-02, -2.499e-02, 1.506e-01, 2.382e-02, -3.200e-02, -2.119e-02, 7.222e-02, -9.464e-04, 7.738e-02) * s[2][2][0];
	r1 += M4(1.198e-02, 1.391e-01, -1.071e-02, -7.259e-02, -3.106e-02, -1.264e-01, -2.249e-02, 2.337e-02, 8.212e-02, -3.042e-02, -6.523e-02, -1.694e-01, 8.559e-02, 4.187e-02, -1.357e-02, 6.528e-03) * s[2][2][0];
	r0 += M4(2.982e-02, -4.064e-02, -3.664e-02, 6.624e-02, 1.111e-01, 6.573e-02, 3.691e-02, 7.945e-03, 1.534e-02, -1.407e-02, 3.263e-02, -1.679e-02, 8.684e-03, 1.796e-02, 4.443e-02, -1.004e-02) * s[2][2][1];
	r1 += M4(8.579e-02, -3.167e-02, -1.407e-01, -1.183e-01, -6.421e-02, -2.892e-02, 4.545e-02, -1.818e-02, -8.621e-02, -1.274e-01, -1.203e-02, 1.219e-02, -1.036e-02, 2.771e-02, -3.448e-02, 3.127e-03) * s[2][2][1];
	r0 += V4(-1.168e-02, 7.687e-03, 2.242e-02, -1.389e-02);
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(1.223e-02, 4.462e-03, 8.405e-03, -3.074e-03);
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-6x8C-DS-conv6
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv5
//!BIND LUMA
//!SAVE conv6
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(texelFetch(conv5_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv5_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 g[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv5_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			g[0][ay][ax] = l0(x - 1, y - 1);
			g[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s[3][3][2];
	V4 r0 = V4(0.0);
	V4 r1 = V4(0.0);
	s[0][0][0] = max(g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[0][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[0][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[0][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[0][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[0][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[0][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(-2.477e-02, -5.151e-02, 1.514e-01, 2.740e-02, -7.041e-02, 2.815e-02, -1.647e-02, 3.455e-02, 2.530e-02, 3.364e-02, -1.303e-02, 4.503e-03, 1.483e-02, -3.293e-02, -2.916e-02, -1.078e-02) * s[0][0][0];
	r1 += M4(-8.240e-02, -1.762e-01, -2.654e-01, 2.934e-01, -2.156e-02, -4.358e-02, -2.709e-02, 3.931e-02, -5.652e-02, -4.422e-02, 2.633e-02, 4.178e-02, 7.568e-03, 4.778e-03, -4.764e-02, -1.165e-02) * s[0][0][0];
	r0 += M4(-3.825e-02, -6.158e-02, -3.008e-02, 2.880e-02, -7.049e-02, 6.280e-02, -6.251e-03, 3.211e-02, 2.188e-03, 5.596e-02, 9.772e-03, -8.372e-03, 1.913e-02, -3.034e-02, -9.223e-02, 2.057e-02) * s[0][0][1];
	r1 += M4(3.489e-02, 1.536e-01, 8.777e-02, -4.753e-02, 4.357e-02, -1.088e-01, -6.768e-02, 2.592e-02, -1.993e-02, -8.539e-02, -7.952e-02, 1.794e-02, 1.558e-02, 9.296e-02, 9.526e-02, -1.956e-02) * s[0][0][1];
	r0 += M4(-1.835e-03, 2.630e-02, 3.133e-01, 1.701e-01, -6.571e-02, 7.464e-02, 1.232e-01, 1.204e-02, -8.765e-02, -1.587e-03, -3.525e-02, -2.993e-02, 3.694e-02, -2.844e-02, 1.126e-02, 3.591e-02) * s[0][1][0];
	r1 += M4(-1.006e-01, -5.243e-01, 2.450e-01, 1.798e-01, 2.781e-02, -1.112e-01, 7.591e-02, -4.310e-02, 9.009e-02, -9.954e-02, -3.907e-02, -2.684e-02, 7.102e-03, -1.282e-01, -3.232e-02, -6.117e-02) * s[0][1][0];
	r0 += M4(4.043e-02, 1.607e-02, -1.052e-01, -9.099e-02, 1.323e-01, 8.746e-03, 1.307e-01, -1.131e-01, -1.042e-01, 1.604e-01, -1.542e-02, 7.332e-02, -5.909e-02, 3.893e-02, -2.450e-02, 1.184e-01) * s[0][1][1];
	r1 += M4(-5.238e-02, -1.043e-01, 7.394e-02, 2.178e-02, -6.425e-02, -1.710e-01, -4.435e-03, 7.939e-02, 3.879e-02, 6.906e-03, -1.242e-01, -7.742e-02, 5.997e-03, 7.708e-02, -4.049e-02, -4.157e-02) * s[0][1][1];
	r0 += M4(1.245e-01, -1.089e-02, 3.077e-01, -2.552e-01, -3.603e-02, 2.820e-02, 2.189e-02, -6.119e-02, 4.541e-02, -1.645e-02, -1.317e-02, 2.147e-02, -6.513e-04, 1.749e-03, -8.811e-03, 1.075e-02) * s[0][2][0];
	r1 += M4(-1.610e-01, -4.865e-01, -2.809e-02, -2.645e-03, -3.510e-02, -9.184e-02, -8.930e-03, 5.674e-02, -2.094e-02, -4.702e-03, 4.991e-03, 2.198e-02, 3.136e-02, -5.066e-02, 1.353e-02, 5.414e-02) * s[0][2][0];
	r0 += M4(-1.831e-01, 1.736e-02, 7.058e-03, 3.747e-02, -1.101e-02, -4.010e-03, 3.339e-03, -6.446e-02, -7.066e-02, 3.387e-02, -8.198e-02, 2.135e-01, 3.669e-02, 1.191e-03, 2.734e-03, -1.995e-02) * s[0][2][1];
	r1 += M4(6.759e-02, -6.750e-02, -1.792e-02, -9.695e-02, -1.371e-02, -4.260e-02, 3.086e-03, 3.640e-02, 1.716e-02, 6.676e-02, 5.814e-03, -6.186e-02, -1.889e-02, 2.658e-02, 2.291e-02, -2.066e-02) * s[0][2][1];
	r0 += M4(-7.505e-02, 1.838e-01, 1.159e-01, 4.200e-02, 6.384e-02, 1.802e-02, 1.624e-02, -6.860e-02, -4.271e-03, -2.855e-02, 2.676e-02, 2.666e-02, 2.202e-02, -1.425e-01, 8.868e-02, -1.427e-01) * s[1][0][0];
	r1 += M4(-1.667e-01, -1.501e-02, -3.148e-02, -7.032e-02, -1.008e-01, 5.261e-02, -3.996e-02, 4.207e-02, -2.660e-03, 8.485e-02, 4.906e-02, -6.740e-02, 1.368e-01, -1.315e-02, -3.316e-01, -4.999e-02) * s[1][0][0];
	r0 += M4(-4.251e-02, 7.336e-02, 3.350e-02, -4.573e-02, 1.109e-01, 1.374e-01, -5.989e-02, -1.148e-01, -1.692e-02, -1.596e-01, 1.003e-01, -2.537e-02, -3.967e-02, -5.390e-02, -2.341e-02, 7.426e-02) * s[1][0][1];
	r1 += M4(-8.715e-02, -1.909e-02, 9.956e-02, 7.248e-02, -1.970e-01, 8.873e-02, -2.913e-02, 9.171e-02, 8.617e-02, 7.034e-02, -2.294e-01, -1.490e-01, 2.203e-01, -1.502e-01, -2.391e-03, -1.261e-01) * s[1][0][1];
	r0 += M4(2.172e-01, 1.535e-01, 4.120e-01, -3.465e-02, -9.253e-02, -2.909e-02, 9.779e-02, -2.292e-01, 1.132e-01, 3.286e-02, 1.257e-01, -3.732e-02, -7.067e-02, 3.290e-01, -1.654e-01, 2.067e-01) * s[1][1][0];
	r1 += M4(-3.849e-01, 5.315e-01, 5.975e-03, -1.659e-01, -7.673e-02, 9.016e-02, 8.202e-02, 8.611e-02, -8.625e-02, 1.434e-02, -4.676e-02, 1.138e-01, -1.702e-01, 2.301e-01, 6.379e-02, 3.488e-01) * s[1][1][0];
	r0 += M4(6.255e-02, -1.276e-01, 1.946e-01, -2.467e-02, -3.007e-01, -1.422e-01, 3.685e-02, -4.300e-01, 4.208e-02, 4.764e-01, 1.392e-01, 1.413e-01, 6.500e-02, 2.151e-01, -4.138e-02, 2.727e-02) * s[1][1][1];
	r1 += M4(-1.303e-01, 3.846e-01, 2.797e-03, -7.154e-02, -1.032e-01, 1.646e-01, -2.986e-03, 2.638e-01, -3.058e-02, -9.790e-02, -2.498e-01, -2.716e-02, -4.532e-02, -1.666e-02, 2.469e-02, 2.416e-02) * s[1][1][1];
	r0 += M4(-3.849e-02, 2.979e-01, 8.583e-02, 1.806e-01, -3.817e-03, -1.694e-03, 7.103e-02, -8.539e-03, -4.004e-02, -1.608e-02, 2.261e-01, -1.794e-02, -7.730e-02, -1.652e-02, 7.112e-02, -8.512e-02) * s[1][2][0];
	r1 += M4(-9.247e-02, -7.496e-02, -7.154e-02, 2.290e-01, -2.107e-02, 1.397e-02, -7.595e-03, -1.149e-02, -2.420e-02, 2.442e-02, -3.292e-02, 2.758e-02, -4.785e-02, 4.724e-03, -1.047e-02, -5.831e-02) * s[1][2][0];
	r0 += M4(-8.504e-03, 3.501e-02, -8.355e-02, 1.751e-02, 6.527e-02, 1.989e-02, 4.717e-02, -4.757e-02, 9.597e-02, -8.130e-02, 1.946e-01, -5.425e-02, 4.711e-02, -2.750e-02, 6.009e-02, -4.442e-02) * s[1][2][1];
	r1 += M4(-1.221e-02, 3.128e-02, 2.175e-02, 1.304e-01, 3.725e-02, -2.316e-02, -4.969e-02, 8.727e-02, -2.252e-01, 4.776e-02, 3.334e-02, -4.372e-02, -2.426e-02, 6.789e-03, -1.315e-02, 1.152e-02) * s[1][2][1];
	r0 += M4(1.876e-02, 2.056e-01, -2.023e-02, -4.983e-02, 7.313e-03, 2.980e-02, -6.284e-03, 1.313e-02, -3.884e-02, 5.365e-02, -3.598e-02, -6.685e-02, -1.344e-02, 6.565e-02, -2.014e-02, -2.794e-03) * s[2][0][0];
	r1 += M4(-5.679e-02, 1.541e-02, 9.746e-02, 1.393e-01, -6.140e-02, 1.461e-02, 3.605e-02, 1.897e-04, -1.075e-01, 1.265e-02, 5.443e-02, 7.837e-02, 8.285e-02, -1.003e-01, -3.540e-02, 1.062e-01) * s[2][0][0];
	r0 += M4(-4.723e-02, 5.155e-02, 4.610e-03, -3.153e-02, 3.414e-02, 4.710e-02, -2.184e-02, 1.066e-02, -1.856e-02, 4.980e-02, -1.488e-02, -6.144e-02, 3.716e-02, 7.519e-02, -2.642e-04, -4.274e-02) * s[2][0][1];
	r1 += M4(4.058e-03, -1.062e-02, 4.324e-02, -1.315e-03, -2.507e-02, 6.618e-02, -3.236e-04, 1.921e-03, 2.292e-02, -3.968e-02, -1.846e-02, 7.619e-02, -5.246e-02, 9.670e-03, 1.629e-02, 9.263e-02) * s[2][0][1];
	r0 += M4(-2.716e-02, -1.636e-01, -3.403e-02, -3.120e-01, -5.618e-02, 1.346e-02, 2.156e-02, -1.350e-02, -9.053e-02, 3.118e-02, -3.824e-02, -1.367e-02, 8.329e-02, 1.210e-02, 3.665e-02, -4.630e-02) * s[2][1][0];
	r1 += M4(-1.011e-02, 1.049e-02, -3.187e-02, -4.771e-03, -6.118e-02, -6.472e-03, -1.528e-03, 8.305e-02, -1.232e-02, -2.310e-02, -2.687e-02, 1.488e-02, -4.696e-03, -1.170e-01, 4.326e-03, -1.568e-01) * s[2][1][0];
	r0 += M4(-3.976e-03, -1.066e-01, -1.147e-02, -3.070e-02, -4.387e-02, -5.120e-02, 2.393e-02, 1.248e-02, -5.664e-03, 1.682e-01, -5.858e-02, 4.895e-02, -2.546e-02, 6.681e-03, 1.210e-02, -1.929e-02) * s[2][1][1];
	r1 += M4(2.870e-02, -2.979e-02, -9.149e-03, 2.921e-02, -2.777e-03, -1.455e-02, 5.316e-03, -3.283e-03, -1.197e-01, 2.482e-02, -3.424e-02, -6.454e-02, -5.410e-03, -5.831e-02, -3.472e-03, -2.364e-02) * s[2][1][1];
	r0 += M4(1.432e-01, 4.393e-02, 6.315e-02, 3.299e-02, 3.065e-02, -4.181e-03, -9.329e-03, 1.755e-02, 8.372e-03, 1.706e-02, -1.191e-02, 5.314e-05, -4.387e-02, 1.547e-02, 1.239e-02, -4.849e-03) * s[2][2][0];
	r1 += M4(-4.607e-02, 2.935e-02, -4.916e-03, -4.198e-02, -1.647e-02, 1.371e-04, -3.135e-03, 3.959e-02, -1.521e-02, -5.468e-02, 3.227e-02, -2.436e-02, 6.519e-02, -5.840e-02, -4.402e-02, 9.081e-02) * s[2][2][0];
	r0 += M4(5.299e-02, 3.355e-02, 1.318e-02, 6.779e-02, -6.430e-03, 9.807e-04, 1.606e-02, 3.785e-02, -7.290e-02, -2.555e-02, 4.160e-02, 6.593e-02, -3.096e-02, -1.491e-02, 9.476e-03, 1.005e-02) * s[2][2][1];
	r1 += M4(2.792e-02, 1.058e-02, -1.917e-02, 1.247e-02, 4.411e-03, 1.001e-02, 1.459e-02, 4.490e-02, -3.474e-02, -6.687e-02, 8.953e-03, -1.012e-01, -2.864e-02, -3.363e-02, 1.079e-02, 6.206e-02) * s[2][2][1];
	s[0][0][0] = max(g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[1][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[1][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[1][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[1][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[1][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[1][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(-1.562e-02, 2.086e-02, 2.103e-03, 4.369e-04, -3.372e-02, -1.968e-02, 4.847e-02, -3.160e-02, -3.168e-03, 1.167e-01, 6.693e-02, 2.430e-02, -2.568e-02, 3.827e-02, -3.943e-02, 4.408e-02) * s[0][0][0];
	r1 += M4(-8.198e-03, 5.447e-02, 1.181e-02, 9.565e-03, 7.557e-02, -4.480e-02, -9.644e-02, -9.828e-03, -5.701e-02, -1.306e-01, -3.366e-02, 5.839e-02, -1.677e-02, 3.064e-02, 7.740e-02, -1.208e-03) * s[0][0][0];
	r0 += M4(5.026e-03, -3.720e-02, -1.467e-02, -1.576e-01, -3.286e-02, 7.115e-03, -5.731e-03, 4.700e-02, 8.866e-03, 1.233e-01, 4.534e-02, -1.764e-02, -2.140e-03, -9.595e-02, 6.874e-02, 3.518e-02) * s[0][0][1];
	r1 += M4(-2.734e-02, 1.587e-01, -1.470e-02, -3.398e-02, 2.018e-02, 9.738e-02, 4.565e-02, -6.018e-02, -6.369e-02, -1.267e-01, -1.106e-02, 5.390e-02, -1.587e-02, 8.265e-02, -4.330e-02, -5.224e-03) * s[0][0][1];
	r0 += M4(1.299e-02, 1.365e-02, -2.543e-02, 4.030e-03, 4.750e-02, 1.295e-01, -9.156e-02, 8.072e-02, -1.852e-03, -1.984e-02, 3.933e-02, -5.218e-02, 1.247e-03, 1.452e-03, 6.406e-02, 5.054e-02) * s[0][1][0];
	r1 += M4(-2.772e-02, 3.587e-02, 3.270e-02, -6.709e-03, -7.802e-02, -9.463e-02, 7.101e-02, 7.043e-02, 3.240e-02, -3.652e-02, -7.465e-02, -5.038e-02, 6.799e-03, 3.048e-02, 6.973e-02, -2.534e-02) * s[0][1][0];
	r0 += M4(1.090e-01, -3.531e-02, 4.116e-02, -3.051e-01, 1.116e-01, 6.480e-02, -8.886e-02, -2.512e-01, 6.813e-02, -2.219e-02, 3.493e-02, -1.255e-01, 5.292e-02, -9.840e-02, 2.438e-01, -2.115e-01) * s[0][1][1];
	r1 += M4(-2.412e-02, 3.050e-02, 4.840e-02, 6.581e-03, -1.680e-01, 1.554e-01, 5.434e-02, -2.192e-02, 4.239e-02, -2.439e-01, -7.982e-02, -2.939e-03, 5.671e-02, 5.318e-02, -4.734e-02, -5.992e-02) * s[0][1][1];
	r0 += M4(-3.739e-02, -2.229e-02, 1.564e-02, 1.316e-02, -6.415e-02, -6.361e-03, 2.785e-02, 5.216e-03, 1.069e-01, 5.345e-03, -6.889e-02, -4.765e-02, 6.458e-02, -1.489e-03, -1.749e-02, -3.341e-02) * s[0][2][0];
	r1 += M4(3.768e-02, 2.414e-02, -2.129e-02, -1.321e-02, 1.208e-03, -4.041e-02, -1.795e-02, -4.514e-02, -4.807e-02, 1.511e-02, 4.772e-02, 2.672e-02, -6.710e-02, 1.394e-02, -4.615e-02, 1.165e-02) * s[0][2][0];
	r0 += M4(4.398e-02, -9.939e-02, -1.782e-02, -1.841e-01, -1.479e-01, -2.639e-03, -4.815e-03, 3.242e-02, 1.870e-01, -7.987e-04, -7.596e-03, -1.323e-01, 9.763e-02, -6.608e-03, -1.280e-04, -1.180e-01) * s[0][2][1];
	r1 += M4(2.956e-02, 8.881e-02, -2.291e-03, -2.770e-02, -1.434e-02, 6.985e-02, -1.356e-02, -1.499e-01, -7.456e-02, -3.855e-02, 3.091e-02, 6.165e-02, -2.317e-02, -2.529e-02, 3.674e-02, 7.802e-02) * s[0][2][1];
	r0 += M4(-2.131e-02, -2.451e-02, 4.977e-02, -9.302e-02, -4.096e-02, -2.215e-02, 4.240e-03, 7.156e-02, 1.457e-02, -9.395e-03, 5.885e-03, -1.862e-02, 1.881e-02, 2.363e-03, 6.409e-02, -1.131e-01) * s[1][0][0];
	r1 += M4(1.499e-02, -4.010e-02, -1.538e-01, 5.375e-03, 9.518e-02, 1.270e-02, 1.844e-02, -4.913e-02, 3.042e-02, 1.022e-01, -6.526e-02, -3.633e-02, -2.815e-02, -1.169e-02, -1.255e-01, 2.207e-02) * s[1][0][0];
	r0 += M4(1.092e-02, 7.192e-02, 7.215e-02, -3.084e-01, -9.585e-02, -2.018e-01, 5.747e-02, 3.076e-02, 8.544e-02, 1.501e-01, -1.661e-02, -9.242e-03, -2.307e-02, 1.043e-01, 3.879e-02, -5.930e-02) * s[1][0][1];
	r1 += M4(-6.124e-02, -9.425e-03, -2.566e-01, 5.860e-02, 2.287e-01, -3.429e-02, -4.403e-02, -1.199e-01, -1.375e-02, 8.423e-02, 9.891e-02, 8.742e-03, -2.140e-01, 1.692e-02, 9.538e-02, 2.048e-02) * s[1][0][1];
	r0 += M4(-2.606e-02, -1.851e-02, -2.554e-02, -1.685e-01, 1.722e-01, 5.733e-02, -6.897e-03, 6.856e-02, 9.572e-02, -8.831e-02, -1.573e-02, 7.894e-02, -1.249e-01, 1.194e-01, 1.156e-02, 1.837e-01) * s[1][1][0];
	r1 += M4(5.947e-02, 8.011e-02, 6.170e-02, -8.083e-02, -1.675e-01, 2.434e-02, 9.967e-02, 5.513e-02, 4.028e-02, -1.612e-02, -2.500e-01, 1.646e-01, -1.084e-01, -8.204e-02, 2.086e-01, 9.569e-02) * s[1][1][0];
	r0 += M4(-1.112e-01, 5.463e-02, -8.986e-02, -7.545e-01, 3.855e-01, 1.749e-01, 1.228e-01, 3.556e-01, 1.401e-01, -3.065e-01, -1.464e-02, 7.001e-02, -4.150e-01, -1.202e-01, -2.574e-01, 1.538e-01) * s[1][1][1];
	r1 += M4(1.440e-01, -2.849e-02, 2.115e-01, -3.119e-01, -1.044e-01, -2.303e-01, 1.498e-01, -1.253e-01, 1.523e-02, 8.012e-02, -2.185e-01, 1.699e-01, 2.530e-01, -5.332e-02, -4.109e-02, 9.032e-02) * s[1][1][1];
	r0 += M4(3.947e-03, -2.086e-02, -2.798e-03, -7.251e-02, -1.138e-01, -1.267e-02, 8.081e-02, -1.152e-01, 2.480e-01, 2.540e-02, -4.891e-02, 1.711e-02, -3.000e-03, -4.075e-02, 1.147e-01, -1.731e-01) * s[1][2][0];
	r1 += M4(3.808e-03, -5.886e-02, 2.165e-02, -2.570e-02, 2.667e-02, 7.244e-04, -5.360e-02, 6.164e-02, -8.535e-02, -1.461e-02, 6.540e-02, 4.269e-02, -5.406e-03, -1.556e-01, -4.926e-02, 1.413e-03) * s[1][2][0];
	r0 += M4(-4.583e-02, -1.002e-01, 4.667e-02, -2.857e-01, -4.115e-02, -2.350e-02, 1.475e-01, -1.050e-01, 2.456e-01, -2.157e-02, -4.829e-02, -5.447e-02, -2.978e-03, 5.606e-02, -3.757e-03, 7.165e-02) * s[1][2][1];
	r1 += M4(-3.245e-03, -1.382e-01, 4.145e-03, -2.748e-01, 5.275e-02, 9.028e-03, -9.981e-02, -1.590e-02, -7.563e-02, -6.231e-03, 1.192e-01, 6.231e-02, -3.808e-02, -1.183e-01, 3.802e-02, -1.100e-01) * s[1][2][1];
	r0 += M4(-5.400e-02, 3.259e-02, -9.637e-03, 8.296e-02, -3.172e-02, -3.303e-03, -2.216e-02, 5.918e-03, -2.412e-02, -1.181e-01, -2.707e-02, -2.893e-02, -3.626e-02, 2.677e-02, -4.416e-05, 8.012e-02) * s[2][0][0];
	r1 += M4(2.469e-02, -1.426e-02, 2.441e-03, -3.454e-02, 1.081e-02, -1.804e-02, 5.706e-02, -7.518e-03, 1.621e-01, -7.826e-03, -7.857e-02, -3.826e-02, -2.629e-02, -9.282e-03, 2.089e-02, 3.595e-02) * s[2][0][0];
	r0 += M4(-2.805e-02, 1.606e-02, -2.893e-02, 2.681e-02, -6.763e-02, -6.551e-02, -1.172e-02, 1.544e-02, -1.872e-03, -7.999e-02, 2.087e-03, -1.186e-02, -3.169e-02, 2.687e-02, -5.958e-02, 5.058e-02) * s[2][0][1];
	r1 += M4(2.940e-02, 4.254e-02, 7.058e-03, -1.184e-01, -3.501e-03, -1.714e-04, 4.721e-02, -3.080e-02, 8.448e-02, -1.674e-02, -3.507e-02, -5.238e-02, -3.328e-02, -8.207e-03, 4.836e-02, 4.024e-02) * s[2][0][1];
	r0 += M4(-4.309e-02, -6.043e-02, -7.090e-03, -4.649e-02, 2.670e-02, -3.418e-02, -2.220e-02, -2.431e-02, 1.084e-01, 2.575e-02, 7.156e-02, 1.055e-01, 1.468e-02, -6.926e-02, 4.914e-02, 1.697e-02) * s[2][1][0];
	r1 += M4(1.983e-02, -4.347e-03, -1.220e-02, -2.079e-02, -2.092e-02, 5.966e-02, -4.210e-02, -1.883e-02, 3.225e-02, 1.386e-04, -2.482e-03, -1.724e-01, -2.136e-01, 9.933e-02, 1.401e-02, 8.710e-02) * s[2][1][0];
	r0 += M4(-7.790e-03, -1.103e-01, 8.118e-03, -1.684e-01, 2.376e-02, 2.300e-02, -2.109e-02, 9.331e-03, 8.532e-02, 5.163e-02, 2.644e-02, 4.120e-02, 3.048e-02, -5.524e-02, -1.107e-01, 7.627e-02) * s[2][1][1];
	r1 += M4(-2.251e-02, 4.892e-02, -5.667e-03, -3.438e-02, -1.414e-01, 5.786e-02, 3.203e-02, -2.199e-02, 9.257e-02, -3.285e-02, -4.459e-02, -1.165e-01, -7.301e-02, 3.214e-03, 7.349e-02, -6.127e-03) * s[2][1][1];
	r0 += M4(8.478e-02, -6.274e-04, -3.276e-02, 2.032e-02, -1.085e-02, 1.457e-02, -1.265e-02, 3.989e-02, 4.961e-02, -5.696e-03, 3.283e-02, -3.162e-02, 1.187e-02, 5.316e-02, 6.977e-03, 1.372e-01) * s[2][2][0];
	r1 += M4(3.355e-03, 3.708e-02, 4.960e-03, 5.138e-03, 3.017e-02, 3.886e-04, 1.172e-02, 1.118e-05, -5.611e-02, 5.429e-02, 3.931e-02, -1.900e-01, 2.130e-03, 4.714e-02, 1.116e-03, 1.366e-01) * s[2][2][0];
	r0 += M4(1.731e-01, 7.763e-03, -4.039e-02, 6.779e-02, -2.008e-02, 1.774e-02, -5.000e-02, 7.821e-02, 5.976e-03, 3.084e-02, 6.249e-02, -4.029e-02, -1.099e-01, 4.548e-02, -4.080e-02, -1.660e-02) * s[2][2][1];
	r1 += M4(2.205e-02, -1.450e-02, 1.419e-02, 3.384e-02, 5.347e-02, -8.675e-04, -1.338e-02, -1.253e-02, -8.166e-02, -1.341e-02, 5.165e-02, -1.927e-01, 3.708e-02, 1.890e-02, -6.747e-02, 5.369e-02) * s[2][2][1];
	r0 += V4(5.891e-03, 6.974e-03, -6.060e-03, 1.872e-03);
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(5.084e-03, 6.065e-04, -1.802e-03, 8.690e-03);
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-6x8C-DS-out-shuffle
//!HOOK LUMA
//!COMPUTE 16 16 8 8
//!BIND LUMA
//!BIND conv6
//!BIND easu
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 1
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(texelFetch(conv6_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv6_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 g[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv6_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			g[0][ay][ax] = l0(x - 1, y - 1);
			g[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s[3][3][2];
	V4 r0 = V4(0.0);
	s[0][0][0] = max(g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[0][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[0][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[0][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[0][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[0][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[0][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(-4.991e-02, -1.174e-01, -7.819e-02, -6.330e-02, -5.913e-02, -1.382e-02, -3.930e-04, 3.385e-02, 3.528e-02, 1.068e-02, 7.611e-02, 5.006e-02, -4.571e-02, -2.729e-02, -9.754e-03, 2.237e-03) * s[0][0][0];
	r0 += M4(-9.565e-02, -1.019e-01, -5.277e-02, -2.253e-02, -1.624e-02, -1.225e-02, -4.645e-03, 9.743e-03, 4.696e-02, 3.307e-02, 1.723e-03, 2.397e-02, -4.294e-03, -4.277e-02, -5.097e-02, -2.623e-02) * s[0][0][1];
	r0 += M4(8.362e-02, 1.782e-01, 5.213e-02, 2.471e-02, 9.096e-02, 7.207e-02, 9.686e-02, 3.594e-02, -9.420e-03, 1.843e-02, -5.146e-02, 4.010e-03, 7.046e-02, 5.268e-02, -2.819e-02, -2.197e-02) * s[0][1][0];
	r0 += M4(2.153e-01, 2.883e-01, 7.612e-02, 3.000e-02, 5.801e-02, 5.310e-02, 1.118e-01, 3.012e-02, 2.481e-01, 1.802e-01, -1.504e-01, -8.034e-02, 2.116e-02, 7.822e-02, -3.049e-02, -3.560e-02) * s[0][1][1];
	r0 += M4(-2.860e-02, -8.019e-02, -2.560e-02, -1.734e-02, 6.503e-02, 8.972e-03, -3.886e-03, -8.103e-03, 3.308e-02, 1.804e-02, 2.870e-02, -1.918e-02, -1.727e-02, -3.020e-02, 1.231e-02, -7.601e-03) * s[0][2][0];
	r0 += M4(-1.362e-02, -6.202e-02, -2.524e-02, -3.898e-02, 1.433e-01, -7.899e-02, 1.924e-02, -3.587e-03, -7.439e-02, -6.108e-02, -2.904e-03, -7.545e-02, -3.270e-02, -4.512e-02, -3.054e-03, -1.255e-02) * s[0][2][1];
	r0 += M4(-1.384e-02, 1.024e-02, 4.919e-02, -4.040e-02, 9.823e-02, 3.092e-02, 3.415e-03, -3.351e-02, -1.321e-01, -2.057e-02, -8.765e-02, -1.544e-02, 1.532e-01, -1.946e-02, 2.521e-02, -4.454e-02) * s[1][0][0];
	r0 += M4(9.625e-02, 8.897e-02, 1.897e-01, -1.840e-02, 3.944e-02, 3.409e-02, -1.138e-02, -2.671e-02, -3.379e-01, 3.632e-02, -1.101e-01, 7.741e-02, 7.257e-02, -1.853e-02, 4.331e-02, -3.704e-02) * s[1][0][1];
	r0 += M4(4.036e-02, 1.888e-02, 9.000e-02, 2.373e-01, -3.402e-01, -1.285e-01, -3.693e-01, -9.547e-02, -1.776e-02, -1.248e-01, 7.983e-02, -1.371e-02, 5.986e-02, 3.490e-01, 3.252e-01, 3.815e-01) * s[1][1][0];
	r0 += M4(2.021e-02, 1.202e-01, 2.607e-01, 6.626e-01, -2.113e-01, -3.589e-02, -3.213e-01, -6.317e-02, -2.416e-01, -8.397e-01, 6.895e-01, -8.685e-03, 3.034e-02, 1.802e-01, 1.889e-01, 2.861e-01) * s[1][1][1];
	r0 += M4(2.460e-02, -3.135e-02, 2.356e-02, -8.638e-02, 2.026e-01, 9.879e-02, 2.287e-01, 3.860e-02, -9.400e-03, -1.538e-02, 6.741e-03, 3.025e-02, -5.041e-02, -1.274e-01, -7.983e-02, -5.187e-02) * s[1][2][0];
	r0 += M4(5.856e-02, -2.550e-02, 4.971e-02, -9.353e-02, 5.968e-01, -3.541e-01, 4.886e-01, -2.400e-01, -1.351e-01, -2.565e-02, -1.173e-01, 2.400e-01, -9.066e-02, -9.350e-02, -8.854e-02, -6.286e-02) * s[1][2][1];
	r0 += M4(5.128e-02, 2.090e-02, -2.282e-02, -9.043e-03, -5.055e-02, -1.192e-05, -1.799e-03, 1.763e-02, 4.991e-02, 2.544e-02, 6.265e-02, 7.355e-02, -5.920e-02, -7.820e-03, 3.540e-02, -2.008e-02) * s[2][0][0];
	r0 += M4(1.022e-01, 4.453e-02, -3.683e-02, 1.255e-02, -4.163e-02, -1.089e-02, -8.147e-03, 2.903e-02, 9.222e-02, 3.952e-02, 1.274e-01, 1.237e-01, -5.116e-02, -1.710e-02, -9.367e-03, -2.304e-02) * s[2][0][1];
	r0 += M4(1.605e-02, 2.157e-02, -1.973e-02, -6.014e-02, -3.308e-02, 3.224e-03, -2.712e-02, 1.546e-03, -7.086e-02, -1.595e-02, -6.154e-02, -2.156e-02, 2.289e-02, -5.066e-02, -7.991e-02, 3.898e-02) * s[2][1][0];
	r0 += M4(3.705e-02, 1.086e-01, -2.617e-02, -1.162e-01, -1.659e-03, -5.194e-03, -1.415e-02, 2.264e-02, 7.151e-03, 1.062e-02, -1.870e-01, -1.304e-01, -1.933e-02, -4.302e-02, -5.074e-02, -6.795e-03) * s[2][1][1];
	r0 += M4(1.552e-03, 2.964e-03, -1.979e-02, -2.557e-02, -8.325e-02, -5.464e-02, -7.641e-02, -2.657e-02, 1.718e-02, -8.256e-03, -2.669e-03, -5.022e-02, 2.754e-02, 5.310e-02, 6.783e-02, 2.252e-02) * s[2][2][0];
	r0 += M4(1.034e-02, 3.013e-03, -3.230e-04, 1.481e-02, -4.606e-02, -2.930e-02, 1.087e-01, -3.307e-01, 2.624e-03, 3.211e-02, -6.568e-02, -1.084e-01, 2.209e-02, 4.847e-03, 2.133e-02, -1.189e-02) * s[2][2][1];
	s[0][0][0] = max(g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[1][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[1][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[1][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[1][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[1][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[1][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(-1.329e-01, 7.574e-02, -1.167e-01, -2.558e-02, -1.909e-02, -3.794e-02, -2.827e-02, -2.077e-02, 3.006e-02, 1.895e-02, 4.996e-02, -3.535e-03, -1.613e-02, 1.273e-02, -2.151e-02, -3.597e-02) * s[0][0][0];
	r0 += M4(-5.725e-02, -2.281e-02, -4.466e-02, -2.800e-02, -3.834e-02, -2.821e-02, -3.884e-02, -1.011e-02, 3.870e-02, 3.453e-02, 5.066e-02, 8.340e-03, -3.330e-01, 3.402e-02, -8.422e-02, -4.314e-02) * s[0][0][1];
	r0 += M4(4.318e-01, -5.650e-02, 1.116e-01, -3.264e-02, 7.086e-02, 7.006e-02, 4.000e-02, -1.225e-03, -7.495e-02, -2.205e-02, -2.027e-02, 2.168e-02, 2.996e-02, -6.102e-02, -8.337e-02, -8.259e-02) * s[0][1][0];
	r0 += M4(7.559e-02, 1.336e-01, 9.859e-02, 3.091e-02, 6.619e-02, 2.889e-02, 3.224e-02, -1.098e-02, -2.712e-02, -6.767e-02, -4.180e-02, 1.561e-02, -1.708e-02, -4.326e-01, 1.267e-01, 7.606e-02) * s[0][1][1];
	r0 += M4(-1.655e-01, 2.647e-03, -8.718e-02, -1.171e-01, -1.303e-02, -2.389e-03, -1.569e-02, 7.405e-03, 1.788e-01, -6.843e-02, -1.881e-03, 2.514e-02, -4.582e-03, 5.140e-02, 1.721e-03, 1.727e-02) * s[0][2][0];
	r0 += M4(2.609e-02, -1.401e-01, 2.250e-02, 1.455e-03, -2.116e-02, 1.467e-02, -2.215e-02, 8.311e-05, 5.361e-02, 7.404e-02, -4.210e-03, -2.271e-02, -1.242e-02, 1.714e-01, -3.091e-02, 5.873e-02) * s[0][2][1];
	r0 += M4(-2.167e-02, 7.625e-03, -1.470e-02, 1.565e-01, -2.938e-02, -1.935e-02, -3.163e-02, -1.113e-02, -1.558e-01, -2.756e-02, -1.115e-01, 1.514e-02, 5.440e-02, 1.574e-02, -7.251e-02, 2.949e-03) * s[1][0][0];
	r0 += M4(2.122e-02, 4.937e-02, -4.679e-02, 3.767e-02, 1.047e-01, -2.671e-02, -2.656e-02, -8.607e-03, -1.450e-01, -2.784e-02, -1.060e-01, 2.313e-02, -1.665e-02, -2.937e-01, 2.822e-01, 1.978e-01) * s[1][0][1];
	r0 += M4(-2.310e-01, -3.418e-01, 3.739e-01, -2.225e-01, 1.392e-01, 5.318e-02, -7.986e-02, -7.832e-02, -6.448e-02, 2.982e-02, -1.562e-02, -7.446e-02, 3.305e-01, 2.283e-01, 1.477e-01, -6.140e-02) * s[1][1][0];
	r0 += M4(4.345e-02, 3.318e-02, -8.616e-02, 2.181e-02, -3.919e-03, 1.571e-01, -7.697e-02, -6.509e-02, 2.163e-02, -8.863e-02, 1.253e-01, -1.383e-01, 5.668e-01, 6.465e-01, -2.614e-01, -5.549e-02) * s[1][1][1];
	r0 += M4(8.990e-02, 3.214e-02, 2.843e-02, 3.245e-01, 4.262e-02, 1.775e-01, 2.766e-02, 4.469e-02, 7.100e-01, -5.137e-01, 6.324e-01, -2.628e-01, -3.413e-02, 2.693e-02, -1.170e-02, 5.433e-02) * s[1][2][0];
	r0 += M4(9.448e-02, 4.445e-03, 1.091e-01, -1.554e-01, 6.594e-02, 1.028e-01, 3.419e-02, 6.106e-02, 1.306e-01, -6.107e-02, 1.538e-01, 1.260e-01, -1.469e-01, -7.938e-02, -1.025e-02, -5.128e-02) * s[1][2][1];
	r0 += M4(5.895e-02, 4.595e-02, 5.131e-02, 2.408e-02, 3.244e-02, -1.151e-02, 1.709e-01, 1.791e-02, 8.745e-02, 1.570e-02, 4.595e-02, 2.785e-03, -8.977e-04, 3.748e-03, 8.540e-02, 6.115e-02) * s[2][0][0];
	r0 += M4(2.964e-02, 1.287e-02, 7.701e-02, 3.888e-02, -1.125e-02, -1.168e-02, 9.630e-02, -3.235e-02, 8.255e-02, 4.041e-02, 5.196e-02, 3.114e-02, 9.143e-02, 5.794e-02, -1.841e-01, -4.264e-02) * s[2][0][1];
	r0 += M4(6.350e-03, 4.182e-02, -1.868e-01, -2.047e-02, -5.840e-01, -1.983e-01, 2.194e-01, 2.958e-01, -1.137e-01, 1.268e-02, -1.887e-01, 9.331e-02, -2.656e-03, 1.715e-03, -2.471e-02, -8.393e-03) * s[2][1][0];
	r0 += M4(-9.668e-02, 8.359e-03, -6.067e-02, 4.058e-02, -1.112e-01, -3.896e-02, -1.181e-01, 1.016e-01, -1.022e-01, 1.186e-03, -1.359e-01, 2.801e-02, -2.066e-01, -4.702e-02, 1.061e-01, -1.559e-01) * s[2][1][1];
	r0 += M4(-3.868e-02, 9.999e-03, -2.050e-02, -1.018e-01, 2.504e-02, -2.687e-01, 5.607e-02, 2.079e-01, -2.876e-02, -4.794e-02, 2.500e-01, -3.467e-01, -1.274e-02, -3.119e-02, -1.617e-02, -2.430e-02) * s[2][2][0];
	r0 += M4(-1.831e-02, -4.489e-02, -4.367e-02, -4.917e-02, 1.566e-02, 4.736e-03, 2.449e-02, 7.334e-03, -8.505e-02, -1.102e-01, 6.689e-03, -1.328e-01, -7.881e-02, -1.295e-01, 4.531e-02, 1.673e-01) * s[2][2][1];
	r0 += V4(-3.838e-03, -3.527e-03, 1.179e-03, 1.355e-03);
	r0 = tanh(r0);
	vec2 opt = 0.5 * LUMA_pt;
	vec2 fpos = (vec2(opos) + vec2(0.5)) * opt;
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0.x + easu_tex(fpos + vec2(0.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r0.y + easu_tex(fpos + vec2(1.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(0, 1), vec4(r0.z + easu_tex(fpos + vec2(0.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 1), vec4(r0.w + easu_tex(fpos + vec2(1.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
}
