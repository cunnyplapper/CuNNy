// CuNNy 4x8C DS
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

// FSR mpv | modified
// Copyright (c) 2021 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// FidelityFX FSR v1.0.2 by AMD
// ported to mpv by agyild

//!DESC CuNNy-EASU
//!HOOK LUMA
//!BIND LUMA
//!SAVE easu
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
//!COMPONENTS 1

float APrxLoRcpF1(float a) {
	return uintBitsToFloat(uint(0x7ef07ebb) - floatBitsToUint(a));
}

float APrxLoRsqF1(float a) {
	return uintBitsToFloat(uint(0x5f347d74) - (floatBitsToUint(a) >> uint(1)));
}

float AMin3F1(float x, float y, float z) {
	return min(x, min(y, z));
}

float AMax3F1(float x, float y, float z) {
	return max(x, max(y, z));
}

void tap(inout float aC, inout float aW, vec2 off, vec2 dir, vec2 len,
         float lob, float clp, float c){
	vec2 v;
	v.x = (off.x * ( dir.x)) + (off.y * dir.y);
	v.y = (off.x * (-dir.y)) + (off.y * dir.x);
	v *= len;
	float d2 = v.x * v.x + v.y * v.y;
	d2 = min(d2, clp);
	float wB = float(2.0 / 5.0) * d2 + -1.0;
	float wA = lob * d2 + -1.0;
	wB *= wB;
	wA *= wA;
	wB = float(25.0 / 16.0) * wB + float(-(25.0 / 16.0 - 1.0));
	float w = wB * wA;
	aC += c * w;
	aW += w;
}

void set(inout vec2 dir, inout float len, vec2 pp, bool biS, bool biT,
         bool biU, bool biV, float lA, float lB, float lC, float lD, float lE){
	float w = 0.0;
	if (biS)
		w = (1.0 - pp.x) * (1.0 - pp.y);
	if (biT)
		w =        pp.x  * (1.0 - pp.y);
	if (biU)
		w = (1.0 - pp.x) *        pp.y;
	if (biV)
		w =        pp.x  *        pp.y;
	float dc = lD - lC;
	float cb = lC - lB;
	float lenX = max(abs(dc), abs(cb));
	lenX = APrxLoRcpF1(lenX);
	float dirX = lD - lB;
	lenX = clamp(abs(dirX) * lenX, 0.0, 1.0);
	lenX *= lenX;
	float ec = lE - lC;
	float ca = lC - lA;
	float lenY = max(abs(ec), abs(ca));
	lenY = APrxLoRcpF1(lenY);
	float dirY = lE - lA;
	lenY = clamp(abs(dirY) * lenY, 0.0, 1.0);
	lenY *= lenY;
	dir += vec2(dirX, dirY) * w;
	len += dot(vec2(w), vec2(lenX, lenY));
}

vec4 hook() {
	vec4 pix = vec4(0.0, 0.0, 0.0, 1.0);
	vec2 pp = LUMA_pos * LUMA_size - vec2(0.5);
	vec2 fp = floor(pp);
	pp -= fp;
#if (defined(LUMA_gather) && (__VERSION__ >= 400 || (GL_ES && __VERSION__ >= 310)))
	vec4 bczzL = LUMA_gather(vec2((fp + vec2(1.0, -1.0)) * LUMA_pt), 0);
	vec4 ijfeL = LUMA_gather(vec2((fp + vec2(0.0,  1.0)) * LUMA_pt), 0);
	vec4 klhgL = LUMA_gather(vec2((fp + vec2(2.0,  1.0)) * LUMA_pt), 0);
	vec4 zzonL = LUMA_gather(vec2((fp + vec2(1.0,  3.0)) * LUMA_pt), 0);
#else
	float b = LUMA_tex(vec2((fp + vec2(0.5, -0.5)) * LUMA_pt)).r;
	float c = LUMA_tex(vec2((fp + vec2(1.5, -0.5)) * LUMA_pt)).r;
	float e = LUMA_tex(vec2((fp + vec2(-0.5, 0.5)) * LUMA_pt)).r;
	float f = LUMA_tex(vec2((fp + vec2( 0.5, 0.5)) * LUMA_pt)).r;
	float g = LUMA_tex(vec2((fp + vec2( 1.5, 0.5)) * LUMA_pt)).r;
	float h = LUMA_tex(vec2((fp + vec2( 2.5, 0.5)) * LUMA_pt)).r;
	float i = LUMA_tex(vec2((fp + vec2(-0.5, 1.5)) * LUMA_pt)).r;
	float j = LUMA_tex(vec2((fp + vec2( 0.5, 1.5)) * LUMA_pt)).r;
	float k = LUMA_tex(vec2((fp + vec2( 1.5, 1.5)) * LUMA_pt)).r;
	float l = LUMA_tex(vec2((fp + vec2( 2.5, 1.5)) * LUMA_pt)).r;
	float n = LUMA_tex(vec2((fp + vec2(0.5, 2.5) ) * LUMA_pt)).r;
	float o = LUMA_tex(vec2((fp + vec2(1.5, 2.5) ) * LUMA_pt)).r;
	vec4 bczzL = vec4(b, c, 0.0, 0.0);
	vec4 ijfeL = vec4(i, j, f, e);
	vec4 klhgL = vec4(k, l, h, g);
	vec4 zzonL = vec4(0.0, 0.0, o, n);
#endif
	float bL = bczzL.x;
	float cL = bczzL.y;
	float iL = ijfeL.x;
	float jL = ijfeL.y;
	float fL = ijfeL.z;
	float eL = ijfeL.w;
	float kL = klhgL.x;
	float lL = klhgL.y;
	float hL = klhgL.z;
	float gL = klhgL.w;
	float oL = zzonL.z;
	float nL = zzonL.w;
	vec2 dir = vec2(0.0);
	float len = 0.0;
	set(dir, len, pp, true, false, false, false, bL, eL, fL, gL, jL);
	set(dir, len, pp, false, true, false, false, cL, fL, gL, hL, kL);
	set(dir, len, pp, false, false, true, false, fL, iL, jL, kL, nL);
	set(dir, len, pp, false, false, false, true, gL, jL, kL, lL, oL);
	vec2 dir2 = dir * dir;
	float dirR = dir2.x + dir2.y;
	bool zro = dirR < float(1.0 / 32768.0);
	dirR = APrxLoRsqF1(dirR);
	dirR = zro ? 1.0 : dirR;
	dir.x = zro ? 1.0 : dir.x;
	dir *= vec2(dirR);
	len = len * 0.5;
	len *= len;
	float stretch = (dir.x * dir.x + dir.y * dir.y) * APrxLoRcpF1(max(abs(dir.x), abs(dir.y)));
	vec2 len2 = vec2(1.0 + (stretch - 1.0) * len, 1.0 + -0.5 * len);
	float lob = 0.5 + float((1.0 / 4.0 - 0.04) - 0.5) * len;
	float clp = APrxLoRcpF1(lob);
	float aC = 0.0;
	float aW = 0.0;
	tap(aC, aW, vec2( 0.0,-1.0) - pp, dir, len2, lob, clp, bL);
	tap(aC, aW, vec2( 1.0,-1.0) - pp, dir, len2, lob, clp, cL);
	tap(aC, aW, vec2(-1.0, 1.0) - pp, dir, len2, lob, clp, iL);
	tap(aC, aW, vec2( 0.0, 1.0) - pp, dir, len2, lob, clp, jL);
	tap(aC, aW, vec2( 0.0, 0.0) - pp, dir, len2, lob, clp, fL);
	tap(aC, aW, vec2(-1.0, 0.0) - pp, dir, len2, lob, clp, eL);
	tap(aC, aW, vec2( 1.0, 1.0) - pp, dir, len2, lob, clp, kL);
	tap(aC, aW, vec2( 2.0, 1.0) - pp, dir, len2, lob, clp, lL);
	tap(aC, aW, vec2( 2.0, 0.0) - pp, dir, len2, lob, clp, hL);
	tap(aC, aW, vec2( 1.0, 0.0) - pp, dir, len2, lob, clp, gL);
	tap(aC, aW, vec2( 1.0, 2.0) - pp, dir, len2, lob, clp, oL);
	tap(aC, aW, vec2( 0.0, 2.0) - pp, dir, len2, lob, clp, nL);
	pix.r = aC / aW;
	float min1 = min(AMin3F1(fL, gL, jL), kL);
	float max1 = max(AMax3F1(fL, gL, jL), kL);
	pix.r = clamp(pix.r, min1, max1);
	pix.r = clamp(pix.r, 0.0, 1.0);
	return pix;
}


//!DESC CuNNy-4x8C-DS-in
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND LUMA
//!SAVE in
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) F(texelFetch(LUMA_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(1, 1) + ivec2(0, 0), 0).r)
shared F s0[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += V4(9.351e-02, 3.613e-02, -1.361e-01, 1.599e-01) * s0[y+0][x+0];
	r += V4(-1.114e-01, -7.300e-02, -2.306e-01, -2.454e-01) * s0[y+0][x+1];
	r += V4(-2.389e-02, -1.222e-01, -3.740e-04, -2.871e-03) * s0[y+0][x+2];
	r += V4(-3.933e-02, -4.376e-03, 3.495e-02, -2.122e-01) * s0[y+1][x+0];
	r += V4(4.327e-01, -2.849e-02, 5.989e-04, -2.705e-01) * s0[y+1][x+1];
	r += V4(-6.361e-02, -2.889e-01, 1.763e-01, 1.948e-01) * s0[y+1][x+2];
	r += V4(-2.725e-01, -1.654e-02, -2.155e-02, 1.311e-02) * s0[y+2][x+0];
	r += V4(-8.572e-02, 4.354e-02, 1.430e-01, 2.091e-02) * s0[y+2][x+1];
	r += V4(6.045e-02, 2.557e-02, 6.834e-02, 2.900e-01) * s0[y+2][x+2];
	r += V4(1.126e-02, 1.473e-02, -4.797e-02, 5.846e-02);
	return vec4(r);
}
vec4 f1(int x, int y) {
	V4 r = V4(0.0);
	r += V4(2.271e-01, 9.816e-03, 2.572e-02, -4.788e-02) * s0[y+0][x+0];
	r += V4(8.518e-02, 2.189e-02, 3.474e-04, -7.197e-02) * s0[y+0][x+1];
	r += V4(-8.032e-02, 6.373e-03, -9.041e-03, -9.636e-02) * s0[y+0][x+2];
	r += V4(2.529e-02, 4.263e-03, 6.074e-01, -8.454e-02) * s0[y+1][x+0];
	r += V4(-3.896e-01, -2.804e-01, -4.496e-01, 1.961e-01) * s0[y+1][x+1];
	r += V4(5.271e-02, -4.566e-02, 7.171e-04, 1.763e-01) * s0[y+1][x+2];
	r += V4(-1.107e-01, 2.345e-02, 3.750e-02, 3.777e-03) * s0[y+2][x+0];
	r += V4(9.290e-02, -6.321e-02, -2.205e-01, 8.960e-02) * s0[y+2][x+1];
	r += V4(9.529e-02, 4.382e-02, 8.244e-03, -2.192e-01) * s0[y+2][x+2];
	r += V4(-1.071e-02, 5.444e-03, -3.074e-04, 4.911e-04);
	return vec4(r);
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = LUMA_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
		}
	}
	barrier();
	vec4 r0 = f0(xy.x, xy.y);
	vec4 r1 = f1(xy.x, xy.y);
	imageStore(out_image, opos + ivec2(0, 0), r0);
	imageStore(out_image, opos + ivec2(1, 0), r1);
}

//!DESC CuNNy-4x8C-DS-conv1
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND in
//!BIND LUMA
//!SAVE conv1
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(texelFetch(in_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(in_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 s0[10][10];
shared V4 s1[10][10];
shared V4 s2[10][10];
shared V4 s3[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += M4(6.438e-02, 1.137e-01, 9.933e-02, 1.227e-01, 7.704e-01, -1.104e+00, -1.146e-01, -7.163e-01, 2.729e-02, -1.064e-02, -3.904e-02, -2.692e-03, -9.966e-02, 6.519e-03, 7.674e-02, -5.437e-03) * s0[y+0][x+0];
	r += M4(-1.015e-01, 2.211e-01, -1.382e-01, 6.631e-02, 4.979e-02, -8.299e-01, -2.152e-01, -7.874e-01, 1.274e-01, 3.920e-02, 1.271e-01, -1.854e-02, 3.652e-02, -2.365e-02, 5.683e-02, 1.645e-01) * s0[y+0][x+1];
	r += M4(-1.378e-02, 2.609e-01, -1.505e-01, 1.913e-02, 1.861e-01, -1.010e-01, 2.581e-01, -9.578e-03, 1.255e-03, 4.059e-02, -2.382e-01, 3.381e-02, 5.402e-02, -7.510e-03, 1.004e-01, -8.526e-02) * s0[y+0][x+2];
	r += M4(5.842e-02, -6.831e-02, -1.177e-01, -1.885e-01, -8.255e-01, 1.271e-01, -1.436e+00, 1.221e+00, 6.234e-02, 4.012e-02, -1.153e-01, 4.194e-02, -1.051e-01, -1.292e-01, 6.236e-02, 1.040e-01) * s0[y+1][x+0];
	r += M4(1.665e-01, 5.432e-02, 6.365e-01, -4.213e-01, -7.143e-01, -6.202e-01, -1.022e-01, 8.617e-01, -1.137e-01, 1.265e-01, -1.659e-01, 1.717e-02, 7.001e-02, 9.368e-02, -2.269e-01, 1.498e-01) * s0[y+1][x+1];
	r += M4(-9.895e-02, 2.082e-01, -2.091e-01, -1.735e-01, -1.009e-01, -2.847e-01, 1.069e+00, 1.544e-01, 8.329e-02, -5.817e-02, 3.808e-01, -1.249e-01, 2.261e-02, -9.886e-02, -1.732e-02, 2.718e-02) * s0[y+1][x+2];
	r += M4(-1.451e-04, 7.582e-02, 1.018e-01, 7.411e-02, 1.315e+00, 9.631e-02, -9.931e-01, 6.067e-01, 6.764e-02, -1.572e-01, -1.641e-01, -6.795e-02, -1.350e-01, -5.185e-02, 1.794e-01, 3.209e-02) * s0[y+2][x+0];
	r += M4(-3.531e-02, -9.530e-02, -1.225e-01, 4.189e-01, 1.307e+00, -5.599e-01, 5.748e-01, 9.427e-02, -1.336e-01, -1.741e-01, -1.445e-01, -1.764e-01, -4.938e-02, 2.679e-02, 1.583e-02, -5.929e-03) * s0[y+2][x+1];
	r += M4(-3.430e-02, -1.990e-01, 2.657e-01, -1.688e-01, 1.736e-01, -5.554e-01, 8.802e-01, -2.094e-01, -3.079e-02, 1.745e-01, -2.798e-01, 3.041e-01, 5.485e-02, -1.150e-01, 5.262e-02, 2.734e-02) * s0[y+2][x+2];
	r += M4(8.472e-02, 1.186e-01, 1.354e-01, 4.898e-02, -1.515e-01, -9.051e-02, -5.261e-02, 1.564e-01, -8.675e-03, -3.807e-02, 2.209e-02, -9.392e-02, -5.564e-02, -6.961e-02, 7.543e-02, -4.316e-02) * s1[y+0][x+0];
	r += M4(-2.490e-01, 3.180e-02, 1.252e-01, 1.414e-01, -4.186e-02, -1.223e-01, 6.221e-02, -6.558e-02, 1.021e-01, -4.850e-03, 5.909e-02, -1.671e-02, 1.061e-01, -2.224e-02, -1.697e-01, 2.298e-02) * s1[y+0][x+1];
	r += M4(1.805e-02, 1.341e-01, -7.502e-03, 1.101e-01, -4.846e-03, -1.036e-03, 5.911e-02, -3.847e-02, -1.809e-03, 5.777e-02, -2.250e-01, 5.461e-02, 3.082e-02, 2.230e-02, 4.344e-02, -8.780e-02) * s1[y+0][x+2];
	r += M4(-8.773e-02, -2.486e-02, -1.481e-01, -1.214e-01, -5.631e-02, 1.057e-01, -9.818e-02, 9.785e-02, 1.849e-02, -1.876e-01, 1.027e-01, 4.420e-02, -9.326e-02, -6.183e-02, 9.609e-02, -8.480e-02) * s1[y+1][x+0];
	r += M4(3.275e-01, 1.245e-01, -7.876e-03, -4.883e-01, -2.078e-01, -1.198e-02, 2.204e-02, -7.982e-02, -8.205e-02, 6.612e-02, 7.593e-02, 5.049e-02, -7.444e-02, -2.355e-01, 1.471e-01, -6.317e-02) * s1[y+1][x+1];
	r += M4(-2.131e-01, 5.841e-01, -8.638e-01, 6.220e-02, 1.093e-01, 6.634e-02, -1.179e-02, -1.974e-02, 1.077e-01, -1.905e-02, 2.021e-01, -1.663e-01, 2.228e-02, -4.146e-02, 3.937e-02, 8.590e-03) * s1[y+1][x+2];
	r += M4(-2.907e-02, 4.517e-02, 7.477e-02, -1.284e-01, -2.297e-01, 3.345e-02, -5.981e-02, -8.749e-02, 1.275e-01, -1.938e-01, -1.126e-01, 1.733e-01, -1.296e-01, -1.348e-01, 1.500e-01, -1.174e-03) * s1[y+2][x+0];
	r += M4(-1.405e-01, -3.342e-01, -3.213e-01, 3.486e-01, -4.561e-02, -1.004e-01, -2.541e-02, 1.026e-01, -2.210e-01, 1.144e-02, -1.044e-01, 3.400e-01, 2.279e-03, -2.550e-01, 2.173e-01, 2.892e-03) * s1[y+2][x+1];
	r += M4(1.325e-02, -1.293e-01, 3.172e-02, 5.293e-02, 5.173e-02, -1.640e-01, 2.350e-02, 4.646e-02, 2.620e-02, 3.496e-02, -2.446e-01, 2.787e-01, -3.083e-02, -8.994e-02, 5.817e-02, 6.914e-02) * s1[y+2][x+2];
	r += M4(6.377e-02, -4.654e-02, -1.538e-01, -6.593e-02, 2.711e-01, 4.636e-02, 2.383e-01, -4.290e-01, -4.206e-02, 6.580e-02, 4.454e-02, 7.377e-02, -1.824e-02, 8.471e-02, 8.596e-02, 1.590e-01) * s2[y+0][x+0];
	r += M4(6.576e-02, -3.430e-02, 2.054e-01, -1.233e-01, -1.766e+00, -1.011e+00, 1.163e-01, 2.741e-01, -2.846e-03, -3.408e-01, 1.154e-02, 3.511e-02, 1.554e-02, -7.355e-02, 1.739e-01, 4.618e-03) * s2[y+0][x+1];
	r += M4(8.221e-02, 8.744e-02, -2.792e-02, 1.247e-01, 8.680e-01, -2.857e+00, 5.315e-02, -2.168e-01, 3.907e-02, -1.756e-01, -6.568e-02, 1.302e-01, -4.902e-02, -1.342e-01, 2.569e-01, 1.654e-03) * s2[y+0][x+2];
	r += M4(1.215e-01, -3.951e-02, 9.290e-02, -1.785e-01, 1.260e+00, -1.949e+00, -1.506e+00, 3.963e-01, 6.909e-02, -2.147e-03, 2.380e-01, 2.890e-02, -3.215e-02, 1.756e-01, 1.688e-01, -2.510e-01) * s2[y+1][x+0];
	r += M4(-2.561e-01, -3.231e-01, -2.925e-01, 3.874e-01, -8.212e-01, -1.606e+00, -1.486e+00, 1.404e+00, -1.489e-01, -5.510e-01, 8.950e-04, 7.159e-02, 2.563e-01, 1.072e-01, -8.407e-02, -1.604e-01) * s2[y+1][x+1];
	r += M4(-3.583e-02, -1.416e-01, 6.526e-01, -8.140e-02, 5.580e-01, -2.856e+00, 1.102e+00, 3.445e-01, 2.693e-02, -6.934e-01, 2.368e-01, 8.879e-02, -3.974e-02, 2.578e-01, -3.456e-01, 8.754e-02) * s2[y+1][x+2];
	r += M4(4.571e-02, -2.272e-01, -2.933e-01, -6.740e-03, 8.387e-01, -2.244e-01, 3.151e-02, -2.021e+00, -8.893e-02, -4.148e-03, 2.828e-02, -5.967e-02, -1.515e-01, -3.319e-01, -1.011e-01, 1.482e-01) * s2[y+2][x+0];
	r += M4(1.900e-01, -4.061e-01, 9.839e-02, -3.304e-01, 2.870e-01, -4.380e-01, -8.520e-02, -1.675e+00, 3.863e-03, -2.248e-01, -3.752e-02, -1.696e-01, -1.426e-02, -9.554e-02, 3.053e-02, 3.585e-01) * s2[y+2][x+1];
	r += M4(-3.985e-03, -9.790e-02, -3.156e-01, 5.391e-03, 3.019e-01, -1.325e+00, 1.013e+00, -3.983e-01, -2.701e-02, -2.600e-01, -4.488e-02, -2.115e-02, -1.558e-02, 2.553e-02, 4.945e-02, 1.140e-01) * s2[y+2][x+2];
	r += M4(4.705e-02, -3.042e-02, 4.085e-02, 8.513e-03, 1.483e-01, 2.047e-01, -5.414e-03, 1.323e-01, -2.191e-03, 2.434e-02, -8.506e-02, 5.947e-02, -3.132e-02, 1.019e-01, -6.279e-02, -2.586e-02) * s3[y+0][x+0];
	r += M4(1.247e-02, -8.685e-02, 2.008e-01, 4.461e-02, -1.939e-01, -1.117e-01, -1.324e-02, 9.354e-02, -1.540e-02, 4.743e-02, 7.452e-02, 9.201e-02, 3.719e-02, 2.227e-03, 1.139e-01, -5.944e-02) * s3[y+0][x+1];
	r += M4(-2.118e-02, 5.675e-02, 2.964e-02, 9.923e-02, 9.995e-02, -9.810e-02, -1.002e-02, 7.344e-02, 6.128e-02, 8.734e-02, -1.974e-02, 1.063e-01, -7.184e-03, -7.056e-02, 4.919e-02, -8.049e-02) * s3[y+0][x+2];
	r += M4(1.471e-02, 2.186e-01, 2.482e-01, -6.257e-02, 1.477e-01, 4.461e-02, -1.536e-01, -1.554e-01, 3.556e-02, -4.968e-02, 1.182e-01, 9.191e-03, 1.010e-01, 1.494e-01, 2.713e-01, -2.488e-01) * s3[y+1][x+0];
	r += M4(-1.466e-01, -1.689e-02, -5.449e-01, 2.652e-01, -7.914e-02, 8.831e-02, 5.079e-02, -1.165e-01, -7.007e-02, 1.286e-01, -2.310e-01, 1.488e-01, 4.731e-02, 1.128e-01, -4.152e-02, -6.706e-02) * s3[y+1][x+1];
	r += M4(-5.265e-02, 9.097e-02, 2.590e-01, -1.870e-01, -2.183e-02, -9.175e-02, -4.115e-03, 2.745e-02, 1.113e-01, 1.502e-01, 4.816e-01, -1.814e-02, 2.008e-02, 5.368e-02, -3.577e-01, 1.090e-01) * s3[y+1][x+2];
	r += M4(1.284e-02, -1.180e-01, -2.036e-01, -1.589e-02, -1.724e-02, 2.058e-01, 1.840e-01, -5.627e-03, -4.257e-02, -1.969e-02, -1.395e-02, -7.803e-02, -1.784e-01, -3.366e-02, -7.468e-02, 9.001e-02) * s3[y+2][x+0];
	r += M4(4.985e-02, 1.065e-02, 3.127e-01, -4.074e-01, -2.540e-01, 1.258e-01, 6.049e-04, -2.595e-01, 6.533e-03, 1.538e-01, 2.715e-02, -6.541e-02, -7.414e-03, -1.258e-01, -1.794e-01, 2.501e-01) * s3[y+2][x+1];
	r += M4(9.070e-02, 8.118e-02, 5.823e-02, -1.074e-01, -1.432e-01, 6.076e-02, -3.529e-02, 3.143e-02, -7.798e-03, -4.110e-02, -2.029e-02, 1.166e-01, -3.042e-03, -1.995e-01, 1.399e-01, 2.009e-01) * s3[y+2][x+2];
	r += V4(-3.106e-01, 2.716e-02, -3.821e-02, 8.711e-03);
	return vec4(r);
}
vec4 f1(int x, int y) {
	V4 r = V4(0.0);
	r += M4(2.083e-02, 1.063e-01, 8.925e-02, -2.769e-02, -6.991e-01, -1.396e-02, -5.550e-01, 2.194e-01, 3.118e-02, 1.094e-01, -1.506e-02, -7.154e-02, 7.301e-02, -1.302e-02, -8.515e-02, -1.423e-01) * s0[y+0][x+0];
	r += M4(1.709e-02, 2.924e-01, -2.067e-01, -5.356e-01, 1.243e-01, 9.783e-01, -5.090e-01, -2.918e-01, -2.298e-01, -2.427e-02, 1.637e-01, 1.714e-01, -2.464e-02, -2.182e-01, 1.769e-01, 2.846e-01) * s0[y+0][x+1];
	r += M4(-6.733e-02, 9.385e-02, 3.508e-01, -2.731e-01, -2.793e-03, 1.951e-01, 1.255e-01, 3.479e-02, 7.578e-02, 5.241e-02, -1.539e-01, 4.153e-03, -6.705e-02, -1.280e-02, -1.450e-01, 1.576e-01) * s0[y+0][x+2];
	r += M4(-4.208e-02, 1.009e-01, 7.799e-02, -1.382e-02, 1.753e-01, -2.644e-01, -7.313e-01, -1.563e-01, -5.055e-02, -1.380e-01, 3.623e-02, 8.730e-02, -1.458e-01, 1.390e-01, 6.532e-02, -1.070e-01) * s0[y+1][x+0];
	r += M4(7.096e-02, 4.632e-01, -1.186e-01, -1.673e-01, 4.816e-01, -6.051e-01, -1.196e+00, 1.447e-01, -3.233e-01, -2.625e-01, 3.408e-02, 2.023e-01, -1.311e-01, -1.341e-01, 1.289e-01, 5.217e-02) * s0[y+1][x+1];
	r += M4(1.726e-01, 1.008e-01, 2.938e-02, -2.226e-01, -1.154e+00, 7.479e-03, -2.630e-01, 3.770e-01, -9.561e-03, 2.432e-01, -1.040e-01, -3.602e-02, 3.256e-02, 2.528e-02, 9.695e-02, -2.941e-02) * s0[y+1][x+2];
	r += M4(-3.935e-02, 4.722e-02, 7.640e-03, 6.755e-02, -1.178e+00, -5.356e-01, -2.579e-01, -8.513e-01, -1.338e-02, 2.451e-02, -2.274e-02, 1.733e-01, -1.678e-02, 4.381e-02, 1.719e-02, 2.451e-02) * s0[y+2][x+0];
	r += M4(7.743e-03, 8.158e-02, -6.713e-02, 1.053e-01, 7.450e-01, -1.227e+00, -4.265e-01, -5.004e-01, 8.792e-02, -4.365e-01, -1.966e-02, -1.350e-01, -9.303e-03, -9.206e-02, -1.670e-02, 7.964e-03) * s0[y+2][x+1];
	r += M4(-1.196e-01, 2.281e-01, -4.915e-02, -5.481e-02, -2.507e-02, 3.013e-01, -1.817e-02, 3.322e-01, 8.477e-02, -4.863e-01, 4.304e-02, 2.488e-01, 8.424e-02, 1.381e-02, 5.014e-02, -4.300e-02) * s0[y+2][x+2];
	r += M4(2.007e-01, -1.095e-01, 7.952e-02, 8.700e-02, -1.856e-02, -2.768e-02, -1.617e-02, 1.352e-01, -8.819e-02, 3.832e-02, -7.626e-02, -2.128e-01, -9.712e-02, 3.374e-01, -5.514e-02, -1.641e-01) * s1[y+0][x+0];
	r += M4(9.456e-02, -2.252e-01, -1.458e-01, -3.088e-01, -8.945e-03, 8.277e-02, 6.065e-02, -1.934e-02, -1.415e-01, 3.487e-02, 7.594e-02, 1.089e-01, 5.507e-02, 1.066e-01, 8.503e-02, 1.214e-01) * s1[y+0][x+1];
	r += M4(7.935e-02, -6.237e-01, 4.528e-01, 1.095e-02, 2.960e-02, -1.823e-02, 1.316e-02, 4.460e-02, 9.303e-02, -5.604e-02, -1.225e-01, -8.648e-02, -1.853e-01, -8.921e-02, -7.030e-02, 1.039e-01) * s1[y+0][x+2];
	r += M4(1.585e-01, -2.768e-01, 6.743e-02, 2.904e-02, 1.011e-01, -7.633e-02, 8.130e-02, 1.447e-02, 2.334e-02, 2.915e-02, -8.721e-02, -1.170e-01, 5.573e-02, 3.368e-01, 4.350e-02, -2.269e-01) * s1[y+1][x+0];
	r += M4(-8.531e-02, -1.948e-01, -5.045e-02, 4.881e-01, -1.274e-01, -2.494e-03, -5.636e-02, 2.744e-02, -1.545e-01, -1.488e-01, 7.920e-02, 2.500e-01, -5.312e-02, 3.164e-02, 6.909e-02, -3.095e-01) * s1[y+1][x+1];
	r += M4(6.595e-02, -5.831e-01, 2.665e-01, -4.458e-02, -1.284e-01, 9.409e-03, -2.321e-01, 1.031e-01, 8.877e-02, 3.224e-01, -8.521e-02, 1.196e-01, 1.396e-01, 2.468e-02, 2.590e-02, -8.863e-02) * s1[y+1][x+2];
	r += M4(-2.253e-02, 4.696e-02, 4.875e-02, -1.665e-02, -9.942e-02, -4.407e-02, -8.106e-03, -1.381e-01, 1.990e-01, -3.505e-02, -9.761e-02, 3.642e-02, -2.135e-01, 3.293e-01, 7.954e-02, 9.183e-02) * s1[y+2][x+0];
	r += M4(-4.445e-01, -2.237e-01, -8.673e-02, 1.721e-01, 1.626e-01, -1.242e-01, -6.791e-02, -4.885e-02, -9.902e-02, -1.920e-01, -1.583e-01, 4.654e-02, 3.070e-01, 3.841e-02, -1.168e-02, -3.142e-02) * s1[y+2][x+1];
	r += M4(-7.918e-01, 7.013e-02, -1.003e-01, -3.277e-02, 9.397e-03, 3.355e-02, 3.894e-02, 8.276e-02, -1.254e-01, -1.810e-01, 2.049e-01, 2.186e-01, 5.139e-02, 1.545e-02, -7.860e-02, -3.944e-02) * s1[y+2][x+2];
	r += M4(-1.713e-01, -2.491e-01, -6.372e-02, 9.386e-03, -1.506e-01, -5.556e-01, -1.234e-01, 7.769e-03, 4.982e-02, -1.878e-02, -1.742e-05, -6.474e-02, 3.279e-01, -1.483e-01, -3.110e-01, -8.670e-02) * s2[y+0][x+0];
	r += M4(-2.060e-01, -4.701e-02, 9.875e-02, -2.863e-01, -5.476e-02, -1.325e+00, -1.458e+00, 1.166e+00, -1.156e-01, 3.212e-01, -1.171e-01, -7.031e-01, -2.162e-02, 1.704e-01, -2.927e-02, -1.299e-01) * s2[y+0][x+1];
	r += M4(-1.519e-01, -1.137e-01, -4.027e-02, -1.587e-01, 2.327e-01, 1.001e+00, -2.015e+00, -6.436e-01, -6.421e-02, 9.719e-02, 1.461e-01, -2.286e-04, 8.839e-02, 5.184e-02, -4.822e-02, 4.655e-02) * s2[y+0][x+2];
	r += M4(-7.940e-02, -1.795e-01, -1.040e-01, 1.025e-01, 6.996e-02, -2.350e-01, -7.025e-01, -1.898e+00, 2.566e-02, 8.234e-02, 4.528e-02, -2.259e-02, 2.366e-01, 1.249e-01, 1.156e-01, -3.530e-02) * s2[y+1][x+0];
	r += M4(-2.235e-01, -6.010e-01, -6.046e-02, 1.269e-02, 1.075e+00, -1.927e+00, -1.754e+00, 4.953e-01, 1.307e-01, 5.196e-03, -6.265e-03, 5.989e-01, 2.116e-01, 8.204e-02, -1.180e-02, -6.095e-01) * s2[y+1][x+1];
	r += M4(4.182e-04, -2.362e-01, 4.038e-02, -1.969e-01, 9.442e-01, -9.350e-01, -1.505e+00, -7.693e-01, 1.899e-01, 1.130e-01, 4.308e-02, -5.605e-02, 3.165e-01, -1.140e-01, -1.421e-01, -1.357e-01) * s2[y+1][x+2];
	r += M4(1.308e-01, -1.486e-01, -2.814e-02, 2.115e-01, 4.913e-01, 1.630e+00, 4.402e-01, 3.122e-01, -4.896e-03, -2.295e-02, 3.014e-02, -3.630e-03, 8.918e-02, -2.836e-01, 6.043e-03, -2.304e-01) * s2[y+2][x+0];
	r += M4(-4.435e-02, -1.420e-01, -2.242e-02, 1.424e-01, -5.287e-01, 9.655e-01, -2.226e-02, -1.298e-01, 5.007e-02, 4.557e-02, 4.243e-02, 1.398e-01, -3.000e-02, -3.544e-01, -1.664e-01, 3.374e-01) * s2[y+2][x+1];
	r += M4(5.142e-03, -3.652e-01, -7.357e-02, -5.258e-02, 7.692e-01, -9.234e-01, 2.686e-01, -3.197e-01, 5.279e-02, -1.133e-01, 8.760e-02, -8.032e-02, 4.746e-01, -6.132e-03, -8.083e-02, -2.447e-02) * s2[y+2][x+2];
	r += M4(4.956e-02, -5.325e-02, -5.489e-02, -6.496e-02, -9.106e-02, 6.786e-02, -5.265e-02, 5.363e-02, -3.060e-02, 4.794e-02, -4.074e-02, 2.086e-02, -3.340e-02, 4.377e-02, -1.099e-02, -4.830e-02) * s3[y+0][x+0];
	r += M4(6.046e-03, 3.447e-01, -3.081e-02, -4.022e-02, 1.307e-01, -8.650e-02, -3.120e-02, 8.556e-02, -7.204e-02, 1.439e-01, 7.779e-02, 5.551e-02, 5.781e-02, -7.828e-02, 7.863e-02, -7.415e-02) * s3[y+0][x+1];
	r += M4(6.481e-02, -5.787e-03, -1.420e-01, 6.970e-02, 1.145e-01, 1.907e-02, -3.855e-02, -4.410e-02, -2.065e-01, -2.408e-01, 1.343e-01, 3.369e-01, -6.123e-02, 9.012e-02, 2.618e-01, -7.989e-02) * s3[y+0][x+2];
	r += M4(2.973e-01, 8.330e-02, -7.003e-02, -8.491e-02, 2.171e-02, -5.363e-02, -6.040e-02, -2.100e-01, 2.959e-02, 1.238e-01, 2.009e-02, -5.949e-03, 5.242e-02, 1.774e-01, 6.917e-02, 1.113e-01) * s3[y+1][x+0];
	r += M4(-2.198e-01, -9.709e-02, 2.218e-03, 2.114e-01, -1.390e-02, 1.289e-01, -2.822e-01, 7.918e-02, 9.448e-02, -8.189e-02, -9.643e-02, 7.888e-02, 1.222e-02, 5.375e-02, -2.790e-02, 2.182e-01) * s3[y+1][x+1];
	r += M4(3.108e-02, 1.204e-01, -5.814e-02, 1.082e-01, -4.844e-02, -9.523e-03, 4.291e-02, -1.266e-01, -2.920e-01, 2.694e-02, 1.250e-02, 4.812e-01, 6.488e-02, -1.210e-01, 1.614e-01, -1.494e-01) * s3[y+1][x+2];
	r += M4(1.686e-01, -1.742e-01, 2.308e-02, 4.060e-03, -8.824e-03, -4.588e-02, 7.924e-02, -1.352e-01, -4.464e-02, -5.609e-02, 5.226e-02, -3.384e-02, -1.852e-01, -1.813e-01, 4.942e-02, 6.259e-02) * s3[y+2][x+0];
	r += M4(-1.808e-01, 2.688e-01, -1.209e-01, -3.576e-01, 9.877e-02, 7.348e-02, -2.211e-02, -2.880e-02, 1.042e-01, -2.030e-01, -1.649e-02, -7.404e-02, -2.046e-01, -8.453e-02, 4.230e-02, 1.686e-01) * s3[y+2][x+1];
	r += M4(1.252e-01, 9.898e-02, -9.744e-02, -9.373e-02, 1.243e-01, -1.165e-01, 4.469e-02, 3.037e-02, -6.786e-01, -1.174e-01, 1.166e-02, 1.667e-01, -1.667e-01, 9.391e-02, 1.608e-01, -2.839e-02) * s3[y+2][x+2];
	r += V4(-1.047e-02, -6.832e-02, -2.425e-02, 3.014e-02);
	return vec4(r);
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = in_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
			s2[ay][ax] = l1(x - 1, y - 1);
			s1[ay][ax] = -max(-s0[ay][ax], V4(0.0));
			s0[ay][ax] = max(s0[ay][ax], V4(0.0));
			s3[ay][ax] = -max(-s2[ay][ax], V4(0.0));
			s2[ay][ax] = max(s2[ay][ax], V4(0.0));
		}
	}
	barrier();
	vec4 r0 = f0(xy.x, xy.y);
	vec4 r1 = f1(xy.x, xy.y);
	imageStore(out_image, opos + ivec2(0, 0), r0);
	imageStore(out_image, opos + ivec2(1, 0), r1);
}

//!DESC CuNNy-4x8C-DS-conv2
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv1
//!BIND LUMA
//!SAVE conv2
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(texelFetch(conv1_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv1_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 s0[10][10];
shared V4 s1[10][10];
shared V4 s2[10][10];
shared V4 s3[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-6.778e-01, 3.009e-01, -4.746e-01, 1.519e-01, 5.505e-02, 4.894e-02, 3.500e-01, 1.735e-01, -6.664e-02, -8.542e-02, -1.524e-02, -1.060e-01, 1.217e-01, -5.020e-02, 1.087e-01, 9.940e-02) * s0[y+0][x+0];
	r += M4(3.580e-01, -9.331e-01, -6.085e-01, 3.859e-01, 1.397e-01, -1.516e-01, -1.889e-02, 3.873e-02, -3.256e-03, -1.205e-02, -1.046e-02, -1.924e-01, -3.234e-01, -1.446e-02, 2.672e-02, 2.813e-01) * s0[y+0][x+1];
	r += M4(-2.173e-02, -1.747e-01, -1.097e-01, -2.355e-01, -2.234e-01, 5.361e-02, 2.855e-03, -2.943e-02, -1.774e-01, 1.017e-02, -4.231e-02, 2.570e-02, -2.395e-01, 9.776e-02, -4.049e-02, 1.760e-01) * s0[y+0][x+2];
	r += M4(-1.944e-01, 4.491e-01, -6.351e-01, 1.547e-02, -6.691e-02, 2.165e-02, 1.814e-01, -2.212e-01, -3.895e-02, 1.531e-01, -1.919e-01, -3.443e-01, -9.617e-02, -8.373e-02, -4.866e-02, -3.460e-02) * s0[y+1][x+0];
	r += M4(5.943e-01, -1.723e+00, -1.323e+00, 2.662e-01, 2.359e-01, -4.934e-01, -2.157e-01, 6.515e-04, 1.716e-01, -3.080e-01, -1.478e-01, -2.116e-01, -2.570e-01, 3.962e-02, 8.739e-02, 3.980e-01) * s0[y+1][x+1];
	r += M4(-9.033e-02, -5.339e-01, -5.618e-01, 9.298e-02, 1.959e-01, 1.107e-01, 1.208e-01, 2.987e-02, -9.740e-02, -6.961e-02, -9.232e-02, -9.193e-02, -3.435e-01, 1.980e-01, 4.960e-02, 1.118e-01) * s0[y+1][x+2];
	r += M4(-6.632e-01, 6.834e-01, -5.522e-01, -5.626e-02, -1.307e-01, 1.314e-01, 1.202e-01, -7.812e-02, 8.511e-03, 7.248e-02, -1.009e-02, 7.299e-02, 7.572e-02, 6.685e-02, 1.065e-01, -2.457e-02) * s0[y+2][x+0];
	r += M4(-7.500e-01, -2.085e-01, -7.874e-01, 3.679e-02, 8.305e-02, 1.393e-01, -1.891e-02, -3.923e-02, 4.763e-02, -1.706e-01, -8.980e-02, -2.565e-01, -4.888e-02, -3.141e-02, -1.145e-01, 5.246e-02) * s0[y+2][x+1];
	r += M4(-4.903e-01, 3.692e-01, -1.194e-01, 1.010e-01, -3.077e-02, 8.289e-02, 2.961e-02, 1.343e-01, 3.648e-02, -8.691e-02, -1.215e-01, -6.036e-02, -1.164e-03, 1.389e-01, -2.326e-03, 1.602e-01) * s0[y+2][x+2];
	r += M4(-5.646e-02, 4.150e-02, -9.527e-03, -8.216e-02, -6.065e-04, 3.353e-02, 6.005e-02, 1.042e-01, 3.390e-02, 1.125e-01, 1.224e-01, -4.263e-02, 1.733e-01, -2.334e-02, 1.649e-02, 1.177e-01) * s1[y+0][x+0];
	r += M4(1.165e-01, -2.554e-02, 1.254e-02, -1.400e-02, -7.274e-02, -2.153e-01, 3.782e-02, 2.635e-03, 8.110e-02, 3.577e-02, 4.135e-02, -2.891e-02, 1.405e-01, -2.381e-01, 3.233e-02, -4.171e-02) * s1[y+0][x+1];
	r += M4(-3.296e-02, -5.846e-02, -3.684e-02, -3.333e-02, -1.124e-01, 9.686e-02, -3.805e-02, -6.486e-03, -1.791e-02, 1.289e-01, 1.786e-02, 4.150e-02, 8.144e-02, 8.486e-02, -2.002e-01, -9.868e-02) * s1[y+0][x+2];
	r += M4(-5.936e-02, -2.418e-02, -1.145e-01, -8.121e-02, 1.935e-01, -1.985e-01, 1.290e-02, -3.823e-02, 6.776e-02, 1.077e-01, 2.204e-02, -2.272e-01, -1.737e-02, 2.441e-02, -5.793e-02, -1.459e-01) * s1[y+1][x+0];
	r += M4(1.092e-01, -2.058e-03, 2.933e-01, 9.662e-02, 4.286e-01, -2.937e-01, -8.424e-02, -5.723e-01, 4.061e-01, -2.617e-01, 7.777e-02, -6.470e-02, 4.748e-02, 1.486e-01, 6.087e-02, -2.687e-01) * s1[y+1][x+1];
	r += M4(1.911e-02, -6.823e-02, -2.765e-02, -3.626e-02, 1.986e-02, -7.210e-02, -2.053e-02, 1.025e-02, -8.570e-02, 5.168e-02, -2.677e-02, 8.766e-02, -1.114e-01, 1.261e-01, -1.254e-02, -2.456e-01) * s1[y+1][x+2];
	r += M4(3.097e-03, -5.792e-02, -6.078e-02, 2.738e-03, -4.423e-02, 4.061e-02, 7.238e-02, 6.764e-02, -7.030e-02, 1.116e-01, 6.119e-02, -1.088e-02, 4.022e-02, 1.376e-02, 6.659e-03, -1.152e-01) * s1[y+2][x+0];
	r += M4(2.105e-02, 3.689e-02, 5.226e-02, 5.090e-02, -2.716e-02, -1.082e-01, -1.046e-01, -2.788e-01, 5.724e-02, -1.435e-01, 2.168e-02, 3.421e-02, -8.861e-02, -3.188e-02, 1.858e-02, -1.157e-02) * s1[y+2][x+1];
	r += M4(-8.186e-02, 1.233e-01, -1.104e-02, 5.183e-02, -2.741e-02, 3.495e-02, -3.126e-02, 9.433e-02, 1.927e-02, 6.079e-02, 4.232e-02, 2.488e-01, 6.342e-02, 6.979e-02, 1.649e-02, 1.358e-01) * s1[y+2][x+2];
	r += M4(1.556e-01, -1.675e-01, 2.493e-01, 1.541e-01, -4.401e-02, 1.045e-02, 2.680e-02, 1.573e-01, -4.124e-02, 1.949e-01, -2.407e-02, 1.067e-02, 5.272e-02, 1.347e-02, 6.550e-03, -3.784e-02) * s2[y+0][x+0];
	r += M4(1.168e-01, -1.904e-01, 1.040e-01, 1.214e-01, 7.377e-02, -1.738e-01, -2.696e-02, -1.625e-01, -1.898e-02, 1.538e-01, -5.084e-02, -7.452e-03, -5.854e-02, 2.530e-01, -5.559e-03, -5.221e-02) * s2[y+0][x+1];
	r += M4(8.740e-02, -1.756e-01, -8.135e-02, -8.798e-02, -5.226e-02, 1.646e-01, 2.187e-02, -8.838e-02, 7.396e-02, -2.251e-02, 1.273e-02, 1.523e-02, 1.681e-01, 6.952e-02, 7.232e-02, 1.147e-01) * s2[y+0][x+2];
	r += M4(-6.222e-02, 4.820e-02, -2.647e-02, -8.700e-03, -1.655e-01, 1.069e-01, 3.598e-02, 1.348e-01, -3.185e-02, -1.263e-01, -9.614e-02, 3.428e-02, -1.199e-01, 1.076e-01, -5.298e-02, -4.410e-02) * s2[y+1][x+0];
	r += M4(-1.287e-01, -2.883e-02, 5.416e-02, -1.814e-02, 2.654e-01, -3.746e-01, -6.451e-02, -9.721e-02, -1.022e-01, 3.566e-02, -7.726e-02, -1.704e-02, -2.246e-01, 1.493e-01, 1.437e-01, 4.829e-01) * s2[y+1][x+1];
	r += M4(-6.205e-02, -9.677e-02, -1.321e-01, -1.017e-01, 2.034e-01, -1.084e-01, -1.297e-02, -5.252e-02, 5.869e-02, 1.497e-01, 2.890e-03, -1.835e-02, 8.878e-02, 2.115e-03, -3.666e-02, 1.778e-02) * s2[y+1][x+2];
	r += M4(7.545e-02, 6.230e-03, 9.766e-03, -9.019e-02, 1.881e-01, -1.272e-01, 5.733e-02, -3.135e-01, 1.120e-01, -1.223e-01, -4.161e-02, 9.695e-02, -5.362e-02, 3.810e-02, -3.989e-02, -2.324e-01) * s2[y+2][x+0];
	r += M4(-5.964e-02, -1.065e-01, -3.399e-03, 5.187e-02, -2.776e-01, 8.410e-02, -3.315e-02, -5.740e-02, 1.156e-02, -1.520e-01, -4.113e-02, 6.859e-02, -1.339e-01, 2.359e-01, 1.801e-01, 2.405e-01) * s2[y+2][x+1];
	r += M4(-2.449e-02, 1.281e-03, -4.987e-02, -9.398e-02, -1.472e-01, 2.984e-02, 7.203e-02, 1.384e-01, 1.329e-02, 4.284e-02, 4.008e-02, 2.453e-02, -1.690e-01, 2.708e-02, 7.834e-02, 1.364e-03) * s2[y+2][x+2];
	r += M4(-1.390e-01, 1.513e-01, -3.261e-02, 2.979e-01, -6.539e-02, -5.640e-02, 1.149e-02, 1.074e-01, 2.148e-01, 2.548e-01, -1.324e-01, 2.050e-01, 2.498e-02, -9.382e-02, -1.324e-02, -8.796e-03) * s3[y+0][x+0];
	r += M4(2.184e-03, 9.408e-02, -6.477e-02, 3.148e-01, 8.667e-03, 1.375e-02, 3.310e-02, 4.061e-02, 3.353e-01, 1.060e-01, -7.163e-03, 1.453e-02, 7.924e-02, -4.549e-03, 4.701e-02, -1.794e-02) * s3[y+0][x+1];
	r += M4(-6.973e-02, 2.688e-01, 9.882e-02, 1.625e-01, -6.510e-02, 1.495e-02, -8.081e-02, -7.996e-02, 3.504e-02, -2.069e-02, 7.682e-02, -4.394e-02, -8.319e-02, -1.334e-01, 2.327e-02, 1.919e-01) * s3[y+0][x+2];
	r += M4(8.292e-02, 1.275e-01, -7.563e-02, 1.139e-02, -4.503e-02, -1.379e-02, -7.848e-02, 1.381e-01, 3.724e-01, -1.426e+00, -1.104e-01, -1.268e-01, -5.504e-02, -1.616e-04, -2.755e-02, -1.469e-01) * s3[y+1][x+0];
	r += M4(-3.008e-02, 4.599e-02, -1.044e-02, 3.780e-02, 4.873e-02, 5.495e-02, 7.402e-04, 2.807e-01, 2.587e-01, -5.604e-01, -2.762e-01, 1.591e-02, 3.698e-02, -1.783e-01, 2.083e-02, -2.543e-01) * s3[y+1][x+1];
	r += M4(-2.624e-02, 2.054e-02, 2.646e-02, 3.188e-02, -1.460e-01, 4.582e-02, -1.042e-01, 1.501e-01, 3.448e-02, -8.047e-02, 2.355e-02, 9.984e-02, 2.152e-01, -3.115e-01, -1.745e-01, -2.303e-01) * s3[y+1][x+2];
	r += M4(-9.110e-02, 1.027e-01, -3.143e-02, 5.755e-02, -6.243e-03, -2.843e-03, -3.643e-02, -1.657e-01, 9.466e-01, -3.127e-01, -4.473e-01, 4.496e-01, -5.994e-02, 5.357e-02, 1.087e-02, -7.249e-02) * s3[y+2][x+0];
	r += M4(-7.523e-02, 7.468e-02, -4.013e-02, 7.015e-02, -2.076e-01, -1.094e-01, -1.738e-01, -1.552e-02, 1.594e-02, -5.213e-01, -3.008e-02, -3.315e-01, 4.263e-02, -2.488e-02, -3.408e-02, -2.367e-01) * s3[y+2][x+1];
	r += M4(-1.135e-01, 7.840e-03, 2.637e-03, 3.078e-03, -1.050e-01, 6.097e-02, 1.050e-01, 6.387e-02, -3.407e-03, -1.642e-01, -9.211e-02, -1.770e-02, 1.533e-02, -1.570e-01, -1.323e-01, -4.031e-01) * s3[y+2][x+2];
	r += V4(2.449e-02, 7.088e-03, 5.584e-02, -2.424e-02);
	return vec4(r);
}
vec4 f1(int x, int y) {
	V4 r = V4(0.0);
	r += M4(2.592e-01, 2.792e-01, -8.757e-02, 3.737e-01, 1.616e-01, 7.300e-02, -5.133e-02, 6.534e-02, 7.427e-02, -1.507e-03, -9.469e-02, -4.678e-03, 2.340e-01, -3.122e-02, -1.274e-01, 8.717e-02) * s0[y+0][x+0];
	r += M4(8.087e-02, 2.174e-01, -4.882e-01, 4.310e-01, 1.093e-01, 1.577e-01, -1.516e-02, -2.758e-01, 2.458e-01, 7.937e-02, -3.447e-01, -1.081e-01, 1.413e-01, -2.118e-01, -6.729e-02, -7.142e-02) * s0[y+0][x+1];
	r += M4(-1.855e-01, 2.118e-01, -1.117e-01, 7.231e-01, -9.792e-02, 2.645e-01, 8.671e-02, -1.140e-01, -2.245e-02, 9.380e-04, -7.572e-02, -9.167e-03, 1.313e-01, -4.179e-02, 1.469e-01, 1.495e-01) * s0[y+0][x+2];
	r += M4(-6.360e-02, 2.086e-01, -4.500e-01, 3.766e-01, 8.979e-03, 2.521e-01, -4.978e-02, 3.674e-02, -2.030e-01, 1.227e-01, -4.168e-02, -7.208e-02, 2.243e-01, 8.041e-02, -1.566e-01, 4.303e-02) * s0[y+1][x+0];
	r += M4(-4.878e-01, -1.248e+00, 7.632e-01, 5.527e-02, 3.263e-01, 1.848e-01, 4.798e-01, 4.332e-01, -5.459e-03, -2.114e-01, -2.068e-01, -7.880e-02, -8.282e-02, -8.403e-02, -1.653e-01, 2.526e-01) * s0[y+1][x+1];
	r += M4(2.840e-01, -3.101e-01, 5.418e-01, 8.723e-01, 2.673e-01, 4.716e-02, 1.587e-01, 2.148e-01, -7.493e-04, 4.154e-02, 4.952e-02, -7.937e-03, -5.672e-02, 1.428e-01, -2.744e-01, 1.499e-01) * s0[y+1][x+2];
	r += M4(1.800e-01, 5.126e-01, -2.984e-01, -1.734e-02, -2.741e-02, 5.317e-02, -7.396e-02, 1.230e-01, -3.887e-02, 5.045e-02, -9.238e-03, -7.983e-02, -8.858e-02, 2.713e-02, 5.422e-02, -5.707e-02) * s0[y+2][x+0];
	r += M4(1.204e-01, -1.993e-02, 2.384e-01, -3.174e-02, -9.039e-02, 1.089e-01, 1.616e-01, -1.176e-01, -1.194e-01, 6.449e-02, 1.088e-01, -1.345e-01, 4.141e-02, -5.139e-02, -1.081e-01, -8.409e-02) * s0[y+2][x+1];
	r += M4(8.261e-02, 2.647e-01, 2.842e-02, -9.028e-02, -1.555e-01, 9.331e-02, 4.322e-02, -3.236e-02, 1.180e-01, 4.112e-02, 5.784e-02, 3.554e-02, 9.988e-02, 1.057e-02, -4.495e-02, 5.869e-03) * s0[y+2][x+2];
	r += M4(5.552e-02, 6.664e-02, -2.008e-03, 1.605e-02, 7.208e-02, -3.040e-02, -9.638e-02, -3.869e-02, -4.135e-02, 3.133e-01, 8.520e-02, -1.392e-01, -5.576e-02, 2.763e-02, -6.961e-02, -7.810e-02) * s1[y+0][x+0];
	r += M4(2.982e-02, 2.244e-02, -6.386e-02, -5.952e-03, -3.022e-02, 7.231e-02, 3.281e-03, -1.573e-01, 3.161e-01, 2.234e-01, -1.750e-01, 4.262e-02, -6.838e-02, 1.295e-01, 2.071e-01, -4.178e-01) * s1[y+0][x+1];
	r += M4(-8.623e-02, -8.035e-02, -3.273e-02, 8.072e-03, 8.818e-02, 1.230e-01, 4.618e-02, -5.152e-03, 1.430e-01, 6.379e-02, -6.739e-02, 7.034e-02, 1.737e-01, 1.606e-01, 2.378e-01, -2.642e-01) * s1[y+0][x+2];
	r += M4(-7.226e-03, -5.895e-02, -7.366e-02, 2.210e-02, -7.957e-02, -4.370e-03, 1.912e-04, -1.874e-02, -3.726e-01, 3.762e-01, 9.711e-02, -1.394e-01, 1.214e-01, 7.283e-02, 3.011e-04, -4.055e-02) * s1[y+1][x+0];
	r += M4(-5.115e-02, -1.510e-01, -7.854e-02, 2.987e-02, 7.857e-02, -7.735e-02, 1.657e-01, -3.193e-01, 2.049e-02, 4.408e-02, 1.773e-01, -1.427e-02, -2.659e-01, 2.433e-01, 3.212e-01, -2.442e-02) * s1[y+1][x+1];
	r += M4(3.862e-02, -1.100e-02, 9.151e-02, 1.008e-01, -8.081e-02, -3.486e-02, -5.786e-02, 2.285e-02, 5.824e-02, 8.082e-02, 2.356e-02, 3.033e-02, -6.161e-02, 2.397e-01, -5.922e-02, 6.467e-02) * s1[y+1][x+2];
	r += M4(-4.260e-02, 1.220e-02, 2.464e-02, -8.287e-03, -6.326e-02, 7.854e-02, 7.818e-02, 6.878e-02, -1.725e-01, 1.169e-01, 1.274e-01, 3.450e-02, -2.364e-02, 4.019e-03, 3.473e-02, 5.333e-02) * s1[y+2][x+0];
	r += M4(-7.203e-02, -3.298e-02, -2.727e-02, -1.489e-01, -9.547e-02, 3.802e-02, 5.655e-02, -5.190e-02, -1.311e-01, 1.596e-01, 1.557e-01, 3.553e-02, 9.432e-03, -4.844e-02, 4.770e-02, 1.408e-01) * s1[y+2][x+1];
	r += M4(5.641e-02, 5.348e-02, -1.901e-02, -6.554e-02, 6.744e-02, 4.756e-02, -2.264e-02, 3.567e-02, 7.914e-02, 9.044e-02, -4.257e-02, 6.663e-02, 7.265e-02, 7.079e-03, -1.076e-01, 1.703e-01) * s1[y+2][x+2];
	r += M4(-1.806e-01, 4.468e-02, 1.051e-01, -2.655e-03, 5.529e-02, 3.391e-02, -1.566e-01, 8.818e-02, -1.440e-02, -6.514e-02, 7.153e-02, 4.300e-02, 1.715e-02, 5.198e-02, -6.792e-02, -5.754e-02) * s2[y+0][x+0];
	r += M4(-5.013e-02, 1.081e-01, 6.981e-02, -6.470e-02, -2.002e-01, -5.711e-02, 1.731e-01, 4.853e-02, 5.763e-02, -3.398e-02, 2.125e-01, -1.671e-02, 8.994e-02, 8.649e-02, -1.196e-01, 1.018e-01) * s2[y+0][x+1];
	r += M4(1.544e-02, -6.015e-02, 1.340e-01, 1.606e-02, 4.400e-02, 1.655e-01, 8.928e-02, -2.081e-01, 8.673e-03, -6.489e-02, -6.014e-02, -2.035e-02, 1.387e-01, 1.323e-01, 6.031e-03, 7.921e-03) * s2[y+0][x+2];
	r += M4(5.044e-02, 2.076e-01, 3.756e-02, -1.065e-02, -7.418e-02, 2.260e-01, 1.384e-01, 6.425e-02, 2.005e-01, 4.170e-02, -4.725e-02, -2.479e-02, -9.082e-02, 1.636e-01, 7.625e-02, 1.101e-01) * s2[y+1][x+0];
	r += M4(-7.939e-02, 6.224e-02, 1.763e-01, -1.206e-02, -1.380e-01, 3.863e-01, 3.828e-01, -8.154e-02, -5.139e-03, -1.418e-01, -1.045e-01, 1.206e-01, 1.895e-02, 1.339e-01, -2.349e-01, 4.039e-01) * s2[y+1][x+1];
	r += M4(4.364e-03, 4.840e-03, -3.888e-02, -2.001e-02, -1.805e-02, 2.084e-01, 1.816e-01, 2.880e-01, -5.452e-02, 1.260e-02, -3.145e-02, -1.009e-01, 2.251e-01, -1.810e-01, -2.723e-02, -4.914e-02) * s2[y+1][x+2];
	r += M4(4.589e-02, 1.710e-03, 7.210e-02, -3.872e-02, 5.263e-02, -6.593e-02, 5.706e-02, -2.133e-02, -1.408e-01, -6.671e-02, -3.351e-02, -7.403e-02, -9.373e-02, 1.563e-01, 1.734e-01, -4.231e-03) * s2[y+2][x+0];
	r += M4(-5.529e-02, 4.785e-03, -1.369e-01, -4.455e-02, 1.250e-01, 1.563e-01, 8.042e-02, -1.556e-01, 1.199e-01, 1.860e-01, 9.828e-02, 1.085e-01, -1.780e-01, 2.373e-01, 1.132e-01, -5.859e-02) * s2[y+2][x+1];
	r += M4(-7.342e-03, 2.170e-02, 3.584e-02, -4.906e-02, -7.614e-02, -6.094e-02, -1.533e-02, 2.144e-01, 6.564e-02, 1.678e-02, 1.975e-01, 3.210e-02, -6.930e-02, 2.467e-01, -8.135e-02, -5.208e-02) * s2[y+2][x+2];
	r += M4(2.192e-01, -6.904e-02, -5.286e-02, -3.562e-03, 4.521e-02, -6.601e-02, 1.103e-02, 1.774e-01, -9.934e-03, 3.063e-01, -5.644e-02, -1.368e-01, -6.241e-02, -2.366e-02, -1.082e-01, 1.887e-02) * s3[y+0][x+0];
	r += M4(2.495e-01, -4.170e-01, -2.663e-01, 3.019e-01, 8.506e-02, 1.271e-02, 3.677e-02, -2.290e-01, 5.229e-03, -5.930e-02, 3.281e-01, 5.003e-02, -1.733e-02, -1.686e-02, 5.010e-02, -1.215e-01) * s3[y+0][x+1];
	r += M4(1.991e-02, -6.950e-02, -1.998e-01, -8.000e-02, 1.741e-01, 1.240e-01, -1.111e-02, 4.817e-02, -1.469e-01, -1.775e-01, -1.156e-01, 3.145e-03, -8.407e-02, -1.266e-01, 7.394e-02, -4.208e-02) * s3[y+0][x+2];
	r += M4(8.728e-02, 2.281e-01, -1.088e-01, -2.410e-01, -2.823e-02, 9.546e-02, -1.227e-02, 7.211e-02, -1.563e-01, -7.635e-01, 8.170e-02, 2.561e-01, -3.798e-02, -2.457e-02, -3.399e-03, 9.268e-02) * s3[y+1][x+0];
	r += M4(-5.547e-02, 6.023e-02, -1.411e-01, -1.958e-01, 1.194e-01, -3.389e-01, -2.586e-01, 2.470e-02, -1.210e-01, -2.562e-01, 2.443e-02, 1.997e-01, -1.815e-01, 4.262e-02, 9.114e-02, 8.149e-02) * s3[y+1][x+1];
	r += M4(1.410e-01, -1.077e-01, 3.310e-02, -2.855e-02, 1.112e-01, 3.972e-02, 5.087e-02, 1.049e-01, 5.850e-02, -1.435e-02, 1.345e-02, 1.370e-01, 1.362e-02, -2.454e-01, 2.358e-01, -2.751e-01) * s3[y+1][x+2];
	r += M4(-9.218e-02, -9.866e-03, 8.280e-02, 1.125e-02, -1.223e-01, 6.041e-02, 4.561e-04, -1.239e-01, -2.391e-01, -9.040e-01, -7.278e-01, -1.068e-01, -1.024e-01, -9.174e-04, 4.315e-02, 6.808e-02) * s3[y+2][x+0];
	r += M4(6.465e-03, 1.029e-01, -2.485e-02, -5.909e-02, 1.289e-01, 3.356e-02, 2.106e-02, -4.541e-02, -9.967e-01, 5.253e-02, 1.721e-01, -1.919e-01, -1.305e-01, 4.541e-02, 5.982e-02, -3.091e-02) * s3[y+2][x+1];
	r += M4(-3.526e-02, 1.788e-01, 2.856e-02, 1.617e-03, -9.991e-03, -6.705e-03, -4.151e-02, -9.264e-03, 1.062e-01, 8.847e-02, 1.070e-01, -8.263e-03, -2.437e-01, 5.205e-02, 2.815e-02, -7.920e-02) * s3[y+2][x+2];
	r += V4(-3.641e-02, -2.099e-02, -3.007e-02, -3.034e-02);
	return vec4(r);
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv1_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
			s2[ay][ax] = l1(x - 1, y - 1);
			s1[ay][ax] = -max(-s0[ay][ax], V4(0.0));
			s0[ay][ax] = max(s0[ay][ax], V4(0.0));
			s3[ay][ax] = -max(-s2[ay][ax], V4(0.0));
			s2[ay][ax] = max(s2[ay][ax], V4(0.0));
		}
	}
	barrier();
	vec4 r0 = f0(xy.x, xy.y);
	vec4 r1 = f1(xy.x, xy.y);
	imageStore(out_image, opos + ivec2(0, 0), r0);
	imageStore(out_image, opos + ivec2(1, 0), r1);
}

//!DESC CuNNy-4x8C-DS-conv3
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv2
//!BIND LUMA
//!SAVE conv3
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(texelFetch(conv2_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv2_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 s0[10][10];
shared V4 s1[10][10];
shared V4 s2[10][10];
shared V4 s3[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-8.871e-02, -9.682e-03, -1.365e-01, 2.957e-02, 7.318e-02, 6.471e-02, -2.610e-02, 1.941e-02, -6.464e-02, -2.017e-02, 1.091e-02, -2.807e-02, 6.512e-03, 4.806e-03, 6.264e-02, 4.698e-03) * s0[y+0][x+0];
	r += M4(-1.461e-01, -7.165e-02, -2.999e-01, -3.555e-02, -3.924e-03, -3.095e-02, -5.566e-02, 3.124e-02, 3.038e-02, 1.126e-01, 2.484e-02, -2.913e-02, -1.975e-02, 5.959e-02, -1.506e-02, -1.353e-01) * s0[y+0][x+1];
	r += M4(8.898e-02, -1.460e-01, -2.936e-02, 7.892e-02, 7.005e-02, -5.621e-02, -7.624e-02, -8.879e-02, -1.393e-02, 1.194e-02, -4.105e-02, -8.445e-02, 1.290e-02, -4.981e-02, -1.792e-02, 6.078e-02) * s0[y+0][x+2];
	r += M4(1.717e-01, 2.282e-01, 5.905e-02, -1.046e-01, 1.124e-01, 1.130e-01, 4.209e-02, 5.898e-02, 6.279e-02, -2.150e-02, 3.872e-02, -1.527e-01, -1.740e-02, 1.271e-02, 1.443e-02, 4.223e-02) * s0[y+1][x+0];
	r += M4(2.827e-01, -2.893e-03, -1.379e-01, -2.569e-01, -2.752e-04, -2.992e-01, -2.341e-01, -5.419e-02, 4.553e-02, 7.940e-02, 5.729e-03, 1.558e-01, -6.227e-02, 2.000e-01, -3.073e-02, -6.202e-02) * s0[y+1][x+1];
	r += M4(1.476e-01, -1.885e-01, -1.261e-01, 2.191e-01, 1.838e-01, -2.604e-02, 2.215e-01, 9.588e-02, -6.556e-02, -1.039e-01, -2.858e-01, 2.726e-01, 1.603e-02, -6.421e-02, 5.121e-02, 2.587e-02) * s0[y+1][x+2];
	r += M4(-8.465e-02, 7.736e-02, 2.264e-02, -6.185e-02, 4.585e-02, 4.066e-02, 7.253e-02, 1.330e-02, -1.163e-01, -6.520e-02, 3.271e-04, -8.983e-02, 4.219e-02, 3.964e-02, -1.740e-02, 4.832e-03) * s0[y+2][x+0];
	r += M4(7.870e-02, 3.127e-01, -6.669e-02, -1.928e-01, 2.075e-01, -2.187e-02, -1.022e-01, -1.029e-01, -2.125e-01, 5.132e-02, 1.783e-01, 1.004e-01, 9.335e-02, 6.381e-02, -5.678e-02, 3.696e-02) * s0[y+2][x+1];
	r += M4(1.073e-01, -9.745e-03, -6.873e-02, -6.362e-02, 1.028e-01, -4.287e-02, 3.845e-02, 3.137e-02, -1.652e-01, -3.771e-02, -5.122e-02, 4.922e-02, 7.789e-02, 8.549e-02, 3.232e-02, 1.898e-02) * s0[y+2][x+2];
	r += M4(3.186e-02, 2.907e-02, -9.544e-02, 4.432e-02, 3.940e-02, 8.348e-02, 3.069e-03, 2.203e-01, -7.923e-02, 7.568e-02, 1.606e-01, 2.958e-01, -1.099e-01, -2.477e-01, -7.530e-02, 1.034e-01) * s1[y+0][x+0];
	r += M4(-1.085e-01, 3.477e-02, -1.644e-01, -7.534e-02, -1.408e-02, -5.475e-02, -7.826e-02, 6.846e-02, -1.827e-01, 3.111e-01, 3.873e-02, -4.549e-01, -2.440e-01, -1.563e-01, -2.100e-01, -2.473e-02) * s1[y+0][x+1];
	r += M4(3.954e-02, 1.741e-02, -4.892e-03, -1.367e-01, 1.113e-01, -2.466e-02, 4.893e-02, -3.940e-02, -2.282e-01, 1.086e-01, -1.530e-01, -2.529e-01, -2.140e-01, -1.929e-01, -9.413e-02, 1.689e-01) * s1[y+0][x+2];
	r += M4(2.518e-01, 3.226e-01, 1.488e-01, -8.489e-02, -9.593e-02, -7.636e-02, -1.124e-01, 4.505e-01, -2.956e-01, -2.345e-01, 1.361e-01, 3.276e-01, -9.411e-02, -1.318e-01, -1.325e-01, 1.774e-01) * s1[y+1][x+0];
	r += M4(3.409e-01, 1.238e-01, 1.160e-01, -2.312e-01, -4.124e-01, -6.509e-01, -1.512e-01, 2.094e-01, -2.514e-01, 3.848e-01, -4.704e-01, 2.469e-02, -8.589e-02, 1.422e-01, -5.775e-02, -1.150e-01) * s1[y+1][x+1];
	r += M4(1.363e-01, -2.838e-03, -2.478e-02, 1.636e-01, 5.861e-02, 2.478e-01, 1.343e-01, -6.422e-02, -2.088e-01, -2.501e-01, -2.387e-01, -1.494e-01, -1.943e-01, -2.284e-01, -6.163e-02, 2.269e-01) * s1[y+1][x+2];
	r += M4(2.769e-03, 3.975e-02, -7.392e-03, 1.918e-02, -6.277e-02, -1.776e-01, -4.247e-03, 7.806e-02, 7.102e-02, -4.896e-02, 3.212e-01, -2.353e-01, -2.840e-02, -1.088e-01, -1.360e-01, 1.177e-01) * s1[y+2][x+0];
	r += M4(-1.668e-01, 1.389e-01, 3.628e-02, 9.521e-02, -2.796e-02, -2.713e-01, -1.736e-01, -5.959e-02, 4.447e-01, 3.433e-01, 3.557e-01, -2.357e-01, -2.050e-01, -2.116e-01, -2.391e-01, 3.379e-01) * s1[y+2][x+1];
	r += M4(-5.682e-03, -2.083e-02, -6.068e-02, 4.957e-02, 1.044e-01, 8.289e-02, 8.562e-02, -1.553e-03, 3.239e-03, 1.706e-01, 1.653e-01, -1.585e-01, -6.722e-02, -7.762e-02, -1.176e-01, -5.143e-02) * s1[y+2][x+2];
	r += M4(-5.550e-02, -7.311e-02, -3.673e-02, -1.076e-01, -7.445e-02, -4.334e-02, 1.464e-02, 6.232e-02, 1.652e-01, 9.694e-02, -2.781e-03, 7.175e-02, -4.530e-02, 1.804e-02, -7.985e-02, -2.146e-02) * s2[y+0][x+0];
	r += M4(1.062e-01, -1.506e-01, 4.386e-02, -6.025e-02, -4.760e-02, 7.643e-02, 4.757e-02, -7.509e-02, 1.094e-01, 2.956e-02, 5.542e-02, -3.801e-02, -6.692e-02, 7.193e-02, 1.130e-02, 2.857e-02) * s2[y+0][x+1];
	r += M4(4.065e-02, 2.606e-02, 1.830e-02, 7.276e-02, -3.630e-02, 3.774e-02, 8.817e-03, -2.481e-03, 4.313e-03, -1.861e-02, -6.107e-03, 1.778e-02, 7.645e-02, -2.579e-02, 1.125e-01, -4.177e-02) * s2[y+0][x+2];
	r += M4(2.153e-02, -1.201e-01, -1.361e-01, -5.223e-03, 8.996e-02, 1.199e-01, -3.966e-02, 1.554e-02, 1.116e-01, 6.949e-02, 1.162e-01, 2.656e-01, 1.569e-01, 2.457e-01, 5.441e-02, -2.939e-01) * s2[y+1][x+0];
	r += M4(9.516e-02, -2.328e-01, 3.122e-02, 4.403e-01, 1.470e-02, 1.027e-01, -8.925e-02, -3.730e-01, -1.100e-01, -1.788e-01, -1.406e-02, 2.644e-01, 1.087e-01, -1.221e-01, -2.255e-01, 7.736e-02) * s2[y+1][x+1];
	r += M4(-1.820e-01, -3.719e-02, -1.213e-01, -1.846e-02, -1.313e-01, 9.800e-02, -4.202e-02, -8.272e-02, -3.867e-02, -3.715e-02, 1.267e-02, 2.317e-02, 6.258e-02, 1.631e-01, 1.812e-01, -2.529e-01) * s2[y+1][x+2];
	r += M4(1.432e-02, -8.101e-02, 3.123e-06, -2.667e-02, -1.072e-02, 1.004e-01, -5.616e-02, -3.859e-04, -9.559e-02, -6.756e-03, -4.115e-02, 1.023e-01, -8.656e-02, 2.115e-02, -2.822e-02, -4.135e-02) * s2[y+2][x+0];
	r += M4(-1.584e-01, -1.037e-01, 3.300e-03, 1.176e-01, 2.793e-01, 1.913e-01, 3.708e-02, -2.253e-01, -2.885e-01, -2.151e-01, -1.059e-01, 2.108e-01, 4.938e-02, 3.090e-02, -6.967e-02, -3.010e-02) * s2[y+2][x+1];
	r += M4(1.168e-03, -6.649e-02, -3.678e-02, -1.188e-01, 9.189e-02, 4.908e-03, -6.649e-02, -3.237e-02, -4.547e-02, -1.173e-01, -2.176e-02, -2.804e-02, -6.774e-02, -5.880e-03, -4.775e-02, 1.090e-02) * s2[y+2][x+2];
	r += M4(-2.596e-02, 1.020e-01, -5.375e-02, -2.370e-02, -4.303e-03, -7.690e-02, -6.563e-04, -1.814e-01, 2.581e-02, -7.720e-02, -7.354e-02, -3.622e-02, -1.147e-01, -1.752e-01, -1.314e-01, 4.759e-02) * s3[y+0][x+0];
	r += M4(1.212e-01, 1.573e-01, 6.741e-02, -1.854e-01, 1.121e-01, 1.559e-01, 1.090e-01, 2.189e-02, 2.887e-02, -2.787e-02, 5.073e-03, -1.786e-01, -2.178e-01, -2.111e-01, -2.255e-01, 5.090e-01) * s3[y+0][x+1];
	r += M4(9.142e-02, -4.680e-03, -3.990e-02, -5.711e-03, -1.390e-02, 4.335e-02, 1.565e-01, -2.898e-02, 3.729e-02, -2.770e-02, -1.922e-02, -3.226e-02, -1.597e-01, 3.800e-02, -1.717e-01, -8.404e-02) * s3[y+0][x+2];
	r += M4(6.311e-02, 1.924e-01, 7.092e-02, 4.284e-02, -1.010e-01, 6.537e-02, -2.948e-02, 1.438e-01, 4.243e-02, -1.495e-03, 1.865e-01, -1.186e-01, -2.314e-02, 2.625e-01, -7.883e-02, -6.250e-02) * s3[y+1][x+0];
	r += M4(1.225e-01, 9.426e-02, 4.724e-02, 2.171e-01, -3.623e-01, -2.480e-01, -1.421e-01, -1.028e-01, 2.646e-01, -1.086e-01, 2.783e-01, -6.987e-02, -1.034e-02, -3.790e-01, -1.386e-01, 2.341e-01) * s3[y+1][x+1];
	r += M4(-3.877e-03, 3.787e-03, -7.558e-02, -2.964e-02, -7.191e-02, 4.510e-02, 9.857e-03, -1.171e-01, 8.869e-02, 5.480e-02, 8.519e-02, -6.132e-02, 2.930e-02, 1.773e-01, 2.322e-02, -1.376e-01) * s3[y+1][x+2];
	r += M4(-3.054e-02, 1.668e-01, 2.856e-02, -1.026e-02, 5.186e-02, 1.045e-01, -7.969e-02, -5.573e-02, 5.340e-02, 2.336e-02, 1.679e-02, -1.277e-01, -6.327e-02, 2.899e-02, -4.051e-02, 6.836e-02) * s3[y+2][x+0];
	r += M4(1.408e-03, 1.753e-01, 8.346e-02, -3.626e-02, 1.184e-01, 1.790e-01, -1.028e-02, -1.547e-01, 1.542e-01, -2.549e-02, -1.612e-02, 3.452e-02, -2.798e-02, -1.304e-01, -3.916e-02, -3.905e-03) * s3[y+2][x+1];
	r += M4(1.616e-01, -2.415e-02, -5.690e-02, -1.295e-01, -8.970e-02, -1.450e-01, 2.718e-02, 1.907e-01, 1.558e-01, -8.777e-04, 4.333e-02, 1.548e-01, -5.745e-02, 1.993e-02, -9.758e-02, 3.729e-02) * s3[y+2][x+2];
	r += V4(4.747e-03, 2.186e-02, 3.836e-03, -1.563e-02);
	return vec4(r);
}
vec4 f1(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-2.420e-02, 3.008e-02, -2.043e-01, 8.755e-02, 2.707e-02, 1.194e-01, -1.744e-01, -8.976e-02, 1.205e-01, 3.788e-02, -1.381e-01, 8.660e-02, -7.417e-02, -2.669e-02, -9.899e-02, 1.549e-02) * s0[y+0][x+0];
	r += M4(2.994e-02, 3.126e-02, 1.311e-01, 1.608e-01, -4.256e-02, 8.441e-02, -1.458e-01, 1.332e-01, 1.837e-01, -1.481e-01, -7.152e-02, -6.521e-02, -3.913e-02, -1.825e-02, -2.197e-02, -7.590e-02) * s0[y+0][x+1];
	r += M4(1.018e-01, -4.754e-02, 1.521e-01, 2.311e-01, -1.517e-02, -1.170e-01, 8.306e-02, -3.397e-02, 2.913e-02, -1.681e-01, 7.450e-02, 3.528e-02, 3.449e-02, 1.988e-03, 1.733e-02, 7.153e-02) * s0[y+0][x+2];
	r += M4(2.062e-01, 1.144e-01, -1.579e-01, -2.204e-01, 4.441e-02, 9.716e-02, -2.019e-01, -2.607e-01, -4.417e-02, -4.589e-02, 5.407e-02, 5.192e-02, 1.003e-01, 8.165e-02, -3.309e-02, -1.677e-01) * s0[y+1][x+0];
	r += M4(2.084e-01, 8.239e-02, -3.110e-01, 2.454e-01, -2.014e-01, -3.919e-03, 3.165e-03, 2.454e-01, -1.467e-01, 3.619e-02, -1.623e-02, -1.213e-01, 4.769e-01, -3.517e-04, -1.992e-01, 7.077e-02) * s0[y+1][x+1];
	r += M4(1.389e-01, -2.240e-03, 4.578e-02, -2.767e-02, 1.289e-01, 2.474e-02, -9.302e-02, -2.316e-01, -2.161e-01, 2.621e-02, -6.534e-02, -1.773e-01, 8.378e-02, 5.202e-02, -5.562e-02, -4.775e-02) * s0[y+1][x+2];
	r += M4(-2.717e-03, -1.131e-01, 1.681e-02, 1.218e-01, -9.593e-02, -3.836e-02, 6.862e-02, -8.461e-02, 2.564e-02, -7.838e-02, 1.195e-01, 5.493e-02, -2.620e-02, -2.749e-02, -5.799e-02, 6.250e-02) * s0[y+2][x+0];
	r += M4(9.701e-02, -2.303e-02, -1.672e-01, -1.438e-01, -3.308e-02, -2.017e-03, -7.157e-02, -7.104e-02, 1.428e-01, -4.631e-02, 3.964e-02, 1.451e-01, -7.998e-02, -2.650e-02, -4.637e-04, -5.530e-02) * s0[y+2][x+1];
	r += M4(-4.609e-03, -2.693e-02, -3.700e-02, -1.272e-01, 2.091e-02, 1.406e-02, 7.444e-02, 5.376e-02, -4.439e-02, 3.368e-02, 3.583e-02, -3.829e-01, -5.188e-02, 3.283e-02, -4.023e-02, 9.470e-03) * s0[y+2][x+2];
	r += M4(-9.376e-02, 1.195e-01, -1.861e-01, -7.759e-02, -5.806e-03, 1.272e-01, 1.236e-02, -1.362e-01, -2.561e-01, -1.225e-01, 1.045e-01, -1.867e-01, 5.597e-02, 5.154e-02, 1.655e-01, 7.235e-02) * s1[y+0][x+0];
	r += M4(-1.238e-01, 3.238e-01, 8.978e-02, -8.005e-02, -4.306e-02, 3.317e-01, 1.562e-01, -2.198e-02, -3.508e-01, 9.598e-02, 2.319e-02, -3.060e-01, 2.193e-01, -4.277e-02, -9.776e-02, 2.971e-01) * s1[y+0][x+1];
	r += M4(3.472e-02, -2.054e-02, 2.939e-02, -3.800e-02, -4.132e-02, -6.282e-04, -1.104e-01, 5.242e-02, -5.488e-01, 6.694e-02, -9.551e-02, 3.696e-02, 2.044e-01, 1.052e-01, 2.099e-01, 1.106e-01) * s1[y+0][x+2];
	r += M4(8.493e-02, 5.982e-02, -2.253e-01, -2.214e-01, 5.240e-02, 1.540e-01, 3.615e-02, -1.323e-01, -6.107e-01, 1.103e-01, -3.160e-01, -3.513e-02, 2.863e-01, 1.100e-01, 1.633e-01, 5.053e-03) * s1[y+1][x+0];
	r += M4(-5.618e-02, -1.428e-01, -1.874e-01, -1.120e-02, -1.376e-01, 1.721e-01, 3.997e-01, 7.322e-01, -6.462e-01, -3.049e-01, 2.489e-01, 1.955e-01, 3.675e-01, -9.332e-02, -5.862e-04, 1.429e-01) * s1[y+1][x+1];
	r += M4(8.734e-03, 8.029e-02, -3.012e-02, 3.535e-04, 1.218e-01, -5.509e-02, -1.842e-01, -1.567e-01, -1.051e+00, 1.257e-01, -4.775e-02, -5.307e-02, 2.536e-01, 1.612e-01, 1.475e-01, 2.044e-01) * s1[y+1][x+2];
	r += M4(-5.838e-02, -7.790e-02, 8.289e-02, 3.825e-02, -9.611e-03, 8.934e-02, 7.791e-02, 1.528e-03, -1.581e-01, -3.560e-02, -3.062e-02, -7.908e-02, 8.555e-02, 6.072e-02, -2.516e-02, 1.185e-01) * s1[y+2][x+0];
	r += M4(1.342e-01, 9.919e-02, -2.034e-02, -9.875e-02, 8.421e-02, 5.391e-03, -1.333e-01, 2.005e-01, -1.420e-01, -4.913e-01, 1.777e-02, 7.740e-02, 1.842e-01, 1.593e-02, 1.225e-01, 2.653e-01) * s1[y+2][x+1];
	r += M4(-1.357e-01, 1.614e-02, 8.911e-02, -3.235e-02, -2.166e-02, 1.050e-02, 2.993e-02, 1.291e-02, -4.354e-01, -1.935e-02, -2.865e-01, -4.667e-01, 1.224e-01, -9.662e-02, 4.939e-02, 1.393e-01) * s1[y+2][x+2];
	r += M4(-1.020e-01, -4.130e-02, 2.019e-01, 7.136e-02, -3.869e-02, 4.012e-03, 4.606e-02, -1.221e-03, -2.063e-02, -2.381e-02, 2.052e-02, -1.408e-01, 8.500e-03, -2.275e-02, 6.071e-02, 2.148e-02) * s2[y+0][x+0];
	r += M4(-4.514e-03, -1.253e-01, 2.397e-01, 1.036e-01, 5.452e-02, 3.649e-02, -1.929e-01, -1.275e-01, -4.971e-02, -3.646e-02, 1.996e-02, 1.743e-04, 3.868e-02, -7.329e-02, 1.282e-01, -4.877e-02) * s2[y+0][x+1];
	r += M4(1.892e-02, -7.318e-02, -5.556e-02, -9.450e-03, 4.885e-02, 2.595e-02, -9.348e-02, 2.577e-02, -4.010e-02, 7.487e-02, 1.551e-02, -2.667e-02, -9.009e-02, 5.975e-02, -2.496e-02, 1.339e-02) * s2[y+0][x+2];
	r += M4(3.352e-02, -7.419e-03, 7.936e-02, 5.800e-02, -3.676e-02, -6.751e-02, -4.491e-02, -2.512e-03, 1.572e-01, 1.364e-01, -1.285e-01, -3.497e-01, 7.947e-02, -9.369e-02, -1.198e-01, -3.246e-02) * s2[y+1][x+0];
	r += M4(2.011e-01, 1.688e-01, -4.115e-02, -5.163e-02, -2.163e-01, -3.564e-02, -1.020e-01, -7.869e-02, -2.981e-03, 3.237e-02, 1.576e-01, -7.038e-02, -2.152e-01, -1.625e-01, 1.764e-01, -5.900e-02) * s2[y+1][x+1];
	r += M4(-1.228e-01, 2.086e-03, 2.107e-01, 9.907e-02, 3.703e-02, 8.198e-02, 1.085e-01, 2.207e-01, -3.737e-02, -5.415e-02, -3.195e-02, -7.253e-02, 1.047e-01, -2.126e-02, -4.244e-02, -6.542e-02) * s2[y+1][x+2];
	r += M4(6.009e-03, 2.762e-02, -6.425e-02, 1.289e-02, 8.787e-02, -2.338e-02, -1.269e-02, 1.814e-02, 5.918e-02, -1.112e-01, 3.497e-02, 2.538e-02, 9.421e-02, -6.076e-02, 5.467e-02, 9.100e-02) * s2[y+2][x+0];
	r += M4(1.100e-02, -1.015e-01, 1.071e-01, 1.449e-01, -1.997e-01, 8.378e-02, 1.003e-01, -3.224e-01, 7.307e-02, -1.194e-01, 1.250e-01, 1.096e-01, -7.363e-02, 5.404e-02, 1.196e-02, -1.450e-01) * s2[y+2][x+1];
	r += M4(-9.857e-03, -7.766e-02, 1.341e-02, 1.767e-02, 6.075e-02, -6.639e-02, -1.937e-02, 2.165e-01, -4.440e-02, 5.823e-02, -1.757e-02, -5.113e-02, -3.294e-02, -6.060e-02, 4.371e-02, 1.090e-01) * s2[y+2][x+2];
	r += M4(-9.870e-03, -4.653e-02, 8.572e-02, -1.543e-02, -6.357e-02, -9.363e-02, 1.063e-01, 1.304e-01, 1.187e-02, -4.447e-03, -3.310e-02, 6.482e-02, 9.458e-02, 1.135e-01, 2.379e-01, 7.885e-02) * s3[y+0][x+0];
	r += M4(-2.869e-02, -1.077e-01, 1.412e-02, -5.179e-03, 1.471e-01, -1.630e-01, 1.398e-01, -2.356e-02, -2.468e-02, -5.216e-01, -8.276e-02, 7.152e-02, 2.424e-01, 1.808e-01, 5.332e-01, 7.601e-02) * s3[y+0][x+1];
	r += M4(-1.117e-01, -2.040e-02, 5.276e-02, -1.033e-02, -7.494e-03, 1.238e-01, 7.342e-02, -2.495e-03, 1.258e-02, -7.698e-02, -9.886e-03, 2.034e-02, 1.284e-01, -9.347e-02, 1.778e-01, -1.210e-01) * s3[y+0][x+2];
	r += M4(1.885e-02, 2.619e-02, -1.664e-01, -4.164e-02, 6.192e-02, -1.812e-02, 1.731e-01, -4.712e-02, 1.171e-01, -1.323e-01, -5.949e-02, -1.354e-02, 9.278e-02, 3.326e-02, -1.683e-01, -3.784e-02) * s3[y+1][x+0];
	r += M4(7.204e-02, 4.501e-02, -2.184e-01, -2.670e-01, -1.555e-02, 3.472e-01, 2.074e-01, 1.634e-01, -8.302e-02, -1.808e-01, 3.216e-02, -2.715e-01, -1.408e-01, -9.414e-03, 1.557e-01, 2.021e-01) * s3[y+1][x+1];
	r += M4(-1.955e-01, 9.100e-02, -2.338e-02, -2.090e-01, 1.116e-01, -1.952e-01, 2.027e-01, 2.255e-01, 9.991e-03, -4.160e-02, -9.254e-02, -5.673e-02, 2.250e-01, -3.490e-02, 2.334e-02, 2.841e-01) * s3[y+1][x+2];
	r += M4(1.117e-01, 3.160e-02, -1.441e-01, -3.421e-02, 2.288e-02, -5.622e-03, -1.525e-01, -3.304e-02, 4.966e-02, -5.271e-02, -3.633e-02, 8.310e-02, 1.792e-01, -4.179e-02, 5.008e-02, 1.048e-01) * s3[y+2][x+0];
	r += M4(-1.087e-01, 5.435e-02, 6.399e-02, -1.962e-01, 4.391e-02, 1.760e-03, -3.745e-03, 6.325e-02, -8.587e-02, -4.348e-02, -3.787e-03, 2.154e-02, -4.018e-02, 1.375e-01, 6.028e-02, -1.568e-01) * s3[y+2][x+1];
	r += M4(-5.898e-02, -1.812e-02, -1.021e-01, -5.345e-02, -5.603e-02, 2.521e-02, 8.468e-02, 1.131e-01, 2.055e-02, 7.391e-02, -5.372e-02, -6.801e-02, 7.912e-02, -1.440e-01, 1.566e-01, 1.493e-01) * s3[y+2][x+2];
	r += V4(1.052e-02, -1.035e-02, 3.884e-03, 8.530e-03);
	return vec4(r);
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv2_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
			s2[ay][ax] = l1(x - 1, y - 1);
			s1[ay][ax] = -max(-s0[ay][ax], V4(0.0));
			s0[ay][ax] = max(s0[ay][ax], V4(0.0));
			s3[ay][ax] = -max(-s2[ay][ax], V4(0.0));
			s2[ay][ax] = max(s2[ay][ax], V4(0.0));
		}
	}
	barrier();
	vec4 r0 = f0(xy.x, xy.y);
	vec4 r1 = f1(xy.x, xy.y);
	imageStore(out_image, opos + ivec2(0, 0), r0);
	imageStore(out_image, opos + ivec2(1, 0), r1);
}

//!DESC CuNNy-4x8C-DS-conv4
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv3
//!BIND LUMA
//!SAVE conv4
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(texelFetch(conv3_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv3_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 s0[10][10];
shared V4 s1[10][10];
shared V4 s2[10][10];
shared V4 s3[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += M4(2.660e-02, -4.247e-02, 1.089e-01, 1.244e-01, 6.344e-02, 4.982e-03, 6.285e-02, -1.779e-02, -1.590e-01, -5.248e-02, 1.248e-01, 3.285e-02, 3.482e-02, -1.736e-01, -1.198e-01, -8.651e-02) * s0[y+0][x+0];
	r += M4(-5.866e-02, 5.538e-02, -1.303e-01, 2.652e-02, 1.802e-01, -7.172e-02, -2.451e-02, -6.342e-02, -7.090e-02, -2.340e-01, -2.164e-01, -4.170e-02, -6.809e-03, 2.206e-01, 1.256e-01, 1.581e-02) * s0[y+0][x+1];
	r += M4(1.661e-02, -4.122e-02, 2.565e-02, 2.905e-02, -2.954e-02, 9.924e-02, -3.877e-02, 2.826e-02, -1.149e-01, -4.688e-02, -6.569e-03, -7.976e-02, -5.818e-02, -6.878e-02, 5.127e-02, 5.597e-03) * s0[y+0][x+2];
	r += M4(-2.870e-02, -1.946e-04, 1.535e-01, 1.601e-01, -1.036e-01, 1.613e-02, 3.611e-02, 2.415e-02, -1.432e-01, -2.748e-02, 1.868e-01, 1.166e-01, -1.269e-02, -1.352e-01, 1.724e-01, -4.773e-03) * s0[y+1][x+0];
	r += M4(1.016e-01, 3.890e-03, -1.231e-01, 2.606e-02, 8.372e-02, 5.183e-02, 2.044e-01, 7.969e-02, 1.938e-01, -3.302e-02, -2.998e-01, 8.699e-02, 1.682e-01, 4.196e-01, -4.792e-03, 2.133e-01) * s0[y+1][x+1];
	r += M4(-3.094e-02, -3.748e-03, 2.092e-02, 6.060e-02, -8.136e-02, 1.067e-01, -1.353e-01, 7.303e-02, -5.369e-03, 9.214e-03, 9.667e-02, -5.448e-02, -1.358e-01, 8.685e-02, 2.335e-01, 3.710e-02) * s0[y+1][x+2];
	r += M4(6.403e-02, -2.932e-02, -5.943e-02, 9.609e-03, -8.401e-03, -2.991e-02, 2.592e-02, 1.282e-02, -6.829e-02, 9.400e-03, 1.023e-01, 1.583e-02, 6.510e-03, -4.577e-02, 9.793e-03, -6.043e-02) * s0[y+2][x+0];
	r += M4(2.728e-02, -3.766e-02, -1.155e-04, 3.843e-02, -8.901e-02, -3.333e-02, 1.591e-02, 8.634e-02, -2.979e-01, 8.418e-02, -5.213e-02, 1.472e-01, 9.684e-02, 1.044e-03, 6.395e-02, -2.156e-01) * s0[y+2][x+1];
	r += M4(-7.788e-02, 1.599e-02, -6.490e-03, 5.935e-02, -2.135e-02, 4.317e-02, -3.110e-02, 2.735e-02, -3.591e-02, -6.015e-02, -2.884e-03, -3.631e-02, -1.308e-01, -3.394e-02, -1.086e-01, 1.082e-01) * s0[y+2][x+2];
	r += M4(5.655e-02, 1.801e-01, 1.656e-01, 6.495e-02, -6.394e-02, 1.200e-01, 1.059e-01, -2.737e-02, -5.525e-02, -3.787e-02, -4.801e-02, 4.503e-02, 2.938e-02, 2.625e-02, 2.548e-02, 2.500e-02) * s1[y+0][x+0];
	r += M4(-4.449e-03, -3.768e-02, -3.050e-02, 1.297e-01, 3.104e-01, -2.339e-01, -1.044e-01, 1.306e-01, -1.201e-01, 1.411e-01, 1.046e-01, -1.830e-02, 1.265e-01, -1.460e-02, 7.330e-02, -6.151e-03) * s1[y+0][x+1];
	r += M4(4.090e-03, 1.562e-01, 1.095e-01, 7.322e-02, -1.324e-01, -1.565e-02, -5.448e-02, -1.835e-02, 3.669e-02, 3.015e-03, 2.827e-03, -2.880e-02, -5.880e-03, 5.661e-02, -7.132e-02, -1.308e-02) * s1[y+0][x+2];
	r += M4(2.169e-02, 8.916e-04, 3.059e-01, 1.281e-01, -1.193e-01, -5.845e-03, -1.325e-01, 3.687e-02, -4.205e-03, -2.813e-02, 6.421e-02, 2.499e-02, 2.237e-02, 4.059e-03, 1.294e-01, 8.961e-02) * s1[y+1][x+0];
	r += M4(1.821e-01, 2.301e-01, -4.926e-02, -1.370e-01, -5.402e-01, -2.239e-01, 5.419e-02, 2.368e-01, -3.397e-01, 1.093e-01, -2.680e-02, 1.968e-01, -7.907e-03, 1.837e-02, 1.300e-01, 6.388e-03) * s1[y+1][x+1];
	r += M4(9.627e-02, 4.189e-02, 3.216e-02, 7.516e-02, -2.841e-01, -2.629e-02, -4.004e-02, 6.856e-02, 5.055e-02, 1.222e-02, -6.668e-02, 9.154e-02, -1.056e-01, -1.024e-02, -1.013e-01, 3.706e-02) * s1[y+1][x+2];
	r += M4(3.770e-02, -2.377e-02, -1.202e-02, 2.461e-02, -2.194e-02, 6.150e-03, -7.779e-03, 3.268e-03, 1.298e-02, -1.757e-02, 1.601e-02, -2.444e-03, 6.953e-02, -1.906e-02, -1.594e-02, -7.883e-03) * s1[y+2][x+0];
	r += M4(3.181e-02, 1.555e-03, 6.416e-02, -8.001e-02, -4.764e-02, -5.430e-02, -8.300e-02, 6.478e-02, 1.023e-01, 2.008e-02, -2.755e-02, 1.422e-02, 5.031e-02, -7.042e-02, -2.839e-02, 2.709e-02) * s1[y+2][x+1];
	r += M4(-4.296e-02, 4.126e-02, 3.262e-02, 8.686e-02, -1.402e-01, -2.604e-02, -6.299e-02, 2.189e-02, 3.040e-02, -1.874e-02, 2.044e-02, -6.493e-02, 1.153e-04, 1.713e-02, -1.677e-02, 3.111e-03) * s1[y+2][x+2];
	r += M4(6.425e-02, -4.762e-03, -3.580e-02, 1.861e-03, -1.083e-01, -5.136e-02, 1.867e-02, 3.823e-02, -3.063e-03, 1.070e-01, 2.527e-03, -6.851e-04, 5.512e-02, 2.681e-01, 4.975e-03, 5.160e-04) * s2[y+0][x+0];
	r += M4(-1.537e-01, 1.987e-01, 1.299e-01, 2.124e-01, 9.625e-03, 3.096e-02, 6.316e-02, 1.177e-01, -7.283e-02, -1.106e-01, 4.387e-02, 9.461e-02, -3.467e-01, -1.990e-02, 2.840e-01, 6.623e-02) * s2[y+0][x+1];
	r += M4(7.457e-02, -7.659e-02, -2.208e-02, 4.666e-02, -7.422e-02, 9.302e-02, -4.644e-03, -1.252e-01, -1.886e-02, 5.387e-02, -3.241e-02, -4.187e-03, -6.226e-02, 7.637e-02, -6.285e-02, -7.631e-02) * s2[y+0][x+2];
	r += M4(-1.153e-01, 3.932e-02, 9.672e-02, 1.053e-01, -2.145e-01, 1.450e-01, 1.210e-01, -1.921e-02, -3.320e-02, -1.085e-01, 1.694e-01, 1.434e-01, -1.099e-01, 4.162e-02, -5.029e-03, 2.758e-02) * s2[y+1][x+0];
	r += M4(-6.117e-01, 4.483e-02, -3.696e-02, 2.558e-01, 1.855e-01, -2.242e-01, 1.983e-01, 6.467e-01, 5.026e-02, 9.598e-02, -2.798e-01, 6.863e-02, -1.092e-01, 6.070e-02, 3.842e-01, -2.775e-01) * s2[y+1][x+1];
	r += M4(-1.316e-02, -1.078e-02, -2.692e-02, 6.222e-02, -1.859e-01, 1.538e-01, -1.046e-02, -1.135e-01, -4.767e-02, -1.071e-01, -3.596e-02, 3.756e-01, -2.213e-01, 1.198e-01, -1.404e-01, -5.406e-02) * s2[y+1][x+2];
	r += M4(2.476e-02, -2.986e-02, -3.480e-02, 4.478e-02, -1.675e-01, 7.488e-02, -2.631e-02, 9.804e-03, -1.121e-01, -1.480e-01, 1.775e-02, -1.138e-02, 4.454e-02, -1.275e-02, -1.026e-01, 1.946e-02) * s2[y+2][x+0];
	r += M4(7.649e-02, -6.933e-04, -1.074e-03, -4.046e-02, -1.952e-01, 2.017e-01, 1.364e-01, 1.152e-01, -1.967e-01, 5.142e-02, -5.707e-02, 1.111e-01, -8.785e-02, 4.077e-03, 1.204e-01, 1.005e-02) * s2[y+2][x+1];
	r += M4(-3.650e-02, 3.159e-03, 9.746e-03, 6.427e-02, -1.862e-01, -8.138e-02, -1.263e-01, 8.368e-02, -8.667e-02, -4.380e-02, 1.036e-01, -1.463e-02, -1.268e-01, 3.793e-02, -7.970e-02, -4.957e-02) * s2[y+2][x+2];
	r += M4(8.886e-02, -4.843e-02, 7.169e-02, 8.186e-02, -4.615e-02, 2.574e-02, 7.500e-02, 3.467e-02, -4.108e-03, 2.115e-02, 2.857e-02, 2.159e-02, 6.909e-02, -2.978e-02, 9.746e-02, -1.547e-02) * s3[y+0][x+0];
	r += M4(-1.058e-01, 1.296e-01, 1.949e-01, 2.853e-01, -5.988e-02, 3.455e-03, 5.319e-03, 4.263e-02, 4.852e-02, -6.544e-03, -9.372e-02, -1.160e-01, 1.053e-01, 8.946e-03, -1.646e-02, -6.274e-02) * s3[y+0][x+1];
	r += M4(2.088e-02, 1.884e-02, -7.253e-02, 6.465e-02, -2.632e-02, 7.025e-03, 6.809e-03, 1.687e-02, 2.366e-02, -3.580e-02, 2.575e-02, 5.347e-02, -1.381e-02, 4.144e-02, 3.314e-02, 2.511e-02) * s3[y+0][x+2];
	r += M4(1.021e-02, 1.199e-02, 2.069e-01, 1.997e-01, -9.106e-02, 6.694e-03, -1.081e-01, -1.878e-02, -6.993e-02, 5.151e-03, 2.393e-02, 7.782e-02, -1.323e-01, 4.724e-02, 9.232e-02, 4.964e-02) * s3[y+1][x+0];
	r += M4(-8.262e-02, 4.330e-02, 9.888e-02, 2.766e-01, 4.499e-02, 6.504e-02, 2.278e-01, 4.033e-02, -7.283e-02, 7.393e-02, 2.116e-02, 5.434e-02, 2.003e-02, 1.442e-02, -1.431e-01, -8.162e-02) * s3[y+1][x+1];
	r += M4(-3.612e-02, 8.476e-02, -2.264e-02, 3.338e-02, 4.814e-02, 1.009e-02, -2.566e-02, 2.562e-02, 6.870e-02, -1.980e-02, -5.010e-02, 5.484e-02, 5.501e-02, 2.522e-02, 2.777e-03, 1.222e-03) * s3[y+1][x+2];
	r += M4(1.583e-02, 8.655e-03, -3.627e-02, 6.756e-02, -1.511e-02, -1.010e-01, -5.114e-02, -2.980e-02, 5.731e-02, 1.107e-02, -4.470e-02, 1.967e-03, 4.748e-02, -3.692e-02, -6.030e-02, -2.060e-02) * s3[y+2][x+0];
	r += M4(-6.929e-03, 4.018e-02, -1.327e-02, 1.464e-02, -9.731e-02, 1.094e-01, 2.119e-01, 7.133e-02, -6.759e-02, 1.014e-02, 1.471e-01, 1.274e-01, 2.935e-02, -3.071e-02, -5.994e-02, -2.942e-02) * s3[y+2][x+1];
	r += M4(-6.047e-02, -2.948e-02, 1.431e-03, 6.353e-02, -1.032e-01, 2.282e-02, 1.916e-02, 1.140e-01, -1.528e-02, -1.735e-02, 3.109e-02, 1.235e-01, -2.610e-02, 1.256e-02, -3.866e-02, -3.043e-02) * s3[y+2][x+2];
	r += V4(-1.066e-02, -3.954e-03, -3.245e-03, -2.194e-02);
	return vec4(r);
}
vec4 f1(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-7.021e-02, 2.320e-02, 4.037e-02, -3.509e-02, -8.851e-02, 9.189e-02, 3.537e-02, 4.868e-02, 7.268e-02, -3.893e-02, -9.288e-05, -2.704e-02, -7.469e-02, -2.434e-02, 4.260e-02, 2.490e-02) * s0[y+0][x+0];
	r += M4(5.950e-02, -2.873e-02, -1.065e-01, -6.011e-03, -1.721e-01, -3.230e-02, 2.076e-01, 9.929e-02, 1.325e-01, -1.198e-01, 5.836e-02, 8.180e-02, 3.299e-02, 2.180e-01, -8.248e-02, -9.889e-02) * s0[y+0][x+1];
	r += M4(1.078e-03, -2.716e-02, -1.602e-02, 2.361e-02, -2.040e-02, 5.670e-02, 6.762e-02, -4.553e-02, 7.409e-02, -3.121e-02, 6.045e-02, -5.310e-02, -2.846e-02, -1.512e-01, -1.019e-01, 1.173e-01) * s0[y+0][x+2];
	r += M4(2.010e-02, 1.042e-01, 1.004e-01, -3.391e-02, 9.546e-02, 2.673e-02, -2.557e-02, 2.202e-02, -2.422e-01, -2.534e-02, 2.307e-02, -8.821e-03, -7.251e-02, -1.993e-02, -5.070e-02, 1.135e-01) * s0[y+1][x+0];
	r += M4(7.569e-02, -1.743e-01, -3.911e-03, 2.267e-02, 2.048e-01, 5.319e-02, -7.067e-02, -1.617e-02, -5.921e-01, 1.924e-01, 1.558e-02, 1.143e-02, -5.259e-02, 5.175e-01, 3.685e-01, 1.314e-02) * s0[y+1][x+1];
	r += M4(1.342e-02, 2.730e-02, -2.257e-02, 1.653e-03, 4.995e-02, -8.764e-03, 4.440e-02, 2.617e-02, -1.095e-01, 8.479e-03, -4.001e-02, -5.410e-02, -4.930e-02, -2.002e-01, 2.606e-01, -3.541e-02) * s0[y+1][x+2];
	r += M4(-1.239e-01, 1.864e-02, -4.867e-02, -2.186e-02, -1.927e-02, -3.314e-02, -1.815e-02, -3.639e-02, -1.595e-03, -3.531e-02, 5.814e-03, 6.243e-03, 7.722e-02, 7.326e-02, -4.958e-02, 4.152e-02) * s0[y+2][x+0];
	r += M4(-8.815e-02, 2.182e-02, 1.753e-02, -1.028e-01, -4.422e-02, -2.458e-02, 1.075e-01, -3.182e-03, -2.861e-01, -5.492e-02, 3.522e-02, 1.138e-02, 2.376e-02, -7.531e-02, -2.173e-01, -5.528e-01) * s0[y+2][x+1];
	r += M4(-1.493e-02, -3.032e-02, 1.568e-01, -1.739e-02, -5.252e-02, 7.844e-03, 4.465e-02, 3.541e-03, -7.890e-02, -1.151e-01, -5.940e-02, -1.225e-02, -4.105e-02, -6.783e-02, -2.154e-02, 6.315e-02) * s0[y+2][x+2];
	r += M4(-1.198e-01, 2.766e-01, 7.615e-02, -5.401e-02, -2.093e-02, 3.189e-02, -2.208e-02, 2.526e-03, 5.162e-02, -4.539e-02, -2.079e-02, -7.621e-03, -6.549e-02, 6.443e-02, -5.287e-03, -1.065e-02) * s1[y+0][x+0];
	r += M4(-3.398e-01, -2.799e-01, 4.283e-02, 1.217e-01, 4.439e-03, 1.790e-01, 7.071e-02, 6.497e-02, 1.078e-01, 7.512e-02, -6.239e-02, -8.798e-02, -1.176e-01, 2.147e-02, 8.706e-02, 4.150e-02) * s1[y+0][x+1];
	r += M4(1.694e-02, 1.431e-01, 1.172e-01, 3.935e-02, -3.313e-02, -1.488e-01, 1.655e-01, -1.390e-01, 6.518e-02, -3.829e-02, -1.230e-01, 7.748e-02, -3.970e-02, 6.057e-03, 2.956e-02, -7.494e-03) * s1[y+0][x+2];
	r += M4(-1.037e-01, 1.523e-01, -5.214e-02, 2.039e-01, 6.621e-02, -4.089e-02, 3.621e-02, -4.919e-02, -1.145e-01, -8.679e-04, 2.230e-02, -4.176e-02, 1.894e-02, 5.405e-02, 5.811e-02, 3.705e-02) * s1[y+1][x+0];
	r += M4(-5.069e-02, 7.004e-01, -4.502e-01, 4.531e-02, 4.304e-02, 2.285e-01, -1.193e-01, 2.111e-01, -1.086e-01, 1.646e-01, 2.605e-01, 4.016e-02, 1.916e-01, 1.974e-02, 1.628e-01, 9.039e-02) * s1[y+1][x+1];
	r += M4(-5.548e-02, 2.178e-01, -3.199e-01, 1.619e-01, 7.013e-03, -1.566e-01, 6.358e-02, 3.610e-01, -2.115e-03, 3.664e-02, 1.061e-01, 1.085e-01, 2.213e-02, -9.279e-02, 4.061e-02, -3.948e-02) * s1[y+1][x+2];
	r += M4(-1.219e-01, 4.446e-02, -1.186e-02, 1.657e-01, -4.654e-02, -4.123e-02, -1.335e-02, -5.232e-02, 1.555e-02, 5.737e-03, -6.732e-03, 2.188e-02, -5.413e-02, 2.756e-02, -4.514e-02, 2.747e-02) * s1[y+2][x+0];
	r += M4(-7.281e-03, 8.204e-02, -2.171e-01, 2.214e-01, 3.000e-02, -3.106e-02, 1.372e-01, -1.023e-01, 1.581e-02, 7.314e-02, -8.022e-02, 1.853e-01, -9.616e-02, 9.042e-02, -6.378e-02, -3.533e-02) * s1[y+2][x+1];
	r += M4(-7.733e-02, 6.144e-02, 9.062e-02, 6.802e-02, -4.073e-02, -1.338e-02, 8.690e-03, -8.572e-03, 6.396e-03, -1.468e-02, -5.896e-02, -1.160e-01, 1.370e-03, -6.195e-02, 9.840e-02, -7.815e-02) * s1[y+2][x+2];
	r += M4(-3.604e-02, -2.138e-02, 4.954e-02, 2.030e-02, 3.143e-03, -6.068e-02, 3.763e-02, -2.680e-02, 3.919e-02, 1.124e-01, -5.458e-02, 7.159e-03, -1.248e-01, 3.083e-01, 5.390e-02, -2.425e-01) * s2[y+0][x+0];
	r += M4(1.191e-01, 1.324e-01, -1.693e-01, -1.343e-01, 6.467e-02, 8.866e-02, -3.646e-02, -9.989e-02, 1.233e-01, -3.536e-02, -6.505e-02, -3.425e-02, -1.705e-01, -3.113e-01, 3.015e-02, -8.644e-02) * s2[y+0][x+1];
	r += M4(-8.420e-02, -9.605e-02, -7.852e-02, 8.950e-02, -2.938e-02, -5.010e-02, -9.785e-02, -1.054e-01, 1.146e-02, -5.830e-02, -8.750e-02, 6.704e-02, -1.639e-02, -1.460e-01, 1.104e-02, 2.428e-01) * s2[y+0][x+2];
	r += M4(7.275e-02, 4.725e-02, 3.200e-02, -6.335e-02, -7.545e-02, 2.280e-01, -1.520e-01, -3.073e-01, 6.767e-02, 2.117e-01, 1.803e-01, -2.202e-02, 1.705e-01, 4.335e-01, 7.720e-02, -1.945e-01) * s2[y+1][x+0];
	r += M4(-8.548e-02, -3.079e-02, 2.101e-01, -3.161e-01, -8.235e-02, 4.441e-02, 2.009e-01, -2.081e-01, -1.655e-01, -4.129e-01, 1.053e-01, 2.280e-01, 4.326e-01, -4.726e-01, -1.733e-01, 5.915e-01) * s2[y+1][x+1];
	r += M4(2.129e-01, -5.257e-02, 1.191e-02, 2.900e-01, 8.346e-02, -1.663e-01, -6.009e-02, 1.793e-01, 7.914e-03, 8.769e-02, 2.897e-01, 7.094e-03, 2.630e-02, -1.665e-01, 1.408e-01, 7.360e-02) * s2[y+1][x+2];
	r += M4(-1.102e-01, -3.076e-04, -2.600e-02, -2.562e-02, -9.962e-02, -6.893e-02, 2.584e-02, 1.869e-02, -3.481e-03, -9.412e-02, -6.766e-03, 6.425e-02, -2.016e-01, 6.282e-02, -8.952e-02, 3.129e-02) * s2[y+2][x+0];
	r += M4(-1.320e-02, 4.354e-02, -8.273e-02, -6.052e-02, 5.361e-02, 3.726e-01, 1.851e-01, 3.099e-02, 1.733e-01, 3.018e-01, 4.520e-01, -4.043e-01, -1.343e-01, 1.720e-02, -6.599e-02, -1.321e-01) * s2[y+2][x+1];
	r += M4(-8.132e-02, 4.304e-02, -1.757e-02, 8.097e-02, -2.186e-02, -1.715e-01, 1.570e-01, 2.979e-01, -1.242e-02, -1.537e-01, 1.435e-01, -1.588e-01, 5.168e-02, -1.136e-01, 4.017e-02, 1.437e-02) * s2[y+2][x+2];
	r += M4(-4.185e-03, 5.872e-02, 8.648e-02, 4.658e-02, 4.808e-02, 6.360e-03, 1.581e-02, -2.443e-02, -1.294e-02, 5.980e-02, -3.174e-02, -9.351e-03, -1.172e-01, 2.008e-02, 2.935e-02, 1.750e-02) * s3[y+0][x+0];
	r += M4(2.345e-02, 8.308e-02, 2.475e-02, -3.669e-02, 6.656e-02, -5.273e-02, -1.082e-02, 1.939e-02, -7.101e-02, -5.027e-02, 1.094e-02, 2.550e-02, -5.455e-02, -5.605e-02, 3.551e-02, 5.934e-02) * s3[y+0][x+1];
	r += M4(-4.989e-02, -5.574e-02, -1.587e-03, 2.051e-02, 3.511e-02, -1.461e-02, 1.470e-02, -1.726e-02, -5.519e-02, 5.507e-02, 3.158e-03, -5.351e-02, -5.406e-02, -1.511e-02, 4.466e-02, -2.404e-02) * s3[y+0][x+2];
	r += M4(8.426e-02, 1.529e-01, 3.968e-02, -4.606e-02, 3.116e-02, 2.025e-02, 1.998e-03, -6.527e-02, 7.325e-02, 3.879e-02, -1.497e-02, -1.650e-02, 9.398e-02, 6.685e-02, 4.541e-02, 3.783e-02) * s3[y+1][x+0];
	r += M4(7.426e-02, -1.838e-01, 5.541e-02, -1.225e-01, 2.025e-02, -5.114e-03, -8.639e-02, -6.369e-02, 1.028e-01, -3.410e-02, -9.600e-03, -2.688e-02, 2.230e-01, -2.976e-02, 5.097e-02, -4.485e-02) * s3[y+1][x+1];
	r += M4(3.061e-01, -3.511e-02, 1.248e-02, 1.967e-01, 2.063e-02, 4.901e-02, -9.072e-02, 6.118e-02, 1.217e-01, -3.335e-02, -9.157e-02, 4.271e-02, 1.344e-02, 3.542e-02, 4.535e-03, 2.925e-02) * s3[y+1][x+2];
	r += M4(-1.043e-01, 3.173e-02, 3.185e-02, -2.639e-02, -6.000e-02, -6.241e-02, -7.240e-02, -3.403e-02, 1.262e-03, 1.014e-02, -4.446e-02, -3.757e-03, -7.661e-02, -3.191e-02, -6.373e-02, 6.775e-04) * s3[y+2][x+0];
	r += M4(-1.627e-01, -4.284e-03, 3.902e-02, -1.224e-01, 1.746e-01, 1.220e-02, 2.630e-01, 1.654e-02, -2.084e-02, 4.337e-02, 1.244e-01, -6.535e-02, -3.430e-02, -5.282e-03, -3.993e-02, 3.526e-03) * s3[y+2][x+1];
	r += M4(-1.282e-01, -1.111e-03, 6.859e-02, 2.514e-02, -1.706e-02, -1.948e-02, 1.656e-01, 2.696e-02, -1.271e-01, 5.115e-03, 1.304e-01, 2.837e-02, 1.727e-02, -1.875e-04, -4.114e-03, -1.719e-02) * s3[y+2][x+2];
	r += V4(-1.522e-03, -5.776e-03, -7.560e-03, -4.679e-03);
	return vec4(r);
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv3_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
			s2[ay][ax] = l1(x - 1, y - 1);
			s1[ay][ax] = -max(-s0[ay][ax], V4(0.0));
			s0[ay][ax] = max(s0[ay][ax], V4(0.0));
			s3[ay][ax] = -max(-s2[ay][ax], V4(0.0));
			s2[ay][ax] = max(s2[ay][ax], V4(0.0));
		}
	}
	barrier();
	vec4 r0 = f0(xy.x, xy.y);
	vec4 r1 = f1(xy.x, xy.y);
	imageStore(out_image, opos + ivec2(0, 0), r0);
	imageStore(out_image, opos + ivec2(1, 0), r1);
}

//!DESC CuNNy-4x8C-DS-out
//!HOOK LUMA
//!COMPUTE 8 8 8 8
//!BIND conv4
//!BIND LUMA
//!SAVE out
//!WIDTH LUMA.w
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(texelFetch(conv4_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv4_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 s0[10][10];
shared V4 s1[10][10];
shared V4 s2[10][10];
shared V4 s3[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-2.143e-04, 1.194e-02, -1.248e-02, -1.140e-02, 3.504e-02, -6.645e-03, 7.305e-03, -2.407e-02, 8.814e-02, 5.291e-02, -6.435e-03, -2.179e-02, -7.052e-02, -3.927e-02, -4.240e-02, -5.459e-03) * s0[y+0][x+0];
	r += M4(-1.165e-01, -8.760e-02, 8.920e-02, 4.170e-02, -6.124e-02, -1.719e-02, -3.771e-02, 4.383e-02, -8.092e-02, -1.802e-01, 5.997e-02, 9.946e-02, 1.189e-01, 4.779e-02, 3.756e-02, -1.437e-02) * s0[y+0][x+1];
	r += M4(1.151e-02, -4.739e-02, -5.613e-04, 2.616e-02, -4.870e-02, 4.366e-02, -1.907e-02, -3.601e-02, -3.361e-02, -5.130e-02, 2.337e-02, 2.915e-02, -4.623e-02, 3.110e-03, -9.194e-03, 1.460e-02) * s0[y+0][x+2];
	r += M4(-5.742e-02, 3.523e-02, 1.776e-02, 5.700e-02, 6.836e-02, -1.236e-01, 6.506e-02, -1.398e-02, -3.425e-01, 1.439e-01, -1.542e-01, 2.306e-01, 2.188e-01, 1.368e-01, 2.741e-01, 5.297e-02) * s0[y+1][x+0];
	r += M4(-4.007e-01, -3.779e-01, -4.464e-01, -3.310e-01, -7.012e-01, 6.171e-01, -3.681e-01, 8.747e-02, 8.258e-01, -4.594e-01, 2.881e-01, -7.163e-01, 1.901e-01, 2.416e-01, 8.004e-02, 2.714e-01) * s0[y+1][x+1];
	r += M4(-2.707e-03, -9.888e-02, 8.812e-02, -6.239e-02, 2.764e-01, -1.767e-01, 8.907e-02, 8.968e-02, -1.269e-01, 1.889e-01, -7.554e-02, 9.823e-02, 4.700e-02, 1.058e-01, 1.648e-02, 3.213e-02) * s0[y+1][x+2];
	r += M4(-1.670e-04, -1.154e-03, -7.554e-02, 6.433e-03, 2.455e-02, -2.768e-02, 4.227e-02, -1.376e-01, 7.391e-02, 7.357e-02, -3.418e-02, 7.087e-02, -8.372e-02, -9.088e-03, -2.201e-01, 3.796e-02) * s0[y+2][x+0];
	r += M4(4.995e-02, 3.811e-02, -8.682e-02, -1.418e-01, -6.683e-02, 2.037e-01, -3.682e-01, 7.051e-01, -9.814e-02, -9.049e-02, 3.023e-01, -9.448e-02, 2.342e-01, 1.122e-01, 4.647e-01, 1.005e-01) * s0[y+2][x+1];
	r += M4(2.586e-02, 5.538e-02, -1.266e-02, -3.179e-02, 3.347e-02, -4.771e-02, 2.066e-01, -2.014e-01, 1.351e-02, -6.323e-02, -1.027e-01, -4.492e-02, -6.040e-02, -2.277e-02, -9.437e-02, 3.147e-02) * s0[y+2][x+2];
	r += M4(9.887e-02, 4.452e-02, -5.735e-03, -1.671e-02, 1.448e-02, -1.013e-03, -2.972e-02, -1.838e-02, 6.134e-03, 1.586e-02, 2.999e-02, -1.412e-02, 1.409e-02, -4.383e-02, -3.388e-02, -1.378e-02) * s1[y+0][x+0];
	r += M4(5.483e-03, 5.496e-02, 6.605e-02, 6.524e-02, 2.083e-02, 3.184e-02, -9.190e-03, -3.401e-02, -2.098e-02, -2.839e-02, -7.503e-04, 6.357e-02, 6.761e-02, 9.201e-02, 1.327e-02, -3.471e-02) * s1[y+0][x+1];
	r += M4(3.869e-02, 5.871e-02, -9.788e-03, 1.474e-02, -2.773e-02, -1.888e-02, -2.063e-02, -2.247e-03, -1.592e-02, -2.307e-02, 1.773e-02, -3.498e-03, -5.271e-02, -1.456e-02, -2.084e-03, 2.089e-02) * s1[y+0][x+2];
	r += M4(6.518e-02, 7.182e-02, 1.577e-01, 1.101e-01, 4.885e-02, -5.747e-03, 8.337e-02, 4.024e-02, -4.288e-02, -4.524e-02, -1.061e-01, 2.035e-02, -1.211e-02, 7.599e-02, 1.851e-01, 8.980e-03) * s1[y+1][x+0];
	r += M4(-3.524e-01, -2.686e-01, -3.653e-01, -2.510e-01, -1.520e-01, -1.053e-01, -1.246e-01, -7.384e-02, 3.510e-02, -4.369e-02, 3.249e-02, -1.702e-01, -3.354e-02, -1.778e-01, -4.641e-02, 1.528e-01) * s1[y+1][x+1];
	r += M4(5.936e-02, -4.900e-02, 1.072e-01, 2.298e-02, 7.964e-02, 6.118e-02, 3.332e-02, 4.609e-03, 1.356e-02, 9.050e-02, -4.894e-03, 4.543e-02, 1.415e-02, 5.520e-02, -1.771e-02, -3.691e-02) * s1[y+1][x+2];
	r += M4(1.636e-02, 9.590e-03, -2.127e-03, 1.615e-02, 5.398e-03, -2.601e-03, 2.598e-03, -4.017e-02, 4.888e-02, 2.479e-02, 1.257e-01, 1.076e-02, -1.052e-01, -5.037e-02, -2.726e-01, -2.208e-02) * s1[y+2][x+0];
	r += M4(7.425e-02, 4.214e-02, -7.030e-03, -2.521e-02, 4.713e-02, 2.332e-03, 9.585e-02, 4.430e-02, -4.048e-02, 6.800e-03, -4.787e-02, 6.897e-02, 1.788e-01, 7.472e-02, 2.885e-01, -1.180e-01) * s1[y+2][x+1];
	r += M4(4.634e-03, 3.777e-02, 1.690e-02, 1.059e-02, -1.843e-02, 1.549e-02, -7.913e-03, 5.119e-02, 1.894e-03, -1.794e-02, -8.524e-03, 2.049e-02, -6.009e-02, -2.082e-02, -1.091e-01, 2.583e-02) * s1[y+2][x+2];
	r += M4(-7.890e-02, 6.671e-02, 7.820e-02, 2.454e-02, -8.049e-02, -3.873e-02, 1.191e-02, -2.171e-02, -9.059e-02, -3.985e-02, -1.262e-01, -4.569e-02, -1.704e-01, 1.032e-01, 2.714e-02, 3.486e-02) * s2[y+0][x+0];
	r += M4(-9.041e-02, -2.725e-01, 2.770e-01, 2.562e-01, -5.272e-02, -9.779e-02, 2.331e-02, -3.407e-02, -3.884e-02, -6.821e-02, 5.360e-02, -2.551e-02, 7.281e-02, 3.481e-03, 2.290e-02, 8.112e-02) * s2[y+0][x+1];
	r += M4(-3.863e-02, 2.683e-04, -3.679e-02, 4.009e-02, 6.547e-02, -8.716e-02, 4.245e-02, 6.823e-02, 3.534e-02, 2.215e-02, -1.729e-02, 1.063e-02, -8.401e-03, -2.758e-02, -7.784e-03, 2.907e-03) * s2[y+0][x+2];
	r += M4(3.284e-01, -6.320e-02, -9.828e-02, -5.271e-03, 2.862e-02, 4.690e-02, -1.174e-01, -2.369e-02, -2.664e-01, -1.481e-01, 4.569e-01, 6.327e-02, -3.325e-01, 1.761e-01, -5.420e-01, 1.609e-01) * s2[y+1][x+0];
	r += M4(6.932e-01, 9.244e-01, -9.105e-01, -6.669e-01, 6.337e-01, 7.226e-02, 4.049e-01, -5.984e-02, -2.261e-01, -2.436e-01, 1.046e-01, 5.747e-01, 2.899e-03, -1.571e-01, 1.894e-01, -8.570e-02) * s2[y+1][x+1];
	r += M4(-3.205e-02, 1.103e-01, 8.373e-02, -2.803e-01, -8.401e-02, -1.548e-01, 3.311e-02, -1.501e-01, -2.466e-02, -1.177e-01, 7.092e-02, -4.096e-02, 1.595e-02, -1.439e-02, 1.673e-02, -1.151e-02) * s2[y+1][x+2];
	r += M4(-8.383e-02, 1.617e-02, -1.053e-01, -1.745e-02, -1.195e-02, -3.485e-02, 4.984e-02, 1.503e-02, 1.395e-01, 5.799e-02, -2.239e-02, -1.242e-02, 6.485e-02, 4.701e-02, 3.610e-02, 9.865e-02) * s2[y+2][x+0];
	r += M4(-9.456e-02, -1.457e-01, 3.018e-01, 1.587e-01, -1.086e-01, -1.451e-01, 3.628e-02, -7.930e-02, -7.245e-02, 2.824e-02, -1.606e-01, -1.194e-01, -7.054e-02, 4.796e-02, -1.275e-01, -6.818e-02) * s2[y+2][x+1];
	r += M4(-3.371e-02, -8.641e-02, -7.870e-02, -1.549e-02, 2.882e-02, 1.486e-02, 1.372e-02, -8.999e-02, 4.603e-02, 2.863e-02, 5.913e-02, 1.325e-02, 1.750e-02, 6.969e-03, 4.158e-02, -5.124e-03) * s2[y+2][x+2];
	r += M4(-6.709e-03, 3.051e-03, 1.803e-02, -1.184e-02, -1.499e-01, -4.240e-02, -7.060e-03, 2.081e-02, -2.239e-02, 3.275e-03, -5.581e-02, -4.955e-02, -1.119e-01, -3.005e-02, 2.803e-02, 2.164e-02) * s3[y+0][x+0];
	r += M4(-1.666e-02, -1.211e-02, 2.100e-03, 4.833e-02, -7.642e-02, -1.255e-01, 1.581e-02, 2.312e-02, 7.532e-02, 7.154e-02, 1.954e-02, 3.441e-02, 1.206e-01, -4.296e-02, 4.101e-02, 1.694e-04) * s3[y+0][x+1];
	r += M4(2.448e-02, 1.256e-02, 1.390e-02, -5.713e-04, 4.375e-03, -8.043e-03, -3.213e-03, -9.710e-05, -9.491e-03, -9.910e-03, -2.998e-03, -8.448e-03, -7.639e-03, -1.955e-02, 1.016e-02, 1.008e-02) * s3[y+0][x+2];
	r += M4(-1.450e-02, -7.841e-03, -1.391e-02, 1.050e-02, 1.860e-01, 9.493e-03, -6.711e-02, -6.567e-02, 2.341e-02, -2.191e-02, -1.599e-02, 7.031e-03, 1.796e-02, 5.657e-03, -1.179e-01, -2.530e-02) * s3[y+1][x+0];
	r += M4(9.111e-02, 4.917e-02, -3.922e-02, -4.048e-02, 1.743e-01, 4.293e-01, 1.027e-01, 1.602e-01, -8.229e-02, 3.021e-02, -6.567e-02, -3.332e-02, -1.193e-01, -4.305e-02, 1.415e-01, -2.581e-02) * s3[y+1][x+1];
	r += M4(-4.993e-02, -1.541e-02, 1.822e-02, 1.158e-03, -5.867e-02, -6.765e-02, -2.383e-02, -1.504e-02, 2.257e-02, -3.944e-02, 5.174e-02, 1.235e-02, 4.165e-02, -6.417e-02, 2.985e-02, -7.960e-03) * s3[y+1][x+2];
	r += M4(-4.553e-02, -1.155e-02, -9.692e-02, -2.134e-02, -3.968e-02, -2.231e-02, 8.231e-02, 6.785e-03, 3.416e-02, 2.715e-02, 8.555e-02, 1.196e-02, 3.008e-02, 1.603e-02, 2.788e-02, -5.171e-03) * s3[y+2][x+0];
	r += M4(5.025e-02, 1.955e-02, 1.729e-01, 4.212e-02, -1.018e-01, -9.399e-02, -1.002e-01, 7.599e-02, -1.034e-01, -6.845e-02, -1.512e-01, -5.144e-03, -2.443e-02, 8.729e-03, -1.421e-01, -1.874e-02) * s3[y+2][x+1];
	r += M4(-2.218e-02, -2.687e-02, -7.052e-02, -2.076e-02, 1.267e-02, 5.786e-04, -1.813e-03, -4.677e-02, 5.656e-02, 3.596e-02, 7.034e-02, -1.216e-02, 2.883e-02, 1.802e-02, 6.140e-02, -4.054e-02) * s3[y+2][x+2];
	r += V4(-6.444e-05, -4.127e-04, 3.941e-04, -7.398e-06);
	return tanh(vec4(r));
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(1, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv4_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
			s2[ay][ax] = l1(x - 1, y - 1);
			s1[ay][ax] = -max(-s0[ay][ax], V4(0.0));
			s0[ay][ax] = max(s0[ay][ax], V4(0.0));
			s3[ay][ax] = -max(-s2[ay][ax], V4(0.0));
			s2[ay][ax] = max(s2[ay][ax], V4(0.0));
		}
	}
	barrier();
	vec4 r0 = f0(xy.x, xy.y);
	imageStore(out_image, opos + ivec2(0, 0), r0);
}

//!DESC CuNNy-4x8C-DS-shuffle
//!HOOK LUMA
//!BIND out
//!BIND easu
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 1
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
vec4 hook() {
	vec4 r = vec4(0.0);
	vec2 f = fract(out_pos * out_size);
	ivec2 i = ivec2(f * vec2(2.0));
	r.r = out_tex((vec2(0.5) - f) * out_pt + out_pos)[2*i.y + i.x];
	r.r += easu_tex(easu_pos).r;
	r.a = 1.0;
	return clamp(r, 0.0, 1.0);
}
