// CuNNy 4x8C DS
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

// FSR mpv | modified
// Copyright (c) 2021 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// FidelityFX FSR v1.0.2 by AMD
// ported to mpv by agyild

//!DESC CuNNy-4x8C-DS-EASU
//!HOOK LUMA
//!BIND LUMA
//!SAVE easu
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
//!COMPONENTS 1

float APrxLoRcpF1(float a) {
	return uintBitsToFloat(uint(0x7ef07ebb) - floatBitsToUint(a));
}

float APrxLoRsqF1(float a) {
	return uintBitsToFloat(uint(0x5f347d74) - (floatBitsToUint(a) >> uint(1)));
}

float AMin3F1(float x, float y, float z) {
	return min(x, min(y, z));
}

float AMax3F1(float x, float y, float z) {
	return max(x, max(y, z));
}

void tap(inout float aC, inout float aW, vec2 off, vec2 dir, vec2 len,
         float lob, float clp, float c){
	vec2 v;
	v.x = (off.x * ( dir.x)) + (off.y * dir.y);
	v.y = (off.x * (-dir.y)) + (off.y * dir.x);
	v *= len;
	float d2 = v.x * v.x + v.y * v.y;
	d2 = min(d2, clp);
	float wB = float(2.0 / 5.0) * d2 + -1.0;
	float wA = lob * d2 + -1.0;
	wB *= wB;
	wA *= wA;
	wB = float(25.0 / 16.0) * wB + float(-(25.0 / 16.0 - 1.0));
	float w = wB * wA;
	aC += c * w;
	aW += w;
}

void set(inout vec2 dir, inout float len, vec2 pp, bool biS, bool biT,
         bool biU, bool biV, float lA, float lB, float lC, float lD, float lE){
	float w = 0.0;
	if (biS)
		w = (1.0 - pp.x) * (1.0 - pp.y);
	if (biT)
		w =        pp.x  * (1.0 - pp.y);
	if (biU)
		w = (1.0 - pp.x) *        pp.y;
	if (biV)
		w =        pp.x  *        pp.y;
	float dc = lD - lC;
	float cb = lC - lB;
	float lenX = max(abs(dc), abs(cb));
	lenX = APrxLoRcpF1(lenX);
	float dirX = lD - lB;
	lenX = clamp(abs(dirX) * lenX, 0.0, 1.0);
	lenX *= lenX;
	float ec = lE - lC;
	float ca = lC - lA;
	float lenY = max(abs(ec), abs(ca));
	lenY = APrxLoRcpF1(lenY);
	float dirY = lE - lA;
	lenY = clamp(abs(dirY) * lenY, 0.0, 1.0);
	lenY *= lenY;
	dir += vec2(dirX, dirY) * w;
	len += dot(vec2(w), vec2(lenX, lenY));
}

vec4 hook() {
	vec4 pix = vec4(0.0, 0.0, 0.0, 1.0);
	vec2 pp = LUMA_pos * LUMA_size - vec2(0.5);
	vec2 fp = floor(pp);
	pp -= fp;
#if (defined(LUMA_gather) && (__VERSION__ >= 400 || (GL_ES && __VERSION__ >= 310)))
	vec4 bczzL = LUMA_gather(vec2((fp + vec2(1.0, -1.0)) * LUMA_pt), 0);
	vec4 ijfeL = LUMA_gather(vec2((fp + vec2(0.0,  1.0)) * LUMA_pt), 0);
	vec4 klhgL = LUMA_gather(vec2((fp + vec2(2.0,  1.0)) * LUMA_pt), 0);
	vec4 zzonL = LUMA_gather(vec2((fp + vec2(1.0,  3.0)) * LUMA_pt), 0);
#else
	float b = LUMA_tex(vec2((fp + vec2(0.5, -0.5)) * LUMA_pt)).r;
	float c = LUMA_tex(vec2((fp + vec2(1.5, -0.5)) * LUMA_pt)).r;
	float e = LUMA_tex(vec2((fp + vec2(-0.5, 0.5)) * LUMA_pt)).r;
	float f = LUMA_tex(vec2((fp + vec2( 0.5, 0.5)) * LUMA_pt)).r;
	float g = LUMA_tex(vec2((fp + vec2( 1.5, 0.5)) * LUMA_pt)).r;
	float h = LUMA_tex(vec2((fp + vec2( 2.5, 0.5)) * LUMA_pt)).r;
	float i = LUMA_tex(vec2((fp + vec2(-0.5, 1.5)) * LUMA_pt)).r;
	float j = LUMA_tex(vec2((fp + vec2( 0.5, 1.5)) * LUMA_pt)).r;
	float k = LUMA_tex(vec2((fp + vec2( 1.5, 1.5)) * LUMA_pt)).r;
	float l = LUMA_tex(vec2((fp + vec2( 2.5, 1.5)) * LUMA_pt)).r;
	float n = LUMA_tex(vec2((fp + vec2(0.5, 2.5) ) * LUMA_pt)).r;
	float o = LUMA_tex(vec2((fp + vec2(1.5, 2.5) ) * LUMA_pt)).r;
	vec4 bczzL = vec4(b, c, 0.0, 0.0);
	vec4 ijfeL = vec4(i, j, f, e);
	vec4 klhgL = vec4(k, l, h, g);
	vec4 zzonL = vec4(0.0, 0.0, o, n);
#endif
	float bL = bczzL.x;
	float cL = bczzL.y;
	float iL = ijfeL.x;
	float jL = ijfeL.y;
	float fL = ijfeL.z;
	float eL = ijfeL.w;
	float kL = klhgL.x;
	float lL = klhgL.y;
	float hL = klhgL.z;
	float gL = klhgL.w;
	float oL = zzonL.z;
	float nL = zzonL.w;
	vec2 dir = vec2(0.0);
	float len = 0.0;
	set(dir, len, pp, true, false, false, false, bL, eL, fL, gL, jL);
	set(dir, len, pp, false, true, false, false, cL, fL, gL, hL, kL);
	set(dir, len, pp, false, false, true, false, fL, iL, jL, kL, nL);
	set(dir, len, pp, false, false, false, true, gL, jL, kL, lL, oL);
	vec2 dir2 = dir * dir;
	float dirR = dir2.x + dir2.y;
	bool zro = dirR < float(1.0 / 32768.0);
	dirR = APrxLoRsqF1(dirR);
	dirR = zro ? 1.0 : dirR;
	dir.x = zro ? 1.0 : dir.x;
	dir *= vec2(dirR);
	len = len * 0.5;
	len *= len;
	float stretch = (dir.x * dir.x + dir.y * dir.y) * APrxLoRcpF1(max(abs(dir.x), abs(dir.y)));
	vec2 len2 = vec2(1.0 + (stretch - 1.0) * len, 1.0 + -0.5 * len);
	float lob = 0.5 + float((1.0 / 4.0 - 0.04) - 0.5) * len;
	float clp = APrxLoRcpF1(lob);
	float aC = 0.0;
	float aW = 0.0;
	tap(aC, aW, vec2( 0.0,-1.0) - pp, dir, len2, lob, clp, bL);
	tap(aC, aW, vec2( 1.0,-1.0) - pp, dir, len2, lob, clp, cL);
	tap(aC, aW, vec2(-1.0, 1.0) - pp, dir, len2, lob, clp, iL);
	tap(aC, aW, vec2( 0.0, 1.0) - pp, dir, len2, lob, clp, jL);
	tap(aC, aW, vec2( 0.0, 0.0) - pp, dir, len2, lob, clp, fL);
	tap(aC, aW, vec2(-1.0, 0.0) - pp, dir, len2, lob, clp, eL);
	tap(aC, aW, vec2( 1.0, 1.0) - pp, dir, len2, lob, clp, kL);
	tap(aC, aW, vec2( 2.0, 1.0) - pp, dir, len2, lob, clp, lL);
	tap(aC, aW, vec2( 2.0, 0.0) - pp, dir, len2, lob, clp, hL);
	tap(aC, aW, vec2( 1.0, 0.0) - pp, dir, len2, lob, clp, gL);
	tap(aC, aW, vec2( 1.0, 2.0) - pp, dir, len2, lob, clp, oL);
	tap(aC, aW, vec2( 0.0, 2.0) - pp, dir, len2, lob, clp, nL);
	pix.r = aC / aW;
	float min1 = min(AMin3F1(fL, gL, jL), kL);
	float max1 = max(AMax3F1(fL, gL, jL), kL);
	pix.r = clamp(pix.r, min1, max1);
	pix.r = clamp(pix.r, 0.0, 1.0);
	return pix;
}


//!DESC CuNNy-4x8C-DS-in
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND LUMA
//!SAVE in
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) F(LUMA_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(1, 1) + ivec2(0, 0)) + vec2(0.5)) * LUMA_pt).r)
shared F g[1][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = LUMA_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			g[0][ay][ax] = l0(x - 1, y - 1);
		}
	}
	barrier();
	F s[3][3][1];
	V4 r0 = V4(0.0);
	V4 r1 = V4(0.0);
	s[0][0][0] = g[0][xy.y+0][xy.x+0];
	s[0][1][0] = g[0][xy.y+0][xy.x+1];
	s[0][2][0] = g[0][xy.y+0][xy.x+2];
	s[1][0][0] = g[0][xy.y+1][xy.x+0];
	s[1][1][0] = g[0][xy.y+1][xy.x+1];
	s[1][2][0] = g[0][xy.y+1][xy.x+2];
	s[2][0][0] = g[0][xy.y+2][xy.x+0];
	s[2][1][0] = g[0][xy.y+2][xy.x+1];
	s[2][2][0] = g[0][xy.y+2][xy.x+2];
	r0 += V4(8.226e-03, -5.708e-02, -1.407e-02, -1.555e-02) * s[0][0][0];
	r1 += V4(-1.783e-01, -1.140e-01, -3.176e-01, 1.458e-01) * s[0][0][0];
	r0 += V4(-2.842e-01, -2.080e-02, 4.684e-02, -2.183e-02) * s[0][1][0];
	r1 += V4(3.707e-01, -1.694e-01, -1.086e-01, 8.522e-03) * s[0][1][0];
	r0 += V4(6.616e-02, -4.872e-02, -3.514e-02, 3.356e-02) * s[0][2][0];
	r1 += V4(-2.693e-01, 7.177e-03, 1.042e-02, -9.985e-02) * s[0][2][0];
	r0 += V4(4.281e-02, 1.593e-02, -3.439e-02, 2.062e-01) * s[1][0][0];
	r1 += V4(1.822e-01, 2.241e-01, -4.551e-02, 1.333e-01) * s[1][0][0];
	r0 += V4(-3.301e-01, 1.600e-01, 3.194e-01, -4.873e-01) * s[1][1][0];
	r1 += V4(-2.740e-01, -1.186e-03, 4.200e-01, -4.248e-01) * s[1][1][0];
	r0 += V4(-7.799e-02, -6.538e-03, 3.864e-02, 1.644e-02) * s[1][2][0];
	r1 += V4(3.707e-01, -1.407e-01, 3.915e-02, 1.401e-01) * s[1][2][0];
	r0 += V4(-2.704e-03, 4.998e-02, -6.060e-03, 2.549e-01) * s[2][0][0];
	r1 += V4(-3.897e-03, 5.754e-02, 2.434e-02, -1.850e-01) * s[2][0][0];
	r0 += V4(4.580e-02, -1.655e-01, -1.163e-02, 5.593e-02) * s[2][1][0];
	r1 += V4(-9.846e-02, 1.949e-01, 1.784e-02, 1.146e-01) * s[2][1][0];
	r0 += V4(2.613e-02, 4.459e-03, -3.181e-02, -4.394e-02) * s[2][2][0];
	r1 += V4(-1.062e-01, -5.607e-02, -3.991e-02, 1.673e-01) * s[2][2][0];
	r0 += V4(1.969e-02, 9.118e-04, -1.265e-01, -8.534e-03);
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(6.097e-03, 1.752e-02, -3.610e-03, -1.273e-03);
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-4x8C-DS-conv1
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND in
//!BIND LUMA
//!SAVE conv1
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(in_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0)) + vec2(0.5)) * in_pt))
#define l1(x, y) V4(in_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0)) + vec2(0.5)) * in_pt))
shared V4 g[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = in_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			g[0][ay][ax] = l0(x - 1, y - 1);
			g[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s[3][3][2];
	V4 r0 = V4(0.0);
	V4 r1 = V4(0.0);
	s[0][0][0] = max(g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[0][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[0][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[0][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[0][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[0][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[0][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(-1.413e-01, -6.211e-02, -5.679e-01, 5.764e-01, 4.548e-01, 1.203e-01, 2.103e-01, 4.605e-01, 8.262e-02, -1.014e-01, -1.608e-01, 8.209e-03, -1.895e-01, 1.645e-01, -5.730e-02, 2.108e-02) * s[0][0][0];
	r1 += M4(-4.393e-01, 1.893e-01, -3.315e-02, -3.264e-01, -9.710e-01, 3.621e-01, 1.107e+00, 7.872e-02, 1.289e-02, 1.059e-01, -2.252e-02, 5.294e-02, -1.943e-01, 2.429e-01, 2.408e-01, 9.145e-02) * s[0][0][0];
	r0 += M4(-1.540e-01, 4.162e-03, 6.779e-03, 1.544e-01, -1.847e-02, -7.447e-02, 9.868e-02, -3.898e-03, 1.551e-01, -6.933e-02, -2.627e-01, -1.172e-01, -3.390e-01, 1.420e-01, -1.235e-01, 4.987e-02) * s[0][0][1];
	r1 += M4(-8.797e-02, 1.585e-01, 7.251e-02, -1.291e-01, -1.849e-03, 1.829e-01, -4.710e-02, 1.095e-01, -1.508e-01, -1.194e-01, -4.038e-01, -8.068e-02, 1.482e-01, -1.351e-01, -6.408e-02, 8.237e-02) * s[0][0][1];
	r0 += M4(3.740e-01, 1.763e-01, 7.575e-02, -4.400e-01, 4.926e-01, 5.016e-01, 1.233e-01, 9.300e-01, 2.151e-01, -3.461e-01, 8.159e-02, -3.995e-02, -2.184e-01, 1.352e-01, -1.091e-01, 2.490e-01) * s[0][1][0];
	r1 += M4(-9.292e-01, 1.264e-02, 2.102e-01, -6.010e-01, 1.324e-02, 1.275e-01, 1.287e+00, 2.921e-01, 1.246e-01, -4.520e-02, -7.248e-02, 4.238e-02, -4.260e-02, 3.937e-01, 1.064e-01, 2.929e-01) * s[0][1][0];
	r0 += M4(-9.704e-04, 7.234e-02, 2.111e-02, 5.036e-02, 2.013e-01, -1.301e-02, 8.069e-02, -6.660e-02, 1.386e-01, 1.914e-02, -2.977e-02, -1.979e-01, -3.243e-01, 2.534e-01, -9.638e-02, 7.259e-02) * s[0][1][1];
	r1 += M4(7.048e-02, 1.131e-01, -1.365e-01, 2.117e-02, 2.424e-01, -4.094e-02, 1.084e-01, 8.517e-02, 1.626e-03, 4.313e-02, 4.116e-01, -1.438e-03, 1.256e-01, -1.250e-01, 1.392e-01, 7.098e-02) * s[0][1][1];
	r0 += M4(3.613e-02, -4.654e-01, -8.438e-02, 3.798e-01, 2.310e-02, 1.927e-01, -2.702e-03, -4.972e-02, -2.102e-01, 7.951e-02, -1.339e-01, 1.337e-01, 4.241e-02, -3.279e-01, -4.460e-02, 7.228e-01) * s[0][2][0];
	r1 += M4(-3.028e-01, -3.346e-01, -1.294e+00, 4.338e-01, -3.238e-01, 2.718e-01, 3.499e-01, -3.474e-02, -1.043e-01, 8.711e-02, -2.698e-01, 1.404e-01, -1.320e-01, 2.180e-01, -9.516e-01, 5.130e-01) * s[0][2][0];
	r0 += M4(8.279e-03, -7.670e-02, 6.971e-02, -7.730e-02, -7.994e-02, -8.814e-02, -6.164e-02, -1.049e-01, -6.238e-02, -1.543e-01, -1.448e-01, 3.681e-01, -4.151e-01, 3.077e-01, 7.113e-02, -3.916e-01) * s[0][2][1];
	r1 += M4(4.107e-02, 1.008e-01, -1.711e-01, 7.570e-02, 9.402e-02, -3.991e-02, 9.248e-02, 1.823e-02, 2.460e-02, 1.404e-01, -2.198e-01, 2.030e-01, -2.062e-01, -1.870e-01, 5.774e-02, -1.982e-01) * s[0][2][1];
	r0 += M4(4.807e-01, 8.677e-01, 4.297e-01, 5.188e-01, 2.212e-01, 1.020e+00, -3.961e-01, -4.490e-02, 1.443e-02, 1.037e-02, -5.868e-02, -7.701e-02, -6.040e-02, -1.035e-02, 5.935e-01, -1.792e-01) * s[1][0][0];
	r1 += M4(1.015e+00, -6.287e-01, -2.473e-01, -4.015e-01, 1.546e-02, 6.454e-02, 3.941e-01, -1.566e-02, 3.598e-02, -7.637e-02, -2.083e-01, 1.797e-02, -1.743e-01, 3.440e-01, 1.839e-01, 2.003e-01) * s[1][0][0];
	r0 += M4(1.083e-01, 7.420e-02, 1.913e-01, -1.541e-02, -3.495e-02, -1.070e-01, 1.022e-03, -9.921e-03, -2.606e-01, 2.400e-01, 1.990e+00, -1.972e-02, 5.162e-02, -1.036e-01, 1.250e-01, -8.968e-02) * s[1][0][1];
	r1 += M4(-4.294e-02, 5.260e-03, -9.863e-03, -1.087e-01, 5.762e-03, -1.056e-01, -3.828e-02, -8.185e-02, -1.981e-01, 4.163e-02, 1.558e-01, -1.890e-01, -6.993e-02, 1.809e-01, 1.000e-01, 1.158e-01) * s[1][0][1];
	r0 += M4(1.182e+00, 1.426e+00, 1.628e+00, 1.617e-01, -6.265e-02, 1.933e-02, -3.231e-01, -2.718e-01, -2.395e-01, 4.316e-01, 1.872e-03, -1.540e-01, 8.178e-01, 2.243e-01, -4.487e-02, -6.672e-02) * s[1][1][0];
	r1 += M4(6.518e-01, -5.385e-01, 1.007e+00, -2.676e+00, -7.631e-02, 7.133e-01, -1.676e-01, 3.716e-01, -5.170e-02, 1.763e-01, 9.961e-02, -2.548e-01, 1.854e-01, 3.662e-01, 4.479e-01, 1.646e-01) * s[1][1][0];
	r0 += M4(7.593e-02, 4.920e-02, 3.596e-02, -9.379e-02, -1.546e-01, -3.710e-02, 2.155e-03, -3.442e-02, -1.835e-01, -3.826e-01, 1.144e-01, -5.376e-02, 2.993e-01, -2.103e-01, 1.452e-01, 1.843e-01) * s[1][1][1];
	r1 += M4(5.501e-02, -1.276e-01, 1.275e-01, -1.038e-01, -2.214e-01, -4.148e-02, -1.831e-02, 6.904e-02, 1.771e-01, -1.787e-01, -1.447e-01, 3.924e-01, 1.655e-01, -1.556e-01, -2.905e-01, -9.541e-02) * s[1][1][1];
	r0 += M4(-1.118e-01, 2.332e-01, -9.049e-02, 4.404e-02, 9.792e-02, -2.135e-01, -5.641e-02, -6.547e-01, 2.223e-01, -3.296e-01, 2.702e-02, 1.948e-01, -1.559e-01, 4.760e-02, -8.863e-02, 3.132e-01) * s[1][2][0];
	r1 += M4(-3.946e-01, 8.987e-02, -3.261e-01, -2.384e-01, 2.572e-02, -8.302e-02, 3.987e-03, -2.056e-01, 1.040e-01, -2.621e-02, -1.691e-01, -1.690e-01, -7.630e-02, -2.891e-02, 4.263e-02, 5.294e-01) * s[1][2][0];
	r0 += M4(-6.338e-02, 2.599e-02, -6.754e-03, -2.495e-02, 3.392e-02, -2.012e-01, -3.605e-02, 6.148e-02, 1.435e-01, 9.107e-02, 5.361e-03, 1.386e-01, -1.828e-01, 1.866e-01, -6.277e-02, -1.595e-01) * s[1][2][1];
	r1 += M4(-1.117e-01, -1.678e-02, -1.538e-02, 1.374e-02, -2.015e-02, -2.516e-02, -7.786e-02, 1.314e-01, -1.249e-01, 4.645e-02, -2.607e-01, -1.626e-01, -2.785e-01, -3.314e-01, 2.161e-01, -2.212e-01) * s[1][2][1];
	r0 += M4(2.446e-01, 5.009e-01, -3.696e-01, -5.590e-01, -4.028e-01, 3.841e-01, -1.163e-01, -1.303e-01, 5.794e-02, 1.556e-01, -8.712e-02, -5.257e-02, -5.741e-03, 1.431e-01, -1.387e-01, -5.142e-02) * s[2][0][0];
	r1 += M4(-7.693e-01, 3.131e-01, 1.284e+00, -6.558e-01, 5.052e-01, -3.069e-01, -3.047e-01, -2.134e-01, 8.475e-03, -1.227e-01, 1.539e-02, -2.306e-01, 5.894e-02, 6.102e-03, 1.555e-01, -3.331e-02) * s[2][0][0];
	r0 += M4(8.459e-02, -7.582e-02, 2.492e-01, -1.091e-01, -1.545e-01, 1.419e-01, -8.340e-02, 2.830e-02, 1.648e-01, 1.451e-01, -2.178e-01, -1.020e-02, 5.357e-02, 1.214e-01, -7.205e-02, 1.392e-01) * s[2][0][1];
	r1 += M4(-8.228e-02, 4.773e-02, 1.465e-02, 1.419e-03, 1.598e-01, 5.645e-03, 9.040e-02, -1.124e-01, 2.514e-01, -5.810e-02, -8.074e-02, -2.161e-01, -9.128e-02, -8.378e-02, 1.421e-01, 3.480e-02) * s[2][0][1];
	r0 += M4(1.653e+00, 7.562e-01, -6.171e-01, -7.898e-01, 1.754e-03, 5.270e-01, 1.653e-01, 4.801e-01, -7.164e-02, 1.221e-01, -2.913e-02, -5.916e-02, -1.198e-01, -6.266e-03, -6.421e-02, -6.268e-02) * s[2][1][0];
	r1 += M4(3.164e-01, 4.150e-01, -3.243e-01, -1.325e+00, 3.063e-01, -2.469e-01, -1.283e-01, -1.204e-01, -1.438e-01, 2.701e-02, 2.103e-01, 3.409e-02, -3.813e-01, 1.528e-01, 7.524e-02, 6.547e-03) * s[2][1][0];
	r0 += M4(-1.633e-01, 3.975e-02, 8.184e-02, 1.169e-02, 1.516e-01, 1.656e-01, -1.792e-02, 4.834e-02, -1.170e-01, 9.673e-02, -1.262e-01, -1.286e-02, -4.700e-02, -1.371e-02, -2.107e-02, -1.003e-01) * s[2][1][1];
	r1 += M4(1.165e-01, -1.517e-01, -2.858e-02, -6.167e-03, -1.721e-01, -9.595e-02, 7.590e-02, -7.453e-02, -1.518e-01, 1.673e-01, 1.327e-01, -1.881e-01, 4.700e-02, -2.026e-01, 1.850e-01, -1.390e-02) * s[2][1][1];
	r0 += M4(2.186e-01, -7.787e-01, -7.768e-02, 1.069e+00, 3.214e-01, 2.038e-01, 2.135e-02, 2.068e-01, 8.254e-02, -9.037e-02, 9.183e-03, -2.504e-02, -1.082e-01, 1.329e-01, 1.375e-02, -1.899e-01) * s[2][2][0];
	r1 += M4(-9.570e-01, 7.124e-02, -1.929e-01, 1.305e-01, -2.316e-01, -2.662e-01, -3.810e-01, -4.843e-01, 1.536e-01, -9.820e-02, 1.265e-01, 6.584e-02, 6.963e-02, 1.834e-01, 3.607e-01, 1.099e-01) * s[2][2][0];
	r0 += M4(2.104e-01, -1.172e-01, 6.569e-02, 1.052e-01, 2.947e-02, 6.708e-02, 5.926e-03, -1.090e-01, 1.607e-01, -7.614e-02, 1.115e-03, -1.251e-01, -1.139e-01, 3.320e-03, 8.876e-03, -2.868e-01) * s[2][2][1];
	r1 += M4(-4.824e-02, -6.824e-02, -2.180e-02, 5.012e-02, 1.775e-01, -6.311e-02, -1.127e-01, -1.626e-01, 5.730e-02, -5.821e-02, 1.093e-01, 7.500e-02, 9.234e-02, -1.173e-01, -1.343e-01, -2.092e-01) * s[2][2][1];
	s[0][0][0] = max(g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[1][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[1][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[1][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[1][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[1][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[1][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(1.926e-01, -7.682e-02, -3.601e-02, -6.923e-02, 8.953e-02, 1.746e-01, -1.388e-02, 5.615e-02, -2.085e-01, -9.753e-02, -3.443e-02, -5.617e-02, -1.944e-01, -2.559e-01, -5.280e-02, -2.309e-01) * s[0][0][0];
	r1 += M4(3.857e-02, -1.810e-02, 1.499e-01, 7.493e-02, 8.920e-02, -5.062e-02, -7.291e-02, -2.610e-01, -1.516e-01, 1.188e-01, 3.577e-02, 7.350e-02, 1.720e-01, -6.179e-02, 2.701e-02, 1.329e-01) * s[0][0][0];
	r0 += M4(1.590e-01, -4.755e-03, -2.932e-03, -7.786e-02, 1.102e-01, 1.219e-01, -7.981e-02, 1.432e-01, -2.016e-01, -1.509e-01, 3.409e-02, 8.805e-03, -1.076e-01, -5.199e-02, -2.130e-02, -1.261e-02) * s[0][0][1];
	r1 += M4(3.536e-01, -1.121e-02, -1.088e-01, 3.084e-01, 1.053e-01, -4.415e-01, -2.446e-01, -3.466e-01, -1.735e-01, 3.096e-01, 1.097e-01, 1.467e-01, -1.869e-01, 2.859e-01, 1.191e-01, 2.979e-01) * s[0][0][1];
	r0 += M4(1.732e-01, -1.462e-01, -5.431e-02, -1.687e-01, -2.669e-01, -2.700e-02, -1.489e-01, 3.172e-02, 1.585e-01, -1.887e-01, 9.789e-02, -3.864e-01, -2.928e-01, -1.460e-01, 1.147e-01, 3.078e-01) * s[0][1][0];
	r1 += M4(-1.563e-01, 6.614e-02, -2.091e-01, 2.315e-01, -9.643e-02, 3.053e-01, 3.720e-02, 1.213e-01, 2.607e-01, -4.481e-01, -3.324e-02, 8.144e-02, -1.929e-01, -2.882e-01, -1.128e-01, -2.607e-01) * s[0][1][0];
	r0 += M4(1.617e-01, 9.457e-02, -4.355e-02, -1.413e-01, 5.240e-02, -6.373e-02, 3.213e-02, -1.237e-01, 1.513e-01, -1.478e-01, 1.450e-01, 8.323e-02, -3.045e-01, 1.344e-01, 1.460e-01, -2.242e-01) * s[0][1][1];
	r1 += M4(1.539e-01, 2.878e-02, 2.318e-01, 3.186e-02, 4.832e-02, -1.618e-01, 3.727e-01, 3.050e-01, 3.483e-02, -2.135e-01, -9.836e-02, 2.597e-01, -1.108e-01, 5.137e-01, 8.454e-02, -2.911e-01) * s[0][1][1];
	r0 += M4(1.009e-01, -8.444e-02, 5.949e-02, -1.055e-01, -1.792e-01, 2.147e-01, -1.925e-02, -3.093e-02, 3.030e-02, 1.188e-02, -5.481e-02, 1.558e-01, -2.075e-01, -2.072e-01, -7.236e-02, 4.270e-01) * s[0][2][0];
	r1 += M4(7.250e-02, 7.026e-02, -2.901e-01, 4.126e-02, -7.307e-02, 7.542e-02, 3.098e-02, -2.551e-02, 1.091e-01, -1.541e-01, -2.066e-01, -2.062e-01, -1.151e-01, -3.225e-01, 1.391e-01, -1.033e-02) * s[0][2][0];
	r0 += M4(8.707e-02, -1.717e-02, 9.799e-02, -1.047e-02, 5.129e-02, -2.511e-01, -6.633e-02, 8.901e-01, 2.028e-02, 7.267e-02, -4.478e-02, -2.289e-01, -3.135e-01, 1.189e-01, -7.558e-02, 1.052e-01) * s[0][2][1];
	r1 += M4(2.630e-02, -1.201e-01, 2.417e-01, -1.664e-01, 7.464e-02, -5.363e-01, 2.515e-01, -3.936e-02, 4.022e-02, 2.592e-02, -1.117e-02, -2.250e-01, -6.783e-02, -5.337e-02, 3.290e-01, 2.888e-02) * s[0][2][1];
	r0 += M4(-1.579e-01, -4.433e-02, -4.554e-02, -9.903e-02, -3.759e-02, 5.040e-02, 1.060e-02, -1.177e-01, -7.939e-02, 1.181e-01, -3.146e-02, 1.063e-01, -1.391e-01, 2.739e-01, -6.663e-03, 2.084e-02) * s[1][0][0];
	r1 += M4(-9.933e-02, 7.345e-03, 4.437e-01, -1.104e-02, -1.111e-02, -7.185e-02, -1.845e-01, -1.204e-01, 2.234e-01, -3.010e-01, -8.623e-02, 2.765e-02, -4.516e-02, -3.311e-01, 4.282e-01, -8.795e-02) * s[1][0][0];
	r0 += M4(-2.182e-01, -4.780e-03, 1.033e-01, 3.080e-01, 1.528e-01, 1.008e-01, 1.992e-02, -1.750e-01, -7.422e-02, 2.228e-01, -2.689e-01, -3.954e-02, 1.394e-02, 1.193e-01, 7.409e-03, 9.138e-02) * s[1][0][1];
	r1 += M4(-2.263e-01, -1.981e-01, 1.608e-01, 1.925e-01, 3.135e-01, -1.617e-01, -1.515e-01, -9.456e-02, 1.732e-01, -1.162e-01, -1.756e-02, 7.294e-02, -1.390e-01, 1.933e-01, 3.796e-01, 9.686e-02) * s[1][0][1];
	r0 += M4(2.271e-01, -6.298e-03, -1.468e-01, -2.155e-01, -1.218e-01, 3.183e-01, 5.442e-03, -2.898e-02, -2.722e-01, -2.666e-01, -2.295e-01, 1.656e-01, 3.939e-01, 5.471e-02, 1.377e-03, -2.992e-01) * s[1][1][0];
	r1 += M4(1.323e-01, -2.907e-01, -2.005e-01, -7.800e-02, 1.875e-01, -1.789e-05, 1.292e-01, 3.696e-02, -1.724e-01, -1.606e-01, -2.584e-02, 2.179e-01, 2.031e-01, -2.111e-01, -6.467e-01, -1.166e-01) * s[1][1][0];
	r0 += M4(1.829e-01, 2.187e-01, -1.170e-01, -1.279e-01, -1.077e-02, -4.407e-01, 2.078e-01, 2.040e-01, -4.932e-01, 1.509e-01, -8.677e-03, -2.705e-02, 2.337e-01, -3.141e-02, 8.592e-02, -2.095e-01) * s[1][1][1];
	r1 += M4(3.344e-01, -4.090e-02, -2.609e-01, 9.364e-02, -2.874e-01, 1.080e-01, 4.947e-02, -1.176e-01, -5.522e-01, 6.303e-01, 1.780e-01, 2.182e-01, 2.105e-01, 1.506e-03, -6.778e-01, 1.559e-01) * s[1][1][1];
	r0 += M4(-3.426e-02, -5.517e-04, -1.545e-02, -1.179e-01, 9.647e-03, 8.846e-02, -8.825e-03, 1.047e-01, 5.768e-01, -3.344e-01, 9.418e-02, 7.098e-01, -6.859e-02, -1.516e-01, 5.506e-02, 9.652e-02) * s[1][2][0];
	r1 += M4(-1.147e-01, 8.416e-02, -2.551e-03, 1.629e-02, -1.623e-01, 1.288e-01, 1.029e-01, 1.538e-01, 2.178e-02, 3.524e-02, 9.014e-02, 3.967e-02, -5.102e-02, -1.987e-01, -3.958e-01, 1.577e-01) * s[1][2][0];
	r0 += M4(-5.028e-02, 6.582e-02, 2.422e-03, -5.042e-02, -1.785e-01, -6.746e-02, -2.455e-02, -4.497e-01, 1.470e-01, 2.901e-01, 1.072e-01, -8.216e-01, 1.024e-01, 2.282e-02, 4.510e-02, -1.101e-02) * s[1][2][1];
	r1 += M4(-1.851e-01, 3.426e-02, 3.175e-01, -2.724e-01, 2.606e-01, -1.565e-01, 2.647e-01, 1.306e-01, 1.290e-01, 3.687e-01, -3.488e-01, -1.080e-01, -2.038e-01, 1.007e-01, -2.605e-01, 3.509e-01) * s[1][2][1];
	r0 += M4(1.318e-02, 8.241e-02, -6.593e-02, -1.241e-03, 1.261e-01, -1.915e-01, 4.227e-02, 8.633e-02, 3.292e-02, 3.408e-01, -2.605e-03, 1.267e-01, 7.405e-02, -8.140e-04, -1.879e-01, 4.790e-02) * s[2][0][0];
	r1 += M4(1.241e-03, -2.224e-02, 1.632e-01, -1.708e-01, -4.672e-02, -1.120e-01, -5.109e-02, -6.358e-02, 7.307e-02, -4.587e-02, 3.063e-01, 5.663e-02, -4.166e-02, -1.986e-01, 2.972e-01, -1.016e-01) * s[2][0][0];
	r0 += M4(1.509e-01, 1.033e-01, 2.972e-02, 1.838e-01, -5.988e-03, 1.313e-02, -2.063e-02, 8.893e-02, 8.373e-02, 3.718e-02, -6.519e-02, -8.507e-02, 9.676e-03, 1.978e-01, -1.137e-01, 1.062e-01) * s[2][0][1];
	r1 += M4(-8.194e-02, 3.856e-02, -2.595e-01, -2.627e-01, 2.577e-01, -1.868e-01, -9.789e-02, -1.252e-02, -2.387e-02, 7.198e-03, 3.192e-03, 1.057e-01, -1.396e-01, 9.861e-02, 1.019e-01, 2.904e-02) * s[2][0][1];
	r0 += M4(2.684e-02, -2.981e-02, 5.985e-02, -1.661e-02, -1.089e-01, -1.623e-02, 4.764e-02, -1.726e-02, 1.633e-01, 4.274e-01, 2.376e-01, 3.226e-01, 3.054e-02, -2.793e-02, 1.858e-02, -7.889e-02) * s[2][1][0];
	r1 += M4(-1.933e-01, -9.819e-03, 4.667e-02, -1.069e-01, 1.055e-01, 1.338e-01, -2.948e-01, -2.855e-01, 4.608e-01, -2.876e-01, -1.986e-02, -2.829e-01, -1.668e-01, -1.916e-01, 4.491e-01, -1.171e-01) * s[2][1][0];
	r0 += M4(-3.383e-01, -5.258e-02, 8.275e-02, -2.580e-02, 1.280e-01, 1.012e-01, -4.710e-02, 2.253e-01, -1.693e-01, -5.051e-01, 1.317e-01, 7.362e-03, 1.314e-01, 2.844e-02, 2.797e-02, 8.187e-02) * s[2][1][1];
	r1 += M4(-4.786e-01, 6.252e-02, 1.637e-02, -1.765e-01, -9.900e-02, 1.423e-01, -5.456e-02, -1.714e-01, 2.917e-02, 4.573e-02, -5.136e-01, -4.117e-01, -2.438e-01, -3.451e-02, 1.990e-01, 1.091e-01) * s[2][1][1];
	r0 += M4(7.250e-02, -3.602e-02, 3.370e-02, 2.069e-02, -4.993e-02, 1.522e-01, 6.588e-02, -5.213e-03, 2.680e-01, -4.754e-02, -9.847e-02, 8.175e-01, -3.578e-02, 1.717e-02, -2.120e-02, -2.250e-01) * s[2][2][0];
	r1 += M4(-1.084e-01, -7.840e-02, 4.839e-02, 1.403e-01, -1.567e-02, 6.557e-03, -5.022e-02, 4.358e-04, 4.207e-01, -1.802e-01, 2.071e-01, -2.382e-01, 1.615e-01, -5.031e-02, 1.077e-01, -3.162e-01) * s[2][2][0];
	r0 += M4(5.495e-02, 7.679e-02, 3.684e-02, -3.302e-04, 5.144e-02, 1.764e-01, 5.094e-02, 2.306e-01, 3.565e-03, 6.504e-02, -8.277e-02, -3.374e-02, 2.240e-02, 1.955e-01, 3.228e-02, 3.574e-02) * s[2][2][1];
	r1 += M4(-1.509e-01, 1.598e-02, 1.617e-01, 3.297e-02, -1.678e-01, 6.343e-03, -1.321e-01, 2.253e-02, -1.051e-01, 3.648e-01, -2.354e-01, -7.346e-01, 6.585e-02, 1.105e-01, 8.344e-02, -1.281e-01) * s[2][2][1];
	r0 += V4(8.450e-03, -8.332e-03, 3.918e-01, -5.255e-02);
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(1.360e-02, 3.251e-02, -2.938e-02, -5.603e-02);
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-4x8C-DS-conv2
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv1
//!BIND LUMA
//!SAVE conv2
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(conv1_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0)) + vec2(0.5)) * conv1_pt))
#define l1(x, y) V4(conv1_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0)) + vec2(0.5)) * conv1_pt))
shared V4 g[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv1_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			g[0][ay][ax] = l0(x - 1, y - 1);
			g[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s[3][3][2];
	V4 r0 = V4(0.0);
	V4 r1 = V4(0.0);
	s[0][0][0] = max(g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[0][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[0][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[0][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[0][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[0][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[0][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(-5.374e-02, -1.333e-01, -1.618e-01, -8.759e-02, 1.863e-01, -5.578e-02, 2.046e-02, -6.907e-02, -1.426e-02, 4.129e-02, -6.470e-02, -2.166e-03, -1.275e-02, 8.324e-02, 1.665e-01, 5.024e-02) * s[0][0][0];
	r1 += M4(-3.626e-02, -2.472e-01, 8.282e-02, 4.703e-02, -1.579e-01, 1.218e-01, 3.057e-02, -1.278e-01, -1.382e-02, 1.421e-02, 3.242e-02, -4.084e-02, 2.903e-02, 2.152e-02, -8.821e-02, 4.077e-02) * s[0][0][0];
	r0 += M4(-9.812e-02, -2.640e-02, 2.173e-01, -4.354e-02, 1.409e-01, -6.913e-02, -2.366e-02, -1.326e-01, 6.828e-01, 3.146e-02, -2.303e-01, -2.598e-01, -1.856e-01, -3.233e-01, -2.760e-01, -8.028e-03) * s[0][0][1];
	r1 += M4(1.101e-01, -2.293e-02, 2.222e-01, 9.985e-02, -3.027e-02, 1.685e-02, -1.466e-01, -1.371e-02, -6.562e-02, -2.871e-02, 6.663e-01, 4.832e-01, -1.083e-01, 7.585e-02, 9.011e-03, -6.764e-02) * s[0][0][1];
	r0 += M4(-2.186e-02, -1.441e-01, 1.196e-01, 8.423e-02, 2.994e-02, 1.174e-01, 1.322e-01, 8.594e-02, -3.742e-02, -6.761e-02, -5.909e-02, -4.711e-03, 1.959e-02, -6.618e-02, 6.538e-02, 4.093e-02) * s[0][1][0];
	r1 += M4(8.911e-02, 7.848e-02, 1.049e-01, -1.318e-01, 1.820e-02, 6.001e-02, 1.815e-01, -1.601e-01, 8.350e-03, -1.417e-01, -3.467e-03, 6.953e-03, 4.742e-02, -3.464e-02, 1.167e-01, 1.165e-01) * s[0][1][0];
	r0 += M4(4.093e-02, -1.400e-01, 1.371e-02, 2.814e-02, 4.550e-02, 8.635e-02, 1.968e-01, 2.603e-01, -5.974e-02, 2.231e-02, 7.327e-01, 1.881e+00, 5.415e-04, -4.489e-01, -6.757e-02, 2.656e-02) * s[0][1][1];
	r1 += M4(7.093e-02, -3.115e-01, 1.430e-02, -1.100e-01, 8.530e-02, 3.242e-01, 1.240e-01, -8.461e-02, 2.837e-01, -7.846e-01, 1.797e+00, 7.590e-01, -3.577e-02, -9.255e-02, 1.275e-01, 1.242e-01) * s[0][1][1];
	r0 += M4(-1.126e-02, 1.724e-01, -4.813e-02, 1.848e-01, -1.005e-01, 6.215e-03, -2.960e-01, -1.543e-01, 1.251e-02, -5.184e-02, -7.418e-02, 7.276e-02, -1.579e-02, -5.115e-02, -1.127e-01, -7.272e-02) * s[0][2][0];
	r1 += M4(-1.235e-01, 9.521e-02, 3.237e-02, -2.788e-02, -6.050e-02, -1.160e-01, -1.354e-01, -1.984e-01, 1.028e-01, -1.667e-02, -8.974e-04, 3.991e-02, 2.336e-02, -3.103e-02, -8.357e-02, 1.909e-03) * s[0][2][0];
	r0 += M4(-3.829e-02, 1.701e-01, -7.316e-03, 8.214e-02, -1.304e-01, 1.546e-01, -2.235e-01, 1.988e-03, 9.192e-01, -1.851e+00, 8.396e-01, 3.254e-01, 1.656e-02, -2.529e-01, -2.422e-01, -4.798e-02) * s[0][2][1];
	r1 += M4(-5.066e-02, 2.120e-01, 2.641e-02, -1.800e-02, -4.845e-02, -7.342e-02, 5.626e-02, -2.809e-02, -3.532e-01, -8.409e-01, 1.684e+00, 5.411e-01, 1.993e-01, -5.664e-02, -1.002e-01, -3.575e-02) * s[0][2][1];
	r0 += M4(-3.786e-01, -2.469e-01, -1.885e-01, 5.244e-02, 5.475e-02, -1.397e-01, 9.216e-03, -2.763e-02, 2.898e-02, -3.845e-02, -1.551e-02, 6.307e-03, -1.693e-02, -5.797e-02, 3.722e-02, 7.204e-02) * s[1][0][0];
	r1 += M4(-2.146e-02, 1.940e-01, -7.571e-02, 1.918e-01, -8.614e-02, -6.518e-02, -3.781e-04, -2.952e-01, 7.603e-02, 6.211e-02, 1.480e-02, -2.837e-02, -3.696e-02, -1.003e-01, -1.089e-01, 1.294e-01) * s[1][0][0];
	r0 += M4(-3.424e-01, 1.358e-01, 2.650e-02, 1.968e-01, 2.069e-01, -8.925e-02, 4.285e-02, 1.588e-03, -1.623e-01, 4.248e-01, 2.696e-01, 1.170e-01, -2.619e-01, -2.918e-01, -3.456e-01, 3.213e-01) * s[1][0][1];
	r1 += M4(1.606e-01, 1.827e-01, 6.081e-02, 6.795e-02, 7.187e-02, -2.311e-02, -2.436e-03, -7.147e-02, -2.773e-02, 5.052e-03, 2.607e-01, 1.363e-01, -2.823e-02, -4.512e-02, -1.148e-01, -2.233e-02) * s[1][0][1];
	r0 += M4(4.661e-01, 7.772e-02, -2.457e-01, 4.270e-01, -1.510e-02, 1.048e-01, -4.520e-01, 2.604e-01, -4.503e-02, 4.935e-02, 4.305e-02, 1.156e-02, 7.272e-03, -1.304e-02, -2.928e-01, 6.705e-02) * s[1][1][0];
	r1 += M4(2.220e-01, -5.313e-01, -2.958e-01, -3.072e-01, -1.034e-01, 4.238e-03, 1.107e-01, -4.566e-01, -8.404e-02, 4.540e-02, -7.075e-02, -5.409e-02, 1.394e-01, 1.495e-01, 2.388e-01, -8.084e-02) * s[1][1][0];
	r0 += M4(2.181e-01, 3.285e-01, 1.846e-01, 7.890e-02, 2.959e-01, 1.846e-01, 1.632e-01, 3.074e-01, -5.130e-01, 9.561e-01, 1.181e+00, 6.412e-01, -1.121e-01, -2.572e-01, -2.707e-01, 1.004e-01) * s[1][1][1];
	r1 += M4(-1.499e-01, -4.189e-01, -3.373e-01, -3.989e-01, 4.050e-03, -2.827e-01, 3.970e-01, 1.180e-02, -4.635e-01, 8.739e-02, 1.875e+00, -8.717e-01, -1.146e-01, 1.023e-01, 6.816e-02, 4.145e-02) * s[1][1][1];
	r0 += M4(-3.077e-03, -2.180e-03, -1.283e-01, 6.829e-02, -7.183e-02, 7.183e-02, -9.523e-02, -2.163e-01, -4.733e-02, -6.539e-02, 8.410e-02, -2.495e-02, -4.262e-02, -5.755e-02, 1.352e-01, -4.309e-02) * s[1][2][0];
	r1 += M4(1.342e-01, -1.998e-01, -9.922e-02, -9.741e-02, -4.979e-02, 1.370e-01, -8.601e-02, -1.418e-01, -8.690e-02, -4.704e-02, 1.074e-02, -5.517e-02, -2.816e-02, 3.688e-02, -1.211e-02, 3.441e-02) * s[1][2][0];
	r0 += M4(1.417e-01, 2.526e-01, -2.362e-01, -4.400e-02, 4.517e-02, -1.900e-01, 2.222e-01, -9.189e-02, 2.522e+00, -7.619e-01, 1.090e+00, 5.217e-01, -4.981e-02, -2.390e-01, -7.114e-02, 8.759e-03) * s[1][2][1];
	r1 += M4(-1.625e-01, 6.219e-02, 6.410e-02, -2.177e-01, -1.707e-04, 3.185e-02, -1.322e-01, 1.222e-01, -3.986e+00, -1.523e+00, 1.226e+00, -1.336e+00, 8.528e-02, -4.348e-02, -2.443e-01, -2.135e-02) * s[1][2][1];
	r0 += M4(-1.755e-01, -1.093e-01, -1.731e-01, -9.335e-03, 8.849e-02, 1.601e-02, -4.842e-02, -6.973e-02, -6.642e-03, 9.821e-03, 2.981e-02, 5.785e-03, -4.364e-03, -6.090e-02, -4.370e-02, -1.724e-01) * s[2][0][0];
	r1 += M4(-3.039e-02, -9.794e-02, -1.208e-01, 9.591e-02, -1.170e-01, -1.002e-01, 5.149e-02, -9.187e-02, 2.310e-03, -2.524e-02, -3.611e-02, -1.493e-02, 9.062e-02, 1.457e-01, 5.592e-02, 1.666e-02) * s[2][0][0];
	r0 += M4(-1.874e-01, 2.495e-01, 2.706e-01, 4.795e-03, 4.542e-02, 1.047e-01, 5.703e-03, -4.563e-02, 3.387e-01, 5.894e-01, 3.075e-01, -3.541e-01, -1.949e-01, -2.529e-01, -3.051e-01, 4.896e-02) * s[2][0][1];
	r1 += M4(-2.110e-01, -8.639e-02, 1.861e-01, 3.743e-02, -2.662e-02, -1.088e-01, -1.412e-02, -3.576e-02, -6.583e-01, -7.054e-01, 5.361e-01, 5.330e-01, -7.508e-02, 1.065e-01, -1.318e-01, -2.502e-02) * s[2][0][1];
	r0 += M4(-2.169e-01, -3.857e-02, -3.271e-01, 2.013e-02, -6.623e-02, -9.827e-02, 1.999e-01, 1.631e-01, 3.770e-02, 3.302e-02, 3.334e-02, -2.372e-02, -5.361e-02, 6.499e-02, 1.761e-01, -3.503e-03) * s[2][1][0];
	r1 += M4(3.482e-02, -7.394e-02, -1.209e-01, 1.195e-01, 2.349e-01, -1.047e-01, -8.152e-02, -7.409e-02, -1.225e-02, -2.751e-02, 5.969e-02, 1.043e-04, 8.171e-02, 1.479e-01, -7.017e-03, -6.043e-03) * s[2][1][0];
	r0 += M4(1.388e-01, 3.301e-01, 1.989e-01, 2.381e-01, -7.355e-02, 6.725e-02, -2.193e-01, -2.586e-02, 1.986e-01, 3.579e-01, 3.837e-01, 5.988e-01, 6.039e-02, -2.363e-01, -1.130e-01, 2.239e-02) * s[2][1][1];
	r1 += M4(-1.541e-01, 1.762e-01, 1.600e-01, -4.871e-03, 6.014e-02, -1.422e-01, -3.140e-02, -7.063e-02, -3.322e-01, 1.078e-02, 1.117e+00, -2.456e-01, -9.816e-02, -7.293e-02, -2.167e-01, 1.353e-01) * s[2][1][1];
	r0 += M4(-7.950e-02, -1.159e-01, -1.404e-01, 5.717e-02, -1.173e-01, -1.139e-01, -1.251e-01, 4.794e-03, 2.308e-02, 5.939e-02, -3.790e-02, -8.840e-02, 8.228e-02, 3.603e-02, 1.451e-01, 1.278e-02) * s[2][2][0];
	r1 += M4(4.293e-02, -4.141e-02, 9.711e-02, 2.984e-02, 1.429e-02, -7.081e-02, -9.444e-02, -1.535e-01, -1.494e-02, 6.844e-02, 4.268e-02, 1.470e-02, -3.147e-02, 4.177e-02, -5.313e-03, 2.135e-02) * s[2][2][0];
	r0 += M4(-1.664e-01, 7.787e-02, 1.125e-01, 4.657e-03, -1.687e-02, -6.861e-02, -8.308e-02, -1.122e-01, 7.185e-01, 1.191e+00, -1.933e-01, 6.235e-02, 1.323e-01, 3.016e-03, -5.278e-02, 8.034e-02) * s[2][2][1];
	r1 += M4(-2.702e-02, 1.379e-01, 2.183e-01, 5.806e-03, 3.332e-02, -1.265e-01, -3.340e-03, -9.445e-03, -2.159e+00, 7.132e-01, 1.892e+00, 5.818e-02, -5.462e-02, 2.215e-04, -9.050e-02, -2.058e-02) * s[2][2][1];
	s[0][0][0] = max(g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[1][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[1][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[1][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[1][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[1][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[1][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(-8.328e-02, 1.149e-01, 6.058e-02, -1.396e-02, -5.556e-02, 9.988e-02, 9.399e-02, -1.065e-02, -8.776e-02, 9.236e-02, 1.589e-01, -9.313e-03, 5.188e-02, -1.015e-01, -1.139e-01, -1.751e-01) * s[0][0][0];
	r1 += M4(1.017e-01, -1.310e-01, 7.683e-02, -4.369e-02, -1.947e-02, -1.721e-01, 5.338e-02, -2.048e-02, 3.773e-02, 2.413e-02, -5.517e-02, 4.691e-02, -1.890e-01, 2.754e-01, 4.194e-02, -1.323e-01) * s[0][0][0];
	r0 += M4(-5.838e-02, 1.887e-01, 1.010e-01, -2.978e-01, -1.024e-01, -6.450e-02, -1.667e-01, 8.620e-03, -9.281e-02, 1.584e-01, -2.560e-01, -1.440e-01, 1.632e-01, 5.989e-02, -6.956e-02, -1.358e-01) * s[0][0][1];
	r1 += M4(1.973e-01, 1.802e-01, 4.790e-02, -5.241e-02, -1.230e-02, -3.077e-01, 1.527e-02, 1.326e-02, 1.718e-02, -3.219e-02, 4.680e-02, -1.222e-01, -2.126e-01, 3.237e-01, -1.606e-01, -5.097e-02) * s[0][0][1];
	r0 += M4(8.577e-02, -2.065e-01, -2.925e-01, -2.745e-01, -6.859e-02, 4.160e-03, -1.790e-01, -2.628e-01, 4.959e-02, 8.824e-02, 4.643e-02, 3.089e-02, 1.524e-01, 3.394e-01, -5.546e-02, 6.810e-04) * s[0][1][0];
	r1 += M4(-8.480e-03, 2.852e-02, 2.367e-01, -3.426e-03, 8.710e-02, 1.189e-01, 6.506e-02, -6.811e-03, -3.992e-02, 5.726e-02, 8.415e-02, 1.813e-02, -1.192e-01, 3.319e-02, 1.302e-01, -2.959e-01) * s[0][1][0];
	r0 += M4(7.219e-02, -3.771e-01, -2.310e-01, -4.541e-01, -1.018e-01, 9.741e-02, 5.750e-02, -7.971e-02, 1.420e-02, 6.656e-02, -2.016e-01, -8.700e-02, 1.827e-02, 4.499e-01, -8.719e-02, 2.022e-01) * s[0][1][1];
	r1 += M4(2.049e-02, 3.556e-01, 3.946e-01, -4.735e-02, -2.756e-03, -3.193e-01, -1.108e-01, -3.140e-02, 4.875e-02, -1.821e-01, 1.743e-01, -2.272e-01, -6.714e-02, -1.252e-02, -3.237e-02, -2.588e-01) * s[0][1][1];
	r0 += M4(-8.191e-02, -5.659e-02, -7.072e-02, -2.069e-01, 2.609e-02, -1.257e-01, -3.415e-02, -5.941e-02, -5.217e-02, 3.008e-02, 1.715e-02, 3.506e-02, -6.830e-02, 1.127e-01, -3.282e-02, -8.866e-02) * s[0][2][0];
	r1 += M4(-1.419e-02, 4.500e-02, 2.960e-02, -1.194e-01, 8.332e-02, -2.968e-01, 1.179e-01, 5.736e-03, -2.688e-02, -7.387e-02, 1.321e-02, 3.211e-02, -7.105e-02, 8.361e-03, -4.464e-02, -9.076e-02) * s[0][2][0];
	r0 += M4(5.809e-02, -1.742e-01, 1.622e-01, -2.052e-01, 2.504e-02, -1.801e-02, 9.451e-02, 5.537e-02, -7.717e-02, 2.168e-02, -2.595e-01, -6.080e-02, -4.042e-02, 7.494e-03, -2.445e-02, 2.898e-02) * s[0][2][1];
	r1 += M4(-6.633e-02, -2.142e-02, -1.702e-01, 7.800e-02, 8.886e-02, -2.128e-01, 8.781e-03, 1.069e-02, -8.714e-02, 1.089e-02, 1.062e-01, -1.824e-01, -9.117e-02, -2.657e-01, -5.276e-02, -4.404e-02) * s[0][2][1];
	r0 += M4(-1.704e-01, 1.233e-01, 1.235e-01, 1.150e-02, -1.430e-01, -2.415e-02, -1.064e-01, -2.406e-02, 8.584e-02, 9.691e-02, 1.258e-01, 5.452e-02, 3.450e-01, 1.712e-01, 7.394e-03, -2.605e-01) * s[1][0][0];
	r1 += M4(9.232e-02, -4.332e-02, 1.417e-01, 6.095e-02, 1.996e-01, -1.777e-01, -1.717e-02, 2.992e-02, -1.067e-01, 1.392e-01, -3.974e-02, 1.681e-01, -1.311e-01, -6.853e-02, -2.992e-02, -3.800e-01) * s[1][0][0];
	r0 += M4(-3.231e-01, 1.588e-01, 9.199e-02, -9.483e-02, -2.269e-02, 5.361e-02, -7.841e-02, 1.569e-02, -1.594e-01, 2.789e-01, 8.935e-02, 3.598e-02, 6.398e-02, 1.433e-01, 1.111e-01, -5.557e-02) * s[1][0][1];
	r1 += M4(-5.165e-02, 2.746e-01, -1.382e-02, 4.731e-02, 1.166e-01, -1.460e-01, 1.730e-01, -1.064e-02, -1.988e-01, 1.588e-01, 1.743e-01, -1.106e-01, -1.900e-01, -1.080e-01, 9.678e-02, -2.311e-01) * s[1][0][1];
	r0 += M4(1.027e-01, -2.237e-02, -1.423e-02, -1.763e-01, -2.416e-01, -1.790e-01, -3.321e-02, -5.377e-02, 3.414e-02, 1.234e-01, 2.963e-01, -6.432e-02, 1.538e-01, -2.571e-01, -2.254e-01, -1.570e-02) * s[1][1][0];
	r1 += M4(-5.180e-02, 4.967e-02, -2.229e-02, -2.752e-01, 3.329e-02, 5.491e-01, 2.749e-01, 3.074e-02, -8.806e-02, -3.123e-02, 1.829e-02, 1.652e-01, -1.814e-01, -1.301e-01, -3.100e-01, 3.281e-01) * s[1][1][0];
	r0 += M4(2.881e-01, -1.572e-01, -7.605e-03, -4.804e-01, -2.154e-01, -4.050e-01, 3.149e-01, 3.080e-02, -2.368e-01, 6.851e-02, -3.643e-01, -4.578e-02, -3.871e-01, -5.576e-01, -1.373e-01, -5.756e-01) * s[1][1][1];
	r1 += M4(-3.544e-01, 2.979e-01, -6.893e-02, -2.409e-01, 1.791e-01, -4.471e-02, -2.647e-03, 3.556e-01, -4.852e-02, 3.539e-02, 7.045e-02, -2.308e-01, -3.311e-01, -2.560e-01, -4.065e-01, 5.831e-02) * s[1][1][1];
	r0 += M4(-2.080e-01, -4.814e-03, 5.261e-02, -7.345e-02, -1.915e-02, 7.058e-02, -5.754e-03, 5.340e-02, -5.632e-02, 1.188e-02, 1.752e-02, 1.746e-02, 6.749e-03, 6.612e-02, 2.932e-02, 6.945e-02) * s[1][2][0];
	r1 += M4(-1.893e-01, -7.808e-02, -3.445e-04, -2.523e-02, -4.932e-02, 9.151e-02, 1.036e-01, 5.985e-02, 8.629e-02, -5.863e-02, -6.187e-02, 1.227e-01, 4.106e-02, 1.052e-01, 1.269e-01, 9.253e-02) * s[1][2][0];
	r0 += M4(-2.698e-01, -1.020e-01, 1.819e-01, -2.590e-01, 2.841e-02, 5.530e-02, -6.985e-02, -1.996e-01, -1.235e-01, -6.471e-02, -3.252e-01, -1.544e-01, -6.939e-03, -5.476e-02, -1.054e-01, 2.463e-02) * s[1][2][1];
	r1 += M4(-1.846e-01, 1.503e-01, -1.407e-01, 1.057e-01, -8.771e-02, -7.089e-02, 1.504e-02, 2.516e-02, 3.994e-02, -1.265e-01, -8.148e-02, -1.528e-01, 8.783e-02, -2.070e-02, -5.777e-02, 8.587e-03) * s[1][2][1];
	r0 += M4(-1.092e-01, -2.087e-02, -6.392e-02, 4.246e-02, -8.869e-02, 7.969e-02, 1.773e-02, -3.774e-02, -4.080e-02, -2.789e-02, 5.182e-02, 5.262e-02, 1.194e-01, 5.543e-02, 3.913e-02, -1.337e-01) * s[2][0][0];
	r1 += M4(1.344e-01, 3.317e-02, 7.037e-03, 5.148e-03, 1.154e-01, 7.451e-03, 5.849e-03, 2.730e-02, 4.318e-03, 4.058e-02, -4.465e-02, -1.896e-04, 8.687e-02, 3.608e-02, -2.072e-03, -4.894e-02) * s[2][0][0];
	r0 += M4(2.406e-02, 7.303e-02, -2.197e-02, -1.202e-01, -1.353e-01, 8.410e-02, -1.687e-02, 4.895e-02, -7.321e-02, -8.450e-03, -7.552e-02, 1.313e-01, 9.766e-02, 3.919e-02, 1.106e-02, -6.929e-02) * s[2][0][1];
	r1 += M4(1.340e-02, -1.149e-01, 1.090e-02, 2.214e-02, -6.979e-02, -2.294e-01, 1.204e-01, 2.286e-02, 5.914e-03, 5.542e-02, -4.567e-02, -9.701e-02, -5.247e-02, -1.807e-01, 1.606e-01, -5.720e-02) * s[2][0][1];
	r0 += M4(1.996e-01, 7.572e-02, 2.392e-02, 8.081e-03, 3.108e-01, 1.200e-01, 6.711e-02, 1.706e-02, 1.789e-01, 1.455e-02, 1.840e-01, 5.013e-02, -3.689e-02, 1.075e-01, 1.297e-01, -9.549e-02) * s[2][1][0];
	r1 += M4(-1.883e-02, -8.375e-02, 1.079e-01, -1.238e-01, 2.880e-02, -4.233e-02, 1.489e-01, -4.293e-02, -1.613e-01, 1.515e-02, -6.879e-02, 1.621e-01, 9.351e-02, -9.890e-02, -3.395e-02, -2.155e-02) * s[2][1][0];
	r0 += M4(2.337e-01, 1.008e-03, 2.853e-02, -1.557e-01, 1.595e-01, 2.137e-01, 6.765e-02, 2.092e-02, 1.243e-01, -4.026e-02, -1.084e-01, -2.519e-02, -1.048e-01, 6.250e-02, -7.460e-02, -1.500e-02) * s[2][1][1];
	r1 += M4(6.910e-02, -7.206e-02, 8.865e-02, -3.120e-02, 1.038e-01, -7.941e-02, -4.972e-02, -9.738e-02, -1.975e-01, 1.400e-01, -3.339e-02, -1.056e-01, 1.115e-01, -2.191e-01, 4.542e-02, -7.247e-02) * s[2][1][1];
	r0 += M4(1.267e-01, 1.017e-01, 4.718e-02, -1.010e-01, 7.725e-02, 2.114e-01, -1.989e-01, -1.313e-01, 6.244e-03, 6.028e-02, 1.247e-01, 9.786e-02, 1.929e-02, -4.002e-03, -8.787e-02, -8.988e-02) * s[2][2][0];
	r1 += M4(7.284e-02, -3.232e-02, 5.527e-02, -2.559e-02, 5.003e-02, -1.056e-02, -1.057e-01, -1.335e-01, -1.633e-02, 4.474e-02, 6.763e-02, 2.163e-01, 3.772e-02, -1.220e-02, 6.564e-02, -6.812e-02) * s[2][2][0];
	r0 += M4(1.393e-01, 1.374e-01, 2.063e-01, -1.606e-01, -7.824e-02, -1.583e-02, -5.576e-02, 8.817e-02, -5.807e-02, -1.065e-02, -1.957e-01, 2.796e-02, -8.519e-03, -5.378e-02, -7.459e-03, -1.102e-02) * s[2][2][1];
	r1 += M4(9.173e-02, 1.151e-01, -2.294e-02, -1.553e-02, -5.896e-03, 6.447e-02, -2.632e-02, 2.100e-03, -2.903e-03, 6.463e-02, 4.188e-03, 1.396e-02, 4.340e-02, -1.331e-01, 3.822e-02, -1.180e-01) * s[2][2][1];
	r0 += V4(2.910e-02, -1.191e-02, 2.178e-03, -6.646e-02);
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-1.007e-02, 1.776e-02, -2.867e-02, 2.410e-02);
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-4x8C-DS-conv3
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv2
//!BIND LUMA
//!SAVE conv3
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(conv2_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0)) + vec2(0.5)) * conv2_pt))
#define l1(x, y) V4(conv2_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0)) + vec2(0.5)) * conv2_pt))
shared V4 g[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv2_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			g[0][ay][ax] = l0(x - 1, y - 1);
			g[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s[3][3][2];
	V4 r0 = V4(0.0);
	V4 r1 = V4(0.0);
	s[0][0][0] = max(g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[0][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[0][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[0][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[0][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[0][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[0][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(-7.505e-02, 2.351e-02, -1.667e-02, 1.447e-01, -5.473e-02, 9.870e-02, 1.642e-01, -4.352e-02, -2.378e-01, -1.101e-01, -1.453e-01, 3.536e-02, -2.171e-02, 8.069e-02, -3.255e-02, 2.084e-01) * s[0][0][0];
	r1 += M4(1.013e-01, 2.460e-02, 2.000e-01, 1.268e-02, 1.229e-01, 1.998e-02, 2.905e-02, 7.783e-02, 5.901e-02, -1.118e-02, -2.095e-01, -1.400e-02, -1.030e-01, -1.224e-01, 2.097e-01, -2.296e-01) * s[0][0][0];
	r0 += M4(-8.955e-03, -1.569e-02, 1.263e-02, 1.303e-01, -2.037e-01, 2.310e-01, 7.153e-02, -1.382e-01, 1.650e-01, -6.959e-02, -9.094e-02, 1.506e-01, -6.499e-02, 3.929e-03, -6.620e-02, 7.153e-02) * s[0][0][1];
	r1 += M4(8.898e-02, 8.085e-02, -7.870e-02, 5.720e-02, 9.888e-02, -1.047e-01, -1.265e-01, -5.455e-02, -9.708e-02, 3.219e-02, 7.100e-02, -8.293e-03, -5.362e-02, 1.278e-01, 1.219e-01, -5.128e-02) * s[0][0][1];
	r0 += M4(3.272e-01, -4.346e-01, -1.401e-01, 3.155e-01, 5.669e-02, -1.019e-02, 1.260e-01, 1.001e-01, -2.159e-01, -2.487e-01, -3.357e-01, -1.159e-01, -4.232e-03, 6.871e-02, -9.697e-02, 3.239e-01) * s[0][1][0];
	r1 += M4(2.622e-03, 1.184e-02, 8.713e-02, 3.104e-01, 8.536e-02, -7.015e-02, 6.574e-02, 9.879e-02, 7.689e-02, -7.995e-02, -2.301e-01, -1.170e-01, 1.157e-02, -7.911e-01, -5.818e-02, -2.772e-01) * s[0][1][0];
	r0 += M4(-1.091e-01, -2.753e-01, -3.800e-02, 1.121e-01, -1.756e-01, 5.722e-02, 2.931e-02, 7.654e-02, 1.386e-01, -6.622e-02, -2.301e-02, 1.129e-01, -7.924e-03, -1.831e-01, 9.653e-04, 1.944e-01) * s[0][1][1];
	r1 += M4(-3.995e-02, -1.073e-01, -2.626e-01, 2.803e-01, 4.374e-02, -1.134e-01, 1.373e-01, 3.105e-02, -2.813e-01, -2.004e-02, 1.535e-01, -1.113e-01, 8.141e-03, -1.824e-02, -2.026e-02, -4.434e-02) * s[0][1][1];
	r0 += M4(-4.616e-03, -1.292e-01, -1.520e-01, 8.307e-02, 1.294e-01, -2.532e-02, -1.782e-03, 1.056e-01, -9.740e-02, -6.603e-02, -1.383e-01, -1.033e-02, 3.213e-01, -3.240e-02, 4.809e-02, 2.409e-01) * s[0][2][0];
	r1 += M4(-7.545e-02, 6.192e-02, -7.041e-02, 5.302e-02, -3.780e-02, -7.216e-02, -8.831e-02, 1.003e-02, 1.122e-01, 1.445e-01, 1.771e-01, -1.246e-01, -3.811e-02, -3.781e-01, 1.152e-01, -8.291e-02) * s[0][2][0];
	r0 += M4(-2.077e-01, 1.358e-03, 5.114e-02, -4.368e-02, -2.903e-02, 2.527e-02, 2.121e-02, 8.560e-02, -8.145e-03, 9.350e-02, 2.084e-02, 7.498e-03, 1.456e-01, -3.382e-02, -1.078e-01, -2.384e-02) * s[0][2][1];
	r1 += M4(-3.865e-02, 1.204e-01, -1.106e-01, -5.490e-02, 7.668e-02, -5.751e-03, 6.601e-03, -1.173e-03, -1.060e-01, -3.326e-02, 3.662e-02, -1.406e-01, -5.954e-02, -3.868e-02, 6.286e-02, 1.420e-02) * s[0][2][1];
	r0 += M4(8.276e-02, 2.190e-01, 1.178e-01, -1.641e-01, -5.634e-02, 3.835e-02, -1.265e-01, -2.274e-01, -1.470e-01, -3.018e-01, -1.473e-01, -9.647e-02, 1.046e-01, 5.328e-01, 2.163e-01, -4.159e-02) * s[1][0][0];
	r1 += M4(4.595e-02, -9.811e-02, 1.231e-01, 2.581e-01, -1.102e-02, -3.028e-02, -2.437e-01, -2.292e-02, 2.529e-01, 8.144e-02, -2.333e-01, 1.327e-01, -1.232e-02, -1.091e-01, -3.776e-03, 4.871e-02) * s[1][0][0];
	r0 += M4(-6.097e-03, 3.509e-02, 1.077e-01, -8.828e-02, -3.735e-01, -1.778e-01, -3.163e-01, -1.460e-01, 2.822e-01, -6.207e-02, 5.185e-02, 6.723e-02, -7.405e-03, 1.440e-01, 8.116e-02, 4.445e-03) * s[1][0][1];
	r1 += M4(1.023e-02, -3.133e-02, -1.938e-01, 8.726e-02, 1.438e-01, -1.553e-01, -2.693e-01, 5.740e-03, 4.266e-03, -1.385e-02, 1.877e-02, -1.369e-01, 1.766e-02, 9.157e-02, -6.321e-02, 1.328e-01) * s[1][0][1];
	r0 += M4(4.205e-01, 8.582e-03, 2.384e-01, 1.671e-01, 3.345e-02, 6.919e-02, 2.186e-02, -2.465e-01, -1.947e-01, -8.028e-02, -2.684e-01, 1.514e-02, -2.845e-01, 1.692e-01, 2.201e-01, -1.043e+00) * s[1][1][0];
	r1 += M4(1.311e-01, -1.471e-01, 1.919e-01, 1.648e-01, 6.066e-02, 2.182e-01, 1.115e-01, 5.442e-02, 1.083e-01, 2.042e-01, 1.699e-01, 1.120e-02, 8.656e-01, -1.592e+00, -4.210e-01, -1.854e-01) * s[1][1][0];
	r0 += M4(8.705e-02, -3.203e-01, 3.248e-01, -3.193e-01, -4.551e-01, -1.013e-01, -6.983e-02, -1.099e-01, 3.025e-02, 1.662e-02, 6.711e-02, 1.347e-02, -1.455e-01, 1.130e-01, -4.011e-02, -4.511e-01) * s[1][1][1];
	r1 += M4(1.884e-01, -4.131e-01, 1.631e-01, 3.107e-01, 3.837e-01, 3.290e-01, 1.301e-01, 1.415e-01, -8.178e-02, 1.217e-01, 2.612e-01, 1.987e-02, 2.163e-01, -9.573e-02, -1.415e-01, 3.437e-02) * s[1][1][1];
	r0 += M4(-7.760e-02, -8.172e-02, 3.747e-02, 2.001e-01, -1.564e-02, 9.094e-02, 8.351e-02, 2.233e-02, -1.197e-01, -1.383e-01, -8.791e-02, -2.072e-01, 4.424e-01, 9.310e-02, 1.834e-01, 1.957e-01) * s[1][2][0];
	r1 += M4(3.235e-02, -7.525e-03, -1.082e-01, 4.942e-02, -6.535e-02, -4.857e-02, -1.765e-01, 3.365e-03, 8.709e-02, 7.553e-02, 4.001e-02, 1.502e-01, -5.949e-02, -3.812e-01, 2.390e-01, 7.461e-02) * s[1][2][0];
	r0 += M4(-1.284e-01, -1.323e-01, 9.795e-02, 2.435e-02, 4.064e-02, 1.008e-01, -7.311e-02, 1.580e-02, -1.488e-03, -5.093e-03, -6.587e-03, -3.203e-02, 4.846e-02, 5.123e-02, -3.005e-02, 6.784e-02) * s[1][2][1];
	r1 += M4(-5.444e-02, 1.786e-01, -3.351e-01, 2.432e-02, -4.481e-02, 1.160e-01, 1.304e-01, -6.519e-02, -8.765e-02, 1.784e-03, 1.162e-02, -6.669e-02, -7.344e-02, 7.202e-02, 7.055e-02, 4.877e-02) * s[1][2][1];
	r0 += M4(-1.033e-02, 5.779e-02, -5.792e-02, -1.758e-01, -1.007e-01, -9.277e-03, 8.423e-02, 2.113e-02, -1.243e-01, -2.667e-01, -7.439e-02, -7.006e-02, -1.546e-04, 2.107e-02, 5.842e-02, -6.529e-02) * s[2][0][0];
	r1 += M4(1.800e-02, 4.837e-02, -1.300e-02, 9.989e-02, -1.207e-01, -4.731e-02, -8.817e-02, 5.701e-02, 1.044e-01, -5.942e-02, -3.461e-01, 8.636e-02, -7.706e-04, -1.988e-02, 2.564e-01, -3.052e-02) * s[2][0][0];
	r0 += M4(4.857e-03, -1.703e-03, 6.869e-03, -1.627e-02, -1.125e-01, -4.955e-02, -1.090e-02, -5.235e-02, 6.160e-02, -7.319e-02, 3.196e-02, 1.295e-01, -1.782e-02, -2.546e-03, -3.017e-02, -1.192e-01) * s[2][0][1];
	r1 += M4(-5.044e-02, 7.689e-02, 4.973e-02, 2.599e-02, -6.868e-02, -5.929e-02, 1.017e-01, 5.507e-02, 1.624e-02, -7.349e-02, -5.410e-02, -1.442e-01, -1.010e-02, -2.822e-02, -5.705e-02, 4.277e-02) * s[2][0][1];
	r0 += M4(3.721e-03, 4.690e-02, -5.250e-02, -2.361e-01, 2.551e-03, 1.347e-01, -2.633e-02, -1.094e-01, -1.009e-01, -1.353e-01, -9.349e-02, -7.718e-02, 2.484e-01, -1.814e-01, 1.603e-01, -6.028e-02) * s[2][1][0];
	r1 += M4(-1.594e-02, -5.129e-02, 1.426e-01, 1.250e-01, -5.427e-03, -5.675e-02, 7.713e-02, -6.549e-02, 9.025e-02, 1.425e-01, -1.569e-01, 1.573e-02, 1.717e-02, -4.717e-01, 1.488e-01, 2.583e-01) * s[2][1][0];
	r0 += M4(-1.782e-01, 6.449e-02, -1.042e-01, -3.166e-01, 9.822e-02, 5.878e-03, 5.678e-02, 1.184e-01, 1.807e-02, 7.535e-02, -3.186e-02, 6.528e-02, 1.297e-01, -1.639e-01, -4.034e-02, -7.453e-02) * s[2][1][1];
	r1 += M4(-1.096e-01, -1.245e-01, -7.316e-04, -5.479e-02, -1.085e-01, 2.509e-01, 6.795e-02, -8.302e-02, -2.106e-02, -1.089e-01, 6.780e-02, -1.391e-01, 9.855e-02, -2.624e-02, -3.899e-03, 1.379e-01) * s[2][1][1];
	r0 += M4(-9.547e-02, -2.660e-02, -9.660e-02, -9.090e-02, -3.980e-02, 2.109e-02, -5.526e-03, -3.512e-02, -4.974e-02, -6.202e-02, 3.783e-02, -1.106e-01, 8.049e-02, 3.971e-02, -1.540e-03, 2.239e-01) * s[2][2][0];
	r1 += M4(4.672e-02, 6.152e-02, -5.941e-02, 8.930e-02, 5.137e-02, -2.139e-02, -3.027e-02, -1.251e-01, 6.448e-02, 3.841e-02, -4.022e-02, 9.198e-02, -6.735e-02, -4.403e-02, 1.693e-01, -1.500e-02) * s[2][2][0];
	r0 += M4(-1.860e-01, -5.454e-02, -4.046e-02, -6.616e-02, 1.607e-01, -1.278e-02, 3.757e-02, 7.223e-02, -3.928e-02, 5.699e-02, 5.880e-02, -1.669e-02, 1.195e-02, 2.311e-02, 9.629e-02, 1.208e-01) * s[2][2][1];
	r1 += M4(-3.277e-02, 2.961e-02, -1.332e-01, 3.675e-02, 7.370e-02, 4.830e-02, 1.333e-01, -7.500e-02, -1.904e-02, -1.729e-02, -2.242e-03, -3.031e-02, -1.502e-02, 1.702e-03, -1.983e-03, -5.859e-02) * s[2][2][1];
	s[0][0][0] = max(g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[1][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[1][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[1][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[1][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[1][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[1][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(-7.310e-02, 3.209e-02, -1.853e-01, -5.285e-02, 1.281e-02, 7.209e-02, -1.044e-03, -1.396e-02, 2.918e-02, 1.052e-01, -3.865e-03, -5.208e-02, -5.068e-02, 4.642e-02, 6.714e-02, -2.238e-01) * s[0][0][0];
	r1 += M4(6.812e-02, 5.700e-02, -3.277e-01, -7.132e-02, 5.879e-03, 2.866e-02, -2.606e-02, -3.009e-02, -2.983e-02, -4.553e-02, 3.449e-02, 1.958e-02, 1.509e-01, -1.682e-02, -1.147e-01, 1.315e-01) * s[0][0][0];
	r0 += M4(-1.325e-02, 1.714e-01, 7.306e-03, 1.519e-01, -2.913e-03, 3.832e-02, -9.667e-02, -9.452e-02, -9.803e-03, 4.377e-02, -2.465e-02, -1.660e-01, -6.815e-02, 1.408e-01, 2.433e-01, -1.263e-01) * s[0][0][1];
	r1 += M4(-7.656e-02, 8.618e-02, -5.315e-03, -5.145e-02, 1.103e-01, -4.400e-03, -1.520e-01, -7.025e-02, 1.023e-01, -7.274e-02, -4.592e-02, 7.094e-02, 1.294e-01, 2.018e-03, 1.463e-01, 1.118e-03) * s[0][0][1];
	r0 += M4(-5.149e-01, -7.442e-02, -1.340e-01, 5.573e-02, -8.956e-02, 1.702e-02, -1.298e-02, -4.773e-02, 5.132e-02, 1.676e-01, 1.450e-01, -2.215e-02, -1.997e-01, 2.077e-01, -4.400e-02, -1.328e-01) * s[0][1][0];
	r1 += M4(6.568e-02, -3.797e-02, 1.414e-01, -2.914e-01, 5.410e-02, 5.927e-04, 1.268e-03, -3.094e-02, -8.179e-02, 2.665e-02, 5.707e-02, 1.058e-01, 3.936e-01, 1.216e-01, -1.053e-01, 2.569e-01) * s[0][1][0];
	r0 += M4(-1.488e-01, -2.791e-02, 2.043e-03, -1.156e-01, 5.241e-02, -1.454e-01, -4.172e-02, -3.362e-02, -1.745e-01, 1.200e-01, 1.004e-01, -1.380e-01, 1.698e-01, 1.503e-01, 2.588e-01, -1.577e-01) * s[0][1][1];
	r1 += M4(-4.224e-02, -6.076e-02, 1.699e-01, 1.402e-01, 5.773e-02, -4.059e-02, -8.645e-03, -2.165e-02, 1.745e-01, 1.287e-01, -4.111e-02, 1.891e-01, 2.574e-01, -1.398e-01, -1.123e-02, -4.504e-02) * s[0][1][1];
	r0 += M4(-5.816e-02, 3.886e-02, -1.493e-01, 2.541e-02, -1.996e-03, 5.602e-02, -7.524e-02, -6.636e-02, -5.194e-02, 7.276e-02, 5.601e-02, 4.650e-02, 8.345e-02, 7.429e-02, 1.651e-01, 6.973e-02) * s[0][2][0];
	r1 += M4(-2.964e-02, 8.524e-02, -1.324e-02, -1.172e-01, -3.997e-02, 1.069e-02, 2.368e-02, 3.109e-02, 5.287e-02, -4.414e-03, 3.986e-02, -1.672e-03, 2.097e-01, 8.242e-02, -3.221e-02, 1.926e-01) * s[0][2][0];
	r0 += M4(1.171e-01, 4.363e-02, -6.692e-02, 9.115e-02, 1.117e-01, -6.912e-02, -1.638e-01, 9.477e-03, -8.698e-02, 2.880e-02, -2.210e-02, 8.997e-02, -7.623e-03, -1.153e-01, -7.349e-02, 7.770e-04) * s[0][2][1];
	r1 += M4(-1.363e-01, 9.296e-02, -2.861e-02, -2.350e-02, -1.489e-01, -7.055e-02, 2.823e-02, -5.299e-02, 1.574e-01, 2.497e-02, -1.259e-03, 3.653e-02, 1.829e-01, -2.954e-02, -1.608e-01, 2.425e-01) * s[0][2][1];
	r0 += M4(2.715e-02, -2.060e-01, -7.448e-02, 8.023e-02, -3.917e-02, -1.190e-04, 2.937e-02, -1.211e-01, -2.460e-02, 1.135e-01, 5.105e-03, -1.011e-01, -2.200e-01, -1.696e-01, -1.756e-01, -3.360e-02) * s[1][0][0];
	r1 += M4(8.748e-02, -3.451e-02, -3.511e-01, -9.771e-02, -5.108e-02, -7.479e-02, -1.334e-01, 4.905e-02, -1.667e-02, 4.367e-02, -3.229e-02, 1.753e-01, -3.775e-02, 5.493e-02, -3.119e-01, -1.934e-03) * s[1][0][0];
	r0 += M4(5.838e-02, -1.925e-01, 1.297e-01, 3.063e-01, -5.675e-02, -1.286e-01, -1.231e-01, -3.257e-01, -7.728e-02, -1.185e-01, -6.748e-02, -1.772e-01, -1.444e-01, 1.212e-01, -6.872e-02, 5.856e-02) * s[1][0][1];
	r1 += M4(7.653e-02, -1.742e-03, -4.939e-02, -1.374e-02, 1.248e-01, -1.457e-01, -8.232e-02, -2.357e-02, 1.372e-01, -1.470e-01, -1.940e-01, 2.470e-01, -1.445e-01, 9.292e-02, 1.440e-02, -7.826e-03) * s[1][0][1];
	r0 += M4(-1.264e-01, -1.939e-01, -2.646e-01, -3.928e-01, 6.483e-02, 2.513e-02, -1.426e-01, -1.333e-01, -1.839e-01, -1.441e-01, 1.213e-02, 1.714e-01, -4.659e-01, -3.835e-02, -9.489e-02, -4.267e-01) * s[1][1][0];
	r1 += M4(8.305e-03, -2.471e-01, 2.599e-02, -2.441e-01, -2.359e-02, 1.196e-02, -9.302e-02, -5.595e-02, -1.352e-01, -2.021e-01, 2.443e-02, 1.713e-01, -9.214e-02, 4.789e-02, -9.358e-02, -1.418e-01) * s[1][1][0];
	r0 += M4(1.218e-01, -1.862e-01, -3.604e-03, -2.157e-01, 1.206e-01, 8.820e-02, -4.482e-01, -3.941e-01, -4.550e-01, -3.764e-01, -3.879e-01, -1.178e-01, 6.649e-02, -2.976e-03, -2.151e-02, -1.085e-01) * s[1][1][1];
	r1 += M4(1.707e-01, -1.106e-01, 9.472e-02, 3.205e-01, 3.076e-01, 2.758e-01, -2.198e-01, 1.426e-01, -1.302e-01, 1.218e-01, -1.080e-01, 4.722e-01, -2.626e-01, 8.031e-02, -2.191e-01, -2.920e-01) * s[1][1][1];
	r0 += M4(-8.440e-03, 5.372e-02, -1.516e-03, -2.614e-02, 6.053e-02, 1.552e-02, 1.405e-01, 4.805e-02, 1.454e-01, -3.803e-02, -8.721e-02, -2.177e-02, 2.104e-01, 3.536e-02, 4.325e-02, 7.263e-02) * s[1][2][0];
	r1 += M4(-7.251e-02, -1.597e-01, -3.080e-02, -1.411e-01, 6.478e-02, 5.752e-02, -3.547e-02, 1.184e-02, -4.923e-03, -5.582e-02, 1.311e-01, -2.352e-02, -2.808e-02, 5.345e-02, -7.732e-02, 2.354e-01) * s[1][2][0];
	r0 += M4(-1.751e-01, 4.316e-02, 1.519e-01, 9.900e-02, 5.483e-02, -2.165e-02, 1.081e-01, 4.646e-02, 1.209e-01, 1.149e-04, -1.117e-01, 3.460e-02, -8.438e-02, -3.948e-02, -9.888e-02, -8.645e-02) * s[1][2][1];
	r1 += M4(9.165e-02, 1.125e-01, -2.923e-01, 1.094e-01, 3.682e-01, -4.894e-02, 3.950e-02, 6.939e-02, 1.133e-01, 2.932e-02, 1.905e-01, 1.319e-01, -2.936e-02, 7.315e-02, -4.300e-02, 1.786e-01) * s[1][2][1];
	r0 += M4(2.328e-02, 2.776e-04, 1.216e-02, 2.032e-02, -5.041e-02, -7.799e-02, 6.326e-02, -2.220e-02, 7.019e-02, 5.320e-02, 1.622e-01, 1.293e-01, 7.490e-02, 7.875e-03, 1.265e-01, 9.015e-02) * s[2][0][0];
	r1 += M4(3.540e-03, -1.524e-02, 1.080e-01, -3.144e-02, 2.493e-02, 2.336e-02, -3.309e-02, 1.535e-01, 2.646e-02, -1.251e-02, -4.258e-02, 9.084e-02, -5.883e-03, 1.281e-01, 3.407e-02, 1.165e-01) * s[2][0][0];
	r0 += M4(1.274e-01, 6.541e-02, -4.670e-02, 4.515e-02, -1.180e-01, 1.188e-01, -4.410e-02, -1.538e-01, -1.080e-02, -3.677e-02, -2.356e-03, -1.246e-02, 5.714e-02, 9.170e-03, 3.479e-02, -2.242e-02) * s[2][0][1];
	r1 += M4(3.940e-02, -1.072e-02, 2.054e-01, -3.101e-03, 6.583e-02, -1.009e-01, -6.527e-02, 1.013e-01, 5.603e-02, -8.833e-02, -1.709e-01, 5.624e-02, -3.521e-03, 4.418e-02, 5.163e-02, 1.265e-01) * s[2][0][1];
	r0 += M4(-6.496e-02, 9.488e-03, 1.389e-01, 6.588e-02, 1.228e-01, -1.078e-01, -1.221e-01, -3.515e-03, 1.329e-01, -1.971e-01, 1.601e-01, 1.660e-01, 2.762e-01, 1.343e-01, 2.046e-01, -6.121e-02) * s[2][1][0];
	r1 += M4(-3.843e-02, 4.799e-02, 1.126e-02, 3.840e-02, 2.086e-02, -6.599e-02, -1.413e-01, -8.966e-02, -1.782e-01, 1.878e-03, -1.127e-01, 2.169e-01, 3.732e-02, -1.480e-01, 1.411e-01, -3.961e-03) * s[2][1][0];
	r0 += M4(-1.099e-01, 6.387e-02, 1.743e-02, -3.883e-02, 1.776e-01, -2.629e-01, 1.173e-01, 2.318e-01, 7.838e-02, 2.443e-02, 8.422e-02, -4.408e-02, 1.208e-01, -1.668e-02, 3.074e-02, -7.583e-02) * s[2][1][1];
	r1 += M4(-4.235e-02, -1.040e-02, 1.303e-01, 1.788e-01, 2.470e-01, -2.708e-01, -6.152e-01, 1.450e-01, -1.389e-02, 1.165e-01, 1.143e-01, 1.804e-01, 3.952e-02, -3.034e-02, 2.906e-01, -2.914e-02) * s[2][1][1];
	r0 += M4(1.141e-01, 6.068e-02, 6.150e-02, -6.746e-02, -1.042e-01, 2.016e-02, -2.320e-02, -5.102e-02, 9.065e-02, -6.364e-02, -2.496e-02, -3.362e-03, -2.941e-02, -1.940e-02, -7.689e-02, 1.759e-01) * s[2][2][0];
	r1 += M4(4.925e-02, -1.653e-02, 1.216e-01, -2.484e-02, -7.371e-02, -1.759e-02, 4.536e-02, -2.607e-02, -1.067e-01, 4.789e-02, 8.015e-02, -4.214e-02, 1.369e-02, 9.371e-02, -4.539e-02, -5.880e-02) * s[2][2][0];
	r0 += M4(3.556e-03, 2.941e-02, 4.959e-02, -7.938e-02, 1.224e-01, -6.752e-02, -1.682e-01, -2.310e-01, 5.540e-02, -1.438e-02, -4.000e-02, -3.673e-02, -5.628e-02, -6.159e-02, -1.194e-02, 9.022e-02) * s[2][2][1];
	r1 += M4(9.904e-03, 2.546e-02, -3.489e-02, 7.672e-02, 1.611e-01, 3.051e-02, 1.997e-01, 1.274e-01, 1.953e-02, 9.711e-02, 5.969e-02, 9.249e-02, -6.857e-05, 1.051e-01, -1.190e-01, -8.874e-03) * s[2][2][1];
	r0 += V4(5.150e-03, 1.454e-02, -2.268e-02, -2.655e-02);
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(2.765e-02, 1.762e-02, -2.275e-02, 4.702e-02);
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-4x8C-DS-conv4
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv3
//!BIND LUMA
//!SAVE conv4
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(conv3_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0)) + vec2(0.5)) * conv3_pt))
#define l1(x, y) V4(conv3_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0)) + vec2(0.5)) * conv3_pt))
shared V4 g[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv3_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			g[0][ay][ax] = l0(x - 1, y - 1);
			g[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s[3][3][2];
	V4 r0 = V4(0.0);
	V4 r1 = V4(0.0);
	s[0][0][0] = max(g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[0][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[0][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[0][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[0][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[0][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[0][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(-1.812e-02, 2.289e-02, -1.412e-02, -6.852e-02, 1.671e-02, 4.409e-02, 3.944e-03, 8.567e-02, 1.054e-01, 6.041e-02, -1.335e-02, -2.352e-02, 1.372e-01, -8.540e-03, 5.901e-02, -4.374e-02) * s[0][0][0];
	r1 += M4(-8.786e-02, 4.965e-02, 1.038e-01, 6.519e-02, -6.756e-02, -9.101e-03, 1.039e-02, -6.650e-02, 7.209e-02, 1.010e-01, -3.445e-02, 4.416e-02, 4.481e-02, -9.146e-02, 7.885e-02, 2.141e-02) * s[0][0][0];
	r0 += M4(1.692e-02, -2.483e-02, 3.843e-02, 4.956e-02, -1.124e-02, 3.549e-02, 1.010e-02, 2.756e-02, -3.873e-03, -4.184e-02, -1.146e-02, -5.630e-02, 6.553e-02, 3.218e-02, 9.592e-03, 3.924e-04) * s[0][0][1];
	r1 += M4(6.125e-02, -5.092e-02, 5.218e-02, -2.413e-02, -3.263e-02, -8.567e-03, 6.695e-02, -9.781e-05, 4.054e-02, 4.999e-02, -1.053e-01, 2.796e-02, 2.721e-02, -2.202e-02, -3.098e-02, 3.030e-03) * s[0][0][1];
	r0 += M4(2.857e-02, 7.024e-02, 1.461e-02, -4.065e-02, 2.920e-03, -1.142e-01, -1.532e-02, 1.655e-01, -4.382e-02, 9.192e-02, -1.125e-02, -1.176e-01, 3.045e-02, 3.233e-01, -2.326e-02, -6.450e-02) * s[0][1][0];
	r1 += M4(1.619e-01, -1.589e-01, 6.080e-02, 3.455e-02, 9.065e-02, 3.765e-02, 5.907e-02, -1.461e-01, -1.325e-01, -6.061e-02, -4.976e-02, 1.917e-03, -9.215e-02, 6.913e-02, -1.903e-01, 7.079e-02) * s[0][1][0];
	r0 += M4(-7.619e-03, -2.572e-02, 4.112e-02, 2.513e-02, -3.647e-04, 2.470e-02, -1.294e-02, 3.015e-03, -7.682e-02, -6.844e-02, 2.538e-02, 4.267e-02, -4.242e-02, 7.484e-02, -5.790e-02, 6.136e-02) * s[0][1][1];
	r1 += M4(3.684e-02, 8.197e-03, 2.715e-02, 2.510e-02, 9.548e-02, -3.085e-02, -4.665e-02, 9.517e-03, -1.185e-01, -5.203e-02, 6.523e-03, -3.452e-02, 1.634e-02, 1.183e-02, 8.520e-02, -3.215e-02) * s[0][1][1];
	r0 += M4(8.887e-03, 1.843e-02, 4.112e-02, -5.469e-03, 3.795e-03, 2.266e-02, -1.740e-02, 9.473e-02, -1.121e-02, 3.634e-02, -5.044e-02, -1.620e-02, -4.642e-02, 3.744e-02, 6.157e-02, 1.950e-02) * s[0][2][0];
	r1 += M4(1.426e-02, -6.237e-02, -9.681e-03, 7.306e-02, 3.604e-02, 2.764e-03, 4.338e-03, -9.967e-03, -1.489e-01, 1.608e-01, 4.108e-04, -4.972e-02, 5.035e-03, 6.001e-02, 4.043e-02, -8.530e-02) * s[0][2][0];
	r0 += M4(-3.388e-02, 4.260e-02, 1.627e-02, -1.034e-02, 2.003e-02, 8.015e-03, 9.172e-02, 6.862e-02, -6.151e-02, 2.448e-03, -4.451e-02, -3.667e-02, 9.029e-02, -4.636e-02, -6.344e-02, 3.250e-02) * s[0][2][1];
	r1 += M4(-2.448e-02, -2.964e-02, -3.969e-02, 7.403e-02, 6.558e-02, -6.191e-02, 7.007e-02, -1.013e-02, -6.421e-02, 5.946e-02, -3.284e-02, -1.413e-02, 1.371e-01, -3.334e-02, 3.222e-02, 2.277e-02) * s[0][2][1];
	r0 += M4(9.050e-02, -3.806e-02, -1.702e-02, 1.519e-01, -1.234e-01, -4.783e-02, 7.785e-03, -7.935e-02, 7.381e-02, -6.096e-02, 2.477e-02, 8.816e-02, 6.177e-02, -2.466e-01, 2.315e-02, -3.885e-02) * s[1][0][0];
	r1 += M4(-2.565e-02, -1.298e-01, 8.917e-02, -4.022e-02, -1.701e-01, 2.664e-02, 1.170e-01, -8.131e-03, -9.218e-03, 1.481e-01, 1.482e-02, -2.423e-01, 9.802e-02, -1.646e-01, 1.524e-01, -1.704e-01) * s[1][0][0];
	r0 += M4(-7.361e-02, -1.285e-02, 7.596e-02, -4.297e-02, -9.303e-02, -2.946e-02, -7.048e-02, -4.407e-02, 4.229e-02, 4.807e-03, 1.382e-01, 6.323e-02, 5.162e-02, -7.416e-02, 2.137e-02, 1.967e-02) * s[1][0][1];
	r1 += M4(-3.008e-02, 1.503e-02, 2.084e-01, -2.410e-02, -1.200e-01, -5.642e-03, 8.483e-02, 5.258e-02, 1.395e-01, -2.272e-02, 1.457e-01, -2.619e-03, 6.953e-02, -1.135e-01, -2.636e-03, -4.391e-02) * s[1][0][1];
	r0 += M4(1.431e-01, -2.946e-01, 5.513e-02, 1.839e-02, 8.654e-02, 9.459e-02, 2.760e-01, -4.190e-01, -1.091e-01, -4.092e-01, 1.181e-01, 1.617e-01, -7.231e-02, -3.841e-01, 1.454e-01, 3.443e-01) * s[1][1][0];
	r1 += M4(1.878e-01, 2.568e-01, 2.510e-01, 1.520e-01, -1.285e-02, -2.326e-02, -1.026e-02, 1.970e-01, 6.274e-02, 3.327e-01, 5.227e-02, 1.835e-01, -3.701e-01, 4.561e-01, -3.881e-01, 5.751e-02) * s[1][1][0];
	r0 += M4(1.822e-01, -1.204e-01, 1.686e-01, -2.794e-01, 2.006e-02, -4.111e-02, -2.051e-02, -2.538e-01, 2.624e-02, 8.775e-02, 2.319e-01, -1.042e-02, -3.126e-02, -6.077e-02, 4.642e-03, -6.277e-02) * s[1][1][1];
	r1 += M4(2.273e-01, 1.144e-02, -6.528e-02, 1.034e-01, 6.322e-02, 1.724e-01, -7.270e-02, 1.929e-01, -3.455e-02, -2.426e-01, -7.482e-02, 5.646e-02, -1.830e-01, 1.023e-01, 1.361e-02, 1.822e-01) * s[1][1][1];
	r0 += M4(2.105e-01, 4.878e-02, -6.657e-02, 7.428e-02, -6.746e-02, -1.443e-01, -1.470e-01, -1.509e-01, 2.395e-01, 2.123e-02, 3.848e-02, -4.274e-03, 2.487e-01, -1.461e-01, 4.723e-02, -7.837e-02) * s[1][2][0];
	r1 += M4(2.901e-01, 1.084e-01, 1.997e-02, 1.210e-01, 7.951e-02, 1.067e-01, 1.626e-02, -1.491e-01, -4.063e-02, 4.676e-01, 1.964e-02, 4.981e-02, -3.955e-02, 7.949e-02, 1.001e-01, -1.513e-01) * s[1][2][0];
	r0 += M4(-7.093e-02, -1.406e-02, -1.053e-01, -3.437e-03, 2.551e-01, -1.655e-01, -4.559e-02, -1.826e-01, -3.924e-02, 1.228e-01, 1.317e-01, 3.333e-02, -5.314e-02, -1.467e-01, -1.047e-01, -9.399e-02) * s[1][2][1];
	r1 += M4(-1.412e-01, 7.772e-02, -4.221e-02, 7.434e-02, 1.909e-01, -1.071e-02, 4.284e-02, -1.071e-01, -6.333e-02, -1.526e-02, -3.544e-03, 6.514e-02, 6.909e-02, 2.475e-03, -3.635e-02, -3.377e-02) * s[1][2][1];
	r0 += M4(-1.918e-02, 1.016e-01, -9.738e-02, -2.721e-02, 7.753e-02, -1.161e-02, 1.135e-01, 3.350e-02, -2.176e-01, -2.570e-02, 3.884e-02, -1.165e-01, -9.887e-03, 6.492e-02, -9.395e-02, -1.608e-02) * s[2][0][0];
	r1 += M4(3.830e-02, -1.267e-01, 2.647e-01, 3.662e-02, -1.860e-02, -2.259e-02, -1.522e-03, 1.126e-02, 7.234e-02, 1.291e-01, -1.924e-01, 8.417e-02, -1.461e-02, -4.801e-02, 3.903e-02, 2.032e-02) * s[2][0][0];
	r0 += M4(2.391e-02, -7.326e-02, 5.508e-02, 8.460e-03, -7.361e-03, 3.135e-02, -1.284e-01, 1.192e-02, -5.350e-02, -5.068e-02, 3.520e-02, -6.665e-02, 4.113e-03, 6.763e-02, 5.177e-03, 2.521e-02) * s[2][0][1];
	r1 += M4(2.749e-02, -6.633e-02, 7.350e-02, -3.840e-02, -1.683e-02, -9.330e-03, -3.561e-02, 7.688e-03, 9.141e-02, -6.759e-02, 1.220e-01, 4.872e-02, -4.466e-03, -2.536e-02, 1.218e-02, 6.958e-02) * s[2][0][1];
	r0 += M4(-1.573e-01, 1.140e-01, -1.345e-02, -1.333e-01, 2.167e-01, -1.724e-01, 1.086e-01, 1.981e-01, 3.103e-01, -3.442e-01, 4.644e-03, -7.601e-03, -3.264e-01, 2.663e-01, -1.123e-01, -5.668e-02) * s[2][1][0];
	r1 += M4(2.329e-01, -1.016e-01, -1.533e-02, 1.537e-01, 1.272e-02, -1.432e-02, 4.046e-03, -3.090e-02, -3.346e-01, 1.021e-01, 6.352e-02, -7.897e-02, 5.519e-02, 1.428e-01, -1.098e-01, -2.549e-01) * s[2][1][0];
	r0 += M4(2.042e-02, 4.755e-03, 4.881e-02, -1.468e-03, -1.527e-01, 2.705e-01, -7.633e-02, 4.279e-02, -2.126e-02, 4.653e-02, 7.837e-02, -2.343e-01, -6.763e-02, 2.786e-02, -3.026e-02, 5.587e-02) * s[2][1][1];
	r1 += M4(1.557e-02, 8.991e-03, 4.734e-02, 1.132e-01, 9.022e-02, 6.415e-02, -3.868e-02, -4.846e-02, -9.495e-02, 8.321e-02, -5.256e-02, 1.567e-01, 8.784e-02, -3.978e-02, -9.513e-02, -9.495e-02) * s[2][1][1];
	r0 += M4(5.636e-03, -3.501e-02, 3.956e-02, -3.677e-02, 7.230e-02, 4.896e-03, 6.496e-02, 8.179e-02, -7.270e-03, -2.163e-02, 1.163e-02, -1.050e-01, 8.860e-02, 2.480e-01, 1.199e-02, -7.799e-03) * s[2][2][0];
	r1 += M4(-1.145e-02, 6.863e-02, -1.733e-02, 2.308e-02, -1.239e-01, 1.560e-02, -2.176e-03, 1.326e-02, 1.192e-01, -5.875e-02, 7.875e-03, 1.164e-02, -2.000e-02, 9.415e-02, -4.706e-03, -5.026e-02) * s[2][2][0];
	r0 += M4(-2.259e-01, 1.780e-02, -6.773e-02, 1.410e-02, 1.207e-01, 1.293e-02, 2.394e-02, 1.002e-01, 6.809e-02, 1.953e-02, 5.329e-02, -7.012e-02, 9.756e-02, 3.781e-02, 1.932e-02, 6.697e-02) * s[2][2][1];
	r1 += M4(-1.778e-02, 2.483e-02, -3.522e-02, -6.609e-03, -8.982e-03, -4.819e-02, 2.806e-02, -1.281e-03, 1.241e-01, -8.985e-02, 2.963e-02, -1.530e-02, -1.029e-01, 5.260e-02, 1.293e-02, -1.533e-03) * s[2][2][1];
	s[0][0][0] = max(g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[1][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[1][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[1][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[1][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[1][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[1][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(-1.383e-03, -1.014e-01, 1.369e-02, -3.872e-02, -2.404e-02, 1.591e-02, 3.967e-02, 8.058e-03, -8.395e-02, 4.640e-02, -7.557e-02, 4.160e-03, 6.107e-02, -5.244e-03, -4.031e-02, 6.867e-02) * s[0][0][0];
	r1 += M4(6.065e-02, -6.285e-02, 1.304e-01, 1.976e-02, -9.254e-03, 2.016e-02, -9.533e-02, 7.904e-04, -2.567e-01, 3.884e-02, -6.679e-02, -4.506e-02, -5.728e-03, 4.585e-03, 7.056e-02, 1.993e-03) * s[0][0][0];
	r0 += M4(8.633e-02, -6.398e-02, 1.293e-02, -4.997e-03, -3.768e-02, -4.723e-02, -7.208e-02, -1.815e-02, -8.414e-03, -1.289e-02, -1.162e-02, 3.455e-02, -1.435e-02, -1.855e-03, -1.140e-01, 2.819e-02) * s[0][0][1];
	r1 += M4(2.387e-02, -6.072e-02, 2.248e-01, 9.143e-02, -1.701e-02, 3.959e-02, -1.146e-02, -4.686e-02, 1.700e-02, -4.827e-02, 6.435e-02, -2.461e-02, 3.416e-03, 5.068e-02, -8.746e-03, 3.212e-02) * s[0][0][1];
	r0 += M4(4.282e-03, -2.987e-02, 5.729e-02, -2.459e-02, -2.724e-02, 4.962e-02, 4.629e-02, -5.253e-03, 8.710e-02, -5.641e-02, 3.382e-02, 1.100e-01, -2.855e-02, -4.049e-02, 1.331e-02, 1.861e-02) * s[0][1][0];
	r1 += M4(6.715e-02, 1.680e-02, -4.664e-02, 4.822e-02, -1.599e-01, 3.605e-02, -5.111e-04, -1.013e-02, 4.463e-01, -6.820e-02, 7.020e-02, -1.235e-01, 1.018e-01, -5.802e-02, -1.354e-02, -3.546e-02) * s[0][1][0];
	r0 += M4(5.027e-02, 1.353e-01, -4.754e-02, -1.190e-01, 1.657e-03, 1.023e-01, -1.145e-01, 4.063e-02, 7.926e-03, -7.591e-02, 5.407e-02, -7.576e-02, -1.091e-01, -5.168e-02, -2.766e-03, 6.770e-02) * s[0][1][1];
	r1 += M4(1.431e-01, -1.122e-01, -6.567e-02, 4.211e-02, 5.196e-03, 9.886e-02, -2.664e-02, -4.748e-02, 3.965e-03, -5.125e-02, -1.222e-02, 8.207e-03, 7.944e-02, -1.027e-01, -1.291e-02, -9.774e-02) * s[0][1][1];
	r0 += M4(-2.503e-02, -4.626e-02, -2.486e-02, 7.429e-03, 7.146e-02, 1.444e-02, -1.351e-02, -8.884e-03, 1.018e-01, 7.371e-02, 1.074e-02, -6.692e-02, -2.045e-02, -5.023e-02, 1.343e-02, 2.879e-02) * s[0][2][0];
	r1 += M4(-2.940e-03, -4.014e-02, -2.404e-03, 4.294e-02, 6.547e-02, -3.060e-02, 5.832e-02, -3.449e-02, 1.812e-01, 6.039e-03, -9.636e-02, 1.519e-01, -2.527e-02, -3.044e-02, -1.737e-03, 1.190e-02) * s[0][2][0];
	r0 += M4(1.086e-01, 9.598e-03, 3.648e-02, -1.029e-02, -7.845e-02, 5.717e-03, -4.541e-02, 1.024e-02, 6.217e-02, 9.913e-03, -3.302e-02, 2.339e-02, -1.551e-02, -6.940e-02, -4.719e-02, 1.311e-02) * s[0][2][1];
	r1 += M4(-7.755e-03, 5.311e-02, -5.517e-03, 9.013e-02, 1.971e-02, -6.207e-02, 9.361e-04, -1.558e-02, 3.161e-02, 3.868e-02, -3.256e-02, 1.869e-02, -7.852e-02, -7.350e-03, 1.552e-04, 4.164e-04) * s[0][2][1];
	r0 += M4(4.377e-02, -8.954e-02, 1.145e-01, -5.267e-02, 5.611e-03, -9.423e-03, -1.442e-02, 3.958e-02, -6.718e-02, 1.202e-01, -1.565e-01, -1.081e-01, -2.786e-02, -4.896e-02, -1.506e-04, -1.585e-02) * s[1][0][0];
	r1 += M4(1.331e-01, -1.255e-01, 2.276e-01, 6.513e-02, 1.313e-01, -9.797e-03, -3.275e-02, 5.799e-02, -1.691e-01, 1.875e-01, -1.460e-01, 1.382e-01, 4.107e-02, 7.059e-02, -1.678e-01, -5.216e-02) * s[1][0][0];
	r0 += M4(2.353e-01, -7.705e-02, -5.169e-02, 9.619e-02, -1.332e-01, -7.475e-02, -2.368e-01, -6.426e-02, 1.269e-02, 1.516e-02, 2.903e-02, -6.343e-02, -1.568e-01, -3.938e-02, -4.443e-02, 2.190e-02) * s[1][0][1];
	r1 += M4(5.613e-02, -2.192e-01, 5.902e-02, -5.410e-02, -1.136e-01, 1.245e-01, 2.065e-01, 4.132e-02, 9.614e-03, -2.919e-02, -3.424e-03, 5.047e-02, 1.104e-01, 9.832e-02, -3.823e-01, -1.064e-01) * s[1][0][1];
	r0 += M4(-7.633e-02, 3.976e-01, 1.958e-01, -3.025e-02, -9.011e-02, -1.470e-01, -1.222e-01, 6.388e-02, 6.621e-01, 5.372e-01, 8.974e-01, -8.642e-03, -1.526e-01, 8.240e-02, 6.170e-02, -7.195e-02) * s[1][1][0];
	r1 += M4(-1.094e-01, 9.327e-02, -1.753e-01, 1.329e-01, -1.903e-01, -1.392e-01, -1.382e-01, -4.115e-02, 2.431e-01, -3.856e-01, 3.408e-01, -7.557e-03, -3.026e-01, 7.985e-02, 1.611e-01, 1.589e-01) * s[1][1][0];
	r0 += M4(-1.797e-01, 1.599e-01, 4.661e-02, 3.543e-01, 1.154e-01, -3.079e-01, -4.813e-02, -2.349e-01, -8.682e-02, 2.370e-01, 1.605e-01, -8.160e-02, -8.437e-01, 6.033e-02, 7.081e-03, -4.381e-02) * s[1][1][1];
	r1 += M4(3.888e-02, 1.761e-01, 6.726e-02, 3.701e-01, 2.071e-01, -2.557e-01, 3.105e-02, -1.382e-01, -2.679e-02, 4.816e-02, 2.270e-01, 7.151e-02, -4.795e-01, 2.483e-01, 2.824e-01, 1.854e-01) * s[1][1][1];
	r0 += M4(-4.782e-02, -1.806e-02, -6.686e-02, -5.337e-02, 3.302e-02, 8.929e-02, 5.676e-02, 8.862e-02, 5.853e-01, 9.354e-02, -1.358e-01, 8.089e-02, 1.810e-01, 9.380e-02, 6.945e-02, -7.803e-02) * s[1][2][0];
	r1 += M4(3.140e-02, 1.734e-02, -4.247e-02, -5.668e-02, 7.210e-02, -1.121e-01, 6.988e-02, 6.139e-02, 3.636e-02, 1.160e+00, -2.818e-01, -4.547e-01, 2.424e-01, -6.235e-02, -2.318e-02, -2.775e-02) * s[1][2][0];
	r0 += M4(7.750e-02, -1.922e-02, -1.050e-01, 1.053e-01, 1.805e-01, 4.768e-02, -8.098e-02, -2.458e-02, -4.260e-02, 6.209e-02, 2.676e-02, -5.166e-02, -2.066e-01, 4.063e-02, 8.201e-02, -5.482e-02) * s[1][2][1];
	r1 += M4(4.519e-02, 1.149e-03, -5.647e-02, -4.486e-02, 8.283e-02, 1.351e-01, 1.265e-02, 7.446e-02, 1.460e-01, -2.536e-02, -3.249e-02, -4.966e-02, 3.128e-02, -5.520e-02, -2.929e-02, -5.616e-02) * s[1][2][1];
	r0 += M4(6.097e-02, 5.802e-02, 3.106e-03, -5.182e-02, 3.110e-02, 1.192e-01, -2.733e-03, 2.765e-03, -2.024e-02, 4.979e-04, 1.013e-01, -2.374e-02, 3.557e-02, -9.286e-03, -6.202e-02, 3.502e-02) * s[2][0][0];
	r1 += M4(1.942e-02, -6.594e-02, 1.484e-01, 3.066e-02, 7.546e-02, -5.794e-03, -7.571e-02, 4.466e-04, -7.687e-02, 4.356e-02, -1.518e-02, -1.020e-01, 5.795e-02, -1.699e-02, -6.096e-02, -3.096e-03) * s[2][0][0];
	r0 += M4(1.891e-01, 1.965e-01, 4.603e-02, 4.770e-02, 9.690e-02, 5.384e-03, -4.717e-02, -1.599e-03, 1.911e-03, -1.287e-02, 1.752e-02, 1.886e-02, -5.190e-02, 9.252e-03, -6.639e-02, -2.861e-02) * s[2][0][1];
	r1 += M4(-1.199e-01, -6.812e-02, 2.105e-01, 2.577e-02, 4.007e-02, -1.717e-02, 4.999e-02, 2.066e-02, 7.491e-03, 9.411e-03, -2.659e-02, -2.214e-02, 3.860e-02, 2.215e-03, -9.136e-02, -2.793e-02) * s[2][0][1];
	r0 += M4(1.949e-02, 1.942e-01, 3.359e-02, -1.161e-01, -2.466e-01, 3.565e-01, -8.745e-02, 8.276e-02, 2.321e-01, -5.381e-02, 4.042e-02, 1.499e-01, -1.489e-01, 9.562e-02, 7.027e-03, 9.272e-02) * s[2][1][0];
	r1 += M4(1.465e-01, 2.264e-02, -6.322e-02, -5.053e-02, -1.119e-01, 3.756e-02, 1.254e-02, -6.827e-02, 1.413e-02, -1.111e-01, 1.316e-01, -1.170e-01, -5.408e-02, 3.210e-02, -2.852e-02, -4.829e-02) * s[2][1][0];
	r0 += M4(1.038e+00, 9.795e-02, 6.955e-02, 3.415e-01, 1.305e-01, 9.042e-02, 1.874e-02, -2.345e-02, 7.219e-02, -7.314e-02, 4.704e-02, -1.106e-02, -3.437e-01, 7.569e-02, 5.715e-02, -6.035e-02) * s[2][1][1];
	r1 += M4(2.280e-01, 1.879e-01, -7.287e-02, -3.123e-01, 3.040e-02, 2.052e-03, 6.095e-02, 8.237e-02, -5.123e-02, 1.930e-02, -3.413e-03, -6.282e-02, -3.131e-02, -8.375e-02, 6.812e-02, -6.936e-02) * s[2][1][1];
	r0 += M4(8.032e-02, 7.154e-04, -6.094e-02, -2.545e-02, -1.997e-02, 1.344e-01, 2.961e-02, 3.143e-02, 2.228e-01, 4.460e-03, 3.021e-02, -1.771e-02, 5.377e-02, -4.018e-02, -1.081e-02, 8.755e-02) * s[2][2][0];
	r1 += M4(-2.870e-02, 7.929e-02, -2.068e-02, -2.686e-02, 1.115e-01, -4.345e-02, 2.767e-02, 7.477e-03, 1.291e-01, 4.069e-02, -7.983e-02, -1.197e-01, -6.056e-02, -1.414e-02, 2.147e-02, -6.538e-03) * s[2][2][0];
	r0 += M4(1.608e-01, 4.102e-02, 1.854e-02, 2.569e-02, -1.932e-02, -5.617e-02, -2.020e-02, -3.037e-02, 8.672e-02, -4.545e-02, 9.572e-04, -5.719e-03, 1.059e-02, -6.151e-02, 1.636e-02, 2.544e-02) * s[2][2][1];
	r1 += M4(4.974e-03, -3.516e-02, -3.192e-02, 1.104e-01, 7.073e-02, -1.939e-02, -2.525e-02, -1.087e-02, -2.601e-02, -8.076e-03, 1.644e-02, -3.707e-02, -9.162e-03, 5.548e-03, 6.758e-02, 1.039e-02) * s[2][2][1];
	r0 += V4(-4.819e-03, 1.205e-02, -3.114e-04, 2.840e-03);
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-7.785e-03, 8.151e-03, -7.771e-03, -5.569e-03);
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-4x8C-DS-out-shuffle
//!HOOK LUMA
//!COMPUTE 16 16 8 8
//!BIND LUMA
//!BIND conv4
//!BIND easu
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 1
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(conv4_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0)) + vec2(0.5)) * conv4_pt))
#define l1(x, y) V4(conv4_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0)) + vec2(0.5)) * conv4_pt))
shared V4 g[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv4_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			g[0][ay][ax] = l0(x - 1, y - 1);
			g[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s[3][3][2];
	V4 r0 = V4(0.0);
	s[0][0][0] = max(g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[0][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[0][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[0][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[0][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[0][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[0][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(8.632e-03, -2.910e-02, -6.666e-03, 3.196e-03, 4.239e-02, 6.064e-03, 1.533e-02, -3.875e-03, -1.108e-02, 1.599e-02, -1.529e-02, 6.129e-03, 2.019e-02, -4.700e-03, 9.943e-03, -1.510e-02) * s[0][0][0];
	r0 += M4(-2.705e-02, -2.361e-02, -2.515e-02, -8.969e-04, 1.018e-02, 7.740e-03, 3.874e-02, -1.043e-02, -1.305e-02, -5.680e-03, -4.777e-03, 2.351e-03, 7.647e-02, -6.812e-03, -8.261e-02, -1.514e-02) * s[0][0][1];
	r0 += M4(-2.744e-02, 4.473e-02, 6.379e-03, -3.121e-02, -6.640e-02, 3.050e-03, 4.063e-02, 5.533e-02, -1.752e-02, -3.796e-02, 5.333e-03, -1.216e-02, 2.372e-02, 5.311e-02, -3.135e-03, 1.818e-02) * s[0][1][0];
	r0 += M4(-6.249e-02, -1.120e-02, 2.518e-03, -2.566e-02, -8.081e-02, -2.533e-02, 7.397e-02, 1.147e-01, 8.054e-04, 4.775e-03, -1.924e-02, -2.093e-02, 1.224e-02, 1.558e-01, -1.655e-01, -1.651e-01) * s[0][1][1];
	r0 += M4(1.584e-02, -1.507e-02, -5.122e-03, 1.802e-02, -3.211e-03, -3.120e-02, -1.813e-02, -5.115e-03, 1.737e-02, 3.185e-02, 2.232e-02, 3.627e-02, -1.092e-02, -3.331e-03, -1.086e-02, -2.062e-02) * s[0][2][0];
	r0 += M4(-3.162e-02, -7.497e-02, -6.548e-03, -4.654e-03, -1.122e-02, -5.677e-02, 7.336e-03, 1.200e-02, 6.812e-04, -1.739e-02, 1.524e-02, 2.273e-02, -2.418e-02, -5.316e-02, 8.858e-04, -5.767e-02) * s[0][2][1];
	r0 += M4(3.919e-02, -1.523e-02, 5.994e-02, -9.643e-02, -2.770e-02, -4.642e-03, 1.237e-02, 5.328e-03, 2.609e-02, -1.910e-02, 1.128e-02, 3.026e-03, -7.642e-02, 1.699e-02, -6.696e-02, 3.577e-02) * s[1][0][0];
	r0 += M4(-1.341e-02, -2.337e-02, 3.255e-02, -6.879e-02, 9.595e-02, 3.073e-02, -1.294e-01, 4.849e-02, -6.476e-02, -1.275e-02, -2.558e-02, 9.164e-03, -2.998e-01, 3.648e-02, 4.623e-02, 4.964e-02) * s[1][0][1];
	r0 += M4(2.105e-01, 3.047e-01, 1.255e-01, 3.959e-01, -3.798e-02, -7.185e-03, -1.267e-01, -5.886e-02, -3.347e-01, -1.018e-01, -2.599e-01, -1.138e-01, -8.010e-02, -2.829e-01, 9.104e-02, -1.092e-01) * s[1][1][0];
	r0 += M4(1.074e-01, 1.333e-01, 1.294e-01, 2.647e-01, 3.682e-01, 3.119e-01, -5.999e-01, -5.185e-01, 1.130e-01, -5.252e-02, 8.160e-02, -6.789e-03, -6.349e-01, -8.535e-01, 7.236e-01, 3.670e-01) * s[1][1][1];
	r0 += M4(7.454e-03, -3.358e-02, 2.124e-02, -5.847e-02, 3.478e-02, -3.339e-02, 5.115e-02, -2.694e-03, 2.489e-02, -1.782e-01, -2.515e-02, -2.049e-01, 9.601e-03, 1.228e-01, -3.473e-02, 8.831e-02) * s[1][2][0];
	r0 += M4(-4.066e-02, -4.169e-02, -3.493e-02, -4.337e-02, 3.577e-02, 1.441e-01, 4.666e-02, -2.115e-01, -2.603e-02, 1.092e-01, -4.570e-02, -3.615e-02, -1.877e-03, -9.594e-02, -3.056e-02, 3.913e-01) * s[1][2][1];
	r0 += M4(-1.203e-02, 1.250e-02, -3.845e-02, 4.187e-02, 8.061e-03, -7.901e-03, -1.537e-02, -1.673e-02, -4.051e-03, 1.628e-02, 1.646e-02, 1.044e-02, 3.308e-02, -1.478e-02, 4.646e-02, -1.775e-02) * s[2][0][0];
	r0 += M4(-1.044e-02, -2.697e-03, -3.210e-02, 2.367e-02, -1.795e-02, -7.717e-03, -1.316e-02, 2.147e-03, 1.285e-02, 1.039e-02, -1.050e-03, 6.813e-03, 1.052e-01, 8.372e-03, 8.089e-02, -3.737e-02) * s[2][0][1];
	r0 += M4(-1.760e-02, -2.729e-02, 4.092e-02, -2.854e-02, 6.044e-03, 2.777e-02, 4.245e-02, 6.997e-02, 5.007e-02, -8.312e-03, -5.420e-02, -2.439e-02, 5.530e-02, 7.393e-02, -5.443e-02, -2.523e-02) * s[2][1][0];
	r0 += M4(-1.704e-02, -1.129e-02, -9.269e-03, -2.888e-02, -1.224e-01, -7.084e-02, 1.220e-01, 8.829e-02, 1.132e-02, -3.917e-03, 5.331e-02, -3.267e-02, 1.896e-01, 1.958e-01, -1.760e-01, -3.948e-02) * s[2][1][1];
	r0 += M4(9.882e-03, -2.488e-02, 1.145e-02, -3.948e-02, 7.411e-03, -1.852e-02, 4.864e-04, -6.372e-02, -4.314e-02, 1.643e-02, -1.527e-02, -1.044e-02, -1.966e-02, 1.583e-02, 3.505e-02, 7.495e-02) * s[2][2][0];
	r0 += M4(2.241e-03, -2.082e-02, 1.738e-03, -4.533e-02, 1.458e-02, -5.830e-02, -3.524e-03, -1.038e-02, -2.985e-02, 7.065e-03, -3.919e-02, 9.589e-02, 5.049e-04, 8.136e-02, 1.187e-02, -3.553e-02) * s[2][2][1];
	s[0][0][0] = max(g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[1][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[1][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[1][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[1][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[1][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[1][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(7.143e-02, -2.842e-03, 1.889e-02, -2.881e-03, 4.599e-02, 2.130e-03, 3.430e-02, 8.619e-03, 5.976e-03, 7.257e-03, 1.772e-02, -1.701e-02, 1.484e-01, -1.050e-02, -6.828e-02, -2.073e-02) * s[0][0][0];
	r0 += M4(3.085e-02, 1.533e-02, 2.330e-02, 1.728e-02, 3.367e-02, 1.346e-02, 3.139e-02, 4.114e-02, 3.308e-02, 1.022e-02, 2.399e-02, -2.708e-03, -3.752e-02, 1.156e-02, -9.166e-03, 5.294e-03) * s[0][0][1];
	r0 += M4(-4.362e-02, 1.921e-02, -3.996e-02, 4.245e-02, 1.249e-02, 3.137e-02, -4.219e-03, 1.117e-02, 6.701e-02, 1.243e-01, 5.080e-02, 4.496e-03, -3.795e-02, 2.275e-01, 1.013e-01, 1.663e-03) * s[0][1][0];
	r0 += M4(3.274e-02, -2.925e-03, 3.848e-03, 2.834e-02, -2.759e-02, 2.877e-02, 5.314e-03, 4.718e-02, -2.082e-02, 1.279e-02, 5.066e-02, 3.024e-02, 5.465e-02, -4.842e-02, 3.280e-02, 4.279e-03) * s[0][1][1];
	r0 += M4(9.133e-03, 2.320e-02, 1.624e-02, -1.051e-05, -9.368e-03, 6.478e-03, -9.451e-03, -1.194e-02, 4.345e-02, -1.214e-01, -2.932e-03, 9.172e-03, -5.450e-02, 1.079e-02, -1.804e-02, 1.239e-01) * s[0][2][0];
	r0 += M4(1.884e-02, 3.580e-02, 1.293e-02, -1.005e-03, -1.574e-02, 5.387e-02, 4.456e-03, -1.925e-02, 7.759e-03, 3.477e-02, -5.115e-02, -5.305e-03, -2.484e-02, 3.896e-02, -2.205e-02, -2.083e-02) * s[0][2][1];
	r0 += M4(-8.752e-03, -1.002e-01, 6.267e-03, -3.528e-02, -6.126e-02, 3.423e-02, -2.435e-02, -1.826e-02, 3.255e-02, 6.278e-03, 3.415e-03, 1.930e-02, -1.628e-01, 6.335e-02, 1.856e-01, 7.366e-02) * s[1][0][0];
	r0 += M4(3.625e-02, -3.475e-02, 1.592e-02, -3.250e-02, 1.106e-01, -5.532e-02, 6.152e-02, -9.058e-02, -1.027e-02, 1.620e-02, -1.776e-03, 2.791e-02, -1.412e-02, -1.207e-03, -3.055e-02, 2.555e-02) * s[1][0][1];
	r0 += M4(-4.326e-01, 3.650e-01, -1.969e-01, 2.193e-02, -1.274e-01, -1.826e-01, 2.278e-03, 2.095e-02, -4.436e-01, 8.733e-02, -3.322e-01, 2.713e-01, 7.555e-02, -5.013e-01, -4.245e-01, -1.599e-01) * s[1][1][0];
	r0 += M4(-1.331e-01, -2.795e-02, -1.041e-01, -1.411e-01, -6.823e-01, 2.447e-01, -3.623e-01, 2.487e-01, -1.529e-01, -8.049e-02, -1.650e-01, -1.311e-02, -2.298e-01, -1.331e-01, 3.567e-02, -7.131e-02) * s[1][1][1];
	r0 += M4(2.468e-02, -4.228e-02, -1.992e-02, 2.017e-02, 3.044e-03, 1.055e-02, -2.151e-03, 1.794e-02, 6.078e-01, -3.486e-01, 3.799e-01, -5.059e-01, -7.214e-03, 3.229e-01, -2.937e-02, -4.945e-03) * s[1][2][0];
	r0 += M4(-8.763e-03, 6.764e-02, -1.780e-02, 2.260e-02, 2.102e-02, 6.707e-02, 5.398e-04, 4.625e-02, 1.173e-01, -1.127e-01, 1.478e-01, -2.024e-02, 2.815e-02, -7.593e-02, -1.317e-02, 1.136e-01) * s[1][2][1];
	r0 += M4(5.334e-02, -9.777e-03, 7.933e-02, -7.739e-02, 2.256e-02, 1.672e-02, 4.285e-02, 9.438e-02, 1.605e-02, -7.902e-03, 4.220e-02, 9.033e-04, 7.352e-02, 1.743e-02, 3.602e-02, 2.359e-02) * s[2][0][0];
	r0 += M4(-5.140e-03, 2.636e-02, 2.582e-02, 2.020e-02, -1.629e-02, 2.604e-02, 6.852e-02, 5.110e-02, 1.057e-02, 5.818e-03, 2.578e-02, 1.768e-02, 1.663e-02, 2.051e-02, 2.467e-02, 4.101e-02) * s[2][0][1];
	r0 += M4(-1.714e-01, 1.512e-01, -4.170e-01, 4.483e-01, 2.048e-02, 5.490e-03, -1.991e-02, -8.970e-02, 3.046e-04, 1.602e-02, -1.274e-01, -3.656e-02, -8.300e-04, 4.542e-02, 2.349e-01, 6.221e-02) * s[2][1][0];
	r0 += M4(2.660e-02, 7.553e-03, -3.631e-02, 4.126e-02, -4.278e-03, -5.451e-02, -3.457e-01, 4.299e-03, 4.641e-02, -1.826e-02, 1.815e-02, -7.714e-02, 3.202e-02, 1.845e-02, -1.207e-01, -2.352e-02) * s[2][1][1];
	r0 += M4(4.341e-02, 1.826e-02, 6.108e-02, -2.465e-02, -3.392e-03, 2.485e-02, 1.608e-02, 4.822e-02, 4.680e-02, -4.011e-02, 2.879e-01, -5.801e-02, -2.437e-02, -1.060e-01, -5.127e-02, -1.188e-02) * s[2][2][0];
	r0 += M4(-1.504e-02, 3.821e-02, -9.316e-03, 9.546e-02, -8.847e-02, 8.546e-02, -6.275e-02, 2.017e-01, 5.299e-03, 4.879e-02, 5.680e-02, 2.296e-02, 4.007e-02, 9.417e-03, 9.359e-02, -8.575e-02) * s[2][2][1];
	r0 += V4(1.782e-03, 8.893e-04, 6.818e-04, -2.683e-04);
	r0 = tanh(r0);
	vec2 opt = 0.5 * LUMA_pt;
	vec2 fpos = (vec2(opos) + vec2(0.5)) * opt;
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0.x + easu_tex(fpos + vec2(0.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r0.y + easu_tex(fpos + vec2(1.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(0, 1), vec4(r0.z + easu_tex(fpos + vec2(0.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 1), vec4(r0.w + easu_tex(fpos + vec2(1.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
}
