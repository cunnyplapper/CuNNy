// CuNNy 4x8C DS
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

// FSR mpv | modified
// Copyright (c) 2021 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// FidelityFX FSR v1.0.2 by AMD
// ported to mpv by agyild

//!DESC CuNNy-EASU
//!HOOK LUMA
//!BIND LUMA
//!SAVE easu
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
//!COMPONENTS 1

float APrxLoRcpF1(float a) {
	return uintBitsToFloat(uint(0x7ef07ebb) - floatBitsToUint(a));
}

float APrxLoRsqF1(float a) {
	return uintBitsToFloat(uint(0x5f347d74) - (floatBitsToUint(a) >> uint(1)));
}

float AMin3F1(float x, float y, float z) {
	return min(x, min(y, z));
}

float AMax3F1(float x, float y, float z) {
	return max(x, max(y, z));
}

void tap(inout float aC, inout float aW, vec2 off, vec2 dir, vec2 len,
         float lob, float clp, float c){
	vec2 v;
	v.x = (off.x * ( dir.x)) + (off.y * dir.y);
	v.y = (off.x * (-dir.y)) + (off.y * dir.x);
	v *= len;
	float d2 = v.x * v.x + v.y * v.y;
	d2 = min(d2, clp);
	float wB = float(2.0 / 5.0) * d2 + -1.0;
	float wA = lob * d2 + -1.0;
	wB *= wB;
	wA *= wA;
	wB = float(25.0 / 16.0) * wB + float(-(25.0 / 16.0 - 1.0));
	float w = wB * wA;
	aC += c * w;
	aW += w;
}

void set(inout vec2 dir, inout float len, vec2 pp, bool biS, bool biT,
         bool biU, bool biV, float lA, float lB, float lC, float lD, float lE){
	float w = 0.0;
	if (biS)
		w = (1.0 - pp.x) * (1.0 - pp.y);
	if (biT)
		w =        pp.x  * (1.0 - pp.y);
	if (biU)
		w = (1.0 - pp.x) *        pp.y;
	if (biV)
		w =        pp.x  *        pp.y;
	float dc = lD - lC;
	float cb = lC - lB;
	float lenX = max(abs(dc), abs(cb));
	lenX = APrxLoRcpF1(lenX);
	float dirX = lD - lB;
	lenX = clamp(abs(dirX) * lenX, 0.0, 1.0);
	lenX *= lenX;
	float ec = lE - lC;
	float ca = lC - lA;
	float lenY = max(abs(ec), abs(ca));
	lenY = APrxLoRcpF1(lenY);
	float dirY = lE - lA;
	lenY = clamp(abs(dirY) * lenY, 0.0, 1.0);
	lenY *= lenY;
	dir += vec2(dirX, dirY) * w;
	len += dot(vec2(w), vec2(lenX, lenY));
}

vec4 hook() {
	vec4 pix = vec4(0.0, 0.0, 0.0, 1.0);
	vec2 pp = LUMA_pos * LUMA_size - vec2(0.5);
	vec2 fp = floor(pp);
	pp -= fp;
#if (defined(LUMA_gather) && (__VERSION__ >= 400 || (GL_ES && __VERSION__ >= 310)))
	vec4 bczzL = LUMA_gather(vec2((fp + vec2(1.0, -1.0)) * LUMA_pt), 0);
	vec4 ijfeL = LUMA_gather(vec2((fp + vec2(0.0,  1.0)) * LUMA_pt), 0);
	vec4 klhgL = LUMA_gather(vec2((fp + vec2(2.0,  1.0)) * LUMA_pt), 0);
	vec4 zzonL = LUMA_gather(vec2((fp + vec2(1.0,  3.0)) * LUMA_pt), 0);
#else
	float b = LUMA_tex(vec2((fp + vec2(0.5, -0.5)) * LUMA_pt)).r;
	float c = LUMA_tex(vec2((fp + vec2(1.5, -0.5)) * LUMA_pt)).r;
	float e = LUMA_tex(vec2((fp + vec2(-0.5, 0.5)) * LUMA_pt)).r;
	float f = LUMA_tex(vec2((fp + vec2( 0.5, 0.5)) * LUMA_pt)).r;
	float g = LUMA_tex(vec2((fp + vec2( 1.5, 0.5)) * LUMA_pt)).r;
	float h = LUMA_tex(vec2((fp + vec2( 2.5, 0.5)) * LUMA_pt)).r;
	float i = LUMA_tex(vec2((fp + vec2(-0.5, 1.5)) * LUMA_pt)).r;
	float j = LUMA_tex(vec2((fp + vec2( 0.5, 1.5)) * LUMA_pt)).r;
	float k = LUMA_tex(vec2((fp + vec2( 1.5, 1.5)) * LUMA_pt)).r;
	float l = LUMA_tex(vec2((fp + vec2( 2.5, 1.5)) * LUMA_pt)).r;
	float n = LUMA_tex(vec2((fp + vec2(0.5, 2.5) ) * LUMA_pt)).r;
	float o = LUMA_tex(vec2((fp + vec2(1.5, 2.5) ) * LUMA_pt)).r;
	vec4 bczzL = vec4(b, c, 0.0, 0.0);
	vec4 ijfeL = vec4(i, j, f, e);
	vec4 klhgL = vec4(k, l, h, g);
	vec4 zzonL = vec4(0.0, 0.0, o, n);
#endif
	float bL = bczzL.x;
	float cL = bczzL.y;
	float iL = ijfeL.x;
	float jL = ijfeL.y;
	float fL = ijfeL.z;
	float eL = ijfeL.w;
	float kL = klhgL.x;
	float lL = klhgL.y;
	float hL = klhgL.z;
	float gL = klhgL.w;
	float oL = zzonL.z;
	float nL = zzonL.w;
	vec2 dir = vec2(0.0);
	float len = 0.0;
	set(dir, len, pp, true, false, false, false, bL, eL, fL, gL, jL);
	set(dir, len, pp, false, true, false, false, cL, fL, gL, hL, kL);
	set(dir, len, pp, false, false, true, false, fL, iL, jL, kL, nL);
	set(dir, len, pp, false, false, false, true, gL, jL, kL, lL, oL);
	vec2 dir2 = dir * dir;
	float dirR = dir2.x + dir2.y;
	bool zro = dirR < float(1.0 / 32768.0);
	dirR = APrxLoRsqF1(dirR);
	dirR = zro ? 1.0 : dirR;
	dir.x = zro ? 1.0 : dir.x;
	dir *= vec2(dirR);
	len = len * 0.5;
	len *= len;
	float stretch = (dir.x * dir.x + dir.y * dir.y) * APrxLoRcpF1(max(abs(dir.x), abs(dir.y)));
	vec2 len2 = vec2(1.0 + (stretch - 1.0) * len, 1.0 + -0.5 * len);
	float lob = 0.5 + float((1.0 / 4.0 - 0.04) - 0.5) * len;
	float clp = APrxLoRcpF1(lob);
	float aC = 0.0;
	float aW = 0.0;
	tap(aC, aW, vec2( 0.0,-1.0) - pp, dir, len2, lob, clp, bL);
	tap(aC, aW, vec2( 1.0,-1.0) - pp, dir, len2, lob, clp, cL);
	tap(aC, aW, vec2(-1.0, 1.0) - pp, dir, len2, lob, clp, iL);
	tap(aC, aW, vec2( 0.0, 1.0) - pp, dir, len2, lob, clp, jL);
	tap(aC, aW, vec2( 0.0, 0.0) - pp, dir, len2, lob, clp, fL);
	tap(aC, aW, vec2(-1.0, 0.0) - pp, dir, len2, lob, clp, eL);
	tap(aC, aW, vec2( 1.0, 1.0) - pp, dir, len2, lob, clp, kL);
	tap(aC, aW, vec2( 2.0, 1.0) - pp, dir, len2, lob, clp, lL);
	tap(aC, aW, vec2( 2.0, 0.0) - pp, dir, len2, lob, clp, hL);
	tap(aC, aW, vec2( 1.0, 0.0) - pp, dir, len2, lob, clp, gL);
	tap(aC, aW, vec2( 1.0, 2.0) - pp, dir, len2, lob, clp, oL);
	tap(aC, aW, vec2( 0.0, 2.0) - pp, dir, len2, lob, clp, nL);
	pix.r = aC / aW;
	float min1 = min(AMin3F1(fL, gL, jL), kL);
	float max1 = max(AMax3F1(fL, gL, jL), kL);
	pix.r = clamp(pix.r, min1, max1);
	pix.r = clamp(pix.r, 0.0, 1.0);
	return pix;
}


//!DESC CuNNy-4x8C-DS-in
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND LUMA
//!SAVE in
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
	#define V4 f16vec4
	#define M4 f16mat4
	#define F float16_t
#else
	#define V4 vec4
	#define M4 mat4
	#define F float
#endif
#define l0(x, y) F(texelFetch(LUMA_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(1, 1) + ivec2(0, 0), 0).r)
shared F s0[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += V4(-1.806e-02, 1.196e-01, 4.895e-02, -4.827e-02) * s0[y+0][x+0];
	r += V4(2.008e-02, -2.206e-01, -1.293e-01, 6.035e-02) * s0[y+0][x+1];
	r += V4(-1.286e-04, 1.353e-01, -2.290e-01, -3.111e-02) * s0[y+0][x+2];
	r += V4(2.931e-01, -5.185e-02, 2.877e-03, -1.750e-01) * s0[y+1][x+0];
	r += V4(1.680e-01, 5.827e-02, 2.600e-01, -2.112e-01) * s0[y+1][x+1];
	r += V4(-2.196e-04, -3.651e-03, -4.940e-03, 1.174e-01) * s0[y+1][x+2];
	r += V4(5.369e-02, 1.898e-02, -5.662e-02, -2.630e-02) * s0[y+2][x+0];
	r += V4(-5.156e-01, 5.322e-03, 2.539e-03, 2.416e-01) * s0[y+2][x+1];
	r += V4(-2.982e-03, -1.096e-02, 1.033e-01, 1.898e-02) * s0[y+2][x+2];
	r += V4(2.191e-03, 9.066e-04, 2.301e-02, -5.666e-03);
	return vec4(r);
}
vec4 f1(int x, int y) {
	V4 r = V4(0.0);
	r += V4(-9.423e-02, -4.232e-02, 5.698e-02, 2.335e-02) * s0[y+0][x+0];
	r += V4(1.460e-01, 5.691e-02, -3.801e-02, -5.753e-02) * s0[y+0][x+1];
	r += V4(6.943e-02, -2.215e-02, -1.445e-02, 5.774e-02) * s0[y+0][x+2];
	r += V4(-2.784e-01, 1.679e-01, -9.487e-03, 2.588e-01) * s0[y+1][x+0];
	r += V4(-8.038e-02, 5.803e-02, -4.726e-01, -4.799e-01) * s0[y+1][x+1];
	r += V4(3.291e-01, -2.228e-01, -2.302e-01, 1.947e-01) * s0[y+1][x+2];
	r += V4(7.247e-02, -1.294e-01, -3.551e-03, 7.869e-02) * s0[y+2][x+0];
	r += V4(-1.126e-01, -1.436e-01, 1.535e-01, -7.070e-02) * s0[y+2][x+1];
	r += V4(-3.746e-02, 2.798e-01, -3.337e-02, -1.609e-02) * s0[y+2][x+2];
	r += V4(2.128e-02, 1.369e-03, 1.533e-02, 2.472e-02);
	return vec4(r);
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = LUMA_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
		}
	}
	barrier();
	memoryBarrierShared();
	imageStore(out_image, opos + ivec2(0, 0), f0(xy.x, xy.y));
	imageStore(out_image, opos + ivec2(1, 0), f1(xy.x, xy.y));
}


//!DESC CuNNy-4x8C-DS-conv1
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND in
//!BIND LUMA
//!SAVE conv1
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
	#define V4 f16vec4
	#define M4 f16mat4
	#define F float16_t
#else
	#define V4 vec4
	#define M4 mat4
	#define F float
#endif
#define l0(x, y) V4(texelFetch(in_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(in_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 s0[10][10];
shared V4 s1[10][10];
shared V4 s2[10][10];
shared V4 s3[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += M4(1.599e-01, 1.260e-01, -1.207e-02, 6.024e-02, 5.506e-02, -1.086e-01, 5.961e-02, -2.062e-02, -7.093e-02, 8.618e-03, -5.699e-02, 5.728e-02, -2.495e-01, -1.840e-01, 9.864e-03, 1.061e-01) * s0[y+0][x+0];
	r += M4(-3.080e-01, -2.010e-01, 4.229e-01, -1.693e-01, 1.813e-02, -1.270e-01, -9.159e-02, -2.072e-02, 7.905e-02, -8.996e-02, -1.194e-02, -1.213e-02, 1.674e-01, 1.379e-01, 1.629e-01, -2.112e-02) * s0[y+0][x+1];
	r += M4(-9.905e-02, 1.380e-02, 3.342e-01, -1.927e-01, 5.616e-02, 4.616e-02, -6.984e-02, 1.100e-01, -4.746e-02, 6.830e-02, -2.481e-02, 9.713e-03, -1.076e-01, 1.412e-01, -2.739e-01, 8.233e-02) * s0[y+0][x+2];
	r += M4(1.318e-01, 1.899e-02, -1.801e-01, 7.560e-02, -9.619e-02, 2.722e-02, -2.329e-02, 9.114e-03, -1.860e-03, -1.146e-02, -5.693e-02, 1.756e-01, 8.168e-02, 9.774e-02, 6.467e-02, 1.726e-01) * s0[y+1][x+0];
	r += M4(-2.641e-01, 4.131e-01, 2.026e-01, 7.949e-02, 1.078e-01, 1.671e-02, -8.818e-03, 2.776e-03, 9.118e-02, 7.151e-03, 7.026e-02, 6.458e-03, -5.720e-02, -3.456e-01, -1.827e-02, 1.002e-01) * s0[y+1][x+1];
	r += M4(-4.856e-02, -1.067e-01, 5.206e-02, 4.078e-02, -3.479e-02, -7.574e-02, 2.340e-01, -8.534e-02, -1.547e-02, 1.212e-01, -1.009e-01, -1.486e-02, 2.702e-01, -4.801e-03, 2.581e-01, 9.894e-02) * s0[y+1][x+2];
	r += M4(-5.944e-02, -1.066e-01, -7.474e-02, -1.646e-01, 1.140e-01, 1.392e-01, 4.756e-02, 1.029e-02, 1.849e-01, -3.017e-01, -1.078e-01, 3.356e-02, -3.002e-01, -1.243e-01, 1.339e-01, -1.433e-01) * s0[y+2][x+0];
	r += M4(-2.489e-02, 1.760e-01, 2.226e-02, -2.926e-02, -2.274e-01, -5.221e-02, 7.374e-02, 1.187e-01, 1.868e-01, -3.264e-01, 8.365e-02, -1.233e-03, 4.657e-01, -2.916e-01, -2.888e-01, -1.245e-01) * s0[y+2][x+1];
	r += M4(1.151e-01, 8.670e-02, -5.932e-03, -7.731e-03, 1.161e-01, 3.511e-02, -8.335e-02, -1.112e-01, 1.118e-01, 4.147e-02, -4.464e-02, 1.292e-02, 1.259e-02, -2.685e-01, -2.212e-01, -1.448e-01) * s0[y+2][x+2];
	r += M4(-2.044e-01, 2.558e-02, -1.076e-03, 1.035e-01, 7.187e-02, -3.918e-02, 2.234e-02, -2.501e-02, -8.340e-01, -5.806e-02, -1.067e-01, 8.889e-02, -1.344e-02, -5.886e-02, 1.127e-01, -5.942e-02) * s1[y+0][x+0];
	r += M4(5.027e-04, -1.080e-01, -2.057e-02, -1.490e-01, -2.842e-01, 1.543e-01, -7.711e-02, 1.796e-01, -1.310e-02, -2.220e-01, 1.568e-01, -9.982e-02, 3.801e-02, 8.025e-02, 1.094e-01, 4.380e-02) * s1[y+0][x+1];
	r += M4(-2.302e-01, -1.175e-01, -2.666e-01, 1.036e-01, 1.636e-01, 4.000e-02, -3.266e-01, 3.547e-02, -2.158e-01, 1.490e-01, 5.077e-02, 7.415e-02, 7.376e-02, 3.745e-03, -1.560e-01, 3.403e-03) * s1[y+0][x+2];
	r += M4(-1.167e-01, 8.626e-02, -2.538e-01, 6.762e-02, -3.625e-01, -8.972e-03, -9.045e-02, 9.499e-02, -5.751e-01, 4.389e-01, 2.727e-03, 1.447e-01, 1.879e-01, -7.484e-02, -1.308e-01, 6.477e-02) * s1[y+1][x+0];
	r += M4(-5.671e-02, 4.127e-01, -4.391e-01, 2.493e-02, 1.342e-02, 1.819e-02, -5.855e-01, 2.063e-01, 2.119e-01, 3.322e-01, 4.170e-02, -2.496e-02, -1.843e-01, -1.905e-01, -1.199e-02, 6.919e-02) * s1[y+1][x+1];
	r += M4(2.587e-01, 7.506e-02, -6.047e-01, 1.758e-01, 9.544e-02, -4.778e-01, 1.343e-01, -2.336e-01, -7.681e-02, -5.971e-02, 1.178e-01, -8.215e-02, -1.109e-01, 5.961e-02, 8.087e-02, 2.429e-03) * s1[y+1][x+2];
	r += M4(-1.550e-01, -1.851e-01, 7.392e-02, -1.929e-01, -2.824e-01, 1.774e-01, -7.009e-01, -1.003e-01, -4.948e-02, -3.595e-02, 2.703e-01, -1.561e-01, -1.309e-01, 1.216e-02, 2.352e-02, -8.659e-02) * s1[y+2][x+0];
	r += M4(9.950e-02, -2.205e-01, -1.060e-01, -7.935e-02, 3.665e-01, -9.146e-02, 3.233e-02, -4.509e-01, 3.537e-02, -4.424e-02, 1.811e-01, -2.222e-01, 1.350e-01, 3.048e-01, -9.960e-02, 3.923e-02) * s1[y+2][x+1];
	r += M4(2.149e-01, -1.235e-01, -1.151e-01, 2.527e-03, -1.897e-01, -2.907e-01, -1.359e-01, 3.908e-01, 2.301e-01, -4.797e-03, 2.131e-01, 8.213e-02, -1.667e-02, 2.189e-02, 5.390e-02, -1.211e-01) * s1[y+2][x+2];
	r += M4(-2.240e-01, -7.163e-02, -9.875e-02, 2.587e-02, 1.843e-01, -1.429e-01, 6.452e-02, 2.047e-02, 5.268e-01, -3.044e-02, 2.834e-01, -2.722e-01, 3.377e-02, -2.001e-01, -7.786e-03, 6.351e-03) * s2[y+0][x+0];
	r += M4(1.911e-02, -1.842e-02, -4.996e-02, 2.296e-02, -1.910e-01, 1.119e-01, -1.069e-02, -3.145e-02, 1.801e-01, 5.672e-01, 1.051e-01, -2.884e-01, 1.984e-01, -2.328e-02, 2.439e-02, -5.628e-02) * s2[y+0][x+1];
	r += M4(-1.187e-01, 4.426e-02, 1.152e-01, 1.802e-02, -6.674e-02, 2.374e-01, -6.997e-02, -3.862e-02, -3.990e-01, 1.986e-01, -2.175e-01, 1.327e-01, -8.350e-02, 1.248e-01, -1.130e-01, -2.521e-02) * s2[y+0][x+2];
	r += M4(1.460e-01, 1.717e-01, -1.092e-01, 1.702e-01, -1.511e-01, -2.406e-01, 2.950e-01, -1.312e-01, 9.848e-01, -4.621e-01, 6.680e-03, -4.745e-01, 1.756e-01, 1.768e-01, 5.579e-02, 1.058e-01) * s2[y+1][x+0];
	r += M4(2.579e-01, 7.158e-02, 1.008e-02, -1.272e-01, -3.872e-02, 1.950e-02, -1.397e-01, 2.271e-02, -1.549e-01, -3.751e-01, 1.516e-01, -5.208e-01, 1.890e-02, -2.463e-01, 4.771e-02, -1.546e-01) * s2[y+1][x+1];
	r += M4(1.043e-01, -9.130e-02, 2.400e-01, -2.457e-01, 9.039e-02, 3.089e-02, -4.969e-02, -5.492e-02, -4.513e-01, 5.064e-01, -9.506e-03, -3.994e-01, -3.495e-02, 1.584e-02, -2.359e-01, 1.258e-01) * s2[y+1][x+2];
	r += M4(-1.815e-02, 1.684e-01, -5.470e-02, -5.300e-02, -1.909e-01, 1.732e-01, -5.829e-02, -2.025e-02, -2.981e-01, -2.086e-01, -1.183e-01, -3.042e-01, 6.943e-03, -2.473e-02, 1.255e-01, 3.959e-03) * s2[y+2][x+0];
	r += M4(-8.859e-02, 2.729e-01, -1.444e-01, 1.339e-01, 1.678e-01, 1.291e-01, -7.817e-02, 1.419e-01, -1.071e-01, -4.506e-01, 1.944e-01, -8.483e-02, -1.452e-01, 6.723e-02, 4.275e-02, -1.739e-02) * s2[y+2][x+1];
	r += M4(1.704e-02, 5.075e-02, 3.433e-01, -6.209e-03, -4.974e-02, 5.955e-02, -1.186e-01, -5.532e-02, -1.837e-01, 2.727e-01, -5.322e-01, -1.393e-01, -1.284e-01, -5.542e-02, -1.781e-01, 1.599e-03) * s2[y+2][x+2];
	r += M4(-1.480e-01, -6.483e-02, 1.051e-01, 8.341e-03, -1.128e-01, -2.919e-01, -4.819e-02, -7.323e-02, -8.638e-03, -8.857e-02, -9.983e-02, -1.606e-01, -7.029e-02, -1.924e-01, 3.837e-02, -5.286e-02) * s3[y+0][x+0];
	r += M4(1.048e-01, 9.610e-02, -1.050e-01, 6.730e-03, -1.665e-01, -2.170e-01, -5.678e-02, 3.527e-03, 2.738e-02, -7.545e-02, 2.883e-02, -3.692e-02, 1.225e-01, -5.413e-02, 7.004e-02, -1.501e-01) * s3[y+0][x+1];
	r += M4(-2.632e-01, 1.382e-01, 9.163e-02, 1.260e-02, -4.136e-02, 2.122e-03, 9.457e-02, 4.198e-02, -4.471e-02, 3.963e-02, -1.271e-02, 3.293e-02, -5.473e-02, 2.495e-01, -1.784e-01, 6.147e-02) * s3[y+0][x+2];
	r += M4(-2.517e-01, 7.646e-02, -1.803e-01, 1.432e-01, 2.610e-01, -3.191e-01, 6.513e-02, -8.532e-02, 1.365e-01, 2.412e-02, 1.223e-01, -5.996e-02, 5.489e-02, 2.675e-01, -1.240e-03, 2.884e-01) * s3[y+1][x+0];
	r += M4(1.397e-01, -2.300e-01, -3.027e-02, -2.287e-01, 3.966e-01, -3.036e-01, -3.921e-01, -6.099e-02, -3.535e-02, -1.431e-01, -1.678e-02, -2.023e-01, -4.233e-01, 7.960e-02, 3.997e-01, -6.715e-01) * s3[y+1][x+1];
	r += M4(9.681e-02, -1.413e-01, 2.457e-01, -2.282e-01, 1.557e-01, -9.837e-02, -8.413e-02, -3.419e-04, -8.078e-02, -1.696e-02, 5.664e-02, -1.734e-01, 1.404e-01, 4.862e-01, -2.263e-01, 2.105e-01) * s3[y+1][x+2];
	r += M4(-1.372e-01, 7.071e-02, 3.154e-01, -2.117e-02, 9.404e-02, 1.921e-01, 1.587e-01, 8.641e-02, -8.383e-02, 7.672e-02, 4.246e-02, -2.329e-01, 1.038e-01, 4.478e-02, 1.770e-01, 5.407e-02) * s3[y+2][x+0];
	r += M4(1.146e-01, -1.694e-01, -6.560e-02, 1.710e-01, 2.232e-01, 6.843e-02, 4.023e-02, 2.807e-01, 4.894e-02, 5.181e-02, -4.842e-02, 1.151e-01, -8.716e-02, 2.266e-01, 1.223e-01, 2.204e-02) * s3[y+2][x+1];
	r += M4(1.949e-01, 5.534e-02, 1.943e-01, -6.550e-02, -3.911e-02, -2.732e-02, 1.712e-01, 6.020e-02, 1.059e-01, 1.157e-01, -2.992e-02, -7.320e-02, -1.366e-01, -2.286e-01, -4.142e-01, -1.663e-02) * s3[y+2][x+2];
	r += V4(1.713e-02, -3.045e-02, -3.389e-02, 8.020e-03);
	return vec4(r);
}
vec4 f1(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-5.360e-02, 1.806e-01, -3.206e-01, 2.992e-02, -1.648e-02, -3.553e-02, -2.193e-02, -1.306e-01, 4.176e-03, 1.392e-03, -1.228e-01, -7.885e-03, -2.224e-01, 7.983e-02, 6.242e-02, 2.241e-01) * s0[y+0][x+0];
	r += M4(2.240e-01, -1.238e-03, -2.745e-01, -6.759e-01, 1.479e-01, 1.005e-01, -1.153e-01, -3.315e-02, 1.083e-02, 4.605e-02, -2.178e-03, -5.092e-02, -4.082e-02, 8.692e-02, 4.874e-02, 6.062e-02) * s0[y+0][x+1];
	r += M4(-1.928e-01, -1.655e-01, 9.310e-02, -3.475e-01, 1.222e-01, 1.495e-02, -1.673e-02, 1.069e-01, 6.035e-02, -8.758e-02, 2.792e-02, 5.382e-02, 1.997e-01, 2.329e-01, -5.896e-02, -9.529e-02) * s0[y+0][x+2];
	r += M4(-8.931e-02, -2.483e-02, -8.129e-02, -1.741e-01, 1.871e-01, -2.379e-02, 1.067e-01, -4.693e-02, -3.689e-01, -1.820e-01, -3.057e-01, -1.222e-01, -2.126e-01, -9.453e-02, 7.602e-02, -1.321e-02) * s0[y+1][x+0];
	r += M4(-5.646e-03, -4.237e-02, -1.732e-01, -3.392e-01, -1.972e-01, 8.258e-02, 4.480e-02, -1.778e-02, -1.633e-01, -2.510e-01, 2.168e-01, 1.142e-02, -5.005e-02, 3.127e-01, -3.802e-01, -7.038e-02) * s0[y+1][x+1];
	r += M4(-3.363e-01, -8.699e-02, 1.587e-01, -3.290e-01, -5.459e-02, -2.891e-01, 5.084e-02, -8.008e-02, 4.827e-02, -1.241e-03, 8.007e-02, 2.298e-01, 2.078e-02, 4.014e-02, -5.995e-01, -1.111e-01) * s0[y+1][x+2];
	r += M4(1.160e-01, 1.542e-02, 9.228e-02, 1.421e-01, -5.323e-02, -3.676e-02, -9.326e-02, 3.125e-02, 1.200e-01, 8.823e-03, 5.714e-02, 2.641e-01, 1.690e-01, -3.869e-02, 4.686e-02, -1.407e-01) * s0[y+2][x+0];
	r += M4(8.180e-02, 1.048e-01, -7.732e-02, -1.683e-02, 1.707e-02, -1.442e-01, 2.078e-01, -2.136e-02, -3.808e-02, 4.080e-02, -1.010e-01, 7.904e-03, -8.994e-02, 1.580e-01, 2.374e-01, 1.606e-01) * s0[y+2][x+1];
	r += M4(7.749e-02, -3.343e-02, 7.593e-02, -5.381e-02, -1.776e-01, 4.194e-02, -9.549e-02, 1.183e-01, -1.421e-01, 3.195e-02, -2.761e-02, 1.831e-01, 3.195e-01, 1.111e-01, 1.212e-01, 1.740e-01) * s0[y+2][x+2];
	r += M4(-1.455e-01, 1.995e-01, -5.244e-02, 8.993e-02, 1.927e-01, 9.264e-02, -3.495e-01, 2.103e-01, -1.170e-01, -9.331e-02, -1.860e-01, -1.119e-01, 3.976e-02, 7.984e-02, 1.372e-01, 3.565e-02) * s1[y+0][x+0];
	r += M4(4.575e-02, -8.303e-02, 1.938e-01, 2.698e-01, 2.435e-01, -2.500e-01, -9.700e-02, -2.257e-01, 2.120e-01, 4.328e-02, 2.849e-02, -2.377e-01, -2.397e-01, -5.533e-02, -6.908e-02, -6.070e-03) * s1[y+0][x+1];
	r += M4(-4.846e-01, -2.038e-01, -1.406e-01, -2.386e-03, 9.010e-02, -1.165e-01, 1.322e-01, -1.089e-02, 8.119e-02, -1.336e-01, -2.666e-02, -3.869e-02, -3.799e-02, -1.919e-02, -5.858e-02, 1.722e-02) * s1[y+0][x+2];
	r += M4(6.256e-02, 6.067e-02, 1.397e-01, -2.511e-02, 1.910e-01, -4.866e-01, -3.079e-01, 5.472e-02, -1.926e-02, 3.465e-02, 2.896e-01, -1.875e-01, -2.091e-01, -1.573e-01, 8.104e-02, -1.008e-01) * s1[y+1][x+0];
	r += M4(-1.827e-02, 2.423e-01, 8.005e-02, 2.437e-01, -7.705e-01, -3.023e-02, -1.500e-01, 4.092e-01, -3.022e-01, -6.732e-03, 5.706e-02, -2.839e-01, 1.100e-02, -6.486e-02, 2.548e-02, 3.561e-02) * s1[y+1][x+1];
	r += M4(4.569e-02, 8.688e-02, -1.551e-01, 1.993e-01, -7.358e-01, 2.264e-01, 1.698e-01, -2.235e-01, 8.789e-02, -2.177e-02, -1.909e-02, -2.076e-01, -2.706e-02, -1.521e-01, -5.214e-02, -8.672e-03) * s1[y+1][x+2];
	r += M4(1.094e-01, -3.317e-02, 1.390e-01, -3.384e-02, -1.960e-01, 2.424e-01, -9.064e-02, 4.973e-01, 1.747e-01, -2.272e-02, 3.166e-01, -4.424e-01, 1.980e-01, 1.012e-01, 1.521e-01, -4.255e-03) * s1[y+2][x+0];
	r += M4(5.861e-03, 1.059e-01, -5.209e-02, 1.965e-02, -2.382e-01, 5.142e-01, -9.972e-01, -1.225e-01, 1.322e-01, 2.154e-01, -1.763e-01, 1.194e-01, 2.789e-02, -8.951e-02, 6.196e-02, 1.405e-01) * s1[y+2][x+1];
	r += M4(1.149e-01, -2.064e-02, 1.214e-01, 4.502e-02, -3.858e-01, 3.731e-01, 1.226e-01, -1.191e-01, -1.470e-01, 2.896e-01, -4.732e-02, 8.433e-02, 2.283e-01, -8.887e-02, 1.892e-02, -7.945e-02) * s1[y+2][x+2];
	r += M4(-2.817e-02, -1.052e-02, -1.925e-01, -1.705e-02, 3.250e-01, 5.017e-02, -1.377e-03, -8.498e-02, -3.839e-01, -1.019e-01, -2.984e-01, -1.796e-02, 1.193e-02, -7.183e-02, 1.449e-01, 4.945e-02) * s2[y+0][x+0];
	r += M4(-3.153e-02, 1.005e-01, -1.122e-01, -9.954e-02, -1.668e-01, 1.604e-02, -6.839e-02, 8.277e-03, -3.430e-01, -3.330e-01, -2.457e-02, 2.152e-02, -1.952e-02, -5.024e-03, 1.730e-02, 1.265e-01) * s2[y+0][x+1];
	r += M4(7.787e-02, -1.418e-01, 1.154e-02, 3.674e-02, -2.572e-02, -6.333e-02, 3.248e-02, -6.334e-02, -1.603e-01, -5.141e-01, 3.095e-01, -4.099e-02, -2.261e-01, 1.131e-01, -6.425e-02, 9.643e-02) * s2[y+0][x+2];
	r += M4(1.050e-01, 1.106e-01, 1.645e-01, -8.703e-03, -1.488e-02, 8.223e-02, 2.029e-02, -2.815e-02, 1.531e-01, 5.586e-01, -4.757e-01, 9.353e-01, -1.049e-01, -3.175e-02, 1.813e-01, -9.913e-02) * s2[y+1][x+0];
	r += M4(1.832e-01, 1.329e-01, 1.044e-01, 6.161e-02, -1.551e-01, 3.711e-02, -3.177e-02, -2.105e-02, 2.591e-01, 1.537e-01, -8.719e-01, 6.307e-01, 1.085e-01, 6.295e-03, -2.553e-01, 2.300e-01) * s2[y+1][x+1];
	r += M4(2.360e-01, 1.825e-01, 1.440e-01, 1.479e-01, -1.817e-01, 3.223e-01, -1.474e-01, -9.516e-02, -1.696e-01, 2.647e-01, 3.563e-01, 7.505e-02, -4.034e-01, -2.895e-01, -1.398e-01, -1.959e-01) * s2[y+1][x+2];
	r += M4(-8.679e-02, -9.888e-02, -6.220e-02, -2.183e-02, -5.239e-02, 1.762e-02, -9.555e-02, -1.269e-01, -5.107e-02, 4.790e-01, 9.150e-02, -2.065e-02, 1.395e-02, -1.116e-02, -5.347e-02, -6.234e-02) * s2[y+2][x+0];
	r += M4(1.039e-02, -8.981e-02, 1.383e-01, 6.020e-02, 9.332e-02, 1.710e-02, 1.776e-01, -6.767e-02, -1.027e-01, 1.820e-01, -4.488e-02, 5.973e-02, 1.361e-01, -9.299e-02, 1.266e-02, -2.300e-01) * s2[y+2][x+1];
	r += M4(9.225e-02, 1.908e-02, 7.527e-02, -1.752e-02, 3.639e-02, 8.227e-02, -5.267e-03, 1.070e-01, -4.606e-01, 3.083e-01, 3.030e-01, -6.020e-01, -2.437e-02, -1.467e-01, 4.436e-02, -1.134e-01) * s2[y+2][x+2];
	r += M4(4.028e-02, -4.519e-03, -2.097e-01, -9.083e-02, 1.374e-01, -1.135e-01, -5.874e-02, 7.536e-02, 6.162e-02, 4.822e-02, 4.468e-02, 4.418e-02, -6.906e-03, -8.169e-03, 2.286e-01, -6.903e-02) * s3[y+0][x+0];
	r += M4(-2.851e-02, 7.594e-02, 4.813e-02, -5.234e-02, -9.054e-03, 3.126e-01, 2.566e-02, 3.390e-01, -2.420e-01, -3.721e-02, -5.294e-02, -7.616e-02, -1.166e-01, 3.392e-02, -2.710e-03, 1.136e-01) * s3[y+0][x+1];
	r += M4(1.672e-01, -5.028e-02, 1.416e-01, -2.003e-02, -6.312e-02, 3.875e-03, -3.664e-02, 2.999e-02, 6.558e-02, 2.716e-02, 5.351e-02, -3.894e-02, 2.136e-02, -6.119e-02, -1.147e-01, 1.475e-01) * s3[y+0][x+2];
	r += M4(-2.038e-02, 1.257e-01, 5.184e-02, -1.923e-01, 2.102e-01, 2.492e-02, 7.033e-02, 3.865e-01, 1.464e-01, -1.655e-01, 2.187e-03, 2.676e-02, -2.050e-01, -1.776e-01, 4.742e-02, -1.699e-02) * s3[y+1][x+0];
	r += M4(1.192e-01, 9.647e-02, 4.132e-02, 1.047e-01, 6.406e-03, -2.859e-01, 6.825e-02, 2.400e-01, -1.119e-01, -9.293e-03, -1.456e-01, 2.043e-01, 5.532e-01, -8.459e-02, -3.861e-02, -1.360e-01) * s3[y+1][x+1];
	r += M4(2.511e-01, 1.318e-01, 4.164e-02, 6.126e-02, -8.475e-02, -3.513e-01, -7.076e-02, -2.197e-01, 3.083e-03, -6.917e-02, 3.594e-02, -3.515e-02, -2.771e-01, -1.238e-01, -2.428e-01, -2.159e-02) * s3[y+1][x+2];
	r += M4(3.369e-02, -1.892e-01, -2.075e-01, -2.310e-01, -1.617e-01, 2.851e-02, -1.013e-01, -2.458e-01, 1.440e-01, 7.215e-02, 1.069e-01, 9.211e-03, -4.042e-02, -2.859e-02, -2.979e-01, -5.321e-02) * s3[y+2][x+0];
	r += M4(-4.167e-01, -1.306e-01, 1.267e-01, -2.502e-01, -1.659e-02, -3.026e-01, 2.263e-01, -1.005e-01, -5.775e-02, 9.500e-02, -5.915e-02, -5.635e-02, 1.173e-01, 1.031e-01, -1.941e-03, -2.107e-01) * s3[y+2][x+1];
	r += M4(6.502e-02, 3.349e-01, 1.803e-01, 1.607e-02, 2.287e-02, -7.422e-02, -8.408e-04, -1.882e-01, 1.931e-02, 4.651e-02, 1.749e-02, -6.163e-02, -2.097e-02, -3.874e-01, -1.418e-01, -5.903e-03) * s3[y+2][x+2];
	r += V4(2.682e-02, 3.184e-02, 1.921e-03, 2.840e-02);
	return vec4(r);
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = in_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
			s2[ay][ax] = l1(x - 1, y - 1);
			s1[ay][ax] = -max(-s0[ay][ax], V4(0.0));
			s0[ay][ax] = max(s0[ay][ax], V4(0.0));
			s3[ay][ax] = -max(-s2[ay][ax], V4(0.0));
			s2[ay][ax] = max(s2[ay][ax], V4(0.0));
		}
	}
	barrier();
	memoryBarrierShared();
	imageStore(out_image, opos + ivec2(0, 0), f0(xy.x, xy.y));
	imageStore(out_image, opos + ivec2(1, 0), f1(xy.x, xy.y));
}


//!DESC CuNNy-4x8C-DS-conv2
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv1
//!BIND LUMA
//!SAVE conv2
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
	#define V4 f16vec4
	#define M4 f16mat4
	#define F float16_t
#else
	#define V4 vec4
	#define M4 mat4
	#define F float
#endif
#define l0(x, y) V4(texelFetch(conv1_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv1_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 s0[10][10];
shared V4 s1[10][10];
shared V4 s2[10][10];
shared V4 s3[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += M4(7.631e-02, -4.754e-02, -3.912e-02, -2.645e-02, 2.705e-01, -1.153e-01, 1.372e-01, 1.956e-01, 5.744e-02, 9.220e-02, 4.508e-02, 1.391e-01, -2.651e-02, 1.252e-01, 1.224e-01, 5.360e-02) * s0[y+0][x+0];
	r += M4(1.345e-01, -7.033e-02, 2.574e-02, -3.439e-02, 6.065e-02, -3.472e-03, 2.114e-02, 1.503e-01, -2.083e-01, -1.058e-01, 2.200e-01, -1.683e-01, -4.654e-02, -2.125e-02, 1.382e-01, -7.494e-02) * s0[y+0][x+1];
	r += M4(1.182e-01, 1.187e-02, -1.126e-02, -3.097e-02, 2.014e-01, 3.745e-01, 1.230e-01, -1.809e-01, 1.249e-01, -6.808e-02, 5.310e-02, -1.398e-01, 6.131e-02, 4.069e-02, 3.210e-02, -6.562e-02) * s0[y+0][x+2];
	r += M4(8.718e-02, 7.639e-02, -2.587e-02, 6.912e-03, -4.440e-04, 2.372e-01, 2.578e-02, -1.331e-02, -7.821e-02, 1.939e-01, -4.805e-02, -1.112e-01, 2.948e-02, -1.998e-01, 3.466e-02, -2.463e-02) * s0[y+1][x+0];
	r += M4(-1.811e-02, -3.356e-02, 1.151e-01, 1.015e-01, -3.117e-01, 2.825e-01, 2.358e-01, 1.398e-01, -4.074e-02, -2.725e-01, -4.151e-01, 3.682e-01, 1.526e-01, -2.146e-01, 2.486e-01, -6.103e-02) * s0[y+1][x+1];
	r += M4(1.601e-02, -8.829e-02, -1.276e-01, -3.373e-02, 6.167e-02, 6.600e-02, 1.509e-01, 1.159e-01, -7.539e-02, -6.726e-02, 2.053e-02, 1.981e-02, -6.326e-03, -9.839e-02, -3.605e-02, 3.796e-03) * s0[y+1][x+2];
	r += M4(1.091e-01, -6.959e-02, 1.461e-02, -1.064e-01, -1.597e-02, -4.327e-02, -2.589e-02, -6.649e-03, -9.774e-02, 1.156e-01, -9.790e-02, -1.724e-01, 3.782e-02, -5.040e-02, 1.047e-01, 1.990e-02) * s0[y+2][x+0];
	r += M4(2.788e-01, 3.435e-02, 1.196e-01, 1.284e-01, -1.811e-02, 1.510e-01, 1.430e-02, 4.447e-02, 3.973e-02, -2.386e-02, 8.569e-02, -1.714e-02, -3.995e-02, -6.104e-02, -1.115e-02, 1.111e-01) * s0[y+2][x+1];
	r += M4(1.442e-01, 7.940e-02, -1.251e-01, -1.120e-01, 5.582e-02, 1.141e-01, -4.979e-02, -4.862e-02, 1.078e-01, 1.085e-02, -3.428e-02, -1.895e-02, -1.323e-01, 4.296e-02, -1.134e-02, 2.416e-02) * s0[y+2][x+2];
	r += M4(9.552e-02, -8.270e-02, -1.345e-01, 7.080e-02, 1.438e-01, -1.099e-01, -1.189e-01, 7.504e-03, 1.489e-01, -3.848e-02, 8.459e-02, 9.643e-03, -8.373e-01, 8.745e-02, -2.270e-01, -5.562e-01) * s1[y+0][x+0];
	r += M4(-6.084e-02, -3.669e-02, 2.499e-02, -3.735e-02, -2.861e-01, -2.482e-01, -1.225e-01, -2.000e-01, -3.030e-02, 1.541e-01, 1.741e-01, -6.142e-03, -7.983e-01, -3.918e-01, 8.420e-01, -1.267e+00) * s1[y+0][x+1];
	r += M4(-1.141e-01, -5.083e-02, -1.394e-01, -7.984e-02, 2.592e-02, -3.285e-01, -3.803e-02, -2.637e-02, 1.014e-02, -5.260e-02, 4.033e-02, -3.868e-02, -7.096e-02, -1.864e-01, -4.181e-01, -2.201e-01) * s1[y+0][x+2];
	r += M4(3.958e-02, 2.021e-01, 1.050e-01, 1.788e-01, 1.112e-01, -5.122e-02, 1.435e-02, -8.822e-02, -1.999e-01, 6.506e-02, -8.075e-03, -4.919e-02, 2.428e-02, 7.172e-02, -2.145e-02, -2.507e+00) * s1[y+1][x+0];
	r += M4(3.334e-01, -2.386e-01, 7.128e-02, 2.867e-01, -1.205e-01, -1.402e-01, 8.962e-02, -5.036e-02, -6.467e-03, 9.616e-02, -3.242e-02, 1.259e-01, 1.554e-01, 3.373e-01, 1.350e+00, -2.539e+00) * s1[y+1][x+1];
	r += M4(1.546e-01, 1.639e-01, -3.266e-01, 5.711e-02, 2.487e-01, -1.070e-01, 1.095e-01, 8.459e-02, -7.508e-02, 7.098e-02, -9.073e-02, -1.060e-01, 7.785e-02, -9.797e-01, -2.573e-01, 1.577e-01) * s1[y+1][x+2];
	r += M4(1.662e-01, -2.838e-02, -1.264e-01, -6.191e-02, 4.869e-02, -9.812e-03, -8.310e-03, 6.394e-02, -1.126e-01, 1.176e-01, -6.740e-02, -6.410e-02, 4.222e-01, 8.656e-02, -4.433e-01, -1.328e-01) * s1[y+2][x+0];
	r += M4(1.247e-01, -7.989e-02, -9.879e-02, 1.284e-01, 9.232e-02, 1.285e-01, -3.839e-02, 5.253e-02, -6.815e-02, -2.160e-02, 1.663e-02, -2.567e-01, 4.098e-01, 1.837e-01, 3.434e-01, 3.329e-01) * s1[y+2][x+1];
	r += M4(3.478e-02, 1.241e-01, 1.067e-01, -1.075e-01, 9.778e-02, 1.313e-01, -5.458e-02, -2.561e-02, 5.306e-03, -6.751e-02, -1.869e-02, -5.334e-02, 4.230e-01, -4.077e-02, -3.036e-01, -2.758e-02) * s1[y+2][x+2];
	r += M4(1.914e-01, -9.499e-02, 1.154e-02, 5.805e-02, -2.932e-01, 7.110e-02, -9.790e-02, -5.043e-02, -1.443e-01, -7.041e-02, -9.451e-02, -6.916e-02, -8.583e-02, 4.168e-02, -3.064e-02, 5.836e-02) * s2[y+0][x+0];
	r += M4(1.064e-01, 7.849e-02, -5.518e-02, 1.829e-01, -1.062e-01, -1.697e-01, -1.342e-01, -6.429e-02, 1.322e-01, -2.773e-01, -1.020e-02, -1.929e-01, -2.224e-01, 2.420e-02, -5.957e-02, 2.077e-01) * s2[y+0][x+1];
	r += M4(-7.956e-02, 6.643e-02, -2.671e-02, 3.067e-02, -5.694e-02, 4.813e-02, 2.211e-02, -1.161e-01, 2.973e-01, -9.489e-02, -4.860e-02, -7.920e-02, -8.055e-02, -5.716e-03, 5.489e-03, -4.317e-02) * s2[y+0][x+2];
	r += M4(4.818e-02, 1.905e-02, 7.116e-02, 1.415e-01, 2.462e-01, -1.373e-01, 8.723e-02, -1.384e-03, -1.617e-01, 3.107e-02, -3.086e-02, -5.542e-02, -1.883e-01, -1.586e-01, -4.714e-02, 6.159e-02) * s2[y+1][x+0];
	r += M4(1.521e-02, 3.676e-02, -2.106e-01, 3.926e-04, 1.793e-02, 4.863e-02, -6.448e-02, 1.306e-02, -4.460e-02, -3.473e-01, 3.859e-01, -2.908e-01, -1.832e-01, -1.582e-01, -4.830e-02, 6.817e-01) * s2[y+1][x+1];
	r += M4(-4.188e-02, 8.639e-02, -4.889e-02, 7.041e-02, -6.931e-02, -9.257e-02, -3.775e-02, 7.184e-02, -2.668e-02, 3.840e-01, -3.949e-01, -1.305e-01, 4.128e-02, -3.772e-01, 2.918e-02, -6.581e-02) * s2[y+1][x+2];
	r += M4(-1.263e-01, -1.259e-01, 3.163e-02, 2.513e-02, -9.309e-02, -4.452e-02, -2.086e-02, -2.545e-02, -1.575e-01, 1.847e-01, -2.680e-02, 9.294e-02, -2.545e-02, 1.037e-01, -5.237e-02, 1.003e-01) * s2[y+2][x+0];
	r += M4(-9.152e-02, -2.302e-01, 1.237e-01, -2.086e-01, 1.858e-01, -5.350e-02, 3.598e-03, -1.335e-01, -4.431e-01, 2.017e-01, 1.953e-01, -4.691e-03, 2.660e-01, -4.682e-02, -1.911e-01, 6.425e-02) * s2[y+2][x+1];
	r += M4(8.270e-02, -1.426e-01, -7.735e-02, -4.054e-03, 1.611e-01, -2.454e-02, 7.277e-02, 1.380e-01, -1.096e-01, 1.183e-01, -2.383e-01, 2.319e-02, 1.246e-01, -1.587e-01, -9.670e-02, -6.422e-02) * s2[y+2][x+2];
	r += M4(8.363e-02, -8.715e-02, 1.262e-02, -1.780e-01, -3.841e-01, 7.318e-02, -7.817e-02, 2.176e-01, -6.909e-02, 8.647e-02, -1.054e-02, 1.688e-02, 1.111e-01, 1.936e-01, 1.380e-01, -7.420e-02) * s3[y+0][x+0];
	r += M4(6.920e-02, 6.348e-03, -4.958e-02, 1.451e-01, 1.225e-01, -7.528e-02, -2.784e-02, -1.286e-01, -1.498e-01, -1.225e-01, -1.712e-02, -1.927e-01, -5.922e-02, 2.475e-02, 2.012e-01, 7.076e-02) * s3[y+0][x+1];
	r += M4(-7.484e-02, -7.681e-04, 5.436e-03, -2.252e-02, 3.463e-02, 1.956e-01, 3.259e-02, 9.863e-02, 1.480e-01, -1.351e-01, 1.062e-01, -1.145e-01, 9.201e-02, 2.373e-01, 1.531e-01, 7.144e-03) * s3[y+0][x+2];
	r += M4(6.016e-02, -7.569e-02, 1.090e-01, 1.199e-02, 1.569e-01, -1.869e-01, -5.224e-02, -1.804e-01, -1.810e-01, 4.408e-02, -2.343e-02, 2.327e-01, 1.595e-01, 4.648e-02, 1.409e-01, 2.578e-02) * s3[y+1][x+0];
	r += M4(-3.747e-02, -3.285e-01, -4.689e-01, -5.965e-02, -1.622e-01, -2.059e-01, -1.086e-01, 1.617e-01, 1.650e-02, 6.249e-02, 4.500e-02, 4.488e-02, 1.938e-02, 1.366e-01, -7.307e-02, 1.636e-01) * s3[y+1][x+1];
	r += M4(-5.488e-02, 5.093e-03, -3.936e-02, -7.458e-02, -2.189e-01, -6.599e-02, -6.899e-02, 1.091e-01, -8.522e-02, 1.059e-01, 4.566e-02, 9.768e-02, 7.886e-02, 4.536e-02, 4.610e-02, 3.393e-02) * s3[y+1][x+2];
	r += M4(-3.506e-02, -2.229e-01, -1.713e-02, 2.529e-01, -1.125e-01, -5.852e-02, -7.400e-02, -9.592e-02, 1.929e-01, 6.994e-02, -4.340e-03, -1.017e-01, -6.253e-03, 8.503e-02, -3.481e-02, 4.423e-02) * s3[y+2][x+0];
	r += M4(5.607e-02, -4.340e-01, 6.372e-02, -2.431e-02, -3.827e-02, -1.146e-01, -9.617e-02, -1.153e-01, 1.969e-01, 1.198e-01, 4.540e-02, -1.684e-01, 1.747e-01, -2.376e-03, -2.375e-02, -6.323e-02) * s3[y+2][x+1];
	r += M4(3.596e-02, -1.422e-01, -2.034e-02, 7.993e-03, -5.217e-03, 2.334e-02, 9.343e-02, -8.684e-03, -1.379e-01, 9.999e-02, 2.273e-02, -1.543e-02, 3.959e-02, 1.006e-01, 1.568e-02, 1.264e-04) * s3[y+2][x+2];
	r += V4(-5.658e-03, 8.106e-02, -2.131e-01, -1.144e-02);
	return vec4(r);
}
vec4 f1(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-3.233e-03, 1.034e-01, -3.782e-03, 2.462e-02, -1.240e-01, 1.010e-01, 7.187e-02, 3.985e-02, 1.596e-01, 7.413e-02, 3.409e-02, -1.167e-01, 1.238e-01, -9.379e-02, 2.366e-02, 6.869e-02) * s0[y+0][x+0];
	r += M4(-6.099e-03, -2.274e-03, -7.926e-03, -1.062e-01, -2.368e-01, 4.628e-02, 8.040e-02, -1.721e-01, 5.154e-02, 9.106e-02, -3.211e-02, 4.067e-02, -3.442e-02, -1.405e-02, 5.802e-02, -8.225e-02) * s0[y+0][x+1];
	r += M4(1.143e-02, 5.322e-03, -3.557e-02, -6.218e-02, -3.644e-01, 1.884e-01, -8.678e-02, 1.932e-01, 1.961e-01, 1.200e-02, -7.023e-03, 4.346e-02, -8.754e-02, -1.513e-01, -9.448e-02, 7.202e-02) * s0[y+0][x+2];
	r += M4(-8.470e-02, -2.597e-02, 4.439e-02, -5.916e-02, -2.423e-02, 7.793e-02, -2.211e-02, -4.551e-02, 2.256e-01, 2.067e-02, -2.498e-02, -2.002e-02, -8.624e-02, 8.606e-02, 9.568e-02, -1.833e-02) * s0[y+1][x+0];
	r += M4(-5.802e-02, -6.519e-02, -7.264e-02, 4.428e-02, 2.011e-01, -3.334e-01, -1.104e-01, 2.208e-01, 9.165e-02, 2.772e-02, 2.887e-01, -3.065e-01, 3.394e-02, 9.642e-02, -1.034e-01, -1.468e-02) * s0[y+1][x+1];
	r += M4(-5.005e-02, 5.579e-02, -2.707e-02, -1.654e-01, 2.336e-01, 1.457e-01, 2.329e-01, 8.970e-02, 1.933e-01, 2.062e-01, -1.139e-01, -2.574e-02, 7.204e-02, 6.470e-02, 6.760e-02, -3.607e-02) * s0[y+1][x+2];
	r += M4(5.282e-02, 3.132e-02, 1.968e-02, -1.065e-01, -2.642e-03, -4.470e-02, 8.125e-02, -8.475e-02, 2.039e-02, 1.606e-01, -8.145e-02, -6.141e-02, -9.852e-02, -4.308e-02, -8.089e-02, 9.817e-02) * s0[y+2][x+0];
	r += M4(9.438e-02, 2.344e-02, 5.427e-02, 4.731e-02, -3.524e-02, -2.899e-02, 3.532e-02, -1.255e-02, -1.110e-01, 6.474e-02, 2.330e-02, -4.269e-02, -5.544e-02, 5.010e-02, 3.366e-02, -2.344e-03) * s0[y+2][x+1];
	r += M4(-1.203e-01, 1.534e-01, -2.244e-01, 5.768e-02, 6.673e-03, 1.403e-01, -1.251e-01, 5.922e-02, -1.991e-02, -6.275e-02, -1.694e-02, -1.077e-01, 7.124e-02, 6.249e-02, 4.922e-04, -4.996e-02) * s0[y+2][x+2];
	r += M4(-1.931e-01, 1.412e-01, 6.432e-02, 1.766e-01, -5.650e-02, 1.636e-01, -3.192e-02, -7.703e-02, -5.650e-02, -2.393e-02, 4.978e-02, -6.971e-02, -1.066e-01, 3.451e-01, 1.588e-01, 7.150e-01) * s1[y+0][x+0];
	r += M4(-3.890e-01, -6.700e-02, -1.667e-01, 9.505e-02, 1.272e-01, 1.420e-01, -1.249e-01, -2.492e-01, -1.350e-01, 1.440e-01, 7.961e-02, 3.101e-01, -4.190e-01, 3.024e-01, -4.808e-01, 1.066e-01) * s1[y+0][x+1];
	r += M4(-2.046e-01, -1.958e-01, -1.662e-01, -8.886e-02, 2.505e-02, 1.567e-01, -8.490e-03, -3.869e-02, 3.445e-02, -1.391e-01, -1.226e-01, 3.785e-02, 2.634e-01, -1.996e-01, -6.726e-02, 1.353e-01) * s1[y+0][x+2];
	r += M4(-2.948e-01, -5.089e-02, 9.265e-02, 1.402e-01, -7.316e-02, 2.608e-02, -1.088e-02, -4.967e-02, -1.518e-01, -1.230e-01, 9.535e-02, -4.501e-02, -3.996e-01, 3.554e-01, 2.254e-01, 1.186e+00) * s1[y+1][x+0];
	r += M4(-1.187e-01, -1.914e-01, -3.480e-01, 3.053e-01, 6.711e-02, -2.964e-01, -2.063e-01, 3.806e-02, -2.235e-01, 4.567e-01, 3.424e-01, -2.752e-02, -5.343e-01, 5.571e-01, -1.306e-01, 3.241e+00) * s1[y+1][x+1];
	r += M4(-4.033e-01, 3.129e-02, -9.818e-03, 1.462e-01, 3.800e-01, -1.252e-03, 2.773e-01, -7.569e-02, -1.164e-01, 1.102e-01, -1.066e-02, 5.558e-02, 9.008e-01, 5.268e-01, 8.073e-01, -3.161e-01) * s1[y+1][x+2];
	r += M4(-1.755e-01, -5.311e-02, -6.957e-02, -2.162e-02, -6.953e-02, -5.462e-02, 8.567e-03, -3.325e-02, -1.223e-01, -1.221e-02, -7.967e-03, 3.345e-02, -1.451e-01, 1.279e-01, -3.401e-01, -3.209e-01) * s1[y+2][x+0];
	r += M4(-4.532e-02, 9.460e-02, -1.561e-01, 2.501e-01, -3.529e-02, 6.295e-02, -1.992e-01, -5.951e-02, -2.419e-01, 3.556e-02, 1.810e-01, 6.731e-02, -2.973e-03, 6.105e-01, -5.982e-01, -1.932e-01) * s1[y+2][x+1];
	r += M4(-2.926e-01, -1.042e-02, 9.353e-02, 2.203e-01, 5.447e-02, 1.510e-01, -6.792e-02, -5.058e-02, -1.177e-01, -3.017e-01, 1.136e-01, 2.553e-02, 5.655e-01, 4.924e-01, -2.256e-01, -2.262e-01) * s1[y+2][x+2];
	r += M4(-4.250e-02, -7.272e-02, -6.425e-02, 1.106e-01, 5.485e-02, 2.792e-02, 1.318e-01, -3.259e-02, -1.116e-01, 3.054e-02, -5.701e-04, 2.513e-02, 5.524e-02, -1.161e-01, -3.878e-02, -5.007e-02) * s2[y+0][x+0];
	r += M4(1.329e-01, -1.304e-01, -2.741e-03, 2.190e-01, -6.884e-03, 9.792e-02, 4.868e-02, -1.150e-01, -3.614e-01, -1.488e-01, -4.676e-02, 2.406e-04, 3.749e-02, 2.117e-02, 1.191e-02, 8.676e-02) * s2[y+0][x+1];
	r += M4(-1.481e-01, -9.643e-04, 9.296e-02, -2.499e-02, -1.073e-02, 8.701e-03, -1.193e-01, -1.655e-02, 1.103e-01, -8.471e-02, -1.525e-02, -8.325e-02, 6.069e-02, -7.557e-02, -4.723e-02, 1.435e-01) * s2[y+0][x+2];
	r += M4(-1.838e-01, -1.696e-01, -8.354e-03, -7.846e-02, 4.851e-02, -2.234e-02, 9.498e-02, 6.653e-02, 2.924e-02, 4.766e-02, 5.820e-02, 2.085e-01, 3.772e-02, -7.632e-02, -5.375e-03, 6.976e-02) * s2[y+1][x+0];
	r += M4(2.417e-01, 7.830e-02, 2.192e-01, -2.847e-01, -2.104e-02, 1.894e-01, 1.700e-01, -9.479e-02, -8.046e-02, -2.503e-01, 7.870e-02, 3.982e-01, 2.230e-03, 1.640e-01, 3.219e-01, -2.913e-01) * s2[y+1][x+1];
	r += M4(-3.318e-01, -3.865e-02, 1.440e-01, -2.902e-02, -1.860e-02, 1.658e-02, -1.629e-01, -3.468e-02, -5.951e-01, 5.347e-02, 1.531e-01, 1.917e-01, 2.365e-01, 1.323e-01, -9.133e-02, -5.475e-02) * s2[y+1][x+2];
	r += M4(-1.362e-01, -1.599e-01, -2.006e-02, 1.560e-01, 8.562e-02, 8.257e-02, -8.535e-02, 1.870e-01, 7.682e-03, 7.371e-02, 3.165e-02, -1.663e-02, -1.311e-01, -1.908e-02, -1.150e-01, 3.727e-02) * s2[y+2][x+0];
	r += M4(2.073e-01, -1.556e-01, 2.976e-01, 1.152e-01, -7.671e-02, -5.985e-02, 8.276e-02, 3.853e-03, -9.141e-04, 1.772e-01, 2.567e-02, 1.036e-01, -1.747e-02, 4.394e-01, -8.935e-02, -1.744e-01) * s2[y+2][x+1];
	r += M4(-9.382e-02, -1.085e-01, 6.322e-03, 1.134e-01, 3.786e-02, -1.086e-01, 3.977e-02, -2.671e-02, -4.229e-01, -1.959e-01, -9.815e-02, -6.093e-02, 1.771e-01, 2.125e-01, -3.718e-01, -8.244e-02) * s2[y+2][x+2];
	r += M4(1.032e-01, 1.078e-02, -6.739e-02, -1.635e-01, -2.054e-01, -6.518e-02, 3.094e-02, 2.339e-01, -4.631e-02, -3.186e-02, 2.388e-02, -1.272e-01, 1.083e-01, 1.119e-01, 6.270e-02, 7.108e-02) * s3[y+0][x+0];
	r += M4(1.476e-01, -9.359e-02, -6.161e-02, -3.681e-02, -2.478e-01, -3.061e-02, 4.713e-02, 1.744e-01, 1.167e-02, -1.145e-01, -2.028e-02, -1.448e-02, -1.081e-01, 8.418e-02, 1.105e-01, 1.519e-01) * s3[y+0][x+1];
	r += M4(-8.715e-03, 1.777e-02, 2.200e-02, -7.912e-02, -1.246e-01, 2.651e-02, -5.750e-04, 1.344e-01, 2.308e-01, -3.920e-02, -4.891e-03, -1.561e-01, -3.258e-02, 1.099e-01, 2.916e-03, 1.017e-01) * s3[y+0][x+2];
	r += M4(8.155e-02, -1.561e-02, -2.368e-01, -2.510e-01, -2.698e-01, -1.027e-02, 2.653e-01, 3.001e-01, 9.387e-02, -8.974e-02, -4.222e-02, 6.702e-02, 1.852e-01, 1.776e-02, -4.244e-02, -2.229e-02) * s3[y+1][x+0];
	r += M4(2.683e-01, 1.662e-01, -1.931e-01, -1.997e-01, -7.391e-02, 3.470e-01, 2.083e-01, 1.674e-01, 1.644e-01, -6.625e-05, 1.235e-01, 1.046e-01, 7.808e-02, -1.094e-01, 2.752e-01, 1.137e-01) * s3[y+1][x+1];
	r += M4(-6.206e-02, 9.976e-02, 3.865e-02, -8.220e-02, 2.292e-02, -2.073e-01, -1.047e-01, 1.770e-01, 1.924e-01, 1.172e-01, 1.749e-01, -8.230e-02, 2.020e-02, -1.068e-02, -5.701e-02, 9.593e-02) * s3[y+1][x+2];
	r += M4(-1.776e-02, 1.089e-02, -9.919e-02, 3.506e-02, 5.846e-02, 5.871e-02, 1.876e-01, -1.255e-01, -1.422e-05, 6.109e-02, -4.402e-02, -4.138e-02, -3.759e-03, -4.116e-02, 5.430e-04, -4.682e-02) * s3[y+2][x+0];
	r += M4(9.913e-02, -1.937e-01, -1.500e-01, -2.333e-02, -1.284e-01, 1.381e-01, 7.784e-02, -1.497e-01, 1.696e-01, 3.879e-01, -3.502e-02, -4.538e-02, -4.585e-03, 5.359e-02, 6.118e-02, 7.202e-02) * s3[y+2][x+1];
	r += M4(-1.012e-01, 2.584e-02, -9.317e-02, -2.176e-02, 8.781e-02, -6.962e-02, 2.695e-01, 2.091e-02, -3.980e-02, 6.410e-02, 9.257e-02, -2.490e-02, 5.400e-02, 2.481e-02, -2.294e-02, 3.101e-02) * s3[y+2][x+2];
	r += V4(8.210e-03, 7.243e-03, -1.261e-02, -2.877e-02);
	return vec4(r);
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv1_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
			s2[ay][ax] = l1(x - 1, y - 1);
			s1[ay][ax] = -max(-s0[ay][ax], V4(0.0));
			s0[ay][ax] = max(s0[ay][ax], V4(0.0));
			s3[ay][ax] = -max(-s2[ay][ax], V4(0.0));
			s2[ay][ax] = max(s2[ay][ax], V4(0.0));
		}
	}
	barrier();
	memoryBarrierShared();
	imageStore(out_image, opos + ivec2(0, 0), f0(xy.x, xy.y));
	imageStore(out_image, opos + ivec2(1, 0), f1(xy.x, xy.y));
}


//!DESC CuNNy-4x8C-DS-conv3
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv2
//!BIND LUMA
//!SAVE conv3
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
	#define V4 f16vec4
	#define M4 f16mat4
	#define F float16_t
#else
	#define V4 vec4
	#define M4 mat4
	#define F float
#endif
#define l0(x, y) V4(texelFetch(conv2_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv2_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 s0[10][10];
shared V4 s1[10][10];
shared V4 s2[10][10];
shared V4 s3[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-7.296e-02, 1.659e-02, 2.785e-03, -3.563e-02, -4.195e-02, 5.142e-02, 6.009e-02, -3.089e-02, -2.353e-02, -1.008e-01, -1.737e-02, 6.513e-02, 1.884e-02, 1.800e-03, -1.981e-03, -1.115e-02) * s0[y+0][x+0];
	r += M4(1.827e-01, -1.558e-02, 3.102e-03, 6.493e-02, 6.135e-02, 1.871e-01, 1.021e-01, -1.131e-01, -1.425e-01, -2.813e-01, 2.020e-02, -8.561e-02, -9.947e-02, -1.152e-02, -9.359e-02, 1.086e-02) * s0[y+0][x+1];
	r += M4(3.681e-02, -1.795e-02, -7.950e-02, 6.529e-02, 1.446e-02, 1.228e-01, -3.950e-02, -1.856e-02, 5.142e-02, -1.581e-01, 8.788e-02, -5.499e-02, -5.777e-02, -5.087e-03, 2.421e-02, -7.648e-02) * s0[y+0][x+2];
	r += M4(-2.690e-02, 4.301e-02, -3.152e-02, -6.282e-03, -2.339e-02, 8.998e-02, 2.016e-02, 7.149e-02, -4.065e-02, -1.983e-01, -3.564e-02, 6.460e-03, 2.505e-03, 8.510e-03, 1.552e-01, -6.961e-02) * s0[y+1][x+0];
	r += M4(6.171e-02, -4.514e-02, -1.461e-01, 4.137e-02, 2.868e-02, 6.968e-02, -2.954e-01, -8.402e-02, 3.408e-01, -3.453e-01, -1.765e-01, -1.423e-01, -6.868e-02, 4.464e-02, -2.926e-01, 9.805e-02) * s0[y+1][x+1];
	r += M4(1.420e-01, -3.336e-02, 8.818e-02, 9.532e-02, 3.102e-02, 8.140e-02, -1.298e-02, -1.233e-01, -2.821e-02, -1.470e-01, 5.493e-03, 6.092e-03, -1.658e-02, 5.144e-03, 3.991e-03, 3.594e-02) * s0[y+1][x+2];
	r += M4(2.062e-03, 1.419e-02, 4.838e-02, -8.912e-02, 2.737e-03, 2.554e-02, -5.885e-02, -3.451e-02, 8.235e-02, -7.534e-03, 2.908e-02, 1.265e-01, 7.647e-02, -1.923e-02, -5.676e-02, 5.904e-02) * s0[y+2][x+0];
	r += M4(-1.056e-02, 2.967e-02, -7.006e-02, 6.535e-02, 1.061e-01, -1.913e-02, 1.113e-01, 2.603e-02, -1.701e-03, -1.006e-01, -2.162e-01, 6.054e-02, 4.478e-02, -3.494e-02, 4.237e-02, 3.612e-02) * s0[y+2][x+1];
	r += M4(7.742e-02, 6.205e-03, -1.235e-01, -4.904e-03, 4.927e-02, 1.457e-02, 1.528e-01, 6.486e-03, 4.729e-02, -8.004e-02, -1.596e-02, 2.395e-02, -2.069e-02, -1.430e-02, -8.508e-02, 7.301e-02) * s0[y+2][x+2];
	r += M4(4.500e-02, 8.202e-03, 2.828e-02, -6.595e-02, -5.549e-02, 6.715e-02, -3.628e-02, -1.847e-02, 4.168e-02, -5.424e-02, -2.248e-02, -2.890e-02, 2.362e-01, 1.008e-01, 4.860e-02, 9.452e-03) * s1[y+0][x+0];
	r += M4(4.148e-03, -2.080e-03, 9.570e-02, 1.188e-01, -1.417e-02, 2.317e-01, 4.953e-02, -1.231e-01, -1.656e-01, 6.329e-02, -7.654e-02, -6.665e-02, 1.491e-01, 8.782e-02, -7.736e-02, -1.775e-02) * s1[y+0][x+1];
	r += M4(-1.837e-01, -6.478e-03, 3.970e-03, -6.665e-02, -6.066e-02, 8.987e-02, 4.990e-03, 2.984e-02, -2.574e-02, -8.219e-02, 1.022e-01, -5.290e-02, 8.140e-02, -1.559e-03, 2.056e-01, 1.476e-01) * s1[y+0][x+2];
	r += M4(-4.065e-02, 2.593e-02, 1.145e-01, 4.618e-03, -1.792e-01, 1.329e-01, 1.158e-01, 2.785e-02, -7.647e-02, -1.229e-01, 3.211e-03, -2.024e-02, 2.410e-01, 7.903e-02, -9.914e-02, -1.546e-01) * s1[y+1][x+0];
	r += M4(-2.641e-01, -3.714e-03, 5.280e-02, -5.761e-03, 5.433e-02, 9.175e-03, -1.755e-01, -1.336e-01, 7.260e-02, -1.707e-01, 1.811e-01, -2.447e-01, 1.335e-01, 1.727e-01, -3.977e-01, -7.879e-02) * s1[y+1][x+1];
	r += M4(-1.793e-01, -5.878e-02, 2.289e-01, -1.909e-01, -1.237e-01, 6.695e-02, -8.862e-03, -1.406e-01, 3.431e-02, -1.227e-01, 1.184e-02, -1.346e-02, 1.075e-01, 2.270e-02, 5.497e-02, 1.136e-01) * s1[y+1][x+2];
	r += M4(-1.787e-02, 5.274e-03, 4.803e-02, -8.138e-02, -5.649e-02, -1.514e-02, 1.195e-01, -1.960e-02, 2.658e-02, -7.849e-03, -4.202e-02, 4.143e-02, 3.154e-01, -1.797e-02, -5.598e-02, -1.984e-02) * s1[y+2][x+0];
	r += M4(-1.681e-01, -3.670e-04, 8.020e-02, 7.507e-02, -1.237e-02, 3.047e-02, 1.587e-01, -1.255e-01, -1.375e-01, -7.427e-02, 4.163e-03, 2.830e-02, 2.511e-01, -3.503e-02, 6.823e-02, -2.412e-01) * s1[y+2][x+1];
	r += M4(3.510e-02, -1.259e-03, 7.054e-02, 1.584e-01, 6.188e-02, 2.258e-02, 7.789e-02, 4.630e-02, 1.314e-01, -9.106e-02, 1.054e-02, 4.142e-02, 4.522e-02, 4.423e-03, -7.957e-02, 6.425e-02) * s1[y+2][x+2];
	r += M4(-3.697e-02, -8.066e-02, 1.098e-01, -2.598e-02, -8.114e-02, 7.775e-02, -1.333e-01, 3.836e-02, -3.280e-02, -1.675e-01, -5.326e-02, -1.379e-02, -4.156e-02, 1.001e-02, 9.094e-02, 1.873e-02) * s2[y+0][x+0];
	r += M4(3.908e-03, 3.820e-02, 1.896e-01, 5.967e-02, -9.798e-02, -2.129e-02, -1.508e-01, 6.581e-02, -2.144e-01, 1.862e-01, -5.891e-02, -2.332e-01, -2.645e-02, -6.419e-02, 5.225e-02, -1.605e-02) * s2[y+0][x+1];
	r += M4(5.663e-03, 5.774e-02, 5.116e-02, -4.544e-02, -1.831e-01, 1.052e-02, -2.637e-02, -6.881e-02, -7.285e-02, -1.087e-01, -7.991e-02, -6.165e-02, 2.181e-01, -5.653e-02, -1.705e-01, 1.273e-01) * s2[y+0][x+2];
	r += M4(7.986e-02, 2.193e-02, -3.410e-01, 1.117e-01, 1.695e-01, -1.401e-01, 2.198e-01, -1.228e-01, 1.571e-01, 2.788e-02, 5.360e-02, 8.789e-02, 8.676e-03, 9.135e-03, 3.061e-01, -1.434e-01) * s2[y+1][x+0];
	r += M4(1.025e-01, 4.423e-02, -5.392e-03, -5.505e-02, -2.116e-01, 8.199e-02, 1.476e-01, 1.692e-03, -2.758e-01, -8.906e-02, 2.421e-01, 3.672e-01, 2.897e-01, 3.837e-01, 3.228e-01, -4.144e-01) * s2[y+1][x+1];
	r += M4(1.910e-01, 1.442e-02, 6.820e-03, 1.562e-01, 9.108e-02, -5.717e-02, -9.551e-02, 7.265e-03, 1.350e-01, -5.592e-02, 1.482e-01, -3.092e-01, -2.320e-02, -2.693e-02, 4.127e-01, 1.586e-01) * s2[y+1][x+2];
	r += M4(1.145e-01, -2.255e-02, -1.290e-01, -2.791e-02, -4.518e-02, 9.155e-03, -5.760e-02, 5.395e-02, -1.231e-01, -6.607e-03, -1.209e-01, 1.811e-01, -1.148e-01, -4.541e-02, 9.367e-02, -1.440e-01) * s2[y+2][x+0];
	r += M4(6.561e-02, -2.797e-03, -1.462e-01, -1.375e-01, -1.666e-01, -5.733e-02, 8.518e-02, 5.638e-03, 1.218e-01, 6.928e-03, -1.655e-01, 2.116e-01, 2.393e-01, -8.279e-02, 4.946e-01, 1.176e-01) * s2[y+2][x+1];
	r += M4(1.738e-02, 6.506e-03, 9.985e-02, 2.956e-02, 1.923e-01, 3.505e-03, 7.167e-02, 1.039e-01, -6.027e-02, -2.329e-02, 7.120e-02, -1.275e-01, -4.427e-01, -1.614e-02, 1.858e-01, -3.385e-01) * s2[y+2][x+2];
	r += M4(-1.386e-01, -7.657e-02, 4.163e-02, -3.361e-03, -6.082e-02, 1.419e-01, -2.078e-01, 2.363e-02, 1.830e-01, -7.123e-02, 2.449e-02, 1.350e-02, -2.304e-02, 2.196e-03, -8.835e-02, 5.380e-02) * s3[y+0][x+0];
	r += M4(-2.844e-02, 1.328e-01, -1.225e-01, 7.065e-02, -1.770e-01, 9.199e-03, -2.068e-01, 1.281e-01, -2.097e-02, 3.664e-02, 1.681e-01, 5.356e-02, -1.614e-02, 9.801e-03, 1.434e-01, 8.050e-02) * s3[y+0][x+1];
	r += M4(-1.075e-01, 1.077e-01, -1.247e-02, 2.089e-02, -1.174e-01, 9.763e-04, 1.535e-02, 4.046e-02, 7.471e-02, -8.466e-03, 2.906e-02, 6.813e-02, 9.662e-02, -1.939e-02, 5.222e-02, 3.496e-02) * s3[y+0][x+2];
	r += M4(-1.091e-01, 7.963e-02, 6.475e-02, 1.709e-01, -8.488e-02, -6.859e-02, 1.746e-01, -4.608e-01, -1.499e-01, 3.395e-02, 4.346e-01, 7.764e-03, 2.201e-02, -3.669e-02, -7.756e-02, -1.649e-03) * s3[y+1][x+0];
	r += M4(6.620e-02, 7.379e-02, 7.751e-02, -1.350e-01, -2.992e-01, 1.520e-01, 8.387e-02, 1.004e-01, -3.086e-01, -4.381e-02, 2.521e-01, 9.342e-02, -6.170e-02, 1.424e-01, -2.466e-02, -2.132e-01) * s3[y+1][x+1];
	r += M4(1.691e-02, 2.314e-02, -9.271e-02, 6.146e-02, -1.561e-01, 5.015e-03, -3.921e-02, -1.282e-01, 2.059e-01, -1.526e-02, -2.106e-02, 4.040e-02, 2.360e-02, -1.934e-02, -6.303e-02, -1.086e-01) * s3[y+1][x+2];
	r += M4(6.543e-02, 3.268e-02, -1.724e-02, 5.574e-02, -1.495e-02, 1.334e-03, 1.301e-01, -8.905e-02, -3.020e-02, -2.143e-02, -9.809e-02, -1.720e-02, 3.146e-02, -3.223e-02, -7.302e-02, 7.943e-03) * s3[y+2][x+0];
	r += M4(-2.129e-01, 2.198e-02, -2.973e-02, -2.135e-01, -4.064e-02, -6.821e-02, 2.364e-02, -1.568e-01, 2.401e-02, 6.040e-02, -1.759e-01, 1.312e-01, -1.125e-01, -1.081e-02, -4.115e-02, -1.522e-02) * s3[y+2][x+1];
	r += M4(4.417e-02, 1.594e-02, 4.878e-02, 4.489e-02, -1.357e-03, -2.404e-02, -4.391e-02, -6.156e-02, 1.166e-01, -3.765e-02, -6.787e-02, -5.827e-03, 7.741e-02, -1.093e-02, -3.471e-02, -9.127e-02) * s3[y+2][x+2];
	r += V4(5.084e-03, 1.735e-01, 6.631e-03, -2.562e-02);
	return vec4(r);
}
vec4 f1(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-7.216e-02, -4.603e-02, -9.308e-02, 4.925e-02, -1.066e-01, -1.135e-02, -4.092e-02, 3.745e-02, 9.975e-02, 6.274e-02, -2.380e-02, 4.211e-02, 4.821e-02, 2.066e-02, -2.919e-02, -2.476e-02) * s0[y+0][x+0];
	r += M4(5.184e-02, -1.592e-02, 5.847e-02, -3.971e-02, -6.868e-02, 1.469e-02, -2.079e-02, -1.153e-01, 5.033e-02, 8.048e-02, 2.079e-01, 7.505e-02, 4.242e-02, 5.042e-03, 3.810e-02, 5.275e-02) * s0[y+0][x+1];
	r += M4(-6.338e-02, -5.127e-02, -2.425e-02, -6.312e-03, -2.571e-02, 2.391e-02, -5.867e-02, -5.317e-02, 2.509e-02, 3.840e-02, 2.482e-02, 6.832e-02, -4.635e-02, 6.377e-02, -6.221e-02, -6.220e-02) * s0[y+0][x+2];
	r += M4(-2.485e-02, -6.880e-02, 7.426e-02, -9.178e-02, 1.246e-02, 7.783e-02, -1.492e-02, 5.542e-02, 4.343e-02, -5.760e-02, -1.930e-02, -5.464e-02, 1.852e-02, 4.835e-02, 9.953e-02, 9.756e-03) * s0[y+1][x+0];
	r += M4(-1.372e-01, -1.929e-01, 4.767e-02, -5.117e-02, 4.843e-01, 7.657e-02, 2.457e-03, 5.526e-02, 1.121e-02, -2.801e-01, 1.178e-02, -7.999e-02, 2.054e-02, 1.286e-01, 7.254e-02, 1.518e-01) * s0[y+1][x+1];
	r += M4(-1.899e-01, -1.414e-01, 1.607e-01, -6.758e-02, 1.323e-01, -4.274e-02, -2.482e-02, 9.206e-02, -4.827e-02, -3.806e-02, -9.051e-02, 4.086e-03, -2.053e-02, 6.811e-02, -2.294e-02, -9.350e-02) * s0[y+1][x+2];
	r += M4(4.196e-02, -7.752e-04, -2.389e-02, 1.360e-01, -9.406e-03, -2.058e-02, 1.905e-02, -7.665e-02, 3.755e-02, 4.908e-02, -9.703e-02, -1.182e-01, 2.912e-02, 2.944e-02, -8.544e-02, -1.970e-02) * s0[y+2][x+0];
	r += M4(3.945e-02, -3.088e-02, 2.465e-02, 1.635e-02, -3.577e-02, 5.690e-02, -1.519e-01, -8.244e-02, 9.633e-02, 2.195e-01, -1.547e-01, 1.206e-01, -5.975e-02, 1.497e-01, -1.710e-01, -1.798e-01) * s0[y+2][x+1];
	r += M4(-8.716e-02, -4.488e-02, -1.273e-01, 9.568e-03, -1.714e-02, -1.941e-02, 3.139e-02, -3.701e-03, -4.022e-02, 8.331e-02, 6.397e-03, -2.367e-02, -1.365e-02, 7.379e-02, -6.391e-02, -2.019e-01) * s0[y+2][x+2];
	r += M4(-1.798e-01, -2.229e-02, -4.422e-02, 1.324e-02, -5.201e-02, -5.588e-03, -8.606e-02, 6.498e-02, 8.186e-02, -1.296e-02, 4.165e-02, 3.194e-02, -4.571e-02, 9.208e-02, -6.368e-02, -1.127e-01) * s1[y+0][x+0];
	r += M4(-3.845e-02, -1.133e-02, -9.763e-02, 3.189e-02, 5.514e-02, 8.674e-03, -5.046e-03, -2.012e-02, 1.228e-02, 2.686e-02, 1.010e-01, 6.141e-02, -1.841e-01, -1.083e-02, 1.047e-02, -2.766e-01) * s1[y+0][x+1];
	r += M4(-3.704e-02, -1.195e-01, -1.730e-01, 6.687e-02, -1.852e-02, 2.936e-04, 1.921e-02, -1.900e-02, -2.697e-03, 7.287e-03, -3.898e-02, 9.565e-03, 2.768e-03, 6.051e-02, -1.699e-01, -1.601e-01) * s1[y+0][x+2];
	r += M4(-1.323e-01, -5.029e-02, 3.757e-02, 5.579e-02, -4.861e-02, 2.080e-01, -2.976e-02, 2.012e-01, -3.753e-02, -1.210e-02, -9.716e-02, -5.360e-02, 9.510e-02, -1.441e-01, 1.234e-01, -1.780e-01) * s1[y+1][x+0];
	r += M4(1.840e-01, 7.943e-02, -2.743e-01, 1.457e-01, 2.016e-01, 8.464e-02, 4.505e-02, -4.079e-03, 3.591e-01, -7.185e-02, 4.105e-02, -8.575e-03, -1.380e-01, -2.277e-01, -6.572e-02, 1.202e-02) * s1[y+1][x+1];
	r += M4(1.584e-01, 7.367e-02, 2.172e-01, 1.360e-01, 3.470e-02, -1.443e-02, -1.077e-01, 9.937e-02, -1.022e-01, -2.986e-02, -4.862e-02, 2.840e-02, -1.633e-01, -3.748e-02, 2.595e-02, -2.814e-02) * s1[y+1][x+2];
	r += M4(1.144e-02, -4.127e-02, 4.655e-02, 5.110e-02, 7.595e-02, 1.071e-01, -1.101e-01, -2.331e-02, -5.170e-02, 3.903e-03, -5.354e-02, -3.412e-02, 5.640e-02, -9.893e-03, 4.544e-02, 3.166e-02) * s1[y+2][x+0];
	r += M4(4.243e-02, 2.810e-02, -1.037e-01, -1.115e-01, -2.266e-02, -8.437e-03, -9.464e-03, 1.233e-02, 2.997e-02, 2.411e-01, -1.372e-01, 2.579e-02, -1.631e-01, -1.574e-01, 1.917e-01, -1.512e-01) * s1[y+2][x+1];
	r += M4(8.460e-02, 4.892e-02, -9.888e-02, -1.346e-01, 2.706e-02, -4.669e-02, 7.719e-02, -5.713e-02, -1.248e-01, 3.225e-02, 5.681e-03, -2.798e-02, -1.264e-01, -6.088e-02, -1.219e-02, -1.498e-01) * s1[y+2][x+2];
	r += M4(-1.337e-02, -7.473e-02, 2.450e-02, 1.080e-01, -3.235e-02, 1.086e-01, 2.295e-01, 3.549e-02, 8.976e-02, 1.669e-02, -1.976e-01, 1.631e-01, -6.273e-02, 3.250e-02, -5.909e-02, -3.080e-02) * s2[y+0][x+0];
	r += M4(-1.637e-01, -4.220e-02, -1.494e-01, -8.860e-02, -1.292e-02, -3.445e-02, 8.614e-02, 1.787e-01, 3.524e-01, 5.223e-02, 5.874e-02, 3.108e-02, -1.380e-01, -3.470e-02, -1.185e-01, 9.428e-03) * s2[y+0][x+1];
	r += M4(-5.380e-03, 2.406e-02, 2.521e-02, 1.664e-02, 1.618e-01, 5.827e-02, 4.545e-02, 1.058e-01, -5.324e-02, -5.376e-02, -6.041e-02, 8.333e-02, 8.189e-02, -6.326e-02, 1.719e-01, 6.421e-02) * s2[y+0][x+2];
	r += M4(-2.467e-01, -3.602e-01, -9.311e-02, -2.261e-01, -1.509e-02, 2.406e-01, 9.483e-02, 2.411e-01, 1.946e-01, 4.490e-01, -4.065e-01, -1.110e-01, 1.323e-01, 5.444e-02, -2.378e-01, 1.033e-02) * s2[y+1][x+0];
	r += M4(-2.783e-01, -1.693e-02, -2.780e-01, -2.129e-01, 7.782e-02, 2.577e-01, 1.023e-01, 2.633e-01, 2.059e-01, 8.621e-02, 1.788e-01, 1.025e-01, 1.959e-01, -4.679e-02, -1.827e-03, 1.446e-02) * s2[y+1][x+1];
	r += M4(6.034e-02, -1.033e-01, 1.832e-02, 1.282e-02, 1.144e-01, 8.661e-03, 4.235e-02, 1.128e-01, -2.018e-02, 5.402e-02, 1.086e-01, -4.803e-02, -1.733e-01, 4.947e-02, -4.639e-02, -1.909e-01) * s2[y+1][x+2];
	r += M4(1.218e-01, -9.386e-02, 4.962e-02, 8.424e-02, -7.053e-02, -5.920e-02, 6.180e-02, -5.950e-02, 1.109e-01, 7.739e-02, -5.015e-02, -1.559e-01, -1.321e-01, -1.049e-01, 1.095e-01, -6.109e-02) * s2[y+2][x+0];
	r += M4(-6.617e-02, -1.088e-01, -6.245e-02, 9.078e-02, -6.387e-02, 8.420e-02, -6.591e-03, -4.601e-02, 1.984e-01, 9.645e-02, -2.608e-01, -1.477e-01, -3.807e-02, -1.991e-01, -1.681e-01, 1.010e-01) * s2[y+2][x+1];
	r += M4(9.518e-02, -9.261e-04, 1.411e-01, 7.352e-02, 3.926e-02, 1.296e-02, -1.143e-02, -1.086e-01, -3.794e-02, 3.933e-02, -8.171e-02, -3.638e-02, 9.012e-02, 1.634e-01, -1.722e-01, 4.222e-03) * s2[y+2][x+2];
	r += M4(4.699e-02, -1.231e-02, 2.114e-02, 1.779e-01, -1.170e-01, 4.896e-02, -2.128e-01, 1.196e-02, -8.685e-02, -1.380e-03, -2.795e-02, 8.621e-02, -4.032e-02, -4.294e-02, 3.455e-02, -2.817e-02) * s3[y+0][x+0];
	r += M4(-5.057e-02, -3.577e-02, 6.028e-02, 2.855e-02, -4.863e-02, -1.156e-01, -2.586e-01, 1.557e-01, 5.788e-02, 1.714e-01, 7.135e-02, -1.414e-01, -1.519e-01, -2.331e-03, -1.929e-01, -7.847e-02) * s3[y+0][x+1];
	r += M4(-1.409e-02, -1.227e-03, -4.431e-02, -3.118e-02, -1.495e-02, 1.165e-02, -2.040e-01, -5.190e-02, 3.692e-02, -1.054e-01, 2.439e-02, 2.275e-03, -3.024e-02, -3.896e-02, 3.051e-02, -1.994e-02) * s3[y+0][x+2];
	r += M4(2.505e-01, 1.199e-02, 1.121e-01, -6.250e-02, -1.463e-01, -7.387e-02, 1.275e-01, 4.328e-01, -2.820e-01, 2.226e-01, -9.880e-02, 4.680e-02, 2.553e-01, -1.293e-01, 1.017e-01, -3.035e-02) * s3[y+1][x+0];
	r += M4(-1.971e-01, 1.000e-01, -2.102e-02, -1.437e-01, -1.853e-01, -1.439e-01, -9.763e-02, 4.541e-01, -1.331e-01, 1.894e-01, -1.033e-02, -1.724e-02, 1.490e-01, 3.873e-02, 9.896e-02, 3.136e-01) * s3[y+1][x+1];
	r += M4(7.709e-02, -1.289e-01, -1.082e-01, 1.015e-01, -1.053e-01, -7.762e-02, -7.603e-02, 7.349e-02, 5.460e-02, -7.080e-02, 3.429e-02, 1.783e-02, 7.373e-02, -4.599e-02, -4.231e-03, 1.681e-01) * s3[y+1][x+2];
	r += M4(2.072e-01, 7.226e-02, -2.609e-02, -8.802e-02, -1.368e-01, -9.616e-02, 8.728e-02, -5.362e-02, 1.234e-02, 5.746e-02, 3.651e-02, 3.493e-02, 1.401e-01, -8.174e-02, -5.460e-02, 1.177e-02) * s3[y+2][x+0];
	r += M4(-1.957e-01, -2.549e-02, -1.688e-01, 1.831e-01, 9.203e-02, -3.772e-02, 9.702e-02, 2.783e-01, -3.466e-02, 1.035e-02, -5.788e-02, -1.366e-01, 1.511e-01, 4.561e-02, -1.714e-01, 2.004e-01) * s3[y+2][x+1];
	r += M4(9.821e-02, -2.154e-02, 8.285e-02, 9.993e-03, 1.927e-02, 2.817e-02, -9.323e-02, -4.920e-03, -3.872e-02, -2.145e-02, 3.291e-02, -4.358e-02, 1.347e-01, 2.621e-02, -1.731e-02, -6.595e-02) * s3[y+2][x+2];
	r += V4(1.083e-02, 1.108e-02, -3.156e-02, -8.118e-03);
	return vec4(r);
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv2_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
			s2[ay][ax] = l1(x - 1, y - 1);
			s1[ay][ax] = -max(-s0[ay][ax], V4(0.0));
			s0[ay][ax] = max(s0[ay][ax], V4(0.0));
			s3[ay][ax] = -max(-s2[ay][ax], V4(0.0));
			s2[ay][ax] = max(s2[ay][ax], V4(0.0));
		}
	}
	barrier();
	memoryBarrierShared();
	imageStore(out_image, opos + ivec2(0, 0), f0(xy.x, xy.y));
	imageStore(out_image, opos + ivec2(1, 0), f1(xy.x, xy.y));
}


//!DESC CuNNy-4x8C-DS-conv4
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv3
//!BIND LUMA
//!SAVE conv4
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
	#define V4 f16vec4
	#define M4 f16mat4
	#define F float16_t
#else
	#define V4 vec4
	#define M4 mat4
	#define F float
#endif
#define l0(x, y) V4(texelFetch(conv3_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv3_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 s0[10][10];
shared V4 s1[10][10];
shared V4 s2[10][10];
shared V4 s3[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-2.280e-02, 1.396e-02, -2.051e-02, -5.906e-02, 1.875e-02, -6.388e-02, -4.850e-03, -1.407e-02, 8.208e-02, -4.435e-02, -4.760e-02, -1.517e-02, -2.702e-02, -6.120e-02, -2.169e-02, 4.834e-02) * s0[y+0][x+0];
	r += M4(-1.785e-02, 1.070e-02, 2.126e-02, 2.094e-02, 8.104e-03, -5.288e-03, -3.007e-02, -1.974e-02, 1.203e-01, 1.582e-01, -8.558e-02, -5.860e-02, -1.107e-01, -1.965e-02, -3.674e-02, -2.018e-03) * s0[y+0][x+1];
	r += M4(-4.607e-02, 3.832e-02, 2.160e-02, 2.265e-03, -1.800e-02, 4.109e-02, 1.395e-02, 2.020e-02, -3.083e-02, 1.165e-01, 4.045e-02, 3.856e-02, -1.190e-03, -3.908e-04, -2.900e-02, 3.660e-03) * s0[y+0][x+2];
	r += M4(3.009e-02, -6.984e-04, -4.039e-02, -2.888e-02, -3.801e-02, 1.155e-01, -3.834e-02, 4.382e-03, 3.797e-02, -1.723e-01, -1.630e-01, 1.988e-01, -2.852e-02, 4.257e-02, -5.791e-02, -6.764e-02) * s0[y+1][x+0];
	r += M4(-1.514e-02, 4.457e-02, -6.697e-02, 3.930e-02, -1.612e-02, -5.568e-02, 3.994e-02, -3.293e-02, -1.905e-01, -4.792e-01, -3.153e-01, -1.051e-01, -2.095e-01, 9.385e-02, -3.151e-02, -8.067e-03) * s0[y+1][x+1];
	r += M4(-3.897e-02, 5.305e-02, 5.040e-02, -3.991e-02, 4.516e-02, -9.807e-02, -1.936e-02, -8.334e-03, 7.524e-02, -1.462e-01, 9.250e-02, 9.232e-02, -3.578e-02, -1.526e-02, 9.152e-03, 4.307e-02) * s0[y+1][x+2];
	r += M4(2.501e-02, -3.105e-02, 3.512e-02, -3.563e-02, 4.287e-02, -6.777e-02, 5.783e-02, 1.286e-02, -3.361e-02, 6.711e-02, 4.504e-02, -4.481e-02, 5.855e-02, -9.961e-02, 3.136e-02, -5.627e-02) * s0[y+2][x+0];
	r += M4(-1.725e-02, -2.381e-02, 1.834e-01, -7.387e-02, -4.533e-02, 7.057e-02, -1.143e-01, 5.827e-03, -5.500e-02, 2.596e-01, 2.261e-01, -1.887e-01, 7.105e-02, -1.353e-01, -1.499e-01, -1.323e-01) * s0[y+2][x+1];
	r += M4(-1.587e-02, 3.931e-03, 1.785e-02, -2.535e-03, -2.509e-03, 5.961e-02, 6.839e-02, 2.153e-02, -7.676e-03, 9.045e-02, -1.516e-01, 9.849e-03, 1.558e-02, 1.558e-02, -1.819e-02, -3.738e-02) * s0[y+2][x+2];
	r += M4(7.985e-02, -1.252e-01, -1.188e-01, 1.526e-02, -2.987e-01, -8.221e-02, 5.206e-02, 1.613e-01, 1.740e-02, -1.091e-01, -2.222e-02, 6.646e-03, 7.279e-02, -1.549e-02, -1.028e-02, 2.629e-03) * s1[y+0][x+0];
	r += M4(-1.937e-02, 3.671e-02, -1.646e-01, 1.817e-02, -2.962e-01, 7.854e-02, -2.471e-01, 1.100e-02, -2.984e-02, -3.345e-02, -1.619e-02, -1.396e-02, 2.252e-02, -1.439e-01, -1.031e-01, -1.609e-02) * s1[y+0][x+1];
	r += M4(-1.821e-01, -7.845e-02, 2.199e-01, -1.868e-01, -3.755e-01, 8.633e-03, -1.310e-01, -4.798e-02, -2.061e-02, 4.016e-02, 6.812e-02, 4.383e-02, 1.016e-01, -3.466e-02, -6.985e-03, 9.371e-03) * s1[y+0][x+2];
	r += M4(1.563e-01, 2.914e-02, 7.351e-02, -1.475e-01, -5.574e-01, 4.710e-01, 2.151e-01, 9.910e-02, 4.230e-03, -3.285e-03, -9.909e-02, 1.483e-02, -4.114e-02, -7.239e-02, 1.274e-01, -2.212e-01) * s1[y+1][x+0];
	r += M4(2.397e-01, 4.597e-02, -5.774e-01, 5.018e-01, -7.624e-01, 5.550e-01, 4.407e-01, -3.729e-01, -4.050e-02, -1.118e-01, -1.568e-01, 1.145e-02, 8.278e-02, -1.661e-01, -3.330e-01, -7.446e-02) * s1[y+1][x+1];
	r += M4(1.366e-01, 3.163e-02, 3.994e-01, -2.861e-01, -7.293e-01, 2.757e-01, 3.328e-01, 2.598e-01, -1.166e-02, -2.912e-02, 9.215e-03, -4.124e-02, 3.259e-02, 6.781e-02, -1.243e-01, -6.044e-02) * s1[y+1][x+2];
	r += M4(-7.124e-02, 1.599e-02, -1.126e-02, 5.970e-02, -8.792e-01, 1.785e-01, 6.071e-01, -7.005e-02, 4.544e-02, -7.144e-02, 1.703e-02, -5.921e-02, -8.431e-02, -4.293e-02, 1.514e-01, -2.952e-03) * s1[y+2][x+0];
	r += M4(-2.151e-01, -3.355e-03, 3.467e-01, 4.402e-02, -1.409e+00, 5.388e-01, -4.028e-01, -7.286e-01, 2.180e-02, -1.291e-02, -7.768e-02, -3.058e-02, 1.715e-02, -1.317e-01, -3.232e-01, -1.489e-01) * s1[y+2][x+1];
	r += M4(-4.481e-03, -1.076e-01, -6.445e-02, 2.387e-01, -1.122e+00, -2.609e-01, 3.185e-01, 9.268e-02, 1.633e-02, 5.588e-03, -4.533e-02, 1.346e-02, 5.734e-03, -6.990e-02, -7.781e-02, 6.933e-02) * s1[y+2][x+2];
	r += M4(-6.700e-04, 2.834e-02, 3.224e-02, -1.340e-02, 3.263e-02, 3.613e-04, 3.955e-02, -7.071e-02, 2.274e-02, 9.930e-03, -2.180e-02, 2.714e-02, -1.529e-01, 1.548e-01, 8.353e-02, 1.632e-01) * s2[y+0][x+0];
	r += M4(3.937e-03, -3.920e-02, -2.015e-02, 8.633e-02, 1.897e-01, -3.131e-01, -1.053e-01, -6.409e-02, 2.155e-02, -2.540e-02, -3.947e-03, -7.345e-02, -2.228e-01, 1.532e-01, 1.450e-01, 9.750e-02) * s2[y+0][x+1];
	r += M4(2.608e-02, -2.063e-02, 1.527e-02, -1.891e-02, -1.943e-02, 4.186e-02, -5.105e-02, -1.107e-01, 2.666e-02, -3.489e-02, 2.671e-02, 1.573e-02, -1.047e-01, -1.718e-01, 5.026e-02, -1.900e-01) * s2[y+0][x+2];
	r += M4(2.516e-02, 8.552e-03, -3.683e-03, -6.555e-02, 8.839e-02, -1.584e-01, -2.889e-02, -6.858e-02, 6.956e-02, -2.216e-02, 9.205e-02, -1.411e-01, 2.376e-01, -2.540e-01, 8.866e-02, -5.417e-01) * s2[y+1][x+0];
	r += M4(2.671e-01, 4.749e-03, -2.721e-01, -2.627e-01, -2.908e-02, 3.185e-02, 2.891e-02, -2.329e-01, -3.359e-03, -7.382e-02, 1.338e-02, 1.547e-01, 2.725e-01, 2.614e-01, 4.657e-01, -7.903e-01) * s2[y+1][x+1];
	r += M4(-3.601e-03, 1.790e-01, -1.523e-01, -1.683e-01, -4.105e-02, -1.118e-01, -1.017e-01, 2.658e-01, -1.985e-02, 5.480e-03, -7.511e-02, 1.301e-02, -4.146e-02, -1.779e-01, 2.995e-01, -3.310e-01) * s2[y+1][x+2];
	r += M4(2.192e-02, 1.317e-02, 2.521e-03, 3.821e-02, 1.639e-03, 4.221e-02, -7.311e-02, 4.483e-02, 2.185e-02, 2.879e-02, -9.509e-02, 7.993e-02, 7.393e-02, -2.666e-01, -1.160e-01, 1.399e-01) * s2[y+2][x+0];
	r += M4(-5.579e-02, -7.697e-02, -1.905e-01, 1.616e-01, 8.754e-04, 7.421e-02, -1.588e-01, 1.631e-02, 7.268e-02, 5.088e-02, -5.725e-02, -8.586e-02, 1.861e-01, -2.383e-01, -1.664e-01, 3.643e-01) * s2[y+2][x+1];
	r += M4(4.413e-02, -6.722e-02, -9.037e-02, 4.361e-02, -3.022e-02, 1.101e-01, 5.005e-02, -1.000e-02, 6.115e-03, -2.571e-02, 7.025e-02, -4.285e-02, -4.456e-02, 3.699e-02, -2.652e-01, 1.147e-01) * s2[y+2][x+2];
	r += M4(7.739e-03, -4.723e-02, 2.865e-03, -3.577e-02, 3.987e-02, 1.152e-01, -2.407e-02, 7.743e-03, 4.252e-02, -1.006e-01, -9.053e-03, -7.195e-02, -2.605e-02, -3.475e-02, 2.464e-03, -3.295e-02) * s3[y+0][x+0];
	r += M4(4.538e-02, -3.442e-02, -1.104e-03, 6.189e-02, -2.974e-02, 7.165e-02, -5.898e-02, 1.100e-01, 1.842e-02, -2.155e-01, 1.202e-02, -9.251e-02, 1.216e-02, -7.965e-02, -7.983e-02, 2.003e-02) * s3[y+0][x+1];
	r += M4(4.841e-02, -5.083e-02, 4.582e-03, -4.237e-03, -6.170e-02, 1.562e-01, 8.368e-03, -1.664e-02, -1.889e-03, -2.728e-02, -1.929e-02, -2.931e-02, -3.845e-02, 5.917e-02, 2.419e-02, 3.589e-02) * s3[y+0][x+2];
	r += M4(-2.914e-02, -2.154e-02, -6.618e-02, 4.793e-03, 5.260e-02, -9.127e-02, 1.589e-01, -5.984e-02, 9.739e-02, -8.870e-02, -4.107e-02, -6.616e-02, -3.642e-02, 1.343e-01, -1.353e-02, -6.966e-02) * s3[y+1][x+0];
	r += M4(1.897e-01, -2.083e-01, -1.053e-01, -7.241e-02, -1.266e-01, 1.103e-01, 1.668e-01, -4.373e-02, 6.793e-03, -1.765e-01, -2.393e-01, -5.006e-02, -8.949e-02, 7.591e-02, 7.729e-02, -4.744e-02) * s3[y+1][x+1];
	r += M4(6.179e-03, -1.278e-03, -2.018e-01, 3.703e-02, -3.550e-02, -6.449e-03, 9.935e-02, -1.272e-03, -1.549e-02, -1.155e-01, 7.243e-02, 3.478e-02, -1.040e-02, -4.633e-02, 1.006e-01, -8.184e-02) * s3[y+1][x+2];
	r += M4(-1.249e-02, 1.461e-02, -1.717e-02, 1.459e-02, 6.882e-03, 2.726e-02, -6.386e-02, 6.373e-02, 3.589e-03, -1.049e-02, -1.919e-03, 4.817e-02, 3.469e-02, -4.553e-02, 1.737e-02, -3.843e-02) * s3[y+2][x+0];
	r += M4(-4.073e-03, 5.161e-02, 5.371e-02, 1.543e-02, 5.881e-02, -2.330e-02, 4.934e-02, -4.211e-02, 5.340e-02, -4.894e-02, -4.556e-01, 6.709e-03, 9.239e-03, -2.903e-02, 6.388e-02, -9.516e-02) * s3[y+2][x+1];
	r += M4(1.668e-02, -2.517e-02, -1.771e-02, -1.985e-02, -2.116e-02, 1.714e-02, -8.943e-03, 6.915e-03, -9.806e-03, 1.243e-02, 8.416e-02, 1.946e-02, 9.013e-03, 2.228e-02, -3.918e-02, -2.109e-02) * s3[y+2][x+2];
	r += V4(-5.925e-05, -1.519e-04, 9.034e-03, -6.230e-03);
	return vec4(r);
}
vec4 f1(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-4.218e-02, -4.199e-02, -1.355e-02, -5.070e-02, 5.895e-02, 3.382e-02, 1.952e-02, 1.808e-02, 7.384e-02, 5.577e-02, 1.249e-02, 5.100e-02, 4.749e-02, 1.888e-02, 2.950e-02, -5.773e-03) * s0[y+0][x+0];
	r += M4(-6.304e-02, -1.229e-02, -4.679e-03, -1.690e-02, -1.724e-02, -2.453e-02, 4.279e-03, -1.317e-02, -9.670e-02, -3.706e-02, -2.512e-03, -7.928e-02, 2.385e-03, 7.440e-03, -1.974e-01, 5.261e-02) * s0[y+0][x+1];
	r += M4(-3.713e-02, -4.851e-02, -6.213e-02, -2.545e-02, -6.898e-02, -1.636e-02, -2.686e-02, 1.570e-02, -1.029e-01, -5.355e-04, 1.489e-01, -1.175e-02, 6.759e-03, 3.308e-02, 8.738e-04, 1.750e-02) * s0[y+0][x+2];
	r += M4(-1.493e-02, 4.087e-02, 5.727e-02, -8.423e-02, -1.873e-02, -7.189e-02, -8.819e-03, -2.484e-02, 9.811e-02, 1.920e-01, -3.912e-02, 2.575e-01, -1.494e-01, -6.318e-02, 1.411e-01, 2.646e-01) * s0[y+1][x+0];
	r += M4(-2.193e-01, -8.383e-02, 7.364e-02, 8.168e-02, -1.087e-02, 6.582e-02, -3.531e-02, -2.410e-02, 3.258e-01, 3.234e-01, 3.673e-02, 2.292e-02, 1.039e-01, 8.987e-02, -1.764e-01, -4.837e-02) * s0[y+1][x+1];
	r += M4(-2.265e-02, 1.971e-02, -2.680e-02, -1.217e-02, 9.100e-04, -4.971e-02, 5.569e-02, 1.955e-02, 7.053e-02, -6.666e-02, 5.267e-02, 9.956e-02, 6.889e-02, 1.618e-02, -5.129e-02, -1.666e-02) * s0[y+1][x+2];
	r += M4(-1.219e-02, -7.642e-02, 2.543e-03, 6.032e-03, -4.728e-02, 2.785e-02, 3.605e-02, 8.549e-03, -4.597e-02, -2.316e-01, 3.703e-02, -1.177e-01, -1.699e-02, 3.380e-02, -4.112e-02, 1.044e-01) * s0[y+2][x+0];
	r += M4(-1.061e-01, -1.481e-01, 1.243e-02, 9.789e-03, 1.096e-01, 2.503e-02, 2.115e-02, 2.154e-02, -3.153e-01, -6.371e-02, -1.391e-01, 1.027e-02, 7.898e-02, 1.309e-01, 3.489e-02, -5.604e-03) * s0[y+2][x+1];
	r += M4(1.072e-02, 5.012e-03, -2.013e-02, -1.844e-02, -1.207e-02, 1.983e-02, -3.894e-02, -1.237e-03, -6.242e-03, 5.934e-02, -8.254e-02, 6.606e-02, -6.700e-02, 7.662e-03, 3.668e-02, 3.211e-04) * s0[y+2][x+2];
	r += M4(9.315e-02, 3.354e-02, 1.743e-01, 8.418e-02, -1.135e-01, -4.180e-02, -7.209e-02, 3.652e-03, 9.146e-02, 3.428e-02, 3.867e-02, 7.996e-02, 5.190e-03, 1.150e-01, -4.291e-02, 9.158e-02) * s1[y+0][x+0];
	r += M4(2.886e-01, -4.654e-02, -1.289e-01, -3.998e-01, -8.431e-02, -3.392e-02, -1.752e-01, -2.738e-01, 6.147e-02, 3.095e-02, -2.118e-02, -4.204e-02, 8.886e-02, 1.471e-01, 1.532e-01, 8.559e-02) * s1[y+0][x+1];
	r += M4(-3.587e-01, -1.370e-02, -2.830e-01, 3.934e-02, -2.722e-01, -6.232e-02, -3.089e-01, 1.736e-01, -4.678e-02, -3.450e-02, -6.040e-02, 6.223e-03, 7.705e-02, 3.561e-02, 7.535e-02, -1.475e-04) * s1[y+0][x+2];
	r += M4(-2.104e-01, 3.629e-01, 2.105e-01, -1.249e-01, -5.122e-01, -6.041e-01, -4.685e-02, -1.208e-01, -1.419e-02, 7.312e-02, 2.198e-02, 1.641e-01, -2.843e-01, 3.042e-01, 4.494e-02, 6.646e-01) * s1[y+1][x+0];
	r += M4(4.931e-01, -5.148e-01, 7.338e-01, 2.686e-01, -6.396e-01, -4.488e-01, -7.572e-02, -6.521e-01, 2.067e-01, 1.424e-01, 7.292e-03, -1.989e-03, 5.254e-01, -1.900e-02, -1.558e-01, -2.293e-02) * s1[y+1][x+1];
	r += M4(-6.606e-02, 3.094e-01, -2.401e-01, -7.365e-02, -7.562e-01, -4.422e-01, -1.992e-01, 1.409e-01, -8.607e-02, -3.223e-02, -1.363e-04, 8.599e-03, -7.143e-03, 1.465e-01, 3.375e-03, -4.879e-02) * s1[y+1][x+2];
	r += M4(1.796e-01, 8.563e-02, -2.489e-02, -1.226e-01, -7.566e-01, 1.049e-01, -2.542e-02, 1.612e+00, -3.845e-02, -1.459e-02, 1.216e-02, 5.493e-02, -6.027e-02, -1.418e-01, -1.170e-01, -7.784e-02) * s1[y+2][x+0];
	r += M4(-5.330e-01, -1.968e-01, -2.095e-01, 4.139e-02, 1.871e+00, 7.233e-01, -8.326e-01, -5.861e-01, 2.459e-02, 5.960e-02, -6.333e-03, -1.097e-02, 5.140e-02, 2.671e-01, -6.152e-02, -4.414e-03) * s1[y+2][x+1];
	r += M4(1.576e-01, 1.076e-01, -1.374e-01, 1.107e-01, 4.239e-02, -7.200e-01, -6.202e-01, 2.715e-01, 3.281e-02, 4.652e-02, 4.363e-02, 2.582e-02, 3.109e-02, 1.083e-01, 6.122e-03, -7.154e-02) * s1[y+2][x+2];
	r += M4(-4.197e-02, -3.710e-03, 4.087e-03, 1.304e-01, 1.187e-02, 4.850e-02, -3.487e-02, 8.117e-02, 4.101e-02, 9.235e-03, 5.409e-02, -3.922e-03, -1.082e-01, -1.380e-01, 2.089e-02, -1.538e-01) * s2[y+0][x+0];
	r += M4(1.714e-01, 8.580e-02, 1.085e-01, 7.248e-02, 9.432e-02, 1.372e-01, 2.416e-01, 4.780e-02, -4.774e-03, 7.905e-03, -5.858e-02, 2.020e-02, 1.045e-01, -1.001e-02, -1.383e-01, -1.907e-01) * s2[y+0][x+1];
	r += M4(1.851e-01, 8.294e-02, -8.943e-03, -2.869e-02, -9.470e-02, -6.672e-02, 1.209e-01, -1.322e-02, -3.937e-02, 1.365e-02, 8.870e-02, 8.124e-03, -2.829e-01, -1.067e-01, -1.806e-01, 1.133e-01) * s2[y+0][x+2];
	r += M4(-7.067e-02, 1.364e-01, -1.779e-01, 7.887e-02, 1.313e-01, -1.977e-02, -1.331e-01, 1.763e-01, -1.421e-01, -8.800e-02, -3.051e-04, 5.713e-02, -2.728e-01, -5.381e-01, -1.405e-01, -1.901e-01) * s2[y+1][x+0];
	r += M4(1.963e-01, -1.018e-01, 1.780e-01, 1.178e-01, 1.392e-01, 3.882e-01, 3.692e-02, 4.699e-02, 7.141e-02, 4.524e-02, 7.934e-02, -3.160e-02, -5.926e-01, -4.594e-01, -3.334e-01, 8.728e-02) * s2[y+1][x+1];
	r += M4(-6.372e-02, 1.421e-01, 7.819e-03, -1.129e-01, 4.224e-01, 7.494e-02, -9.251e-02, 1.758e-02, -5.885e-03, -4.325e-02, -4.934e-02, 4.952e-02, -4.427e-02, 1.941e-01, 4.907e-02, 5.692e-02) * s2[y+1][x+2];
	r += M4(-6.791e-02, 6.737e-02, 3.673e-02, 5.924e-02, 5.712e-02, 5.970e-02, -7.906e-02, -7.349e-02, 1.190e-01, 6.361e-02, -3.675e-02, -1.430e-01, 2.546e-03, 3.095e-02, 1.231e-01, 7.213e-02) * s2[y+2][x+0];
	r += M4(2.664e-01, 9.937e-02, -7.437e-02, -4.998e-03, -2.968e-02, -1.201e-03, 1.293e-01, -7.804e-02, -2.239e-01, -1.550e-01, 1.428e-01, 7.567e-03, 3.176e-01, 2.465e-01, 8.384e-02, 8.927e-03) * s2[y+2][x+1];
	r += M4(1.215e-01, 7.389e-02, 6.832e-02, -4.522e-02, -6.015e-02, -7.501e-03, -1.101e-01, 1.373e-02, -3.551e-02, 3.647e-04, -2.917e-02, 1.980e-02, 8.560e-02, 7.510e-02, 8.120e-03, 6.657e-03) * s2[y+2][x+2];
	r += M4(2.729e-03, 3.040e-02, -6.782e-03, 5.005e-02, -1.243e-01, -5.912e-02, 8.326e-02, -1.019e-01, 5.296e-02, -1.676e-02, 2.924e-02, 2.659e-02, -1.801e-02, -6.550e-03, -2.358e-02, -4.432e-02) * s3[y+0][x+0];
	r += M4(-5.740e-03, 4.766e-02, 3.169e-02, 7.395e-02, -3.822e-02, 1.844e-02, -3.031e-02, 9.346e-02, 5.986e-02, -2.086e-02, 1.067e-01, 1.462e-02, -1.286e-01, -7.204e-02, -1.556e-02, -4.185e-02) * s3[y+0][x+1];
	r += M4(8.450e-02, 3.588e-02, 3.163e-02, 1.916e-02, -7.235e-03, -1.791e-02, -5.260e-02, -4.464e-02, 3.128e-02, 2.373e-02, 1.407e-02, 2.279e-02, -9.006e-03, -5.634e-03, -2.692e-02, 6.597e-03) * s3[y+0][x+2];
	r += M4(7.007e-02, 3.809e-02, -3.213e-02, 3.085e-02, -5.267e-02, -1.685e-01, -8.675e-02, -8.192e-02, 5.370e-02, 1.357e-01, -4.724e-03, 9.190e-02, -1.278e-01, -9.628e-02, 3.953e-02, 3.106e-02) * s3[y+1][x+0];
	r += M4(5.160e-03, 1.379e-01, 2.183e-01, 1.353e-01, -1.368e-01, -1.229e-01, 1.717e-01, 7.643e-02, 3.627e-01, 9.396e-02, 1.298e-01, -1.134e-01, -2.529e-01, -1.791e-01, -9.617e-02, 5.308e-02) * s3[y+1][x+1];
	r += M4(5.251e-02, 7.323e-02, -4.012e-02, -1.244e-02, 8.962e-02, -2.162e-02, -7.278e-02, -6.897e-02, -4.651e-02, -5.978e-02, 4.531e-02, -3.547e-02, -4.423e-02, -1.846e-02, 4.799e-02, -3.706e-02) * s3[y+1][x+2];
	r += M4(2.674e-02, 5.475e-03, 2.262e-02, -2.913e-02, -5.698e-03, 3.086e-02, -5.891e-04, -1.327e-02, 4.895e-02, 1.675e-01, -7.802e-02, 6.055e-03, -1.396e-02, -1.134e-02, 1.225e-02, 3.321e-02) * s3[y+2][x+0];
	r += M4(-2.087e-02, -1.283e-02, -4.984e-02, 6.573e-03, -6.824e-02, -7.823e-02, 9.210e-02, 7.810e-03, 1.978e-01, 6.230e-02, 1.451e-01, -7.018e-02, -1.156e-01, -6.897e-02, -1.904e-02, 3.216e-02) * s3[y+2][x+1];
	r += M4(-3.301e-02, -2.494e-02, 1.911e-02, 5.588e-02, 8.973e-02, 1.322e-01, -5.359e-02, -3.431e-02, -2.842e-02, 1.987e-02, -9.695e-03, -5.177e-02, 2.203e-02, 4.089e-02, 2.160e-02, -2.574e-02) * s3[y+2][x+2];
	r += V4(-8.392e-03, -8.759e-03, -4.195e-03, -5.203e-03);
	return vec4(r);
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv3_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
			s2[ay][ax] = l1(x - 1, y - 1);
			s1[ay][ax] = -max(-s0[ay][ax], V4(0.0));
			s0[ay][ax] = max(s0[ay][ax], V4(0.0));
			s3[ay][ax] = -max(-s2[ay][ax], V4(0.0));
			s2[ay][ax] = max(s2[ay][ax], V4(0.0));
		}
	}
	barrier();
	memoryBarrierShared();
	imageStore(out_image, opos + ivec2(0, 0), f0(xy.x, xy.y));
	imageStore(out_image, opos + ivec2(1, 0), f1(xy.x, xy.y));
}


//!DESC CuNNy-4x8C-DS-out
//!HOOK LUMA
//!COMPUTE 8 8 8 8
//!BIND conv4
//!BIND LUMA
//!SAVE out
//!WIDTH LUMA.w
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
	#define V4 f16vec4
	#define M4 f16mat4
	#define F float16_t
#else
	#define V4 vec4
	#define M4 mat4
	#define F float
#endif
#define l0(x, y) V4(texelFetch(conv4_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv4_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 s0[10][10];
shared V4 s1[10][10];
shared V4 s2[10][10];
shared V4 s3[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += M4(1.743e-01, 1.049e-02, 8.414e-02, 2.440e-02, 1.078e-01, 4.390e-02, 1.637e-02, 2.823e-02, -9.211e-03, 1.546e-02, 1.819e-02, 3.691e-02, 3.327e-02, -3.517e-02, 6.162e-02, -4.624e-02) * s0[y+0][x+0];
	r += M4(5.076e-02, 2.340e-01, -1.146e-01, -2.618e-02, -8.170e-02, 9.442e-03, -9.530e-02, -8.815e-02, 1.244e-01, 3.104e-02, 7.984e-02, 1.202e-02, -1.961e-01, -8.322e-03, -8.770e-03, 1.204e-01) * s0[y+0][x+1];
	r += M4(6.108e-02, 1.957e-02, 1.139e-01, 9.984e-02, 5.917e-03, -2.634e-02, 2.214e-02, -2.749e-03, -5.698e-02, -4.003e-02, -2.316e-02, -1.333e-02, -1.377e-02, 2.430e-02, -9.750e-03, 6.318e-02) * s0[y+0][x+2];
	r += M4(-1.655e-01, 9.679e-02, -1.314e-01, -5.389e-02, -2.075e-01, -6.326e-02, -1.294e-01, -7.144e-02, -1.883e-01, -3.188e-02, -1.782e-01, -7.838e-02, 6.229e-02, -1.019e-02, 6.213e-02, -3.712e-02) * s0[y+1][x+0];
	r += M4(3.878e-01, 3.141e-02, 7.631e-01, 5.446e-01, 1.110e-01, -8.663e-02, 2.206e-01, 9.217e-02, 5.883e-02, -1.153e-01, 1.551e-01, -2.167e-03, -3.573e-01, -1.741e-01, -2.576e-02, 8.902e-02) * s0[y+1][x+1];
	r += M4(-2.108e-02, 6.695e-02, -1.321e-01, -1.906e-02, 1.570e-02, 3.445e-02, -1.648e-03, 1.187e-02, -6.734e-02, -3.109e-02, -4.762e-02, 2.400e-03, 8.369e-03, 7.225e-02, -2.557e-02, 1.578e-01) * s0[y+1][x+2];
	r += M4(6.792e-02, -7.411e-02, 1.423e-01, 3.773e-02, 6.248e-02, -4.191e-02, 6.384e-02, -1.486e-03, 8.478e-02, 5.523e-02, 5.873e-02, 4.186e-02, 3.202e-02, 2.323e-03, 1.047e-01, 3.825e-03) * s0[y+2][x+0];
	r += M4(8.973e-02, 2.332e-01, -3.031e-02, 1.098e-01, 3.267e-02, 1.685e-01, -1.046e-01, 3.456e-02, -5.178e-03, 8.928e-03, -6.170e-03, -1.150e-02, 6.006e-03, 5.410e-02, -5.994e-02, 1.148e-01) * s0[y+2][x+1];
	r += M4(7.298e-02, 3.111e-02, 1.149e-01, 4.710e-02, -2.110e-02, -3.535e-02, -2.697e-02, -7.693e-02, 5.870e-03, -1.622e-02, -2.077e-02, -4.849e-02, -5.057e-02, -2.929e-02, 7.365e-03, 9.663e-03) * s0[y+2][x+2];
	r += M4(3.555e-02, -3.594e-02, 5.125e-02, 1.354e-02, -3.450e-03, -2.923e-02, -4.612e-02, 1.382e-02, 5.262e-02, -1.005e-01, 6.469e-02, -4.037e-02, 4.955e-02, 2.610e-02, 6.840e-02, 3.182e-03) * s1[y+0][x+0];
	r += M4(1.079e-01, 1.803e-01, -8.100e-02, -7.764e-03, 1.402e-01, 8.321e-02, -1.739e-01, -1.834e-01, -6.112e-02, 5.918e-01, -5.872e-02, 2.557e-01, -7.971e-02, -4.088e-02, 1.003e-01, 1.158e-01) * s1[y+0][x+1];
	r += M4(6.892e-02, 6.908e-02, 8.844e-02, 4.865e-02, 9.523e-02, 1.570e-01, 6.550e-02, -8.493e-03, -1.432e-03, -1.014e-01, -3.715e-02, -9.005e-02, 6.433e-03, 7.685e-03, -1.449e-02, 6.093e-02) * s1[y+0][x+2];
	r += M4(-3.994e-02, 1.440e-01, -1.687e-01, -2.005e-02, -1.442e-01, -3.653e-02, 2.500e-01, -1.077e-01, -2.467e-01, 2.816e-02, -5.890e-01, -1.374e-01, 1.189e-01, 2.047e-01, -1.267e-01, 9.610e-02) * s1[y+1][x+0];
	r += M4(-2.591e-01, -2.991e-01, 1.430e-01, 3.783e-02, -7.920e-01, -6.158e-01, 5.901e-01, 7.773e-01, -5.654e-04, -8.924e-02, -4.172e-01, -3.344e-01, 4.409e-02, -2.744e-01, -2.310e-01, -5.352e-01) * s1[y+1][x+1];
	r += M4(-2.472e-02, -1.760e-01, -9.922e-02, -1.680e-01, 5.979e-02, -3.625e-01, -5.755e-03, 7.003e-02, 8.678e-03, 1.213e-01, -1.826e-02, -3.095e-02, -2.028e-02, 2.056e-01, -3.474e-02, 4.382e-02) * s1[y+1][x+2];
	r += M4(3.632e-02, -4.036e-02, 1.134e-01, 6.572e-02, 6.007e-02, -5.994e-02, -2.660e-03, 3.962e-02, 4.237e-02, 4.267e-02, 5.432e-02, 2.711e-02, 5.201e-03, -1.356e-02, 1.763e-01, 7.493e-02) * s1[y+2][x+0];
	r += M4(4.416e-02, 1.183e-01, -1.278e-01, -2.286e-02, 2.079e-01, 2.099e-01, -1.086e-01, -2.881e-01, -2.481e-02, 1.198e-02, 7.672e-03, 4.874e-02, -2.914e-02, -3.650e-02, 7.842e-02, 7.153e-02) * s1[y+2][x+1];
	r += M4(3.460e-02, 3.401e-02, 6.763e-02, 3.308e-02, -7.358e-02, -6.335e-03, 3.539e-03, 6.842e-02, -2.851e-02, -2.659e-02, -2.570e-02, 1.162e-02, -2.776e-02, -3.198e-02, -5.328e-03, 5.221e-02) * s1[y+2][x+2];
	r += M4(5.277e-03, 7.230e-02, 6.470e-02, 3.753e-02, 1.179e-01, -5.850e-02, -8.149e-03, -2.908e-02, -9.345e-02, -7.311e-02, 1.364e-02, -1.836e-02, -7.466e-03, -6.700e-03, 3.759e-03, -2.856e-02) * s2[y+0][x+0];
	r += M4(1.642e-01, -4.140e-01, 8.405e-02, 8.519e-03, -9.691e-01, 7.492e-02, -1.583e-01, 6.266e-02, -9.751e-02, -6.720e-02, -5.480e-02, -1.309e-02, 1.555e-01, 1.268e-02, 2.606e-02, -3.248e-03) * s2[y+0][x+1];
	r += M4(-1.256e-01, 1.544e-02, -2.993e-02, -5.404e-02, 1.636e-01, -5.947e-02, -3.736e-02, -1.196e-02, -5.821e-02, -4.950e-02, -1.985e-02, -2.002e-03, 1.837e-01, 2.867e-01, 6.623e-02, 8.132e-02) * s2[y+0][x+2];
	r += M4(-3.130e-01, -3.550e-02, -4.431e-01, 8.280e-03, -1.079e-01, -6.424e-02, 1.323e-01, -7.368e-02, 2.397e-01, -1.635e-01, -1.058e-01, -1.993e-01, -1.087e-01, 2.126e-02, -9.838e-02, 6.753e-03) * s2[y+1][x+0];
	r += M4(2.901e-01, -3.255e-01, 2.124e-01, -9.094e-01, -1.731e-02, 2.428e-01, -7.640e-01, 3.948e-01, 3.291e-01, 1.148e+00, -7.455e-02, 3.213e-01, 6.942e-01, 1.275e-02, 5.392e-01, -6.045e-03) * s2[y+1][x+1];
	r += M4(-4.049e-02, 1.867e-02, -1.179e-01, 7.228e-02, 5.893e-02, 2.157e-01, 1.498e-01, 3.743e-02, 5.458e-02, -1.043e-01, -6.089e-02, -1.837e-01, -2.884e-01, 1.946e-01, -4.277e-01, -5.027e-02) * s2[y+1][x+2];
	r += M4(6.529e-02, 2.270e-02, -2.073e-02, -5.237e-02, 2.800e-03, 3.191e-02, -2.819e-02, 1.498e-02, -1.248e-01, 3.359e-02, -5.239e-02, -9.951e-02, 8.514e-03, -2.988e-02, -2.150e-02, 5.028e-03) * s2[y+2][x+0];
	r += M4(6.483e-02, 3.234e-02, 6.610e-02, -1.753e-02, -1.217e-01, -5.065e-02, -3.356e-02, 3.232e-02, -3.243e-01, -2.770e-01, -8.911e-02, 2.764e-01, 3.334e-03, 1.725e-02, 1.117e-01, -4.945e-03) * s2[y+2][x+1];
	r += M4(2.589e-02, 3.255e-02, -1.815e-02, -7.599e-03, -6.060e-02, -7.501e-02, -4.102e-02, -4.071e-02, -7.015e-02, -9.657e-02, 3.285e-02, -8.195e-02, -1.203e-02, 7.444e-02, -4.063e-02, 1.589e-01) * s2[y+2][x+2];
	r += M4(2.505e-02, 9.982e-03, -5.810e-02, 1.645e-02, 9.997e-02, 5.066e-02, 2.894e-02, 2.104e-02, -2.777e-02, -5.358e-02, -4.711e-02, -1.113e-02, 4.629e-02, -2.436e-02, 3.646e-02, -8.521e-03) * s3[y+0][x+0];
	r += M4(3.102e-02, 4.866e-02, 1.871e-02, -3.113e-02, 2.940e-02, 2.010e-02, -4.984e-03, -6.019e-02, -6.565e-02, -4.748e-02, -5.999e-02, -7.669e-02, -1.788e-01, -1.804e-02, -5.827e-03, 2.973e-02) * s3[y+0][x+1];
	r += M4(-6.258e-02, 1.064e-02, -3.474e-02, 1.277e-02, 4.406e-02, -1.794e-02, 1.442e-02, -2.623e-02, -9.866e-02, -8.054e-02, -3.664e-02, -2.821e-02, -5.062e-02, -1.575e-01, 2.569e-02, -8.103e-04) * s3[y+0][x+2];
	r += M4(-3.213e-01, -7.252e-02, -1.026e-01, -5.643e-02, 3.447e-02, -4.067e-02, 7.533e-02, 6.424e-03, -2.403e-02, -9.954e-02, 3.384e-02, -9.543e-02, -8.630e-02, -3.204e-02, -4.917e-02, -4.413e-02) * s3[y+1][x+0];
	r += M4(7.798e-02, -1.700e-01, 1.792e-01, 8.937e-02, -1.132e-01, 1.568e-02, -9.516e-02, 3.242e-02, 4.096e-01, 2.705e-01, 3.345e-01, 2.744e-01, 1.755e-01, 1.107e-01, -7.563e-02, 4.730e-02) * s3[y+1][x+1];
	r += M4(-1.972e-02, -3.101e-02, -4.189e-02, -2.224e-03, -2.583e-02, -4.332e-02, 4.976e-02, 1.176e-03, -5.534e-02, 1.304e-01, -7.091e-02, 9.811e-02, 5.102e-02, 2.370e-02, 6.956e-02, -1.106e-01) * s3[y+1][x+2];
	r += M4(9.646e-02, 2.775e-02, -2.161e-02, -5.152e-03, -4.964e-03, 2.118e-02, 1.443e-02, 1.274e-02, 2.694e-02, 5.104e-02, -1.014e-03, 2.230e-03, 2.143e-02, -3.967e-02, 9.410e-03, -4.159e-02) * s3[y+2][x+0];
	r += M4(7.110e-02, 1.120e-01, 1.015e-02, -1.365e-02, -2.435e-02, -3.873e-02, 8.085e-03, 1.066e-02, -9.721e-02, -1.012e-01, -8.657e-02, -9.846e-02, 2.348e-02, 7.540e-02, 9.212e-02, 8.025e-02) * s3[y+2][x+1];
	r += M4(3.251e-02, 4.201e-02, 1.208e-02, 1.067e-03, -1.812e-02, -4.811e-02, -3.096e-02, -6.418e-02, -2.489e-02, 2.851e-04, -5.366e-02, -1.979e-02, -3.412e-02, -1.451e-02, -9.555e-02, -1.036e-02) * s3[y+2][x+2];
	r += V4(4.501e-04, 5.057e-04, 5.500e-04, 7.459e-04);
	return tanh(vec4(r));
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(1, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv4_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
			s2[ay][ax] = l1(x - 1, y - 1);
			s1[ay][ax] = -max(-s0[ay][ax], V4(0.0));
			s0[ay][ax] = max(s0[ay][ax], V4(0.0));
			s3[ay][ax] = -max(-s2[ay][ax], V4(0.0));
			s2[ay][ax] = max(s2[ay][ax], V4(0.0));
		}
	}
	barrier();
	memoryBarrierShared();
	imageStore(out_image, opos + ivec2(0, 0), f0(xy.x, xy.y));
}


//!DESC CuNNy-4x8C-DS-shuffle
//!HOOK LUMA
//!BIND out
//!BIND easu
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 1
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
	#define V4 f16vec4
	#define M4 f16mat4
	#define F float16_t
#else
	#define V4 vec4
	#define M4 mat4
	#define F float
#endif
vec4 hook() {
	vec4 r = vec4(0.0);
	vec2 f = fract(out_pos * out_size);
	ivec2 i = ivec2(f * vec2(2.0));
	r.r = out_tex((vec2(0.5) - f) * out_pt + out_pos)[2*i.y + i.x];
	r.r += easu_tex(easu_pos).r;
	r.a = 1.0;
	return clamp(r, 0.0, 1.0);
}
