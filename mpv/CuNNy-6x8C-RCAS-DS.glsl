// CuNNy 6x8C RCAS DS
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

// FSR mpv | modified
// Copyright (c) 2021 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// FidelityFX FSR v1.0.2 by AMD
// ported to mpv by agyild

//!DESC CuNNy-EASU
//!HOOK LUMA
//!BIND LUMA
//!SAVE easu
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
//!COMPONENTS 1

float APrxLoRcpF1(float a) {
	return uintBitsToFloat(uint(0x7ef07ebb) - floatBitsToUint(a));
}

float APrxLoRsqF1(float a) {
	return uintBitsToFloat(uint(0x5f347d74) - (floatBitsToUint(a) >> uint(1)));
}

float AMin3F1(float x, float y, float z) {
	return min(x, min(y, z));
}

float AMax3F1(float x, float y, float z) {
	return max(x, max(y, z));
}

void tap(inout float aC, inout float aW, vec2 off, vec2 dir, vec2 len,
         float lob, float clp, float c){
	vec2 v;
	v.x = (off.x * ( dir.x)) + (off.y * dir.y);
	v.y = (off.x * (-dir.y)) + (off.y * dir.x);
	v *= len;
	float d2 = v.x * v.x + v.y * v.y;
	d2 = min(d2, clp);
	float wB = float(2.0 / 5.0) * d2 + -1.0;
	float wA = lob * d2 + -1.0;
	wB *= wB;
	wA *= wA;
	wB = float(25.0 / 16.0) * wB + float(-(25.0 / 16.0 - 1.0));
	float w = wB * wA;
	aC += c * w;
	aW += w;
}

void set(inout vec2 dir, inout float len, vec2 pp, bool biS, bool biT,
         bool biU, bool biV, float lA, float lB, float lC, float lD, float lE){
	float w = 0.0;
	if (biS)
		w = (1.0 - pp.x) * (1.0 - pp.y);
	if (biT)
		w =        pp.x  * (1.0 - pp.y);
	if (biU)
		w = (1.0 - pp.x) *        pp.y;
	if (biV)
		w =        pp.x  *        pp.y;
	float dc = lD - lC;
	float cb = lC - lB;
	float lenX = max(abs(dc), abs(cb));
	lenX = APrxLoRcpF1(lenX);
	float dirX = lD - lB;
	lenX = clamp(abs(dirX) * lenX, 0.0, 1.0);
	lenX *= lenX;
	float ec = lE - lC;
	float ca = lC - lA;
	float lenY = max(abs(ec), abs(ca));
	lenY = APrxLoRcpF1(lenY);
	float dirY = lE - lA;
	lenY = clamp(abs(dirY) * lenY, 0.0, 1.0);
	lenY *= lenY;
	dir += vec2(dirX, dirY) * w;
	len += dot(vec2(w), vec2(lenX, lenY));
}

vec4 hook() {
	vec4 pix = vec4(0.0, 0.0, 0.0, 1.0);
	vec2 pp = LUMA_pos * LUMA_size - vec2(0.5);
	vec2 fp = floor(pp);
	pp -= fp;
#if (defined(LUMA_gather) && (__VERSION__ >= 400 || (GL_ES && __VERSION__ >= 310)))
	vec4 bczzL = LUMA_gather(vec2((fp + vec2(1.0, -1.0)) * LUMA_pt), 0);
	vec4 ijfeL = LUMA_gather(vec2((fp + vec2(0.0,  1.0)) * LUMA_pt), 0);
	vec4 klhgL = LUMA_gather(vec2((fp + vec2(2.0,  1.0)) * LUMA_pt), 0);
	vec4 zzonL = LUMA_gather(vec2((fp + vec2(1.0,  3.0)) * LUMA_pt), 0);
#else
	float b = LUMA_tex(vec2((fp + vec2(0.5, -0.5)) * LUMA_pt)).r;
	float c = LUMA_tex(vec2((fp + vec2(1.5, -0.5)) * LUMA_pt)).r;
	float e = LUMA_tex(vec2((fp + vec2(-0.5, 0.5)) * LUMA_pt)).r;
	float f = LUMA_tex(vec2((fp + vec2( 0.5, 0.5)) * LUMA_pt)).r;
	float g = LUMA_tex(vec2((fp + vec2( 1.5, 0.5)) * LUMA_pt)).r;
	float h = LUMA_tex(vec2((fp + vec2( 2.5, 0.5)) * LUMA_pt)).r;
	float i = LUMA_tex(vec2((fp + vec2(-0.5, 1.5)) * LUMA_pt)).r;
	float j = LUMA_tex(vec2((fp + vec2( 0.5, 1.5)) * LUMA_pt)).r;
	float k = LUMA_tex(vec2((fp + vec2( 1.5, 1.5)) * LUMA_pt)).r;
	float l = LUMA_tex(vec2((fp + vec2( 2.5, 1.5)) * LUMA_pt)).r;
	float n = LUMA_tex(vec2((fp + vec2(0.5, 2.5) ) * LUMA_pt)).r;
	float o = LUMA_tex(vec2((fp + vec2(1.5, 2.5) ) * LUMA_pt)).r;
	vec4 bczzL = vec4(b, c, 0.0, 0.0);
	vec4 ijfeL = vec4(i, j, f, e);
	vec4 klhgL = vec4(k, l, h, g);
	vec4 zzonL = vec4(0.0, 0.0, o, n);
#endif
	float bL = bczzL.x;
	float cL = bczzL.y;
	float iL = ijfeL.x;
	float jL = ijfeL.y;
	float fL = ijfeL.z;
	float eL = ijfeL.w;
	float kL = klhgL.x;
	float lL = klhgL.y;
	float hL = klhgL.z;
	float gL = klhgL.w;
	float oL = zzonL.z;
	float nL = zzonL.w;
	vec2 dir = vec2(0.0);
	float len = 0.0;
	set(dir, len, pp, true, false, false, false, bL, eL, fL, gL, jL);
	set(dir, len, pp, false, true, false, false, cL, fL, gL, hL, kL);
	set(dir, len, pp, false, false, true, false, fL, iL, jL, kL, nL);
	set(dir, len, pp, false, false, false, true, gL, jL, kL, lL, oL);
	vec2 dir2 = dir * dir;
	float dirR = dir2.x + dir2.y;
	bool zro = dirR < float(1.0 / 32768.0);
	dirR = APrxLoRsqF1(dirR);
	dirR = zro ? 1.0 : dirR;
	dir.x = zro ? 1.0 : dir.x;
	dir *= vec2(dirR);
	len = len * 0.5;
	len *= len;
	float stretch = (dir.x * dir.x + dir.y * dir.y) * APrxLoRcpF1(max(abs(dir.x), abs(dir.y)));
	vec2 len2 = vec2(1.0 + (stretch - 1.0) * len, 1.0 + -0.5 * len);
	float lob = 0.5 + float((1.0 / 4.0 - 0.04) - 0.5) * len;
	float clp = APrxLoRcpF1(lob);
	float aC = 0.0;
	float aW = 0.0;
	tap(aC, aW, vec2( 0.0,-1.0) - pp, dir, len2, lob, clp, bL);
	tap(aC, aW, vec2( 1.0,-1.0) - pp, dir, len2, lob, clp, cL);
	tap(aC, aW, vec2(-1.0, 1.0) - pp, dir, len2, lob, clp, iL);
	tap(aC, aW, vec2( 0.0, 1.0) - pp, dir, len2, lob, clp, jL);
	tap(aC, aW, vec2( 0.0, 0.0) - pp, dir, len2, lob, clp, fL);
	tap(aC, aW, vec2(-1.0, 0.0) - pp, dir, len2, lob, clp, eL);
	tap(aC, aW, vec2( 1.0, 1.0) - pp, dir, len2, lob, clp, kL);
	tap(aC, aW, vec2( 2.0, 1.0) - pp, dir, len2, lob, clp, lL);
	tap(aC, aW, vec2( 2.0, 0.0) - pp, dir, len2, lob, clp, hL);
	tap(aC, aW, vec2( 1.0, 0.0) - pp, dir, len2, lob, clp, gL);
	tap(aC, aW, vec2( 1.0, 2.0) - pp, dir, len2, lob, clp, oL);
	tap(aC, aW, vec2( 0.0, 2.0) - pp, dir, len2, lob, clp, nL);
	pix.r = aC / aW;
	float min1 = min(AMin3F1(fL, gL, jL), kL);
	float max1 = max(AMax3F1(fL, gL, jL), kL);
	pix.r = clamp(pix.r, min1, max1);
	pix.r = clamp(pix.r, 0.0, 1.0);
	return pix;
}

//!DESC CuNNy-RCAS
//!HOOK LUMA
//!BIND easu
//!SAVE rcas
//!WIDTH easu.w
//!HEIGHT easu.h
//!COMPONENTS 1

// CuNNy: do not change unless changed during training as well
#define SHARPNESS 2.0
#define FSR_RCAS_LIMIT (0.25 - (1.0 / 16.0))

float APrxMedRcpF1(float a) {
	float b = uintBitsToFloat(uint(0x7ef19fff) - floatBitsToUint(a));
	return b * (-b * a + 2.0);
}

float AMax3F1(float x, float y, float z) {
	return max(x, max(y, z)); 
}


float AMin3F1(float x, float y, float z) {
	return min(x, min(y, z));
}

vec4 hook() {
#if (defined(easu_gather) && (__VERSION__ >= 400 || (GL_ES && __VERSION__ >= 310)))
	vec3 bde = easu_gather(easu_pos + easu_pt * vec2(-0.5), 0).xyz;
	float b = bde.z;
	float d = bde.x;
	float e = bde.y;
	vec2 fh = easu_gather(easu_pos + easu_pt * vec2(0.5), 0).zx;
	float f = fh.x;
	float h = fh.y;
#else
	float b = easu_texOff(vec2( 0.0, -1.0)).r;
	float d = easu_texOff(vec2(-1.0,  0.0)).r;
	float e = easu_tex(easu_pos).r;
	float f = easu_texOff(vec2(1.0, 0.0)).r;
	float h = easu_texOff(vec2(0.0, 1.0)).r;
#endif
	float mn1L = min(AMin3F1(b, d, f), h);
	float mx1L = max(AMax3F1(b, d, f), h);
	vec2 peakC = vec2(1.0, -1.0 * 4.0);
	float hitMinL = min(mn1L, e) / (4.0 * mx1L);
	float hitMaxL = (peakC.x - max(mx1L, e)) / (4.0 * mn1L + peakC.y);
	float lobeL = max(-hitMinL, hitMaxL);
	float lobe = max(float(-FSR_RCAS_LIMIT), min(lobeL, 0.0)) * exp2(-clamp(float(SHARPNESS), 0.0, 2.0));
	float nz = 0.25 * b + 0.25 * d + 0.25 * f + 0.25 * h - e;
	nz = clamp(abs(nz) * APrxMedRcpF1(AMax3F1(AMax3F1(b, d, e), f, h) - AMin3F1(AMin3F1(b, d, e), f, h)), 0.0, 1.0);
	nz = -0.5 * nz + 1.0;
	lobe *= nz;
	float rcpL = APrxMedRcpF1(4.0 * lobe + 1.0);
	vec4 pix = vec4(0.0, 0.0, 0.0, 1.0);
	pix.r = float((lobe * b + lobe * d + lobe * h + lobe * f + e) * rcpL);
	return pix;
}


//!DESC CuNNy-6x8C-RCAS-DS-in
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND LUMA
//!SAVE in
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
	#define V4 f16vec4
	#define M4 f16mat4
	#define F float16_t
#else
	#define V4 vec4
	#define M4 mat4
	#define F float
#endif
#define l0(x, y) F(texelFetch(LUMA_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(1, 1) + ivec2(0, 0), 0).r)
shared F s0[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += V4(-1.299e-01, -3.773e-01, 2.029e-02, -1.459e-01) * s0[y+0][x+0];
	r += V4(-4.029e-01, 4.592e-01, -2.269e-01, 1.399e-01) * s0[y+0][x+1];
	r += V4(-2.426e-02, -7.289e-02, 2.114e-01, 7.846e-03) * s0[y+0][x+2];
	r += V4(2.875e-02, -9.101e-02, 2.533e-01, 4.555e-01) * s0[y+1][x+0];
	r += V4(3.585e-01, 4.513e-02, 5.671e-02, -2.820e-01) * s0[y+1][x+1];
	r += V4(1.725e-01, 3.106e-02, 2.334e-02, -1.758e-01) * s0[y+1][x+2];
	r += V4(3.362e-02, 3.671e-02, -9.552e-02, -4.399e-02) * s0[y+2][x+0];
	r += V4(-7.502e-03, -5.359e-02, 6.739e-02, -1.238e-01) * s0[y+2][x+1];
	r += V4(-2.519e-02, 2.072e-02, 9.627e-04, 1.635e-01) * s0[y+2][x+2];
	r += V4(-2.241e-02, 2.170e-03, -4.763e-02, 9.056e-04);
	return vec4(r);
}
vec4 f1(int x, int y) {
	V4 r = V4(0.0);
	r += V4(9.189e-03, -1.263e-01, 2.815e-03, 3.430e-02) * s0[y+0][x+0];
	r += V4(4.030e-02, -1.765e-01, 4.135e-02, -2.738e-02) * s0[y+0][x+1];
	r += V4(2.202e-01, 9.643e-02, 7.447e-02, 1.511e-02) * s0[y+0][x+2];
	r += V4(-2.656e-01, 1.014e-01, -4.014e-01, -1.079e-01) * s0[y+1][x+0];
	r += V4(-3.479e-01, -1.652e-01, 3.840e-01, 9.629e-02) * s0[y+1][x+1];
	r += V4(-9.107e-02, -6.150e-02, -4.844e-02, -1.863e-02) * s0[y+1][x+2];
	r += V4(-2.311e-01, 2.747e-01, -4.629e-02, -1.546e-01) * s0[y+2][x+0];
	r += V4(5.252e-02, 6.939e-02, -7.921e-02, -1.094e-01) * s0[y+2][x+1];
	r += V4(1.058e-01, 2.541e-03, 1.265e-01, 3.544e-02) * s0[y+2][x+2];
	r += V4(2.261e-01, -9.864e-03, -5.200e-02, 3.952e-03);
	return vec4(r);
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = LUMA_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
		}
	}
	barrier();
	vec4 r0 = f0(xy.x, xy.y);
	vec4 r1 = f1(xy.x, xy.y);
	imageStore(out_image, opos + ivec2(0, 0), r0);
	imageStore(out_image, opos + ivec2(1, 0), r1);
}


//!DESC CuNNy-6x8C-RCAS-DS-conv1
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND in
//!BIND LUMA
//!SAVE conv1
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
	#define V4 f16vec4
	#define M4 f16mat4
	#define F float16_t
#else
	#define V4 vec4
	#define M4 mat4
	#define F float
#endif
#define l0(x, y) V4(texelFetch(in_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(in_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 s0[10][10];
shared V4 s1[10][10];
shared V4 s2[10][10];
shared V4 s3[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-7.372e-02, 7.175e-03, 4.199e-02, 5.672e-03, 2.611e-02, -1.852e-01, -4.000e-02, 1.733e-02, 6.332e-02, -1.027e-01, -6.485e-03, 5.903e-02, -5.164e-02, 3.624e-01, 8.577e-02, 3.777e-02) * s0[y+0][x+0];
	r += M4(-5.962e-03, -3.695e-02, 6.439e-02, 2.317e-02, -1.051e-02, 2.609e-02, 5.434e-02, -3.126e-02, -1.065e-01, 7.848e-02, -3.445e-02, -9.406e-02, 4.456e-02, -3.549e-02, -9.676e-02, -1.489e-01) * s0[y+0][x+1];
	r += M4(-6.826e-02, -3.234e-03, 1.214e-02, -1.630e-01, 3.754e-02, -5.005e-03, -3.665e-02, -1.273e-02, 1.268e-01, -7.275e-02, -1.590e-02, 2.151e-03, 1.065e-01, 3.665e-02, 1.014e-01, 1.674e-01) * s0[y+0][x+2];
	r += M4(1.333e-01, 1.656e-01, -1.958e-01, 1.999e-01, 5.197e-02, 1.467e-02, 1.190e-01, -1.170e-01, -1.865e-02, -4.123e-02, -2.323e-01, -1.157e-02, 8.495e-03, 2.588e-01, 2.301e-01, -6.967e-02) * s0[y+1][x+0];
	r += M4(-6.040e-02, -8.640e-03, 2.098e-01, 5.177e-02, -7.580e-02, 5.242e-02, -7.688e-03, 3.202e-01, 7.902e-02, -9.584e-02, -3.502e-01, 1.795e-02, -2.115e-01, -9.108e-01, -3.135e-01, 2.460e-01) * s0[y+1][x+1];
	r += M4(-1.784e-02, -1.641e-01, 3.114e-02, -1.229e-01, 2.074e-01, -7.256e-03, -7.576e-02, 1.139e-01, 7.906e-02, -2.528e-04, -2.760e-02, 1.184e-01, -6.211e-02, -1.030e-01, 7.936e-02, 1.044e-01) * s0[y+1][x+2];
	r += M4(1.632e-01, 2.901e-01, 3.076e-02, -6.302e-02, -9.504e-02, -3.125e-01, -7.042e-02, 1.345e-02, 7.983e-02, 2.026e-01, -1.900e-01, -6.951e-02, -7.943e-02, 1.164e-01, 1.134e-01, -8.791e-02) * s0[y+2][x+0];
	r += M4(1.232e-01, -9.420e-02, 5.275e-02, -5.391e-01, 1.487e-02, 3.079e-01, 3.616e-02, 4.698e-01, -1.505e-01, 1.147e-01, -2.336e-01, -4.591e-02, 1.777e-01, -1.843e-01, 9.969e-02, -2.395e-01) * s0[y+2][x+1];
	r += M4(8.635e-03, 1.484e-01, -1.075e-01, -7.299e-02, -8.278e-02, 2.446e-01, 4.546e-02, -3.119e-02, 2.477e-01, 5.779e-02, -7.171e-02, 1.056e-01, 2.588e-01, 3.900e-03, -4.506e-02, -4.127e-02) * s0[y+2][x+2];
	r += M4(-7.535e-02, 5.090e-02, 2.683e-02, 6.711e-02, 1.439e-02, -1.904e-01, -5.916e-02, -4.945e-02, 6.614e-02, 2.592e-02, -4.077e-02, -6.027e-02, -4.509e-02, 3.740e-01, 1.140e-01, 4.121e-02) * s1[y+0][x+0];
	r += M4(-1.610e-02, -1.140e-01, 8.209e-02, -7.950e-02, -2.422e-02, -4.317e-03, 2.301e-02, -7.382e-03, -1.531e-01, 5.863e-02, -9.912e-02, -2.153e-01, 5.770e-02, -9.505e-02, -1.588e-01, -6.948e-02) * s1[y+0][x+1];
	r += M4(-7.007e-02, 1.409e-02, -8.484e-04, -4.674e-02, 3.755e-02, -1.156e-02, -4.357e-02, -8.034e-03, 8.266e-02, 3.543e-03, -4.904e-02, -5.755e-02, 1.022e-01, 3.196e-02, 9.623e-02, 9.231e-02) * s1[y+0][x+2];
	r += M4(1.294e-01, 5.294e-02, -2.010e-01, 1.621e-01, 2.741e-02, -1.460e-02, 9.871e-02, -2.998e-02, 5.410e-02, -6.067e-02, -2.656e-01, -5.176e-03, -1.750e-02, 3.675e-01, 1.417e-02, -2.815e-01) * s1[y+1][x+0];
	r += M4(-1.059e-01, 1.246e-01, 1.825e-01, -1.232e-01, -6.904e-02, 1.925e-01, 3.964e-02, -6.093e-02, 2.370e-01, -1.971e-01, -3.395e-01, 2.936e-01, -1.841e-01, -6.861e-01, -3.131e-01, -1.664e-01) * s1[y+1][x+1];
	r += M4(-2.170e-03, -1.779e-01, 6.010e-02, -7.757e-02, 2.124e-01, 5.162e-02, -3.521e-02, -1.116e-01, 8.108e-02, 3.106e-02, -6.097e-02, 3.426e-01, -1.068e-01, -3.736e-02, 1.826e-02, 7.658e-02) * s1[y+1][x+2];
	r += M4(1.259e-01, 5.696e-01, 8.397e-02, -1.282e-01, -5.226e-02, -2.950e-01, 4.102e-02, -1.250e-02, 7.955e-02, -4.210e-02, -2.211e-01, -2.869e-01, -1.135e-01, -5.579e-02, 7.643e-02, 1.326e-01) * s1[y+2][x+0];
	r += M4(1.314e-01, 5.048e-01, 1.172e-01, -1.667e-01, -1.090e-01, -1.297e-01, 3.674e-02, -7.834e-02, -3.845e-01, 3.249e-01, -2.646e-01, 1.366e-01, -6.185e-03, -3.233e-01, 1.075e-02, 1.381e-01) * s1[y+2][x+1];
	r += M4(1.645e-02, 1.922e-01, -9.871e-02, 4.505e-03, -6.152e-02, 1.272e-01, -4.141e-03, -1.239e-01, 3.456e-01, 3.436e-03, -1.107e-01, 4.678e-02, 2.575e-01, 4.082e-02, -3.726e-02, -6.576e-04) * s1[y+2][x+2];
	r += M4(-6.911e-02, 8.291e-02, -3.659e-02, 1.776e-02, 9.074e-02, 9.595e-02, -6.769e-03, 3.009e-02, -7.241e-02, 1.674e-01, -6.280e-03, 1.575e-01, 4.766e-01, 1.662e-01, 3.033e-01, -1.720e-01) * s2[y+0][x+0];
	r += M4(-2.857e-03, -1.538e-01, 6.735e-02, -1.460e-01, -2.291e-02, 6.012e-02, -1.740e-01, 2.208e-01, 4.383e-02, 1.565e-01, 4.488e-02, -2.406e-01, 3.976e-01, 6.444e-01, 6.851e-01, -1.560e-02) * s2[y+0][x+1];
	r += M4(-1.238e-01, 6.791e-02, -3.834e-02, 1.675e-01, 7.150e-02, 8.815e-02, -2.210e-02, 2.235e-01, -2.172e-02, 1.652e-02, 1.328e-01, -1.389e-01, -9.823e-01, -1.383e-01, 3.894e-01, -4.641e-01) * s2[y+0][x+2];
	r += M4(-6.043e-02, 2.742e-01, 8.738e-02, 1.449e-02, 1.043e-02, -1.275e-01, 1.111e-01, 9.915e-02, 1.666e-01, 1.324e-01, -2.947e-01, 2.337e-02, 1.722e-01, -1.560e-01, -1.060e-01, 2.060e-01) * s2[y+1][x+0];
	r += M4(-1.255e-01, 3.645e-02, 2.065e-01, -1.883e-01, -4.616e-02, -3.249e-03, 6.879e-02, -5.809e-02, -1.194e-01, -9.893e-02, 1.070e-01, 4.658e-01, 9.762e-01, 1.476e+00, 3.988e-01, 3.026e-01) * s2[y+1][x+1];
	r += M4(-1.670e-02, -1.152e-01, 4.578e-02, -3.709e-02, 1.118e-01, 8.853e-02, 1.763e-01, -4.286e-03, 9.753e-02, 2.047e-02, 2.294e-03, 1.124e-01, -1.840e-01, -8.580e-01, 1.188e-01, -4.954e-01) * s2[y+1][x+2];
	r += M4(-4.793e-02, 6.676e-02, -8.441e-02, 1.362e-01, -3.056e-02, 1.998e-01, -1.647e-02, 1.461e-01, 1.156e-02, 6.934e-02, 7.293e-02, 4.679e-02, 1.702e-01, -3.476e-01, 4.681e-01, -1.599e-01) * s2[y+2][x+0];
	r += M4(-2.070e-01, -2.649e-01, -3.231e-02, 1.256e-01, -1.143e-01, -2.529e-01, 9.772e-02, -2.896e-02, 2.862e-01, 1.144e-01, 5.188e-03, 6.586e-02, 1.967e-01, 3.973e-01, 2.100e-01, -1.815e-01) * s2[y+2][x+1];
	r += M4(-3.420e-01, 6.807e-02, -1.288e-02, 4.383e-02, -4.817e-02, 5.952e-02, -3.389e-02, -1.225e-01, -2.034e-01, -5.094e-02, 4.406e-02, 3.676e-02, 2.006e-01, -4.695e-01, 1.854e-01, 5.358e-01) * s2[y+2][x+2];
	r += M4(-6.716e-02, 4.868e-02, -2.640e-02, -1.408e-02, 9.286e-02, 7.847e-03, 2.757e-02, -1.038e-01, -4.418e-02, 1.559e-01, 1.147e-03, 1.482e-01, 9.945e-02, 7.911e-02, 4.786e-02, 4.752e-02) * s3[y+0][x+0];
	r += M4(-7.334e-03, -5.994e-02, 4.532e-02, -1.129e-01, -1.464e-02, 2.744e-01, -9.947e-02, 1.086e-01, 2.817e-02, -2.688e-02, 5.468e-02, -1.793e-01, 5.701e-02, 6.143e-02, 6.316e-02, -5.046e-02) * s3[y+0][x+1];
	r += M4(-1.205e-01, 2.363e-02, -5.408e-02, 9.419e-02, 3.517e-02, -4.279e-02, -3.447e-02, -1.506e-01, -1.916e-02, 1.893e-02, 1.430e-01, -1.557e-01, -1.238e-01, 9.259e-02, -1.143e-02, -2.088e-02) * s3[y+0][x+2];
	r += M4(-8.472e-02, 2.171e-01, 6.812e-02, 2.930e-02, -3.492e-03, -9.899e-02, 1.320e-01, 2.007e-01, 1.455e-01, 7.381e-02, -1.704e-01, 7.553e-02, 2.034e-02, 7.837e-02, -4.196e-02, -1.569e-02) * s3[y+1][x+0];
	r += M4(-8.688e-02, 3.452e-02, 1.420e-01, -4.648e-02, -2.714e-02, -2.322e-01, 1.206e-02, -1.569e-02, -5.920e-02, 9.460e-03, 1.722e-01, -1.353e-01, -5.637e-02, -1.875e-01, 1.066e-02, 1.516e-02) * s3[y+1][x+1];
	r += M4(-1.999e-02, -8.372e-02, 5.360e-02, -8.441e-02, 3.310e-02, 1.502e-01, 2.060e-01, -8.199e-02, 9.897e-02, 5.844e-02, 6.125e-03, 8.095e-02, 6.549e-03, 1.099e-01, -5.972e-02, -1.098e-01) * s3[y+1][x+2];
	r += M4(-1.574e-02, 1.269e-01, -6.228e-02, 1.524e-01, -1.753e-02, 2.509e-01, -1.155e-01, 1.898e-01, -6.312e-02, 5.828e-02, 5.751e-02, 2.337e-03, -9.602e-04, 6.413e-02, 1.719e-01, -4.149e-02) * s3[y+2][x+0];
	r += M4(-1.174e-01, -3.152e-01, -2.361e-02, 1.113e-01, -1.211e-01, -2.782e-01, 1.445e-01, -1.811e-01, 2.504e-01, 2.298e-01, 3.769e-02, 3.292e-02, 2.928e-02, 7.584e-03, 9.641e-03, 7.133e-02) * s3[y+2][x+1];
	r += M4(-2.913e-01, 6.503e-02, -6.366e-03, -1.513e-03, 3.630e-02, 7.886e-03, -2.852e-02, -8.275e-02, -4.948e-02, -1.675e-01, 5.851e-02, -9.206e-02, -7.221e-02, -1.212e-01, -3.626e-02, -1.201e-01) * s3[y+2][x+2];
	r += V4(-3.359e-01, 3.832e-02, -8.601e-02, -4.611e-02);
	return vec4(r);
}
vec4 f1(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-1.020e-01, -1.343e-01, -6.638e-02, 1.105e-02, -1.739e-02, -6.855e-02, 4.818e-02, 8.371e-02, 6.132e-02, 4.456e-02, -1.513e-01, -1.709e-01, 1.409e-01, -8.632e-02, -2.024e-01, -1.880e-01) * s0[y+0][x+0];
	r += M4(1.548e-01, 2.761e-03, -7.543e-02, 4.212e-03, 2.747e-01, -1.925e-02, 9.983e-02, 1.182e-01, 1.221e-01, -1.143e-01, -3.240e-01, 6.561e-02, -3.415e-01, 6.833e-02, -3.085e-01, -7.314e-02) * s0[y+0][x+1];
	r += M4(-2.271e-02, 1.765e-02, 5.042e-02, -1.053e-02, -8.122e-03, -4.649e-03, 2.130e-01, -2.060e-02, -4.780e-02, 3.147e-03, -6.564e-02, 7.060e-02, -3.331e-02, 9.303e-02, -3.337e-02, 6.200e-02) * s0[y+0][x+2];
	r += M4(-1.139e-01, -1.655e-01, -3.434e-01, -1.201e-01, 6.725e-03, 9.041e-02, -4.364e-02, 1.004e-01, -1.629e-01, 9.010e-02, -1.671e-02, -6.747e-02, 1.206e-01, 1.143e-01, -8.198e-03, -5.970e-01) * s0[y+1][x+0];
	r += M4(-2.638e-02, 1.361e-01, -3.722e-01, -8.602e-02, 6.624e-02, 3.456e-01, -2.708e-01, 8.715e-02, -7.270e-02, -1.426e-01, 7.592e-02, -2.460e-02, -3.425e-01, -3.800e-01, 4.263e-01, -3.408e-01) * s0[y+1][x+1];
	r += M4(1.124e-01, -1.475e-01, -1.594e-01, -1.461e-02, 8.474e-02, -9.561e-04, -6.028e-02, -3.465e-01, -1.031e-01, -6.557e-02, 2.636e-01, -7.419e-02, -1.140e-01, -5.252e-02, 3.389e-01, -1.990e-01) * s0[y+1][x+2];
	r += M4(2.440e-03, 1.278e-01, -1.983e-02, -3.367e-01, 3.674e-03, -1.897e-01, 5.593e-02, 8.282e-02, -2.318e-02, 5.524e-02, -1.179e-01, -2.478e-01, -6.803e-02, -8.168e-02, 1.292e-02, -8.958e-03) * s0[y+2][x+0];
	r += M4(-2.918e-01, -1.356e-02, 2.216e-01, -4.816e-01, 2.363e-01, -1.218e-02, -2.550e-01, -3.110e-02, 1.274e-01, 1.960e-01, -2.171e-02, 1.777e-01, -3.352e-01, 3.021e-01, 1.087e-01, 5.419e-01) * s0[y+2][x+1];
	r += M4(1.105e-01, -3.797e-02, -1.284e-01, -1.656e-01, -1.643e-01, -7.630e-03, 6.525e-02, -2.370e-01, -9.513e-02, 8.550e-02, 7.545e-02, -6.086e-03, 1.186e-01, -1.149e-01, 7.636e-02, 2.257e-01) * s0[y+2][x+2];
	r += M4(-3.772e-02, -5.166e-02, -7.215e-02, 2.209e-02, -3.404e-02, -8.892e-04, 8.135e-02, 6.325e-02, 7.147e-02, 1.372e-01, -1.266e-01, -2.348e-01, 2.329e-01, 2.143e-01, -1.478e-01, -1.936e-01) * s1[y+0][x+0];
	r += M4(2.083e-01, 1.138e-01, -5.557e-02, -2.776e-02, 1.970e-01, -2.674e-02, 2.231e-01, 1.477e-01, 1.131e-01, -1.702e-01, -1.518e-01, 1.304e-01, -2.765e-01, 2.323e-01, -1.015e-01, 2.357e-01) * s1[y+0][x+1];
	r += M4(5.124e-02, -6.757e-03, 3.921e-02, 2.515e-02, 5.050e-02, 7.350e-02, 2.820e-01, -2.973e-02, -9.046e-03, -9.828e-02, -1.022e-01, 1.720e-01, 2.193e-02, 1.862e-01, 9.611e-02, 1.968e-01) * s1[y+0][x+2];
	r += M4(-8.959e-02, -1.067e-01, -5.084e-03, -9.695e-02, -8.667e-02, 2.795e-02, -7.754e-02, -1.229e-01, -1.508e-01, -1.100e-01, -2.164e-01, -1.228e-01, 1.735e-01, -2.005e-01, -9.541e-02, -2.607e-01) * s1[y+1][x+0];
	r += M4(6.492e-02, -4.776e-02, 2.138e-01, 1.062e-01, -3.548e-01, -3.698e-01, -1.359e-01, 4.281e-01, 1.761e-01, -4.657e-01, 2.503e-01, 6.810e-03, -3.179e-01, -3.983e-01, 4.180e-01, 3.511e-01) * s1[y+1][x+1];
	r += M4(1.141e-01, -1.745e-01, -1.262e-03, -1.052e-01, 1.066e-01, -2.001e-01, 2.174e-01, 4.166e-01, -5.625e-02, 2.391e-02, 3.075e-01, -1.490e-02, 6.704e-02, 8.494e-02, 3.433e-01, 2.756e-01) * s1[y+1][x+2];
	r += M4(2.499e-01, 1.439e-01, -8.493e-02, -4.460e-01, -2.773e-01, -6.945e-02, 1.608e-01, 4.744e-02, -1.610e-01, -3.610e-01, -3.964e-01, -3.469e-01, -3.292e-02, -9.571e-02, -7.894e-02, -9.544e-02) * s1[y+2][x+0];
	r += M4(4.050e-01, 1.794e-02, 2.704e-01, -1.242e-01, -4.810e-01, -1.947e-01, 9.270e-02, 4.728e-02, 2.881e-01, 5.861e-01, 1.527e-01, 6.135e-02, -2.521e-01, 9.340e-02, 1.934e-03, -5.408e-03) * s1[y+2][x+1];
	r += M4(7.342e-02, -1.366e-02, -4.052e-02, -6.393e-02, -4.066e-02, -4.085e-02, -5.832e-02, 3.981e-01, -8.958e-02, 1.461e-01, -8.359e-02, -5.007e-03, 4.164e-01, 1.095e-01, -2.290e-02, -2.483e-02) * s1[y+2][x+2];
	r += M4(-5.529e-02, -5.290e-02, 9.491e-03, -1.298e-01, -1.356e-02, 5.338e-02, -3.330e-02, -1.212e-01, 7.097e-02, 1.316e-01, -1.144e-01, -1.153e-01, 2.829e-01, -3.376e-01, -7.232e-01, -1.440e-01) * s2[y+0][x+0];
	r += M4(6.616e-02, -2.242e-02, 6.489e-02, 3.805e-02, -4.446e-02, 8.318e-02, 1.311e-01, -5.818e-02, -1.103e-01, -2.347e-01, -1.563e-03, 6.539e-02, 1.695e-01, 1.230e+00, 4.781e-01, -7.743e-01) * s2[y+0][x+1];
	r += M4(2.521e-02, 3.698e-02, 7.878e-02, -5.844e-02, 1.759e-01, 1.469e-02, 1.245e-01, 3.695e-02, 7.914e-02, -2.441e-02, 6.529e-02, 2.269e-01, -1.384e-01, -4.078e-01, -6.333e-01, 1.160e+00) * s2[y+0][x+2];
	r += M4(1.003e-01, 1.056e-01, -1.638e-01, -2.456e-01, 1.820e-01, 1.351e-01, -1.101e-01, -7.592e-02, 1.568e-01, -2.047e-01, 5.246e-02, -1.440e-01, 1.165e-01, 1.988e-01, -1.011e-01, -8.833e-01) * s2[y+1][x+0];
	r += M4(-9.045e-02, 1.978e-01, 1.212e-01, -1.187e-03, -4.201e-02, 3.173e-01, 3.242e-01, -5.333e-02, -3.864e-01, 2.134e-01, -9.677e-02, -8.972e-02, 2.362e-01, 1.167e-01, -3.225e-01, 1.412e+00) * s2[y+1][x+1];
	r += M4(1.608e-03, 1.156e-01, -1.826e-01, 1.097e-02, 2.574e-01, 8.448e-02, -1.087e-01, 3.948e-01, 3.637e-01, 1.743e-01, 3.579e-03, -1.106e-01, -8.093e-01, -1.158e-01, -7.195e-02, -2.016e-01) * s2[y+1][x+2];
	r += M4(3.923e-02, -6.976e-02, -1.627e-01, 3.793e-02, -8.617e-02, 1.399e-02, -1.644e-01, -5.208e-02, -1.314e-01, 1.155e-01, -2.105e-01, -1.511e-01, 3.858e-01, 3.608e-01, 1.441e-01, 3.542e-01) * s2[y+2][x+0];
	r += M4(-2.945e-01, 6.643e-02, 4.517e-03, 2.035e-01, 8.813e-02, 3.986e-02, 2.845e-02, 9.718e-02, 3.495e-01, 8.253e-02, -3.535e-02, 1.699e-01, 3.169e-01, -1.479e-01, 8.276e-01, 5.193e-01) * s2[y+2][x+1];
	r += M4(5.176e-02, -2.897e-02, 7.370e-03, -3.197e-02, 1.515e-01, -1.615e-01, -6.816e-02, 5.320e-02, -2.294e-01, -5.519e-02, 6.554e-05, 3.670e-01, -9.434e-02, -9.115e-01, -3.596e-01, 9.900e-02) * s2[y+2][x+2];
	r += M4(-6.117e-02, 2.980e-02, -3.612e-03, -1.302e-01, -8.908e-02, -3.141e-02, 2.017e-01, -7.594e-02, 1.273e-01, 6.558e-02, -1.867e-01, -6.062e-02, 8.862e-02, -1.530e-01, 7.055e-02, 2.255e-02) * s3[y+0][x+0];
	r += M4(-5.586e-04, -2.931e-02, 1.237e-01, 8.638e-02, -2.535e-01, -3.608e-02, 3.932e-02, 2.535e-03, 1.002e-01, 1.588e-01, -8.685e-02, 1.154e-01, 4.004e-02, 1.678e-03, -1.558e-01, 4.906e-02) * s3[y+0][x+1];
	r += M4(1.550e-02, 2.857e-02, 3.329e-02, -4.782e-02, -1.401e-02, 1.047e-01, 2.320e-01, -2.360e-01, 5.798e-02, 9.100e-02, -7.032e-03, -6.379e-02, -1.543e-01, 1.820e-01, -1.096e-01, 2.806e-02) * s3[y+0][x+2];
	r += M4(1.050e-01, 1.860e-01, -1.709e-01, -2.062e-01, 2.985e-01, 3.578e-02, -2.046e-01, -1.834e-01, 2.145e-01, -2.643e-01, -1.191e-01, -1.604e-01, 9.253e-02, 4.855e-02, 1.086e-01, -2.549e-01) * s3[y+1][x+0];
	r += M4(1.770e-02, 4.026e-02, 5.245e-02, 3.608e-02, -2.940e-01, -2.037e-01, 2.092e-01, 9.637e-02, -4.037e-01, 1.233e-01, -5.256e-01, 1.873e-01, -2.561e-01, 1.085e-01, -1.828e-02, 1.079e-01) * s3[y+1][x+1];
	r += M4(-6.545e-02, 8.517e-02, -1.268e-01, -8.099e-02, 1.488e-01, -1.976e-01, -2.343e-02, -1.089e-01, 2.019e-01, 3.126e-02, -2.602e-02, 6.810e-02, 1.055e-01, 1.020e-02, 8.869e-02, 6.236e-02) * s3[y+1][x+2];
	r += M4(8.252e-03, -4.622e-02, -4.765e-02, 6.497e-02, -1.065e-01, 7.428e-02, -1.564e-01, -1.294e-01, -2.116e-01, 2.958e-02, -2.320e-02, -1.235e-02, 3.132e-03, 8.458e-02, 4.708e-02, -1.313e-01) * s3[y+2][x+0];
	r += M4(-2.759e-01, 1.575e-01, -1.185e-02, 7.294e-02, -2.182e-01, -9.011e-02, 1.983e-01, 1.329e-01, 1.693e-01, -1.780e-01, -1.797e-02, -2.997e-01, 2.263e-01, -2.254e-01, -2.645e-02, -2.025e-02) * s3[y+2][x+1];
	r += M4(1.007e-01, -2.377e-02, -4.080e-02, 5.082e-02, 2.354e-01, -1.517e-01, -2.118e-01, -5.744e-02, -2.607e-01, -3.428e-03, -8.533e-02, -3.525e-02, -3.382e-02, -1.064e-01, -1.909e-01, 6.292e-02) * s3[y+2][x+2];
	r += V4(4.473e-02, -9.919e-02, -2.985e-02, 6.413e-03);
	return vec4(r);
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = in_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
			s2[ay][ax] = l1(x - 1, y - 1);
			s1[ay][ax] = -max(-s0[ay][ax], V4(0.0));
			s0[ay][ax] = max(s0[ay][ax], V4(0.0));
			s3[ay][ax] = -max(-s2[ay][ax], V4(0.0));
			s2[ay][ax] = max(s2[ay][ax], V4(0.0));
		}
	}
	barrier();
	vec4 r0 = f0(xy.x, xy.y);
	vec4 r1 = f1(xy.x, xy.y);
	imageStore(out_image, opos + ivec2(0, 0), r0);
	imageStore(out_image, opos + ivec2(1, 0), r1);
}


//!DESC CuNNy-6x8C-RCAS-DS-conv2
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv1
//!BIND LUMA
//!SAVE conv2
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
	#define V4 f16vec4
	#define M4 f16mat4
	#define F float16_t
#else
	#define V4 vec4
	#define M4 mat4
	#define F float
#endif
#define l0(x, y) V4(texelFetch(conv1_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv1_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 s0[10][10];
shared V4 s1[10][10];
shared V4 s2[10][10];
shared V4 s3[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += M4(1.926e-01, -1.097e+00, 5.232e-01, -1.012e+00, 1.836e-02, 1.214e-01, -2.102e-02, 1.524e-02, -1.564e-02, -8.872e-02, -1.604e-02, -1.079e-01, -1.526e-02, 6.459e-02, -2.898e-02, 7.887e-02) * s0[y+0][x+0];
	r += M4(4.456e-01, -4.241e-01, 1.783e+00, -3.700e-01, 1.351e-01, 1.928e-01, 3.368e-01, 9.686e-03, -9.554e-01, -1.663e-02, 1.881e-01, -2.788e-01, -1.567e-01, -2.150e-01, -1.496e-01, 2.240e-02) * s0[y+0][x+1];
	r += M4(9.598e-01, -1.414e+00, -9.138e-01, 5.391e-02, 9.267e-02, -4.266e-02, 3.171e-01, -3.959e-03, -1.121e+00, -1.001e+00, -3.408e-01, 3.388e-01, 7.457e-02, 1.125e-01, -7.639e-02, 8.795e-02) * s0[y+0][x+2];
	r += M4(3.108e-01, -1.230e+00, -5.707e-01, -1.129e+00, -7.962e-02, -1.440e-02, -9.149e-03, -1.296e-01, -2.174e-01, -3.100e-01, -1.303e-01, -3.386e-03, 4.293e-02, -6.999e-02, 3.227e-02, -6.298e-02) * s0[y+1][x+0];
	r += M4(5.933e-01, -1.571e+00, 4.950e-01, -1.238e+00, 2.023e-01, -3.362e-01, 3.318e-01, -3.076e-01, -9.544e-01, 1.320e-02, 3.226e-01, -3.622e-01, -8.961e-02, 9.942e-02, -2.250e-01, 7.812e-02) * s0[y+1][x+1];
	r += M4(6.370e-01, -1.491e+00, 1.800e-01, -7.886e-02, -4.899e-02, -2.587e-01, -1.179e-01, 9.522e-02, -3.889e+00, -8.776e-01, -1.286e+00, -9.425e-01, 1.645e-01, 4.973e-02, 6.096e-02, 1.111e-01) * s0[y+1][x+2];
	r += M4(-2.179e-02, -1.355e-01, -9.892e-01, -1.843e-01, 9.497e-03, 6.316e-02, -6.987e-02, 4.187e-02, -2.132e-01, 5.292e-02, -4.972e-02, 2.025e-01, 9.923e-02, -8.050e-02, 5.681e-02, -5.727e-02) * s0[y+2][x+0];
	r += M4(-3.030e-02, -3.138e-01, -7.807e-02, -4.251e-01, -1.777e-02, 1.899e-02, 5.133e-02, 8.009e-03, 3.570e-01, -9.849e-02, -2.908e-01, 9.229e-02, 1.435e-01, -1.233e-01, -1.434e-01, -5.375e-03) * s0[y+2][x+1];
	r += M4(-2.067e-01, -1.226e+00, -1.019e-01, 1.355e-01, -3.877e-02, 8.703e-02, 1.203e-01, -9.446e-02, -4.431e-01, -7.285e-01, -1.003e+00, -2.009e-01, -2.449e-02, -1.945e-01, -2.670e-01, 1.100e-02) * s0[y+2][x+2];
	r += M4(-2.005e-02, -7.541e-02, -3.365e-02, -2.118e-02, 4.162e-02, 1.120e-02, -3.899e-02, -7.541e-02, -4.805e-03, 2.026e-02, -7.087e-02, 4.863e-02, 8.613e-02, 9.266e-02, 4.954e-02, 9.798e-03) * s1[y+0][x+0];
	r += M4(-2.153e-03, 2.020e-02, -4.836e-02, -2.779e-03, -1.237e-01, 1.770e-01, -9.753e-02, 7.931e-02, 7.738e-02, -3.797e-02, 7.990e-02, 4.923e-02, -2.533e-02, 5.013e-02, -1.028e-02, 1.446e-01) * s1[y+0][x+1];
	r += M4(-8.037e-03, 4.652e-02, 1.147e-02, 4.843e-03, -1.764e-01, -1.979e-01, -6.351e-02, 1.540e-01, -9.653e-02, -5.464e-02, 5.026e-02, -8.637e-02, -1.324e-02, 1.976e-01, 8.851e-02, 1.419e-01) * s1[y+0][x+2];
	r += M4(-6.847e-02, 4.252e-02, -2.544e-02, -3.570e-02, 3.315e-02, -1.046e-01, -1.645e-01, 8.495e-02, 1.462e-01, 1.210e-01, 6.776e-02, 4.205e-02, -7.376e-02, -2.246e-01, 4.235e-02, -1.201e-02) * s1[y+1][x+0];
	r += M4(4.363e-02, 8.729e-03, 3.114e-01, -3.578e-03, -1.390e-01, 1.760e-01, -1.780e-01, 3.047e-01, -7.542e-02, -9.578e-02, 4.063e-02, -6.516e-02, 2.165e-01, -2.187e-01, 3.353e-01, 2.689e-01) * s1[y+1][x+1];
	r += M4(-1.570e-03, 4.790e-02, 5.464e-02, 1.398e-01, -5.096e-02, -8.587e-02, -5.349e-01, 1.298e-01, 7.971e-02, 1.680e-01, 8.829e-02, -9.062e-02, 2.086e-01, -2.714e-01, 2.070e-01, 2.263e-01) * s1[y+1][x+2];
	r += M4(1.200e-01, 3.519e-02, 3.983e-02, -9.783e-02, 9.299e-02, 3.713e-02, -4.421e-02, 5.790e-02, -1.148e-01, -5.433e-02, 1.284e-01, -5.610e-02, 9.885e-02, -1.725e-01, 1.471e-01, -1.406e-01) * s1[y+2][x+0];
	r += M4(-6.420e-02, 2.185e-02, -9.986e-02, -8.784e-02, -3.557e-02, -2.453e-03, -1.057e-01, 1.290e-01, -6.712e-02, 1.374e-01, -4.833e-02, 3.817e-02, 2.319e-01, -1.695e-01, 3.452e-02, -3.158e-01) * s1[y+2][x+1];
	r += M4(3.033e-02, -7.370e-02, -1.294e-01, -1.158e-01, 3.038e-02, 3.532e-02, 5.237e-02, -6.221e-02, 3.314e-03, -1.640e-01, -7.573e-02, -5.068e-02, -3.353e-02, 1.499e-02, 1.559e-01, -1.394e-01) * s1[y+2][x+2];
	r += M4(2.763e-02, -5.606e-02, 2.217e-01, -8.548e-02, -5.643e-02, -6.763e-02, -6.191e-02, -1.212e-01, -2.308e-02, -1.837e-02, -1.525e-01, 7.197e-02, 3.163e-02, -8.207e-02, -2.747e-01, 3.703e-02) * s2[y+0][x+0];
	r += M4(1.144e-01, 1.165e-01, 2.100e-01, -5.138e-02, -8.014e-02, 9.277e-03, -6.083e-02, 9.783e-02, 4.457e-02, 9.760e-02, -9.599e-02, 7.744e-02, -2.750e-01, -5.008e-02, 2.239e-01, -3.073e-01) * s2[y+0][x+1];
	r += M4(-1.305e-01, -2.104e-03, -1.979e-01, 1.133e-01, -6.620e-02, -4.193e-02, -8.790e-02, 8.862e-02, -7.909e-02, -5.866e-02, -8.426e-02, -1.260e-01, 4.069e-02, 5.329e-02, 3.793e-02, 3.483e-03) * s2[y+0][x+2];
	r += M4(9.656e-02, 1.924e-01, 1.073e-01, 2.033e-01, -3.507e-02, -5.826e-02, 6.327e-02, -4.800e-02, 1.107e-01, 5.312e-02, -2.616e-01, 1.680e-01, -2.364e-01, 1.432e-01, 1.307e-01, 2.247e-01) * s2[y+1][x+0];
	r += M4(-8.039e-02, -3.965e-01, -6.125e-01, -3.859e-01, -2.001e-01, 4.085e-01, -5.540e-02, 2.920e-01, 5.690e-02, 8.712e-02, -6.981e-01, 3.772e-01, -2.501e-01, 1.314e-01, 4.891e-02, 2.396e-01) * s2[y+1][x+1];
	r += M4(3.231e-02, -1.716e-01, -2.814e-02, -2.339e-01, -1.490e-01, 1.882e-01, -2.589e-02, 2.644e-01, 2.139e-02, 1.469e-03, -2.922e-02, -1.030e-01, -4.268e-02, 7.918e-02, 4.756e-02, 5.275e-02) * s2[y+1][x+2];
	r += M4(-4.904e-02, -3.336e-02, -2.972e-02, 1.238e-01, 6.536e-02, -1.804e-01, -3.681e-02, -1.096e-01, 1.457e-01, -1.017e-01, -3.292e-01, 7.645e-02, -8.079e-02, -5.413e-02, -1.158e-01, 1.651e-01) * s2[y+2][x+0];
	r += M4(1.700e-02, 6.180e-02, -9.631e-02, 1.852e-02, 6.102e-02, -2.235e-01, -8.750e-02, -1.857e-01, -2.135e-01, -1.110e-01, -2.367e-01, -2.959e-01, 2.789e-03, 1.976e-01, -6.755e-02, -1.050e-01) * s2[y+2][x+1];
	r += M4(8.506e-02, -1.101e-01, -3.120e-02, 3.743e-02, 4.543e-02, -1.004e-01, -7.935e-02, -7.393e-02, -4.011e-02, 1.919e-01, -3.353e-03, 3.838e-01, -4.359e-03, -3.154e-02, 2.979e-03, -3.399e-02) * s2[y+2][x+2];
	r += M4(-7.886e-02, -6.584e-02, -1.624e-02, -9.637e-02, 6.720e-02, 1.974e-02, -6.486e-02, -1.798e-02, 3.579e-03, 6.011e-02, -3.415e-03, -3.043e-02, 1.427e-01, 1.690e-01, -3.035e-02, -6.817e-03) * s3[y+0][x+0];
	r += M4(4.116e-01, 1.973e-01, 2.433e-01, 1.646e-01, -5.950e-02, 1.039e-01, 2.831e-02, 2.726e-02, -1.789e-02, -1.800e-01, 9.465e-03, -6.390e-02, 1.158e-01, -1.054e-01, -5.748e-02, 3.280e-02) * s3[y+0][x+1];
	r += M4(-3.189e-02, -5.734e-02, -1.481e-01, -5.732e-02, 1.018e-01, -1.138e-01, -1.879e-01, 1.294e-01, -2.589e-02, 1.085e-02, 1.768e-02, -3.011e-02, 9.782e-02, 1.487e-01, -2.149e-04, 3.804e-02) * s3[y+0][x+2];
	r += M4(-1.138e-01, 1.314e-01, 1.899e-01, 4.413e-01, -1.150e-01, -2.490e-02, -3.360e-02, -5.394e-02, 1.449e-01, 2.370e-02, 5.529e-02, 3.388e-02, -1.890e-01, 2.252e-01, 4.274e-02, 1.188e-01) * s3[y+1][x+0];
	r += M4(-1.790e-01, -3.220e-02, -3.828e-01, 5.395e-03, -1.142e-01, 2.940e-01, 1.669e-01, 2.530e-01, -2.795e-01, -2.955e-01, -1.479e-01, -1.480e-01, 1.125e-01, 8.458e-02, -1.471e-01, -6.076e-03) * s3[y+1][x+1];
	r += M4(9.726e-02, 9.350e-02, 7.739e-02, -1.390e-01, 2.028e-01, 1.020e-01, -2.245e-01, 2.408e-01, -9.176e-02, -7.517e-03, 2.265e-01, -5.657e-02, -2.706e-02, 3.283e-02, 7.326e-02, -9.614e-02) * s3[y+1][x+2];
	r += M4(-1.314e-01, -4.827e-02, -4.524e-02, 1.736e-01, 2.644e-02, -1.545e-01, -5.960e-02, -9.034e-02, 5.123e-02, -1.631e-01, 1.871e-01, 4.941e-02, -1.823e-02, -1.576e-02, -1.852e-01, 1.704e-01) * s3[y+2][x+0];
	r += M4(4.979e-02, 8.620e-02, -7.139e-02, 1.531e-01, 1.662e-01, -1.118e-01, -8.403e-02, -3.115e-01, -2.587e-01, -1.791e-01, 3.368e-02, 9.727e-02, -3.376e-02, 2.581e-01, -6.873e-02, -3.612e-02) * s3[y+2][x+1];
	r += M4(1.071e-02, 4.531e-02, -4.728e-03, 5.464e-02, 1.124e-01, -9.953e-02, -2.508e-02, 7.985e-02, 8.840e-02, 8.533e-03, 5.298e-02, 3.929e-02, -5.453e-02, -6.562e-02, -1.007e-01, -1.047e-02) * s3[y+2][x+2];
	r += V4(6.480e-02, 9.292e-03, 3.235e-02, -2.773e-02);
	return vec4(r);
}
vec4 f1(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-4.917e-01, 2.419e+00, -7.660e-01, 4.620e-01, -5.931e-02, 4.418e-02, 9.553e-02, -4.445e-02, 3.101e-02, 2.403e-01, -1.180e-01, -2.768e-01, -2.094e-02, -6.275e-02, 3.547e-02, 8.273e-02) * s0[y+0][x+0];
	r += M4(1.318e+00, -2.280e+00, -1.882e+00, 1.445e+00, 3.966e-02, 6.264e-02, 2.043e-01, 4.596e-02, 2.231e-01, 4.208e-01, -9.163e-03, -1.036e-01, -8.590e-02, -5.219e-02, 5.211e-02, -7.000e-02) * s0[y+0][x+1];
	r += M4(2.745e-01, 3.766e-01, -6.292e-01, 1.459e+00, 1.013e-01, -5.510e-02, 5.391e-01, 1.560e-01, -3.811e-02, 7.619e-01, 1.241e+00, 4.311e-01, -2.122e-02, 2.497e-02, -3.822e-02, -9.779e-02) * s0[y+0][x+2];
	r += M4(-5.102e-02, 2.008e+00, -2.195e-01, 9.800e-01, 4.233e-02, -3.859e-02, -3.806e-02, 7.974e-02, -2.985e-01, 9.335e-02, 3.604e-02, 2.435e-01, 8.369e-02, -7.854e-03, -5.767e-02, 6.155e-02) * s0[y+1][x+0];
	r += M4(-1.318e+00, 3.106e-01, -1.627e-01, 1.380e+00, -1.851e-01, -8.261e-02, 3.137e-02, 3.291e-01, 5.257e-01, 1.301e+00, -4.588e-02, 4.133e-01, 1.763e-01, -2.306e-01, -2.707e-01, -2.406e-02) * s0[y+1][x+1];
	r += M4(1.461e-01, 9.882e-01, -1.720e-01, 9.282e-01, -1.729e-01, 1.764e-01, 2.673e-01, -7.405e-02, 7.594e-02, 2.226e+00, 1.621e+00, -2.390e+00, 1.322e-01, 8.315e-03, 1.262e-02, 1.269e-01) * s0[y+1][x+2];
	r += M4(5.605e-01, 3.909e-01, -2.451e-01, 1.688e-01, -1.664e-02, 5.304e-02, -7.177e-02, -3.305e-02, 8.823e-02, -2.248e-01, -5.601e-02, -5.156e-02, -4.656e-02, 5.421e-02, 1.957e-02, 2.592e-02) * s0[y+2][x+0];
	r += M4(-4.287e-01, 5.623e-01, -2.675e-01, 3.871e-01, -6.789e-02, -9.888e-02, 9.318e-02, -7.173e-05, 1.114e-01, 5.095e-01, 4.672e-03, -3.963e-01, -1.400e-01, 4.159e-02, 2.729e-02, 5.150e-03) * s0[y+2][x+1];
	r += M4(7.048e-01, 6.144e-01, -7.579e-03, 3.772e-01, 4.341e-02, -3.011e-03, 2.033e-01, -3.984e-02, 9.539e-01, -6.146e-01, -4.866e-01, 4.778e-02, 3.918e-02, -4.362e-02, 1.070e-01, -7.534e-02) * s0[y+2][x+2];
	r += M4(-2.728e-02, -9.974e-02, -9.925e-02, 3.800e-02, -5.342e-02, -1.037e-02, 1.339e-02, 1.069e-01, 7.470e-02, 5.711e-03, 3.028e-02, -3.083e-02, 2.414e-02, -1.790e-02, -3.567e-02, 1.498e-01) * s1[y+0][x+0];
	r += M4(5.392e-02, 2.228e-01, -8.497e-02, -8.831e-02, 9.455e-02, -3.014e-01, -8.127e-02, 2.801e-01, -1.980e-01, -1.583e-01, 1.411e-01, 1.457e-02, -1.209e-01, -1.137e-01, 1.516e-01, 1.165e-01) * s1[y+0][x+1];
	r += M4(-4.407e-02, -7.712e-02, 2.048e-01, -2.939e-02, 7.059e-02, -2.367e-01, -1.125e-02, 2.689e-01, -7.972e-02, -2.921e-02, -8.914e-02, 7.591e-02, -1.343e-01, 1.284e-01, -1.895e-01, -3.684e-02) * s1[y+0][x+2];
	r += M4(-7.592e-02, 4.536e-02, 3.778e-02, -1.145e-01, 1.066e-02, -2.604e-01, 1.162e-01, 1.284e-01, -1.530e-02, 8.317e-02, 6.751e-02, 4.781e-03, 4.741e-02, -2.497e-01, -1.322e-01, 9.301e-02) * s1[y+1][x+0];
	r += M4(2.292e-01, -9.696e-02, -4.173e-02, 6.748e-02, -4.561e-02, -3.857e-01, 4.545e-02, 2.267e-01, 1.929e-01, 8.299e-02, 1.251e-03, -7.326e-02, -1.178e-01, 1.646e-02, -9.234e-02, 7.516e-03) * s1[y+1][x+1];
	r += M4(-4.613e-03, 3.601e-02, 3.320e-02, -3.594e-02, -2.221e-01, -2.126e-02, -9.855e-02, -2.067e-01, 9.044e-02, 2.940e-02, 1.994e-02, -1.382e-01, -4.191e-02, 1.180e-01, 9.118e-02, 9.011e-02) * s1[y+1][x+2];
	r += M4(3.850e-02, -2.391e-02, 2.260e-02, 2.020e-02, -5.449e-02, -4.088e-02, -1.794e-02, 4.954e-02, -1.186e-01, 5.565e-02, 4.410e-03, 4.849e-02, -5.201e-02, -6.960e-02, -8.798e-02, -9.906e-02) * s1[y+2][x+0];
	r += M4(-3.015e-02, -5.257e-02, -1.727e-02, 1.254e-02, -1.026e-01, -1.546e-01, -4.474e-02, 1.001e-01, 1.104e-01, -8.222e-02, -6.860e-02, -1.022e-01, 6.978e-02, -4.063e-02, 6.270e-02, 2.152e-01) * s1[y+2][x+1];
	r += M4(1.235e-02, 9.916e-03, -6.374e-02, 8.025e-02, 3.082e-02, 4.927e-02, -4.185e-03, -1.026e-01, 4.550e-02, -2.070e-02, -3.963e-02, 4.230e-02, 1.274e-02, 1.267e-01, 4.789e-02, 1.789e-01) * s1[y+2][x+2];
	r += M4(2.925e-02, 1.304e-01, 5.211e-02, -1.024e-01, -7.503e-03, -8.542e-02, -1.269e-01, 6.638e-02, 1.268e-02, 1.314e-02, 1.976e-02, 1.591e-02, 1.628e-02, -8.071e-02, 1.690e-02, 1.239e-01) * s2[y+0][x+0];
	r += M4(3.454e-01, -1.424e-01, -1.614e-01, 9.173e-02, -5.290e-02, 1.872e-01, 1.508e-01, 5.028e-02, -7.176e-02, 4.510e-02, 7.908e-02, -2.229e-01, -2.555e-03, 1.557e-01, 1.588e-01, -9.473e-02) * s2[y+0][x+1];
	r += M4(-1.073e-01, 2.173e-01, 4.550e-02, 7.087e-02, -1.106e-01, -8.619e-02, 1.513e-01, 6.841e-02, 1.003e-02, -2.431e-02, 7.251e-02, -5.138e-02, 2.845e-02, 3.058e-02, -7.792e-02, -5.186e-02) * s2[y+0][x+2];
	r += M4(1.372e-01, -1.284e-01, 3.962e-02, 5.641e-02, 4.512e-02, -8.034e-03, -1.896e-01, 1.175e-01, -2.835e-02, -1.288e-01, 9.533e-02, 2.620e-01, 7.659e-02, -1.389e-01, -2.125e-01, 1.004e-01) * s2[y+1][x+0];
	r += M4(-7.769e-01, 1.234e-01, -2.439e-01, -3.595e-02, -1.103e-01, -1.722e-01, -1.371e-02, -2.801e-01, 2.448e-03, 3.499e-01, -5.191e-02, -1.880e-01, 3.465e-01, -1.491e-01, -1.880e-01, 1.327e-01) * s2[y+1][x+1];
	r += M4(6.838e-02, -9.320e-02, -3.915e-02, 6.530e-02, 4.148e-03, 1.484e-01, 1.814e-01, -2.868e-01, 1.643e-01, -1.276e-01, -9.732e-02, -9.746e-02, -3.436e-02, 2.753e-02, -1.786e-01, 5.746e-02) * s2[y+1][x+2];
	r += M4(-1.285e-01, -1.743e-01, 3.603e-02, -6.343e-02, 1.471e-02, -4.687e-02, -4.448e-03, 2.994e-02, -1.626e-01, -5.877e-02, -4.555e-02, 3.708e-02, 1.733e-02, -1.614e-01, -9.502e-02, -4.564e-02) * s2[y+2][x+0];
	r += M4(4.605e-03, -4.236e-02, -1.013e-01, -1.107e-01, 1.106e-01, -1.286e-01, 1.177e-01, 2.871e-02, 1.268e-01, 5.285e-02, -4.034e-02, -1.911e-01, -5.645e-03, -1.522e-01, -1.815e-01, 1.606e-02) * s2[y+2][x+1];
	r += M4(1.512e-01, 1.948e-02, -2.098e-01, -4.683e-03, 1.849e-01, -9.371e-02, 1.210e-01, 2.921e-02, -3.368e-01, -1.066e-01, 2.842e-01, 3.433e-01, 2.506e-02, 1.441e-01, -1.340e-01, 4.287e-02) * s2[y+2][x+2];
	r += M4(4.104e-02, -5.390e-02, 3.825e-03, -2.537e-01, -1.855e-02, -3.619e-02, -5.283e-02, 2.100e-02, 7.232e-02, 6.370e-02, 4.818e-03, 6.376e-02, 2.886e-02, 1.731e-01, 8.763e-02, -1.290e-01) * s3[y+0][x+0];
	r += M4(2.944e-01, 1.884e-01, 2.234e-01, 6.421e-02, 8.768e-04, 1.069e-01, 8.395e-03, -4.340e-02, -6.700e-02, -1.404e-01, 5.294e-02, 6.671e-02, -8.444e-03, 6.800e-02, 3.142e-01, -1.529e-01) * s3[y+0][x+1];
	r += M4(8.672e-02, 1.636e-01, 6.086e-02, -8.725e-02, -7.892e-02, -1.339e-01, 9.754e-02, 1.108e-01, 4.753e-02, 1.217e-01, 4.965e-03, -2.432e-02, -5.678e-03, 1.779e-02, -1.798e-02, -6.855e-02) * s3[y+0][x+2];
	r += M4(6.951e-02, -1.489e-01, -1.373e-01, -1.404e-01, 9.306e-02, -1.895e-02, -9.709e-02, -9.754e-03, -4.146e-03, -2.122e-01, -3.202e-03, 1.620e-01, 9.558e-02, 1.315e-01, 7.260e-02, 5.600e-02) * s3[y+1][x+0];
	r += M4(-2.855e-01, 3.848e-02, 2.323e-01, -2.442e-01, -8.814e-02, -2.153e-01, -2.396e-02, -1.649e-01, -5.069e-01, 1.057e-01, 9.933e-02, -1.470e-01, 9.307e-02, -4.761e-01, -2.422e-01, 9.909e-02) * s3[y+1][x+1];
	r += M4(2.712e-03, -1.640e-01, -1.330e-01, 1.047e-01, -2.682e-01, 3.600e-02, 6.024e-02, -2.843e-02, 1.179e-01, -1.889e-01, -3.090e-01, 1.004e-01, 2.136e-01, 9.732e-02, -9.001e-02, -1.384e-01) * s3[y+1][x+2];
	r += M4(-3.702e-02, -6.768e-02, -7.480e-02, -9.521e-02, 6.206e-02, 9.646e-03, 2.358e-02, -5.983e-02, -1.396e-01, 9.268e-02, -2.922e-03, 2.180e-02, -1.355e-02, -6.484e-02, 7.595e-02, -5.590e-02) * s3[y+2][x+0];
	r += M4(1.262e-01, 7.584e-02, 3.483e-02, -1.453e-01, 2.738e-01, -1.614e-02, 9.051e-02, 4.474e-02, -2.063e-02, 1.520e-01, -1.055e-02, -9.563e-02, -4.769e-02, -1.209e-02, -6.988e-02, -1.004e-02) * s3[y+2][x+1];
	r += M4(3.906e-02, 1.091e-01, -4.445e-03, -2.692e-02, 2.769e-01, 4.247e-02, 7.729e-02, 1.011e-01, -2.817e-01, 1.046e-02, 6.670e-02, 5.499e-02, 1.044e-01, 2.567e-02, -5.422e-02, -4.773e-02) * s3[y+2][x+2];
	r += V4(7.308e-02, -6.364e-02, 2.400e-03, -4.660e-02);
	return vec4(r);
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv1_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
			s2[ay][ax] = l1(x - 1, y - 1);
			s1[ay][ax] = -max(-s0[ay][ax], V4(0.0));
			s0[ay][ax] = max(s0[ay][ax], V4(0.0));
			s3[ay][ax] = -max(-s2[ay][ax], V4(0.0));
			s2[ay][ax] = max(s2[ay][ax], V4(0.0));
		}
	}
	barrier();
	vec4 r0 = f0(xy.x, xy.y);
	vec4 r1 = f1(xy.x, xy.y);
	imageStore(out_image, opos + ivec2(0, 0), r0);
	imageStore(out_image, opos + ivec2(1, 0), r1);
}


//!DESC CuNNy-6x8C-RCAS-DS-conv3
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv2
//!BIND LUMA
//!SAVE conv3
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
	#define V4 f16vec4
	#define M4 f16mat4
	#define F float16_t
#else
	#define V4 vec4
	#define M4 mat4
	#define F float
#endif
#define l0(x, y) V4(texelFetch(conv2_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv2_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 s0[10][10];
shared V4 s1[10][10];
shared V4 s2[10][10];
shared V4 s3[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-2.551e-02, -4.857e-02, -1.262e-01, 4.428e-02, -7.987e-02, 5.021e-02, 9.071e-02, -1.724e-01, -1.036e-01, 3.331e-02, 1.226e-01, -2.588e-01, -5.258e-02, 5.106e-02, 1.890e-01, 8.007e-02) * s0[y+0][x+0];
	r += M4(1.598e-01, 3.072e-02, 1.553e-01, 6.637e-02, -1.272e-01, -1.614e-01, -1.547e-01, -2.273e-01, 8.421e-02, -9.331e-02, 8.574e-02, -3.217e-02, 1.265e-01, 1.547e-01, 5.856e-02, 2.535e-02) * s0[y+0][x+1];
	r += M4(-2.266e-03, -1.576e-02, -1.741e-02, -4.027e-02, 2.167e-03, -2.209e-02, 1.539e-01, 1.672e-01, 1.421e-01, 2.980e-02, -4.903e-02, -2.173e-01, 1.899e-01, -8.794e-03, -1.533e-01, -6.116e-02) * s0[y+0][x+2];
	r += M4(1.975e-02, 6.343e-03, -2.019e-01, -2.592e-02, 3.637e-01, 2.320e-01, 2.115e-01, -2.530e-01, -5.616e-02, 2.225e-01, 1.214e-01, -1.523e-01, 6.730e-02, -2.046e-03, -2.507e-01, -7.405e-03) * s0[y+1][x+0];
	r += M4(-1.931e-01, -2.937e-02, 9.085e-02, -1.003e-01, -5.312e-01, 1.163e-01, 1.346e-01, -1.402e-01, -2.164e-04, -5.763e-02, -4.866e-02, -3.340e-01, -1.946e-02, -8.040e-02, 1.264e-01, 1.297e-01) * s0[y+1][x+1];
	r += M4(-1.399e-01, -2.167e-01, 5.955e-02, 5.395e-02, 9.475e-02, 8.134e-02, 9.922e-02, 1.549e-02, 3.291e-01, 1.870e-01, 8.792e-02, -2.692e-01, -9.728e-02, 4.879e-03, -8.808e-02, 8.382e-02) * s0[y+1][x+2];
	r += M4(1.450e-01, -3.569e-02, -1.787e-01, 3.015e-02, 1.223e-01, 1.033e-01, 9.586e-02, -5.883e-02, 1.114e-01, 1.013e-01, 1.452e-01, -1.291e-01, -5.358e-02, -1.007e-01, -7.611e-02, 7.649e-02) * s0[y+2][x+0];
	r += M4(2.844e-02, -8.243e-02, -5.665e-02, 3.477e-01, 6.493e-02, 6.133e-04, 4.924e-02, 1.191e-02, -8.332e-02, 8.288e-02, 2.217e-01, -3.176e-01, -8.867e-02, 4.673e-02, 1.030e-01, 2.680e-02) * s0[y+2][x+1];
	r += M4(-4.996e-02, -1.332e-02, 2.181e-02, 8.054e-02, 3.780e-02, -1.489e-02, -9.704e-02, 5.327e-03, -4.364e-02, 1.100e-01, 5.334e-02, -2.248e-01, 1.008e-01, -6.792e-02, 6.710e-02, -3.560e-02) * s0[y+2][x+2];
	r += M4(-8.097e-02, 7.455e-02, -1.684e-01, 8.962e-02, -7.152e-02, -7.986e-02, -9.054e-02, 9.011e-02, -4.505e-02, -7.401e-03, 1.748e-01, -5.317e-02, 3.226e-02, -4.432e-02, 4.422e-02, -5.385e-02) * s1[y+0][x+0];
	r += M4(1.596e-01, -4.317e-02, 1.818e-01, 8.801e-02, -6.359e-02, -8.595e-02, -2.180e-01, -1.156e-01, 1.380e-01, 7.730e-02, -6.608e-02, 2.734e-02, 6.716e-02, -2.388e-03, 8.778e-02, 1.431e-01) * s1[y+0][x+1];
	r += M4(-3.881e-02, -1.665e-01, -1.496e-01, -5.799e-02, -5.200e-03, 2.588e-03, 6.153e-02, 1.728e-01, -3.941e-03, -6.139e-02, -2.576e-03, -1.065e-01, 2.678e-02, 7.374e-02, -4.701e-02, -1.245e-01) * s1[y+0][x+2];
	r += M4(3.909e-01, -6.091e-02, -1.748e-01, -6.245e-02, 7.138e-02, -8.676e-02, -1.594e-01, 1.437e-01, 8.647e-02, -2.243e-02, -5.416e-02, -6.760e-02, 8.717e-02, 4.945e-02, -3.816e-02, -1.312e-03) * s1[y+1][x+0];
	r += M4(-3.507e-01, -6.116e-01, -6.589e-02, -1.253e-02, -3.177e-01, 1.413e-01, -1.244e-02, -1.721e-01, -3.333e-01, -2.760e-01, 2.697e-02, -3.076e-01, -3.687e-02, 4.341e-02, -3.805e-02, 2.281e-02) * s1[y+1][x+1];
	r += M4(-2.994e-02, -7.269e-01, 4.710e-02, 1.528e-01, 8.080e-02, -1.323e-01, 6.274e-02, 1.087e-02, 8.256e-02, 1.602e-01, -3.218e-02, -1.255e-02, -1.279e-01, 4.003e-02, -2.316e-02, 1.031e-01) * s1[y+1][x+2];
	r += M4(1.956e-01, 1.197e-02, -3.069e-01, -2.324e-01, 1.017e-01, -5.963e-03, -4.749e-02, 1.152e-01, 4.969e-02, -2.826e-02, -6.099e-02, 3.300e-03, 1.272e-02, -2.567e-02, -4.222e-02, 6.667e-02) * s1[y+2][x+0];
	r += M4(-6.880e-02, 3.861e-02, -2.058e-01, 1.309e-01, -1.337e-02, -5.995e-03, -2.982e-02, -2.403e-03, 4.318e-02, 7.494e-02, 2.383e-02, 1.030e-03, -1.613e-01, -4.842e-02, 6.445e-03, -1.840e-02) * s1[y+2][x+1];
	r += M4(-1.462e-02, -1.273e-01, -1.739e-01, 2.793e-01, -7.391e-03, -9.380e-02, -6.944e-02, 1.465e-01, 1.938e-02, -8.225e-02, -5.882e-02, -1.665e-01, 8.489e-02, 5.244e-02, -2.532e-02, 5.766e-03) * s1[y+2][x+2];
	r += M4(-1.906e-01, -5.421e-02, -2.144e-01, -4.240e-02, 2.450e-02, 8.921e-02, -3.871e-02, -9.582e-02, -1.218e-02, 7.155e-02, -8.468e-03, 1.050e-01, 1.333e-01, -9.251e-02, -1.477e-01, 1.587e-01) * s2[y+0][x+0];
	r += M4(1.541e-02, -1.191e-01, -9.158e-02, 6.077e-02, 4.487e-02, -1.740e-02, -1.290e-01, -1.033e-01, -7.444e-02, 6.773e-02, -6.612e-02, -4.379e-02, -2.123e-01, -7.988e-02, 5.132e-03, -7.236e-02) * s2[y+0][x+1];
	r += M4(-2.502e-02, -4.870e-02, 1.087e-02, 1.139e-01, 1.920e-02, 7.260e-03, 7.345e-02, 4.144e-02, -6.274e-02, 4.166e-02, 1.827e-02, 3.235e-02, 1.088e-01, 5.454e-02, -1.103e-01, 1.468e-02) * s2[y+0][x+2];
	r += M4(-1.793e-01, -1.959e-01, -2.667e-01, -4.339e-02, -1.518e-01, -1.718e-02, 2.744e-01, 3.084e-02, -3.369e-01, -5.499e-02, 2.363e-01, 2.286e-02, 1.585e-01, 7.447e-02, -1.365e-02, 1.005e-01) * s2[y+1][x+0];
	r += M4(-1.942e-01, -3.076e-01, -1.920e-01, 1.111e-01, 1.888e-01, 1.723e-01, 2.122e-01, 2.216e-01, 6.161e-02, 1.429e-01, 5.999e-02, 1.558e-02, -2.935e-01, -5.311e-03, -1.174e-01, -4.668e-04) * s2[y+1][x+1];
	r += M4(-6.531e-02, -2.216e-01, -7.508e-02, 1.947e-01, -1.618e-01, 3.914e-01, 7.550e-02, 9.097e-02, 7.104e-02, 5.050e-02, 7.497e-02, 4.863e-02, -8.388e-02, -1.028e-01, 1.622e-01, 2.933e-02) * s2[y+1][x+2];
	r += M4(-8.323e-02, -7.902e-03, -1.180e-01, -4.400e-02, 2.694e-02, 5.067e-02, -7.289e-02, 2.660e-03, -1.467e-02, 7.705e-02, 1.224e-02, -1.480e-01, -3.135e-02, 9.102e-02, 1.533e-01, 6.142e-02) * s2[y+2][x+0];
	r += M4(2.724e-02, -2.851e-02, -1.943e-01, 1.024e-02, -1.626e-01, -7.952e-02, 1.402e-01, -5.145e-02, -1.955e-02, 1.773e-01, -8.902e-02, -1.304e-02, -6.328e-03, 1.221e-01, -8.925e-02, -1.246e-01) * s2[y+2][x+1];
	r += M4(-2.813e-02, -3.376e-02, -1.088e-02, 9.490e-02, 9.708e-02, 8.327e-04, -4.612e-02, 5.486e-02, -3.376e-02, 3.328e-02, -2.643e-02, -6.730e-02, 8.707e-02, 3.166e-02, 1.011e-01, -1.242e-01) * s2[y+2][x+2];
	r += M4(-4.801e-04, 6.377e-02, 1.437e-01, -1.131e-01, 4.837e-02, 4.979e-02, 2.904e-02, -5.007e-02, -7.718e-02, 1.428e-02, -1.139e-02, 8.620e-02, 9.053e-02, 3.755e-02, -8.989e-02, -3.734e-02) * s3[y+0][x+0];
	r += M4(-3.619e-02, 2.034e-01, -1.978e-01, -1.420e-03, 3.296e-02, -1.287e-01, 3.691e-02, -1.416e-01, -2.167e-06, 5.903e-02, -9.901e-03, -1.323e-01, -1.617e-01, -5.315e-02, -5.731e-02, -1.479e-01) * s3[y+0][x+1];
	r += M4(7.178e-02, 1.769e-01, -1.090e-03, 8.180e-02, -7.301e-02, 1.774e-02, -9.682e-02, -1.626e-02, -6.211e-02, -6.837e-02, -6.872e-02, -3.600e-02, 9.755e-02, -4.693e-02, -5.190e-02, 5.776e-02) * s3[y+0][x+2];
	r += M4(-3.498e-02, 1.071e-01, 2.002e-01, -9.533e-02, -4.273e-02, -1.772e-01, 1.004e-01, 1.250e-01, -4.195e-01, -1.742e-01, 1.405e-01, 6.152e-02, -4.256e-03, 9.693e-02, -7.876e-02, -5.184e-02) * s3[y+1][x+0];
	r += M4(-2.346e-01, -2.180e-01, -2.406e-02, -2.289e-01, 5.162e-01, -2.994e-02, 1.496e-01, 8.043e-02, 2.004e-01, -1.291e-01, -6.262e-02, 4.720e-02, -4.101e-01, -1.713e-01, -1.986e-01, 1.830e-01) * s3[y+1][x+1];
	r += M4(5.680e-02, 2.890e-02, 3.613e-02, 1.322e-02, -3.123e-01, -9.314e-02, 1.269e-01, -1.339e-01, -1.047e-01, -5.983e-02, 1.004e-01, -4.286e-02, -3.337e-02, -3.843e-02, 1.937e-01, 1.765e-02) * s3[y+1][x+2];
	r += M4(-5.211e-02, 9.708e-02, -6.222e-02, -3.227e-02, 9.790e-02, 1.463e-01, -1.495e-01, 7.019e-02, 3.598e-02, 6.096e-02, -7.647e-03, -1.586e-01, -1.766e-01, -3.243e-02, -1.022e-01, 6.482e-02) * s3[y+2][x+0];
	r += M4(4.520e-02, 3.580e-01, -1.084e-01, -9.640e-02, -1.252e-01, -1.793e-01, 2.236e-01, 5.014e-02, 1.162e-01, 3.528e-02, 5.582e-04, -1.236e-01, 2.581e-02, 2.005e-01, -9.730e-02, -2.301e-02) * s3[y+2][x+1];
	r += M4(-3.503e-02, 5.262e-02, -5.055e-02, -8.335e-03, -1.493e-01, -1.089e-01, 1.293e-01, 9.992e-02, -1.933e-01, 3.001e-02, -6.840e-02, -1.770e-01, 1.508e-01, -1.631e-01, -1.711e-02, -2.133e-02) * s3[y+2][x+2];
	r += V4(-1.593e-02, 3.072e-02, 3.332e-02, -4.996e-02);
	return vec4(r);
}
vec4 f1(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-1.342e-02, 3.450e-02, -1.077e-01, 1.890e-02, -1.326e-01, 5.714e-02, -7.143e-02, -3.300e-02, 1.851e-02, 2.083e-01, -5.406e-02, -6.234e-02, 3.272e-02, 9.426e-02, 3.082e-04, -8.743e-02) * s0[y+0][x+0];
	r += M4(-1.972e-02, 1.109e-01, -1.372e-02, 4.689e-02, -1.332e-01, -8.770e-02, -1.658e-01, 5.943e-02, 1.501e-01, -1.035e-02, -1.429e-01, 2.009e-01, -1.870e-01, -4.575e-02, -3.947e-02, -9.656e-03) * s0[y+0][x+1];
	r += M4(-2.352e-02, -2.313e-02, 1.247e-01, -6.995e-02, 2.823e-02, 1.398e-01, 1.169e-02, 6.888e-02, 2.614e-03, 7.949e-02, -1.602e-01, 9.359e-02, -5.206e-02, -5.958e-02, -2.035e-01, -3.576e-02) * s0[y+0][x+2];
	r += M4(-1.041e-01, -1.401e-01, 8.009e-02, 8.290e-02, 1.063e-01, 3.499e-01, 4.335e-02, -1.377e-01, 5.732e-02, -8.398e-03, -1.475e-02, -1.263e-01, -1.208e-01, -1.504e-01, 1.166e-01, 4.013e-03) * s0[y+1][x+0];
	r += M4(-8.581e-02, -1.680e-01, -2.952e-01, -1.174e-01, 2.490e-01, 1.980e-01, 7.617e-03, -3.758e-01, -2.423e-01, 2.646e-01, 8.707e-02, -2.560e-01, -1.864e-01, -5.415e-03, 4.873e-01, -3.259e-01) * s0[y+1][x+1];
	r += M4(5.505e-02, -2.001e-02, -3.899e-02, 5.378e-02, 2.887e-02, -1.140e-02, -2.150e-01, -3.488e-01, -1.144e-01, 2.066e-01, -3.923e-02, -8.289e-03, -1.926e-01, 1.062e-01, -1.502e-01, -2.971e-02) * s0[y+1][x+2];
	r += M4(-2.539e-02, 3.678e-02, -8.826e-02, 6.595e-04, 3.076e-02, -5.783e-02, -7.840e-02, -5.221e-02, -4.565e-02, 5.448e-02, 6.909e-02, -5.117e-02, 1.103e-01, 3.761e-02, 6.321e-02, 3.910e-02) * s0[y+2][x+0];
	r += M4(6.518e-02, 2.986e-02, -2.247e-01, 6.606e-03, -3.789e-02, -2.258e-02, -2.401e-01, 2.309e-02, -1.715e-02, 3.579e-01, 1.259e-01, 8.550e-03, -4.653e-02, -6.983e-04, 4.194e-02, 2.198e-03) * s0[y+2][x+1];
	r += M4(2.378e-02, -6.996e-02, -8.462e-03, 1.077e-01, 7.495e-02, 1.456e-01, 6.235e-03, 3.639e-02, 8.070e-02, -9.043e-03, 5.671e-03, -1.425e-02, -5.810e-03, 1.067e-01, 1.526e-01, -7.576e-02) * s0[y+2][x+2];
	r += M4(2.157e-01, 1.050e-01, -2.110e-02, -8.075e-02, -1.467e-02, -1.655e-01, 1.140e-01, 1.627e-01, -5.473e-02, -4.779e-02, 9.286e-03, -1.873e-02, -1.776e-02, 8.043e-02, 1.659e-03, -3.995e-02) * s1[y+0][x+0];
	r += M4(-5.797e-02, -1.004e-01, -5.365e-02, -2.440e-01, 5.305e-02, -1.870e-01, 5.080e-02, -7.304e-02, -5.233e-02, 4.963e-02, -2.170e-01, 1.021e-01, 5.442e-02, 1.795e-01, -2.333e-01, 9.205e-02) * s1[y+0][x+1];
	r += M4(6.527e-02, 1.207e-01, -1.014e-01, -4.746e-01, 1.035e-01, -2.276e-02, 3.526e-02, 6.687e-03, 1.658e-02, -3.986e-02, -1.382e-03, 1.912e-02, 6.718e-03, -1.559e-02, -1.854e-03, 1.476e-01) * s1[y+0][x+2];
	r += M4(-4.452e-02, -2.605e-01, -1.481e-03, -1.377e-01, 9.808e-02, 1.133e-01, 2.485e-02, 7.992e-02, 1.587e-01, -1.291e-01, 1.286e-01, -2.572e-02, -1.052e-01, -5.304e-02, 7.333e-02, -1.177e-01) * s1[y+1][x+0];
	r += M4(-3.840e-01, -5.405e-01, -4.402e-01, -2.276e-01, 1.129e-02, 3.995e-01, 2.709e-01, -2.383e-01, -1.968e-01, -5.491e-02, 1.411e-02, -2.182e-01, -6.062e-02, 1.407e-02, 2.910e-01, -7.578e-02) * s1[y+1][x+1];
	r += M4(1.333e-01, 4.112e-01, -3.931e-02, -3.643e-01, -2.917e-02, 6.845e-03, 5.366e-02, -1.763e-01, -1.255e-01, 1.093e-01, -5.028e-02, 7.837e-02, 8.931e-02, 1.361e-01, -1.067e-01, 1.926e-01) * s1[y+1][x+2];
	r += M4(5.500e-02, 2.356e-01, 1.973e-01, -1.274e-01, 4.478e-02, -2.458e-01, 1.075e-01, -1.480e-03, -3.577e-02, -1.109e-02, -5.354e-03, -3.079e-02, 6.738e-03, 8.431e-02, 1.032e-01, 3.162e-02) * s1[y+2][x+0];
	r += M4(1.450e-01, -1.131e-01, -2.581e-01, -3.359e-01, -1.487e-01, 1.317e-01, 1.652e-01, -9.740e-03, 3.830e-02, -7.595e-02, -1.842e-02, 2.913e-02, -4.429e-02, 4.799e-02, -3.662e-02, -1.619e-03) * s1[y+2][x+1];
	r += M4(-1.468e-03, -9.225e-02, 6.875e-02, -3.839e-03, 1.394e-02, 4.145e-02, -1.083e-01, -1.885e-02, 1.191e-02, -2.950e-02, -6.530e-02, -5.846e-03, 6.602e-02, 2.803e-02, 2.341e-02, -3.448e-02) * s1[y+2][x+2];
	r += M4(6.672e-02, -8.776e-02, -1.548e-01, 1.342e-03, -1.296e-01, -1.137e-01, 2.016e-02, 2.745e-03, 2.242e-02, -3.303e-02, 1.101e-01, -5.382e-02, -7.718e-02, -2.886e-02, -6.202e-02, 5.193e-02) * s2[y+0][x+0];
	r += M4(2.178e-01, 2.114e-01, -1.773e-01, 2.274e-01, -9.725e-02, -1.178e-01, 4.811e-02, -1.355e-01, 1.136e-01, -1.524e-03, 3.057e-02, 2.435e-02, -1.415e-01, -6.332e-02, 2.241e-02, 1.713e-02) * s2[y+0][x+1];
	r += M4(5.707e-02, -1.052e-01, 2.487e-01, 1.090e-01, -1.484e-01, -8.745e-02, 5.380e-02, -9.104e-02, 6.125e-02, 3.129e-02, 6.087e-02, 2.503e-02, -1.238e-01, -1.044e-01, 6.864e-02, -4.988e-02) * s2[y+0][x+2];
	r += M4(-2.857e-02, -3.384e-01, 4.122e-02, 6.591e-02, 2.224e-03, 1.421e-01, -1.368e-02, 5.141e-02, 1.943e-01, -2.126e-01, -1.790e-01, 2.233e-01, -7.445e-02, -1.956e-01, 2.824e-01, -9.699e-02) * s2[y+1][x+0];
	r += M4(2.507e-02, -2.534e-01, -2.823e-01, -6.663e-02, 2.918e-01, -1.705e-02, -1.763e-01, 4.942e-01, 1.736e-01, -1.298e-01, -8.648e-02, 1.650e-01, -2.426e-01, -1.017e-01, 1.505e-02, -4.241e-01) * s2[y+1][x+1];
	r += M4(-1.289e-02, -5.997e-02, 1.165e-01, 1.646e-01, -1.658e-02, -1.159e-01, 1.995e-01, -2.170e-01, 7.482e-02, -6.402e-02, 5.163e-02, 5.500e-02, -6.223e-02, -1.363e-03, 8.571e-02, -5.009e-02) * s2[y+1][x+2];
	r += M4(-8.937e-03, -1.577e-01, 5.118e-02, 5.427e-02, -6.007e-02, 9.686e-02, -5.143e-02, 3.911e-02, -4.762e-02, 4.908e-02, 8.396e-03, 2.775e-02, 1.573e-01, -1.527e-01, 9.822e-02, 1.090e-02) * s2[y+2][x+0];
	r += M4(6.411e-02, -1.469e-01, -8.533e-02, 8.941e-02, 1.401e-01, -2.829e-02, 1.839e-02, 2.916e-03, 1.015e-01, 3.211e-01, 2.481e-03, 7.561e-03, -5.463e-02, -3.073e-02, 2.071e-02, 1.166e-01) * s2[y+2][x+1];
	r += M4(4.992e-03, -3.679e-02, -1.179e-02, 3.696e-02, -1.368e-01, -2.576e-02, 4.765e-02, 3.178e-03, 4.678e-02, 9.958e-03, -1.235e-01, -7.139e-02, -1.332e-04, 1.207e-01, 1.044e-01, -7.586e-02) * s2[y+2][x+2];
	r += M4(-3.775e-03, -5.651e-02, -2.166e-03, -2.039e-01, -1.151e-01, -3.567e-02, -1.191e-01, 7.859e-02, 1.786e-02, -1.920e-01, 3.943e-02, 2.362e-03, -2.605e-02, -1.927e-02, 4.106e-03, -7.157e-02) * s3[y+0][x+0];
	r += M4(1.975e-01, 2.689e-01, -1.328e-01, -2.107e-01, -2.154e-01, -1.647e-01, -6.377e-02, 1.215e-01, 2.049e-03, 1.278e-01, 3.898e-02, -1.082e-01, -2.324e-01, -1.399e-01, 2.171e-02, -3.361e-02) * s3[y+0][x+1];
	r += M4(-2.350e-02, -6.636e-02, 4.146e-02, -7.242e-02, -1.979e-01, -7.762e-02, 2.396e-02, 6.042e-02, -2.890e-02, 6.464e-02, 1.470e-02, -4.739e-02, -1.194e-01, -6.072e-02, -4.705e-02, -5.209e-02) * s3[y+0][x+2];
	r += M4(1.322e-02, -1.062e-03, 1.306e-01, -2.013e-01, 1.158e-02, -1.019e-01, -6.206e-02, 2.086e-01, 5.828e-02, -2.661e-01, -2.047e-01, 1.625e-01, -1.283e-01, -2.395e-01, -4.144e-02, -2.565e-02) * s3[y+1][x+0];
	r += M4(-5.137e-01, 1.264e-01, 1.033e-01, -2.889e-01, 1.667e-01, -1.388e-01, -2.258e-01, 2.265e-01, 7.839e-02, -2.938e-01, -2.033e-01, 5.998e-01, -9.650e-02, -1.827e-01, -2.567e-01, 3.067e-01) * s3[y+1][x+1];
	r += M4(8.199e-02, -2.639e-02, -1.703e-01, 1.922e-02, -5.841e-02, -1.788e-01, 2.104e-01, 1.472e-02, 1.161e-01, -1.922e-01, 1.238e-01, 8.912e-02, -3.376e-01, 8.284e-02, 5.086e-02, -1.302e-01) * s3[y+1][x+2];
	r += M4(-4.775e-02, 3.740e-02, 6.722e-02, -6.776e-02, 2.204e-02, 6.990e-02, 2.909e-02, 3.547e-02, 3.889e-03, -7.767e-03, 1.255e-02, 1.928e-02, -6.470e-02, -6.603e-02, 1.690e-01, 1.096e-01) * s3[y+2][x+0];
	r += M4(7.185e-02, 8.529e-02, 1.313e-01, 2.979e-02, 7.780e-02, -2.526e-02, -2.153e-01, -6.994e-02, 1.340e-01, 4.028e-02, -3.415e-01, -2.779e-02, -2.109e-01, 5.373e-02, 1.089e-01, -7.264e-02) * s3[y+2][x+1];
	r += M4(-3.983e-02, 2.447e-02, -9.639e-02, -2.746e-02, 7.366e-02, -1.062e-01, -3.412e-02, 1.221e-01, -1.132e-02, -9.995e-02, 9.732e-02, 1.392e-01, -1.802e-01, 5.184e-02, 1.795e-02, -1.427e-02) * s3[y+2][x+2];
	r += V4(5.348e-02, -2.887e-02, -1.216e-02, 6.983e-03);
	return vec4(r);
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv2_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
			s2[ay][ax] = l1(x - 1, y - 1);
			s1[ay][ax] = -max(-s0[ay][ax], V4(0.0));
			s0[ay][ax] = max(s0[ay][ax], V4(0.0));
			s3[ay][ax] = -max(-s2[ay][ax], V4(0.0));
			s2[ay][ax] = max(s2[ay][ax], V4(0.0));
		}
	}
	barrier();
	vec4 r0 = f0(xy.x, xy.y);
	vec4 r1 = f1(xy.x, xy.y);
	imageStore(out_image, opos + ivec2(0, 0), r0);
	imageStore(out_image, opos + ivec2(1, 0), r1);
}


//!DESC CuNNy-6x8C-RCAS-DS-conv4
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv3
//!BIND LUMA
//!SAVE conv4
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
	#define V4 f16vec4
	#define M4 f16mat4
	#define F float16_t
#else
	#define V4 vec4
	#define M4 mat4
	#define F float
#endif
#define l0(x, y) V4(texelFetch(conv3_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv3_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 s0[10][10];
shared V4 s1[10][10];
shared V4 s2[10][10];
shared V4 s3[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-2.146e-02, 3.250e-02, -5.468e-02, -5.314e-02, -5.313e-02, 5.214e-02, -9.993e-02, -1.419e-01, -2.255e-02, -9.482e-03, -7.338e-03, 2.229e-02, 8.965e-02, 1.104e-01, 1.344e-01, -8.550e-02) * s0[y+0][x+0];
	r += M4(-7.728e-02, -8.473e-03, 3.927e-02, -5.187e-02, 1.607e-01, -7.212e-02, 8.686e-02, 6.243e-02, -1.295e-01, 1.588e-02, 1.558e-01, -3.416e-02, -6.061e-02, -2.115e-01, 1.098e-01, -3.499e-02) * s0[y+0][x+1];
	r += M4(-1.120e-01, -1.166e-01, 5.698e-02, -1.421e-01, -6.423e-02, 1.871e-02, -1.553e-01, -3.976e-03, 4.903e-02, -1.284e-01, 1.438e-03, 5.385e-02, 5.531e-02, 4.560e-02, -9.697e-02, -9.752e-03) * s0[y+0][x+2];
	r += M4(-5.079e-02, -2.798e-02, -2.835e-02, 2.051e-01, 9.878e-02, 2.309e-01, 8.031e-02, 2.439e-01, 7.353e-03, -1.304e-01, 1.136e-01, 7.707e-02, 1.833e-01, -1.804e-01, 8.787e-02, 5.318e-02) * s0[y+1][x+0];
	r += M4(-2.031e-01, 3.883e-01, 8.511e-02, 4.363e-01, 4.156e-02, 1.030e-01, -5.042e-03, 2.832e-01, 5.956e-02, -2.335e-01, 4.399e-02, -1.162e-02, 9.296e-02, -2.124e-01, -1.687e-01, -1.219e-01) * s0[y+1][x+1];
	r += M4(-1.550e-01, -3.689e-01, 1.599e-01, -2.588e-01, -1.079e-01, -3.469e-02, -5.657e-02, -1.762e-02, 2.456e-01, -1.108e-01, -6.158e-02, 1.788e-01, 9.134e-02, 2.500e-02, 1.465e-01, 1.220e-01) * s0[y+1][x+2];
	r += M4(-1.149e-01, 8.318e-03, -2.091e-01, -7.105e-02, 1.234e-01, -2.089e-02, -4.225e-02, 4.459e-03, 3.419e-02, 9.013e-05, -1.071e-01, 6.902e-03, 2.381e-02, 4.174e-02, -3.010e-02, 1.722e-02) * s0[y+2][x+0];
	r += M4(-2.080e-01, 1.256e-02, 7.105e-02, 1.421e-02, 1.084e-02, 5.684e-02, -1.083e-02, -1.301e-01, 4.699e-02, 2.224e-02, 1.861e-01, -1.393e-02, -2.725e-02, 1.040e-01, 1.462e-01, -4.201e-03) * s0[y+2][x+1];
	r += M4(-2.036e-01, -3.826e-02, 1.381e-01, -2.108e-02, 3.748e-02, 2.894e-03, 4.224e-02, 2.685e-02, -4.350e-02, 9.471e-02, -2.282e-02, 2.484e-02, 1.227e-02, -3.184e-02, 4.425e-02, 3.081e-03) * s0[y+2][x+2];
	r += M4(1.734e-01, 9.898e-03, 8.997e-02, 1.237e-02, -2.072e-01, -1.529e-01, -2.966e-01, -6.666e-02, -5.938e-03, 5.487e-03, 1.881e-02, -4.864e-02, -1.487e-01, 7.249e-02, -8.498e-02, -1.323e-01) * s1[y+0][x+0];
	r += M4(1.561e-01, 1.299e-02, 1.248e-01, -1.311e-01, -2.958e-03, -5.090e-02, 1.809e-01, 1.474e-01, 1.061e-01, -7.325e-02, 1.977e-01, -9.090e-02, 1.384e-01, -1.499e-01, 1.743e-01, 3.056e-02) * s1[y+0][x+1];
	r += M4(6.716e-02, -1.098e-02, -2.780e-02, -1.929e-02, -4.213e-02, -4.392e-02, -8.133e-02, 8.729e-03, -2.422e-01, -2.095e-01, -2.266e-01, -1.771e-01, 2.134e-02, -8.284e-02, 6.899e-03, -6.585e-02) * s1[y+0][x+2];
	r += M4(1.529e-01, -2.187e-02, 1.627e-01, 9.936e-02, 1.118e-01, 1.694e-01, -1.830e-01, -1.244e-02, -3.155e-02, -6.243e-02, 1.347e-01, -3.090e-02, 1.627e-01, -2.694e-02, 1.007e-01, 1.823e-01) * s1[y+1][x+0];
	r += M4(-7.439e-02, 3.116e-01, -5.018e-01, 2.750e-01, -4.939e-02, -1.483e-01, -1.435e-01, 1.162e-01, 2.565e-01, -3.174e-01, -3.478e-02, -2.073e-02, -2.177e-01, -1.604e-02, -6.985e-02, 9.706e-02) * s1[y+1][x+1];
	r += M4(2.977e-01, -8.296e-02, 4.347e-02, -7.666e-02, -1.576e-01, -9.106e-02, -1.114e-01, 6.408e-02, -2.469e-01, -4.248e-01, 3.623e-01, -8.681e-02, 1.056e-01, 7.298e-02, -6.613e-03, 1.790e-01) * s1[y+1][x+2];
	r += M4(7.355e-02, 8.585e-02, -6.502e-02, -1.113e-01, 3.911e-03, 5.087e-02, 2.812e-02, -7.687e-02, 6.650e-02, -3.664e-02, -2.711e-02, 4.564e-02, 5.787e-02, 5.135e-03, 5.661e-02, 6.664e-02) * s1[y+2][x+0];
	r += M4(-1.871e-02, 8.196e-02, 8.139e-02, -1.038e-01, -8.199e-02, -1.609e-02, 7.895e-02, -1.066e-01, 2.682e-03, 1.168e-01, -4.857e-02, -7.750e-02, -7.749e-04, 3.074e-02, -1.147e-02, -9.079e-02) * s1[y+2][x+1];
	r += M4(-4.293e-02, 5.833e-02, -1.277e-02, -1.212e-02, 1.005e-01, -2.268e-02, 1.371e-01, -1.478e-02, 9.973e-02, -6.099e-03, 8.114e-02, 1.623e-01, -4.117e-02, 2.999e-02, -3.662e-02, 5.585e-02) * s1[y+2][x+2];
	r += M4(-1.744e-02, -7.260e-02, -4.621e-03, -3.764e-02, 9.567e-03, 1.469e-02, 9.530e-02, 3.913e-02, -1.677e-01, -1.023e-01, 1.537e-01, -7.579e-02, 1.064e-01, 7.936e-02, 4.053e-02, -7.679e-05) * s2[y+0][x+0];
	r += M4(1.340e-01, 1.675e-01, 6.230e-02, -2.904e-02, -4.577e-02, -1.648e-01, -2.607e-01, 2.121e-02, -1.058e-03, -3.774e-02, -1.806e-01, 2.050e-01, -2.062e-02, 1.119e-02, 5.996e-02, -4.718e-02) * s2[y+0][x+1];
	r += M4(-3.448e-02, -4.533e-03, 5.286e-03, 6.204e-03, 1.578e-01, -3.333e-02, -5.861e-02, 5.583e-02, 6.507e-02, -6.104e-03, -1.277e-02, 2.919e-02, -1.854e-02, 2.749e-02, 6.068e-02, -6.479e-02) * s2[y+0][x+2];
	r += M4(1.652e-01, -1.457e-02, -1.994e-02, 9.702e-02, -6.966e-02, -1.537e-02, 5.420e-02, 3.829e-02, -7.534e-02, -1.769e-01, 5.697e-02, 6.131e-02, -4.053e-02, 2.877e-01, 3.887e-03, -7.663e-02) * s2[y+1][x+0];
	r += M4(1.440e-02, 1.682e-01, 2.065e-01, -1.940e-01, -4.517e-02, -4.237e-02, -7.360e-03, 3.831e-01, 3.852e-01, -2.810e-02, -5.022e-01, 2.142e-01, -5.105e-01, 3.252e-01, 3.651e-01, 1.014e-01) * s2[y+1][x+1];
	r += M4(-8.380e-02, 2.105e-03, 7.746e-02, -2.058e-02, 2.383e-01, 7.944e-02, -1.398e-01, 2.055e-01, -5.138e-02, 3.464e-02, 5.220e-03, 2.713e-03, 2.140e-01, -1.132e-03, 1.880e-01, -1.470e-01) * s2[y+1][x+2];
	r += M4(1.645e-01, 6.172e-02, -2.997e-02, 1.607e-02, -4.589e-02, 5.698e-02, -1.442e-02, 1.435e-02, -4.941e-02, 2.623e-02, 5.482e-02, 9.539e-02, -6.019e-02, 1.190e-01, -1.819e-01, -1.394e-01) * s2[y+2][x+0];
	r += M4(3.879e-02, 3.730e-02, -1.431e-02, 2.148e-02, -1.042e-01, -7.237e-02, 1.159e-01, -1.061e-01, 1.769e-01, -7.423e-02, 4.454e-03, 1.183e-01, 1.608e-02, 7.857e-04, 1.339e-03, 5.448e-03) * s2[y+2][x+1];
	r += M4(-4.938e-02, -8.220e-02, 2.302e-03, -6.657e-02, 6.736e-02, 1.753e-02, -1.135e-02, -7.045e-02, -1.338e-01, -7.336e-02, -2.111e-02, -1.242e-01, 3.671e-02, 2.283e-02, -7.174e-02, 1.027e-01) * s2[y+2][x+2];
	r += M4(-1.307e-01, -6.270e-02, -1.794e-01, 1.728e-01, -4.501e-02, 6.037e-02, 2.513e-03, -3.222e-02, -1.286e-01, -9.593e-02, 1.798e-01, -2.089e-02, -1.475e-02, 4.715e-02, -8.246e-02, 3.463e-02) * s3[y+0][x+0];
	r += M4(-1.627e-01, 1.780e-01, 3.805e-02, 1.190e-01, -1.916e-02, -1.002e-01, -1.804e-01, -6.738e-03, -1.204e-01, 7.511e-02, -2.265e-01, 7.615e-02, -7.016e-03, -4.556e-02, -7.508e-02, 1.129e-01) * s3[y+0][x+1];
	r += M4(-7.719e-02, -1.183e-02, -1.954e-01, 1.057e-01, -1.199e-01, -1.258e-02, -3.233e-02, -7.755e-02, -2.861e-06, 9.497e-02, 2.049e-02, -4.371e-02, 5.721e-02, -1.227e-03, -1.032e-01, 8.140e-02) * s3[y+0][x+2];
	r += M4(-3.216e-04, 4.286e-01, 2.137e-01, 7.303e-02, -6.128e-02, -1.693e-01, 6.368e-02, 6.267e-02, -3.530e-03, -1.035e-01, 2.566e-02, 9.441e-02, 1.054e-01, 2.290e-01, 5.410e-02, 1.771e-01) * s3[y+1][x+0];
	r += M4(-5.757e-01, 2.194e-02, 2.427e-01, 1.373e-01, -2.009e-01, -3.718e-02, -3.658e-02, 4.353e-01, 1.675e-01, 1.999e-01, -3.693e-01, 1.881e-02, -5.134e-01, 3.628e-01, -1.078e-01, 1.302e-01) * s3[y+1][x+1];
	r += M4(-1.777e-01, -6.152e-02, -2.874e-01, 2.767e-02, -9.738e-02, 1.744e-02, -2.114e-01, -2.054e-02, -4.498e-02, 2.142e-01, 1.635e-01, 2.692e-02, 1.013e-01, -2.057e-01, 6.743e-02, -4.043e-02) * s3[y+1][x+2];
	r += M4(-1.828e-01, -3.741e-01, -7.422e-02, 2.999e-01, -3.469e-02, 1.091e-01, 3.299e-02, -5.629e-02, 3.716e-02, -1.376e-02, 8.856e-02, 9.865e-02, -5.493e-02, -2.393e-04, -1.969e-01, 3.954e-02) * s3[y+2][x+0];
	r += M4(-1.198e-01, -1.294e-01, -8.559e-02, 9.922e-02, -3.983e-02, -7.674e-02, 4.617e-03, -5.833e-02, 1.102e-01, 9.101e-02, -3.306e-02, 5.146e-02, -1.706e-01, -4.436e-02, 1.273e-01, -3.715e-02) * s3[y+2][x+1];
	r += M4(-3.482e-02, -4.016e-02, 7.650e-02, 1.770e-01, -1.275e-01, 5.401e-02, -2.479e-02, -1.550e-02, 3.663e-02, 7.845e-02, 2.354e-02, -8.150e-02, 4.380e-02, -3.750e-02, 7.339e-04, 5.818e-02) * s3[y+2][x+2];
	r += V4(1.347e-02, 1.095e-02, -9.649e-03, 4.197e-02);
	return vec4(r);
}
vec4 f1(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-1.229e-01, -3.209e-02, 9.313e-03, -6.696e-02, 1.529e-01, -2.204e-01, -1.572e-01, 1.919e-02, 5.919e-04, 2.050e-02, 1.486e-02, 5.776e-02, 1.066e-01, -2.083e-01, -1.091e-01, -2.105e-01) * s0[y+0][x+0];
	r += M4(2.504e-03, -6.187e-02, 1.992e-02, -1.100e-01, -2.026e-01, -3.993e-02, -3.950e-02, -3.166e-03, 4.562e-02, 6.817e-02, 3.029e-02, -6.797e-02, -1.029e-02, -1.560e-01, -6.764e-02, -1.561e-01) * s0[y+0][x+1];
	r += M4(1.924e-02, -9.295e-02, -8.823e-02, 9.299e-03, -3.092e-02, -7.399e-02, -2.979e-02, 5.312e-02, 1.562e-01, 3.234e-02, -4.178e-02, 1.110e-02, -9.096e-04, 8.409e-02, -3.961e-02, 1.682e-02) * s0[y+0][x+2];
	r += M4(2.191e-02, -1.246e-02, 1.431e-01, 2.418e-01, -4.790e-02, -2.601e-02, 2.822e-02, -8.943e-02, -2.878e-02, 7.669e-02, 2.731e-02, 4.558e-02, -1.172e-02, 1.263e-01, -1.491e-01, 7.014e-02) * s0[y+1][x+0];
	r += M4(9.208e-03, 8.174e-02, 1.952e-01, -1.915e-01, -6.925e-03, 9.929e-03, 2.443e-01, 2.871e-02, 1.851e-02, 2.711e-01, -2.664e-01, -1.547e-01, 5.655e-03, 2.961e-01, -1.345e-01, -1.039e-02) * s0[y+1][x+1];
	r += M4(4.427e-02, -1.000e-01, 4.268e-04, -2.822e-01, -1.539e-02, 1.395e-02, 1.175e-02, 1.246e-01, -3.215e-02, 1.430e-01, -1.815e-01, 4.601e-02, 1.692e-02, -1.245e-01, -2.770e-02, 1.470e-02) * s0[y+1][x+2];
	r += M4(-6.941e-02, -7.660e-02, 2.824e-02, -8.787e-02, -8.484e-02, 2.777e-01, -1.639e-01, 2.212e-01, 2.846e-03, -5.910e-02, -6.059e-02, -5.302e-02, 3.331e-02, -1.766e-01, -7.011e-02, -7.639e-02) * s0[y+2][x+0];
	r += M4(-3.034e-01, 2.313e-02, -1.519e-01, 2.589e-01, -7.573e-02, 4.653e-02, -2.880e-02, 7.685e-02, -2.605e-02, 5.951e-02, -8.742e-02, -2.988e-02, -7.811e-02, 1.190e-01, 6.652e-02, 1.573e-02) * s0[y+2][x+1];
	r += M4(-1.165e-01, -1.936e-01, 2.433e-01, 6.003e-02, -7.459e-02, -2.056e-02, 5.919e-03, -3.506e-02, -1.358e-01, -2.541e-02, 1.797e-01, -7.925e-02, -8.890e-02, 3.705e-02, 1.092e-01, -5.809e-02) * s0[y+2][x+2];
	r += M4(-8.886e-02, -1.081e-02, 3.802e-02, 6.063e-02, -6.399e-02, -2.211e-02, -1.528e-01, 1.322e-01, 8.684e-02, -3.223e-02, 7.549e-02, -5.259e-02, 1.491e-02, -1.249e-01, 9.784e-04, -7.496e-02) * s1[y+0][x+0];
	r += M4(-2.333e-03, -4.728e-02, -9.750e-03, 3.679e-04, 6.688e-03, 1.129e-01, 8.412e-03, 1.101e-01, 1.059e-01, -1.327e-02, 3.261e-02, -2.833e-02, -1.901e-01, 7.273e-02, 8.389e-02, -2.656e-01) * s1[y+0][x+1];
	r += M4(-1.073e-02, -3.675e-02, -1.999e-04, -2.027e-02, 4.740e-02, -4.164e-03, -4.511e-02, -1.310e-01, 2.398e-01, -5.155e-02, 2.947e-03, -1.210e-01, 2.727e-02, 3.412e-02, -9.106e-02, -4.779e-02) * s1[y+0][x+2];
	r += M4(2.533e-02, -1.080e-02, 6.172e-02, 1.714e-01, 3.679e-02, -6.744e-02, -4.150e-02, 2.633e-02, -4.221e-03, 8.958e-02, 1.339e-01, 4.448e-02, -7.307e-02, -2.752e-01, -9.958e-02, -4.122e-02) * s1[y+1][x+0];
	r += M4(2.594e-01, 1.032e-01, -1.312e-01, -4.287e-01, 3.303e-01, -1.085e-02, -1.714e-01, 7.690e-02, 1.275e-01, -2.891e-03, -1.176e-02, -1.152e-01, -2.169e-01, 1.214e-01, 5.793e-02, -9.310e-02) * s1[y+1][x+1];
	r += M4(1.606e-01, -5.571e-03, -4.196e-02, -6.487e-02, 4.801e-02, 6.383e-02, -3.552e-02, -1.036e-03, 8.181e-02, -2.816e-02, 5.200e-02, -3.718e-01, -1.140e-01, -5.278e-02, 1.174e-01, -1.035e-01) * s1[y+1][x+2];
	r += M4(-6.044e-02, -6.943e-02, -1.486e-01, -7.159e-02, 9.303e-02, -9.908e-03, -1.487e-01, 6.522e-02, -3.370e-02, 1.951e-02, -6.972e-03, 1.888e-02, -2.737e-01, 7.466e-02, -1.827e-02, 1.014e-01) * s1[y+2][x+0];
	r += M4(-3.428e-02, 2.013e-01, -1.867e-01, -3.156e-02, -7.733e-02, 9.345e-02, -2.006e-01, 2.606e-02, -4.751e-02, -1.958e-01, -7.396e-02, -1.085e-01, -4.567e-02, -6.028e-02, -2.443e-02, -1.733e-01) * s1[y+2][x+1];
	r += M4(-3.321e-03, 7.225e-02, 1.241e-01, 1.048e-01, 1.332e-02, 4.786e-02, -4.651e-02, 1.169e-02, -6.864e-02, 2.818e-02, 2.099e-01, -6.919e-02, -2.301e-01, 1.243e-01, -5.846e-03, -4.184e-02) * s1[y+2][x+2];
	r += M4(1.035e-01, 5.144e-02, 3.533e-03, 1.082e-01, -1.979e-02, 4.132e-03, -1.096e-02, 2.794e-02, 8.447e-03, 1.304e-01, 1.368e-01, -5.638e-02, -1.518e-01, 6.065e-02, 1.344e-01, -5.088e-02) * s2[y+0][x+0];
	r += M4(-2.545e-02, -3.131e-02, 2.765e-02, -2.895e-02, 8.000e-02, 1.437e-02, 2.602e-02, -1.978e-01, 2.293e-02, 4.552e-02, 7.837e-02, 6.229e-05, 1.135e-01, -6.334e-04, -1.668e-02, 2.958e-02) * s2[y+0][x+1];
	r += M4(8.954e-03, -3.473e-02, 7.429e-02, -4.826e-02, -1.007e-01, -2.414e-02, -1.359e-02, 1.106e-01, -8.229e-02, -8.378e-02, -1.202e-02, 5.145e-02, 6.568e-02, 5.980e-02, 1.553e-02, 1.588e-02) * s2[y+0][x+2];
	r += M4(7.014e-02, 1.198e-01, -6.506e-02, 6.943e-02, 8.896e-02, -6.046e-02, 1.074e-02, -1.697e-02, -4.869e-02, 2.327e-01, 1.017e-03, -2.331e-01, -3.052e-01, -1.172e-01, 7.422e-03, 5.507e-03) * s2[y+1][x+0];
	r += M4(8.236e-02, -1.786e-01, -5.171e-02, 1.754e-01, 4.382e-02, 2.897e-01, 1.522e-01, -2.349e-01, -1.566e-01, 2.872e-01, -5.350e-03, 1.495e-01, 3.096e-01, -4.892e-02, -6.964e-03, -2.561e-01) * s2[y+1][x+1];
	r += M4(8.273e-02, 6.809e-02, 7.342e-02, -3.404e-02, 2.246e-01, -3.499e-02, 1.656e-01, 1.936e-01, 2.415e-02, -9.606e-02, 1.103e-01, 4.851e-02, -1.235e-01, 1.085e-01, 3.349e-02, 4.796e-02) * s2[y+1][x+2];
	r += M4(1.606e-01, -1.213e-01, -3.355e-02, -5.342e-02, -4.229e-02, 4.184e-02, 2.585e-02, -6.998e-02, -6.276e-02, 2.302e-01, 1.614e-01, 3.313e-02, 1.674e-02, -4.855e-02, -7.273e-02, 9.128e-02) * s2[y+2][x+0];
	r += M4(1.402e-01, -6.542e-02, -8.423e-02, -1.401e-01, -3.269e-02, 1.558e-01, 3.769e-02, 1.191e-01, 1.353e-01, 1.749e-01, 1.480e-01, -1.860e-01, -3.679e-02, -1.026e-01, -4.510e-01, -2.944e-02) * s2[y+2][x+1];
	r += M4(7.651e-02, 4.753e-02, -2.926e-02, -3.253e-02, 1.899e-01, 1.906e-02, 7.860e-02, -1.191e-02, -1.348e-02, -9.476e-02, 7.683e-02, -1.239e-01, -1.717e-02, -8.534e-03, 5.870e-02, 6.649e-03) * s2[y+2][x+2];
	r += M4(1.248e-01, 3.660e-02, 1.258e-01, 1.483e-01, -2.813e-02, -3.038e-02, 9.934e-03, -2.394e-02, -3.543e-02, 1.391e-01, 4.536e-02, 9.511e-02, 6.812e-02, -1.323e-01, -4.846e-02, -9.253e-02) * s3[y+0][x+0];
	r += M4(-7.566e-02, 4.702e-02, 7.870e-02, -1.573e-01, 1.387e-01, -2.024e-02, -7.155e-02, -1.127e-01, 7.706e-03, 7.533e-02, 7.090e-02, 6.380e-02, -3.506e-02, -1.321e-01, -1.724e-01, -8.752e-02) * s3[y+0][x+1];
	r += M4(2.222e-02, -1.743e-01, 8.378e-02, 2.623e-02, -1.169e-01, -4.225e-02, 1.878e-02, 1.377e-01, -1.332e-02, 2.036e-02, 6.019e-02, -5.611e-02, -4.537e-02, -4.561e-02, -4.645e-02, 6.523e-02) * s3[y+0][x+2];
	r += M4(8.141e-02, 1.505e-01, 1.829e-01, 3.180e-01, 7.099e-02, 5.302e-05, 1.308e-02, -1.212e-01, -3.006e-02, 1.810e-01, -4.832e-02, -5.626e-02, -2.325e-01, 1.744e-01, 6.705e-02, 1.373e-01) * s3[y+1][x+0];
	r += M4(-1.544e-01, 3.483e-02, 4.041e-02, -2.843e-01, -1.220e-01, 1.616e-01, 2.599e-01, 2.304e-01, -7.372e-02, -2.220e-01, -1.237e-01, -1.621e-01, 2.073e-01, 1.078e-01, 2.913e-01, -5.673e-01) * s3[y+1][x+1];
	r += M4(1.548e-01, 4.588e-02, 5.759e-02, -7.807e-02, -4.815e-02, -1.665e-02, 1.218e-01, -3.866e-02, -5.385e-02, -4.545e-02, 9.586e-02, -6.445e-02, 1.094e-01, 1.464e-01, 4.149e-02, -1.016e-01) * s3[y+1][x+2];
	r += M4(-1.079e-01, -6.448e-01, -2.236e-01, -1.461e-01, 2.405e-02, 3.960e-02, 3.430e-02, -1.853e-02, 6.515e-02, 2.057e-02, -7.341e-02, -3.877e-03, 4.042e-03, -9.740e-02, 7.282e-02, -8.604e-03) * s3[y+2][x+0];
	r += M4(2.234e-01, 1.751e-01, -3.495e-01, 2.716e-01, 2.002e-02, 2.005e-02, -6.186e-02, 9.944e-02, 5.133e-02, -7.854e-02, -9.647e-02, -2.295e-01, 7.025e-02, 2.289e-02, -3.220e-01, 1.029e-01) * s3[y+2][x+1];
	r += M4(-3.369e-02, 6.820e-03, 3.022e-03, 3.412e-02, 3.880e-02, -9.740e-02, 1.382e-02, -6.476e-02, -2.375e-03, 1.192e-03, -1.489e-01, 2.626e-02, 8.733e-02, -4.916e-03, -7.633e-04, -2.032e-02) * s3[y+2][x+2];
	r += V4(2.279e-02, 1.161e-02, -3.113e-03, -1.525e-02);
	return vec4(r);
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv3_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
			s2[ay][ax] = l1(x - 1, y - 1);
			s1[ay][ax] = -max(-s0[ay][ax], V4(0.0));
			s0[ay][ax] = max(s0[ay][ax], V4(0.0));
			s3[ay][ax] = -max(-s2[ay][ax], V4(0.0));
			s2[ay][ax] = max(s2[ay][ax], V4(0.0));
		}
	}
	barrier();
	vec4 r0 = f0(xy.x, xy.y);
	vec4 r1 = f1(xy.x, xy.y);
	imageStore(out_image, opos + ivec2(0, 0), r0);
	imageStore(out_image, opos + ivec2(1, 0), r1);
}


//!DESC CuNNy-6x8C-RCAS-DS-conv5
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv4
//!BIND LUMA
//!SAVE conv5
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
	#define V4 f16vec4
	#define M4 f16mat4
	#define F float16_t
#else
	#define V4 vec4
	#define M4 mat4
	#define F float
#endif
#define l0(x, y) V4(texelFetch(conv4_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv4_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 s0[10][10];
shared V4 s1[10][10];
shared V4 s2[10][10];
shared V4 s3[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += M4(7.783e-02, 1.933e-02, -1.123e-02, -2.421e-02, -4.594e-02, -1.464e-02, 3.279e-02, 1.874e-02, -1.711e-02, 1.963e-02, -4.556e-03, 2.227e-02, 2.903e-02, 2.946e-03, -2.248e-02, -3.273e-02) * s0[y+0][x+0];
	r += M4(1.285e-01, 7.741e-02, -2.920e-02, -1.415e-03, 8.558e-02, 3.736e-02, -1.103e-01, -9.892e-02, -1.813e-01, -1.547e-02, 5.680e-02, 1.181e-01, -4.710e-02, 3.726e-02, 1.067e-01, 7.313e-02) * s0[y+0][x+1];
	r += M4(9.259e-02, 3.933e-02, -5.749e-02, 3.332e-02, 1.537e-02, 1.037e-01, -4.173e-02, 7.316e-02, -2.506e-02, -4.820e-02, -1.217e-02, -4.266e-02, -5.446e-03, -7.282e-02, 5.641e-02, 2.042e-02) * s0[y+0][x+2];
	r += M4(8.844e-02, 5.163e-02, -1.062e-01, -1.090e-01, 7.118e-02, -1.307e-01, -1.117e-01, 4.833e-02, 4.543e-02, 2.299e-02, -3.348e-02, -4.572e-02, 4.696e-02, 2.493e-02, 1.783e-01, 2.010e-02) * s0[y+1][x+0];
	r += M4(2.632e-01, 1.404e-01, -8.684e-02, 2.945e-01, 1.517e-01, -3.039e-01, 4.925e-01, 1.964e-02, -3.766e-01, -1.405e-01, 2.476e-01, 1.315e-01, -1.100e-01, 1.630e-01, 3.092e-02, -1.040e-01) * s0[y+1][x+1];
	r += M4(-6.724e-02, 7.940e-02, -2.353e-02, 1.290e-01, 1.708e-01, -2.044e-01, 3.795e-02, -1.193e-01, 9.546e-02, -2.750e-02, -1.388e-02, -1.946e-01, 9.857e-02, 2.186e-01, 1.372e-01, 2.110e-01) * s0[y+1][x+2];
	r += M4(8.900e-02, -3.559e-02, -1.529e-02, 3.051e-03, 2.453e-02, 7.835e-02, 4.398e-02, 4.072e-02, -9.952e-03, -6.793e-03, -5.470e-03, 1.487e-02, 6.246e-02, -2.463e-03, -1.928e-04, 1.509e-02) * s0[y+2][x+0];
	r += M4(-4.869e-04, -4.114e-02, -3.062e-02, -3.719e-02, -2.447e-02, 1.448e-01, 1.767e-01, -7.827e-02, -1.677e-04, 4.644e-02, -2.545e-02, -1.489e-01, -4.943e-02, 1.295e-01, 3.950e-02, 2.432e-02) * s0[y+2][x+1];
	r += M4(-4.076e-02, -2.242e-02, -5.154e-02, -7.010e-02, 6.771e-02, 7.810e-02, 1.137e-01, 2.423e-01, 1.196e-01, 1.991e-02, 3.785e-02, 5.291e-02, 1.023e-01, 1.014e-01, 4.606e-02, 1.495e-01) * s0[y+2][x+2];
	r += M4(1.044e-01, -7.270e-02, 4.603e-03, -2.222e-03, -9.978e-02, -3.405e-02, -3.490e-02, -2.309e-02, -7.741e-02, -2.222e-01, 5.296e-02, 1.227e-03, -2.570e-02, 5.087e-03, -1.006e-01, 4.081e-02) * s1[y+0][x+0];
	r += M4(2.512e-01, 4.557e-02, 1.822e-01, -8.540e-02, -9.765e-03, -9.557e-02, -1.705e-01, 6.935e-02, -3.096e-01, -3.725e-01, 1.784e-01, 8.642e-03, 3.309e-02, 2.411e-01, 4.283e-02, -7.050e-02) * s1[y+0][x+1];
	r += M4(-7.198e-02, 3.309e-02, 2.313e-03, 1.353e-01, -3.744e-03, -2.959e-04, -6.763e-02, 2.117e-02, -1.232e-01, -2.502e-01, 1.538e-02, -1.802e-01, -4.973e-03, -8.993e-02, 3.856e-03, 1.077e-01) * s1[y+0][x+2];
	r += M4(-1.147e-01, 8.656e-02, 2.621e-02, 3.076e-01, 1.555e-01, -6.270e-02, 7.750e-02, 7.467e-03, 2.032e-02, -2.329e-01, 1.187e-01, -3.052e-02, 1.020e-01, 8.116e-02, 1.510e-01, -1.215e-01) * s1[y+1][x+0];
	r += M4(1.618e-01, -1.143e-01, 8.502e-02, 2.532e-01, 2.914e-02, -4.013e-01, 9.361e-02, -1.063e-01, -4.097e-01, -6.275e-01, 1.613e-01, 1.108e-02, -3.916e-01, 5.902e-02, 9.949e-02, -4.158e-02) * s1[y+1][x+1];
	r += M4(2.169e-01, -1.132e-03, -4.994e-02, 1.370e-01, -1.014e-01, -1.043e-01, 4.597e-02, 1.121e-01, -3.842e-01, -3.307e-01, -9.270e-02, -1.295e-01, 6.913e-02, 1.265e-01, 1.040e-01, 1.620e-01) * s1[y+1][x+2];
	r += M4(8.265e-02, -6.231e-02, -7.723e-02, -1.336e-02, -2.179e-03, 4.586e-02, 1.837e-02, 2.132e-02, -5.865e-02, -6.541e-02, 6.884e-02, -2.456e-02, 2.409e-02, 2.323e-02, -7.200e-02, 5.271e-02) * s1[y+2][x+0];
	r += M4(5.120e-02, -2.510e-01, 8.630e-02, 9.802e-03, 5.260e-02, 8.143e-02, -4.474e-02, 6.068e-03, -6.280e-02, -1.013e-01, -7.300e-02, -5.855e-02, -6.326e-02, -3.960e-02, 1.457e-01, -1.350e-02) * s1[y+2][x+1];
	r += M4(-7.057e-02, -8.323e-02, -7.384e-02, 7.895e-02, -6.323e-02, 4.764e-02, 8.668e-02, 1.987e-01, -9.481e-02, 3.598e-02, -1.489e-02, -4.168e-02, 3.391e-02, 1.242e-03, -4.433e-02, 1.524e-01) * s1[y+2][x+2];
	r += M4(-3.603e-02, -4.687e-03, -1.235e-01, -8.960e-02, 3.023e-02, -1.017e-01, -1.852e-02, 1.323e-02, 9.857e-02, 9.200e-02, 1.557e-02, -1.313e-01, -9.879e-02, 1.007e-02, -1.987e-02, 5.169e-02) * s2[y+0][x+0];
	r += M4(-1.056e-01, -2.171e-01, -3.144e-02, 8.738e-02, 2.359e-01, 1.527e-02, -5.048e-02, -2.193e-02, 1.546e-01, -5.038e-02, -4.369e-02, 4.450e-02, 1.239e-02, 1.173e-02, -5.455e-02, -3.834e-02) * s2[y+0][x+1];
	r += M4(9.938e-02, 5.528e-02, 3.045e-02, -1.223e-01, -7.231e-03, -4.411e-02, 5.449e-02, 6.275e-02, 4.047e-02, -1.253e-02, -2.646e-02, 5.128e-03, -1.039e-01, -2.911e-02, 3.433e-02, 4.301e-02) * s2[y+0][x+2];
	r += M4(5.789e-02, 7.891e-02, 3.554e-02, -2.708e-02, -5.072e-02, -1.112e-01, 9.605e-02, 2.593e-02, 5.838e-02, -1.208e-01, -1.138e-01, 1.062e-02, -4.104e-02, 1.230e-01, 8.444e-02, -1.626e-03) * s2[y+1][x+0];
	r += M4(2.241e-01, 5.217e-02, -9.530e-02, -6.217e-03, 1.056e-02, 2.011e-01, 1.509e-01, -4.689e-02, -2.381e-01, -1.819e-01, -2.815e-01, 1.172e-01, -2.799e-02, 1.626e-01, -5.880e-02, 5.392e-02) * s2[y+1][x+1];
	r += M4(-3.536e-02, -4.143e-02, -2.948e-02, 1.238e-01, 1.048e-01, 1.343e-01, 6.880e-02, -5.452e-02, 5.377e-02, -7.955e-02, 5.216e-02, 1.019e-01, -1.394e-01, -4.353e-02, 5.607e-02, 5.997e-02) * s2[y+1][x+2];
	r += M4(-1.141e-01, -1.884e-02, -8.853e-03, 5.348e-02, -5.624e-02, 7.500e-03, 2.793e-02, 5.920e-02, 3.072e-03, -6.001e-02, -6.648e-03, -3.501e-02, 3.878e-02, -7.266e-02, -2.870e-02, -6.082e-02) * s2[y+2][x+0];
	r += M4(3.842e-02, -6.705e-04, -1.164e-01, 2.673e-02, -6.745e-03, 1.222e-02, -1.880e-02, 6.290e-02, -9.395e-02, -5.019e-02, -4.901e-02, -4.574e-02, -8.514e-02, -1.638e-02, 8.708e-02, -2.134e-02) * s2[y+2][x+1];
	r += M4(4.657e-02, 7.038e-03, 3.277e-02, -3.172e-02, 5.754e-03, 2.691e-02, 4.888e-02, -4.187e-02, -2.492e-02, -5.980e-02, 8.842e-03, -4.358e-02, 1.923e-02, 4.358e-02, 2.763e-02, -7.646e-02) * s2[y+2][x+2];
	r += M4(-7.749e-02, -1.214e-01, -1.362e-01, -3.835e-02, 2.656e-02, 2.490e-02, -5.614e-02, -1.583e-01, 3.556e-02, 6.291e-02, 8.249e-02, 2.427e-02, -1.833e-02, -1.339e-01, -1.401e-01, -2.728e-01) * s3[y+0][x+0];
	r += M4(1.549e-01, 2.925e-01, 8.047e-02, -1.813e-02, -7.259e-02, -3.937e-01, 4.616e-01, 1.966e-01, -2.550e-01, -3.741e-01, 1.126e-01, 2.441e-01, -3.010e-01, -3.368e-01, -4.164e-02, 9.387e-02) * s3[y+0][x+1];
	r += M4(4.200e-02, -3.746e-03, -8.798e-03, -1.298e-01, 1.105e-01, -3.887e-03, -4.196e-02, -3.135e-01, 6.427e-02, -3.035e-02, 3.248e-02, -5.950e-02, -6.679e-02, -2.857e-02, 3.457e-02, -2.262e-04) * s3[y+0][x+2];
	r += M4(1.663e-02, -1.409e-02, 5.717e-02, -1.800e-01, -9.045e-03, -1.150e-01, -3.063e-02, -9.056e-02, 1.888e-01, 1.626e-02, -1.146e-02, 7.727e-02, 1.460e-01, 2.967e-01, -2.733e-02, -3.268e-01) * s3[y+1][x+0];
	r += M4(-9.715e-02, -1.189e-01, 1.660e-01, -2.232e-01, -3.760e-01, 3.291e-01, 2.372e-02, -9.513e-02, -2.916e-01, 6.205e-02, -1.935e-01, 1.885e-02, -2.488e-01, 4.084e-01, -1.016e-01, 8.364e-03) * s3[y+1][x+1];
	r += M4(-5.595e-02, -7.749e-03, -1.042e-01, -8.416e-02, 4.280e-01, 1.471e-01, -1.047e-02, -1.268e-01, 2.248e-01, 1.265e-01, 1.636e-01, 2.206e-01, 2.293e-01, 4.894e-03, 4.087e-02, -4.913e-02) * s3[y+1][x+2];
	r += M4(8.225e-02, -1.187e-02, 1.621e-02, 1.277e-02, 2.157e-02, -4.973e-02, -5.755e-03, -5.479e-02, 6.250e-02, 1.425e-02, -1.110e-03, 1.189e-03, -2.484e-02, -1.273e-03, -6.141e-02, -2.038e-01) * s3[y+2][x+0];
	r += M4(-8.516e-02, 1.336e-01, -1.511e-02, 2.944e-02, -6.431e-02, -2.262e-01, -7.446e-02, -1.197e-02, -5.251e-02, -4.487e-02, -4.665e-02, -4.740e-02, 2.074e-03, -3.369e-01, 5.332e-02, -1.245e-01) * s3[y+2][x+1];
	r += M4(2.019e-01, 9.536e-02, 1.344e-02, 5.219e-02, 1.407e-01, -1.131e-01, 2.819e-02, -1.226e-01, -5.501e-03, -4.294e-03, 8.243e-03, -2.741e-02, -7.446e-02, -1.358e-01, -5.559e-02, -2.069e-01) * s3[y+2][x+2];
	r += V4(-2.020e-03, -5.050e-03, -3.021e-02, -1.875e-03);
	return vec4(r);
}
vec4 f1(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-8.196e-02, -2.187e-02, 1.179e-01, 1.082e-01, 4.211e-02, -3.647e-02, -1.601e-02, -1.223e-01, 2.217e-02, -1.034e-02, 3.657e-02, 2.033e-02, 1.220e-03, 4.409e-03, 2.779e-02, 3.558e-02) * s0[y+0][x+0];
	r += M4(2.627e-02, 2.687e-02, -3.692e-02, -3.732e-02, 6.662e-03, -1.646e-02, -9.611e-02, 2.545e-02, 1.767e-02, -1.037e-02, 2.985e-02, -2.269e-02, -9.505e-04, -8.580e-02, 1.132e-01, -6.139e-02) * s0[y+0][x+1];
	r += M4(3.664e-02, 4.182e-03, 2.224e-02, 8.591e-02, 5.394e-02, 4.338e-02, -5.174e-02, -1.494e-02, -1.237e-03, -1.789e-02, 3.528e-02, -2.170e-02, 3.012e-03, -4.905e-02, 2.438e-02, 4.693e-02) * s0[y+0][x+2];
	r += M4(-5.186e-02, -1.831e-03, -8.529e-02, 5.055e-02, -1.730e-02, -5.302e-02, -3.387e-02, 1.291e-01, 6.908e-02, -6.001e-02, 1.692e-02, 6.213e-02, 1.082e-02, -3.714e-02, 1.154e-01, 7.543e-02) * s0[y+1][x+0];
	r += M4(-7.667e-02, 1.423e-01, 4.219e-01, 1.352e-01, 1.078e-01, -1.253e-01, 1.972e-01, -4.737e-01, 5.263e-02, -2.045e-01, -2.432e-01, 5.066e-02, 8.922e-02, -4.042e-01, 1.454e-01, -4.936e-02) * s0[y+1][x+1];
	r += M4(6.497e-02, 5.226e-02, 8.910e-02, -9.692e-02, -1.258e-01, 2.085e-03, -5.376e-02, 2.124e-01, -3.060e-02, -5.362e-02, -1.173e-02, 1.428e-01, 5.176e-02, -8.214e-02, 9.877e-02, 2.465e-02) * s0[y+1][x+2];
	r += M4(7.451e-02, 8.366e-02, 7.359e-02, -1.277e-02, 5.046e-02, -2.183e-02, -5.707e-02, -6.527e-03, 5.511e-02, -5.431e-02, -2.403e-02, -1.076e-02, 1.950e-02, -2.272e-02, 1.239e-02, 1.011e-01) * s0[y+2][x+0];
	r += M4(1.348e-01, -6.980e-03, 1.159e-01, 4.578e-02, -1.868e-01, -1.027e-01, -1.630e-01, -7.082e-03, 6.705e-02, -1.903e-02, 2.429e-02, 9.163e-02, -4.103e-02, -6.363e-02, -6.028e-02, -5.191e-02) * s0[y+2][x+1];
	r += M4(7.699e-02, -7.960e-03, -9.318e-03, 6.508e-02, -1.910e-02, -4.820e-02, 1.448e-02, -5.028e-02, 2.715e-02, 3.420e-03, 2.230e-02, -5.201e-02, 1.714e-01, 1.848e-02, -3.424e-02, -6.027e-02) * s0[y+2][x+2];
	r += M4(-7.088e-02, -2.761e-02, 1.010e-01, 9.762e-02, -2.167e-02, -2.352e-02, -6.162e-02, -2.488e-02, -1.948e-02, 3.693e-02, -6.152e-02, -5.786e-02, 5.619e-02, -6.861e-02, -4.334e-03, 1.461e-02) * s1[y+0][x+0];
	r += M4(1.332e-02, 9.145e-02, 4.003e-02, -2.061e-01, -1.831e-02, -3.953e-02, 4.819e-03, 1.204e-01, -4.183e-02, -9.369e-03, -1.081e-01, -5.228e-02, 2.154e-02, -1.216e-02, -3.202e-02, -6.696e-02) * s1[y+0][x+1];
	r += M4(6.357e-02, 6.513e-03, -3.620e-02, -4.114e-02, 4.483e-02, 4.410e-03, -1.825e-02, 5.866e-02, -1.336e-02, -8.409e-02, -1.521e-01, 1.752e-01, 3.204e-02, -4.412e-02, 1.076e-01, -1.136e-01) * s1[y+0][x+2];
	r += M4(8.870e-02, -1.235e-01, -1.086e-01, -1.724e-01, 1.592e-02, 6.946e-03, 6.869e-02, 1.281e-01, -9.323e-03, 2.767e-03, -8.249e-04, -1.135e-02, -9.440e-02, -1.246e-02, 1.398e-01, 1.967e-01) * s1[y+1][x+0];
	r += M4(2.064e-01, 8.407e-02, 3.151e-01, -2.565e-01, -1.528e-01, -5.599e-02, -1.248e-01, 4.679e-02, 2.275e-02, -1.663e-01, -4.934e-01, -8.576e-02, 2.860e-01, -5.323e-01, 1.102e-01, -4.378e-01) * s1[y+1][x+1];
	r += M4(1.180e-01, 6.936e-02, 1.868e-03, 2.428e-01, -6.599e-03, -2.298e-02, -2.754e-02, -3.598e-02, 1.175e-01, -7.849e-02, -4.569e-01, 5.722e-02, 2.135e-01, -1.588e-01, 1.038e-01, 1.130e-01) * s1[y+1][x+2];
	r += M4(6.732e-02, 1.224e-01, 4.622e-02, -3.954e-02, -1.512e-02, -5.997e-02, 3.489e-02, 2.095e-01, -5.664e-02, 1.263e-02, -5.224e-02, 8.029e-03, 7.138e-02, 4.955e-02, -2.766e-02, 9.589e-03) * s1[y+2][x+0];
	r += M4(2.892e-01, -8.443e-02, 1.637e-01, 9.251e-02, -1.841e-01, -1.059e-01, -2.697e-01, -1.135e-01, -2.897e-03, 1.623e-02, -1.352e-01, -1.422e-01, -1.523e-01, -1.125e-01, -8.766e-03, 1.144e-01) * s1[y+2][x+1];
	r += M4(2.897e-01, 2.348e-02, -6.682e-02, -8.293e-03, -1.399e-01, -6.023e-02, -1.321e-01, -7.071e-02, 1.929e-01, 9.955e-02, -1.863e-01, -5.463e-02, 1.424e-01, 7.777e-03, 9.231e-02, -8.166e-02) * s1[y+2][x+2];
	r += M4(1.382e-02, -1.189e-01, -3.969e-02, 8.684e-02, 3.030e-03, 2.041e-02, -2.913e-02, 5.917e-02, -7.189e-02, -8.441e-02, 8.042e-02, 1.847e-01, 5.140e-02, -1.423e-02, -6.568e-02, -3.572e-02) * s2[y+0][x+0];
	r += M4(-1.140e-01, -1.485e-01, 9.643e-02, 7.501e-02, -1.167e-02, 1.215e-01, 5.415e-02, 9.190e-02, 2.344e-02, -1.077e-01, 2.178e-01, -8.928e-03, -8.535e-02, 2.621e-02, -4.232e-03, -1.868e-02) * s2[y+0][x+1];
	r += M4(-4.415e-02, -5.933e-02, 2.951e-02, 1.031e-01, 1.209e-01, 1.416e-02, -1.078e-01, -9.386e-03, -9.763e-02, -3.174e-02, 1.081e-01, 1.297e-02, -1.294e-03, -7.055e-03, -2.077e-02, -1.354e-01) * s2[y+0][x+2];
	r += M4(-3.394e-02, -1.255e-01, 2.138e-02, 1.304e-01, -3.645e-02, 2.994e-02, 8.043e-03, -5.796e-03, -6.911e-02, 1.688e-02, -1.078e-02, 1.567e-01, 4.407e-02, 1.851e-02, -6.056e-02, -5.465e-02) * s2[y+1][x+0];
	r += M4(2.216e-01, -2.155e-02, -4.419e-02, -6.503e-02, 1.099e-01, 7.836e-03, -1.206e-01, -7.509e-02, -8.174e-02, 1.227e-02, -1.171e-01, -1.054e-01, 1.037e-01, 1.421e-01, 3.873e-02, -4.448e-02) * s2[y+1][x+1];
	r += M4(-1.560e-01, -1.005e-01, 1.115e-01, -1.344e-02, -1.102e-01, 2.503e-02, -1.871e-02, 4.034e-02, -2.923e-01, -3.290e-02, 1.329e-01, -5.308e-02, 1.575e-01, -2.070e-02, -7.201e-02, -6.041e-02) * s2[y+1][x+2];
	r += M4(-2.203e-02, -3.799e-02, 4.669e-04, -3.811e-04, -1.885e-02, 1.048e-02, -5.586e-02, -7.099e-02, -1.100e-01, -2.236e-02, -3.975e-03, 1.540e-02, 2.229e-02, -4.207e-02, 5.036e-02, 4.205e-02) * s2[y+2][x+0];
	r += M4(-8.221e-02, -3.573e-02, -9.345e-03, -4.627e-02, -1.647e-02, 1.583e-02, -5.718e-02, 1.609e-02, -3.777e-03, -1.535e-02, -2.271e-02, -3.636e-02, 1.620e-02, -4.337e-02, -7.845e-03, -1.990e-02) * s2[y+2][x+1];
	r += M4(-3.674e-02, -2.703e-02, -5.905e-02, 4.257e-02, -9.921e-02, -2.874e-03, -4.291e-03, 1.000e-01, -4.794e-02, 1.318e-03, -3.311e-02, -2.869e-02, -4.179e-02, -1.837e-02, -5.347e-02, -8.130e-03) * s2[y+2][x+2];
	r += M4(5.050e-03, -8.875e-02, -2.340e-02, 2.195e-01, -9.507e-02, 1.536e-02, 3.214e-02, 1.249e-01, 8.145e-03, -8.169e-02, 9.383e-02, 8.723e-02, -2.049e-01, -4.326e-02, 7.769e-03, 2.389e-01) * s3[y+0][x+0];
	r += M4(2.999e-02, -2.565e-02, 9.597e-02, -6.146e-02, -1.834e-01, 1.163e-01, 4.304e-01, -1.986e-02, -6.836e-02, 2.227e-01, 7.074e-02, -1.930e-01, -2.911e-01, -2.257e-02, 1.271e-01, 6.558e-02) * s3[y+0][x+1];
	r += M4(1.274e-02, -2.943e-03, -1.001e-01, 5.041e-02, -2.706e-01, -4.445e-02, 7.685e-02, 2.871e-01, -5.929e-03, -9.503e-02, 3.369e-02, 5.355e-02, -1.553e-02, 4.039e-02, 5.524e-02, -4.174e-02) * s3[y+0][x+2];
	r += M4(-8.864e-02, -4.426e-02, -8.362e-02, 2.362e-01, -8.493e-02, 3.244e-02, -8.168e-02, -8.209e-02, 1.241e-01, 2.775e-04, -2.518e-02, 4.525e-02, -1.081e-01, 3.674e-02, 1.295e-01, 3.037e-01) * s3[y+1][x+0];
	r += M4(1.345e-01, -1.100e-01, -4.347e-01, 1.043e-01, 4.013e-02, 6.549e-02, -2.922e-01, -9.860e-02, 8.678e-02, -3.400e-03, -9.584e-02, -2.212e-01, -3.028e-01, 1.101e-01, 9.262e-03, -2.772e-01) * s3[y+1][x+1];
	r += M4(-2.185e-01, -2.971e-02, 3.480e-01, 5.162e-02, -4.747e-01, 1.539e-02, 1.975e-02, 1.109e-01, -5.828e-02, -7.536e-02, 1.486e-02, -1.095e-01, -1.573e-01, 9.289e-03, -9.710e-04, 2.299e-01) * s3[y+1][x+2];
	r += M4(6.826e-02, -4.073e-02, -5.386e-02, 2.917e-02, -1.213e-01, -1.448e-02, 5.037e-04, -4.946e-02, -1.242e-02, -2.609e-02, 2.248e-02, 2.214e-02, -1.371e-01, -7.602e-02, -2.480e-02, -2.110e-02) * s3[y+2][x+0];
	r += M4(9.848e-02, -9.296e-02, -4.739e-02, 6.189e-02, -7.928e-02, -3.583e-03, 2.984e-02, 1.865e-02, 8.702e-03, -4.923e-03, 1.166e-02, -1.095e-02, 4.123e-02, 1.671e-02, 1.787e-01, 1.221e-01) * s3[y+2][x+1];
	r += M4(-1.440e-01, -6.987e-02, 4.625e-02, 7.043e-02, -5.823e-02, 1.301e-03, 8.245e-02, 1.978e-01, 1.140e-02, -2.908e-02, 3.785e-02, 1.820e-02, -3.301e-02, 2.291e-02, 5.598e-02, 9.584e-02) * s3[y+2][x+2];
	r += V4(-1.542e-03, -3.250e-02, -1.186e-02, 1.654e-02);
	return vec4(r);
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv4_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
			s2[ay][ax] = l1(x - 1, y - 1);
			s1[ay][ax] = -max(-s0[ay][ax], V4(0.0));
			s0[ay][ax] = max(s0[ay][ax], V4(0.0));
			s3[ay][ax] = -max(-s2[ay][ax], V4(0.0));
			s2[ay][ax] = max(s2[ay][ax], V4(0.0));
		}
	}
	barrier();
	vec4 r0 = f0(xy.x, xy.y);
	vec4 r1 = f1(xy.x, xy.y);
	imageStore(out_image, opos + ivec2(0, 0), r0);
	imageStore(out_image, opos + ivec2(1, 0), r1);
}


//!DESC CuNNy-6x8C-RCAS-DS-conv6
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv5
//!BIND LUMA
//!SAVE conv6
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
	#define V4 f16vec4
	#define M4 f16mat4
	#define F float16_t
#else
	#define V4 vec4
	#define M4 mat4
	#define F float
#endif
#define l0(x, y) V4(texelFetch(conv5_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv5_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 s0[10][10];
shared V4 s1[10][10];
shared V4 s2[10][10];
shared V4 s3[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += M4(3.381e-02, 2.862e-03, -2.980e-02, 1.522e-02, 7.421e-03, 7.270e-03, -2.541e-02, -3.499e-02, -2.653e-03, 1.820e-02, -2.010e-02, 1.756e-02, -3.374e-03, -2.571e-02, -2.899e-02, -1.671e-02) * s0[y+0][x+0];
	r += M4(2.067e-02, 4.513e-02, 6.327e-02, 4.819e-02, -1.446e-02, -6.096e-02, -7.056e-02, 3.529e-02, 3.309e-02, -7.083e-04, 5.392e-02, -1.002e-03, -3.497e-03, -2.213e-02, -3.821e-02, -5.465e-02) * s0[y+0][x+1];
	r += M4(-2.589e-02, -2.544e-02, 2.669e-03, 6.402e-02, -4.274e-03, 1.946e-02, 3.512e-02, -4.171e-02, -1.033e-02, 2.729e-02, -6.846e-02, -1.152e-01, -1.147e-02, 7.494e-03, 1.112e-02, 3.380e-02) * s0[y+0][x+2];
	r += M4(-7.158e-03, 1.791e-01, 2.868e-02, 3.559e-02, -2.836e-02, -5.427e-03, 8.112e-03, 1.106e-02, 4.545e-02, -2.853e-03, -3.613e-04, 1.333e-02, -7.883e-02, 7.755e-02, 5.993e-02, 2.936e-02) * s0[y+1][x+0];
	r += M4(3.508e-02, 9.242e-02, 3.006e-02, 8.055e-02, 1.127e-01, -8.842e-02, -1.230e-02, -9.559e-02, -1.208e-01, 1.464e-01, 1.440e-01, 3.401e-01, 6.093e-02, -1.680e-02, -2.983e-02, -8.248e-02) * s0[y+1][x+1];
	r += M4(1.274e-01, 3.357e-02, -2.357e-02, -4.907e-03, -9.524e-02, -1.086e-02, -1.720e-02, -3.892e-02, 1.955e-02, 3.626e-02, 1.637e-01, 2.075e-01, 6.668e-02, 4.825e-02, -2.284e-02, -3.656e-03) * s0[y+1][x+2];
	r += M4(4.850e-02, 8.668e-02, -2.106e-02, -1.846e-02, 2.108e-02, 7.541e-03, -7.073e-03, -2.155e-02, -1.788e-02, -4.089e-02, -2.998e-03, 1.117e-02, -4.702e-02, -3.151e-03, -1.945e-02, -2.084e-02) * s0[y+2][x+0];
	r += M4(3.963e-02, 4.183e-02, 1.245e-02, -1.186e-02, 3.523e-03, -1.059e-02, 4.646e-02, 9.012e-02, 8.037e-02, 9.525e-02, -8.585e-02, -1.096e-01, 1.910e-02, -3.483e-02, -1.898e-02, 3.953e-03) * s0[y+2][x+1];
	r += M4(1.703e-02, 1.715e-03, 3.686e-02, 2.181e-02, -1.077e-02, -1.792e-02, -1.473e-02, -2.277e-02, -3.911e-02, -4.039e-02, -4.322e-02, -4.625e-02, 1.741e-02, 1.012e-02, -3.224e-02, -1.842e-02) * s0[y+2][x+2];
	r += M4(4.532e-03, -3.179e-02, 2.426e-02, -3.662e-02, 4.218e-02, 7.600e-03, -3.729e-02, -3.830e-02, 1.005e-02, 7.904e-03, -1.191e-02, 3.010e-02, 7.696e-04, 9.236e-03, -1.423e-02, 3.690e-02) * s1[y+0][x+0];
	r += M4(4.993e-02, 1.340e-01, -9.652e-02, -1.602e-02, -1.655e-02, -6.777e-02, 1.745e-02, -1.817e-03, -3.809e-02, -3.164e-02, 1.265e-02, -3.957e-02, -5.421e-02, -2.254e-02, -7.689e-02, -1.096e-01) * s1[y+0][x+1];
	r += M4(1.534e-02, 7.810e-02, -4.277e-02, 2.514e-02, -9.200e-03, 2.949e-02, 2.963e-02, 2.619e-03, -4.549e-02, -4.043e-03, -3.612e-02, -1.342e-01, 8.315e-03, 1.104e-02, -4.629e-03, 3.454e-02) * s1[y+0][x+2];
	r += M4(5.973e-02, 2.657e-02, -4.597e-02, 4.681e-02, 8.514e-03, 1.392e-02, 1.591e-01, -4.124e-02, 4.335e-02, -1.703e-03, 1.862e-02, -8.098e-04, -1.106e-01, 1.397e-01, 2.074e-01, -2.625e-02) * s1[y+1][x+0];
	r += M4(-2.199e-02, 8.701e-02, 2.990e-01, 1.845e-02, 6.816e-02, -1.892e-01, 3.256e-02, -8.448e-01, -1.301e-01, -8.186e-02, 1.358e-01, 1.086e-01, 1.951e-01, -1.201e-03, 1.403e-02, 9.913e-02) * s1[y+1][x+1];
	r += M4(6.493e-02, -2.729e-02, -3.702e-02, 9.066e-02, -1.663e-01, 9.912e-02, -8.091e-02, -1.616e-01, 4.693e-03, 7.235e-02, -4.919e-02, 5.626e-02, -5.796e-02, -2.263e-02, 5.989e-02, 2.974e-02) * s1[y+1][x+2];
	r += M4(8.205e-02, 1.217e-01, -3.828e-03, -7.397e-02, -2.712e-04, -9.859e-02, -4.150e-02, 4.260e-02, 4.005e-02, 2.693e-03, 1.199e-02, -3.569e-02, -5.660e-02, -6.910e-02, 2.676e-02, 2.074e-03) * s1[y+2][x+0];
	r += M4(1.051e-01, -1.368e-02, 1.875e-03, 2.089e-02, -3.694e-02, -7.708e-02, 1.860e-01, 2.093e-01, 4.458e-02, 1.838e-02, -5.456e-02, -2.007e-02, 1.552e-02, 8.335e-02, -1.540e-02, -3.674e-02) * s1[y+2][x+1];
	r += M4(-9.499e-04, 3.235e-02, -4.046e-02, -4.266e-02, -5.545e-02, -9.809e-03, 1.020e-01, 1.342e-01, -8.663e-02, 1.388e-02, 9.144e-03, -2.146e-02, 2.323e-02, -7.102e-03, -3.357e-02, 2.604e-02) * s1[y+2][x+2];
	r += M4(-2.926e-02, -3.277e-02, 4.491e-02, 6.503e-02, 2.981e-02, -1.568e-02, 6.903e-02, 7.617e-02, -2.865e-02, 2.100e-02, 2.198e-02, -9.494e-02, 1.204e-03, 7.343e-04, -1.722e-02, 2.917e-02) * s2[y+0][x+0];
	r += M4(-3.967e-02, 5.569e-02, 5.392e-02, -1.795e-02, 2.182e-02, -3.426e-02, -2.505e-02, -5.997e-02, 4.433e-02, 2.502e-02, -9.538e-02, -1.261e-01, -6.718e-02, -7.883e-02, -1.848e-03, 3.385e-03) * s2[y+0][x+1];
	r += M4(3.128e-02, -2.451e-02, -3.185e-02, 1.815e-03, -5.245e-02, 1.815e-02, 5.925e-02, 9.235e-02, 7.569e-03, 1.995e-02, -4.682e-02, -3.448e-02, 2.157e-02, 2.450e-02, -1.731e-02, -1.648e-02) * s2[y+0][x+2];
	r += M4(7.718e-02, -7.839e-02, -3.592e-02, -9.546e-02, -3.040e-02, -8.923e-02, 1.064e-01, 6.138e-02, -8.968e-02, -7.401e-02, -9.165e-03, 5.576e-02, 3.487e-02, -3.605e-02, -3.749e-02, -3.869e-02) * s2[y+1][x+0];
	r += M4(-8.968e-02, 1.889e-01, 6.357e-02, 1.304e-01, 1.221e-01, -1.642e-01, 1.576e-02, -2.189e-01, 2.255e-01, 1.051e-01, -1.606e-01, -1.137e-01, -1.437e-01, -1.569e-01, 1.414e-01, -4.348e-02) * s2[y+1][x+1];
	r += M4(9.628e-02, -3.457e-02, 7.095e-02, 6.547e-02, -6.964e-02, 1.117e-03, 2.875e-02, 1.572e-01, -3.543e-02, -5.718e-02, -2.621e-02, -5.394e-03, 1.091e-01, 1.322e-01, -9.271e-03, -4.949e-03) * s2[y+1][x+2];
	r += M4(-3.632e-03, -1.053e-04, 1.145e-02, 2.376e-02, -2.900e-02, -2.142e-01, -3.899e-02, -1.963e-02, -2.407e-02, -5.970e-02, -2.152e-02, -1.591e-02, -2.261e-03, 8.977e-03, 3.213e-02, 5.250e-03) * s2[y+2][x+0];
	r += M4(-8.912e-02, 8.228e-03, -1.002e-02, -2.522e-02, 3.958e-02, -9.697e-02, -3.246e-02, 9.300e-02, 1.451e-01, 7.800e-02, 3.039e-02, -9.432e-03, -1.243e-01, -5.298e-02, -1.136e-02, -2.439e-02) * s2[y+2][x+1];
	r += M4(2.501e-02, 1.472e-02, -1.393e-03, -8.552e-03, -8.374e-02, 1.412e-01, -2.125e-02, -1.965e-02, -1.625e-02, -3.821e-02, 2.570e-02, 7.412e-03, 3.670e-02, 9.456e-03, -5.716e-02, -2.412e-02) * s2[y+2][x+2];
	r += M4(4.519e-02, -1.100e-01, -4.173e-02, 1.144e-02, -5.031e-02, -1.356e-03, -6.639e-03, -1.458e-03, -1.509e-02, 9.074e-03, 7.327e-03, -4.958e-02, 3.880e-03, 3.579e-02, 4.336e-02, 2.175e-02) * s3[y+0][x+0];
	r += M4(-1.541e-01, 4.314e-02, -1.663e-01, -2.390e-01, 2.851e-02, 6.238e-02, -7.504e-02, -1.370e-02, -2.959e-03, 1.884e-02, -1.851e-01, -1.411e-01, -1.626e-02, -1.774e-01, -5.303e-02, -5.044e-02) * s3[y+0][x+1];
	r += M4(5.630e-02, -6.460e-02, -4.450e-02, 1.250e-01, 1.856e-02, -1.145e-02, -3.941e-02, -3.197e-02, 2.636e-02, -3.242e-02, 3.388e-02, -1.597e-02, 6.476e-02, 1.314e-02, 1.623e-01, 1.498e-01) * s3[y+0][x+2];
	r += M4(-6.659e-02, -2.411e-01, -2.516e-01, 8.893e-02, 1.171e-02, -1.943e-02, -4.853e-02, 1.505e-04, -5.931e-02, -2.720e-02, 2.073e-02, -3.756e-02, 1.299e-01, -9.373e-02, -4.382e-02, -2.257e-02) * s3[y+1][x+0];
	r += M4(5.235e-02, 1.340e-01, 6.070e-02, -4.750e-02, -7.408e-02, -1.018e-01, 1.145e-01, -8.603e-02, 2.547e-01, 2.609e-01, -7.649e-01, -2.765e-01, -1.172e-01, -5.923e-01, 5.149e-01, 7.532e-05) * s3[y+1][x+1];
	r += M4(4.152e-02, 3.000e-03, 1.306e-01, -3.074e-02, 4.066e-02, 1.201e-03, 1.355e-02, 3.210e-02, -6.981e-02, -1.785e-01, -1.834e-02, 3.408e-02, 6.059e-02, 2.794e-01, -2.141e-01, -1.195e-01) * s3[y+1][x+2];
	r += M4(5.892e-02, -1.750e-02, 5.827e-02, 4.766e-02, -1.657e-02, 2.303e-02, 1.948e-02, -4.085e-02, -3.261e-02, -5.741e-02, 9.247e-03, 2.674e-02, -3.102e-02, -1.781e-03, 5.290e-02, 5.467e-02) * s3[y+2][x+0];
	r += M4(-1.132e-01, -1.019e-01, -5.762e-03, 8.652e-02, -8.080e-03, -1.200e-01, -2.867e-02, 3.166e-02, 1.166e-01, 4.989e-02, 9.285e-02, -7.676e-02, -1.878e-01, -8.417e-02, 4.745e-03, 3.421e-02) * s3[y+2][x+1];
	r += M4(-3.888e-03, -1.893e-02, -1.640e-02, 1.342e-02, -1.586e-02, 8.189e-02, -4.561e-03, -2.051e-02, 1.139e-02, -1.114e-02, 6.068e-02, -1.307e-02, 1.066e-01, 7.659e-02, 4.428e-02, 5.389e-02) * s3[y+2][x+2];
	r += V4(-1.236e-03, -1.860e-03, 3.180e-03, 2.795e-03);
	return vec4(r);
}
vec4 f1(int x, int y) {
	V4 r = V4(0.0);
	r += M4(2.071e-02, 1.061e-03, 2.331e-02, -3.214e-02, 3.196e-02, -3.485e-02, -3.060e-02, 4.056e-02, 4.553e-02, -2.023e-02, -2.998e-03, 6.169e-02, 4.898e-02, -2.122e-02, 3.723e-02, 3.678e-02) * s0[y+0][x+0];
	r += M4(1.321e-02, -5.705e-02, -1.478e-02, 7.362e-02, 9.702e-03, -1.947e-02, -7.251e-02, 6.018e-02, 2.290e-02, 5.191e-02, -6.002e-02, 1.451e-01, 9.205e-02, -8.317e-02, -4.469e-02, 1.841e-01) * s0[y+0][x+1];
	r += M4(-1.294e-02, 2.389e-02, 6.576e-03, -2.312e-02, -1.678e-02, 3.725e-03, 4.716e-03, -5.703e-04, 1.554e-02, -2.443e-02, -8.517e-02, 3.248e-03, 4.625e-03, -3.235e-02, 1.756e-03, 4.089e-02) * s0[y+0][x+2];
	r += M4(-1.590e-02, -3.231e-03, 1.827e-02, 2.292e-02, -4.482e-03, -1.984e-02, 7.062e-03, 5.795e-02, -3.224e-02, 4.501e-02, -1.935e-02, 6.112e-02, -4.148e-02, -7.807e-02, -2.354e-02, 3.786e-02) * s0[y+1][x+0];
	r += M4(-3.168e-02, 5.327e-02, 1.904e-03, 2.791e-02, -9.169e-02, 5.477e-02, -2.588e-02, -1.326e-02, -1.209e-01, 2.117e-01, -2.424e-02, 7.748e-02, -2.369e-01, -4.137e-02, 9.108e-02, -2.664e-01) * s0[y+1][x+1];
	r += M4(2.298e-02, 8.013e-02, 2.456e-02, -5.029e-02, 4.113e-02, -9.394e-02, -8.814e-02, 1.493e-01, -1.123e-01, 1.275e-02, -1.901e-02, 2.457e-02, -3.916e-02, 1.124e-01, 7.181e-02, -4.570e-02) * s0[y+1][x+2];
	r += M4(1.989e-02, 2.297e-02, 9.518e-03, 1.468e-02, -3.248e-02, 1.107e-02, -1.155e-02, 2.894e-03, -2.797e-02, 1.424e-02, -1.643e-02, 4.394e-02, 1.300e-02, -2.759e-04, 1.779e-02, 1.342e-02) * s0[y+2][x+0];
	r += M4(5.116e-02, -1.681e-02, 2.362e-02, 3.448e-02, -7.137e-03, 7.929e-03, 4.016e-02, 2.308e-02, -7.530e-03, 4.621e-02, -4.624e-02, -4.955e-02, 1.229e-01, 4.635e-02, -5.245e-03, 1.229e-02) * s0[y+2][x+1];
	r += M4(-2.531e-02, -1.756e-02, -2.473e-02, -2.323e-03, -3.634e-02, 2.966e-02, -9.998e-03, -2.568e-02, -1.420e-02, 5.758e-02, 6.976e-03, 4.390e-02, 3.723e-02, -1.784e-02, -4.177e-02, -8.946e-03) * s0[y+2][x+2];
	r += M4(-1.466e-02, 2.493e-02, 3.553e-02, -6.568e-02, 4.960e-02, -4.513e-02, -3.122e-02, 4.242e-02, 1.407e-02, -9.170e-03, -7.673e-03, 2.572e-02, 4.254e-02, -6.560e-02, 8.645e-03, -7.533e-02) * s1[y+0][x+0];
	r += M4(9.610e-02, -1.346e-01, 3.023e-02, -1.996e-02, -6.597e-02, 1.927e-02, -9.154e-03, -7.896e-02, 5.212e-02, -2.715e-02, 3.213e-02, 5.684e-02, 1.003e-01, -1.665e-01, -1.644e-01, 1.407e-01) * s1[y+0][x+1];
	r += M4(4.417e-02, -8.442e-02, 2.991e-02, 2.790e-02, -4.672e-03, 9.068e-03, 7.739e-02, 3.401e-02, 6.907e-02, 2.951e-02, 5.993e-02, -3.732e-03, 6.101e-03, -6.026e-02, -3.944e-02, 7.458e-02) * s1[y+0][x+2];
	r += M4(1.972e-02, -4.388e-02, 7.691e-02, -4.096e-02, 8.862e-03, 4.119e-03, 5.326e-02, 5.599e-02, 1.254e-02, -8.640e-03, 5.840e-02, 1.414e-02, 1.120e-01, -4.071e-01, 2.286e-02, 8.450e-02) * s1[y+1][x+0];
	r += M4(6.170e-01, -1.032e+00, 4.681e-02, 1.628e-01, 1.254e-01, 1.807e-01, -1.023e-01, 5.161e-01, -8.570e-02, -1.302e-02, 2.637e-02, 5.557e-02, -1.984e-01, 6.247e-02, 3.063e-01, -2.962e-01) * s1[y+1][x+1];
	r += M4(-3.758e-02, -2.566e-01, 1.197e-01, 2.770e-01, 2.441e-01, -8.187e-02, -1.846e-01, 9.909e-02, -8.415e-02, -6.084e-02, 7.777e-03, -9.206e-02, -5.151e-02, 2.383e-02, 3.220e-02, -6.661e-02) * s1[y+1][x+2];
	r += M4(6.890e-02, -5.606e-02, -1.733e-02, -1.369e-02, -1.421e-01, 9.438e-02, -6.141e-02, 6.149e-02, -2.234e-02, -1.136e-02, -2.277e-02, -7.914e-03, -5.562e-02, -9.396e-02, -1.389e-02, 6.394e-02) * s1[y+2][x+0];
	r += M4(-4.569e-02, -1.894e-01, -2.059e-02, 7.952e-02, -2.460e-01, 1.234e-01, 2.132e-02, 2.310e-01, -8.529e-03, -6.770e-03, -4.560e-02, 4.727e-03, 2.686e-01, 3.307e-02, -7.857e-03, -1.850e-02) * s1[y+2][x+1];
	r += M4(7.756e-02, -4.699e-03, 2.893e-03, 4.366e-02, -2.129e-01, 9.495e-03, -7.950e-02, 2.350e-02, 1.076e-01, 4.640e-02, 4.816e-02, 5.893e-02, 6.926e-03, -4.132e-02, -4.595e-02, -2.587e-02) * s1[y+2][x+2];
	r += M4(-6.470e-02, 3.747e-02, -3.983e-03, -8.642e-03, -4.011e-02, 2.460e-02, -7.604e-03, -6.227e-02, 4.204e-03, -3.498e-02, -4.303e-02, 1.215e-02, 2.007e-02, 2.628e-02, 1.960e-03, 5.521e-02) * s2[y+0][x+0];
	r += M4(-2.557e-02, 1.223e-01, 1.645e-01, -2.233e-01, -2.201e-02, 1.417e-01, 6.733e-02, -1.678e-01, -2.708e-02, 5.152e-02, 5.624e-03, -1.171e-01, 6.491e-02, 5.232e-02, 7.606e-02, -1.341e-02) * s2[y+0][x+1];
	r += M4(-1.207e-02, -2.042e-02, -5.985e-02, 1.179e-02, 2.571e-02, -1.460e-02, -2.530e-02, 4.335e-02, 1.277e-02, -4.166e-04, -4.784e-02, 2.488e-02, 2.866e-02, -1.382e-02, 8.994e-03, 1.442e-02) * s2[y+0][x+2];
	r += M4(4.006e-02, 4.354e-02, -1.189e-02, -6.898e-02, 2.014e-02, 6.128e-02, 2.019e-02, -1.419e-01, 5.263e-03, -1.526e-02, 3.016e-03, 1.184e-02, -2.165e-02, -3.723e-02, -3.455e-02, -2.521e-02) * s2[y+1][x+0];
	r += M4(8.886e-02, 1.325e-02, -1.159e-01, -5.692e-02, 8.471e-02, -1.798e-01, 2.329e-01, -9.726e-01, 1.146e-01, 4.058e-02, -5.798e-02, -1.896e-02, -1.571e-01, -1.228e-01, -7.105e-03, -2.135e-01) * s2[y+1][x+1];
	r += M4(-4.155e-03, 4.873e-03, 1.405e-02, 1.472e-02, -1.960e-01, 1.103e-01, 2.287e-01, -4.796e-01, 5.459e-03, -5.399e-02, -2.449e-02, 4.005e-02, -7.983e-02, -2.822e-02, 4.933e-02, 2.257e-02) * s2[y+1][x+2];
	r += M4(-1.874e-02, -7.155e-04, -3.625e-02, -3.750e-02, -5.406e-02, -6.730e-04, -1.135e-01, -3.375e-02, -1.717e-02, 1.239e-02, -1.865e-02, 3.487e-02, -1.885e-02, 2.160e-02, 2.040e-02, -7.096e-03) * s2[y+2][x+0];
	r += M4(-2.247e-02, -5.397e-02, -1.795e-02, -4.748e-02, -1.056e-04, -1.006e-01, -1.824e-01, -3.970e-01, -6.221e-02, 6.774e-02, 5.074e-02, 4.578e-02, 9.360e-02, -2.714e-02, -1.596e-02, -4.798e-02) * s2[y+2][x+1];
	r += M4(-2.689e-02, -1.274e-02, 2.508e-02, -2.502e-02, 1.031e-01, -1.077e-01, -1.467e-01, -1.052e-01, 1.898e-02, 6.655e-02, 4.964e-02, 4.365e-02, 4.411e-02, 2.432e-02, -1.810e-02, -4.098e-02) * s2[y+2][x+2];
	r += M4(-8.820e-02, 1.587e-01, -4.073e-02, -1.894e-02, 1.260e-02, -1.857e-02, -8.401e-03, -6.678e-05, -1.205e-02, 1.437e-02, -1.996e-02, -2.457e-03, 1.910e-02, 1.468e-02, 4.983e-02, 1.658e-03) * s3[y+0][x+0];
	r += M4(1.226e-01, 4.290e-02, 2.294e-02, -3.107e-01, 5.618e-03, 5.210e-02, 1.217e-02, -4.245e-02, -6.273e-02, 7.961e-03, -5.851e-02, -8.148e-02, 9.327e-02, -2.277e-02, 9.843e-02, -1.586e-02) * s3[y+0][x+1];
	r += M4(5.215e-02, 1.038e-03, -6.910e-02, -3.508e-02, 2.745e-02, -3.460e-02, -1.217e-01, 5.344e-02, 1.625e-02, 3.963e-02, -5.176e-02, 6.490e-02, 1.006e-02, -5.107e-03, 2.507e-02, -3.757e-02) * s3[y+0][x+2];
	r += M4(-8.769e-03, -1.479e-01, -9.799e-02, -1.852e-01, 4.118e-02, -9.522e-03, -3.729e-02, 2.947e-02, 3.061e-03, -3.864e-02, -9.803e-02, -1.618e-02, -6.972e-02, 4.558e-02, 2.780e-03, -6.115e-02) * s3[y+1][x+0];
	r += M4(-3.334e-01, -1.093e-01, -9.590e-02, 2.243e-01, 1.135e-01, -1.043e-01, 1.733e-01, -7.330e-02, 1.284e-01, -7.397e-01, -3.336e-01, 1.759e-02, -2.058e-01, -2.235e-01, -5.382e-02, 4.826e-03) * s3[y+1][x+1];
	r += M4(6.253e-02, 1.245e-01, 1.977e-01, 8.585e-02, -8.274e-02, -2.922e-02, 1.626e-01, 8.072e-02, -4.633e-02, -2.549e-01, -1.276e-01, 2.727e-01, 3.031e-04, -8.203e-02, 7.688e-02, 9.635e-02) * s3[y+1][x+2];
	r += M4(-2.299e-02, 9.806e-02, 6.430e-02, -3.687e-02, -3.672e-02, -5.791e-03, 1.334e-02, 3.772e-02, -5.313e-02, 1.366e-02, 1.546e-02, 6.618e-02, 1.628e-02, 1.432e-02, -2.940e-03, -9.315e-03) * s3[y+2][x+0];
	r += M4(-1.794e-01, -5.602e-02, -5.940e-02, -2.998e-02, -6.212e-02, 1.126e-02, -8.179e-02, -4.881e-03, -5.534e-02, 4.159e-01, 2.153e-01, 1.281e-01, 8.752e-02, -3.488e-02, -6.088e-03, 6.048e-03) * s3[y+2][x+1];
	r += M4(-3.566e-02, 3.188e-02, -3.441e-02, -5.984e-02, 5.930e-02, -6.116e-04, -1.388e-02, 3.713e-02, -9.533e-02, 1.821e-01, 7.866e-02, 3.987e-02, 1.326e-01, 8.975e-02, 3.611e-02, -4.381e-02) * s3[y+2][x+2];
	r += V4(6.427e-04, -4.570e-03, 3.709e-03, 1.184e-02);
	return vec4(r);
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv5_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
			s2[ay][ax] = l1(x - 1, y - 1);
			s1[ay][ax] = -max(-s0[ay][ax], V4(0.0));
			s0[ay][ax] = max(s0[ay][ax], V4(0.0));
			s3[ay][ax] = -max(-s2[ay][ax], V4(0.0));
			s2[ay][ax] = max(s2[ay][ax], V4(0.0));
		}
	}
	barrier();
	vec4 r0 = f0(xy.x, xy.y);
	vec4 r1 = f1(xy.x, xy.y);
	imageStore(out_image, opos + ivec2(0, 0), r0);
	imageStore(out_image, opos + ivec2(1, 0), r1);
}


//!DESC CuNNy-6x8C-RCAS-DS-out
//!HOOK LUMA
//!COMPUTE 8 8 8 8
//!BIND conv6
//!BIND LUMA
//!SAVE out
//!WIDTH LUMA.w
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
	#define V4 f16vec4
	#define M4 f16mat4
	#define F float16_t
#else
	#define V4 vec4
	#define M4 mat4
	#define F float
#endif
#define l0(x, y) V4(texelFetch(conv6_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv6_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 s0[10][10];
shared V4 s1[10][10];
shared V4 s2[10][10];
shared V4 s3[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-4.479e-02, -7.815e-03, 1.528e-03, 3.102e-02, 3.663e-02, -9.701e-03, -1.230e-02, -2.113e-02, -1.698e-02, -3.140e-02, 3.408e-02, 2.275e-02, -1.613e-02, -6.669e-03, 2.267e-02, 3.089e-02) * s0[y+0][x+0];
	r += M4(6.627e-02, -4.431e-03, -6.956e-02, -7.178e-02, -2.565e-03, 1.827e-02, 5.849e-02, 9.170e-03, -5.243e-02, -3.805e-02, -5.671e-03, -1.903e-02, 1.051e-01, 6.685e-02, -6.136e-02, -2.376e-02) * s0[y+0][x+1];
	r += M4(-2.447e-03, -1.729e-02, -3.896e-03, 6.466e-03, -9.937e-03, 5.623e-02, 3.019e-02, 2.257e-02, -2.594e-03, -5.625e-02, 5.883e-03, 1.776e-02, -1.177e-02, 5.716e-03, 2.040e-03, -2.459e-02) * s0[y+0][x+2];
	r += M4(6.761e-02, -1.241e-02, 3.490e-02, -5.057e-02, -4.966e-02, 1.762e-02, 5.772e-02, 5.419e-02, 3.044e-02, 5.140e-02, -7.362e-02, -4.656e-02, 7.981e-02, 3.066e-02, -6.666e-02, -6.625e-02) * s0[y+1][x+0];
	r += M4(-1.707e-02, -8.875e-02, 1.624e-01, 1.175e-01, -8.469e-02, -5.521e-02, -2.195e-01, -7.741e-02, 3.975e-01, -2.607e-01, -6.511e-02, -3.506e-01, -6.248e-01, -3.701e-01, 1.753e-01, 2.607e-02) * s0[y+1][x+1];
	r += M4(-4.396e-02, 5.092e-02, -6.582e-02, -2.852e-02, 6.664e-02, -2.858e-02, 5.125e-02, 5.001e-02, -7.519e-02, 2.085e-01, -5.756e-02, -8.874e-02, 1.210e-02, -1.975e-01, -5.139e-02, 8.276e-02) * s0[y+1][x+2];
	r += M4(-2.186e-02, 5.751e-03, -2.246e-02, 2.072e-02, 8.752e-03, -3.604e-03, -2.701e-02, -1.874e-02, 2.534e-02, -4.388e-02, 9.338e-02, -2.047e-02, -4.139e-02, -1.402e-03, -2.341e-03, 2.830e-02) * s0[y+2][x+0];
	r += M4(1.965e-02, 3.258e-02, -1.416e-02, -7.419e-02, 6.012e-03, -1.415e-02, 5.457e-02, -9.608e-03, -1.294e-01, 2.851e-02, 1.495e-02, 1.630e-02, 9.349e-02, 5.502e-02, -1.998e-01, -9.067e-02) * s0[y+2][x+1];
	r += M4(1.866e-02, -1.760e-02, 1.415e-02, 3.122e-02, -2.094e-02, -7.655e-03, 8.210e-03, -4.016e-02, 7.964e-03, -2.363e-02, -3.092e-02, 9.400e-02, -7.348e-03, 1.066e-04, 1.272e-02, -1.457e-01) * s0[y+2][x+2];
	r += M4(-8.498e-02, -1.038e-01, 6.070e-03, 1.277e-02, 9.450e-02, -4.093e-02, -3.025e-03, -1.608e-02, -5.701e-02, -1.581e-02, 6.905e-02, 2.982e-02, -4.220e-02, 3.707e-03, 9.904e-03, 4.489e-02) * s1[y+0][x+0];
	r += M4(-2.251e-01, 4.514e-01, -8.001e-02, -8.903e-02, -1.065e-01, 2.639e-01, 5.229e-02, 5.303e-02, 3.329e-02, -7.768e-02, -3.022e-02, 4.052e-02, 4.072e-02, -2.014e-02, 1.756e-02, -6.519e-03) * s1[y+0][x+1];
	r += M4(6.617e-02, -1.283e-01, -2.554e-02, 3.109e-02, 5.163e-02, -2.265e-02, -4.783e-03, -1.924e-02, -6.593e-03, -2.396e-02, 4.032e-02, 4.436e-02, -7.636e-03, 2.897e-02, -1.084e-02, -3.242e-02) * s1[y+0][x+2];
	r += M4(8.538e-02, -6.326e-02, -1.063e-02, -1.823e-01, 1.340e-01, -4.382e-02, 1.714e-01, -5.925e-02, 8.237e-02, -9.017e-03, -1.374e-02, -4.125e-02, 5.065e-03, 1.626e-02, -4.856e-02, -4.757e-02) * s1[y+1][x+0];
	r += M4(-2.143e-01, 9.671e-02, -4.307e-01, 7.833e-01, -6.419e-01, 1.875e-01, -7.417e-01, 3.350e-01, 9.803e-02, -3.724e-02, -4.706e-02, -2.647e-01, -1.096e-01, -2.486e-02, 9.731e-03, 2.051e-02) * s1[y+1][x+1];
	r += M4(3.172e-02, 3.695e-02, 1.303e-01, -2.205e-01, 7.462e-03, 1.192e-01, 5.025e-02, -8.497e-03, -2.239e-02, 1.417e-01, -8.897e-02, 1.453e-02, -2.011e-02, -1.421e-01, -1.143e-02, -1.446e-02) * s1[y+1][x+2];
	r += M4(-5.115e-02, 1.228e-02, -1.340e-02, 6.793e-04, -2.550e-04, -1.964e-02, 6.782e-02, -4.410e-02, 3.075e-02, -6.696e-03, 5.985e-02, 2.288e-02, -1.996e-02, 2.397e-03, -4.416e-02, -1.500e-03) * s1[y+2][x+0];
	r += M4(-2.718e-02, 1.321e-02, 3.150e-02, -7.362e-02, 5.201e-02, 6.907e-02, -1.352e-01, 4.824e-02, -9.830e-02, 7.102e-03, -2.717e-02, 8.279e-02, 5.354e-03, -1.109e-02, -6.131e-03, -1.333e-02) * s1[y+2][x+1];
	r += M4(1.933e-02, -1.418e-02, 1.696e-02, 8.236e-02, 6.593e-03, -3.641e-02, -6.834e-03, 8.937e-04, 2.093e-03, 9.748e-03, -1.913e-02, 5.932e-02, -1.120e-02, -1.317e-02, -1.356e-02, -7.942e-02) * s1[y+2][x+2];
	r += M4(-2.534e-01, 2.107e-02, 2.883e-01, 7.362e-02, 2.181e-03, 2.595e-02, 1.196e-02, 2.150e-02, -5.046e-02, -4.419e-03, 2.133e-02, -1.198e-02, 1.766e-02, -1.288e-02, 8.498e-03, -5.523e-03) * s2[y+0][x+0];
	r += M4(-2.022e-01, -6.860e-01, 4.010e-01, 5.497e-01, -2.033e-02, 1.062e-02, 9.106e-02, 8.968e-02, -1.200e-01, -1.228e-01, -1.570e-02, 9.303e-03, -4.750e-02, 8.214e-02, -3.270e-02, -1.195e-02) * s2[y+0][x+1];
	r += M4(-1.801e-02, 7.142e-02, -3.314e-03, 4.858e-02, -8.478e-03, -3.287e-03, -4.580e-02, -1.445e-02, 3.641e-02, 3.380e-02, -1.151e-02, -2.680e-03, 3.830e-03, -3.793e-02, -1.024e-02, -1.489e-02) * s2[y+0][x+2];
	r += M4(1.450e-01, 2.117e-02, -1.116e-01, 5.684e-02, 7.541e-02, -2.815e-02, 8.284e-02, 1.642e-02, 1.818e-01, -2.430e-02, -1.676e-01, -8.533e-02, -5.520e-02, 2.514e-03, -2.474e-02, -1.565e-02) * s2[y+1][x+0];
	r += M4(-2.259e-02, 2.935e-02, 1.109e-01, -3.296e-01, -2.491e-01, 1.616e-01, -3.664e-01, -3.723e-02, 3.438e-01, 7.333e-01, -7.739e-02, 2.735e-02, -1.312e-02, -1.096e-01, -7.255e-02, 9.884e-02) * s2[y+1][x+1];
	r += M4(-7.389e-02, -7.056e-03, -1.021e-01, 1.569e-01, 2.531e-02, -6.665e-02, 7.761e-02, -5.468e-03, 1.767e-02, -1.269e-01, 1.837e-02, -5.336e-02, -1.051e-03, -2.989e-02, 2.896e-02, -6.045e-02) * s2[y+1][x+2];
	r += M4(8.172e-03, -5.814e-03, 1.811e-03, 4.546e-02, 2.277e-02, 7.168e-03, 1.086e-02, -1.405e-02, -1.015e-01, 1.947e-02, -1.013e-01, -1.981e-02, 2.061e-02, 1.056e-02, -3.088e-03, 2.110e-02) * s2[y+2][x+0];
	r += M4(-3.675e-02, 1.236e-02, -2.783e-02, -3.478e-02, -1.686e-02, 2.243e-03, -5.171e-02, 8.592e-02, 8.924e-02, -6.417e-02, -4.741e-02, -2.858e-02, 2.840e-03, 1.690e-02, -7.028e-03, -9.471e-02) * s2[y+2][x+1];
	r += M4(8.263e-04, -6.716e-03, -1.605e-02, 1.420e-02, 6.224e-03, 4.802e-04, 1.358e-02, -2.195e-02, 3.062e-02, 3.487e-02, 6.918e-03, -1.343e-01, 3.162e-03, 6.329e-03, -8.043e-03, -6.687e-03) * s2[y+2][x+2];
	r += M4(-6.403e-02, 6.645e-02, 3.357e-02, 6.321e-02, -2.115e-01, -1.215e-02, 2.496e-01, 3.776e-02, 4.298e-02, -1.856e-02, -3.279e-02, -2.374e-02, 7.314e-03, -1.179e-02, 9.163e-03, -2.135e-02) * s3[y+0][x+0];
	r += M4(1.235e-01, -1.876e-01, 8.567e-02, 5.440e-02, -2.368e-01, -4.342e-01, 2.642e-01, 4.557e-01, -3.313e-02, 7.422e-02, -1.312e-01, -1.294e-01, -1.067e-01, -5.997e-02, -1.622e-02, -8.325e-03) * s3[y+0][x+1];
	r += M4(-4.144e-02, 8.929e-02, -1.143e-02, 2.939e-02, -6.472e-02, 1.859e-02, -2.054e-02, 8.912e-02, 1.864e-02, 2.469e-02, 1.277e-02, -1.001e-02, 2.018e-03, -1.502e-02, -2.484e-02, -1.037e-02) * s3[y+0][x+2];
	r += M4(4.626e-02, 3.064e-02, -3.690e-02, 4.592e-02, 1.432e-01, -1.427e-02, 8.899e-02, -3.901e-02, -3.455e-02, -3.518e-02, 2.507e-02, -4.221e-02, -6.909e-02, 2.218e-02, -5.519e-02, 2.289e-02) * s3[y+1][x+0];
	r += M4(-4.767e-02, -1.440e-01, 6.208e-02, -2.886e-01, -7.104e-02, 2.141e-01, -4.557e-01, -4.459e-02, 5.675e-02, 1.559e-01, 1.890e-01, 3.487e-01, -1.569e-01, -2.984e-01, -2.849e-01, -2.463e-01) * s3[y+1][x+1];
	r += M4(-3.526e-02, 2.449e-02, -1.136e-01, 9.510e-02, 3.740e-02, -3.159e-02, 6.821e-02, -9.058e-02, -2.724e-02, -1.022e-01, 4.950e-03, 1.108e-02, 8.798e-03, -2.844e-03, 6.207e-02, -3.107e-02) * s3[y+1][x+2];
	r += M4(3.493e-02, 1.531e-02, 7.440e-03, 3.356e-02, 8.723e-03, -3.074e-03, -3.052e-03, -1.898e-02, -5.732e-02, -2.395e-03, -4.645e-02, -2.377e-02, 1.573e-02, 2.859e-03, 3.070e-03, 1.416e-02) * s3[y+2][x+0];
	r += M4(-7.101e-03, 5.504e-02, -5.027e-02, -6.790e-02, -2.299e-02, -1.892e-02, -1.005e-02, 2.495e-02, 2.020e-02, -4.143e-02, 2.367e-02, 6.519e-02, 1.507e-02, 3.712e-02, 4.065e-02, -6.487e-02) * s3[y+2][x+1];
	r += M4(-5.538e-03, -2.111e-03, -3.460e-03, 1.073e-02, -7.117e-03, -1.129e-02, -2.313e-03, -1.634e-02, 9.259e-03, 2.852e-02, 1.794e-03, -7.877e-02, 1.013e-02, 4.656e-03, -1.416e-02, 2.879e-02) * s3[y+2][x+2];
	r += V4(2.190e-04, 7.160e-04, 1.383e-04, 6.079e-04);
	return tanh(vec4(r));
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(1, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv6_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
			s2[ay][ax] = l1(x - 1, y - 1);
			s1[ay][ax] = -max(-s0[ay][ax], V4(0.0));
			s0[ay][ax] = max(s0[ay][ax], V4(0.0));
			s3[ay][ax] = -max(-s2[ay][ax], V4(0.0));
			s2[ay][ax] = max(s2[ay][ax], V4(0.0));
		}
	}
	barrier();
	vec4 r0 = f0(xy.x, xy.y);
	imageStore(out_image, opos + ivec2(0, 0), r0);
}


//!DESC CuNNy-6x8C-RCAS-DS-shuffle
//!HOOK LUMA
//!BIND out
//!BIND rcas
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 1
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
	#define V4 f16vec4
	#define M4 f16mat4
	#define F float16_t
#else
	#define V4 vec4
	#define M4 mat4
	#define F float
#endif
vec4 hook() {
	vec4 r = vec4(0.0);
	vec2 f = fract(out_pos * out_size);
	ivec2 i = ivec2(f * vec2(2.0));
	r.r = out_tex((vec2(0.5) - f) * out_pt + out_pos)[2*i.y + i.x];
	r.r += rcas_tex(rcas_pos).r;
	r.a = 1.0;
	return clamp(r, 0.0, 1.0);
}
