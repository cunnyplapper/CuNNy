// CuNNy 8x8C
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

// FSR mpv | modified
// Copyright (c) 2021 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// FidelityFX FSR v1.0.2 by AMD
// ported to mpv by agyild

//!DESC CuNNy-EASU
//!HOOK LUMA
//!BIND LUMA
//!SAVE easu
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
//!COMPONENTS 1

float APrxLoRcpF1(float a) {
	return uintBitsToFloat(uint(0x7ef07ebb) - floatBitsToUint(a));
}

float APrxLoRsqF1(float a) {
	return uintBitsToFloat(uint(0x5f347d74) - (floatBitsToUint(a) >> uint(1)));
}

float AMin3F1(float x, float y, float z) {
	return min(x, min(y, z));
}

float AMax3F1(float x, float y, float z) {
	return max(x, max(y, z));
}

void tap(inout float aC, inout float aW, vec2 off, vec2 dir, vec2 len,
         float lob, float clp, float c){
	vec2 v;
	v.x = (off.x * ( dir.x)) + (off.y * dir.y);
	v.y = (off.x * (-dir.y)) + (off.y * dir.x);
	v *= len;
	float d2 = v.x * v.x + v.y * v.y;
	d2 = min(d2, clp);
	float wB = float(2.0 / 5.0) * d2 + -1.0;
	float wA = lob * d2 + -1.0;
	wB *= wB;
	wA *= wA;
	wB = float(25.0 / 16.0) * wB + float(-(25.0 / 16.0 - 1.0));
	float w = wB * wA;
	aC += c * w;
	aW += w;
}

void set(inout vec2 dir, inout float len, vec2 pp, bool biS, bool biT,
         bool biU, bool biV, float lA, float lB, float lC, float lD, float lE){
	float w = 0.0;
	if (biS)
		w = (1.0 - pp.x) * (1.0 - pp.y);
	if (biT)
		w =        pp.x  * (1.0 - pp.y);
	if (biU)
		w = (1.0 - pp.x) *        pp.y;
	if (biV)
		w =        pp.x  *        pp.y;
	float dc = lD - lC;
	float cb = lC - lB;
	float lenX = max(abs(dc), abs(cb));
	lenX = APrxLoRcpF1(lenX);
	float dirX = lD - lB;
	lenX = clamp(abs(dirX) * lenX, 0.0, 1.0);
	lenX *= lenX;
	float ec = lE - lC;
	float ca = lC - lA;
	float lenY = max(abs(ec), abs(ca));
	lenY = APrxLoRcpF1(lenY);
	float dirY = lE - lA;
	lenY = clamp(abs(dirY) * lenY, 0.0, 1.0);
	lenY *= lenY;
	dir += vec2(dirX, dirY) * w;
	len += dot(vec2(w), vec2(lenX, lenY));
}

vec4 hook() {
	vec4 pix = vec4(0.0, 0.0, 0.0, 1.0);
	vec2 pp = LUMA_pos * LUMA_size - vec2(0.5);
	vec2 fp = floor(pp);
	pp -= fp;
#if (defined(LUMA_gather) && (__VERSION__ >= 400 || (GL_ES && __VERSION__ >= 310)))
	vec4 bczzL = LUMA_gather(vec2((fp + vec2(1.0, -1.0)) * LUMA_pt), 0);
	vec4 ijfeL = LUMA_gather(vec2((fp + vec2(0.0,  1.0)) * LUMA_pt), 0);
	vec4 klhgL = LUMA_gather(vec2((fp + vec2(2.0,  1.0)) * LUMA_pt), 0);
	vec4 zzonL = LUMA_gather(vec2((fp + vec2(1.0,  3.0)) * LUMA_pt), 0);
#else
	float b = LUMA_tex(vec2((fp + vec2(0.5, -0.5)) * LUMA_pt)).r;
	float c = LUMA_tex(vec2((fp + vec2(1.5, -0.5)) * LUMA_pt)).r;
	float e = LUMA_tex(vec2((fp + vec2(-0.5, 0.5)) * LUMA_pt)).r;
	float f = LUMA_tex(vec2((fp + vec2( 0.5, 0.5)) * LUMA_pt)).r;
	float g = LUMA_tex(vec2((fp + vec2( 1.5, 0.5)) * LUMA_pt)).r;
	float h = LUMA_tex(vec2((fp + vec2( 2.5, 0.5)) * LUMA_pt)).r;
	float i = LUMA_tex(vec2((fp + vec2(-0.5, 1.5)) * LUMA_pt)).r;
	float j = LUMA_tex(vec2((fp + vec2( 0.5, 1.5)) * LUMA_pt)).r;
	float k = LUMA_tex(vec2((fp + vec2( 1.5, 1.5)) * LUMA_pt)).r;
	float l = LUMA_tex(vec2((fp + vec2( 2.5, 1.5)) * LUMA_pt)).r;
	float n = LUMA_tex(vec2((fp + vec2(0.5, 2.5) ) * LUMA_pt)).r;
	float o = LUMA_tex(vec2((fp + vec2(1.5, 2.5) ) * LUMA_pt)).r;
	vec4 bczzL = vec4(b, c, 0.0, 0.0);
	vec4 ijfeL = vec4(i, j, f, e);
	vec4 klhgL = vec4(k, l, h, g);
	vec4 zzonL = vec4(0.0, 0.0, o, n);
#endif
	float bL = bczzL.x;
	float cL = bczzL.y;
	float iL = ijfeL.x;
	float jL = ijfeL.y;
	float fL = ijfeL.z;
	float eL = ijfeL.w;
	float kL = klhgL.x;
	float lL = klhgL.y;
	float hL = klhgL.z;
	float gL = klhgL.w;
	float oL = zzonL.z;
	float nL = zzonL.w;
	vec2 dir = vec2(0.0);
	float len = 0.0;
	set(dir, len, pp, true, false, false, false, bL, eL, fL, gL, jL);
	set(dir, len, pp, false, true, false, false, cL, fL, gL, hL, kL);
	set(dir, len, pp, false, false, true, false, fL, iL, jL, kL, nL);
	set(dir, len, pp, false, false, false, true, gL, jL, kL, lL, oL);
	vec2 dir2 = dir * dir;
	float dirR = dir2.x + dir2.y;
	bool zro = dirR < float(1.0 / 32768.0);
	dirR = APrxLoRsqF1(dirR);
	dirR = zro ? 1.0 : dirR;
	dir.x = zro ? 1.0 : dir.x;
	dir *= vec2(dirR);
	len = len * 0.5;
	len *= len;
	float stretch = (dir.x * dir.x + dir.y * dir.y) * APrxLoRcpF1(max(abs(dir.x), abs(dir.y)));
	vec2 len2 = vec2(1.0 + (stretch - 1.0) * len, 1.0 + -0.5 * len);
	float lob = 0.5 + float((1.0 / 4.0 - 0.04) - 0.5) * len;
	float clp = APrxLoRcpF1(lob);
	float aC = 0.0;
	float aW = 0.0;
	tap(aC, aW, vec2( 0.0,-1.0) - pp, dir, len2, lob, clp, bL);
	tap(aC, aW, vec2( 1.0,-1.0) - pp, dir, len2, lob, clp, cL);
	tap(aC, aW, vec2(-1.0, 1.0) - pp, dir, len2, lob, clp, iL);
	tap(aC, aW, vec2( 0.0, 1.0) - pp, dir, len2, lob, clp, jL);
	tap(aC, aW, vec2( 0.0, 0.0) - pp, dir, len2, lob, clp, fL);
	tap(aC, aW, vec2(-1.0, 0.0) - pp, dir, len2, lob, clp, eL);
	tap(aC, aW, vec2( 1.0, 1.0) - pp, dir, len2, lob, clp, kL);
	tap(aC, aW, vec2( 2.0, 1.0) - pp, dir, len2, lob, clp, lL);
	tap(aC, aW, vec2( 2.0, 0.0) - pp, dir, len2, lob, clp, hL);
	tap(aC, aW, vec2( 1.0, 0.0) - pp, dir, len2, lob, clp, gL);
	tap(aC, aW, vec2( 1.0, 2.0) - pp, dir, len2, lob, clp, oL);
	tap(aC, aW, vec2( 0.0, 2.0) - pp, dir, len2, lob, clp, nL);
	pix.r = aC / aW;
	float min1 = min(AMin3F1(fL, gL, jL), kL);
	float max1 = max(AMax3F1(fL, gL, jL), kL);
	pix.r = clamp(pix.r, min1, max1);
	pix.r = clamp(pix.r, 0.0, 1.0);
	return pix;
}


//!DESC CuNNy-8x8C-in
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND LUMA
//!SAVE in
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) F(texelFetch(LUMA_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(1, 1) + ivec2(0, 0), 0).r)
shared F s0[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += V4(-4.013e-03, -3.198e-02, 5.638e-02, 3.623e-02) * s0[y+0][x+0];
	r += V4(6.008e-02, 4.327e-02, 4.375e-02, -2.261e-01) * s0[y+0][x+1];
	r += V4(2.458e-02, -6.905e-03, -4.032e-02, 6.350e-02) * s0[y+0][x+2];
	r += V4(4.334e-01, -2.625e-02, 3.074e-01, 2.121e-02) * s0[y+1][x+0];
	r += V4(-2.705e-01, -2.789e-03, -3.664e-01, 4.035e-01) * s0[y+1][x+1];
	r += V4(-1.476e-01, -2.589e-01, -1.761e-02, -1.406e-01) * s0[y+1][x+2];
	r += V4(1.262e-02, 1.382e-01, 2.722e-02, -7.449e-02) * s0[y+2][x+0];
	r += V4(-2.058e-01, -1.699e-01, -4.646e-02, 6.239e-02) * s0[y+2][x+1];
	r += V4(1.018e-01, 6.621e-02, 3.972e-02, 7.822e-02) * s0[y+2][x+2];
	r += V4(-1.195e-02, 9.982e-02, 2.057e-02, -1.672e-03);
	return vec4(r);
}
vec4 f1(int x, int y) {
	V4 r = V4(0.0);
	r += V4(-5.126e-03, -1.912e-02, 5.182e-01, 2.347e-02) * s0[y+0][x+0];
	r += V4(8.373e-02, -1.552e-02, 9.971e-03, 2.137e-01) * s0[y+0][x+1];
	r += V4(3.916e-01, 4.252e-02, -7.899e-03, 8.340e-02) * s0[y+0][x+2];
	r += V4(1.604e-03, 8.812e-02, -8.417e-03, 2.021e-01) * s0[y+1][x+0];
	r += V4(-4.835e-01, -2.447e-01, -1.061e-02, -9.093e-02) * s0[y+1][x+1];
	r += V4(1.341e-02, 2.163e-01, 3.759e-03, 4.641e-02) * s0[y+1][x+2];
	r += V4(-8.008e-04, -2.954e-02, -1.039e-02, -8.179e-02) * s0[y+2][x+0];
	r += V4(2.336e-03, -1.832e-01, 7.570e-03, -2.234e-01) * s0[y+2][x+1];
	r += V4(-2.353e-03, -2.688e-01, -1.861e-03, -2.112e-01) * s0[y+2][x+2];
	r += V4(-3.833e-04, 3.977e-01, -7.400e-03, 8.092e-03);
	return vec4(r);
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = LUMA_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
		}
	}
	barrier();
	vec4 r0 = f0(xy.x, xy.y);
	vec4 r1 = f1(xy.x, xy.y);
	imageStore(out_image, opos + ivec2(0, 0), r0);
	imageStore(out_image, opos + ivec2(1, 0), r1);
}

//!DESC CuNNy-8x8C-conv1
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND in
//!BIND LUMA
//!SAVE conv1
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(texelFetch(in_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(in_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 s0[10][10];
shared V4 s1[10][10];
shared V4 s2[10][10];
shared V4 s3[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-1.332e-01, 6.160e-02, 1.947e-02, -1.407e-01, 1.299e-01, -1.120e-01, -1.525e-01, 1.429e-02, 7.346e-02, 1.256e-01, -9.128e-03, -4.773e-02, 2.289e-02, 2.978e-02, -1.204e-01, 3.945e-03) * s0[y+0][x+0];
	r += M4(7.971e-02, -1.735e-02, 2.327e-01, 1.496e-01, 9.155e-02, -5.911e-02, 1.753e-01, -5.581e-02, -3.301e-02, 9.678e-02, -8.226e-02, -1.535e-01, 8.205e-02, -5.548e-02, -4.091e-03, 2.328e-01) * s0[y+0][x+1];
	r += M4(1.102e-01, -1.314e-01, 8.971e-02, -3.032e-01, -1.809e-02, -6.535e-02, -5.716e-02, -1.745e-02, 2.611e-02, 1.659e-01, 9.898e-02, 1.974e-02, -2.358e-01, -4.211e-02, 5.227e-02, 9.536e-02) * s0[y+0][x+2];
	r += M4(-4.895e-02, -3.984e-02, -2.784e-03, -1.053e-01, -8.451e-02, 1.499e-01, 8.959e-02, -8.129e-02, -1.020e-01, 8.222e-03, 4.709e-02, 8.851e-02, 2.384e-01, -7.021e-02, 5.094e-03, 1.058e-01) * s0[y+1][x+0];
	r += M4(4.353e-01, -1.548e-01, 4.445e-01, -1.199e-01, 7.287e-02, -2.121e-01, 7.200e-02, -7.478e-02, 2.744e-01, -1.032e-01, -4.767e-02, 9.081e-02, -1.417e-01, -6.243e-02, 1.926e-01, 3.667e-01) * s0[y+1][x+1];
	r += M4(2.475e-01, -2.709e-04, -6.467e-02, -5.939e-02, 3.172e-01, 1.831e-02, 1.008e-01, 5.889e-02, -4.881e-02, -3.276e-01, 2.497e-01, 2.738e-01, -2.715e-01, 5.507e-03, 5.993e-02, -3.900e-03) * s0[y+1][x+2];
	r += M4(2.075e-01, -2.846e-02, 2.097e-01, 3.145e-02, 4.831e-02, -1.443e-01, -7.022e-02, -7.312e-02, -9.454e-02, 4.566e-02, -2.017e-02, -4.490e-02, 1.437e-01, 6.890e-02, -9.572e-02, -9.536e-02) * s0[y+2][x+0];
	r += M4(1.621e-01, 7.278e-02, -6.560e-02, 1.239e-01, -5.070e-02, -4.701e-02, -1.951e-01, 1.278e-01, 5.871e-02, 5.628e-02, -4.677e-02, -2.843e-01, 3.304e-01, 3.272e-01, -1.983e-01, 2.296e-03) * s0[y+2][x+1];
	r += M4(4.515e-01, 2.608e-01, 3.064e-01, 1.499e-01, 7.724e-02, 5.057e-03, -8.717e-02, -1.312e-01, 2.295e-01, 1.612e-02, 4.920e-02, 1.314e-01, 7.300e-02, 1.311e-01, 1.641e-01, 1.658e-01) * s0[y+2][x+2];
	r += M4(-6.803e-02, 1.812e-01, -2.203e-02, -1.272e-01, 7.027e-02, 7.463e-04, -1.250e-01, -9.833e-02, 5.323e-02, -1.130e-02, -6.862e-02, -4.318e-02, 7.791e-02, -2.577e-02, -2.853e-01, 6.546e-02) * s1[y+0][x+0];
	r += M4(-3.132e-02, 2.037e-01, -1.130e-01, 6.817e-02, -3.558e-02, -2.760e-02, 6.714e-02, 3.250e-02, -8.579e-04, 1.428e-01, 1.761e-01, -1.202e-01, 3.430e-01, -5.535e-02, -2.534e-01, 4.865e-01) * s1[y+0][x+1];
	r += M4(-3.154e-01, 2.583e-02, -1.600e-01, -1.326e-01, 1.699e-02, -8.426e-02, 4.832e-02, -6.026e-02, -1.390e-01, 1.420e-01, -2.041e-01, 2.105e-02, -4.145e-01, 5.569e-02, 5.053e-02, 1.822e-01) * s1[y+0][x+2];
	r += M4(-2.674e-02, 1.035e-03, 1.243e-01, -6.860e-02, 3.281e-02, 5.392e-03, 3.285e-02, 4.966e-02, 1.040e-01, -2.094e-02, -1.012e-01, 5.284e-02, 1.774e-01, 3.875e-01, -2.331e-02, 5.475e-01) * s1[y+1][x+0];
	r += M4(1.879e-01, -3.252e-01, -4.155e-02, -1.458e-01, 5.413e-02, -3.023e-01, 9.263e-02, -2.494e-01, -3.312e-01, 5.565e-01, 1.980e-01, 2.368e-01, -7.492e-01, 2.354e-01, 3.829e-02, 1.119e+00) * s1[y+1][x+1];
	r += M4(-1.142e-01, -2.617e-01, 8.950e-02, -1.018e-01, 2.149e-01, 5.795e-03, 2.676e-02, 1.480e-03, -3.689e-01, 2.525e-01, -3.630e-01, 1.922e-02, -6.606e-01, 3.958e-01, -1.190e-01, 2.844e-01) * s1[y+1][x+2];
	r += M4(9.165e-02, -1.587e-01, 4.744e-02, 6.148e-02, 1.304e-01, -5.653e-03, -3.355e-02, -1.489e-01, -2.863e-01, 1.676e-01, -8.636e-02, -8.590e-02, -1.577e-01, 9.393e-02, -4.230e-02, 1.539e-01) * s1[y+2][x+0];
	r += M4(-8.067e-02, -3.161e-01, -3.276e-01, 4.316e-02, 9.088e-02, 9.472e-02, -2.114e-01, -8.357e-02, -2.823e-01, -3.051e-02, 1.915e-01, -5.293e-02, 5.053e-01, 5.531e-01, 7.313e-02, 3.468e-01) * s1[y+2][x+1];
	r += M4(1.717e-01, 2.901e-01, -3.003e-01, 8.309e-02, 3.786e-02, -4.449e-02, -9.661e-02, -2.190e-01, -1.556e-01, -1.752e-01, 1.338e-01, 3.773e-01, 1.023e-01, -2.087e-01, 5.073e-01, 2.778e-01) * s1[y+2][x+2];
	r += M4(2.350e-01, -1.232e-01, 9.406e-02, 1.047e-01, -4.699e-02, -4.649e-03, 7.156e-02, -2.009e-02, 3.075e-02, -3.082e-02, -6.885e-02, -2.409e-03, -1.896e-02, 6.313e-02, -1.126e-01, -1.705e-01) * s2[y+0][x+0];
	r += M4(1.541e-02, 1.125e-01, -1.223e-01, -1.086e-01, -9.097e-02, 4.930e-02, 1.596e-02, 1.568e-02, 4.309e-02, 4.714e-03, 4.003e-02, 3.765e-02, -1.022e-01, -1.996e-01, 1.768e-01, 9.161e-02) * s2[y+0][x+1];
	r += M4(4.773e-02, 3.872e-02, -7.457e-02, -4.796e-02, -4.053e-02, 5.946e-02, -9.243e-02, -2.062e-02, -1.134e-01, -2.036e-02, -7.635e-02, 9.222e-02, 5.716e-03, -6.518e-02, 1.895e-01, 7.173e-02) * s2[y+0][x+2];
	r += M4(-3.548e-01, 2.769e-02, 8.814e-03, 1.812e-01, -2.425e-01, 2.547e-02, 1.854e-01, 5.467e-02, 1.230e-02, -6.176e-02, 1.061e-01, 1.918e-01, 2.985e-02, -1.862e-01, -2.582e-01, -4.698e-02) * s2[y+1][x+0];
	r += M4(1.357e-01, 1.392e-01, -3.963e-01, 3.809e-03, 2.336e-01, 1.213e-01, -1.025e-01, -1.495e-01, 3.646e-02, -5.573e-02, 2.532e-02, -1.233e-01, 2.156e-01, -2.448e-01, -3.353e-01, -1.064e-01) * s2[y+1][x+1];
	r += M4(-8.958e-02, -3.723e-02, 4.133e-01, 1.653e-02, -1.388e-02, -1.126e-01, -5.989e-02, -3.283e-02, 1.249e-01, -6.494e-02, 2.506e-02, 1.346e-01, 1.102e-01, -1.635e-01, -1.890e-01, -1.470e-01) * s2[y+1][x+2];
	r += M4(-2.079e-01, -1.584e-01, 1.621e-01, 1.390e-02, -3.577e-02, 1.555e-01, 3.261e-02, 5.518e-02, 5.961e-02, 3.345e-02, 7.831e-02, 8.170e-02, 1.255e-01, -8.764e-02, 2.527e-02, -1.563e-01) * s2[y+2][x+0];
	r += M4(-5.879e-01, -3.702e-01, -8.123e-01, -1.678e-01, -3.636e-02, -1.219e-01, -7.438e-02, -5.662e-02, -1.065e-01, 9.192e-03, -6.833e-02, -4.994e-02, -4.948e-02, -1.328e-01, -6.468e-02, 3.631e-02) * s2[y+2][x+1];
	r += M4(1.958e-01, -9.683e-02, -3.566e-01, 3.956e-02, 2.687e-02, 5.117e-02, 1.381e-01, 1.270e-01, -1.500e-01, -4.452e-02, -4.710e-02, -3.380e-01, -3.830e-02, 1.439e-01, 1.400e-01, 5.725e-02) * s2[y+2][x+2];
	r += M4(1.910e-02, 1.490e-02, 1.022e-01, 1.130e-01, 5.050e-02, -6.600e-02, -9.696e-04, 4.740e-02, 1.818e-01, 9.938e-02, 1.689e-01, 2.662e-01, 1.112e-02, -1.138e-02, -1.159e-02, -1.685e-01) * s3[y+0][x+0];
	r += M4(-4.900e-03, 5.324e-02, -7.671e-02, -9.859e-02, -7.220e-02, 1.627e-01, 1.534e-01, 1.699e-01, -1.056e-01, -6.073e-03, -1.029e-01, 1.211e-01, -3.233e-02, -1.249e-01, 5.990e-02, 1.597e-01) * s3[y+0][x+1];
	r += M4(7.543e-02, 2.580e-02, 2.553e-04, -1.511e-02, -8.554e-02, 2.927e-01, -3.411e-01, 8.571e-03, 3.424e-01, -5.898e-01, -7.109e-02, 1.288e-01, -1.232e-01, -2.545e-02, 1.498e-01, 3.326e-02) * s3[y+0][x+2];
	r += M4(-1.929e-01, 3.723e-01, 2.914e-01, -3.533e-02, -3.110e-01, -4.182e-01, -7.271e-02, -1.033e-01, -2.311e-01, 4.180e-02, 3.119e-01, 9.117e-02, -1.357e-01, -2.282e-01, -3.487e-01, 7.341e-02) * s3[y+1][x+0];
	r += M4(2.821e-01, 4.159e-01, -2.182e-02, -9.843e-02, 2.961e-02, -3.968e-01, -4.055e-01, -4.313e-01, -3.303e-01, 1.499e+00, -5.959e-01, 6.598e-02, 6.823e-02, -3.470e-01, -1.196e-01, -1.231e-01) * s3[y+1][x+1];
	r += M4(-1.475e-02, -1.808e-01, 1.977e-01, -6.535e-02, 1.013e-01, -1.193e-02, -1.738e-01, -9.554e-02, -4.194e-01, -4.749e-01, 5.369e-01, 5.596e-01, -2.346e-01, -4.535e-02, -2.311e-01, -1.073e-01) * s3[y+1][x+2];
	r += M4(-5.002e-01, 1.579e-01, 5.683e-01, -1.165e-01, -1.194e-01, 1.185e-01, -1.172e-01, 1.615e-01, -8.012e-02, -1.469e-01, -4.865e-01, 8.067e-01, -1.537e-02, -5.306e-02, 1.011e-01, -8.252e-02) * s3[y+2][x+0];
	r += M4(-1.854e-01, -6.442e-01, 1.537e-01, -1.147e-01, 1.125e-01, 1.404e-02, -6.757e-02, 1.525e-01, -1.031e+00, -1.311e+00, -1.852e+00, 1.631e+00, -2.400e-01, 4.748e-02, 2.257e-01, 5.970e-02) * s3[y+2][x+1];
	r += M4(8.419e-02, 9.191e-02, -2.172e-01, 4.015e-02, 2.721e-02, 8.509e-02, 4.781e-01, 3.646e-01, -1.849e+00, -4.371e+00, 9.318e-01, 2.599e+00, -2.773e-02, 4.163e-02, 6.736e-02, 2.779e-02) * s3[y+2][x+2];
	r += V4(6.191e-02, -4.993e-02, -3.502e-02, 3.659e-02);
	return vec4(r);
}
vec4 f1(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-1.669e-01, -1.439e-01, -1.620e-01, -4.274e-02, -2.246e-02, 2.081e-01, 1.249e-01, -2.483e-01, 8.558e-02, -1.694e-02, 3.057e-02, -9.941e-02, 1.499e-01, 6.252e-02, -1.511e-01, 1.975e-02) * s0[y+0][x+0];
	r += M4(-6.158e-01, 2.607e-02, -1.074e-01, 8.035e-02, 1.233e-01, 6.229e-03, -5.226e-02, 4.028e-01, 4.821e-02, -1.799e-01, -4.358e-03, -1.223e-02, 4.042e-02, 1.518e-01, -6.430e-02, -2.327e-02) * s0[y+0][x+1];
	r += M4(-1.892e-01, -4.046e-02, -5.372e-02, 1.370e-01, 7.478e-03, 9.867e-02, 1.861e-01, 2.878e-02, -1.155e-01, 2.799e-01, -1.622e-02, 1.512e-01, -2.237e-02, -3.872e-02, 4.260e-02, -1.567e-01) * s0[y+0][x+2];
	r += M4(-1.008e-01, 6.306e-02, -6.882e-02, 6.245e-02, -5.141e-02, -2.452e-01, 2.104e-01, 7.943e-03, -4.781e-02, 8.648e-02, -1.896e-02, -1.950e-02, -7.493e-02, -1.035e-02, -1.459e-02, -1.069e-01) * s0[y+1][x+0];
	r += M4(-5.612e-02, 4.303e-01, 3.933e-01, 2.778e-01, -2.294e-02, -4.668e-01, -1.955e-01, -6.892e-02, -1.431e-01, 2.257e-01, 2.634e-01, 2.476e-01, 5.985e-02, -2.676e-01, -6.483e-02, -1.506e-01) * s0[y+1][x+1];
	r += M4(1.935e-01, -6.838e-02, 6.299e-02, -1.362e-01, 2.105e-02, 5.419e-02, -7.595e-02, -9.889e-02, 5.950e-02, -6.297e-02, 1.832e-01, 1.199e-01, 7.166e-02, 6.111e-02, 7.714e-02, 4.443e-02) * s0[y+1][x+2];
	r += M4(1.673e-01, -8.597e-02, 4.692e-02, 4.296e-02, -2.266e-01, 5.060e-02, 2.975e-02, 4.092e-02, -8.301e-02, 3.911e-02, -1.593e-01, 4.474e-02, -1.425e-01, -3.721e-03, -7.599e-03, -9.296e-02) * s0[y+2][x+0];
	r += M4(6.885e-02, 1.087e-01, 3.624e-02, -1.367e-02, 1.030e-01, 1.205e-01, -1.057e-01, 4.480e-02, 1.504e-02, -2.055e-01, 2.665e-02, -6.276e-02, -1.340e-02, -8.403e-02, 3.849e-02, -3.864e-02) * s0[y+2][x+1];
	r += M4(1.472e-01, 1.326e-01, -3.329e-02, -3.154e-01, 1.374e-01, 3.935e-02, -1.990e-01, 1.311e-01, -8.976e-03, 1.897e-02, -9.410e-02, 1.180e-01, -1.119e-02, -9.866e-02, 5.387e-02, 1.344e-02) * s0[y+2][x+2];
	r += M4(-7.857e-02, -3.169e-02, -5.001e-02, -7.872e-02, 4.268e-02, -1.962e-01, 1.332e-01, 5.402e-02, -7.522e-03, -1.175e-01, -1.124e-03, -5.220e-02, -1.089e-01, 1.768e-01, -2.394e-01, 1.965e-01) * s1[y+0][x+0];
	r += M4(-9.203e-02, 1.943e-01, 6.998e-02, -1.042e-01, 8.259e-05, 1.441e-01, -1.767e-02, 6.501e-02, -6.073e-02, -5.617e-01, -1.160e-01, -1.499e-01, 6.567e-02, -5.083e-04, -2.493e-01, -1.922e-01) * s1[y+0][x+1];
	r += M4(9.255e-02, 3.175e-01, 3.014e-02, 2.460e-02, -4.141e-02, 1.211e-01, 7.382e-02, 2.492e-02, 1.371e-01, 2.259e-01, -1.751e-01, -1.963e-01, 7.203e-02, 1.492e-01, -2.211e-01, -4.374e-02) * s1[y+0][x+2];
	r += M4(-1.084e-02, 8.879e-03, -7.491e-02, -1.978e-01, -9.019e-02, 7.941e-02, -1.459e-01, -6.376e-03, -1.145e-01, 2.319e-01, 1.233e-01, 1.255e-01, -1.030e-01, 6.845e-02, -2.447e-01, -1.919e-01) * s1[y+1][x+0];
	r += M4(1.947e-01, 4.654e-02, 7.439e-02, 1.600e-02, -5.291e-02, 6.883e-02, 1.183e-01, 9.955e-02, -3.116e-01, 1.494e-01, 2.697e-01, 9.757e-02, 3.644e-01, 1.769e-01, -1.728e-01, -2.947e-01) * s1[y+1][x+1];
	r += M4(3.229e-01, -6.878e-02, -1.248e-01, 2.541e-01, 3.243e-02, -1.155e-01, -1.460e-01, 6.349e-02, 7.875e-01, -1.662e-01, -6.948e-01, -3.734e-01, 1.553e-01, 7.112e-04, 1.867e-02, 3.031e-01) * s1[y+1][x+2];
	r += M4(-3.171e-03, -8.032e-02, 3.577e-02, 2.618e-02, -1.037e-01, -3.757e-02, 1.411e-01, -5.982e-02, 8.491e-02, 4.928e-02, -3.202e-02, -9.166e-02, -4.150e-01, -4.434e-02, -2.833e-01, 2.677e-02) * s1[y+2][x+0];
	r += M4(-7.474e-02, -9.351e-02, 2.838e-02, 1.174e-01, -7.735e-02, 4.585e-02, -1.347e-01, 3.308e-02, -1.642e-01, 1.507e-02, 1.308e-01, -3.407e-01, 3.019e-01, -1.033e-01, 2.088e-01, 8.382e-02) * s1[y+2][x+1];
	r += M4(-1.215e-01, 2.315e-03, 1.802e-01, 7.043e-02, 4.299e-02, -2.016e-02, -1.123e-01, -2.713e-02, 1.267e-01, -5.074e-02, 4.439e-01, -1.474e-01, -4.417e-02, 5.995e-02, 2.308e-01, 1.725e-01) * s1[y+2][x+2];
	r += M4(7.230e-02, 4.020e-02, -1.168e-01, 1.386e-02, -5.647e-02, 1.968e-01, -5.355e-02, -1.528e-01, -2.542e-02, -2.679e-02, 3.724e-02, -2.899e-02, -9.842e-02, 8.905e-02, 4.423e-02, 7.789e-02) * s2[y+0][x+0];
	r += M4(-2.875e-02, -2.978e-01, 2.626e-02, -1.656e-01, 1.489e-01, 8.715e-02, 3.858e-02, 4.407e-03, -4.178e-03, -1.082e-01, -7.953e-02, 2.264e-02, -1.328e-01, 2.119e-01, -4.889e-02, -2.114e-02) * s2[y+0][x+1];
	r += M4(3.379e-02, -1.441e-02, 9.580e-03, 3.014e-02, -6.665e-02, -3.942e-02, -4.043e-03, -2.818e-02, 4.007e-02, 7.113e-03, 4.778e-02, -2.215e-02, -2.844e-01, 1.061e-01, -1.320e-01, 8.982e-02) * s2[y+0][x+2];
	r += M4(-1.306e-01, -2.226e-01, 2.219e-01, 1.250e-01, 2.442e-01, -1.418e-01, 3.861e-02, 3.699e-02, 1.169e-01, 3.267e-02, 5.972e-02, 1.740e-02, 1.662e-01, -1.139e-01, -9.007e-02, 1.930e-01) * s2[y+1][x+0];
	r += M4(-5.162e-01, 2.247e-01, 1.103e+00, 2.406e-01, 6.238e-02, -5.982e-02, -6.939e-02, -3.468e-03, 7.285e-02, 1.704e-01, 1.456e-02, -4.324e-02, -6.024e-02, 1.364e-01, -8.655e-02, 2.373e-01) * s2[y+1][x+1];
	r += M4(-7.230e-02, 3.898e-01, 1.610e-01, 3.568e-02, 5.370e-02, -4.125e-02, -9.596e-03, -5.359e-02, -1.376e-02, -5.099e-02, 1.128e-01, -8.236e-03, 4.593e-02, -6.768e-03, -1.078e-01, 9.482e-03) * s2[y+1][x+2];
	r += M4(-3.025e-01, 9.776e-02, 1.228e-01, 1.309e-02, -5.072e-02, 3.070e-02, 9.819e-03, 1.304e-02, 5.750e-02, -4.334e-02, -3.451e-02, 1.231e-01, 1.472e-02, 3.555e-02, -9.681e-02, -9.876e-03) * s2[y+2][x+0];
	r += M4(9.597e-02, -1.233e-01, 8.564e-01, -2.544e-01, -4.852e-02, -8.632e-02, 5.749e-02, -3.576e-02, -2.991e-02, -1.824e-03, -3.324e-02, -3.235e-03, -5.317e-02, 4.210e-02, 1.100e-01, -1.626e-01) * s2[y+2][x+1];
	r += M4(-6.919e-03, 2.756e-02, -2.006e-01, -1.244e-01, -4.706e-02, 6.123e-02, 1.181e-02, -1.521e-02, 5.866e-03, -4.198e-02, -1.220e-01, 7.623e-02, -1.063e-01, -8.682e-02, -1.293e-01, 2.273e-02) * s2[y+2][x+2];
	r += M4(2.358e-01, 7.420e-02, -5.916e-02, -9.917e-02, -4.851e-01, -1.009e-01, 2.629e-03, 3.699e-01, 3.235e-02, -4.134e-01, -2.706e-01, -5.610e-02, -5.880e-02, 1.841e-01, -2.170e-02, 1.219e-01) * s3[y+0][x+0];
	r += M4(-3.871e-02, -1.905e-01, -4.484e-02, -4.583e-02, -6.826e-01, -1.264e-01, -2.203e-02, 1.742e-01, -4.472e-01, -3.310e-01, -2.366e-01, 4.226e-01, 3.794e-03, -2.488e-02, 1.757e-01, -1.044e-02) * s3[y+0][x+1];
	r += M4(4.303e-02, -2.339e-02, 9.820e-02, 2.869e-02, -3.967e-01, 9.770e-02, -1.204e-01, -2.299e-01, -7.295e-01, 9.116e-01, -4.220e-01, 1.825e-01, -4.469e-02, 2.883e-01, -1.066e-01, 1.473e-02) * s3[y+0][x+2];
	r += M4(3.015e-01, 2.515e-01, -1.785e-02, -6.078e-01, -3.577e-01, 2.836e-01, -2.386e-01, -2.525e-01, -7.744e-01, 1.897e-02, 8.838e-01, 8.547e-01, -1.383e-01, -6.830e-02, 5.218e-02, 9.361e-02) * s3[y+1][x+0];
	r += M4(-6.215e-02, 2.880e-01, -1.259e-01, 2.970e-01, -7.737e-01, 1.621e-01, 1.204e-01, 3.879e-01, 3.040e-01, 1.676e-01, 1.784e+00, 7.214e-01, 3.384e-02, 1.983e-01, -4.831e-02, 1.864e-01) * s3[y+1][x+1];
	r += M4(1.427e-01, 1.006e-01, 5.510e-02, 3.001e-02, -4.707e-01, 5.492e-02, -6.227e-01, -1.496e-01, 5.151e-01, 6.981e-01, -9.299e-01, 6.427e-01, 6.211e-02, -1.038e-01, 2.527e-02, 1.671e-01) * s3[y+1][x+2];
	r += M4(9.439e-02, -7.534e-02, -6.583e-01, -1.443e-02, -2.229e-01, -3.107e-02, -2.241e-02, 1.125e-01, -3.025e-01, -3.108e-01, -5.090e-01, 1.792e-01, -2.397e-02, -1.437e-02, -7.544e-02, 1.193e-01) * s3[y+2][x+0];
	r += M4(-1.553e-01, -1.177e-01, -4.633e-01, 3.068e-01, -6.105e-01, 1.774e-03, 1.271e-01, -5.687e-02, -7.828e-01, 1.386e-01, -3.236e+00, -8.467e-01, 2.809e-01, -6.819e-02, 2.791e-02, -1.044e-02) * s3[y+2][x+1];
	r += M4(-1.812e-01, 7.655e-03, -2.610e-01, 5.214e-02, -1.280e-01, -1.391e-03, -1.802e-01, 1.699e-01, -1.259e+00, -6.139e-02, -2.473e+00, -3.372e+00, 1.896e-01, -1.382e-01, 1.719e-01, 3.888e-03) * s3[y+2][x+2];
	r += V4(-7.651e-02, 1.101e-01, -1.954e-02, 5.930e-02);
	return vec4(r);
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = in_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
			s2[ay][ax] = l1(x - 1, y - 1);
			s1[ay][ax] = -max(-s0[ay][ax], V4(0.0));
			s0[ay][ax] = max(s0[ay][ax], V4(0.0));
			s3[ay][ax] = -max(-s2[ay][ax], V4(0.0));
			s2[ay][ax] = max(s2[ay][ax], V4(0.0));
		}
	}
	barrier();
	vec4 r0 = f0(xy.x, xy.y);
	vec4 r1 = f1(xy.x, xy.y);
	imageStore(out_image, opos + ivec2(0, 0), r0);
	imageStore(out_image, opos + ivec2(1, 0), r1);
}

//!DESC CuNNy-8x8C-conv2
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv1
//!BIND LUMA
//!SAVE conv2
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(texelFetch(conv1_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv1_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 s0[10][10];
shared V4 s1[10][10];
shared V4 s2[10][10];
shared V4 s3[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += M4(7.768e-03, 1.028e-01, 8.866e-02, -5.822e-02, -3.527e-02, 1.597e-01, -1.008e-01, -7.348e-02, -2.087e-01, -9.671e-02, -1.635e-01, 1.220e-01, 1.388e-01, 6.022e-02, 1.333e-01, 3.110e-02) * s0[y+0][x+0];
	r += M4(-1.135e-01, -2.151e-02, -9.646e-02, 1.489e-01, -1.636e-01, -1.858e-01, -9.740e-02, 9.273e-02, -3.859e-02, -1.285e-01, -6.277e-02, 1.958e-02, -1.214e-01, -1.594e-01, -7.658e-02, 1.750e-01) * s0[y+0][x+1];
	r += M4(-2.414e-02, -2.007e-02, 1.113e-01, -1.334e-01, 3.416e-01, 3.089e-02, -2.607e-02, -5.519e-05, 3.609e-02, 1.796e-02, -1.582e-02, 8.519e-02, 1.191e-01, -2.590e-02, -6.419e-02, -6.288e-02) * s0[y+0][x+2];
	r += M4(-9.187e-03, 2.348e-01, -2.606e-02, 4.337e-03, -1.691e-01, -1.091e-01, -4.596e-01, -8.807e-02, 4.575e-02, 2.188e-01, 5.485e-02, -6.864e-02, 1.658e-01, 2.045e-01, 2.486e-01, 8.063e-02) * s0[y+1][x+0];
	r += M4(3.568e-01, 5.110e-01, 1.864e-01, -1.381e-01, 9.697e-02, 3.853e-01, -4.399e-04, 1.178e-01, 1.382e-01, -1.923e-01, -3.542e-01, 1.387e-01, 2.793e-02, -1.760e-01, -2.765e-01, -1.352e-01) * s0[y+1][x+1];
	r += M4(6.764e-02, -1.148e-02, 1.481e-02, 9.496e-02, 2.862e-01, 3.542e-02, 3.526e-01, -3.715e-01, 7.717e-02, 7.981e-02, -2.556e-02, 9.942e-02, 7.175e-02, 8.483e-02, 7.242e-02, -3.804e-02) * s0[y+1][x+2];
	r += M4(3.298e-02, -4.024e-02, 2.987e-02, 1.534e-02, 1.409e-01, 1.587e-01, -2.792e-01, 4.208e-02, 3.495e-02, -6.984e-02, 1.386e-01, -2.338e-02, -6.020e-02, -6.800e-02, 5.546e-02, 8.338e-02) * s0[y+2][x+0];
	r += M4(-1.912e-01, 1.911e-01, 2.111e-02, 7.242e-02, 3.183e-02, 1.591e-02, -5.685e-02, 8.926e-02, 9.587e-02, -4.589e-02, -3.853e-02, 2.708e-02, -3.007e-01, -1.369e-01, -4.148e-02, -3.880e-02) * s0[y+2][x+1];
	r += M4(-1.376e-01, 2.644e-03, 3.226e-02, -2.655e-02, -8.824e-02, -1.416e-02, 3.684e-02, -5.122e-03, -1.593e-02, 1.185e-01, -3.836e-02, -2.111e-02, -6.812e-02, 1.149e-01, 5.497e-02, 6.954e-03) * s0[y+2][x+2];
	r += M4(-4.386e-02, 6.363e-02, 1.906e-01, -1.997e-02, -8.340e-03, -4.663e-02, 2.380e-01, -6.105e-02, 7.392e-02, -3.233e-03, -2.016e-01, -1.182e-04, -4.864e-01, 1.616e-01, 2.521e-01, 1.438e-01) * s1[y+0][x+0];
	r += M4(2.047e-01, 1.367e-02, 1.243e-01, 4.792e-01, -1.525e-01, -2.734e-01, -2.216e-01, 4.337e-01, 1.087e-01, 9.866e-03, -2.236e-01, -8.050e-02, -1.033e-02, -6.227e-01, -1.774e-01, -2.098e-01) * s1[y+0][x+1];
	r += M4(8.061e-02, 1.987e-01, 1.378e-01, -2.114e-01, -3.847e-02, -5.882e-02, -3.465e-02, 7.254e-02, 1.321e-01, 7.779e-02, -5.969e-02, 1.189e-01, 2.560e-01, -2.466e-03, -1.126e-01, -2.161e-01) * s1[y+0][x+2];
	r += M4(5.745e-02, 1.464e-01, 5.964e-02, 1.427e-03, -2.844e-01, -3.895e-01, -2.810e-03, -1.227e-01, 2.733e-01, 1.082e-01, 8.846e-02, 1.351e-02, 5.216e-01, 3.071e-01, 4.549e-01, 2.913e-01) * s1[y+1][x+0];
	r += M4(4.667e-02, 3.506e-01, -1.939e-01, -2.510e-01, 5.551e-02, 3.512e-01, -2.136e-01, 2.445e-01, 3.561e-01, -2.724e-01, -2.041e-01, 8.658e-02, -4.195e-02, -1.381e-01, 1.104e-01, -3.054e-01) * s1[y+1][x+1];
	r += M4(1.911e-01, 2.719e-02, -3.576e-02, 2.301e-01, 2.358e-02, 2.039e-01, 8.104e-02, -1.298e-01, 2.007e-01, 6.320e-02, -4.027e-02, 1.569e-01, -3.595e-01, 5.248e-01, 1.276e-01, 8.438e-02) * s1[y+1][x+2];
	r += M4(1.189e-01, -1.617e-01, 2.245e-01, 3.114e-02, 6.839e-02, 2.096e-02, -1.669e-01, 1.528e-02, -6.783e-03, 2.723e-02, 1.802e-01, -1.158e-01, 7.078e-02, -2.655e-02, 2.182e-02, -3.389e-02) * s1[y+2][x+0];
	r += M4(4.412e-02, 3.272e-02, 1.366e-01, 9.162e-02, 1.951e-01, 2.273e-03, -1.061e-01, -3.765e-02, 5.907e-02, -2.145e-01, -8.129e-02, -6.382e-02, -3.990e-01, 1.037e-01, -4.649e-01, 6.249e-02) * s1[y+2][x+1];
	r += M4(1.259e-01, -2.327e-01, 5.635e-02, -4.853e-02, -1.492e-02, 2.547e-02, 1.678e-02, -3.589e-02, -2.399e-02, 6.813e-02, -2.275e-02, 6.039e-02, -2.065e-01, 1.638e-01, -4.571e-02, -2.244e-01) * s1[y+2][x+2];
	r += M4(-1.680e-02, 1.753e-01, -4.865e-02, 7.287e-02, 2.815e-02, -2.100e-02, 4.594e-02, -5.321e-02, -2.251e-01, -7.670e-02, -1.899e-01, 6.609e-02, -3.388e-02, 1.001e-01, 1.173e-01, 5.067e-02) * s2[y+0][x+0];
	r += M4(8.245e-02, 5.510e-02, 5.750e-02, 2.663e-01, -9.374e-02, -3.871e-02, -1.010e-02, 6.228e-02, -8.075e-02, 4.848e-02, 1.142e-02, -1.101e-01, -3.523e-02, -6.761e-02, 3.292e-01, -1.324e-01) * s2[y+0][x+1];
	r += M4(7.914e-03, -1.117e-02, -2.089e-02, 1.609e-03, 3.740e-03, -2.080e-02, 3.640e-03, 6.965e-02, 3.711e-02, -2.609e-02, 5.387e-03, 4.968e-03, 2.596e-01, -1.440e-01, 6.614e-02, 1.603e-01) * s2[y+0][x+2];
	r += M4(6.909e-02, 3.409e-02, 1.162e-01, 2.788e-01, -6.691e-02, -1.994e-01, -1.423e-02, 2.651e-02, -9.158e-02, 4.261e-02, -2.627e-01, 1.839e-01, -3.707e-02, -4.838e-02, -5.734e-02, -5.096e-02) * s2[y+1][x+0];
	r += M4(-9.241e-02, -1.703e-01, 1.243e-01, 4.329e-01, 3.329e-01, 1.778e-01, 1.345e-01, -8.686e-02, 1.760e-02, 1.269e-01, 2.483e-01, -3.614e-01, 8.092e-02, 4.343e-01, -3.708e-01, -3.017e-01) * s2[y+1][x+1];
	r += M4(3.543e-02, 1.060e-01, 1.008e-02, 1.545e-01, -7.208e-02, -9.404e-02, -3.283e-02, -9.855e-02, 5.901e-02, 9.048e-02, -2.237e-02, 8.623e-02, -1.216e-01, -1.509e-01, -7.079e-02, -9.790e-02) * s2[y+1][x+2];
	r += M4(-2.613e-02, 2.671e-02, 1.634e-01, -6.745e-02, 6.092e-02, 4.299e-02, 2.276e-01, -1.513e-01, 4.791e-02, -3.209e-03, 1.779e-01, 3.307e-02, -1.205e-02, 5.312e-02, 8.451e-02, 1.127e-01) * s2[y+2][x+0];
	r += M4(-1.213e-01, -1.689e-01, -6.451e-02, 9.131e-02, -1.421e-01, -3.726e-01, 1.361e-01, 2.056e-01, -1.723e-01, -1.310e-02, 3.096e-02, 1.623e-02, -1.616e-01, -7.309e-02, -1.915e-01, 7.200e-02) * s2[y+2][x+1];
	r += M4(1.364e-01, -1.712e-02, -1.069e-01, -6.404e-02, -1.039e-02, 1.571e-01, -5.284e-02, 1.273e-01, -3.810e-02, 3.532e-02, -3.413e-03, -8.461e-03, 9.253e-02, 2.210e-02, 5.435e-02, -1.208e-01) * s2[y+2][x+2];
	r += M4(-1.027e-03, 6.980e-02, 9.916e-03, 4.756e-02, 1.503e-02, -1.948e-02, 1.049e-02, -1.167e-01, -2.004e-01, 7.355e-02, -8.563e-03, 2.588e-01, -1.190e-01, 1.182e-01, -7.506e-02, 2.307e-02) * s3[y+0][x+0];
	r += M4(3.067e-02, 2.703e-02, 7.876e-02, 1.727e-01, -1.187e-01, 6.129e-02, 2.492e-02, -1.469e-01, -8.240e-02, 8.876e-02, -5.831e-01, -2.368e-02, -1.091e-01, -6.447e-02, 2.465e-01, 4.384e-02) * s3[y+0][x+1];
	r += M4(7.550e-02, -1.670e-01, -5.059e-02, -1.238e-02, 2.270e-02, 2.374e-02, -2.784e-03, -1.890e-02, -1.149e-01, 1.418e-01, 1.703e-01, -4.534e-03, 6.837e-02, 2.743e-02, -2.558e-02, 1.650e-01) * s3[y+0][x+2];
	r += M4(-9.898e-02, 5.604e-02, 1.432e-01, 3.429e-01, 2.411e-02, -1.228e-01, -7.237e-02, -2.538e-01, -1.688e-01, 3.921e-02, -4.429e-01, 1.976e-01, -9.544e-02, -6.247e-02, -2.089e-01, -1.324e-02) * s3[y+1][x+0];
	r += M4(-7.271e-02, -2.232e-02, 3.521e-01, 1.193e-01, 1.542e-01, 1.526e-01, -2.220e-01, -3.377e-01, 2.005e-01, 2.375e-01, -3.399e-03, -2.371e-01, 1.945e-01, 4.731e-01, 1.732e-01, -1.050e-01) * s3[y+1][x+1];
	r += M4(-2.816e-03, -1.215e-02, 6.464e-02, -9.841e-02, 8.840e-02, -6.353e-02, -2.205e-01, -1.350e-01, -2.800e-01, 1.408e-01, 2.368e-01, 1.292e-01, 4.676e-02, -1.923e-01, 1.322e-01, -3.961e-02) * s3[y+1][x+2];
	r += M4(8.146e-02, 1.018e-01, -2.621e-02, 6.360e-02, 2.173e-01, 4.082e-03, 2.674e-01, -3.016e-01, 5.432e-02, -7.718e-03, 1.673e-01, 6.796e-02, -4.890e-02, -6.142e-02, -4.553e-02, 7.097e-02) * s3[y+2][x+0];
	r += M4(-6.663e-02, 3.552e-02, 9.766e-02, 2.292e-02, -1.549e-01, -3.390e-02, 5.441e-02, -1.753e-01, -1.481e-01, -3.543e-01, 1.159e-01, 1.386e-01, -1.440e-01, -1.547e-01, 7.552e-02, 1.898e-02) * s3[y+2][x+1];
	r += M4(-1.479e-02, 4.212e-02, -5.555e-02, 2.879e-02, 7.411e-02, 1.147e-01, -1.114e-01, 9.142e-02, -1.178e-01, 9.983e-02, -1.323e-01, 2.318e-02, -5.979e-02, -3.522e-03, 5.596e-02, -1.178e-01) * s3[y+2][x+2];
	r += V4(-1.716e-02, 3.894e-02, -6.012e-02, -1.690e-01);
	return vec4(r);
}
vec4 f1(int x, int y) {
	V4 r = V4(0.0);
	r += M4(1.246e-01, 7.392e-03, 1.094e-01, -4.603e-02, 5.207e-02, -1.370e-02, -2.182e-03, -6.656e-02, -2.128e-02, -6.204e-02, -3.157e-02, -9.329e-02, 1.094e-02, 4.059e-02, -1.593e-01, 3.378e-02) * s0[y+0][x+0];
	r += M4(-1.793e-01, 2.618e-02, -5.863e-02, 5.931e-04, 1.291e-01, -1.530e-01, -5.320e-02, 1.080e-01, -8.530e-02, 5.503e-02, -5.362e-02, 1.190e-01, -2.339e-02, -7.676e-02, 5.693e-02, 9.967e-03) * s0[y+0][x+1];
	r += M4(-1.410e-01, 3.351e-02, 1.097e-03, -1.093e-01, 2.244e-02, 1.892e-01, -2.039e-01, 1.596e-01, 1.667e-01, -5.924e-02, -1.184e-01, 7.845e-02, -2.818e-02, -7.230e-02, 4.268e-04, 1.039e-01) * s0[y+0][x+2];
	r += M4(1.042e-03, -4.934e-02, -5.776e-03, -9.449e-02, 1.825e-01, 1.217e-01, -5.776e-02, -1.010e-01, -1.651e-01, -1.955e-01, 1.068e-01, -3.095e-01, -6.697e-02, -5.100e-02, -7.789e-02, 1.211e-02) * s0[y+1][x+0];
	r += M4(-6.271e-02, 1.446e-01, 3.412e-01, 2.093e-02, -5.877e-02, -7.772e-03, 9.529e-02, 1.765e-01, -1.945e-01, 2.711e-02, -2.759e-01, -7.207e-02, -1.086e-02, -9.750e-02, 8.415e-03, -1.797e-01) * s0[y+1][x+1];
	r += M4(-2.354e-01, 6.863e-02, 6.966e-02, 4.717e-02, 2.326e-02, -1.323e-01, 8.569e-03, 7.556e-01, 2.076e-01, -1.027e-01, -1.309e-02, 1.053e-01, -5.570e-02, -1.447e-02, -2.342e-01, 5.368e-02) * s0[y+1][x+2];
	r += M4(-1.555e-01, 1.351e-01, -9.228e-02, -8.078e-02, 1.668e-01, 1.862e-01, -2.113e-01, -9.217e-02, -5.976e-02, -1.207e-01, 3.595e-02, -6.383e-02, 3.155e-02, -5.444e-02, 8.639e-02, -2.218e-02) * s0[y+2][x+0];
	r += M4(2.031e-01, -1.089e-02, 8.734e-02, 1.717e-01, 1.811e-01, -2.725e-01, 1.749e-01, 1.438e-01, 1.031e-01, -1.234e-02, -1.678e-01, 3.069e-03, 1.211e-01, 3.315e-01, 1.930e-01, 2.548e-02) * s0[y+2][x+1];
	r += M4(1.485e-01, -4.240e-02, 1.014e-02, 6.040e-02, 2.297e-01, -1.582e-01, 6.419e-02, 4.835e-01, -1.298e-01, -1.440e-01, -1.303e-01, -5.427e-02, 3.235e-02, 2.705e-01, 1.392e-01, 6.213e-02) * s0[y+2][x+2];
	r += M4(-1.580e-02, -1.723e-02, -1.979e-01, 4.233e-02, -6.445e-02, -7.127e-02, -1.449e-02, 7.626e-02, 5.070e-02, 6.424e-02, 5.248e-02, -8.543e-02, -1.369e-01, 6.857e-02, 2.348e-01, -1.336e-01) * s1[y+0][x+0];
	r += M4(-1.047e-02, -1.410e-02, -1.162e-01, -4.341e-02, -2.405e-01, -8.912e-03, 1.605e-01, 2.511e-02, 2.623e-01, 1.047e-01, 1.899e-02, 1.256e-01, -3.035e-01, 4.656e-02, -8.455e-02, 4.782e-02) * s1[y+0][x+1];
	r += M4(-4.658e-02, -8.545e-02, -3.617e-02, -8.642e-02, -2.607e-01, 7.865e-02, 1.910e-02, 5.071e-02, 6.225e-02, 5.094e-02, -1.659e-01, 9.608e-02, -1.971e-01, 1.801e-01, -6.152e-03, 3.082e-01) * s1[y+0][x+2];
	r += M4(8.881e-02, -7.129e-02, -7.286e-02, 1.260e-01, -5.602e-02, -3.031e-02, 4.032e-02, -4.455e-02, -7.887e-02, -4.622e-03, -7.857e-02, 3.131e-02, -2.700e-01, 2.379e-01, 1.660e-02, 7.818e-03) * s1[y+1][x+0];
	r += M4(2.944e-01, 5.807e-02, 1.896e-01, 4.865e-01, -2.649e-01, 1.547e-01, 2.892e-01, -1.125e-01, 2.001e-01, -1.192e-01, -3.744e-01, 3.451e-01, 4.045e-01, 6.267e-01, -3.368e-01, -3.922e-02) * s1[y+1][x+1];
	r += M4(-1.362e-01, 1.166e-01, -1.313e-01, 5.115e-01, -6.485e-02, -2.572e-02, 1.430e-01, -2.367e-01, 1.975e-01, -5.842e-02, -2.122e-01, 2.037e-01, -1.266e+00, -5.308e-02, -6.096e-01, 1.615e-01) * s1[y+1][x+2];
	r += M4(-1.902e-02, 4.717e-02, 5.502e-02, -1.525e-02, 7.010e-02, -5.697e-02, -1.211e-02, 5.286e-02, -1.992e-03, -4.264e-02, -1.312e-01, 7.486e-03, 1.547e-01, -3.580e-03, -4.477e-01, 3.294e-01) * s1[y+2][x+0];
	r += M4(8.957e-02, 1.488e-02, 1.176e-01, 3.691e-01, 5.317e-02, -3.425e-01, -5.954e-02, -4.399e-03, -2.034e-02, 6.178e-02, -8.538e-02, 2.174e-01, 2.604e-01, 1.018e+00, -1.253e-02, -4.160e-01) * s1[y+2][x+1];
	r += M4(-1.350e-01, -5.815e-02, 8.366e-02, 1.717e-01, -6.016e-02, -1.013e-01, 1.051e-01, -1.274e-01, 8.590e-02, -1.273e-01, -1.944e-01, -9.409e-02, -2.565e-02, 6.319e-01, 1.583e-01, 1.289e-01) * s1[y+2][x+2];
	r += M4(8.285e-02, -2.767e-02, -2.597e-03, -7.606e-02, 1.509e-02, -4.457e-02, 7.062e-03, 1.397e-02, -3.874e-02, 4.087e-02, 5.433e-02, 2.898e-02, -1.219e-02, -2.266e-02, 6.582e-02, -4.236e-02) * s2[y+0][x+0];
	r += M4(-1.947e-01, -1.237e-01, 6.930e-02, 2.368e-02, -1.132e-01, 9.608e-02, -2.909e-02, -9.112e-03, -1.755e-01, 4.875e-02, -7.739e-02, 6.109e-02, 1.615e-01, -1.832e-02, 7.207e-02, -2.889e-02) * s2[y+0][x+1];
	r += M4(-2.461e-02, -2.372e-03, 6.943e-02, -2.068e-01, 7.205e-02, -3.711e-02, 3.407e-02, -9.646e-02, -2.032e-02, -1.754e-02, -9.344e-02, -1.995e-03, 1.092e-01, -2.451e-02, 5.711e-02, 9.842e-03) * s2[y+0][x+2];
	r += M4(-6.250e-02, 1.788e-01, -1.633e-02, -1.287e-02, -1.651e-01, 2.454e-03, -3.841e-02, -8.294e-03, 9.232e-02, 8.425e-02, 5.790e-02, -1.224e-01, 1.474e-01, -3.763e-02, -7.264e-02, 1.033e-01) * s2[y+1][x+0];
	r += M4(-9.858e-02, 8.344e-02, -1.541e-01, -4.365e-02, 1.454e-01, 2.378e-01, 1.874e-02, 1.151e-01, 1.688e-01, -4.619e-02, -1.158e-01, 2.461e-01, 3.654e-01, -2.087e-01, 5.527e-02, -4.984e-02) * s2[y+1][x+1];
	r += M4(-4.079e-02, -1.009e-01, -8.966e-02, 5.184e-02, -3.894e-02, 1.148e-01, -6.420e-03, 9.971e-02, -2.265e-02, 4.079e-02, 8.127e-02, 1.075e-01, 1.012e-01, -7.133e-02, 1.792e-01, 6.839e-02) * s2[y+1][x+2];
	r += M4(2.307e-02, -1.029e-01, 8.543e-02, 7.028e-02, 9.231e-02, 7.099e-02, 7.842e-02, 7.217e-02, 9.616e-02, -1.471e-01, 1.116e-01, -1.023e-01, 3.850e-02, -1.091e-01, 8.374e-02, 1.013e-01) * s2[y+2][x+0];
	r += M4(-3.726e-02, 8.144e-02, 2.710e-01, -1.284e-01, 1.663e-02, 1.316e-01, -2.087e-01, -1.082e-01, -1.090e-01, -1.562e-01, 3.834e-02, -1.162e-01, 2.553e-01, -4.032e-01, -2.127e-01, 1.820e-01) * s2[y+2][x+1];
	r += M4(1.169e-01, -3.856e-03, -5.329e-02, 6.814e-02, -1.108e-03, 1.296e-02, 3.464e-03, 1.813e-02, 9.323e-02, -1.775e-01, -7.141e-02, 1.740e-01, 3.324e-01, -1.071e-01, -1.139e-01, 9.762e-02) * s2[y+2][x+2];
	r += M4(-5.281e-03, 2.411e-02, 7.916e-02, -6.532e-03, 1.004e-01, 8.267e-04, 3.063e-02, -1.523e-02, -2.586e-01, 6.489e-02, -3.247e-01, -7.949e-02, -2.009e-02, -2.534e-02, -4.634e-02, -1.041e-01) * s3[y+0][x+0];
	r += M4(-4.995e-02, -3.521e-02, 5.296e-02, 9.403e-03, 6.212e-03, 2.100e-02, 1.042e-01, 7.754e-02, 1.824e-02, -3.513e-01, 2.920e-01, -3.623e-02, -3.549e-04, -4.362e-03, -1.490e-02, 3.236e-02) * s3[y+0][x+1];
	r += M4(9.191e-02, -4.544e-02, 3.808e-02, 2.729e-05, -6.151e-02, 7.621e-02, -7.269e-02, 8.280e-03, -1.267e-01, -8.133e-02, -4.347e-01, 1.994e-01, -1.112e-01, -1.065e-02, 8.746e-02, 1.231e-01) * s3[y+0][x+2];
	r += M4(5.554e-02, -1.898e-02, 5.626e-02, -2.605e-01, 1.232e-01, -7.902e-02, 7.003e-02, -1.659e-02, -1.805e-01, 2.052e-01, 1.421e-01, -1.954e-01, -1.071e-01, 3.057e-02, -1.028e-02, -8.695e-02) * s3[y+1][x+0];
	r += M4(-2.128e-01, -1.506e-01, -4.414e-03, -1.077e-01, 1.246e-01, -1.744e-01, 2.975e-01, 2.145e-01, -4.090e-02, -4.451e-02, 4.260e-01, 3.523e-01, 2.032e-01, -1.520e-01, 2.048e-01, -1.434e-01) * s3[y+1][x+1];
	r += M4(-9.201e-02, 1.781e-02, -7.359e-02, -2.560e-02, -2.496e-02, 2.532e-01, -3.443e-02, -1.788e-03, 2.329e-01, 3.114e-02, 2.276e-01, 3.604e-01, 5.164e-02, 1.659e-02, 2.699e-02, 6.239e-02) * s3[y+1][x+2];
	r += M4(1.791e-01, 9.894e-02, 6.610e-02, 6.557e-02, 2.901e-01, -6.614e-02, 2.727e-01, 2.012e-01, 3.978e-01, -5.979e-02, 2.547e-01, -1.773e-02, 6.173e-02, 2.367e-01, 9.376e-03, -1.200e-02) * s3[y+2][x+0];
	r += M4(-1.823e-01, -8.264e-02, -1.324e-01, -1.263e-01, -1.882e-02, 1.008e-01, -3.701e-01, 3.755e-02, 2.715e-01, 3.124e-01, 4.936e-01, 4.098e-01, -1.276e-02, -3.424e-01, -1.453e-01, -1.556e-01) * s3[y+2][x+1];
	r += M4(9.562e-02, -3.869e-03, 1.792e-02, -1.212e-02, -2.351e-01, 1.139e-01, 2.094e-01, 1.487e-02, 4.518e-01, -2.927e-01, -2.261e-01, 3.199e-01, -1.135e-01, 1.325e-01, 2.234e-01, 7.664e-03) * s3[y+2][x+2];
	r += V4(2.708e-02, 2.272e-02, 2.369e-03, -7.430e-03);
	return vec4(r);
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv1_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
			s2[ay][ax] = l1(x - 1, y - 1);
			s1[ay][ax] = -max(-s0[ay][ax], V4(0.0));
			s0[ay][ax] = max(s0[ay][ax], V4(0.0));
			s3[ay][ax] = -max(-s2[ay][ax], V4(0.0));
			s2[ay][ax] = max(s2[ay][ax], V4(0.0));
		}
	}
	barrier();
	vec4 r0 = f0(xy.x, xy.y);
	vec4 r1 = f1(xy.x, xy.y);
	imageStore(out_image, opos + ivec2(0, 0), r0);
	imageStore(out_image, opos + ivec2(1, 0), r1);
}

//!DESC CuNNy-8x8C-conv3
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv2
//!BIND LUMA
//!SAVE conv3
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(texelFetch(conv2_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv2_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 s0[10][10];
shared V4 s1[10][10];
shared V4 s2[10][10];
shared V4 s3[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-1.429e-01, 1.157e-01, -4.480e-02, 9.491e-03, 3.499e-02, -3.144e-02, 8.062e-03, 4.594e-02, 1.119e-01, -1.452e-02, 6.672e-02, 5.677e-02, 1.297e-01, 1.634e-01, 4.027e-01, -2.227e-02) * s0[y+0][x+0];
	r += M4(-1.418e-01, -9.365e-02, -4.597e-03, 8.762e-02, -1.756e-01, 8.819e-04, -5.410e-02, -4.381e-02, -9.358e-04, 5.903e-02, -1.479e-01, 4.146e-02, -3.701e-01, -1.440e-01, -5.378e-02, -2.912e-02) * s0[y+0][x+1];
	r += M4(-1.151e-01, -1.216e-01, -7.379e-03, -4.241e-02, 1.111e-01, -9.453e-02, -1.258e-01, 2.966e-02, 2.337e-01, -1.914e-02, -5.113e-02, -2.411e-02, 1.704e-01, -5.722e-02, -1.420e-01, -9.562e-02) * s0[y+0][x+2];
	r += M4(-6.764e-02, -1.245e-01, 3.342e-02, -6.428e-02, -5.512e-02, -1.273e-02, -1.848e-02, -4.426e-02, -3.916e-02, 6.899e-02, -1.570e-01, -6.841e-02, -2.758e-01, 1.873e-01, -8.093e-02, 4.951e-02) * s0[y+1][x+0];
	r += M4(2.688e-01, -4.160e-02, 1.743e-01, 2.774e-02, 2.496e-01, 4.618e-01, 1.724e-01, 1.333e-01, 2.890e-01, -6.476e-02, -1.810e-01, -2.747e-01, 7.795e-02, -5.691e-01, -8.725e-01, -3.167e-01) * s0[y+1][x+1];
	r += M4(4.888e-02, 2.881e-01, -7.528e-02, -1.279e-01, 1.461e-02, 2.278e-01, 6.654e-02, -5.059e-01, 3.071e-01, 6.238e-02, -2.159e-01, -2.510e-01, 2.352e-01, -2.863e-01, -6.466e-01, -5.429e-01) * s0[y+1][x+2];
	r += M4(-5.324e-02, -3.446e-01, 1.169e-01, -1.528e-03, 1.860e-02, 6.583e-03, -1.791e-02, 4.274e-02, 5.829e-02, -3.169e-03, 1.718e-02, 5.755e-02, -5.637e-02, 1.528e-02, -5.595e-02, 2.097e-01) * s0[y+2][x+0];
	r += M4(-2.180e-01, 5.873e-02, 1.710e-01, 1.740e-02, -8.339e-02, -2.228e-01, 2.542e-01, 2.056e-01, -7.059e-02, -2.685e-01, -7.504e-02, 1.254e-01, 1.247e-01, 4.223e-01, -1.095e-01, -1.442e-01) * s0[y+2][x+1];
	r += M4(2.607e-01, 5.912e-02, 5.018e-02, -7.202e-02, -1.026e-02, 5.946e-02, 5.742e-02, -2.243e-01, 1.978e-01, 6.907e-02, -2.896e-01, -2.778e-01, 2.251e-01, -2.215e-01, -1.301e-01, -1.554e-01) * s0[y+2][x+2];
	r += M4(-6.999e-02, -3.725e-02, 1.498e-02, -6.868e-02, -1.523e-02, -1.059e-01, -1.143e-01, 7.191e-02, 1.419e-01, 2.948e-02, 8.395e-02, 5.735e-02, 8.137e-02, -2.124e-02, -5.651e-02, -3.270e-02) * s1[y+0][x+0];
	r += M4(-5.198e-02, -4.740e-02, 5.535e-02, 1.460e-01, 1.035e-01, -8.987e-02, -1.693e-01, -2.951e-02, -1.899e-01, 1.284e-01, 1.698e-01, 1.382e-02, -5.224e-02, 6.097e-02, -6.767e-03, -3.760e-02) * s1[y+0][x+1];
	r += M4(-9.257e-02, -5.701e-02, 9.471e-02, 2.297e-02, 2.142e-01, -3.835e-02, -1.781e-01, -9.847e-02, -9.109e-02, -3.910e-02, 6.871e-02, -6.229e-02, -6.160e-03, -4.086e-02, -6.883e-02, 1.037e-01) * s1[y+0][x+2];
	r += M4(7.091e-02, -1.076e-01, 2.863e-02, -1.088e-03, 2.566e-02, -1.382e-02, -1.056e-01, -1.150e-01, -3.994e-02, 4.622e-02, -1.239e-02, 1.023e-02, -1.308e-01, -4.273e-03, 6.581e-02, 5.948e-02) * s1[y+1][x+0];
	r += M4(5.745e-01, 6.487e-02, 5.332e-02, 1.538e-01, 3.774e-01, 7.859e-01, -1.418e-01, 2.905e-01, -4.061e-02, -2.444e-01, 2.296e-01, 8.002e-03, 1.082e-01, -1.875e-02, -1.083e-01, -2.746e-01) * s1[y+1][x+1];
	r += M4(1.094e-01, -7.307e-02, -1.178e-01, -1.446e-01, 3.084e-01, 1.245e-01, -1.987e-01, -3.264e-01, -2.295e-01, 3.834e-02, 7.166e-02, -8.093e-02, -9.519e-03, 6.849e-02, -1.909e-01, -8.815e-02) * s1[y+1][x+2];
	r += M4(-4.597e-02, -1.285e-01, -9.136e-03, -6.063e-02, -1.195e-03, 5.043e-02, -3.539e-02, -6.988e-02, 5.310e-02, 3.063e-02, 6.971e-02, 5.376e-03, -7.787e-02, -5.167e-02, 5.113e-02, 4.727e-02) * s1[y+2][x+0];
	r += M4(6.637e-02, -1.015e-01, 1.533e-02, -1.144e-01, -3.453e-02, -4.663e-02, 1.179e-01, 4.088e-02, -1.023e-02, -5.423e-02, 2.975e-01, -2.294e-02, 3.838e-02, 1.104e-02, 1.226e-01, 5.272e-02) * s1[y+2][x+1];
	r += M4(9.244e-02, 1.101e-01, -7.268e-02, -1.037e-01, 9.510e-02, 1.111e-01, -5.579e-02, -2.208e-01, -1.565e-02, 2.714e-02, 1.020e-01, -1.158e-01, 8.602e-03, 1.720e-02, 2.691e-02, -4.270e-02) * s1[y+2][x+2];
	r += M4(6.350e-02, -2.480e-02, -6.676e-02, -4.254e-02, 7.129e-02, 9.487e-02, 1.435e-01, -3.664e-02, -9.475e-02, -5.314e-02, -1.428e-01, -1.347e-01, -5.597e-02, 1.015e-01, -1.888e-02, 1.028e-02) * s2[y+0][x+0];
	r += M4(7.982e-02, 2.656e-02, 2.927e-02, -2.301e-01, -3.434e-02, -2.822e-01, -9.449e-02, -2.142e-01, -2.301e-01, -1.305e-01, -2.163e-01, -1.387e-01, -1.526e-01, -4.594e-02, -6.705e-02, -1.121e-01) * s2[y+0][x+1];
	r += M4(1.829e-02, 4.895e-03, -1.243e-01, 8.529e-02, -1.258e-01, 2.624e-01, -1.464e-01, -2.485e-02, 1.263e-01, 3.004e-02, 1.028e-01, -4.433e-02, -3.841e-02, -4.921e-02, -2.898e-02, 2.007e-01) * s2[y+0][x+2];
	r += M4(-2.017e-01, 2.712e-02, 1.619e-01, 1.266e-01, 1.217e-02, 6.853e-02, -9.017e-02, 2.790e-02, -3.224e-02, -3.166e-02, 1.228e-01, -4.926e-03, -4.525e-02, -1.782e-01, -1.065e-01, -5.529e-02) * s2[y+1][x+0];
	r += M4(-2.954e-01, -2.723e-01, -1.741e-02, -5.465e-03, 1.101e-01, 1.061e-01, -1.541e-01, 6.119e-02, 1.062e-01, 2.840e-01, 2.311e-01, 8.333e-02, -1.441e-01, 6.771e-02, 5.673e-02, 2.918e-01) * s2[y+1][x+1];
	r += M4(8.179e-02, 2.106e-02, 3.862e-04, -3.232e-02, 7.913e-02, -1.560e-01, -2.431e-01, -4.675e-02, 1.114e-01, 5.646e-02, -1.131e-01, -1.857e-01, 2.585e-02, -6.568e-02, -2.662e-02, -2.883e-02) * s2[y+1][x+2];
	r += M4(-4.892e-02, -1.766e-01, 9.902e-02, -6.475e-03, 2.135e-02, 4.753e-02, -9.522e-03, -3.606e-02, 1.635e-01, 1.501e-02, -1.956e-01, -1.170e-01, 2.709e-02, 2.205e-02, -5.948e-02, -1.975e-03) * s2[y+2][x+0];
	r += M4(-2.132e-01, -1.389e-01, 7.714e-02, -2.129e-01, -5.080e-02, -2.208e-01, 1.387e-01, -1.805e-02, 1.153e-01, 1.407e-01, -4.175e-02, 6.043e-02, 1.729e-01, 1.179e-01, 3.578e-02, 1.586e-01) * s2[y+2][x+1];
	r += M4(1.166e-01, -4.808e-02, -6.421e-02, -1.025e-01, -8.471e-03, 1.515e-03, -1.083e-02, -1.994e-01, -2.468e-02, -7.497e-02, 6.573e-03, 9.058e-02, -3.345e-02, -4.821e-02, 2.811e-02, 6.397e-02) * s2[y+2][x+2];
	r += M4(2.548e-01, -2.649e-02, 1.663e-01, -8.219e-02, -1.888e-01, 3.066e-01, 2.158e-01, 7.065e-02, 1.315e-01, 1.168e-01, 3.919e-02, -4.678e-03, 2.998e-02, 1.498e-01, 3.997e-02, 8.520e-02) * s3[y+0][x+0];
	r += M4(-8.456e-02, 2.612e-01, 5.759e-02, 1.709e-01, -1.976e-01, -2.088e-01, -8.549e-01, -3.767e-01, 1.040e-02, -1.612e-01, -2.412e-01, -1.826e-01, 1.654e-01, -2.502e-02, 4.940e-03, -2.210e-02) * s3[y+0][x+1];
	r += M4(-3.041e-02, -7.273e-02, 9.152e-03, 6.293e-02, 9.312e-04, -2.490e-01, -2.249e-01, 2.150e-02, 1.186e-01, -1.482e-02, -6.102e-02, -1.304e-02, 5.072e-02, -3.573e-02, -3.198e-02, 3.511e-01) * s3[y+0][x+2];
	r += M4(1.384e-01, -1.181e-01, 2.137e-01, 7.250e-02, -3.684e-01, 4.395e-03, 4.664e-02, -1.673e-01, -9.710e-02, 8.836e-02, -4.812e-02, -7.049e-03, 5.759e-02, 2.270e-01, -1.574e-01, -3.886e-02) * s3[y+1][x+0];
	r += M4(-5.153e-02, -5.345e-02, 3.877e-01, -7.616e-02, -6.321e-01, 5.777e-01, -9.110e-01, -1.911e-01, 3.073e-01, 3.282e-01, 2.570e-01, -6.934e-02, -3.921e-01, 3.934e-01, -4.194e-02, 1.314e-01) * s3[y+1][x+1];
	r += M4(8.666e-03, 1.316e-02, 1.103e-01, 8.570e-02, -2.861e-02, 3.183e-01, -2.467e-01, -3.677e-01, -1.659e-02, 2.163e-01, -1.751e-02, -1.721e-01, 6.423e-03, 2.056e-01, 9.511e-02, 4.931e-02) * s3[y+1][x+2];
	r += M4(1.318e-01, -1.804e-01, 4.587e-02, 5.743e-02, 3.142e-02, -3.959e-02, 1.085e-01, -8.787e-02, 6.378e-02, -2.697e-02, -3.466e-02, -6.205e-02, -8.466e-02, 6.584e-02, 2.571e-02, 9.948e-03) * s3[y+2][x+0];
	r += M4(-2.349e-02, -1.703e-01, 5.199e-02, -1.857e-01, -3.086e-01, -1.442e-01, 1.683e-01, 4.753e-02, -4.711e-02, 1.802e-01, -2.526e-02, 2.348e-01, 6.772e-02, -6.156e-02, 1.136e-01, 1.000e-01) * s3[y+2][x+1];
	r += M4(5.254e-02, 1.023e-02, -4.379e-02, -1.958e-01, -2.400e-01, -1.557e-01, 1.240e-01, -4.535e-02, 2.742e-02, -1.189e-01, -6.455e-02, -1.470e-01, -4.999e-02, 3.332e-02, 1.047e-01, 5.509e-02) * s3[y+2][x+2];
	r += V4(-1.751e-02, 1.595e-02, 1.544e-02, 2.624e-02);
	return vec4(r);
}
vec4 f1(int x, int y) {
	V4 r = V4(0.0);
	r += M4(2.445e-02, 6.404e-02, 5.549e-02, -4.121e-03, -5.198e-02, -9.399e-02, 2.099e-02, 1.072e-02, -1.911e-02, 1.034e-02, -5.016e-02, 3.752e-02, -4.680e-01, 1.925e-01, -1.442e-01, 1.902e-01) * s0[y+0][x+0];
	r += M4(1.341e-01, -6.244e-03, -3.633e-02, -6.082e-02, 2.650e-02, -1.093e-01, 3.397e-02, -6.542e-02, -1.099e-01, -8.169e-02, 5.719e-02, 4.163e-02, -1.401e-01, -1.870e-02, -1.027e-01, 4.913e-01) * s0[y+0][x+1];
	r += M4(-9.130e-03, -4.919e-02, 5.060e-02, -5.388e-02, 6.552e-02, 2.164e-02, 1.039e-02, -4.599e-02, -1.157e-01, -9.484e-02, -1.122e-01, -2.525e-02, -2.146e-01, 4.545e-02, -5.566e-02, 1.670e-01) * s0[y+0][x+2];
	r += M4(-5.130e-02, -6.344e-02, 6.483e-02, -1.186e-01, -5.920e-02, -2.286e-02, 2.240e-02, -1.492e-01, -8.611e-02, -5.457e-02, 3.354e-02, 1.401e-01, -3.866e-01, -1.426e-01, -1.787e-01, -3.525e-01) * s0[y+1][x+0];
	r += M4(-3.064e-01, -2.717e-01, -6.868e-02, -2.394e-01, 1.395e-01, 3.333e-01, 9.499e-02, 3.506e-02, 1.124e-01, -9.860e-03, -3.899e-03, 1.467e-01, -1.554e-01, -3.408e-01, -3.937e-01, -4.964e-01) * s0[y+1][x+1];
	r += M4(2.374e-01, -3.352e-01, 1.212e-01, 3.544e-01, 7.636e-02, -2.112e-01, 6.527e-02, -2.555e-01, 1.987e-01, -2.493e-01, 3.124e-02, 3.311e-01, -5.082e-01, 5.853e-01, -1.763e-02, 3.537e-01) * s0[y+1][x+2];
	r += M4(-1.498e-01, 9.765e-02, -2.780e-01, 4.342e-03, -1.907e-02, 8.339e-03, 2.188e-02, 2.793e-02, 5.721e-02, 6.068e-02, 3.355e-02, -7.008e-03, -1.408e-01, 1.010e-01, -3.293e-01, 6.166e-02) * s0[y+2][x+0];
	r += M4(-2.027e-01, -3.092e-02, -4.580e-01, 8.243e-02, -4.169e-02, -2.462e-04, -2.816e-01, -3.717e-02, 2.890e-02, -3.768e-03, -3.995e-01, -3.500e-02, -4.231e-01, -1.012e-01, 6.066e-01, -7.117e-02) * s0[y+2][x+1];
	r += M4(7.746e-02, -3.872e-01, 2.062e-01, -9.394e-02, 2.033e-01, -3.769e-01, 2.029e-03, -3.732e-02, 4.363e-02, -2.804e-01, -8.144e-02, 7.822e-02, -5.170e-01, 3.350e-01, 2.670e-01, 4.080e-02) * s0[y+2][x+2];
	r += M4(-2.176e-02, -2.050e-02, -4.466e-02, 6.045e-02, -2.780e-02, -3.738e-02, -5.725e-02, -7.375e-02, 2.499e-02, 2.446e-03, 4.483e-02, 5.520e-02, -5.636e-02, 3.012e-02, -6.860e-02, 1.239e-01) * s1[y+0][x+0];
	r += M4(1.071e-01, 3.907e-02, -2.947e-02, -3.325e-02, -7.030e-02, -8.681e-02, -1.958e-01, 5.122e-02, 5.677e-02, -1.716e-01, 2.652e-01, -4.891e-02, -1.274e-02, -5.799e-02, 1.236e-01, 1.704e-01) * s1[y+0][x+1];
	r += M4(-8.447e-02, -8.681e-02, 6.405e-02, -1.236e-02, 1.266e-01, 1.432e-01, -1.658e-01, -1.564e-02, -6.618e-02, -4.429e-02, -7.239e-03, -1.046e-01, -2.204e-02, 2.118e-02, -4.537e-02, 8.715e-03) * s1[y+0][x+2];
	r += M4(6.508e-02, -5.712e-03, -8.363e-02, -1.490e-01, 8.957e-02, 1.561e-01, -2.113e-01, 2.762e-02, -4.644e-02, -4.663e-02, -3.271e-02, 6.755e-02, 9.757e-03, -5.906e-02, -2.472e-02, -5.591e-02) * s1[y+1][x+0];
	r += M4(-7.161e-02, 1.174e-01, 1.037e-01, -5.541e-01, 7.105e-02, 5.474e-01, 1.395e-01, 1.988e-01, 2.103e-03, -1.893e-01, 1.382e-01, -2.349e-01, 1.652e-01, -1.208e-02, -8.696e-03, -1.455e-01) * s1[y+1][x+1];
	r += M4(9.730e-02, -5.952e-02, 4.420e-02, 9.820e-02, 5.620e-02, 1.738e-01, -1.580e-01, -9.063e-02, 7.092e-03, -1.169e-01, 9.674e-02, -3.524e-01, -2.335e-02, 7.220e-02, -1.252e-01, 3.450e-02) * s1[y+1][x+2];
	r += M4(-4.406e-02, 2.699e-02, -3.282e-03, -1.047e-01, 7.487e-02, 7.757e-03, -4.240e-02, 6.324e-02, 4.941e-03, -3.093e-02, 6.313e-02, -1.999e-03, -7.407e-02, -3.116e-02, 8.403e-03, 2.652e-02) * s1[y+2][x+0];
	r += M4(-7.558e-02, 1.207e-01, -3.414e-01, 1.112e-02, 5.151e-02, -3.793e-02, -4.717e-01, 1.861e-02, -7.573e-02, -1.729e-01, 1.987e-01, -3.462e-02, -8.216e-03, -1.140e-02, -3.458e-02, -5.185e-02) * s1[y+2][x+1];
	r += M4(1.389e-01, -1.784e-01, 4.582e-02, -3.164e-02, 3.022e-01, -2.835e-01, -1.349e-01, -9.586e-02, -1.327e-01, -1.542e-01, 1.001e-01, -4.741e-04, 5.664e-02, 6.278e-02, -2.592e-02, -8.156e-02) * s1[y+2][x+2];
	r += M4(-4.353e-02, 1.350e-02, -9.675e-02, -3.314e-02, -3.147e-02, 2.768e-02, 7.387e-02, 1.257e-01, 6.540e-02, 8.626e-02, 2.245e-02, -2.400e-02, 1.187e-03, -7.111e-02, 1.402e-01, 9.854e-03) * s2[y+0][x+0];
	r += M4(-3.265e-02, -5.177e-02, 4.959e-02, 1.947e-01, -8.383e-02, 2.411e-01, 1.142e-01, 1.419e-01, -1.025e-01, 2.347e-01, -6.419e-02, -1.688e-01, -7.936e-02, -1.034e-01, -3.833e-02, 4.180e-02) * s2[y+0][x+1];
	r += M4(-3.952e-03, 4.283e-02, -7.253e-02, -4.368e-02, 1.032e-01, -1.757e-01, -6.747e-02, 2.166e-02, 7.800e-02, -1.248e-02, -2.661e-02, -4.301e-02, -1.009e-01, 6.199e-02, -1.562e-02, 9.352e-02) * s2[y+0][x+2];
	r += M4(1.635e-01, 9.645e-02, -1.570e-01, 1.519e-01, -6.589e-03, -5.391e-02, -1.010e-02, -6.323e-02, 2.746e-01, -1.316e-01, 2.946e-01, -5.141e-02, -6.607e-02, -1.604e-01, -8.962e-02, -6.734e-02) * s2[y+1][x+0];
	r += M4(-9.169e-02, 1.323e-01, -9.120e-02, -4.846e-03, 1.901e-02, -8.987e-02, -1.319e-01, -1.264e-02, 2.761e-01, 2.350e-02, 3.234e-02, -6.854e-02, 1.639e-01, -4.221e-02, -1.132e-03, 5.140e-02) * s2[y+1][x+1];
	r += M4(4.922e-02, -1.092e-01, -1.636e-01, -1.232e-01, -5.289e-02, 2.045e-01, 6.455e-03, -1.801e-02, 1.487e-02, -1.060e-01, 7.668e-02, -1.208e-01, 4.725e-02, 1.190e-01, -2.681e-02, -4.440e-02) * s2[y+1][x+2];
	r += M4(6.716e-02, -7.111e-03, 1.721e-03, 6.020e-03, 3.284e-02, 2.867e-02, 1.395e-01, -2.124e-02, -4.602e-02, 2.276e-02, 2.223e-01, -1.213e-01, -8.232e-02, -7.960e-02, -3.994e-02, 5.028e-02) * s2[y+2][x+0];
	r += M4(2.843e-02, -1.521e-01, -3.048e-02, 5.624e-02, 1.134e-01, -6.205e-02, -8.475e-02, 7.336e-02, -1.040e-01, 1.262e-01, -4.254e-02, -2.149e-01, 7.654e-02, -4.005e-02, 3.119e-02, 7.092e-02) * s2[y+2][x+1];
	r += M4(-1.243e-02, -1.440e-02, -1.634e-02, -4.572e-02, -6.950e-02, 6.231e-02, 3.285e-02, -1.484e-01, 6.956e-02, -6.910e-02, 7.548e-02, -4.434e-02, -4.019e-02, 8.418e-03, -9.738e-03, -2.648e-02) * s2[y+2][x+2];
	r += M4(-4.455e-02, 7.677e-02, 9.122e-02, 5.826e-02, -4.246e-03, 4.652e-02, 9.077e-02, -3.817e-01, 3.153e-02, 6.426e-02, 1.166e-01, 4.067e-02, -9.109e-02, -4.463e-02, 1.901e-01, 6.103e-02) * s3[y+0][x+0];
	r += M4(2.838e-03, 6.860e-02, 5.893e-02, 1.076e-01, -2.749e-01, -3.444e-02, -1.198e-01, 2.954e-01, -2.493e-02, 1.530e-01, 5.852e-02, 2.404e-01, 6.187e-03, -1.100e-01, -3.727e-02, 3.918e-01) * s3[y+0][x+1];
	r += M4(-2.088e-01, -7.397e-02, 6.643e-02, 9.168e-02, -1.581e-01, -3.312e-01, 2.810e-02, -2.649e-02, 1.360e-01, -1.854e-01, 1.615e-02, 1.159e-01, -6.237e-02, -2.852e-02, 1.762e-02, 4.721e-01) * s3[y+0][x+2];
	r += M4(-1.268e-01, -2.125e-01, 2.309e-01, 2.428e-01, -2.036e-01, -5.317e-02, -1.227e-01, 1.270e-01, -2.816e-02, 1.933e-01, -1.658e-01, -1.058e-01, -9.960e-02, -5.971e-02, 1.992e-01, -7.878e-02) * s3[y+1][x+0];
	r += M4(1.350e-01, -1.040e-01, -1.203e-02, 2.109e-01, -1.498e-01, -4.633e-01, 3.822e-01, -5.471e-01, -6.428e-02, -1.840e-03, -8.438e-02, 3.471e-01, -7.796e-02, 2.134e-01, 2.997e-01, -1.438e-01) * s3[y+1][x+1];
	r += M4(-5.105e-02, -2.277e-01, 5.964e-02, 2.452e-02, 7.662e-02, -4.705e-01, -1.665e-01, -4.839e-02, -1.617e-01, -2.294e-01, 1.176e-01, -8.191e-03, 6.373e-02, -2.671e-01, 1.243e-01, 5.527e-02) * s3[y+1][x+2];
	r += M4(-3.433e-02, -2.028e-01, 1.050e-01, 4.666e-02, 2.153e-01, 1.977e-02, 4.697e-01, -2.580e-02, 3.039e-02, -5.293e-02, 7.659e-02, 3.085e-02, -2.805e-02, 7.561e-02, -9.610e-02, 9.499e-03) * s3[y+2][x+0];
	r += M4(1.693e-01, -8.259e-02, 1.690e-01, -9.752e-02, 8.591e-02, -3.417e-02, -4.243e-01, 2.444e-01, 3.155e-02, 9.325e-02, -3.292e-01, -1.735e-01, -3.593e-02, -1.070e-01, 3.398e-02, 2.684e-01) * s3[y+2][x+1];
	r += M4(8.075e-02, -1.255e-01, 2.109e-01, 8.227e-02, -2.100e-01, -1.207e-02, -1.212e-01, 1.046e-01, 1.606e-01, -1.164e-01, 1.329e-01, 9.454e-02, 4.159e-02, -1.800e-01, 4.447e-02, -1.831e-02) * s3[y+2][x+2];
	r += V4(6.796e-03, -3.186e-02, -3.139e-02, -3.947e-02);
	return vec4(r);
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv2_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
			s2[ay][ax] = l1(x - 1, y - 1);
			s1[ay][ax] = -max(-s0[ay][ax], V4(0.0));
			s0[ay][ax] = max(s0[ay][ax], V4(0.0));
			s3[ay][ax] = -max(-s2[ay][ax], V4(0.0));
			s2[ay][ax] = max(s2[ay][ax], V4(0.0));
		}
	}
	barrier();
	vec4 r0 = f0(xy.x, xy.y);
	vec4 r1 = f1(xy.x, xy.y);
	imageStore(out_image, opos + ivec2(0, 0), r0);
	imageStore(out_image, opos + ivec2(1, 0), r1);
}

//!DESC CuNNy-8x8C-conv4
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv3
//!BIND LUMA
//!SAVE conv4
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(texelFetch(conv3_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv3_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 s0[10][10];
shared V4 s1[10][10];
shared V4 s2[10][10];
shared V4 s3[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += M4(1.289e-01, -4.801e-02, -1.031e-02, 5.739e-02, -1.136e-01, -1.052e-01, 3.082e-02, -4.037e-02, -3.349e-02, -2.144e-03, 1.497e-02, 1.449e-01, -1.061e-01, -3.305e-03, 1.365e-01, 8.367e-02) * s0[y+0][x+0];
	r += M4(2.387e-02, 4.719e-03, 1.036e-01, 1.471e-02, 7.457e-02, -5.198e-03, 1.373e-01, 4.450e-02, 2.133e-01, -1.858e-01, 2.040e-01, 7.804e-02, -1.206e-01, -3.772e-02, -2.524e-03, -8.339e-02) * s0[y+0][x+1];
	r += M4(5.665e-02, 7.745e-02, -5.971e-02, -1.352e-01, -2.755e-02, 9.186e-02, 2.581e-02, -3.538e-02, -4.123e-02, 7.128e-02, 1.053e-02, -4.778e-02, -3.540e-02, -3.607e-02, -1.982e-03, 2.820e-02) * s0[y+0][x+2];
	r += M4(2.993e-01, -1.912e-02, -1.688e-01, -2.787e-02, 4.656e-02, -9.909e-02, 1.250e-01, 2.803e-01, 2.426e-02, -4.735e-02, 2.330e-01, -1.036e-01, -3.195e-01, -3.312e-01, 3.237e-01, -1.338e-02) * s0[y+1][x+0];
	r += M4(4.284e-01, 1.148e-01, -2.862e-01, 3.351e-01, 3.287e-01, 1.736e-01, 2.801e-01, 1.109e-01, 3.649e-02, -1.161e-01, -2.444e-01, 4.958e-01, 1.824e-01, 7.664e-02, 9.112e-02, 3.174e-01) * s0[y+1][x+1];
	r += M4(-1.664e-01, 1.306e-01, 7.319e-02, 4.428e-02, 3.193e-01, 1.295e-01, 1.439e-02, -4.483e-02, -9.909e-04, -1.432e-02, 1.038e-02, -1.603e-01, -3.151e-02, 7.960e-03, 6.919e-02, 1.602e-01) * s0[y+1][x+2];
	r += M4(1.189e-01, -7.523e-02, 6.002e-02, -7.670e-02, 7.185e-02, 4.886e-02, -6.357e-02, -1.794e-01, 1.506e-01, -2.237e-02, -4.722e-02, 5.958e-02, -1.181e-02, -2.919e-01, 2.292e-01, 9.825e-02) * s0[y+2][x+0];
	r += M4(1.929e-02, 1.208e-01, 3.992e-02, -9.570e-02, -1.120e-01, -7.220e-02, -1.961e-01, -2.898e-01, 1.263e-01, 1.914e-01, 3.221e-01, 2.748e-02, 7.335e-02, 1.052e-01, -6.762e-02, 2.340e-02) * s0[y+2][x+1];
	r += M4(6.546e-02, 1.664e-01, -4.212e-02, -1.284e-01, 2.462e-01, 1.706e-01, -1.008e-01, -1.257e-01, -1.438e-02, -2.823e-02, -3.754e-02, -9.441e-02, 6.375e-02, -7.124e-02, -1.992e-02, 5.289e-02) * s0[y+2][x+2];
	r += M4(2.056e-02, -5.007e-02, -9.495e-02, 3.574e-02, -1.267e-01, 9.058e-02, 2.545e-02, -1.539e-01, 1.834e-03, 2.371e-02, 2.544e-02, -7.378e-02, -9.509e-02, 9.830e-02, 3.636e-02, -1.402e-01) * s1[y+0][x+0];
	r += M4(-1.364e-03, 2.697e-02, 1.102e-01, 2.783e-02, -2.217e-01, -1.064e-02, 3.818e-03, -1.069e-01, 4.366e-02, 4.876e-02, -1.479e-01, 7.855e-02, -1.291e-01, 5.916e-02, -4.617e-02, -1.901e-01) * s1[y+0][x+1];
	r += M4(-3.117e-02, 5.014e-04, -3.740e-02, -9.306e-02, -6.449e-02, 8.062e-02, 5.875e-03, -9.954e-02, 1.461e-02, -1.525e-01, 1.029e-03, -3.310e-02, -4.769e-02, 2.936e-02, 6.233e-02, -3.879e-03) * s1[y+0][x+2];
	r += M4(1.140e-01, -2.057e-02, -1.450e-01, 2.865e-02, -4.722e-02, -2.934e-01, 3.086e-02, 1.660e-01, 7.335e-02, -1.064e-01, -1.155e-01, -5.956e-03, -1.581e-01, 1.729e-01, 1.117e-01, 4.108e-02) * s1[y+1][x+0];
	r += M4(1.145e-01, 4.823e-02, -3.076e-01, 3.307e-01, 7.385e-02, -1.704e-02, 1.401e-01, 2.957e-01, 2.300e-01, -2.192e-01, 1.202e-01, -4.294e-02, 1.499e-01, -1.494e-01, 3.219e-02, 2.875e-01) * s1[y+1][x+1];
	r += M4(-1.992e-01, 3.387e-03, 7.335e-02, 5.969e-02, -1.203e-02, 1.288e-01, 6.833e-02, -7.987e-03, 4.878e-03, 5.361e-02, -1.179e-01, -2.243e-02, -8.861e-02, 8.487e-02, 1.240e-01, -1.698e-02) * s1[y+1][x+2];
	r += M4(-6.862e-02, 2.464e-02, 3.184e-02, 3.538e-02, -5.795e-02, -2.108e-02, -9.656e-02, -2.749e-02, 3.844e-02, -2.387e-02, -6.333e-02, 5.023e-03, 7.248e-02, -6.998e-02, 2.093e-01, -8.282e-02) * s1[y+2][x+0];
	r += M4(-2.228e-01, 2.208e-02, -2.024e-01, -1.924e-01, -8.767e-02, -8.073e-02, 2.520e-02, -7.544e-02, -6.738e-02, -6.273e-02, -3.633e-02, -2.394e-01, 9.844e-02, -8.995e-02, 1.298e-01, -2.050e-01) * s1[y+2][x+1];
	r += M4(-2.121e-02, 9.803e-02, -1.044e-01, -5.625e-02, 4.200e-02, 1.042e-01, -5.971e-02, -1.759e-02, -1.278e-01, -4.822e-02, -2.173e-01, 1.099e-02, -2.430e-02, 1.099e-01, 6.195e-02, -9.581e-02) * s1[y+2][x+2];
	r += M4(5.331e-02, 4.936e-02, 9.658e-03, -1.461e-01, 2.086e-01, -1.450e-01, -1.263e-01, -3.209e-02, 5.062e-02, 6.510e-02, -1.104e-02, 1.226e-01, -6.499e-02, -7.051e-03, 8.151e-02, -5.239e-02) * s2[y+0][x+0];
	r += M4(4.759e-02, -3.912e-02, 8.412e-02, 2.433e-02, 1.617e-01, -1.086e-02, -3.855e-02, 2.335e-01, 1.023e-01, 3.910e-02, -1.121e-01, 3.662e-01, -3.971e-02, -1.900e-01, 3.252e-02, -8.167e-02) * s2[y+0][x+1];
	r += M4(9.304e-02, -3.932e-02, -4.503e-02, -6.689e-02, -6.947e-03, -5.024e-02, -7.772e-02, -1.017e-01, 9.660e-02, -5.008e-02, -5.591e-02, -1.225e-01, -7.408e-02, -5.144e-02, 4.112e-02, 2.275e-02) * s2[y+0][x+2];
	r += M4(-1.561e-01, -1.784e-01, 2.292e-01, 1.174e-02, -1.255e-01, 3.484e-01, -1.215e-01, 1.218e-01, -1.152e-01, -6.206e-03, 9.853e-02, -1.306e-01, -3.713e-02, 1.859e-01, -9.074e-03, 8.025e-03) * s2[y+1][x+0];
	r += M4(4.531e-02, -1.219e-01, 2.707e-01, -9.304e-02, 2.979e-01, -4.754e-01, -1.554e-01, 1.039e-01, -2.070e-01, -4.368e-02, -2.550e-01, -7.661e-02, 3.924e-01, 7.569e-02, 1.090e-02, 1.093e-01) * s2[y+1][x+1];
	r += M4(2.027e-01, -6.915e-02, 2.317e-01, 2.457e-01, 2.007e-01, 2.717e-01, 1.573e-01, 1.865e-01, 5.179e-02, -1.608e-01, 2.881e-02, 3.337e-02, 4.490e-02, -8.580e-02, 1.184e-01, -5.817e-02) * s2[y+1][x+2];
	r += M4(5.590e-02, -3.766e-02, 7.650e-02, -5.838e-02, -8.948e-02, 2.118e-01, -1.842e-01, 1.837e-01, 1.795e-02, 2.075e-01, 3.456e-02, 8.620e-02, 1.757e-02, 3.104e-01, -3.219e-02, -1.410e-01) * s2[y+2][x+0];
	r += M4(1.358e-01, 2.427e-02, 3.959e-02, -9.085e-02, -1.184e-01, -2.722e-01, 1.722e-01, 1.020e-02, -8.767e-02, 3.574e-03, 6.103e-02, 3.198e-02, -1.566e-01, -1.818e-01, 7.471e-02, -3.474e-02) * s2[y+2][x+1];
	r += M4(4.509e-02, -1.657e-01, 5.317e-02, -1.720e-02, 4.184e-03, 1.791e-03, -1.652e-01, -1.967e-01, 8.177e-02, -8.543e-02, -8.562e-02, -8.445e-03, 6.093e-02, 6.722e-02, -3.011e-02, -3.238e-02) * s2[y+2][x+2];
	r += M4(-2.369e-02, 6.236e-03, 2.054e-01, 1.013e-01, 1.053e-01, -1.728e-02, -3.791e-02, 1.082e-01, 2.174e-01, -3.504e-02, -5.619e-02, 8.142e-02, -9.770e-02, -1.370e-02, 7.092e-03, 1.007e-01) * s3[y+0][x+0];
	r += M4(-7.724e-02, -4.038e-02, 3.760e-01, -1.187e-02, 1.845e-01, 9.309e-02, -1.162e-02, 1.597e-01, 2.329e-01, -3.642e-02, -9.223e-02, -1.387e-01, 3.823e-02, -1.126e-01, -1.184e-01, 4.722e-03) * s3[y+0][x+1];
	r += M4(1.030e-01, -1.395e-01, 1.386e-01, 5.431e-02, -2.484e-02, -7.881e-02, -1.038e-01, -1.479e-02, 4.637e-02, 7.165e-02, -5.601e-02, 1.020e-01, 4.617e-03, 7.069e-02, 8.509e-02, 5.220e-02) * s3[y+0][x+2];
	r += M4(-1.232e-01, -3.303e-01, 1.587e-01, 7.257e-03, 7.777e-02, 1.500e-01, 1.436e-01, -1.366e-01, -1.068e-01, 1.800e-01, -7.887e-02, -1.101e-01, -2.387e-01, -9.266e-04, 7.765e-02, -1.413e-02) * s3[y+1][x+0];
	r += M4(7.598e-03, 6.454e-02, 2.611e-01, -1.413e-01, 4.497e-01, -2.183e-01, -1.618e-01, -6.238e-02, -1.106e-01, 2.679e-01, -1.828e-01, 2.309e-01, 2.458e-01, 2.670e-03, 8.014e-02, -2.930e-02) * s3[y+1][x+1];
	r += M4(1.476e-01, -6.512e-04, 3.799e-01, 4.365e-01, 1.180e-01, 7.432e-02, -4.866e-02, 1.215e-01, 5.415e-02, -6.138e-02, -5.989e-02, -2.879e-02, -5.977e-02, 9.776e-03, -7.638e-02, -1.265e-01) * s3[y+1][x+2];
	r += M4(-1.924e-01, 1.107e-01, 1.021e-01, 1.079e-01, 1.085e-01, 1.122e-01, 1.576e-02, 6.491e-02, 8.491e-02, -8.296e-02, 4.746e-02, 6.273e-02, -4.959e-02, -3.311e-02, -1.982e-02, -3.631e-01) * s3[y+2][x+0];
	r += M4(-2.077e-02, -9.072e-02, 2.972e-01, 1.635e-01, -1.584e-01, -1.081e-01, 8.064e-02, 4.849e-02, -4.130e-02, -1.053e-01, 3.013e-02, 6.288e-03, -7.993e-02, -1.606e-01, 1.862e-01, -1.657e-01) * s3[y+2][x+1];
	r += M4(-4.044e-02, -4.593e-02, -1.634e-02, -7.669e-02, 3.962e-02, -9.221e-02, -1.077e-01, 4.119e-02, 8.866e-02, 3.080e-02, 2.484e-02, -1.720e-02, 2.220e-02, 3.245e-02, 5.296e-02, -1.141e-01) * s3[y+2][x+2];
	r += V4(8.311e-03, -1.177e-02, 7.766e-03, -2.768e-03);
	return vec4(r);
}
vec4 f1(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-3.623e-02, -5.421e-03, -1.238e-01, 2.223e-02, 2.745e-01, 1.122e-01, -4.422e-02, 1.848e-01, 5.815e-02, 3.537e-02, -1.183e-01, -2.376e-03, -1.067e-01, 5.169e-02, 1.349e-01, 1.104e-01) * s0[y+0][x+0];
	r += M4(3.757e-03, -1.416e-01, 6.436e-02, 8.682e-02, -1.116e-01, 2.274e-01, -3.125e-01, -1.343e-01, -2.840e-02, -4.258e-01, -1.941e-01, 1.071e-02, -8.925e-02, -1.070e-01, -7.853e-02, -1.696e-01) * s0[y+0][x+1];
	r += M4(-9.682e-03, 1.248e-01, 4.932e-02, 5.886e-02, -2.130e-02, 1.145e-01, 1.677e-01, -8.913e-02, 2.078e-02, -1.635e-01, -9.792e-02, 6.694e-02, 2.501e-02, 1.205e-02, 2.307e-01, 1.412e-03) * s0[y+0][x+2];
	r += M4(4.947e-02, 8.675e-02, -5.692e-03, -1.919e-01, 3.408e-01, 1.979e-01, -3.383e-01, 2.532e-01, -1.418e-01, -1.753e-01, 8.715e-02, -3.552e-02, -2.280e-01, 3.720e-01, 4.246e-02, 1.552e-01) * s0[y+1][x+0];
	r += M4(-1.335e-01, -2.204e-01, 2.429e-01, -1.227e-01, 3.613e-01, 1.270e-01, -2.475e-01, -3.430e-01, 1.426e-01, -4.216e-01, -2.128e-01, 2.722e-01, -1.816e-01, 2.534e-01, 2.509e-01, -1.948e-01) * s0[y+1][x+1];
	r += M4(-1.763e-02, -9.566e-02, 3.394e-01, 7.188e-02, -6.501e-02, 2.646e-01, -1.451e-02, 1.948e-02, -4.366e-02, 8.866e-02, -5.108e-04, -1.981e-02, -1.491e-01, -1.389e-01, 3.323e-02, -8.486e-02) * s0[y+1][x+2];
	r += M4(6.220e-03, 5.591e-02, 4.849e-02, 1.870e-01, 4.934e-02, 3.281e-02, -5.278e-02, 3.671e-02, 1.525e-02, 9.415e-02, -1.700e-02, 6.935e-02, 1.304e-01, 2.511e-02, -1.516e-01, -2.926e-02) * s0[y+2][x+0];
	r += M4(-8.477e-02, 2.178e-01, 1.607e-01, 3.124e-01, 2.222e-01, 1.293e-01, 1.401e-02, -5.424e-02, -1.334e-02, 9.892e-02, -9.886e-02, 1.996e-01, 1.411e-01, 2.006e-01, 1.997e-01, 1.240e-01) * s0[y+2][x+1];
	r += M4(-2.382e-02, 1.246e-01, 5.524e-02, 4.159e-02, 2.911e-02, 1.949e-01, -8.057e-02, 3.824e-02, -9.792e-02, -1.591e-01, -1.363e-01, -9.462e-03, 2.066e-02, 1.946e-01, 5.203e-02, -3.567e-02) * s0[y+2][x+2];
	r += M4(9.432e-02, -1.691e-02, 3.416e-02, -8.159e-02, 2.861e-03, -3.198e-02, 1.851e-01, -6.236e-02, -6.194e-02, 3.213e-02, -3.798e-03, 2.569e-02, 7.743e-02, -3.851e-02, 1.080e-01, 3.650e-03) * s1[y+0][x+0];
	r += M4(6.843e-02, -7.288e-02, 8.048e-02, 6.683e-02, 7.536e-02, -1.311e-01, 8.287e-02, -1.657e-01, -2.531e-02, 1.155e-01, -9.661e-02, 8.589e-03, 2.072e-02, -1.635e-01, 9.584e-02, -1.126e-01) * s1[y+0][x+1];
	r += M4(1.515e-02, 8.974e-02, 6.848e-02, -3.740e-02, 9.870e-02, 1.411e-01, -2.470e-02, -2.545e-02, -6.372e-02, -6.767e-02, -8.600e-02, 5.569e-02, 1.946e-02, -8.021e-02, 2.305e-01, -4.468e-02) * s1[y+0][x+2];
	r += M4(2.332e-01, -5.011e-02, -4.166e-02, -1.151e-01, -5.319e-03, 3.156e-02, -3.172e-02, -9.908e-02, 6.397e-02, 2.810e-02, -2.539e-03, -1.014e-01, -2.995e-01, 5.091e-02, -1.558e-01, 1.658e-01) * s1[y+1][x+0];
	r += M4(-1.369e-02, -1.844e-01, 2.056e-02, -1.053e-01, 2.595e-02, -3.018e-01, 2.158e-02, -5.947e-01, 3.335e-01, 4.231e-01, -1.199e-01, 1.467e-01, -2.473e-01, 1.880e-01, -3.407e-02, -6.957e-02) * s1[y+1][x+1];
	r += M4(9.601e-03, -2.220e-01, 3.620e-01, 1.427e-01, -1.694e-02, -7.712e-02, 2.501e-01, 5.751e-02, -4.550e-02, 1.923e-02, 9.243e-02, 6.258e-02, 2.609e-02, -2.725e-01, 1.227e-01, -5.822e-02) * s1[y+1][x+2];
	r += M4(3.722e-02, -5.063e-02, -3.814e-03, 3.034e-02, 1.889e-01, 2.375e-02, 3.953e-02, 6.768e-02, 8.777e-02, -2.306e-02, 6.521e-02, 3.382e-02, -1.108e-01, 3.193e-02, -9.811e-02, -1.586e-01) * s1[y+2][x+0];
	r += M4(2.388e-01, 1.252e-01, 1.004e-01, 3.701e-01, 6.433e-02, 3.114e-03, 6.704e-02, 2.044e-02, -3.376e-03, 7.551e-03, -2.407e-02, 9.469e-02, -6.643e-02, -5.247e-02, 3.926e-01, 9.366e-02) * s1[y+2][x+1];
	r += M4(-7.488e-03, 1.481e-01, 6.263e-02, -2.689e-02, 2.672e-02, -5.281e-02, 3.501e-02, 1.992e-02, 5.123e-02, 8.608e-02, 3.964e-02, -2.152e-02, -1.410e-02, 7.229e-02, -4.545e-02, -1.046e-01) * s1[y+2][x+2];
	r += M4(9.863e-03, 1.769e-01, 1.479e-02, -2.836e-02, -1.170e-01, -1.370e-01, -9.561e-02, -1.190e-02, -1.298e-02, -1.026e-01, 2.228e-01, 2.746e-02, 3.573e-02, -8.968e-02, 6.162e-02, -5.853e-02) * s2[y+0][x+0];
	r += M4(1.261e-01, -4.101e-02, 6.628e-02, 5.398e-02, 6.414e-03, 3.169e-01, 1.195e-02, -6.700e-02, 4.632e-01, -1.030e-01, -6.108e-02, -4.726e-02, 3.493e-02, -1.089e-01, 1.806e-02, -4.875e-03) * s2[y+0][x+1];
	r += M4(3.376e-03, 6.517e-02, -1.171e-01, 8.379e-02, 6.506e-03, -6.549e-02, -1.441e-02, 1.310e-01, 1.310e-02, -3.056e-01, 9.713e-02, 7.213e-02, 1.888e-02, -6.771e-02, -1.931e-01, 1.636e-02) * s2[y+0][x+2];
	r += M4(-1.731e-01, -1.548e-01, -1.153e-01, 1.358e-02, 3.110e-01, -1.334e-01, 3.262e-02, 2.593e-02, 3.419e-02, 1.627e-02, 1.534e-03, 1.372e-01, -1.372e-01, 4.830e-02, 1.043e-01, 1.701e-01) * s2[y+1][x+0];
	r += M4(-1.289e-01, -1.399e-01, 9.421e-02, 8.664e-02, 3.008e-01, 1.912e-01, -1.629e-01, -8.211e-02, 2.591e-01, 4.822e-02, 6.962e-03, -2.177e-01, 1.855e-01, 1.864e-01, -3.690e-01, 1.180e-01) * s2[y+1][x+1];
	r += M4(2.569e-02, -2.709e-02, -3.221e-02, 3.520e-02, 6.572e-02, -4.468e-03, 3.057e-01, 8.161e-02, -2.039e-02, 1.265e-01, -2.977e-02, 1.120e-01, 2.099e-03, -2.432e-01, -8.228e-02, 9.921e-02) * s2[y+1][x+2];
	r += M4(-2.073e-01, 6.744e-02, 3.281e-02, 5.414e-02, -2.124e-01, -4.903e-02, -1.136e-01, -1.676e-01, -1.154e-01, -5.529e-02, 2.795e-02, -1.698e-01, -1.735e-03, -2.280e-03, 1.278e-02, -5.815e-02) * s2[y+2][x+0];
	r += M4(1.764e-01, -3.286e-02, 8.122e-02, 1.190e-01, 5.377e-02, 1.385e-01, 1.481e-01, 2.159e-01, 1.298e-01, -1.218e-01, 7.276e-02, -1.031e-02, 1.614e-01, 1.481e-02, 8.206e-02, 2.735e-01) * s2[y+2][x+1];
	r += M4(1.196e-02, 1.067e-01, -1.416e-01, 1.074e-02, -2.172e-02, 3.559e-02, -8.766e-02, 3.619e-03, 6.272e-02, 1.019e-01, -1.255e-01, 1.470e-01, 2.602e-02, 1.928e-02, 5.085e-03, 3.351e-03) * s2[y+2][x+2];
	r += M4(1.382e-01, 1.236e-01, -4.349e-02, -4.268e-02, -8.474e-02, 1.404e-01, -4.496e-02, -8.648e-03, 3.780e-02, 1.822e-02, -1.251e-01, 4.145e-02, -7.355e-03, 8.256e-02, 1.641e-02, 4.051e-02) * s3[y+0][x+0];
	r += M4(1.742e-01, -3.967e-01, 3.102e-01, -1.054e-02, -2.826e-02, 1.277e-01, -1.034e-01, 1.527e-01, 2.144e-01, 1.444e-01, 1.478e-01, 8.276e-02, 7.159e-02, 2.168e-02, -1.140e-01, -3.504e-02) * s3[y+0][x+1];
	r += M4(-8.035e-02, -5.754e-02, -2.627e-01, -5.892e-03, -5.427e-02, 1.779e-01, -1.160e-01, 9.419e-03, 4.893e-02, 7.661e-02, 9.722e-02, 2.295e-02, -3.750e-02, 5.951e-02, 9.678e-03, 1.732e-02) * s3[y+0][x+2];
	r += M4(1.543e-01, -1.250e-01, -1.404e-01, 1.733e-01, -4.603e-03, -7.421e-02, 1.948e-02, 2.584e-01, -5.469e-02, 4.453e-02, 8.629e-02, 4.359e-02, -1.071e-02, 2.179e-01, 8.906e-02, 2.199e-01) * s3[y+1][x+0];
	r += M4(-1.476e-02, -1.428e-01, -1.634e-02, 5.979e-02, 1.312e-01, -4.864e-02, -1.522e-01, -3.105e-02, 1.084e-01, -6.016e-02, -3.297e-01, -2.880e-01, -5.282e-02, 2.352e-01, -2.783e-01, 3.101e-02) * s3[y+1][x+1];
	r += M4(5.473e-02, -5.163e-02, 7.965e-02, 1.118e-02, -2.127e-02, 3.025e-03, 1.478e-01, 1.363e-01, 2.110e-02, 1.973e-01, 2.612e-01, 1.625e-01, 5.293e-02, 1.464e-01, -3.466e-02, 1.614e-01) * s3[y+1][x+2];
	r += M4(-6.071e-02, -1.632e-01, 4.683e-02, -3.406e-02, -2.023e-01, 1.338e-03, -6.527e-02, -1.113e-01, -1.294e-01, 3.823e-02, 5.187e-02, -2.294e-02, 1.648e-01, 3.529e-02, 3.679e-02, 1.344e-01) * s3[y+2][x+0];
	r += M4(3.272e-01, -1.126e-01, -2.323e-02, 3.290e-01, 6.889e-02, -9.225e-02, 5.315e-02, 2.194e-02, 9.597e-02, 5.582e-02, -1.421e-01, 2.305e-02, 2.576e-02, 5.114e-02, 3.721e-01, 7.980e-02) * s3[y+2][x+1];
	r += M4(7.072e-03, -6.781e-03, -4.034e-02, -4.067e-02, 3.713e-02, 1.199e-01, -9.966e-02, 8.821e-02, 4.335e-02, 2.545e-02, -3.749e-02, 9.832e-02, -4.756e-02, 5.197e-02, 1.816e-01, 1.169e-01) * s3[y+2][x+2];
	r += V4(-9.977e-03, 2.021e-02, -1.544e-02, 2.789e-02);
	return vec4(r);
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv3_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
			s2[ay][ax] = l1(x - 1, y - 1);
			s1[ay][ax] = -max(-s0[ay][ax], V4(0.0));
			s0[ay][ax] = max(s0[ay][ax], V4(0.0));
			s3[ay][ax] = -max(-s2[ay][ax], V4(0.0));
			s2[ay][ax] = max(s2[ay][ax], V4(0.0));
		}
	}
	barrier();
	vec4 r0 = f0(xy.x, xy.y);
	vec4 r1 = f1(xy.x, xy.y);
	imageStore(out_image, opos + ivec2(0, 0), r0);
	imageStore(out_image, opos + ivec2(1, 0), r1);
}

//!DESC CuNNy-8x8C-conv5
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv4
//!BIND LUMA
//!SAVE conv5
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(texelFetch(conv4_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv4_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 s0[10][10];
shared V4 s1[10][10];
shared V4 s2[10][10];
shared V4 s3[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += M4(6.705e-02, 5.499e-02, -2.195e-02, 6.791e-02, -2.184e-02, 1.431e-01, 6.180e-02, 6.593e-02, 2.220e-02, -9.059e-02, -9.539e-02, -4.750e-02, 4.116e-02, -2.967e-02, 7.547e-02, -4.646e-03) * s0[y+0][x+0];
	r += M4(3.751e-01, 2.731e-02, -2.322e-02, 2.885e-02, 4.425e-01, -3.046e-01, 1.268e-01, 5.001e-02, 9.936e-03, 4.038e-02, -4.949e-02, -9.878e-02, 4.196e-02, 7.888e-03, 4.206e-02, 1.221e-01) * s0[y+0][x+1];
	r += M4(2.597e-02, -1.119e-02, -1.284e-01, -2.792e-02, -5.070e-02, 1.547e-02, -2.467e-01, 8.871e-02, -8.394e-02, -5.381e-02, 8.218e-02, -9.911e-02, 6.284e-03, -1.538e-01, 1.704e-02, 5.341e-02) * s0[y+0][x+2];
	r += M4(1.221e-02, -7.575e-02, -5.908e-02, 1.119e-02, -1.515e-01, 4.959e-02, 8.046e-02, 1.039e-01, -6.897e-02, 4.282e-02, -5.922e-02, -2.174e-02, -1.245e-02, 3.415e-02, -1.671e-02, 5.930e-02) * s0[y+1][x+0];
	r += M4(1.126e-01, -9.287e-02, -3.242e-01, -1.091e-01, 6.587e-02, 5.871e-02, 1.937e-01, 2.518e-01, -3.713e-01, 8.735e-02, 2.306e-01, -7.409e-02, 2.558e-01, -2.085e-01, -8.441e-02, 7.265e-02) * s0[y+1][x+1];
	r += M4(-1.709e-01, 3.208e-01, 2.526e-01, 3.496e-02, 4.886e-02, -8.761e-02, -1.135e-01, 3.075e-01, 1.226e-02, -1.881e-01, -1.766e-01, -3.523e-01, -1.239e-01, -9.369e-02, 6.714e-02, -2.790e-03) * s0[y+1][x+2];
	r += M4(1.371e-02, 1.132e-01, 3.164e-02, 5.098e-02, -4.136e-03, 1.218e-01, -1.590e-02, 8.178e-03, 4.445e-02, 3.469e-02, -7.344e-02, -5.884e-02, -1.498e-03, 1.697e-02, 3.672e-02, 2.454e-02) * s0[y+2][x+0];
	r += M4(-1.100e-01, 1.813e-02, -4.452e-02, -8.184e-02, 2.765e-02, 2.766e-02, 6.390e-02, 9.308e-02, 1.499e-01, -2.136e-02, 2.244e-02, -2.213e-01, -1.236e-01, -1.202e-01, -5.675e-02, -1.812e-02) * s0[y+2][x+1];
	r += M4(4.584e-02, -2.165e-02, 4.895e-02, -3.357e-02, 2.697e-02, 6.320e-02, 6.435e-02, 8.512e-02, 4.676e-02, 4.711e-02, 3.226e-02, -2.027e-01, 6.290e-02, -5.174e-02, -9.437e-02, -8.453e-02) * s0[y+2][x+2];
	r += M4(-1.073e-01, 7.717e-02, -1.142e-01, 4.960e-02, 1.364e-01, 4.639e-02, -2.923e-02, 4.819e-03, 2.652e-01, 3.009e-02, -1.142e-01, 4.118e-02, 2.573e-01, 3.623e-01, 3.494e-01, -4.288e-02) * s1[y+0][x+0];
	r += M4(-7.335e-02, 1.567e-01, -1.768e-01, 6.717e-02, 1.127e-01, -1.741e-01, -1.330e-01, -5.943e-03, -1.560e-01, 4.142e-02, 2.013e-02, 4.933e-02, 4.142e-01, 1.120e-01, 1.095e-01, -3.995e-02) * s1[y+0][x+1];
	r += M4(5.310e-02, 1.170e-01, -1.203e-01, 1.057e-02, 5.035e-03, -3.036e-02, -2.551e-01, 3.816e-02, 9.855e-02, -2.779e-01, -5.780e-03, -1.621e-01, 3.337e-01, -6.969e-02, 4.962e-02, -3.444e-02) * s1[y+0][x+2];
	r += M4(5.701e-02, 2.915e-02, -1.472e-02, 6.468e-02, -1.098e-01, 1.086e-01, -1.578e-02, 3.731e-03, -2.382e-01, -1.794e-02, -1.297e-01, 1.977e-02, 4.073e-02, 3.098e-01, -5.908e-03, 1.042e-01) * s1[y+1][x+0];
	r += M4(1.071e-01, 2.108e-02, -2.065e-01, -1.430e-02, -1.608e-01, -1.114e-03, 5.569e-03, -3.251e-02, 1.799e-02, -4.503e-03, 3.056e-01, 1.678e-01, 1.570e-02, 1.415e-01, 2.600e-01, -7.224e-03) * s1[y+1][x+1];
	r += M4(-1.075e-01, 1.329e-01, 5.604e-02, -1.615e-01, -1.203e-01, -2.068e-01, -2.420e-01, 1.333e-01, -4.609e-02, -6.978e-02, -1.159e-01, -1.772e-02, -2.920e-01, 3.084e-01, 4.474e-02, -6.354e-02) * s1[y+1][x+2];
	r += M4(-3.421e-02, 4.680e-02, 1.097e-02, 7.029e-02, -1.619e-02, 9.009e-02, -1.138e-02, -3.463e-03, -2.678e-02, 2.346e-02, 4.271e-03, 8.914e-02, 7.556e-02, -6.253e-02, -2.742e-02, 1.942e-02) * s1[y+2][x+0];
	r += M4(-1.503e-01, 2.198e-01, -5.325e-02, -7.158e-02, 2.880e-02, -8.713e-02, 8.708e-02, 4.793e-02, 1.971e-01, 9.168e-02, 1.073e-01, 4.227e-03, 4.093e-01, 8.699e-02, 3.407e-02, -3.962e-02) * s1[y+2][x+1];
	r += M4(2.278e-02, 8.508e-02, 2.783e-03, 1.221e-01, 6.146e-03, 2.407e-02, -1.087e-02, 6.752e-02, 8.910e-02, 1.112e-01, -1.285e-01, -6.245e-02, 1.778e-01, 1.043e-01, 5.187e-02, -3.026e-02) * s1[y+2][x+2];
	r += M4(1.512e-01, 6.452e-02, 9.839e-02, 4.576e-02, 1.363e-01, 1.521e-01, -4.738e-02, -3.015e-02, 9.922e-02, -9.315e-02, 1.982e-01, -7.153e-02, 6.455e-02, 1.428e-01, 2.530e-01, 2.351e-02) * s2[y+0][x+0];
	r += M4(4.619e-04, -2.725e-01, -1.226e-02, 2.081e-02, 1.167e-01, 1.489e-01, 1.185e-01, -6.831e-02, -1.707e-02, -2.364e-01, 4.840e-01, 6.175e-03, 1.395e-01, -2.751e-02, 6.088e-03, 8.047e-02) * s2[y+0][x+1];
	r += M4(-3.703e-02, 1.476e-03, -1.005e-01, 1.309e-01, -7.211e-04, 3.292e-02, -3.885e-02, 2.623e-02, -1.929e-01, -2.217e-01, -9.893e-02, -3.066e-02, 1.933e-01, 4.964e-02, 5.108e-02, 1.278e-01) * s2[y+0][x+2];
	r += M4(-5.292e-02, 4.667e-02, -1.144e-01, -1.614e-03, -9.387e-02, 2.596e-01, 5.241e-03, 9.353e-02, -2.436e-01, -9.204e-02, -7.143e-02, 1.126e-01, -1.764e-01, 6.397e-02, -6.959e-02, 2.302e-02) * s2[y+1][x+0];
	r += M4(-2.540e-02, 3.607e-02, 6.516e-02, 2.442e-02, -3.377e-01, 2.158e-01, 4.182e-01, -2.181e-02, 2.458e-01, -3.133e-01, 3.074e-01, 1.170e-02, -1.627e-01, -2.056e-01, 2.900e-01, 8.225e-02) * s2[y+1][x+1];
	r += M4(-4.707e-02, 4.948e-03, 9.213e-02, -1.965e-01, -5.298e-02, 9.448e-02, 2.581e-02, 4.872e-02, 2.556e-01, -2.673e-02, -5.028e-02, 6.645e-02, -1.447e-01, 1.704e-01, 1.816e-02, -6.749e-02) * s2[y+1][x+2];
	r += M4(-4.783e-02, 8.302e-02, 5.386e-02, 3.009e-03, 6.100e-02, -1.150e-01, 7.318e-02, -2.135e-02, -3.078e-02, -1.396e-01, 3.353e-01, 2.560e-01, 1.048e-01, -7.993e-02, -2.529e-02, -7.060e-02) * s2[y+2][x+0];
	r += M4(2.062e-01, -1.748e-01, -2.542e-02, -2.687e-01, 2.086e-01, 8.900e-02, 1.204e-02, 1.377e-01, 1.576e-01, -1.219e-01, 7.087e-02, 1.326e-02, 6.115e-02, 3.056e-02, 4.233e-02, 1.467e-01) * s2[y+2][x+1];
	r += M4(-6.899e-03, 6.426e-02, 5.565e-02, -1.811e-01, 3.553e-02, 2.360e-02, -5.378e-02, 6.052e-02, 1.637e-02, -7.428e-02, 3.750e-02, 4.247e-02, 4.765e-02, 6.992e-02, 6.547e-02, 3.357e-02) * s2[y+2][x+2];
	r += M4(-6.855e-02, -1.346e-02, 2.443e-02, -3.786e-02, -1.241e-03, 1.221e-02, 3.823e-02, -7.283e-03, 7.919e-02, -3.682e-02, 1.111e-01, 7.364e-03, -3.026e-02, 7.875e-02, 6.418e-02, -3.715e-02) * s3[y+0][x+0];
	r += M4(-8.840e-02, 8.107e-02, 1.302e-01, -2.799e-02, -7.609e-02, -2.195e-02, 5.597e-02, -7.641e-02, 1.073e-01, -1.421e-01, -6.954e-02, 3.302e-02, 1.124e-01, -1.417e-01, -6.714e-02, 2.693e-02) * s3[y+0][x+1];
	r += M4(-1.704e-01, 1.821e-01, 2.378e-01, 1.665e-02, 1.005e-02, 1.981e-02, 1.284e-01, -6.342e-02, 4.874e-02, 5.163e-02, 1.046e-02, -6.897e-02, -2.952e-02, -2.668e-02, -1.279e-01, 1.189e-01) * s3[y+0][x+2];
	r += M4(5.048e-02, -7.949e-02, -5.657e-02, -9.705e-02, -2.430e-01, 1.520e-01, 1.604e-01, 1.318e-01, 2.330e-02, 1.028e-01, -9.932e-02, -1.192e-02, -2.292e-01, 5.949e-02, -2.114e-01, 2.071e-02) * s3[y+1][x+0];
	r += M4(-1.036e-01, 2.375e-01, -4.904e-02, 1.005e-01, -2.799e-01, 2.149e-01, 1.789e-01, 1.048e-01, 7.096e-02, 6.296e-04, 1.134e-01, 9.020e-02, -2.922e-01, -3.900e-01, 4.136e-02, -2.229e-01) * s3[y+1][x+1];
	r += M4(-4.332e-03, 1.218e-01, 1.844e-01, -1.230e-01, 2.867e-02, -1.786e-01, -9.952e-02, -9.225e-02, 8.687e-02, 7.325e-03, -5.932e-05, -1.242e-02, 1.555e-02, -1.068e-01, -1.879e-01, -8.579e-02) * s3[y+1][x+2];
	r += M4(1.942e-02, 1.542e-01, -2.298e-02, 9.448e-03, 2.915e-02, -7.929e-03, 1.334e-01, 8.143e-02, -2.500e-02, -2.258e-02, 1.767e-02, 4.227e-02, 9.300e-02, 2.526e-02, -5.590e-02, -6.671e-02) * s3[y+2][x+0];
	r += M4(-3.028e-03, -8.400e-02, -3.470e-02, -1.879e-01, 2.098e-01, 1.154e-01, 6.620e-02, 4.234e-02, -1.017e-01, -2.844e-02, -5.869e-02, 7.418e-02, 2.858e-02, 8.811e-04, 5.732e-02, 9.107e-02) * s3[y+2][x+1];
	r += M4(-9.919e-02, 9.158e-02, 1.677e-01, 3.293e-02, -2.283e-02, -7.135e-02, -7.378e-02, 2.060e-02, -5.454e-02, 1.651e-02, 4.674e-02, 6.177e-02, 4.860e-02, 1.739e-02, -9.398e-03, 1.249e-01) * s3[y+2][x+2];
	r += V4(2.035e-02, 4.268e-03, -1.047e-02, -4.042e-02);
	return vec4(r);
}
vec4 f1(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-2.931e-02, 2.249e-02, -4.536e-02, 1.057e-01, 8.526e-02, -1.729e-01, -1.134e-02, -2.435e-01, -2.802e-02, -1.199e-01, 1.694e-01, -9.893e-02, -6.890e-03, -1.177e-01, 1.513e-02, -7.006e-02) * s0[y+0][x+0];
	r += M4(-4.367e-02, -1.711e-01, -2.187e-01, 2.622e-02, 1.947e-02, -4.365e-01, -1.123e-01, 2.656e-02, -1.296e-01, 1.108e-01, 5.243e-03, -5.414e-02, -6.954e-02, -1.067e-01, -6.127e-02, -8.659e-02) * s0[y+0][x+1];
	r += M4(1.104e-01, 3.698e-02, -5.720e-02, 1.249e-01, 1.479e-01, 1.195e-01, -8.853e-02, 3.748e-02, -8.469e-02, -6.003e-02, 9.239e-02, -3.049e-02, -6.626e-02, 3.632e-02, 2.579e-02, -8.878e-02) * s0[y+0][x+2];
	r += M4(-1.576e-02, 1.277e-01, -8.062e-02, 6.091e-02, 9.599e-02, 1.341e-01, -3.613e-02, 1.102e-01, 4.732e-02, 2.958e-01, -2.489e-01, 6.712e-02, 4.218e-02, 1.310e-01, -5.724e-02, -8.625e-03) * s0[y+1][x+0];
	r += M4(1.764e-01, 3.915e-01, 3.232e-01, -4.140e-01, -5.457e-02, -3.212e-01, 1.934e-02, 1.271e-01, 1.001e-01, 1.315e-01, 3.797e-03, 1.374e-01, -1.524e-01, 2.299e-01, 1.233e-01, 1.204e-01) * s0[y+1][x+1];
	r += M4(2.514e-02, -6.241e-02, 4.357e-02, 1.227e-01, -6.275e-02, 4.345e-02, -6.524e-02, 9.486e-03, 1.236e-01, -1.056e-02, 6.487e-02, -6.896e-02, -6.415e-02, 3.299e-02, 1.025e-01, -8.210e-02) * s0[y+1][x+2];
	r += M4(-3.718e-02, -1.993e-02, -5.918e-02, 6.233e-02, 2.823e-02, 3.231e-02, -6.928e-02, 2.012e-02, -8.861e-02, -3.118e-02, -5.351e-02, -7.831e-02, 3.645e-02, -3.601e-02, 1.112e-02, -3.547e-02) * s0[y+2][x+0];
	r += M4(-3.524e-02, -1.777e-02, -2.056e-01, 2.640e-02, -1.114e-02, 6.356e-02, 4.394e-02, 4.844e-02, 8.739e-02, 1.347e-02, 7.308e-02, 1.292e-01, -7.386e-03, -1.092e-02, 9.841e-02, -5.823e-03) * s0[y+2][x+1];
	r += M4(6.031e-02, 1.694e-02, -7.223e-02, 3.254e-02, 4.317e-02, -3.592e-02, 1.164e-01, -9.928e-03, 2.155e-02, 1.904e-02, -2.429e-02, -3.159e-02, -1.421e-01, -4.478e-02, 5.878e-02, -9.866e-02) * s0[y+2][x+2];
	r += M4(7.961e-02, 2.737e-02, -1.334e-02, -1.349e-01, -1.340e-02, -2.729e-02, -9.784e-02, 8.466e-02, 2.287e-02, -2.153e-01, -3.471e-03, -5.854e-02, 3.047e-01, 1.792e-02, -3.711e-02, -4.940e-02) * s1[y+0][x+0];
	r += M4(2.349e-02, -4.745e-02, -1.203e-01, 1.664e-01, 5.867e-02, -3.308e-01, -7.685e-02, -7.831e-02, 6.187e-02, 1.530e-01, 1.932e-01, -3.248e-01, -1.354e-01, -6.375e-02, -3.358e-01, 3.896e-01) * s1[y+0][x+1];
	r += M4(2.773e-02, -2.036e-01, -5.214e-02, 1.288e-01, -1.909e-02, -3.869e-02, -7.238e-02, 9.692e-02, -1.826e-01, -1.078e-01, 1.032e-01, -2.439e-02, 1.440e-01, -2.464e-02, -2.538e-01, -1.879e-01) * s1[y+0][x+2];
	r += M4(-8.655e-02, 4.554e-02, -1.977e-01, 1.670e-01, -1.485e-02, 8.257e-03, 5.862e-03, 1.414e-01, 3.414e-02, 1.307e-01, -1.029e-01, 4.821e-02, -3.292e-02, 1.772e-01, -1.530e-01, -2.330e-01) * s1[y+1][x+0];
	r += M4(1.497e-01, 2.072e-01, 1.082e-01, -1.157e-01, -5.907e-02, -2.931e-01, -8.292e-02, -1.409e-02, 5.893e-02, 7.108e-02, 8.669e-03, 3.948e-01, -3.494e-02, -1.274e-03, 1.093e-01, -5.488e-01) * s1[y+1][x+1];
	r += M4(2.568e-01, -1.472e-01, -1.611e-01, 1.802e-01, -1.683e-01, 1.689e-02, -2.085e-02, 8.671e-02, 9.418e-02, 7.063e-02, -1.160e-01, -9.508e-03, 3.679e-01, -5.117e-02, 4.247e-01, 1.234e-01) * s1[y+1][x+2];
	r += M4(-4.177e-02, -5.453e-02, -4.185e-02, 3.128e-02, -1.367e-02, 5.608e-02, -6.897e-02, 9.233e-03, -2.326e-02, 5.093e-02, 1.078e-01, 6.470e-02, 2.119e-01, -7.611e-02, 1.164e-02, -5.455e-02) * s1[y+2][x+0];
	r += M4(1.240e-01, -1.632e-01, -4.346e-02, -7.883e-02, -3.639e-02, 5.400e-02, 3.544e-02, 9.928e-03, 2.651e-01, -7.752e-02, -1.751e-04, -9.122e-02, 2.659e-01, 1.044e-01, -1.469e-01, -8.121e-02) * s1[y+2][x+1];
	r += M4(2.622e-01, 1.072e-01, -9.674e-02, 3.424e-02, 4.567e-02, -2.055e-02, 1.974e-02, 3.418e-02, 1.601e-02, -1.301e-01, -3.995e-02, -9.406e-02, -3.684e-02, -3.160e-02, -1.258e-01, -1.317e-01) * s1[y+2][x+2];
	r += M4(1.304e-01, 3.363e-03, -1.091e-01, -5.235e-02, 3.559e-02, -2.459e-03, 3.954e-02, -4.558e-02, -2.423e-01, 1.609e-01, 2.611e-01, 4.315e-02, 5.092e-02, 2.834e-02, -8.362e-02, -8.492e-02) * s2[y+0][x+0];
	r += M4(4.568e-02, -1.274e-01, -1.813e-01, 1.794e-01, 9.679e-02, -1.493e-01, -5.650e-02, -1.963e-01, -3.984e-01, 1.915e-01, 6.274e-01, -4.409e-01, 1.697e-01, 3.646e-01, -9.281e-02, 1.502e-02) * s2[y+0][x+1];
	r += M4(1.322e-01, 9.571e-02, 2.768e-02, -1.992e-01, -5.078e-03, 2.182e-02, 2.252e-02, 8.102e-02, -2.259e-01, 2.941e-01, 1.733e-01, 7.783e-02, 1.099e-01, 9.430e-02, -1.080e-01, -1.130e-01) * s2[y+0][x+2];
	r += M4(-7.124e-02, 1.870e-02, 6.562e-02, 1.789e-01, 2.726e-01, -3.728e-02, -3.251e-01, -1.285e-01, -5.466e-01, 4.957e-01, -1.611e-01, 4.138e-01, 2.923e-02, 8.879e-03, -9.030e-03, -6.635e-02) * s2[y+1][x+0];
	r += M4(7.739e-02, 3.556e-02, 2.819e-01, -3.102e-01, 5.487e-02, 3.314e-01, 2.426e-01, 4.567e-02, -6.871e-01, 1.172e-03, 2.572e-01, -8.496e-02, -5.211e-02, 2.800e-02, -2.942e-01, 5.403e-02) * s2[y+1][x+1];
	r += M4(6.572e-02, 1.942e-02, -7.443e-02, -1.414e-03, 1.342e-01, 3.678e-03, -4.027e-02, 4.122e-02, -3.738e-01, 1.201e-02, -5.037e-04, 5.472e-02, 2.017e-01, 1.049e-01, 1.298e-01, -2.570e-02) * s2[y+1][x+2];
	r += M4(4.814e-02, -6.643e-05, 1.819e-03, 3.362e-02, 1.107e-01, 4.647e-02, 1.260e-01, -4.320e-02, -2.770e-01, 1.472e-01, 1.042e-01, 1.800e-01, 5.824e-02, 1.031e-02, -6.481e-02, -6.016e-02) * s2[y+2][x+0];
	r += M4(1.121e-01, 7.740e-02, -3.520e-02, -5.329e-02, 2.915e-02, 6.421e-02, 2.332e-02, 7.202e-02, -3.913e-01, -6.457e-03, -2.336e-02, -4.299e-03, -3.604e-02, 9.034e-02, -1.241e-01, -1.199e-01) * s2[y+2][x+1];
	r += M4(-1.155e-01, -8.436e-02, 7.808e-02, 5.984e-02, -1.619e-01, 1.728e-02, -6.377e-02, -1.866e-02, -2.775e-01, -1.305e-01, 1.770e-01, 1.888e-01, -5.335e-02, -2.895e-02, -1.158e-01, -7.538e-02) * s2[y+2][x+2];
	r += M4(9.544e-03, -3.803e-02, 9.547e-02, -8.725e-02, -4.842e-02, 2.440e-02, 1.108e-01, 1.886e-02, 5.495e-02, 4.712e-02, 2.554e-02, -9.477e-02, -4.517e-02, -3.456e-02, -2.181e-02, 5.255e-02) * s3[y+0][x+0];
	r += M4(-4.897e-02, -9.683e-03, -2.637e-02, -1.277e-02, 8.183e-03, 1.103e-01, 1.674e-01, -1.927e-01, -1.450e-01, 6.880e-02, -1.535e-02, 6.834e-02, 1.345e-01, 1.089e-01, -9.745e-02, 1.274e-01) * s3[y+0][x+1];
	r += M4(-8.913e-02, -1.104e-01, 1.175e-01, -3.819e-02, -3.165e-02, -4.954e-02, 1.954e-04, 5.617e-02, -4.089e-02, 1.344e-02, -1.262e-04, 3.267e-02, -1.237e-01, -3.019e-02, -6.375e-02, -4.142e-02) * s3[y+0][x+2];
	r += M4(-7.036e-02, 8.711e-02, -8.575e-02, 1.313e-01, 3.723e-03, 3.859e-02, -1.524e-01, 3.331e-02, -5.281e-02, 2.199e-01, -1.248e-01, 7.538e-03, -2.453e-02, -1.406e-02, 6.090e-02, 1.317e-02) * s3[y+1][x+0];
	r += M4(1.369e-02, 2.944e-01, -4.338e-03, -2.426e-01, -1.365e-01, -3.281e-02, 4.211e-02, -1.541e-01, -2.132e-01, 4.779e-02, -2.038e-01, -7.476e-03, -3.657e-01, -5.885e-01, -2.071e-02, 1.654e-01) * s3[y+1][x+1];
	r += M4(7.632e-02, 7.239e-02, -1.891e-01, 3.125e-01, 4.908e-02, 1.346e-02, -9.525e-02, 1.251e-01, 6.390e-02, 1.072e-03, -4.481e-02, 1.635e-01, 7.747e-02, -8.655e-02, 1.257e-01, -1.835e-01) * s3[y+1][x+2];
	r += M4(6.494e-02, -6.573e-02, -9.711e-02, -5.382e-02, 1.210e-01, 1.646e-01, 8.578e-03, 1.297e-01, 4.713e-02, -3.436e-02, -1.622e-03, -3.409e-03, 4.077e-02, -1.382e-02, -3.119e-02, -6.763e-02) * s3[y+2][x+0];
	r += M4(1.277e-01, 1.440e-01, -1.304e-01, -2.907e-02, 6.387e-02, 1.659e-02, 2.061e-03, 1.068e-01, -4.134e-02, 3.255e-02, 8.788e-02, 3.405e-02, -1.554e-01, -5.027e-02, 3.900e-03, -2.196e-01) * s3[y+2][x+1];
	r += M4(-2.492e-02, 1.095e-01, -1.323e-01, 1.270e-02, -3.506e-02, -4.008e-02, -4.215e-02, 4.720e-02, 1.698e-02, 5.839e-04, 9.549e-02, 7.463e-02, 3.744e-02, -6.611e-02, -6.140e-02, -1.042e-01) * s3[y+2][x+2];
	r += V4(5.628e-03, -1.042e-02, -3.863e-03, -1.254e-02);
	return vec4(r);
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv4_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
			s2[ay][ax] = l1(x - 1, y - 1);
			s1[ay][ax] = -max(-s0[ay][ax], V4(0.0));
			s0[ay][ax] = max(s0[ay][ax], V4(0.0));
			s3[ay][ax] = -max(-s2[ay][ax], V4(0.0));
			s2[ay][ax] = max(s2[ay][ax], V4(0.0));
		}
	}
	barrier();
	vec4 r0 = f0(xy.x, xy.y);
	vec4 r1 = f1(xy.x, xy.y);
	imageStore(out_image, opos + ivec2(0, 0), r0);
	imageStore(out_image, opos + ivec2(1, 0), r1);
}

//!DESC CuNNy-8x8C-conv6
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv5
//!BIND LUMA
//!SAVE conv6
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(texelFetch(conv5_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv5_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 s0[10][10];
shared V4 s1[10][10];
shared V4 s2[10][10];
shared V4 s3[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-4.812e-02, 3.363e-03, -4.865e-03, -5.917e-02, -2.666e-01, 8.388e-02, 4.933e-02, -4.084e-02, -2.104e-02, -3.645e-02, 8.012e-03, 8.081e-02, -5.999e-02, 2.245e-01, -4.031e-02, -5.653e-01) * s0[y+0][x+0];
	r += M4(4.182e-02, 3.454e-02, 2.870e-03, -1.150e-01, -2.854e-01, 1.910e-01, -7.073e-02, 5.944e-02, 5.489e-02, 1.029e-01, 1.034e-03, 7.315e-02, -3.599e-01, -1.443e-01, 1.069e-01, -5.389e-01) * s0[y+0][x+1];
	r += M4(5.269e-02, 3.173e-02, -3.491e-02, -6.956e-02, -4.821e-02, -1.675e-01, 2.966e-02, 9.512e-02, -5.740e-02, 1.391e-01, -2.427e-02, 3.922e-02, 4.244e-01, 7.235e-03, 9.262e-02, -1.264e-01) * s0[y+0][x+2];
	r += M4(3.694e-02, 5.081e-02, -7.413e-02, 9.782e-03, -1.672e-01, 1.880e-01, 6.408e-02, -1.236e-02, -7.395e-02, 3.122e-02, 5.412e-02, 8.748e-02, -1.895e-01, 1.011e-01, -8.877e-01, -3.199e-01) * s0[y+1][x+0];
	r += M4(3.863e-02, -8.482e-02, 5.231e-03, 1.874e-01, 2.944e-01, 6.124e-02, 3.426e-02, -1.235e-01, 2.447e-01, 2.007e-01, -4.755e-02, -4.857e-01, 3.828e-01, 3.383e-02, -2.184e-01, -4.580e-01) * s0[y+1][x+1];
	r += M4(-1.990e-01, -1.082e-01, -7.405e-02, 5.543e-02, 2.629e-02, 9.324e-02, -5.107e-03, 1.840e-01, 1.717e-02, 6.566e-02, -4.531e-02, 5.644e-02, 2.282e-01, -5.819e-02, 1.910e-02, -6.300e-02) * s0[y+1][x+2];
	r += M4(5.975e-02, 4.899e-03, 2.045e-02, -4.082e-02, -4.776e-02, 6.051e-02, -1.135e-01, 2.494e-02, -4.844e-02, 3.036e-03, 2.306e-02, 2.890e-02, 2.062e-02, -7.324e-02, 4.289e-02, 2.116e-02) * s0[y+2][x+0];
	r += M4(-2.246e-02, -5.810e-02, 1.355e-01, 1.104e-01, 1.243e-01, -1.568e-01, -3.739e-02, 3.924e-02, 1.063e-01, 1.209e-01, -2.378e-01, 4.622e-02, -4.601e-02, -8.054e-02, 3.216e-01, -5.890e-02) * s0[y+2][x+1];
	r += M4(-6.285e-02, 1.495e-02, 7.858e-02, 1.611e-02, -2.909e-01, 4.836e-02, 4.920e-02, 2.250e-02, 7.877e-02, 1.256e-01, -1.105e-01, 3.194e-03, 2.948e-03, -1.052e-02, 1.494e-01, -6.057e-02) * s0[y+2][x+2];
	r += M4(-4.520e-02, 5.442e-02, 7.708e-02, -2.065e-02, -5.318e-02, 7.398e-02, -1.599e-02, -2.047e-02, 1.043e-01, 5.862e-03, 6.394e-02, 3.286e-03, -3.589e-02, -1.075e-01, -1.158e-01, 7.681e-02) * s1[y+0][x+0];
	r += M4(-2.317e-01, 7.083e-02, -2.076e-01, 3.181e-02, -1.171e-01, -4.772e-02, -1.328e-02, -5.558e-02, -1.474e-02, 1.641e-02, -9.838e-03, -3.018e-02, 9.745e-02, 2.075e-05, -2.015e-02, 5.947e-02) * s1[y+0][x+1];
	r += M4(1.486e-02, 1.698e-02, -3.198e-02, -4.696e-02, 1.960e-01, -6.661e-02, -1.394e-02, 5.490e-02, -1.125e-01, 1.381e-01, 5.651e-02, -2.646e-02, 2.645e-02, 4.819e-02, -8.738e-03, -1.256e-02) * s1[y+0][x+2];
	r += M4(9.628e-02, -1.014e-02, -4.797e-02, 1.070e-01, -3.540e-02, 2.350e-02, -2.104e-04, -4.170e-02, 2.297e-01, -1.255e-01, -7.657e-03, -2.107e-02, -2.433e-01, 3.675e-02, -7.558e-02, 1.508e-01) * s1[y+1][x+0];
	r += M4(-8.711e-02, 5.471e-02, 1.545e-01, 6.145e-01, -8.126e-03, -5.708e-02, -1.057e-01, -1.003e-02, -1.227e-01, 1.241e-01, 4.371e-02, -5.462e-01, -7.861e-02, 5.672e-02, -1.338e-01, 1.962e-02) * s1[y+1][x+1];
	r += M4(-1.849e-01, 1.326e-01, -6.672e-02, 1.853e-01, 1.280e-01, 1.216e-01, 3.135e-02, 1.515e-01, -6.193e-02, 1.927e-01, -1.323e-02, -1.243e-01, -2.189e-02, -3.800e-02, -2.035e-02, -4.099e-02) * s1[y+1][x+2];
	r += M4(-7.195e-02, 3.729e-02, -2.406e-01, 4.491e-02, 4.079e-02, -1.010e-02, -6.461e-03, 1.497e-02, 2.168e-02, -6.551e-02, -1.382e-02, -4.401e-02, 6.869e-02, 1.620e-03, 3.603e-02, -1.772e-02) * s1[y+2][x+0];
	r += M4(-7.506e-02, -1.572e-02, -1.605e-01, -6.399e-03, 1.372e-01, -4.692e-02, -1.692e-01, 8.030e-02, 1.154e-01, 1.768e-01, -1.190e-01, -8.640e-02, -1.357e-02, -9.677e-03, 1.537e-01, 4.419e-02) * s1[y+2][x+1];
	r += M4(-2.955e-02, 1.214e-01, -6.974e-02, 2.186e-02, -3.188e-02, -3.367e-02, 3.423e-02, 6.012e-02, 3.850e-02, 1.173e-01, 1.189e-02, -5.875e-02, 1.041e-02, -4.448e-02, -3.273e-02, -5.240e-03) * s1[y+2][x+2];
	r += M4(8.847e-02, -2.200e-02, -1.007e-01, 6.339e-02, 5.920e-02, -4.826e-02, 1.194e-02, 5.251e-02, -6.123e-02, -7.229e-02, -1.223e-01, -3.304e-02, 2.605e-01, 2.309e-01, -8.181e-02, 1.331e-01) * s2[y+0][x+0];
	r += M4(2.026e-01, -3.603e-02, -6.517e-02, -3.381e-02, 5.629e-02, -1.204e-02, 8.894e-03, -5.671e-02, 2.290e-01, -1.947e-03, -6.815e-02, -1.091e-01, 4.236e-01, 3.627e-02, -2.473e-01, -2.038e-01) * s2[y+0][x+1];
	r += M4(-1.299e-01, 1.080e-01, 5.883e-02, -6.340e-02, 2.087e-01, 1.389e-02, -8.306e-03, -6.780e-04, 6.476e-02, 2.585e-02, -4.924e-02, -8.681e-02, 1.309e-01, -8.186e-02, 6.938e-02, -1.292e-01) * s2[y+0][x+2];
	r += M4(-1.320e-01, 3.674e-02, 6.270e-02, 2.289e-02, 2.295e-02, -1.097e-01, 2.009e-02, 2.686e-02, -1.665e-01, 1.455e-02, -2.989e-02, 9.891e-03, 5.072e-01, -2.531e-01, 6.153e-02, 3.720e-02) * s2[y+1][x+0];
	r += M4(-1.877e-01, -1.172e-01, 1.983e-02, -2.075e-01, 1.502e-01, -7.058e-02, 6.120e-02, 1.786e-01, 1.827e-02, -1.179e-01, -2.356e-01, 4.490e-02, -7.814e-01, 4.267e-01, 3.168e-01, -2.537e-01) * s2[y+1][x+1];
	r += M4(-1.492e-01, 1.222e-02, 2.226e-02, -5.206e-02, 6.395e-02, 8.109e-02, -6.716e-02, 1.580e-01, -3.772e-02, -3.721e-02, -9.044e-02, -1.833e-02, -9.412e-02, -2.282e-01, -1.490e-01, 1.249e-01) * s2[y+1][x+2];
	r += M4(1.027e-02, 9.382e-04, -7.734e-02, 3.918e-02, -6.567e-02, -6.811e-02, 1.502e-01, 3.254e-02, 4.716e-02, 2.067e-02, -5.050e-02, 3.542e-02, 3.225e-01, -2.793e-03, -1.279e-02, 6.057e-02) * s2[y+2][x+0];
	r += M4(-1.329e-02, 1.213e-02, 7.407e-02, -4.237e-04, -3.801e-02, -4.323e-02, 1.866e-01, 2.257e-03, -1.191e-02, -7.741e-02, 1.866e-02, -6.199e-03, -1.277e-02, 1.629e-02, -1.334e-01, 1.649e-01) * s2[y+2][x+1];
	r += M4(-4.417e-02, -1.142e-01, -9.482e-02, -8.317e-02, -6.598e-02, 4.609e-02, 2.105e-02, -1.108e-02, 5.122e-02, 9.121e-02, 2.719e-02, -2.194e-02, -1.824e-01, 5.608e-02, -1.296e-02, 2.066e-02) * s2[y+2][x+2];
	r += M4(2.027e-01, -1.644e-01, -1.520e-01, 1.067e-01, -6.554e-03, -1.768e-02, 1.678e-02, -4.675e-03, -4.223e-02, 2.104e-02, -6.921e-02, 1.404e-02, 1.083e-01, -2.200e-02, -6.210e-02, -3.066e-02) * s3[y+0][x+0];
	r += M4(8.348e-02, 8.129e-02, -1.211e-01, -1.093e-01, -4.298e-02, 7.900e-02, 4.698e-02, -7.943e-02, 4.407e-01, -2.047e-01, -2.079e-02, -1.286e-01, 1.311e-01, -7.113e-02, -8.181e-02, -5.352e-02) * s3[y+0][x+1];
	r += M4(2.405e-01, 1.874e-02, -7.943e-02, 4.956e-02, 2.036e-01, 5.397e-02, 3.282e-02, -1.820e-02, -1.198e-02, -1.137e-01, -1.462e-01, -8.341e-02, 7.249e-02, 4.378e-03, 1.403e-02, -5.413e-02) * s3[y+0][x+2];
	r += M4(5.548e-02, -1.455e-01, 7.313e-02, -5.344e-04, -9.755e-02, -3.247e-02, 2.183e-02, -3.423e-02, -1.499e-01, 8.833e-02, -1.406e-01, -4.278e-02, 1.511e-01, -8.303e-02, 2.771e-03, 1.430e-01) * s3[y+1][x+0];
	r += M4(-1.391e-01, 1.342e-02, 3.599e-02, -9.032e-02, 4.149e-01, -1.290e-01, 1.563e-01, 3.335e-01, -6.876e-02, -2.252e-01, -3.355e-01, 1.889e-01, -2.504e-01, 9.315e-02, 9.455e-02, -1.690e-01) * s3[y+1][x+1];
	r += M4(-6.448e-02, 1.840e-02, 6.726e-02, -4.242e-02, 2.843e-01, 2.235e-01, -3.325e-03, 9.683e-02, 9.138e-02, 9.377e-02, -2.635e-01, 8.604e-02, 7.457e-02, -6.917e-02, -7.740e-02, -6.603e-02) * s3[y+1][x+2];
	r += M4(-7.695e-02, -1.971e-02, 3.205e-02, 7.461e-02, -1.410e-01, 9.921e-02, 5.353e-02, -2.726e-02, 6.422e-02, -1.674e-03, -9.741e-02, 4.399e-02, 4.859e-02, -1.166e-01, -2.142e-02, 5.932e-02) * s3[y+2][x+0];
	r += M4(-4.276e-02, -4.938e-02, 1.117e-01, -7.284e-03, -1.530e-01, -1.592e-01, 1.124e-01, 1.035e-01, -1.776e-02, 8.723e-02, -1.314e-01, 3.277e-02, -6.665e-02, 2.311e-02, -6.036e-02, 1.318e-01) * s3[y+2][x+1];
	r += M4(-2.402e-02, 4.267e-02, -6.568e-02, -3.556e-02, -1.630e-01, -3.549e-02, -9.413e-03, 4.181e-02, 1.122e-01, 5.011e-02, 2.940e-02, -1.018e-01, -4.228e-02, 4.101e-02, 1.534e-02, 7.782e-03) * s3[y+2][x+2];
	r += V4(1.171e-02, -5.539e-03, -4.517e-02, 5.211e-03);
	return vec4(r);
}
vec4 f1(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-2.215e-02, -1.406e-02, -1.739e-02, -3.716e-02, -5.547e-02, 2.007e-01, -1.618e-01, -2.830e-02, -7.836e-02, -3.902e-02, 6.395e-02, -1.969e-02, 1.590e-01, 1.341e-01, -1.720e-01, -2.912e-01) * s0[y+0][x+0];
	r += M4(-7.683e-03, -3.391e-02, -5.113e-02, -2.308e-02, 2.066e-01, -5.553e-02, -4.150e-01, 1.952e-01, 3.890e-03, 7.598e-02, 7.238e-02, -9.801e-02, 1.331e-01, -7.991e-02, -6.814e-02, -2.941e-02) * s0[y+0][x+1];
	r += M4(8.526e-02, -6.123e-03, 1.980e-02, -1.877e-03, 7.532e-02, -9.837e-02, -1.808e-02, -3.262e-02, -2.852e-02, -1.072e-01, -1.650e-01, 6.588e-03, 1.590e-01, 1.744e-01, -8.078e-02, 1.977e-01) * s0[y+0][x+2];
	r += M4(9.314e-02, 2.999e-02, 2.740e-02, -1.087e-02, 2.363e-02, 4.851e-02, -2.881e-01, 2.728e-01, -6.321e-02, 1.824e-02, 5.976e-03, -1.285e-01, 4.640e-02, 8.321e-02, 4.118e-02, -2.694e-02) * s0[y+1][x+0];
	r += M4(-1.023e-01, -5.766e-02, 8.075e-02, 9.428e-02, 3.598e-01, 3.120e-02, 2.512e-02, -8.081e-02, -2.011e-01, 1.067e-01, -3.743e-01, -3.407e-01, -1.570e-01, 1.201e-01, 3.530e-01, -1.964e-01) * s0[y+1][x+1];
	r += M4(1.242e-02, -1.053e-01, 6.283e-03, -2.345e-02, 2.136e-01, -5.384e-02, -2.923e-01, 1.864e-01, 1.721e-02, -8.380e-02, 3.607e-02, 4.106e-02, 2.954e-01, -1.066e-02, -1.381e-01, 1.892e-01) * s0[y+1][x+2];
	r += M4(1.013e-02, 1.791e-05, 4.047e-02, -2.583e-02, 9.078e-02, -2.084e-02, 2.495e-02, 8.952e-02, -5.971e-02, 3.651e-02, -1.489e-02, -5.610e-02, 1.466e-02, 1.357e-01, 2.220e-01, 1.097e-01) * s0[y+2][x+0];
	r += M4(7.698e-02, -1.188e-01, -1.255e-01, 1.913e-01, -2.094e-01, 6.744e-02, -2.052e-01, -9.227e-02, 4.013e-02, 7.227e-02, -7.531e-03, -3.340e-01, 3.151e-02, 6.658e-02, 3.683e-02, -1.198e-01) * s0[y+2][x+1];
	r += M4(-1.745e-01, 3.718e-02, 6.036e-02, -1.067e-01, 2.222e-01, -4.023e-02, -1.536e-01, 2.446e-01, 4.124e-03, -2.937e-02, -4.205e-02, -2.204e-02, 2.627e-02, 2.497e-02, 9.646e-03, 6.329e-02) * s0[y+2][x+2];
	r += M4(8.668e-02, 1.294e-01, 1.192e-01, -5.519e-02, -1.539e-02, -2.841e-02, -7.103e-02, 1.419e-02, -7.798e-03, 2.812e-02, 4.496e-02, -6.745e-03, 1.558e-01, 2.410e-02, -9.289e-02, 1.314e-02) * s1[y+0][x+0];
	r += M4(9.753e-02, 3.527e-02, -2.790e-01, 1.378e-01, 5.237e-02, -1.663e-01, -1.384e-01, 7.159e-02, -3.145e-02, 1.341e-01, 1.895e-01, -7.598e-02, -9.365e-02, -5.925e-03, -8.375e-03, -5.505e-02) * s1[y+0][x+1];
	r += M4(7.702e-02, -5.561e-03, -2.329e-01, -7.724e-02, 1.977e-02, -1.720e-02, -2.214e-02, 2.949e-02, -4.738e-02, 2.995e-02, -3.894e-02, 2.010e-02, 4.594e-02, -2.484e-02, -6.320e-02, 4.567e-03) * s1[y+0][x+2];
	r += M4(-6.567e-02, -1.209e-01, -1.532e-01, -7.356e-02, -6.467e-02, -4.915e-02, -6.810e-03, 3.929e-02, -1.626e-01, -6.189e-02, 2.135e-01, -8.108e-02, -3.985e-02, 8.312e-03, -1.070e-01, -1.776e-02) * s1[y+1][x+0];
	r += M4(2.026e-01, -6.935e-01, 5.092e-02, -1.002e-01, 1.929e-01, 7.150e-02, -6.570e-02, 8.162e-02, -1.629e-01, 9.720e-02, -3.512e-02, -2.686e-01, -1.917e-01, -2.399e-02, 1.991e-01, -1.705e-01) * s1[y+1][x+1];
	r += M4(9.813e-02, -4.326e-01, -9.639e-02, 1.904e-01, 5.281e-02, -3.054e-02, -1.741e-02, 4.353e-02, 2.234e-02, 1.976e-01, -6.564e-03, 2.650e-02, 5.018e-02, 2.444e-02, -1.636e-01, -3.459e-02) * s1[y+1][x+2];
	r += M4(-7.339e-02, -9.667e-02, 2.272e-03, 6.339e-02, 3.185e-02, -5.559e-02, -1.078e-03, 5.700e-02, -5.230e-02, 3.496e-02, -2.334e-02, -7.037e-02, 1.182e-02, -9.812e-04, 3.195e-02, 9.302e-02) * s1[y+2][x+0];
	r += M4(-3.771e-01, 9.259e-02, -6.885e-02, -1.119e-01, 7.760e-02, -4.564e-02, -9.394e-02, 3.771e-02, 5.319e-02, 7.757e-02, 7.286e-02, -1.456e-01, 2.475e-02, -7.125e-02, 1.578e-03, -2.157e-02) * s1[y+2][x+1];
	r += M4(-2.606e-01, 8.229e-02, 5.227e-02, -1.700e-01, 1.061e-01, -7.105e-02, -2.701e-02, 5.897e-02, 5.800e-02, 3.804e-03, -7.834e-02, 1.355e-01, -2.275e-02, 2.838e-02, 4.038e-02, 3.458e-02) * s1[y+2][x+2];
	r += M4(4.531e-02, 3.854e-02, 2.280e-02, 1.938e-02, 4.478e-02, -1.659e-02, 4.340e-02, -9.988e-03, 1.698e-03, -3.932e-02, -7.904e-02, 1.689e-02, 6.439e-02, 1.907e-02, 1.907e-01, -2.091e-01) * s2[y+0][x+0];
	r += M4(6.602e-02, 1.041e-02, 3.439e-02, -5.037e-02, 1.488e-02, 1.749e-01, 5.350e-02, -7.788e-02, 2.172e-01, -8.522e-02, -5.970e-02, 4.095e-02, 3.572e-01, 2.085e-01, -2.874e-01, 1.825e-01) * s2[y+0][x+1];
	r += M4(2.103e-02, 1.006e-01, 4.553e-02, 4.915e-02, -4.249e-02, -4.106e-02, -2.902e-02, 3.608e-02, 1.038e-01, 8.832e-02, -2.348e-03, -3.413e-02, 2.736e-04, 6.290e-02, 1.036e-02, -6.105e-02) * s2[y+0][x+2];
	r += M4(9.043e-02, 3.856e-02, -1.988e-01, 7.693e-02, 7.207e-02, -2.348e-02, 1.451e-01, -7.102e-02, -1.958e-03, -1.622e-02, -1.966e-02, 4.330e-02, 2.321e-01, 1.379e-01, 2.120e-01, 1.361e-01) * s2[y+1][x+0];
	r += M4(-2.940e-01, 2.017e-02, 2.094e-01, -2.045e-01, 3.283e-01, 6.185e-01, 5.744e-02, -5.815e-02, 1.907e-01, -2.112e-02, -6.969e-02, 2.184e-01, 6.587e-01, -1.418e-01, 3.072e-01, -5.958e-02) * s2[y+1][x+1];
	r += M4(-2.068e-02, -7.144e-02, 3.896e-02, 1.047e-02, 2.940e-02, -1.099e-01, -1.610e-01, -5.213e-02, 3.414e-02, -6.289e-02, -4.154e-02, -7.800e-02, 1.267e-01, -1.440e-01, 1.071e-01, -3.008e-02) * s2[y+1][x+2];
	r += M4(-5.799e-02, -1.182e-02, -7.564e-02, 1.174e-01, 3.471e-02, -6.372e-02, -5.375e-04, -8.907e-03, 5.691e-02, -4.043e-02, 4.763e-03, -1.712e-03, -2.671e-03, -2.422e-02, 4.362e-02, -1.030e-01) * s2[y+2][x+0];
	r += M4(-1.748e-01, 6.709e-02, 9.744e-02, -9.403e-02, 5.356e-02, 1.888e-02, 1.925e-02, 7.708e-02, 6.706e-02, -1.174e-02, -2.696e-02, 7.589e-02, 1.418e-02, -6.812e-02, -1.876e-01, 5.490e-01) * s2[y+2][x+1];
	r += M4(-1.106e-02, 3.239e-02, -1.480e-03, 3.890e-02, -1.346e-01, -6.427e-02, 9.249e-03, -6.495e-02, -1.062e-01, 3.182e-02, -3.762e-02, -5.719e-02, -1.005e-01, -1.101e-01, 1.241e-02, -4.050e-02) * s2[y+2][x+2];
	r += M4(3.431e-02, -5.449e-02, 1.086e-01, 1.375e-02, 7.348e-02, -5.377e-03, 1.702e-02, 3.071e-02, -6.684e-02, -1.591e-01, -1.625e-01, -3.526e-02, 5.439e-02, -2.087e-02, 9.379e-03, 7.027e-03) * s3[y+0][x+0];
	r += M4(8.445e-02, 2.359e-01, -1.542e-01, -4.147e-02, -1.512e-02, 1.080e-01, -6.659e-03, -5.961e-02, 6.215e-02, -2.523e-01, 1.514e-01, -1.858e-01, 1.442e-01, -3.617e-02, 1.106e-01, -4.470e-03) * s3[y+0][x+1];
	r += M4(1.333e-01, -2.663e-02, -4.451e-02, 1.786e-01, 3.156e-03, -1.971e-02, -1.610e-01, 8.062e-02, 8.849e-02, 1.344e-01, 1.064e-01, -1.429e-02, 1.156e-01, 4.161e-02, 5.652e-02, -1.536e-03) * s3[y+0][x+2];
	r += M4(5.758e-02, 1.131e-01, -8.358e-02, -2.097e-02, -1.362e-02, 2.032e-02, -4.419e-03, -9.281e-03, -2.105e-01, 6.118e-03, -9.679e-02, -7.206e-02, 5.197e-03, -2.955e-02, 6.415e-02, 2.765e-02) * s3[y+1][x+0];
	r += M4(2.053e-01, 1.658e-02, 9.997e-02, 4.221e-02, 1.724e-01, 1.254e-01, 1.463e-01, -1.077e-01, -1.906e-01, 4.041e-02, -1.167e-01, -4.378e-02, 7.087e-02, -3.959e-02, 1.028e-02, -6.086e-02) * s3[y+1][x+1];
	r += M4(-6.200e-02, 3.028e-02, -5.194e-02, -2.842e-01, -8.634e-02, -9.914e-02, -1.095e-02, 7.840e-02, 2.175e-02, -9.881e-02, 1.450e-01, -8.496e-02, -3.527e-02, 8.361e-02, 8.464e-02, -3.820e-02) * s3[y+1][x+2];
	r += M4(-1.155e-01, 6.762e-02, -8.195e-02, 8.010e-03, 5.129e-02, -2.410e-02, -6.629e-02, 6.850e-02, -9.297e-02, 7.053e-02, -9.324e-03, -1.902e-01, -4.491e-03, -7.014e-03, -1.419e-02, -1.487e-02) * s3[y+2][x+0];
	r += M4(2.804e-03, 1.087e-02, 1.452e-01, -2.503e-02, -1.275e-01, -6.588e-02, -1.006e-01, -3.063e-02, 1.384e-01, 2.589e-02, 6.451e-03, -5.190e-02, 3.392e-02, -6.499e-02, -3.685e-03, 1.977e-01) * s3[y+2][x+1];
	r += M4(1.710e-02, -3.336e-03, -7.097e-02, 5.629e-02, -1.489e-01, -8.521e-02, 7.481e-02, -1.885e-01, 8.029e-02, 1.083e-01, 1.241e-02, -1.562e-01, -5.566e-02, -4.532e-02, -2.139e-02, -7.923e-02) * s3[y+2][x+2];
	r += V4(2.831e-03, 1.322e-02, 2.386e-02, -1.386e-02);
	return vec4(r);
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv5_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
			s2[ay][ax] = l1(x - 1, y - 1);
			s1[ay][ax] = -max(-s0[ay][ax], V4(0.0));
			s0[ay][ax] = max(s0[ay][ax], V4(0.0));
			s3[ay][ax] = -max(-s2[ay][ax], V4(0.0));
			s2[ay][ax] = max(s2[ay][ax], V4(0.0));
		}
	}
	barrier();
	vec4 r0 = f0(xy.x, xy.y);
	vec4 r1 = f1(xy.x, xy.y);
	imageStore(out_image, opos + ivec2(0, 0), r0);
	imageStore(out_image, opos + ivec2(1, 0), r1);
}

//!DESC CuNNy-8x8C-conv7
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv6
//!BIND LUMA
//!SAVE conv7
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(texelFetch(conv6_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv6_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 s0[10][10];
shared V4 s1[10][10];
shared V4 s2[10][10];
shared V4 s3[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-5.074e-02, 3.366e-02, -2.740e-02, -5.271e-02, 9.734e-02, 5.857e-02, 1.345e-01, -2.202e-01, -8.227e-02, 5.113e-02, -2.369e-02, 4.748e-02, -5.300e-02, -1.264e-03, -5.030e-02, -7.810e-02) * s0[y+0][x+0];
	r += M4(-2.951e-02, 3.840e-02, 8.003e-02, 5.210e-02, 8.373e-02, 1.204e-01, -1.179e-01, -5.755e-02, 1.870e-01, 2.409e-02, 4.405e-02, 2.111e-02, -1.579e-02, -1.061e-02, 7.836e-02, -2.442e-02) * s0[y+0][x+1];
	r += M4(-2.693e-02, -2.973e-02, -2.204e-02, 7.509e-02, 6.182e-02, 1.369e-02, -7.205e-02, 7.021e-02, 3.798e-02, -3.853e-02, 1.122e-01, 1.174e-01, -1.535e-02, -2.115e-02, -4.919e-02, 3.309e-02) * s0[y+0][x+2];
	r += M4(2.014e-02, 7.514e-04, 4.232e-02, -1.774e-01, 2.997e-02, 1.342e-01, 1.972e-01, -3.031e-01, 3.088e-02, -1.314e-02, 1.982e-01, -8.665e-02, -1.469e-01, 2.148e-02, -2.864e-02, -7.492e-02) * s0[y+1][x+0];
	r += M4(-3.355e-02, 1.441e-01, 4.195e-01, 3.306e-01, 1.990e-01, -2.999e-01, -2.522e-01, -3.640e-01, 2.499e-01, -1.564e-01, -9.328e-03, 1.150e-02, -1.826e-01, -8.864e-02, -4.606e-02, -1.993e-01) * s0[y+1][x+1];
	r += M4(-7.202e-03, -1.753e-01, -3.988e-02, -5.172e-02, -3.627e-02, 5.426e-02, 5.636e-02, 1.714e-01, 1.885e-01, 2.229e-02, 5.413e-02, -4.764e-02, -4.615e-02, 1.522e-01, -3.112e-02, 1.198e-01) * s0[y+1][x+2];
	r += M4(5.646e-02, 1.024e-01, -9.589e-02, -8.507e-02, 1.391e-01, -4.189e-02, 1.032e-01, -2.708e-03, 3.442e-03, 2.076e-02, -4.177e-02, 4.321e-02, -8.490e-02, 4.480e-02, -1.255e-01, 9.500e-03) * s0[y+2][x+0];
	r += M4(-2.374e-02, 4.424e-02, 2.212e-01, 1.275e-01, -2.844e-03, 6.873e-02, -1.813e-01, 7.103e-02, -1.577e-01, -1.375e-02, 3.176e-02, 1.864e-02, -1.557e-03, 1.216e-01, -2.655e-02, -2.626e-03) * s0[y+2][x+1];
	r += M4(-3.133e-02, -3.047e-03, -1.541e-02, -2.776e-02, 2.426e-03, 3.613e-02, 3.364e-02, -1.727e-02, -4.612e-02, 3.530e-02, 1.628e-02, -3.213e-02, -9.521e-02, 8.141e-02, 9.402e-03, 5.266e-02) * s0[y+2][x+2];
	r += M4(-9.910e-03, 2.132e-03, -5.993e-02, 4.871e-02, -1.874e-02, -1.226e-03, -2.845e-02, -1.193e-01, -6.588e-02, -7.694e-03, 4.458e-02, 3.247e-02, -4.466e-02, 7.181e-03, -4.784e-02, -4.811e-02) * s1[y+0][x+0];
	r += M4(-1.706e-02, -1.444e-02, -2.000e-02, -1.655e-03, 6.984e-04, 6.310e-02, 3.606e-02, 7.182e-02, 9.128e-03, -1.482e-02, 4.501e-02, 4.772e-02, 2.590e-02, -3.808e-02, -3.002e-02, 5.506e-02) * s1[y+0][x+1];
	r += M4(-1.262e-03, -1.800e-02, 5.497e-03, 3.776e-02, 1.359e-02, 6.634e-03, -1.431e-01, -4.370e-02, -4.976e-02, -4.657e-02, 9.695e-03, 4.391e-02, 4.759e-02, -4.529e-02, -6.438e-02, 6.377e-02) * s1[y+0][x+2];
	r += M4(-3.119e-02, -5.645e-03, 2.301e-02, -1.265e-01, -1.364e-02, -2.561e-02, -3.232e-02, -1.081e-01, -3.760e-02, -4.614e-03, 1.345e-01, -7.581e-03, -1.063e-01, -4.691e-02, 2.622e-02, -7.589e-02) * s1[y+1][x+0];
	r += M4(-7.243e-02, 1.931e-02, 9.269e-02, 1.061e-02, -2.035e-01, -7.176e-02, 7.948e-02, 6.965e-02, 1.455e-01, -6.559e-02, -5.701e-02, 7.537e-03, -3.668e-01, -1.782e-01, -7.802e-02, -1.997e-01) * s1[y+1][x+1];
	r += M4(9.003e-04, 8.262e-03, -5.164e-02, -5.039e-02, -9.427e-04, -1.199e-01, 3.939e-02, 5.480e-02, 7.030e-02, 9.944e-02, -2.440e-02, -7.544e-02, -8.655e-02, 1.531e-01, 6.849e-03, 1.485e-01) * s1[y+1][x+2];
	r += M4(3.798e-02, 2.016e-02, 1.142e-01, 2.704e-02, 7.284e-02, -5.766e-04, 6.006e-02, -1.697e-02, 8.339e-03, 1.908e-02, -2.204e-02, 1.294e-02, -3.440e-03, 1.326e-02, -4.163e-02, -5.483e-02) * s1[y+2][x+0];
	r += M4(8.018e-02, 7.910e-02, 5.238e-02, -2.869e-02, -2.583e-02, 3.236e-02, -4.504e-02, 1.012e-01, -5.556e-02, -1.382e-02, 5.314e-02, -3.163e-03, 2.682e-01, 1.831e-02, -1.429e-02, 3.940e-02) * s1[y+2][x+1];
	r += M4(-5.748e-03, 4.546e-02, -1.418e-02, -1.690e-02, 1.936e-02, 2.656e-02, -3.282e-02, -4.408e-02, -5.643e-02, -1.040e-02, 7.648e-03, -1.870e-02, 3.942e-02, -3.650e-02, 1.511e-01, 4.829e-02) * s1[y+2][x+2];
	r += M4(3.398e-02, -3.849e-02, 2.854e-03, 6.764e-02, 1.564e-02, -2.362e-03, 1.777e-02, 1.187e-02, -3.019e-02, -2.458e-02, 3.311e-02, -3.935e-02, 6.770e-02, -9.508e-03, -1.165e-02, -1.000e-01) * s2[y+0][x+0];
	r += M4(4.838e-02, 4.431e-02, -1.049e-01, -1.398e-01, -6.108e-03, -1.524e-01, -5.409e-02, 6.138e-02, 2.027e-02, 7.285e-02, -1.232e-01, 1.030e-01, 8.114e-02, 3.738e-03, -2.370e-01, 2.510e-01) * s2[y+0][x+1];
	r += M4(3.651e-03, 2.398e-02, -1.743e-01, 1.118e-02, -1.997e-02, -5.629e-02, -6.398e-02, 3.856e-02, 7.313e-03, 1.818e-02, -7.008e-02, -5.772e-02, 1.625e-02, -4.309e-02, 1.727e-02, -1.387e-02) * s2[y+0][x+2];
	r += M4(6.862e-02, 1.808e-03, -4.120e-02, 1.700e-01, -3.562e-02, -1.132e-02, -3.963e-02, 3.304e-03, 3.309e-03, -9.117e-03, -2.021e-01, -1.274e-01, -5.380e-02, -8.050e-03, -2.140e-01, -9.086e-02) * s2[y+1][x+0];
	r += M4(2.051e-01, 2.070e-02, 3.465e-02, -8.120e-02, -4.361e-02, 1.496e-01, -1.549e-01, -4.643e-01, -1.672e-02, -7.273e-02, -1.285e-01, 3.586e-01, -1.138e-01, 7.056e-02, -1.178e-01, 2.065e-01) * s2[y+1][x+1];
	r += M4(1.075e-01, -8.646e-02, -1.025e-01, 6.586e-02, 2.645e-02, 2.124e-01, -2.866e-02, 1.390e-01, -7.282e-02, -4.394e-02, 4.208e-02, 3.773e-02, -1.024e-01, 7.100e-02, 7.274e-02, -8.469e-02) * s2[y+1][x+2];
	r += M4(-1.177e-01, 5.621e-03, 2.902e-02, -1.683e-03, -1.238e-01, 2.105e-02, -7.582e-02, -2.286e-03, -2.307e-02, -6.092e-03, -1.785e-01, 4.452e-02, 1.206e-02, 8.735e-03, -5.824e-02, -2.120e-02) * s2[y+2][x+0];
	r += M4(-5.282e-02, -4.652e-02, 9.569e-02, -8.088e-02, 1.876e-01, 8.304e-02, -4.097e-02, -1.652e-02, 1.533e-02, -4.709e-03, -1.274e-01, 6.320e-02, 6.204e-02, 3.489e-02, -4.779e-02, 4.370e-03) * s2[y+2][x+1];
	r += M4(-3.213e-02, -3.664e-03, -6.071e-02, 5.996e-03, 6.703e-02, -1.506e-02, 4.346e-02, 7.592e-02, -6.674e-02, -2.460e-03, -1.302e-02, 5.243e-02, 1.183e-03, -6.210e-03, 3.682e-02, 2.560e-02) * s2[y+2][x+2];
	r += M4(-7.128e-03, -8.500e-02, 1.028e-01, -1.009e-01, 4.631e-02, 3.503e-02, 1.938e-01, -1.742e-01, 4.231e-02, -3.050e-03, 1.019e-02, -1.224e-01, 9.246e-02, -4.183e-04, 1.053e-01, 7.911e-04) * s3[y+0][x+0];
	r += M4(4.037e-02, -7.948e-03, 1.220e-01, 1.009e-01, -4.665e-02, -1.063e-01, 1.117e-01, -7.169e-02, -2.007e-02, 6.913e-02, -9.798e-02, -4.260e-02, 4.418e-03, -1.411e-01, -2.510e-01, 9.198e-02) * s3[y+0][x+1];
	r += M4(-2.348e-02, 3.431e-02, -4.567e-02, 3.144e-02, 5.345e-02, -2.813e-02, 4.333e-02, 2.358e-02, -6.053e-03, 3.332e-02, -8.911e-02, -2.558e-04, 4.280e-03, -1.992e-02, 5.352e-02, -4.574e-04) * s3[y+0][x+2];
	r += M4(8.077e-02, 8.316e-02, 1.684e-01, 1.298e-02, 2.065e-02, -1.627e-02, 3.483e-02, -3.828e-01, 4.373e-02, -8.121e-03, -2.183e-01, -1.010e-01, -2.574e-02, 1.103e-02, 9.912e-02, -1.082e-01) * s3[y+1][x+0];
	r += M4(-4.432e-02, -1.059e-01, 1.724e-01, -1.758e-01, -9.708e-03, 1.288e-01, 1.665e-01, -4.130e-01, 1.498e-01, 8.480e-02, 1.563e-01, 2.207e-01, 7.259e-02, 1.765e-02, -3.375e-01, 8.674e-02) * s3[y+1][x+1];
	r += M4(-4.242e-02, -9.789e-02, -1.042e-02, 9.508e-02, 9.190e-02, 1.359e-01, 1.060e-02, 1.158e-01, 7.869e-03, -4.892e-02, -3.218e-02, 2.847e-02, -9.645e-02, 2.789e-01, -4.481e-02, -1.142e-01) * s3[y+1][x+2];
	r += M4(-1.394e-01, -5.506e-03, 7.416e-02, -2.172e-03, -8.629e-02, 3.886e-02, 2.027e-02, -4.821e-02, 1.158e-01, 3.996e-04, -1.291e-01, 6.333e-02, 1.546e-01, -4.254e-02, 2.279e-03, -3.321e-02) * s3[y+2][x+0];
	r += M4(1.329e-02, -5.604e-02, 2.836e-03, -1.040e-01, 1.899e-01, 7.801e-02, 1.533e-01, -5.223e-02, 1.494e-01, 4.379e-03, -9.848e-03, -1.519e-02, 4.942e-02, 5.159e-02, -4.584e-02, 6.544e-02) * s3[y+2][x+1];
	r += M4(2.187e-02, 8.064e-03, -1.200e-02, 5.883e-02, 1.305e-01, 1.059e-02, 5.907e-02, 3.737e-02, 1.891e-02, 4.456e-02, -6.976e-02, 7.762e-02, 1.220e-02, -4.021e-03, 9.723e-02, 2.381e-02) * s3[y+2][x+2];
	r += V4(-1.907e-04, 3.955e-03, 7.973e-03, 1.364e-02);
	return vec4(r);
}
vec4 f1(int x, int y) {
	V4 r = V4(0.0);
	r += M4(9.955e-03, -4.408e-03, -3.736e-02, -5.626e-02, 7.405e-02, 4.895e-02, -1.413e-01, 2.998e-02, 2.433e-02, -1.711e-02, 3.862e-02, 4.361e-02, 1.174e-03, -8.170e-03, 1.612e-02, 9.911e-03) * s0[y+0][x+0];
	r += M4(-1.343e-01, -1.278e-01, -3.557e-04, -2.146e-01, 1.537e-01, -3.311e-02, 6.170e-03, 1.019e-01, -7.228e-02, -2.417e-01, -1.828e-01, 2.057e-01, 9.066e-02, 8.236e-02, -5.458e-02, 3.570e-05) * s0[y+0][x+1];
	r += M4(1.102e-03, 8.189e-03, -5.492e-03, -1.838e-02, -1.304e-01, -1.033e-01, 4.485e-03, -4.274e-02, -1.948e-01, 3.459e-02, -1.783e-01, 9.294e-02, 1.872e-02, 1.539e-03, 1.984e-02, -5.440e-02) * s0[y+0][x+2];
	r += M4(-7.764e-02, 2.492e-01, -2.555e-04, -7.056e-02, 8.690e-02, 5.382e-02, -1.385e-01, 2.005e-01, 1.066e-02, 2.626e-02, -2.846e-02, -2.534e-02, 5.776e-02, 3.678e-02, 7.435e-02, -7.334e-03) * s0[y+1][x+0];
	r += M4(7.928e-02, 2.937e-01, -5.843e-02, -1.083e-01, 1.614e-02, 5.974e-02, 5.282e-02, -1.674e-01, 1.161e-01, 1.215e-03, -2.219e-01, -3.760e-02, 4.681e-02, -9.538e-03, -5.488e-02, -1.330e-01) * s0[y+1][x+1];
	r += M4(-9.314e-02, 1.324e-01, -1.543e-02, 4.095e-02, -7.824e-02, -6.039e-02, -5.157e-02, 6.570e-02, -1.063e-01, 4.861e-02, -1.948e-01, 5.362e-02, 3.513e-02, -4.730e-02, -8.444e-02, 2.592e-02) * s0[y+1][x+2];
	r += M4(-1.459e-01, 5.170e-02, -1.943e-03, 7.908e-02, 1.343e-02, -6.997e-02, -1.549e-01, -3.088e-02, -2.537e-02, 8.979e-04, 4.735e-02, -2.955e-02, 2.083e-03, 3.624e-02, -7.439e-03, -1.167e-02) * s0[y+2][x+0];
	r += M4(1.819e-01, -2.746e-01, 9.303e-02, 1.491e-01, 4.176e-02, -3.376e-02, -3.233e-02, -2.020e-02, 2.721e-02, 2.719e-03, 1.715e-02, 4.041e-02, 1.061e-02, -7.156e-02, -1.618e-02, 4.864e-02) * s0[y+2][x+1];
	r += M4(-1.306e-01, 5.816e-02, 8.020e-03, 5.898e-03, 7.095e-02, -5.969e-02, 7.035e-03, -2.312e-02, 3.402e-02, 9.660e-03, 1.097e-02, -3.245e-02, 5.463e-02, -6.576e-02, 3.193e-02, 1.773e-02) * s0[y+2][x+2];
	r += M4(4.044e-02, -1.723e-02, 5.409e-03, -6.909e-03, 6.136e-02, 1.062e-02, -6.894e-02, 1.446e-02, -7.387e-03, -6.119e-02, 9.093e-02, -2.595e-02, -4.114e-02, -1.431e-02, 6.196e-02, 2.342e-02) * s1[y+0][x+0];
	r += M4(-6.870e-02, -3.745e-02, 6.048e-02, -1.008e-01, 5.011e-03, -5.648e-03, 1.768e-02, -1.125e-01, 8.789e-03, -1.824e-01, -2.790e-02, 1.656e-01, 5.848e-02, 1.216e-04, -3.431e-02, 7.067e-02) * s1[y+0][x+1];
	r += M4(-2.461e-02, 5.026e-03, -2.765e-03, -2.119e-02, 7.451e-02, -4.836e-02, 6.736e-02, 4.988e-02, -1.208e-01, 1.564e-02, 5.067e-02, -5.383e-02, -6.421e-02, -7.046e-02, 4.310e-02, 2.931e-03) * s1[y+0][x+2];
	r += M4(-1.836e-02, 1.490e-01, 5.795e-03, -8.483e-02, 2.664e-02, 5.002e-02, -3.513e-02, 1.046e-01, -7.839e-03, 5.471e-02, 1.578e-02, -8.821e-02, 2.931e-02, 5.150e-02, 5.221e-02, -4.638e-03) * s1[y+1][x+0];
	r += M4(1.871e-01, 2.827e-01, -5.204e-02, -1.643e-02, 7.787e-02, -1.382e-01, 2.319e-01, 1.341e-02, 1.179e-01, 3.416e-02, -2.852e-01, 7.497e-02, 8.753e-02, 3.009e-02, -2.463e-01, -4.221e-01) * s1[y+1][x+1];
	r += M4(5.658e-03, -3.487e-02, 2.091e-02, -1.251e-02, -2.265e-01, 8.080e-02, -6.305e-02, 2.161e-02, 6.239e-03, 3.272e-02, -9.224e-02, 9.257e-02, 1.076e-02, -6.224e-02, -6.827e-02, 4.602e-02) * s1[y+1][x+2];
	r += M4(-1.376e-03, 2.203e-02, 1.428e-02, 2.768e-02, -3.534e-02, 5.322e-02, -5.307e-02, -2.663e-02, -1.442e-02, 1.597e-02, 7.456e-03, -1.321e-02, 2.407e-03, 2.014e-02, -3.139e-02, -3.104e-03) * s1[y+2][x+0];
	r += M4(1.404e-01, -1.242e-01, -7.644e-02, 5.385e-02, 1.343e-02, -4.893e-02, 5.843e-04, -1.812e-03, 3.054e-02, 4.257e-02, -1.697e-03, -2.763e-02, -9.302e-03, -1.751e-02, -2.128e-02, -6.971e-02) * s1[y+2][x+1];
	r += M4(3.266e-02, 1.167e-03, 3.080e-02, 3.678e-03, -1.445e-02, -1.453e-02, -4.251e-02, 2.215e-02, 3.239e-02, -2.568e-02, 3.124e-02, 4.894e-03, 4.822e-02, -3.010e-02, -9.883e-04, 1.048e-02) * s1[y+2][x+2];
	r += M4(3.955e-02, 7.079e-02, -3.424e-02, -1.388e-02, 1.215e-02, -2.650e-02, 6.370e-02, -9.883e-03, 6.181e-02, 4.697e-02, -2.543e-02, -6.390e-02, 1.145e-02, 8.159e-02, -6.622e-02, 1.536e-02) * s2[y+0][x+0];
	r += M4(1.307e-01, 3.034e-02, -7.967e-02, 8.607e-02, 4.749e-02, 2.308e-02, 1.160e-01, -7.544e-02, -3.796e-02, -8.130e-02, 6.567e-02, -4.260e-02, -7.411e-02, -1.227e-01, 7.789e-02, -4.309e-02) * s2[y+0][x+1];
	r += M4(-1.067e-01, -1.339e-03, 8.326e-02, -1.106e-01, -7.598e-02, 2.173e-02, 9.489e-02, -7.457e-02, -4.554e-02, -8.158e-02, 1.925e-02, 4.844e-02, 3.192e-04, -2.198e-02, 2.655e-02, -5.746e-03) * s2[y+0][x+2];
	r += M4(1.366e-02, -1.249e-01, -5.904e-02, -6.003e-02, -3.934e-02, 3.858e-02, 1.681e-03, 1.992e-02, -2.237e-04, 1.493e-01, -4.324e-02, 4.839e-02, -1.204e-01, 9.631e-02, 4.309e-02, -2.192e-02) * s2[y+1][x+0];
	r += M4(1.180e-01, 3.763e-01, -1.291e-01, -2.315e-01, 2.331e-01, 1.994e-01, -3.706e-01, 2.087e-02, -6.202e-02, -8.072e-02, 1.286e-01, -2.291e-01, 1.689e-01, -2.191e-01, -1.076e-02, 1.054e-01) * s2[y+1][x+1];
	r += M4(-1.101e-01, 3.874e-02, -7.105e-02, -1.666e-02, 1.425e-01, -1.421e-01, -1.284e-01, 1.475e-01, -1.525e-01, 7.027e-02, 2.579e-02, -1.314e-01, 2.859e-02, 9.237e-02, 6.346e-02, 1.077e-03) * s2[y+1][x+2];
	r += M4(-4.901e-03, -2.028e-02, 1.285e-01, -2.143e-02, 4.398e-02, -3.336e-02, 6.899e-02, 2.025e-02, -3.433e-02, 1.551e-02, -4.824e-02, 4.899e-02, -2.930e-02, 2.842e-02, -5.533e-02, 5.068e-02) * s2[y+2][x+0];
	r += M4(1.457e-02, 1.024e-02, 9.788e-02, -5.860e-02, -9.331e-02, -1.406e-02, -7.808e-02, 6.985e-02, -1.193e-01, -6.471e-02, -5.822e-02, 9.451e-02, -3.115e-02, -8.104e-02, -1.569e-02, 5.448e-02) * s2[y+2][x+1];
	r += M4(-3.428e-02, 1.703e-03, 2.289e-02, -1.369e-02, 7.359e-02, -1.248e-01, -4.775e-02, 3.944e-02, -3.449e-02, 8.356e-02, 4.089e-02, -8.576e-02, 2.589e-02, -5.730e-02, 3.586e-02, 2.198e-02) * s2[y+2][x+2];
	r += M4(-2.443e-02, 8.512e-02, 3.505e-02, -7.653e-02, 8.749e-03, -3.658e-03, -5.590e-02, 8.644e-02, 8.428e-04, 8.901e-02, -7.669e-02, -4.919e-02, 1.360e-01, -3.488e-02, -1.686e-01, 4.089e-02) * s3[y+0][x+0];
	r += M4(2.955e-01, 1.178e-01, -1.599e-01, 1.650e-01, 1.518e-01, 2.817e-01, -4.658e-02, -8.289e-02, 1.398e-02, 8.369e-04, 5.191e-02, -7.761e-02, 9.680e-03, 1.311e-01, 2.063e-01, -7.792e-02) * s3[y+0][x+1];
	r += M4(-9.465e-02, -4.852e-02, 4.899e-02, 2.940e-02, -3.331e-02, 8.065e-02, -2.248e-02, -7.333e-02, 6.403e-03, -3.380e-02, -2.536e-04, 2.375e-02, 8.742e-03, -7.267e-02, 6.067e-02, -7.891e-02) * s3[y+0][x+2];
	r += M4(-2.581e-02, 1.338e-02, -1.748e-02, 2.424e-02, -1.853e-02, 1.757e-01, -1.190e-01, -7.930e-02, -4.596e-02, 1.652e-01, -2.065e-01, 4.975e-02, -2.240e-02, 1.276e-01, -1.735e-02, -7.437e-04) * s3[y+1][x+0];
	r += M4(1.555e-01, 2.921e-01, 2.017e-01, -2.974e-01, 1.856e-01, 3.145e-01, -4.307e-01, 7.698e-04, 1.107e-01, -3.880e-02, -4.645e-02, -1.705e-01, 1.030e-01, -2.140e-01, -2.699e-01, 6.111e-02) * s3[y+1][x+1];
	r += M4(-8.049e-02, -6.592e-02, 1.220e-03, -4.257e-02, 1.978e-01, -3.996e-03, -1.615e-01, 5.261e-02, -1.118e-01, 6.785e-02, -1.960e-02, -7.886e-02, 2.388e-01, -1.662e-02, 1.028e-01, -1.703e-02) * s3[y+1][x+2];
	r += M4(1.153e-02, -2.218e-02, 1.203e-01, 1.085e-02, 5.452e-03, 6.120e-02, 7.022e-02, -1.797e-02, 9.475e-03, 3.033e-02, -1.340e-01, 1.408e-01, -1.814e-02, -2.860e-02, -1.455e-01, 1.913e-02) * s3[y+2][x+0];
	r += M4(8.171e-03, -4.167e-02, 2.139e-02, 2.727e-02, -8.072e-02, 6.300e-02, -8.141e-02, 5.252e-02, -1.810e-01, -2.540e-02, -1.499e-01, 8.071e-02, 2.290e-02, -5.214e-02, 6.963e-03, 2.707e-02) * s3[y+2][x+1];
	r += M4(3.134e-02, 1.804e-02, -1.351e-03, -2.831e-02, 1.558e-01, -1.084e-01, -4.238e-02, 5.791e-02, -5.719e-02, -2.458e-02, -3.943e-02, -3.084e-02, -2.901e-02, -2.318e-02, -1.737e-03, 2.678e-02) * s3[y+2][x+2];
	r += V4(-1.621e-02, -2.118e-02, -5.333e-03, 3.307e-02);
	return vec4(r);
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv6_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
			s2[ay][ax] = l1(x - 1, y - 1);
			s1[ay][ax] = -max(-s0[ay][ax], V4(0.0));
			s0[ay][ax] = max(s0[ay][ax], V4(0.0));
			s3[ay][ax] = -max(-s2[ay][ax], V4(0.0));
			s2[ay][ax] = max(s2[ay][ax], V4(0.0));
		}
	}
	barrier();
	vec4 r0 = f0(xy.x, xy.y);
	vec4 r1 = f1(xy.x, xy.y);
	imageStore(out_image, opos + ivec2(0, 0), r0);
	imageStore(out_image, opos + ivec2(1, 0), r1);
}

//!DESC CuNNy-8x8C-conv8
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv7
//!BIND LUMA
//!SAVE conv8
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(texelFetch(conv7_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv7_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 s0[10][10];
shared V4 s1[10][10];
shared V4 s2[10][10];
shared V4 s3[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-2.410e-02, -1.062e-02, 1.888e-02, 2.397e-02, 1.284e-02, -1.199e-02, 7.306e-02, 7.996e-02, 2.380e-02, -6.436e-03, -6.251e-02, -3.524e-02, 1.568e-02, 1.662e-02, -1.798e-02, 2.975e-03) * s0[y+0][x+0];
	r += M4(5.399e-02, 3.865e-02, -2.523e-01, -1.180e-02, -4.128e-02, 1.916e-02, 2.484e-02, 4.230e-02, -4.374e-03, 4.879e-02, -9.946e-02, 5.421e-02, 7.571e-02, -1.129e-02, 1.004e-01, 9.390e-03) * s0[y+0][x+1];
	r += M4(8.942e-02, -9.322e-02, 1.630e-02, -2.961e-02, -7.947e-02, 3.769e-02, 1.531e-02, 5.387e-03, 1.675e-01, -1.155e-01, 7.927e-02, -1.386e-02, 3.009e-02, -2.746e-02, 7.881e-02, -5.603e-02) * s0[y+0][x+2];
	r += M4(-2.722e-02, 1.294e-02, -4.860e-02, -3.855e-02, -1.375e-01, 9.068e-02, -9.265e-02, -1.493e-01, 1.680e-01, -5.141e-02, 8.619e-02, -9.758e-02, 3.107e-02, -7.495e-02, 9.641e-02, -6.492e-02) * s0[y+1][x+0];
	r += M4(-7.767e-02, -1.974e-01, 1.031e-01, -1.015e-01, 2.628e-02, 1.318e-01, -9.047e-02, 4.920e-02, 5.414e-01, 7.842e-03, 7.602e-02, 1.025e-01, -9.300e-02, 3.326e-03, -1.763e-01, -9.768e-03) * s0[y+1][x+1];
	r += M4(5.999e-02, -1.395e-03, 2.773e-02, -1.102e-02, 4.604e-02, -8.854e-02, 6.231e-02, 2.986e-02, 1.659e-01, -2.760e-01, 1.835e-01, 8.019e-02, -1.963e-02, 3.365e-02, -6.638e-02, -1.110e-02) * s0[y+1][x+2];
	r += M4(2.054e-02, -2.143e-02, 1.305e-02, -2.321e-02, 5.259e-02, 2.932e-02, -3.211e-02, 2.958e-02, 5.272e-02, -3.728e-02, 3.074e-02, 2.847e-02, 5.713e-03, -3.560e-03, -1.289e-02, -2.859e-03) * s0[y+2][x+0];
	r += M4(2.339e-02, -4.787e-02, -4.610e-03, -3.339e-02, 2.430e-03, 2.838e-02, -9.620e-02, -4.870e-02, 3.826e-02, -2.174e-02, 2.292e-02, 1.072e-01, 5.414e-02, 8.633e-03, 4.660e-02, -7.226e-02) * s0[y+2][x+1];
	r += M4(5.721e-02, 5.747e-03, -1.701e-02, -1.397e-02, -5.081e-03, 6.238e-02, -7.437e-02, 1.952e-02, 6.391e-02, 1.370e-01, 9.320e-02, -3.762e-02, 3.509e-02, -2.578e-02, -1.163e-03, -2.465e-02) * s0[y+2][x+2];
	r += M4(2.812e-02, -2.339e-02, 8.331e-02, 9.110e-02, 1.151e-02, 5.478e-02, 5.336e-02, 1.628e-01, 1.402e-02, 2.304e-02, -4.128e-02, -2.920e-02, 3.520e-02, 1.654e-02, 6.310e-03, -1.242e-03) * s1[y+0][x+0];
	r += M4(-5.742e-02, 2.172e-01, -1.460e-01, 8.778e-02, -4.071e-02, 1.179e-01, 8.682e-02, 6.686e-02, -1.091e-01, 4.771e-02, -9.449e-02, 1.112e-02, 3.996e-02, -4.473e-02, 8.281e-02, 8.198e-02) * s1[y+0][x+1];
	r += M4(6.286e-03, -2.836e-02, 8.031e-02, -1.804e-02, 4.428e-03, 1.481e-03, 5.276e-02, 6.045e-03, -2.028e-02, 2.851e-02, -9.465e-02, 1.437e-02, 1.509e-01, -7.818e-02, 4.675e-02, -7.398e-02) * s1[y+0][x+2];
	r += M4(-1.907e-02, 5.224e-02, -5.792e-02, -1.340e-02, -8.520e-02, 1.007e-01, 2.901e-02, 1.133e-01, 1.497e-02, -4.041e-02, 6.022e-02, 2.901e-03, -6.756e-03, -8.956e-02, 5.464e-02, -1.038e-01) * s1[y+1][x+0];
	r += M4(-6.228e-02, -2.114e-02, 5.285e-02, -8.379e-02, 8.309e-02, -2.764e-01, 1.157e-01, 9.577e-02, 8.898e-02, -1.960e-02, 7.887e-02, -3.260e-02, 3.841e-02, -8.683e-02, -1.728e-02, -4.708e-03) * s1[y+1][x+1];
	r += M4(4.491e-02, 7.706e-02, -9.967e-02, 1.459e-02, 4.633e-02, -7.244e-03, 2.718e-02, -3.539e-03, 1.218e-01, -6.258e-02, 9.561e-02, 6.907e-03, -3.430e-02, 2.330e-01, -6.397e-02, 8.600e-02) * s1[y+1][x+2];
	r += M4(7.793e-03, 8.524e-03, 1.219e-02, 9.375e-03, -1.140e-01, 1.334e-01, -8.090e-02, 8.640e-02, -8.688e-03, 4.470e-03, 8.244e-03, 3.554e-02, -2.694e-02, 2.025e-02, 1.600e-02, 4.046e-02) * s1[y+2][x+0];
	r += M4(3.757e-02, -8.317e-03, 2.461e-02, -3.118e-02, -7.080e-03, 1.255e-01, 1.038e-02, -3.972e-02, -4.258e-02, -8.056e-04, 2.726e-02, 4.761e-03, 7.196e-02, -5.315e-02, 7.928e-02, -1.033e-01) * s1[y+2][x+1];
	r += M4(6.248e-02, 4.260e-02, -1.241e-02, -2.530e-03, -7.141e-03, 4.251e-02, -2.509e-02, 7.213e-03, -2.208e-02, 1.578e-02, -6.112e-03, -4.506e-03, -7.105e-02, 2.367e-03, -3.093e-02, -3.139e-02) * s1[y+2][x+2];
	r += M4(8.568e-02, -4.431e-02, 6.644e-03, -1.062e-01, -1.712e-02, -1.949e-02, -1.076e-03, 7.813e-03, 1.681e-02, -4.414e-02, 5.722e-02, 1.747e-02, -8.642e-03, 1.255e-02, -2.464e-02, -1.357e-02) * s2[y+0][x+0];
	r += M4(1.149e-01, -1.100e-01, -3.480e-02, 3.284e-02, -5.248e-03, 1.841e-01, -1.220e-01, 5.468e-02, 2.167e-02, 4.016e-02, -6.482e-02, 3.479e-02, 8.462e-02, -4.242e-02, 1.573e-01, 4.050e-02) * s2[y+0][x+1];
	r += M4(8.584e-02, -3.567e-02, -2.119e-02, -6.163e-02, -8.148e-02, 4.873e-02, 7.188e-03, 3.752e-02, -1.180e-02, -2.471e-02, -2.051e-02, -2.001e-02, -6.800e-03, -6.020e-03, 2.244e-02, 1.874e-02) * s2[y+0][x+2];
	r += M4(2.229e-01, -4.050e-02, 7.238e-02, -2.901e-01, 1.522e-01, 6.574e-02, 1.257e-02, 1.624e-02, -4.903e-02, 1.779e-02, -5.871e-02, 4.370e-02, 8.884e-02, -2.119e-02, 7.876e-02, 1.377e-01) * s2[y+1][x+0];
	r += M4(1.614e-01, 2.654e-01, -8.404e-02, -3.536e-02, 6.403e-03, -2.266e-01, 3.904e-01, 1.963e-01, -1.418e-01, 8.714e-02, 3.056e-02, -1.854e-01, 2.367e-03, 1.265e-01, 7.639e-02, -5.992e-02) * s2[y+1][x+1];
	r += M4(3.640e-01, -1.733e-01, 1.928e-01, -3.504e-02, 1.689e-01, -7.695e-02, 1.503e-01, -2.771e-02, -2.798e-03, 2.997e-02, -9.605e-02, 5.235e-02, 6.859e-02, -1.692e-01, 1.018e-01, 1.593e-02) * s2[y+1][x+2];
	r += M4(1.278e-01, -4.236e-02, -1.474e-02, -4.783e-02, 4.045e-02, 3.904e-03, 1.516e-02, 1.138e-02, 5.262e-03, 5.542e-03, 6.279e-03, -3.428e-02, -5.571e-03, -1.142e-02, 3.106e-02, -2.057e-02) * s2[y+2][x+0];
	r += M4(8.913e-02, -9.889e-02, -1.099e-01, -7.056e-02, 6.460e-02, 1.043e-01, 2.888e-02, 3.653e-02, 6.378e-02, -5.663e-02, 2.193e-02, -8.629e-03, -3.149e-02, -8.006e-02, 2.827e-03, -1.949e-03) * s2[y+2][x+1];
	r += M4(7.984e-02, -1.997e-01, 6.028e-02, -6.508e-03, 1.214e-02, -9.325e-02, 5.831e-02, -4.250e-03, 9.889e-02, 7.130e-02, -2.476e-02, -3.229e-02, 4.140e-02, -1.837e-03, -5.696e-02, -2.941e-02) * s2[y+2][x+2];
	r += M4(3.892e-03, -4.721e-02, 8.091e-02, 2.650e-02, 6.688e-02, -2.361e-02, 5.318e-02, 2.932e-04, -1.408e-02, -2.200e-02, 7.259e-02, 6.764e-02, 7.983e-02, -5.556e-03, -2.540e-02, -2.978e-02) * s3[y+0][x+0];
	r += M4(-6.872e-02, 3.755e-02, -2.614e-02, -3.589e-02, 7.259e-02, 2.627e-02, 1.068e-01, 3.377e-02, -6.449e-02, -6.666e-02, -6.034e-04, 4.618e-02, -3.036e-02, -6.473e-02, 5.509e-02, 4.402e-04) * s3[y+0][x+1];
	r += M4(-3.107e-02, 2.820e-02, -1.828e-02, -8.979e-03, -3.753e-02, 1.902e-02, 8.344e-02, 7.566e-03, 3.070e-02, -5.945e-03, -8.167e-03, 1.157e-02, 1.074e-01, -8.504e-02, 9.892e-02, -9.365e-03) * s3[y+0][x+2];
	r += M4(-7.626e-02, 3.966e-02, -9.631e-02, -8.815e-02, 2.120e-02, -1.649e-02, 2.280e-02, 8.272e-03, -1.172e-01, 7.976e-02, -6.765e-02, 2.668e-02, -5.748e-03, -1.213e-01, 8.979e-02, 3.545e-01) * s3[y+1][x+0];
	r += M4(-1.321e-02, -8.976e-02, 2.885e-02, -3.711e-02, -1.000e-01, 1.575e-02, -1.042e-01, 1.553e-02, -6.035e-01, -2.419e-02, 9.402e-02, -1.830e-01, 3.998e-02, 1.418e-01, -1.355e-01, -7.236e-02) * s3[y+1][x+1];
	r += M4(-2.245e-02, 5.056e-02, -4.407e-02, -9.798e-03, 3.562e-02, -4.462e-02, 2.297e-02, 1.744e-02, -9.437e-02, 3.010e-02, -1.895e-01, 4.968e-02, 2.565e-02, -2.690e-01, 8.797e-02, -9.376e-02) * s3[y+1][x+2];
	r += M4(3.938e-02, -2.618e-02, 4.163e-02, -4.365e-03, 1.290e-02, -2.847e-02, 1.913e-03, -3.321e-02, 1.324e-02, 1.717e-02, 6.668e-03, -1.742e-02, -1.841e-02, -2.693e-01, 1.700e-01, -8.718e-02) * s3[y+2][x+0];
	r += M4(4.453e-02, 5.253e-02, -4.156e-02, -1.089e-02, 1.597e-02, 2.402e-02, -3.951e-02, 1.090e-02, -1.614e-03, 1.343e-02, 1.562e-02, -9.708e-03, -6.711e-02, -4.624e-01, 2.310e-01, -6.669e-02) * s3[y+2][x+1];
	r += M4(-1.146e-02, -3.187e-02, 3.757e-02, -1.837e-02, -4.634e-02, 9.268e-03, -4.676e-02, 6.826e-03, 4.839e-02, 1.185e-02, -2.154e-02, -3.048e-02, -2.171e-01, 1.711e-01, -1.293e-01, -4.543e-02) * s3[y+2][x+2];
	r += V4(-3.552e-03, -8.922e-04, -1.108e-02, -1.041e-02);
	return vec4(r);
}
vec4 f1(int x, int y) {
	V4 r = V4(0.0);
	r += M4(2.418e-02, 1.118e-02, 8.185e-03, -1.093e-02, -9.214e-04, 1.790e-02, -2.362e-02, -6.439e-02, -9.350e-02, 6.295e-02, -4.310e-02, -6.967e-02, -2.457e-02, 4.616e-02, -7.825e-03, -4.010e-02) * s0[y+0][x+0];
	r += M4(5.806e-02, 2.900e-01, 2.075e-02, -5.511e-02, 5.754e-02, 2.379e-02, -7.007e-02, -1.351e-01, 3.658e-02, 2.569e-01, 6.590e-02, -2.989e-02, 5.288e-02, -9.619e-03, 5.112e-03, -4.065e-02) * s0[y+0][x+1];
	r += M4(3.743e-02, 2.733e-02, -2.877e-02, -4.253e-02, 3.650e-02, 1.510e-02, 2.251e-02, -1.725e-02, 6.188e-02, -1.253e-02, -3.231e-02, 6.755e-02, 1.656e-04, -4.272e-02, -5.785e-02, 1.902e-02) * s0[y+0][x+2];
	r += M4(1.893e-02, 8.771e-02, -7.057e-02, -7.008e-02, -1.746e-02, -4.548e-02, -6.434e-02, -4.699e-02, 5.828e-02, 2.063e-02, 8.572e-02, 1.131e-01, 3.536e-02, -1.202e-01, 5.505e-05, 1.223e-01) * s0[y+1][x+0];
	r += M4(-3.208e-02, 2.129e-01, -8.565e-02, -2.491e-01, -6.083e-02, 2.266e-01, 1.072e-01, 5.432e-02, 1.785e-02, 5.852e-01, -1.566e-01, 1.844e-01, -1.096e-02, 1.499e-01, -6.059e-02, 9.306e-02) * s0[y+1][x+1];
	r += M4(8.784e-02, -1.285e-03, 2.056e-02, 1.566e-02, -3.163e-02, 1.054e-02, 4.116e-02, 9.662e-03, -1.513e-01, 5.505e-02, 1.418e-02, -3.543e-03, 1.108e-02, 1.066e-02, 2.698e-02, 8.378e-03) * s0[y+1][x+2];
	r += M4(-1.055e-02, 1.088e-03, -2.547e-02, 4.224e-03, -1.923e-02, 8.043e-02, -2.897e-02, 2.700e-02, -7.749e-02, -2.272e-02, -7.028e-03, -4.944e-02, -3.580e-02, -6.161e-03, -2.390e-02, -2.752e-02) * s0[y+2][x+0];
	r += M4(-2.024e-02, 8.615e-02, -1.050e-02, 5.758e-02, 6.428e-02, -4.617e-02, -1.834e-02, 4.681e-02, -9.418e-02, 3.884e-02, 4.802e-02, -9.516e-02, 1.691e-02, -2.133e-02, 3.185e-02, 3.957e-02) * s0[y+2][x+1];
	r += M4(6.238e-02, -1.093e-02, -4.358e-02, 3.027e-04, 4.346e-02, 5.445e-04, -5.155e-02, 3.218e-02, 1.539e-01, -7.887e-02, -1.112e-02, 5.297e-03, 1.749e-02, 6.692e-03, -4.150e-02, 7.815e-03) * s0[y+2][x+2];
	r += M4(1.762e-02, 5.891e-02, -2.401e-02, -2.296e-02, -8.068e-02, 1.017e-01, -7.617e-02, -3.443e-02, -1.161e-03, 7.694e-02, 2.096e-02, -2.831e-02, -2.066e-02, 4.578e-02, 1.755e-02, -5.184e-02) * s1[y+0][x+0];
	r += M4(6.819e-02, 3.191e-01, 2.113e-02, -2.818e-01, 1.286e-01, 1.477e-01, 6.061e-02, -1.052e-01, 7.610e-02, 9.106e-02, 1.039e-01, -1.359e-02, 7.090e-02, -7.620e-02, -3.979e-02, 4.507e-02) * s1[y+0][x+1];
	r += M4(4.507e-03, -1.891e-02, -2.085e-02, -1.956e-02, 3.921e-03, 3.353e-02, -3.085e-03, -2.217e-02, 9.643e-03, 4.869e-02, 1.344e-02, 1.184e-03, -6.813e-02, -8.776e-02, -1.204e-01, 3.949e-02) * s1[y+0][x+2];
	r += M4(2.658e-02, 9.864e-02, -5.777e-03, -6.052e-02, -1.120e-01, 1.670e-01, -1.480e-04, 2.141e-02, 1.535e-02, -9.400e-02, 3.191e-02, 6.510e-02, 1.036e-01, -8.549e-02, 4.014e-02, 2.003e-01) * s1[y+1][x+0];
	r += M4(4.669e-02, 2.318e-01, 2.130e-02, -1.394e-01, -2.589e-01, 1.200e-01, -1.269e-01, -1.107e-02, 1.237e-02, 3.532e-02, -2.047e-01, 8.761e-02, 2.335e-01, 4.104e-01, -2.190e-01, 5.646e-01) * s1[y+1][x+1];
	r += M4(7.538e-02, 3.007e-02, 4.001e-02, 2.983e-02, 2.826e-02, 1.068e-02, -9.070e-03, 3.779e-02, 4.847e-02, -1.455e-02, -3.908e-02, -5.066e-02, 1.723e-01, 5.515e-03, 8.580e-02, 1.219e-01) * s1[y+1][x+2];
	r += M4(9.315e-03, 9.590e-03, 1.874e-03, 5.872e-03, 6.087e-02, 1.446e-01, 4.467e-02, 9.935e-02, -1.695e-02, -6.523e-03, -2.403e-02, -4.591e-02, -2.620e-02, 4.472e-02, -3.181e-02, -2.538e-02) * s1[y+2][x+0];
	r += M4(-3.978e-03, 6.421e-02, -1.962e-02, 4.460e-02, 1.597e-01, -9.297e-02, 4.139e-02, 1.938e-02, -1.913e-02, -2.562e-02, 5.459e-02, -3.900e-02, 4.087e-02, -6.782e-02, 3.886e-02, 1.335e-01) * s1[y+2][x+1];
	r += M4(8.040e-02, -7.991e-03, -3.792e-02, -2.609e-03, 1.804e-02, -1.303e-02, -1.308e-03, 1.816e-02, -8.357e-03, 3.018e-03, 4.243e-02, -6.132e-03, 8.172e-03, -3.535e-02, -8.478e-02, 3.784e-02) * s1[y+2][x+2];
	r += M4(-1.169e-01, 6.957e-02, -1.802e-01, -1.190e-02, 2.702e-02, 1.218e-02, 2.125e-02, -1.012e-02, 9.998e-02, 6.456e-02, 2.269e-02, 3.795e-02, -6.468e-05, -6.678e-03, 2.364e-02, -7.819e-04) * s2[y+0][x+0];
	r += M4(-2.652e-02, -3.856e-02, -8.036e-03, 2.064e-02, 1.171e-01, 2.667e-01, 1.689e-01, -2.059e-01, 1.548e-01, 1.597e-01, 1.685e-01, -9.319e-02, 5.393e-02, 5.951e-03, 5.980e-02, 2.521e-02) * s2[y+0][x+1];
	r += M4(-4.767e-02, -9.487e-03, -3.544e-03, 1.013e-02, 4.006e-02, 3.211e-02, 6.967e-02, -9.618e-03, 3.383e-02, 1.459e-02, 2.708e-02, 2.062e-02, 4.846e-02, 1.167e-02, -1.149e-02, -2.871e-03) * s2[y+0][x+2];
	r += M4(-5.390e-02, 2.656e-01, -3.889e-02, -1.505e-01, -1.300e-01, 1.432e-01, -6.222e-02, -2.055e-01, 1.325e-03, 1.612e-01, -1.668e-02, -7.690e-02, -5.769e-02, 5.921e-02, -8.685e-03, -8.152e-02) * s2[y+1][x+0];
	r += M4(-7.484e-02, 3.213e-01, -2.342e-01, 2.572e-01, -2.330e-01, -3.962e-04, -3.521e-01, -5.254e-01, 2.341e-01, 2.686e-01, 3.830e-02, -1.994e-01, 2.049e-01, 1.693e-01, -2.946e-03, -2.853e-01) * s2[y+1][x+1];
	r += M4(7.642e-02, 1.036e-02, -1.144e-01, 5.376e-02, 1.507e-01, 7.540e-02, -8.679e-02, 9.993e-02, 3.444e-02, 7.995e-02, 1.186e-01, -3.228e-02, -2.838e-02, 4.646e-02, -3.431e-02, -1.500e-02) * s2[y+1][x+2];
	r += M4(4.345e-02, 4.910e-02, 1.004e-03, 3.133e-01, -4.524e-03, 1.011e-03, 5.376e-02, 1.559e-02, 2.878e-02, 6.443e-04, 2.444e-02, 4.208e-02, 1.634e-02, -4.953e-02, 2.562e-02, 2.044e-03) * s2[y+2][x+0];
	r += M4(-1.247e-01, 4.618e-02, 2.963e-03, 9.809e-02, 3.502e-02, 3.575e-02, 1.929e-01, 1.163e-02, -3.872e-02, 1.204e-01, -5.399e-02, 7.810e-02, -1.721e-02, 6.311e-02, 1.048e-02, 1.810e-01) * s2[y+2][x+1];
	r += M4(-6.962e-02, -1.739e-02, -2.966e-02, -4.014e-02, -5.776e-02, -2.398e-02, 6.295e-03, -1.648e-02, 1.304e-01, -2.303e-02, -8.063e-02, 1.324e-02, 2.124e-02, -1.693e-02, -3.616e-02, 1.665e-02) * s2[y+2][x+2];
	r += M4(6.599e-02, -1.994e-02, -1.041e-02, 1.010e-01, -2.080e-03, 8.195e-03, -2.426e-02, -3.815e-02, 7.886e-02, 3.462e-02, -3.516e-03, 9.484e-03, -2.909e-02, 1.423e-02, 2.376e-02, -2.927e-02) * s3[y+0][x+0];
	r += M4(4.504e-02, -4.390e-02, -6.862e-02, -8.518e-03, 6.190e-02, 1.134e-01, 3.259e-02, -1.082e-01, 3.646e-01, 2.922e-02, 6.957e-02, 3.438e-03, 9.803e-03, -5.444e-02, 6.406e-03, 4.171e-02) * s3[y+0][x+1];
	r += M4(-1.899e-02, -3.690e-02, -2.966e-02, 1.628e-03, 3.523e-02, -1.095e-02, 4.963e-02, -8.944e-03, 1.144e-01, 5.036e-03, 2.386e-02, 6.623e-02, 1.169e-01, -5.564e-04, 2.607e-02, 3.076e-02) * s3[y+0][x+2];
	r += M4(-5.352e-02, 1.110e-01, -1.088e-01, -1.571e-01, -4.421e-03, 3.594e-02, -2.455e-02, 2.066e-02, -3.076e-02, 9.237e-02, -8.472e-02, -1.176e-01, -1.570e-03, 3.622e-02, -1.933e-03, -2.104e-02) * s3[y+1][x+0];
	r += M4(-1.152e-01, -6.970e-02, -1.575e-01, -4.007e-02, 1.673e-02, 1.072e-01, -1.071e-01, -5.665e-02, 3.962e-01, 2.556e-02, -5.511e-02, 5.048e-03, 4.893e-01, 2.310e-01, 7.175e-02, -1.669e-01) * s3[y+1][x+1];
	r += M4(-5.790e-03, 1.644e-02, -6.518e-02, 5.338e-03, 5.162e-02, 2.871e-02, -2.695e-02, 6.344e-02, 2.513e-02, 2.378e-02, 7.866e-02, -1.299e-02, -1.101e-01, 1.129e-02, -5.219e-02, 4.557e-03) * s3[y+1][x+2];
	r += M4(-1.918e-02, 9.786e-03, -8.728e-03, 6.616e-02, -1.802e-02, -3.356e-02, 1.665e-03, 3.283e-02, 5.524e-02, -2.934e-02, 7.438e-03, 3.716e-02, -5.898e-02, -1.198e-01, -6.120e-02, -5.737e-02) * s3[y+2][x+0];
	r += M4(4.135e-02, 1.585e-02, 5.477e-03, 3.582e-02, 1.635e-02, 2.494e-02, 5.495e-02, 9.553e-02, 1.570e-02, 9.871e-02, -4.387e-02, 5.382e-02, -1.735e-01, -3.649e-02, -1.242e-01, 5.518e-02) * s3[y+2][x+1];
	r += M4(-2.033e-02, -1.417e-02, 3.685e-03, 3.914e-03, -1.309e-03, 1.526e-03, -5.042e-02, 9.033e-03, 8.395e-02, -1.277e-02, -8.633e-02, 2.789e-02, 9.367e-03, -6.067e-02, -4.924e-02, 1.589e-02) * s3[y+2][x+2];
	r += V4(-1.203e-02, -8.858e-03, -7.011e-04, 4.255e-04);
	return vec4(r);
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv7_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
			s2[ay][ax] = l1(x - 1, y - 1);
			s1[ay][ax] = -max(-s0[ay][ax], V4(0.0));
			s0[ay][ax] = max(s0[ay][ax], V4(0.0));
			s3[ay][ax] = -max(-s2[ay][ax], V4(0.0));
			s2[ay][ax] = max(s2[ay][ax], V4(0.0));
		}
	}
	barrier();
	vec4 r0 = f0(xy.x, xy.y);
	vec4 r1 = f1(xy.x, xy.y);
	imageStore(out_image, opos + ivec2(0, 0), r0);
	imageStore(out_image, opos + ivec2(1, 0), r1);
}

//!DESC CuNNy-8x8C-out
//!HOOK LUMA
//!COMPUTE 8 8 8 8
//!BIND conv8
//!BIND LUMA
//!SAVE out
//!WIDTH LUMA.w
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(texelFetch(conv8_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv8_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 s0[10][10];
shared V4 s1[10][10];
shared V4 s2[10][10];
shared V4 s3[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-1.179e-01, 8.714e-02, 2.092e-02, 3.032e-02, -1.605e-01, 6.089e-02, -2.118e-02, -4.289e-05, -8.153e-02, -1.733e-01, 4.798e-02, -2.700e-02, 1.599e-01, -4.453e-02, 3.761e-02, 2.326e-02) * s0[y+0][x+0];
	r += M4(-4.563e-02, -1.280e-01, 1.802e-01, 1.255e-01, 1.215e-01, -1.161e-02, 1.169e-01, 8.762e-02, 8.599e-03, 1.039e-02, -7.397e-02, 4.041e-02, -1.696e-01, -2.903e-03, 4.962e-02, 9.069e-02) * s0[y+0][x+1];
	r += M4(3.648e-02, -7.007e-02, 4.233e-02, 1.237e-02, 2.572e-02, -3.943e-02, 3.169e-02, 2.715e-03, -4.309e-02, -8.330e-03, -1.530e-03, 8.325e-03, 3.411e-02, 5.981e-02, 2.730e-02, -1.754e-02) * s0[y+0][x+2];
	r += M4(-1.079e-01, 3.374e-02, -5.195e-02, 9.448e-02, 1.145e-01, -2.284e-02, -2.105e-01, 5.658e-02, 1.966e-02, -1.653e-01, 1.942e-01, -1.214e-01, -1.919e-02, 1.944e-02, 2.956e-01, -3.529e-02) * s0[y+1][x+0];
	r += M4(4.530e-02, -1.470e-01, -2.730e-01, -3.389e-01, 7.747e-02, 3.123e-02, -1.097e-01, -4.039e-01, -2.862e-01, -3.503e-01, 3.317e-01, 3.704e-01, 1.391e-01, -4.353e-01, -4.499e-01, -2.809e-01) * s0[y+1][x+1];
	r += M4(3.593e-02, 7.934e-02, -1.386e-02, -7.944e-02, -4.074e-02, 1.483e-01, -7.200e-02, 5.050e-02, -1.428e-02, 1.875e-02, -5.040e-02, 2.336e-02, -1.282e-02, 2.028e-01, -7.446e-02, -2.647e-02) * s0[y+1][x+2];
	r += M4(2.513e-02, -8.957e-03, -9.871e-02, -1.098e-02, -4.942e-02, -2.389e-02, 8.525e-02, 2.739e-03, 6.719e-02, -1.952e-02, 6.378e-02, -7.503e-02, -4.627e-02, 7.539e-02, -4.992e-02, 8.717e-02) * s0[y+2][x+0];
	r += M4(2.781e-02, 1.795e-02, 7.945e-02, -4.664e-02, -5.766e-02, -8.679e-04, -4.697e-02, 1.460e-01, -1.571e-03, 7.446e-02, -7.112e-02, -1.879e-02, -8.088e-03, -1.140e-01, 1.830e-01, -2.038e-01) * s0[y+2][x+1];
	r += M4(1.028e-02, -4.411e-03, -2.374e-03, 5.381e-03, -6.255e-03, -2.741e-02, -9.771e-03, 7.916e-03, -2.345e-03, -9.195e-03, 1.216e-02, 1.016e-02, 8.423e-02, 6.506e-02, -5.538e-02, 2.070e-03) * s0[y+2][x+2];
	r += M4(-1.547e-01, 4.102e-02, -4.091e-02, 6.465e-02, -3.311e-01, 4.162e-02, 8.387e-02, 2.662e-02, 7.170e-02, -5.225e-02, 4.497e-03, -8.391e-02, -2.646e-02, 5.627e-02, 1.251e-02, 3.917e-02) * s1[y+0][x+0];
	r += M4(-1.842e-02, -1.008e-01, 1.099e-01, 3.035e-02, 1.401e-01, -1.571e-01, 1.615e-01, 1.471e-01, 4.197e-02, 8.708e-02, -1.045e-01, -1.708e-03, 4.283e-02, -1.649e-01, 9.644e-02, 5.584e-02) * s1[y+0][x+1];
	r += M4(5.116e-02, -7.153e-02, 5.356e-02, 9.943e-03, -1.074e-02, -4.976e-02, 3.650e-02, 1.721e-02, -4.365e-02, 5.516e-03, 1.146e-02, 1.511e-02, -2.812e-02, 1.429e-02, 2.255e-02, -2.752e-03) * s1[y+0][x+2];
	r += M4(-1.467e-01, 5.186e-02, 6.102e-04, 7.390e-02, 2.300e-01, -5.099e-02, -2.188e-01, -1.258e-02, 9.595e-02, -4.958e-02, -2.542e-02, -5.304e-02, -2.007e-02, 3.724e-02, 2.373e-03, 7.792e-02) * s1[y+1][x+0];
	r += M4(1.155e-01, -1.441e-01, -1.278e-01, -1.725e-01, -1.078e-01, -2.421e-02, -4.441e-02, -2.516e-01, -1.608e-01, -2.245e-01, 2.814e-01, 1.386e-01, -2.505e-01, 3.467e-02, -8.166e-02, -7.658e-02) * s1[y+1][x+1];
	r += M4(2.592e-02, 1.645e-01, -4.849e-02, -6.279e-02, 2.957e-02, 1.081e-01, -7.642e-02, -3.489e-02, -1.291e-02, 5.613e-02, -4.669e-02, 2.564e-02, 1.318e-01, -7.816e-02, -3.435e-03, -4.318e-02) * s1[y+1][x+2];
	r += M4(1.746e-01, 4.114e-02, -5.789e-01, -3.996e-02, 3.242e-03, -7.327e-03, 9.759e-02, -2.937e-02, 1.517e-02, -3.339e-02, 9.896e-02, -3.135e-02, -4.738e-03, 3.238e-02, -4.438e-02, 2.410e-02) * s1[y+2][x+0];
	r += M4(3.018e-01, 3.354e-01, -2.638e-01, -7.065e-01, -7.601e-03, 1.787e-02, -9.258e-03, 6.829e-02, 1.871e-04, 7.325e-02, -9.295e-02, -1.862e-02, 3.254e-02, -5.542e-02, -6.584e-02, -5.118e-02) * s1[y+2][x+1];
	r += M4(1.661e-03, 9.258e-02, -6.635e-02, -3.691e-02, -2.362e-03, -2.973e-02, 2.017e-02, 1.582e-02, 9.520e-03, -1.409e-02, 7.195e-03, 8.499e-03, 1.589e-02, 3.374e-02, 2.464e-02, -3.705e-02) * s1[y+2][x+2];
	r += M4(-1.597e-01, 1.154e-01, 7.045e-02, 3.284e-02, 1.028e-01, -6.244e-02, 2.155e-02, -2.749e-02, 1.543e-01, -6.795e-02, -1.611e-02, -3.742e-02, -7.938e-02, -2.424e-02, 4.992e-02, 2.336e-02) * s2[y+0][x+0];
	r += M4(4.359e-02, -1.230e-01, 4.025e-02, 2.776e-02, 5.487e-02, 3.067e-02, -1.153e-01, -3.943e-02, -1.188e-01, 8.343e-02, 3.986e-02, 2.423e-02, 7.976e-02, -1.552e-01, 1.250e-01, 1.084e-01) * s2[y+0][x+1];
	r += M4(-1.285e-02, -1.527e-04, -2.949e-02, -1.493e-02, -2.137e-03, 5.774e-02, 3.032e-03, 9.750e-03, 2.679e-02, -2.646e-03, -2.316e-02, 2.058e-02, -7.057e-03, 8.676e-02, -3.738e-02, -9.548e-03) * s2[y+0][x+2];
	r += M4(-2.275e-02, -8.563e-02, -1.014e-01, 9.965e-02, -7.619e-02, 7.886e-02, -1.027e-01, -2.613e-03, -2.558e-02, 3.345e-03, 5.650e-02, -4.229e-02, 7.538e-02, 5.826e-02, -8.434e-02, 3.701e-02) * s2[y+1][x+0];
	r += M4(2.132e-01, 2.622e-01, 2.401e-01, 2.210e-01, 5.269e-01, -1.248e-01, 4.970e-01, -1.008e-01, 8.420e-03, -2.550e-03, -1.427e-01, 2.520e-02, -6.217e-02, -2.803e-01, -5.972e-03, -3.389e-01) * s2[y+1][x+1];
	r += M4(-3.810e-02, -1.163e-01, 5.077e-02, 1.878e-02, -5.682e-02, 2.171e-01, -1.071e-01, 5.911e-02, -7.444e-03, 1.229e-03, 3.772e-02, -5.354e-03, -1.783e-02, 2.509e-02, 6.520e-02, 9.994e-02) * s2[y+1][x+2];
	r += M4(2.850e-02, -2.101e-02, -1.747e-02, -6.570e-02, 2.407e-02, -9.707e-03, 5.052e-02, 2.444e-02, -2.212e-02, -1.259e-02, 1.945e-02, 1.826e-03, -1.855e-02, 4.684e-03, 3.674e-02, 2.171e-02) * s2[y+2][x+0];
	r += M4(1.593e-02, 2.327e-02, 8.093e-03, -4.121e-03, -5.935e-02, 1.041e-01, 9.680e-02, 9.998e-02, -2.907e-02, -1.801e-02, 7.415e-03, 3.030e-02, 8.243e-03, -3.675e-02, 2.444e-02, -4.335e-02) * s2[y+2][x+1];
	r += M4(-1.225e-02, 2.390e-02, 1.466e-03, 2.040e-03, -3.210e-02, -5.475e-02, -2.623e-02, 6.754e-02, -1.420e-02, -3.486e-03, -1.198e-02, -4.957e-03, 1.480e-02, 4.016e-02, -5.548e-02, -4.060e-03) * s2[y+2][x+2];
	r += M4(-1.088e-01, 8.752e-02, 7.430e-03, 3.004e-02, 1.050e-01, -3.894e-02, 3.554e-02, -2.179e-02, -2.742e-02, -8.808e-02, 8.764e-02, 1.347e-03, -1.164e-02, -2.068e-03, -9.279e-03, 5.592e-03) * s3[y+0][x+0];
	r += M4(-2.804e-02, -1.258e-01, 4.264e-02, 9.150e-03, -4.354e-02, -4.530e-02, -1.350e-01, -3.968e-02, -1.487e-01, -8.079e-02, 1.126e-01, 1.837e-01, 3.545e-01, 2.800e-02, 4.457e-02, -2.276e-02) * s3[y+0][x+1];
	r += M4(-1.395e-02, -2.697e-02, -1.736e-02, -1.964e-03, 3.377e-02, 9.405e-02, 1.779e-02, 5.127e-03, 3.584e-02, 2.782e-02, -2.275e-02, 1.059e-02, -3.588e-02, 1.470e-01, -4.798e-02, 5.551e-03) * s3[y+0][x+2];
	r += M4(-1.421e-01, -1.745e-02, -6.841e-02, 4.773e-02, -7.720e-02, 5.327e-02, -4.169e-02, 1.062e-02, 3.396e-01, -9.174e-02, -6.014e-02, -7.737e-02, 2.683e-02, 8.048e-02, -6.936e-02, 4.175e-02) * s3[y+1][x+0];
	r += M4(3.467e-01, 2.737e-01, 2.724e-01, 1.707e-01, 2.168e-01, -2.558e-01, 2.666e-01, -8.969e-02, 1.755e-01, 7.783e-01, -7.095e-01, -3.995e-01, -1.646e-01, -5.176e-01, 1.616e-01, -3.807e-01) * s3[y+1][x+1];
	r += M4(-3.963e-02, -1.077e-01, 3.918e-02, 2.520e-02, -8.491e-02, 1.146e-01, -9.598e-02, 3.830e-02, 1.051e-02, -5.493e-02, 1.241e-01, -6.066e-02, -4.187e-02, -2.272e-02, 3.853e-02, 1.675e-01) * s3[y+1][x+2];
	r += M4(5.563e-03, -1.778e-02, -1.025e-01, -3.401e-02, 2.827e-02, -1.479e-02, 5.113e-02, 1.911e-02, 7.840e-03, 3.472e-02, -5.222e-02, -2.935e-02, -1.633e-02, 1.490e-02, 2.267e-02, 3.879e-02) * s3[y+2][x+0];
	r += M4(1.357e-02, -5.012e-03, -1.427e-02, -6.715e-02, -5.817e-02, 7.341e-02, -2.543e-02, -1.836e-02, -2.210e-01, -2.339e-01, 2.249e-01, 1.459e-01, 6.527e-02, -1.532e-02, 2.706e-02, -1.133e-01) * s3[y+2][x+1];
	r += M4(-3.771e-03, 1.934e-02, -1.098e-02, -3.567e-02, -5.393e-02, -5.848e-02, -3.589e-02, 4.812e-02, -2.753e-02, -7.411e-02, -1.735e-02, 4.179e-02, 2.905e-02, 4.936e-02, -5.383e-02, -2.766e-02) * s3[y+2][x+2];
	r += V4(-3.638e-05, -1.355e-03, 2.643e-03, 1.293e-03);
	return tanh(vec4(r));
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(1, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv8_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
			s2[ay][ax] = l1(x - 1, y - 1);
			s1[ay][ax] = -max(-s0[ay][ax], V4(0.0));
			s0[ay][ax] = max(s0[ay][ax], V4(0.0));
			s3[ay][ax] = -max(-s2[ay][ax], V4(0.0));
			s2[ay][ax] = max(s2[ay][ax], V4(0.0));
		}
	}
	barrier();
	vec4 r0 = f0(xy.x, xy.y);
	imageStore(out_image, opos + ivec2(0, 0), r0);
}

//!DESC CuNNy-8x8C-shuffle
//!HOOK LUMA
//!BIND out
//!BIND easu
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 1
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
vec4 hook() {
	vec4 r = vec4(0.0);
	vec2 f = fract(out_pos * out_size);
	ivec2 i = ivec2(f * vec2(2.0));
	r.r = out_tex((vec2(0.5) - f) * out_pt + out_pos)[2*i.y + i.x];
	r.r += easu_tex(easu_pos).r;
	r.a = 1.0;
	return clamp(r, 0.0, 1.0);
}
