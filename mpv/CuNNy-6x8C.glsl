// CuNNy 6x8C
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

// FSR mpv | modified
// Copyright (c) 2021 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// FidelityFX FSR v1.0.2 by AMD
// ported to mpv by agyild

//!DESC CuNNy-6x8C-EASU
//!HOOK LUMA
//!BIND LUMA
//!SAVE easu
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
//!COMPONENTS 1

float APrxLoRcpF1(float a) {
	return uintBitsToFloat(uint(0x7ef07ebb) - floatBitsToUint(a));
}

float APrxLoRsqF1(float a) {
	return uintBitsToFloat(uint(0x5f347d74) - (floatBitsToUint(a) >> uint(1)));
}

float AMin3F1(float x, float y, float z) {
	return min(x, min(y, z));
}

float AMax3F1(float x, float y, float z) {
	return max(x, max(y, z));
}

void tap(inout float aC, inout float aW, vec2 off, vec2 dir, vec2 len,
         float lob, float clp, float c){
	vec2 v;
	v.x = (off.x * ( dir.x)) + (off.y * dir.y);
	v.y = (off.x * (-dir.y)) + (off.y * dir.x);
	v *= len;
	float d2 = v.x * v.x + v.y * v.y;
	d2 = min(d2, clp);
	float wB = float(2.0 / 5.0) * d2 + -1.0;
	float wA = lob * d2 + -1.0;
	wB *= wB;
	wA *= wA;
	wB = float(25.0 / 16.0) * wB + float(-(25.0 / 16.0 - 1.0));
	float w = wB * wA;
	aC += c * w;
	aW += w;
}

void set(inout vec2 dir, inout float len, vec2 pp, bool biS, bool biT,
         bool biU, bool biV, float lA, float lB, float lC, float lD, float lE){
	float w = 0.0;
	if (biS)
		w = (1.0 - pp.x) * (1.0 - pp.y);
	if (biT)
		w =        pp.x  * (1.0 - pp.y);
	if (biU)
		w = (1.0 - pp.x) *        pp.y;
	if (biV)
		w =        pp.x  *        pp.y;
	float dc = lD - lC;
	float cb = lC - lB;
	float lenX = max(abs(dc), abs(cb));
	lenX = APrxLoRcpF1(lenX);
	float dirX = lD - lB;
	lenX = clamp(abs(dirX) * lenX, 0.0, 1.0);
	lenX *= lenX;
	float ec = lE - lC;
	float ca = lC - lA;
	float lenY = max(abs(ec), abs(ca));
	lenY = APrxLoRcpF1(lenY);
	float dirY = lE - lA;
	lenY = clamp(abs(dirY) * lenY, 0.0, 1.0);
	lenY *= lenY;
	dir += vec2(dirX, dirY) * w;
	len += dot(vec2(w), vec2(lenX, lenY));
}

vec4 hook() {
	vec4 pix = vec4(0.0, 0.0, 0.0, 1.0);
	vec2 pp = LUMA_pos * LUMA_size - vec2(0.5);
	vec2 fp = floor(pp);
	pp -= fp;
#if (defined(LUMA_gather) && (__VERSION__ >= 400 || (GL_ES && __VERSION__ >= 310)))
	vec4 bczzL = LUMA_gather(vec2((fp + vec2(1.0, -1.0)) * LUMA_pt), 0);
	vec4 ijfeL = LUMA_gather(vec2((fp + vec2(0.0,  1.0)) * LUMA_pt), 0);
	vec4 klhgL = LUMA_gather(vec2((fp + vec2(2.0,  1.0)) * LUMA_pt), 0);
	vec4 zzonL = LUMA_gather(vec2((fp + vec2(1.0,  3.0)) * LUMA_pt), 0);
#else
	float b = LUMA_tex(vec2((fp + vec2(0.5, -0.5)) * LUMA_pt)).r;
	float c = LUMA_tex(vec2((fp + vec2(1.5, -0.5)) * LUMA_pt)).r;
	float e = LUMA_tex(vec2((fp + vec2(-0.5, 0.5)) * LUMA_pt)).r;
	float f = LUMA_tex(vec2((fp + vec2( 0.5, 0.5)) * LUMA_pt)).r;
	float g = LUMA_tex(vec2((fp + vec2( 1.5, 0.5)) * LUMA_pt)).r;
	float h = LUMA_tex(vec2((fp + vec2( 2.5, 0.5)) * LUMA_pt)).r;
	float i = LUMA_tex(vec2((fp + vec2(-0.5, 1.5)) * LUMA_pt)).r;
	float j = LUMA_tex(vec2((fp + vec2( 0.5, 1.5)) * LUMA_pt)).r;
	float k = LUMA_tex(vec2((fp + vec2( 1.5, 1.5)) * LUMA_pt)).r;
	float l = LUMA_tex(vec2((fp + vec2( 2.5, 1.5)) * LUMA_pt)).r;
	float n = LUMA_tex(vec2((fp + vec2(0.5, 2.5) ) * LUMA_pt)).r;
	float o = LUMA_tex(vec2((fp + vec2(1.5, 2.5) ) * LUMA_pt)).r;
	vec4 bczzL = vec4(b, c, 0.0, 0.0);
	vec4 ijfeL = vec4(i, j, f, e);
	vec4 klhgL = vec4(k, l, h, g);
	vec4 zzonL = vec4(0.0, 0.0, o, n);
#endif
	float bL = bczzL.x;
	float cL = bczzL.y;
	float iL = ijfeL.x;
	float jL = ijfeL.y;
	float fL = ijfeL.z;
	float eL = ijfeL.w;
	float kL = klhgL.x;
	float lL = klhgL.y;
	float hL = klhgL.z;
	float gL = klhgL.w;
	float oL = zzonL.z;
	float nL = zzonL.w;
	vec2 dir = vec2(0.0);
	float len = 0.0;
	set(dir, len, pp, true, false, false, false, bL, eL, fL, gL, jL);
	set(dir, len, pp, false, true, false, false, cL, fL, gL, hL, kL);
	set(dir, len, pp, false, false, true, false, fL, iL, jL, kL, nL);
	set(dir, len, pp, false, false, false, true, gL, jL, kL, lL, oL);
	vec2 dir2 = dir * dir;
	float dirR = dir2.x + dir2.y;
	bool zro = dirR < float(1.0 / 32768.0);
	dirR = APrxLoRsqF1(dirR);
	dirR = zro ? 1.0 : dirR;
	dir.x = zro ? 1.0 : dir.x;
	dir *= vec2(dirR);
	len = len * 0.5;
	len *= len;
	float stretch = (dir.x * dir.x + dir.y * dir.y) * APrxLoRcpF1(max(abs(dir.x), abs(dir.y)));
	vec2 len2 = vec2(1.0 + (stretch - 1.0) * len, 1.0 + -0.5 * len);
	float lob = 0.5 + float((1.0 / 4.0 - 0.04) - 0.5) * len;
	float clp = APrxLoRcpF1(lob);
	float aC = 0.0;
	float aW = 0.0;
	tap(aC, aW, vec2( 0.0,-1.0) - pp, dir, len2, lob, clp, bL);
	tap(aC, aW, vec2( 1.0,-1.0) - pp, dir, len2, lob, clp, cL);
	tap(aC, aW, vec2(-1.0, 1.0) - pp, dir, len2, lob, clp, iL);
	tap(aC, aW, vec2( 0.0, 1.0) - pp, dir, len2, lob, clp, jL);
	tap(aC, aW, vec2( 0.0, 0.0) - pp, dir, len2, lob, clp, fL);
	tap(aC, aW, vec2(-1.0, 0.0) - pp, dir, len2, lob, clp, eL);
	tap(aC, aW, vec2( 1.0, 1.0) - pp, dir, len2, lob, clp, kL);
	tap(aC, aW, vec2( 2.0, 1.0) - pp, dir, len2, lob, clp, lL);
	tap(aC, aW, vec2( 2.0, 0.0) - pp, dir, len2, lob, clp, hL);
	tap(aC, aW, vec2( 1.0, 0.0) - pp, dir, len2, lob, clp, gL);
	tap(aC, aW, vec2( 1.0, 2.0) - pp, dir, len2, lob, clp, oL);
	tap(aC, aW, vec2( 0.0, 2.0) - pp, dir, len2, lob, clp, nL);
	pix.r = aC / aW;
	float min1 = min(AMin3F1(fL, gL, jL), kL);
	float max1 = max(AMax3F1(fL, gL, jL), kL);
	pix.r = clamp(pix.r, min1, max1);
	pix.r = clamp(pix.r, 0.0, 1.0);
	return pix;
}


//!DESC CuNNy-6x8C-in
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND LUMA
//!SAVE in
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) F(LUMA_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(1, 1) + ivec2(0, 0)) + vec2(0.5)) * LUMA_pt).r)
shared F g[1][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = LUMA_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			g[0][ay][ax] = l0(x - 1, y - 1);
		}
	}
	barrier();
	F s[3][3][1];
	V4 r0 = V4(0.0);
	V4 r1 = V4(0.0);
	s[0][0][0] = g[0][xy.y+0][xy.x+0];
	s[0][1][0] = g[0][xy.y+0][xy.x+1];
	s[0][2][0] = g[0][xy.y+0][xy.x+2];
	s[1][0][0] = g[0][xy.y+1][xy.x+0];
	s[1][1][0] = g[0][xy.y+1][xy.x+1];
	s[1][2][0] = g[0][xy.y+1][xy.x+2];
	s[2][0][0] = g[0][xy.y+2][xy.x+0];
	s[2][1][0] = g[0][xy.y+2][xy.x+1];
	s[2][2][0] = g[0][xy.y+2][xy.x+2];
	r0 += V4(7.901e-03, 4.919e-03, -1.847e-02, -1.440e-01) * s[0][0][0];
	r1 += V4(2.678e-02, -6.773e-02, -1.216e-02, 1.660e-02) * s[0][0][0];
	r0 += V4(-3.739e-03, -4.581e-02, -3.941e-03, 4.029e-02) * s[0][1][0];
	r1 += V4(2.897e-02, 6.936e-02, 1.110e-01, -3.136e-02) * s[0][1][0];
	r0 += V4(-1.920e-02, 3.916e-01, -1.485e-03, -6.921e-03) * s[0][2][0];
	r1 += V4(-4.040e-02, 4.855e-03, 1.887e-01, 2.509e-02) * s[0][2][0];
	r0 += V4(-6.699e-02, -2.501e-02, 3.135e-01, 9.839e-02) * s[1][0][0];
	r1 += V4(4.504e-02, 5.893e-02, 3.431e-02, 6.922e-03) * s[1][0][0];
	r0 += V4(-4.351e-01, -1.484e-01, 3.774e-03, 6.624e-02) * s[1][1][0];
	r1 += V4(-3.552e-01, 3.068e-01, -1.955e-01, -3.857e-01) * s[1][1][0];
	r0 += V4(1.328e-02, -1.101e-01, 1.438e-03, -1.279e-02) * s[1][2][0];
	r1 += V4(-2.823e-02, -1.258e-01, 2.705e-01, 3.635e-01) * s[1][2][0];
	r0 += V4(-3.602e-02, 1.663e-02, -1.904e-02, -1.356e-01) * s[2][0][0];
	r1 += V4(9.383e-03, -4.187e-02, 4.724e-02, -6.794e-03) * s[2][0][0];
	r0 += V4(5.332e-01, 1.860e-01, 4.116e-01, 2.137e-02) * s[2][1][0];
	r1 += V4(6.165e-02, -5.759e-02, -2.301e-01, -1.996e-02) * s[2][1][0];
	r0 += V4(6.517e-03, -2.666e-01, -1.056e-02, -3.469e-03) * s[2][2][0];
	r1 += V4(2.335e-01, 4.265e-02, -2.139e-01, 2.021e-02) * s[2][2][0];
	r0 += V4(-4.947e-06, 1.375e-04, -2.900e-03, 3.212e-03);
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-1.790e-02, -6.492e-03, 1.828e-02, 1.984e-02);
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-6x8C-conv1
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND in
//!BIND LUMA
//!SAVE conv1
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(in_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0)) + vec2(0.5)) * in_pt))
#define l1(x, y) V4(in_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0)) + vec2(0.5)) * in_pt))
shared V4 g[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = in_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			g[0][ay][ax] = l0(x - 1, y - 1);
			g[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s[3][3][2];
	V4 r0 = V4(0.0);
	V4 r1 = V4(0.0);
	s[0][0][0] = max(g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[0][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[0][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[0][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[0][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[0][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[0][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(-2.627e-01, -1.122e-01, 6.006e-02, 7.101e-02, -8.011e-02, -3.375e-01, -6.437e-02, 1.082e-01, -4.450e-03, -2.909e-02, -5.313e-02, -1.597e-02, 1.047e-01, 9.909e-02, 2.267e-01, -1.086e-01) * s[0][0][0];
	r1 += M4(-2.678e-02, -4.538e-02, 1.527e-02, 1.774e-01, 2.051e-01, -5.634e-03, -4.454e-02, 1.637e-01, 2.376e-02, -2.666e-02, 2.043e-01, 7.536e-02, 7.399e-02, -7.457e-02, -1.322e-01, 1.855e-01) * s[0][0][0];
	r0 += M4(-2.074e-01, 5.230e-02, 1.373e-01, -1.524e-01, 4.170e-01, -2.061e-01, 7.586e-02, -7.403e-02, 7.417e-01, 6.294e-01, 7.081e-01, 8.517e-01, -6.140e-02, 5.312e-02, -3.427e-02, 1.223e-01) * s[0][0][1];
	r1 += M4(2.145e-01, -3.313e-02, 2.011e-01, 2.315e-01, 8.874e-02, -6.218e-02, 1.289e-01, -4.367e-03, -5.096e-01, 5.378e-01, 2.037e+00, -5.405e-01, -1.097e-01, -4.831e-02, -8.673e-02, 1.457e-01) * s[0][0][1];
	r0 += M4(-3.336e-01, -1.357e+00, -2.387e-01, -7.936e-03, 5.334e-02, -2.089e-01, 1.519e-01, -5.862e-03, 1.433e-01, 6.338e-02, 3.599e-02, 2.736e-01, -8.026e-02, -1.132e-01, 1.563e-02, 6.576e-02) * s[0][1][0];
	r1 += M4(8.848e-01, 1.694e-01, 4.605e-02, -8.239e-02, 1.406e-01, -4.865e-03, 1.111e-01, 1.863e-02, -1.383e-01, 7.939e-02, -1.630e-01, -9.975e-02, 1.558e-01, 5.354e-02, 4.783e-02, 2.651e-02) * s[0][1][0];
	r0 += M4(7.408e-02, -2.172e-01, -1.295e-01, 6.005e-01, -1.823e-01, -9.793e-02, 7.159e-02, 4.655e-02, 3.010e+00, -2.710e-01, -5.352e-01, 2.658e+00, 2.635e-01, -5.831e-02, 8.940e-02, 5.459e-02) * s[0][1][1];
	r1 += M4(-2.742e-01, -5.346e-02, -5.879e-01, 4.522e-01, -1.497e-01, -2.156e-02, 4.301e-02, -1.484e-02, -3.272e+00, 2.085e+00, -1.281e+00, 9.897e-01, -2.004e-01, 2.665e-03, 5.967e-02, -9.912e-02) * s[0][1][1];
	r0 += M4(1.062e-01, -1.305e-01, -1.315e-01, -2.171e-01, 1.211e-01, 3.912e-02, 2.071e-02, -1.600e-02, -5.307e-02, 1.642e-01, -6.246e-02, 1.023e-01, 4.637e-01, -3.263e-01, 2.452e-01, -4.186e-01) * s[0][2][0];
	r1 += M4(8.013e-02, -3.373e-02, -1.407e-01, 1.984e-01, -1.425e-01, -1.811e-03, 8.986e-03, 9.439e-02, -1.032e-01, 7.024e-02, -5.334e-02, -9.583e-02, 1.058e+00, -1.102e-01, 3.858e-01, -3.812e-01) * s[0][2][0];
	r0 += M4(-2.183e-01, -9.870e-02, 1.797e-01, -4.911e-02, -3.554e-02, -4.504e-03, -5.452e-02, -2.627e-02, 2.266e+00, 1.013e+00, -7.062e-01, -1.242e+00, -1.818e-01, -3.408e-02, 4.533e-02, 3.869e-02) * s[0][2][1];
	r1 += M4(-1.398e-01, -5.906e-02, 1.201e-01, 1.198e-01, -1.132e-01, -2.308e-02, -2.016e-02, -1.603e-02, -1.672e+00, 9.441e-01, 2.392e+00, -2.987e+00, 6.724e-02, 2.108e-01, 1.182e-01, -1.034e-02) * s[0][2][1];
	r0 += M4(9.619e-02, -2.201e-01, -1.958e-01, 2.346e-01, -2.393e-01, 4.480e-01, -2.530e-01, -9.137e-02, -7.837e-02, -8.258e-02, -3.239e-02, 7.127e-02, -2.247e-01, -1.986e-03, -3.947e-02, 2.098e-01) * s[1][0][0];
	r1 += M4(-1.524e-01, 1.156e-01, -2.573e-01, 1.644e-02, -2.189e-02, -2.182e-01, -2.799e-01, 1.882e-01, 7.508e-02, -5.918e-03, 9.791e-02, -1.652e-01, 2.637e-01, -1.774e-01, 1.944e-01, -4.698e-01) * s[1][0][0];
	r0 += M4(-6.825e-02, -9.990e-02, -5.039e-03, 1.033e-02, -6.093e-02, 1.032e-01, 3.553e-01, -1.696e-02, 1.047e-01, 5.647e-01, -9.243e-01, -3.693e-01, -5.070e-02, 1.078e-01, -9.361e-02, 1.199e-02) * s[1][0][1];
	r1 += M4(6.660e-02, 1.413e-01, -1.801e-01, 5.081e-02, -1.688e-01, -2.063e-02, 2.260e-01, 2.357e-02, -1.136e-01, 2.550e-01, 1.215e-01, -2.724e-01, 8.015e-02, 4.796e-03, -3.684e-02, -1.108e-01) * s[1][0][1];
	r0 += M4(3.087e-01, 1.304e-01, -2.730e-01, 4.560e-01, -5.397e-02, 7.224e-02, 2.471e-01, -4.042e-02, 1.084e-01, 1.407e-02, 3.358e-02, 2.218e-01, 5.666e-01, -1.005e-01, -1.150e-01, 4.606e-01) * s[1][1][0];
	r1 += M4(-1.372e-01, -3.302e-01, 3.251e-01, -2.354e-01, -1.016e-02, 4.285e-02, -3.731e-03, 2.698e-01, -4.801e-03, 1.308e-01, 6.636e-02, -2.713e-02, 2.961e-01, 4.817e-01, 5.540e-02, -8.432e-01) * s[1][1][0];
	r0 += M4(-2.358e-01, 3.839e-01, 1.065e+00, -2.781e-01, 7.748e-02, 7.298e-02, 5.668e-02, -1.072e-01, -1.221e-01, -9.217e-01, 2.928e-01, 4.484e-01, 1.627e-01, -2.512e-02, -1.572e-01, -1.481e-01) * s[1][1][1];
	r1 += M4(1.177e-02, 6.051e-02, 2.305e-01, 2.039e-01, -1.912e-01, -8.054e-02, 3.908e-02, -2.854e-02, -7.736e-01, 9.126e-01, 1.696e-01, -1.647e+00, -4.032e-02, 1.654e-01, 1.635e-02, 3.400e-02) * s[1][1][1];
	r0 += M4(-1.430e-01, 2.688e-01, -6.703e-01, -2.866e-01, 3.532e-02, 3.407e-02, 8.707e-02, 6.198e-02, -1.313e-01, 1.938e-03, 3.011e-03, 1.562e-01, -1.350e-01, -5.710e-01, 2.719e-01, 8.315e-01) * s[1][2][0];
	r1 += M4(-3.258e-01, -1.879e-01, -2.275e-01, -1.695e-01, -1.437e-01, -1.164e-01, 6.288e-02, 1.949e-02, -9.123e-03, 3.338e-01, -2.542e-01, 1.948e-01, -2.729e-01, 5.611e-01, -2.378e-01, -1.284e-01) * s[1][2][0];
	r0 += M4(5.331e-02, 1.929e-01, 3.269e-01, -1.444e-01, -9.256e-02, 7.979e-02, -5.459e-02, -6.321e-02, -2.670e+00, -1.787e+00, -1.290e+00, 2.776e+00, 7.127e-02, -1.185e-01, 9.541e-02, -7.700e-02) * s[1][2][1];
	r1 += M4(7.976e-02, -4.413e-02, -6.257e-02, -2.644e-02, -2.204e-02, -6.899e-02, 1.412e-03, -1.401e-01, 1.677e+00, 2.165e+00, 1.508e+00, 1.130e+00, -7.251e-02, -7.390e-02, 6.023e-02, -1.696e-01) * s[1][2][1];
	r0 += M4(9.489e-02, -9.400e-02, 7.892e-02, 1.116e-01, -7.817e-02, -1.168e-02, -2.779e-01, -3.972e-02, 2.668e-02, 2.367e-02, 1.254e-01, 1.977e-02, -1.338e-01, 1.348e-01, 4.193e-01, -2.614e-01) * s[2][0][0];
	r1 += M4(-1.328e-01, -3.680e-02, -8.714e-02, 8.299e-02, -1.230e-01, -1.453e-01, 5.742e-02, 2.669e-02, 9.637e-02, 4.840e-02, 5.125e-02, -8.719e-02, 1.046e-01, -4.368e-02, -1.166e-01, 5.148e-02) * s[2][0][0];
	r0 += M4(1.173e-01, -7.840e-02, -9.380e-02, 1.362e-01, 9.120e-02, 6.443e-02, 3.296e-01, -4.589e-02, 7.817e-01, 1.052e+00, 6.477e-01, -1.126e-02, -8.220e-02, 6.247e-02, 1.551e-01, 4.113e-02) * s[2][0][1];
	r1 += M4(-7.953e-02, -4.972e-02, 4.127e-02, 1.224e-01, 1.688e-01, 8.031e-02, -2.596e-01, -1.669e-02, 9.098e-01, 5.662e-01, 5.916e-01, -3.331e-01, -1.757e-01, 8.484e-02, -5.023e-02, -1.018e-01) * s[2][0][1];
	r0 += M4(-5.024e-02, -1.435e-03, -1.795e-01, -1.576e-01, -6.101e-02, 1.199e-01, -8.910e-02, 1.002e-01, 1.087e-02, -1.140e-01, -3.985e-02, 2.609e-02, -5.588e-01, 9.945e-02, 3.206e-02, 7.900e-01) * s[2][1][0];
	r1 += M4(-8.976e-03, -2.602e-03, -1.015e-01, -1.975e-01, 1.469e-01, -5.542e-02, -1.283e-01, -1.022e-01, -3.381e-02, 6.265e-02, 1.940e-02, 1.033e-01, -4.505e-02, 9.942e-02, 2.752e-01, 5.080e-01) * s[2][1][0];
	r0 += M4(7.148e-02, 1.766e-02, 4.082e-02, -1.718e-01, -9.500e-02, 4.503e-02, -2.165e-04, -7.805e-02, 2.430e-01, 1.333e+00, -1.644e+00, -1.313e+00, -7.106e-02, -7.164e-02, -8.786e-03, 5.150e-02) * s[2][1][1];
	r1 += M4(7.150e-02, 3.541e-02, -4.925e-02, -4.910e-02, 6.017e-02, 2.150e-02, -2.512e-01, -4.405e-01, 3.393e-01, 8.754e-01, 1.813e+00, -1.073e+00, -8.085e-03, 9.032e-03, 1.093e-01, 3.280e-01) * s[2][1][1];
	r0 += M4(-1.460e-01, 1.641e-02, -5.221e-03, -8.232e-02, 1.035e-02, 5.481e-02, -5.334e-02, -6.141e-02, -7.257e-02, -7.821e-02, -3.730e-02, 1.438e-01, 2.743e-01, 6.237e-02, 7.199e-02, -7.664e-01) * s[2][2][0];
	r1 += M4(-2.125e-02, 2.109e-02, -9.417e-02, -2.123e-01, 1.090e-01, -2.642e-02, -1.204e-01, -2.172e-01, -2.727e-02, 2.256e-02, -1.175e-02, 1.012e-01, 2.230e-01, -5.365e-01, -3.497e-02, 5.893e-01) * s[2][2][0];
	r0 += M4(-4.760e-02, -1.069e-02, 8.645e-02, -1.239e-01, -9.176e-02, 5.941e-02, -2.068e-01, 6.034e-02, 5.571e-02, 2.170e+00, 1.748e+00, -1.951e+00, -4.511e-02, 1.218e-01, -5.900e-02, -6.675e-02) * s[2][2][1];
	r1 += M4(5.298e-02, 5.629e-02, -4.651e-02, -1.535e-01, 9.971e-02, 7.013e-03, -7.935e-02, -2.366e-01, 2.251e+00, 1.770e+00, 1.354e+00, 4.881e-02, 8.628e-02, -7.635e-02, 4.592e-03, 4.712e-04) * s[2][2][1];
	s[0][0][0] = max(g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[1][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[1][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[1][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[1][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[1][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[1][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(-5.150e-01, -7.934e-02, -1.373e-02, 6.930e-02, 2.296e-02, -1.909e-01, -1.647e-01, -8.786e-02, -1.271e-01, 4.415e-01, 4.622e-02, -1.161e-01, -1.081e-01, 7.793e-02, -1.304e-01, 1.080e-02) * s[0][0][0];
	r1 += M4(-3.945e-01, -8.813e-02, 1.326e-01, -9.704e-03, 2.314e-01, 8.741e-03, 1.845e-01, -1.500e-01, 3.066e-02, 5.738e-02, 2.217e-02, 2.847e-02, 1.589e-01, 6.257e-02, -2.855e-01, 7.004e-02) * s[0][0][0];
	r0 += M4(-2.298e-01, -3.276e-02, 4.928e-02, -5.296e-02, 4.723e-01, -2.550e-01, -3.315e-01, 7.952e-02, -9.340e-02, 3.975e-01, 8.414e-02, 3.787e-02, 1.380e-01, -9.882e-02, 8.934e-02, -1.233e-02) * s[0][0][1];
	r1 += M4(-1.698e-02, -1.344e-01, 9.947e-02, 1.809e-01, 4.970e-01, 3.024e-01, 5.916e-01, -6.142e-01, 2.900e-02, 5.449e-02, 2.499e-03, -1.604e-01, -4.405e-01, -6.902e-03, -2.277e-01, -7.961e-02) * s[0][0][1];
	r0 += M4(-1.050e-01, -4.378e-01, -1.474e-01, 1.479e-01, 1.966e-01, 2.543e-01, 5.229e-02, -3.019e-02, 2.883e-01, -4.360e-02, 1.359e-02, 1.599e-01, -2.454e-01, -1.746e-01, -6.332e-02, -2.643e-02) * s[0][1][0];
	r1 += M4(2.931e-01, 2.104e-01, -1.184e-01, -2.026e-03, -1.448e-01, -1.453e-01, -4.654e-02, -1.311e-01, 2.292e-01, 7.581e-03, -1.284e-01, -6.766e-02, 4.431e-01, 1.665e-01, -3.079e-02, 1.130e-01) * s[0][1][0];
	r0 += M4(4.742e-02, -5.145e-01, -7.399e-02, 3.241e-02, 2.378e-01, 7.178e-01, -7.674e-02, -3.644e-02, -1.791e-01, -3.031e-03, -1.722e-01, 7.812e-02, 3.682e-01, -5.293e-01, -7.514e-03, -2.021e-01) * s[0][1][1];
	r1 += M4(2.457e-01, 4.945e-02, -1.142e-01, 2.075e-01, 3.739e-01, 1.539e-01, 1.406e-01, -7.452e-01, 1.642e-01, 1.360e-01, -1.330e-01, 1.246e-01, 2.123e-01, 6.851e-04, 4.394e-02, -1.072e-01) * s[0][1][1];
	r0 += M4(1.893e-01, -6.384e-02, -1.859e-02, 1.997e-02, -1.489e-01, 2.650e-01, 6.396e-05, -3.171e-02, 6.213e-02, -2.297e-02, -7.401e-02, -7.970e-02, -2.485e-01, -5.746e-02, 2.300e-01, -1.317e-02) * s[0][2][0];
	r1 += M4(2.277e-02, 9.106e-03, 6.024e-02, 2.404e-02, -8.039e-02, -2.051e-03, -8.570e-02, 1.297e-01, 6.130e-02, 4.277e-02, -6.247e-04, -6.812e-02, 4.656e-02, 7.804e-02, 1.659e-03, 4.344e-02) * s[0][2][0];
	r0 += M4(2.600e-02, -5.867e-02, -4.521e-02, 5.820e-02, 1.956e-01, 5.732e-01, 1.450e-01, -3.138e-01, 1.598e-02, -4.379e-02, 1.136e-02, 1.065e-02, -7.913e-02, 2.533e-02, 7.728e-02, 1.168e-02) * s[0][2][1];
	r1 += M4(1.520e-02, 5.873e-02, 1.044e-01, 2.274e-02, -6.531e-01, 4.874e-02, 1.382e-01, 1.185e-01, 5.422e-02, 2.814e-02, -6.981e-04, 4.386e-02, 6.300e-02, 2.056e-02, 1.801e-02, -2.603e-02) * s[0][2][1];
	r0 += M4(2.190e-02, 2.488e-01, 8.932e-02, -2.441e-01, -1.014e-01, 9.709e-02, -4.976e-02, -5.221e-02, 2.385e-02, -1.582e-01, 2.081e-01, -7.736e-02, -1.070e-01, -9.378e-02, -1.073e-01, -4.797e-02) * s[1][0][0];
	r1 += M4(2.141e-01, 8.442e-02, -1.982e-01, 5.950e-01, 1.155e-01, 8.897e-02, 2.981e-01, -1.876e-01, 2.329e-01, 8.705e-03, -5.031e-01, 2.588e-01, -1.295e-01, -1.016e-01, -5.259e-01, 3.904e-01) * s[1][0][0];
	r0 += M4(1.739e-01, 1.180e-01, 1.517e-01, 3.058e-02, -5.080e-02, -9.471e-02, 1.208e-01, 2.955e-01, -2.933e-01, -4.939e-01, 1.619e-01, -1.924e-01, -6.519e-02, 2.881e-01, 7.928e-02, 2.918e-01) * s[1][0][1];
	r1 += M4(-8.385e-02, 6.710e-02, -4.600e-01, 2.985e-01, -4.079e-01, -3.661e-02, 4.681e-01, -1.596e-01, 4.236e-02, -5.980e-02, -5.954e-01, -1.506e-02, -1.904e-01, 6.763e-02, -6.122e-01, 3.337e-01) * s[1][0][1];
	r0 += M4(-7.379e-01, 1.544e-01, -4.160e-02, -6.260e-02, 1.817e-01, -1.872e-01, 8.746e-03, 1.571e-01, -3.468e-01, 4.373e-01, 2.917e-01, -2.910e-01, -7.603e-03, 3.701e-01, 1.860e-01, -7.401e-02) * s[1][1][0];
	r1 += M4(-4.121e-01, -6.637e-02, 1.565e-01, 2.645e-01, 8.789e-02, 9.554e-02, 2.113e-02, 1.294e-01, -2.003e-01, -1.475e-01, 3.554e-01, 8.683e-02, -4.082e-01, -1.411e-01, 2.314e-01, 1.103e-01) * s[1][1][0];
	r0 += M4(1.827e-01, 1.611e-01, 2.680e-01, -3.036e-01, 3.408e-01, -3.982e-01, 3.224e-01, 4.696e-01, -1.604e-01, 4.875e-01, -3.261e-01, -2.125e-01, -2.361e-01, 3.408e-02, 5.453e-01, -8.061e-02) * s[1][1][1];
	r1 += M4(-3.652e-02, -2.697e-01, 3.805e-01, -2.103e-01, -9.893e-01, 8.542e-01, 3.359e-01, 5.597e-01, -5.384e-01, -3.563e-01, 3.865e-01, 2.475e-02, 1.460e-01, -3.456e-01, 4.846e-01, -1.734e-01) * s[1][1][1];
	r0 += M4(1.377e-01, -7.670e-02, -2.400e-01, 8.576e-02, -6.786e-03, 1.588e-01, 1.566e-01, 2.386e-02, 1.751e-01, -6.703e-02, -1.530e-01, 1.392e-01, -1.784e-01, 1.222e-01, 2.308e-02, -4.899e-02) * s[1][2][0];
	r1 += M4(1.282e-01, -1.801e-01, 1.531e-01, -2.426e-01, -1.074e-01, -3.229e-01, -4.463e-02, 1.644e-01, -8.153e-02, -4.056e-02, 4.573e-02, 6.380e-02, -1.838e-01, -1.623e-01, -1.644e-01, 2.426e-01) * s[1][2][0];
	r0 += M4(1.383e-01, 2.287e-03, -1.111e-01, 5.412e-02, -4.772e-01, 6.244e-01, -2.778e-01, 9.406e-01, -6.775e-02, -4.891e-02, -2.046e-01, 1.353e-01, 3.987e-02, 1.299e-01, 1.719e-01, -2.311e-01) * s[1][2][1];
	r1 += M4(-1.853e-02, -2.589e-01, 1.013e-01, -1.753e-01, -7.865e-01, -8.814e-02, -3.761e-01, 6.067e-02, -9.415e-02, 9.678e-03, 7.048e-02, 6.959e-02, -1.205e-01, -1.353e-01, -9.751e-02, 4.452e-02) * s[1][2][1];
	r0 += M4(1.211e-01, 1.480e-01, -9.199e-02, 1.362e-01, -1.225e-01, -1.738e-01, 4.963e-02, 8.613e-02, 1.120e-01, -1.223e-02, 1.632e-01, 1.406e-01, 2.128e-01, -2.086e-01, 1.098e-03, -5.370e-02) * s[2][0][0];
	r1 += M4(-8.416e-02, -1.312e-01, -2.795e-01, -8.164e-03, 7.010e-02, -1.218e-01, -7.855e-03, -3.056e-01, 7.185e-02, 2.592e-02, -1.650e-01, -2.364e-01, -8.322e-02, 1.107e-02, -3.443e-01, -1.199e-01) * s[2][0][0];
	r0 += M4(-2.777e-01, 7.534e-02, 9.081e-03, 9.081e-02, -3.480e-01, -2.543e-01, 1.307e-01, -3.219e-01, 5.023e-03, -5.653e-02, -2.079e-01, 5.288e-01, -9.647e-02, -2.383e-02, -5.733e-01, 8.859e-02) * s[2][0][1];
	r1 += M4(-1.374e-01, -5.923e-02, -3.065e-01, -2.104e-01, 2.282e-01, -7.370e-02, -1.177e-02, -1.706e-01, -2.319e-02, 1.169e-02, -1.298e-01, -3.254e-01, -1.750e-01, 3.169e-02, -1.931e-01, -1.596e-01) * s[2][0][1];
	r0 += M4(1.541e-01, 1.544e-02, 8.454e-02, -1.927e-01, -2.139e-03, -4.512e-02, 2.814e-02, 2.520e-02, -9.773e-02, -7.965e-02, -2.810e-01, -8.053e-03, -2.104e-01, -4.682e-02, -1.943e-01, 3.730e-02) * s[2][1][0];
	r1 += M4(2.216e-02, 1.124e-02, 5.263e-02, -1.248e-01, -1.269e-02, -1.010e-01, -8.831e-02, 2.170e-01, -9.715e-02, 9.216e-02, -1.106e-01, -2.599e-01, 1.464e-01, -1.334e-02, 2.627e-01, -3.284e-01) * s[2][1][0];
	r0 += M4(-1.415e-01, 9.698e-02, -8.467e-02, -2.149e-02, 2.541e-01, 3.650e-02, -2.994e-01, 1.010e+00, 2.004e-01, -5.464e-02, -2.414e-01, -2.542e-01, 3.203e-01, -1.030e-02, 1.264e-01, -2.345e-02) * s[2][1][1];
	r1 += M4(-1.081e-01, -3.502e-02, 2.811e-03, -2.743e-02, 1.241e-01, 2.264e-01, -1.095e-01, 5.136e-01, -7.843e-02, 4.484e-02, -7.985e-02, -2.274e-01, 2.604e-01, 4.586e-03, 1.439e-02, -2.388e-01) * s[2][1][1];
	r0 += M4(1.016e-01, 2.446e-02, -1.949e-01, -2.614e-02, -9.789e-03, -4.029e-02, -5.036e-03, 1.792e-02, -8.862e-03, -5.768e-02, 1.001e-01, -2.297e-02, 3.502e-02, 1.826e-02, 7.816e-03, 2.690e-02) * s[2][2][0];
	r1 += M4(2.054e-01, -4.192e-03, -9.218e-02, -7.585e-02, -2.136e-03, -1.646e-01, -1.004e-01, 1.642e-01, 1.127e-01, 1.166e-01, 2.406e-03, 1.314e-01, -5.207e-02, 5.387e-02, -2.965e-02, -2.549e-02) * s[2][2][0];
	r0 += M4(1.043e-02, 1.433e-02, -1.101e-01, 3.787e-02, -1.547e-01, -4.522e-02, 1.091e-01, -6.113e-01, -4.173e-02, -8.322e-02, -5.553e-02, -2.940e-03, 2.019e-03, 3.071e-02, 3.666e-02, 8.060e-02) * s[2][2][1];
	r1 += M4(2.607e-01, 4.275e-02, -9.735e-02, -1.034e-01, 3.219e-01, -4.749e-03, 1.252e-01, 2.357e-01, 2.609e-02, 3.654e-02, 1.409e-02, 9.421e-02, -2.875e-02, 5.212e-02, -3.779e-02, 1.765e-02) * s[2][2][1];
	r0 += V4(4.749e-02, -7.342e-03, 3.434e-02, -3.138e-01);
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-1.494e-02, -1.140e-03, 2.533e-02, 1.811e-03);
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-6x8C-conv2
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv1
//!BIND LUMA
//!SAVE conv2
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(conv1_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0)) + vec2(0.5)) * conv1_pt))
#define l1(x, y) V4(conv1_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0)) + vec2(0.5)) * conv1_pt))
shared V4 g[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv1_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			g[0][ay][ax] = l0(x - 1, y - 1);
			g[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s[3][3][2];
	V4 r0 = V4(0.0);
	V4 r1 = V4(0.0);
	s[0][0][0] = max(g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[0][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[0][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[0][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[0][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[0][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[0][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(-3.663e-03, 8.482e-03, 7.665e-03, -3.964e-03, 6.747e-02, -2.460e-02, -1.435e-02, -1.855e-01, 2.881e-01, -1.147e-01, 2.900e-01, 1.695e-01, 3.145e-02, -1.349e-01, -8.878e-03, -1.567e-01) * s[0][0][0];
	r1 += M4(-2.030e-02, -8.611e-02, 1.126e-01, 4.291e-02, -3.467e-02, -1.248e-01, -3.605e-02, 5.462e-02, -1.235e-01, -7.051e-02, -7.511e-02, 2.220e-01, -3.717e-02, -2.444e-01, -1.558e-01, 4.655e-02) * s[0][0][0];
	r0 += M4(2.328e-01, 3.381e-02, 6.982e-02, -3.026e-01, 1.022e-02, -6.793e-03, -2.529e-02, -3.166e-02, 1.101e-01, -1.008e-01, 2.366e-01, -2.515e-01, 1.078e-01, -1.806e-01, 1.967e-02, -1.280e-01) * s[0][0][1];
	r1 += M4(-4.130e-02, -2.575e-01, 4.587e-02, 4.130e-02, -5.476e-02, 3.627e-02, -2.517e-02, 3.843e-02, 3.922e-02, -8.578e-02, -9.052e-02, 3.193e-01, -3.170e-02, -1.980e-01, 3.046e-02, 2.240e-01) * s[0][0][1];
	r0 += M4(4.566e-03, -3.068e-02, -7.496e-02, -2.411e-03, 7.269e-02, -4.992e-03, 1.958e-02, 2.458e-02, -2.355e-02, -1.991e-03, -4.701e-01, -7.468e-01, 5.810e-02, -1.278e-01, 1.760e-03, 1.489e-02) * s[0][1][0];
	r1 += M4(-9.287e-02, -9.463e-02, 5.613e-02, -3.654e-02, 8.382e-02, 1.480e-03, -1.383e-01, -9.525e-02, 2.485e-01, -9.205e-02, -4.326e-01, -2.119e-01, 9.992e-02, 2.773e-02, -1.554e-02, -1.684e-02) * s[0][1][0];
	r0 += M4(1.682e-01, 5.089e-03, 4.267e-02, -1.120e-01, -5.426e-02, 4.119e-02, -4.403e-02, -1.247e-02, 2.311e-01, -1.010e-01, -3.010e-01, -2.126e-01, 1.766e-02, 1.694e-01, -2.469e-02, -1.398e-01) * s[0][1][1];
	r1 += M4(1.870e-01, -3.154e-02, -1.509e-01, -1.374e-01, 5.614e-02, 2.013e-02, -7.204e-02, -9.734e-02, 1.680e-01, 4.972e-03, -2.369e-01, -9.201e-02, 5.199e-03, -4.531e-02, -1.594e-01, -8.432e-02) * s[0][1][1];
	r0 += M4(-1.018e-01, -4.087e-04, 9.167e-03, -4.782e-02, -2.163e-02, -2.838e-02, 7.691e-02, -9.151e-02, 2.389e-01, -2.669e-02, -7.945e-02, -7.413e-02, 6.636e-02, -5.246e-02, 5.809e-02, -1.169e-01) * s[0][2][0];
	r1 += M4(-1.514e-02, -1.295e-02, -3.219e-02, -5.818e-02, 3.927e-02, 1.542e-02, 6.529e-02, 9.396e-02, 5.337e-02, 1.533e-01, -2.397e-01, -1.865e-01, 2.830e-02, -1.598e-01, 9.888e-02, -3.858e-02) * s[0][2][0];
	r0 += M4(-1.248e-02, 1.873e-02, -3.757e-03, -3.507e-02, -4.887e-02, 2.040e-02, 1.284e-01, 4.401e-02, 8.506e-02, -5.129e-02, -1.220e-01, -5.692e-02, 3.002e-02, -6.870e-02, 3.102e-02, -7.599e-02) * s[0][2][1];
	r1 += M4(7.302e-02, 1.600e-03, 1.170e-01, 2.290e-02, -1.110e-01, 4.434e-02, 5.109e-02, 5.573e-02, 2.079e-01, -5.657e-02, -3.217e-02, -1.394e-01, 1.534e-01, -1.224e-01, 4.115e-03, -5.209e-02) * s[0][2][1];
	r0 += M4(-1.144e-02, 7.109e-02, 1.255e-01, 1.482e-01, 4.799e-02, -5.941e-02, -2.067e-01, -4.502e-01, 4.009e-02, -4.888e-02, 2.423e-02, -3.724e-02, -4.005e-02, -2.232e-01, 1.292e-01, 1.103e-01) * s[1][0][0];
	r1 += M4(1.416e-01, -3.119e-02, 8.747e-02, 1.253e-01, 1.934e-01, -2.390e-01, 5.116e-01, 2.899e-02, 1.733e-02, -8.191e-02, 1.604e-02, -1.814e-01, -4.308e-02, 2.258e-02, -1.045e-01, 1.022e-01) * s[1][0][0];
	r0 += M4(2.869e-01, 1.081e-01, 1.137e-01, -4.273e-01, -1.276e-01, -8.213e-02, -1.626e-01, 2.439e-01, 9.541e-03, -6.198e-02, 6.315e-02, 4.579e-02, 1.320e-02, -2.281e-01, 9.589e-02, 3.033e-02) * s[1][0][1];
	r1 += M4(-8.869e-02, -8.935e-02, -1.101e-01, -9.698e-02, -9.612e-02, 7.029e-02, -8.188e-02, -5.137e-02, -9.553e-02, 3.079e-02, -2.764e-01, -2.045e-01, -4.803e-02, -1.364e-01, -6.506e-02, -1.294e-01) * s[1][0][1];
	r0 += M4(5.502e-02, -1.257e-01, -3.189e-02, 1.161e-01, 5.921e-01, 5.816e-01, 2.130e-01, -2.026e-01, -2.673e-01, 1.856e-01, -2.518e-01, 3.876e-01, -1.395e-01, -3.720e-01, -1.407e-01, 4.745e-02) * s[1][1][0];
	r1 += M4(-1.825e-01, -2.111e-01, 2.157e-01, -1.144e-01, 4.301e-01, -5.671e-02, -3.286e-02, 1.073e-01, 5.084e-01, -4.256e-01, 3.830e-01, -1.373e-01, -4.981e-02, -1.153e-01, 1.567e-01, 1.670e-02) * s[1][1][0];
	r0 += M4(1.884e-01, -1.363e-01, 6.078e-02, -1.616e-01, -2.280e-01, 8.509e-02, 5.371e-01, 4.638e-01, 1.984e-01, 2.226e-01, -1.368e-01, -6.967e-02, -1.603e-01, 3.505e-01, -1.792e-01, 2.896e-01) * s[1][1][1];
	r1 += M4(1.450e-01, 5.038e-02, 2.084e-02, -1.197e-01, 4.220e-01, -2.901e-01, -3.057e-01, 2.831e-01, 1.987e-01, -2.015e-01, 1.470e-01, 1.511e-01, -1.747e-01, 4.136e-01, 9.888e-02, 6.967e-02) * s[1][1][1];
	r0 += M4(3.734e-02, -7.438e-03, -1.296e-02, 1.237e-01, 5.353e-01, -9.573e-02, 6.492e-02, -2.940e-02, -3.258e-01, 1.002e-01, -1.213e-01, -1.416e-01, 5.889e-02, -1.115e-01, -6.527e-02, -6.063e-03) * s[1][2][0];
	r1 += M4(-3.388e-02, -6.693e-02, 5.389e-02, 1.307e-01, -2.221e-02, -2.434e-01, 4.493e-02, -9.204e-02, 7.322e-02, -7.336e-02, 1.058e-01, 1.206e-01, 6.558e-02, 1.485e-01, -1.738e-01, -7.244e-02) * s[1][2][0];
	r0 += M4(-2.402e-02, -3.351e-03, 1.135e-01, -9.667e-02, -3.950e-02, -4.691e-02, 1.390e-02, 1.411e-01, 1.111e-01, 6.564e-02, -5.186e-02, -8.029e-02, 6.252e-02, -1.137e-01, 1.010e-02, -8.716e-02) * s[1][2][1];
	r1 += M4(-1.082e-01, 4.751e-02, 3.824e-02, -9.798e-02, -1.120e-01, -1.667e-01, -8.132e-02, -6.582e-03, 2.907e-02, 4.975e-02, 3.778e-02, 1.134e-01, 7.938e-02, 6.073e-02, 3.820e-02, -3.989e-02) * s[1][2][1];
	r0 += M4(-3.018e-02, 4.986e-02, 6.606e-02, 1.050e-01, -1.571e-01, -3.142e-03, -4.911e-02, -1.775e-01, 7.078e-02, -1.909e-02, 4.447e-02, -2.286e-02, -9.685e-02, -6.138e-02, 9.348e-03, -4.478e-02) * s[2][0][0];
	r1 += M4(1.390e-02, 7.308e-02, -1.788e-02, 1.879e-01, 1.312e-03, 9.747e-02, -2.402e-01, 3.684e-01, 2.183e-02, 8.176e-02, 3.148e-02, 4.763e-02, 3.442e-02, 2.529e-01, 5.541e-02, -9.648e-03) * s[2][0][0];
	r0 += M4(1.177e-01, 4.299e-02, 1.285e-02, -5.043e-02, -6.714e-02, -2.253e-02, 3.968e-02, 2.116e-01, -7.690e-02, 2.997e-03, -2.453e-03, -4.091e-02, -1.475e-01, -7.536e-02, 2.610e-02, -1.321e-02) * s[2][0][1];
	r1 += M4(-1.386e-01, -9.028e-02, 8.117e-02, -4.323e-03, -4.600e-02, 7.154e-02, -1.489e-02, 1.711e-01, 8.244e-02, 2.632e-02, 7.881e-03, 1.010e-01, 4.342e-02, 2.350e-01, -6.323e-02, 7.981e-02) * s[2][0][1];
	r0 += M4(-2.911e-01, -3.907e-02, 8.252e-03, 1.414e-01, 9.340e-03, -6.478e-02, -4.892e-02, 1.405e-02, 7.041e-02, 1.352e-02, -4.080e-02, -1.081e-01, -8.520e-02, -8.495e-02, 4.190e-03, 7.206e-02) * s[2][1][0];
	r1 += M4(-1.442e-01, 1.251e-01, -1.959e-01, 2.289e-01, 4.950e-02, 6.571e-01, -1.153e-01, 8.712e-02, -2.000e-02, -4.286e-01, 2.212e-01, 7.904e-02, -9.351e-02, 1.543e-01, 1.062e-01, -1.871e-02) * s[2][1][0];
	r0 += M4(7.499e-02, -1.597e-02, 7.481e-02, -1.886e-01, 1.018e-02, -4.522e-01, -2.743e-01, 1.954e-01, -7.949e-02, 1.852e-03, -3.258e-02, 3.733e-02, -4.125e-02, -1.111e-01, 3.592e-02, 1.186e-03) * s[2][1][1];
	r1 += M4(-1.399e-02, 6.857e-01, -2.139e-01, 5.557e-02, -2.296e-01, -1.409e-01, -3.798e-01, 1.116e-01, -5.387e-02, -9.740e-02, -3.787e-02, 3.849e-02, 1.343e-02, -8.371e-02, 7.878e-02, -1.093e-01) * s[2][1][1];
	r0 += M4(-3.331e-02, 3.727e-02, 5.394e-02, -1.825e-02, 3.904e-01, -4.185e-02, 6.469e-02, 5.384e-02, 1.738e-01, -4.314e-02, -1.238e-01, 3.491e-02, 8.273e-02, -4.845e-02, -4.743e-02, 1.800e-02) * s[2][2][0];
	r1 += M4(-8.909e-03, 1.565e-01, -5.161e-02, -1.542e-01, 1.500e-02, 3.261e-02, -3.967e-02, -5.523e-02, -1.305e-01, -2.965e-01, 2.408e-02, -2.704e-02, -2.245e-02, 1.773e-02, -2.122e-03, -1.873e-02) * s[2][2][0];
	r0 += M4(7.732e-02, 6.379e-02, -3.848e-02, -1.145e-01, -7.667e-02, -2.661e-02, -1.125e-01, 1.221e-01, 9.937e-02, -4.140e-02, 5.850e-02, 1.617e-02, 3.441e-02, -4.179e-02, -6.977e-02, 3.471e-02) * s[2][2][1];
	r1 += M4(5.563e-02, 1.305e-01, 5.691e-02, -1.204e-01, -2.584e-02, 1.772e-02, -1.405e-01, -3.824e-02, -2.745e-02, 1.790e-02, 4.594e-02, -4.944e-03, -6.776e-02, 1.320e-02, -3.387e-02, 2.099e-02) * s[2][2][1];
	s[0][0][0] = max(g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[1][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[1][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[1][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[1][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[1][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[1][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(-1.577e-01, -3.486e-02, 1.121e-01, -5.981e-02, 3.353e-01, 1.362e-01, 2.392e-01, -1.107e-01, 4.292e-02, -2.289e-02, -1.132e-02, -2.094e-01, 8.789e-02, 4.186e-02, 1.217e-01, -7.246e-02) * s[0][0][0];
	r1 += M4(-5.084e-02, -8.209e-03, -1.001e-01, 9.922e-02, -1.867e-01, 6.552e-02, -4.143e-03, 1.583e-01, -1.160e-01, -4.717e-02, -1.607e-01, 1.153e-02, -1.571e-01, -1.606e-01, 6.101e-02, 2.591e-01) * s[0][0][0];
	r0 += M4(-1.234e-01, -2.611e-02, 5.108e-02, -1.340e-01, 1.948e-01, 3.127e-01, -5.632e-01, 2.334e-01, 6.928e-02, -2.143e-02, 2.513e-02, -9.531e-02, 3.969e-02, 5.662e-02, 4.793e-02, -3.983e-01) * s[0][0][1];
	r1 += M4(-1.224e-01, -4.986e-02, -1.125e-01, -5.458e-02, -3.443e-01, 4.948e-03, -8.255e-01, -2.129e-01, -7.973e-02, 1.330e-02, 2.844e-02, 5.385e-02, -8.586e-02, -1.293e-01, 2.576e-03, 1.627e-01) * s[0][0][1];
	r0 += M4(-1.072e-02, -4.528e-03, -2.241e-01, 1.476e-01, -2.848e-02, -6.773e-02, -1.447e-01, -1.072e-02, 5.433e-02, -8.403e-03, 2.017e-01, -5.151e-01, -1.293e-01, 3.431e-02, -2.768e-02, 1.510e-01) * s[0][1][0];
	r1 += M4(1.807e-01, -7.009e-02, 1.932e-02, -2.114e-01, 2.127e-01, 1.689e-01, 1.493e-02, 1.140e-01, -8.423e-02, 4.363e-02, 2.327e-01, 2.182e-01, -1.447e-01, -1.096e-02, -4.261e-01, -7.407e-02) * s[0][1][0];
	r0 += M4(1.896e-01, -3.970e-03, -7.530e-02, 1.585e-01, 1.109e-01, -7.829e-01, -1.217e+00, 1.285e+00, -1.416e-01, -3.949e-02, 3.127e-01, -4.934e-02, 3.238e-01, 2.842e-01, 2.849e-02, -6.777e-01) * s[0][1][1];
	r1 += M4(1.899e-01, -1.164e-02, 1.083e-02, -2.436e-01, -1.155e+00, -2.253e-01, -2.416e-01, 1.800e-01, -1.032e-01, 1.682e-01, 2.075e-01, 3.135e-01, -2.908e-02, 1.063e-01, -1.191e-01, -8.906e-02) * s[0][1][1];
	r0 += M4(-1.656e-01, 1.501e-02, 1.004e-01, 1.999e-01, -6.042e-03, 1.828e-02, 6.956e-02, -3.160e-02, 5.318e-02, 5.530e-02, 8.796e-02, 8.062e-02, -3.525e-01, 3.542e-02, 2.079e-01, 1.563e-01) * s[0][2][0];
	r1 += M4(-1.383e-01, 6.944e-02, 9.307e-02, 4.635e-02, -3.662e-02, 4.871e-02, 1.640e-02, 9.445e-03, -1.031e-01, -1.246e-01, -1.664e-01, 9.441e-02, -1.002e-01, 2.829e-02, -4.979e-02, 9.906e-02) * s[0][2][0];
	r0 += M4(-5.578e-03, 2.956e-02, 6.076e-02, 2.746e-01, -7.547e-01, 8.015e-02, -4.324e-01, 6.648e-01, -3.680e-01, 4.872e-02, 1.286e-01, -3.296e-02, 5.358e-02, 4.050e-02, 3.208e-01, -2.512e-01) * s[0][2][1];
	r1 += M4(1.762e-01, -1.460e-01, 8.084e-03, 1.155e-01, -8.875e-02, -2.988e-01, 4.996e-02, -2.214e-01, 9.187e-03, 3.274e-02, -2.480e-01, 5.124e-02, 2.064e-01, 1.694e-01, 1.938e-02, 1.504e-01) * s[0][2][1];
	r0 += M4(1.149e-01, -7.556e-02, 1.662e-01, -2.096e-01, 2.896e-02, -4.578e-02, 1.352e-01, 5.506e-02, -1.871e-01, -4.410e-02, -8.630e-02, 1.623e-01, -1.549e-01, -1.076e-01, 7.132e-02, 1.500e-01) * s[1][0][0];
	r1 += M4(2.872e-02, -1.744e-03, -1.180e-02, 3.115e-01, -8.793e-02, -6.216e-02, -1.114e-01, 7.880e-02, -3.658e-02, 4.640e-02, 1.447e-01, -3.333e-01, -6.123e-02, 4.204e-02, -5.860e-02, -4.898e-02) * s[1][0][0];
	r0 += M4(7.631e-02, -6.063e-02, -7.292e-02, -4.862e-01, 1.646e-01, 1.266e-01, -1.125e+00, 4.542e-01, -1.338e-01, -1.672e-03, -1.505e-02, 1.219e-01, -1.626e-01, -9.870e-02, -1.289e-02, 2.763e-02) * s[1][0][1];
	r1 += M4(-2.768e-02, -9.976e-02, -2.668e-01, 1.373e-02, 7.469e-02, -8.183e-01, 8.458e-01, -6.764e-01, -2.715e-02, 1.620e-02, 6.195e-03, -5.025e-02, 1.542e-02, 4.406e-02, 1.235e-02, -2.977e-01) * s[1][0][1];
	r0 += M4(-5.047e-02, 6.872e-04, 2.702e-01, 5.212e-02, -3.216e-02, -5.936e-02, -3.608e-02, -4.507e-02, -2.746e-01, 2.814e-01, -2.036e-01, -2.705e-01, 6.274e-02, -2.987e-02, -6.119e-01, -5.916e-02) * s[1][1][0];
	r1 += M4(-1.115e-01, -2.191e-01, -4.057e-02, 3.101e-01, 7.119e-02, -1.060e-01, -1.465e-01, -6.878e-02, 2.549e-01, -2.456e-01, -3.780e-01, 2.352e-01, -1.034e-01, -2.281e-01, 1.655e-01, -3.025e-01) * s[1][1][0];
	r0 += M4(-9.533e-02, 1.906e-02, 6.631e-01, -2.123e-01, -6.299e-01, 2.638e-01, -3.456e+00, 5.584e-01, -1.704e-01, 2.892e-01, 5.055e-01, -8.279e-02, 4.421e-01, -5.506e-02, -1.820e-02, -4.098e-01) * s[1][1][1];
	r1 += M4(-6.074e-01, 4.214e-01, 3.509e-01, 4.581e-01, -1.230e+00, 1.764e+00, -4.717e-01, 1.268e+00, 6.648e-01, -3.199e-01, -1.242e-01, 5.920e-01, -2.822e-01, 3.516e-01, -1.782e-01, 2.717e-02) * s[1][1][1];
	r0 += M4(-8.604e-02, -8.463e-02, 6.032e-02, 2.172e-01, -1.062e-01, -2.947e-02, -1.238e-01, 1.302e-01, 3.357e-01, -3.658e-02, 3.185e-02, -1.521e-01, 6.535e-02, -1.954e-04, 3.128e-01, 2.475e-01) * s[1][2][0];
	r1 += M4(7.391e-02, -1.372e-01, -1.990e-01, -3.999e-02, 5.688e-02, -1.657e-01, 2.867e-02, -3.220e-03, -2.036e-01, 1.795e-01, 1.053e-01, 5.800e-02, 5.893e-02, -2.601e-01, 1.066e-01, -5.755e-02) * s[1][2][0];
	r0 += M4(4.738e-02, -7.136e-02, 9.779e-02, 1.733e-01, -1.280e+00, 4.895e-02, -8.028e-01, -1.965e-01, -4.555e-01, 5.845e-03, 5.084e-02, 1.078e-01, 3.799e-01, -6.892e-02, -1.277e-02, -1.634e-02) * s[1][2][1];
	r1 += M4(4.532e-02, -1.437e-01, -1.983e-01, -5.470e-02, 1.278e+00, 1.347e-01, 1.087e+00, 6.155e-01, -3.873e-01, -4.712e-01, 8.331e-02, -5.345e-02, 3.734e-01, -4.823e-02, -4.507e-01, -2.095e-02) * s[1][2][1];
	r0 += M4(-1.001e-01, -4.474e-02, -1.289e-01, -1.721e-02, 1.245e-01, 5.048e-02, 2.685e-02, 1.395e-01, -4.394e-02, 6.879e-03, -7.259e-02, 3.488e-02, -2.608e-01, 1.914e-02, -1.048e-01, 2.550e-02) * s[2][0][0];
	r1 += M4(-6.679e-03, 1.181e-01, -1.434e-01, -1.934e-01, 1.233e-03, -1.702e-01, 6.254e-02, -2.359e-01, 5.341e-02, 4.582e-02, 8.888e-02, 1.739e-01, -5.118e-02, 1.195e-01, -1.481e-01, -1.206e-01) * s[2][0][0];
	r0 += M4(-1.579e-01, 3.150e-02, -9.718e-02, -5.988e-02, 7.600e-01, 1.020e-01, -4.693e-01, 1.408e-01, 2.716e-02, 3.412e-02, -2.473e-02, 7.188e-02, -1.030e-01, 1.158e-03, -9.253e-02, -6.005e-02) * s[2][0][1];
	r1 += M4(8.155e-03, -1.324e-01, -1.547e-01, -1.981e-01, -1.326e-01, -1.450e+00, 1.611e-01, -8.884e-01, 5.049e-02, 3.703e-02, 3.842e-02, 9.845e-02, -5.898e-02, 8.162e-02, -1.146e-01, -1.276e-01) * s[2][0][1];
	r0 += M4(5.367e-01, 2.205e-01, 1.564e-01, -1.076e-01, 1.787e-01, -9.786e-02, 8.609e-02, -2.021e-02, -2.262e-02, -5.189e-02, 1.212e-02, -8.810e-03, -7.583e-02, 8.966e-02, 3.416e-02, -3.097e-02) * s[2][1][0];
	r1 += M4(-1.330e-01, -2.213e-01, 2.607e-01, -2.303e-01, 1.115e-01, -1.260e-01, 1.491e-01, 1.541e-03, -1.120e-01, 1.271e-01, -4.272e-01, 1.019e-01, 9.686e-02, -3.262e-01, 2.208e-01, 1.477e-01) * s[2][1][0];
	r0 += M4(3.303e-01, 1.572e-01, 1.289e-01, -1.900e-01, -1.292e-01, -4.564e-01, -4.673e-01, 2.627e-02, 1.712e-01, 7.493e-03, 6.361e-02, -6.861e-03, 2.803e-01, 1.287e-01, -4.259e-02, -1.909e-01) * s[2][1][1];
	r1 += M4(2.803e-02, 2.746e-01, -1.008e-01, -3.371e-01, 1.759e-01, 9.238e-01, -3.728e-02, -9.615e-02, -7.399e-02, -1.524e-01, -6.406e-02, 2.844e-01, 1.018e-01, 8.504e-02, 1.237e-01, -8.181e-02) * s[2][1][1];
	r0 += M4(-1.081e-01, 4.362e-02, -3.624e-02, 2.000e-01, -3.377e-01, 1.168e-01, -7.398e-02, 1.195e-02, 2.173e-01, 5.695e-03, 1.224e-02, -1.497e-01, 7.603e-02, -3.537e-02, 1.730e-02, 9.799e-02) * s[2][2][0];
	r1 += M4(3.620e-02, -1.102e-01, -1.090e-01, 1.760e-01, -1.232e-01, 5.903e-02, 8.797e-02, 2.048e-03, -6.740e-02, 4.636e-02, -1.172e-02, -1.272e-01, -3.823e-02, -1.779e-01, -1.223e-01, 2.471e-02) * s[2][2][0];
	r0 += M4(7.702e-02, 4.338e-02, -3.466e-02, -7.657e-02, 6.112e-02, 2.942e-01, -3.794e-01, -2.860e-01, -2.580e-02, 3.980e-02, 8.515e-02, 8.430e-02, 3.124e-01, -4.966e-02, 2.318e-02, -1.904e-02) * s[2][2][1];
	r1 += M4(1.952e-01, -7.457e-02, -1.393e-01, 8.763e-02, -3.168e-01, -1.765e-01, -2.271e-01, -2.038e-01, -1.519e-01, -1.489e-01, 2.607e-01, -1.299e-01, -2.798e-02, -1.523e-02, -4.644e-02, -9.567e-02) * s[2][2][1];
	r0 += V4(-4.285e-02, 4.485e-01, 7.318e-04, -7.328e-03);
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-2.228e-02, 7.825e-02, -2.157e-02, -1.967e-02);
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-6x8C-conv3
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv2
//!BIND LUMA
//!SAVE conv3
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(conv2_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0)) + vec2(0.5)) * conv2_pt))
#define l1(x, y) V4(conv2_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0)) + vec2(0.5)) * conv2_pt))
shared V4 g[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv2_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			g[0][ay][ax] = l0(x - 1, y - 1);
			g[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s[3][3][2];
	V4 r0 = V4(0.0);
	V4 r1 = V4(0.0);
	s[0][0][0] = max(g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[0][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[0][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[0][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[0][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[0][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[0][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(-7.950e-02, -1.672e-01, -1.240e-01, 1.047e-01, 4.154e-02, 6.596e-02, 6.421e-02, 2.451e-02, -1.491e-01, -3.756e-02, -2.609e-01, -4.045e-02, 4.039e-02, 6.541e-02, 5.815e-02, 1.275e-03) * s[0][0][0];
	r1 += M4(-2.366e-02, 2.905e-02, 1.764e-03, 1.242e-01, -3.442e-02, -2.299e-02, 9.732e-02, 1.697e-02, -1.394e-02, -1.007e-01, -2.384e-02, -5.660e-02, 5.455e-02, 8.252e-02, 1.019e-02, 1.264e-01) * s[0][0][0];
	r0 += M4(8.698e-02, -1.200e-01, -3.135e-02, 3.664e-02, -4.272e-01, -4.901e-01, 1.059e-01, 6.455e-01, -4.786e-03, -1.058e-02, -1.064e-02, 1.056e-02, 8.493e-02, 3.418e-02, 7.351e-02, -3.250e-02) * s[0][0][1];
	r1 += M4(6.023e-02, 1.740e-02, 1.220e-02, 2.213e-01, -2.842e-01, 1.711e-01, 5.205e-01, -8.202e-02, 4.547e-03, -1.827e-01, -1.692e-02, 1.554e-02, -1.644e-02, 2.838e-02, 2.893e-02, 8.862e-02) * s[0][0][1];
	r0 += M4(9.475e-02, 9.395e-02, -4.042e-02, 4.862e-02, -2.026e-01, 3.075e-02, 7.176e-02, -5.840e-02, 4.796e-02, -6.527e-02, -1.025e-01, -1.007e-01, 3.427e-02, -2.368e-01, -1.235e-02, -5.217e-04) * s[0][1][0];
	r1 += M4(-6.624e-02, 1.030e-01, -8.469e-02, -1.001e-01, 4.456e-02, 7.987e-02, -8.350e-02, -3.394e-02, 6.293e-02, -1.843e-02, 1.891e-02, 5.217e-02, 4.784e-03, -1.916e-02, -8.615e-02, 2.716e-02) * s[0][1][0];
	r0 += M4(1.795e-01, -3.436e-01, -4.428e-02, 4.703e-02, -1.305e+00, 6.655e-01, 1.117e+00, -1.313e+00, -1.132e-01, -7.113e-02, 1.205e-01, 1.724e-01, -1.888e-01, -1.174e-01, -1.360e-01, 1.561e-02) * s[0][1][1];
	r1 += M4(-1.023e-01, -2.036e-01, -1.203e-01, 2.045e-01, -8.661e-01, 7.614e-01, -1.347e+00, -8.894e-01, -5.541e-03, -1.992e-01, -1.838e-01, 2.143e-01, -8.250e-02, -1.558e-01, -1.505e-01, -4.053e-02) * s[0][1][1];
	r0 += M4(-6.060e-02, 2.003e-02, -3.487e-02, 2.845e-02, -1.590e-02, 1.513e-02, 4.020e-02, -4.357e-02, -6.655e-02, 4.795e-02, -6.236e-02, -6.176e-03, -1.391e-02, 7.497e-02, -3.764e-03, -9.188e-02) * s[0][2][0];
	r1 += M4(-1.697e-02, 6.724e-02, -5.312e-02, 9.326e-04, -6.027e-03, -1.930e-02, 4.604e-02, 1.519e-02, 1.185e-01, 1.117e-01, -4.883e-02, 6.751e-03, 2.426e-03, 9.362e-02, 2.664e-02, -2.863e-03) * s[0][2][0];
	r0 += M4(-2.966e-02, -4.601e-02, 6.837e-02, -1.255e-01, 1.360e-01, -2.383e-01, 8.153e-01, -7.782e-01, -4.205e-02, -5.256e-02, 2.427e-02, 1.085e-01, 1.682e-01, 9.360e-02, 2.797e-02, 5.834e-02) * s[0][2][1];
	r1 += M4(-2.159e-02, 1.136e-01, -1.027e-03, 1.599e-01, -2.953e-01, 3.865e-01, -2.400e-01, -1.760e-01, 3.694e-02, -1.271e-01, 6.338e-03, 4.209e-02, -2.284e-02, -6.285e-02, 9.990e-02, 9.282e-02) * s[0][2][1];
	r0 += M4(-5.450e-03, -4.417e-01, 2.219e-01, 6.682e-02, 1.547e-02, 4.305e-02, 1.993e-02, -4.334e-02, -6.341e-02, -7.136e-02, -3.675e-02, 4.471e-02, -4.979e-02, 4.835e-03, -8.168e-02, 6.162e-02) * s[1][0][0];
	r1 += M4(4.145e-02, 1.644e-01, -1.009e-01, -3.231e-01, -5.993e-02, 4.385e-02, -7.363e-02, -8.990e-02, -2.396e-01, 3.748e-02, -6.874e-02, 2.097e-01, -4.919e-02, -1.257e-01, -4.116e-02, -9.162e-02) * s[1][0][0];
	r0 += M4(-5.403e-03, 9.165e-03, 8.240e-02, 3.494e-02, -1.136e+00, 1.499e+00, -1.162e-01, 5.735e-01, 8.100e-02, -1.162e-02, 6.025e-02, -7.679e-02, -5.173e-03, 6.565e-02, -2.925e-02, -1.222e-01) * s[1][0][1];
	r1 += M4(-1.642e-01, -6.319e-02, 6.389e-03, -1.845e-01, -7.471e-01, -2.240e-01, -1.677e+00, -9.610e-01, -1.274e-01, -1.257e-01, 8.956e-02, 1.671e-01, -2.228e-01, -2.627e-01, 7.832e-02, -1.338e-01) * s[1][0][1];
	r0 += M4(-1.577e-01, -3.787e-01, 3.103e-01, -1.622e-02, 6.726e-02, -1.312e-01, -2.577e-01, 3.511e-02, 4.223e-01, 2.521e-01, -2.037e-03, -8.535e-01, -4.933e-02, 4.210e-01, -1.018e-02, 1.968e-01) * s[1][1][0];
	r1 += M4(1.841e-01, 8.821e-02, -4.268e-01, -3.990e-04, 1.879e-02, 3.769e-03, 8.362e-03, 4.457e-02, 2.970e-02, 6.070e-01, 3.970e-01, 6.552e-01, -2.293e-01, 1.253e-01, -2.512e-02, 1.565e-01) * s[1][1][0];
	r0 += M4(8.478e-02, -1.599e-01, -5.468e-01, 3.213e-01, 4.221e+00, 1.376e+00, -3.251e+00, -2.342e+00, 1.792e-01, 5.307e-01, 2.415e-01, -1.053e-01, 3.667e-02, 2.342e-01, -1.636e-01, 5.432e-02) * s[1][1][1];
	r1 += M4(-6.745e-02, -3.785e-02, -1.445e-01, 2.087e-01, -9.344e-01, 8.638e-01, -3.519e+00, 1.845e+00, 3.542e-02, 2.796e-01, 1.714e-01, 1.077e-01, -4.705e-02, 3.096e-01, 2.680e-01, -1.043e-01) * s[1][1][1];
	r0 += M4(-1.829e-01, -2.196e-02, -1.049e-01, -1.884e-02, 1.363e-01, -2.689e-02, -5.220e-03, 2.753e-02, 2.572e-01, 1.304e-01, 2.705e-01, -5.640e-02, 7.730e-02, -8.917e-02, 3.580e-03, -1.121e-02) * s[1][2][0];
	r1 += M4(2.585e-02, -2.470e-02, -1.199e-01, -4.105e-02, 1.284e-01, 3.938e-02, 1.250e-02, 1.013e-01, -5.068e-02, -2.809e-02, 4.938e-02, 1.397e-01, 4.208e-02, 5.060e-02, -1.771e-02, 1.143e-01) * s[1][2][0];
	r0 += M4(1.243e-01, 1.905e-01, 1.713e-02, -2.197e-02, 1.483e+00, 3.225e-01, 1.471e+00, -3.206e+00, 5.506e-02, -2.056e-02, 2.839e-01, 2.218e-02, 2.706e-01, 7.289e-02, 8.745e-03, 1.382e-01) * s[1][2][1];
	r1 += M4(2.473e-02, -7.388e-02, 4.781e-02, 1.763e-01, -6.346e-02, -5.863e-01, -1.579e+00, 1.056e+00, 4.211e-02, 2.635e-02, -1.801e-02, -2.614e-01, 1.244e-01, -3.016e-01, -6.061e-02, 6.440e-02) * s[1][2][1];
	r0 += M4(-2.173e-01, -1.402e-01, 4.244e-02, -4.164e-02, -5.909e-02, 5.164e-02, -1.746e-02, 7.928e-04, 1.040e-03, 1.738e-02, -1.664e-02, -7.468e-02, 3.294e-02, -7.817e-02, 7.390e-02, -6.133e-03) * s[2][0][0];
	r1 += M4(8.669e-02, 2.815e-01, -2.804e-02, 2.446e-01, 1.074e-01, -1.105e-01, -1.365e-02, 5.118e-02, -8.926e-02, -2.211e-03, 9.943e-03, 2.675e-02, -2.903e-02, 2.253e-01, 6.605e-02, 3.151e-02) * s[2][0][0];
	r0 += M4(1.805e-02, -3.463e-02, 3.112e-02, 3.893e-02, 2.191e-03, 1.539e-01, 9.469e-01, -1.465e-02, -2.053e-02, 5.940e-02, 5.233e-03, -1.059e-02, 1.072e-01, -4.831e-02, -5.022e-02, 5.535e-02) * s[2][0][1];
	r1 += M4(9.546e-03, -9.594e-02, -7.201e-03, 1.606e-01, 7.240e-03, -2.463e-01, -2.964e-01, -1.197e-01, 8.305e-02, -1.436e-02, 3.475e-02, -2.107e-02, -1.727e-01, -2.901e-01, 9.106e-02, 1.308e-01) * s[2][0][1];
	r0 += M4(-3.218e-01, -6.839e-02, 1.187e-01, -1.753e-01, 1.052e-01, 6.419e-02, 2.424e-02, 9.774e-02, 4.542e-02, -2.893e-02, 4.420e-02, 4.145e-02, -1.329e-01, 1.945e-01, 5.379e-01, -1.610e-01) * s[2][1][0];
	r1 += M4(-3.488e-02, 1.014e-01, 1.606e-01, -1.106e-01, -5.877e-02, 1.107e-02, 2.944e-02, 3.173e-02, 2.309e-01, -2.486e-02, -7.820e-02, -9.507e-02, -1.275e-02, 7.683e-02, 5.537e-02, -5.067e-01) * s[2][1][0];
	r0 += M4(-4.303e-02, 9.538e-02, -2.927e-02, -2.554e-02, 1.538e+00, 3.833e-01, 7.962e-01, 8.477e-01, -5.417e-02, -1.230e-01, 1.675e-01, -1.533e-02, 2.880e-01, -1.077e-02, 1.864e-01, -3.892e-02) * s[2][1][1];
	r1 += M4(-2.284e-01, 8.421e-02, 1.507e-01, -4.998e-02, 1.006e-01, 1.012e+00, -1.209e+00, -1.188e+00, -5.427e-02, -9.254e-02, -7.755e-02, -9.660e-02, -1.824e-01, -5.377e-01, 5.727e-02, 1.010e-01) * s[2][1][1];
	r0 += M4(-1.028e-01, -4.551e-02, -9.558e-03, 3.762e-02, -9.446e-02, -1.217e-01, 4.285e-02, -4.015e-02, 3.794e-02, 1.246e-01, -7.474e-02, 7.120e-03, 6.268e-02, -3.359e-01, 1.378e-01, -4.798e-02) * s[2][2][0];
	r1 += M4(2.418e-02, 1.228e-01, 7.455e-02, 1.844e-02, -1.372e-01, -3.319e-02, -2.192e-02, -1.293e-01, 1.284e-01, 1.487e-02, -6.573e-02, -3.425e-02, -3.356e-03, 1.028e-01, 7.488e-02, 6.189e-02) * s[2][2][0];
	r0 += M4(-6.481e-02, -3.073e-02, -9.642e-02, 9.681e-02, 9.085e-03, -1.012e+00, 1.656e-01, 4.292e-02, -5.840e-03, -2.752e-02, -2.952e-02, 8.462e-02, 2.875e-01, 9.821e-02, -1.172e-01, 9.729e-02) * s[2][2][1];
	r1 += M4(6.161e-02, 1.053e-01, 1.233e-02, 2.511e-02, -5.249e-01, 6.255e-02, -6.719e-01, -6.051e-01, 1.396e-01, -1.691e-01, -3.965e-02, 3.700e-02, 2.565e-02, -8.585e-02, 6.481e-02, 2.763e-01) * s[2][2][1];
	s[0][0][0] = max(g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[1][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[1][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[1][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[1][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[1][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[1][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(-1.526e-01, -2.719e-02, -8.767e-02, 9.107e-02, 4.726e-02, -5.639e-02, -1.666e-01, -8.198e-02, 2.654e-03, -5.205e-02, -2.780e-02, -2.015e-02, -2.211e-02, -2.073e-01, 2.678e-02, -1.606e-02) * s[0][0][0];
	r1 += M4(-9.800e-02, -4.285e-02, 8.065e-02, -8.650e-02, 4.667e-02, 2.546e-02, 1.178e-02, 3.693e-03, -2.923e-02, -3.748e-02, 1.561e-02, -1.839e-03, -9.494e-02, 2.219e-02, 2.928e-02, -1.549e-02) * s[0][0][0];
	r0 += M4(2.157e-02, 1.375e-01, 1.671e-02, -6.148e-02, -1.238e-01, -2.780e-01, -1.156e-01, -1.388e-01, -1.343e-01, 4.339e-02, 5.935e-03, 1.305e-01, -3.121e-02, 5.191e-02, 6.376e-02, -3.647e-02) * s[0][0][1];
	r1 += M4(-3.454e-02, 9.798e-02, 1.335e-01, -1.520e-02, -8.690e-02, -6.526e-04, 6.005e-02, -5.033e-02, 1.713e-01, 1.323e-01, -2.590e-01, 3.940e-02, 5.303e-03, 1.376e-01, 2.058e-02, -5.484e-02) * s[0][0][1];
	r0 += M4(8.225e-02, 9.693e-02, 3.552e-02, -3.281e-02, 2.375e-01, 2.310e-02, -2.007e-01, 1.442e-01, -1.460e-01, -3.057e-01, -2.702e-02, -3.952e-02, 2.939e-01, -4.705e-02, -2.615e-01, 2.417e-01) * s[0][1][0];
	r1 += M4(3.827e-02, -1.005e-02, -1.002e-01, -6.881e-02, 1.043e-01, -3.103e-01, 1.079e-01, 2.205e-01, -5.899e-02, -7.083e-02, -8.616e-02, -1.000e-01, 2.002e-01, -1.297e-01, -3.675e-02, 1.890e-01) * s[0][1][0];
	r0 += M4(-1.815e-01, 1.036e-01, -6.456e-02, 5.518e-02, -9.925e-02, 9.120e-02, -2.216e-01, 4.373e-02, -1.538e-02, -3.423e-02, 3.392e-01, 5.164e-02, 1.359e-01, 7.606e-02, -1.128e-01, -1.937e-01) * s[0][1][1];
	r1 += M4(4.657e-03, -1.630e-02, -4.655e-02, -1.174e-01, -1.138e-01, -2.924e-01, -7.546e-02, -3.050e-02, 6.483e-02, 1.288e-01, -2.093e-01, 5.151e-02, 1.013e-01, 3.252e-01, 1.205e-01, -1.684e-01) * s[0][1][1];
	r0 += M4(1.512e-01, 6.616e-02, -9.307e-02, -1.214e-02, 6.935e-02, 4.265e-02, 1.072e-01, -4.945e-02, 1.253e-01, -3.057e-02, -1.647e-02, 6.684e-02, 2.191e-01, 1.456e-02, -1.406e-01, 1.381e-01) * s[0][2][0];
	r1 += M4(3.484e-02, -5.686e-02, 1.264e-01, -2.098e-02, -4.691e-02, 7.565e-02, -1.228e-03, 1.018e-02, 5.174e-03, -1.500e-01, 5.675e-02, -5.441e-02, -1.238e-01, -5.964e-02, 6.105e-03, 1.794e-01) * s[0][2][0];
	r0 += M4(4.055e-02, -9.658e-02, 6.303e-02, -6.693e-03, -4.828e-02, -4.567e-02, 9.046e-02, -3.673e-02, -5.905e-02, -1.898e-01, 2.288e-01, 9.844e-03, -3.144e-02, 9.470e-02, 1.929e-01, -2.065e-01) * s[0][2][1];
	r1 += M4(4.710e-02, -2.088e-02, -1.291e-02, 2.946e-03, -2.782e-02, 7.297e-02, 3.062e-02, -3.327e-02, 1.905e-02, -4.580e-02, -2.494e-01, -1.061e-02, -4.679e-02, 1.657e-01, -2.586e-01, -1.810e-01) * s[0][2][1];
	r0 += M4(-3.143e-01, 1.352e-02, -2.863e-01, 3.739e-01, 1.628e-02, 3.875e-02, 6.911e-02, -5.736e-02, 7.464e-02, 1.343e-03, -7.629e-02, 5.132e-02, 8.544e-03, -1.204e-02, -4.464e-02, 2.090e-02) * s[1][0][0];
	r1 += M4(-4.443e-01, -1.903e-01, -2.193e-01, -3.724e-01, -6.793e-02, -3.341e-02, 7.451e-02, -7.745e-02, 1.216e-01, 7.200e-02, -4.308e-02, 1.503e-01, -1.407e-01, -1.018e-03, 7.856e-02, -9.551e-02) * s[1][0][0];
	r0 += M4(-2.126e-01, 1.468e-02, 1.480e-01, 3.621e-02, 4.217e-02, 9.096e-02, -1.802e-01, 1.050e-01, 1.209e-01, 2.519e-04, 1.531e-01, -1.339e-02, -9.726e-02, 4.363e-02, -6.526e-03, -1.735e-02) * s[1][0][1];
	r1 += M4(-1.971e-01, -1.159e-01, 7.745e-02, 2.582e-03, -1.511e-01, -3.080e-01, 8.736e-02, 3.780e-02, 2.045e-01, -1.548e-01, -3.726e-02, 3.838e-01, 8.179e-02, 2.314e-02, -1.474e-02, -9.739e-02) * s[1][0][1];
	r0 += M4(1.486e-01, -9.134e-02, -1.782e-01, -6.113e-01, 1.336e-02, -1.318e-01, -9.694e-02, 4.679e-01, -9.043e-02, -1.368e-02, 1.801e-01, 3.162e-02, 1.859e-01, -2.973e-01, -2.265e-01, 3.506e-01) * s[1][1][0];
	r1 += M4(-4.872e-02, 2.573e-01, 5.644e-02, 2.083e-01, -2.755e-01, -2.702e-01, -8.530e-02, -1.128e-01, -2.759e-01, -3.907e-01, 9.804e-02, 2.207e-01, 6.108e-01, -1.288e-01, -2.648e-01, 4.386e-02) * s[1][1][0];
	r0 += M4(6.191e-02, -1.748e-01, -2.326e-01, -7.699e-02, 7.205e-01, 1.894e-01, -1.040e-01, 4.467e-01, -6.362e-03, 2.091e-02, 3.888e-01, -6.869e-02, -1.930e-01, -2.274e-01, -1.398e-01, -6.960e-02) * s[1][1][1];
	r1 += M4(1.364e-01, -3.355e-03, 4.155e-01, -9.024e-02, -2.247e-01, -3.834e-01, 9.268e-02, 1.859e-01, -5.179e-02, -1.286e-01, 1.773e-02, 3.939e-01, 2.571e-01, -3.472e-02, 1.910e-01, -2.183e-01) * s[1][1][1];
	r0 += M4(2.277e-01, 1.218e-01, -1.016e-02, -6.073e-02, -5.756e-03, 1.704e-01, 9.577e-02, 1.074e-01, 1.254e-01, -1.843e-01, 2.473e-02, -5.203e-02, 2.529e-01, 3.483e-01, 2.362e-01, -9.237e-02) * s[1][2][0];
	r1 += M4(-8.222e-02, -1.426e-02, 8.571e-02, 5.581e-02, 4.271e-03, 2.668e-02, -2.661e-01, 5.896e-02, -4.353e-02, -1.519e-01, 1.874e-01, 1.978e-01, 8.228e-02, -1.077e-01, 6.050e-02, -7.208e-02) * s[1][2][0];
	r0 += M4(1.788e-01, -1.910e-01, 2.806e-01, -1.354e-01, -1.138e-01, 6.038e-02, 3.352e-02, -4.413e-02, 1.908e-01, -1.715e-01, 1.253e-01, -2.267e-01, -1.498e-01, -2.769e-01, 5.662e-02, -1.373e-01) * s[1][2][1];
	r1 += M4(-6.855e-02, -1.398e-01, 3.272e-02, 9.218e-02, 6.097e-02, -3.816e-02, -1.333e-01, -1.993e-02, -6.916e-03, 5.227e-02, 9.730e-02, 1.154e-01, -2.247e-02, -6.460e-02, -1.381e-01, -3.287e-01) * s[1][2][1];
	r0 += M4(1.118e-01, 1.976e-02, 4.017e-02, -2.433e-02, -4.690e-02, 7.264e-02, 1.174e-01, -9.155e-02, -6.408e-02, 3.206e-02, 2.677e-03, -1.783e-02, 1.416e-01, 8.180e-04, -3.289e-02, 8.718e-03) * s[2][0][0];
	r1 += M4(-2.673e-01, 1.146e-01, 4.043e-03, -1.597e-01, -6.836e-04, 1.028e-01, 1.962e-03, -1.354e-01, -3.577e-02, -6.640e-02, -1.728e-02, -1.323e-01, -2.537e-02, -9.370e-02, 1.287e-02, -3.039e-02) * s[2][0][0];
	r0 += M4(2.613e-02, 4.359e-02, 1.057e-01, -5.042e-02, -4.528e-02, -2.242e-02, -1.071e-01, -8.733e-02, -5.805e-03, 1.913e-01, 1.919e-01, -6.023e-02, 7.544e-02, 5.686e-03, -3.257e-02, -1.958e-02) * s[2][0][1];
	r1 += M4(-5.651e-02, 3.115e-01, 3.340e-02, 1.209e-02, -1.490e-01, 7.493e-02, 6.577e-02, -2.238e-01, 7.224e-02, -2.449e-01, -2.528e-02, 9.729e-02, 6.138e-02, -6.725e-02, -1.155e-01, -5.118e-02) * s[2][0][1];
	r0 += M4(2.861e-01, 1.664e-01, 2.599e-02, 3.300e-02, -9.534e-02, 2.733e-02, -1.003e-01, 1.036e-02, 4.905e-03, 3.548e-02, -1.222e-01, -1.003e-02, -1.614e-01, 6.599e-02, -1.184e-01, 5.773e-02) * s[2][1][0];
	r1 += M4(1.012e-01, -2.585e-02, -3.249e-01, -3.107e-01, 1.456e-01, 1.322e-01, 6.696e-03, -3.099e-02, 1.551e-01, -1.101e-01, -1.028e-01, 2.903e-02, 1.602e-01, -1.243e-01, -1.545e-01, 1.384e-02) * s[2][1][0];
	r0 += M4(1.982e-01, -4.294e-02, 3.148e-01, -1.101e-01, -2.239e-01, -7.360e-03, -3.523e-01, -5.495e-03, 2.006e-02, -7.057e-02, 7.990e-02, -7.132e-02, -1.480e-01, 1.219e-01, -5.978e-02, -2.758e-02) * s[2][1][1];
	r1 += M4(9.661e-02, 1.815e-01, -2.221e-01, -3.460e-01, -9.988e-02, 1.302e-01, 2.653e-02, -2.628e-02, 3.721e-01, 1.464e-01, -8.986e-02, 1.346e-01, 7.004e-02, -1.299e-01, -5.796e-02, -8.330e-02) * s[2][1][1];
	r0 += M4(3.263e-02, -9.777e-02, -1.212e-01, -1.188e-02, 9.573e-02, 9.519e-02, 1.715e-02, -2.507e-02, 1.499e-01, 6.280e-02, -4.158e-02, -1.287e-02, 1.237e-01, -2.036e-01, 5.219e-02, -5.451e-02) * s[2][2][0];
	r1 += M4(6.416e-02, 2.599e-02, -9.592e-02, -3.839e-02, 3.268e-02, 3.511e-02, 4.346e-03, 9.121e-02, 6.999e-02, 6.823e-02, 2.472e-02, 1.899e-01, 5.025e-02, 4.603e-02, -9.032e-02, 1.588e-01) * s[2][2][0];
	r0 += M4(6.975e-02, -9.026e-02, -1.970e-02, -1.055e-02, 1.187e-02, 2.073e-02, -1.231e-02, 1.348e-02, 1.806e-01, -1.373e-01, -4.211e-02, -4.849e-02, 1.047e-01, -2.396e-02, -8.553e-02, 2.044e-02) * s[2][2][1];
	r1 += M4(7.174e-02, 1.029e-01, -4.245e-02, -1.073e-02, 3.323e-02, 2.241e-02, 6.078e-02, -6.737e-03, 6.200e-02, 1.698e-01, 3.677e-02, 1.238e-01, -2.118e-02, 6.161e-02, -4.376e-02, 5.734e-02) * s[2][2][1];
	r0 += V4(-1.524e-02, -5.330e-04, 3.381e-02, 2.032e-02);
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(8.485e-03, 1.868e-02, -6.149e-03, -1.784e-02);
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-6x8C-conv4
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv3
//!BIND LUMA
//!SAVE conv4
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(conv3_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0)) + vec2(0.5)) * conv3_pt))
#define l1(x, y) V4(conv3_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0)) + vec2(0.5)) * conv3_pt))
shared V4 g[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv3_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			g[0][ay][ax] = l0(x - 1, y - 1);
			g[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s[3][3][2];
	V4 r0 = V4(0.0);
	V4 r1 = V4(0.0);
	s[0][0][0] = max(g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[0][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[0][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[0][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[0][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[0][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[0][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(-1.115e-01, 1.975e-01, 3.558e-02, -2.726e-02, 1.613e-01, 2.200e-03, -5.063e-02, 1.058e-02, 4.889e-03, -1.655e-01, 2.442e-02, 3.191e-02, -5.629e-02, -7.564e-02, -2.043e-02, -4.234e-02) * s[0][0][0];
	r1 += M4(1.875e-01, -5.788e-02, -2.815e-01, 1.301e-02, 1.244e-01, 7.401e-02, 1.148e-01, 1.646e-01, -1.240e-01, -5.065e-03, -2.381e-02, 3.238e-02, -6.567e-02, 4.290e-02, -1.253e-02, 1.121e-02) * s[0][0][0];
	r0 += M4(-1.218e-01, 8.026e-03, 4.257e-02, -1.072e-01, 6.706e-02, -2.840e-02, 3.855e-02, -2.740e-03, 1.392e-01, 4.647e-02, -4.944e-02, -1.152e-01, -1.004e-01, -4.101e-02, 2.715e-02, -1.053e-02) * s[0][0][1];
	r1 += M4(-4.457e-02, 3.787e-02, -7.267e-02, -2.380e-02, -2.151e-02, 2.086e-02, -2.061e-03, 4.121e-02, 1.076e-02, 1.489e-01, -4.600e-02, -2.812e-02, 6.859e-03, -3.571e-02, -4.294e-02, 1.493e-02) * s[0][0][1];
	r0 += M4(-4.000e-02, 2.786e-01, 9.917e-02, -1.046e-02, 2.156e-01, 3.026e-03, -3.121e-02, 1.478e-01, 4.552e-02, -7.936e-03, -3.045e-03, -4.091e-02, -1.659e-01, 1.065e-02, -3.291e-02, -2.488e-01) * s[0][1][0];
	r1 += M4(-3.423e-02, 7.163e-02, -9.047e-02, 5.003e-02, 1.382e-01, -2.288e-02, 1.639e-02, -3.208e-02, -6.621e-02, 7.099e-02, 7.224e-02, 2.874e-02, 9.424e-02, 4.054e-03, 1.140e-01, -4.187e-02) * s[0][1][0];
	r0 += M4(-1.711e-01, -1.266e-02, 5.517e-02, -2.273e-01, 7.145e-02, 3.088e-02, -1.848e-02, 1.019e-01, 1.395e-02, 1.528e-01, 6.750e-02, 3.370e-03, 6.470e-02, 1.525e-01, 1.621e-01, 8.563e-02) * s[0][1][1];
	r1 += M4(-1.018e-02, -3.919e-02, 8.240e-03, -8.505e-02, -3.554e-02, 1.315e-02, -4.138e-02, -6.124e-02, 5.219e-02, 6.925e-02, -1.465e-01, -1.000e-01, -4.965e-03, 1.253e-01, 2.081e-02, 7.632e-02) * s[0][1][1];
	r0 += M4(-7.714e-02, -1.400e-02, -4.378e-02, 1.547e-01, 3.087e-02, 1.597e-01, 2.464e-02, 2.986e-03, -9.188e-02, 2.909e-02, 2.554e-02, 1.165e-01, 6.263e-02, -2.839e-02, 1.295e-03, -6.788e-03) * s[0][2][0];
	r1 += M4(-7.583e-02, -9.279e-02, -8.478e-02, 8.794e-03, 5.929e-02, 2.196e-02, 8.647e-03, 1.521e-02, 3.844e-02, 7.835e-03, 5.987e-02, 2.801e-02, 3.981e-03, 9.781e-02, -1.973e-03, -1.733e-02) * s[0][2][0];
	r0 += M4(-2.788e-02, -3.140e-02, -1.476e-02, 2.970e-02, 2.633e-02, -7.543e-03, -4.886e-02, -9.889e-02, -5.973e-02, 1.073e-01, -1.041e-02, 8.852e-03, -9.185e-02, -3.540e-02, 2.267e-02, -6.101e-03) * s[0][2][1];
	r1 += M4(-4.021e-02, -1.005e-01, -9.156e-02, -2.130e-02, -1.306e-02, 6.241e-02, 5.651e-04, 6.417e-02, -7.870e-02, 7.301e-02, -6.890e-02, -1.016e-01, -2.151e-02, -6.465e-02, -6.660e-02, -8.768e-02) * s[0][2][1];
	r0 += M4(3.235e-01, -4.593e-02, -1.490e-01, -3.519e-02, 3.265e-01, -1.134e-01, 1.880e-02, 1.472e-01, -7.050e-02, 4.001e-02, -4.557e-03, 6.061e-02, 6.682e-02, 1.170e-01, -2.209e-01, -6.143e-02) * s[1][0][0];
	r1 += M4(4.932e-02, 2.384e-01, -4.526e-01, 3.597e-02, 3.610e-02, 1.331e-01, 1.627e-02, 9.352e-02, 2.771e-01, -2.040e-01, 1.284e-01, 1.431e-02, -9.636e-03, -1.622e-01, -1.801e-01, -1.423e-01) * s[1][0][0];
	r0 += M4(7.508e-03, -1.550e-01, 1.210e-02, -8.230e-02, 5.363e-02, 1.199e-02, 8.794e-02, 9.570e-02, 9.874e-03, -1.042e-01, -2.065e-01, 6.274e-02, 1.632e-01, 1.707e-01, 4.557e-02, 7.399e-03) * s[1][0][1];
	r1 += M4(9.302e-02, 1.679e-01, -1.385e-01, 5.410e-02, -1.223e-01, 8.897e-03, 1.751e-03, 5.115e-02, 1.599e-02, -1.965e-01, -3.001e-01, -5.799e-02, 9.283e-02, -2.378e-01, 1.464e-01, -5.758e-02) * s[1][0][1];
	r0 += M4(1.337e-01, 4.448e-01, -1.447e-01, -3.516e-01, 2.093e-01, -7.029e-02, 3.719e-01, 4.502e-01, 4.803e-01, -1.607e-01, 1.320e-01, -6.907e-02, 1.822e-01, 1.489e-01, -9.353e-02, -4.645e-01) * s[1][1][0];
	r1 += M4(3.746e-01, 3.969e-01, 1.200e-02, -4.601e-01, -1.238e-01, 1.634e-01, -1.934e-01, 1.373e-01, 5.052e-03, -9.431e-03, -1.485e-01, 2.178e-01, 9.461e-02, -1.545e-01, -1.117e-01, 1.944e-01) * s[1][1][0];
	r0 += M4(-3.809e-02, 1.580e-01, -1.323e-02, 8.374e-02, -3.353e-01, 3.714e-03, -2.405e-02, -2.482e-03, 6.626e-01, 2.590e-01, 5.064e-01, 2.581e-01, 2.687e-01, 1.216e-02, 3.009e-01, -6.817e-01) * s[1][1][1];
	r1 += M4(5.298e-01, 3.467e-01, -5.238e-02, -1.435e-01, 1.194e-01, -2.316e-01, -1.013e-01, -1.071e-03, -1.045e-01, 2.636e-01, -1.221e-01, 3.701e-01, 2.960e-01, -1.976e-01, -2.319e-02, 3.887e-01) * s[1][1][1];
	r0 += M4(-3.450e-02, 1.652e-02, -9.294e-02, -1.261e-01, 1.158e-01, 1.752e-01, 9.987e-02, 2.936e-01, -1.422e-01, 1.063e-01, 6.126e-02, 4.451e-02, -4.616e-02, -9.705e-03, 2.551e-02, 2.801e-02) * s[1][2][0];
	r1 += M4(1.445e-01, -6.160e-02, -8.661e-02, -7.729e-02, -6.600e-02, 2.426e-01, -6.758e-03, -1.152e-02, -4.588e-03, -1.415e-01, 6.690e-02, -1.934e-01, -1.407e-01, -1.101e-01, -1.082e-01, -1.968e-01) * s[1][2][0];
	r0 += M4(1.238e-01, 1.653e-01, 1.366e-01, 1.067e-01, -3.484e-04, 1.134e-02, -1.259e-01, 2.828e-02, -9.344e-02, -3.362e-02, -4.267e-02, -1.567e-01, -8.007e-03, -2.566e-03, 1.350e-01, 1.120e-01) * s[1][2][1];
	r1 += M4(3.966e-02, 9.272e-02, -2.256e-04, 4.723e-02, 1.460e-01, 8.520e-02, 2.076e-02, -2.689e-02, -2.042e-01, -1.145e-01, -4.718e-02, -3.575e-01, -2.333e-01, -2.343e-01, -1.300e-01, -2.666e-01) * s[1][2][1];
	r0 += M4(6.320e-02, -9.815e-02, 1.004e-01, 6.473e-02, 3.195e-02, 6.384e-02, 7.319e-02, 4.176e-03, -6.015e-02, -1.038e-01, -3.911e-02, 6.853e-03, 5.164e-02, -9.728e-02, 1.151e-01, -6.036e-02) * s[2][0][0];
	r1 += M4(-1.029e-01, 2.070e-01, -3.780e-01, 3.615e-02, 7.710e-03, 9.019e-02, 9.085e-02, 7.772e-02, 1.143e-01, 1.496e-01, -1.540e-02, 2.634e-02, -4.462e-02, 1.890e-01, -1.597e-01, 8.476e-03) * s[2][0][0];
	r0 += M4(2.801e-02, -6.443e-02, 1.262e-01, 6.721e-02, -6.323e-02, 1.196e-01, -4.429e-02, 4.669e-02, -3.655e-02, -9.010e-02, -2.296e-02, -5.441e-02, -7.185e-02, -1.072e-01, 1.569e-01, 9.906e-02) * s[2][0][1];
	r1 += M4(-1.176e-01, 4.722e-02, 1.951e-02, 7.532e-02, 3.769e-02, -5.831e-02, -1.069e-02, 3.121e-02, -7.397e-02, 1.978e-02, 7.435e-02, 7.076e-02, 4.307e-02, 3.553e-02, -1.027e-01, 1.129e-01) * s[2][0][1];
	r0 += M4(-4.560e-02, 1.114e-01, 1.108e-01, 9.476e-02, 1.528e-01, 5.125e-03, 2.221e-01, 2.958e-02, -2.435e-01, -1.904e-01, 4.507e-01, 1.399e-01, 6.743e-02, -1.169e-01, 2.597e-01, 1.077e-02) * s[2][1][0];
	r1 += M4(-3.211e-02, -3.009e-02, -1.595e-01, -8.602e-02, -6.901e-02, 1.961e-01, 1.663e-01, -1.763e-02, -2.232e-01, 6.555e-02, 6.284e-03, 1.751e-01, -1.877e-01, 2.946e-02, -1.236e-01, -1.597e-01) * s[2][1][0];
	r0 += M4(4.335e-02, -9.511e-02, 1.081e-01, 5.893e-02, -6.810e-02, -7.262e-02, 1.492e-01, -7.053e-02, -6.099e-02, -7.239e-02, 4.198e-01, -1.898e-02, 5.788e-02, -1.728e-01, 7.229e-01, 2.771e-01) * s[2][1][1];
	r1 += M4(-2.471e-01, -9.718e-03, -1.161e-01, -2.576e-02, 2.097e-01, 1.157e-01, 1.571e-01, 8.640e-02, -2.456e-01, 1.343e-01, 6.273e-02, -9.899e-02, -3.607e-01, -2.883e-02, 2.657e-02, 8.866e-02) * s[2][1][1];
	r0 += M4(-5.924e-02, 1.113e-01, -4.028e-02, 1.256e-01, -4.160e-03, 6.959e-02, 2.184e-02, 1.224e-02, -4.712e-02, -5.408e-02, -3.948e-02, -2.794e-02, -5.109e-03, 6.030e-02, -2.664e-02, 3.906e-02) * s[2][2][0];
	r1 += M4(-1.630e-02, -1.637e-02, -1.115e-01, -1.825e-02, 1.091e-02, 3.012e-02, 1.024e-01, 3.197e-03, -2.023e-03, -1.179e-02, 2.017e-02, -2.911e-02, -8.627e-02, 5.428e-03, -1.122e-01, -6.485e-02) * s[2][2][0];
	r0 += M4(-7.986e-02, -3.340e-02, 6.110e-02, -6.157e-03, 3.144e-02, 1.196e-01, 6.442e-02, 8.715e-02, 4.670e-02, -5.690e-02, -1.321e-01, -9.471e-02, -1.218e-01, -1.768e-01, 1.782e-01, 1.177e-01) * s[2][2][1];
	r1 += M4(-1.091e-01, -2.917e-02, 6.102e-02, -3.361e-02, 1.657e-02, 1.130e-01, 7.955e-02, 5.097e-02, 5.753e-02, -1.653e-02, -6.018e-02, -1.957e-01, -3.252e-01, -1.392e-01, -2.371e-01, -7.438e-02) * s[2][2][1];
	s[0][0][0] = max(g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[1][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[1][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[1][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[1][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[1][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[1][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(1.119e-01, -4.851e-02, -1.777e-02, 2.737e-02, -4.026e-03, 2.646e-02, -4.400e-03, 9.216e-02, 1.411e-01, 8.046e-02, 2.475e-02, -8.480e-02, 2.137e-02, 3.253e-02, -2.374e-02, 9.835e-02) * s[0][0][0];
	r1 += M4(-5.164e-02, 9.351e-02, -3.307e-02, 7.018e-03, 5.311e-02, -2.716e-02, -8.626e-02, 3.371e-02, 1.271e-01, 3.958e-02, 1.368e-01, -9.140e-02, -1.167e-01, -3.612e-03, -2.038e-02, -7.732e-02) * s[0][0][0];
	r0 += M4(-3.990e-02, -1.043e-01, -1.853e-02, 3.135e-02, -1.665e-01, -7.254e-02, -4.827e-02, -8.460e-03, 8.325e-02, 6.812e-02, -8.810e-02, -1.473e-02, -1.667e-02, 2.802e-01, -5.261e-02, 1.667e-01) * s[0][0][1];
	r1 += M4(-7.551e-02, -1.950e-02, -5.633e-02, -4.174e-02, -7.207e-02, -1.585e-01, 4.211e-02, -1.385e-01, 8.304e-02, 3.588e-02, 4.173e-02, 6.612e-02, 8.150e-02, -2.206e-01, -2.251e-02, 1.401e-01) * s[0][0][1];
	r0 += M4(2.302e-01, 2.277e-02, -1.135e-01, 2.710e-01, 7.083e-02, 7.046e-02, 1.901e-02, 1.115e-01, -3.090e-02, -6.155e-02, 9.733e-03, 5.541e-02, -3.614e-02, -1.139e-01, 4.636e-02, -3.093e-01) * s[0][1][0];
	r1 += M4(1.408e-02, 6.471e-02, 1.377e-01, -1.294e-01, -8.365e-03, -4.786e-02, 8.809e-02, 1.823e-01, 1.005e-01, -2.316e-01, -2.324e-01, -2.448e-02, 4.145e-02, 1.193e-01, 7.309e-02, -3.041e-02) * s[0][1][0];
	r0 += M4(6.671e-02, -3.469e-01, -7.982e-02, 1.122e-01, -2.904e-01, -5.745e-02, -4.446e-03, -3.293e-01, 9.685e-02, 1.253e-01, -1.006e-02, 1.840e-01, 7.891e-02, 6.020e-02, -7.163e-02, 2.405e-01) * s[0][1][1];
	r1 += M4(-4.729e-02, -3.566e-01, 3.574e-02, -1.566e-01, 1.014e-01, 8.186e-04, 5.639e-02, 6.226e-02, 1.237e-01, -1.022e-01, -1.341e-02, -1.796e-02, -1.012e-01, -8.948e-03, -3.247e-03, 3.352e-01) * s[0][1][1];
	r0 += M4(1.348e-01, -4.587e-02, -8.177e-02, 7.052e-02, 5.712e-02, 1.820e-02, 3.717e-02, 1.002e-01, 6.794e-03, -9.545e-02, -1.428e-01, -4.608e-02, -3.210e-02, -6.529e-02, 1.226e-02, -1.294e-01) * s[0][2][0];
	r1 += M4(-5.918e-02, 9.836e-02, 9.352e-02, 2.260e-01, -5.953e-02, 4.510e-03, -4.887e-02, -8.569e-02, -6.954e-02, -6.761e-02, 1.543e-02, 1.590e-01, 4.676e-02, 8.286e-02, 1.054e-01, 3.312e-03) * s[0][2][0];
	r0 += M4(-2.099e-02, -3.470e-01, -1.558e-01, -1.797e-01, 7.891e-02, 2.218e-02, 1.301e-01, 1.934e-02, 8.379e-02, 1.166e-01, 1.713e-02, 1.530e-01, 1.763e-01, 1.157e-01, 1.371e-02, -1.997e-02) * s[0][2][1];
	r1 += M4(1.153e-01, -2.681e-01, 8.492e-02, -1.568e-03, 4.618e-02, 1.195e-01, 4.839e-03, -2.681e-02, -5.774e-02, 1.431e-01, -1.461e-02, 3.318e-02, 1.565e-01, 1.033e-01, 5.737e-02, -2.003e-03) * s[0][2][1];
	r0 += M4(-8.833e-02, 9.757e-02, 6.174e-02, -6.165e-02, 1.100e-01, 1.233e-02, 5.165e-02, -3.518e-03, 2.388e-01, 2.974e-01, 2.232e-01, -1.877e-01, 5.756e-02, 4.212e-02, -1.231e-01, -3.553e-03) * s[1][0][0];
	r1 += M4(4.845e-02, -1.485e-01, 1.012e-01, 2.341e-02, -8.419e-02, 1.337e-01, 9.098e-02, 9.446e-02, -2.510e-02, 3.127e-02, 4.204e-02, -2.247e-01, -1.326e-01, 3.506e-02, -2.573e-01, -8.761e-02) * s[1][0][0];
	r0 += M4(-7.246e-02, 2.256e-02, -1.128e-01, -1.782e-01, -5.205e-02, 2.743e-02, -6.843e-02, -9.587e-02, 2.898e-02, 3.278e-02, 4.674e-02, 1.209e-02, 1.153e-01, -5.553e-02, -5.839e-02, -3.855e-02) * s[1][0][1];
	r1 += M4(1.166e-01, -5.193e-02, 8.616e-02, -1.015e-02, -8.983e-02, -9.627e-02, -2.287e-02, 5.554e-02, -6.928e-02, -2.826e-02, 1.513e-02, 1.042e-01, -1.258e-01, 1.642e-01, -1.179e-01, -2.997e-02) * s[1][0][1];
	r0 += M4(-7.427e-02, 3.294e-01, -1.707e-01, 6.084e-02, 8.722e-02, 5.261e-02, 1.514e-01, 8.075e-02, 3.755e-01, 2.132e-01, 4.081e-01, -4.493e-02, -3.272e-01, 8.129e-02, -3.146e-01, 2.842e-01) * s[1][1][0];
	r1 += M4(-3.234e-02, -5.057e-01, 1.024e-01, -7.791e-02, -7.415e-02, 2.380e-01, 1.136e-01, -1.246e-01, -1.821e-01, -1.096e-01, -2.569e-01, -1.303e-01, -2.203e-01, -9.537e-02, 1.322e-01, -3.748e-01) * s[1][1][0];
	r0 += M4(4.493e-03, -3.060e-01, 2.546e-01, -1.500e-01, 1.712e-02, -1.763e-02, -3.885e-01, -6.607e-02, 3.440e-01, 4.062e-03, 2.456e-01, 2.377e-01, -6.527e-01, 1.795e-01, -2.349e-01, -2.022e-01) * s[1][1][1];
	r1 += M4(-5.227e-02, -2.591e-02, -5.423e-02, -5.730e-02, -1.982e-01, -1.123e-01, 3.319e-01, -5.845e-02, -4.329e-01, -2.532e-02, 9.174e-02, 1.459e-02, 4.301e-01, -1.898e-01, 2.145e-01, 4.930e-02) * s[1][1][1];
	r0 += M4(1.285e-01, 1.696e-01, -9.449e-02, 4.970e-02, -4.087e-02, 7.300e-02, 9.918e-02, 1.963e-01, 2.606e-03, 2.068e-01, -8.978e-02, -1.242e-01, -1.259e-01, -1.947e-01, -7.660e-02, -6.437e-02) * s[1][2][0];
	r1 += M4(-5.029e-02, -4.612e-04, -2.920e-01, 3.052e-01, -1.790e-01, -1.118e-01, -6.482e-02, -1.066e-01, 2.242e-01, -8.440e-02, -5.461e-02, -2.509e-01, -6.507e-02, -2.251e-01, -3.232e-02, 1.401e-01) * s[1][2][0];
	r0 += M4(-1.754e-01, -2.723e-01, -2.967e-02, -4.806e-03, -5.675e-02, -2.525e-01, 6.641e-02, 1.516e-01, -1.785e-02, 2.285e-01, -8.618e-02, 2.047e-01, 7.226e-02, 6.361e-02, -3.874e-02, 1.976e-02) * s[1][2][1];
	r1 += M4(2.088e-01, -2.411e-01, -7.944e-02, 2.047e-01, 2.153e-04, -2.255e-01, 1.664e-01, 2.239e-02, -4.300e-02, 1.068e-01, -4.458e-02, -1.096e-01, 1.607e-01, 7.486e-02, -2.171e-01, 2.105e-01) * s[1][2][1];
	r0 += M4(1.048e-01, 4.066e-02, -2.264e-02, 4.863e-02, -3.820e-02, -2.017e-02, 3.353e-02, 4.638e-02, 1.057e-01, 1.061e-01, 1.652e-01, -1.366e-02, -1.255e-01, -1.163e-01, 2.614e-02, -5.108e-03) * s[2][0][0];
	r1 += M4(-7.698e-02, -4.745e-02, 1.634e-02, 1.976e-02, -7.084e-02, -6.034e-02, -1.313e-02, -1.226e-03, -1.068e-01, -4.457e-02, -1.280e-01, -9.941e-02, -7.687e-02, -4.321e-02, -1.387e-02, 1.167e-01) * s[2][0][0];
	r0 += M4(6.186e-02, -9.300e-02, 1.494e-01, -7.480e-02, -1.448e-01, -2.038e-01, 3.255e-02, 1.275e-02, 1.270e-01, 3.220e-02, 2.687e-02, 1.261e-02, -1.098e-01, 3.228e-03, -6.137e-04, 1.145e-02) * s[2][0][1];
	r1 += M4(-6.030e-02, 6.645e-02, -2.850e-02, 1.903e-02, -5.995e-02, -2.586e-02, -5.158e-02, 4.665e-02, -1.906e-01, -7.770e-02, 1.213e-01, 2.777e-02, 8.522e-02, -8.053e-02, -4.409e-02, 2.267e-03) * s[2][0][1];
	r0 += M4(5.341e-02, -1.334e-02, 3.136e-02, 5.877e-02, -6.219e-02, -7.716e-02, 6.470e-02, 7.127e-02, -2.331e-01, -4.288e-02, 6.554e-02, 1.274e-01, 1.080e-01, 3.696e-02, -2.081e-02, -8.873e-02) * s[2][1][0];
	r1 += M4(-1.528e-01, -1.036e-01, -4.510e-02, 2.592e-03, -1.828e-01, -3.874e-02, -9.402e-02, 1.224e-01, -1.273e-01, -5.707e-02, -1.406e-01, 1.896e-01, -4.769e-02, 4.207e-02, -2.602e-02, -1.636e-01) * s[2][1][0];
	r0 += M4(-3.950e-02, -5.431e-02, 2.087e-02, 3.308e-02, -3.430e-01, -1.450e-01, 8.511e-02, -7.095e-02, -4.611e-02, 1.695e-01, -1.322e-01, 1.409e-01, 1.099e-01, 6.540e-03, -2.193e-01, -1.611e-01) * s[2][1][1];
	r1 += M4(-4.861e-02, -1.526e-02, -2.213e-01, -8.671e-02, -1.044e-01, -1.378e-01, 9.909e-02, 1.250e-03, -2.258e-01, -2.920e-01, -5.135e-03, 2.851e-02, 1.824e-01, 3.408e-02, 8.875e-02, -5.408e-02) * s[2][1][1];
	r0 += M4(9.985e-02, 1.908e-02, 2.269e-02, 8.287e-02, -1.546e-02, -9.720e-03, 8.911e-02, -6.844e-03, 1.587e-01, 1.053e-02, 1.744e-01, -1.102e-02, -3.228e-02, -1.401e-01, 7.096e-02, -5.466e-02) * s[2][2][0];
	r1 += M4(-5.896e-02, 1.355e-02, 6.317e-02, 1.451e-02, -1.478e-01, -2.757e-02, -5.495e-02, -1.146e-01, -9.759e-03, 1.138e-01, 1.545e-01, -8.217e-03, -5.002e-02, -5.548e-02, -1.743e-01, -4.331e-02) * s[2][2][0];
	r0 += M4(1.955e-02, -1.815e-01, 6.332e-02, -5.627e-02, -2.410e-01, -8.179e-02, -1.056e-02, 3.990e-02, 1.460e-01, 2.312e-02, -2.831e-02, -8.390e-02, 8.752e-02, 6.622e-02, 4.177e-02, 1.857e-02) * s[2][2][1];
	r1 += M4(-7.566e-02, 1.357e-01, -4.535e-02, -6.759e-02, -3.044e-01, -1.222e-01, -2.530e-01, -4.272e-02, -4.096e-02, -4.971e-02, 1.566e-01, -6.208e-02, 1.686e-01, 1.407e-01, -1.517e-01, 4.419e-02) * s[2][2][1];
	r0 += V4(1.987e-03, 1.936e-02, -2.891e-02, 7.637e-03);
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-1.806e-02, 1.489e-02, -4.712e-03, -7.644e-03);
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-6x8C-conv5
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv4
//!BIND LUMA
//!SAVE conv5
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(conv4_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0)) + vec2(0.5)) * conv4_pt))
#define l1(x, y) V4(conv4_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0)) + vec2(0.5)) * conv4_pt))
shared V4 g[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv4_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			g[0][ay][ax] = l0(x - 1, y - 1);
			g[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s[3][3][2];
	V4 r0 = V4(0.0);
	V4 r1 = V4(0.0);
	s[0][0][0] = max(g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[0][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[0][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[0][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[0][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[0][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[0][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(-1.642e-02, 1.183e-02, -7.049e-03, -1.321e-02, 4.861e-02, 3.010e-02, 3.379e-02, 3.837e-02, -7.147e-02, 2.941e-01, -7.054e-03, 8.847e-02, 2.544e-02, -1.385e-02, -1.444e-02, 7.581e-02) * s[0][0][0];
	r1 += M4(1.380e-02, 1.941e-02, -4.808e-02, -7.147e-02, 2.448e-02, -1.530e-03, 3.978e-02, 3.699e-02, 7.406e-03, 5.316e-02, -6.785e-02, 3.724e-02, 5.777e-03, -6.328e-02, 2.045e-02, 4.439e-04) * s[0][0][0];
	r0 += M4(3.621e-02, 1.033e-01, -3.810e-02, 6.903e-02, -9.886e-02, -4.362e-02, 2.514e-02, -1.401e-01, -6.228e-02, 2.087e-02, -5.549e-02, 3.216e-02, 5.683e-02, -6.422e-02, -1.825e-02, 2.889e-02) * s[0][0][1];
	r1 += M4(3.099e-02, -3.962e-02, -7.154e-02, 4.902e-02, 3.198e-02, 1.260e-01, -1.825e-02, -3.066e-02, -3.772e-02, -4.233e-02, 1.746e-02, 2.069e-02, 5.887e-02, 5.073e-02, 4.717e-02, 3.830e-02) * s[0][0][1];
	r0 += M4(-5.562e-03, -7.971e-04, 8.839e-03, -1.623e-01, 6.019e-02, -6.190e-02, -2.246e-02, -7.642e-02, -1.473e-01, 1.552e-01, 1.574e-01, 2.677e-01, -6.518e-02, 5.791e-03, -1.124e-02, -6.860e-02) * s[0][1][0];
	r1 += M4(4.891e-02, -2.966e-02, 3.788e-02, 1.235e-01, 1.481e-01, 4.317e-02, 4.710e-02, 3.925e-02, -1.626e-02, -8.307e-03, 4.170e-01, 1.064e-01, -7.056e-02, -1.580e-01, -4.968e-02, 8.368e-02) * s[0][1][0];
	r0 += M4(5.975e-03, -7.984e-02, 8.963e-02, 1.884e-01, 7.003e-02, -4.249e-02, -1.431e-01, -5.573e-02, 5.008e-02, 5.251e-02, 9.116e-02, -1.439e-01, 1.355e-02, -2.605e-02, -2.315e-02, -5.715e-02) * s[0][1][1];
	r1 += M4(1.172e-01, 6.736e-03, 1.522e-01, 1.830e-01, 1.166e-01, 1.392e-02, -3.849e-03, -1.047e-01, -7.208e-02, -5.854e-02, -5.862e-02, 7.637e-02, -3.135e-02, -2.952e-02, -9.661e-02, 1.032e-01) * s[0][1][1];
	r0 += M4(1.298e-02, -2.109e-02, -1.758e-02, -3.831e-02, 1.184e-01, -3.706e-02, -2.001e-02, -1.978e-02, -2.436e-01, 3.046e-02, -2.515e-01, -1.284e-01, -8.942e-03, -1.455e-02, 3.811e-03, -2.912e-02) * s[0][2][0];
	r1 += M4(-1.059e-02, 1.123e-02, 9.488e-03, -4.094e-02, 7.328e-02, -1.307e-02, -3.630e-02, 1.913e-02, -5.265e-02, -1.281e-01, 3.068e-01, 7.160e-02, -1.564e-02, 2.700e-03, -3.029e-02, 8.608e-03) * s[0][2][0];
	r0 += M4(5.482e-02, 5.046e-02, -2.898e-02, -1.614e-01, 1.691e-01, 1.593e-02, -5.184e-02, 3.625e-02, -5.227e-02, 1.858e-02, -1.479e-01, -1.736e-02, -5.002e-02, 7.857e-03, -3.889e-02, -3.773e-02) * s[0][2][1];
	r1 += M4(-5.307e-02, -9.171e-02, -5.762e-02, 1.616e-01, 3.827e-02, -1.233e-01, -1.471e-01, -8.202e-02, -1.100e-01, -9.759e-02, -1.437e-02, 6.819e-02, -2.861e-02, -4.147e-02, -6.247e-03, 4.751e-02) * s[0][2][1];
	r0 += M4(5.707e-02, 6.149e-02, 1.743e-02, -1.304e-01, -2.236e-02, -7.620e-02, 3.781e-02, 5.599e-02, -4.690e-02, 1.683e-01, 1.543e-02, -6.118e-02, -6.346e-02, -1.382e-01, -9.004e-02, 7.495e-02) * s[1][0][0];
	r1 += M4(4.196e-03, -5.231e-02, -1.759e-01, -4.539e-02, -1.051e-01, 6.423e-02, 1.232e-01, -3.500e-02, 2.929e-02, 5.698e-02, -3.727e-03, -8.728e-02, -1.104e-01, 4.959e-02, 1.899e-01, 1.835e-02) * s[1][0][0];
	r0 += M4(8.094e-02, 3.254e-01, -1.213e-01, 1.443e-01, 3.038e-01, 1.811e-01, -3.221e-02, 3.115e-01, -1.305e-02, 1.384e-01, -1.111e-01, -6.081e-02, -5.749e-02, 1.048e-01, -4.245e-01, 1.599e-01) * s[1][0][1];
	r1 += M4(-1.996e-02, 3.539e-03, -7.203e-02, 6.343e-02, -5.663e-02, 3.639e-02, 2.760e-03, 3.362e-02, -1.276e-03, -2.194e-02, 2.919e-02, -4.283e-02, -2.540e-02, -8.558e-02, 1.685e-01, 1.927e-02) * s[1][0][1];
	r0 += M4(-2.838e-02, -3.351e-02, 1.431e-01, -1.146e-01, 1.469e-01, 5.620e-02, -7.251e-02, -1.140e-01, -1.473e-02, 3.182e-01, 2.920e-01, -2.024e-02, 3.971e-03, -1.312e-01, 2.278e-01, 2.781e-01) * s[1][1][0];
	r1 += M4(2.528e-01, 4.978e-02, 4.057e-01, -3.196e-01, 2.195e-01, -2.093e-02, -3.090e-01, -1.202e-01, -1.393e-01, 3.772e-01, 2.890e-01, -2.042e-01, -2.949e-01, 1.367e-01, 1.630e-01, 2.119e-01) * s[1][1][0];
	r0 += M4(1.577e-01, -1.886e-01, 3.543e-01, -9.471e-03, 2.107e-01, 7.709e-02, -4.005e-01, -1.272e-01, -1.628e-02, 3.619e-01, 2.368e-01, -3.928e-03, 1.382e-01, -8.485e-02, 1.554e-01, 4.455e-01) * s[1][1][1];
	r1 += M4(6.665e-02, 4.835e-01, 4.366e-01, -3.747e-01, 2.568e-01, -4.115e-01, -4.860e-01, 2.656e-02, -2.247e-01, 1.904e-01, 2.367e-01, -2.683e-01, -1.797e-01, 2.649e-02, -9.775e-02, 8.569e-02) * s[1][1][1];
	r0 += M4(-2.298e-02, 1.373e-02, 2.727e-02, -1.273e-01, 7.717e-02, 7.407e-02, -3.187e-02, 9.285e-02, 1.143e-01, 1.158e-02, -5.293e-02, 1.127e-01, 7.048e-02, -4.665e-02, 1.730e-01, -5.668e-02) * s[1][2][0];
	r1 += M4(7.026e-02, -7.789e-02, 1.323e-01, -1.646e-02, -9.193e-02, 3.555e-02, -4.984e-02, 1.611e-02, -6.070e-02, 3.069e-01, 2.263e-01, -2.420e-01, 4.528e-02, -1.254e-03, -1.558e-01, 4.152e-02) * s[1][2][0];
	r0 += M4(5.734e-02, -2.827e-02, -3.305e-02, 6.910e-02, 1.359e-01, -6.163e-02, 3.528e-02, 3.810e-02, 1.998e-01, -1.221e-02, 7.659e-04, 2.036e-01, -2.431e-02, -7.747e-02, 3.064e-02, -1.114e-01) * s[1][2][1];
	r1 += M4(4.325e-02, 1.405e-02, -1.383e-01, -1.183e-01, -1.144e-01, 2.859e-02, -1.530e-01, 1.347e-01, -4.458e-02, 2.978e-01, -4.358e-02, -2.686e-01, 1.224e-01, 2.937e-02, 5.311e-02, 2.606e-02) * s[1][2][1];
	r0 += M4(1.148e-01, 7.008e-02, -1.226e-02, 1.218e-02, -1.279e-02, -1.454e-01, -3.442e-02, -6.235e-02, 4.771e-02, 1.033e-01, -3.441e-03, -4.553e-02, 3.340e-02, 5.926e-02, -1.025e-01, -4.525e-02) * s[2][0][0];
	r1 += M4(-1.112e-02, -1.542e-02, -8.301e-02, 6.013e-03, -4.068e-03, -2.900e-02, 2.755e-02, -3.041e-02, -2.847e-02, -8.688e-02, -5.650e-02, 5.752e-02, -4.314e-02, -7.779e-03, -5.156e-02, -1.640e-02) * s[2][0][0];
	r0 += M4(-1.127e-02, 1.055e-01, -8.085e-03, -1.588e-03, 2.179e-02, -6.161e-02, 7.158e-02, -4.846e-02, -3.541e-02, 6.136e-02, -1.396e-02, -5.162e-02, 8.853e-02, -6.035e-02, -1.392e-01, -5.106e-02) * s[2][0][1];
	r1 += M4(-2.848e-02, -2.776e-02, 8.934e-03, -1.529e-03, 3.160e-04, -2.899e-02, 7.026e-03, 1.691e-02, -3.895e-02, -1.222e-02, -2.193e-02, 3.102e-02, 8.243e-03, -5.490e-02, -3.521e-02, -7.707e-02) * s[2][0][1];
	r0 += M4(-8.180e-02, -1.334e-01, -6.783e-02, -1.363e-01, 1.165e-01, 1.447e-01, -1.796e-02, 6.929e-02, -4.671e-02, 1.567e-01, 2.426e-03, -2.242e-02, -9.903e-03, -7.902e-02, 1.293e-01, 2.971e-02) * s[2][1][0];
	r1 += M4(3.577e-02, -2.502e-01, -7.935e-02, 7.325e-03, 7.106e-02, -5.965e-03, -9.046e-02, 2.039e-02, -5.647e-03, -1.471e-02, -1.575e-02, 1.425e-02, -9.204e-02, 1.926e-01, 2.246e-01, -2.518e-02) * s[2][1][0];
	r0 += M4(2.257e-02, 1.485e-01, 1.174e-01, 3.473e-01, -8.328e-02, 1.850e-01, 1.075e-02, 4.913e-02, 2.147e-02, 4.447e-02, -2.172e-02, -3.210e-02, -5.665e-02, -1.450e-01, 1.049e-01, 6.976e-02) * s[2][1][1];
	r1 += M4(2.160e-02, 9.393e-02, -1.066e-01, -9.562e-02, -4.175e-03, 1.685e-01, 1.343e-02, 3.712e-03, 4.891e-02, 2.997e-02, 1.781e-02, -1.723e-02, -3.553e-02, 2.569e-01, 1.972e-01, -1.071e-01) * s[2][1][1];
	r0 += M4(3.640e-02, -7.199e-02, 5.661e-02, -4.634e-02, -3.958e-02, 1.639e-02, -1.051e-01, -1.916e-02, 4.086e-02, 2.807e-02, -1.927e-02, -3.744e-02, -8.370e-02, -1.266e-02, 1.520e-01, 3.539e-04) * s[2][2][0];
	r1 += M4(4.544e-02, -2.217e-01, -9.324e-03, 6.620e-02, -3.617e-02, 3.976e-02, 1.091e-01, -1.831e-03, -1.157e-02, 3.815e-02, 2.568e-02, -1.504e-02, 2.449e-02, -5.747e-02, -1.144e-01, 9.456e-02) * s[2][2][0];
	r0 += M4(3.928e-02, -3.762e-02, -8.129e-02, 2.119e-01, 1.890e-01, 6.781e-02, -1.402e-01, 6.382e-02, -3.358e-02, 8.480e-02, 1.380e-02, 2.326e-02, 1.618e-02, -1.131e-01, 9.068e-02, -1.762e-02) * s[2][2][1];
	r1 += M4(-1.062e-02, -1.110e-01, 1.691e-01, -1.045e-01, 4.983e-02, -6.572e-02, 4.408e-02, -4.966e-02, 9.226e-03, 1.102e-01, -1.602e-02, 7.352e-03, 2.361e-02, 2.032e-02, -1.592e-01, 2.294e-03) * s[2][2][1];
	s[0][0][0] = max(g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[1][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[1][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[1][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[1][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[1][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[1][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(2.086e-01, 1.499e-01, 1.523e-01, 3.300e-01, 3.747e-02, -9.298e-02, 5.676e-02, 1.281e-02, -2.474e-01, 3.410e-02, -2.407e-01, -2.318e-03, 3.970e-02, 3.528e-02, -6.630e-02, -3.546e-02) * s[0][0][0];
	r1 += M4(4.288e-02, 9.739e-02, 1.168e-01, -1.728e-01, 9.108e-03, -1.806e-02, 2.010e-02, 9.068e-03, -2.650e-02, 1.996e-02, 2.519e-01, -8.495e-02, -3.401e-02, -5.452e-03, -1.532e-01, -3.260e-02) * s[0][0][0];
	r0 += M4(-3.095e-02, 2.279e-02, -4.871e-02, 2.244e-02, -6.510e-02, -1.058e-01, 3.479e-02, -1.614e-02, 9.954e-02, -6.028e-02, 8.764e-02, 6.790e-02, 7.991e-02, 7.934e-02, 4.772e-02, -2.053e-02) * s[0][0][1];
	r1 += M4(-6.242e-02, -3.720e-02, 1.573e-02, -3.427e-02, 1.399e-02, -4.820e-03, 5.497e-02, 2.181e-02, 1.163e-02, 1.316e-02, 2.884e-02, 2.658e-02, -3.939e-02, 2.228e-02, -1.170e-01, 1.701e-02) * s[0][0][1];
	r0 += M4(7.793e-02, 2.046e-01, 6.758e-02, 7.447e-01, -3.046e-02, 4.022e-02, -5.005e-02, 1.831e-01, 3.833e-01, -7.884e-02, 2.044e-01, -1.107e-01, 1.889e-01, -6.486e-03, 2.281e-02, 2.433e-02) * s[0][1][0];
	r1 += M4(-2.091e-01, -3.087e-01, -1.258e-01, -2.541e-01, -1.763e-01, -6.406e-02, -1.141e-01, -1.287e-01, 1.324e-01, -2.346e-01, -3.221e-01, -2.829e-02, -5.783e-02, 1.333e-01, 1.073e-01, 1.361e-01) * s[0][1][0];
	r0 += M4(8.301e-02, -5.595e-03, -6.307e-02, -1.764e-02, -7.739e-02, 1.718e-02, -1.427e-01, 4.679e-02, -4.718e-03, -9.855e-02, -5.539e-02, -1.537e-01, 6.545e-02, 5.829e-02, -6.375e-03, -3.804e-02) * s[0][1][1];
	r1 += M4(-1.637e-01, -1.396e-01, -1.226e-01, 4.902e-02, -1.412e-01, -5.435e-02, -8.448e-02, -1.121e-01, 5.529e-02, -1.092e-01, -1.626e-01, -9.653e-02, -3.214e-02, 2.650e-01, 1.143e-01, 1.696e-01) * s[0][1][1];
	r0 += M4(-2.829e-02, 1.309e-01, -1.947e-02, 1.468e-01, -6.023e-02, 1.650e-02, 4.425e-02, 5.781e-02, -3.087e-01, 8.644e-03, 1.977e-02, 2.469e-02, -5.241e-02, 3.658e-02, 4.456e-02, 4.538e-03) * s[0][2][0];
	r1 += M4(-1.704e-01, 1.135e-01, 1.919e-01, -6.684e-02, -5.449e-02, -2.696e-02, 1.714e-01, 6.577e-02, 7.406e-02, 1.339e-01, 1.588e-01, -1.295e-01, 4.074e-03, 1.050e-01, 3.409e-02, -2.060e-05) * s[0][2][0];
	r0 += M4(1.542e-03, 3.185e-03, 4.585e-02, 1.967e-03, -3.749e-02, -3.327e-02, 6.074e-02, -3.228e-02, 7.994e-03, -2.970e-02, -8.520e-02, -1.262e-01, -4.098e-02, 2.839e-02, -1.248e-02, 8.559e-02) * s[0][2][1];
	r1 += M4(-1.468e-02, 3.468e-02, -2.749e-03, 2.045e-02, 7.013e-02, 4.185e-02, 1.313e-01, 9.638e-02, 7.740e-02, -1.067e-01, -6.799e-02, -8.990e-02, 1.641e-03, 1.507e-01, 1.274e-01, -1.290e-02) * s[0][2][1];
	r0 += M4(-6.860e-02, -1.199e-01, -2.618e-01, -2.182e-01, -7.300e-02, -2.588e-01, 2.214e-02, 6.021e-02, -2.262e-01, -1.384e-01, -1.077e-02, -1.223e-01, 1.986e-02, -1.103e-02, 1.636e-01, -1.331e-01) * s[1][0][0];
	r1 += M4(-1.673e-02, 1.296e-01, 2.334e-01, 1.280e-03, -3.894e-02, 2.771e-02, 7.012e-02, 1.759e-03, -5.925e-02, -1.053e-02, 9.257e-02, 1.155e-01, -3.113e-02, 5.205e-02, -1.487e-01, -5.457e-02) * s[1][0][0];
	r0 += M4(2.819e-03, -8.553e-02, -2.744e-02, -2.849e-02, -5.180e-02, -1.715e-01, -2.989e-02, 9.432e-02, 3.574e-02, -1.519e-01, -9.545e-02, -2.964e-02, 4.838e-02, 9.687e-02, 1.265e-01, 1.127e-02) * s[1][0][1];
	r1 += M4(-3.916e-02, -3.008e-02, -1.474e-02, -4.773e-02, -2.867e-02, 6.425e-02, 1.201e-01, -3.684e-02, -6.148e-02, -7.287e-05, 1.395e-01, -5.554e-02, 3.115e-02, 2.909e-02, -1.489e-01, 7.153e-02) * s[1][0][1];
	r0 += M4(2.728e-01, 5.881e-01, 1.221e-01, 1.950e-01, 1.729e-01, -4.588e-02, -3.707e-02, -2.691e-02, 1.387e-01, 7.840e-02, 3.359e-01, 1.666e-01, -9.016e-02, 1.661e-01, -4.341e-01, -2.497e-01) * s[1][1][0];
	r1 += M4(2.322e-02, 4.184e-02, 5.298e-02, 1.034e-01, -3.409e-01, -4.399e-03, -2.940e-01, 2.566e-01, -2.460e-01, 2.236e-01, -2.801e-01, 1.672e-01, 2.026e-01, -3.150e-01, -2.164e-02, -1.569e-01) * s[1][1][0];
	r0 += M4(4.229e-01, -3.139e-02, -2.076e-01, -3.034e-02, 1.798e-01, -1.576e-01, 2.232e-01, 7.275e-03, 1.264e-02, -2.355e-01, 4.821e-03, 9.395e-02, -1.480e-01, 2.794e-01, -1.641e-01, -1.781e-01) * s[1][1][1];
	r1 += M4(-7.194e-02, -1.853e-01, -8.939e-02, -6.387e-02, -3.251e-01, -2.241e-02, -2.920e-01, 2.479e-01, -1.728e-01, 1.443e-01, -3.581e-02, 9.299e-02, 5.332e-01, -2.498e-01, -1.685e-01, -2.961e-01) * s[1][1][1];
	r0 += M4(4.258e-02, 3.112e-02, 1.968e-01, 2.074e-01, -2.001e-01, -7.154e-02, -4.692e-02, 1.616e-01, -1.418e-01, 4.918e-02, -2.403e-01, -5.457e-02, 1.528e-01, 2.425e-02, -1.145e-01, 1.173e-01) * s[1][2][0];
	r1 += M4(-8.604e-02, 3.101e-01, 1.395e-02, -1.031e-01, -5.683e-02, 3.305e-02, 3.702e-01, -7.072e-02, -1.319e-01, -2.048e-01, 1.182e-01, 4.571e-02, -1.482e-03, -4.496e-02, -6.771e-02, -6.516e-02) * s[1][2][0];
	r0 += M4(-3.027e-02, -5.567e-02, 2.497e-01, 2.528e-02, -2.411e-01, 3.916e-02, -2.301e-01, 1.078e-02, 1.790e-01, -5.134e-02, -2.487e-02, -1.024e-01, 3.901e-02, 2.361e-02, -3.286e-01, -2.667e-02) * s[1][2][1];
	r1 += M4(2.347e-02, 8.761e-02, 2.091e-02, 5.774e-03, -6.465e-02, -1.288e-02, 2.070e-01, -1.168e-01, -6.285e-02, -1.685e-01, -1.861e-01, 4.067e-02, -3.600e-02, -8.869e-02, 1.542e-01, 1.889e-02) * s[1][2][1];
	r0 += M4(5.283e-02, 5.035e-01, -1.724e-01, 8.523e-02, -1.463e-03, -1.249e-01, 2.257e-02, 9.120e-03, 1.138e-02, -2.438e-02, 4.685e-03, 1.755e-02, 5.946e-02, -8.894e-02, 6.138e-02, 7.934e-02) * s[2][0][0];
	r1 += M4(-1.117e-01, 2.629e-02, -5.201e-02, 1.236e-01, 2.435e-02, 1.166e-02, -1.290e-02, 4.145e-03, 6.206e-02, 2.409e-02, -7.993e-02, 1.445e-02, 1.366e-02, -1.705e-02, -9.386e-02, -1.499e-01) * s[2][0][0];
	r0 += M4(2.598e-02, 1.378e-01, -3.339e-02, 2.284e-02, -2.524e-02, -4.294e-02, -4.730e-02, -8.676e-03, 6.070e-02, -1.971e-02, -2.252e-03, -4.436e-02, 1.402e-02, -1.603e-02, 1.089e-01, 6.151e-02) * s[2][0][1];
	r1 += M4(-3.358e-02, 8.991e-02, 5.662e-03, 1.767e-02, 8.402e-03, 7.921e-02, 4.806e-02, -1.643e-02, -9.183e-03, -4.379e-02, -9.249e-03, 5.682e-04, 4.382e-02, 1.020e-02, -2.825e-02, -7.200e-02) * s[2][0][1];
	r0 += M4(-5.606e-02, -3.263e-02, 4.602e-02, -1.024e-01, -4.197e-02, 2.394e-02, 8.126e-02, 8.644e-02, 1.451e-02, 4.666e-02, -1.092e-01, 3.994e-02, -5.443e-03, -1.299e-01, -2.193e-01, 6.414e-02) * s[2][1][0];
	r1 += M4(-7.340e-02, -7.673e-02, 1.676e-02, 1.054e-01, -2.523e-02, 7.247e-02, 9.446e-02, -3.031e-02, -1.130e-01, 2.011e-01, 2.973e-02, -1.158e-01, 3.717e-02, -1.430e-01, -7.520e-02, -1.364e-01) * s[2][1][0];
	r0 += M4(8.074e-03, -3.239e-02, -4.984e-02, -7.651e-03, 9.876e-03, 6.861e-02, 1.741e-01, 1.853e-01, -3.928e-02, 9.824e-03, 3.093e-02, -3.572e-02, 2.547e-02, -2.005e-01, -1.906e-01, 3.295e-02) * s[2][1][1];
	r1 += M4(3.029e-02, -1.968e-01, -5.335e-02, 5.603e-02, -7.092e-03, 5.413e-02, 4.486e-02, 7.022e-03, 1.752e-03, 2.995e-02, 8.452e-03, -5.495e-02, 1.436e-01, -1.020e-01, -4.523e-02, -1.047e-01) * s[2][1][1];
	r0 += M4(-2.591e-02, 9.896e-02, 1.396e-01, -8.139e-03, 6.018e-02, 3.381e-02, -8.862e-02, 6.257e-02, -1.635e-01, -1.054e-01, 3.507e-03, 3.534e-02, -1.037e-01, 2.398e-02, 2.434e-02, -7.730e-03) * s[2][2][0];
	r1 += M4(3.861e-02, 1.523e-01, -6.223e-02, 6.050e-02, -9.418e-05, 1.271e-01, -3.410e-03, -9.841e-02, -8.525e-02, 1.851e-01, 1.004e-01, -1.679e-01, -5.675e-02, -3.992e-02, 5.840e-02, -2.893e-02) * s[2][2][0];
	r0 += M4(1.245e-02, 5.713e-02, 1.168e-01, -5.606e-02, -5.596e-02, -7.313e-02, -7.308e-02, 2.952e-02, 4.414e-02, 3.031e-02, -1.457e-02, 5.003e-02, -4.009e-02, -5.347e-02, -1.921e-02, -8.423e-02) * s[2][2][1];
	r1 += M4(1.791e-02, -1.774e-02, -8.114e-02, 7.791e-02, -6.368e-02, 1.558e-01, 1.424e-01, -1.258e-01, -3.951e-02, -1.619e-02, 7.108e-02, -6.712e-02, -6.432e-03, -8.212e-02, 6.054e-02, 3.244e-02) * s[2][2][1];
	r0 += V4(-7.751e-03, 2.171e-02, 8.154e-03, 3.845e-02);
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-1.908e-02, 7.787e-03, 1.044e-02, 1.066e-02);
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-6x8C-conv6
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv5
//!BIND LUMA
//!SAVE conv6
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(conv5_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0)) + vec2(0.5)) * conv5_pt))
#define l1(x, y) V4(conv5_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0)) + vec2(0.5)) * conv5_pt))
shared V4 g[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv5_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			g[0][ay][ax] = l0(x - 1, y - 1);
			g[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s[3][3][2];
	V4 r0 = V4(0.0);
	V4 r1 = V4(0.0);
	s[0][0][0] = max(g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[0][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[0][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[0][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[0][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[0][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[0][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(-6.277e-02, 1.189e-01, 4.868e-02, 7.326e-02, -1.740e-02, 5.006e-02, -4.580e-02, -8.480e-03, 1.455e-02, -9.847e-03, -2.631e-02, -3.309e-02, -2.133e-03, -1.161e-02, -6.072e-02, -2.614e-02) * s[0][0][0];
	r1 += M4(-4.473e-02, 5.846e-02, -1.230e-01, 2.085e-01, 5.139e-02, 1.484e-02, -1.758e-02, -6.913e-02, 2.692e-02, -1.056e-02, 2.730e-02, -1.204e-01, -8.041e-03, -2.168e-02, -1.825e-03, -8.087e-02) * s[0][0][0];
	r0 += M4(-5.190e-02, 3.826e-02, -1.006e-02, -3.074e-02, 3.054e-02, 3.052e-02, -2.418e-02, 3.595e-02, 3.598e-02, 1.343e-02, -2.762e-02, 1.616e-01, -3.396e-02, 1.595e-02, -1.750e-02, 8.280e-02) * s[0][0][1];
	r1 += M4(-2.796e-03, 4.627e-02, 4.905e-02, 3.569e-02, 7.473e-03, -6.520e-03, -4.181e-02, -8.754e-02, -2.029e-02, -1.881e-03, -9.549e-03, 1.082e-02, 2.352e-02, 6.607e-03, -5.119e-02, 1.160e-01) * s[0][0][1];
	r0 += M4(-2.888e-01, -6.906e-02, 2.357e-01, 1.106e-02, -8.315e-03, 2.549e-02, 6.600e-02, -3.347e-02, -3.385e-02, 1.885e-02, -7.730e-03, -9.548e-02, 2.266e-02, 3.405e-02, -6.405e-03, 4.060e-02) * s[0][1][0];
	r1 += M4(3.929e-01, -1.013e-01, -1.813e-01, 5.177e-01, -4.924e-02, 1.516e-01, 2.275e-02, 1.691e-01, -9.006e-02, 4.518e-02, 6.841e-02, 2.450e-04, 2.733e-02, -1.802e-02, -4.603e-03, -5.329e-02) * s[0][1][0];
	r0 += M4(-3.890e-02, -2.222e-02, -4.252e-02, -6.998e-02, 5.237e-02, -3.333e-02, 5.990e-02, -1.443e-01, -1.178e-01, 7.757e-02, 1.299e-02, -1.062e-01, 1.800e-01, 1.928e-01, -1.172e-01, 1.179e-01) * s[0][1][1];
	r1 += M4(1.812e-02, 2.166e-02, 4.485e-02, -4.689e-02, -1.530e-01, 5.871e-02, 3.308e-02, -3.756e-02, -2.517e-01, 1.189e-01, 1.621e-01, 2.389e-01, 2.343e-02, 1.047e-01, 2.092e-05, -3.549e-01) * s[0][1][1];
	r0 += M4(3.310e-02, 7.036e-02, -1.150e-01, -1.729e-02, -5.779e-02, 8.663e-02, -1.714e-01, -7.438e-03, -4.900e-02, 1.375e-03, -6.622e-02, -1.043e-01, 1.600e-02, -1.213e-02, -2.550e-02, 4.851e-02) * s[0][2][0];
	r1 += M4(-2.962e-03, -1.164e-02, 1.398e-02, -2.771e-01, 1.229e-01, 7.873e-02, 1.362e-02, -1.440e-01, -5.531e-02, 1.845e-02, 4.332e-02, -3.979e-02, 7.121e-02, -2.719e-03, -1.471e-02, -5.613e-03) * s[0][2][0];
	r0 += M4(-6.593e-02, 2.468e-02, -3.350e-02, -4.268e-02, -9.192e-02, -4.579e-02, -8.917e-02, -9.155e-02, 8.742e-04, 2.231e-03, -5.304e-02, -1.372e-01, 6.130e-02, -9.916e-02, -1.018e-01, -4.988e-02) * s[0][2][1];
	r1 += M4(-2.552e-02, 1.245e-02, 1.198e-02, 2.054e-02, -8.594e-02, -1.706e-02, 4.321e-02, 3.144e-02, -3.179e-01, 3.519e-02, 5.992e-02, -1.810e-02, -5.272e-02, 2.806e-02, -2.317e-02, -6.071e-02) * s[0][2][1];
	r0 += M4(-1.547e-01, -1.217e-01, 7.830e-02, -1.221e-01, -4.379e-03, 2.309e-02, -7.303e-02, 4.860e-02, 7.821e-02, 1.202e-03, -5.836e-03, 6.462e-02, 1.016e-02, 4.727e-02, -2.182e-02, 5.310e-02) * s[1][0][0];
	r1 += M4(3.094e-01, -1.936e-02, 5.382e-01, 2.468e-01, 3.426e-03, -4.842e-02, -7.877e-02, -5.370e-02, 1.505e-02, 2.197e-03, -6.506e-02, -5.680e-02, -2.422e-02, 2.648e-02, 2.806e-02, -5.766e-02) * s[1][0][0];
	r0 += M4(1.304e-02, -2.157e-02, -7.659e-02, 5.765e-02, -1.010e-03, -2.340e-02, 2.722e-02, 3.064e-02, -1.066e-01, -2.052e-02, 5.292e-02, -1.362e-02, 1.390e-02, 1.164e-01, -3.334e-02, 2.330e-03) * s[1][0][1];
	r1 += M4(-7.391e-03, -6.518e-02, 6.189e-02, 7.952e-03, 5.346e-03, 4.015e-02, -5.454e-02, 3.479e-02, 4.021e-03, 1.076e-01, 1.876e-01, 1.294e-01, -3.732e-02, 1.040e-01, -1.873e-02, -1.273e-02) * s[1][0][1];
	r0 += M4(7.495e-01, 4.250e-02, -3.896e-01, 1.184e+00, -2.468e-01, 3.077e-02, 2.192e-02, -1.467e-01, -4.692e-02, -4.633e-02, -1.799e-02, 5.426e-02, -2.510e-02, 3.338e-02, 6.763e-02, -3.101e-01) * s[1][1][0];
	r1 += M4(-4.886e-02, 1.020e-01, -6.309e-01, 2.664e-01, -6.181e-03, -2.828e-01, 1.052e-01, 1.016e-01, -2.494e-02, -8.413e-02, 1.229e-01, -5.725e-02, -3.359e-01, -1.855e-03, -6.690e-02, 3.370e-02) * s[1][1][0];
	r0 += M4(1.717e-01, 7.605e-02, 6.226e-02, 2.114e-01, -3.689e-01, -3.798e-02, -4.245e-02, -9.537e-02, -1.849e-01, -2.352e-01, -1.438e+00, 2.805e-02, -2.940e-01, 8.798e-02, -5.297e-01, -8.815e-01) * s[1][1][1];
	r1 += M4(2.889e-02, -1.052e-01, 8.569e-02, 2.372e-02, 2.436e-02, -3.098e-01, 6.120e-02, 1.361e-01, -6.239e-01, -2.605e-01, 1.997e-01, -6.293e-02, -3.762e-01, -1.256e-01, 6.650e-02, -1.241e-01) * s[1][1][1];
	r0 += M4(8.756e-02, 1.293e-01, 5.176e-01, 2.459e-01, -4.387e-02, -1.111e-02, -1.421e-01, -5.728e-02, -6.194e-02, 1.204e-03, 8.081e-02, -4.805e-02, 2.168e-02, 2.533e-02, -1.096e-01, 2.039e-02) * s[1][2][0];
	r1 += M4(1.750e-01, -1.646e-01, -7.047e-01, -2.252e-01, -2.935e-02, -1.130e-01, -1.033e-02, -5.024e-02, 2.878e-02, -5.079e-02, 7.795e-02, 5.127e-02, -1.214e-01, 6.222e-02, -1.388e-02, -8.232e-02) * s[1][2][0];
	r0 += M4(1.535e-02, -1.447e-02, 7.422e-02, 4.027e-02, -3.512e-01, -3.893e-02, -2.523e-02, -4.478e-02, -2.143e-01, -2.608e-02, -2.993e-02, -9.991e-02, -2.612e-01, 1.669e-03, -4.961e-02, -1.464e-01) * s[1][2][1];
	r1 += M4(2.393e-02, -7.466e-02, -2.111e-03, 2.138e-02, -3.607e-02, -1.080e-02, -7.461e-02, -1.224e-01, 1.612e-01, 3.495e-02, -1.239e-01, 3.218e-02, -1.726e-01, 1.317e-02, -5.070e-02, 1.274e-01) * s[1][2][1];
	r0 += M4(1.904e-01, 4.092e-01, -1.300e-01, 1.376e-01, 1.593e-02, 3.968e-02, 7.399e-03, 2.864e-02, -2.743e-03, 3.316e-02, 5.244e-02, -1.361e-02, 8.254e-03, -4.284e-02, 2.767e-02, -1.251e-02) * s[2][0][0];
	r1 += M4(-1.226e-01, -1.052e-02, 1.147e-01, -7.373e-02, 7.595e-03, 5.917e-02, -6.868e-03, -3.127e-02, -9.749e-03, 1.252e-02, 1.219e-02, 7.156e-03, 2.384e-02, 2.392e-02, -1.752e-02, 1.308e-02) * s[2][0][0];
	r0 += M4(-2.610e-02, 3.374e-02, 2.078e-03, -1.104e-02, 4.675e-02, 5.224e-03, -9.171e-04, 1.739e-02, 1.033e-01, -5.355e-02, -1.058e-01, 3.850e-02, -5.970e-02, 2.958e-02, 8.814e-02, -7.349e-02) * s[2][0][1];
	r1 += M4(-3.371e-03, 6.943e-04, -1.572e-02, 2.962e-02, 1.668e-04, 5.239e-02, -9.029e-03, -3.427e-02, 1.324e-02, -9.302e-02, -7.682e-03, -6.190e-02, 4.135e-02, -1.707e-02, -6.160e-02, 1.029e-01) * s[2][0][1];
	r0 += M4(7.796e-02, 1.522e-01, 5.008e-01, -1.591e-01, 7.397e-02, 9.666e-04, -5.432e-03, 5.188e-02, 2.510e-02, 6.746e-02, -3.253e-02, 6.824e-02, -1.822e-02, 5.123e-03, -3.633e-02, 3.953e-02) * s[2][1][0];
	r1 += M4(2.000e-01, 1.010e-01, -1.894e-01, 2.124e-01, -1.389e-02, 3.735e-02, 3.769e-02, -4.525e-02, 4.309e-04, 4.913e-02, 3.846e-02, 5.740e-03, 4.017e-02, 1.959e-01, -4.066e-02, -9.154e-02) * s[2][1][0];
	r0 += M4(4.059e-02, 5.632e-02, 4.305e-03, 7.916e-03, 7.642e-02, -3.260e-02, -3.966e-02, 5.194e-02, -9.415e-02, 7.982e-02, -9.789e-02, 4.906e-02, -1.235e-01, -1.004e-01, -1.349e-01, 3.334e-02) * s[2][1][1];
	r1 += M4(-2.454e-02, 5.778e-02, -2.422e-02, -2.458e-02, -8.953e-03, 2.496e-02, 1.085e-02, -3.954e-02, 1.891e-03, -3.285e-02, -6.500e-02, 8.346e-04, 4.159e-03, 3.690e-02, 8.085e-03, -1.315e-01) * s[2][1][1];
	r0 += M4(4.678e-01, 3.347e-02, -1.211e-01, -1.698e-02, -1.175e-01, -1.518e-04, 4.234e-02, -1.373e-03, -2.558e-02, -6.234e-03, -2.308e-02, -2.791e-02, -1.400e-01, 9.148e-02, 7.619e-02, 6.910e-03) * s[2][2][0];
	r1 += M4(9.388e-02, -2.627e-02, 7.685e-02, 3.588e-02, 8.182e-03, -1.357e-02, -2.042e-02, 1.961e-02, -7.369e-03, -1.636e-01, 8.622e-03, 6.859e-02, 2.057e-02, 8.658e-02, -1.251e-02, 3.298e-02) * s[2][2][0];
	r0 += M4(5.329e-02, 2.956e-03, -2.845e-02, 1.617e-02, -8.165e-02, -4.772e-02, 2.824e-02, -2.705e-03, 2.447e-01, -7.124e-03, -3.534e-02, 4.984e-02, -1.988e-01, 9.012e-02, 9.156e-02, 7.070e-02) * s[2][2][1];
	r1 += M4(1.546e-02, -8.610e-03, -1.329e-02, -3.548e-03, 1.354e-02, -2.045e-02, -1.507e-02, 8.728e-04, -2.570e-03, -2.502e-01, 7.692e-02, -1.995e-03, 4.773e-02, 1.142e-01, 7.239e-02, 2.373e-02) * s[2][2][1];
	s[0][0][0] = max(g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[1][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[1][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[1][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[1][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[1][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[1][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(4.918e-02, -1.315e-02, -9.123e-03, -1.817e-02, -1.367e-02, 4.497e-02, -5.852e-03, 8.541e-02, -4.890e-02, 3.817e-03, 3.139e-02, -5.964e-02, -1.434e-02, -2.867e-02, -7.392e-02, 1.014e-02) * s[0][0][0];
	r1 += M4(-9.201e-04, -3.482e-02, -3.418e-02, -1.312e-01, -7.495e-02, 1.547e-02, 4.618e-02, 1.016e-01, 6.244e-02, -1.796e-02, 2.412e-02, 2.067e-02, -4.169e-02, -4.716e-03, -3.625e-02, 8.359e-03) * s[0][0][0];
	r0 += M4(5.275e-02, 3.183e-03, -4.310e-02, 1.183e-01, -2.399e-01, -6.938e-02, 1.117e-03, 1.401e-01, 3.596e-03, 7.856e-02, -5.802e-03, -5.754e-02, -2.045e-02, -3.269e-02, 4.687e-03, -2.401e-02) * s[0][0][1];
	r1 += M4(2.032e-02, 4.128e-03, -1.044e-01, -7.338e-02, 5.926e-02, -6.201e-02, -9.881e-02, 5.137e-01, 4.453e-02, 2.284e-02, -1.131e-03, -1.567e-01, 1.491e-02, -3.963e-02, -1.693e-02, 4.139e-02) * s[0][0][1];
	r0 += M4(-9.315e-02, 7.545e-02, 6.516e-02, -1.176e-01, 3.975e-02, -3.340e-02, 7.436e-02, 1.176e-01, -2.532e-02, -2.557e-02, -4.478e-02, 1.933e-02, -9.024e-02, -7.960e-03, 2.600e-03, -1.219e-01) * s[0][1][0];
	r1 += M4(-1.772e-01, 4.314e-02, 2.642e-03, 2.625e-01, 1.504e-01, -2.705e-02, -2.393e-02, 7.946e-02, 8.682e-02, 3.343e-02, -2.607e-02, -4.187e-02, 1.603e-01, -4.577e-02, -5.738e-03, -1.473e-01) * s[0][1][0];
	r0 += M4(6.611e-02, -4.019e-03, 1.380e-01, -1.854e-02, -2.160e-01, -1.235e-01, 1.798e-01, -1.176e-02, -3.233e-02, -1.379e-01, -2.325e-01, -1.600e-01, 2.943e-02, 3.163e-02, 1.357e-03, -9.780e-02) * s[0][1][1];
	r1 += M4(-8.814e-02, -5.080e-02, 3.276e-02, -1.318e-03, 2.455e-01, -8.447e-02, -3.105e-02, 4.600e-01, -1.601e-01, 6.018e-02, 5.766e-02, -2.111e-01, -1.597e-01, -1.173e-02, 3.094e-02, -6.041e-02) * s[0][1][1];
	r0 += M4(7.153e-02, -3.940e-02, -8.419e-02, -3.189e-02, 1.373e-02, 9.892e-04, 3.154e-02, 4.120e-02, -7.057e-02, 3.554e-02, 9.242e-03, -1.212e-02, -5.144e-02, -1.708e-02, -4.594e-02, 3.597e-02) * s[0][2][0];
	r1 += M4(-2.191e-01, -5.663e-04, -5.793e-02, -6.313e-02, 9.649e-03, -3.604e-02, 2.901e-02, 1.772e-02, 4.911e-02, 1.824e-02, -4.203e-03, 3.987e-02, 8.325e-02, -1.543e-02, 1.655e-02, 3.845e-02) * s[0][2][0];
	r0 += M4(6.728e-02, -1.048e-02, 9.543e-03, 3.643e-02, -1.290e-02, 2.326e-02, -2.551e-02, 3.263e-02, -4.964e-02, 6.407e-02, 7.262e-03, -7.544e-03, -1.265e-02, -6.710e-03, -2.989e-02, -2.999e-02) * s[0][2][1];
	r1 += M4(-3.618e-02, 7.753e-03, 5.318e-02, -2.316e-02, 4.750e-02, -2.651e-02, -1.204e-03, -3.241e-02, 7.525e-02, 4.509e-02, 1.038e-01, 9.217e-02, 2.063e-02, -7.289e-03, 2.115e-02, 1.923e-02) * s[0][2][1];
	r0 += M4(7.385e-02, -1.004e-02, 5.895e-02, 1.165e-02, -5.699e-02, 8.566e-03, 2.924e-02, -1.399e-01, 1.364e-01, -1.068e-02, -5.677e-02, 2.105e-01, -1.772e-01, -5.920e-02, 3.143e-02, -1.155e-01) * s[1][0][0];
	r1 += M4(-2.777e-02, 8.505e-03, -2.256e-02, -1.161e-01, -4.364e-02, 2.849e-02, 1.405e-01, 4.571e-03, -1.909e-02, -1.170e-02, -9.987e-02, -3.595e-02, 1.253e-02, -6.285e-02, 7.106e-02, 1.097e-01) * s[1][0][0];
	r0 += M4(1.721e-01, -5.509e-03, 8.196e-02, 1.198e-01, 1.940e-01, 3.204e-02, -1.274e-01, 1.552e-01, 2.627e-01, -1.360e-01, -4.350e-01, 2.252e-02, -3.289e-01, -9.500e-02, -9.805e-03, -1.460e-01) * s[1][0][1];
	r1 += M4(4.643e-02, 6.714e-02, -1.091e-01, -1.295e-01, -1.165e-01, 1.749e-01, -3.144e-03, -3.198e-01, -4.626e-02, -7.496e-02, -2.118e-01, -6.975e-01, 2.252e-02, -4.332e-02, 7.059e-02, 4.653e-01) * s[1][0][1];
	r0 += M4(-4.195e-01, -3.414e-02, 5.011e-02, 3.059e-01, 1.377e-01, 9.792e-02, -1.028e-01, 1.273e-01, 2.065e-01, 2.037e-02, 2.378e-01, 1.878e-01, -1.141e-02, 3.954e-02, -1.714e-01, -8.281e-02) * s[1][1][0];
	r1 += M4(1.331e-01, -4.285e-03, 3.370e-01, 4.782e-01, 7.212e-02, 4.979e-02, -8.326e-02, -1.471e-02, -2.023e-02, -7.800e-02, 1.072e-01, 9.860e-02, 3.088e-01, -6.908e-02, -1.676e-01, 1.055e-01) * s[1][1][0];
	r0 += M4(-5.826e-02, -3.126e-02, 6.491e-02, 1.911e-02, 6.020e-01, 2.236e-01, -3.457e-01, 4.870e-01, 3.157e-01, 1.613e-01, 4.216e-01, 7.300e-02, -4.180e-01, -1.335e-02, -1.679e-01, -5.210e-01) * s[1][1][1];
	r1 += M4(1.061e-01, 7.883e-02, 9.532e-02, 1.636e-01, 1.082e-01, 1.753e-01, 3.309e-02, 1.060e-01, 3.337e-01, -8.645e-03, 6.781e-02, -1.090e+00, 2.339e-01, -8.940e-02, -1.932e-01, -1.628e-01) * s[1][1][1];
	r0 += M4(-2.451e-01, 4.035e-02, 1.036e-01, 6.919e-02, 8.304e-02, 2.021e-02, 2.450e-02, 6.128e-02, 8.702e-02, -6.372e-02, 2.152e-02, 2.262e-02, 7.721e-02, -1.190e-02, 1.242e-02, 9.356e-02) * s[1][2][0];
	r1 += M4(5.171e-02, 1.024e-02, -3.626e-01, -5.993e-02, -3.560e-02, 2.887e-02, 4.141e-02, -1.198e-02, -3.804e-02, -8.296e-02, -9.185e-03, -1.665e-02, -2.017e-02, 2.771e-02, -3.537e-02, -8.321e-02) * s[1][2][0];
	r0 += M4(-9.950e-02, 4.778e-02, 3.531e-02, 3.217e-02, 2.367e-01, -1.558e-02, 1.079e-01, 7.017e-02, 7.738e-03, -1.520e-01, 1.209e-01, 1.517e-02, 3.143e-03, -3.892e-02, -6.324e-02, 1.040e-02) * s[1][2][1];
	r1 += M4(-3.704e-02, 4.123e-02, -2.765e-02, 3.226e-02, -3.537e-02, 5.257e-03, 1.701e-02, -6.135e-02, -5.279e-02, -1.025e-01, 2.148e-01, 2.692e-01, 5.807e-02, 1.099e-02, -2.905e-03, -1.759e-02) * s[1][2][1];
	r0 += M4(-2.311e-02, 2.679e-02, 3.690e-02, -1.360e-02, -3.134e-02, -3.972e-02, -5.421e-02, -2.497e-02, 5.814e-02, 3.943e-02, 1.122e-01, -2.012e-02, 4.698e-02, 3.916e-02, -5.053e-02, 9.420e-02) * s[2][0][0];
	r1 += M4(2.292e-03, 6.178e-02, -1.184e-04, 4.811e-03, -1.280e-02, -9.082e-02, 3.926e-02, 3.005e-02, 2.878e-02, 1.294e-01, -3.525e-02, -1.439e-02, -4.551e-03, -1.847e-02, 1.837e-02, -1.223e-02) * s[2][0][0];
	r0 += M4(3.819e-02, 3.032e-02, 9.695e-02, -2.101e-02, -1.066e-01, 5.523e-02, -3.100e-03, -7.300e-02, -2.575e-01, 4.136e-02, 3.546e-02, 6.912e-02, 1.877e-01, -9.352e-02, -2.200e-01, 2.871e-01) * s[2][0][1];
	r1 += M4(2.654e-02, 7.011e-02, -1.586e-02, 1.182e-02, -3.772e-02, 2.471e-02, 9.951e-03, 5.344e-02, 7.849e-02, 4.828e-02, -1.114e-01, 1.426e-01, 9.322e-02, -3.901e-02, -8.506e-02, -1.050e-01) * s[2][0][1];
	r0 += M4(1.101e-01, 9.899e-03, -1.623e-02, 1.570e-02, -1.572e-02, -1.423e-02, 8.130e-02, 2.783e-03, 9.843e-02, 3.680e-02, -3.583e-02, 1.295e-02, 2.056e-02, -1.009e-01, 6.189e-02, 2.275e-02) * s[2][1][0];
	r1 += M4(-1.319e-02, 4.601e-02, -3.922e-03, -2.202e-02, 2.458e-02, -5.469e-03, -3.780e-03, -6.136e-03, -1.191e-03, 2.187e-01, -3.699e-02, -9.472e-02, 1.955e-02, -2.275e-01, -3.927e-02, -4.244e-02) * s[2][1][0];
	r0 += M4(2.755e-02, 4.720e-03, -5.455e-02, 1.466e-02, -1.639e-01, -2.640e-02, 6.461e-02, -2.009e-01, -2.803e-01, -4.642e-02, -7.943e-02, 1.547e-02, 3.398e-01, -1.565e-02, -1.642e-02, 1.342e-01) * s[2][1][1];
	r1 += M4(1.375e-02, 9.445e-02, 1.427e-02, -9.389e-02, -2.346e-02, -7.643e-02, -2.964e-02, 2.080e-01, -1.854e-01, -2.347e-02, 5.290e-02, -2.596e-01, 1.591e-02, -5.902e-01, 8.045e-03, 3.837e-02) * s[2][1][1];
	r0 += M4(1.873e-01, 5.478e-02, -5.169e-02, 3.919e-02, 4.639e-02, 3.626e-02, -4.584e-02, 1.664e-02, -2.613e-02, 7.904e-03, -2.156e-02, -8.050e-03, 8.641e-02, 4.157e-03, -3.867e-03, 1.655e-02) * s[2][2][0];
	r1 += M4(3.649e-03, 1.145e-01, -7.279e-02, -6.374e-02, 9.794e-04, 6.774e-02, -6.233e-03, -2.362e-02, 1.608e-03, 5.302e-02, -7.036e-03, 6.983e-03, 1.812e-02, 6.014e-02, -1.858e-03, -1.741e-02) * s[2][2][0];
	r0 += M4(6.135e-02, 8.359e-02, -2.183e-02, 3.956e-02, 1.223e-01, 1.388e-02, -2.212e-01, -7.251e-02, -1.163e-01, -1.387e-02, 3.440e-02, 8.130e-02, 5.067e-02, -3.503e-02, 6.639e-02, 3.463e-02) * s[2][2][1];
	r1 += M4(-1.543e-02, 1.215e-01, 2.460e-02, -1.717e-03, -4.481e-02, 3.864e-03, -1.180e-02, -1.278e-02, -4.431e-02, 5.973e-02, 2.340e-01, 4.413e-02, 5.726e-02, -7.808e-02, -1.387e-03, -1.286e-02) * s[2][2][1];
	r0 += V4(3.126e-02, 1.254e-02, 2.242e-02, 2.048e-02);
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(1.259e-02, 5.295e-03, 7.429e-03, -2.425e-03);
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-6x8C-out-shuffle
//!HOOK LUMA
//!COMPUTE 16 16 8 8
//!BIND LUMA
//!BIND conv6
//!BIND easu
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 1
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(conv6_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0)) + vec2(0.5)) * conv6_pt))
#define l1(x, y) V4(conv6_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0)) + vec2(0.5)) * conv6_pt))
shared V4 g[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv6_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			g[0][ay][ax] = l0(x - 1, y - 1);
			g[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s[3][3][2];
	V4 r0 = V4(0.0);
	s[0][0][0] = max(g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[0][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[0][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[0][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[0][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[0][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[0][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(-1.028e-01, 7.146e-02, -3.826e-02, 2.125e-02, -7.215e-02, 2.836e-02, -3.490e-02, -4.800e-03, 9.088e-02, -3.762e-02, 2.112e-02, -4.057e-03, 4.042e-02, -2.590e-02, 6.974e-03, -1.071e-02) * s[0][0][0];
	r0 += M4(-8.391e-02, 6.470e-02, -3.943e-02, 2.063e-02, -1.250e-01, 7.648e-02, -1.107e-02, 3.581e-02, -4.583e-02, -6.810e-02, 9.693e-02, 3.384e-02, 4.036e-02, -2.618e-02, 1.674e-02, -1.603e-02) * s[0][0][1];
	r0 += M4(3.615e-02, -2.113e-01, 6.546e-02, -3.577e-02, -1.273e-02, -2.268e-02, 2.671e-02, 5.562e-03, -6.909e-02, 1.274e-01, -8.396e-03, 1.764e-02, -2.452e-02, 8.148e-02, -3.453e-02, 1.003e-02) * s[0][1][0];
	r0 += M4(-1.194e-03, -1.733e-01, 7.834e-02, -1.785e-02, 1.283e-01, -1.704e-01, 6.428e-02, 1.111e-01, 3.096e-02, 2.605e-02, -5.458e-02, 1.479e-03, -6.860e-02, 6.131e-02, 8.813e-03, 4.256e-02) * s[0][1][1];
	r0 += M4(-2.861e-03, 4.089e-02, -3.457e-03, 1.922e-02, 1.612e-02, 2.871e-02, 4.146e-03, 6.044e-02, 6.367e-03, -2.704e-02, 2.627e-03, -3.904e-03, -2.060e-03, -4.569e-02, -6.343e-03, -2.716e-02) * s[0][2][0];
	r0 += M4(-2.635e-03, 4.924e-03, 3.173e-03, 3.948e-02, -1.657e-02, 1.986e-01, -1.096e-02, -1.308e-02, -7.501e-03, 3.714e-02, -2.418e-04, -2.286e-02, -4.952e-03, -5.828e-02, -1.733e-02, -1.662e-02) * s[0][2][1];
	r0 += M4(-6.258e-02, 1.107e-02, -1.276e-01, 5.879e-02, 2.381e-02, -4.556e-05, -5.767e-02, 4.288e-02, -1.908e-02, -8.757e-03, 9.399e-02, -4.271e-02, -3.214e-02, -1.448e-02, 3.220e-02, -2.308e-02) * s[1][0][0];
	r0 += M4(-3.160e-02, 2.606e-02, -2.047e-01, 4.777e-02, 5.637e-02, -5.506e-02, -6.596e-03, 9.594e-03, 5.576e-02, 6.194e-02, 1.950e-01, -1.646e-01, -1.751e-02, 2.579e-03, -5.620e-03, -2.130e-02) * s[1][0][1];
	r0 += M4(-1.057e-01, -1.362e-01, -1.122e-01, -3.032e-01, -4.592e-02, 2.307e-02, -7.540e-02, -3.639e-02, -6.238e-02, 1.945e-01, -1.223e-01, 2.755e-01, 3.506e-01, 1.103e-01, 1.548e-01, 1.293e-01) * s[1][1][0];
	r0 += M4(1.709e-02, -3.718e-02, -2.860e-01, -4.581e-01, 1.757e-01, 4.650e-01, -4.141e-01, -2.311e-01, -1.860e-01, 2.134e-02, -2.308e-02, 5.566e-01, 5.507e-01, 2.322e-01, 3.386e-02, 4.794e-02) * s[1][1][1];
	r0 += M4(1.686e-02, -2.450e-03, 7.573e-03, 2.002e-02, 2.326e-02, 5.520e-03, 6.061e-02, 3.839e-02, 2.768e-02, -3.150e-02, 2.166e-02, -2.886e-02, -7.480e-02, 2.999e-02, -3.070e-02, -4.111e-02) * s[1][2][0];
	r0 += M4(2.864e-02, 5.578e-02, 1.081e-02, -4.558e-02, 6.291e-02, -1.067e-01, 1.461e-01, 3.861e-02, 4.886e-02, -2.166e-02, 6.372e-02, -6.180e-02, -6.513e-02, 1.556e-01, -4.355e-02, -1.062e-01) * s[1][2][1];
	r0 += M4(1.642e-02, -5.795e-04, 1.189e-02, -4.106e-03, -1.652e-02, 2.536e-03, 3.823e-02, -3.039e-03, -6.337e-03, 5.583e-03, -4.953e-02, 1.120e-02, -1.812e-02, 9.127e-03, -5.743e-02, 4.663e-03) * s[2][0][0];
	r0 += M4(3.573e-03, -5.309e-03, 3.211e-02, 1.448e-03, 1.557e-02, 2.301e-02, -3.922e-02, 2.436e-02, 1.675e-02, 1.150e-02, -1.333e-01, 4.179e-03, -2.499e-02, -6.717e-03, -4.993e-02, 7.049e-03) * s[2][0][1];
	r0 += M4(1.328e-02, 1.813e-02, 1.776e-03, 8.129e-03, -8.519e-03, -2.656e-02, -2.430e-02, 1.794e-02, 9.733e-03, -1.414e-03, 2.524e-03, 2.867e-02, 3.319e-02, -3.981e-02, 2.124e-01, -2.440e-02) * s[2][1][0];
	r0 += M4(-2.454e-02, -1.407e-02, 3.492e-02, 4.064e-02, -8.144e-02, -9.692e-02, 1.470e-01, -8.804e-03, 1.568e-02, 3.887e-02, -6.660e-03, -8.765e-02, 1.449e-02, -2.578e-02, 2.025e-01, -4.057e-03) * s[2][1][1];
	r0 += M4(-5.265e-03, -2.509e-03, -1.487e-03, 2.337e-03, -7.276e-03, 2.867e-03, -3.010e-02, -5.812e-02, -5.015e-03, -2.071e-02, 5.391e-03, -5.237e-02, 4.097e-03, 5.516e-02, -3.666e-02, 1.027e-01) * s[2][2][0];
	r0 += M4(-3.021e-03, -1.669e-02, -4.828e-03, 1.306e-02, -3.001e-02, -5.592e-02, -3.904e-02, 4.399e-02, -1.968e-02, -4.037e-02, -1.113e-02, -2.827e-02, -4.469e-03, 3.720e-02, -3.139e-02, 1.116e-01) * s[2][2][1];
	s[0][0][0] = max(g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[1][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[1][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[1][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[1][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[1][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[1][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(-3.299e-02, 2.362e-02, -1.334e-02, 5.042e-03, 6.962e-02, -3.773e-02, 3.476e-02, -1.685e-03, -2.138e-03, 7.660e-03, -2.799e-03, -3.924e-03, -5.882e-02, 3.696e-02, -2.442e-02, 1.173e-02) * s[0][0][0];
	r0 += M4(-4.217e-02, 2.544e-02, -6.959e-03, 1.119e-02, 7.797e-03, -3.471e-02, 4.899e-02, 1.327e-02, 5.673e-03, -9.003e-03, -1.148e-02, -8.518e-03, -6.372e-02, 3.723e-02, -2.180e-02, 1.032e-02) * s[0][0][1];
	r0 += M4(4.154e-02, -7.476e-02, 2.031e-02, -2.423e-02, -9.098e-02, 2.421e-02, -2.145e-03, 2.593e-02, 6.323e-02, -3.709e-02, 1.340e-02, 6.147e-03, 4.867e-02, -1.194e-01, 3.257e-02, -2.464e-02) * s[0][1][0];
	r0 += M4(4.399e-02, -5.986e-02, 2.760e-02, -2.427e-03, -4.075e-01, -1.859e-01, 2.983e-01, 1.950e-01, 3.981e-02, 1.443e-02, 4.774e-03, -9.453e-03, 2.642e-02, -1.052e-01, 2.982e-02, -1.595e-02) * s[0][1][1];
	r0 += M4(-6.691e-03, 1.983e-02, 7.418e-03, 1.047e-02, 9.424e-03, -3.777e-02, -1.416e-02, -2.810e-02, -1.525e-02, 1.724e-02, -6.755e-03, -5.263e-03, -6.062e-03, 2.030e-02, 1.066e-03, 5.906e-03) * s[0][2][0];
	r0 += M4(-4.432e-03, 3.380e-02, 3.699e-04, 6.643e-03, -2.322e-02, -2.173e-01, -7.013e-03, 1.294e-01, -7.279e-03, -5.291e-03, -2.074e-04, 8.410e-03, 3.876e-03, 1.667e-02, -4.074e-03, 7.312e-03) * s[0][2][1];
	r0 += M4(1.421e-01, -6.519e-02, 2.244e-02, 1.191e-02, 9.694e-02, -9.181e-03, 1.170e-01, -4.711e-02, 4.118e-02, -3.937e-02, -2.458e-03, 1.889e-03, -2.370e-02, 8.620e-03, -7.046e-02, 2.349e-02) * s[1][0][0];
	r0 += M4(1.728e-01, -5.085e-02, -3.092e-02, -1.302e-02, 1.112e-01, -4.626e-03, 1.267e-01, -4.812e-02, 9.625e-02, -8.126e-02, 2.284e-02, -3.046e-02, -2.994e-02, -4.078e-03, -7.349e-02, 2.404e-02) * s[1][0][1];
	r0 += M4(-1.681e-01, 1.466e-01, -7.249e-02, -5.099e-02, -1.127e-01, -6.600e-02, -1.256e-01, 3.663e-03, 6.374e-02, 9.400e-02, 1.335e-01, -2.771e-02, 1.219e-01, -1.530e-01, 3.421e-02, -2.231e-01) * s[1][1][0];
	r0 += M4(-1.518e-01, 1.889e-01, -9.939e-02, -5.635e-02, -2.055e-02, -1.679e-02, -1.948e-01, 5.749e-03, -4.417e-02, 2.760e-01, 6.714e-02, 1.804e-01, 4.334e-02, -1.226e-01, -3.486e-04, -1.839e-01) * s[1][1][1];
	r0 += M4(3.137e-02, -3.628e-02, 2.484e-03, 1.323e-03, 6.326e-03, 1.599e-02, 1.511e-02, -1.014e-02, -4.491e-02, 1.310e-02, -5.177e-02, 4.480e-02, 1.875e-03, 6.257e-02, 5.018e-03, 4.867e-02) * s[1][2][0];
	r0 += M4(3.159e-02, -4.718e-02, 1.046e-02, -2.698e-03, 9.375e-03, 7.531e-02, 5.624e-03, -7.466e-02, -2.289e-03, -5.943e-02, -7.551e-03, -4.236e-02, -2.711e-03, 9.298e-02, 6.043e-03, 4.232e-02) * s[1][2][1];
	r0 += M4(2.059e-02, -1.721e-02, 1.209e-01, -7.837e-02, 6.742e-03, -1.881e-02, 3.871e-02, -1.295e-02, 3.025e-02, -1.077e-02, 7.057e-02, -4.452e-02, 1.898e-02, -3.883e-03, 2.744e-02, 1.714e-03) * s[2][0][0];
	r0 += M4(-1.704e-01, -7.480e-02, 2.824e-01, 8.037e-03, 6.082e-03, -7.431e-03, 4.968e-02, -1.132e-02, 3.210e-02, -1.656e-02, 1.126e-01, -7.740e-02, 2.206e-02, -8.100e-03, 2.921e-02, -7.850e-03) * s[2][0][1];
	r0 += M4(-5.432e-02, -3.255e-02, -1.252e-01, 1.087e-01, 2.974e-02, 4.624e-02, -1.832e-02, 2.011e-02, -5.176e-02, 2.167e-02, -7.688e-02, 8.975e-02, 7.349e-02, 7.738e-03, 1.792e-01, -1.748e-02) * s[2][1][0];
	r0 += M4(-1.401e-01, -2.568e-01, -1.280e-02, 3.021e-01, 1.058e-02, 2.726e-02, -3.266e-02, 1.535e-02, -4.581e-02, 1.727e-02, -1.082e-01, 1.215e-01, 4.397e-02, 4.062e-02, 9.790e-02, 2.190e-02) * s[2][1][1];
	r0 += M4(7.172e-03, 1.732e-02, 3.137e-02, -2.008e-04, -2.254e-03, 7.435e-03, 1.541e-02, 2.948e-02, 2.908e-03, -2.006e-02, -7.907e-03, -2.825e-02, 8.261e-03, 6.738e-02, 1.186e-02, 8.750e-02) * s[2][2][0];
	r0 += M4(-2.864e-02, -7.688e-04, 6.067e-02, 4.232e-02, -4.898e-03, -1.842e-03, 1.178e-02, 2.245e-02, 1.533e-03, -1.221e-02, -3.913e-03, -3.965e-02, 1.503e-02, 5.047e-02, 1.739e-02, 1.165e-01) * s[2][2][1];
	r0 += V4(3.685e-03, -2.288e-04, 3.746e-03, -5.049e-04);
	r0 = tanh(r0);
	vec2 opt = 0.5 * LUMA_pt;
	vec2 fpos = (vec2(opos) + vec2(0.5)) * opt;
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0.x + easu_tex(fpos + vec2(0.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r0.y + easu_tex(fpos + vec2(1.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(0, 1), vec4(r0.z + easu_tex(fpos + vec2(0.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 1), vec4(r0.w + easu_tex(fpos + vec2(1.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
}
