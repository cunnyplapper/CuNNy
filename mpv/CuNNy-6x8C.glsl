// CuNNy 6x8C
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

// FSR mpv | modified
// Copyright (c) 2021 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// FidelityFX FSR v1.0.2 by AMD
// ported to mpv by agyild

//!DESC CuNNy-6x8C-EASU
//!HOOK LUMA
//!BIND LUMA
//!SAVE easu
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
//!COMPONENTS 1

float APrxLoRcpF1(float a) {
	return uintBitsToFloat(uint(0x7ef07ebb) - floatBitsToUint(a));
}

float APrxLoRsqF1(float a) {
	return uintBitsToFloat(uint(0x5f347d74) - (floatBitsToUint(a) >> uint(1)));
}

float AMin3F1(float x, float y, float z) {
	return min(x, min(y, z));
}

float AMax3F1(float x, float y, float z) {
	return max(x, max(y, z));
}

void tap(inout float aC, inout float aW, vec2 off, vec2 dir, vec2 len,
         float lob, float clp, float c){
	vec2 v;
	v.x = (off.x * ( dir.x)) + (off.y * dir.y);
	v.y = (off.x * (-dir.y)) + (off.y * dir.x);
	v *= len;
	float d2 = v.x * v.x + v.y * v.y;
	d2 = min(d2, clp);
	float wB = float(2.0 / 5.0) * d2 + -1.0;
	float wA = lob * d2 + -1.0;
	wB *= wB;
	wA *= wA;
	wB = float(25.0 / 16.0) * wB + float(-(25.0 / 16.0 - 1.0));
	float w = wB * wA;
	aC += c * w;
	aW += w;
}

void set(inout vec2 dir, inout float len, vec2 pp, bool biS, bool biT,
         bool biU, bool biV, float lA, float lB, float lC, float lD, float lE){
	float w = 0.0;
	if (biS)
		w = (1.0 - pp.x) * (1.0 - pp.y);
	if (biT)
		w =        pp.x  * (1.0 - pp.y);
	if (biU)
		w = (1.0 - pp.x) *        pp.y;
	if (biV)
		w =        pp.x  *        pp.y;
	float dc = lD - lC;
	float cb = lC - lB;
	float lenX = max(abs(dc), abs(cb));
	lenX = APrxLoRcpF1(lenX);
	float dirX = lD - lB;
	lenX = clamp(abs(dirX) * lenX, 0.0, 1.0);
	lenX *= lenX;
	float ec = lE - lC;
	float ca = lC - lA;
	float lenY = max(abs(ec), abs(ca));
	lenY = APrxLoRcpF1(lenY);
	float dirY = lE - lA;
	lenY = clamp(abs(dirY) * lenY, 0.0, 1.0);
	lenY *= lenY;
	dir += vec2(dirX, dirY) * w;
	len += dot(vec2(w), vec2(lenX, lenY));
}

vec4 hook() {
	vec4 pix = vec4(0.0, 0.0, 0.0, 1.0);
	vec2 pp = LUMA_pos * LUMA_size - vec2(0.5);
	vec2 fp = floor(pp);
	pp -= fp;
#if (defined(LUMA_gather) && (__VERSION__ >= 400 || (GL_ES && __VERSION__ >= 310)))
	vec4 bczzL = LUMA_gather(vec2((fp + vec2(1.0, -1.0)) * LUMA_pt), 0);
	vec4 ijfeL = LUMA_gather(vec2((fp + vec2(0.0,  1.0)) * LUMA_pt), 0);
	vec4 klhgL = LUMA_gather(vec2((fp + vec2(2.0,  1.0)) * LUMA_pt), 0);
	vec4 zzonL = LUMA_gather(vec2((fp + vec2(1.0,  3.0)) * LUMA_pt), 0);
#else
	float b = LUMA_tex(vec2((fp + vec2(0.5, -0.5)) * LUMA_pt)).r;
	float c = LUMA_tex(vec2((fp + vec2(1.5, -0.5)) * LUMA_pt)).r;
	float e = LUMA_tex(vec2((fp + vec2(-0.5, 0.5)) * LUMA_pt)).r;
	float f = LUMA_tex(vec2((fp + vec2( 0.5, 0.5)) * LUMA_pt)).r;
	float g = LUMA_tex(vec2((fp + vec2( 1.5, 0.5)) * LUMA_pt)).r;
	float h = LUMA_tex(vec2((fp + vec2( 2.5, 0.5)) * LUMA_pt)).r;
	float i = LUMA_tex(vec2((fp + vec2(-0.5, 1.5)) * LUMA_pt)).r;
	float j = LUMA_tex(vec2((fp + vec2( 0.5, 1.5)) * LUMA_pt)).r;
	float k = LUMA_tex(vec2((fp + vec2( 1.5, 1.5)) * LUMA_pt)).r;
	float l = LUMA_tex(vec2((fp + vec2( 2.5, 1.5)) * LUMA_pt)).r;
	float n = LUMA_tex(vec2((fp + vec2(0.5, 2.5) ) * LUMA_pt)).r;
	float o = LUMA_tex(vec2((fp + vec2(1.5, 2.5) ) * LUMA_pt)).r;
	vec4 bczzL = vec4(b, c, 0.0, 0.0);
	vec4 ijfeL = vec4(i, j, f, e);
	vec4 klhgL = vec4(k, l, h, g);
	vec4 zzonL = vec4(0.0, 0.0, o, n);
#endif
	float bL = bczzL.x;
	float cL = bczzL.y;
	float iL = ijfeL.x;
	float jL = ijfeL.y;
	float fL = ijfeL.z;
	float eL = ijfeL.w;
	float kL = klhgL.x;
	float lL = klhgL.y;
	float hL = klhgL.z;
	float gL = klhgL.w;
	float oL = zzonL.z;
	float nL = zzonL.w;
	vec2 dir = vec2(0.0);
	float len = 0.0;
	set(dir, len, pp, true, false, false, false, bL, eL, fL, gL, jL);
	set(dir, len, pp, false, true, false, false, cL, fL, gL, hL, kL);
	set(dir, len, pp, false, false, true, false, fL, iL, jL, kL, nL);
	set(dir, len, pp, false, false, false, true, gL, jL, kL, lL, oL);
	vec2 dir2 = dir * dir;
	float dirR = dir2.x + dir2.y;
	bool zro = dirR < float(1.0 / 32768.0);
	dirR = APrxLoRsqF1(dirR);
	dirR = zro ? 1.0 : dirR;
	dir.x = zro ? 1.0 : dir.x;
	dir *= vec2(dirR);
	len = len * 0.5;
	len *= len;
	float stretch = (dir.x * dir.x + dir.y * dir.y) * APrxLoRcpF1(max(abs(dir.x), abs(dir.y)));
	vec2 len2 = vec2(1.0 + (stretch - 1.0) * len, 1.0 + -0.5 * len);
	float lob = 0.5 + float((1.0 / 4.0 - 0.04) - 0.5) * len;
	float clp = APrxLoRcpF1(lob);
	float aC = 0.0;
	float aW = 0.0;
	tap(aC, aW, vec2( 0.0,-1.0) - pp, dir, len2, lob, clp, bL);
	tap(aC, aW, vec2( 1.0,-1.0) - pp, dir, len2, lob, clp, cL);
	tap(aC, aW, vec2(-1.0, 1.0) - pp, dir, len2, lob, clp, iL);
	tap(aC, aW, vec2( 0.0, 1.0) - pp, dir, len2, lob, clp, jL);
	tap(aC, aW, vec2( 0.0, 0.0) - pp, dir, len2, lob, clp, fL);
	tap(aC, aW, vec2(-1.0, 0.0) - pp, dir, len2, lob, clp, eL);
	tap(aC, aW, vec2( 1.0, 1.0) - pp, dir, len2, lob, clp, kL);
	tap(aC, aW, vec2( 2.0, 1.0) - pp, dir, len2, lob, clp, lL);
	tap(aC, aW, vec2( 2.0, 0.0) - pp, dir, len2, lob, clp, hL);
	tap(aC, aW, vec2( 1.0, 0.0) - pp, dir, len2, lob, clp, gL);
	tap(aC, aW, vec2( 1.0, 2.0) - pp, dir, len2, lob, clp, oL);
	tap(aC, aW, vec2( 0.0, 2.0) - pp, dir, len2, lob, clp, nL);
	pix.r = aC / aW;
	float min1 = min(AMin3F1(fL, gL, jL), kL);
	float max1 = max(AMax3F1(fL, gL, jL), kL);
	pix.r = clamp(pix.r, min1, max1);
	pix.r = clamp(pix.r, 0.0, 1.0);
	return pix;
}


//!DESC CuNNy-6x8C-in
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND LUMA
//!SAVE in
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) F(texelFetch(LUMA_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(1, 1) + ivec2(0, 0), 0).r)
shared F g[1][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = LUMA_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			g[0][ay][ax] = l0(x - 1, y - 1);
		}
	}
	barrier();
	F s[3][3][1];
	V4 r0 = V4(0.0);
	V4 r1 = V4(0.0);
	s[0][0][0] = g[0][xy.y+0][xy.x+0];
	s[0][1][0] = g[0][xy.y+0][xy.x+1];
	s[0][2][0] = g[0][xy.y+0][xy.x+2];
	s[1][0][0] = g[0][xy.y+1][xy.x+0];
	s[1][1][0] = g[0][xy.y+1][xy.x+1];
	s[1][2][0] = g[0][xy.y+1][xy.x+2];
	s[2][0][0] = g[0][xy.y+2][xy.x+0];
	s[2][1][0] = g[0][xy.y+2][xy.x+1];
	s[2][2][0] = g[0][xy.y+2][xy.x+2];
	r0 += V4(9.876e-02, 1.845e-02, 3.160e-02, -7.341e-02) * s[0][0][0];
	r1 += V4(1.323e-01, 1.887e-02, -2.093e-01, -5.480e-02) * s[0][0][0];
	r0 += V4(-1.503e-01, -1.375e-01, -6.470e-02, -2.028e-01) * s[0][1][0];
	r1 += V4(4.838e-03, 1.989e-02, 1.288e-01, 3.728e-02) * s[0][1][0];
	r0 += V4(1.827e-02, -2.055e-01, 7.736e-03, 1.193e-01) * s[0][2][0];
	r1 += V4(3.090e-02, -2.941e-02, 1.475e-01, -2.247e-01) * s[0][2][0];
	r0 += V4(2.607e-01, 1.756e-02, -5.353e-02, 1.335e-01) * s[1][0][0];
	r1 += V4(-3.301e-02, -3.244e-02, -2.281e-01, -7.449e-02) * s[1][0][0];
	r0 += V4(-2.323e-01, 2.990e-01, 3.039e-01, -7.114e-02) * s[1][1][0];
	r1 += V4(2.642e-01, -2.853e-01, 3.664e-01, -1.427e-01) * s[1][1][0];
	r0 += V4(-1.403e-02, 3.772e-02, 1.216e-03, -1.479e-01) * s[1][2][0];
	r1 += V4(-2.835e-01, -1.587e-01, -1.821e-01, 8.273e-03) * s[1][2][0];
	r0 += V4(-1.901e-02, -5.830e-03, 1.179e-02, -4.452e-02) * s[2][0][0];
	r1 += V4(9.480e-02, 1.088e-02, -8.765e-02, -4.151e-02) * s[2][0][0];
	r0 += V4(2.264e-02, 1.084e-02, -2.251e-01, 2.588e-01) * s[2][1][0];
	r1 += V4(-2.652e-01, 4.033e-01, 7.251e-02, -7.216e-02) * s[2][1][0];
	r0 += V4(1.641e-02, -7.909e-03, -3.663e-02, 2.857e-02) * s[2][2][0];
	r1 += V4(6.379e-02, 5.257e-02, 1.914e-02, 7.580e-03) * s[2][2][0];
	r0 += V4(-9.882e-03, -7.493e-03, -3.012e-03, 1.165e-03);
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(4.687e-03, 3.558e-04, -5.256e-02, 1.915e-03);
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-6x8C-conv1
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND in
//!BIND LUMA
//!SAVE conv1
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 g[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = in_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			g[0][ay][ax] = l0(x - 1, y - 1);
			g[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s[3][3][2];
	V4 r0 = V4(0.0);
	V4 r1 = V4(0.0);
	s[0][0][0] = max(g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[0][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[0][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[0][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[0][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[0][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[0][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(9.370e-02, 1.759e-01, 6.760e-02, 2.589e-02, 1.338e-01, -2.642e-01, 3.272e-02, 1.168e-01, -2.920e-02, -3.879e-01, 1.185e-01, -4.685e-01, -4.744e-02, 2.581e-02, -5.096e-02, -2.146e-01) * s[0][0][0];
	r1 += M4(4.588e-02, -2.027e-01, -1.227e-01, 8.990e-02, -1.028e-01, 2.967e-03, 3.057e-02, 5.355e-02, 2.676e-02, 2.459e-02, 2.817e-02, -1.159e-01, 3.123e-02, -3.052e-02, -1.251e-01, 2.413e-02) * s[0][0][0];
	r0 += M4(-5.999e-02, 7.888e-03, -5.530e-02, 4.142e-02, 1.120e-01, -1.955e-01, -1.812e-01, 7.831e-02, -2.666e-02, -2.051e-01, 1.592e-01, 1.257e-01, -1.050e-01, -1.731e-01, -9.485e-02, -7.463e-02) * s[0][0][1];
	r1 += M4(1.491e-01, -1.509e-01, -4.755e-02, 1.000e-01, -2.445e-01, -2.557e-02, -1.255e-01, 9.601e-02, -3.885e-02, 5.669e-02, -2.241e-01, 2.167e-02, -1.088e-01, -2.672e-02, -6.264e-02, 6.324e-02) * s[0][0][1];
	r0 += M4(2.296e-01, 1.029e-01, -4.526e-02, 8.057e-02, -4.046e-02, -1.004e-01, 1.107e-02, -1.128e-01, -3.731e-01, -5.735e-03, 6.386e-01, 6.104e-01, -1.746e-02, 1.529e-01, -7.215e-02, 5.449e-02) * s[0][1][0];
	r1 += M4(2.836e-01, 2.928e-02, -3.332e-01, 6.565e-03, -4.668e-02, 1.852e-02, -7.304e-02, 3.943e-02, 3.418e-01, 5.248e-02, 5.440e-02, -4.886e-01, 7.223e-02, 2.666e-02, 2.998e-02, -1.116e-01) * s[0][1][0];
	r0 += M4(-6.133e-03, 1.166e-01, -1.198e-01, -8.125e-02, -1.325e-01, -1.267e-01, -1.170e-02, 8.278e-02, 1.007e-02, -1.476e-01, 1.213e-01, -1.428e-01, -8.105e-02, -1.488e-01, -4.209e-01, -6.647e-02) * s[0][1][1];
	r1 += M4(-1.034e-01, -2.530e-02, 1.316e-01, 2.649e-02, 4.354e-02, 2.822e-01, -3.490e-02, -1.529e-02, -5.151e-02, 9.633e-02, -2.735e-01, 1.168e-02, -2.312e-02, 1.270e-01, 1.507e-01, -1.453e-01) * s[0][1][1];
	r0 += M4(3.236e-01, -3.144e-01, 6.531e-03, -2.252e-01, 9.817e-02, 1.872e-01, -7.713e-02, 5.192e-02, -4.476e-02, 1.860e-01, 3.634e-01, 1.031e-01, -6.384e-02, -3.655e-02, -4.711e-02, -1.236e-02) * s[0][2][0];
	r1 += M4(-1.621e-01, -4.281e-02, 1.765e-01, -1.503e-01, -1.392e-01, 2.081e-01, -8.179e-02, -7.787e-02, 4.091e-02, -6.769e-02, -2.884e-03, -9.392e-02, -4.727e-02, 1.412e-01, -6.695e-02, -7.628e-02) * s[0][2][0];
	r0 += M4(1.038e-01, -3.097e-01, 8.916e-02, -2.164e-01, 2.379e-02, 1.138e-01, -9.663e-02, -3.299e-02, 3.426e-03, -7.951e-03, 1.541e-01, 8.059e-02, -6.121e-02, 1.870e-01, -1.294e-01, -1.941e-01) * s[0][2][1];
	r1 += M4(2.663e-02, -6.299e-02, 2.696e-01, -1.032e-01, -2.192e-01, 2.725e-01, -1.182e-01, -4.340e-02, 2.372e-01, -4.301e-02, -4.343e-02, -1.132e-01, -9.416e-02, 1.784e-01, -2.863e-01, -5.974e-02) * s[0][2][1];
	r0 += M4(6.710e-02, -8.259e-02, -1.715e-01, -4.937e-03, 5.938e-05, -8.482e-02, 1.340e-02, 3.198e-01, -6.934e-01, -2.147e-01, -1.449e-01, 1.899e-01, -6.233e-02, 9.385e-02, 2.978e-02, 5.539e-02) * s[1][0][0];
	r1 += M4(2.102e-01, -6.776e-02, -3.683e-01, 2.104e-03, -6.594e-02, -9.110e-02, -1.132e-01, 2.620e-02, 1.711e-01, 1.826e-02, 2.862e-02, -1.700e-01, -1.254e-01, 7.413e-02, -1.258e-02, 1.741e-01) * s[1][0][0];
	r0 += M4(-1.087e-01, -1.246e-01, 1.325e-02, -5.743e-02, -1.629e-01, -6.744e-02, 1.214e-01, 1.526e-02, -3.751e-02, -1.179e-01, -1.299e-01, 2.443e-01, 3.664e-02, 9.546e-02, 3.094e-01, -4.364e-03) * s[1][0][1];
	r1 += M4(1.061e-02, 5.993e-02, 1.924e-02, 9.803e-03, -1.431e-01, -1.243e-01, -1.322e-01, 1.117e-01, -5.649e-02, -3.081e-02, -1.835e-02, -7.122e-02, -7.835e-02, 6.042e-02, -7.743e-02, 1.859e-01) * s[1][0][1];
	r0 += M4(5.858e-01, 1.440e-02, -4.354e-02, -2.678e-01, 1.970e-01, -6.165e-02, -8.563e-02, -1.597e-01, -2.915e-01, 1.482e-01, 8.760e-02, -3.169e-02, -1.569e-02, 1.777e-01, 3.924e-03, 3.056e-01) * s[1][1][0];
	r1 += M4(4.874e-01, -2.998e-01, -4.542e-01, 7.491e-03, -1.696e-01, 2.082e-01, 1.529e-01, -1.672e-01, 9.551e-01, -1.142e-01, 6.754e-01, -2.747e-01, 2.718e-01, -1.935e-02, 1.669e-01, -4.856e-02) * s[1][1][0];
	r0 += M4(-3.634e-01, -5.465e-01, -1.653e-01, 1.128e-01, 3.502e-02, -1.978e-01, -2.325e-01, 1.890e-02, 2.426e-01, 1.572e-01, -1.334e-01, 1.954e-02, -2.794e-01, 1.265e-01, 1.057e-03, -1.892e-01) * s[1][1][1];
	r1 += M4(-1.432e-01, -2.122e-01, 8.580e-02, 9.784e-02, -2.027e-01, 9.745e-03, 2.511e-01, 2.270e-01, -4.050e-01, 1.695e-01, 5.225e-01, -4.941e-02, 5.848e-02, -7.274e-03, 2.187e-01, 5.600e-02) * s[1][1][1];
	r0 += M4(4.068e-01, 5.803e-01, 5.083e-02, 4.513e-01, 1.393e-02, -6.792e-02, 1.525e-01, -4.817e-02, -1.408e-02, -7.419e-02, 9.946e-02, -3.966e-01, 5.289e-03, 1.862e-01, -9.327e-02, 7.426e-02) * s[1][2][0];
	r1 += M4(2.284e-01, -3.403e-02, 4.376e-01, 2.123e-01, 2.635e-01, 1.677e-01, 5.545e-02, -5.814e-02, -9.772e-02, -1.360e-01, -7.489e-02, -6.280e-02, -2.648e-01, -2.311e-01, 1.878e-01, -1.784e-01) * s[1][2][0];
	r0 += M4(-8.686e-02, -2.030e-01, -6.083e-02, 5.401e-01, -1.241e-02, -1.223e-03, 3.562e-01, 2.014e-01, 9.428e-02, 4.590e-02, 9.348e-02, -1.421e-01, -2.308e-02, 1.007e-02, -2.317e-01, 1.876e-01) * s[1][2][1];
	r1 += M4(-2.251e-01, 3.910e-02, 6.359e-01, -1.186e-01, 1.945e-01, 2.160e-01, 1.644e-01, 1.910e-02, 1.604e-01, -1.479e-01, -3.960e-02, 6.209e-02, 1.286e-01, -1.444e-01, 3.113e-01, -1.696e-01) * s[1][2][1];
	r0 += M4(1.223e-01, 1.817e-02, 2.203e-01, -1.094e-01, -2.250e-01, -1.763e-02, -2.110e-01, 2.520e-01, -1.746e-01, 2.349e-01, -3.105e-02, 4.665e-02, 3.039e-01, 2.563e-01, 1.782e-01, -4.500e-02) * s[2][0][0];
	r1 += M4(-5.678e-02, 3.013e-03, -2.128e-01, -4.567e-02, 1.730e-02, 7.886e-02, 3.108e-02, 7.983e-02, -1.489e-01, 5.894e-02, 8.201e-02, 1.037e-01, 3.228e-01, -1.288e-01, -1.078e-01, 8.997e-02) * s[2][0][0];
	r0 += M4(1.216e-01, -2.316e-02, -2.364e-03, -1.048e-02, -4.337e-01, -3.233e-01, -2.158e-01, 4.457e-01, 1.305e-01, 7.749e-02, -1.123e-01, 1.198e-01, 6.542e-02, 2.440e-01, 9.472e-02, -7.743e-02) * s[2][0][1];
	r1 += M4(-4.449e-02, 1.741e-02, -1.070e-01, -4.614e-02, 1.007e-01, -3.451e-02, 4.918e-02, -1.006e-01, -3.320e-02, 9.634e-02, -5.462e-02, 8.870e-02, 2.850e-01, -1.369e-01, -1.242e-01, 7.088e-02) * s[2][0][1];
	r0 += M4(-4.711e-01, 2.994e-01, 3.307e-01, -6.690e-01, -1.386e-01, -1.284e-02, 8.194e-02, -3.521e-02, -2.861e-01, 1.266e-01, 1.271e-01, 1.266e-01, 9.171e-02, -1.213e-01, 3.260e-02, 1.169e-01) * s[2][1][0];
	r1 += M4(-9.059e-02, 1.292e-01, 2.241e-01, 1.278e-01, 1.245e-02, 5.058e-02, 9.837e-02, 1.220e-01, 3.271e-01, -2.021e-03, 1.386e-01, 7.022e-02, 5.923e-02, 6.427e-03, -8.973e-02, -3.192e-02) * s[2][1][0];
	r0 += M4(8.881e-02, 4.388e-02, 7.837e-02, 1.083e-01, -5.922e-02, -3.383e-03, -1.806e-01, -4.877e-02, 2.773e-02, -2.912e-02, 2.338e-02, -7.610e-02, -3.496e-01, -8.523e-02, 1.091e-01, 1.842e-02) * s[2][1][1];
	r1 += M4(8.424e-02, 1.021e-01, -2.304e-01, -8.788e-04, 4.844e-01, 8.627e-02, -6.393e-02, -1.524e-01, 1.247e-01, -3.950e-02, -1.142e-01, 9.834e-02, 1.665e-01, 4.421e-03, -2.392e-01, -5.704e-02) * s[2][1][1];
	r0 += M4(-1.118e-01, 3.768e-01, -1.959e-01, 6.577e-02, 4.651e-02, -1.253e-02, 1.140e-02, 8.881e-02, -6.885e-02, -2.551e-01, 4.926e-02, 5.462e-02, -1.849e-02, -1.636e-02, 1.064e-01, 5.328e-02) * s[2][2][0];
	r1 += M4(-6.655e-01, -8.607e-02, 4.820e-02, 1.662e-02, 1.784e-01, -1.163e-01, 1.389e-02, -3.729e-02, 6.182e-02, 3.923e-02, 2.568e-01, -6.129e-02, 1.235e-02, -1.997e-02, 1.071e-02, 1.339e-01) * s[2][2][0];
	r0 += M4(1.963e-01, 2.454e-01, -1.677e-01, 2.842e-01, 3.334e-02, -3.576e-02, 1.332e-01, -1.443e-01, 5.613e-02, -5.916e-02, -8.265e-02, 1.406e-01, -2.611e-01, -1.529e-01, 5.372e-02, -5.837e-02) * s[2][2][1];
	r1 += M4(1.707e-01, -3.692e-02, 1.778e-01, 3.044e-02, 1.339e-01, -1.209e-01, -7.402e-03, -1.179e-01, 1.487e-02, 5.983e-02, 2.686e-01, -4.626e-02, 3.086e-03, -3.543e-02, -4.192e-02, 1.391e-01) * s[2][2][1];
	s[0][0][0] = max(g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[1][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[1][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[1][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[1][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[1][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[1][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(-1.601e-01, -3.295e-01, -6.837e-02, 6.658e-02, 2.143e-01, 3.977e-01, -3.239e-01, 1.946e-01, -1.259e-01, -3.094e-01, -4.301e-02, 1.655e-01, 1.730e+00, -8.904e-01, 3.692e+00, -2.327e+00) * s[0][0][0];
	r1 += M4(-2.256e-01, -1.742e-01, 9.534e-02, 1.214e-01, 1.208e-01, -2.271e-01, 1.613e-01, 5.550e-02, 4.311e-02, -1.248e-01, 1.413e-01, 9.472e-02, 1.468e+00, -3.666e-01, 2.860e-01, -1.611e+00) * s[0][0][0];
	r0 += M4(-1.938e-01, -7.109e-02, -7.887e-03, 1.325e-01, 2.517e-02, -1.023e-01, -7.202e-01, 1.077e-01, -7.978e-02, -3.276e-01, -1.002e-01, 2.079e-01, -6.060e-02, 2.162e-01, 7.037e-02, -5.782e-02) * s[0][0][1];
	r1 += M4(-1.383e-01, -1.732e-01, 1.054e-01, 1.274e-01, -3.622e-01, -8.234e-02, 2.477e-01, -7.449e-03, -2.855e-02, -1.367e-01, 8.466e-02, 8.150e-02, 1.037e-01, -2.313e-01, -8.500e-02, 9.043e-02) * s[0][0][1];
	r0 += M4(2.160e-01, 5.367e-02, 1.478e-01, -2.630e-01, 2.192e-01, 8.674e-01, 3.587e-01, -2.210e-02, 1.607e-01, 4.740e-02, 7.020e-02, -1.189e-01, 4.110e+00, -5.140e+00, -1.127e+00, -1.118e+00) * s[0][1][0];
	r1 += M4(-3.919e-02, 4.033e-01, -4.619e-01, -7.460e-03, -2.215e-01, -1.141e-01, 1.762e-01, -2.769e-01, -1.758e-01, 3.537e-01, -1.809e-02, -6.714e-02, 1.724e+00, -1.116e+00, -2.738e+00, 2.441e+00) * s[0][1][0];
	r0 += M4(6.741e-02, -5.245e-03, -3.028e-02, -2.434e-01, 2.890e-02, 4.458e-01, -3.174e-01, 1.994e-02, 1.800e-01, 1.322e-02, 4.641e-02, -3.704e-02, 7.053e-02, -8.960e-02, -5.247e-02, 5.041e-02) * s[0][1][1];
	r1 += M4(-1.722e-01, 3.739e-01, -4.353e-01, -1.518e-02, 1.979e-01, 5.212e-02, 5.997e-01, -3.243e-01, -1.204e-01, 3.142e-01, -3.873e-02, -6.643e-02, -7.898e-03, -2.003e-01, 1.282e-01, 9.344e-02) * s[0][1][1];
	r0 += M4(7.411e-02, -4.094e-02, -4.019e-02, -5.110e-02, -5.670e-01, 4.297e-01, 9.549e-02, -6.260e-02, 8.090e-02, -1.507e-01, -3.384e-02, -1.251e-01, 3.713e+00, -2.472e+00, 1.317e+00, 1.418e+00) * s[0][2][0];
	r1 += M4(-1.838e-02, -8.160e-02, 1.184e-01, -5.257e-02, 1.666e-01, -2.476e-01, 1.774e-01, 2.742e-01, -1.894e-02, 5.265e-02, -2.386e-02, -6.958e-02, 1.903e+00, -1.940e+00, -4.892e+00, 3.571e-02) * s[0][2][0];
	r0 += M4(2.920e-01, 8.158e-02, -8.482e-02, -3.334e-03, -1.931e-01, 1.464e-01, -2.699e-01, -3.333e-01, 4.312e-02, -4.767e-02, 1.002e-02, -6.471e-02, 6.722e-02, 1.698e-02, 4.064e-02, -7.453e-02) * s[0][2][1];
	r1 += M4(7.037e-02, -5.802e-02, -1.193e-01, -5.621e-02, 2.800e-01, -2.822e-01, -1.526e-01, 2.610e-01, -8.949e-02, 5.805e-02, 3.729e-02, -9.501e-02, 3.291e-02, -1.050e-01, 2.225e-02, -8.873e-02) * s[0][2][1];
	r0 += M4(-1.530e-01, -3.682e-02, 2.176e-03, 2.545e-01, -2.194e-01, -7.964e-02, -6.679e-02, 2.995e-02, -1.265e-01, -4.715e-02, -4.457e-02, 1.138e-01, 3.584e+00, -3.494e+00, 2.028e+00, -1.414e+00) * s[1][0][0];
	r1 += M4(-1.060e-02, 1.215e-01, -1.309e-01, 2.456e-01, 1.236e-01, -2.468e-01, -6.192e-02, 1.720e-02, -1.083e-01, 1.013e-01, -1.099e-01, 6.374e-02, 1.674e+00, -2.423e+00, 1.199e+00, 2.309e+00) * s[1][0][0];
	r0 += M4(-1.860e-01, -1.728e-01, -4.700e-02, 4.692e-01, -2.555e-01, 1.255e-02, -2.264e-02, 2.464e-01, 5.352e-02, -5.877e-02, 4.563e-02, -1.411e-02, 4.288e-02, -4.312e-03, 4.760e-02, -1.157e-01) * s[1][0][1];
	r1 += M4(-8.447e-02, 5.735e-02, 2.466e-02, 1.991e-01, -1.173e-01, -7.190e-02, -1.992e-02, 1.651e-01, -9.749e-02, 6.262e-02, -3.086e-01, 8.123e-02, 1.740e-01, -1.490e-01, 1.993e-02, 5.823e-02) * s[1][0][1];
	r0 += M4(-7.605e-02, 1.576e-01, 8.922e-03, 9.404e-02, -4.798e-01, 1.099e-01, 2.077e-01, -1.487e-01, 2.251e-01, -2.871e-02, -4.108e-01, 8.437e-02, 4.344e+00, -2.953e+00, 1.282e+00, -3.210e+00) * s[1][1][0];
	r1 += M4(-2.110e-01, -3.467e-02, 2.939e-01, 4.167e-02, -3.174e-01, 7.000e-02, -5.556e-01, 3.310e-02, -2.603e-01, -4.218e-02, 2.611e-01, 4.403e-02, -8.129e-01, -6.469e-01, 2.567e+00, 3.308e+00) * s[1][1][0];
	r0 += M4(2.027e-01, 2.632e-01, -5.261e-02, 5.407e-02, -3.243e-02, -2.723e-01, 4.706e-03, 1.896e-02, 9.248e-02, 3.861e-01, 9.876e-02, -1.204e-02, -9.070e-02, 6.782e-02, 1.278e-01, -1.321e-01) * s[1][1][1];
	r1 += M4(-2.336e-01, -4.977e-02, 3.463e-01, -6.194e-02, 8.067e-01, -8.866e-03, 1.326e-01, 5.100e-02, 1.553e-01, 2.357e-02, 4.554e-01, -3.759e-02, -5.290e-02, -1.907e-01, -6.209e-02, 1.095e-01) * s[1][1][1];
	r0 += M4(-7.573e-02, -1.608e-01, 6.145e-02, -2.123e-01, -5.599e-02, -1.398e-01, 1.538e-01, 1.257e-01, -3.357e-01, -1.244e-01, 3.026e-01, -3.698e-01, -3.070e-01, -2.613e-01, 4.281e-02, 7.405e-01) * s[1][2][0];
	r1 += M4(-1.912e-01, 1.181e-01, 4.815e-02, -1.810e-02, -2.895e-01, 1.016e-01, -1.051e-01, -2.634e-02, 2.588e-01, -2.419e-01, -2.012e-01, 8.914e-02, 9.908e-01, -1.838e+00, 8.986e-01, -2.152e+00) * s[1][2][0];
	r0 += M4(2.974e-02, -1.599e-01, 1.289e-01, -6.431e-04, -1.265e-01, -1.378e-01, 3.503e-02, 6.758e-02, -2.075e-01, 2.496e-01, 2.689e-02, -2.083e-01, 4.859e-02, -5.124e-02, -7.290e-02, 1.315e-01) * s[1][2][1];
	r1 += M4(-5.327e-03, 2.095e-01, -1.481e-01, -6.015e-02, -8.743e-02, 9.337e-02, -2.507e-01, 4.730e-02, 2.856e-01, -2.237e-01, -2.773e-01, 2.012e-01, -5.713e-02, -2.310e-01, -5.909e-02, 6.372e-02) * s[1][2][1];
	r0 += M4(5.494e-02, -1.005e-01, -2.094e-01, 8.964e-02, -9.325e-02, -3.414e-02, -1.547e-01, 1.551e-01, 2.323e-01, 7.616e-02, -1.210e-02, -1.653e-02, -1.666e+00, -2.416e+00, -1.911e+00, 1.487e+00) * s[2][0][0];
	r1 += M4(1.233e-01, -1.299e-01, -1.408e-01, 6.623e-03, -1.462e-01, 6.032e-02, -1.312e-01, 7.280e-02, 2.676e-02, 1.456e-02, -4.223e-02, -1.042e-01, 3.179e-01, -7.746e-01, -3.995e+00, 2.759e+00) * s[2][0][0];
	r0 += M4(2.368e-01, -2.526e-02, -1.272e-01, 9.259e-02, -2.386e-01, 3.908e-03, -8.772e-02, 7.076e-02, 3.352e-02, 7.218e-02, -1.851e-03, -1.792e-02, -1.857e-01, 1.700e-02, -1.330e-01, 1.135e-01) * s[2][0][1];
	r1 += M4(2.459e-01, -1.242e-01, 2.140e-02, -3.690e-04, -6.281e-02, 6.951e-02, -1.335e-02, 1.112e-01, 3.183e-02, 1.826e-02, -6.630e-02, -1.079e-01, 5.770e-02, -1.345e-01, -1.665e-02, 2.180e-01) * s[2][0][1];
	r0 += M4(1.684e-02, -1.588e-01, -1.061e-01, -4.335e-02, -4.750e-02, 2.058e-02, -2.072e-01, -9.610e-02, -4.529e-03, 1.958e-01, 3.656e-02, -1.840e-01, 9.407e-01, -9.784e-01, 1.513e+00, 1.241e+00) * s[2][1][0];
	r1 += M4(6.785e-02, -1.719e-01, -1.013e-02, -2.409e-01, -1.222e-01, -9.640e-02, 2.970e-01, -8.911e-02, -6.510e-02, -6.085e-02, -1.999e-01, -1.140e-01, -3.984e+00, -1.803e-02, 2.348e+00, -2.287e+00) * s[2][1][0];
	r0 += M4(1.448e-01, -2.917e-02, -1.336e-01, -1.139e-02, 2.186e-02, -5.315e-02, -1.254e-01, 4.891e-02, -1.247e-01, 1.827e-01, 2.134e-01, -7.466e-02, 4.699e-02, -1.402e-01, 6.644e-02, 4.162e-02) * s[2][1][1];
	r1 += M4(8.384e-02, -1.870e-01, 1.292e-02, -2.032e-01, -5.931e-02, -6.472e-02, 2.882e-01, -4.745e-02, 1.101e-01, -4.948e-02, -4.502e-02, -5.398e-02, -1.379e-01, 8.792e-02, 4.372e-02, 7.040e-02) * s[2][1][1];
	r0 += M4(-3.714e-02, 2.261e-02, -1.120e-01, 4.548e-02, 1.125e-01, -4.764e-03, -1.343e-01, 7.651e-02, -1.247e-01, 4.648e-02, -2.064e-02, -1.506e-01, -3.059e+00, 1.814e+00, -3.414e-01, -3.294e-01) * s[2][2][0];
	r1 += M4(7.979e-02, -2.204e-02, 8.669e-02, -1.110e-02, -3.742e-02, 7.349e-02, 1.312e-01, -1.379e-02, -2.201e-01, 4.233e-02, -7.529e-02, -1.001e-01, -6.041e-01, -4.770e-01, -1.186e+00, 3.224e-01) * s[2][2][0];
	r0 += M4(-7.271e-02, 4.940e-02, -2.039e-03, -2.128e-03, 1.517e-01, -2.684e-02, 4.206e-02, 1.501e-01, 1.884e-02, -1.593e-02, 8.280e-02, -1.810e-01, 3.577e-02, -3.364e-02, -8.413e-02, 5.873e-02) * s[2][2][1];
	r1 += M4(-4.532e-02, -8.407e-03, -8.524e-03, 2.152e-03, 5.603e-02, 8.366e-02, 1.759e-01, -4.478e-02, -5.763e-02, 1.457e-02, -8.848e-02, -1.126e-01, -8.688e-02, 3.992e-02, -2.233e-02, 7.971e-02) * s[2][2][1];
	r0 += V4(1.273e-02, 2.569e-02, 2.130e-02, -9.550e-03);
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(2.241e-02, 6.096e-03, -4.037e-04, 3.796e-01);
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-6x8C-conv2
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv1
//!BIND LUMA
//!SAVE conv2
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 g[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv1_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			g[0][ay][ax] = l0(x - 1, y - 1);
			g[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s[3][3][2];
	V4 r0 = V4(0.0);
	V4 r1 = V4(0.0);
	s[0][0][0] = max(g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[0][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[0][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[0][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[0][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[0][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[0][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(-3.934e-02, 1.236e-02, -7.609e-02, -3.642e-02, 6.308e-03, -5.162e-02, -1.602e-03, 1.406e-02, -5.659e-02, -5.418e-03, 1.261e-01, 2.203e-02, 3.093e-02, -1.497e-04, 3.428e-02, 7.405e-03) * s[0][0][0];
	r1 += M4(1.464e-02, -2.488e-02, 7.631e-02, -2.075e-01, 4.064e-02, 4.075e-02, 2.638e-02, 6.605e-02, -2.349e-02, -5.814e-02, -1.451e-02, 5.165e-02, 1.549e-01, -1.961e-02, 3.581e-02, 1.275e-01) * s[0][0][0];
	r0 += M4(-1.073e-01, -7.575e-02, 8.633e-02, -2.368e-02, 1.145e-01, -1.055e-01, 4.616e-02, -4.761e-02, 1.218e-01, 1.187e-01, 1.813e-01, -5.749e-02, -8.700e-02, -4.452e-02, -9.460e-02, -4.675e-03) * s[0][0][1];
	r1 += M4(1.267e-01, 3.107e-02, -6.894e-02, -1.084e-02, 2.251e-01, 1.822e-01, 4.691e-02, 1.662e-01, 2.536e-01, 5.143e-02, -2.405e-01, 7.188e-02, 1.414e-01, -1.038e-01, 2.443e-01, 5.865e-02) * s[0][0][1];
	r0 += M4(-1.611e-01, 5.199e-01, 1.459e-01, -9.926e-02, -8.709e-02, -1.404e-01, -2.142e-02, 2.120e-03, -2.811e-02, -1.521e-01, -1.110e-03, 4.271e-02, -8.459e-02, 2.485e-01, 1.172e-01, -1.059e-01) * s[0][1][0];
	r1 += M4(-3.464e-01, -1.057e-01, 4.722e-02, 1.221e-01, -1.263e-02, -3.836e-02, -2.407e-01, -1.217e-01, -1.050e-02, -7.069e-02, 3.158e-01, -4.510e-02, 9.447e-02, 1.760e-01, -3.563e-01, -7.346e-02) * s[0][1][0];
	r0 += M4(-4.104e-02, -6.828e-02, 3.101e-01, -1.008e-01, -8.817e-02, 4.587e-02, 3.194e-01, 4.677e-02, 6.880e-02, -2.391e-01, -2.483e-01, -1.647e-01, 1.319e-01, -3.779e-01, 2.341e-02, -7.128e-02) * s[0][1][1];
	r1 += M4(1.559e-01, -1.048e-01, -3.753e-02, 4.202e-02, 2.881e-01, -2.810e-02, -3.761e-01, 9.414e-02, -1.533e-01, 1.457e-01, 7.691e-02, -2.694e-01, 1.063e-02, -4.016e-02, 3.098e-02, -2.064e-01) * s[0][1][1];
	r0 += M4(2.252e-02, 1.445e-01, -1.507e-01, 3.962e-02, 3.998e-02, 6.476e-02, 1.546e-02, -6.139e-02, -2.863e-02, -6.234e-02, -2.333e-02, 5.124e-02, -7.197e-02, -3.856e-02, 1.026e-01, -1.561e-01) * s[0][2][0];
	r1 += M4(4.758e-02, -3.633e-02, 4.366e-02, 2.375e-03, -4.080e-02, -4.854e-02, 7.769e-02, 9.054e-03, -3.540e-02, -1.453e-01, 5.270e-02, 1.166e-01, 6.099e-02, 7.441e-02, -3.184e-01, 7.223e-02) * s[0][2][0];
	r0 += M4(-5.951e-02, -4.081e-02, 1.538e-02, -3.445e-02, -2.640e-02, 4.355e-02, 1.997e-01, 8.874e-02, -8.070e-02, -5.119e-02, 2.420e-01, -2.246e-02, 5.485e-03, -5.206e-02, 4.641e-03, -1.809e-01) * s[0][2][1];
	r1 += M4(-1.727e-02, 5.530e-02, -7.063e-02, 1.046e-01, -4.837e-03, -1.399e-01, -2.366e-01, 2.261e-01, -1.420e-01, 7.514e-02, -3.452e-01, 1.487e-02, -1.591e-02, 8.034e-02, 3.360e-03, 7.826e-02) * s[0][2][1];
	r0 += M4(-3.289e-02, -2.425e-02, 2.418e-01, 8.386e-03, -1.194e-01, -4.755e-02, 1.092e-01, 1.719e-02, -3.872e-02, -3.377e-03, 1.539e-01, 1.196e-02, 1.411e-01, -9.252e-02, 3.662e-01, -1.208e-01) * s[1][0][0];
	r1 += M4(1.116e-01, -1.963e-01, 2.246e-02, 3.105e-03, -5.375e-02, -3.952e-02, 1.657e-02, -3.431e-02, -1.722e-01, 1.272e-01, -2.049e-01, -8.175e-03, -3.012e-01, -1.403e-01, 4.966e-02, -1.085e-01) * s[1][0][0];
	r0 += M4(-3.958e-02, 1.165e-01, 2.093e-01, 2.240e-02, -4.755e-02, 1.992e-03, 8.108e-02, 7.706e-02, -1.991e-01, -7.102e-02, -2.666e-01, 1.812e-01, 6.776e-02, -6.317e-02, 7.227e-02, 6.318e-02) * s[1][0][1];
	r1 += M4(2.934e-01, -1.508e-01, -5.689e-02, 1.195e-01, 2.774e-01, -1.641e-03, -5.851e-02, 1.629e-01, -2.052e-01, 1.006e-01, -2.007e-01, -1.471e-02, -9.386e-02, -2.473e-01, -2.377e-02, 6.499e-02) * s[1][0][1];
	r0 += M4(1.833e-01, 2.378e-01, 8.768e-02, -8.373e-02, -1.581e-01, -3.840e-01, 1.653e-01, -8.631e-02, 7.157e-02, -9.694e-02, -1.616e-01, 1.490e-02, -7.672e-02, -1.284e-01, -2.854e-02, -1.785e-01) * s[1][1][0];
	r1 += M4(1.057e-01, 1.258e-03, 8.387e-02, 3.679e-02, 2.489e-01, 3.283e-01, -4.870e-02, 1.222e-01, -1.628e-01, -2.676e-01, 1.570e-02, 2.883e-01, -2.345e-02, 3.348e-01, -1.942e-01, 9.767e-02) * s[1][1][0];
	r0 += M4(-3.351e-02, 1.153e-01, -2.525e-01, 1.036e-01, -1.656e-01, -3.097e-02, 5.326e-01, 7.005e-02, 1.792e-01, 5.251e-01, -1.935e-01, 3.043e-01, 5.488e-03, 1.102e-01, -3.412e-02, -1.235e-01) * s[1][1][1];
	r1 += M4(-2.480e-01, 2.723e-03, -3.169e-01, 1.691e-01, 3.652e-01, 1.113e-01, -4.306e-01, 3.314e-01, -6.490e-01, -3.523e-01, 2.735e-01, 4.097e-01, 7.408e-02, 4.752e-02, -6.301e-02, -3.490e-02) * s[1][1][1];
	r0 += M4(1.415e-02, -1.752e-01, 1.066e-01, 3.117e-01, 3.130e-02, -1.124e-01, -2.998e-02, 2.218e-01, 4.306e-02, -1.478e-02, 7.074e-02, 2.795e-02, -7.547e-02, 1.680e-01, 1.309e-01, -3.430e-01) * s[1][2][0];
	r1 += M4(6.003e-02, -1.071e-01, 1.664e-01, 7.140e-02, 5.134e-02, 2.120e-01, 1.296e-01, 1.368e-02, -2.443e-01, 8.951e-02, 2.869e-01, 5.754e-02, 1.014e-01, 5.630e-02, -4.276e-01, 2.825e-02) * s[1][2][0];
	r0 += M4(1.837e-02, -4.638e-02, 6.106e-03, 1.851e-01, 1.418e-01, 8.485e-02, 1.103e-01, 1.029e-01, -1.648e-01, 2.399e-02, 4.120e-02, 2.915e-01, 1.558e-02, 3.573e-02, 1.173e-01, -4.627e-01) * s[1][2][1];
	r1 += M4(1.036e-01, 5.240e-02, 2.056e-01, -1.671e-02, -1.206e-02, 1.337e-01, 1.348e-01, 8.494e-02, -2.153e-01, -1.517e-01, -2.454e-02, -7.023e-02, -5.598e-02, 7.451e-02, -6.140e-02, -1.465e-02) * s[1][2][1];
	r0 += M4(1.586e-01, -5.061e-02, 9.933e-02, -3.675e-02, -1.855e-02, 1.051e-02, 3.906e-03, -1.687e-04, -8.057e-02, 4.325e-02, 4.084e-02, -2.026e-03, 9.647e-02, 6.122e-02, 9.413e-02, 1.940e-03) * s[2][0][0];
	r1 += M4(-2.672e-02, -4.421e-02, 5.335e-02, -8.756e-02, -2.269e-02, -1.810e-01, 6.108e-02, -3.578e-02, 5.907e-02, -4.378e-02, -1.286e-01, 4.607e-02, -1.134e-02, 1.305e-01, -1.729e-01, 4.091e-02) * s[2][0][0];
	r0 += M4(-2.453e-02, 1.131e-01, 1.704e-01, -3.802e-03, 5.337e-02, 1.079e-01, 2.167e-01, 7.653e-02, 2.085e-02, 9.221e-02, -2.224e-01, 3.488e-02, 7.236e-04, 3.423e-02, -1.191e-01, -3.689e-02) * s[2][0][1];
	r1 += M4(-6.817e-02, 3.614e-02, -1.081e-01, -6.769e-02, 1.753e-01, -8.494e-02, 3.685e-02, 1.307e-01, 2.920e-02, 2.234e-01, -5.475e-02, 1.393e-01, 2.825e-03, 1.389e-02, 3.466e-02, 1.371e-01) * s[2][0][1];
	r0 += M4(-6.650e-02, -6.024e-02, -1.189e-01, -8.562e-02, 1.520e-01, 2.132e-02, -1.068e-01, -2.729e-02, -7.455e-02, 3.529e-02, -2.851e-02, -3.397e-02, -1.684e-01, 1.345e-01, 2.744e-01, 8.576e-02) * s[2][1][0];
	r1 += M4(4.659e-02, -3.101e-02, 5.438e-02, 2.232e-02, 1.375e-02, -1.287e-01, 1.331e-01, -1.154e-01, -4.336e-02, -5.268e-04, 5.009e-02, 1.052e-01, -2.034e-02, -1.762e-01, -3.753e-01, -2.532e-02) * s[2][1][0];
	r0 += M4(-6.147e-02, 1.341e-02, 1.266e-01, -1.508e-01, 1.543e-01, 4.538e-01, 2.920e-01, -1.408e-01, -7.156e-02, 8.616e-02, -1.456e-01, -1.540e-02, 5.997e-02, 2.672e-01, 1.231e-01, 1.480e-01) * s[2][1][1];
	r1 += M4(1.646e-01, 1.275e-01, -1.355e-02, 7.165e-02, 3.643e-01, 1.089e-01, 2.075e-01, 2.787e-01, -1.426e-01, -1.678e-02, 6.488e-02, 1.420e-01, 5.459e-02, 6.135e-02, -1.153e-01, 2.238e-01) * s[2][1][1];
	r0 += M4(2.913e-02, 1.866e-02, 3.081e-02, 9.389e-02, -1.290e-02, 1.576e-02, 8.338e-02, 2.294e-01, 8.996e-03, 2.102e-02, 1.333e-02, 9.255e-02, 4.041e-02, 1.326e-02, 1.084e-01, -8.119e-02) * s[2][2][0];
	r1 += M4(-1.641e-02, 8.498e-02, -1.668e-01, 1.111e-01, 1.286e-01, 1.506e-02, 5.272e-02, 3.074e-02, 1.597e-01, 4.816e-02, -3.135e-02, 1.456e-01, 5.457e-02, -7.834e-02, -2.467e-02, -3.042e-02) * s[2][2][0];
	r0 += M4(-5.834e-02, -6.960e-02, 3.749e-02, 4.964e-02, -9.984e-02, -1.691e-01, 1.180e-01, 1.838e-01, 5.473e-02, 1.483e-01, -5.028e-02, -5.349e-02, 4.509e-02, 2.209e-02, -3.266e-02, -2.076e-02) * s[2][2][1];
	r1 += M4(4.996e-02, 1.036e-01, -7.278e-02, 1.389e-01, 3.978e-01, 1.202e-01, -1.662e-01, 3.000e-01, 4.554e-02, 1.521e-01, -2.339e-01, 6.297e-02, -6.331e-02, -1.230e-02, 7.055e-02, -1.725e-02) * s[2][2][1];
	s[0][0][0] = max(g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[1][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[1][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[1][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[1][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[1][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[1][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(5.051e-02, -6.237e-03, -1.536e-01, -2.548e-02, -1.231e-03, 1.485e-01, -6.853e-02, -1.570e-02, -6.434e-02, 1.090e-01, -1.224e-01, -3.087e-03, -1.115e-01, 5.127e-02, -2.038e-01, -3.429e-02) * s[0][0][0];
	r1 += M4(-1.408e-01, -4.185e-02, -2.523e-01, -1.772e-01, 2.197e-02, -5.485e-02, 6.337e-02, -3.980e-02, 2.203e-01, 5.999e-02, 1.392e-01, -4.354e-02, -6.651e-02, -1.162e-01, 1.843e-03, -5.465e-02) * s[0][0][0];
	r0 += M4(6.635e-02, 1.559e-01, 1.366e-01, 3.828e-03, 2.373e-02, 1.395e-02, -3.343e-01, -2.648e-01, -1.382e-01, 1.340e-01, -2.375e-01, -3.145e-02, 9.021e-01, 4.650e-01, -1.639e-01, -5.132e-02) * s[0][0][1];
	r1 += M4(-1.049e-02, -6.102e-02, 1.967e-01, -8.903e-02, 8.959e-01, -3.225e-01, -6.704e-02, 2.988e-01, -5.717e-02, -1.293e-01, 3.316e-02, -7.556e-02, -6.528e-01, 6.322e-01, -7.968e-01, 5.679e-01) * s[0][0][1];
	r0 += M4(-1.031e-01, 2.691e-01, -2.998e-01, -9.938e-02, 3.572e-02, 9.230e-02, -8.078e-02, 6.233e-02, 9.834e-02, 2.552e-01, 1.829e-01, 8.963e-02, -2.315e-03, 5.448e-02, 4.977e-02, -7.267e-03) * s[0][1][0];
	r1 += M4(4.543e-02, 1.906e-01, -3.954e-02, -1.336e-02, -1.212e-01, 4.049e-02, -8.413e-03, 8.423e-02, -2.413e-01, -3.204e-02, -1.192e-01, 1.966e-01, -8.287e-04, 3.483e-02, 9.847e-02, -3.395e-02) * s[0][1][0];
	r0 += M4(4.540e-02, 1.188e-01, -1.567e-01, -2.369e-01, -5.022e-01, 2.665e-01, -6.399e-01, -3.198e-02, -1.209e-01, -3.676e-02, -3.523e-02, 1.723e-01, 3.774e-01, -5.223e-01, -9.483e-01, -3.485e-01) * s[0][1][1];
	r1 += M4(1.002e-01, -1.502e-01, 3.400e-01, 2.239e-01, 2.245e-01, 8.446e-02, -1.546e-01, 3.753e-01, -3.664e-01, -2.204e-01, -9.292e-02, 1.122e-01, 9.587e-01, 3.092e-01, -7.751e-01, 5.753e-02) * s[0][1][1];
	r0 += M4(-6.494e-02, -1.784e-01, 1.163e-02, 3.251e-02, -1.498e-02, 1.680e-02, 4.517e-02, -1.370e-02, -8.592e-03, 1.478e-02, 6.562e-02, 6.867e-02, -1.499e-02, -1.727e-01, -1.705e-02, 4.204e-02) * s[0][2][0];
	r1 += M4(-1.460e-01, 3.440e-02, 2.160e-02, -1.027e-02, -9.404e-03, -4.732e-02, 4.262e-02, -9.929e-03, -6.465e-02, -7.748e-02, 8.656e-03, 3.433e-02, 9.581e-02, -5.864e-02, -1.616e-01, 1.872e-01) * s[0][2][0];
	r0 += M4(2.987e-02, -1.099e-01, -5.636e-02, 2.011e-01, -1.441e-01, -6.230e-01, -4.356e-02, 7.293e-02, -7.256e-03, -2.727e-02, -1.559e-03, 3.435e-02, -2.690e-01, -1.205e+00, -4.665e-01, 3.070e-02) * s[0][2][1];
	r1 += M4(9.795e-02, -5.982e-02, 1.323e-01, 3.648e-02, 3.541e-01, -4.481e-01, 3.344e-01, -5.425e-02, -1.510e-02, -7.936e-02, 1.041e-01, 4.087e-02, -4.333e-01, 1.032e+00, -2.624e-01, 9.725e-02) * s[0][2][1];
	r0 += M4(2.739e-02, 2.759e-02, -9.427e-02, -5.847e-02, -1.339e-01, -1.775e-01, 2.646e-02, -2.589e-02, 4.701e-02, 6.453e-02, 5.059e-01, -9.875e-02, 9.982e-02, -5.350e-02, -1.072e-01, -5.080e-03) * s[1][0][0];
	r1 += M4(-2.790e-01, 7.427e-02, -4.045e-02, -6.236e-02, 7.566e-02, -1.041e-01, -2.513e-02, 4.341e-02, 5.586e-02, 4.453e-02, -6.511e-04, 1.638e-03, 1.593e-01, 1.616e-01, 7.818e-02, 1.208e-01) * s[1][0][0];
	r0 += M4(2.097e-01, -6.996e-02, 2.062e-01, -7.786e-02, -2.946e+00, 1.876e-01, 1.865e-01, 9.350e-01, -1.335e-01, 1.379e-02, 2.772e-01, -9.790e-02, 1.430e+00, -1.048e-01, -9.846e-01, -4.315e-01) * s[1][0][1];
	r1 += M4(4.328e-02, -2.163e-01, 1.797e-01, -1.500e-01, 6.743e-01, -4.258e-01, 8.446e-01, 1.526e+00, -4.010e-02, -1.111e-01, -3.313e-04, -4.080e-02, -4.187e-01, 1.163e-01, -4.370e-02, 4.148e-01) * s[1][0][1];
	r0 += M4(7.223e-02, 4.385e-01, -2.394e-01, 2.900e-01, -4.638e-02, 1.666e-02, 8.649e-02, -1.947e-02, -1.275e-01, -5.343e-01, 1.148e-01, -5.073e-01, -2.688e-02, 2.710e-02, 3.350e-01, 2.476e-01) * s[1][1][0];
	r1 += M4(-4.267e-01, 1.664e-01, -1.121e-01, -1.334e-01, -8.793e-02, -2.791e-03, 1.779e-02, -8.884e-02, 2.004e-01, -3.888e-02, 7.667e-02, -2.407e-01, 1.742e-02, -1.179e-01, 3.378e-01, -3.447e-01) * s[1][1][0];
	r0 += M4(1.326e-01, 7.326e-02, 4.226e-02, 5.582e-02, -1.592e+00, 6.362e-02, -1.392e+00, 7.352e-02, -5.910e-03, -9.243e-02, -9.582e-02, -3.136e-01, 1.963e+00, 2.416e-01, -7.636e-01, 1.525e+00) * s[1][1][1];
	r1 += M4(5.267e-02, -2.782e-01, 1.303e-01, 2.354e-01, -1.376e+00, 2.581e-01, -5.155e-02, 2.769e-01, 2.197e-01, 2.863e-01, 2.224e-02, -4.320e-01, -5.292e-01, -2.085e+00, -1.449e+00, 1.382e+00) * s[1][1][1];
	r0 += M4(-3.676e-02, 1.201e-01, 4.864e-02, 1.122e-01, 1.773e-02, 3.499e-02, 5.719e-02, 1.620e-01, 2.616e-03, -1.275e-01, -1.279e-01, 3.197e-01, -5.408e-02, 2.831e-02, -2.495e-02, -2.021e-01) * s[1][2][0];
	r1 += M4(-1.613e-01, 1.388e-01, -2.158e-01, -5.968e-02, 4.947e-02, 1.229e-02, -7.008e-02, -3.020e-03, -1.960e-01, -1.520e-01, -5.031e-03, -8.453e-02, -1.033e-01, -6.399e-02, -1.030e-02, -2.817e-01) * s[1][2][0];
	r0 += M4(3.049e-02, 3.876e-02, 2.412e-02, 1.734e-01, -2.278e-01, -5.704e-01, -1.039e+00, -9.597e-03, -6.345e-03, -8.761e-02, -4.861e-02, 5.348e-01, 5.421e-01, -2.424e-02, 3.507e-02, -6.748e-01) * s[1][2][1];
	r1 += M4(2.136e-02, 7.742e-02, 4.550e-02, 6.042e-02, -2.232e-01, 2.597e-01, 2.759e-01, -3.386e-02, -9.547e-02, -2.051e-02, 4.752e-02, -7.347e-02, -1.288e-01, -3.488e-01, -3.710e-02, 8.873e-01) * s[1][2][1];
	r0 += M4(-7.031e-02, -1.224e-02, 1.180e-02, 2.022e-02, -5.031e-02, -8.856e-02, 3.719e-02, 7.035e-02, 7.653e-03, 9.741e-02, -2.355e-01, 1.972e-02, -3.354e-02, -2.036e-02, -1.449e-01, 7.398e-02) * s[2][0][0];
	r1 += M4(-2.233e-01, 1.544e-01, -5.033e-02, -2.016e-01, 4.883e-02, 1.139e-01, 1.368e-01, -5.948e-02, 1.369e-02, 7.310e-02, -7.372e-03, 2.134e-01, -1.923e-02, 8.059e-02, 1.330e-02, 1.586e-01) * s[2][0][0];
	r0 += M4(1.142e-02, -1.333e-01, 5.715e-02, 3.802e-03, -2.014e+00, 3.873e-01, 6.852e-01, 5.696e-01, -2.456e-02, -7.831e-02, -2.496e-01, -3.044e-02, 1.315e-01, -3.807e-01, -7.260e-01, -2.403e-02) * s[2][0][1];
	r1 += M4(6.060e-02, -3.391e-02, 8.652e-02, -2.713e-03, 3.908e-01, 3.047e-01, 1.139e+00, 3.145e-01, 7.792e-02, 1.993e-02, 9.874e-02, 1.656e-01, -6.517e-01, 2.877e-01, -2.824e-01, 4.184e-01) * s[2][0][1];
	r0 += M4(6.826e-03, 4.590e-02, 4.205e-02, 1.000e-01, -7.293e-03, -2.005e-02, 3.814e-02, -2.416e-01, -1.563e-02, -2.415e-02, -1.846e-01, -1.783e-02, -7.858e-02, -3.132e-02, 8.397e-02, -2.906e-02) * s[2][1][0];
	r1 += M4(-5.314e-02, 2.648e-01, -4.281e-02, 5.443e-02, 7.104e-02, 7.788e-02, -5.744e-02, -1.461e-02, 4.953e-02, 1.514e-01, -5.916e-02, 9.895e-02, -3.699e-02, -6.464e-02, -9.384e-02, -1.154e-01) * s[2][1][0];
	r0 += M4(7.432e-02, 1.597e-02, -3.583e-02, -6.076e-02, -1.440e+00, -5.687e-01, 2.052e+00, -1.264e+00, -5.481e-02, -9.955e-02, -2.101e-01, 7.096e-02, 2.080e-01, -8.766e-02, 4.180e-01, 1.542e-01) * s[2][1][1];
	r1 += M4(-5.069e-03, 4.884e-02, 1.208e-01, 9.043e-04, 1.911e+00, 3.187e+00, -4.807e-01, -2.390e+00, 1.895e-02, 5.179e-02, 4.237e-02, -7.188e-02, -7.639e-01, -4.278e-01, -1.013e+00, 3.707e-01) * s[2][1][1];
	r0 += M4(-3.825e-02, 3.340e-02, 1.218e-01, -5.437e-02, 9.016e-04, -4.488e-02, -1.283e-01, 7.221e-02, -3.669e-02, 8.854e-02, 1.997e-02, 6.959e-03, 8.753e-02, 8.520e-02, 7.019e-02, 5.183e-03) * s[2][2][0];
	r1 += M4(-9.081e-04, 1.243e-01, -1.499e-01, -1.888e-03, -3.780e-02, 1.201e-02, 4.724e-02, -5.866e-02, 1.264e-01, 4.301e-02, 1.070e-03, -1.281e-03, 1.608e-02, 8.687e-02, 3.708e-02, 6.214e-02) * s[2][2][0];
	r0 += M4(6.177e-03, -8.991e-02, 2.481e-02, 1.359e-01, 2.731e-01, -2.031e-01, -3.150e-01, 4.379e+00, -3.993e-02, 8.012e-02, 1.185e-02, 2.278e-02, -2.651e-01, -4.978e-02, 7.034e-01, -2.263e-01) * s[2][2][1];
	r1 += M4(1.347e-01, 1.666e-02, -8.924e-04, 5.514e-02, 2.266e-01, 1.063e-02, 1.049e+00, 1.609e-02, 5.426e-02, -1.487e-03, -3.547e-02, -4.481e-02, 5.382e-01, -9.097e-02, -1.583e-01, 2.803e-01) * s[2][2][1];
	r0 += V4(5.237e-02, 1.878e-02, -2.534e-02, -4.135e-02);
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-8.234e-03, -3.333e-02, -1.022e-01, 8.884e-02);
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-6x8C-conv3
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv2
//!BIND LUMA
//!SAVE conv3
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(texelFetch(conv2_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv2_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 g[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv2_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			g[0][ay][ax] = l0(x - 1, y - 1);
			g[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s[3][3][2];
	V4 r0 = V4(0.0);
	V4 r1 = V4(0.0);
	s[0][0][0] = max(g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[0][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[0][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[0][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[0][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[0][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[0][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(-3.279e-02, 7.753e-02, 4.778e-02, 2.100e-02, -7.127e-02, 6.307e-02, 2.299e-02, 2.039e-02, 1.921e-02, -6.516e-02, -2.722e-02, -6.916e-02, -1.007e-01, 1.643e-01, -9.568e-02, 1.662e-01) * s[0][0][0];
	r1 += M4(-1.512e-01, 1.083e-01, -3.559e-02, 2.693e-02, 1.127e-01, 9.753e-02, -4.991e-02, 1.273e-02, 2.064e-02, -1.963e-02, -2.330e-02, -1.473e-02, 1.605e-01, -8.889e-03, -1.220e-02, 7.346e-02) * s[0][0][0];
	r0 += M4(9.649e-02, 5.277e-02, 2.941e-02, 5.000e-03, 8.219e-03, 9.854e-02, -4.663e-02, -1.198e-02, -5.682e-02, 4.688e-03, -2.189e-02, -4.170e-02, -7.622e-04, 1.681e-01, -1.322e-02, 1.898e-01) * s[0][0][1];
	r1 += M4(-9.984e-02, 9.022e-02, 1.920e-02, -1.736e-02, -9.147e-02, -2.957e-02, 1.133e-02, 7.546e-03, 8.756e-02, 6.445e-02, -4.767e-03, -3.070e-02, -3.389e-01, -7.353e-02, -1.194e-01, 1.296e-01) * s[0][0][1];
	r0 += M4(1.966e-01, -4.382e-02, -1.989e-02, -2.677e-02, -5.605e-02, 1.542e-01, 5.911e-02, 1.929e-02, -5.876e-02, 1.879e-01, 2.744e-02, 1.182e-02, -9.497e-02, -3.064e-03, 5.571e-03, -1.864e-01) * s[0][1][0];
	r1 += M4(6.407e-02, 6.600e-02, -1.187e-01, -1.391e-01, 1.052e-01, 8.315e-02, 8.969e-02, 3.952e-02, 1.588e-01, -4.421e-02, -4.072e-02, -6.472e-02, 1.924e-01, 7.440e-02, 8.877e-02, -6.163e-02) * s[0][1][0];
	r0 += M4(-7.348e-03, -2.070e-02, 6.088e-02, 2.166e-02, 7.324e-02, 1.144e-01, 1.215e-02, -2.622e-02, 2.358e-02, 1.337e-01, 6.203e-02, 1.431e-01, 5.850e-02, 1.652e-02, -4.731e-02, -2.417e-01) * s[0][1][1];
	r1 += M4(-7.377e-02, -4.211e-02, 3.071e-03, -3.983e-02, 1.582e-02, -4.579e-02, 3.188e-02, -6.665e-02, 9.478e-02, 1.942e-01, -6.337e-02, 1.751e-01, 1.577e-02, 7.911e-02, 9.793e-02, 1.260e-01) * s[0][1][1];
	r0 += M4(2.362e-02, -1.860e-01, 4.190e-02, 1.758e-01, -3.148e-02, 2.232e-02, 9.045e-02, 7.445e-02, 4.019e-02, -7.423e-02, -1.817e-02, 2.678e-02, -7.149e-02, -9.084e-02, 3.427e-02, 9.472e-02) * s[0][2][0];
	r1 += M4(-4.064e-03, 1.803e-01, 6.227e-02, 2.179e-01, -2.052e-02, -3.901e-02, -1.171e-01, 4.894e-02, -4.118e-02, -6.613e-02, -8.982e-02, 1.343e-01, 3.145e-02, -9.058e-02, -9.968e-02, -7.786e-02) * s[0][2][0];
	r0 += M4(-1.091e-01, -8.354e-02, -1.140e-01, 1.045e-02, -8.728e-03, 3.655e-03, -1.904e-02, 6.526e-03, 1.393e-01, 2.466e-02, -2.577e-02, -4.536e-02, 5.727e-02, 4.493e-02, -7.935e-02, -6.350e-02) * s[0][2][1];
	r1 += M4(7.673e-02, -1.122e-01, -6.989e-03, -1.215e-01, -5.532e-03, -2.460e-02, -4.409e-02, -3.557e-02, 9.404e-02, 1.972e-02, -1.370e-01, 9.118e-03, -1.580e-02, -9.608e-03, -2.328e-02, 2.830e-02) * s[0][2][1];
	r0 += M4(8.521e-02, -5.229e-02, -5.411e-02, 3.182e-02, 1.711e-01, -1.747e-01, -4.235e-02, -5.991e-02, -9.234e-04, -4.180e-02, -7.532e-03, -2.808e-02, 2.509e-01, -2.917e-02, -1.718e-01, 1.316e-01) * s[1][0][0];
	r1 += M4(2.380e-01, -2.847e-02, -1.404e-02, 3.724e-02, -7.122e-02, 7.121e-02, 1.619e-01, 1.440e-02, 1.359e-02, 1.028e-01, -9.100e-03, 9.178e-02, 2.510e-01, 1.162e-01, 2.095e-01, -5.961e-02) * s[1][0][0];
	r0 += M4(2.784e-02, -6.366e-02, 2.706e-02, 5.666e-02, 1.597e-01, 1.632e-03, 6.346e-02, 1.023e-01, 1.655e-01, -4.160e-02, -2.555e-02, 1.228e-01, -1.140e-02, 2.067e-01, -2.997e-01, 3.513e-01) * s[1][0][1];
	r1 += M4(1.021e-01, 2.959e-02, 1.467e-02, 1.264e-01, -3.332e-01, -6.225e-03, 2.424e-02, 2.324e-01, 1.292e-01, -4.201e-04, 7.193e-02, 1.243e-01, 6.421e-02, -1.947e-01, -2.395e-01, 2.372e-01) * s[1][0][1];
	r0 += M4(-7.934e-02, -1.067e-02, 5.218e-01, -8.808e-03, 1.496e-01, 2.677e-01, 1.696e-01, 1.329e-03, 3.418e-02, -1.418e-01, -1.177e-02, -6.572e-02, 2.881e-01, 1.736e-01, 3.077e-01, -4.436e-03) * s[1][1][0];
	r1 += M4(-1.395e-01, -2.083e-01, 3.283e-01, -4.497e-01, -1.627e-01, 4.365e-01, 2.459e-01, -2.964e-01, -1.406e-01, 5.417e-02, 1.626e-01, -4.987e-02, 4.761e-02, 7.443e-02, 6.230e-01, -2.321e-01) * s[1][1][0];
	r0 += M4(1.961e-01, -9.656e-02, -1.380e-02, -2.698e-01, 3.075e-02, -1.052e-02, 1.369e-01, -1.280e-01, 2.130e-01, 7.965e-02, 2.420e-02, -2.298e-01, -1.456e-01, -2.812e-02, -1.170e-01, -5.176e-01) * s[1][1][1];
	r1 += M4(3.961e-02, 1.949e-01, 1.806e-01, -1.801e-01, -4.840e-02, 1.771e-01, 7.255e-02, 7.400e-04, 4.421e-01, 1.661e-01, 3.057e-01, 2.458e-01, 1.525e-01, -3.883e-01, 5.809e-02, 5.646e-02) * s[1][1][1];
	r0 += M4(-5.627e-01, -1.964e-01, 2.253e-01, -1.570e-01, -4.900e-02, 6.241e-02, 1.199e-01, 1.240e-01, 2.398e-01, 2.497e-01, -4.209e-01, -2.323e-03, 3.036e-02, -2.391e-02, 6.617e-02, 2.378e-01) * s[1][2][0];
	r1 += M4(7.875e-01, -6.516e-02, 1.478e-02, 2.384e-01, -4.341e-02, 7.871e-02, 1.797e-01, -4.476e-03, 3.656e-02, -1.118e-01, -4.870e-02, 2.140e-01, -2.228e-02, -3.815e-03, -4.602e-02, -1.601e-01) * s[1][2][0];
	r0 += M4(-1.482e-01, -2.450e-01, 1.210e-01, 2.822e-01, 1.820e-01, 1.650e-01, -8.855e-02, -2.718e-02, 2.141e-01, -5.357e-02, -2.377e-01, 3.576e-02, 1.008e-01, 9.004e-02, -1.009e-01, -7.008e-02) * s[1][2][1];
	r1 += M4(1.360e-01, 2.396e-01, -1.560e-01, -1.699e-01, -1.060e-01, 9.043e-02, -1.853e-02, 6.341e-02, 2.865e-01, -7.371e-02, -1.199e-01, 2.652e-01, 7.124e-02, -2.134e-02, -1.364e-02, 8.587e-02) * s[1][2][1];
	r0 += M4(1.004e-01, 1.733e-01, 5.131e-02, -6.336e-02, 2.308e-02, -1.111e-01, 3.231e-02, 2.690e-02, -1.638e-02, -2.847e-02, 2.912e-02, -7.291e-02, 8.582e-02, -1.184e-02, 6.909e-02, -4.225e-02) * s[2][0][0];
	r1 += M4(-8.712e-02, 1.515e-01, 3.031e-02, 1.183e-01, -2.474e-02, -2.388e-01, -7.910e-02, 1.530e-01, -6.669e-02, 1.175e-01, 6.348e-04, -1.244e-03, 1.491e-01, -6.050e-02, -1.270e-02, 1.267e-02) * s[2][0][0];
	r0 += M4(-8.018e-02, 4.238e-02, 2.740e-02, -1.219e-01, -8.624e-02, 5.973e-02, -1.299e-01, 1.351e-01, 9.209e-02, 5.562e-02, -2.914e-02, 3.425e-02, -4.094e-02, -7.250e-02, -2.463e-02, -5.752e-03) * s[2][0][1];
	r1 += M4(-7.024e-03, -4.549e-02, -5.120e-02, -1.293e-01, 8.219e-02, -7.638e-02, -3.523e-01, 3.414e-02, -7.957e-02, 1.336e-01, 2.837e-02, 1.146e-01, 2.229e-01, -1.087e-02, -2.085e-01, 2.757e-02) * s[2][0][1];
	r0 += M4(6.361e-02, -1.029e-01, 9.794e-02, -1.516e-01, -1.439e-01, 2.060e-02, -2.378e-01, 1.181e-01, 1.364e-01, 3.198e-02, -1.073e-01, 2.082e-01, 1.845e-01, 8.986e-02, -6.194e-02, -1.499e-01) * s[2][1][0];
	r1 += M4(2.912e-01, -3.499e-01, -3.711e-02, 2.257e-02, -1.582e-01, 2.374e-02, 1.493e-01, -5.912e-03, 1.714e-01, -1.841e-01, -1.268e-01, 1.289e-01, -6.655e-03, 4.092e-02, 2.237e-02, -4.070e-02) * s[2][1][0];
	r0 += M4(3.099e-02, -4.368e-02, -1.487e-02, -5.176e-02, 5.850e-02, -1.121e-01, 2.921e-02, -1.681e-01, 3.876e-02, 5.847e-02, 1.547e-01, -8.719e-02, -7.423e-02, 9.230e-02, 3.992e-03, -2.069e-01) * s[2][1][1];
	r1 += M4(1.051e-01, 4.721e-02, -7.712e-02, 7.679e-02, -6.805e-03, -3.750e-01, -4.873e-01, 1.047e-01, 3.662e-01, 2.469e-01, -6.963e-02, 3.383e-01, 1.440e-01, -4.188e-02, -1.108e-01, 8.061e-02) * s[2][1][1];
	r0 += M4(-4.654e-01, 2.719e-02, 2.630e-01, -3.751e-01, 1.434e-02, 1.259e-02, -5.228e-02, 4.544e-02, -6.919e-02, 1.706e-01, -1.393e-01, -1.538e-01, 3.004e-02, 7.611e-03, 8.587e-03, 1.712e-02) * s[2][2][0];
	r1 += M4(4.182e-01, -6.599e-01, -1.784e-02, 3.034e-01, -1.006e-01, 3.504e-02, 4.591e-02, 2.142e-02, 1.073e-01, 1.259e-02, -5.874e-02, 1.278e-01, -2.476e-02, -2.693e-02, -1.659e-02, -9.065e-02) * s[2][2][0];
	r0 += M4(-7.448e-02, -2.598e-02, 7.606e-03, -1.033e-02, 2.057e-01, 3.001e-01, -1.854e-01, -6.333e-02, 1.081e-01, 2.550e-01, 6.263e-02, -1.433e-01, -2.301e-02, 8.091e-02, 2.726e-02, -7.116e-02) * s[2][2][1];
	r1 += M4(-1.638e-02, -2.286e-01, 5.357e-02, 3.260e-02, 1.455e-02, 5.139e-02, -1.831e-01, 1.484e-01, 1.665e-01, 9.323e-02, 9.306e-02, 1.636e-01, 4.257e-02, -6.286e-03, 2.048e-02, 4.425e-03) * s[2][2][1];
	s[0][0][0] = max(g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[1][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[1][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[1][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[1][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[1][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[1][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(5.625e-02, -1.668e-02, 7.010e-03, -1.631e-02, 4.259e-02, -1.675e-02, 7.091e-03, -4.410e-02, -1.150e-01, -8.705e-02, -5.468e-04, -6.754e-02, 6.058e-02, -8.228e-02, -5.665e-02, -2.564e-02) * s[0][0][0];
	r1 += M4(3.891e-02, 1.199e-01, 9.338e-02, 1.498e-01, -8.722e-02, 9.235e-02, 4.882e-03, -1.146e-01, -1.217e-02, -1.811e-03, 1.344e-02, -7.707e-02, 1.062e-01, 2.041e-02, 2.960e-02, -4.225e-02) * s[0][0][0];
	r0 += M4(2.715e-02, 6.245e-02, -8.815e-03, 8.570e-02, -7.842e-02, -1.254e-02, 2.675e-03, -1.901e-01, -4.402e-02, -4.767e-02, 5.037e-02, -1.189e-01, 1.099e-01, -8.104e-02, 1.897e-02, -6.558e-02) * s[0][0][1];
	r1 += M4(-4.658e-02, -1.297e-02, 5.313e-02, 4.999e-02, 1.885e-01, 3.933e-02, -2.871e-02, -2.253e-01, -5.608e-03, 1.348e-02, 4.474e-02, 3.445e-02, 3.307e-02, -1.659e-03, -1.240e-02, -7.492e-02) * s[0][0][1];
	r0 += M4(-1.579e-01, 5.915e-03, 1.514e-01, -1.248e-01, 9.140e-02, 5.310e-02, -4.743e-03, -8.763e-02, 6.249e-02, 6.469e-02, -1.546e-02, 5.529e-02, 1.333e-01, -2.882e-01, 1.192e-01, 6.757e-02) * s[0][1][0];
	r1 += M4(1.518e-01, 8.889e-02, 9.842e-02, 1.222e-01, 3.033e-02, -1.965e-02, -8.066e-02, -5.106e-03, -2.596e-02, -5.472e-02, 1.588e-02, -5.911e-03, 1.063e-01, 1.238e-01, -1.134e-01, 2.703e-01) * s[0][1][0];
	r0 += M4(-5.426e-02, 1.445e-02, 6.421e-02, -6.999e-02, -3.074e-02, -1.194e-01, 1.059e-01, -3.421e-02, 8.695e-02, 1.300e-01, 2.068e-02, 7.304e-02, 1.810e-01, -1.541e-01, 6.818e-02, -5.314e-02) * s[0][1][1];
	r1 += M4(-8.992e-02, 3.510e-02, 6.281e-02, 1.464e-01, 1.605e-02, -1.748e-01, 2.088e-02, -2.296e-01, 2.698e-02, -1.179e-01, 9.489e-02, -2.711e-02, -3.633e-03, 5.577e-02, -9.786e-02, -4.113e-02) * s[0][1][1];
	r0 += M4(-2.655e-03, 3.132e-02, 2.937e-03, 4.215e-03, 2.391e-02, 1.589e-02, -2.079e-02, 1.051e-02, 2.964e-02, 5.452e-02, 3.813e-02, -9.227e-03, 7.454e-02, 5.377e-02, -5.906e-03, 3.483e-02) * s[0][2][0];
	r1 += M4(7.593e-02, 4.655e-02, 2.518e-02, 6.055e-02, -4.824e-02, -7.567e-02, -8.641e-02, -3.191e-02, 1.870e-02, 9.416e-02, -5.017e-02, 1.189e-02, -5.070e-04, 3.762e-02, 4.058e-02, -1.819e-01) * s[0][2][0];
	r0 += M4(5.218e-02, 2.266e-02, 4.491e-02, -2.516e-02, -1.205e-01, -1.367e-01, -1.053e-02, 1.430e-01, 3.306e-02, 9.205e-02, 3.051e-02, 8.153e-03, 5.954e-02, -1.365e-01, 6.151e-02, 2.412e-01) * s[0][2][1];
	r1 += M4(-2.878e-02, -7.052e-02, 2.003e-02, -6.344e-02, 5.101e-02, -1.285e-01, 8.911e-02, -3.893e-02, 2.716e-02, 4.055e-02, -9.184e-03, 4.802e-02, -6.108e-02, 2.818e-01, -3.796e-02, -3.645e-02) * s[0][2][1];
	r0 += M4(5.288e-02, 1.735e-01, -7.846e-02, 4.591e-02, 6.205e-02, 6.958e-02, 5.566e-02, 5.169e-02, -9.725e-02, 1.185e-01, 1.370e-02, 6.368e-03, 1.108e-02, -1.699e-02, 1.284e-01, -1.505e-01) * s[1][0][0];
	r1 += M4(4.695e-02, 3.668e-01, 3.147e-02, 3.030e-01, 9.712e-02, 8.268e-02, -1.229e-01, 4.645e-02, -6.892e-02, 6.245e-02, -3.279e-02, -1.376e-01, -4.011e-04, -1.936e-02, -8.378e-02, -1.013e-01) * s[1][0][0];
	r0 += M4(1.696e-02, 2.258e-02, -2.457e-03, -5.901e-02, -6.443e-02, 1.675e-01, -2.451e-02, -7.578e-02, -1.146e-01, 2.705e-01, -2.806e-02, -1.550e-02, -1.106e-01, -2.547e-01, 6.953e-02, -7.724e-02) * s[1][0][1];
	r1 += M4(2.215e-02, 4.800e-02, -1.058e-02, -1.540e-01, 3.065e-01, 1.463e-01, -3.937e-02, 8.772e-02, 6.347e-02, 1.610e-01, -9.266e-02, -1.821e-02, 3.361e-02, 4.121e-02, -6.888e-02, 1.180e-01) * s[1][0][1];
	r0 += M4(-6.684e-02, 3.406e-02, 6.405e-02, 1.758e-01, -3.885e-01, 2.542e-01, 2.893e-02, -1.050e-01, -3.135e-01, 8.513e-02, 1.657e-01, 6.886e-02, -1.352e-02, 7.428e-02, -3.558e-02, 2.897e-01) * s[1][1][0];
	r1 += M4(9.796e-02, 4.090e-01, -1.636e-01, 1.718e-01, 2.017e-01, -1.580e-01, -4.927e-01, 4.015e-01, -3.853e-01, -3.208e-01, -1.037e-01, -2.037e-02, 2.656e-01, -1.685e-01, 1.439e-01, 3.375e-01) * s[1][1][0];
	r0 += M4(-8.314e-02, 3.978e-01, -2.463e-01, 3.356e-01, 1.254e-01, 5.033e-01, -2.610e-01, 1.435e-01, -6.127e-02, 2.424e-02, 1.164e-01, 5.674e-02, 2.726e-02, -3.345e-01, 1.619e-01, -1.598e-01) * s[1][1][1];
	r1 += M4(-2.113e-02, 9.675e-02, -1.517e-01, 8.227e-02, -1.017e-01, 5.079e-01, -2.509e-01, 1.905e-01, -9.439e-02, -4.639e-03, -1.164e-01, 8.621e-02, 1.767e-01, -1.335e-01, 2.004e-01, -2.573e-01) * s[1][1][1];
	r0 += M4(6.955e-02, -1.070e-01, 4.597e-02, 3.832e-02, 9.753e-02, 9.239e-02, -5.571e-03, -1.651e-01, -7.935e-02, 1.295e-01, -2.203e-01, -3.451e-01, 1.999e-01, -4.992e-02, 1.740e-02, -4.892e-02) * s[1][2][0];
	r1 += M4(-7.628e-02, -6.234e-03, 1.851e-01, 4.431e-02, 1.733e-02, 2.054e-01, -5.908e-03, 1.356e-03, 5.284e-02, -1.065e-01, 3.141e-01, 7.953e-02, -9.152e-02, 4.895e-02, -1.757e-01, 3.470e-01) * s[1][2][0];
	r0 += M4(2.568e-01, 1.059e-01, -8.364e-03, 2.442e-02, -2.122e-02, -2.032e-01, 1.592e-01, 1.616e-02, -1.063e-02, 1.072e-01, -9.605e-02, -1.558e-01, 3.160e-02, -1.365e-01, 4.239e-02, -9.131e-02) * s[1][2][1];
	r1 += M4(-4.899e-03, 6.717e-02, 7.276e-03, -4.889e-02, -3.240e-02, -5.895e-02, -4.043e-02, -1.430e-01, -1.446e-02, -8.585e-02, 1.557e-01, 3.654e-02, -2.706e-01, 8.204e-02, 5.805e-02, 1.095e-01) * s[1][2][1];
	r0 += M4(8.217e-02, 6.016e-02, -9.179e-02, 8.845e-02, -1.407e-02, -5.411e-02, -1.105e-01, -1.600e-01, -1.481e-02, -2.459e-02, -2.946e-03, 2.139e-02, 6.939e-02, 7.393e-02, 1.293e-03, -5.504e-02) * s[2][0][0];
	r1 += M4(-1.091e-01, -1.102e-01, -2.322e-02, 2.099e-01, 7.301e-02, 5.821e-02, -7.467e-03, 7.067e-02, -8.073e-02, 2.239e-01, 8.541e-02, 3.306e-02, -7.762e-02, 2.224e-01, 3.646e-02, 1.178e-02) * s[2][0][0];
	r0 += M4(5.580e-03, 8.027e-02, -5.918e-02, 6.547e-02, 5.653e-02, 2.389e-02, 2.230e-02, -9.033e-02, 3.460e-02, 8.803e-02, 7.811e-02, 5.323e-02, 7.655e-02, -6.917e-02, 4.768e-02, 3.847e-02) * s[2][0][1];
	r1 += M4(1.646e-01, -1.275e-01, -1.170e-01, 5.674e-02, 2.934e-02, 5.279e-02, 1.256e-01, -8.116e-02, -1.054e-01, 1.184e-01, 5.176e-03, 4.125e-02, -2.358e-01, 1.139e-01, 1.616e-01, -5.412e-02) * s[2][0][1];
	r0 += M4(-3.441e-03, 3.188e-01, 2.724e-01, -1.658e-01, -1.216e-01, -9.367e-02, 6.017e-02, -7.017e-02, -2.518e-01, 1.495e-01, -1.879e-01, 2.637e-01, -1.658e-02, -3.738e-02, -8.841e-02, 6.478e-02) * s[2][1][0];
	r1 += M4(-4.203e-02, 4.561e-01, 3.135e-01, 3.994e-01, 3.157e-02, -1.685e-01, -1.921e-01, 3.399e-02, 2.162e-01, -5.156e-01, -2.468e-01, 1.321e-01, -7.693e-02, -6.241e-02, 1.105e-01, 2.776e-02) * s[2][1][0];
	r0 += M4(-5.390e-02, -7.717e-03, 3.740e-01, -3.262e-01, -1.773e-01, 1.217e-01, 1.628e-02, 2.842e-02, 1.045e-01, 4.775e-02, -1.003e-01, 9.448e-02, 1.671e-01, 4.676e-03, -2.046e-01, 3.076e-01) * s[2][1][1];
	r1 += M4(3.999e-02, 1.755e-01, 3.335e-02, -1.218e-01, 3.633e-02, -2.056e-01, -1.939e-01, 1.704e-01, -1.518e-01, 1.216e-01, 3.458e-02, -7.601e-02, -1.169e-01, -5.750e-02, 9.254e-02, -6.617e-02) * s[2][1][1];
	r0 += M4(6.848e-02, 9.671e-02, 1.505e-01, -1.405e-01, -9.648e-04, -6.822e-02, -7.173e-03, 3.454e-02, -1.590e-01, 1.970e-02, -7.331e-02, -1.049e-01, 3.861e-02, -6.723e-02, -1.165e-02, 3.719e-03) * s[2][2][0];
	r1 += M4(-7.677e-02, 3.367e-02, 3.879e-03, 1.047e-01, -1.290e-01, -1.182e-01, 7.795e-02, -1.070e-01, 1.646e-02, -3.312e-02, -1.033e-01, 6.696e-04, -2.494e-02, 2.478e-01, 6.294e-02, 1.943e-01) * s[2][2][0];
	r0 += M4(1.134e-01, -4.971e-02, -5.105e-02, 4.878e-02, -2.793e-02, -4.667e-02, 6.406e-02, -9.080e-02, 5.816e-04, 1.243e-01, -7.401e-02, 8.571e-02, 4.383e-02, -8.336e-02, 5.484e-02, 2.457e-02) * s[2][2][1];
	r1 += M4(-5.804e-02, -1.689e-02, -2.989e-02, 5.864e-02, 5.304e-02, 1.181e-01, 1.605e-01, -1.858e-01, 2.011e-02, 3.700e-02, 7.453e-02, 5.034e-02, -1.005e-01, 1.751e-01, -6.508e-02, 2.209e-02) * s[2][2][1];
	r0 += V4(-1.299e-02, -4.700e-02, -9.277e-05, -1.597e-02);
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(3.137e-02, -6.988e-03, -2.338e-02, 5.172e-04);
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-6x8C-conv4
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv3
//!BIND LUMA
//!SAVE conv4
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(texelFetch(conv3_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv3_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 g[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv3_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			g[0][ay][ax] = l0(x - 1, y - 1);
			g[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s[3][3][2];
	V4 r0 = V4(0.0);
	V4 r1 = V4(0.0);
	s[0][0][0] = max(g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[0][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[0][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[0][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[0][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[0][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[0][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(5.787e-02, 1.955e-01, 4.450e-02, 1.343e-01, 5.031e-02, -2.319e-02, 3.337e-02, 3.497e-03, 2.975e-02, 1.729e-01, 1.594e-02, -3.503e-02, -1.105e-01, 1.687e-02, 1.658e-02, 9.745e-02) * s[0][0][0];
	r1 += M4(-1.836e-02, -1.531e-02, 1.211e-01, -8.770e-02, 3.094e-02, 1.538e-01, -4.921e-02, -7.096e-02, -1.560e-02, 9.923e-02, -1.327e-01, 5.682e-02, -1.082e-01, -1.278e-01, -2.470e-02, -1.249e-01) * s[0][0][0];
	r0 += M4(-5.897e-02, -7.794e-02, -8.748e-04, -2.539e-02, -2.771e-02, 8.082e-02, -9.263e-02, -9.024e-02, -1.001e-01, -2.100e-02, -4.389e-03, -3.319e-03, -8.546e-02, -1.596e-01, -6.747e-02, 2.032e-01) * s[0][0][1];
	r1 += M4(-1.857e-02, 4.034e-02, 1.758e-02, -9.428e-02, -4.512e-02, 9.014e-02, -4.626e-02, -1.271e-02, 3.286e-02, 9.833e-03, -1.204e-01, 1.874e-02, -3.801e-02, 2.095e-02, -2.147e-02, -4.209e-02) * s[0][0][1];
	r0 += M4(9.197e-02, 1.087e-01, 4.592e-01, -1.372e-01, 1.405e-01, 5.953e-02, -1.598e-01, 8.127e-02, -2.993e-02, 2.684e-02, -1.129e-01, -1.164e-01, -2.714e-02, 8.568e-02, -2.588e-01, 2.744e-01) * s[0][1][0];
	r1 += M4(1.610e-02, -2.981e-01, 1.150e-01, 1.277e-01, 1.881e-02, 1.622e-01, 6.400e-02, -3.033e-02, -4.620e-02, 3.193e-01, -1.285e-01, 1.503e-01, 3.071e-02, 1.448e-01, -5.241e-02, -1.267e-01) * s[0][1][0];
	r0 += M4(1.864e-02, 1.370e-02, 1.948e-02, 1.429e-01, 1.150e-01, 1.139e-01, 2.229e-02, 2.876e-02, 6.988e-02, 8.796e-03, 1.049e-01, 1.132e-01, -5.160e-02, -8.700e-02, -1.977e-01, 2.541e-01) * s[0][1][1];
	r1 += M4(2.000e-02, 5.698e-02, -7.785e-03, 1.646e-01, 5.888e-02, -4.094e-02, -4.420e-03, 3.110e-02, 4.947e-02, -9.866e-02, -1.782e-01, 1.927e-01, -3.203e-02, 2.632e-01, 1.733e-01, -2.292e-01) * s[0][1][1];
	r0 += M4(-2.491e-02, -1.162e-01, 1.931e-01, 1.567e-01, 6.061e-02, 4.964e-02, -6.535e-02, -8.725e-02, 5.822e-02, 9.154e-02, 7.749e-02, -5.145e-02, 2.517e-04, -3.676e-02, -7.981e-02, 3.997e-02) * s[0][2][0];
	r1 += M4(1.214e-01, -9.883e-02, 1.195e-01, -3.327e-02, -2.753e-03, 1.258e-01, 4.480e-03, 7.966e-02, 1.156e-01, -4.751e-03, -3.344e-02, 2.008e-01, 5.787e-02, 8.092e-02, 3.189e-02, -1.754e-02) * s[0][2][0];
	r0 += M4(-5.482e-03, -6.566e-02, 1.884e-01, 1.406e-02, -3.960e-02, 6.113e-02, -5.992e-02, -7.874e-02, -6.843e-02, -7.316e-02, 3.670e-02, 2.791e-02, -2.419e-02, 1.942e-02, 8.084e-02, -6.048e-02) * s[0][2][1];
	r1 += M4(-5.142e-02, -2.229e-01, 1.422e-02, 8.783e-02, -8.468e-02, -3.169e-02, -2.598e-02, 7.406e-02, -2.799e-02, -1.883e-01, -3.377e-02, 6.204e-02, 9.640e-02, -1.215e-02, 1.433e-01, 1.028e-01) * s[0][2][1];
	r0 += M4(8.543e-02, 1.519e-01, 1.285e-01, 3.387e-01, 4.537e-02, -1.803e-02, 6.282e-03, -9.110e-02, -1.766e-01, -3.637e-02, 1.698e-01, -2.824e-01, 5.478e-02, 7.063e-02, -3.970e-01, 1.548e-01) * s[1][0][0];
	r1 += M4(-8.096e-02, -9.217e-02, 1.071e-01, -3.660e-02, -3.711e-02, 2.425e-03, -4.824e-02, 7.763e-02, 1.127e-01, -9.817e-02, -2.214e-01, -2.492e-01, 7.136e-02, 3.698e-02, 1.188e-01, 1.521e-01) * s[1][0][0];
	r0 += M4(1.404e-01, 1.111e-01, -5.461e-02, -5.475e-02, 1.558e-01, -1.185e-02, 7.377e-02, -6.342e-02, -1.982e-01, -2.738e-01, 1.440e-01, -1.218e-01, -2.056e-01, -2.940e-01, 7.762e-02, -1.321e-02) * s[1][0][1];
	r1 += M4(-1.915e-02, 1.035e-01, 9.859e-03, -3.337e-02, 1.770e-02, -1.028e-01, 6.840e-02, 5.594e-02, -2.311e-02, -2.364e-01, -1.898e-02, 3.553e-02, 4.714e-02, 1.025e-01, -6.425e-02, 5.605e-02) * s[1][0][1];
	r0 += M4(-2.704e-01, 1.611e-01, -2.084e-02, 2.680e-01, 1.510e-01, -2.649e-01, -9.331e-02, -1.626e-01, 7.451e-02, 3.408e-01, 2.811e-01, 2.110e-01, 1.484e-01, -3.120e-01, -6.588e-02, -2.788e-01) * s[1][1][0];
	r1 += M4(-1.581e-01, 2.795e-01, -8.539e-02, -2.662e-01, -7.292e-02, -2.240e-01, 1.414e-01, 2.836e-01, -1.236e-01, 1.714e-01, -3.927e-01, 4.114e-02, 9.962e-02, -2.481e-01, -4.561e-01, 1.805e-01) * s[1][1][0];
	r0 += M4(-1.858e-01, 4.236e-02, -2.486e-01, -1.085e-01, 2.490e-01, -9.149e-02, 6.102e-02, 4.307e-02, 9.291e-03, 1.238e-01, 2.418e-01, 1.186e-02, 1.956e-01, -9.859e-02, -1.525e-01, -5.227e-02) * s[1][1][1];
	r1 += M4(-4.965e-02, 1.597e-01, -5.809e-02, -3.361e-01, 1.481e-02, -1.529e-01, 7.792e-02, 3.760e-01, 1.750e-02, -5.652e-02, -5.059e-01, -9.709e-02, 2.538e-02, 3.493e-02, 1.942e-01, 1.900e-01) * s[1][1][1];
	r0 += M4(2.697e-02, -7.819e-03, -2.037e-01, 4.884e-01, 2.638e-02, -1.288e-01, -1.341e-02, -1.274e-01, 1.045e-01, -1.916e-02, 3.781e-02, 7.601e-02, -1.743e-03, 1.210e-01, -3.106e-02, -4.430e-02) * s[1][2][0];
	r1 += M4(-6.546e-02, 2.880e-02, 3.749e-02, -5.168e-02, -6.858e-02, 6.775e-02, 2.054e-02, 1.188e-01, -9.710e-02, 9.771e-02, -3.629e-01, 3.724e-02, 8.063e-02, -9.213e-02, 1.110e-01, 3.650e-02) * s[1][2][0];
	r0 += M4(-1.158e-02, 2.258e-02, 5.930e-02, -6.702e-02, 1.422e-02, 2.519e-02, 1.223e-01, -1.840e-02, -1.276e-02, -1.851e-01, 1.081e-01, 2.226e-01, -4.026e-02, 1.350e-01, 1.284e-01, -2.933e-01) * s[1][2][1];
	r1 += M4(-1.801e-02, -6.625e-03, -5.208e-02, 1.869e-02, -6.579e-02, -8.254e-02, 4.976e-02, 5.356e-02, -2.674e-02, -3.958e-02, -9.298e-02, 1.840e-01, 1.398e-01, -7.156e-02, 2.529e-02, -1.225e-01) * s[1][2][1];
	r0 += M4(8.142e-02, -1.121e-01, 8.120e-02, -4.311e-02, 2.082e-01, 1.738e-01, -1.260e-02, -8.363e-02, 7.154e-02, -4.840e-02, 1.085e-02, -8.205e-02, -9.345e-02, 7.450e-03, -1.552e-02, 9.224e-02) * s[2][0][0];
	r1 += M4(6.256e-02, 4.236e-02, -8.741e-02, 2.967e-02, -3.340e-04, -1.307e-01, 3.956e-02, -1.511e-01, 8.089e-03, -6.223e-03, -1.714e-03, -1.204e-02, -2.591e-03, 8.547e-03, 1.432e-04, 1.234e-01) * s[2][0][0];
	r0 += M4(2.087e-01, 2.287e-02, -5.743e-02, -9.458e-02, 2.584e-01, 1.793e-01, -1.138e-01, -6.117e-02, 1.477e-03, -1.271e-01, 1.624e-01, 5.907e-02, -1.072e-01, -7.755e-02, 1.782e-01, -3.418e-02) * s[2][0][1];
	r1 += M4(-7.764e-02, -4.018e-02, 1.684e-01, -5.471e-02, -3.928e-02, -1.031e-01, 6.248e-02, -7.591e-02, 6.981e-03, 2.330e-02, 6.419e-02, 9.835e-02, 3.076e-03, -7.195e-02, 3.914e-03, -4.587e-03) * s[2][0][1];
	r0 += M4(5.043e-02, 7.394e-02, 1.333e-01, 1.433e-01, 2.107e-02, -2.964e-02, -1.100e-01, 3.902e-02, 1.333e-01, 7.872e-02, -1.426e-01, 1.978e-01, 3.697e-02, 7.547e-02, -3.570e-02, -1.105e-01) * s[2][1][0];
	r1 += M4(-3.736e-02, -8.012e-02, 8.336e-02, 1.440e-01, -1.649e-01, 8.974e-02, 1.964e-01, -1.834e-01, -4.659e-01, 1.506e-01, -1.781e-01, 3.662e-03, 1.023e-01, -1.550e-01, -1.008e-01, 3.065e-02) * s[2][1][0];
	r0 += M4(8.496e-03, 8.399e-02, 5.213e-02, 1.202e-01, 1.624e-01, 3.583e-02, -8.034e-02, 1.495e-01, 1.341e-02, 1.455e-01, -6.393e-02, 1.625e-01, -2.849e-02, -1.971e-02, 1.435e-02, -1.331e-01) * s[2][1][1];
	r1 += M4(5.325e-02, -5.477e-02, 4.684e-02, 6.455e-02, -1.327e-01, 6.613e-03, 1.174e-01, -7.104e-02, -3.709e-02, -2.048e-02, 7.716e-02, 7.142e-02, -5.427e-02, -1.081e-01, 6.404e-02, -1.539e-02) * s[2][1][1];
	r0 += M4(-1.657e-02, -1.036e-02, 5.187e-02, 7.367e-02, 1.114e-01, -2.947e-02, 7.602e-02, -8.221e-02, 3.450e-02, 8.348e-02, -1.713e-02, -1.927e-02, -1.714e-02, -6.170e-02, 2.814e-02, 7.257e-02) * s[2][2][0];
	r1 += M4(-3.066e-01, -1.721e-01, 2.023e-02, -1.085e-02, 1.877e-01, 1.172e-01, -2.069e-01, 6.076e-02, -1.228e-01, 7.492e-02, -1.323e-01, -5.503e-02, -2.504e-02, -3.975e-02, 2.591e-02, 3.832e-02) * s[2][2][0];
	r0 += M4(-2.305e-03, 4.015e-02, -2.397e-02, 7.824e-03, 1.831e-01, 6.650e-02, 9.539e-02, -8.325e-02, -8.420e-02, -2.963e-02, 9.133e-02, 1.444e-02, 2.235e-02, 5.827e-02, -1.134e-02, -1.484e-02) * s[2][2][1];
	r1 += M4(-1.171e-01, -8.813e-02, -6.328e-02, -3.968e-02, 6.813e-02, 1.066e-02, -8.816e-02, 7.081e-02, 7.547e-03, -2.355e-02, 5.507e-03, 3.080e-02, 6.412e-02, 9.035e-02, -4.978e-03, -3.980e-02) * s[2][2][1];
	s[0][0][0] = max(g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[1][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[1][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[1][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[1][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[1][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[1][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(-5.253e-03, 1.631e-02, 2.690e-02, 4.163e-02, -2.776e-02, 2.629e-02, 6.478e-02, 9.353e-02, -3.199e-02, -7.003e-02, -1.856e-01, -2.942e-03, 3.984e-02, -5.504e-02, -4.062e-02, -8.134e-03) * s[0][0][0];
	r1 += M4(-1.105e-02, -7.071e-02, -4.601e-02, 4.423e-02, -2.388e-02, -6.272e-02, -8.735e-02, 9.408e-02, -1.458e-01, 5.038e-02, 1.500e-02, 1.012e-01, 8.118e-03, 1.561e-01, 7.555e-02, -1.165e-01) * s[0][0][0];
	r0 += M4(-1.528e-01, -4.699e-02, 6.771e-02, 1.490e-01, 5.136e-02, 9.809e-02, 4.730e-02, 2.111e-02, 5.296e-02, 3.534e-02, -9.612e-03, -7.892e-02, 6.765e-02, -5.701e-02, 4.880e-02, -1.489e-01) * s[0][0][1];
	r1 += M4(-6.416e-02, -1.536e-01, -7.742e-02, 2.318e-02, 3.500e-02, -3.669e-02, -3.005e-03, -2.200e-02, -3.637e-02, -2.652e-02, -8.101e-02, -1.070e-01, 2.434e-02, -4.635e-02, 9.264e-02, -7.697e-02) * s[0][0][1];
	r0 += M4(-3.424e-04, 4.290e-02, 1.389e-02, -1.332e-02, 6.168e-02, -5.111e-02, -2.272e-01, 1.622e-01, -4.645e-02, -4.896e-02, 2.022e-01, -3.201e-02, -4.051e-02, -4.062e-02, -7.592e-02, 5.138e-02) * s[0][1][0];
	r1 += M4(-7.083e-02, -3.720e-03, -9.686e-03, 1.210e-01, 7.299e-02, 2.725e-01, 5.372e-03, -2.957e-01, 2.480e-03, -4.217e-01, -9.051e-02, 4.446e-01, -5.242e-02, 1.820e-03, 7.612e-02, 2.710e-02) * s[0][1][0];
	r0 += M4(-1.253e-01, 1.653e-02, -2.704e-02, 3.101e-01, 4.460e-02, 1.076e-01, -1.763e-01, -1.538e-01, -2.225e-02, 1.008e-01, -1.816e-02, -1.344e-01, 3.611e-02, -2.344e-02, 5.724e-03, 8.181e-02) * s[0][1][1];
	r1 += M4(-1.100e-01, -6.583e-02, 5.547e-02, 4.847e-02, -5.946e-04, 5.697e-02, -6.627e-02, -1.158e-01, -3.549e-03, -3.313e-03, -1.676e-01, 1.377e-01, 6.812e-02, -5.577e-02, 8.079e-03, 3.953e-02) * s[0][1][1];
	r0 += M4(-1.519e-02, -3.611e-02, 8.916e-02, -6.437e-02, 4.675e-02, 1.896e-02, 1.417e-01, 7.144e-04, -6.276e-02, -5.603e-02, 2.615e-02, -7.945e-02, -9.119e-03, -1.830e-02, 1.972e-02, 7.247e-02) * s[0][2][0];
	r1 += M4(-3.408e-02, -1.228e-01, -2.449e-02, 1.112e-01, 1.162e-01, -2.865e-02, 1.298e-01, 1.485e-01, 4.617e-02, -4.996e-02, 5.609e-02, 7.067e-03, -2.309e-02, -6.235e-03, 4.151e-02, 1.683e-02) * s[0][2][0];
	r0 += M4(1.216e-01, 1.786e-01, 2.073e-01, -2.710e-02, 5.571e-02, 6.916e-02, -5.434e-02, -4.802e-02, -5.896e-02, -1.556e-02, -1.538e-01, 8.440e-02, -9.112e-02, -6.187e-02, -3.502e-02, 8.116e-02) * s[0][2][1];
	r1 += M4(9.479e-02, -1.831e-01, 7.540e-02, 1.625e-01, 1.508e-01, 1.011e-01, 2.577e-02, -3.469e-02, 2.104e-02, 1.585e-01, 5.422e-03, -9.563e-02, -1.122e-01, -4.807e-02, 5.006e-02, -8.149e-03) * s[0][2][1];
	r0 += M4(-9.283e-02, -1.483e-01, 9.126e-02, -1.510e-02, -1.091e-02, 9.193e-02, 3.193e-01, 3.644e-02, 1.611e-01, -1.234e-01, 8.472e-02, -9.358e-02, -8.361e-03, -6.656e-02, 4.109e-02, 6.234e-02) * s[1][0][0];
	r1 += M4(-2.175e-04, -1.285e-01, 1.490e-02, -2.489e-03, 9.541e-02, -4.530e-01, -6.862e-02, -2.205e-01, -6.673e-02, -2.533e-01, 2.902e-01, -3.099e-02, -5.141e-02, -2.217e-01, 3.917e-02, 1.040e-01) * s[1][0][0];
	r0 += M4(-5.761e-02, -3.769e-02, 1.301e-01, 2.725e-01, 2.705e-02, 2.104e-01, -9.954e-02, 1.530e-01, 5.443e-02, -1.625e-02, 1.224e-01, -1.498e-01, -1.979e-02, -1.286e-01, 1.391e-01, 3.759e-02) * s[1][0][1];
	r1 += M4(4.106e-02, -1.924e-01, 1.213e-01, 8.799e-02, 6.021e-02, 1.214e-01, -4.378e-02, -4.977e-02, -7.401e-02, -1.323e-01, 1.512e-01, -1.461e-01, 2.578e-03, -1.651e-01, -7.809e-05, 9.368e-02) * s[1][0][1];
	r0 += M4(1.489e-01, 6.750e-02, -7.388e-03, -3.504e-02, 1.169e-01, 2.881e-01, -3.002e-01, -3.470e-01, -3.780e-01, 3.206e-02, 1.628e-01, -1.784e-01, 2.060e-01, -1.300e-01, 2.717e-01, 3.994e-01) * s[1][1][0];
	r1 += M4(1.773e-01, -7.692e-02, -2.559e-02, -6.894e-02, -1.694e-01, -8.114e-02, 2.811e-01, -2.287e-01, -4.581e-02, 1.479e-01, 3.151e-01, -1.895e-01, 1.542e-01, -1.342e-01, -1.899e-02, 1.127e-01) * s[1][1][0];
	r0 += M4(2.613e-02, 5.000e-01, -5.314e-01, -1.431e-01, 7.900e-03, 1.677e-01, -3.701e-01, -4.212e-01, -9.937e-02, 4.335e-01, -2.021e-01, -4.628e-01, 1.418e-01, 5.261e-02, 2.925e-01, 2.004e-01) * s[1][1][1];
	r1 += M4(3.400e-01, 3.847e-01, -2.378e-01, -3.018e-01, -1.689e-01, 2.372e-01, 7.917e-02, -9.136e-02, 5.767e-02, 2.518e-01, -1.080e-01, -3.064e-01, 2.929e-02, -2.628e-01, 1.358e-01, -9.292e-03) * s[1][1][1];
	r0 += M4(-8.952e-02, 2.230e-03, 1.081e-01, -1.631e-01, 9.085e-02, 5.338e-02, 3.471e-01, -3.558e-03, -7.030e-02, -9.400e-02, -1.117e-01, 9.779e-02, 8.473e-02, -6.723e-03, 9.913e-02, -3.874e-02) * s[1][2][0];
	r1 += M4(-2.444e-01, 2.131e-02, -1.027e-01, -5.775e-04, 1.430e-01, -2.071e-01, 1.195e-02, -1.022e-01, -1.322e-02, 3.372e-02, 9.238e-02, -6.912e-02, 1.150e-01, 1.866e-02, -6.266e-02, -1.231e-01) * s[1][2][0];
	r0 += M4(-7.661e-02, 2.315e-01, -2.435e-01, -2.628e-01, 4.148e-02, 7.293e-02, 1.429e-02, -4.833e-02, -1.479e-01, -2.113e-02, -1.213e-01, 7.940e-02, 1.712e-01, -5.939e-02, -5.653e-02, 9.479e-02) * s[1][2][1];
	r1 += M4(-3.625e-01, -3.689e-02, -2.061e-01, -1.128e-01, 5.158e-02, -3.016e-02, 8.206e-02, 7.217e-03, 1.841e-01, 1.440e-01, 1.780e-01, -1.137e-01, 2.034e-01, 2.005e-01, -8.373e-02, -6.954e-02) * s[1][2][1];
	r0 += M4(-9.999e-02, 1.012e-02, -5.653e-03, -6.121e-02, -7.364e-02, 4.300e-04, 3.867e-02, 1.759e-02, -3.805e-02, -1.687e-02, 3.724e-02, -2.552e-02, -1.384e-01, -1.103e-01, 1.639e-02, 5.703e-02) * s[2][0][0];
	r1 += M4(-5.838e-03, 9.160e-02, -1.049e-01, 1.105e-01, 2.326e-02, 1.668e-01, -1.010e-01, 1.154e-01, -5.004e-02, 1.287e-02, 4.295e-02, -5.440e-02, -4.505e-02, 2.012e-02, -4.805e-02, 8.239e-03) * s[2][0][0];
	r0 += M4(-1.466e-01, 1.388e-01, 1.048e-02, 8.341e-02, -1.015e-01, -1.749e-02, -1.286e-02, -2.034e-02, -2.913e-01, -3.377e-02, 9.700e-02, 1.798e-02, -8.494e-02, -8.568e-02, -6.000e-03, 1.561e-01) * s[2][0][1];
	r1 += M4(6.287e-02, -2.344e-02, -1.060e-01, -3.801e-02, 5.913e-04, 1.135e-02, -9.157e-02, 4.657e-02, 2.425e-02, 1.172e-01, -9.556e-02, 1.797e-01, -5.964e-02, 2.328e-02, -1.936e-03, -3.422e-02) * s[2][0][1];
	r0 += M4(-2.214e-01, -1.030e-01, -5.193e-02, 1.155e-01, -3.232e-01, 1.187e-02, -6.634e-02, 1.927e-01, 1.490e-01, 2.087e-02, -4.546e-02, -1.427e-01, -2.008e-02, -3.972e-02, 2.858e-02, -1.835e-02) * s[2][1][0];
	r1 += M4(-2.206e-02, -5.004e-02, -1.146e-01, 1.138e-01, 4.336e-02, -1.457e-02, -1.298e-01, 1.005e-01, -3.444e-05, -9.496e-02, 6.414e-02, -3.402e-02, -4.209e-03, -9.194e-02, 3.077e-02, 6.274e-02) * s[2][1][0];
	r0 += M4(-2.979e-01, -1.566e-02, -2.697e-01, -8.982e-02, 3.201e-02, 1.938e-02, 7.787e-02, -1.028e-01, -1.063e-01, 6.600e-02, -2.349e-01, 2.017e-01, -2.019e-02, -7.262e-02, 1.772e-01, -5.035e-02) * s[2][1][1];
	r1 += M4(-1.044e-01, -2.037e-01, -4.559e-02, -1.712e-02, 1.162e-01, -1.892e-02, -1.333e-01, -2.484e-02, -1.060e-01, -4.926e-02, 2.078e-01, 1.020e-01, 1.570e-01, 1.299e-01, 5.657e-02, 3.740e-02) * s[2][1][1];
	r0 += M4(2.773e-02, -5.338e-02, -6.836e-02, -9.553e-02, -2.587e-01, -1.152e-01, 5.298e-02, 7.987e-02, 5.355e-02, -5.090e-02, 2.051e-02, 1.144e-01, -5.001e-02, 7.625e-02, 1.933e-02, 3.008e-02) * s[2][2][0];
	r1 += M4(-2.028e-01, 1.555e-02, -6.957e-02, 1.819e-02, -1.244e-01, -1.561e-01, 3.905e-02, 3.881e-02, -1.096e-01, -7.168e-02, 2.148e-02, -9.588e-02, -1.496e-02, -8.603e-02, 4.366e-02, -2.290e-04) * s[2][2][0];
	r0 += M4(2.024e-02, 1.429e-01, -8.822e-02, -9.778e-02, -7.332e-02, -9.177e-02, 1.092e-02, 1.427e-02, -9.927e-02, -9.535e-03, 4.413e-02, 4.417e-02, -9.077e-02, -2.846e-02, -7.710e-02, 9.380e-02) * s[2][2][1];
	r1 += M4(-2.478e-01, -1.640e-01, 4.739e-02, -4.326e-02, 9.055e-04, 3.465e-02, 1.263e-02, 3.685e-02, -1.897e-01, -5.561e-03, 3.988e-02, 7.520e-03, -1.499e-01, -8.265e-02, 3.396e-02, -7.198e-02) * s[2][2][1];
	r0 += V4(-5.392e-02, 1.256e-02, -1.016e-02, -1.654e-02);
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-8.507e-03, -6.815e-03, 6.725e-03, 1.186e-02);
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-6x8C-conv5
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv4
//!BIND LUMA
//!SAVE conv5
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(texelFetch(conv4_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv4_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 g[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv4_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			g[0][ay][ax] = l0(x - 1, y - 1);
			g[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s[3][3][2];
	V4 r0 = V4(0.0);
	V4 r1 = V4(0.0);
	s[0][0][0] = max(g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[0][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[0][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[0][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[0][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[0][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[0][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(3.213e-01, -4.773e-03, -1.356e-01, 5.316e-02, 3.999e-02, -4.903e-02, -7.730e-02, -4.579e-03, -6.172e-02, 4.871e-02, 1.183e-01, -2.222e-02, -6.537e-02, 3.780e-03, -2.208e-02, -1.555e-03) * s[0][0][0];
	r1 += M4(-6.917e-02, -1.845e-01, 3.268e-01, 2.571e-01, 9.332e-03, 1.774e-02, 5.352e-02, -7.192e-02, 1.063e-01, 5.777e-02, 6.427e-03, -7.302e-02, -6.357e-02, 1.570e-02, -1.188e-02, 1.128e-02) * s[0][0][0];
	r0 += M4(2.785e-02, -4.200e-02, -3.311e-02, 3.793e-02, -7.734e-02, 6.671e-02, 4.775e-02, 3.294e-03, -1.321e-01, 1.952e-02, -3.395e-02, -9.600e-02, -3.122e-02, 3.641e-02, 4.411e-02, 2.180e-02) * s[0][0][1];
	r1 += M4(1.195e-02, -3.438e-02, -2.300e-02, 1.501e-02, -5.370e-02, 3.976e-02, -1.383e-02, -2.113e-02, 4.186e-02, 3.685e-02, 8.569e-02, 1.466e-01, -2.228e-02, 6.369e-02, -8.798e-02, -1.065e-01) * s[0][0][1];
	r0 += M4(4.983e-01, -7.228e-02, 5.676e-01, 1.372e-01, -2.008e-01, 1.673e-01, -1.942e-01, -2.582e-01, 9.257e-02, 4.519e-02, -9.350e-02, -1.265e-01, -2.543e-02, -1.070e-01, -4.940e-02, 9.986e-02) * s[0][1][0];
	r1 += M4(1.779e-01, -1.725e-02, -4.903e-01, 5.053e-01, -6.659e-02, 1.848e-01, -1.353e-01, -1.075e-02, 5.270e-02, -1.696e-01, 1.492e-01, 3.712e-02, -5.889e-02, 4.363e-02, -5.513e-02, 5.109e-02) * s[0][1][0];
	r0 += M4(-1.254e-01, -7.537e-02, 6.169e-02, 1.076e-01, -2.329e-02, 6.956e-02, -3.311e-02, -1.550e-01, -1.035e-01, -5.274e-02, -4.130e-02, -2.974e-02, 1.233e-01, -8.222e-02, -8.177e-02, -7.906e-02) * s[0][1][1];
	r1 += M4(-1.840e-03, -4.327e-02, -1.724e-01, 8.892e-02, -1.620e-02, 2.724e-02, 1.208e-02, 1.160e-02, 1.995e-01, -8.025e-02, -6.367e-02, 1.963e-01, -8.623e-02, -8.618e-02, 1.311e-01, -1.759e-01) * s[0][1][1];
	r0 += M4(3.304e-01, 3.418e-01, -2.563e-02, -2.971e-01, 6.041e-02, -4.969e-02, -1.591e-01, -3.018e-01, 1.162e-01, -4.081e-02, 9.245e-02, 4.697e-02, -2.504e-02, -1.657e-02, -3.448e-02, 4.905e-02) * s[0][2][0];
	r1 += M4(5.487e-02, -2.240e-01, 1.170e-01, -4.661e-02, -7.089e-02, 6.197e-02, -5.126e-02, 1.180e-02, 1.228e-01, -5.187e-02, 5.865e-02, 6.554e-02, -2.165e-02, 9.448e-02, 1.100e-02, 2.903e-03) * s[0][2][0];
	r0 += M4(3.517e-02, -2.003e-02, -6.033e-02, -5.818e-02, -4.509e-02, -6.797e-03, -3.946e-03, 5.248e-02, 1.650e-01, -7.935e-02, 1.067e-01, 1.297e-01, 5.267e-04, -2.281e-02, 3.000e-02, 1.676e-02) * s[0][2][1];
	r1 += M4(2.130e-03, -2.238e-03, 5.601e-02, -8.022e-02, -3.410e-02, 1.035e-01, 3.420e-02, -2.163e-02, 1.224e-01, -4.116e-02, 4.869e-02, 2.593e-02, -6.370e-04, -1.303e-02, 4.765e-02, 1.314e-02) * s[0][2][1];
	r0 += M4(1.313e-01, 1.223e-01, -4.885e-01, -3.300e-01, -1.156e-02, -9.543e-02, -5.897e-04, -8.940e-02, -1.398e-01, -9.228e-03, -2.999e-02, -5.131e-02, -2.589e-03, -6.715e-02, -1.876e-01, -8.631e-02) * s[1][0][0];
	r1 += M4(-1.561e-01, -7.694e-03, 1.490e-01, -2.029e-01, -7.666e-02, 4.341e-02, -1.224e-01, -5.556e-02, -2.340e-02, 5.321e-02, -5.491e-02, 3.478e-02, -2.729e-02, -1.786e-02, -3.674e-02, -2.495e-01) * s[1][0][0];
	r0 += M4(-7.293e-02, -2.679e-02, 2.457e-02, -1.078e-01, -7.705e-02, 1.708e-01, 2.462e-01, 8.479e-02, -2.323e-02, -1.600e-01, -2.769e-01, -1.200e-01, -1.707e-01, -3.977e-03, 3.639e-02, 6.700e-03) * s[1][0][1];
	r1 += M4(7.237e-02, -3.955e-02, 4.822e-02, -9.634e-02, 2.057e-01, 3.428e-02, 6.616e-02, 7.787e-02, 1.217e-01, -8.131e-02, -8.982e-04, -5.000e-02, -8.683e-02, 7.792e-02, -1.077e-01, 2.442e-02) * s[1][0][1];
	r0 += M4(6.225e-01, 1.820e-01, 2.793e-03, 5.095e-01, 1.172e-01, -1.861e-02, -1.315e-01, -2.277e-01, -2.966e-01, -1.479e-01, 9.889e-02, -1.213e-01, -1.621e-01, -2.799e-01, -9.525e-03, 4.962e-02) * s[1][1][0];
	r1 += M4(-8.633e-01, 4.804e-01, -6.702e-02, -4.134e-01, 3.593e-01, -1.344e-01, 1.362e-01, -9.962e-02, -3.450e-02, -1.821e-01, 3.385e-02, -3.174e-01, -1.052e-02, 4.026e-02, -1.023e-01, -2.568e-01) * s[1][1][0];
	r0 += M4(1.681e-01, 6.382e-02, -2.145e-01, 9.381e-02, 1.195e-01, -1.723e-01, 4.260e-02, -2.876e-01, -2.134e-02, -3.174e-01, 3.223e-01, -1.039e-01, -1.540e-01, -4.727e-01, -8.479e-02, 8.557e-02) * s[1][1][1];
	r1 += M4(-9.227e-02, 1.124e-01, 1.624e-01, -2.654e-01, 2.666e-01, -2.778e-01, 1.760e-01, 3.200e-02, 4.653e-01, -1.827e-01, 3.114e-01, -2.364e-01, -1.558e-01, -1.411e-01, -5.536e-01, -7.488e-03) * s[1][1][1];
	r0 += M4(2.962e-01, 1.685e-01, 4.454e-02, -5.290e-02, 8.505e-02, 5.246e-02, -4.920e-03, -1.900e-01, -2.743e-02, 2.825e-02, 8.383e-02, -2.971e-03, -1.390e-02, 1.188e-01, 2.285e-02, 5.871e-02) * s[1][2][0];
	r1 += M4(3.724e-02, -1.810e-01, 3.171e-01, 3.579e-01, 8.463e-02, -3.223e-03, 1.764e-01, 2.746e-02, -8.109e-02, -3.412e-02, -6.188e-02, -8.367e-02, 3.235e-02, 4.896e-03, 4.133e-02, -3.683e-02) * s[1][2][0];
	r0 += M4(5.948e-04, -5.446e-03, -4.554e-02, -1.362e-01, 7.205e-02, 2.385e-02, 2.934e-02, 1.420e-01, 1.511e-01, -1.125e-01, 6.500e-02, 8.869e-02, 6.488e-03, 1.029e-01, 1.158e-01, -1.807e-02) * s[1][2][1];
	r1 += M4(-9.837e-02, 1.122e-02, 5.556e-02, 6.050e-02, 1.599e-01, 8.683e-02, 1.154e-01, 4.889e-02, 1.028e-02, 5.739e-02, -4.045e-02, -5.227e-02, 6.282e-02, -1.372e-01, -1.031e-02, 9.652e-03) * s[1][2][1];
	r0 += M4(-2.471e-02, 1.725e-01, 2.149e-01, 3.838e-02, 5.533e-03, 1.579e-02, -2.709e-02, -4.804e-02, 1.609e-02, 2.936e-02, 9.388e-02, -6.937e-03, 1.291e-01, -3.061e-02, -6.033e-02, 1.764e-02) * s[2][0][0];
	r1 += M4(5.262e-02, -5.457e-02, -4.966e-02, 4.958e-02, -6.536e-02, -1.106e-02, -5.420e-03, -1.036e-01, 4.611e-02, -1.052e-02, 6.192e-02, 2.609e-03, 3.748e-02, 3.703e-02, 5.482e-02, 1.800e-01) * s[2][0][0];
	r0 += M4(-2.912e-02, 5.279e-03, 2.404e-02, 3.746e-03, -2.893e-02, -2.280e-02, 6.071e-02, -4.809e-02, 4.994e-02, -1.001e-01, -7.633e-02, -3.332e-02, 2.439e-02, -4.269e-02, 1.061e-01, 1.377e-02) * s[2][0][1];
	r1 += M4(-1.104e-01, -6.632e-03, -6.816e-02, 1.075e-01, -4.616e-02, -4.138e-02, -1.105e-02, 1.640e-02, 1.175e-02, 4.153e-03, 6.024e-02, 7.312e-02, 2.228e-01, 4.981e-02, 9.785e-02, 3.336e-02) * s[2][0][1];
	r0 += M4(5.609e-01, 1.821e-01, 7.620e-03, 1.111e-02, -1.613e-01, 1.227e-01, 3.612e-01, 2.336e-03, 3.855e-02, 1.441e-01, 1.496e-01, 6.051e-02, 8.150e-03, 3.187e-02, 1.439e-02, 2.773e-02) * s[2][1][0];
	r1 += M4(4.312e-01, -3.921e-02, 1.902e-01, 9.999e-02, -1.993e-01, 1.117e-01, -2.372e-01, 1.419e-02, -5.699e-02, -2.617e-03, 8.580e-02, 1.202e-01, -6.746e-02, 5.299e-02, 5.088e-03, 5.536e-02) * s[2][1][0];
	r0 += M4(-5.896e-02, 4.502e-02, 3.166e-02, 2.776e-03, 6.756e-03, 7.158e-02, 1.541e-01, 1.121e-01, 8.383e-02, -4.347e-02, 7.633e-02, 1.343e-01, 1.552e-01, -6.361e-02, -3.789e-02, 1.666e-02) * s[2][1][1];
	r1 += M4(-3.988e-03, -1.695e-02, -9.253e-02, 5.297e-02, 1.131e-02, 3.137e-02, 4.383e-02, 4.125e-02, -5.584e-02, -1.794e-02, 4.379e-03, 1.334e-01, 1.443e-01, -1.936e-02, 1.446e-01, -5.274e-02) * s[2][1][1];
	r0 += M4(5.784e-02, 2.179e-01, 5.573e-02, 3.210e-02, -3.208e-02, -4.417e-02, -6.414e-02, -8.098e-02, 3.698e-02, 5.575e-02, -3.198e-02, -1.638e-02, -4.400e-02, 5.118e-02, -1.621e-02, -9.652e-03) * s[2][2][0];
	r1 += M4(6.356e-03, -3.353e-02, -1.463e-01, 1.093e-01, -2.296e-03, 1.429e-01, -6.966e-02, 2.939e-02, -1.394e-02, 5.727e-04, 2.871e-02, 1.120e-01, -5.617e-03, 5.417e-03, 7.527e-06, 2.273e-02) * s[2][2][0];
	r0 += M4(-6.002e-02, -9.304e-02, -1.266e-01, -6.257e-02, 9.361e-02, 5.649e-02, 8.745e-02, 7.806e-02, 1.274e-01, 1.157e-01, -3.105e-02, -7.089e-02, -4.188e-02, 8.825e-03, 2.218e-02, -2.637e-02) * s[2][2][1];
	r1 += M4(6.408e-03, 4.800e-02, -5.841e-02, 6.126e-02, 1.134e-02, -5.357e-03, 4.914e-02, 5.675e-02, 6.390e-02, 1.926e-02, 1.059e-01, 3.004e-03, 2.978e-02, -5.879e-02, -3.873e-02, 2.252e-02) * s[2][2][1];
	s[0][0][0] = max(g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[1][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[1][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[1][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[1][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[1][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[1][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(8.679e-02, -3.173e-01, -4.492e-03, 1.865e-01, 7.914e-02, -6.005e-02, 7.413e-02, -2.109e-02, -9.414e-02, 5.961e-02, 1.022e-01, -6.916e-02, -5.633e-02, -3.090e-03, -6.471e-02, -6.845e-02) * s[0][0][0];
	r1 += M4(-2.740e-01, 1.421e-01, 1.043e-01, -5.924e-01, 1.174e-01, 5.985e-02, 2.962e-02, -2.165e-02, 1.345e-01, 7.383e-02, 4.437e-02, -1.759e-01, -5.581e-03, 4.179e-02, 1.386e-02, -4.849e-02) * s[0][0][0];
	r0 += M4(4.167e-02, -4.506e-02, -1.362e-01, -2.035e-01, -6.933e-02, 4.973e-02, 5.159e-02, -1.795e-02, -1.411e-01, 6.120e-02, 1.003e-02, -1.028e-01, -2.460e-02, -1.019e-02, -2.850e-02, -8.368e-02) * s[0][0][1];
	r1 += M4(-2.871e-02, -5.182e-02, 8.448e-02, 7.041e-02, 8.666e-02, 1.072e-01, 6.351e-02, -8.623e-02, 7.715e-02, 7.064e-02, 4.390e-02, -1.401e-01, -9.741e-02, 3.577e-02, -5.130e-02, -5.858e-02) * s[0][0][1];
	r0 += M4(2.323e-01, -2.948e-01, -1.116e-01, 1.016e-01, -8.756e-02, 1.813e-01, 2.109e-01, -3.205e-03, -2.619e-02, -7.643e-03, 3.395e-02, 9.445e-02, -3.006e-02, -1.885e-02, 2.939e-02, 3.939e-02) * s[0][1][0];
	r1 += M4(3.936e-03, -1.113e-01, -8.725e-03, 5.151e-02, 1.004e-02, -6.571e-02, 1.557e-01, -2.193e-01, -1.265e-02, 3.347e-02, 1.359e-01, 6.316e-02, -1.401e-02, 5.802e-02, 5.993e-02, -5.894e-02) * s[0][1][0];
	r0 += M4(6.715e-02, -1.449e-02, 2.010e-01, 1.428e-01, -7.264e-03, 3.646e-02, -1.372e-01, -7.407e-02, 1.060e-01, -6.840e-02, -1.754e-02, 3.697e-02, -3.049e-02, 4.201e-02, 1.401e-01, 8.080e-02) * s[0][1][1];
	r1 += M4(5.763e-02, 1.465e-01, 2.263e-02, -8.646e-02, -3.936e-02, -8.037e-02, 1.189e-01, -1.287e-02, -6.437e-03, -3.604e-02, 1.327e-01, 6.192e-02, 7.395e-03, 8.188e-02, 3.245e-02, -1.942e-01) * s[0][1][1];
	r0 += M4(-1.430e-01, -4.737e-03, -1.995e-02, -4.302e-02, 1.264e-01, 1.561e-01, 2.947e-02, 1.321e-01, 6.407e-02, 5.462e-02, -4.925e-02, -8.786e-02, -6.337e-03, 4.735e-02, -3.030e-03, -1.114e-02) * s[0][2][0];
	r1 += M4(-8.127e-02, 2.982e-02, -1.630e-01, -1.632e-02, 1.807e-03, -2.342e-02, 3.900e-01, -1.538e-01, 8.081e-02, 7.641e-03, 1.439e-01, 6.653e-03, -6.662e-02, -1.703e-02, 2.228e-02, -2.303e-02) * s[0][2][0];
	r0 += M4(-7.513e-02, 4.641e-02, -3.447e-03, 8.616e-02, 5.249e-02, 4.849e-02, 1.105e-01, 1.873e-02, 6.665e-02, -1.739e-02, 2.385e-03, -2.863e-02, -3.099e-02, 1.851e-01, 4.683e-02, -1.246e-02) * s[0][2][1];
	r1 += M4(-2.004e-02, 5.992e-02, -2.224e-02, 4.171e-02, 3.259e-02, -7.007e-02, 3.925e-02, -4.894e-02, 3.665e-02, -4.938e-02, -6.700e-04, 3.286e-02, -1.558e-01, 2.057e-02, -1.771e-02, -6.835e-02) * s[0][2][1];
	r0 += M4(-7.364e-02, -1.439e-01, -1.817e-01, -3.361e-02, 2.585e-02, 1.003e-01, -1.207e-01, 9.611e-02, 2.644e-01, 6.320e-02, 1.440e-01, 1.383e-01, 9.993e-03, 3.131e-03, -7.398e-02, -4.398e-02) * s[1][0][0];
	r1 += M4(-7.874e-02, 7.521e-02, -2.086e-02, -5.848e-01, -1.650e-01, 6.671e-02, 9.284e-02, 9.999e-02, 3.332e-02, 1.047e-01, 1.856e-02, 2.542e-01, 3.797e-02, 1.124e-01, 5.143e-02, -1.507e-01) * s[1][0][0];
	r0 += M4(2.798e-02, 7.667e-02, -1.343e-01, -7.252e-02, -9.107e-02, 3.635e-02, -1.520e-03, -2.913e-02, 2.631e-01, -3.184e-03, 1.630e-01, 6.323e-02, -1.020e-01, 5.016e-02, 5.088e-02, -8.929e-02) * s[1][0][1];
	r1 += M4(4.263e-02, 1.457e-01, 9.946e-02, -6.700e-02, -1.031e-01, 7.489e-02, -5.602e-02, 1.099e-01, 1.402e-01, 1.002e-01, -7.705e-03, 2.516e-01, 2.659e-02, 2.096e-01, -2.713e-02, -2.416e-01) * s[1][0][1];
	r0 += M4(4.733e-02, -4.452e-04, 1.479e-01, 2.892e-01, -4.592e-01, -9.271e-02, -6.191e-01, -1.208e-01, 1.705e-01, 1.046e-01, -1.213e-01, -2.151e-02, 1.152e-01, 7.401e-02, 1.106e-01, 7.817e-02) * s[1][1][0];
	r1 += M4(1.200e-02, -4.181e-02, 5.922e-02, 7.705e-02, -3.643e-01, -1.940e-01, 8.622e-02, 2.917e-01, -1.450e-02, -2.160e-01, -8.965e-02, -9.145e-02, -2.511e-01, -1.084e-01, -8.191e-02, -8.471e-02) * s[1][1][0];
	r0 += M4(9.379e-02, 1.488e-02, 1.476e-01, 1.698e-01, -2.363e-01, -1.549e-01, -2.038e-01, -9.267e-02, 3.899e-01, 1.763e-01, -6.200e-02, -8.070e-02, 2.376e-01, -5.632e-02, 6.150e-02, -4.797e-03) * s[1][1][1];
	r1 += M4(-7.447e-02, 1.473e-01, 1.315e-01, -3.967e-02, -5.152e-02, -1.438e-01, 4.344e-02, -5.607e-02, 2.517e-02, -9.969e-02, -2.829e-02, 1.461e-02, -4.861e-01, -8.560e-02, -3.539e-01, -2.736e-01) * s[1][1][1];
	r0 += M4(-1.036e-01, 8.967e-02, -2.349e-02, -1.281e-01, 1.647e-01, 1.841e-01, 1.922e-01, -1.733e-01, -7.314e-02, 3.853e-02, 5.278e-02, -7.298e-03, -2.423e-02, 3.057e-02, -1.796e-02, 7.131e-03) * s[1][2][0];
	r1 += M4(3.456e-02, 1.113e-02, 2.731e-02, -3.283e-02, 2.430e-03, -1.554e-01, 2.007e-03, 8.174e-02, -1.331e-01, 6.374e-02, -1.444e-01, -3.504e-02, 2.118e-02, -4.380e-02, -5.370e-03, 4.213e-02) * s[1][2][0];
	r0 += M4(8.710e-03, 1.140e-01, -1.521e-02, 2.789e-02, -3.551e-02, 8.405e-04, 8.121e-02, -1.918e-02, 2.406e-02, 4.552e-02, 8.169e-02, -6.283e-02, -2.095e-01, 4.370e-02, 2.451e-01, 9.396e-03) * s[1][2][1];
	r1 += M4(3.235e-02, -7.105e-02, 1.035e-01, -6.947e-02, -5.145e-02, -4.798e-02, -7.111e-02, -1.943e-02, -1.174e-01, -8.227e-02, -2.641e-02, 1.312e-02, -4.587e-02, -2.723e-02, -9.960e-02, -9.214e-02) * s[1][2][1];
	r0 += M4(-8.131e-02, -3.064e-02, -3.912e-02, -3.136e-03, 2.609e-02, 1.495e-01, 1.914e-03, 5.409e-02, -4.900e-02, -4.327e-02, 3.764e-02, -2.414e-03, -1.071e-01, 7.478e-03, 5.040e-02, -1.213e-02) * s[2][0][0];
	r1 += M4(-7.897e-02, 1.165e-01, -6.704e-02, 1.097e-01, 6.133e-02, -3.714e-02, 6.983e-02, -1.949e-01, -4.344e-02, -1.801e-02, -3.934e-02, -9.110e-02, -6.538e-02, 4.896e-02, 2.818e-03, -9.535e-03) * s[2][0][0];
	r0 += M4(1.084e-01, 3.164e-02, -3.927e-02, 4.704e-02, 4.875e-02, 3.077e-02, 1.713e-02, 1.267e-02, -3.098e-02, -1.962e-02, 3.525e-02, 2.279e-02, -3.792e-02, -5.554e-02, -1.930e-03, -1.130e-01) * s[2][0][1];
	r1 += M4(4.917e-02, -1.290e-02, 1.263e-01, 5.473e-02, 9.805e-02, -1.143e-02, 5.494e-02, -2.960e-02, -7.198e-02, -8.648e-02, -2.582e-02, -1.180e-01, -1.403e-01, 3.535e-02, -8.179e-02, 8.539e-03) * s[2][0][1];
	r0 += M4(-1.562e-02, -2.146e-02, -7.803e-03, 9.693e-02, 2.274e-01, 4.977e-02, 1.682e-02, -5.018e-02, -1.058e-01, 2.299e-02, 6.732e-02, 1.172e-01, 1.131e-01, 4.467e-02, 1.460e-02, 5.295e-03) * s[2][1][0];
	r1 += M4(-1.410e-01, -1.380e-01, -7.180e-03, 2.389e-02, 1.014e-01, -1.194e-01, 3.040e-01, -2.384e-01, -9.993e-02, -4.067e-02, -4.272e-02, 9.686e-04, 2.085e-01, -2.017e-01, 7.247e-02, -3.813e-01) * s[2][1][0];
	r0 += M4(4.307e-02, -1.245e-02, -4.682e-02, -4.057e-02, -3.178e-02, 7.715e-02, 8.491e-02, 7.519e-02, 5.304e-03, 2.916e-02, 3.299e-02, 5.152e-02, -1.749e-01, 1.895e-01, 1.153e-01, -5.909e-02) * s[2][1][1];
	r1 += M4(2.361e-03, 4.141e-02, 1.793e-02, 7.438e-02, -6.645e-02, -5.786e-02, 1.024e-01, -4.071e-02, -6.033e-02, 7.096e-03, -2.616e-02, 9.495e-03, 5.088e-02, -7.143e-02, -6.295e-02, -2.200e-01) * s[2][1][1];
	r0 += M4(-8.798e-02, -3.190e-02, 5.889e-02, 9.313e-03, -1.055e-01, -8.165e-02, 5.573e-02, 7.335e-02, -5.207e-02, -9.058e-02, -5.934e-03, -2.893e-02, 1.371e-01, -4.456e-02, 1.106e-01, 1.629e-01) * s[2][2][0];
	r1 += M4(-2.787e-02, -9.933e-03, -7.225e-02, -1.627e-02, -1.938e-01, -1.069e-01, -8.146e-02, 2.860e-02, -5.074e-03, -2.872e-02, -7.130e-02, -3.931e-02, 6.875e-02, -8.399e-02, 1.362e-01, -2.303e-02) * s[2][2][0];
	r0 += M4(-1.196e-02, 6.073e-03, -3.528e-03, 2.955e-02, 1.090e-02, 1.156e-02, -1.949e-02, -3.723e-02, -7.060e-02, -5.199e-02, -2.033e-02, -4.963e-02, 1.764e-03, 2.287e-02, 7.655e-03, -2.978e-02) * s[2][2][1];
	r1 += M4(2.089e-03, -1.465e-02, 1.175e-02, 8.547e-03, -1.585e-02, -2.041e-02, 8.695e-03, 1.564e-02, -1.450e-02, 2.379e-02, -7.313e-02, -5.514e-02, -9.555e-02, 3.561e-02, -8.122e-02, -5.839e-02) * s[2][2][1];
	r0 += V4(-2.915e-02, -3.431e-02, -2.610e-02, 6.840e-03);
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-2.972e-02, -1.297e-02, -4.737e-03, -1.163e-02);
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-6x8C-conv6
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv5
//!BIND LUMA
//!SAVE conv6
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(texelFetch(conv5_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv5_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 g[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv5_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			g[0][ay][ax] = l0(x - 1, y - 1);
			g[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s[3][3][2];
	V4 r0 = V4(0.0);
	V4 r1 = V4(0.0);
	s[0][0][0] = max(g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[0][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[0][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[0][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[0][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[0][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[0][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(-4.055e-02, 1.159e-03, 1.295e-02, 3.082e-02, -1.666e-02, -1.061e-01, -2.605e-02, -2.699e-02, 5.821e-02, 1.251e-02, -4.430e-02, -5.221e-02, -6.911e-02, -1.955e-02, 3.255e-03, 4.857e-02) * s[0][0][0];
	r1 += M4(-1.200e-02, -3.736e-02, 2.928e-02, 2.705e-02, -7.432e-02, -5.205e-02, 3.059e-02, 3.632e-03, 3.403e-02, 8.135e-03, -4.382e-02, -2.353e-02, 2.364e-02, 1.180e-02, -1.283e-02, 3.277e-02) * s[0][0][0];
	r0 += M4(-5.016e-02, 5.408e-02, 2.576e-02, 4.330e-03, -1.135e-01, -4.920e-02, 1.357e-02, 5.105e-02, 5.823e-02, 4.610e-02, 6.976e-03, -1.147e-02, 1.031e-02, -2.179e-01, -8.272e-02, 1.450e-01) * s[0][0][1];
	r1 += M4(-2.689e-02, -5.526e-03, 2.080e-03, 2.133e-02, 1.298e-02, -3.150e-02, 1.819e-02, 3.325e-02, -2.941e-03, 6.250e-02, 1.163e-02, -1.737e-02, 5.754e-02, 4.509e-02, -2.150e-02, 1.872e-02) * s[0][0][1];
	r0 += M4(-3.768e-02, -6.990e-02, -3.187e-02, 7.356e-02, -1.100e-02, -3.923e-03, 6.158e-02, -2.492e-02, 2.066e-01, -4.412e-02, -4.429e-02, 2.111e-02, -1.408e-02, -2.222e-02, 3.552e-02, 9.101e-02) * s[0][1][0];
	r1 += M4(6.601e-02, 6.164e-02, -7.999e-02, -3.761e-03, -1.769e-03, 4.394e-02, -2.194e-02, 1.203e-01, -3.970e-02, -7.048e-02, 1.674e-03, -3.282e-02, -1.130e-02, 5.664e-02, 7.075e-02, 6.026e-02) * s[0][1][0];
	r0 += M4(-6.238e-02, -2.285e-03, 1.031e-02, 3.251e-02, -5.389e-03, -1.319e-02, 1.789e-02, 9.302e-02, 1.289e-01, -4.723e-02, -4.362e-02, -5.574e-02, 2.714e-02, 5.537e-03, 9.603e-03, 1.823e-01) * s[0][1][1];
	r1 += M4(4.240e-02, 1.553e-02, -9.809e-02, -8.223e-03, 2.444e-02, 3.816e-02, -5.634e-03, 1.312e-01, -9.878e-02, -6.907e-02, 3.672e-03, -1.343e-01, -4.085e-02, 7.192e-02, 1.184e-01, 5.057e-02) * s[0][1][1];
	r0 += M4(-5.344e-02, -1.105e-01, 4.403e-02, 1.484e-01, 5.243e-02, -1.298e-01, 3.504e-02, -3.853e-02, -1.490e-01, 2.036e-01, -3.007e-02, -2.872e-02, -5.981e-03, -7.690e-02, -3.284e-02, 2.015e-02) * s[0][2][0];
	r1 += M4(-5.818e-02, -2.163e-02, 1.628e-01, -2.574e-02, -1.146e-02, 4.552e-02, -2.509e-02, 5.699e-02, 6.419e-02, -7.128e-02, -7.459e-02, 1.453e-02, -5.867e-02, -1.875e-02, 6.565e-02, -5.334e-02) * s[0][2][0];
	r0 += M4(-2.126e-03, -7.727e-02, 1.568e-02, 6.125e-02, -4.909e-02, -1.518e-02, -2.229e-02, 4.611e-02, -1.778e-02, 6.095e-02, 1.516e-02, -5.181e-02, -1.608e-01, 2.680e-02, -1.602e-03, 9.960e-02) * s[0][2][1];
	r1 += M4(-4.846e-02, -4.882e-03, 6.977e-02, -6.695e-03, -9.264e-02, 4.730e-02, 5.805e-02, 1.080e-02, 7.676e-02, -3.512e-02, -5.227e-02, 2.968e-02, -6.306e-02, -5.815e-02, 1.006e-01, 1.099e-02) * s[0][2][1];
	r0 += M4(1.837e-03, -2.675e-02, 3.601e-02, 2.421e-03, -1.218e-01, -9.866e-02, 1.213e-01, 3.279e-01, 1.669e-02, 6.784e-03, -4.607e-02, -1.287e-01, 9.600e-02, -5.965e-02, -9.898e-02, 1.100e-01) * s[1][0][0];
	r1 += M4(-3.964e-02, -1.638e-02, -5.267e-03, -3.381e-02, 9.278e-02, 9.035e-02, 1.416e-01, -2.056e-02, -4.582e-02, -3.560e-02, -7.642e-02, 2.363e-02, 9.357e-02, 6.909e-02, 3.257e-02, 2.561e-02) * s[1][0][0];
	r0 += M4(-5.230e-02, -2.848e-02, 2.657e-02, 2.985e-02, 1.142e-01, -5.852e-02, -3.455e-02, 1.001e-01, -1.126e-01, 6.766e-02, 3.693e-02, -6.861e-02, 1.192e-01, -1.438e-01, -1.449e-02, 5.491e-02) * s[1][0][1];
	r1 += M4(7.324e-03, -2.938e-02, -8.816e-03, -1.066e-02, 6.091e-02, 6.565e-02, 1.088e-02, -7.655e-02, 5.422e-03, 8.661e-04, -2.037e-02, 2.132e-02, -1.396e-01, -5.049e-02, 1.616e-01, 1.083e-01) * s[1][0][1];
	r0 += M4(2.041e-01, 4.026e-01, -1.533e-01, -6.826e-01, -1.218e-01, 3.389e-01, 5.199e-02, -2.096e-01, -5.204e-02, 2.251e-01, 9.009e-02, -1.354e-01, 5.685e-02, 1.338e-01, -1.929e-01, -6.973e-02) * s[1][1][0];
	r1 += M4(3.549e-02, 2.180e-01, -9.902e-02, 1.265e-01, 1.186e-01, -2.279e-01, 2.449e-01, 2.456e-01, -1.024e-01, 5.114e-02, -1.211e-01, 4.348e-02, -3.711e-02, 2.007e-01, -6.195e-03, 1.004e-01) * s[1][1][0];
	r0 += M4(-3.581e-02, 2.793e-01, -4.504e-02, -3.604e-01, -1.919e-01, 2.086e-01, -9.749e-02, -1.361e-01, -2.430e-02, -1.729e-02, 1.746e-01, -3.087e-02, -2.958e-01, -6.112e-02, -1.937e-01, 1.579e-02) * s[1][1][1];
	r1 += M4(7.454e-02, 5.971e-02, 1.958e-02, 1.431e-01, 2.189e-01, -1.589e-01, -1.389e-02, 2.333e-02, -2.314e-01, -1.118e-01, 9.742e-02, 9.934e-02, -4.876e-01, 2.143e-01, -9.624e-02, 1.872e-01) * s[1][1][1];
	r0 += M4(-4.069e-02, 1.354e-01, 2.499e-02, -3.467e-01, 1.825e-02, -4.277e-03, -5.970e-02, -1.600e-01, 9.235e-02, -5.051e-02, 2.231e-02, 4.003e-01, -3.743e-02, 1.509e-01, 4.662e-02, -2.310e-03) * s[1][2][0];
	r1 += M4(-1.181e-01, -6.869e-02, -1.506e-02, 3.615e-03, -9.779e-02, 1.636e-01, -1.935e-02, -2.249e-02, 1.952e-01, 1.463e-01, -4.125e-03, 4.199e-02, -2.329e-01, -5.056e-02, 1.313e-01, -1.039e-02) * s[1][2][0];
	r0 += M4(-1.453e-02, 5.028e-02, -1.633e-02, -1.479e-01, -3.593e-03, 8.084e-02, 7.800e-04, 9.059e-03, -4.418e-03, -7.737e-05, 1.757e-02, 2.840e-02, 1.151e-02, 1.212e-02, -2.526e-02, 7.523e-02) * s[1][2][1];
	r1 += M4(-7.987e-02, -4.772e-02, 2.031e-02, -1.961e-02, -1.668e-01, 1.787e-02, 3.726e-02, -1.099e-02, 2.392e-01, 3.852e-02, -5.892e-02, 8.343e-02, -2.876e-02, 9.617e-02, -2.378e-02, 1.078e-02) * s[1][2][1];
	r0 += M4(3.035e-02, 1.785e-02, -5.751e-02, -1.015e-01, 1.392e-01, -8.665e-02, 2.677e-02, 6.437e-02, -2.537e-02, 3.409e-02, -2.118e-02, 1.415e-02, 3.096e-02, -3.767e-02, -6.342e-03, 4.551e-02) * s[2][0][0];
	r1 += M4(1.792e-02, 1.697e-02, -6.074e-02, -4.650e-02, -4.688e-02, 2.769e-02, 1.073e-01, -4.424e-02, 3.140e-02, 4.456e-02, -4.727e-02, 4.656e-03, 1.779e-02, 1.747e-02, -8.508e-03, -3.912e-03) * s[2][0][0];
	r0 += M4(-2.031e-02, 4.317e-02, -3.732e-03, -4.619e-02, 3.771e-02, -4.109e-02, 2.239e-02, -3.217e-02, -1.450e-02, 4.675e-02, -7.589e-03, 6.257e-02, -7.491e-02, -1.270e-02, 3.138e-02, -7.470e-02) * s[2][0][1];
	r1 += M4(-8.006e-03, 8.129e-03, -8.887e-03, -2.199e-02, -6.030e-02, -9.160e-04, 9.181e-03, -2.052e-02, 4.362e-02, 5.680e-02, -1.247e-02, 3.188e-03, -5.620e-02, -7.295e-02, -2.966e-02, -3.210e-02) * s[2][0][1];
	r0 += M4(-6.324e-02, -1.021e-01, -5.980e-02, -9.388e-02, 6.050e-02, 1.005e-01, 1.121e-01, -3.654e-02, -1.072e-01, -8.892e-02, 7.917e-03, 1.475e-01, -1.015e-04, 8.429e-02, 5.652e-02, -5.723e-03) * s[2][1][0];
	r1 += M4(-9.742e-02, -4.113e-02, -2.550e-01, -3.674e-02, -3.288e-02, -5.315e-02, -1.536e-03, -5.381e-02, -9.776e-02, -5.931e-02, -5.402e-02, 9.613e-03, 8.222e-02, 8.378e-02, -1.633e-02, -5.578e-02) * s[2][1][0];
	r0 += M4(-6.813e-02, -6.480e-02, -1.039e-02, 1.716e-02, 4.556e-02, 3.860e-02, 6.372e-02, 1.360e-03, -7.056e-02, -5.581e-02, 5.743e-02, 1.478e-01, 3.113e-02, -7.580e-02, 1.078e-01, 1.544e-02) * s[2][1][1];
	r1 += M4(-9.520e-03, 1.982e-02, -1.217e-01, 8.203e-03, 1.196e-01, 2.358e-02, 3.088e-03, -9.284e-02, -1.812e-01, -3.070e-02, 7.252e-02, 7.059e-02, 2.418e-02, 1.733e-01, -2.485e-02, -1.545e-01) * s[2][1][1];
	r0 += M4(-4.481e-02, -6.783e-03, -1.054e-02, 6.462e-02, 9.923e-03, 8.617e-02, 1.752e-02, 1.101e-01, -6.932e-02, 6.513e-02, 8.405e-02, 1.233e-01, -2.880e-02, -4.586e-02, -2.430e-02, -4.575e-03) * s[2][2][0];
	r1 += M4(7.178e-02, 6.084e-04, 4.567e-03, -2.159e-02, 1.781e-02, 5.952e-02, 1.187e-02, -1.520e-02, 7.466e-03, -7.126e-03, 1.677e-01, 9.569e-03, -4.653e-02, -5.313e-02, -4.021e-02, 1.821e-02) * s[2][2][0];
	r0 += M4(-2.351e-02, -3.744e-02, -1.009e-02, 5.037e-02, 2.084e-02, 2.256e-02, -3.794e-02, -8.178e-02, -1.132e-02, 3.537e-02, 6.044e-02, 1.031e-01, 5.172e-03, -5.791e-02, -5.706e-02, -1.108e-01) * s[2][2][1];
	r1 += M4(3.830e-02, -4.390e-03, 1.893e-03, -2.535e-02, -3.204e-02, -5.066e-02, -6.037e-02, -5.865e-02, 4.297e-02, 4.091e-02, 9.839e-02, -3.699e-02, -5.334e-03, -6.853e-02, -6.548e-02, -3.099e-02) * s[2][2][1];
	s[0][0][0] = max(g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[1][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[1][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[1][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[1][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[1][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[1][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(-1.733e-01, 1.337e-01, 6.678e-02, 8.280e-02, -4.197e-02, -2.415e-02, 3.593e-02, 1.015e-01, -1.274e-01, -4.117e-03, -2.747e-02, -2.975e-03, -1.675e-01, -1.276e-01, 2.013e-02, 1.156e-01) * s[0][0][0];
	r1 += M4(-2.226e-02, -4.611e-02, 1.426e-02, 7.864e-02, 1.044e-02, 6.762e-02, 7.592e-02, -3.331e-02, 5.272e-02, 5.532e-03, -9.486e-03, 2.432e-02, 1.344e-02, -1.192e-02, 4.558e-02, 7.121e-02) * s[0][0][0];
	r0 += M4(-1.654e-04, 6.768e-03, -2.645e-02, -3.870e-03, -7.792e-02, 9.278e-02, 3.782e-02, -1.340e-02, -1.054e-01, 1.133e-01, 7.446e-02, -7.795e-04, -4.227e-02, 7.501e-03, 3.860e-03, 1.727e-03) * s[0][0][1];
	r1 += M4(5.632e-02, -4.272e-03, -2.179e-02, 2.846e-02, 1.904e-02, 8.066e-02, 4.085e-02, -3.834e-02, -1.040e-02, 7.442e-03, 4.763e-04, -3.260e-02, -1.211e-02, 2.323e-02, 7.437e-03, 1.556e-03) * s[0][0][1];
	r0 += M4(-6.652e-01, -2.566e-01, -1.222e-02, 3.627e-01, -7.158e-02, -1.887e-01, -1.306e-02, 4.464e-02, 3.552e-02, -3.330e-01, -1.008e-01, 9.643e-02, 1.515e-01, -5.081e-01, -5.159e-04, 1.708e-01) * s[0][1][0];
	r1 += M4(6.005e-02, 1.556e-01, 7.909e-02, 1.049e-01, 8.856e-02, -1.285e-01, 8.826e-02, -7.266e-02, -1.182e-01, 9.517e-03, -5.534e-02, -1.777e-01, -3.200e-02, 1.810e-02, 1.248e-01, 2.706e-01) * s[0][1][0];
	r0 += M4(-1.379e-01, -1.774e-04, -3.985e-02, 3.821e-02, -6.793e-02, -1.420e-01, -6.088e-03, -2.867e-02, 4.257e-02, -1.478e-01, 4.655e-02, 2.197e-02, 4.070e-02, -5.948e-02, -3.248e-02, -3.244e-02) * s[0][1][1];
	r1 += M4(-6.897e-02, 8.666e-02, 1.262e-01, 6.910e-02, 8.250e-02, -7.837e-02, -4.352e-02, -1.524e-01, -2.933e-03, -3.210e-02, 2.309e-02, -1.127e-02, 6.550e-03, -5.541e-02, -1.322e-02, -3.935e-03) * s[0][1][1];
	r0 += M4(-1.815e-01, -2.184e-01, 2.277e-02, 3.150e-01, 2.287e-02, -2.897e-02, -7.142e-03, -3.354e-02, -1.070e-01, -1.294e-01, 3.260e-02, 1.130e-01, -7.984e-02, 1.898e-01, -2.020e-02, -1.628e-01) * s[0][2][0];
	r1 += M4(3.304e-02, 1.912e-02, 1.008e-01, -2.227e-02, -4.071e-02, 8.754e-03, -2.796e-02, -7.674e-03, 8.627e-02, -5.501e-02, 6.276e-03, 8.794e-02, 3.614e-02, -6.853e-02, -5.594e-02, 1.968e-01) * s[0][2][0];
	r0 += M4(-9.619e-02, -6.010e-02, -2.463e-02, 6.804e-02, 1.515e-01, -6.405e-02, 9.341e-03, -6.998e-02, 2.101e-02, 8.288e-02, -4.044e-03, -9.251e-02, -1.402e-02, 6.391e-03, 6.530e-03, -1.714e-02) * s[0][2][1];
	r1 += M4(3.561e-02, 3.421e-02, 4.155e-02, 5.681e-02, -1.813e-02, 5.132e-02, -4.742e-02, -6.106e-02, 4.272e-02, -1.514e-02, -6.373e-02, 1.137e-02, 1.011e-02, -1.576e-03, -2.203e-02, 2.961e-02) * s[0][2][1];
	r0 += M4(1.997e-01, 2.188e-01, -1.702e-01, -2.163e-01, -1.366e-01, -6.690e-02, 1.904e-01, 1.026e-01, 1.177e-01, -1.682e-01, -1.100e-01, -1.106e-01, 2.875e-01, 1.249e-01, -1.098e-01, -3.103e-01) * s[1][0][0];
	r1 += M4(2.041e-01, 9.989e-02, -2.306e-01, -1.475e-01, -7.236e-02, -1.604e-01, 1.563e-01, -9.141e-02, -1.203e-01, 1.450e-01, 1.226e-01, 1.880e-01, -9.996e-02, 1.305e-02, -6.608e-02, -1.189e-01) * s[1][0][0];
	r0 += M4(-4.071e-02, 1.471e-02, -7.615e-02, -1.171e-02, -6.353e-02, -2.893e-02, 6.297e-02, 1.284e-01, -2.959e-03, 5.527e-02, -3.415e-03, -5.389e-02, 6.210e-02, 4.087e-03, -5.831e-04, -7.657e-03) * s[1][0][1];
	r1 += M4(1.638e-01, 3.598e-03, 1.084e-02, 6.316e-02, 4.912e-02, 2.900e-02, 1.035e-01, 1.193e-02, -4.358e-02, 1.232e-02, -3.432e-02, 2.777e-02, -3.921e-02, 3.865e-02, 4.254e-02, 3.083e-03) * s[1][0][1];
	r0 += M4(2.724e-01, 8.982e-02, -1.724e-01, 7.648e-02, -3.263e-01, 1.383e-01, 7.529e-02, -3.158e-01, 3.912e-01, -3.642e-01, 1.685e-01, -4.641e-01, -4.776e-01, 4.250e-01, 1.314e-01, 3.550e-02) * s[1][1][0];
	r1 += M4(-2.677e-01, -2.036e-01, 2.340e-01, -5.534e-01, -9.761e-02, -3.116e-01, 3.133e-01, 1.586e-01, -5.363e-02, -2.257e-02, 1.710e-01, 2.133e-01, -5.881e-03, -1.862e-01, -6.372e-01, -1.255e-01) * s[1][1][0];
	r0 += M4(9.918e-02, -1.142e-01, -4.969e-02, 2.764e-02, -1.503e-01, 1.210e-01, 1.488e-02, -1.679e-01, -2.168e-02, -1.785e-01, 1.930e-01, 1.974e-01, -1.183e-01, 3.713e-02, 4.984e-02, -7.153e-02) * s[1][1][1];
	r1 += M4(-9.284e-02, -1.958e-01, 4.945e-02, -1.217e-01, 1.156e-01, -1.043e-02, 2.343e-01, 1.507e-01, -4.726e-02, 4.852e-02, 1.743e-01, 6.965e-02, 1.625e-01, -2.231e-01, -1.198e-02, -1.920e-02) * s[1][1][1];
	r0 += M4(2.289e-01, -2.623e-01, 1.724e-01, 3.085e-02, -1.234e-01, 1.482e-02, -6.997e-02, -1.959e-02, 7.125e-02, -2.175e-01, -1.015e-01, -6.841e-02, -1.406e-01, 1.093e-01, -1.430e-01, 5.209e-01) * s[1][2][0];
	r1 += M4(1.096e-01, 1.045e-01, -5.701e-02, -1.020e-02, 1.538e-02, 4.072e-02, -4.737e-02, 5.430e-02, 1.284e-01, 5.357e-02, -1.706e-01, -1.366e-02, -8.359e-02, 1.558e-01, -2.521e-02, 5.693e-02) * s[1][2][0];
	r0 += M4(8.194e-03, 1.460e-02, 1.145e-05, 1.325e-01, -4.877e-02, 5.083e-03, 1.563e-03, -4.524e-02, -2.766e-02, -2.407e-02, -2.721e-02, 4.914e-02, 2.799e-03, -1.129e-02, -6.611e-03, 6.746e-02) * s[1][2][1];
	r1 += M4(6.213e-02, 2.721e-02, -4.064e-02, -9.139e-02, -2.502e-02, -6.185e-02, 7.887e-02, 2.958e-03, 1.136e-01, -3.609e-02, -3.188e-02, -7.388e-04, 9.306e-03, 7.886e-02, -1.849e-02, 5.910e-02) * s[1][2][1];
	r0 += M4(-8.122e-03, -7.196e-02, -1.480e-01, -1.474e-01, 1.468e-02, -4.700e-02, 7.499e-02, 5.758e-02, 1.212e-01, 5.717e-02, 4.734e-02, -5.373e-02, -4.993e-02, -3.944e-02, 2.194e-02, -1.223e-02) * s[2][0][0];
	r1 += M4(6.865e-02, -3.300e-02, -1.980e-01, -4.992e-03, -5.827e-02, -9.673e-02, 7.836e-02, -5.407e-02, -8.669e-02, 2.579e-02, 6.931e-02, -2.299e-02, -3.998e-02, 2.289e-02, -1.792e-01, -1.119e-01) * s[2][0][0];
	r0 += M4(8.865e-03, -5.700e-02, -6.210e-02, -3.729e-02, 1.980e-03, -5.468e-02, -1.102e-02, 5.477e-02, 3.471e-03, 1.254e-02, 2.960e-02, 5.967e-02, -2.985e-04, -3.056e-02, 6.609e-03, 2.593e-02) * s[2][0][1];
	r1 += M4(7.153e-02, -3.313e-02, -4.543e-02, -1.814e-02, 6.072e-02, -2.152e-02, 4.310e-02, 1.311e-02, -3.321e-02, 1.126e-02, 4.267e-02, 3.803e-02, -2.778e-02, 4.112e-03, -1.267e-02, -1.699e-02) * s[2][0][1];
	r0 += M4(8.405e-02, -3.051e-02, 8.130e-02, -9.890e-02, -1.114e-02, -1.126e-01, 1.151e-01, 3.856e-03, 8.019e-02, 4.742e-02, -2.084e-01, -1.499e-01, 8.563e-02, -8.446e-02, -1.702e-02, 9.691e-02) * s[2][1][0];
	r1 += M4(3.836e-02, -2.823e-02, 1.594e-01, -1.133e-01, 7.928e-02, -5.528e-02, -3.896e-02, -1.500e-01, 1.813e-02, -6.425e-02, -2.933e-02, 2.588e-01, -8.900e-03, -2.914e-02, -6.152e-02, -2.134e-01) * s[2][1][0];
	r0 += M4(-7.295e-03, 1.924e-02, -4.137e-02, -6.442e-02, 4.423e-03, -6.656e-02, -1.272e-02, 1.140e-01, -2.911e-03, 4.353e-02, 2.796e-02, 3.780e-02, 6.506e-02, 2.135e-02, -9.810e-03, -3.752e-02) * s[2][1][1];
	r1 += M4(8.453e-03, -9.415e-02, -4.041e-02, -6.563e-03, 1.222e-01, 1.752e-02, -4.989e-02, -6.872e-02, -3.593e-02, 6.479e-02, 9.937e-02, 5.743e-02, 6.793e-02, -6.845e-02, 4.880e-02, -3.088e-02) * s[2][1][1];
	r0 += M4(6.565e-02, 1.156e-01, 1.888e-02, -2.078e-01, -2.316e-02, -6.798e-03, 5.236e-02, 1.399e-01, 1.759e-02, -3.804e-02, -2.908e-02, -1.844e-01, 6.176e-02, 7.747e-02, 4.147e-02, 3.860e-02) * s[2][2][0];
	r1 += M4(3.409e-02, 1.202e-03, 2.490e-02, -5.925e-02, 1.768e-02, 4.982e-02, 2.112e-02, 2.483e-03, -5.413e-03, 8.946e-04, -1.294e-01, -7.113e-02, 1.126e-02, 3.059e-02, 1.436e-02, -9.057e-02) * s[2][2][0];
	r0 += M4(-1.161e-02, -5.743e-03, -1.226e-02, 4.693e-02, -4.088e-02, 2.654e-02, 6.189e-02, 5.972e-02, 2.710e-02, -3.161e-02, 2.204e-03, -2.499e-02, 1.358e-02, 3.685e-02, -4.828e-03, -2.427e-02) * s[2][2][1];
	r1 += M4(-2.093e-02, -6.078e-03, 1.331e-02, 1.186e-02, -1.868e-02, -2.097e-02, 7.033e-02, -8.902e-03, -3.366e-02, -1.046e-02, -2.449e-02, 3.397e-03, -7.055e-02, 5.283e-02, -2.647e-02, 2.106e-02) * s[2][2][1];
	r0 += V4(-5.334e-03, -2.955e-03, -3.778e-03, -3.986e-03);
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(2.916e-03, -3.868e-03, 5.924e-03, -5.275e-03);
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-6x8C-out-shuffle
//!HOOK LUMA
//!COMPUTE 16 16 8 8
//!BIND LUMA
//!BIND conv6
//!BIND easu
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 1
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(texelFetch(conv6_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv6_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 g[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv6_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			g[0][ay][ax] = l0(x - 1, y - 1);
			g[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s[3][3][2];
	V4 r0 = V4(0.0);
	s[0][0][0] = max(g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[0][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[0][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[0][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[0][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[0][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[0][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(1.231e-02, 1.799e-02, 1.534e-02, -1.351e-03, -2.568e-02, 3.423e-02, 1.716e-02, 1.066e-02, -6.990e-02, -3.648e-02, -8.956e-02, -2.280e-02, 4.771e-02, 4.605e-02, 2.213e-02, 1.870e-03) * s[0][0][0];
	r0 += M4(2.012e-03, -8.342e-03, 1.641e-02, 5.949e-03, -1.425e-02, 3.505e-02, 3.965e-02, 1.630e-02, -4.544e-03, -5.946e-02, -1.118e-01, -5.034e-02, 2.069e-02, 5.023e-02, 2.688e-02, 4.350e-03) * s[0][0][1];
	r0 += M4(2.850e-02, -4.603e-02, -4.398e-02, -1.435e-02, 2.847e-02, -5.630e-02, -4.049e-02, -4.956e-02, 1.256e-01, 2.130e-01, 1.523e-01, -4.503e-02, -9.857e-02, -1.127e-01, -1.881e-02, 6.922e-03) * s[0][1][0];
	r0 += M4(-7.648e-03, -3.461e-02, -5.335e-02, -2.374e-02, -1.649e-03, -8.773e-02, -2.906e-02, 1.415e-02, 4.116e-02, 1.699e-01, 1.246e-01, 2.056e-02, -1.394e-01, -1.628e-01, 5.052e-03, 2.264e-02) * s[0][1][1];
	r0 += M4(5.697e-04, 6.421e-02, -1.780e-02, -2.498e-02, -1.450e-02, -7.487e-03, 1.983e-02, 5.783e-03, 1.151e-01, -4.422e-01, -2.047e-02, -6.737e-03, 8.065e-03, 4.602e-02, 5.466e-04, 2.247e-02) * s[0][2][0];
	r0 += M4(-1.702e-02, 2.777e-02, -4.015e-03, -8.445e-03, 3.765e-04, 3.576e-02, 1.942e-02, 4.679e-03, -1.079e-01, -1.391e-01, -8.374e-02, -5.674e-03, 4.613e-03, 2.016e-02, -1.064e-03, 3.352e-02) * s[0][2][1];
	r0 += M4(7.059e-02, 2.583e-02, 1.046e-03, 1.506e-02, 9.696e-02, 8.179e-02, -7.942e-02, 3.899e-02, 2.707e-01, -2.478e-01, 2.011e-01, -1.724e-01, -7.451e-02, 1.235e-02, -1.274e-01, 8.010e-02) * s[1][0][0];
	r0 += M4(5.216e-02, 9.002e-02, -4.940e-02, 1.005e-02, 1.327e-01, 8.423e-02, -1.663e-01, 3.171e-02, 1.866e-02, -9.058e-02, 2.227e-01, -8.618e-02, -1.445e-02, 2.256e-02, -1.489e-01, 5.921e-02) * s[1][0][1];
	r0 += M4(-3.623e-01, -2.807e-01, -5.300e-02, -2.302e-01, 3.294e-01, 1.792e-01, 1.522e-01, -5.349e-02, -7.246e-01, 1.179e-01, -4.515e-01, 7.402e-01, -1.393e-01, -2.303e-01, -2.231e-01, -5.180e-01) * s[1][1][0];
	r0 += M4(-3.683e-01, -3.764e-01, -2.175e-02, -1.886e-01, 1.962e-01, 1.880e-01, -1.784e-02, -3.154e-01, -1.534e-01, -2.184e-01, -1.663e-01, 2.302e-01, 6.018e-02, -8.491e-02, -2.726e-01, -5.530e-01) * s[1][1][1];
	r0 += M4(-2.205e-02, -1.735e-01, 2.730e-02, 7.795e-02, -2.436e-02, 4.072e-02, -2.624e-02, -3.843e-02, 1.101e-01, 3.852e-01, 2.622e-01, -6.236e-01, 1.665e-02, 3.301e-03, 1.963e-02, 6.323e-02) * s[1][2][0];
	r0 += M4(-3.635e-02, -7.799e-02, -4.800e-02, 3.091e-02, -1.586e-02, -2.016e-02, 1.487e-03, 2.302e-02, 4.465e-02, 2.278e-01, -6.038e-02, -9.196e-02, 1.808e-02, 5.846e-02, 1.349e-02, 2.627e-02) * s[1][2][1];
	r0 += M4(9.789e-02, 6.806e-02, 1.442e-01, 8.066e-02, -3.197e-02, 4.946e-02, 4.510e-02, 7.368e-02, 8.878e-02, 1.680e-02, 3.412e-01, -6.567e-02, -3.940e-02, 2.191e-02, 1.251e-02, 2.271e-02) * s[2][0][0];
	r0 += M4(9.852e-02, 5.531e-02, 1.831e-01, 7.004e-02, -6.444e-02, 3.765e-02, 8.766e-02, 8.955e-02, 1.538e-01, 4.238e-02, 1.915e-01, 4.195e-02, -5.066e-02, -1.061e-04, 1.431e-02, 1.394e-02) * s[2][0][1];
	r0 += M4(-2.029e-02, -1.444e-01, -1.414e-01, -1.431e-01, -5.885e-02, -1.672e-01, 1.997e-01, 3.324e-02, 3.436e-01, -9.342e-02, -2.314e-01, -2.069e-01, 3.571e-02, -8.084e-02, 3.234e-02, -8.879e-03) * s[2][1][0];
	r0 += M4(1.472e-01, 2.142e-02, -4.878e-01, -1.987e-01, -6.780e-02, -2.031e-01, 1.809e-01, 6.112e-02, 1.165e-01, 2.488e-02, -1.090e-01, -1.426e-01, 2.049e-02, -8.459e-02, 6.824e-02, 2.209e-02) * s[2][1][1];
	r0 += M4(2.971e-02, 1.274e-01, 1.921e-02, 2.010e-02, 2.512e-02, -1.716e-02, -1.473e-02, 4.511e-02, -4.563e-02, 1.431e-01, -1.666e-01, 3.550e-01, -2.328e-03, 4.648e-02, -3.227e-03, 3.077e-02) * s[2][2][0];
	r0 += M4(2.655e-02, 1.799e-01, 2.606e-02, -1.460e-01, 3.288e-03, 7.802e-04, -3.121e-02, 4.607e-02, -1.060e-02, 9.311e-02, -1.203e-02, 5.400e-02, 1.807e-03, 3.793e-02, -3.139e-03, 1.898e-02) * s[2][2][1];
	s[0][0][0] = max(g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[1][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[1][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[1][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[1][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[1][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[1][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(-1.790e-01, 1.398e-02, -1.485e-02, -1.645e-02, 6.657e-02, 1.976e-02, -4.619e-02, -1.052e-02, 7.575e-03, 3.105e-03, 4.679e-02, 2.185e-03, 4.164e-03, 9.553e-03, -3.775e-02, -1.235e-03) * s[0][0][0];
	r0 += M4(-5.347e-02, -3.958e-02, 6.513e-03, -1.457e-02, -7.308e-02, 1.029e-01, -4.833e-02, -5.430e-03, -3.354e-03, -5.283e-03, 3.593e-02, -2.184e-03, -7.333e-03, -4.494e-03, -8.535e-02, -2.011e-03) * s[0][0][1];
	r0 += M4(9.879e-02, -9.009e-02, -1.565e-01, -3.723e-02, 6.003e-04, 1.521e-01, -2.131e-02, 1.145e-02, 8.632e-02, 6.666e-02, -1.459e-01, -8.351e-02, -1.728e-02, -8.086e-02, 8.201e-02, 1.360e-02) * s[0][1][0];
	r0 += M4(-2.887e-02, -2.938e-02, -1.526e-01, -6.924e-02, 3.747e-01, -6.296e-02, -3.973e-02, -4.524e-02, 1.416e-01, 1.092e-01, -1.715e-01, -1.018e-01, 7.047e-02, -2.178e-03, 3.858e-02, -7.549e-02) * s[0][1][1];
	r0 += M4(5.879e-02, -1.798e-02, 3.170e-02, -2.241e-02, 1.816e-02, -8.581e-02, 5.808e-02, -2.841e-03, 1.022e-02, 1.071e-02, 6.524e-03, -5.631e-02, 1.157e-02, 4.821e-02, -2.568e-02, 7.929e-03) * s[0][2][0];
	r0 += M4(4.383e-02, 1.061e-02, 3.472e-02, -3.247e-02, -3.533e-02, -1.691e-01, 5.340e-02, 3.148e-02, 2.189e-02, 2.766e-02, 1.153e-02, -5.933e-02, -1.491e-02, 3.755e-02, -1.516e-02, 1.248e-02) * s[0][2][1];
	r0 += M4(5.481e-02, 1.353e-01, -1.929e-01, 1.243e-01, -1.248e-01, -6.615e-03, 1.762e-01, 4.209e-02, 7.831e-02, 2.017e-01, 1.029e-02, 2.069e-01, 1.237e-01, -1.240e-01, -1.584e-01, -1.270e-01) * s[1][0][0];
	r0 += M4(7.465e-02, 1.418e-02, -6.584e-02, -4.973e-02, -1.113e-01, 4.627e-02, -6.829e-02, 1.919e-01, 9.053e-02, 1.502e-01, 6.166e-02, 1.304e-01, -4.382e-02, -1.135e-01, 1.894e-02, -7.155e-02) * s[1][0][1];
	r0 += M4(5.755e-01, -8.079e-01, 7.598e-01, -4.496e-01, 1.243e-01, -1.798e-01, 1.147e-01, 1.599e-01, -3.311e-01, 2.920e-02, 1.218e-01, 1.287e-01, 4.190e-01, 5.025e-01, 6.567e-02, -2.202e-01) * s[1][1][0];
	r0 += M4(-1.898e-03, -1.796e-01, 2.884e-01, -3.119e-02, 6.875e-01, -9.518e-01, 1.052e+00, -5.236e-01, -3.290e-01, -1.390e-02, 1.877e-01, 2.842e-01, 5.321e-02, 4.263e-02, 2.979e-01, 1.490e-01) * s[1][1][1];
	r0 += M4(-1.266e-01, 9.204e-02, -1.886e-02, 3.242e-02, 7.235e-02, 1.174e-01, 2.028e-04, -5.411e-02, 6.099e-02, -1.665e-01, 1.811e-02, -1.272e-02, -1.567e-01, -1.547e-01, -1.139e-01, -8.106e-03) * s[1][2][0];
	r0 += M4(-2.513e-02, -1.113e-02, -1.256e-02, 3.475e-02, -1.225e-01, 2.977e-01, -1.542e-01, -5.853e-02, 2.844e-02, -2.524e-01, 6.709e-02, -1.872e-03, -1.233e-01, -2.036e-01, -5.489e-02, 2.296e-02) * s[1][2][1];
	r0 += M4(-1.597e-02, -5.338e-03, 1.577e-01, 4.743e-02, 2.527e-02, -1.714e-02, -1.325e-01, -3.840e-02, -1.013e-01, -4.355e-02, -6.633e-02, -1.377e-02, 1.370e-02, 3.054e-02, 1.630e-01, 6.666e-02) * s[2][0][0];
	r0 += M4(9.111e-03, -2.708e-02, 1.184e-01, 1.983e-02, -1.338e-02, -4.163e-02, -4.084e-02, -5.687e-02, -8.185e-02, -5.237e-02, -1.584e-01, -6.058e-02, 1.027e-01, 4.499e-02, 1.605e-01, 4.846e-02) * s[2][0][1];
	r0 += M4(4.919e-02, 3.816e-03, 1.831e-01, -2.999e-01, -6.984e-02, 8.374e-02, -2.867e-02, -3.833e-02, -6.407e-02, 2.274e-02, -1.382e-01, 7.009e-02, 1.323e-01, -3.350e-02, -2.041e-01, -5.995e-02) * s[2][1][0];
	r0 += M4(5.989e-02, 5.561e-02, -7.794e-02, -1.575e-02, 7.514e-03, 1.003e-01, 1.153e-01, -2.812e-01, -2.365e-02, 6.958e-02, -7.007e-02, 4.023e-03, 7.352e-03, -1.343e-02, -8.958e-02, -2.601e-02) * s[2][1][1];
	r0 += M4(2.049e-02, 5.150e-03, -8.031e-02, 9.373e-02, 8.504e-03, -7.579e-02, 1.122e-02, -3.219e-02, -2.435e-02, -1.704e-02, 7.740e-02, -4.346e-03, -4.382e-02, 7.293e-02, 7.457e-03, -5.334e-02) * s[2][2][0];
	r0 += M4(1.558e-04, -1.173e-02, -4.612e-04, -1.225e-02, -4.016e-02, -8.615e-02, -6.275e-02, 1.233e-01, 1.803e-02, -3.888e-02, 4.946e-02, -5.235e-02, -2.798e-02, -7.252e-03, 3.148e-02, 1.993e-02) * s[2][2][1];
	r0 += V4(3.640e-03, 1.660e-03, 2.678e-03, 2.685e-04);
	r0 = tanh(r0);
	vec2 opt = 0.5 * LUMA_pt;
	vec2 fpos = (vec2(opos) + vec2(0.5)) * opt;
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0.x + easu_tex(fpos + vec2(0.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r0.y + easu_tex(fpos + vec2(1.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(0, 1), vec4(r0.z + easu_tex(fpos + vec2(0.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 1), vec4(r0.w + easu_tex(fpos + vec2(1.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
}
