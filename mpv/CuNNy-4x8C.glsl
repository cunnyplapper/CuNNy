// CuNNy 4x8C
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

// FSR mpv | modified
// Copyright (c) 2021 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// FidelityFX FSR v1.0.2 by AMD
// ported to mpv by agyild

//!DESC CuNNy-4x8C-EASU
//!HOOK LUMA
//!BIND LUMA
//!SAVE easu
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
//!COMPONENTS 1

float APrxLoRcpF1(float a) {
	return uintBitsToFloat(uint(0x7ef07ebb) - floatBitsToUint(a));
}

float APrxLoRsqF1(float a) {
	return uintBitsToFloat(uint(0x5f347d74) - (floatBitsToUint(a) >> uint(1)));
}

float AMin3F1(float x, float y, float z) {
	return min(x, min(y, z));
}

float AMax3F1(float x, float y, float z) {
	return max(x, max(y, z));
}

void tap(inout float aC, inout float aW, vec2 off, vec2 dir, vec2 len,
         float lob, float clp, float c){
	vec2 v;
	v.x = (off.x * ( dir.x)) + (off.y * dir.y);
	v.y = (off.x * (-dir.y)) + (off.y * dir.x);
	v *= len;
	float d2 = v.x * v.x + v.y * v.y;
	d2 = min(d2, clp);
	float wB = float(2.0 / 5.0) * d2 + -1.0;
	float wA = lob * d2 + -1.0;
	wB *= wB;
	wA *= wA;
	wB = float(25.0 / 16.0) * wB + float(-(25.0 / 16.0 - 1.0));
	float w = wB * wA;
	aC += c * w;
	aW += w;
}

void set(inout vec2 dir, inout float len, vec2 pp, bool biS, bool biT,
         bool biU, bool biV, float lA, float lB, float lC, float lD, float lE){
	float w = 0.0;
	if (biS)
		w = (1.0 - pp.x) * (1.0 - pp.y);
	if (biT)
		w =        pp.x  * (1.0 - pp.y);
	if (biU)
		w = (1.0 - pp.x) *        pp.y;
	if (biV)
		w =        pp.x  *        pp.y;
	float dc = lD - lC;
	float cb = lC - lB;
	float lenX = max(abs(dc), abs(cb));
	lenX = APrxLoRcpF1(lenX);
	float dirX = lD - lB;
	lenX = clamp(abs(dirX) * lenX, 0.0, 1.0);
	lenX *= lenX;
	float ec = lE - lC;
	float ca = lC - lA;
	float lenY = max(abs(ec), abs(ca));
	lenY = APrxLoRcpF1(lenY);
	float dirY = lE - lA;
	lenY = clamp(abs(dirY) * lenY, 0.0, 1.0);
	lenY *= lenY;
	dir += vec2(dirX, dirY) * w;
	len += dot(vec2(w), vec2(lenX, lenY));
}

vec4 hook() {
	vec4 pix = vec4(0.0, 0.0, 0.0, 1.0);
	vec2 pp = LUMA_pos * LUMA_size - vec2(0.5);
	vec2 fp = floor(pp);
	pp -= fp;
#if (defined(LUMA_gather) && (__VERSION__ >= 400 || (GL_ES && __VERSION__ >= 310)))
	vec4 bczzL = LUMA_gather(vec2((fp + vec2(1.0, -1.0)) * LUMA_pt), 0);
	vec4 ijfeL = LUMA_gather(vec2((fp + vec2(0.0,  1.0)) * LUMA_pt), 0);
	vec4 klhgL = LUMA_gather(vec2((fp + vec2(2.0,  1.0)) * LUMA_pt), 0);
	vec4 zzonL = LUMA_gather(vec2((fp + vec2(1.0,  3.0)) * LUMA_pt), 0);
#else
	float b = LUMA_tex(vec2((fp + vec2(0.5, -0.5)) * LUMA_pt)).r;
	float c = LUMA_tex(vec2((fp + vec2(1.5, -0.5)) * LUMA_pt)).r;
	float e = LUMA_tex(vec2((fp + vec2(-0.5, 0.5)) * LUMA_pt)).r;
	float f = LUMA_tex(vec2((fp + vec2( 0.5, 0.5)) * LUMA_pt)).r;
	float g = LUMA_tex(vec2((fp + vec2( 1.5, 0.5)) * LUMA_pt)).r;
	float h = LUMA_tex(vec2((fp + vec2( 2.5, 0.5)) * LUMA_pt)).r;
	float i = LUMA_tex(vec2((fp + vec2(-0.5, 1.5)) * LUMA_pt)).r;
	float j = LUMA_tex(vec2((fp + vec2( 0.5, 1.5)) * LUMA_pt)).r;
	float k = LUMA_tex(vec2((fp + vec2( 1.5, 1.5)) * LUMA_pt)).r;
	float l = LUMA_tex(vec2((fp + vec2( 2.5, 1.5)) * LUMA_pt)).r;
	float n = LUMA_tex(vec2((fp + vec2(0.5, 2.5) ) * LUMA_pt)).r;
	float o = LUMA_tex(vec2((fp + vec2(1.5, 2.5) ) * LUMA_pt)).r;
	vec4 bczzL = vec4(b, c, 0.0, 0.0);
	vec4 ijfeL = vec4(i, j, f, e);
	vec4 klhgL = vec4(k, l, h, g);
	vec4 zzonL = vec4(0.0, 0.0, o, n);
#endif
	float bL = bczzL.x;
	float cL = bczzL.y;
	float iL = ijfeL.x;
	float jL = ijfeL.y;
	float fL = ijfeL.z;
	float eL = ijfeL.w;
	float kL = klhgL.x;
	float lL = klhgL.y;
	float hL = klhgL.z;
	float gL = klhgL.w;
	float oL = zzonL.z;
	float nL = zzonL.w;
	vec2 dir = vec2(0.0);
	float len = 0.0;
	set(dir, len, pp, true, false, false, false, bL, eL, fL, gL, jL);
	set(dir, len, pp, false, true, false, false, cL, fL, gL, hL, kL);
	set(dir, len, pp, false, false, true, false, fL, iL, jL, kL, nL);
	set(dir, len, pp, false, false, false, true, gL, jL, kL, lL, oL);
	vec2 dir2 = dir * dir;
	float dirR = dir2.x + dir2.y;
	bool zro = dirR < float(1.0 / 32768.0);
	dirR = APrxLoRsqF1(dirR);
	dirR = zro ? 1.0 : dirR;
	dir.x = zro ? 1.0 : dir.x;
	dir *= vec2(dirR);
	len = len * 0.5;
	len *= len;
	float stretch = (dir.x * dir.x + dir.y * dir.y) * APrxLoRcpF1(max(abs(dir.x), abs(dir.y)));
	vec2 len2 = vec2(1.0 + (stretch - 1.0) * len, 1.0 + -0.5 * len);
	float lob = 0.5 + float((1.0 / 4.0 - 0.04) - 0.5) * len;
	float clp = APrxLoRcpF1(lob);
	float aC = 0.0;
	float aW = 0.0;
	tap(aC, aW, vec2( 0.0,-1.0) - pp, dir, len2, lob, clp, bL);
	tap(aC, aW, vec2( 1.0,-1.0) - pp, dir, len2, lob, clp, cL);
	tap(aC, aW, vec2(-1.0, 1.0) - pp, dir, len2, lob, clp, iL);
	tap(aC, aW, vec2( 0.0, 1.0) - pp, dir, len2, lob, clp, jL);
	tap(aC, aW, vec2( 0.0, 0.0) - pp, dir, len2, lob, clp, fL);
	tap(aC, aW, vec2(-1.0, 0.0) - pp, dir, len2, lob, clp, eL);
	tap(aC, aW, vec2( 1.0, 1.0) - pp, dir, len2, lob, clp, kL);
	tap(aC, aW, vec2( 2.0, 1.0) - pp, dir, len2, lob, clp, lL);
	tap(aC, aW, vec2( 2.0, 0.0) - pp, dir, len2, lob, clp, hL);
	tap(aC, aW, vec2( 1.0, 0.0) - pp, dir, len2, lob, clp, gL);
	tap(aC, aW, vec2( 1.0, 2.0) - pp, dir, len2, lob, clp, oL);
	tap(aC, aW, vec2( 0.0, 2.0) - pp, dir, len2, lob, clp, nL);
	pix.r = aC / aW;
	float min1 = min(AMin3F1(fL, gL, jL), kL);
	float max1 = max(AMax3F1(fL, gL, jL), kL);
	pix.r = clamp(pix.r, min1, max1);
	pix.r = clamp(pix.r, 0.0, 1.0);
	return pix;
}


//!DESC CuNNy-4x8C-in
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND LUMA
//!SAVE in
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) F(LUMA_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(1, 1) + ivec2(0, 0)) + vec2(0.5)) * LUMA_pt).r)
shared F g[1][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = LUMA_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			g[0][ay][ax] = l0(x - 1, y - 1);
		}
	}
	barrier();
	F s[3][3][1];
	V4 r0 = V4(0.0);
	V4 r1 = V4(0.0);
	s[0][0][0] = g[0][xy.y+0][xy.x+0];
	s[0][1][0] = g[0][xy.y+0][xy.x+1];
	s[0][2][0] = g[0][xy.y+0][xy.x+2];
	s[1][0][0] = g[0][xy.y+1][xy.x+0];
	s[1][1][0] = g[0][xy.y+1][xy.x+1];
	s[1][2][0] = g[0][xy.y+1][xy.x+2];
	s[2][0][0] = g[0][xy.y+2][xy.x+0];
	s[2][1][0] = g[0][xy.y+2][xy.x+1];
	s[2][2][0] = g[0][xy.y+2][xy.x+2];
	r0 += V4(-6.758e-04, 1.123e-02, -1.442e-04, -4.871e-02) * s[0][0][0];
	r1 += V4(-2.067e-02, -5.928e-02, 2.212e-02, -4.402e-02) * s[0][0][0];
	r0 += V4(-8.001e-05, 3.580e-01, -5.862e-02, -1.394e-02) * s[0][1][0];
	r1 += V4(8.868e-02, 1.142e-02, -1.129e-02, 4.736e-01) * s[0][1][0];
	r0 += V4(-3.172e-03, -2.072e-02, 7.244e-02, 4.651e-02) * s[0][2][0];
	r1 += V4(7.642e-02, 3.593e-02, 6.087e-02, -2.387e-02) * s[0][2][0];
	r0 += V4(1.235e-03, -4.367e-01, 4.895e-02, 6.780e-03) * s[1][0][0];
	r1 += V4(1.110e-01, -2.962e-01, -4.557e-02, 6.854e-02) * s[1][0][0];
	r0 += V4(3.134e-03, 7.566e-02, 2.744e-01, 3.896e-01) * s[1][1][0];
	r1 += V4(-3.799e-02, -4.305e-02, -2.419e-01, -4.780e-01) * s[1][1][0];
	r0 += V4(-9.546e-03, 1.494e-02, -5.021e-01, -1.694e-01) * s[1][2][0];
	r1 += V4(-2.891e-02, 1.142e-01, 4.957e-02, 1.887e-02) * s[1][2][0];
	r0 += V4(-3.861e-03, 2.719e-03, -6.274e-02, 5.165e-02) * s[2][0][0];
	r1 += V4(1.194e-01, 1.597e-01, 1.472e-02, -2.081e-02) * s[2][0][0];
	r0 += V4(-1.262e-02, -4.919e-03, 1.203e-01, 4.792e-02) * s[2][1][0];
	r1 += V4(2.233e-01, 2.549e-01, -2.154e-02, 1.748e-02) * s[2][1][0];
	r0 += V4(4.592e-01, 1.911e-03, 1.063e-01, -3.115e-01) * s[2][2][0];
	r1 += V4(-9.040e-03, -1.782e-01, 1.333e-01, -1.509e-02) * s[2][2][0];
	r0 += V4(-4.227e-03, -7.544e-04, 1.310e-03, -2.046e-03);
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-2.446e-01, -2.174e-03, 5.408e-02, 9.431e-03);
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-4x8C-conv1
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND in
//!BIND LUMA
//!SAVE conv1
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(in_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0)) + vec2(0.5)) * in_pt))
#define l1(x, y) V4(in_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0)) + vec2(0.5)) * in_pt))
shared V4 g[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = in_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			g[0][ay][ax] = l0(x - 1, y - 1);
			g[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s[3][3][2];
	V4 r0 = V4(0.0);
	V4 r1 = V4(0.0);
	s[0][0][0] = max(g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[0][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[0][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[0][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[0][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[0][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[0][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(-1.910e-01, 2.341e-01, -9.199e-02, -1.689e-02, -5.211e-02, 1.046e-01, 6.121e-02, -4.910e-03, -7.267e-02, -1.084e-02, -3.352e-01, 6.505e-02, 1.180e-01, 9.894e-02, 9.041e-02, -3.479e-01) * s[0][0][0];
	r1 += M4(4.376e-02, -4.401e-02, 8.607e-02, -8.388e-03, -2.178e-01, 9.692e-02, 8.578e-02, 4.308e-02, -1.491e-01, -8.373e-02, 1.372e-01, -7.452e-02, -5.708e-01, -9.533e-02, -2.858e-01, 1.092e-01) * s[0][0][0];
	r0 += M4(-1.933e+00, -8.009e+00, 5.330e+00, -4.400e+00, -8.261e-02, 1.170e-01, 7.951e-02, 6.795e-02, -7.899e-03, -2.939e-02, -6.385e-02, -1.568e-01, -3.380e-02, 2.528e-01, 2.228e-01, 6.763e-02) * s[0][0][1];
	r1 += M4(1.379e+00, -2.793e+00, -1.044e+00, 7.321e+00, -2.173e-01, 8.626e-02, 6.614e-02, 4.019e-02, -1.456e-01, -1.126e-02, -1.507e-01, -1.073e-01, 6.558e-03, -1.411e-01, -1.845e-01, 8.632e-02) * s[0][0][1];
	r0 += M4(6.665e-02, -6.103e-02, 7.348e-02, 1.357e-02, 9.204e-02, -2.158e-02, 2.202e-01, 1.782e-01, -1.160e-01, -4.262e-02, 5.065e-02, 4.235e-01, 1.867e-01, -6.984e-02, 5.657e-02, 4.596e-02) * s[0][1][0];
	r1 += M4(-6.881e-02, -1.343e-01, 1.538e-02, -4.190e-03, 5.587e-02, -6.824e-02, -6.422e-02, -1.683e-02, 3.155e-01, -3.008e-02, 1.179e-01, 1.563e-01, -7.886e-02, -1.060e-01, -4.661e-03, 1.062e-01) * s[0][1][0];
	r0 += M4(-2.137e+00, -1.853e+00, -2.002e+00, -1.711e-01, 7.308e-02, -1.173e-02, 3.414e-01, 7.212e-03, 1.489e-02, -4.257e-02, -7.943e-03, -3.517e-01, -3.165e-01, -1.045e-02, 4.121e-02, 7.211e-01) * s[0][1][1];
	r1 += M4(7.138e-01, -4.353e-01, 1.992e+00, -2.793e-01, -1.227e-01, -9.956e-02, 4.009e-02, -4.016e-02, -9.618e-03, 5.216e-03, -4.508e-03, 6.606e-02, 3.313e-01, -3.217e-02, 4.358e-02, 8.960e-02) * s[0][1][1];
	r0 += M4(-5.663e-02, -2.583e-02, -1.013e-01, 6.998e-02, 1.820e-01, 3.918e-02, -8.601e-02, -6.534e-03, -3.476e-02, -3.001e-02, 8.451e-02, 2.824e-01, 1.833e-01, 2.357e-02, 6.532e-02, -2.043e-01) * s[0][2][0];
	r1 += M4(2.250e-02, -1.040e-01, -1.335e-02, 1.202e-01, 1.146e-01, 3.229e-02, 4.189e-02, 3.486e-02, 1.634e-01, 9.367e-02, 8.267e-02, -1.134e-02, -2.495e-02, -2.173e-01, -1.751e-01, 6.958e-02) * s[0][2][0];
	r0 += M4(1.625e+00, 5.024e-01, 3.355e-01, 4.396e-01, 8.374e-02, 2.318e-02, -1.909e-01, -9.886e-02, -4.639e-03, -9.319e-02, -4.715e-02, -3.816e-02, -1.319e-01, 6.575e-02, 9.094e-02, 6.870e-02) * s[0][2][1];
	r1 += M4(-3.639e-01, -1.007e+00, -3.140e-01, 8.495e-02, -6.874e-02, 3.247e-02, 1.509e-01, 5.298e-03, -1.192e-02, 1.377e-02, 2.056e-01, -6.373e-02, 1.599e-01, -1.236e-01, 3.106e-02, 5.604e-02) * s[0][2][1];
	r0 += M4(3.547e-03, -3.939e-02, -1.460e-01, 1.003e-01, -3.236e-02, -7.288e-02, -1.200e-01, 8.016e-02, 1.896e-01, 3.229e-01, -4.212e-02, 2.178e-02, -7.602e-02, 8.204e-02, 3.237e-03, -9.038e-02) * s[1][0][0];
	r1 += M4(3.744e-02, -3.066e-02, -1.445e-02, 1.440e-01, 4.655e-01, 3.018e-01, 1.577e-01, -1.520e-02, -2.120e-01, -3.252e-01, 3.479e-01, -4.794e-01, -4.567e-01, 1.879e-01, -2.360e-02, -1.448e-01) * s[1][0][0];
	r0 += M4(-6.759e-01, -2.510e+00, -7.736e-01, -2.499e+00, 6.900e-03, -8.912e-02, -1.013e-01, 1.991e-01, -1.327e-02, -4.806e-03, -1.049e-01, 9.135e-02, -3.782e-02, 2.510e-02, 1.556e-01, 6.121e-01) * s[1][0][1];
	r1 += M4(2.620e+00, 2.633e+00, -1.911e+00, 1.321e+00, 3.936e-01, 3.069e-01, 7.508e-02, -3.904e-02, -3.093e-01, 3.297e-01, 2.191e-01, 7.710e-02, 2.669e-01, 4.570e-02, -1.526e-03, -1.417e-01) * s[1][0][1];
	r0 += M4(1.641e-01, -4.061e-02, 1.590e-01, -1.788e-03, -2.955e-01, 3.880e-02, -1.344e-01, 1.438e-01, -2.122e-02, 3.408e-02, 1.180e-01, 1.117e-01, -9.558e-03, -2.168e-01, 2.144e-03, -3.975e-01) * s[1][1][0];
	r1 += M4(3.522e-03, 1.458e-01, 1.413e-02, 3.538e-02, 2.846e-01, -2.743e-01, 1.664e-01, -2.668e-02, 3.995e-01, -1.161e-01, -5.915e-01, 2.378e-01, -1.273e-01, -2.633e-01, -6.202e-01, 2.865e-02) * s[1][1][0];
	r0 += M4(-3.273e+00, -1.073e+00, 3.572e-01, -1.927e+00, 9.486e-02, 4.679e-02, 1.407e-01, -3.882e-01, -6.179e-01, -2.277e-02, 2.862e-01, -4.539e-01, -5.478e-01, -1.774e-01, 6.984e-01, 3.648e-02) * s[1][1][1];
	r1 += M4(2.653e+00, -1.608e+00, -3.833e-01, -5.458e-01, -4.395e-01, -2.882e-01, 7.257e-02, -1.650e-02, -1.834e-01, 8.010e-02, -3.222e-01, 8.044e-02, 1.892e-01, -5.714e-02, 2.164e-01, -9.809e-03) * s[1][1][1];
	r0 += M4(1.851e-01, -7.846e-03, -2.358e-02, -2.338e-03, -1.757e-02, 2.684e-02, -6.231e-01, 3.707e-02, 8.438e-02, 1.194e-01, 2.104e-01, 4.228e-01, 1.546e-01, -6.012e-02, 1.966e-01, -5.720e-03) * s[1][2][0];
	r1 += M4(1.017e-01, 2.170e-01, -7.434e-02, -1.067e-01, 4.383e-01, 1.676e-01, -5.301e-02, -8.132e-01, 2.529e-01, 1.364e-02, 1.868e-02, -1.733e-03, -1.041e-01, 1.476e-01, -3.093e-02, -5.066e-02) * s[1][2][0];
	r0 += M4(-6.383e-01, -3.498e-01, 1.898e+00, -9.248e-02, 3.742e-01, 1.523e-01, -2.388e-01, 6.913e-02, -1.073e-01, 5.676e-02, -4.913e-03, -9.906e-02, -6.606e-02, -1.786e-01, -1.146e-01, -5.480e-02) * s[1][2][1];
	r1 += M4(4.765e-01, 6.731e-01, -6.438e-01, -2.492e-01, 4.125e-02, 4.528e-02, 4.937e-01, -1.004e-01, -1.730e-01, -2.747e-02, 5.410e-01, -3.295e-02, -7.357e-04, 7.812e-03, 4.814e-01, -8.352e-02) * s[1][2][1];
	r0 += M4(-1.193e-01, 1.082e-01, 3.106e-02, -8.332e-02, -2.489e-02, 2.103e-02, 5.687e-02, 1.883e-02, 5.437e-02, 9.916e-03, -3.380e-01, 1.517e-01, -1.893e-01, 6.721e-02, -1.558e-01, -4.780e-02) * s[2][0][0];
	r1 += M4(-9.253e-02, -8.370e-02, -2.243e-02, -1.930e-02, -1.939e-01, -2.253e-01, -1.524e-01, 8.911e-02, 2.956e-01, -2.134e-01, 1.264e-01, 7.393e-02, -2.105e-01, -1.370e-01, -6.641e-02, 8.276e-02) * s[2][0][0];
	r0 += M4(1.587e-01, 2.364e-01, 5.484e-01, -2.437e-01, -4.594e-02, 3.789e-02, 5.173e-02, -2.143e-02, 5.618e-02, -4.818e-02, -2.783e-01, -1.412e-01, -1.997e-01, 1.255e-01, -4.970e-03, -5.380e-02) * s[2][0][1];
	r1 += M4(1.260e-01, 4.386e-01, 3.947e-02, 5.109e-02, -2.803e-01, -2.666e-01, -1.156e-01, 4.807e-02, 3.686e-02, -2.429e-01, -6.858e-02, 1.489e-02, 8.548e-03, -2.056e-01, -5.995e-02, 5.599e-02) * s[2][0][1];
	r0 += M4(-5.169e-02, 8.000e-02, -8.518e-02, -3.150e-02, -1.003e-01, -8.509e-02, -2.991e-01, 1.200e-01, 1.428e-02, -1.123e-01, -9.552e-02, 6.723e-03, 1.262e-01, 6.040e-02, -1.499e-01, -2.033e-01) * s[2][1][0];
	r1 += M4(8.844e-02, 1.668e-01, 1.281e-01, 4.952e-04, -1.650e-01, -2.335e-01, -2.908e-02, 5.142e-01, -1.782e-01, 1.736e-01, 2.662e-02, -3.275e-02, -1.091e-01, 4.616e-01, 8.347e-02, -1.820e-02) * s[2][1][0];
	r0 += M4(-9.142e-01, -2.140e-03, -2.031e+00, -2.298e-02, 2.664e-01, 8.997e-02, -1.961e-01, -7.792e-01, 2.596e-01, -1.484e-01, -5.642e-02, -3.721e-01, 5.910e-02, 1.552e-01, -1.898e-01, -5.893e-02) * s[2][1][1];
	r1 += M4(-2.450e-02, -1.001e+00, 4.297e-01, -2.130e-02, -2.017e-01, -2.128e-01, -1.712e-01, 6.724e-01, -3.622e-02, 1.185e-01, -1.753e-01, -9.166e-02, 2.566e-01, 1.343e-01, 8.277e-02, -3.137e-02) * s[2][1][1];
	r0 += M4(1.100e-01, -6.969e-02, -1.479e-01, -4.883e-02, 6.592e-01, -8.014e-02, 1.226e-01, 4.182e-01, 1.155e-01, 8.920e-02, 1.735e-01, 2.806e-01, 1.408e-01, -7.294e-02, -1.276e-01, -1.253e-01) * s[2][2][0];
	r1 += M4(-3.294e-02, 2.624e-02, -1.087e-01, -6.712e-03, 6.849e-01, -1.485e-01, -6.274e-03, -8.738e-02, 1.135e-01, 1.713e-01, -1.188e-01, -7.225e-02, -3.286e-02, 5.041e-02, -2.376e-01, 2.732e-02) * s[2][2][0];
	r0 += M4(9.164e-01, 2.484e-01, 1.441e+00, 1.846e+00, -1.725e-02, 2.021e-02, -3.754e-01, -2.991e-01, 9.747e-02, 8.087e-02, 5.080e-02, 3.869e-03, 1.376e-01, -1.029e-01, -1.048e-01, 5.426e-02) * s[2][2][1];
	r1 += M4(1.297e+00, 5.255e-01, -5.335e-02, 2.762e-01, -1.850e-01, -2.151e-01, 2.851e-01, 3.269e-02, -9.778e-02, 2.052e-01, 1.244e-01, -8.672e-02, 8.187e-02, 1.042e-01, -6.857e-02, 7.586e-04) * s[2][2][1];
	s[0][0][0] = max(g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[1][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[1][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[1][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[1][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[1][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[1][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(-1.050e-01, 9.389e-02, -1.041e-01, -6.371e-02, 1.671e-02, -1.380e-01, -2.358e-01, -1.015e-03, 5.661e-02, -1.267e-01, -1.196e-01, -9.994e-02, 6.286e-02, -1.265e-01, -1.125e-01, 3.981e-02) * s[0][0][0];
	r1 += M4(4.090e-02, 7.085e-02, 1.519e-01, 3.540e-02, 2.106e-01, 1.095e-02, -3.957e-02, -6.405e-02, 2.563e-01, -9.599e-02, -2.479e-02, 6.179e-04, 2.496e-01, -7.421e-02, -6.721e-02, -9.195e-03) * s[0][0][0];
	r0 += M4(-1.060e-01, 1.189e-01, -2.161e-02, -2.372e-02, 8.607e-03, -1.367e-01, -1.470e-01, 3.332e-02, -1.686e-01, -1.502e-01, -2.854e-01, 2.556e-01, 3.289e-02, -1.517e-01, -2.053e-01, 1.083e-02) * s[0][0][1];
	r1 += M4(9.529e-02, 9.379e-02, 2.036e-01, 2.715e-02, 3.402e-01, 6.112e-02, 6.881e-02, -7.915e-02, 9.505e-02, 6.152e-03, -8.106e-02, 1.358e-01, 2.803e-01, -6.919e-02, -1.078e-01, -2.576e-02) * s[0][0][1];
	r0 += M4(-3.213e-03, -1.082e-01, 1.198e-03, -3.324e-02, -6.802e-02, 5.305e-02, -2.560e-01, -1.854e-01, -4.114e-02, 5.539e-02, -1.281e-01, 1.091e-01, -3.802e-02, 3.161e-02, -1.184e-01, -1.576e-01) * s[0][1][0];
	r1 += M4(-3.580e-02, -2.085e-02, -1.105e-01, 2.644e-01, -1.068e-02, 8.984e-02, -2.073e-01, 4.917e-02, -1.518e-01, 1.997e-01, 7.729e-02, 4.194e-02, -1.339e-01, -4.030e-02, 5.002e-02, 5.974e-02) * s[0][1][0];
	r0 += M4(1.353e-02, -1.592e-01, -1.254e-03, 1.126e-01, 2.631e-02, -2.822e-02, -3.024e-01, -1.014e-01, 6.541e-02, 1.231e-01, 2.006e-01, 1.101e-01, -4.020e-02, 3.333e-02, -1.741e-01, 3.306e-02) * s[0][1][1];
	r1 += M4(4.717e-03, -3.913e-02, -1.832e-02, 1.645e-01, 7.567e-02, 8.632e-02, 4.635e-02, 2.408e-02, -8.717e-02, 6.978e-02, 4.618e-01, 9.526e-02, 5.578e-02, 3.455e-02, -3.246e-02, -1.719e-03) * s[0][1][1];
	r0 += M4(2.543e-02, 8.506e-03, 5.676e-02, -5.139e-02, -4.833e-02, -1.320e-01, -2.162e-01, -2.159e-02, 8.911e-04, 1.618e-02, 7.607e-02, -5.290e-04, -1.880e-01, -2.201e-02, 3.475e-02, -7.420e-02) * s[0][2][0];
	r1 += M4(-3.625e-02, -5.191e-03, 6.203e-02, 1.635e-01, -8.928e-02, 2.538e-02, 2.064e-01, -3.439e-02, 3.677e-03, 4.061e-02, 3.388e-02, -2.293e-01, -1.730e-01, -4.587e-03, 1.856e-02, -1.372e-01) * s[0][2][0];
	r0 += M4(6.663e-02, 7.423e-02, -1.200e-02, -8.945e-02, -1.260e-01, -1.135e-01, -1.278e-01, 4.745e-01, 1.045e-02, 3.054e-02, 2.912e-01, -2.044e-02, -2.705e-02, 9.983e-03, 1.754e-01, -2.748e-02) * s[0][2][1];
	r1 += M4(-9.767e-02, 1.428e-03, -4.687e-02, 3.560e-01, 3.043e-01, 4.720e-03, 3.640e-01, 1.323e-02, 3.068e-01, -5.789e-02, -1.137e-01, -1.954e-01, -3.440e-02, -2.831e-02, -1.848e-01, -1.354e-01) * s[0][2][1];
	r0 += M4(-5.530e-02, -2.572e-02, 3.246e-02, -2.349e-02, -2.031e-02, 1.558e-01, 1.284e-01, -1.860e-01, 4.654e-02, -6.258e-02, 6.302e-02, -7.634e-02, -4.929e-02, -1.509e-01, -1.988e-01, -3.835e-01) * s[1][0][0];
	r1 += M4(1.459e-01, -1.302e-01, 1.843e-03, 1.827e-01, -4.055e-01, -4.555e-01, -1.265e-01, 1.325e-01, 8.031e-02, 8.379e-02, -7.648e-02, -6.861e-02, 1.122e-01, -1.473e-01, 2.835e-02, -9.158e-02) * s[1][0][0];
	r0 += M4(8.929e-03, -9.058e-02, 1.679e-02, -4.996e-02, 1.354e-01, 7.152e-02, -1.013e-02, -2.466e-01, -4.077e-01, 2.623e-01, -3.736e-01, -9.987e-02, 2.144e-01, -1.359e-01, -4.326e-02, -2.398e-01) * s[1][0][1];
	r1 += M4(1.323e-01, -1.893e-01, -5.157e-02, 1.305e-01, -2.395e-01, -5.566e-01, -1.273e-01, 1.274e-01, -1.921e-01, -9.268e-02, 9.608e-02, -4.359e-02, 1.245e-01, -1.703e-01, -3.075e-01, -1.365e-01) * s[1][0][1];
	r0 += M4(4.861e-03, -2.016e-01, 9.520e-02, 1.232e-01, -1.665e-01, 2.118e-01, -2.844e-01, -4.665e-01, 2.387e-01, 1.498e-02, -1.590e-01, -6.674e-02, 1.235e-02, 1.470e-01, -3.514e-01, 5.761e-01) * s[1][1][0];
	r1 += M4(1.460e-02, 8.264e-02, 5.151e-02, 1.867e-01, -3.839e-01, 6.191e-01, 1.005e-01, 1.147e-01, 2.485e-03, 5.362e-02, 5.067e-02, -1.352e-02, 1.973e-01, 4.756e-01, 5.086e-01, -6.369e-02) * s[1][1][0];
	r0 += M4(-1.430e-01, -1.406e-02, 7.935e-02, -2.631e-02, 3.018e-01, 1.020e-01, -1.034e-01, -3.103e-01, -2.893e-02, -4.229e-01, -1.801e-01, -2.823e-02, 2.126e-01, 2.212e-02, 3.018e-01, 2.194e-01) * s[1][1][1];
	r1 += M4(-4.456e-02, 1.017e-01, 1.792e-01, 2.212e-01, -5.289e-02, -3.301e-02, -5.297e-02, 9.825e-02, 8.545e-02, -1.396e-01, -7.461e-02, -3.222e-02, -6.829e-02, 4.017e-01, -9.075e-02, -2.336e-01) * s[1][1][1];
	r0 += M4(3.048e-02, -1.353e-01, 2.036e-01, 4.040e-02, 1.528e-01, 1.008e-01, -2.321e-01, -1.132e-01, -1.489e-01, 5.392e-03, 1.010e-01, -3.826e-02, -6.439e-02, -8.051e-03, 6.665e-01, -1.718e-01) * s[1][2][0];
	r1 += M4(-2.828e-02, 2.107e-02, 6.219e-02, 2.463e-01, -4.433e-01, -1.458e-01, 1.715e-02, -8.082e-02, -2.029e-01, 2.123e-02, 1.373e-01, -5.452e-02, -1.499e-01, -9.330e-02, -1.199e-01, -1.111e-01) * s[1][2][0];
	r0 += M4(1.596e-01, -1.394e-01, 1.851e-01, 6.620e-02, -5.175e-02, 5.144e-02, 9.099e-02, 3.779e-01, 3.140e-01, 2.427e-01, 4.645e-01, 4.583e-01, -5.840e-01, -2.277e-02, 1.735e-02, 7.978e-02) * s[1][2][1];
	r1 += M4(1.568e-02, -1.090e-02, -7.581e-02, 1.403e-01, 3.015e-01, -1.476e-01, -6.059e-02, -5.719e-02, 3.558e-02, 1.820e-01, -5.374e-01, -8.876e-02, -1.109e-01, -4.040e-02, -3.957e-01, -1.250e-01) * s[1][2][1];
	r0 += M4(6.530e-02, 1.263e-02, -1.270e-02, 8.780e-02, 5.786e-02, -5.249e-02, 7.683e-02, 5.739e-02, 1.257e-01, 9.344e-03, -1.604e-01, 1.736e-01, 5.127e-02, -6.239e-02, -1.172e-01, -9.710e-02) * s[2][0][0];
	r1 += M4(-1.473e-01, 3.055e-02, -1.018e-01, 1.114e-02, 9.222e-02, 4.844e-02, 5.803e-02, -3.879e-02, -9.548e-02, -1.240e-01, -9.009e-02, 6.306e-02, -2.417e-01, -3.890e-01, 1.557e-01, -1.122e-01) * s[2][0][0];
	r0 += M4(4.323e-02, -3.102e-03, -9.741e-02, 7.408e-02, 1.208e-01, -2.238e-02, 3.904e-03, -1.165e-01, -2.530e-02, -1.364e-02, -1.985e-01, 3.697e-01, 1.352e-01, 1.870e-02, -6.824e-02, 3.075e-01) * s[2][0][1];
	r1 += M4(-1.706e-01, 9.980e-03, -1.321e-01, 3.492e-02, 2.557e-01, -4.597e-02, 3.402e-02, -3.972e-02, -1.381e-01, -1.738e-01, -4.939e-02, 1.235e-01, -1.508e-01, -3.058e-01, 2.199e-02, -1.282e-01) * s[2][0][1];
	r0 += M4(3.072e-02, -1.319e-01, -1.187e-01, -5.392e-02, -4.921e-02, 1.082e-01, 3.934e-01, -4.769e-02, -1.504e-01, 2.093e-02, -5.387e-03, -6.589e-02, -3.806e-01, -1.636e-01, -3.510e-01, -8.702e-02) * s[2][1][0];
	r1 += M4(-7.386e-02, -1.270e-01, 3.458e-02, 1.084e-01, -1.094e-01, 6.681e-02, 1.855e-01, -1.983e-02, 2.313e-02, -3.405e-01, 5.129e-02, 7.534e-02, -2.372e-02, -1.462e+00, 2.495e-01, 4.373e-01) * s[2][1][0];
	r0 += M4(2.412e-03, -1.428e-01, -3.435e-02, -6.809e-02, -2.271e-01, 3.197e-02, 2.085e-01, 1.566e-02, -2.909e-01, -1.126e-01, -1.035e-01, -2.822e-01, 6.270e-01, 6.068e-02, 4.638e-01, -2.440e-01) * s[2][1][1];
	r1 += M4(-9.482e-02, -1.015e-01, -6.279e-02, 8.619e-02, -7.425e-02, 1.490e-01, 6.433e-02, -4.924e-02, -3.350e-01, 4.717e-02, 1.852e-01, 7.041e-02, 4.602e-01, -6.629e-01, -3.725e-02, 3.252e-01) * s[2][1][1];
	r0 += M4(-8.460e-02, 7.220e-02, 1.087e-01, -2.310e-02, 1.062e-01, 4.078e-02, -9.053e-02, -1.253e-02, -4.789e-02, -5.107e-02, 1.269e-01, -3.534e-02, 1.037e-01, 2.949e-02, 4.463e-01, 2.370e-01) * s[2][2][0];
	r1 += M4(3.997e-02, -8.885e-02, -1.329e-01, 4.900e-02, 1.490e-03, -5.793e-02, -2.141e-01, 1.232e-02, 8.090e-02, -6.624e-02, 8.923e-03, 4.285e-02, 3.753e-01, -2.077e-01, 3.219e-01, 1.002e-01) * s[2][2][0];
	r0 += M4(-1.243e-01, 9.968e-02, 1.391e-01, -1.033e-02, 1.420e-01, -3.468e-02, -4.158e-03, 1.499e-01, -9.322e-02, 3.893e-02, 2.978e-01, 9.630e-02, -9.322e-01, 7.512e-02, -4.844e-01, 7.505e-02) * s[2][2][1];
	r1 += M4(7.430e-02, -2.450e-02, 3.002e-02, 5.134e-03, 9.181e-02, 1.559e-01, -7.152e-03, -5.231e-02, -1.487e-01, -4.531e-02, -5.429e-02, 1.091e-01, 5.630e-01, -1.889e-01, 1.860e-01, 8.289e-02) * s[2][2][1];
	r0 += V4(-1.859e-02, -6.487e-02, 7.202e-02, -1.573e-03);
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-3.088e-02, -1.605e-02, 1.316e-02, -4.073e-01);
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-4x8C-conv2
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv1
//!BIND LUMA
//!SAVE conv2
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(conv1_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0)) + vec2(0.5)) * conv1_pt))
#define l1(x, y) V4(conv1_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0)) + vec2(0.5)) * conv1_pt))
shared V4 g[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv1_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			g[0][ay][ax] = l0(x - 1, y - 1);
			g[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s[3][3][2];
	V4 r0 = V4(0.0);
	V4 r1 = V4(0.0);
	s[0][0][0] = max(g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[0][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[0][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[0][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[0][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[0][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[0][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(-8.373e-02, -9.917e-02, -6.948e-02, -1.570e-02, 9.340e-02, 7.278e-02, -7.847e-02, -6.271e-02, 1.146e-01, 6.946e-02, -5.892e-02, 2.015e-01, 2.878e-02, -1.917e-02, -2.314e-02, -2.287e-01) * s[0][0][0];
	r1 += M4(-1.675e-01, -4.912e-02, 1.120e-01, -6.005e-02, -3.099e-01, -2.789e-01, -3.321e-01, -6.675e-02, 7.857e-02, 3.554e-02, -6.858e-02, 9.447e-02, -2.740e-02, 1.301e-01, -1.895e-01, -9.682e-02) * s[0][0][0];
	r0 += M4(3.649e-02, -8.733e-02, -4.099e-02, -1.313e-02, 8.546e-02, 2.759e-01, 6.198e-02, 1.826e-01, 2.742e-02, 3.132e-02, 2.974e-02, -8.201e-02, 2.307e-02, -7.479e-03, -3.253e-02, 5.437e-02) * s[0][0][1];
	r1 += M4(2.448e-02, 1.615e-01, -1.490e-02, -2.192e-01, 1.274e-01, -2.114e-01, -1.516e-01, 1.679e-01, -1.519e-01, -4.411e-02, -6.090e-03, -1.937e-01, 6.722e-02, 3.299e-02, 4.527e-02, 5.604e-02) * s[0][0][1];
	r0 += M4(-3.859e-02, -8.565e-02, 1.658e-01, -5.395e-02, 1.622e-02, -4.346e-02, 5.527e-01, 3.542e-02, 1.757e-01, 7.238e-02, -1.115e-01, 2.415e-03, 9.685e-02, 1.304e-01, -1.618e-01, -1.619e-02) * s[0][1][0];
	r1 += M4(5.019e-03, -3.135e-01, -1.786e-01, 4.696e-02, -6.127e-01, -2.430e-01, 1.874e-01, 4.978e-01, 2.085e-01, 1.002e-01, -5.524e-02, 8.814e-02, -3.409e-02, 2.631e-01, 3.871e-02, 1.649e-01) * s[0][1][0];
	r0 += M4(9.883e-02, 1.801e-01, 3.006e-02, 1.393e-01, -5.737e-02, 8.292e-02, 4.883e-02, 8.223e-02, -5.652e-02, -1.393e-01, -1.693e-02, -4.123e-02, 1.558e-01, 9.026e-02, -2.095e-01, 1.626e-01) * s[0][1][1];
	r1 += M4(3.652e-02, 1.200e-01, 5.631e-02, 1.120e-01, 2.650e-01, 8.276e-02, -1.173e-01, 2.304e-01, -1.133e-01, -1.126e-02, 7.417e-02, -3.337e-01, 2.052e-02, 2.228e-01, 2.536e-02, -3.328e-02) * s[0][1][1];
	r0 += M4(-9.552e-04, 5.435e-02, 5.115e-02, 1.520e-03, 7.140e-02, 1.970e-01, 4.354e-01, -1.538e-01, 2.130e-02, 1.931e-02, -5.530e-02, -4.794e-02, 1.560e-01, 1.714e-01, 5.289e-02, 1.679e-02) * s[0][2][0];
	r1 += M4(1.603e-02, -6.707e-02, -6.976e-02, -7.734e-03, -2.581e-01, 4.295e-01, 3.636e-01, -2.957e-01, 1.048e-01, 5.717e-02, -1.721e-02, 5.187e-02, 2.623e-02, -5.280e-02, 8.899e-03, 1.800e-01) * s[0][2][0];
	r0 += M4(-6.230e-03, 8.562e-02, -1.027e-01, 2.055e-02, -9.065e-02, -1.196e-04, 2.172e-01, -1.671e-01, -4.642e-02, -1.256e-01, -6.438e-02, 1.023e-02, 1.128e-01, 7.089e-02, 1.102e-01, -1.209e-01) * s[0][2][1];
	r1 += M4(-5.100e-02, 8.618e-02, 3.265e-02, 7.550e-02, 1.705e-01, 1.082e-01, 1.633e-01, 1.685e-01, -1.292e-02, -6.512e-03, -3.762e-02, -8.574e-02, -2.667e-03, -1.779e-02, -2.255e-01, 1.326e-01) * s[0][2][1];
	r0 += M4(-8.210e-02, 1.087e-01, -1.272e-01, -4.035e-01, -7.488e-01, -2.109e-01, 3.988e-01, 3.836e-01, 5.963e-01, 1.588e-01, 1.360e-01, 8.237e-01, -1.363e-01, -3.805e-02, -6.671e-02, -1.974e-01) * s[1][0][0];
	r1 += M4(4.935e-02, -7.788e-02, -5.838e-02, 5.148e-03, -6.027e-01, -6.845e-01, -9.752e-01, -3.447e-01, -4.814e-01, -7.307e-02, 5.586e-03, 4.042e-01, -8.203e-03, 1.207e-01, -2.354e-01, -2.666e-01) * s[1][0][0];
	r0 += M4(4.153e-01, 3.460e-01, -2.169e-01, -7.822e-01, -4.236e-02, 2.284e-02, 5.016e-02, 9.391e-03, -1.098e-02, -5.625e-02, 1.004e-01, 2.942e-01, -1.586e-01, -1.077e-02, -5.653e-02, -5.320e-02) * s[1][0][1];
	r1 += M4(-9.032e-03, 3.542e-01, 1.213e-01, 1.401e-01, -9.379e-04, 2.733e-01, 6.272e-02, -7.123e-02, -4.627e-02, -1.797e-01, -3.548e-01, -3.554e-02, -2.664e-02, 1.504e-02, -1.030e-01, -3.621e-01) * s[1][0][1];
	r0 += M4(-2.280e-01, -2.662e-01, 3.485e-01, -8.638e-02, -2.718e-01, -5.989e-01, 3.921e-01, 7.836e-01, 2.174e-02, 2.036e-01, -3.186e-01, 5.675e-02, -1.408e-02, -4.870e-02, 2.146e-01, 3.109e-01) * s[1][1][0];
	r1 += M4(1.164e-02, -3.068e-01, -7.435e-02, -2.047e-01, -1.924e+00, -1.589e+00, -1.870e+00, 5.606e-01, 1.651e-01, -3.807e-02, 1.509e-01, 1.738e-01, 9.306e-02, 5.469e-01, 6.035e-01, 1.023e-01) * s[1][1][0];
	r0 += M4(1.507e-01, -2.243e-02, -7.103e-02, -4.774e-02, 6.030e-02, -8.020e-02, -3.795e-02, 8.381e-02, -1.793e-01, -1.904e-02, -2.180e-01, -2.432e-01, 1.044e-01, -1.837e-01, 3.495e-01, 9.937e-02) * s[1][1][1];
	r1 += M4(-1.740e-01, 2.568e-03, -3.214e-01, 2.547e-01, -2.583e-01, -2.104e-01, -2.074e-01, 1.626e-01, 2.003e-01, 3.397e-02, -7.633e-02, -1.472e-01, -1.392e-01, 1.297e-01, 3.923e-01, -4.143e-01) * s[1][1][1];
	r0 += M4(-5.741e-02, -1.633e-01, 2.877e-03, -9.673e-03, -1.235e-01, -6.003e-01, 1.012e+00, -3.556e-01, 8.558e-02, 3.053e-01, 1.018e-01, -1.846e-02, 1.938e-01, 2.814e-01, 9.748e-02, 6.646e-02) * s[1][2][0];
	r1 += M4(-3.313e-02, -1.059e-01, -2.185e-02, -8.667e-02, 1.109e-01, 4.808e-02, 5.421e-01, -4.711e-01, -1.218e-02, -4.902e-02, 1.694e-01, 1.117e-01, 2.787e-02, -2.554e-02, -3.626e-03, -3.782e-03) * s[1][2][0];
	r0 += M4(5.018e-02, 3.179e-01, -1.181e-01, 1.805e-02, 1.034e-02, 3.440e-01, -4.180e-02, -7.114e-02, -6.910e-02, -1.044e-01, 4.510e-03, 4.758e-02, -2.673e-02, 6.778e-02, 6.756e-02, 3.535e-02) * s[1][2][1];
	r1 += M4(1.988e-02, -4.636e-03, -1.184e-02, -8.432e-02, 5.374e-03, -6.216e-03, 3.488e-01, -2.839e-01, 1.257e-02, -1.646e-01, 3.906e-02, 2.085e-02, 7.153e-02, 9.794e-02, -1.304e-01, 1.422e-02) * s[1][2][1];
	r0 += M4(4.528e-03, -1.073e-01, -2.144e-03, -8.392e-02, 2.154e-01, -2.769e-02, -3.151e-02, -1.297e-01, 1.304e-01, -1.470e-01, -6.719e-02, 1.976e-01, -3.130e-04, 8.734e-02, 4.663e-02, -1.274e-01) * s[2][0][0];
	r1 += M4(-7.065e-02, -1.228e-01, -2.000e-02, 1.630e-02, 1.570e-02, -7.459e-02, -1.344e-01, -2.475e-01, -8.791e-02, 1.310e-01, -2.617e-03, -1.159e-01, -7.776e-03, 2.934e-02, 6.808e-02, 1.164e-01) * s[2][0][0];
	r0 += M4(3.565e-01, 6.280e-02, -4.383e-02, 1.815e-02, 4.872e-02, -1.428e-01, -1.685e-01, -9.427e-02, -2.685e-01, 1.352e-01, 2.043e-01, 8.773e-03, -1.390e-01, 1.746e-02, -4.548e-02, -1.899e-01) * s[2][0][1];
	r1 += M4(9.839e-02, 1.127e-01, 1.969e-01, 7.104e-02, -1.344e-01, 3.134e-02, 2.850e-01, -1.062e-01, 1.249e-01, -9.852e-02, -1.020e-02, 1.018e-01, -1.251e-01, -3.646e-02, -1.328e-01, -4.871e-02) * s[2][0][1];
	r0 += M4(-6.428e-02, -2.075e-01, 4.050e-02, -4.088e-02, 7.563e-02, 6.819e-01, 4.972e-01, 3.008e-01, 2.916e-01, -3.797e-02, -9.103e-02, -4.682e-02, -1.212e-01, -2.940e-01, -2.298e-01, 1.144e-02) * s[2][1][0];
	r1 += M4(-3.989e-02, -2.368e-01, 1.139e-01, -2.312e-02, 1.884e-01, 2.924e-01, 4.134e-01, -2.737e-02, -2.288e-01, -6.545e-02, -2.053e-02, -8.671e-02, 9.207e-02, 1.480e-01, -2.743e-02, -2.060e-01) * s[2][1][0];
	r0 += M4(1.681e-01, 4.400e-01, 5.468e-02, -3.559e-02, 5.415e-02, -2.169e-01, 1.848e-02, -2.735e-02, -1.599e-01, 3.648e-02, 2.213e-01, -1.437e-01, 9.221e-02, -3.350e-01, -1.402e-01, 1.028e-01) * s[2][1][1];
	r1 += M4(1.722e-01, 9.790e-03, 2.549e-01, 1.763e-01, -1.975e-02, -1.330e-01, 2.522e-02, -2.320e-01, -1.840e-02, -7.637e-02, -1.998e-02, 1.120e-01, -1.830e-01, 7.372e-02, -1.440e-01, -1.523e-01) * s[2][1][1];
	r0 += M4(-2.960e-02, -1.287e-01, -6.159e-02, 1.377e-02, 1.751e-02, -1.953e-01, 3.703e-02, -9.020e-02, 1.961e-01, -3.858e-02, -1.371e-01, -5.393e-03, -7.837e-02, -1.117e-01, 1.287e-02, -1.749e-02) * s[2][2][0];
	r1 += M4(-3.694e-02, 8.897e-03, 7.592e-02, -2.299e-02, -1.801e-01, -1.071e-01, -1.404e-01, -2.064e-02, -1.372e-01, 2.557e-02, -1.637e-01, -8.385e-02, 3.357e-02, -2.041e-02, -3.776e-02, -3.860e-02) * s[2][2][0];
	r0 += M4(5.167e-02, 1.294e-01, -2.568e-02, 2.784e-02, 2.188e-01, -1.285e-01, 5.719e-03, -5.619e-02, 2.908e-02, 3.802e-02, -3.892e-02, -9.445e-03, 6.116e-02, 8.155e-02, 3.782e-02, 3.406e-02) * s[2][2][1];
	r1 += M4(2.288e-02, -2.415e-02, 4.989e-02, 7.446e-02, -1.687e-01, 1.161e-01, -7.344e-02, -1.224e-01, -4.054e-02, -2.320e-02, -3.968e-02, 3.015e-02, -2.412e-02, -2.608e-02, -1.313e-01, -6.929e-02) * s[2][2][1];
	s[0][0][0] = max(g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[1][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[1][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[1][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[1][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[1][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[1][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(1.136e-01, -9.051e-02, -8.965e-02, 1.543e-01, 1.934e-02, 9.627e-02, 9.135e-03, 8.672e-02, 1.465e-01, 2.525e-01, -4.309e-03, 9.624e-02, -1.623e-01, -2.085e-01, 5.924e-01, 2.385e-01) * s[0][0][0];
	r1 += M4(-5.849e-02, 4.650e-02, -2.425e-01, -4.354e-02, 1.392e-01, 3.003e-01, -7.480e-02, 1.571e-01, -2.186e-01, 6.597e-02, -9.022e-02, -8.052e-02, -2.578e-02, -2.086e+00, -5.604e-01, -4.309e-01) * s[0][0][0];
	r0 += M4(6.317e-02, 3.437e-02, 2.333e-02, 3.172e-02, 1.144e-01, 2.328e-02, -1.499e-01, -1.188e-01, 1.220e-01, 6.964e-02, 1.169e-01, 1.200e-01, -9.302e-02, 1.856e-02, 8.166e-02, -1.337e-01) * s[0][0][1];
	r1 += M4(1.150e-01, 9.292e-02, 3.705e-02, 9.603e-02, 8.758e-02, 2.397e-01, 3.358e-02, 2.895e-02, -6.032e-02, -6.157e-03, 1.966e-02, -2.022e-02, 3.107e-02, 3.870e-02, -5.211e-02, 1.235e-02) * s[0][0][1];
	r0 += M4(-1.639e-01, 1.170e-01, 3.604e-01, 1.850e-02, 1.014e-02, -1.264e-01, 2.384e-01, -1.520e-02, 6.340e-02, 9.450e-02, -9.669e-04, -3.561e-02, -1.966e-01, -7.619e-01, -2.130e-01, 6.733e-02) * s[0][1][0];
	r1 += M4(7.215e-02, -1.481e-01, -9.203e-01, -4.276e-01, 8.101e-01, 1.364e-01, -1.822e-01, -1.637e-01, 6.102e-02, 1.820e-01, -2.202e-01, 2.453e-02, 6.601e-02, -4.303e-01, 2.232e+00, -1.544e-01) * s[0][1][0];
	r0 += M4(-1.437e-01, 4.920e-02, 2.626e-01, 5.118e-02, 4.423e-01, -8.472e-02, -5.757e-01, 6.664e-02, 6.931e-03, 1.477e-01, 1.397e-01, -7.544e-02, -6.424e-02, -4.221e-02, -1.297e-02, 3.733e-02) * s[0][1][1];
	r1 += M4(-2.190e-02, -1.278e-01, -7.351e-02, -4.140e-02, -1.792e-01, 1.515e-01, -2.652e-01, -2.394e-01, -2.287e-02, -4.071e-02, -1.868e-01, 2.713e-02, -4.774e-02, -1.156e-01, -5.207e-02, 7.471e-02) * s[0][1][1];
	r0 += M4(-1.076e-01, -1.751e-01, -4.928e-04, 8.996e-03, -1.020e-01, 9.541e-02, -2.765e-02, 1.064e-01, -1.197e-02, -3.187e-02, -2.000e-02, -1.485e-02, -7.292e-01, 7.492e-02, -1.218e-01, 2.846e-01) * s[0][2][0];
	r1 += M4(-2.394e-02, 1.153e-01, -1.321e-01, -7.979e-02, 8.540e-02, -1.460e-01, 4.820e-02, 2.618e-01, -1.004e-02, 2.907e-05, 6.067e-02, 5.810e-02, 7.047e-01, -6.380e-01, -2.599e-01, -1.336e+00) * s[0][2][0];
	r0 += M4(-1.102e-01, -8.920e-02, -3.754e-02, 2.973e-02, 3.832e-02, -2.527e-02, -3.170e-01, 5.237e-02, 1.409e-02, -1.561e-02, 4.701e-02, -2.828e-02, 1.387e-01, 6.596e-03, -5.732e-02, 5.989e-02) * s[0][2][1];
	r1 += M4(6.859e-02, 1.019e-01, 6.098e-02, -3.505e-02, 1.794e-03, -8.674e-02, -2.239e-01, -5.777e-02, 1.960e-02, 1.111e-03, -1.140e-01, 8.274e-03, 1.191e-02, 6.735e-02, 7.934e-02, -4.691e-02) * s[0][2][1];
	r0 += M4(-3.982e-02, -9.119e-03, 1.714e-01, 2.550e-01, -2.022e-02, 1.109e-01, 2.000e-01, -2.837e-01, 4.066e-02, 2.316e-02, -3.637e-01, -2.270e-01, 3.450e-03, 2.553e-01, 7.860e-01, 4.651e+00) * s[1][0][0];
	r1 += M4(-1.499e-01, 3.583e-01, -2.881e-01, -1.696e-01, -1.310e-01, 7.444e-02, -1.053e-02, -2.144e-01, 1.337e-01, 1.778e-02, -2.619e-01, -7.152e-03, 5.270e-01, 6.892e-01, 1.744e+00, -1.301e+00) * s[1][0][0];
	r0 += M4(6.581e-02, 5.769e-02, -1.332e-01, -4.906e-02, 1.620e-01, 1.619e-01, 6.876e-03, -1.711e-01, 4.496e-01, 1.202e-01, -1.143e-01, 8.572e-02, -1.164e-03, 7.830e-02, -6.270e-02, 2.705e-01) * s[1][0][1];
	r1 += M4(-1.353e-01, 2.244e-01, -1.732e-01, -1.816e-01, 1.997e-02, 8.712e-02, 3.194e-02, 3.229e-02, 1.953e-01, 2.969e-02, 9.518e-03, 1.932e-01, -6.406e-03, -1.431e-02, 1.292e-01, 4.952e-02) * s[1][0][1];
	r0 += M4(-3.925e-01, -8.714e-02, -1.887e-01, -1.073e-01, -3.505e-01, 2.569e-01, 6.107e-01, 2.006e-01, -5.230e-03, -9.844e-02, -5.133e-01, 1.352e-01, 2.492e+00, 1.103e+00, -4.111e+00, -1.938e+00) * s[1][1][0];
	r1 += M4(1.135e-01, -4.176e-01, -4.276e-01, 1.077e-01, -2.728e-01, 1.458e-02, -1.054e-01, -5.039e-02, -1.479e-02, 9.712e-02, -1.876e-01, 9.139e-02, 4.101e+00, -1.079e+00, -2.013e+00, -4.430e+00) * s[1][1][0];
	r0 += M4(2.152e-01, -4.863e-02, 1.669e-02, -2.713e-01, -6.272e-02, 2.445e-01, 1.537e-01, 1.824e-01, 3.822e-02, 1.018e-01, -2.927e-01, -5.756e-02, 3.504e-02, 2.251e-01, 1.863e-01, -1.845e-01) * s[1][1][1];
	r1 += M4(3.724e-02, 1.384e-01, 1.829e-02, 4.111e-01, 2.413e-02, 5.286e-02, -1.721e-01, 2.745e-01, -4.046e-02, 1.274e-01, 1.140e-01, 4.260e-02, 1.759e-01, 9.161e-02, 1.841e-01, -1.091e-01) * s[1][1][1];
	r0 += M4(-1.938e-01, -2.448e-01, -1.130e-01, -6.264e-02, 2.065e-01, 1.016e-01, -6.185e-02, -6.699e-03, 6.262e-02, 8.003e-03, -9.867e-02, -4.522e-02, -1.128e+00, 6.266e-01, -7.902e-01, 6.939e-01) * s[1][2][0];
	r1 += M4(2.875e-02, 2.040e-01, 1.636e-01, 8.098e-03, -1.853e-01, 1.323e-01, -1.120e-01, 8.431e-02, -1.012e-02, 1.126e-01, 1.423e-01, -1.098e-01, 2.431e+00, -1.813e+00, -1.432e+00, 3.338e-02) * s[1][2][0];
	r0 += M4(-1.812e-01, 4.275e-02, -1.454e-01, -1.161e-02, 2.334e-02, 1.449e-01, -1.654e-01, -1.149e-02, -3.059e-02, 1.301e-01, -2.991e-03, -1.619e-02, -7.778e-02, -9.983e-02, -4.259e-02, 6.804e-03) * s[1][2][1];
	r1 += M4(-5.713e-02, -4.151e-02, 4.773e-02, -8.862e-02, -7.069e-02, 1.401e-01, -1.595e-01, 9.604e-02, 4.287e-02, -1.498e-02, 1.294e-01, -8.602e-02, -7.226e-02, -3.167e-02, -1.869e-01, 1.028e-01) * s[1][2][1];
	r0 += M4(2.384e-03, 1.088e-01, 1.070e-01, -7.150e-02, -1.111e-01, -2.940e-01, -4.045e-02, -1.039e-02, 1.266e-01, -1.360e-01, -1.080e-01, 1.109e-01, 5.301e-01, -4.064e-01, -1.608e-01, -2.355e-01) * s[2][0][0];
	r1 += M4(8.245e-02, 8.789e-02, -5.690e-02, 9.855e-02, -6.425e-02, 1.756e-02, 6.753e-02, -1.112e-01, -6.403e-02, -9.521e-02, -7.681e-02, -1.273e-01, -1.055e+00, 1.022e+00, -7.353e-01, -2.698e+00) * s[2][0][0];
	r0 += M4(8.183e-02, 2.224e-03, 3.937e-02, 1.271e-01, -3.747e-02, -7.642e-02, -2.884e-02, -3.888e-02, 2.209e-01, 2.257e-01, 1.024e-02, 1.153e-01, 4.385e-02, -9.595e-02, -9.396e-02, -5.157e-02) * s[2][0][1];
	r1 += M4(-7.569e-03, 5.495e-02, 6.577e-02, -5.846e-02, 4.474e-02, -4.213e-04, -8.787e-02, 2.417e-02, -1.313e-01, 1.090e-01, -7.338e-04, -1.266e-01, -2.936e-02, -2.670e-02, -6.704e-02, -6.902e-02) * s[2][0][1];
	r0 += M4(-7.029e-02, 4.229e-01, 1.693e-01, -7.334e-02, -2.393e-01, -4.732e-01, 2.586e-02, 3.857e-02, 3.944e-02, 2.251e-01, 4.193e-02, 3.379e-02, 1.851e+00, 1.047e+00, -7.589e-01, 6.667e-01) * s[2][1][0];
	r1 += M4(-1.115e-01, -6.922e-03, -2.971e-01, -9.449e-02, 1.140e-01, -6.124e-03, 1.046e-01, -1.390e-01, 1.509e-01, 6.991e-02, 5.256e-02, 9.062e-02, -4.139e-01, -3.886e-01, -7.766e-01, -6.931e-01) * s[2][1][0];
	r0 += M4(-3.047e-01, 1.910e-01, 6.674e-02, -1.290e-01, -1.738e-01, 1.191e-01, 2.977e-02, 8.053e-02, -8.748e-02, -4.607e-02, 1.741e-01, -1.449e-02, 2.217e-01, -1.036e-02, -7.306e-02, 3.950e-02) * s[2][1][1];
	r1 += M4(1.990e-01, 7.996e-02, 7.360e-02, 2.517e-02, 1.548e-01, 3.676e-02, -2.600e-02, -2.652e-02, -1.542e-02, -9.200e-02, 1.322e-02, -1.808e-01, -1.450e-01, 4.323e-02, -5.677e-02, 4.026e-02) * s[2][1][1];
	r0 += M4(-8.125e-02, -2.174e-01, 4.866e-02, -7.056e-02, -3.859e-02, -2.390e-01, -3.913e-02, -3.140e-03, 4.534e-02, 9.259e-02, 7.288e-02, 5.452e-03, -2.854e-01, 1.427e+00, -5.976e-01, 5.933e-01) * s[2][2][0];
	r1 += M4(-2.251e-02, 1.563e-01, -8.800e-02, -5.920e-02, -1.031e-02, 8.276e-02, -1.095e-01, -6.037e-03, 3.998e-02, 9.832e-03, -1.718e-02, 9.595e-02, 3.351e-01, -1.319e+00, 6.058e-02, -1.170e-01) * s[2][2][0];
	r0 += M4(-2.555e-02, -5.672e-02, -1.066e-01, 1.655e-02, -5.497e-02, 6.623e-02, 6.431e-02, -1.624e-02, -6.335e-03, -1.713e-01, 4.130e-03, -2.879e-02, -1.587e-01, -5.231e-02, 9.936e-02, -4.651e-02) * s[2][2][1];
	r1 += M4(-6.931e-02, 4.973e-02, 9.235e-03, -8.338e-03, 7.307e-02, 9.847e-02, 3.050e-02, 9.839e-02, -5.393e-02, 2.739e-02, 1.786e-02, -2.183e-02, 8.177e-02, -2.898e-02, 7.594e-02, -6.909e-02) * s[2][2][1];
	r0 += V4(8.699e-03, 9.008e-03, 2.765e-02, -1.404e-03);
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(1.066e-03, 8.610e-03, 2.718e-02, -1.635e-02);
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-4x8C-conv3
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv2
//!BIND LUMA
//!SAVE conv3
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(conv2_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0)) + vec2(0.5)) * conv2_pt))
#define l1(x, y) V4(conv2_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0)) + vec2(0.5)) * conv2_pt))
shared V4 g[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv2_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			g[0][ay][ax] = l0(x - 1, y - 1);
			g[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s[3][3][2];
	V4 r0 = V4(0.0);
	V4 r1 = V4(0.0);
	s[0][0][0] = max(g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[0][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[0][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[0][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[0][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[0][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[0][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(-1.043e-01, -6.945e-02, -7.690e-02, -4.449e-02, -2.706e-01, 5.644e-02, 2.748e-01, -1.222e-02, 1.145e-01, -3.511e-03, 7.825e-02, -7.131e-02, 3.698e-02, 1.073e-03, 1.077e-02, -2.358e-02) * s[0][0][0];
	r1 += M4(-7.536e-02, 4.851e-02, 1.571e-01, -4.722e-02, -8.338e-02, -3.381e-01, 1.763e-01, -2.817e-01, -6.235e-03, -4.164e-02, 7.803e-02, 5.939e-03, 7.746e-03, -1.551e-02, -8.124e-02, 7.915e-02) * s[0][0][0];
	r0 += M4(7.836e-02, -8.130e-03, 6.375e-02, -4.796e-02, -9.664e-02, -3.668e-03, -2.977e-01, 1.621e-02, 1.128e-01, 4.793e-02, -2.035e-01, 2.137e-02, 7.105e-02, 4.069e-02, 3.772e-02, -3.515e-02) * s[0][0][1];
	r1 += M4(-4.176e-02, -1.018e-02, 5.428e-02, -5.163e-02, 4.170e-02, 8.911e-02, 9.495e-02, 4.977e-02, -1.548e-01, 7.704e-02, 2.333e-02, 1.082e-01, 4.742e-02, 7.057e-02, 1.026e-01, -1.941e-02) * s[0][0][1];
	r0 += M4(4.245e-01, -2.284e-01, 7.718e-01, 1.264e-01, 4.991e-01, -4.028e-02, 6.780e-01, -6.692e-02, -1.949e-02, -8.328e-02, 7.942e-02, -5.577e-02, -4.626e-02, -8.618e-02, -1.661e-02, -7.308e-03) * s[0][1][0];
	r1 += M4(-5.915e-02, -3.066e-01, -1.362e-02, -1.161e-01, 1.430e-01, -4.211e-01, 1.985e-02, -7.060e-03, -2.085e-02, -1.548e-01, 2.788e-02, -2.678e-04, -6.410e-02, 7.774e-02, -7.629e-02, 1.910e-01) * s[0][1][0];
	r0 += M4(2.251e-01, -1.223e-01, 6.943e-02, -1.967e-02, -4.914e-03, -4.436e-02, -2.270e-01, -6.571e-02, -3.421e-01, -9.016e-02, -8.429e-02, 2.438e-02, 2.588e-01, -1.198e-02, -1.979e-02, -1.021e-01) * s[0][1][1];
	r1 += M4(-9.867e-02, -8.100e-02, 5.936e-02, 3.699e-02, -2.632e-02, 2.325e-02, -7.998e-02, -3.904e-02, -8.759e-02, 9.276e-03, 1.834e-01, 1.228e-01, -6.152e-02, -8.930e-04, 1.788e-02, -3.830e-02) * s[0][1][1];
	r0 += M4(-8.657e-02, -3.400e-02, 2.943e-01, 1.225e-01, 2.511e-02, -1.153e-02, 9.997e-02, -8.500e-02, 2.362e-02, -2.411e-02, 1.674e-02, 1.178e-02, -1.470e-01, 4.315e-02, -3.275e-03, -7.683e-02) * s[0][2][0];
	r1 += M4(-3.660e-02, -1.816e-01, 1.499e-01, -1.145e-02, 4.671e-02, -6.121e-02, -5.929e-02, -3.574e-02, -1.872e-02, -1.390e-02, 6.874e-03, -1.396e-02, -2.346e-02, 1.461e-01, 6.322e-02, 2.690e-02) * s[0][2][0];
	r0 += M4(-5.470e-02, -1.743e-01, 2.176e-02, 5.858e-03, 6.944e-02, 4.588e-03, -8.087e-02, 4.259e-02, 9.864e-02, 5.890e-02, 1.099e-01, -3.349e-02, -2.683e-03, -8.521e-02, -1.904e-02, -4.136e-03) * s[0][2][1];
	r1 += M4(-1.051e-01, -8.573e-02, 7.446e-02, -2.588e-02, 1.574e-02, -9.065e-03, -1.692e-02, 3.561e-02, 4.779e-02, -4.016e-02, 3.070e-02, 2.627e-02, 6.832e-03, -1.010e-02, -8.050e-02, -1.323e-01) * s[0][2][1];
	r0 += M4(-4.286e-02, -4.611e-02, 2.432e-02, 1.042e-01, -6.151e-01, -1.449e-01, -3.012e-01, -8.199e-01, 2.491e-01, 5.985e-02, -2.472e-01, 8.638e-02, 1.983e-01, 8.019e-02, -1.166e-01, 9.644e-02) * s[1][0][0];
	r1 += M4(-9.971e-02, -1.570e-01, 1.083e-01, 2.194e-01, -3.233e-01, 1.117e-01, 3.847e-01, -1.440e-01, -1.023e-01, 2.116e-01, 5.112e-02, 1.672e-01, -7.124e-02, 6.012e-03, -1.802e-01, 1.017e-01) * s[1][0][0];
	r0 += M4(1.730e-01, 5.972e-02, -9.593e-02, 6.085e-02, -2.159e-01, -1.144e-01, 5.289e-02, 1.524e-01, -1.295e-01, -3.525e-01, -3.559e-01, -8.754e-02, -4.309e-02, 5.432e-02, 4.709e-02, -2.632e-02) * s[1][0][1];
	r1 += M4(-1.130e-01, 8.606e-02, -6.215e-02, 1.277e-01, 1.001e-01, -2.662e-01, -3.653e-03, -3.462e-02, 1.177e-01, 3.663e-01, -4.194e-01, 9.938e-02, -5.327e-02, -1.199e-01, 4.713e-01, -1.550e-01) * s[1][0][1];
	r0 += M4(3.308e-01, -1.343e-01, 1.028e-01, 2.298e-02, 4.676e-02, 9.372e-02, -1.967e-01, -1.412e-01, -2.577e-01, -4.541e-01, -5.836e-01, 1.323e-01, -2.986e-01, -1.243e-01, -2.397e-01, -2.337e-02) * s[1][1][0];
	r1 += M4(-2.460e-01, -1.987e-01, 9.508e-02, 7.966e-02, -1.122e-01, -2.642e-01, 7.319e-02, 2.104e-01, -1.280e-01, 2.071e-02, 6.116e-02, -1.196e-01, -7.986e-03, 3.234e-01, -3.587e-01, -7.142e-02) * s[1][1][0];
	r0 += M4(-7.247e-02, -1.139e-01, -2.493e-01, 2.465e-01, 2.806e-01, 1.571e-02, 1.645e-01, 2.539e-02, -1.047e+00, -7.134e-01, -4.990e-01, -9.528e-02, -6.124e-02, -3.602e-01, 1.407e-01, -6.857e-02) * s[1][1][1];
	r1 += M4(-9.448e-03, 4.420e-01, 2.745e-02, -1.105e-01, -1.667e-01, -1.300e-01, -1.553e-02, 2.180e-01, 5.585e-01, 4.932e-01, 1.526e-01, -1.262e-01, 2.764e-02, 1.774e-02, -2.718e-01, -4.836e-01) * s[1][1][1];
	r0 += M4(-8.451e-02, 7.447e-02, -1.950e-02, -1.442e-01, 8.840e-02, 1.023e-01, -8.971e-02, -2.712e-02, 6.230e-02, 3.774e-02, -6.424e-02, 2.631e-02, -1.792e-01, 1.446e-01, 1.470e-01, 2.728e-01) * s[1][2][0];
	r1 += M4(1.437e-01, 3.678e-02, -3.661e-02, -6.873e-03, -4.478e-02, 4.865e-02, -7.406e-02, 3.785e-02, 4.329e-02, 2.066e-02, -2.624e-02, 6.139e-02, 8.228e-02, -2.714e-01, 2.900e-01, 1.838e-01) * s[1][2][0];
	r0 += M4(-1.089e-01, -6.875e-03, -2.023e-01, -5.763e-02, 6.093e-02, -4.699e-02, 7.934e-02, -7.817e-02, 4.530e-02, 3.146e-03, -6.490e-02, -5.403e-02, 1.159e-01, 9.815e-02, 1.106e-01, 2.793e-01) * s[1][2][1];
	r1 += M4(1.207e-01, 1.189e-01, -3.074e-02, -8.961e-02, -3.868e-02, 6.544e-02, -2.595e-02, 1.050e-02, 1.499e-01, -2.355e-01, 1.272e-01, -1.886e-03, -8.088e-02, -4.432e-01, 5.133e-02, 2.046e-01) * s[1][2][1];
	r0 += M4(7.763e-02, -3.310e-02, 2.300e-02, -8.078e-02, -1.522e-02, -9.737e-02, 2.374e-01, 3.566e-01, 1.189e-01, 3.082e-02, -2.601e-03, 1.279e-01, 9.396e-02, 1.850e-02, 2.081e-02, 3.632e-02) * s[2][0][0];
	r1 += M4(-4.690e-04, 4.227e-02, -1.180e-01, -1.362e-02, 4.776e-02, -3.658e-01, -7.872e-02, -7.212e-03, 3.060e-02, -1.652e-02, 2.061e-02, 6.055e-02, 8.185e-02, 7.132e-02, 1.632e-02, 6.102e-02) * s[2][0][0];
	r0 += M4(1.134e-01, 3.163e-02, 2.528e-02, -5.748e-02, -5.314e-02, -3.424e-02, -9.619e-03, 9.047e-03, 6.981e-02, 4.545e-02, 8.292e-02, 1.976e-01, 4.029e-02, 3.483e-02, -2.800e-02, 8.895e-03) * s[2][0][1];
	r1 += M4(3.631e-02, 1.421e-01, 1.562e-02, -3.101e-02, -3.505e-02, -7.595e-02, -5.960e-03, -8.027e-03, 2.527e-01, -1.196e-02, 5.757e-02, -3.521e-03, -8.796e-02, 1.391e-02, 2.667e-01, 9.503e-02) * s[2][0][1];
	r0 += M4(-9.366e-02, 2.923e-02, -1.232e-01, -4.309e-01, -3.337e-02, -1.763e-01, 3.182e-01, -2.769e-01, -8.999e-03, -6.763e-02, -1.703e-03, 1.842e-01, 7.589e-02, -7.679e-02, 2.370e-02, -1.888e-02) * s[2][1][0];
	r1 += M4(-2.034e-01, 1.607e-01, 7.651e-02, 2.884e-02, -2.089e-01, -2.677e-01, 1.577e-01, 7.304e-02, 2.042e-02, -3.478e-02, 2.069e-02, 2.352e-02, 1.694e-01, -3.742e-02, 3.362e-02, 1.500e-02) * s[2][1][0];
	r0 += M4(4.713e-02, 1.525e-01, 1.012e-01, -4.271e-02, -2.144e-02, -1.898e-02, -2.057e-02, -1.146e-02, -9.105e-02, 1.784e-02, 8.056e-02, 4.343e-01, 2.325e-01, -7.125e-02, 9.859e-03, -1.462e-01) * s[2][1][1];
	r1 += M4(-4.265e-02, 7.656e-02, 9.792e-02, 3.789e-02, -2.210e-02, 4.517e-02, -6.711e-03, 2.410e-02, 3.307e-01, -2.229e-01, -1.151e-01, 6.213e-02, -1.365e-01, -1.255e-01, 1.275e-01, -4.073e-02) * s[2][1][1];
	r0 += M4(-2.488e-03, -5.516e-02, -5.700e-02, 7.075e-02, 9.875e-02, -7.698e-02, 1.299e-01, -7.779e-02, 7.624e-03, -3.682e-02, 1.003e-02, -8.179e-02, -1.423e-01, -5.761e-02, 3.894e-02, -3.594e-01) * s[2][2][0];
	r1 += M4(2.863e-03, 5.992e-02, 1.218e-02, -2.634e-02, 4.517e-03, -7.937e-02, 4.956e-02, 6.773e-02, -2.341e-02, 3.732e-02, -1.831e-02, 1.300e-02, 6.045e-02, -3.125e-02, 1.008e-01, -2.681e-02) * s[2][2][0];
	r0 += M4(5.636e-02, 3.768e-02, 3.503e-02, 9.033e-02, 2.799e-02, 1.035e-02, 2.012e-02, -3.845e-02, 9.812e-02, -4.475e-02, 1.336e-02, -2.862e-01, 2.175e-02, -1.022e-01, 1.946e-02, -3.174e-01) * s[2][2][1];
	r1 += M4(7.310e-02, -1.492e-02, 2.156e-02, -2.710e-02, -2.167e-02, 1.434e-02, -2.408e-02, 8.359e-03, -1.964e-01, 4.005e-02, 7.887e-02, -4.727e-02, -2.985e-01, -1.161e-01, -1.853e-02, -3.431e-02) * s[2][2][1];
	s[0][0][0] = max(g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[1][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[1][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[1][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[1][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[1][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[1][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(-3.139e-02, -1.729e-02, -1.558e-01, 4.455e-02, -3.175e-02, -1.631e-02, 8.665e-02, 1.509e-02, -3.669e-02, 2.409e-02, -9.944e-02, 3.690e-04, 2.574e-02, 5.880e-03, 1.179e-01, 1.537e-02) * s[0][0][0];
	r1 += M4(-1.176e-02, 5.506e-03, -2.114e-02, 7.786e-03, 2.336e-02, -5.240e-02, 4.089e-02, -1.749e-02, -7.898e-02, 1.759e-02, -7.364e-02, -7.936e-03, 2.066e-02, -6.273e-02, -1.027e-02, 5.116e-02) * s[0][0][0];
	r0 += M4(6.526e-02, 7.593e-02, 1.346e-01, -2.890e-02, -1.067e-02, -1.285e-02, 6.204e-02, 7.449e-02, -8.160e-03, 2.556e-03, -3.927e-02, 6.124e-03, 5.536e-02, -3.977e-02, 4.466e-02, -1.856e-02) * s[0][0][1];
	r1 += M4(7.557e-02, -3.702e-02, 7.927e-02, 8.773e-03, 5.417e-02, -8.008e-02, -9.432e-02, -3.469e-02, -1.578e-02, 5.558e-02, 5.100e-02, -4.113e-02, 8.684e-03, 2.745e-02, -4.989e-02, 1.041e-01) * s[0][0][1];
	r0 += M4(7.441e-02, -8.667e-02, -1.304e-01, -5.010e-02, -2.720e-02, 7.575e-02, 4.831e-02, 2.691e-03, -3.441e-02, -8.090e-03, -2.114e-01, 1.978e-01, -1.506e-02, 6.568e-02, 2.397e-01, -9.283e-02) * s[0][1][0];
	r1 += M4(-8.585e-02, 7.642e-02, 5.213e-02, 5.750e-02, 7.529e-02, -2.006e-01, -3.493e-02, -1.525e-01, -8.964e-03, 1.576e-01, 1.852e-02, 9.624e-02, 5.749e-02, 1.476e-01, -1.488e-01, -2.831e-02) * s[0][1][0];
	r0 += M4(9.217e-02, -1.617e-02, 2.120e-01, -2.075e-01, -2.057e-01, 1.394e-01, -8.785e-03, -8.054e-02, 5.295e-02, -4.540e-02, 1.540e-02, 8.292e-03, -1.301e-01, 5.429e-02, 1.842e-01, -3.834e-02) * s[0][1][1];
	r1 += M4(2.449e-03, -1.434e-01, -6.349e-02, -1.765e-01, 2.975e-02, 4.168e-02, 6.031e-02, 4.237e-02, 4.832e-02, -1.806e-02, -2.284e-02, 2.254e-02, -1.863e-02, 1.786e-01, -7.711e-02, -4.829e-02) * s[0][1][1];
	r0 += M4(5.038e-02, -2.228e-02, 2.597e-02, -9.938e-03, -6.914e-03, 7.641e-02, -7.482e-02, 9.769e-02, 3.945e-02, -2.776e-02, -1.774e-01, -8.742e-02, -6.910e-02, 1.179e-01, -1.984e-02, 4.457e-02) * s[0][2][0];
	r1 += M4(-2.187e-02, -4.481e-02, 3.658e-02, -4.433e-02, 7.473e-02, -3.575e-02, -7.819e-02, 4.226e-02, -4.058e-02, 2.705e-01, 4.096e-02, -6.110e-02, 4.597e-02, 1.831e-03, -2.201e-02, 7.641e-02) * s[0][2][0];
	r0 += M4(-1.048e-01, -4.115e-03, 5.573e-02, -8.593e-03, -5.311e-03, -1.452e-02, -1.560e-02, -1.172e-02, 3.869e-02, 3.385e-03, 3.781e-03, -2.126e-02, -8.146e-03, 6.437e-02, 2.746e-02, -2.515e-02) * s[0][2][1];
	r1 += M4(2.804e-02, -1.267e-01, -8.605e-04, -5.542e-02, 4.305e-02, -4.484e-02, -2.684e-02, 1.015e-02, -7.854e-03, -1.522e-02, -1.406e-02, -4.036e-02, 1.179e-02, 4.683e-02, 4.957e-02, 8.366e-02) * s[0][2][1];
	r0 += M4(1.364e-02, 1.677e-02, 2.259e-02, 1.088e-01, 4.188e-02, -5.362e-02, -1.280e-02, -2.692e-02, 3.260e-01, 2.450e-02, -3.234e-02, -2.539e-02, 1.413e-01, 4.740e-02, 1.826e-01, -1.919e-01) * s[1][0][0];
	r1 += M4(-1.101e-01, -2.144e-01, -1.110e-01, 1.499e-01, 3.357e-02, 1.906e-01, 2.227e-01, 1.221e-01, -2.477e-02, 2.139e-01, -6.799e-03, 3.354e-02, 1.561e-01, 1.092e-01, 1.734e-01, -2.398e-01) * s[1][0][0];
	r0 += M4(9.580e-02, 1.062e-01, 5.865e-02, 8.464e-02, 8.845e-02, -2.583e-02, -1.712e-03, -2.627e-02, -6.465e-02, -1.163e-01, 4.283e-02, -3.222e-03, 1.038e-01, 7.567e-02, -1.345e-01, -1.431e-01) * s[1][0][1];
	r1 += M4(-6.680e-02, -1.791e-01, -1.893e-01, 9.111e-02, 4.569e-02, 4.911e-02, -2.441e-01, -4.017e-02, 4.086e-02, -9.109e-02, -7.153e-02, -3.514e-02, 3.791e-02, 3.037e-01, 1.757e-01, -4.824e-03) * s[1][0][1];
	r0 += M4(5.066e-02, 1.719e-01, -6.128e-02, 1.578e-02, 2.295e-01, -8.436e-02, 4.004e-01, 9.336e-03, -2.744e-01, -1.432e-01, -7.667e-02, -2.865e-01, -2.940e-02, 2.247e-02, 3.175e-01, -7.559e-03) * s[1][1][0];
	r1 += M4(1.440e-02, 4.199e-01, -1.889e-01, 5.377e-01, -1.578e-01, -4.212e-01, 3.996e-02, -1.160e-01, -1.088e-02, -1.275e-01, 4.104e-02, -1.151e-01, 2.900e-01, -4.092e-01, -3.057e-01, -5.465e-01) * s[1][1][0];
	r0 += M4(-1.382e-01, 3.697e-01, -1.421e-01, 1.342e-01, -3.833e-01, -7.845e-02, -1.284e-01, -1.033e-01, -5.332e-02, 1.755e-01, -1.860e-01, -3.465e-03, 4.054e-02, -1.919e-01, -8.265e-02, -2.742e-02) * s[1][1][1];
	r1 += M4(-2.689e-01, 5.489e-01, 3.247e-01, 5.815e-01, -1.268e-02, 1.637e-01, 3.088e-02, -2.267e-01, -3.472e-02, 2.793e-02, -1.405e-01, 1.897e-01, 2.425e-01, -1.778e-01, -1.786e-01, -3.111e-01) * s[1][1][1];
	r0 += M4(-1.137e-01, -1.763e-01, -2.026e-01, 9.659e-02, 1.708e-01, -2.279e-01, 3.041e-01, 2.342e-02, 1.209e-01, -4.002e-03, 7.714e-02, -2.744e-01, -3.517e-02, 3.008e-02, 1.314e-01, -1.276e-01) * s[1][2][0];
	r1 += M4(-3.947e-02, 8.715e-02, 1.441e-01, -9.337e-03, -9.196e-03, -9.643e-02, -1.795e-02, 1.997e-02, 2.796e-02, 3.410e-01, -1.841e-01, -8.090e-02, 1.694e-01, -7.081e-02, -1.319e-02, -1.166e-01) * s[1][2][0];
	r0 += M4(-9.988e-02, 3.962e-04, -1.221e-01, 7.985e-02, 7.461e-02, -2.980e-02, -1.641e-02, 2.028e-01, -9.122e-02, 1.674e-03, -1.552e-01, 5.321e-02, -2.449e-01, -1.057e-01, -1.654e-01, -3.547e-02) * s[1][2][1];
	r1 += M4(-1.053e-02, 9.734e-02, 1.817e-01, 8.003e-02, -6.039e-02, 3.091e-03, 5.280e-02, 5.114e-02, 5.701e-02, 4.659e-02, -2.962e-02, 4.854e-02, 4.834e-02, 5.744e-02, 2.495e-02, -1.297e-01) * s[1][2][1];
	r0 += M4(3.249e-02, 1.554e-01, -1.189e-01, -1.722e-01, -6.180e-02, 1.616e-02, 3.362e-02, 1.432e-01, 3.774e-02, 3.965e-03, -4.245e-02, -5.658e-02, -5.482e-02, -2.463e-02, -6.006e-02, -8.312e-02) * s[2][0][0];
	r1 += M4(-8.864e-02, 1.983e-01, -1.264e-01, 8.130e-02, 1.109e-01, -1.629e-01, 4.774e-02, 5.090e-02, -2.701e-02, 8.585e-02, 1.270e-02, -1.816e-01, 3.080e-02, 1.294e-01, 1.453e-01, -8.573e-03) * s[2][0][0];
	r0 += M4(1.316e-01, 1.201e-01, -9.113e-03, -1.708e-01, -3.768e-03, 4.346e-02, -5.213e-02, 7.144e-02, -1.682e-01, -8.000e-02, 2.077e-03, -5.677e-02, -3.251e-02, 1.975e-02, -4.195e-02, 9.762e-02) * s[2][0][1];
	r1 += M4(-1.347e-01, 1.217e-01, -1.274e-02, 8.620e-02, 9.979e-02, -3.515e-02, -5.572e-02, 5.252e-02, -6.197e-03, -8.044e-02, -1.228e-01, -8.861e-02, 1.088e-01, 9.644e-02, 8.554e-02, 6.933e-02) * s[2][0][1];
	r0 += M4(-6.859e-02, -2.587e-02, -3.524e-01, -9.583e-02, 1.413e-01, 1.722e-02, 2.087e-02, -2.240e-02, -1.262e-01, 6.169e-02, -1.394e-03, 1.938e-01, 1.542e-01, -3.563e-02, 3.420e-02, -3.429e-01) * s[2][1][0];
	r1 += M4(-3.160e-01, 3.390e-01, -1.374e-01, -3.605e-02, 2.125e-01, -2.657e-01, -1.546e-01, -7.626e-04, -1.023e-01, 5.189e-02, 1.373e-01, -9.739e-02, 1.044e-01, -1.201e-01, -6.207e-02, -4.103e-02) * s[2][1][0];
	r0 += M4(-2.172e-02, 1.897e-02, -1.312e-01, 2.902e-02, 1.503e-03, -4.860e-02, -1.347e-01, 3.249e-01, -3.093e-02, 1.129e-01, 9.671e-02, 2.426e-01, 8.294e-02, -1.052e-01, 7.822e-02, -3.223e-02) * s[2][1][1];
	r1 += M4(-3.592e-01, 2.147e-01, -3.490e-02, -5.878e-02, 1.988e-01, 7.682e-02, -5.710e-02, -1.224e-01, 2.035e-01, -6.470e-02, 4.756e-02, 1.966e-01, 9.513e-02, -7.165e-02, 2.859e-03, -5.362e-02) * s[2][1][1];
	r0 += M4(-1.135e-01, -6.929e-02, -1.662e-01, 9.292e-02, -1.303e-01, 7.493e-02, -1.680e-01, 3.991e-03, 9.499e-02, 3.301e-02, 5.406e-02, 1.611e-01, 1.343e-01, 1.031e-01, -3.301e-02, -2.699e-01) * s[2][2][0];
	r1 += M4(-3.206e-02, -5.470e-02, 1.061e-01, -4.471e-02, 1.307e-01, 1.846e-03, -7.521e-02, 3.733e-02, 2.044e-02, -4.873e-02, -9.164e-02, -6.660e-02, -2.535e-02, 2.082e-02, -2.629e-02, -2.324e-02) * s[2][2][0];
	r0 += M4(-8.226e-02, 5.537e-03, -4.886e-03, -7.762e-03, -8.618e-02, 1.442e-02, 3.499e-03, -2.052e-02, -9.208e-02, -9.929e-02, -2.452e-02, 1.953e-01, -4.235e-02, -2.931e-03, -6.407e-03, -8.960e-02) * s[2][2][1];
	r1 += M4(-1.436e-02, -3.034e-02, 8.015e-02, 4.179e-03, 3.213e-02, -6.425e-02, -1.136e-02, -5.263e-05, -1.139e-01, 9.092e-02, 1.004e-02, -3.104e-03, 4.433e-02, -5.216e-02, 2.125e-02, -1.882e-02) * s[2][2][1];
	r0 += V4(1.645e-02, -1.557e-03, 1.493e-02, 8.937e-04);
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(2.911e-02, -5.994e-03, 4.277e-03, -9.125e-03);
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-4x8C-conv4
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv3
//!BIND LUMA
//!SAVE conv4
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(conv3_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0)) + vec2(0.5)) * conv3_pt))
#define l1(x, y) V4(conv3_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0)) + vec2(0.5)) * conv3_pt))
shared V4 g[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv3_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			g[0][ay][ax] = l0(x - 1, y - 1);
			g[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s[3][3][2];
	V4 r0 = V4(0.0);
	V4 r1 = V4(0.0);
	s[0][0][0] = max(g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[0][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[0][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[0][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[0][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[0][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[0][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(1.031e-02, -1.416e-02, -2.564e-02, -1.384e-02, -2.691e-02, -3.535e-02, 6.969e-03, -4.993e-02, 5.306e-03, 4.867e-02, 6.195e-03, 1.858e-02, -9.176e-02, -1.064e-02, -2.030e-02, 1.155e-01) * s[0][0][0];
	r1 += M4(-1.132e-02, -1.445e-02, 1.039e-03, -2.695e-02, 4.379e-02, 5.895e-04, -5.601e-02, 5.841e-02, -8.851e-03, 3.325e-02, 3.596e-02, 7.691e-02, -1.494e-02, -1.675e-01, -4.374e-02, 1.690e-01) * s[0][0][0];
	r0 += M4(-1.449e-02, 6.875e-02, 2.912e-02, -7.986e-03, -1.343e-01, -1.740e-02, 6.527e-03, -1.348e-02, 7.753e-03, 1.109e-02, 6.020e-02, 4.346e-02, -9.429e-03, -1.921e-02, 5.232e-02, 2.643e-03) * s[0][0][1];
	r1 += M4(-1.056e-01, -3.477e-02, 1.275e-02, -1.671e-01, 5.456e-02, -2.536e-02, -6.500e-02, 6.118e-02, 5.862e-02, 4.964e-02, 3.354e-02, 4.948e-02, 5.789e-02, 1.260e-02, 4.290e-03, 8.092e-02) * s[0][0][1];
	r0 += M4(-1.116e-03, 2.096e-02, -2.298e-02, -2.435e-02, 1.412e-01, -4.000e-02, -1.070e-04, 1.905e-02, -2.280e-02, -6.661e-02, 2.607e-02, 1.062e-01, -2.417e-01, -2.567e-01, -2.241e-02, 1.646e-01) * s[0][1][0];
	r1 += M4(-2.242e-02, 7.983e-02, -1.376e-03, 4.421e-02, 3.114e-02, 1.537e-02, 2.899e-02, 4.041e-02, 9.888e-02, -9.252e-02, -3.767e-02, -2.057e-02, 1.777e-01, -5.432e-01, 2.793e-03, 7.336e-04) * s[0][1][0];
	r0 += M4(-1.614e-01, 5.024e-02, -2.141e-01, -8.520e-02, -7.371e-02, 1.998e-01, -3.201e-02, 4.424e-02, -5.644e-02, -3.231e-01, -3.720e-01, -3.614e-02, 8.673e-02, -6.373e-02, -2.328e-02, 1.783e-01) * s[0][1][1];
	r1 += M4(-6.465e-02, -3.153e-02, -9.196e-02, 5.663e-02, -6.358e-02, 4.240e-02, 2.994e-02, 1.845e-02, 1.294e-02, -2.591e-02, 6.023e-03, -4.841e-02, 1.528e-01, 4.232e-02, 3.161e-03, 7.889e-02) * s[0][1][1];
	r0 += M4(-8.943e-02, -3.042e-02, -6.300e-02, 4.153e-02, 1.806e-02, -4.945e-02, 4.244e-02, 2.540e-03, 2.593e-02, 1.496e-02, -1.215e-02, -1.224e-03, -4.285e-02, 1.605e-01, -8.416e-02, -3.216e-02) * s[0][2][0];
	r1 += M4(4.619e-02, -3.406e-02, -2.485e-02, 3.137e-02, 9.159e-02, 1.306e-02, 1.027e-02, 3.847e-02, -1.377e-02, -2.743e-02, -7.430e-03, -1.654e-02, -1.237e-01, -1.664e-01, -1.513e-01, -7.440e-02) * s[0][2][0];
	r0 += M4(7.257e-02, -1.909e-01, -1.133e-01, 1.007e-02, -9.392e-02, -4.851e-02, -5.226e-02, 5.864e-03, 5.680e-02, -1.460e-01, -1.915e-01, -2.554e-02, -9.236e-02, -3.650e-02, 2.726e-02, -1.372e-02) * s[0][2][1];
	r1 += M4(6.153e-02, -7.554e-02, 4.784e-02, -1.138e-02, 3.517e-02, 5.163e-03, -4.431e-02, 1.303e-02, -4.169e-02, 6.703e-02, 2.399e-02, -1.339e-02, 4.592e-02, -5.677e-02, -4.324e-02, 3.519e-02) * s[0][2][1];
	r0 += M4(4.786e-02, 5.139e-02, 1.107e-01, 2.989e-02, 1.129e-01, -6.426e-02, -1.017e-01, 5.349e-02, -3.407e-02, -4.926e-02, 6.806e-03, -1.845e-03, -3.413e-01, -9.572e-02, 7.840e-02, -1.697e-01) * s[1][0][0];
	r1 += M4(-9.448e-02, -4.320e-02, 1.442e-02, -7.923e-04, 1.851e-02, 1.708e-01, 2.703e-02, -2.868e-02, 8.495e-02, 1.602e-02, 1.351e-02, -4.060e-03, 4.686e-02, -2.202e-02, -1.543e-01, -1.651e-01) * s[1][0][0];
	r0 += M4(-3.539e-02, 2.199e-01, -1.082e-02, 7.469e-02, 1.221e-01, 7.589e-02, -2.578e-01, 4.221e-02, -8.119e-02, -3.096e-02, 1.243e-02, -2.862e-02, -8.009e-03, 3.308e-02, -1.916e-02, -6.747e-02) * s[1][0][1];
	r1 += M4(-7.495e-02, -1.086e-01, 5.716e-02, -2.837e-01, -6.302e-02, 1.428e-01, 4.470e-02, -1.640e-02, 1.151e-01, 4.629e-02, 1.273e-01, 1.007e-01, 5.066e-02, -2.847e-02, 2.360e-02, 3.162e-02) * s[1][0][1];
	r0 += M4(-4.868e-02, -3.165e-02, 1.213e-01, -5.817e-02, -4.378e-02, -2.893e-02, 1.224e-01, 5.384e-03, -2.004e-01, 1.004e-01, -2.321e-01, -1.730e-01, -2.667e-01, -5.148e-03, -3.213e-01, -2.371e-01) * s[1][1][0];
	r1 += M4(2.042e-02, 2.686e-03, -2.827e-02, 1.828e-01, -5.293e-02, 5.674e-02, -4.530e-02, 1.072e-01, -1.499e-01, -1.411e-01, -1.025e-01, -1.329e-01, -4.225e-02, 6.113e-01, -1.866e-01, 1.154e-01) * s[1][1][0];
	r0 += M4(-9.707e-01, -6.174e-01, 2.297e-01, 6.567e-02, -6.204e-02, -2.389e-01, -8.233e-01, 1.296e-01, -1.204e-01, -9.486e-01, 6.062e-01, -1.824e-01, -8.085e-03, -1.096e-02, -1.409e-01, -6.031e-02) * s[1][1][1];
	r1 += M4(1.280e-01, 5.705e-02, 9.632e-02, 1.594e-01, -2.682e-02, 1.884e-01, -4.564e-02, -1.128e-03, -4.476e-02, -2.014e-01, -6.171e-02, -3.144e-02, -9.790e-02, -2.520e-02, -2.118e-02, -9.942e-02) * s[1][1][1];
	r0 += M4(-5.874e-02, -1.571e-01, 1.055e-02, -4.482e-05, -5.450e-02, 7.696e-02, -4.726e-04, -1.010e-01, 8.637e-02, 1.669e-02, 1.223e-01, -2.015e-02, -4.875e-02, -8.788e-02, 2.789e-02, -6.194e-02) * s[1][2][0];
	r1 += M4(1.651e-01, 1.171e-01, -1.652e-02, 6.117e-02, -1.435e-03, -6.879e-03, 2.784e-02, -2.324e-02, -6.099e-02, 2.965e-02, 1.020e-02, 2.528e-04, 4.645e-02, 1.444e-01, -7.751e-02, -5.753e-04) * s[1][2][0];
	r0 += M4(7.339e-03, -6.136e-03, 1.226e-01, 1.089e-02, -1.638e-01, 7.484e-02, 1.263e-02, -1.653e-01, 1.078e-01, -1.098e-01, 4.014e-01, 1.076e-02, 8.130e-02, -1.047e-02, 1.175e-01, -1.320e-02) * s[1][2][1];
	r1 += M4(-1.900e-01, 3.623e-02, -1.303e-01, -3.005e-03, -2.145e-02, 1.199e-01, -2.627e-02, -2.420e-03, 1.195e-02, -5.212e-02, 1.981e-02, -3.302e-02, 4.529e-02, 1.596e-02, 1.886e-02, 1.141e-02) * s[1][2][1];
	r0 += M4(-3.021e-02, -3.586e-02, 2.658e-02, -1.471e-02, 9.283e-02, 6.143e-02, -9.434e-03, -6.141e-02, -6.384e-02, -2.118e-02, 4.756e-02, -5.700e-02, 4.174e-02, 5.241e-02, -1.995e-02, 2.849e-02) * s[2][0][0];
	r1 += M4(1.425e-03, 6.144e-02, -4.382e-02, -1.008e-01, -5.920e-02, -1.334e-01, -1.468e-02, -3.431e-02, 1.282e-02, -6.142e-02, -3.896e-02, -1.047e-03, -1.053e-01, 6.616e-02, 4.785e-02, 1.520e-02) * s[2][0][0];
	r0 += M4(-8.256e-02, -8.564e-02, -6.820e-02, 2.403e-03, 1.895e-03, -5.177e-02, 4.870e-04, -9.951e-03, -6.534e-03, -5.839e-02, 1.332e-02, -4.368e-02, -2.800e-02, 1.788e-02, -2.010e-02, -2.348e-02) * s[2][0][1];
	r1 += M4(5.000e-02, 5.439e-02, -3.714e-02, -1.177e-01, 3.224e-03, -7.876e-02, -2.858e-02, 3.848e-02, 5.229e-02, -2.347e-03, -1.283e-02, 1.304e-01, -1.030e-02, 5.539e-03, -1.301e-02, -2.347e-02) * s[2][0][1];
	r0 += M4(6.901e-02, 4.029e-02, 1.595e-02, -3.260e-02, -1.553e-02, -1.950e-02, 1.558e-01, -3.712e-02, -1.518e-01, 1.649e-01, 5.723e-02, -3.386e-01, 7.763e-02, -1.450e-01, 2.761e-01, 5.516e-02) * s[2][1][0];
	r1 += M4(-1.004e-01, 7.200e-02, -2.364e-02, -8.129e-02, 1.061e-01, -2.862e-02, -1.466e-02, 1.053e-01, -1.528e-01, -1.328e-01, -1.440e-01, -1.009e-01, 8.813e-02, -7.076e-02, -1.401e-01, 3.230e-02) * s[2][1][0];
	r0 += M4(-1.390e-01, 3.135e-01, -6.766e-02, -5.066e-02, -1.938e-02, -8.320e-02, 1.383e-01, -2.316e-03, 2.011e-03, -1.150e-02, 3.182e-01, -7.788e-02, -2.692e-02, -1.283e-02, 4.925e-02, -2.332e-02) * s[2][1][1];
	r1 += M4(-3.603e-01, -1.137e-02, 6.595e-02, -8.228e-02, 1.171e-01, -5.398e-02, -5.312e-03, 5.591e-02, 4.317e-03, -9.854e-02, 4.929e-02, -9.185e-02, -1.815e-02, 3.222e-02, -9.959e-03, -5.529e-02) * s[2][1][1];
	r0 += M4(-3.830e-02, 5.441e-02, -5.608e-02, -1.087e-02, 4.848e-02, -1.468e-03, -3.961e-02, 6.958e-02, 1.066e-01, 1.828e-02, 1.574e-01, -1.234e-02, 4.798e-02, -1.856e-02, 2.118e-01, -4.305e-03) * s[2][2][0];
	r1 += M4(-1.879e-02, -2.050e-02, 3.404e-02, 9.003e-03, -7.074e-03, -3.835e-02, 3.825e-02, 1.741e-03, 4.767e-02, -1.099e-01, -1.551e-02, 8.755e-03, 3.917e-02, -1.112e-01, -4.374e-02, 4.151e-02) * s[2][2][0];
	r0 += M4(5.792e-02, 6.490e-02, -6.783e-02, -2.352e-02, -1.219e-02, -1.170e-02, -7.860e-02, 9.658e-02, 1.980e-01, 3.577e-02, 2.128e-01, -4.843e-02, 1.517e-02, 3.044e-02, 8.816e-03, -1.508e-02) * s[2][2][1];
	r1 += M4(-8.680e-02, 8.399e-02, 4.344e-02, -9.730e-02, -1.284e-02, 1.618e-02, 2.465e-02, 6.639e-02, -6.859e-02, -2.562e-02, 3.039e-02, -5.702e-02, -1.646e-02, -1.629e-02, -1.985e-03, 1.708e-02) * s[2][2][1];
	s[0][0][0] = max(g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[1][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[1][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[1][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[1][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[1][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[1][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(-1.997e-02, -3.952e-02, 2.118e-03, -1.165e-01, -3.097e-02, 1.009e-01, 8.589e-02, -4.711e-03, 1.490e-02, 3.397e-02, 2.981e-02, 6.707e-03, 3.497e-02, -2.366e-02, 8.553e-03, -1.251e-02) * s[0][0][0];
	r1 += M4(-5.725e-02, -9.005e-03, -1.003e-01, -5.578e-02, 1.280e-04, 2.206e-02, 2.346e-02, 2.668e-02, -3.189e-02, 4.085e-02, 5.275e-02, 4.731e-02, -1.075e-03, 7.189e-02, 2.547e-02, 3.455e-02) * s[0][0][0];
	r0 += M4(-1.830e-02, -7.392e-02, -2.711e-02, -3.594e-02, 7.446e-02, 3.381e-02, 4.849e-03, 3.863e-02, 7.418e-03, -3.382e-02, -4.556e-04, 1.529e-02, 1.587e-01, 5.158e-02, 3.670e-02, -3.388e-02) * s[0][0][1];
	r1 += M4(-4.578e-02, -1.863e-02, -5.635e-02, 1.417e-02, 4.921e-03, 1.343e-02, 4.903e-02, 5.167e-02, 1.842e-02, -2.281e-03, -1.479e-02, 1.742e-02, -1.057e-01, 7.393e-02, 9.860e-02, -2.248e-02) * s[0][0][1];
	r0 += M4(3.017e-02, 6.788e-02, 1.109e-01, -9.738e-02, 2.032e-01, 2.095e-01, 5.176e-01, 1.011e-01, -9.927e-02, -1.479e-02, 7.938e-02, 3.390e-02, -7.434e-02, -6.434e-03, 1.146e-01, 1.373e-02) * s[0][1][0];
	r1 += M4(8.599e-02, 4.055e-02, 4.602e-02, 7.649e-02, 3.402e-02, -1.289e-02, 1.284e-02, -5.323e-02, 1.362e-01, 6.007e-02, 2.431e-02, 1.028e-01, 7.247e-02, -4.545e-02, -3.294e-02, -1.088e-02) * s[0][1][0];
	r0 += M4(-9.853e-02, 1.533e-01, 2.868e-01, 9.829e-02, 3.452e-02, -3.723e-02, 9.078e-02, 6.479e-02, 3.715e-02, -6.673e-02, -2.975e-02, 1.798e-02, 1.669e-03, -9.943e-02, 1.196e-01, 1.226e-01) * s[0][1][1];
	r1 += M4(1.856e-01, 1.410e-01, 9.162e-02, 6.218e-02, 3.498e-02, -6.958e-02, -3.759e-02, -2.067e-02, 3.584e-02, 8.604e-02, 8.570e-02, 4.260e-02, 1.622e-01, -9.843e-02, -7.223e-02, 1.233e-02) * s[0][1][1];
	r0 += M4(-5.184e-02, -1.341e-01, 9.372e-03, 1.580e-02, 1.886e-02, 1.606e-01, 1.662e-01, -1.060e-02, -1.729e-01, -2.510e-02, -9.110e-02, 1.265e-01, 5.020e-02, 5.937e-02, 5.700e-02, -9.558e-03) * s[0][2][0];
	r1 += M4(1.064e-01, -3.822e-03, -1.928e-02, 9.106e-02, -1.371e-01, -5.258e-02, 4.093e-02, -7.721e-02, 8.805e-03, -6.936e-02, -5.046e-02, 5.088e-02, -3.521e-02, 8.443e-02, 4.068e-02, -1.933e-02) * s[0][2][0];
	r0 += M4(-1.314e-02, -6.451e-02, -1.187e-02, 7.377e-02, -1.747e-02, -3.276e-03, -1.687e-02, 7.070e-03, -1.561e-01, -8.165e-02, -7.273e-02, 1.176e-01, 1.406e-01, 4.531e-02, 1.003e-01, 9.564e-03) * s[0][2][1];
	r1 += M4(7.105e-02, -2.159e-02, 9.156e-03, 1.897e-02, 4.017e-02, -4.028e-02, -4.506e-03, 1.822e-02, 9.645e-02, -6.990e-02, -6.471e-02, 6.552e-02, -1.965e-02, 1.052e-02, 6.956e-02, -1.430e-02) * s[0][2][1];
	r0 += M4(4.809e-02, 2.313e-02, -2.247e-02, 4.713e-02, 2.219e-01, 1.606e-01, -1.446e-01, -8.094e-02, 1.156e-01, 6.305e-02, 8.715e-02, -5.249e-02, -4.932e-02, 6.907e-02, -4.452e-02, 3.259e-02) * s[1][0][0];
	r1 += M4(-8.282e-02, 2.534e-02, -2.028e-02, 1.254e-02, -1.719e-01, -5.093e-02, 8.705e-02, -2.164e-01, -3.517e-02, -2.730e-02, -2.726e-02, -1.602e-02, -3.678e-02, -1.435e-02, 2.248e-02, 1.536e-01) * s[1][0][0];
	r0 += M4(2.596e-02, -1.915e-02, -2.676e-02, 7.739e-02, -4.526e-02, -6.602e-02, -5.988e-02, -1.973e-02, -5.149e-02, -3.867e-02, 6.620e-02, -5.251e-02, 1.167e-01, 6.309e-02, 4.129e-02, -4.523e-02) * s[1][0][1];
	r1 += M4(-4.377e-02, 8.255e-02, -1.668e-02, 2.981e-01, 1.093e-01, -1.864e-02, 9.385e-03, 1.192e-01, 1.399e-02, -7.722e-04, -3.101e-02, 5.037e-02, -8.382e-02, -2.531e-02, 1.047e-02, 3.062e-03) * s[1][0][1];
	r0 += M4(-3.830e-02, -1.806e-01, 2.106e-01, -3.972e-02, -1.744e-01, 3.569e-01, -8.959e-01, -1.706e-01, 9.758e-03, -4.857e-03, -2.277e-01, -1.915e-01, 3.624e-01, -3.689e-01, -4.955e-01, 1.268e-01) * s[1][1][0];
	r1 += M4(2.376e-01, 1.533e-01, -3.276e-02, 1.317e-01, 3.083e-01, -3.674e-02, 2.099e-01, 1.420e-01, 1.436e-01, 1.208e-01, 3.961e-02, 1.194e-01, 2.635e-01, -6.603e-02, -5.817e-02, 2.820e-02) * s[1][1][0];
	r0 += M4(-1.846e-01, -2.184e-01, 3.962e-01, 5.746e-02, -2.046e-01, -6.970e-02, -2.237e-01, -1.289e-02, 1.450e-01, 1.025e-01, -4.568e-02, -9.330e-02, 7.100e-02, -7.523e-02, -1.150e-01, -1.079e-01) * s[1][1][1];
	r1 += M4(3.363e-01, -1.442e-01, -6.515e-02, 1.939e-01, 6.476e-02, -1.626e-02, -4.782e-02, -2.915e-03, -1.458e-01, 9.335e-02, -1.035e-01, 9.177e-02, 3.260e-01, -3.861e-02, 1.854e-02, 1.985e-02) * s[1][1][1];
	r0 += M4(-3.840e-02, -2.655e-02, -2.983e-02, 2.897e-02, 1.783e-01, 2.037e-01, 5.875e-02, 7.059e-02, -5.877e-02, -8.534e-03, 7.857e-02, -1.832e-01, -1.468e-02, 2.184e-03, -1.158e-01, 1.935e-01) * s[1][2][0];
	r1 += M4(1.413e-02, -3.805e-02, 7.094e-03, 4.551e-02, -2.390e-01, 4.832e-02, -2.357e-02, -7.790e-02, 7.440e-02, 1.304e-01, -4.940e-03, -9.665e-02, 1.663e-02, -1.909e-01, -1.756e-04, 4.004e-02) * s[1][2][0];
	r0 += M4(-3.748e-02, -4.022e-02, -1.382e-01, -1.642e-02, 4.349e-02, -1.450e-02, 5.116e-02, 3.658e-02, -1.562e-01, -1.372e-01, -1.473e-01, -9.333e-02, 7.656e-02, 6.747e-03, -8.803e-03, 1.099e-01) * s[1][2][1];
	r1 += M4(3.365e-02, -1.406e-02, 1.810e-02, -5.309e-04, -1.384e-02, 9.814e-02, 3.306e-02, 3.302e-03, 1.733e-01, 7.681e-02, 5.581e-02, -2.669e-02, 8.267e-03, -1.266e-01, 5.697e-02, 9.599e-02) * s[1][2][1];
	r0 += M4(3.671e-02, 3.301e-03, 1.821e-02, -5.134e-03, 5.954e-02, 3.644e-02, 1.474e-01, 6.775e-02, 6.258e-02, 6.906e-03, -2.154e-02, 2.452e-02, -1.362e-01, -4.645e-02, 2.796e-02, -2.105e-02) * s[2][0][0];
	r1 += M4(1.654e-02, -1.907e-03, 1.134e-02, -5.188e-02, -1.582e-01, 6.602e-02, 3.329e-02, -1.490e-01, -8.350e-03, 9.217e-03, 3.033e-02, -5.214e-02, -6.518e-03, 1.160e-01, -8.185e-02, 8.853e-02) * s[2][0][0];
	r0 += M4(2.858e-02, 2.434e-02, 3.773e-02, 2.291e-02, -3.057e-02, 1.849e-02, 7.544e-02, -2.260e-02, 4.626e-02, -1.526e-02, -3.235e-02, 3.109e-02, -1.356e-02, 2.020e-02, 5.979e-02, -2.042e-02) * s[2][0][1];
	r1 += M4(-6.299e-03, -4.397e-02, 2.992e-02, -3.173e-02, -5.718e-02, 1.561e-02, -3.852e-02, -1.274e-02, 3.083e-02, 3.164e-02, 4.089e-02, 4.370e-02, -6.814e-02, 2.133e-02, -7.650e-02, -6.374e-02) * s[2][0][1];
	r0 += M4(2.226e-03, 3.090e-02, 2.235e-02, -4.088e-02, 5.360e-02, -1.209e-01, 2.974e-03, 6.409e-02, 8.205e-03, 4.385e-02, 3.076e-02, 2.335e-02, -1.365e-01, -1.379e-02, -1.385e-01, 1.411e-02) * s[2][1][0];
	r1 += M4(2.114e-02, -6.515e-02, -8.073e-03, 6.922e-02, 1.371e-01, 4.202e-03, 5.995e-02, 7.143e-02, -2.768e-03, -1.309e-01, 2.157e-03, 6.367e-02, 5.217e-02, -1.460e-01, 1.193e-01, 4.758e-02) * s[2][1][0];
	r0 += M4(5.502e-02, 4.175e-02, -3.811e-02, 1.785e-02, -5.750e-03, -3.170e-02, 8.055e-02, -4.028e-02, 5.641e-02, -3.309e-02, 1.153e-01, 1.693e-02, -1.568e-02, 4.189e-03, -8.198e-02, 1.158e-02) * s[2][1][1];
	r1 += M4(-1.778e-02, 8.659e-04, 9.066e-03, -1.962e-02, 1.792e-02, 4.905e-02, 4.032e-02, 6.887e-02, -5.834e-02, -6.824e-02, -5.849e-02, -1.756e-01, 8.007e-02, -3.267e-02, 6.786e-02, 1.337e-01) * s[2][1][1];
	r0 += M4(-8.988e-03, -1.202e-02, 9.173e-03, -2.923e-03, 1.226e-02, 1.142e-01, -1.575e-01, -6.583e-02, 2.728e-02, 3.142e-02, -6.993e-02, 4.991e-02, -1.167e-01, -9.007e-02, 1.797e-02, -9.298e-02) * s[2][2][0];
	r1 += M4(-1.537e-02, 7.251e-02, 1.753e-02, -4.339e-02, -1.316e-01, 4.722e-02, 3.902e-02, -1.480e-01, -5.005e-03, -2.594e-02, 4.201e-02, 3.058e-02, 7.414e-02, -1.498e-02, -7.300e-02, 6.155e-03) * s[2][2][0];
	r0 += M4(-6.211e-03, 1.643e-02, -2.084e-02, -4.134e-03, 6.165e-02, 1.174e-02, 2.826e-02, -4.626e-03, 4.725e-03, 1.653e-02, -6.374e-02, 6.320e-02, -5.790e-03, -1.376e-02, 6.739e-02, -6.586e-02) * s[2][2][1];
	r1 += M4(3.040e-03, -3.637e-02, -3.738e-04, -1.920e-03, -6.886e-03, -3.499e-02, -1.025e-02, -5.477e-02, 7.296e-02, -3.202e-02, 3.258e-02, 6.970e-02, 3.638e-02, -5.426e-02, -6.905e-02, -2.709e-02) * s[2][2][1];
	r0 += V4(5.679e-03, 1.886e-02, 7.358e-03, 1.895e-03);
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-1.764e-02, -9.018e-03, -5.693e-03, -1.873e-02);
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-4x8C-out-shuffle
//!HOOK LUMA
//!COMPUTE 16 16 8 8
//!BIND LUMA
//!BIND conv4
//!BIND easu
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 1
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(conv4_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0)) + vec2(0.5)) * conv4_pt))
#define l1(x, y) V4(conv4_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0)) + vec2(0.5)) * conv4_pt))
shared V4 g[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv4_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			g[0][ay][ax] = l0(x - 1, y - 1);
			g[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s[3][3][2];
	V4 r0 = V4(0.0);
	s[0][0][0] = max(g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[0][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[0][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[0][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[0][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[0][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[0][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(1.603e-02, -1.085e-02, 1.101e-02, -1.700e-02, 4.578e-02, -5.424e-03, 1.281e-02, -7.636e-03, -1.936e-02, 1.960e-02, -4.059e-03, 7.440e-03, 2.660e-02, -3.034e-02, -3.653e-02, -1.291e-02) * s[0][0][0];
	r0 += M4(9.129e-04, -2.945e-02, 1.217e-03, -1.975e-02, -4.141e-02, 4.643e-03, 1.619e-03, 5.997e-02, 6.638e-03, 2.412e-02, 7.578e-03, -3.811e-03, -4.736e-02, -3.775e-04, -1.931e-02, -7.066e-03) * s[0][0][1];
	r0 += M4(-4.118e-03, 1.728e-02, 2.367e-02, 5.303e-02, 9.302e-02, 1.295e-01, 1.052e-02, 5.212e-02, -8.525e-02, -1.241e-01, -3.426e-03, -3.381e-02, -2.240e-01, 5.268e-02, 2.859e-01, 1.314e-01) * s[0][1][0];
	r0 += M4(3.141e-02, 7.598e-02, -2.573e-02, 3.125e-02, 3.174e-01, 7.552e-02, -4.249e-02, 2.333e-02, -9.317e-02, -1.204e-01, -7.744e-03, -2.086e-02, -1.861e-02, -4.245e-02, 3.556e-03, -2.164e-02) * s[0][1][1];
	r0 += M4(2.838e-02, 4.154e-03, 1.286e-02, -6.558e-04, 3.129e-02, 5.432e-02, 2.000e-02, 8.108e-03, -1.397e-02, -1.759e-02, -1.781e-02, -2.594e-04, 1.272e-02, -2.163e-01, 1.297e-03, 1.391e-01) * s[0][2][0];
	r0 += M4(2.851e-02, 3.114e-02, 1.102e-02, -2.608e-02, -6.365e-04, -3.358e-02, 1.150e-01, -1.238e-02, -1.653e-02, -1.650e-02, -1.902e-02, -5.082e-03, 1.022e-02, -9.335e-03, -1.345e-02, -6.843e-03) * s[0][2][1];
	r0 += M4(-5.410e-02, 4.857e-02, -5.531e-02, 3.016e-02, -1.127e-01, 3.966e-04, -1.840e-02, 2.740e-03, -4.188e-02, 1.950e-02, -4.321e-02, 2.725e-02, 5.587e-02, 4.942e-02, -2.037e-01, 6.810e-02) * s[1][0][0];
	r0 += M4(-3.575e-02, -5.990e-04, -3.637e-02, 7.738e-03, -1.727e-02, -4.901e-02, -6.908e-02, -1.923e-02, -5.723e-03, 4.166e-02, -9.041e-02, 4.434e-02, -3.525e-02, -2.172e-02, -1.737e-03, -3.501e-03) * s[1][0][1];
	r0 += M4(4.051e-01, 5.061e-03, 1.460e-01, -1.089e-01, -3.071e-01, -3.525e-01, 1.813e-02, -3.294e-02, -1.179e-01, -2.007e-01, -1.522e-01, -2.397e-01, 9.597e-01, 5.410e-01, -7.218e-01, -7.704e-01) * s[1][1][0];
	r0 += M4(1.199e-01, 4.053e-02, 1.766e-01, 4.934e-02, -5.176e-01, -1.997e-01, 1.165e-01, -2.207e-01, -2.230e-02, -1.362e-01, -2.283e-01, -3.651e-01, -5.577e-02, -4.201e-02, -4.532e-02, -9.387e-03) * s[1][1][1];
	r0 += M4(-6.897e-02, 1.470e-01, -4.964e-02, 2.784e-02, 5.145e-03, -6.422e-02, -9.588e-03, 2.608e-02, -2.092e-02, -8.724e-03, -2.800e-04, 7.741e-04, -1.534e-02, 3.994e-01, -2.633e-02, -2.313e-01) * s[1][2][0];
	r0 += M4(-1.912e-02, 6.064e-03, -1.799e-02, 7.144e-02, -7.016e-02, -9.302e-02, -1.421e-01, 1.900e-01, -2.341e-02, 1.652e-02, 1.661e-02, -1.712e-03, -1.751e-02, -2.505e-02, -1.612e-02, -3.985e-02) * s[1][2][1];
	r0 += M4(-1.949e-03, 1.669e-02, -2.055e-02, 1.861e-02, 2.813e-02, 2.899e-02, -3.079e-03, 3.366e-02, 4.429e-03, -8.572e-03, -4.794e-03, 5.782e-03, -7.122e-02, -2.603e-02, 5.840e-02, -1.763e-02) * s[2][0][0];
	r0 += M4(1.006e-03, -4.229e-03, 7.609e-03, -1.497e-02, 1.593e-02, 1.328e-02, 7.036e-03, -2.191e-02, 2.611e-03, -8.604e-03, 1.848e-02, -9.287e-03, -7.658e-03, 5.425e-03, -3.941e-02, -3.659e-03) * s[2][0][1];
	r0 += M4(-3.475e-02, -7.446e-02, 1.548e-01, -3.650e-02, 1.745e-02, -9.420e-03, -9.106e-02, -1.105e-01, 1.361e-02, 3.042e-02, -2.656e-02, -3.100e-02, -1.597e-01, -1.997e-01, 9.448e-02, 1.928e-01) * s[2][1][0];
	r0 += M4(-2.160e-02, -3.012e-02, 5.074e-03, 1.967e-02, -4.016e-02, -3.119e-02, -1.696e-01, 3.021e-02, -8.096e-03, -4.477e-03, 3.862e-03, 1.388e-02, -2.038e-02, -2.320e-02, 1.903e-02, -1.727e-02) * s[2][1][1];
	r0 += M4(-1.914e-03, -4.749e-02, -2.431e-02, 4.624e-02, -1.438e-03, 1.540e-02, 1.047e-02, -1.728e-02, 1.004e-03, 3.340e-03, 3.887e-04, 8.680e-04, -5.392e-03, -6.801e-02, 2.271e-02, -6.750e-02) * s[2][2][0];
	r0 += M4(-4.511e-03, 1.886e-03, 4.999e-03, 9.227e-03, 4.377e-02, 2.252e-02, -1.141e-02, -3.389e-02, 4.802e-03, -5.617e-04, -2.775e-03, -3.848e-03, -3.812e-03, -1.120e-02, -2.997e-02, -2.423e-02) * s[2][2][1];
	s[0][0][0] = max(g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[1][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[1][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[1][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[1][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[1][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[1][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(8.612e-02, -7.136e-02, 2.318e-02, -2.365e-02, 1.248e-01, 3.357e-02, -1.841e-01, -3.560e-02, 8.912e-03, -8.548e-03, -5.838e-03, 4.874e-02, 5.265e-03, -1.646e-02, 2.582e-02, -2.665e-02) * s[0][0][0];
	r0 += M4(5.368e-02, -1.489e-02, 2.285e-02, -9.682e-03, 3.330e-02, 1.911e-02, -2.532e-02, 1.471e-02, 9.435e-03, 1.777e-02, 4.232e-02, 6.333e-03, -1.551e-02, -1.169e-02, 1.873e-02, -6.123e-03) * s[0][0][1];
	r0 += M4(-2.510e-01, 2.254e-01, -1.950e-02, 1.733e-01, 2.388e-01, 2.841e-01, -2.900e-01, -2.962e-01, -9.463e-02, 3.623e-01, 1.829e-01, 6.650e-02, -1.155e-01, 6.853e-02, -3.459e-02, 3.041e-02) * s[0][1][0];
	r0 += M4(3.995e-02, 8.048e-02, 2.239e-02, 5.872e-02, 9.582e-03, -3.457e-02, -1.654e-02, -1.057e-01, 5.444e-02, -4.826e-04, 9.436e-02, 8.872e-02, -2.143e-03, -4.669e-04, -6.469e-02, 3.426e-02) * s[0][1][1];
	r0 += M4(-1.470e-02, 2.054e-01, -3.313e-02, -5.727e-03, 3.475e-02, 1.131e-01, -1.284e-02, -1.130e-01, 2.645e-01, -2.267e-01, 1.191e-01, 6.591e-02, 2.881e-01, -4.912e-01, 1.860e-01, -7.685e-03) * s[0][2][0];
	r0 += M4(1.379e-02, 2.890e-02, 6.213e-03, 1.109e-02, -1.910e-02, 1.346e-02, 3.610e-03, 3.453e-02, 9.443e-03, 4.404e-02, 3.740e-03, 5.232e-02, 1.147e-02, 4.340e-02, 2.290e-02, -3.541e-02) * s[0][2][1];
	r0 += M4(-7.494e-02, -1.116e-01, 6.589e-02, -8.179e-02, -2.314e-02, 5.206e-02, -4.705e-02, 1.070e-02, 2.205e-01, -1.106e-01, 1.817e-01, -1.137e-01, -1.965e-02, 4.902e-03, -1.408e-02, 4.157e-03) * s[1][0][0];
	r0 += M4(-6.769e-02, 1.110e-02, -3.748e-02, 2.340e-02, -2.762e-02, 1.605e-02, 1.074e-02, 6.377e-03, 5.296e-02, 4.388e-02, -1.202e-02, 9.057e-03, 1.836e-03, -1.187e-02, -9.490e-03, -1.279e-02) * s[1][0][1];
	r0 += M4(-4.535e-01, 3.313e-01, -6.230e-01, 3.010e-01, -6.226e-02, -1.442e-01, 4.407e-02, -9.595e-02, -2.251e-01, -6.047e-02, -9.512e-01, 3.215e-01, 1.363e-01, -1.155e-01, 1.362e-01, -7.363e-04) * s[1][1][0];
	r0 += M4(-1.460e-01, -1.474e-01, 2.261e-02, -5.359e-02, -4.082e-02, -1.542e-01, 7.572e-02, -6.174e-03, -1.147e-01, -1.160e-02, -2.627e-01, -1.518e-01, 1.446e-02, -3.359e-03, 8.075e-02, 8.378e-04) * s[1][1][1];
	r0 += M4(6.237e-02, -7.354e-02, 7.662e-02, 1.249e-01, -1.533e-02, -9.542e-04, -9.846e-03, 9.006e-02, -1.861e-01, 5.176e-01, 1.380e-01, -2.156e-01, 9.443e-02, -2.931e-02, 9.355e-02, -5.121e-01) * s[1][2][0];
	r0 += M4(3.724e-02, -5.461e-02, 2.634e-02, 1.874e-02, -9.556e-03, 8.374e-03, -1.044e-02, 4.320e-02, -2.066e-02, -9.059e-02, 4.087e-02, -9.398e-02, -5.445e-02, -3.033e-02, -6.024e-02, 3.959e-02) * s[1][2][1];
	r0 += M4(4.173e-02, 3.703e-02, -1.618e-02, -7.569e-03, 1.658e-03, 8.732e-03, 2.941e-02, 2.057e-02, -1.265e-02, 1.063e-01, 7.100e-02, 1.930e-02, 1.157e-02, -7.864e-03, -1.408e-03, -5.791e-03) * s[2][0][0];
	r0 += M4(1.698e-02, 3.507e-02, 1.025e-02, 1.830e-02, 9.978e-03, 2.795e-03, 1.677e-02, 1.811e-02, -1.308e-03, -7.545e-03, 8.100e-03, 1.094e-02, 6.591e-03, -7.997e-04, 1.322e-03, -2.210e-03) * s[2][0][1];
	r0 += M4(-4.529e-02, -2.274e-02, -1.025e-01, 7.202e-02, 1.934e-02, -4.658e-03, -3.908e-03, -9.827e-03, 1.396e-01, -9.204e-02, 2.032e-01, -2.218e-01, -4.722e-03, 4.214e-02, 9.055e-03, 3.239e-02) * s[2][1][0];
	r0 += M4(1.947e-02, -2.870e-02, -6.264e-02, -6.878e-02, 1.285e-02, 6.890e-03, -9.133e-03, -2.131e-02, 1.720e-02, 4.278e-02, -1.707e-02, 1.313e-02, 1.568e-02, 2.130e-02, 2.813e-02, 3.029e-02) * s[2][1][1];
	r0 += M4(-6.740e-03, 4.582e-02, 1.314e-03, 4.430e-02, 6.182e-03, 2.174e-02, 7.522e-04, 1.196e-02, -3.005e-04, -6.853e-02, -2.017e-01, 1.871e-01, 6.305e-04, -5.736e-02, 7.495e-02, -2.341e-02) * s[2][2][0];
	r0 += M4(-1.528e-02, 3.379e-02, 1.592e-02, 1.328e-02, 6.615e-03, 8.452e-03, 1.113e-02, 3.172e-03, 2.130e-02, 2.927e-03, 1.403e-03, -2.600e-02, 2.001e-02, 7.300e-03, -5.904e-03, -3.190e-03) * s[2][2][1];
	r0 += V4(5.692e-03, 5.726e-03, 3.536e-03, 3.548e-03);
	r0 = tanh(r0);
	vec2 opt = 0.5 * LUMA_pt;
	vec2 fpos = (vec2(opos) + vec2(0.5)) * opt;
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0.x + easu_tex(fpos + vec2(0.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r0.y + easu_tex(fpos + vec2(1.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(0, 1), vec4(r0.z + easu_tex(fpos + vec2(0.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 1), vec4(r0.w + easu_tex(fpos + vec2(1.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
}
