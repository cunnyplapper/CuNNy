// CuNNy 4x8C
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

// FSR mpv | modified
// Copyright (c) 2021 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// FidelityFX FSR v1.0.2 by AMD
// ported to mpv by agyild

//!DESC CuNNy-4x8C-EASU
//!HOOK LUMA
//!BIND LUMA
//!SAVE easu
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
//!COMPONENTS 1

float APrxLoRcpF1(float a) {
	return uintBitsToFloat(uint(0x7ef07ebb) - floatBitsToUint(a));
}

float APrxLoRsqF1(float a) {
	return uintBitsToFloat(uint(0x5f347d74) - (floatBitsToUint(a) >> uint(1)));
}

float AMin3F1(float x, float y, float z) {
	return min(x, min(y, z));
}

float AMax3F1(float x, float y, float z) {
	return max(x, max(y, z));
}

void tap(inout float aC, inout float aW, vec2 off, vec2 dir, vec2 len,
         float lob, float clp, float c){
	vec2 v;
	v.x = (off.x * ( dir.x)) + (off.y * dir.y);
	v.y = (off.x * (-dir.y)) + (off.y * dir.x);
	v *= len;
	float d2 = v.x * v.x + v.y * v.y;
	d2 = min(d2, clp);
	float wB = float(2.0 / 5.0) * d2 + -1.0;
	float wA = lob * d2 + -1.0;
	wB *= wB;
	wA *= wA;
	wB = float(25.0 / 16.0) * wB + float(-(25.0 / 16.0 - 1.0));
	float w = wB * wA;
	aC += c * w;
	aW += w;
}

void set(inout vec2 dir, inout float len, vec2 pp, bool biS, bool biT,
         bool biU, bool biV, float lA, float lB, float lC, float lD, float lE){
	float w = 0.0;
	if (biS)
		w = (1.0 - pp.x) * (1.0 - pp.y);
	if (biT)
		w =        pp.x  * (1.0 - pp.y);
	if (biU)
		w = (1.0 - pp.x) *        pp.y;
	if (biV)
		w =        pp.x  *        pp.y;
	float dc = lD - lC;
	float cb = lC - lB;
	float lenX = max(abs(dc), abs(cb));
	lenX = APrxLoRcpF1(lenX);
	float dirX = lD - lB;
	lenX = clamp(abs(dirX) * lenX, 0.0, 1.0);
	lenX *= lenX;
	float ec = lE - lC;
	float ca = lC - lA;
	float lenY = max(abs(ec), abs(ca));
	lenY = APrxLoRcpF1(lenY);
	float dirY = lE - lA;
	lenY = clamp(abs(dirY) * lenY, 0.0, 1.0);
	lenY *= lenY;
	dir += vec2(dirX, dirY) * w;
	len += dot(vec2(w), vec2(lenX, lenY));
}

vec4 hook() {
	vec4 pix = vec4(0.0, 0.0, 0.0, 1.0);
	vec2 pp = LUMA_pos * LUMA_size - vec2(0.5);
	vec2 fp = floor(pp);
	pp -= fp;
#if (defined(LUMA_gather) && (__VERSION__ >= 400 || (GL_ES && __VERSION__ >= 310)))
	vec4 bczzL = LUMA_gather(vec2((fp + vec2(1.0, -1.0)) * LUMA_pt), 0);
	vec4 ijfeL = LUMA_gather(vec2((fp + vec2(0.0,  1.0)) * LUMA_pt), 0);
	vec4 klhgL = LUMA_gather(vec2((fp + vec2(2.0,  1.0)) * LUMA_pt), 0);
	vec4 zzonL = LUMA_gather(vec2((fp + vec2(1.0,  3.0)) * LUMA_pt), 0);
#else
	float b = LUMA_tex(vec2((fp + vec2(0.5, -0.5)) * LUMA_pt)).r;
	float c = LUMA_tex(vec2((fp + vec2(1.5, -0.5)) * LUMA_pt)).r;
	float e = LUMA_tex(vec2((fp + vec2(-0.5, 0.5)) * LUMA_pt)).r;
	float f = LUMA_tex(vec2((fp + vec2( 0.5, 0.5)) * LUMA_pt)).r;
	float g = LUMA_tex(vec2((fp + vec2( 1.5, 0.5)) * LUMA_pt)).r;
	float h = LUMA_tex(vec2((fp + vec2( 2.5, 0.5)) * LUMA_pt)).r;
	float i = LUMA_tex(vec2((fp + vec2(-0.5, 1.5)) * LUMA_pt)).r;
	float j = LUMA_tex(vec2((fp + vec2( 0.5, 1.5)) * LUMA_pt)).r;
	float k = LUMA_tex(vec2((fp + vec2( 1.5, 1.5)) * LUMA_pt)).r;
	float l = LUMA_tex(vec2((fp + vec2( 2.5, 1.5)) * LUMA_pt)).r;
	float n = LUMA_tex(vec2((fp + vec2(0.5, 2.5) ) * LUMA_pt)).r;
	float o = LUMA_tex(vec2((fp + vec2(1.5, 2.5) ) * LUMA_pt)).r;
	vec4 bczzL = vec4(b, c, 0.0, 0.0);
	vec4 ijfeL = vec4(i, j, f, e);
	vec4 klhgL = vec4(k, l, h, g);
	vec4 zzonL = vec4(0.0, 0.0, o, n);
#endif
	float bL = bczzL.x;
	float cL = bczzL.y;
	float iL = ijfeL.x;
	float jL = ijfeL.y;
	float fL = ijfeL.z;
	float eL = ijfeL.w;
	float kL = klhgL.x;
	float lL = klhgL.y;
	float hL = klhgL.z;
	float gL = klhgL.w;
	float oL = zzonL.z;
	float nL = zzonL.w;
	vec2 dir = vec2(0.0);
	float len = 0.0;
	set(dir, len, pp, true, false, false, false, bL, eL, fL, gL, jL);
	set(dir, len, pp, false, true, false, false, cL, fL, gL, hL, kL);
	set(dir, len, pp, false, false, true, false, fL, iL, jL, kL, nL);
	set(dir, len, pp, false, false, false, true, gL, jL, kL, lL, oL);
	vec2 dir2 = dir * dir;
	float dirR = dir2.x + dir2.y;
	bool zro = dirR < float(1.0 / 32768.0);
	dirR = APrxLoRsqF1(dirR);
	dirR = zro ? 1.0 : dirR;
	dir.x = zro ? 1.0 : dir.x;
	dir *= vec2(dirR);
	len = len * 0.5;
	len *= len;
	float stretch = (dir.x * dir.x + dir.y * dir.y) * APrxLoRcpF1(max(abs(dir.x), abs(dir.y)));
	vec2 len2 = vec2(1.0 + (stretch - 1.0) * len, 1.0 + -0.5 * len);
	float lob = 0.5 + float((1.0 / 4.0 - 0.04) - 0.5) * len;
	float clp = APrxLoRcpF1(lob);
	float aC = 0.0;
	float aW = 0.0;
	tap(aC, aW, vec2( 0.0,-1.0) - pp, dir, len2, lob, clp, bL);
	tap(aC, aW, vec2( 1.0,-1.0) - pp, dir, len2, lob, clp, cL);
	tap(aC, aW, vec2(-1.0, 1.0) - pp, dir, len2, lob, clp, iL);
	tap(aC, aW, vec2( 0.0, 1.0) - pp, dir, len2, lob, clp, jL);
	tap(aC, aW, vec2( 0.0, 0.0) - pp, dir, len2, lob, clp, fL);
	tap(aC, aW, vec2(-1.0, 0.0) - pp, dir, len2, lob, clp, eL);
	tap(aC, aW, vec2( 1.0, 1.0) - pp, dir, len2, lob, clp, kL);
	tap(aC, aW, vec2( 2.0, 1.0) - pp, dir, len2, lob, clp, lL);
	tap(aC, aW, vec2( 2.0, 0.0) - pp, dir, len2, lob, clp, hL);
	tap(aC, aW, vec2( 1.0, 0.0) - pp, dir, len2, lob, clp, gL);
	tap(aC, aW, vec2( 1.0, 2.0) - pp, dir, len2, lob, clp, oL);
	tap(aC, aW, vec2( 0.0, 2.0) - pp, dir, len2, lob, clp, nL);
	pix.r = aC / aW;
	float min1 = min(AMin3F1(fL, gL, jL), kL);
	float max1 = max(AMax3F1(fL, gL, jL), kL);
	pix.r = clamp(pix.r, min1, max1);
	pix.r = clamp(pix.r, 0.0, 1.0);
	return pix;
}


//!DESC CuNNy-4x8C-in
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND LUMA
//!SAVE in
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) F(texelFetch(LUMA_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(1, 1) + ivec2(0, 0), 0).r)
shared F g[1][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = LUMA_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			g[0][ay][ax] = l0(x - 1, y - 1);
		}
	}
	barrier();
	F s[3][3][1];
	V4 r0 = V4(0.0);
	V4 r1 = V4(0.0);
	s[0][0][0] = g[0][xy.y+0][xy.x+0];
	s[0][1][0] = g[0][xy.y+0][xy.x+1];
	s[0][2][0] = g[0][xy.y+0][xy.x+2];
	s[1][0][0] = g[0][xy.y+1][xy.x+0];
	s[1][1][0] = g[0][xy.y+1][xy.x+1];
	s[1][2][0] = g[0][xy.y+1][xy.x+2];
	s[2][0][0] = g[0][xy.y+2][xy.x+0];
	s[2][1][0] = g[0][xy.y+2][xy.x+1];
	s[2][2][0] = g[0][xy.y+2][xy.x+2];
	r0 += V4(1.643e-02, -4.602e-02, -5.274e-03, -2.892e-01) * s[0][0][0];
	r1 += V4(-5.868e-02, 9.658e-03, 2.663e-01, -6.524e-02) * s[0][0][0];
	r0 += V4(-7.013e-02, 4.650e-02, -3.245e-02, 6.665e-02) * s[0][1][0];
	r1 += V4(1.069e-01, -2.398e-02, -2.091e-01, -1.135e-01) * s[0][1][0];
	r0 += V4(6.517e-02, 1.114e-01, 3.846e-02, 7.788e-03) * s[0][2][0];
	r1 += V4(-1.741e-02, 7.797e-03, -4.075e-02, -5.856e-05) * s[0][2][0];
	r0 += V4(5.957e-02, 9.406e-02, 3.821e-02, -6.812e-02) * s[1][0][0];
	r1 += V4(3.115e-01, -4.396e-02, -3.057e-01, -1.284e-01) * s[1][0][0];
	r0 += V4(-6.763e-02, -3.898e-01, 1.874e-02, 2.762e-01) * s[1][1][0];
	r1 += V4(1.043e-01, -3.779e-01, 1.918e-01, -1.662e-01) * s[1][1][0];
	r0 += V4(-1.865e-01, 6.958e-02, -3.779e-01, 1.368e-02) * s[1][2][0];
	r1 += V4(-1.293e-01, 6.251e-04, 9.937e-02, 1.481e-02) * s[1][2][0];
	r0 += V4(2.333e-01, -1.409e-02, -4.040e-02, 2.557e-02) * s[2][0][0];
	r1 += V4(-5.432e-02, 1.072e-01, 3.986e-02, 7.133e-03) * s[2][0][0];
	r0 += V4(3.386e-02, 6.186e-02, 3.858e-01, -1.393e-03) * s[2][1][0];
	r1 += V4(-2.666e-01, 3.597e-01, 1.910e-02, 6.671e-03) * s[2][1][0];
	r0 += V4(-8.274e-02, 1.537e-02, -2.765e-02, -3.082e-02) * s[2][2][0];
	r1 += V4(6.829e-03, -3.561e-02, -6.093e-02, -4.306e-03) * s[2][2][0];
	r0 += V4(5.585e-04, -5.872e-03, 9.813e-04, 5.730e-04);
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(5.693e-03, -1.911e-02, 9.130e-04, 1.779e-03);
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-4x8C-conv1
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND in
//!BIND LUMA
//!SAVE conv1
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 g[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = in_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			g[0][ay][ax] = l0(x - 1, y - 1);
			g[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s[3][3][2];
	V4 r0 = V4(0.0);
	V4 r1 = V4(0.0);
	s[0][0][0] = max(g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[0][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[0][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[0][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[0][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[0][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[0][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(-2.311e-02, -2.386e-02, -2.252e-02, -6.238e-02, -6.350e-02, 1.678e-01, -2.291e-01, -4.091e-02, 2.729e-03, -8.200e-02, -2.965e-01, 1.421e-01, -4.116e-02, -1.768e-02, 1.366e-01, 6.168e-02) * s[0][0][0];
	r1 += M4(-1.721e-01, -6.722e-02, 1.993e-01, -1.406e-02, 6.580e-04, 2.469e-01, 8.123e-02, -3.526e-01, -1.380e-01, -9.366e-02, 2.574e-01, 2.452e-01, 1.455e-02, 9.581e-02, -1.298e-01, 1.327e-01) * s[0][0][0];
	r0 += M4(-3.524e-02, 4.276e-02, 1.240e-01, -2.073e-01, -7.510e-02, 1.374e-01, -3.292e-01, -2.185e-02, 1.765e-01, -2.337e-01, -3.321e-01, 1.336e-01, -9.986e-02, -3.666e-02, 2.922e-01, 1.098e-01) * s[0][0][1];
	r1 += M4(7.718e-02, 1.320e-01, -5.000e-02, -2.266e-01, 5.136e-02, 8.847e-02, 1.112e-01, -1.651e-01, 2.150e-01, 8.877e-02, -4.415e-01, -1.784e-01, -7.782e-02, 1.008e-02, -4.569e-02, 4.090e-02) * s[0][0][1];
	r0 += M4(-2.030e-01, -1.612e-01, -2.607e-01, 1.620e-01, 1.557e-01, 4.158e-02, 1.208e-01, -1.766e-01, 3.419e-02, -1.109e-02, -1.413e-01, -1.776e-02, -3.607e-02, 9.644e-02, -5.896e-02, -1.380e-01) * s[0][1][0];
	r1 += M4(-2.878e-01, -9.988e-02, 2.510e-01, -8.178e-02, -8.872e-02, 7.948e-03, -1.621e-01, 1.309e-01, 4.154e-03, 1.645e-02, 2.171e-01, -5.127e-01, 7.748e-02, 2.936e-02, -1.289e-01, -2.089e-02) * s[0][1][0];
	r0 += M4(5.990e-02, 3.789e-02, -1.567e-01, 7.097e-02, 2.491e-02, 4.973e-02, 8.540e-02, -1.300e-01, 1.273e-01, -4.844e-02, -1.948e-01, -4.063e-01, 6.254e-02, 5.981e-02, 2.095e-02, 8.026e-03) * s[0][1][1];
	r1 += M4(-4.118e-02, -1.055e-02, -3.095e-01, -1.763e-01, 1.040e-01, -1.668e-04, -4.363e-02, 7.198e-03, 3.582e-01, -5.414e-02, -8.763e-02, 4.725e-02, -6.540e-02, -4.678e-02, -1.053e-01, -2.342e-01) * s[0][1][1];
	r0 += M4(-3.261e-02, 1.233e-02, -8.671e-02, -6.669e-03, -6.216e-03, -2.023e-02, 1.846e-02, 3.471e-02, 2.547e-02, 4.339e-04, 8.111e-02, -1.096e-01, -3.754e-02, 1.972e-02, -1.116e-01, 1.359e-01) * s[0][2][0];
	r1 += M4(-2.292e-01, 5.631e-03, -2.481e-01, -9.440e-03, -1.407e-01, 1.465e-01, -7.516e-02, 9.152e-02, 7.008e-02, 7.118e-03, 1.107e-01, 9.722e-03, -1.097e-01, 4.011e-02, 1.539e-01, -1.413e-02) * s[0][2][0];
	r0 += M4(2.467e-01, 8.448e-03, -4.479e-02, 6.020e-03, -7.170e-02, -4.947e-02, 1.479e-02, 8.564e-02, -4.200e-03, 2.435e-02, 1.125e-01, -2.003e-02, 6.548e-02, -1.776e-02, -8.432e-02, 7.665e-02) * s[0][2][1];
	r1 += M4(-8.199e-02, -2.985e-02, 1.352e-02, 1.188e-02, -2.543e-02, -9.950e-03, 7.348e-02, 1.509e-01, 1.626e-01, -6.058e-03, 4.080e-02, -8.904e-03, -1.194e-01, -4.164e-03, -5.647e-02, -1.228e-01) * s[0][2][1];
	r0 += M4(-4.057e-02, 3.601e-02, 9.375e-02, 2.905e-01, 1.873e-02, 1.464e-01, -3.982e-02, -1.267e-01, -2.477e-01, -4.237e-02, -1.357e-01, 2.372e-01, -1.075e-03, 5.606e-03, 3.483e-02, 1.151e-01) * s[1][0][0];
	r1 += M4(1.130e-02, -7.072e-03, -2.165e-01, 3.183e-02, 1.654e-01, 1.916e-01, -1.477e-01, -4.069e-02, -6.729e-01, -5.794e-02, -7.925e-02, -5.730e-02, 4.399e-02, -1.565e-01, 2.050e-01, 9.530e-02) * s[1][0][0];
	r0 += M4(-2.769e-02, 4.105e-02, 5.386e-02, 3.191e-01, 7.817e-02, 1.485e-01, 1.677e-03, -2.377e-01, -1.288e-02, -1.875e-01, -1.614e-01, 5.003e-01, 1.553e-01, -1.340e-01, -2.144e-02, 5.374e-02) * s[1][0][1];
	r1 += M4(1.747e-01, 5.254e-03, -1.284e-01, 3.478e-01, 2.475e-01, 6.196e-02, 7.241e-02, -4.211e-02, 3.111e-02, 7.218e-02, -3.214e-01, 2.277e-01, -1.075e-01, -8.300e-02, 1.731e-01, -6.803e-03) * s[1][0][1];
	r0 += M4(4.459e-02, -4.972e-02, 6.417e-02, -3.913e-02, -4.863e-02, 9.368e-03, -3.960e-01, 8.285e-02, -1.036e-01, -2.565e-02, -4.963e-02, -2.575e-03, -6.686e-02, 1.463e-02, 2.988e-02, -9.838e-02) * s[1][1][0];
	r1 += M4(1.929e-01, 1.166e-01, -1.117e-03, 1.625e-01, 8.262e-02, 5.866e-02, -2.027e-01, 2.914e-01, -1.213e-01, 2.340e-01, 2.175e-01, -2.441e-01, 8.059e-02, -5.984e-02, 2.837e-01, 1.933e-01) * s[1][1][0];
	r0 += M4(-1.912e-01, 1.770e-02, 3.992e-02, -9.423e-02, -3.419e-01, -1.447e-02, -2.909e-01, 4.507e-01, -3.312e-01, -4.867e-02, -1.017e-01, -2.392e-01, 5.848e-01, 5.629e-02, -2.041e-01, -8.740e-02) * s[1][1][1];
	r1 += M4(2.852e-01, 3.309e-01, -5.127e-02, -7.853e-02, -1.407e-02, 1.853e-01, 1.825e-01, -1.276e-02, 3.115e-01, 4.883e-01, 1.168e-01, 1.643e-01, -3.009e-01, -4.831e-03, -4.763e-02, -4.222e-01) * s[1][1][1];
	r0 += M4(-9.043e-02, -5.022e-02, 1.849e-02, 7.749e-02, 4.411e-02, 1.378e-01, 1.888e-01, -2.404e-01, -5.600e-02, 5.891e-02, 4.308e-02, -4.163e-03, -3.799e-01, -8.845e-02, 2.967e-02, 2.841e-01) * s[1][2][0];
	r1 += M4(-3.425e-01, 6.202e-02, -7.399e-02, -1.923e-01, 4.741e-02, -2.120e-01, -8.344e-02, -1.210e-01, -4.472e-02, -6.465e-02, 9.287e-02, 9.205e-02, 6.524e-02, 2.256e-01, 1.145e-01, -1.470e-01) * s[1][2][0];
	r0 += M4(1.217e-02, -8.067e-02, 2.252e-02, 1.141e-01, 1.214e-01, 5.324e-02, 2.035e-01, -2.649e-01, -1.213e-01, 3.346e-02, 4.166e-02, 2.092e-02, 3.083e-02, -1.196e-01, -3.905e-02, -9.888e-02) * s[1][2][1];
	r1 += M4(6.410e-03, -1.140e-02, -1.141e-01, -6.814e-02, 1.211e-01, -5.910e-02, -8.298e-02, -1.863e-01, -8.104e-02, -5.561e-02, 2.401e-01, 1.294e-01, -4.923e-01, -1.466e-01, 7.833e-02, -1.262e-02) * s[1][2][1];
	r0 += M4(-1.785e-02, -4.002e-02, 2.332e-02, -5.910e-02, -2.772e-02, -1.533e-01, -7.840e-02, 1.964e-01, -6.012e-02, -2.550e-02, -1.153e-02, 1.554e-02, -1.493e-02, 1.462e-02, -5.355e-02, -4.222e-03) * s[2][0][0];
	r1 += M4(-2.595e-02, -1.447e-01, -1.028e-01, 7.381e-02, -2.359e-01, 5.501e-01, 4.997e-02, -5.939e-02, -3.630e-01, -2.896e-01, -2.548e-03, 1.160e-01, -9.935e-02, -2.312e-02, -2.034e-01, -1.478e-02) * s[2][0][0];
	r0 += M4(1.628e-02, -5.437e-02, -3.544e-02, -7.823e-03, 3.903e-02, -1.687e-01, 6.855e-02, 2.503e-02, 2.606e-02, -2.170e-02, -5.777e-02, 1.753e-01, 1.750e-01, -1.185e-01, -7.902e-02, 4.170e-01) * s[2][0][1];
	r1 += M4(1.082e-02, -8.858e-02, 8.448e-03, 8.634e-02, -1.116e-01, -2.722e-02, -8.944e-02, -3.906e-02, -1.225e-01, -6.406e-02, -3.895e-02, 5.366e-03, -5.045e-02, 1.411e-01, -1.929e-01, -1.350e-01) * s[2][0][1];
	r0 += M4(7.300e-02, -2.390e-02, -5.118e-02, 2.257e-02, 1.854e-01, 1.828e-01, 2.270e-01, -1.665e-01, -1.274e-01, -1.132e-01, 1.388e-02, 1.913e-01, -4.696e-01, 1.585e-01, 6.408e-02, -3.425e-01) * s[2][1][0];
	r1 += M4(3.810e-01, 1.368e-02, -6.544e-02, 1.086e-02, -3.473e-01, -5.282e-01, 1.276e-01, 8.900e-02, -1.560e-01, -2.956e-02, -1.309e-01, 7.630e-03, 4.443e-01, 2.097e-01, -2.973e-01, -1.145e-01) * s[2][1][0];
	r0 += M4(-4.325e-02, 6.177e-04, -3.558e-02, -5.086e-02, 1.578e-01, 1.909e-01, 2.355e-01, -1.020e-01, -2.021e-01, -9.504e-02, 3.674e-02, 2.209e-01, -2.401e-02, 5.921e-02, 1.685e-01, 1.100e-01) * s[2][1][1];
	r1 += M4(2.881e-01, 2.691e-02, 7.507e-02, 6.138e-02, 2.069e-02, -1.276e-02, -7.065e-02, -1.542e-01, -4.914e-02, 4.878e-02, -3.173e-02, 2.390e-02, -3.975e-01, -5.982e-03, 2.144e-01, -5.340e-02) * s[2][1][1];
	r0 += M4(6.347e-02, 3.745e-03, 7.242e-03, -4.095e-02, -4.618e-02, -1.630e-02, -4.291e-02, 1.104e-02, 2.522e-02, -4.655e-03, 3.074e-03, -2.375e-03, -1.514e-01, -3.034e-02, -5.350e-02, 4.408e-01) * s[2][2][0];
	r1 += M4(-2.414e-01, -9.589e-02, 1.237e-01, 9.671e-02, -2.626e-01, 6.401e-04, 5.050e-02, 2.014e-01, 2.319e-01, -2.830e-02, -4.389e-02, -2.976e-02, 4.459e-01, 7.579e-02, -1.370e-01, -1.672e-01) * s[2][2][0];
	r0 += M4(1.181e-01, -3.380e-03, 2.649e-03, -3.644e-02, -7.751e-03, -1.718e-03, -6.409e-02, -2.572e-04, -7.889e-03, 1.093e-02, 5.649e-03, -9.225e-02, 1.830e-01, -1.825e-01, 5.529e-03, -5.112e-03) * s[2][2][1];
	r1 += M4(-2.269e-01, -3.189e-02, -3.773e-02, -5.995e-02, -3.299e-01, -8.452e-02, 2.270e-02, 7.902e-02, 1.398e-01, 1.709e-02, 8.760e-02, 1.413e-01, -1.131e-01, -8.557e-02, -2.063e-01, 2.802e-01) * s[2][2][1];
	s[0][0][0] = max(g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[1][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[1][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[1][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[1][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[1][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[1][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(6.660e-02, -4.434e-02, 2.026e-01, 1.528e-01, 3.152e-02, -4.213e-02, 6.066e-01, -1.062e-01, -5.458e-02, 1.322e-02, 1.460e-01, 1.159e-01, 3.903e-01, 2.045e-02, -2.496e-02, 6.474e-01) * s[0][0][0];
	r1 += M4(5.649e-03, -1.100e-01, 8.072e-03, 1.965e-01, 9.445e-03, -9.605e-02, -1.944e-01, 2.349e-01, 6.420e-02, 1.149e-01, -1.283e-01, 7.199e-02, 1.542e+00, 1.293e+00, 3.853e-01, -1.122e+00) * s[0][0][0];
	r0 += M4(-7.734e-02, 2.808e-02, 1.829e-01, 9.599e-02, -1.220e-01, -9.500e-02, -4.131e-01, 2.864e-01, -1.431e-01, -4.850e-02, 1.216e-01, 1.204e-01, -5.630e-02, -3.226e-02, -1.362e-01, -5.211e-02) * s[0][0][1];
	r1 += M4(-4.379e-02, -1.399e-01, 1.057e-01, 3.444e-02, -1.131e-01, -1.931e-01, -3.521e-02, -2.022e-04, -8.078e-02, -8.593e-02, 8.861e-03, -5.907e-02, -5.294e-02, -1.231e-01, 1.084e-01, -1.438e-01) * s[0][0][1];
	r0 += M4(-7.076e-02, 7.271e-02, 4.427e-01, 5.437e-02, 2.047e-01, 3.370e-02, -2.221e-01, -1.311e-02, -1.785e-01, 3.385e-02, 1.726e-02, -2.378e-01, 2.303e+00, 6.321e-01, 8.874e-01, 1.736e+00) * s[0][1][0];
	r1 += M4(-1.265e-02, -5.858e-03, -1.809e-02, 5.757e-02, 6.062e-02, 1.534e-01, 1.691e-02, -2.342e-01, 1.069e-01, -9.610e-03, -4.941e-02, -3.260e-02, 3.154e-01, 7.929e-01, 1.916e-01, -1.218e-01) * s[0][1][0];
	r0 += M4(-1.325e-01, 8.014e-02, 4.041e-01, -5.750e-02, 2.813e-01, -3.834e-03, -2.259e-02, -1.173e-01, 3.502e-02, -3.711e-04, -2.569e-02, -1.469e-01, -9.917e-03, 5.673e-02, 1.576e-01, -2.311e-02) * s[0][1][1];
	r1 += M4(-1.041e-01, -2.845e-02, 2.883e-02, 6.768e-02, 1.042e-01, -1.164e-01, 9.610e-02, -1.107e-03, -1.047e-01, -6.121e-02, -1.273e-01, -1.416e-01, 9.585e-02, 1.492e-01, 3.260e-02, 7.736e-02) * s[0][1][1];
	r0 += M4(-3.241e-02, -7.358e-02, 9.190e-02, 8.441e-02, -8.111e-03, -3.758e-02, 2.121e-03, 1.747e-01, 1.221e-01, -5.999e-02, -6.274e-02, 1.805e-01, 2.520e+00, -2.365e-01, -2.008e-01, 9.387e-01) * s[0][2][0];
	r1 += M4(-1.459e-01, -5.287e-02, -1.647e-01, 2.227e-02, -7.745e-02, 4.063e-02, 1.584e-01, -1.541e-01, -7.343e-02, 4.797e-02, -3.716e-02, 1.245e-02, -2.944e-01, 3.616e-01, 2.012e+00, -1.651e+00) * s[0][2][0];
	r0 += M4(-1.513e-01, -5.445e-02, 9.411e-02, 9.360e-02, -2.210e-01, -2.872e-02, -1.953e-03, 1.343e-01, 1.016e-02, -7.010e-02, -3.508e-02, 4.394e-02, -7.983e-02, 6.665e-02, -3.072e-03, -5.237e-02) * s[0][2][1];
	r1 += M4(-3.981e-01, 4.852e-03, -8.420e-02, 5.380e-02, -8.466e-02, 9.912e-02, 4.142e-02, -5.745e-02, -3.113e-02, 1.789e-02, -1.950e-01, 7.114e-02, -4.850e-03, -9.060e-03, 6.909e-02, -6.902e-03) * s[0][2][1];
	r0 += M4(6.150e-02, -2.050e-01, -8.219e-02, 1.576e-01, 6.567e-02, -1.611e-02, -3.534e-02, -1.245e-01, -8.228e-02, -1.343e-01, -4.902e-02, 1.894e-01, -1.141e+00, 6.100e-01, 3.586e-02, -3.883e+00) * s[1][0][0];
	r1 += M4(-4.806e-03, 7.540e-02, -1.101e-01, 1.526e-01, -1.340e-01, -2.512e-01, 9.333e-02, 2.497e-01, -3.502e-02, 4.018e-02, 5.402e-02, 3.313e-02, 4.637e-01, 6.152e-01, -4.947e-01, -4.743e-01) * s[1][0][0];
	r0 += M4(4.444e-02, -1.743e-01, -2.662e-01, 2.392e-02, -4.562e-02, 6.263e-02, -5.604e-02, 3.847e-02, 1.586e-01, -2.626e-01, 3.806e-02, 1.049e-01, 5.737e-03, 6.238e-02, -9.159e-02, -4.584e-02) * s[1][0][1];
	r1 += M4(-3.372e-01, -1.499e-01, 9.610e-03, 5.736e-02, -1.558e-02, 2.199e-01, 4.950e-02, -1.305e-01, -1.567e-01, -5.467e-02, -2.749e-02, 1.010e-02, 4.757e-03, 4.844e-02, -9.083e-02, 6.848e-02) * s[1][0][1];
	r0 += M4(1.011e-01, -2.087e-01, -8.640e-02, 3.342e-02, -3.158e-01, 1.196e-01, -1.145e-01, 2.063e-01, -1.890e-01, 3.104e-01, 5.246e-01, -2.861e-01, -8.616e-01, 1.420e+00, -4.091e-01, 3.834e+00) * s[1][1][0];
	r1 += M4(2.074e-01, -1.099e-01, 5.110e-02, -1.420e-01, -1.622e-01, 2.398e-01, -4.741e-02, -4.826e-02, 2.567e-01, -9.364e-02, 3.332e-01, -2.172e-01, -2.703e+00, 1.851e+00, 3.580e-01, 1.113e+00) * s[1][1][0];
	r0 += M4(1.701e-01, -1.739e-01, -1.359e-01, -1.272e-02, -3.941e-01, 1.038e-01, 5.207e-02, -5.421e-02, 2.174e-01, 2.227e-01, 4.305e-01, -5.653e-01, 4.439e-02, 2.831e-01, 3.927e-02, 2.995e-02) * s[1][1][1];
	r1 += M4(-2.010e-02, -4.817e-02, -2.222e-01, -2.229e-02, 4.255e-02, 9.551e-02, -1.092e-01, 1.209e-01, 4.671e-02, 7.502e-02, 5.603e-02, -1.740e-01, -9.745e-02, -1.551e-01, -6.114e-02, -7.411e-02) * s[1][1][1];
	r0 += M4(1.618e-01, -6.910e-03, -1.186e-01, -1.211e-01, 1.648e-02, -9.537e-02, -7.672e-02, 1.679e-01, -1.747e-01, -3.940e-02, -1.299e-01, 3.127e-01, -2.051e+00, 8.763e-01, -2.040e+00, -1.278e-01) * s[1][2][0];
	r1 += M4(2.695e-01, -4.424e-02, -1.813e-01, -4.985e-02, 2.122e-03, -6.429e-02, 1.850e-01, -8.470e-02, -8.658e-02, 1.742e-01, 3.758e-01, 3.272e-02, -5.568e-01, 3.421e+00, -7.787e-02, 1.693e+00) * s[1][2][0];
	r0 += M4(-1.221e-01, 4.147e-02, -1.919e-01, -4.849e-02, -3.780e-02, -1.726e-02, 2.223e-03, 4.358e-02, -4.142e-02, -7.512e-02, -8.686e-02, -7.783e-03, 2.581e-02, 1.300e-01, -2.682e-02, -5.161e-02) * s[1][2][1];
	r1 += M4(2.505e-03, 6.377e-02, 2.547e-01, -3.321e-02, -2.089e-03, 1.558e-01, -5.096e-02, -4.832e-02, -3.335e-02, -6.398e-02, -4.785e-03, 2.552e-01, 3.632e-02, 4.389e-02, -1.130e-01, 1.069e-01) * s[1][2][1];
	r0 += M4(2.941e-02, 1.075e-01, -5.648e-02, -3.230e-02, 3.213e-02, 1.233e-01, -3.978e-02, 4.838e-02, -5.760e-02, 6.950e-02, 1.586e-02, 3.287e-02, -1.416e+00, 2.010e+00, 1.284e+00, -2.768e+00) * s[2][0][0];
	r1 += M4(-9.751e-02, -2.084e-01, 2.932e-03, 7.710e-02, -2.467e-01, -5.653e-02, 8.655e-02, -2.445e-01, -1.497e-01, 9.483e-02, -9.760e-02, 1.157e-01, -9.425e-01, 5.053e-01, 4.769e-01, -6.875e-02) * s[2][0][0];
	r0 += M4(1.330e-02, 1.314e-01, -9.449e-02, 2.981e-02, -4.530e-02, 5.985e-02, 4.622e-02, 2.020e-03, 1.502e-01, -6.209e-02, -4.686e-02, 2.705e-01, -7.592e-02, 2.017e-01, -3.578e-02, -9.203e-03) * s[2][0][1];
	r1 += M4(-2.529e-01, -6.568e-02, -5.561e-03, -6.556e-02, -4.678e-02, -2.170e-04, 4.395e-02, -1.110e-01, -5.129e-02, -2.262e-01, -1.122e-02, 3.132e-01, -5.105e-02, -1.375e-01, 5.259e-02, 1.031e-02) * s[2][0][1];
	r0 += M4(7.355e-02, -2.507e-02, 3.969e-02, -2.421e-02, 2.000e-01, 9.470e-02, 1.258e-02, -1.611e-01, -1.754e-01, 1.409e-01, -7.484e-02, -1.966e-01, 7.370e-01, 2.335e+00, 1.226e+00, 2.237e-01) * s[2][1][0];
	r1 += M4(2.370e-01, 1.110e-01, -1.120e-01, -3.638e-02, 9.185e-02, -5.072e-03, -2.769e-01, -5.162e-02, 1.180e-01, 4.822e-01, 5.178e-02, -1.691e-02, 1.113e-01, -8.744e-01, -1.058e+00, -1.629e+00) * s[2][1][0];
	r0 += M4(-3.214e-02, 3.930e-02, 6.910e-02, -1.131e-01, 1.834e-01, 3.600e-02, -2.279e-02, -2.062e-01, 2.642e-01, -4.191e-03, -1.228e-01, 1.045e-01, -1.039e-02, 2.043e-01, -5.843e-02, 1.588e-01) * s[2][1][1];
	r1 += M4(-1.323e-01, 3.311e-01, 9.104e-02, -1.032e-01, 2.465e-01, -8.504e-02, 1.119e-02, 1.205e-01, 4.599e-01, -1.493e-01, -6.404e-02, 3.735e-01, -1.415e-02, -1.141e-01, -5.018e-02, 3.850e-02) * s[2][1][1];
	r0 += M4(6.035e-04, 8.106e-02, 2.679e-02, 1.373e-02, 6.273e-02, 1.068e-01, 1.828e-02, 6.057e-02, -1.745e-01, 5.387e-02, -2.809e-02, 3.253e-02, -1.072e+00, 3.510e-01, -8.344e-01, -6.818e-01) * s[2][2][0];
	r1 += M4(1.109e-01, 8.492e-02, 4.751e-02, 7.108e-03, -6.022e-02, -7.937e-02, -6.836e-02, 4.867e-04, 1.421e-01, 2.071e-01, -2.574e-01, -1.766e-01, 3.445e-01, 1.709e+00, 1.094e+00, 3.680e-01) * s[2][2][0];
	r0 += M4(-1.883e-02, 1.151e-01, 5.496e-02, -9.264e-02, -2.162e-02, 8.999e-02, -6.835e-04, 6.334e-02, 7.430e-02, 3.352e-02, -1.008e-01, 1.075e-01, 1.593e-01, 5.367e-02, 1.685e-01, 8.917e-02) * s[2][2][1];
	r1 += M4(-2.798e-01, 1.928e-01, 1.782e-01, 1.777e-02, 2.728e-02, 1.657e-01, -4.907e-02, -9.644e-02, 1.590e-01, -1.704e-01, 2.112e-01, 3.384e-01, 7.456e-02, -1.221e-01, -3.082e-02, -1.350e-02) * s[2][2][1];
	r0 += V4(-7.492e-03, 7.395e-03, -9.433e-03, 8.104e-03);
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-3.242e-03, -1.156e-01, -2.716e-02, -8.335e-03);
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-4x8C-conv2
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv1
//!BIND LUMA
//!SAVE conv2
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 g[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv1_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			g[0][ay][ax] = l0(x - 1, y - 1);
			g[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s[3][3][2];
	V4 r0 = V4(0.0);
	V4 r1 = V4(0.0);
	s[0][0][0] = max(g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[0][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[0][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[0][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[0][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[0][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[0][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(-3.587e-01, 3.487e-01, -7.366e-02, -1.818e-01, -1.948e-01, -9.637e-02, 6.928e-02, 1.468e-01, 3.338e-02, 6.338e-02, -4.120e-03, 2.686e-02, -2.588e-01, 1.235e-01, -4.465e-02, 6.519e-02) * s[0][0][0];
	r1 += M4(4.547e-02, -2.645e-01, -1.958e-01, -2.324e-03, 3.340e-02, -2.758e-01, 2.444e-01, 1.397e-01, -7.731e-03, -5.794e-02, -6.317e-02, -5.505e-02, 8.450e-03, -9.566e-02, -7.349e-02, -4.602e-02) * s[0][0][0];
	r0 += M4(-3.037e-01, 1.470e-01, -1.438e-01, -6.005e-02, -6.494e-02, 2.707e-02, -3.937e-02, 2.575e-02, 4.058e-03, -2.371e-02, -8.820e-03, 3.142e-02, 9.566e-02, 2.891e-02, 7.586e-02, 1.701e-01) * s[0][0][1];
	r1 += M4(2.625e-03, 3.085e-02, -2.389e-02, -2.042e-02, 4.608e-02, -5.150e-02, 1.011e-02, -5.801e-02, -1.280e-02, 4.571e-02, 3.996e-03, -3.439e-02, 8.942e-03, -7.447e-02, 6.733e-02, -7.740e-02) * s[0][0][1];
	r0 += M4(-2.391e-01, -4.531e-02, 2.822e-01, -1.654e-02, 3.221e-01, 3.688e-01, 2.708e-01, -1.587e-01, 8.164e-02, 5.536e-02, 1.042e-01, 2.080e-02, -8.015e-02, 1.228e-01, -3.107e-02, -6.757e-02) * s[0][1][0];
	r1 += M4(1.915e-02, 1.316e-01, 5.397e-02, -3.929e-01, 7.296e-02, -4.324e-01, 5.105e-02, -4.070e-01, -3.244e-03, -5.518e-03, -7.453e-02, -7.372e-02, 6.867e-03, -1.214e-01, 1.872e-01, -6.114e-02) * s[0][1][0];
	r0 += M4(-9.732e-02, -5.016e-02, -2.443e-02, -7.815e-02, 3.238e-03, -2.533e-02, -1.186e-01, -4.204e-02, -8.898e-02, 6.167e-02, -4.659e-02, -6.489e-02, 1.712e-01, -3.902e-03, -3.672e-03, -6.628e-03) * s[0][1][1];
	r1 += M4(4.278e-02, 7.487e-02, 6.092e-02, -2.924e-01, -5.560e-02, -5.913e-02, 4.454e-02, -3.497e-02, 3.078e-02, 2.346e-03, -7.651e-02, -3.874e-02, 3.653e-03, -2.546e-01, 1.400e-01, -6.423e-02) * s[0][1][1];
	r0 += M4(1.596e-01, -5.141e-02, 1.210e-01, 2.049e-02, 4.140e-02, -3.045e-01, 2.123e-01, -1.373e+00, 9.826e-02, -1.864e-02, 9.859e-02, -2.271e-02, -6.639e-02, 9.136e-02, 4.913e-02, 1.798e-02) * s[0][2][0];
	r1 += M4(5.310e-02, 1.435e-01, 1.856e-01, -1.206e-01, 1.254e-01, 4.484e-02, 4.050e-01, 6.533e-01, 2.686e-02, -1.133e-02, -1.042e-02, -1.351e-01, -1.194e-03, 2.114e-02, 3.255e-02, 1.089e-01) * s[0][2][0];
	r0 += M4(6.592e-03, 6.684e-02, 1.109e-02, -3.380e-02, 1.976e-02, 9.845e-02, 2.409e-02, 1.031e-02, 9.756e-02, -1.664e-02, -5.896e-02, -1.002e-01, -5.824e-03, 9.625e-02, -1.014e-01, -1.010e-02) * s[0][2][1];
	r1 += M4(4.775e-02, -2.658e-02, 4.808e-03, 3.871e-02, -3.591e-02, 5.308e-02, 1.089e-03, 2.576e-03, 4.352e-02, -6.751e-02, 2.342e-02, -1.646e-01, -3.583e-03, -4.354e-02, -4.759e-03, -2.143e-01) * s[0][2][1];
	r0 += M4(1.580e-01, -1.299e-01, 7.625e-03, -7.309e-03, 1.335e-01, -5.767e-01, -2.724e-01, 5.055e-02, 1.009e-01, 8.956e-02, 4.612e-02, 6.511e-02, -1.419e-01, -1.059e-02, 1.126e-01, -1.134e-01) * s[1][0][0];
	r1 += M4(-5.217e-02, 1.619e-01, 2.955e-01, -9.173e-02, -5.544e-03, -6.438e-02, 8.330e-02, -2.583e-02, 2.715e-02, -1.616e-01, -9.920e-02, -8.393e-02, 6.045e-03, -1.873e-01, -3.484e-01, -4.577e-02) * s[1][0][0];
	r0 += M4(-5.821e-02, 8.708e-02, 1.685e-01, 7.653e-02, 1.879e-03, 7.725e-02, -1.404e-02, -1.985e-02, 1.065e-01, -1.459e-01, 1.364e-01, 8.425e-02, 1.697e-01, 1.170e-01, 2.961e-01, 6.325e-02) * s[1][0][1];
	r1 += M4(-3.838e-02, 1.214e-01, 1.879e-01, 3.918e-02, -6.593e-02, 7.007e-02, 5.338e-02, -5.638e-02, 1.886e-02, -6.347e-02, 5.163e-03, -1.411e-02, -1.279e-02, -9.054e-02, -1.928e-01, -1.508e-01) * s[1][0][1];
	r0 += M4(-1.567e-01, 1.918e-01, -1.805e-01, -2.608e-01, -3.106e-03, -1.198e+00, 3.228e-01, -1.351e+00, 1.196e-01, 1.654e-02, 3.872e-01, 1.469e-01, -2.040e-02, 1.814e-01, 3.053e-01, -9.784e-02) * s[1][1][0];
	r1 += M4(-2.696e-01, 2.434e-01, 1.547e-01, -4.469e-01, -1.393e-01, -1.726e-01, -8.594e-01, 2.509e-01, -4.932e-02, 6.415e-02, -1.419e-01, 1.267e-01, -1.035e-01, 2.207e-01, 4.725e-01, 1.105e-01) * s[1][1][0];
	r0 += M4(-8.311e-02, 3.193e-01, -3.946e-01, -1.530e-02, 1.644e-01, -9.562e-02, 6.677e-02, -1.095e-01, -1.091e-01, 5.836e-02, -1.183e-01, 9.478e-02, 1.395e-01, 2.916e-01, 2.713e-01, -2.969e-02) * s[1][1][1];
	r1 += M4(-8.254e-02, -1.852e-01, -3.082e-01, -3.622e-01, -1.056e-01, -8.242e-02, -1.924e-01, -8.775e-02, -4.657e-02, -1.031e-01, 1.104e-01, 1.700e-01, -1.281e-01, 3.051e-01, 2.666e-01, 1.469e-01) * s[1][1][1];
	r0 += M4(1.255e-01, -3.012e-02, 5.481e-02, -7.984e-02, -3.385e-01, -2.070e+00, 2.434e+00, -3.534e+00, 3.369e-01, 1.038e-01, 6.030e-01, 2.588e-01, 5.950e-02, -1.891e-02, -3.185e-02, 1.474e-01) * s[1][2][0];
	r1 += M4(-6.617e-02, 1.076e-01, -4.986e-02, 2.744e-01, -2.044e+00, 9.783e-01, 1.641e+00, 8.580e-01, -2.296e-03, -7.876e-02, -4.833e-02, 1.371e-01, 7.429e-03, 1.091e-01, -1.663e-03, -3.337e-02) * s[1][2][0];
	r0 += M4(4.363e-02, 4.472e-02, 8.177e-02, 3.967e-02, 7.984e-02, -9.470e-03, 1.368e-01, -8.832e-02, -1.179e-01, -1.385e-01, -1.561e-01, -1.995e-01, 1.369e-01, 6.005e-02, 8.863e-02, 2.330e-01) * s[1][2][1];
	r1 += M4(-3.866e-02, 3.778e-02, 1.146e-01, 1.404e-01, 9.148e-02, -7.784e-03, -1.835e-02, 9.524e-02, 3.190e-02, -1.628e-01, -1.127e-01, -3.428e-01, -6.020e-02, -1.918e-01, 2.296e-01, -3.856e-01) * s[1][2][1];
	r0 += M4(3.468e-02, -8.230e-02, -3.707e-02, -1.090e-02, -7.784e-02, -4.789e-01, -5.953e-02, -9.694e-02, -4.568e-03, -1.152e-02, 1.178e-02, 8.533e-02, 4.178e-02, -6.940e-02, -5.000e-02, 6.351e-02) * s[2][0][0];
	r1 += M4(-7.461e-02, -6.891e-02, -2.478e-02, 1.211e-02, 3.135e-02, -1.685e-01, -1.095e-03, 8.830e-02, -2.576e-04, 7.893e-02, -6.236e-02, -1.062e-01, 2.372e-02, 2.317e-01, -7.337e-02, 4.334e-02) * s[2][0][0];
	r0 += M4(5.926e-02, -1.714e-01, -2.878e-02, 2.789e-02, -1.130e-01, 9.800e-02, 1.257e-02, -4.377e-02, -3.230e-02, 1.104e-03, 4.080e-04, 2.475e-02, -1.050e-01, -7.448e-02, 1.801e-02, 4.872e-02) * s[2][0][1];
	r1 += M4(-8.830e-02, -8.179e-02, 4.081e-02, -4.505e-02, -2.540e-02, -2.052e-02, 1.290e-02, 4.631e-02, 2.218e-02, 1.253e-01, -6.013e-02, -1.964e-02, 7.596e-03, 1.794e-01, 3.006e-02, -6.829e-02) * s[2][0][1];
	r0 += M4(-1.567e-01, 1.849e-01, 6.468e-02, -3.278e-02, 4.327e-01, -3.169e-01, -7.944e-02, 4.993e-01, 6.178e-02, -1.249e-01, -2.521e-02, 8.304e-02, 5.788e-03, 1.995e-01, -7.753e-03, 1.031e-01) * s[2][1][0];
	r1 += M4(9.185e-02, 9.426e-02, -4.865e-02, -9.510e-02, -5.688e-01, 5.820e-02, 7.370e-02, 1.373e-01, 1.603e-02, 7.573e-02, -4.159e-02, 4.000e-02, -2.306e-01, -2.210e-01, -1.399e-01, 4.248e-03) * s[2][1][0];
	r0 += M4(2.674e-02, 1.645e-01, 8.664e-02, -1.624e-01, -7.071e-02, 4.046e-04, -5.713e-02, 1.110e-02, -1.067e-01, 3.180e-01, -3.546e-01, -1.801e-02, -2.163e-02, -6.503e-02, -9.046e-03, 5.432e-02) * s[2][1][1];
	r1 += M4(6.103e-02, -9.741e-02, -1.217e-01, -7.552e-02, -2.938e-01, 1.308e-01, -6.322e-03, 8.423e-02, -6.834e-02, 1.710e-01, -1.530e-01, 1.289e-01, -2.239e-01, 1.844e-02, 1.597e-02, -5.150e-02) * s[2][1][1];
	r0 += M4(7.214e-02, -5.480e-02, -8.135e-02, 5.144e-03, -4.290e-01, 6.982e-02, 1.129e+00, 5.481e-01, 4.520e-02, -1.866e-01, -4.445e-02, 7.255e-02, 5.316e-02, 4.506e-02, -3.777e-02, 8.928e-02) * s[2][2][0];
	r1 += M4(1.192e-01, -1.539e-02, -2.781e-02, -1.271e-02, 8.785e-01, -2.541e-01, 1.940e-01, -1.594e-01, -6.652e-03, -1.732e-01, -3.915e-02, -2.303e-01, 1.372e-01, -4.843e-02, 6.580e-02, -6.743e-02) * s[2][2][0];
	r0 += M4(5.033e-02, -3.487e-02, -6.603e-02, -1.722e-02, -1.886e-02, -3.974e-02, -2.560e-02, 1.221e-01, -2.138e-01, 1.738e-01, 6.253e-02, -7.845e-03, 8.306e-02, 1.251e-01, 4.625e-02, 3.549e-04) * s[2][2][1];
	r1 += M4(1.130e-01, -1.248e-01, -7.840e-03, -5.431e-02, -1.475e-01, 8.862e-02, 1.392e-01, 1.064e-01, 9.416e-02, -3.905e-01, 2.860e-02, -1.884e-01, 8.995e-02, -1.175e-01, 1.159e-01, -9.067e-02) * s[2][2][1];
	s[0][0][0] = max(g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[1][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[1][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[1][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[1][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[1][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[1][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(-3.678e-02, 1.457e-01, 7.149e-02, 1.643e-01, 5.447e-02, -1.795e-02, -1.760e-01, -1.430e-01, -2.509e-01, 1.421e-01, -8.258e-02, -7.208e-02, -8.158e-02, -9.549e-02, -3.374e-02, -7.145e-02) * s[0][0][0];
	r1 += M4(4.248e-03, -5.123e-02, -2.783e-01, 5.379e-02, -4.548e-03, 1.825e-02, 9.725e-02, 7.292e-02, -1.146e-03, -3.274e-02, -3.576e-02, -3.222e-02, 9.432e-03, 2.539e-02, 7.653e-02, 3.627e-02) * s[0][0][0];
	r0 += M4(-1.772e-01, -4.980e-02, 1.372e-01, 1.431e-01, -1.802e-02, 3.350e-02, -7.508e-02, -1.508e-01, -1.280e-01, 1.203e-01, 1.883e-01, 3.649e-02, -6.773e-02, -7.083e-02, -4.236e-02, -7.661e-02) * s[0][0][1];
	r1 += M4(7.331e-03, 2.900e-01, -7.758e-02, 1.395e-01, -4.991e-03, -7.588e-02, 4.772e-03, 1.243e-01, 7.087e-03, -9.037e-02, -1.014e-01, 5.900e-02, 1.500e-02, -3.164e-02, 2.646e-02, 7.143e-02) * s[0][0][1];
	r0 += M4(-3.928e-01, -1.400e-01, -4.999e-02, -6.400e-02, -2.778e-01, 2.213e-01, 1.431e-01, -5.177e-02, -9.859e-02, -2.012e-04, -5.711e-02, -2.045e-02, -1.218e-01, -9.851e-02, -1.829e-01, -1.591e-01) * s[0][1][0];
	r1 += M4(-1.420e-02, -3.944e-02, 3.543e-01, -2.999e-01, 2.460e-02, -3.479e-01, 1.921e-01, -6.258e-02, 2.240e-03, -4.458e-02, 2.424e-02, -1.696e-01, -1.502e-02, 1.084e-01, 6.536e-02, -6.668e-02) * s[0][1][0];
	r0 += M4(-4.294e-02, -5.384e-03, 8.004e-02, 6.563e-02, 2.358e-01, 1.577e-01, 2.629e-01, 1.578e-01, -1.417e-01, 5.575e-02, 1.655e-01, 8.595e-03, -8.766e-02, 6.686e-02, 1.753e-02, -4.576e-02) * s[0][1][1];
	r1 += M4(2.379e-03, 3.071e-01, 2.339e-01, 9.837e-02, -2.803e-02, -4.982e-02, 4.315e-02, 3.126e-01, 1.518e-02, -3.400e-02, 3.676e-02, 2.941e-03, 8.058e-05, 4.458e-03, -1.676e-02, 8.348e-02) * s[0][1][1];
	r0 += M4(-9.422e-02, -2.529e-02, -4.609e-02, -6.583e-02, 1.108e-01, -8.605e-02, 5.766e-02, 7.810e-02, -6.949e-02, 6.061e-03, 5.282e-02, -1.281e-02, -8.290e-02, 2.492e-02, -4.923e-02, 7.087e-02) * s[0][2][0];
	r1 += M4(-2.934e-02, 1.447e-01, -2.485e-03, 1.819e-01, 3.675e-02, 1.304e-01, -8.571e-02, 5.509e-02, 1.756e-02, 5.675e-02, 8.602e-03, -1.257e-02, -4.348e-04, 2.461e-02, -1.294e-01, -1.354e-01) * s[0][2][0];
	r0 += M4(3.935e-02, 2.691e-02, 4.120e-02, 1.929e-02, -1.124e-02, -9.251e-02, -7.369e-02, -5.569e-02, -1.664e-01, -7.348e-02, 3.023e-02, 1.319e-02, -5.995e-02, -7.201e-02, -2.207e-02, 1.013e-02) * s[0][2][1];
	r1 += M4(-1.710e-02, 8.744e-02, -4.653e-02, 7.555e-02, 4.467e-02, 8.044e-02, 5.308e-02, -1.200e-01, 1.325e-02, 2.491e-02, -1.447e-02, 1.184e-01, 1.441e-02, 1.763e-02, -3.797e-02, -6.139e-02) * s[0][2][1];
	r0 += M4(-2.693e-01, -2.662e-02, 1.900e-02, 7.305e-02, 6.499e-02, 2.999e-01, -9.893e-02, -1.116e-01, 1.223e-01, 8.082e-02, 1.888e-01, 1.285e-01, -4.493e-02, 1.088e-01, -1.463e-01, -7.735e-02) * s[1][0][0];
	r1 += M4(9.724e-03, 1.042e-01, 1.434e-02, -3.579e-02, -2.725e-03, 2.075e-02, -2.943e-02, 3.655e-02, 6.706e-02, 3.572e-02, -7.519e-02, 1.770e-02, -3.329e-02, 1.219e-01, 1.432e-01, 7.048e-02) * s[1][0][0];
	r0 += M4(3.555e-01, -2.225e-01, 9.036e-02, 1.350e-01, -9.404e-02, 1.296e-01, -1.306e-01, -1.146e-01, 2.433e-01, 3.122e-02, 3.080e-01, 1.964e-01, 6.210e-04, 7.168e-02, -1.489e-01, -1.577e-01) * s[1][0][1];
	r1 += M4(4.939e-02, 1.408e-01, 1.264e-01, -1.141e-01, -1.817e-02, 3.405e-02, 1.760e-02, 3.375e-02, 2.147e-02, 1.285e-01, -1.209e-01, 1.400e-01, -3.284e-02, 9.935e-02, -3.625e-02, 7.182e-02) * s[1][0][1];
	r0 += M4(-3.525e-01, -2.208e-01, -8.274e-02, 7.916e-02, 5.290e-02, 5.321e-03, 1.634e-01, -5.907e-02, 5.241e-02, 8.275e-02, -8.162e-02, 8.881e-02, -3.612e-01, -5.403e-02, -2.876e-01, -4.254e-01) * s[1][1][0];
	r1 += M4(4.413e-02, 1.494e-02, -2.156e-02, -2.949e-01, 2.183e-01, 2.428e-01, 3.550e-01, 8.946e-02, 8.850e-02, -1.202e-01, 2.078e-01, -3.931e-03, -1.256e-01, -4.987e-02, 4.330e-01, 1.539e-01) * s[1][1][0];
	r0 += M4(5.722e-01, -2.312e-01, -1.682e-01, 1.675e-01, -5.951e-02, -4.122e-02, -3.920e-03, -6.819e-02, -6.077e-03, 5.319e-01, -2.890e-02, 4.376e-01, 3.480e-02, 2.700e-01, 2.383e-01, -1.443e-01) * s[1][1][1];
	r1 += M4(7.234e-02, 4.166e-01, 1.838e-02, 1.084e-01, -6.230e-01, 2.147e-01, 1.498e-01, -1.362e-01, 1.091e-01, -1.726e-01, -3.623e-01, -1.004e-01, -5.741e-02, 1.379e-01, 4.187e-01, 1.496e-01) * s[1][1][1];
	r0 += M4(5.886e-02, -1.484e-02, -4.518e-02, -4.312e-02, 1.538e-01, 4.902e-02, -5.964e-02, 1.372e-01, 9.094e-02, 7.788e-02, 5.475e-02, 4.103e-03, -2.243e-01, 4.818e-02, -7.981e-02, 3.010e-01) * s[1][2][0];
	r1 += M4(2.966e-02, 5.630e-02, -5.550e-02, 1.438e-01, 1.020e-01, 1.171e-01, -3.204e-03, 4.624e-02, 1.047e-02, 5.932e-02, -7.146e-02, 2.740e-02, -3.400e-03, -9.004e-02, -6.155e-02, 7.455e-02) * s[1][2][0];
	r0 += M4(-1.702e-01, -7.213e-02, -1.318e-01, -1.786e-01, 4.580e-02, 6.676e-02, -1.446e-02, -1.122e-02, 1.200e-02, 1.279e-01, 8.316e-02, 3.172e-02, -8.698e-03, 2.791e-02, 9.102e-02, 4.282e-02) * s[1][2][1];
	r1 += M4(4.113e-02, 3.487e-01, -4.407e-02, 1.077e-02, -1.735e-03, 1.165e-01, 1.225e-01, 7.349e-02, -8.181e-03, -2.090e-03, -7.366e-02, 9.017e-02, 7.416e-03, 1.902e-02, 7.246e-02, 9.633e-03) * s[1][2][1];
	r0 += M4(2.757e-01, 3.525e-03, 4.468e-02, 1.887e-02, 3.608e-02, -3.144e-02, -7.700e-02, 4.626e-02, 1.116e-01, -1.525e-02, 1.195e-01, 2.212e-02, -1.470e-01, 1.747e-01, 1.988e-02, -1.441e-02) * s[2][0][0];
	r1 += M4(-5.676e-02, 3.174e-02, 1.314e-01, -7.348e-02, 4.123e-03, 4.960e-02, 7.527e-03, -5.253e-03, -2.171e-02, 1.307e-02, 7.766e-02, -3.290e-02, -2.856e-02, -1.489e-01, 4.849e-02, -4.033e-03) * s[2][0][0];
	r0 += M4(-1.856e-01, -9.711e-02, -3.121e-03, -9.083e-03, 5.138e-02, -5.365e-02, -5.388e-02, -1.267e-02, 8.656e-02, -7.843e-02, 7.456e-02, 4.603e-02, 9.814e-02, 1.815e-01, 5.849e-02, -1.031e-01) * s[2][0][1];
	r1 += M4(-1.101e-02, 2.146e-01, -1.479e-01, 4.262e-02, 7.998e-03, 1.042e-02, 1.224e-02, 1.691e-02, -6.536e-02, 6.350e-02, -1.206e-02, -1.277e-03, 6.636e-03, -1.366e-01, 1.913e-02, 4.385e-02) * s[2][0][1];
	r0 += M4(-1.105e-03, 9.216e-02, 8.095e-02, -4.425e-02, -2.575e-01, -2.347e-02, 8.835e-03, -7.082e-02, 1.228e-01, 2.037e-01, -6.801e-02, -1.677e-02, -1.154e-02, -1.342e-01, 3.187e-01, 1.776e-01) * s[2][1][0];
	r1 += M4(3.028e-02, 2.419e-02, 3.779e-02, 1.184e-01, 2.928e-02, 2.638e-02, -1.830e-01, -3.254e-02, 4.007e-02, -3.366e-02, 9.824e-02, 4.678e-02, 1.701e-02, -2.219e-01, 1.458e-01, -1.883e-01) * s[2][1][0];
	r0 += M4(3.447e-02, -6.408e-02, -2.151e-01, -3.403e-02, -1.772e-01, 8.482e-02, -9.138e-04, -3.892e-02, 1.045e-01, 6.077e-02, 9.798e-02, 9.732e-02, -2.140e-02, -5.147e-02, 1.562e-01, 1.928e-01) * s[2][1][1];
	r1 += M4(2.582e-03, 9.985e-02, 1.153e-01, -8.591e-03, -8.361e-03, 2.681e-02, -1.040e-01, -4.672e-02, -5.635e-02, -2.724e-02, 9.537e-02, 1.265e-02, -5.045e-02, 1.106e-01, 1.158e-01, 7.864e-02) * s[2][1][1];
	r0 += M4(-1.235e-01, -2.334e-02, 1.157e-01, 1.433e-01, -8.125e-02, -8.156e-02, -7.799e-02, -3.144e-02, -1.205e-02, -1.353e-02, 6.105e-02, 3.074e-02, 5.507e-02, -4.594e-02, 1.567e-01, 2.008e-01) * s[2][2][0];
	r1 += M4(-8.342e-02, 3.103e-02, -1.725e-02, -1.352e-01, 1.006e-01, -1.015e-01, -2.164e-02, -1.218e-01, -3.193e-02, 2.955e-02, 5.860e-02, -3.806e-02, -4.342e-02, -9.491e-02, 1.962e-01, -2.862e-01) * s[2][2][0];
	r0 += M4(-3.030e-02, -7.151e-02, 3.127e-02, -1.671e-02, 4.715e-02, 5.506e-03, -3.421e-02, -9.797e-03, -6.747e-02, -4.023e-02, 8.315e-02, 7.843e-02, 3.787e-02, -4.474e-02, -3.598e-02, 6.323e-02) * s[2][2][1];
	r1 += M4(-5.965e-02, 2.698e-01, 4.580e-02, 1.214e-02, 9.715e-02, -7.454e-02, -4.565e-02, -5.856e-02, -4.804e-02, 2.662e-02, -2.091e-02, -3.708e-02, -1.419e-02, 2.565e-04, 1.209e-02, 2.930e-02) * s[2][2][1];
	r0 += V4(-8.699e-03, 5.217e-02, -6.381e-03, -1.299e-02);
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-3.092e-01, 3.456e-02, 2.655e-02, 2.378e-02);
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-4x8C-conv3
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv2
//!BIND LUMA
//!SAVE conv3
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(texelFetch(conv2_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv2_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 g[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv2_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			g[0][ay][ax] = l0(x - 1, y - 1);
			g[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s[3][3][2];
	V4 r0 = V4(0.0);
	V4 r1 = V4(0.0);
	s[0][0][0] = max(g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[0][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[0][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[0][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[0][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[0][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[0][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(-2.349e-02, 2.988e-02, -6.548e-02, 7.639e-03, 8.803e-02, -6.566e-02, -1.032e-01, -4.369e-03, 1.977e-02, 3.798e-02, 1.882e-02, 6.639e-02, 3.066e-02, -4.582e-02, 1.219e-03, 5.173e-03) * s[0][0][0];
	r1 += M4(-8.063e-03, 1.627e-01, 2.701e-01, -1.010e-01, 7.505e-02, -1.514e-01, 2.006e-01, -5.402e-02, 1.812e-02, -1.111e-02, -2.515e-02, -5.704e-03, 3.428e-03, -6.389e-02, -7.635e-02, 2.148e-02) * s[0][0][0];
	r0 += M4(-3.973e-03, 1.037e-02, -2.513e-02, -1.946e-02, 4.040e-02, -3.275e-02, -1.895e-02, -1.763e-02, -1.012e-02, 4.705e-02, -2.391e-02, 2.092e-02, -5.663e-02, 5.657e-02, 2.712e-02, 3.226e-02) * s[0][0][1];
	r1 += M4(-3.510e-02, 4.125e-02, -1.254e-02, 1.638e-02, 7.971e-03, -9.501e-02, 6.563e-02, -2.573e-02, 6.209e-02, -7.833e-02, -6.412e-02, -7.390e-02, 6.657e-02, 7.373e-03, -2.745e-01, 5.351e-02) * s[0][0][1];
	r0 += M4(9.893e-02, -8.417e-02, -1.538e-01, 6.884e-02, 2.907e-02, 6.442e-02, -1.038e-01, -9.501e-02, -6.087e-02, 6.725e-02, 9.689e-02, -7.224e-03, -1.178e-01, 4.626e-02, -1.199e-01, -1.430e-02) * s[0][1][0];
	r1 += M4(6.879e-02, -2.119e-02, -5.394e-02, -5.381e-02, -7.117e-02, 1.532e-01, -3.790e-02, 2.432e-01, 1.577e-01, 1.904e-02, -4.286e-02, -7.789e-03, -1.771e-01, -6.346e-02, 3.779e-02, -6.666e-02) * s[0][1][0];
	r0 += M4(5.050e-02, -1.568e-02, -3.084e-02, 8.086e-02, 6.829e-02, -8.781e-02, -7.431e-02, -5.178e-02, -1.764e-01, 1.840e-01, -2.882e-02, 8.201e-02, -1.548e-01, -1.520e-01, -1.691e-01, 4.757e-03) * s[0][1][1];
	r1 += M4(1.811e-02, 3.411e-03, 2.655e-03, 1.228e-02, -4.708e-02, 7.868e-02, 1.442e-01, 2.987e-01, -3.413e-02, -2.571e-01, 6.703e-02, -1.087e-01, 1.399e-02, -1.643e-01, -1.718e-01, -6.555e-02) * s[0][1][1];
	r0 += M4(-1.848e-01, 1.126e-01, -1.040e-01, 6.277e-02, -3.176e-02, -3.072e-02, -2.901e-02, -4.250e-02, 1.000e-01, -9.170e-03, -5.746e-02, -4.414e-02, -6.712e-02, 7.537e-02, 8.193e-03, -6.928e-03) * s[0][2][0];
	r1 += M4(-3.639e-02, -9.915e-02, -3.143e-02, -1.467e-01, 8.854e-03, -4.762e-02, -3.437e-04, -1.294e-01, -4.130e-03, -4.645e-02, 1.036e-01, -6.144e-03, -2.980e-02, 7.251e-02, -6.264e-02, 4.798e-02) * s[0][2][0];
	r0 += M4(-7.847e-03, 2.142e-02, 8.148e-02, -5.978e-02, 7.860e-03, -8.615e-02, -1.622e-02, 1.004e-01, 1.567e-01, 5.826e-04, -1.097e-01, -8.093e-03, -1.086e-01, 8.838e-02, -4.792e-02, -1.425e-02) * s[0][2][1];
	r1 += M4(-2.105e-02, 1.390e-02, 5.915e-02, 5.371e-02, 4.168e-02, 1.000e-01, 1.094e-01, -7.897e-02, -6.994e-02, -2.948e-02, 2.327e-01, -8.988e-02, 1.252e-02, 4.517e-02, -1.137e-01, 1.241e-01) * s[0][2][1];
	r0 += M4(2.468e-02, -2.189e-01, -5.707e-02, 4.651e-02, 7.160e-02, -6.510e-02, 1.056e-01, 1.816e-02, -3.620e-02, 8.266e-03, -9.632e-02, -3.175e-02, 7.875e-02, 1.007e-01, 6.128e-02, -9.567e-03) * s[1][0][0];
	r1 += M4(-1.831e-01, 7.405e-02, 8.093e-02, 7.616e-03, 4.670e-02, 2.667e-02, 7.886e-02, 1.031e-02, 7.352e-02, -8.008e-02, -1.713e-02, -7.004e-02, 2.130e-02, -6.619e-02, 1.962e-01, -3.966e-02) * s[1][0][0];
	r0 += M4(-2.326e-02, -4.362e-03, 2.662e-02, 5.860e-02, 1.823e-02, -2.029e-02, 1.247e-01, 4.720e-02, 7.502e-02, -1.258e-01, -1.294e-01, -7.820e-02, -7.106e-02, 1.539e-01, -1.780e-02, 1.091e-01) * s[1][0][1];
	r1 += M4(-2.334e-02, 4.832e-02, -1.836e-02, 4.576e-02, 3.037e-02, -3.157e-02, -8.812e-02, 8.937e-02, 9.506e-03, -4.329e-02, 1.078e-01, 2.437e-02, -2.277e-02, 8.906e-03, -1.586e-02, -1.099e-01) * s[1][0][1];
	r0 += M4(-3.589e-02, 2.820e-01, 1.394e-02, 7.301e-02, 2.421e-02, 2.041e-01, -3.122e-01, -2.444e-01, 1.927e-01, -2.126e-01, -2.092e-01, -2.306e-02, 2.310e-01, -3.139e-03, 4.169e-01, 5.446e-02) * s[1][1][0];
	r1 += M4(-4.183e-01, -1.337e-01, 6.448e-02, -2.539e-02, 2.319e-01, 2.013e-01, -1.127e-01, 7.272e-02, -2.171e-01, -5.896e-02, -1.144e-01, -2.998e-01, 4.279e-01, -1.145e-01, 2.280e-01, 3.488e-01) * s[1][1][0];
	r0 += M4(-6.540e-03, 2.450e-02, -4.792e-03, 3.004e-02, 2.970e-02, 8.209e-02, -3.126e-02, -1.636e-01, -1.214e-01, -3.807e-01, -2.868e-02, -4.072e-01, 5.154e-01, -3.291e-01, 3.671e-01, 5.635e-01) * s[1][1][1];
	r1 += M4(-1.033e-01, 7.328e-02, 9.688e-02, -6.091e-02, -5.437e-02, 2.624e-01, 1.114e-01, -3.200e-03, -5.112e-01, 2.219e-01, -1.594e-01, 2.063e-02, 2.921e-01, 8.277e-03, 5.577e-01, 4.090e-01) * s[1][1][1];
	r0 += M4(1.221e-01, 6.494e-02, -1.277e-01, 1.056e-01, -2.400e-01, 1.271e-01, -1.894e-01, 1.641e-01, -4.523e-02, 9.248e-02, -3.925e-02, -2.080e-02, 2.107e-01, -8.528e-02, -9.284e-02, 4.918e-02) * s[1][2][0];
	r1 += M4(-5.192e-02, -1.959e-01, 7.400e-02, -1.734e-01, 1.137e-01, -3.139e-02, -1.306e-01, -2.499e-01, -4.862e-02, 1.460e-01, 7.181e-03, -2.694e-02, 4.016e-02, 3.087e-03, 1.689e-01, -9.878e-02) * s[1][2][0];
	r0 += M4(4.661e-02, 1.331e-02, 3.098e-02, -8.211e-02, 1.299e-01, -1.224e-01, 2.693e-02, 1.604e-01, 2.508e-01, -8.226e-02, -1.231e-02, -2.337e-01, 3.838e-01, -1.116e-01, 3.670e-03, 1.788e-01) * s[1][2][1];
	r1 += M4(-3.725e-02, -1.400e-02, 1.746e-01, -7.500e-02, 6.458e-02, -9.093e-02, 3.389e-02, -7.945e-02, -2.044e-01, 1.648e-01, 1.892e-01, 1.081e-01, 7.591e-02, 5.646e-02, 1.345e-01, 9.333e-02) * s[1][2][1];
	r0 += M4(2.514e-02, 9.638e-02, 1.354e-01, 2.664e-02, 1.868e-02, -4.708e-02, -1.191e-01, 5.651e-03, -2.523e-02, -4.880e-02, 2.708e-04, 4.886e-02, 1.008e-03, 4.430e-02, 2.008e-02, -5.603e-02) * s[2][0][0];
	r1 += M4(1.209e-01, 3.882e-02, 5.716e-02, -2.303e-02, -3.285e-02, -5.703e-03, -9.231e-03, 5.216e-02, -4.179e-02, 5.351e-02, -2.536e-02, -6.628e-02, 8.574e-02, -1.115e-01, -1.983e-02, -4.083e-02) * s[2][0][0];
	r0 += M4(-1.149e-02, 3.283e-02, 6.390e-03, 7.454e-03, 3.526e-02, -2.572e-02, -9.248e-02, 5.627e-03, 6.382e-02, 2.468e-02, 2.017e-02, -5.690e-02, -1.026e-01, 1.089e-01, 6.626e-02, -2.960e-02) * s[2][0][1];
	r1 += M4(1.553e-02, 2.253e-05, 3.417e-02, -1.884e-02, 6.150e-02, -8.637e-02, 1.247e-02, 6.040e-02, -1.647e-02, -8.741e-02, 1.245e-03, 1.761e-02, 1.295e-01, -1.079e-01, -5.278e-02, -6.942e-02) * s[2][0][1];
	r0 += M4(6.420e-02, -6.386e-02, 2.180e-01, -8.446e-02, 4.859e-02, -7.311e-02, -7.587e-02, -2.898e-03, -6.780e-02, -4.218e-02, 1.837e-01, -1.110e-01, -9.654e-02, -7.338e-02, -2.210e-02, 5.869e-02) * s[2][1][0];
	r1 += M4(7.284e-02, 3.582e-02, 7.082e-02, -2.317e-02, -2.121e-01, 7.446e-02, 2.679e-02, 1.412e-01, -1.303e-01, 1.446e-02, -5.976e-02, -8.235e-02, -2.013e-01, 9.017e-02, -4.553e-03, -1.150e-01) * s[2][1][0];
	r0 += M4(-7.920e-02, 1.594e-02, 5.161e-02, -1.965e-02, -1.280e-02, 1.275e-02, -2.762e-02, 6.558e-02, -5.711e-02, -4.831e-02, 8.025e-02, -1.650e-02, 1.163e-01, -1.556e-01, 1.875e-01, 1.101e-01) * s[2][1][1];
	r1 += M4(-7.893e-02, -1.109e-03, -9.277e-02, -1.540e-02, 4.067e-02, -4.358e-02, -2.338e-02, 7.029e-02, -3.072e-02, 2.873e-02, -4.297e-02, -8.535e-02, -1.221e-01, 6.756e-02, 5.970e-02, -1.939e-02) * s[2][1][1];
	r0 += M4(1.562e-03, -1.403e-01, 1.392e-01, -9.740e-02, -2.760e-02, 1.654e-01, -2.713e-01, 6.948e-02, -4.991e-02, -6.016e-02, -1.287e-02, 7.518e-02, 7.544e-02, 9.587e-02, 4.661e-02, -9.747e-03) * s[2][2][0];
	r1 += M4(3.215e-02, -2.694e-01, 1.772e-01, -6.548e-02, 1.557e-01, -5.951e-02, -6.017e-02, -2.868e-02, -1.751e-02, 1.103e-01, -7.241e-02, -5.415e-02, 8.624e-02, 1.615e-01, -1.816e-01, 1.105e-01) * s[2][2][0];
	r0 += M4(8.564e-02, -7.591e-03, 1.325e-02, -2.591e-02, -1.049e-02, 1.161e-01, -7.003e-02, 1.184e-01, 6.301e-02, -2.955e-02, 6.846e-02, -5.800e-02, 9.409e-02, 4.159e-02, 4.298e-02, 2.824e-02) * s[2][2][1];
	r1 += M4(-5.975e-03, 5.657e-02, -1.258e-02, 1.080e-02, 1.121e-01, -3.062e-02, -6.480e-02, -7.606e-02, -1.265e-01, 7.766e-02, 6.800e-02, -9.711e-03, 7.266e-02, 1.121e-01, -9.959e-02, 1.293e-01) * s[2][2][1];
	s[0][0][0] = max(g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[1][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[1][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[1][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[1][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[1][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[1][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(3.095e-01, 1.684e-01, 8.288e-01, 5.268e-01, -5.518e-02, 1.155e-01, -3.013e-02, -5.720e-02, 3.291e-02, -1.595e-01, 1.851e-02, 2.123e-02, -4.855e-02, 6.087e-02, -1.296e-02, 2.312e-02) * s[0][0][0];
	r1 += M4(-3.038e-01, 9.542e-01, -2.989e-02, -7.087e-01, 3.350e-02, 2.375e-01, 1.998e-01, -8.142e-02, -9.154e-02, -5.281e-02, -8.841e-03, 8.137e-03, -5.054e-02, -1.602e-02, -1.924e-01, -8.170e-03) * s[0][0][0];
	r0 += M4(5.732e-02, -1.475e-02, 1.251e-02, -1.610e-03, 4.630e-02, 3.941e-03, -2.679e-02, 4.522e-03, 4.157e-02, -4.637e-02, 2.847e-02, 4.363e-03, 2.223e-02, -7.469e-02, -2.374e-02, -1.092e-02) * s[0][0][1];
	r1 += M4(-2.365e-03, -4.790e-02, 6.827e-02, 1.114e-02, 6.316e-02, 4.463e-02, 1.368e-01, -2.524e-02, -5.040e-02, 1.838e-01, 1.291e-01, 1.451e-01, -1.635e-02, -8.889e-02, -9.828e-02, 8.016e-04) * s[0][0][1];
	r0 += M4(2.473e+00, 1.730e+00, 1.722e+00, 2.521e+00, 4.910e-02, 1.391e-01, 4.807e-02, 1.343e-01, 8.618e-02, 1.185e-01, 6.179e-02, 8.177e-02, -1.052e-01, -3.034e-02, 3.518e-02, -4.607e-02) * s[0][1][0];
	r1 += M4(2.775e+00, -4.174e-01, 7.366e-01, 9.595e-01, 1.341e-01, -1.462e-01, 2.864e-01, -4.594e-02, -6.860e-02, -7.099e-03, 7.282e-03, 6.223e-02, -2.794e-02, -1.229e-02, 3.630e-01, -3.846e-02) * s[0][1][0];
	r0 += M4(-6.074e-02, 3.659e-02, -1.028e-01, 6.987e-02, -1.875e-02, 7.733e-02, 6.561e-02, -5.678e-02, -6.740e-03, 1.795e-01, 8.961e-02, 2.871e-02, 6.152e-02, 4.632e-02, -2.373e-02, -6.406e-02) * s[0][1][1];
	r1 += M4(2.194e-02, 9.791e-02, -4.445e-02, -2.583e-03, 6.806e-02, -9.937e-02, 1.899e-01, 5.641e-02, -1.573e-02, 2.264e-01, -1.683e-01, 7.806e-02, -2.699e-02, 3.708e-04, 1.153e-01, -9.676e-02) * s[0][1][1];
	r0 += M4(-3.454e-01, -1.506e+00, 5.507e-01, 1.448e+00, 7.398e-04, 2.705e-01, 1.027e-01, 2.891e-02, -2.917e-02, 1.290e-03, 2.858e-02, 1.137e-01, 1.429e-01, 8.270e-02, 9.486e-02, -5.318e-02) * s[0][2][0];
	r1 += M4(-4.538e-01, 2.121e-01, 1.108e+00, -9.098e-01, -2.390e-01, -3.407e-02, 1.350e-01, -1.089e-02, 3.437e-02, 8.639e-02, -1.429e-01, 1.674e-01, 3.982e-02, 9.632e-02, -1.552e-01, 1.387e-01) * s[0][2][0];
	r0 += M4(-1.587e-02, -6.504e-03, 7.046e-02, -5.324e-02, -7.440e-02, -1.246e-01, -6.533e-02, 4.093e-02, -2.280e-01, 9.151e-02, 9.515e-02, 4.585e-03, 1.138e-01, 8.654e-02, 1.543e-02, 2.183e-02) * s[0][2][1];
	r1 += M4(-4.906e-02, -6.186e-02, -4.292e-02, 2.008e-02, -4.878e-02, -6.724e-03, 5.980e-02, -7.613e-02, -1.577e-02, 2.002e-01, -9.320e-03, -1.391e-01, 1.170e-01, 1.126e-03, -7.298e-02, 4.700e-02) * s[0][2][1];
	r0 += M4(1.396e-01, -6.375e-01, 5.095e-02, 7.883e-01, -2.222e-02, 6.195e-02, 3.429e-05, -2.018e-02, 5.792e-02, -3.792e-02, 2.328e-02, 1.083e-02, -1.027e-01, 2.189e-01, 8.463e-02, 2.670e-02) * s[1][0][0];
	r1 += M4(-8.357e-01, 5.035e-01, -2.599e-01, -4.897e-01, 2.043e-01, 5.025e-02, 1.814e-01, -1.765e-02, -3.249e-02, -1.190e-01, -6.968e-04, 1.403e-01, 1.968e-01, -2.954e-01, -6.943e-03, 2.123e-02) * s[1][0][0];
	r0 += M4(-9.592e-02, 3.301e-02, 2.782e-02, -1.478e-02, 4.902e-02, -4.268e-02, -7.100e-02, 4.247e-02, 1.585e-01, 8.609e-02, -2.627e-03, 2.852e-02, 7.464e-02, 5.821e-02, 2.111e-03, -5.549e-02) * s[1][0][1];
	r1 += M4(2.545e-02, -1.011e-01, -4.601e-02, -1.468e-01, 2.156e-02, 9.449e-02, 4.813e-03, 5.057e-02, 1.885e-01, 2.944e-02, 7.089e-02, 1.055e-01, 1.064e-01, -3.604e-01, 5.885e-02, 1.850e-03) * s[1][0][1];
	r0 += M4(9.876e-01, 2.994e-02, -3.044e-01, 1.515e+00, 2.076e-01, 1.478e-01, 3.873e-02, -3.425e-01, -4.970e-01, 2.172e-01, -1.164e-01, -1.714e-01, -2.868e-01, -8.066e-02, -1.850e-01, 1.203e-01) * s[1][1][0];
	r1 += M4(-6.514e-01, 3.971e-01, 6.759e-01, -1.856e-01, 1.827e-02, 1.168e-01, 2.158e-01, -8.626e-02, -3.193e-01, 1.802e-01, -3.451e-01, -4.960e-02, -9.075e-02, 4.703e-02, 2.417e-01, -6.976e-02) * s[1][1][0];
	r0 += M4(4.777e-02, -1.663e-01, 6.163e-02, -9.734e-02, -1.658e-01, -1.392e-01, -3.169e-01, -1.832e-01, -9.926e-02, 3.887e-01, -2.508e-01, -3.520e-02, -3.293e-01, -1.708e-01, -1.329e-01, 2.963e-02) * s[1][1][1];
	r1 += M4(-2.098e-02, 8.534e-03, 3.850e-02, 4.511e-02, -3.622e-01, 5.276e-02, -1.198e-01, -7.950e-02, 4.239e-01, 1.118e-01, -2.248e-01, -2.336e-01, -2.646e-02, 2.300e-01, 2.583e-02, -1.124e-01) * s[1][1][1];
	r0 += M4(2.856e-01, -1.565e-01, -4.022e-02, 1.385e+00, 2.676e-02, 9.544e-04, 6.201e-02, 3.338e-03, 1.957e-01, -1.880e-02, 1.062e-01, -4.553e-02, 2.875e-01, -4.914e-02, 1.490e-01, -1.905e-01) * s[1][2][0];
	r1 += M4(-1.209e-01, 6.945e-01, 2.543e-01, -3.218e-01, 1.764e-01, -2.141e-01, 3.104e-01, -1.831e-01, -2.622e-02, 9.216e-03, -3.485e-02, 2.476e-01, 1.474e-01, 3.546e-02, -2.121e-01, 3.501e-01) * s[1][2][0];
	r0 += M4(2.238e-02, 4.681e-02, -1.548e-01, 6.012e-02, 1.211e-01, 1.302e-01, -5.153e-02, 1.358e-01, 1.882e-01, 9.942e-02, 8.326e-02, 2.703e-01, 1.788e-01, -8.302e-02, 8.259e-02, -6.268e-02) * s[1][2][1];
	r1 += M4(5.562e-02, 3.983e-02, 1.827e-02, 6.064e-03, 1.146e-01, 6.324e-02, -8.344e-02, -1.467e-02, 2.007e-01, 8.620e-03, -7.388e-02, -2.096e-01, 1.451e-02, 2.533e-02, -1.398e-01, 1.948e-01) * s[1][2][1];
	r0 += M4(-1.675e-01, 1.599e-01, 2.772e-01, 3.610e-01, -2.022e-02, -2.059e-02, 4.865e-02, 1.542e-02, 2.743e-02, 3.693e-02, -2.546e-02, -2.244e-03, -2.673e-02, 6.054e-02, -4.506e-02, -2.358e-02) * s[2][0][0];
	r1 += M4(-8.591e-02, 5.173e-01, 3.929e-02, -5.656e-01, 6.702e-02, 7.798e-02, 1.603e-02, 2.875e-02, 5.033e-04, -6.501e-02, 2.468e-02, 3.262e-02, 1.135e-01, -1.787e-01, 1.618e-01, -5.883e-02) * s[2][0][0];
	r0 += M4(-5.578e-02, 4.654e-03, -7.986e-03, 8.056e-03, -2.570e-02, 2.185e-02, -3.486e-03, 2.167e-02, 8.278e-02, -1.735e-02, 1.333e-02, 1.369e-02, -1.684e-02, 4.504e-02, 8.181e-02, -1.407e-02) * s[2][0][1];
	r1 += M4(-3.034e-02, -5.147e-03, -4.327e-02, 1.540e-02, -1.970e-02, -8.644e-03, -3.552e-02, -4.832e-03, 3.268e-02, 1.601e-02, 3.674e-03, 2.987e-02, 8.158e-02, -1.430e-01, 5.196e-02, -1.298e-01) * s[2][0][1];
	r0 += M4(-1.453e-01, -1.175e-01, 6.509e-01, 7.406e-02, -1.076e-01, 1.447e-01, 1.418e-02, -2.107e-04, -9.715e-03, -2.979e-03, -1.479e-01, -1.046e-01, -4.666e-02, -1.619e-01, 1.264e-01, -1.865e-01) * s[2][1][0];
	r1 += M4(-8.692e-03, 2.386e-01, 3.027e-01, -6.732e-01, -6.883e-02, 8.910e-02, -8.326e-02, 5.582e-02, -9.758e-02, 7.950e-02, 1.032e-01, 1.116e-01, -1.228e-01, 1.693e-01, 1.282e-01, -4.812e-02) * s[2][1][0];
	r0 += M4(2.174e-02, 4.186e-02, 1.216e-02, 5.642e-02, 7.234e-02, -3.662e-02, -1.422e-02, 2.590e-02, 6.700e-02, 2.368e-02, -5.891e-02, -1.141e-02, -1.254e-01, -1.519e-01, 1.108e-01, -2.736e-01) * s[2][1][1];
	r1 += M4(9.108e-03, 5.429e-02, -2.583e-02, -3.731e-03, 7.335e-02, 8.882e-03, 1.135e-02, 6.723e-02, 9.693e-02, 6.296e-02, 1.413e-01, 6.714e-02, -2.753e-01, -2.446e-03, -4.158e-02, -9.445e-02) * s[2][1][1];
	r0 += M4(-2.113e-02, -4.985e-01, 2.289e-01, 1.881e-01, 2.157e-02, 8.366e-02, -5.307e-02, 5.950e-02, 1.680e-02, 8.935e-02, 2.302e-02, -5.004e-02, 1.090e-01, 2.213e-03, 2.090e-03, -1.710e-02) * s[2][2][0];
	r1 += M4(-3.337e-01, 4.254e-01, 2.158e-01, -1.746e-01, 1.130e-02, 1.833e-01, -9.096e-02, -1.189e-01, 2.939e-02, -9.090e-02, 4.430e-02, 3.973e-02, 3.290e-02, 9.362e-02, -3.273e-02, 3.404e-01) * s[2][2][0];
	r0 += M4(3.010e-02, -2.830e-02, 3.205e-02, -4.724e-02, -6.321e-02, 3.201e-02, 6.344e-02, -2.123e-03, 8.230e-02, 9.699e-02, 7.944e-02, -1.024e-01, 6.673e-02, -1.621e-02, 7.055e-02, -1.422e-02) * s[2][2][1];
	r1 += M4(-7.491e-03, 1.520e-02, 1.806e-03, -8.937e-03, -4.012e-02, 5.826e-03, -3.981e-03, -4.879e-02, 1.003e-01, -8.521e-02, 1.130e-01, 1.471e-02, 3.677e-02, 2.850e-02, -8.139e-02, 1.175e-01) * s[2][2][1];
	r0 += V4(-1.513e-02, -1.593e-02, -1.534e-02, -3.829e-02);
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-4.968e-03, -2.948e-03, -1.876e-02, -3.475e-02);
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-4x8C-conv4
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv3
//!BIND LUMA
//!SAVE conv4
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(texelFetch(conv3_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv3_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 g[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv3_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			g[0][ay][ax] = l0(x - 1, y - 1);
			g[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s[3][3][2];
	V4 r0 = V4(0.0);
	V4 r1 = V4(0.0);
	s[0][0][0] = max(g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[0][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[0][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[0][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[0][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[0][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[0][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(2.926e-02, 8.423e-02, 6.575e-02, -3.241e-02, 5.074e-02, -1.813e-02, -1.817e-02, 2.225e-02, -1.493e-01, -4.311e-02, 2.766e-02, -8.467e-02, 2.998e-01, 6.908e-02, 7.932e-02, 4.037e-01) * s[0][0][0];
	r1 += M4(4.111e-02, 2.092e-02, -1.053e-02, 1.697e-02, -1.962e-02, 1.010e-02, 3.095e-03, -4.169e-02, 4.923e-02, 1.541e-02, -1.952e-02, 8.286e-02, -7.648e-02, 3.462e-02, 7.484e-03, -2.230e-01) * s[0][0][0];
	r0 += M4(-2.020e-03, 1.921e-02, -4.655e-02, 4.045e-02, 1.397e-02, -3.062e-02, -4.506e-02, -7.893e-03, -1.315e-02, 3.329e-02, -5.509e-04, -1.555e-02, 3.923e-02, 4.423e-02, -3.043e-02, 8.620e-02) * s[0][0][1];
	r1 += M4(6.002e-02, 1.673e-02, 1.389e-02, 1.306e-02, 1.030e-01, 2.716e-02, 4.060e-02, 2.856e-02, 1.294e-02, -7.805e-03, -4.185e-02, 3.136e-02, -6.121e-03, 7.147e-03, -8.289e-03, -4.411e-02) * s[0][0][1];
	r0 += M4(2.937e-02, -2.945e-01, -1.099e-01, 5.626e-03, -4.415e-02, -3.278e-02, 7.498e-02, -6.814e-02, -5.143e-02, 7.309e-02, 1.401e-01, 1.458e-01, -2.531e-02, -1.197e-01, -8.880e-02, 3.671e-01) * s[0][1][0];
	r1 += M4(-1.304e-01, 1.316e-02, -3.406e-02, -2.987e-02, 7.106e-02, 2.801e-02, 1.563e-02, -2.472e-03, -1.188e-01, 2.959e-02, 1.344e-01, -6.892e-02, 8.763e-02, 9.256e-02, -2.306e-01, 8.032e-02) * s[0][1][0];
	r0 += M4(-1.072e-01, -3.587e-02, -3.029e-02, 3.264e-03, -6.652e-02, 4.362e-02, 6.084e-02, -2.264e-02, 4.408e-02, 1.180e-01, -2.351e-02, 2.016e-01, -1.089e-01, -7.099e-02, 8.328e-02, -1.225e-01) * s[0][1][1];
	r1 += M4(-7.430e-02, 4.162e-02, 7.128e-02, -4.836e-02, 1.187e-01, 1.432e-01, 8.046e-02, -3.130e-02, -5.894e-02, 4.412e-03, -7.817e-03, -7.896e-02, 5.960e-02, 4.755e-02, 6.379e-02, 2.326e-02) * s[0][1][1];
	r0 += M4(3.531e-02, 2.391e-01, -3.545e-02, 6.925e-02, 2.375e-02, 1.104e-02, -6.049e-03, 3.326e-02, -1.752e-02, -2.609e-01, 8.445e-02, -2.026e-01, 1.720e-02, -7.278e-02, 4.729e-03, -1.072e-01) * s[0][2][0];
	r1 += M4(4.602e-02, -2.623e-02, -4.533e-02, -1.199e-02, 3.094e-02, 6.932e-04, -4.553e-02, -8.061e-03, 2.783e-02, 7.056e-02, 5.548e-02, -3.723e-02, -2.908e-02, 8.892e-02, -3.662e-03, 7.972e-03) * s[0][2][0];
	r0 += M4(-2.548e-02, -4.188e-02, 6.792e-02, -6.454e-02, -9.399e-03, -1.090e-01, 7.394e-02, -1.755e-01, -5.688e-02, -2.053e-02, 6.762e-02, -5.601e-02, 5.009e-03, -4.526e-03, -3.754e-03, 2.861e-02) * s[0][2][1];
	r1 += M4(-9.463e-03, 2.609e-02, 2.149e-02, 2.445e-02, -6.853e-02, 1.264e-02, -1.415e-02, -8.320e-03, 1.950e-02, 1.000e-02, 5.267e-02, -6.474e-02, 1.260e-02, 2.639e-02, -1.209e-03, 2.558e-02) * s[0][2][1];
	r0 += M4(-3.284e-01, 5.577e-02, -2.106e-02, -2.961e-01, -2.457e-02, 2.443e-02, -1.374e-01, -4.385e-03, 9.408e-02, -1.288e-03, 1.666e-01, 2.302e-02, 8.530e-02, -1.037e-02, -2.366e-01, 2.028e-01) * s[1][0][0];
	r1 += M4(-9.008e-02, 2.945e-02, 1.128e-01, -1.068e-01, 3.723e-02, 1.804e-02, -3.242e-03, 1.432e-02, 2.381e-02, -2.413e-02, 2.689e-02, -2.991e-02, 5.484e-02, -9.908e-02, -5.768e-02, 1.408e-01) * s[1][0][0];
	r0 += M4(-3.077e-02, 5.708e-02, -1.435e-01, 7.230e-02, -1.822e-01, -2.538e-02, 1.633e-01, -1.489e-01, 3.872e-02, 5.255e-03, 3.355e-02, -1.141e-01, -1.510e-01, -8.368e-02, -1.757e-01, -2.811e-02) * s[1][0][1];
	r1 += M4(-4.837e-02, 4.683e-03, 4.078e-02, -1.200e-01, -1.653e-01, -5.049e-02, 5.152e-02, 2.197e-02, 7.571e-02, -9.742e-04, -3.418e-02, 1.054e-02, 5.681e-02, -3.391e-02, 5.724e-02, 2.104e-01) * s[1][0][1];
	r0 += M4(-3.430e-02, -1.408e-01, 4.426e-01, 5.098e-01, 4.615e-02, 1.949e-01, -1.177e-01, 1.939e-01, -1.880e-01, 7.287e-02, -1.156e-01, 5.919e-01, -2.052e-02, 1.222e-02, -1.845e-01, 1.014e+00) * s[1][1][0];
	r1 += M4(7.611e-02, 6.272e-03, 1.052e-01, -1.393e-03, -1.463e-01, -2.688e-02, 2.611e-02, 3.395e-03, -3.823e-01, -1.041e-03, 4.000e-03, -2.706e-01, -1.330e-01, -3.645e-01, -2.203e-01, -4.663e-03) * s[1][1][0];
	r0 += M4(7.199e-02, -1.738e-02, -6.322e-02, 3.610e-02, -6.566e-03, -6.242e-02, -3.641e-01, 4.561e-01, -2.727e-01, -4.012e-02, 6.021e-02, -9.794e-02, 8.074e-02, 2.024e-02, 1.113e-01, 1.628e-01) * s[1][1][1];
	r1 += M4(-9.985e-02, -3.627e-02, 2.058e-01, 5.276e-02, -5.178e-01, -2.776e-01, 5.735e-01, -1.031e-01, 2.441e-01, -5.811e-04, -9.500e-02, -2.988e-02, -4.272e-01, -2.449e-01, 9.104e-02, 3.392e-01) * s[1][1][1];
	r0 += M4(-2.805e-02, 1.588e-01, -2.068e-01, 4.975e-02, -1.565e-02, 1.098e-01, 1.984e-02, 7.604e-03, 8.129e-02, -1.626e-01, 1.160e-01, 3.738e-02, 4.986e-02, 1.119e-01, 1.231e-01, 7.205e-02) * s[1][2][0];
	r1 += M4(2.035e-02, 1.734e-01, 4.038e-02, -1.006e-03, 2.340e-02, 4.940e-03, 3.741e-02, 3.280e-02, -6.269e-02, -1.470e-01, 1.720e-01, -3.320e-02, -8.666e-02, -1.636e-01, 1.002e-01, 6.301e-03) * s[1][2][0];
	r0 += M4(3.523e-02, 1.264e-01, -8.039e-02, 1.068e-01, 7.700e-03, 3.483e-02, 2.992e-01, -1.713e-01, 1.222e-03, -1.439e-01, 3.724e-02, 3.295e-02, 6.582e-02, 1.339e-01, -3.966e-02, 2.941e-02) * s[1][2][1];
	r1 += M4(8.764e-03, 5.160e-02, 1.000e-01, 2.250e-02, 7.781e-02, -8.510e-02, 2.044e-01, 1.608e-01, -3.464e-02, -3.242e-02, 2.083e-02, -1.056e-01, -5.014e-02, -9.490e-02, 1.091e-01, 4.200e-02) * s[1][2][1];
	r0 += M4(4.553e-02, 6.961e-02, -7.996e-03, 6.860e-02, 4.594e-02, -6.913e-03, -1.644e-01, 6.390e-02, 6.155e-02, -2.189e-02, -4.334e-02, 1.026e-02, -1.015e-01, 1.363e-03, 1.214e-01, 4.721e-02) * s[2][0][0];
	r1 += M4(-1.110e-02, -8.645e-02, -3.457e-05, 3.317e-02, -4.368e-02, -4.087e-02, 8.745e-03, 5.293e-02, 9.043e-03, 8.638e-03, 2.406e-02, 4.548e-02, -5.214e-02, 8.690e-02, 7.437e-04, -1.147e-01) * s[2][0][0];
	r0 += M4(4.113e-02, 4.357e-02, -1.861e-01, 2.523e-02, -6.129e-02, 8.138e-03, -1.286e-01, 1.694e-01, 3.532e-02, 2.756e-02, 4.797e-02, -1.867e-02, -6.107e-02, -7.265e-05, 6.229e-02, -5.679e-03) * s[2][0][1];
	r1 += M4(-8.610e-02, -1.434e-01, -1.139e-02, 1.027e-01, -1.099e-01, -1.081e-01, 7.282e-02, -1.158e-01, 4.554e-02, 5.360e-05, 2.851e-02, 5.371e-02, -2.374e-02, -1.033e-02, 6.631e-02, 3.959e-02) * s[2][0][1];
	r0 += M4(3.991e-02, -1.252e-01, 2.125e-01, -9.972e-02, -5.301e-02, 1.462e-02, -4.644e-03, -1.549e-02, 7.220e-02, -3.705e-03, -2.685e-02, -3.555e-02, -2.363e-02, -5.790e-02, -1.366e-01, 8.674e-02) * s[2][1][0];
	r1 += M4(5.683e-02, -2.070e-01, -3.217e-02, -1.107e-01, -3.629e-02, -1.875e-02, -5.051e-02, 1.090e-01, 2.147e-02, -8.306e-02, 1.596e-03, 2.251e-01, 3.548e-02, 7.147e-01, -6.433e-02, 1.487e-01) * s[2][1][0];
	r0 += M4(-4.117e-02, -1.096e-02, 9.850e-02, -6.212e-02, -2.654e-01, 2.124e-02, -5.330e-02, -2.315e-01, 9.866e-02, -1.774e-02, 6.686e-03, -8.233e-02, -8.997e-03, 2.753e-02, -2.930e-02, -3.847e-02) * s[2][1][1];
	r1 += M4(-5.205e-02, -1.978e-01, 1.637e-02, -9.577e-03, -1.133e-02, -2.749e-02, -7.873e-02, 1.896e-01, 2.677e-02, -1.912e-01, 1.322e-01, 2.276e-01, 2.179e-02, 2.114e-01, -9.633e-02, 1.010e-01) * s[2][1][1];
	r0 += M4(3.211e-02, 4.384e-02, -1.037e-01, -7.573e-02, 4.254e-02, 1.616e-01, -6.899e-02, 3.880e-02, -4.436e-02, 1.406e-02, -1.671e-02, -1.711e-02, -1.315e-03, -4.991e-02, 6.072e-02, 8.729e-02) * s[2][2][0];
	r1 += M4(9.713e-05, -1.597e-01, -7.346e-02, 1.255e-01, -5.052e-03, 7.576e-02, -1.036e-01, 6.694e-02, 5.760e-02, 5.962e-02, -7.978e-02, 9.589e-03, 2.637e-02, 1.634e-01, -6.780e-02, -6.063e-02) * s[2][2][0];
	r0 += M4(4.888e-02, 7.638e-02, -7.038e-02, -9.122e-03, 9.259e-02, 9.891e-02, 1.743e-01, 2.142e-01, -4.483e-03, -2.678e-02, 1.643e-02, 5.111e-03, -5.397e-03, -2.619e-02, -1.332e-02, -4.368e-02) * s[2][2][1];
	r1 += M4(2.114e-03, -7.512e-02, -1.911e-02, 1.028e-01, -3.504e-02, 2.841e-02, 9.413e-02, -9.467e-02, -2.755e-02, -9.795e-02, 6.421e-02, -3.188e-02, -3.458e-03, 3.213e-02, -1.775e-02, 5.796e-02) * s[2][2][1];
	s[0][0][0] = max(g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[1][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[1][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[1][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[1][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[1][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[1][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(-5.348e-02, 2.563e-03, -3.912e-02, -5.008e-02, -1.576e-02, -5.023e-02, -2.640e-03, 8.432e-02, 2.251e-02, -1.882e-02, 4.972e-03, -1.516e-02, 4.476e-02, 1.399e-02, -4.483e-02, -2.753e-02) * s[0][0][0];
	r1 += M4(-2.454e-02, -8.700e-03, 4.004e-02, 9.302e-03, -4.865e-02, 2.529e-02, 1.722e-02, -2.290e-02, -3.050e-02, -1.856e-02, -7.569e-03, -7.568e-03, 4.282e-02, -1.121e-02, -2.976e-02, -3.768e-02) * s[0][0][0];
	r0 += M4(-4.518e-02, -2.447e-02, -4.101e-03, -7.438e-02, 1.974e-02, 1.046e-02, -2.637e-02, 3.723e-02, 2.489e-02, -4.892e-03, 2.242e-02, -2.893e-02, 3.259e-02, 4.789e-03, 4.450e-02, -3.973e-02) * s[0][0][1];
	r1 += M4(-5.441e-02, -9.584e-03, 3.267e-02, 3.830e-03, -8.882e-03, -1.278e-02, 1.564e-02, -1.183e-02, 7.593e-02, 3.160e-02, -2.718e-02, -3.240e-02, -1.820e-02, -1.631e-02, -1.379e-02, -1.705e-02) * s[0][0][1];
	r0 += M4(7.409e-02, 3.837e-02, -1.363e-01, 1.255e-01, 1.499e-01, 1.516e-02, -3.271e-02, 8.273e-02, -1.323e-01, 9.679e-02, 3.726e-02, -7.227e-02, -3.368e-02, -5.979e-03, 7.572e-02, -1.767e-01) * s[0][1][0];
	r1 += M4(2.193e-02, -4.276e-02, 2.518e-02, 8.162e-02, -2.510e-01, -3.814e-03, -1.174e-01, -7.183e-02, 8.196e-03, -4.286e-02, 4.724e-03, 1.387e-02, 2.384e-01, 2.449e-02, 9.798e-02, 6.937e-02) * s[0][1][0];
	r0 += M4(7.521e-02, 1.176e-02, -1.225e-01, 8.412e-02, -2.033e-02, -2.607e-02, -5.628e-02, 2.744e-03, 2.360e-03, 1.465e-02, 4.628e-02, -4.499e-02, 6.167e-02, -3.783e-02, 2.535e-02, -6.020e-02) * s[0][1][1];
	r1 += M4(-3.013e-02, -4.430e-02, -5.043e-02, 2.570e-02, -1.178e-01, -2.146e-02, 2.207e-03, 7.349e-03, 1.381e-01, 4.177e-02, -5.160e-02, 1.894e-02, 9.485e-02, -1.418e-03, -2.811e-02, 5.499e-02) * s[0][1][1];
	r0 += M4(1.667e-02, 6.317e-02, 5.763e-02, 3.311e-02, 1.255e-01, -8.248e-02, -1.880e-01, -2.334e-02, -3.543e-02, 2.722e-02, -7.250e-02, 4.872e-02, 2.189e-02, -7.789e-02, -2.694e-02, 9.074e-02) * s[0][2][0];
	r1 += M4(-7.562e-02, -1.572e-02, 3.264e-02, 2.765e-02, 4.904e-03, -7.810e-02, -7.156e-02, 1.467e-02, -1.219e-02, -1.717e-02, 8.599e-02, -1.966e-02, 1.861e-02, -3.353e-02, -2.007e-04, -1.490e-02) * s[0][2][0];
	r0 += M4(1.050e-01, 1.761e-01, -6.802e-02, 1.372e-01, 6.960e-02, 1.208e-01, -7.543e-02, 4.302e-03, 1.204e-02, -4.390e-02, -1.105e-02, 2.814e-02, -7.680e-02, -1.494e-01, 6.494e-03, -8.827e-02) * s[0][2][1];
	r1 += M4(-2.929e-02, -3.358e-02, -1.294e-02, 2.476e-02, -1.546e-02, -1.898e-02, 5.016e-02, -3.089e-02, 9.696e-03, 3.009e-03, -3.574e-02, -2.351e-02, -5.406e-03, -1.137e-02, 2.507e-02, 3.909e-03) * s[0][2][1];
	r0 += M4(6.209e-02, -1.090e-02, -5.343e-02, -9.500e-02, 5.410e-02, -3.827e-02, 1.762e-01, -8.373e-02, -1.021e-01, -1.530e-02, -1.125e-01, 7.380e-02, 1.855e-01, -1.077e-01, -8.844e-02, 2.339e-01) * s[1][0][0];
	r1 += M4(7.446e-02, -1.092e-02, -4.957e-02, 6.177e-02, 3.311e-02, -2.504e-02, -4.332e-02, -1.437e-03, 8.186e-02, 4.288e-02, 1.500e-02, -3.880e-03, 7.764e-02, 5.743e-02, -6.710e-03, 6.270e-02) * s[1][0][0];
	r0 += M4(9.603e-02, -4.885e-03, 9.432e-02, -1.521e-01, 1.447e-02, -1.227e-03, -8.516e-03, -6.412e-02, -1.413e-01, 2.054e-03, 7.712e-02, -1.056e-01, -4.430e-02, 3.028e-03, 2.256e-02, 1.530e-03) * s[1][0][1];
	r1 += M4(6.766e-02, -8.421e-03, -5.933e-02, 4.689e-02, 2.595e-02, 2.075e-02, -2.504e-02, -1.874e-02, -9.424e-02, 4.078e-03, 4.376e-02, 3.738e-02, -3.295e-02, 4.702e-02, 1.052e-02, 6.452e-02) * s[1][0][1];
	r0 += M4(6.099e-02, -2.443e-02, -2.900e-01, 1.134e-02, -1.109e-01, 2.552e-01, -1.617e-01, -1.118e-02, -4.462e-01, -1.206e-01, 2.766e-01, -1.454e-03, 1.850e-01, 1.178e-01, -7.601e-02, -7.790e-02) * s[1][1][0];
	r1 += M4(4.961e-01, 3.792e-02, -1.470e-01, -1.279e-01, 5.216e-01, 1.587e-01, -5.670e-02, -1.397e-01, -1.102e-01, 6.811e-02, 2.267e-02, -6.022e-02, 3.663e-01, -1.179e-01, -2.467e-01, 3.663e-01) * s[1][1][0];
	r0 += M4(-1.550e-01, -3.706e-02, -1.623e-01, 3.555e-01, 1.269e-01, 2.289e-02, 8.313e-02, 1.209e-01, -1.710e-01, -7.261e-02, 1.135e-01, -6.115e-02, -2.771e-01, 1.281e-02, -4.558e-02, 8.822e-02) * s[1][1][1];
	r1 += M4(5.449e-01, 5.022e-02, -2.394e-01, 9.428e-02, 1.106e-01, 5.602e-03, -5.192e-03, -1.855e-01, -9.312e-02, -5.993e-02, 1.867e-01, 2.034e-03, -7.770e-02, 6.513e-03, -3.913e-02, 1.486e-01) * s[1][1][1];
	r0 += M4(8.386e-03, 3.062e-01, 8.112e-02, 9.045e-02, 3.647e-02, -2.707e-01, -1.508e-01, -1.714e-01, -5.866e-02, 3.649e-02, -2.761e-01, 1.014e-01, 6.296e-04, -1.278e-01, -4.724e-02, -5.153e-02) * s[1][2][0];
	r1 += M4(4.147e-02, -3.603e-02, -2.705e-01, -4.763e-02, 1.190e-01, 1.374e-01, -2.245e-01, 2.743e-01, 1.997e-01, -1.885e-02, 3.009e-01, 4.827e-02, 1.221e-02, -2.532e-02, 1.221e-02, 1.012e-01) * s[1][2][0];
	r0 += M4(-5.527e-02, 1.565e-01, -6.131e-02, -8.802e-03, 1.426e-03, 9.794e-02, -2.065e-01, -6.203e-02, -3.259e-02, -2.367e-01, 4.100e-02, -8.674e-02, 5.782e-02, -3.291e-01, 2.569e-01, -8.164e-02) * s[1][2][1];
	r1 += M4(2.159e-01, 5.331e-02, -2.844e-01, 2.204e-02, 1.160e-02, 3.937e-02, -8.636e-02, 1.009e-01, -2.554e-02, 3.297e-02, 8.975e-02, 5.944e-02, -1.056e-01, -2.494e-02, 1.279e-01, 7.655e-02) * s[1][2][1];
	r0 += M4(-9.600e-02, -2.543e-02, 1.813e-01, -9.120e-02, -6.011e-02, -5.338e-02, 1.851e-01, -8.513e-03, -3.565e-02, 1.941e-02, -1.284e-01, -8.498e-02, 2.797e-02, -2.416e-02, 9.573e-02, -5.243e-02) * s[2][0][0];
	r1 += M4(1.153e-02, 6.460e-02, 1.186e-02, -7.400e-03, -8.234e-02, 2.989e-02, 3.114e-02, -1.704e-01, 4.023e-02, -1.668e-02, 5.585e-02, 4.070e-02, 5.060e-02, 7.107e-03, 1.105e-02, -6.981e-03) * s[2][0][0];
	r0 += M4(-5.726e-02, -2.408e-03, 1.548e-01, -7.105e-02, -2.872e-02, 2.000e-02, 7.593e-02, -3.404e-02, -2.238e-02, -1.745e-02, -1.797e-02, 1.101e-02, 2.520e-02, -4.190e-02, 8.391e-02, 1.353e-02) * s[2][0][1];
	r1 += M4(2.724e-02, 8.143e-02, -1.528e-02, -6.543e-02, 3.590e-04, -2.717e-02, 3.748e-03, -4.645e-02, -4.952e-02, 2.544e-02, -5.819e-03, -7.650e-02, 2.435e-02, -6.536e-03, -1.084e-03, -5.706e-03) * s[2][0][1];
	r0 += M4(6.964e-03, -8.914e-02, -1.600e-01, 9.809e-02, 7.652e-02, 4.975e-02, -1.789e-01, -9.795e-02, 9.029e-02, -1.146e-01, 2.230e-01, 2.115e-01, 1.734e-01, 4.367e-02, -8.354e-02, -3.660e-02) * s[2][1][0];
	r1 += M4(-1.782e-01, 1.304e-01, 8.717e-02, 5.072e-02, -6.946e-03, -9.420e-02, 2.442e-02, 2.116e-01, -1.450e-01, -6.864e-02, 2.665e-01, -9.739e-02, 3.815e-02, 2.464e-01, 3.188e-02, 1.808e-01) * s[2][1][0];
	r0 += M4(1.074e-02, -6.036e-02, -4.857e-02, 3.840e-02, 8.878e-02, -7.451e-02, 2.322e-02, 7.279e-02, 8.579e-02, 4.040e-02, 2.929e-02, -2.328e-02, 3.255e-02, 1.350e-02, -1.284e-01, -1.440e-01) * s[2][1][1];
	r1 += M4(4.186e-02, 1.456e-01, 5.831e-02, -7.917e-02, 6.233e-02, 2.315e-02, -1.162e-02, -1.632e-01, -5.184e-02, -9.335e-02, 1.683e-01, 1.230e-01, 1.238e-01, 2.008e-01, -3.274e-02, 9.997e-02) * s[2][1][1];
	r0 += M4(-1.258e-01, 5.214e-02, 6.200e-02, 3.274e-03, -6.470e-02, -5.798e-02, 4.914e-02, 3.235e-02, 1.077e-01, 5.143e-02, -5.840e-02, 1.263e-01, 9.643e-03, -6.810e-02, 7.846e-02, 2.627e-02) * s[2][2][0];
	r1 += M4(-4.475e-02, 1.676e-01, -1.447e-02, -1.506e-01, 4.922e-02, 1.079e-01, 6.530e-02, -1.073e-01, -6.811e-02, -1.254e-01, -8.875e-02, -2.895e-02, -3.045e-02, 7.642e-02, -2.237e-02, -3.496e-02) * s[2][2][0];
	r0 += M4(-3.186e-02, -6.840e-02, -3.908e-02, 8.487e-02, -7.684e-03, 1.106e-02, -6.516e-02, -8.179e-02, -1.103e-02, -8.348e-02, 9.925e-02, 9.764e-03, -1.203e-02, -7.771e-04, 1.185e-01, 2.480e-03) * s[2][2][1];
	r1 += M4(6.765e-03, 1.477e-01, 4.130e-02, -7.393e-02, 4.344e-03, -3.314e-02, -8.741e-02, 1.215e-02, -7.007e-02, -1.119e-02, 1.659e-02, -4.845e-02, 7.432e-02, 3.990e-02, 2.565e-02, -4.086e-02) * s[2][2][1];
	r0 += V4(2.378e-03, 2.494e-03, -7.033e-03, 1.741e-02);
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-5.694e-04, 5.662e-03, 2.501e-03, 3.283e-02);
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-4x8C-out-shuffle
//!HOOK LUMA
//!COMPUTE 16 16 8 8
//!BIND LUMA
//!BIND conv4
//!BIND easu
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 1
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(texelFetch(conv4_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv4_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 g[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv4_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			g[0][ay][ax] = l0(x - 1, y - 1);
			g[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s[3][3][2];
	V4 r0 = V4(0.0);
	s[0][0][0] = max(g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[0][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[0][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[0][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[0][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[0][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[0][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(-9.177e-03, 1.168e-03, 2.176e-03, -6.925e-03, 1.459e-02, -1.224e-02, 7.610e-03, 4.161e-03, 3.286e-02, -3.468e-02, -4.163e-02, 6.648e-03, -1.870e-02, 2.094e-02, -5.328e-03, 1.867e-02) * s[0][0][0];
	r0 += M4(-1.033e-02, -2.279e-02, -1.031e-03, 3.163e-02, -1.047e-01, 1.798e-01, -9.628e-02, -1.357e-03, 8.748e-03, 1.149e-02, 1.892e-02, 1.149e-02, 1.559e-01, -2.955e-02, -2.298e-02, -8.926e-02) * s[0][0][1];
	r0 += M4(-2.737e-02, 3.874e-02, 8.927e-02, 1.201e-01, 2.193e-03, 1.534e-02, 1.182e-02, 1.668e-02, -2.767e-01, 1.342e-01, 7.603e-02, 6.421e-02, 6.537e-03, -1.643e-02, -2.194e-02, -3.705e-02) * s[0][1][0];
	r0 += M4(4.236e-02, 4.500e-02, 2.730e-02, 3.860e-02, 8.403e-02, -1.151e-01, 6.761e-02, -2.573e-02, -3.040e-03, 8.259e-03, 4.618e-02, 2.986e-02, -3.213e-01, 1.893e-01, -1.429e-02, -1.957e-02) * s[0][1][1];
	r0 += M4(1.422e-02, 5.301e-02, -1.141e-02, 6.043e-02, 2.554e-03, 1.847e-03, 5.728e-03, -2.032e-03, 7.468e-02, 7.122e-02, -2.559e-02, -2.927e-03, 8.559e-03, -3.942e-03, 7.316e-03, 4.312e-04) * s[0][2][0];
	r0 += M4(-9.408e-03, 5.604e-02, 9.608e-03, 9.851e-03, -8.303e-03, 2.377e-02, 6.662e-03, 2.253e-03, -5.917e-03, 1.197e-02, -1.427e-02, 4.115e-02, 8.770e-02, -5.751e-02, 9.029e-04, 5.988e-02) * s[0][2][1];
	r0 += M4(1.049e-02, -1.120e-02, -2.600e-02, -1.186e-02, -1.223e-01, 3.025e-02, -5.006e-02, 7.188e-03, 6.871e-02, -1.385e-01, 1.476e-01, -1.470e-01, 5.087e-02, -3.558e-02, 4.470e-02, 3.339e-03) * s[1][0][0];
	r0 += M4(1.061e-01, -7.497e-02, 8.519e-02, -5.369e-02, -1.020e+00, 5.859e-01, -5.240e-01, 4.669e-01, 3.247e-02, -2.445e-02, 1.723e-02, 1.599e-04, -1.152e-01, 3.211e-02, 1.172e-01, -5.831e-02) * s[1][0][1];
	r0 += M4(-3.270e-01, -7.818e-02, -3.623e-01, -8.606e-02, -5.588e-02, -1.535e-01, -2.701e-02, -8.523e-02, -4.741e-01, 9.909e-01, -7.913e-01, 7.307e-01, 2.783e-01, 3.613e-01, 2.673e-01, 3.185e-01) * s[1][1][0];
	r0 += M4(-9.745e-01, -1.530e-01, -6.460e-03, 3.358e-01, 5.436e-02, -7.773e-02, 1.217e-02, -1.189e-01, -5.589e-02, 2.161e-01, -1.219e-01, 9.313e-02, 2.326e-01, 3.999e-01, -1.462e-01, 8.793e-01) * s[1][1][1];
	r0 += M4(6.610e-02, -4.856e-02, 8.900e-02, -4.838e-02, -4.966e-03, -2.054e-02, -1.034e-02, 3.463e-03, 1.373e-01, -4.255e-01, 2.806e-01, -2.149e-01, -1.172e-02, 6.564e-02, -4.186e-03, 3.347e-02) * s[1][2][0];
	r0 += M4(1.677e-01, -2.920e-01, 1.836e-01, 8.741e-02, -1.224e-02, -6.098e-02, -3.153e-02, -9.107e-03, 1.879e-02, -1.273e-01, 3.827e-02, -1.135e-01, 1.207e-01, -7.208e-03, 1.286e-01, -1.876e-01) * s[1][2][1];
	r0 += M4(-4.104e-02, 1.731e-02, -2.950e-02, 5.748e-03, -1.475e-02, 3.845e-02, -8.468e-02, 2.886e-02, -3.687e-03, -7.685e-03, -1.105e-02, -3.967e-02, 3.683e-03, 1.420e-02, 5.619e-03, -1.478e-02) * s[2][0][0];
	r0 += M4(-3.509e-02, 3.369e-02, 5.547e-02, 2.058e-03, -4.466e-02, 1.174e-01, -5.246e-01, 4.268e-01, -2.524e-02, -4.534e-03, -2.450e-02, -3.718e-02, 9.675e-03, -2.737e-02, -2.839e-02, 3.939e-02) * s[2][0][1];
	r0 += M4(6.090e-02, 3.390e-02, -5.153e-02, -2.647e-02, -4.208e-04, 8.693e-03, -4.088e-02, -6.917e-02, -1.379e-02, -8.369e-02, -6.935e-02, 2.345e-01, -2.150e-02, -4.603e-02, 3.185e-02, 3.155e-02) * s[2][1][0];
	r0 += M4(2.051e-01, 1.582e-02, -8.769e-02, -9.937e-02, 3.382e-02, -3.058e-02, 9.012e-02, -5.659e-02, -2.074e-02, -7.064e-02, -1.510e-02, 1.194e-02, 1.773e-03, -4.878e-02, -2.801e-02, -3.510e-02) * s[2][1][1];
	r0 += M4(2.092e-02, 9.740e-03, 2.636e-02, -1.111e-02, 7.490e-03, -8.419e-03, 9.162e-03, -3.063e-02, 7.843e-03, 1.238e-01, -3.018e-02, -3.601e-02, -2.876e-02, -2.798e-02, -4.124e-02, -8.636e-03) * s[2][2][0];
	r0 += M4(-7.319e-02, 7.080e-02, -8.199e-03, 1.647e-01, -7.006e-03, -1.159e-02, -1.292e-04, -4.814e-02, -9.682e-03, 5.235e-02, -1.864e-02, 5.963e-03, -7.987e-02, -6.954e-02, 3.527e-02, -5.522e-02) * s[2][2][1];
	s[0][0][0] = max(g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[1][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[1][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[1][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[1][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[1][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[1][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(1.352e-02, 4.076e-02, 1.213e-02, 6.050e-03, -8.827e-02, 9.677e-02, -4.603e-02, 2.932e-02, 4.837e-02, -1.479e-01, -2.751e-02, 7.803e-03, 1.035e-02, -1.647e-02, -3.088e-02, -2.309e-02) * s[0][0][0];
	r0 += M4(3.621e-03, 3.253e-02, 2.756e-02, 1.118e-02, -4.693e-01, -2.879e-02, 5.125e-01, -1.648e-02, 2.103e-02, -4.768e-02, 5.652e-02, 4.265e-03, -3.892e-02, 4.675e-02, -4.627e-02, -2.958e-02) * s[0][0][1];
	r0 += M4(-7.067e-02, -1.002e-01, 2.463e-02, 1.099e-02, 1.035e-01, -1.169e-01, 1.262e-01, 3.930e-02, -1.028e-01, 2.597e-01, -4.672e-02, 8.549e-02, -4.158e-02, 6.155e-02, -1.297e-02, 9.848e-04) * s[0][1][0];
	r0 += M4(-1.778e-01, -1.676e-01, 5.532e-02, 8.829e-02, -6.234e-01, -9.551e-01, 3.865e-01, 1.043e+00, -4.902e-02, 6.560e-02, 1.435e-02, 1.595e-01, 3.334e-01, 2.105e-01, 1.284e-01, 1.232e-01) * s[0][1][1];
	r0 += M4(-4.777e-03, 2.247e-02, -3.379e-02, 1.679e-02, 7.552e-03, 3.568e-02, -2.540e-03, 4.715e-03, 2.596e-02, 1.976e-02, 3.769e-02, -1.931e-02, 1.553e-02, -7.884e-02, 2.288e-02, -4.485e-03) * s[0][2][0];
	r0 += M4(-8.951e-03, 2.758e-02, -3.821e-03, 1.640e-02, 2.776e-02, -6.515e-02, 7.501e-02, -5.525e-02, 1.812e-02, 2.973e-02, 3.490e-03, -1.203e-02, -2.021e-02, 4.100e-02, -3.449e-02, 1.329e-03) * s[0][2][1];
	r0 += M4(6.084e-02, 7.659e-02, 8.092e-02, 1.217e-01, -1.129e-01, -4.118e-02, -1.528e-01, -5.895e-03, -7.055e-01, 1.313e-01, 5.289e-01, 2.213e-01, -2.125e-02, -8.691e-02, 1.610e-02, -4.456e-02) * s[1][0][0];
	r0 += M4(7.622e-02, 7.547e-02, 3.123e-02, 1.034e-01, 3.866e-02, 6.078e-03, -2.807e-01, 1.132e-01, -1.599e-01, 1.959e-01, -1.328e-01, 1.067e-01, -2.130e-02, -7.641e-02, -1.228e-02, 2.442e-02) * s[1][0][1];
	r0 += M4(-5.358e-02, 1.094e-01, -1.945e-01, -1.031e-01, -1.934e-02, 6.104e-05, -2.949e-03, -8.883e-02, -8.773e-02, -9.320e-01, 9.727e-02, 5.293e-01, 9.077e-02, 1.745e-01, 5.842e-02, 1.913e-01) * s[1][1][0];
	r0 += M4(3.935e-01, 3.279e-01, -7.685e-01, -5.254e-01, 2.755e-01, 3.632e-01, 5.449e-02, -4.176e-01, 3.593e-02, -2.210e-01, 3.422e-02, -1.561e-01, 2.029e-01, 3.925e-01, 3.864e-01, 3.781e-01) * s[1][1][1];
	r0 += M4(2.312e-03, -1.199e-01, 5.902e-02, -6.352e-02, 2.002e-02, -5.364e-02, 2.642e-02, -1.304e-02, -1.023e-01, -1.201e-02, -3.007e-03, 5.377e-02, -3.676e-02, -1.437e-02, -1.740e-02, -6.704e-02) * s[1][2][0];
	r0 += M4(-1.486e-03, 1.122e-01, 3.756e-02, -1.938e-01, -8.486e-04, -1.413e-02, 1.984e-02, 1.440e-01, -2.375e-03, -3.521e-02, 6.822e-03, -1.347e-02, 2.150e-04, -7.886e-02, -3.526e-03, -4.269e-02) * s[1][2][1];
	r0 += M4(7.551e-03, -1.602e-02, 4.653e-03, -2.037e-02, 5.000e-03, 3.796e-02, -3.028e-02, 2.709e-02, 2.026e-01, 1.351e-01, -5.004e-01, -3.774e-02, 5.566e-03, 1.748e-02, -3.209e-03, -1.758e-02) * s[2][0][0];
	r0 += M4(3.169e-02, -1.064e-03, -1.241e-02, 9.544e-03, -1.196e-02, 4.689e-02, -2.860e-02, 5.182e-03, 7.440e-03, 8.533e-03, -6.823e-02, 3.086e-02, -1.221e-02, 2.895e-02, -1.379e-02, -7.726e-03) * s[2][0][1];
	r0 += M4(-8.222e-03, 5.455e-03, 1.481e-02, 9.902e-02, 2.032e-02, -3.574e-03, -1.009e-02, -5.341e-02, 3.475e-02, 2.440e-01, 1.524e-01, -2.553e-01, 1.250e-02, -4.326e-02, 2.583e-02, -1.426e-02) * s[2][1][0];
	r0 += M4(-1.311e-01, -2.950e-02, 1.607e-01, 1.253e-01, -1.339e-02, -7.188e-02, 3.675e-02, -3.877e-02, 5.367e-02, 6.214e-02, -9.628e-03, -6.937e-02, 1.014e-02, -6.674e-02, -1.114e-02, 1.938e-03) * s[2][1][1];
	r0 += M4(-1.632e-02, -7.262e-03, -4.189e-02, -6.012e-02, 4.218e-03, 1.093e-02, 4.662e-03, 1.213e-02, 3.673e-02, -6.665e-02, -6.664e-03, 1.117e-02, -2.007e-02, 4.041e-02, -4.153e-02, 3.327e-02) * s[2][2][0];
	r0 += M4(2.332e-03, -6.187e-02, -4.177e-02, 9.064e-03, 1.229e-02, 6.280e-03, 2.951e-05, 2.838e-02, 7.006e-03, -5.408e-03, 1.279e-02, 3.520e-03, -2.025e-02, 2.594e-02, -2.744e-02, -2.277e-02) * s[2][2][1];
	r0 += V4(-2.565e-03, -5.447e-03, -2.495e-03, -5.447e-03);
	r0 = tanh(r0);
	vec2 opt = 0.5 * LUMA_pt;
	vec2 fpos = (vec2(opos) + vec2(0.5)) * opt;
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0.x + easu_tex(fpos + vec2(0.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r0.y + easu_tex(fpos + vec2(1.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(0, 1), vec4(r0.z + easu_tex(fpos + vec2(0.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 1), vec4(r0.w + easu_tex(fpos + vec2(1.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
}
