// CuNNy 4x8C
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

// FSR mpv | modified
// Copyright (c) 2021 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// FidelityFX FSR v1.0.2 by AMD
// ported to mpv by agyild

//!DESC CuNNy-EASU
//!HOOK LUMA
//!BIND LUMA
//!SAVE easu
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
//!COMPONENTS 1

float APrxLoRcpF1(float a) {
	return uintBitsToFloat(uint(0x7ef07ebb) - floatBitsToUint(a));
}

float APrxLoRsqF1(float a) {
	return uintBitsToFloat(uint(0x5f347d74) - (floatBitsToUint(a) >> uint(1)));
}

float AMin3F1(float x, float y, float z) {
	return min(x, min(y, z));
}

float AMax3F1(float x, float y, float z) {
	return max(x, max(y, z));
}

void tap(inout float aC, inout float aW, vec2 off, vec2 dir, vec2 len,
         float lob, float clp, float c){
	vec2 v;
	v.x = (off.x * ( dir.x)) + (off.y * dir.y);
	v.y = (off.x * (-dir.y)) + (off.y * dir.x);
	v *= len;
	float d2 = v.x * v.x + v.y * v.y;
	d2 = min(d2, clp);
	float wB = float(2.0 / 5.0) * d2 + -1.0;
	float wA = lob * d2 + -1.0;
	wB *= wB;
	wA *= wA;
	wB = float(25.0 / 16.0) * wB + float(-(25.0 / 16.0 - 1.0));
	float w = wB * wA;
	aC += c * w;
	aW += w;
}

void set(inout vec2 dir, inout float len, vec2 pp, bool biS, bool biT,
         bool biU, bool biV, float lA, float lB, float lC, float lD, float lE){
	float w = 0.0;
	if (biS)
		w = (1.0 - pp.x) * (1.0 - pp.y);
	if (biT)
		w =        pp.x  * (1.0 - pp.y);
	if (biU)
		w = (1.0 - pp.x) *        pp.y;
	if (biV)
		w =        pp.x  *        pp.y;
	float dc = lD - lC;
	float cb = lC - lB;
	float lenX = max(abs(dc), abs(cb));
	lenX = APrxLoRcpF1(lenX);
	float dirX = lD - lB;
	lenX = clamp(abs(dirX) * lenX, 0.0, 1.0);
	lenX *= lenX;
	float ec = lE - lC;
	float ca = lC - lA;
	float lenY = max(abs(ec), abs(ca));
	lenY = APrxLoRcpF1(lenY);
	float dirY = lE - lA;
	lenY = clamp(abs(dirY) * lenY, 0.0, 1.0);
	lenY *= lenY;
	dir += vec2(dirX, dirY) * w;
	len += dot(vec2(w), vec2(lenX, lenY));
}

vec4 hook() {
	vec4 pix = vec4(0.0, 0.0, 0.0, 1.0);
	vec2 pp = LUMA_pos * LUMA_size - vec2(0.5);
	vec2 fp = floor(pp);
	pp -= fp;
#if (defined(LUMA_gather) && (__VERSION__ >= 400 || (GL_ES && __VERSION__ >= 310)))
	vec4 bczzL = LUMA_gather(vec2((fp + vec2(1.0, -1.0)) * LUMA_pt), 0);
	vec4 ijfeL = LUMA_gather(vec2((fp + vec2(0.0,  1.0)) * LUMA_pt), 0);
	vec4 klhgL = LUMA_gather(vec2((fp + vec2(2.0,  1.0)) * LUMA_pt), 0);
	vec4 zzonL = LUMA_gather(vec2((fp + vec2(1.0,  3.0)) * LUMA_pt), 0);
#else
	float b = LUMA_tex(vec2((fp + vec2(0.5, -0.5)) * LUMA_pt)).r;
	float c = LUMA_tex(vec2((fp + vec2(1.5, -0.5)) * LUMA_pt)).r;
	float e = LUMA_tex(vec2((fp + vec2(-0.5, 0.5)) * LUMA_pt)).r;
	float f = LUMA_tex(vec2((fp + vec2( 0.5, 0.5)) * LUMA_pt)).r;
	float g = LUMA_tex(vec2((fp + vec2( 1.5, 0.5)) * LUMA_pt)).r;
	float h = LUMA_tex(vec2((fp + vec2( 2.5, 0.5)) * LUMA_pt)).r;
	float i = LUMA_tex(vec2((fp + vec2(-0.5, 1.5)) * LUMA_pt)).r;
	float j = LUMA_tex(vec2((fp + vec2( 0.5, 1.5)) * LUMA_pt)).r;
	float k = LUMA_tex(vec2((fp + vec2( 1.5, 1.5)) * LUMA_pt)).r;
	float l = LUMA_tex(vec2((fp + vec2( 2.5, 1.5)) * LUMA_pt)).r;
	float n = LUMA_tex(vec2((fp + vec2(0.5, 2.5) ) * LUMA_pt)).r;
	float o = LUMA_tex(vec2((fp + vec2(1.5, 2.5) ) * LUMA_pt)).r;
	vec4 bczzL = vec4(b, c, 0.0, 0.0);
	vec4 ijfeL = vec4(i, j, f, e);
	vec4 klhgL = vec4(k, l, h, g);
	vec4 zzonL = vec4(0.0, 0.0, o, n);
#endif
	float bL = bczzL.x;
	float cL = bczzL.y;
	float iL = ijfeL.x;
	float jL = ijfeL.y;
	float fL = ijfeL.z;
	float eL = ijfeL.w;
	float kL = klhgL.x;
	float lL = klhgL.y;
	float hL = klhgL.z;
	float gL = klhgL.w;
	float oL = zzonL.z;
	float nL = zzonL.w;
	vec2 dir = vec2(0.0);
	float len = 0.0;
	set(dir, len, pp, true, false, false, false, bL, eL, fL, gL, jL);
	set(dir, len, pp, false, true, false, false, cL, fL, gL, hL, kL);
	set(dir, len, pp, false, false, true, false, fL, iL, jL, kL, nL);
	set(dir, len, pp, false, false, false, true, gL, jL, kL, lL, oL);
	vec2 dir2 = dir * dir;
	float dirR = dir2.x + dir2.y;
	bool zro = dirR < float(1.0 / 32768.0);
	dirR = APrxLoRsqF1(dirR);
	dirR = zro ? 1.0 : dirR;
	dir.x = zro ? 1.0 : dir.x;
	dir *= vec2(dirR);
	len = len * 0.5;
	len *= len;
	float stretch = (dir.x * dir.x + dir.y * dir.y) * APrxLoRcpF1(max(abs(dir.x), abs(dir.y)));
	vec2 len2 = vec2(1.0 + (stretch - 1.0) * len, 1.0 + -0.5 * len);
	float lob = 0.5 + float((1.0 / 4.0 - 0.04) - 0.5) * len;
	float clp = APrxLoRcpF1(lob);
	float aC = 0.0;
	float aW = 0.0;
	tap(aC, aW, vec2( 0.0,-1.0) - pp, dir, len2, lob, clp, bL);
	tap(aC, aW, vec2( 1.0,-1.0) - pp, dir, len2, lob, clp, cL);
	tap(aC, aW, vec2(-1.0, 1.0) - pp, dir, len2, lob, clp, iL);
	tap(aC, aW, vec2( 0.0, 1.0) - pp, dir, len2, lob, clp, jL);
	tap(aC, aW, vec2( 0.0, 0.0) - pp, dir, len2, lob, clp, fL);
	tap(aC, aW, vec2(-1.0, 0.0) - pp, dir, len2, lob, clp, eL);
	tap(aC, aW, vec2( 1.0, 1.0) - pp, dir, len2, lob, clp, kL);
	tap(aC, aW, vec2( 2.0, 1.0) - pp, dir, len2, lob, clp, lL);
	tap(aC, aW, vec2( 2.0, 0.0) - pp, dir, len2, lob, clp, hL);
	tap(aC, aW, vec2( 1.0, 0.0) - pp, dir, len2, lob, clp, gL);
	tap(aC, aW, vec2( 1.0, 2.0) - pp, dir, len2, lob, clp, oL);
	tap(aC, aW, vec2( 0.0, 2.0) - pp, dir, len2, lob, clp, nL);
	pix.r = aC / aW;
	float min1 = min(AMin3F1(fL, gL, jL), kL);
	float max1 = max(AMax3F1(fL, gL, jL), kL);
	pix.r = clamp(pix.r, min1, max1);
	pix.r = clamp(pix.r, 0.0, 1.0);
	return pix;
}


//!DESC CuNNy-4x8C-in
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND LUMA
//!SAVE in
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
	#define V4 f16vec4
	#define M4 f16mat4
	#define F float16_t
#else
	#define V4 vec4
	#define M4 mat4
	#define F float
#endif
#define l0(x, y) F(texelFetch(LUMA_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(1, 1) + ivec2(0, 0), 0).r)
shared F s0[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += V4(3.115e-03, -1.145e-01, 2.217e-02, -7.038e-03) * s0[y+0][x+0];
	r += V4(1.862e-02, -5.225e-02, 3.135e-02, 6.668e-01) * s0[y+0][x+1];
	r += V4(-1.314e-02, 1.708e-01, -1.479e-01, -1.386e-01) * s0[y+0][x+2];
	r += V4(-3.256e-01, -1.879e-01, 8.219e-04, 3.210e-02) * s0[y+1][x+0];
	r += V4(3.975e-01, -1.489e-02, -8.266e-02, -1.079e-01) * s0[y+1][x+1];
	r += V4(-1.859e-02, -1.942e-01, 2.742e-01, -4.352e-01) * s0[y+1][x+2];
	r += V4(-1.493e-02, -1.181e-01, 2.012e-02, -7.398e-03) * s0[y+2][x+0];
	r += V4(-6.485e-02, -2.086e-04, -4.984e-02, -1.462e-02) * s0[y+2][x+1];
	r += V4(1.874e-02, -4.485e-03, -1.233e-01, 1.439e-02) * s0[y+2][x+2];
	r += V4(1.375e-03, 8.472e-02, 2.757e-03, -3.238e-03);
	return vec4(r);
}
vec4 f1(int x, int y) {
	V4 r = V4(0.0);
	r += V4(-1.313e-01, -2.191e-01, 7.534e-03, -2.252e-02) * s0[y+0][x+0];
	r += V4(-2.370e-01, -2.326e-01, 3.719e-03, 1.015e-01) * s0[y+0][x+1];
	r += V4(3.801e-02, 2.622e-01, 1.484e-02, -1.047e-01) * s0[y+0][x+2];
	r += V4(-4.448e-02, 4.701e-02, -5.167e-02, -1.722e-02) * s0[y+1][x+0];
	r += V4(1.399e-01, 2.446e-01, -2.875e-02, 1.445e-01) * s0[y+1][x+1];
	r += V4(1.916e-01, -1.676e-01, -9.880e-02, 5.190e-01) * s0[y+1][x+2];
	r += V4(1.255e-01, 4.702e-02, -5.759e-02, -1.008e-01) * s0[y+2][x+0];
	r += V4(-4.601e-02, -9.175e-02, 1.774e-01, -3.688e-01) * s0[y+2][x+1];
	r += V4(-3.219e-02, -1.716e-02, -2.379e-02, -1.511e-01) * s0[y+2][x+2];
	r += V4(-2.759e-02, 1.294e-01, 2.257e-03, 7.632e-04);
	return vec4(r);
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = LUMA_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
		}
	}
	barrier();
	imageStore(out_image, opos + ivec2(0, 0), f0(xy.x, xy.y));
	imageStore(out_image, opos + ivec2(1, 0), f1(xy.x, xy.y));
}


//!DESC CuNNy-4x8C-conv1
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND in
//!BIND LUMA
//!SAVE conv1
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
	#define V4 f16vec4
	#define M4 f16mat4
	#define F float16_t
#else
	#define V4 vec4
	#define M4 mat4
	#define F float
#endif
#define l0(x, y) V4(texelFetch(in_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(in_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 s0[10][10];
shared V4 s1[10][10];
shared V4 s2[10][10];
shared V4 s3[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += M4(1.533e-01, 7.367e-02, -1.323e-01, 5.792e-02, -2.977e-03, -2.576e-01, 1.804e-01, 9.251e-02, 1.200e-01, -2.183e-01, -2.259e-01, 3.537e-02, -5.587e-02, -3.306e-02, -1.037e-02, 1.151e-01) * s0[y+0][x+0];
	r += M4(1.665e-01, -1.552e-01, 3.657e-01, -3.102e-01, 9.733e-02, 3.567e-02, -5.240e-02, 1.488e-01, 2.602e-01, -1.080e-02, -3.840e-02, -2.081e-01, -2.434e-02, 2.118e-02, 1.382e-02, 6.820e-02) * s0[y+0][x+1];
	r += M4(3.860e-02, -2.003e-02, -1.575e-02, 1.432e-02, 5.665e-02, -2.474e-01, 5.947e-02, 5.314e-03, -2.173e-01, -4.084e-02, 4.768e-02, 1.501e-02, 1.106e-01, 4.758e-03, 9.678e-02, -6.752e-02) * s0[y+0][x+2];
	r += M4(-1.438e-01, 6.581e-02, 1.421e-01, 4.598e-02, -9.234e-02, -2.013e-01, -1.272e-01, -6.764e-02, -2.535e-01, 2.764e-01, 1.454e-01, -5.042e-02, 1.362e-01, -2.115e-01, -3.598e-02, 7.656e-02) * s0[y+1][x+0];
	r += M4(-2.200e-01, 1.169e-01, -5.989e-01, 9.852e-02, -2.072e-01, -1.606e-01, 9.413e-02, -1.104e-01, 4.589e-01, -9.030e-02, 7.899e-02, 2.548e-01, 1.307e-02, -9.138e-02, 1.440e-01, -7.130e-03) * s0[y+1][x+1];
	r += M4(8.069e-02, -2.013e-01, 1.187e-01, -1.819e-01, 1.721e-01, -2.220e-01, 9.743e-02, -4.009e-02, 1.241e-01, -1.027e-01, -1.170e-02, 4.784e-01, -5.536e-02, 7.202e-03, -1.860e-01, 4.080e-01) * s0[y+1][x+2];
	r += M4(-1.716e-01, 2.199e-01, 5.193e-02, 7.351e-02, 1.168e-02, -1.067e-01, -7.641e-02, -7.525e-02, 1.070e-01, -1.760e-01, 5.262e-02, -1.722e-02, -5.359e-02, -1.006e-01, -5.160e-02, -1.172e-02) * s0[y+2][x+0];
	r += M4(-2.449e-01, 5.729e-02, 1.929e-01, 2.574e-02, 9.692e-02, -6.510e-02, -2.665e-01, 1.062e-01, -2.863e-02, -1.128e-01, 1.782e-01, 3.198e-01, -8.103e-02, 3.576e-01, -1.237e-01, 1.950e-01) * s0[y+2][x+1];
	r += M4(1.921e-01, -4.307e-02, 1.324e-01, -2.427e-01, -1.444e-01, -4.332e-02, 1.238e-01, -1.283e-01, 1.618e-02, -9.057e-02, 2.390e-01, 1.534e-01, 1.281e-03, -4.631e-02, 6.287e-02, -1.334e-01) * s0[y+2][x+2];
	r += M4(8.687e-02, 1.171e-01, 2.387e-02, 4.649e-02, -1.171e-02, -2.566e-01, 9.816e-02, 3.449e-02, -1.479e-01, -1.811e-02, 1.866e-01, -9.686e-03, -2.955e-02, 2.159e-03, 1.222e-01, -1.593e-02) * s1[y+0][x+0];
	r += M4(2.312e-01, -2.509e-01, 3.723e-01, -1.559e-01, 1.105e-01, 7.593e-03, 4.852e-02, 2.541e-02, 2.058e-01, -1.325e-02, 9.103e-02, -2.029e-01, 3.722e-02, 3.440e-02, -1.564e-02, 8.774e-03) * s1[y+0][x+1];
	r += M4(7.428e-02, 9.295e-02, 2.466e-01, -3.130e-02, 4.573e-02, -2.030e-01, 1.561e-02, -5.207e-02, 8.194e-03, 1.200e-02, 1.344e-01, -1.199e-01, 3.852e-02, 1.228e-02, 1.224e-01, -9.854e-02) * s1[y+0][x+2];
	r += M4(-5.342e-02, 1.899e-01, 7.103e-02, -2.054e-02, -3.823e-02, -2.208e-01, -1.058e-01, -7.433e-02, 1.329e-01, 4.570e-02, -1.483e-01, 2.231e-02, 5.889e-02, -7.906e-02, 1.014e-01, -3.680e-02) * s1[y+1][x+0];
	r += M4(8.959e-02, 4.047e-01, -8.706e-01, 3.168e-02, -1.985e-02, -1.593e-01, 4.332e-03, 1.013e-01, 3.544e-02, -5.198e-02, 3.597e-02, -1.874e-01, -7.868e-02, -7.839e-02, 4.238e-01, -5.137e-01) * s1[y+1][x+1];
	r += M4(9.455e-02, -1.002e-01, 3.770e-01, 2.789e-01, 1.135e-01, -1.293e-01, -1.113e-01, 3.881e-02, -1.115e-01, -3.618e-02, -3.904e-02, -3.125e-02, -5.713e-02, 2.736e-02, -8.543e-02, 2.291e-01) * s1[y+1][x+2];
	r += M4(-6.159e-03, 2.092e-01, 2.521e-02, 5.503e-02, 1.621e-02, -1.111e-01, -7.286e-02, -8.513e-02, -2.590e-01, 1.780e-02, -1.032e-01, 1.965e-02, 1.081e-01, -4.116e-02, 1.138e-01, -2.758e-02) * s1[y+2][x+0];
	r += M4(8.660e-02, 9.647e-02, -1.693e-01, 1.762e-01, 8.593e-02, -4.560e-02, -1.104e-02, 3.578e-02, 2.701e-02, -2.962e-02, 7.791e-02, 3.098e-01, -1.938e-01, -1.805e-02, 9.803e-02, -4.209e-02) * s1[y+2][x+1];
	r += M4(3.172e-01, 5.182e-02, 6.287e-02, 3.835e-02, -7.881e-02, -6.952e-02, 1.233e-01, -1.048e-01, -1.623e-01, 2.189e-02, 1.277e-01, 1.103e-01, 1.504e-02, -8.483e-03, 8.301e-03, -8.966e-02) * s1[y+2][x+2];
	r += M4(7.911e-02, 5.043e-03, 2.261e-01, -1.431e-01, -4.486e-02, 9.713e-02, -1.626e-01, 5.334e-02, 2.903e-01, 3.689e-02, 1.725e-01, -5.383e-02, 1.724e-01, 1.802e-01, 1.580e-01, -1.440e-01) * s2[y+0][x+0];
	r += M4(6.813e-02, -1.101e-01, 4.130e-02, -6.383e-02, -8.875e-02, 2.555e-02, 1.149e-01, 6.215e-02, -5.529e-01, 1.565e-01, -4.921e-01, 7.471e-02, 8.855e-02, 3.150e-02, 4.156e-01, -1.771e-01) * s2[y+0][x+1];
	r += M4(-1.284e-01, -4.187e-02, 3.121e-02, 8.998e-02, 9.190e-02, 1.674e-01, 1.255e-01, -4.808e-02, 4.095e-01, -2.090e-01, 1.580e-01, -1.842e-01, 7.741e-02, -1.512e-02, 2.248e-01, -8.967e-03) * s2[y+0][x+2];
	r += M4(-2.085e-01, 2.566e-01, -4.579e-02, 4.416e-02, -1.452e-01, -2.466e-04, 1.868e-01, -1.461e-02, 5.901e-01, -1.314e-01, -3.272e-01, -7.319e-02, -1.412e-01, 2.353e-01, -1.609e-01, 9.020e-02) * s2[y+1][x+0];
	r += M4(1.801e-02, 1.166e-01, -1.462e-02, 1.794e-01, -1.743e-01, 5.160e-02, -2.036e-01, 2.666e-01, 9.947e-02, 1.942e-01, -5.455e-01, -3.192e-02, -1.611e-01, -2.231e-02, 1.398e-01, -1.803e-01) * s2[y+1][x+1];
	r += M4(-1.274e-01, 4.440e-02, 4.109e-01, -3.790e-01, 1.256e-01, 8.692e-02, -1.605e-01, -1.051e-01, 4.522e-01, 1.162e-01, -2.416e-01, 2.912e-01, -2.375e-03, 4.604e-03, -1.010e-01, 2.359e-02) * s2[y+1][x+2];
	r += M4(-2.232e-01, -6.265e-02, 2.194e-01, 5.318e-02, 6.073e-03, 5.011e-03, -5.559e-02, -7.668e-02, 1.954e-02, 2.148e-02, 2.015e-02, -4.181e-02, 7.487e-03, -3.450e-02, 4.336e-03, 2.650e-02) * s2[y+2][x+0];
	r += M4(1.557e-01, -2.075e-01, 1.064e-01, 1.500e-01, -4.414e-02, -1.164e-02, 1.332e-01, 1.468e-01, 1.377e-01, -1.416e-01, 1.873e-01, -6.432e-02, -4.849e-02, -9.845e-04, 6.587e-02, 3.961e-02) * s2[y+2][x+1];
	r += M4(1.952e-01, -1.340e-01, -2.799e-02, 2.521e-01, -4.127e-02, 5.765e-02, -4.303e-02, 8.994e-02, 1.245e-01, -6.306e-02, 2.858e-01, -2.247e-01, 4.272e-02, 6.373e-02, -1.343e-01, -1.597e-01) * s2[y+2][x+2];
	r += M4(5.079e-02, 1.122e-02, 1.758e-01, -1.027e-01, -7.506e-02, 8.512e-02, -2.786e-01, 7.495e-02, -1.431e-01, 3.586e-02, -2.331e-03, 8.763e-02, 2.260e-01, 1.737e-01, 1.965e-01, -1.926e-01) * s3[y+0][x+0];
	r += M4(-7.546e-03, -1.332e-01, 1.518e-01, 8.765e-02, -8.916e-02, 6.361e-02, 2.911e-02, 2.520e-02, -1.511e-01, -7.281e-02, -3.007e-01, 9.841e-02, 3.203e-01, -1.161e-02, 3.897e-01, -9.501e-02) * s3[y+0][x+1];
	r += M4(-6.184e-02, -3.358e-02, 7.263e-02, 9.091e-02, 6.810e-02, 1.397e-01, 1.652e-01, -8.831e-02, -1.634e-03, -3.536e-02, 1.143e-01, -6.280e-02, 7.384e-02, -4.800e-02, 1.327e-01, 1.857e-01) * s3[y+0][x+2];
	r += M4(-9.604e-03, 2.838e-01, -2.162e-01, 5.689e-02, -1.418e-01, 5.652e-02, 2.431e-02, -8.038e-02, -1.299e-01, -1.866e-02, 5.537e-02, 7.530e-02, -9.986e-02, 1.481e-01, 8.613e-02, 1.283e-01) * s3[y+1][x+0];
	r += M4(1.072e-01, 5.010e-02, -4.743e-01, 3.578e-02, -2.765e-02, -1.329e-02, -3.943e-01, 1.945e-01, -8.884e-02, -2.794e-02, -2.132e-02, -3.943e-02, 1.298e-01, 1.831e-02, -2.193e-02, 4.233e-02) * s3[y+1][x+1];
	r += M4(3.336e-02, 3.474e-02, -1.013e-01, -2.010e-01, 1.227e-01, 1.019e-01, -1.990e-01, 1.599e-01, 9.478e-02, 1.833e-01, -4.245e-02, -6.262e-02, 2.018e-01, 2.192e-03, -1.589e-01, 4.255e-01) * s3[y+1][x+2];
	r += M4(-1.421e-01, -1.017e-01, 2.442e-02, 2.757e-02, -1.597e-01, 4.765e-02, -4.973e-02, 1.725e-01, 4.241e-02, 6.617e-02, 2.169e-01, -2.635e-03, -2.978e-02, -3.475e-02, 2.885e-02, 3.394e-02) * s3[y+2][x+0];
	r += M4(-6.558e-02, -2.069e-01, -7.130e-02, 1.202e-01, -1.387e-01, 5.048e-02, 2.418e-01, 3.412e-01, -1.963e-02, -5.988e-02, 3.765e-02, -5.424e-02, -5.502e-02, -2.568e-02, 5.514e-02, -3.235e-02) * s3[y+2][x+1];
	r += M4(-2.162e-02, -1.316e-01, 2.474e-01, -2.774e-02, 7.319e-03, -2.103e-01, -1.055e-01, 2.607e-01, 8.309e-02, 1.480e-02, -2.045e-02, -9.119e-02, 1.048e-01, 3.136e-02, -5.601e-02, -2.028e-01) * s3[y+2][x+2];
	r += V4(3.141e-02, 3.538e-02, 1.508e-02, -4.197e-02);
	return vec4(r);
}
vec4 f1(int x, int y) {
	V4 r = V4(0.0);
	r += M4(1.004e-02, -1.041e-01, 7.041e-02, -1.162e-01, 1.468e-03, 4.016e-02, 6.685e-03, -3.008e-02, -3.480e-02, 2.771e-01, -2.287e-02, 1.016e-01, -3.457e-02, -2.152e-01, 7.592e-02, -8.791e-02) * s0[y+0][x+0];
	r += M4(1.277e-02, 1.582e-01, -1.613e-01, -9.508e-02, -7.126e-03, -8.719e-02, 1.556e-01, -1.607e-01, 2.082e-02, 1.307e-01, -1.084e-01, 1.809e-01, 1.870e-01, 9.753e-03, -4.187e-02, -3.554e-02) * s0[y+0][x+1];
	r += M4(2.910e-02, 6.540e-01, -2.280e-01, 1.116e-01, 2.711e-02, -3.778e-02, -3.698e-01, 1.938e-01, -1.789e-01, -5.372e-02, -1.668e-01, -7.780e-02, -1.001e-01, 9.643e-02, -7.371e-02, 6.646e-02) * s0[y+0][x+2];
	r += M4(-4.279e-02, 1.511e-01, 1.263e-02, 2.948e-02, -1.334e-01, -1.636e-01, -1.273e-01, 9.285e-03, 1.307e-01, 2.548e-01, 5.932e-02, -4.128e-01, -2.761e-01, -2.370e-01, 1.457e-01, -2.416e-01) * s0[y+1][x+0];
	r += M4(4.642e-01, -1.397e-01, 7.835e-02, -5.858e-02, 2.034e-01, 7.930e-02, -2.247e-02, -2.552e-01, 7.258e-02, -3.512e-02, -3.498e-02, -2.445e-01, -1.016e-01, -1.225e-01, 2.601e-01, -2.919e-02) * s0[y+1][x+1];
	r += M4(-5.240e-01, 8.350e-02, -5.155e-01, 9.876e-01, -1.129e-01, 1.236e-01, 6.450e-03, 1.465e-02, 1.545e-01, -3.911e-01, 3.919e-01, 1.727e-01, 7.056e-02, 3.140e-02, 1.157e-01, -9.178e-02) * s0[y+1][x+2];
	r += M4(1.866e-01, 2.862e-02, -7.509e-02, -1.037e-01, -3.335e-02, 5.976e-02, 7.118e-02, 1.318e-01, 1.798e-01, -3.003e-01, -1.030e-01, 2.077e-01, -2.631e-01, -1.574e-01, 1.811e-01, 2.061e-01) * s0[y+2][x+0];
	r += M4(-1.350e-01, -4.584e-02, -2.900e-01, 2.596e-01, 1.974e-02, -6.661e-02, 9.197e-02, -9.244e-02, -5.239e-02, 1.190e-01, 4.239e-01, -4.107e-01, 1.066e-01, -3.511e-01, 3.955e-01, 3.662e-01) * s0[y+2][x+1];
	r += M4(3.469e-02, 2.196e-01, -2.673e-01, 4.948e-01, -2.286e-01, 5.258e-02, 8.242e-02, 1.812e-01, 1.708e-02, -2.368e-01, 4.306e-01, -1.144e-01, 6.065e-02, -5.768e-02, -2.271e-01, 3.733e-02) * s0[y+2][x+2];
	r += M4(7.739e-02, 3.034e-02, -5.302e-02, -2.806e-02, -9.451e-02, -8.443e-02, 8.662e-03, -5.978e-03, -4.916e-02, 1.670e-01, -1.422e-01, 1.034e-01, -4.479e-02, -9.146e-02, 2.757e-02, -8.916e-03) * s1[y+0][x+0];
	r += M4(-7.097e-02, -4.278e-01, 3.017e-01, -1.499e-01, 3.212e-02, -3.000e-02, 7.748e-02, 2.722e-02, -1.189e-01, 1.144e-01, -5.410e-02, 2.483e-01, 1.218e-01, 8.716e-02, -4.441e-02, -1.585e-02) * s1[y+0][x+1];
	r += M4(8.667e-02, -8.645e-02, 2.183e-01, -2.179e-01, -1.529e-01, -7.108e-03, -2.222e-01, 6.606e-02, -1.131e-01, 2.241e-02, 1.492e-02, 6.308e-02, -9.664e-02, 2.613e-02, -3.820e-02, 9.381e-02) * s1[y+0][x+2];
	r += M4(-4.973e-02, 1.217e-01, 1.069e-02, 9.628e-02, -5.572e-03, -3.997e-02, -2.280e-01, -3.972e-02, 3.113e-01, 6.818e-02, -7.747e-02, 1.405e-02, -1.309e-01, 1.312e-01, -3.266e-02, 3.379e-03) * s1[y+1][x+0];
	r += M4(4.195e-01, -1.659e-01, 2.099e-01, -3.266e-01, 2.313e-02, 3.485e-02, 1.149e-01, -2.934e-01, -5.538e-02, -2.083e-01, -1.993e-01, 9.232e-02, -3.888e-02, 1.511e-01, -1.779e-01, 4.802e-02) * s1[y+1][x+1];
	r += M4(6.069e-02, 3.662e-01, -2.066e-01, -9.241e-01, -1.367e-01, 1.441e-01, -8.823e-02, 7.956e-02, -4.424e-03, 9.420e-02, 2.435e-02, 1.829e-02, 6.039e-02, 2.057e-02, 2.635e-02, -1.078e-01) * s1[y+1][x+2];
	r += M4(1.260e-01, -1.313e-02, 2.874e-02, -4.494e-02, -1.280e-01, 5.019e-02, 1.285e-01, 1.483e-01, -6.983e-02, 6.874e-02, 2.762e-04, -2.848e-02, -4.389e-02, 7.837e-02, -4.098e-02, 6.222e-02) * s1[y+2][x+0];
	r += M4(-4.121e-01, 2.459e-03, -1.624e-01, 7.354e-02, 6.301e-02, -1.461e-01, 6.321e-02, -5.848e-02, 1.049e-01, -1.024e-01, 1.967e-01, -1.300e-01, 6.783e-01, 2.166e-01, -5.132e-01, -1.323e-01) * s1[y+2][x+1];
	r += M4(-1.854e-01, 4.821e-01, 4.018e-02, -5.355e-01, -4.006e-02, 1.174e-01, 1.008e-01, 5.994e-02, -4.935e-02, -6.790e-02, 2.966e-01, -8.558e-02, 2.729e-02, 6.627e-02, -4.179e-01, 1.025e-01) * s1[y+2][x+2];
	r += M4(-2.285e-02, 6.909e-02, -2.251e-01, -8.411e-02, 1.714e-02, 1.004e-02, 1.283e-01, 1.835e-02, -5.243e-02, -4.423e-01, -4.896e-02, -1.300e-01, 2.003e-02, 1.184e-01, -3.059e-01, 2.241e-02) * s2[y+0][x+0];
	r += M4(-5.492e-02, 1.716e-01, 1.323e-01, 7.337e-03, 1.033e-01, -2.699e-01, 2.362e-02, -6.827e-02, -1.232e-01, -1.544e-01, 2.474e-02, 5.295e-01, -3.938e-01, 2.448e-01, -4.271e-02, 1.423e-01) * s2[y+0][x+1];
	r += M4(1.275e-01, -2.626e-01, -2.778e-02, 1.790e-02, -4.549e-02, -1.822e-02, 6.276e-02, 7.153e-02, 3.252e-01, -1.714e-01, -5.992e-02, -1.891e-01, -2.305e-02, 1.795e-01, -1.821e-01, 1.401e-01) * s2[y+0][x+2];
	r += M4(1.733e-01, 1.146e-01, -9.630e-02, 2.160e-01, -6.702e-02, 5.642e-02, 1.920e-01, 8.885e-02, 4.816e-01, 1.239e-02, 5.866e-02, 4.254e-01, 2.627e-01, 4.648e-03, -1.282e-01, 1.341e-02) * s2[y+1][x+0];
	r += M4(-6.362e-02, -1.551e-01, -1.705e-01, -4.307e-01, 5.936e-02, -1.913e-02, -2.748e-02, -1.086e-01, 6.692e-02, 8.732e-01, -5.115e-02, 1.797e-01, 3.770e-02, -3.115e-01, -1.374e-01, 3.488e-01) * s2[y+1][x+1];
	r += M4(1.263e-02, 7.819e-01, -1.109e-01, -8.378e-02, -1.431e-01, -4.168e-02, -7.643e-02, -8.433e-02, -9.000e-02, -8.514e-02, 1.196e-01, -1.607e-01, -1.480e-01, 2.882e-01, -1.733e-01, 3.843e-02) * s2[y+1][x+2];
	r += M4(-5.970e-02, -9.555e-03, 1.065e-01, -1.275e-01, -6.586e-02, -4.945e-02, 6.027e-02, -2.090e-02, -9.989e-02, 7.475e-02, 2.692e-02, -8.460e-02, 4.163e-02, 9.506e-02, 3.373e-02, -5.349e-02) * s2[y+2][x+0];
	r += M4(2.470e-01, -2.273e-01, 9.000e-02, -3.228e-01, -2.037e-01, 7.751e-02, -2.534e-02, 2.230e-01, -2.198e-02, -2.515e-01, -6.541e-02, 1.123e-01, -9.014e-03, -1.323e-01, 3.693e-03, -9.303e-02) * s2[y+2][x+1];
	r += M4(-2.314e-01, -2.008e-01, -2.584e-01, -2.999e-01, 4.036e-02, 3.723e-02, -2.125e-01, -1.871e-01, -1.489e-01, 2.636e-01, 1.610e-01, -1.977e-01, -3.212e-03, 4.283e-02, -1.955e-01, 1.103e-01) * s2[y+2][x+2];
	r += M4(1.424e-02, -3.708e-03, -1.754e-01, -2.285e-02, -8.994e-02, -1.028e-01, 1.272e-01, 8.609e-02, -6.253e-02, 1.370e-01, 3.156e-02, 4.551e-02, 8.144e-02, 2.144e-01, 7.279e-02, -2.094e-02) * s3[y+0][x+0];
	r += M4(-8.473e-02, -6.265e-02, 1.215e-01, -1.019e-01, 1.111e-01, -2.196e-01, 4.007e-02, -2.529e-02, 1.089e-01, -1.355e-01, 4.349e-02, -1.535e-01, -9.052e-02, 5.014e-01, 3.374e-01, -1.534e-01) * s3[y+0][x+1];
	r += M4(1.465e-01, -2.008e-02, 2.286e-03, -5.647e-02, -3.461e-02, 1.194e-02, 6.578e-02, 1.835e-01, 8.607e-02, 5.334e-02, -4.067e-02, 5.101e-03, 4.524e-02, -1.744e-01, 6.902e-02, 1.415e-01) * s3[y+0][x+2];
	r += M4(1.860e-01, 4.782e-02, -1.079e-01, 5.133e-02, -1.636e-01, 2.727e-01, 5.696e-02, 7.599e-04, 2.139e-01, -1.561e-02, 2.156e-01, -6.076e-02, 8.033e-02, -1.121e-01, 1.375e-01, -7.208e-02) * s3[y+1][x+0];
	r += M4(-7.438e-02, -8.086e-02, 1.315e-01, 7.228e-02, 2.013e-02, 1.753e-01, -3.481e-02, 2.596e-02, -6.081e-02, 1.334e-01, -1.871e-01, 1.623e-02, -1.039e-01, -9.751e-02, 2.347e-01, -3.392e-01) * s3[y+1][x+1];
	r += M4(-1.707e-02, 3.504e-01, -3.154e-01, -3.642e-02, -1.779e-01, 1.603e-02, 1.611e-01, -9.240e-02, -1.058e-01, -2.140e-02, -2.127e-01, -3.887e-02, -5.936e-02, -2.648e-02, 2.246e-01, -1.616e-01) * s3[y+1][x+2];
	r += M4(-2.061e-03, 3.673e-02, 5.222e-02, 1.177e-01, -5.916e-02, -5.686e-02, 7.399e-02, 1.223e-01, -9.925e-03, -9.351e-02, 1.158e-01, -2.370e-02, 1.325e-03, 3.398e-02, 1.218e-01, -5.771e-02) * s3[y+2][x+0];
	r += M4(1.028e-02, -2.608e-02, 2.202e-01, -6.541e-03, -2.789e-01, 2.690e-01, -7.116e-02, 1.541e-01, -1.301e-01, -1.137e-01, -5.226e-03, -1.280e-01, -9.133e-02, -1.301e-01, 5.839e-03, 1.261e-01) * s3[y+2][x+1];
	r += M4(-1.299e-02, -9.994e-02, -1.724e-01, 2.360e-01, -7.251e-02, 1.644e-01, -7.216e-02, -2.512e-01, -8.316e-02, -1.731e-02, 5.887e-02, 1.768e-01, 1.626e-02, 1.394e-01, -1.147e-01, 1.027e-02) * s3[y+2][x+2];
	r += V4(-1.698e-01, 3.055e-02, -1.769e-02, -1.691e-02);
	return vec4(r);
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = in_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
			s2[ay][ax] = l1(x - 1, y - 1);
			s1[ay][ax] = -max(-s0[ay][ax], V4(0.0));
			s0[ay][ax] = max(s0[ay][ax], V4(0.0));
			s3[ay][ax] = -max(-s2[ay][ax], V4(0.0));
			s2[ay][ax] = max(s2[ay][ax], V4(0.0));
		}
	}
	barrier();
	imageStore(out_image, opos + ivec2(0, 0), f0(xy.x, xy.y));
	imageStore(out_image, opos + ivec2(1, 0), f1(xy.x, xy.y));
}


//!DESC CuNNy-4x8C-conv2
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv1
//!BIND LUMA
//!SAVE conv2
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
	#define V4 f16vec4
	#define M4 f16mat4
	#define F float16_t
#else
	#define V4 vec4
	#define M4 mat4
	#define F float
#endif
#define l0(x, y) V4(texelFetch(conv1_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv1_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 s0[10][10];
shared V4 s1[10][10];
shared V4 s2[10][10];
shared V4 s3[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-9.930e-03, 3.734e-02, -1.958e-01, -1.125e-01, -3.334e-02, -5.542e-02, 1.150e-01, 1.323e-03, -2.131e-01, 1.534e-02, 9.542e-02, -7.474e-02, -9.392e-02, 6.442e-03, 8.211e-02, -1.233e-01) * s0[y+0][x+0];
	r += M4(-1.418e-01, 1.095e-01, -2.818e-01, 7.824e-02, 1.174e-01, 4.978e-02, 4.290e-03, 4.310e-02, 5.384e-02, -7.737e-04, 8.801e-02, 1.171e-01, 6.973e-03, -8.809e-02, 1.080e-02, -1.401e-02) * s0[y+0][x+1];
	r += M4(8.935e-02, -5.023e-02, -1.919e-01, 1.179e-01, 1.344e-02, 1.433e-02, -7.472e-02, 7.150e-02, 7.744e-02, -8.029e-02, 5.470e-02, -3.301e-02, -8.510e-02, 5.519e-02, -4.729e-02, 8.741e-02) * s0[y+0][x+2];
	r += M4(-1.362e-01, -1.314e-01, 2.330e-02, -7.244e-02, -2.086e-01, 1.349e-02, -1.236e-01, 1.117e-01, -4.165e-02, 8.689e-02, 3.148e-04, -1.037e-01, 8.668e-02, -2.082e-01, 4.994e-02, -1.486e-01) * s0[y+1][x+0];
	r += M4(-3.391e-01, 9.356e-01, -1.319e-01, 5.517e-01, 7.549e-02, 9.415e-02, -6.217e-02, -7.224e-02, -7.686e-02, 4.141e-01, -6.606e-01, 1.099e-01, -1.363e-01, 8.952e-02, -1.264e-01, -9.305e-02) * s0[y+1][x+1];
	r += M4(-6.568e-03, 3.403e-01, 1.189e-01, -3.715e-01, 6.542e-02, 8.521e-03, -5.524e-02, 1.178e-01, 3.212e-01, -4.071e-01, 1.316e-02, 8.052e-02, 1.457e-01, -2.771e-01, -1.554e-02, 4.600e-02) * s0[y+1][x+2];
	r += M4(1.181e-02, -1.068e-01, 7.609e-02, -3.802e-02, -1.474e-01, -8.200e-02, 5.964e-02, 2.062e-02, 1.042e-01, 1.360e-01, 1.043e-01, 2.228e-02, 7.856e-02, 1.350e-01, -7.795e-02, -1.062e-01) * s0[y+2][x+0];
	r += M4(-2.038e-02, -4.485e-02, 2.236e-03, 1.021e-02, 2.039e-01, 8.428e-02, 6.021e-02, 1.506e-03, 9.611e-02, 1.744e-01, 1.405e-01, -3.075e-03, -1.682e-01, 1.059e-01, -2.827e-01, 7.291e-02) * s0[y+2][x+1];
	r += M4(-1.208e-01, -1.231e-01, 6.793e-02, -1.921e-01, -4.352e-02, -1.815e-02, 1.889e-02, -2.244e-01, -9.940e-03, -1.412e-01, 1.363e-02, -1.186e-02, 8.225e-02, 1.568e-02, 2.311e-02, 3.070e-01) * s0[y+2][x+2];
	r += M4(1.985e-02, -5.856e-02, -4.782e-02, 1.344e-02, -6.219e-01, 2.155e-01, 4.754e-03, 8.323e-01, -1.031e-01, 8.368e-02, -1.278e-02, -6.678e-02, -1.668e-01, 2.119e-01, 1.044e-01, -8.766e-02) * s1[y+0][x+0];
	r += M4(-1.027e-02, -6.106e-03, 1.585e-01, 8.257e-03, 2.427e-01, 6.736e-01, 8.360e-01, -1.014e+00, 2.076e-02, -1.746e-01, -8.624e-02, 9.206e-02, -2.469e-02, 1.097e-01, -5.501e-02, 5.613e-02) * s1[y+0][x+1];
	r += M4(-3.428e-02, -1.248e-01, 1.089e-01, 7.092e-02, -3.741e-01, 9.409e-01, -1.468e-01, -1.475e-01, 9.871e-02, -8.225e-02, -1.403e-01, -4.053e-02, -3.420e-02, -2.848e-02, -3.378e-02, 1.554e-02) * s1[y+0][x+2];
	r += M4(1.632e-01, -3.924e-02, 1.318e-02, 2.987e-02, 2.086e-01, -1.417e-01, 7.371e-01, 3.957e-01, -1.597e-01, 6.166e-02, 1.694e-02, -2.666e-01, 5.069e-01, -2.387e-01, 2.709e-01, -1.813e-02) * s1[y+1][x+0];
	r += M4(-1.572e-01, 8.628e-02, -1.968e-01, 6.426e-02, 2.587e+00, -2.249e+00, 1.745e+00, -2.299e+00, -3.735e-01, 2.815e-01, -1.723e-01, -1.050e-01, -6.769e-02, 8.747e-02, 7.581e-02, 1.675e-01) * s1[y+1][x+1];
	r += M4(-3.992e-02, 3.611e-02, 7.323e-02, 9.929e-02, -1.186e+00, 1.463e+00, 4.993e-02, -1.474e-01, 1.755e-01, -2.529e-01, -1.026e-01, -2.096e-01, 5.457e-02, -7.883e-03, 1.595e-01, -2.276e-01) * s1[y+1][x+2];
	r += M4(9.696e-02, 1.608e-03, -1.467e-02, 5.405e-03, 5.903e-02, 4.960e-01, -6.710e-02, -2.649e-01, -8.999e-02, -4.697e-02, 1.149e-01, -1.405e-01, 2.574e-01, 7.235e-02, 2.721e-02, 6.759e-02) * s1[y+2][x+0];
	r += M4(9.422e-02, 6.682e-03, -9.532e-02, -1.205e-01, 1.513e+00, 3.336e-02, -3.975e-01, 3.013e-01, 6.972e-02, 3.623e-01, 4.454e-01, 1.450e-02, -1.165e-01, 1.042e-01, 4.585e-02, 8.316e-02) * s1[y+2][x+1];
	r += M4(-6.616e-02, -1.393e-01, -8.164e-02, 1.049e-01, 2.439e-03, -5.844e-01, 1.166e-02, -5.394e-01, -6.319e-03, -5.559e-02, -1.360e-01, -5.075e-02, -5.476e-02, -3.513e-03, -4.027e-02, -1.276e-02) * s1[y+2][x+2];
	r += M4(5.774e-03, -1.142e-01, -6.341e-03, 9.504e-03, -2.019e-02, 1.178e-01, -1.239e-01, -6.265e-02, 1.743e-01, 1.170e-01, -2.803e-01, 8.426e-03, 6.579e-02, -6.237e-02, -9.647e-02, -1.734e-01) * s2[y+0][x+0];
	r += M4(-1.039e-01, 1.266e-01, -4.135e-01, -5.139e-02, 3.262e-02, 2.260e-01, -1.548e-01, 7.897e-02, 1.821e-01, -3.429e-02, -4.295e-01, 5.493e-01, -3.029e-02, 4.063e-02, -9.831e-02, -1.119e-01) * s2[y+0][x+1];
	r += M4(8.705e-02, -1.628e-01, -2.082e-02, 2.386e-01, -2.638e-02, 3.633e-02, -8.377e-02, 2.205e-04, -1.704e-02, 2.886e-01, 4.090e-02, 2.952e-02, -5.800e-02, -1.229e-04, 7.966e-02, 4.725e-02) * s2[y+0][x+2];
	r += M4(-4.216e-01, -1.811e-01, 4.128e-02, 1.656e-02, 2.550e-01, -2.309e-01, -1.616e-01, -4.776e-02, -1.460e-01, 5.979e-03, 6.504e-01, 3.255e-01, 4.834e-02, -5.877e-02, -9.510e-02, -1.284e-01) * s2[y+1][x+0];
	r += M4(3.935e-01, 2.687e-01, 6.372e-01, 3.370e-01, -3.843e-02, -1.979e-01, 2.060e-01, 4.282e-01, 1.815e-01, 2.289e-01, -5.056e-02, 6.419e-02, -1.711e-01, 6.559e-02, -7.098e-02, -3.591e-02) * s2[y+1][x+1];
	r += M4(1.613e-01, 1.393e-01, 2.991e-01, -6.314e-01, -3.894e-02, 2.199e-01, -6.723e-02, 2.871e-02, -7.545e-02, 2.193e-01, -3.187e-02, -5.728e-02, 2.395e-03, -5.741e-02, -1.352e-02, -1.802e-01) * s2[y+1][x+2];
	r += M4(6.556e-02, 1.142e-01, -1.645e-01, -5.976e-02, 7.509e-02, -2.089e-01, 2.024e-02, 2.058e-01, -1.014e-02, 2.054e-01, 4.282e-02, 2.296e-01, 1.234e-01, 4.480e-02, 5.745e-02, -6.353e-02) * s2[y+2][x+0];
	r += M4(-5.759e-02, -5.250e-02, -1.440e-01, 9.277e-02, 2.176e-01, 3.468e-01, 3.314e-01, 6.966e-02, -2.345e-02, 1.494e-01, 5.358e-02, -8.034e-02, 5.720e-03, 3.874e-02, -3.832e-03, -2.359e-03) * s2[y+2][x+1];
	r += M4(-1.609e-02, -1.918e-01, -1.425e-01, -1.703e-01, -1.500e-02, -6.545e-03, 9.686e-02, -1.900e-01, 8.107e-02, -3.080e-02, 1.226e-01, -1.579e-01, -3.369e-02, -9.762e-02, -6.607e-03, 2.198e-02) * s2[y+2][x+2];
	r += M4(4.633e-03, -8.913e-02, 9.933e-04, -1.742e-02, -7.972e-02, -1.862e-02, 1.117e-02, -6.229e-02, 2.596e-02, 1.498e-01, 1.313e-01, 1.353e-01, 3.725e-02, -3.252e-01, 1.333e-01, -9.904e-02) * s3[y+0][x+0];
	r += M4(-9.991e-03, 1.284e-01, -2.101e-01, -9.336e-03, 5.842e-02, -6.447e-02, 9.733e-03, -4.110e-02, -5.698e-02, 1.411e-01, -2.571e-01, -2.107e-01, -1.002e-01, -3.572e-01, 1.749e-01, -7.123e-01) * s3[y+0][x+1];
	r += M4(6.733e-04, -1.136e-02, -2.340e-02, 1.461e-01, -2.545e-02, 2.599e-02, 6.802e-02, 1.731e-02, 3.266e-02, 6.946e-02, 2.234e-02, 2.558e-02, -1.776e-01, -1.033e-01, 7.741e-02, 1.380e-01) * s3[y+0][x+2];
	r += M4(-1.982e-01, -1.546e-01, 1.137e-02, 1.190e-02, 3.767e-01, 1.100e-01, -1.859e-01, -1.497e-01, -1.898e-01, -2.958e-02, -4.514e-02, -1.744e-02, 1.357e-01, -3.079e-01, -2.589e-01, -1.409e-01) * s3[y+1][x+0];
	r += M4(2.549e-01, -1.578e-01, 2.900e-01, -1.750e-03, 1.433e-01, -1.432e-01, 1.593e-02, -3.162e-01, 2.229e-01, -5.488e-01, -1.033e-01, -4.232e-01, -1.579e-01, -4.197e-01, -3.405e-02, -4.842e-01) * s3[y+1][x+1];
	r += M4(1.524e-02, 4.002e-02, 4.247e-02, -9.613e-02, -6.862e-02, 9.719e-02, 1.558e-01, -7.563e-02, -1.148e-01, 6.968e-02, 3.242e-02, 1.354e-01, -1.549e-02, -1.316e-01, -1.166e-01, 4.796e-01) * s3[y+1][x+2];
	r += M4(-9.606e-02, 2.862e-02, -5.701e-02, -9.493e-02, 1.944e-01, -5.216e-02, 1.492e-01, -3.919e-02, -1.990e-02, 7.245e-02, 1.138e-01, -2.778e-02, 2.057e-01, -1.667e-01, -1.023e-01, -1.213e-01) * s3[y+2][x+0];
	r += M4(-1.836e-02, 2.401e-02, 3.503e-02, 1.393e-01, 3.820e-02, 8.124e-02, 3.042e-02, -1.490e-01, 8.931e-03, 1.189e-01, 2.387e-01, 3.077e-02, -6.655e-03, -2.240e-01, -1.312e-01, 1.268e-01) * s3[y+2][x+1];
	r += M4(-3.335e-02, -2.219e-02, 3.926e-02, -1.910e-01, 2.515e-02, -1.662e-01, 2.782e-03, -2.495e-01, 3.412e-02, 5.719e-02, 9.643e-03, -8.223e-02, -1.458e-01, -1.975e-01, -1.772e-01, 4.746e-03) * s3[y+2][x+2];
	r += V4(-4.311e-02, -6.421e-02, 1.053e-02, -2.900e-02);
	return vec4(r);
}
vec4 f1(int x, int y) {
	V4 r = V4(0.0);
	r += M4(5.547e-02, 2.404e-02, -2.974e-02, 3.685e-02, 2.085e-02, -8.506e-03, 3.794e-02, 3.895e-02, 6.931e-03, 7.285e-02, -3.952e-02, 1.268e-03, -7.030e-02, -5.092e-02, 6.203e-03, 1.670e-02) * s0[y+0][x+0];
	r += M4(-6.993e-02, 1.611e-01, 9.971e-02, 3.600e-01, 8.225e-02, -4.759e-03, -1.486e-02, -4.294e-02, 3.034e-02, -2.855e-02, 9.278e-03, -3.670e-02, 1.400e-01, 6.381e-03, -2.611e-02, -1.262e-01) * s0[y+0][x+1];
	r += M4(-8.438e-02, -2.190e-01, -1.604e-01, 3.685e-01, -2.463e-02, -1.878e-02, -9.680e-02, 7.100e-03, 4.239e-02, -2.571e-02, -5.321e-02, -1.354e-01, -6.951e-03, 3.079e-02, 3.912e-02, -1.304e-01) * s0[y+0][x+2];
	r += M4(1.718e-01, -1.317e-01, 6.796e-02, 3.437e-02, 1.387e-02, 7.725e-02, -2.164e-02, 1.031e-02, 2.849e-02, 5.492e-03, -6.530e-02, 2.885e-02, -4.653e-03, -1.173e-01, 1.471e-03, -2.377e-01) * s0[y+1][x+0];
	r += M4(-2.585e-01, 9.212e-02, 9.689e-02, 2.978e-01, 6.167e-02, 2.181e-02, -1.965e-01, -2.012e-01, 6.505e-02, -2.322e-01, 2.106e-01, 1.804e-02, 2.286e-01, -3.654e-01, 1.859e-02, -2.022e-01) * s0[y+1][x+1];
	r += M4(-2.694e-01, -2.324e-01, 7.161e-02, 1.666e-01, -1.680e-02, -1.343e-02, -1.509e-01, -1.189e-02, 1.412e-01, 1.171e-01, 1.549e-03, -1.166e-01, 2.827e-01, 5.369e-02, -4.190e-02, -2.802e-01) * s0[y+1][x+2];
	r += M4(-5.079e-02, -8.084e-02, -2.822e-02, -7.215e-02, -5.746e-02, 6.690e-02, -5.304e-02, 8.717e-02, 1.831e-01, 5.523e-02, -5.920e-02, 1.596e-02, 6.025e-02, -1.881e-01, 9.023e-03, -1.043e-01) * s0[y+2][x+0];
	r += M4(-1.953e-01, -4.320e-02, 8.591e-02, 6.743e-02, -1.687e-01, -1.349e-01, 7.966e-02, 1.465e-02, 1.561e-01, 8.195e-02, 3.453e-02, -2.999e-01, -2.768e-01, -5.151e-02, 6.392e-02, -2.831e-01) * s0[y+2][x+1];
	r += M4(8.644e-02, 4.742e-02, -1.541e-01, -9.099e-02, 7.613e-04, -4.187e-02, -6.827e-02, -3.281e-02, -8.367e-02, 6.660e-02, -1.809e-02, 3.093e-02, 8.472e-02, 3.676e-02, 1.231e-02, -3.293e-02) * s0[y+2][x+2];
	r += M4(-5.757e-02, 5.577e-02, -3.276e-02, -5.515e-02, 1.905e-01, 7.684e-01, -3.513e-01, 4.804e-01, -3.409e-02, -5.638e-04, -3.055e-02, 3.837e-02, -2.272e-02, 7.343e-02, -4.426e-02, 1.835e-01) * s1[y+0][x+0];
	r += M4(5.220e-02, -2.133e-02, 4.618e-02, 1.875e-01, -2.448e-01, 1.879e+00, 1.821e-01, 1.318e-01, -7.620e-02, 4.853e-02, -1.076e-02, 2.737e-02, 6.021e-02, 9.939e-02, -8.461e-02, 1.762e-01) * s1[y+0][x+1];
	r += M4(-9.317e-02, 5.840e-02, -6.286e-02, -4.641e-04, 3.468e-01, 1.322e+00, 3.802e-01, -1.712e-01, -9.887e-02, -3.003e-02, -3.593e-02, 6.197e-03, -1.115e-01, 1.256e-02, 1.495e-02, 4.525e-02) * s1[y+0][x+2];
	r += M4(8.436e-02, -5.585e-02, -1.043e-02, -5.450e-02, 6.360e-01, 1.416e+00, 1.283e-01, 3.648e-01, -5.478e-02, 1.561e-01, 3.742e-02, -3.889e-02, 1.397e-01, 2.093e-01, 7.603e-02, 2.115e-01) * s1[y+1][x+0];
	r += M4(2.646e-01, -1.200e-01, 1.113e-01, 8.328e-02, 2.063e+00, 4.387e+00, -1.983e+00, -1.982e+00, 1.268e-01, -1.857e-01, 2.836e-01, 1.727e-01, 2.204e-02, 1.225e-01, -3.362e-02, 1.158e-01) * s1[y+1][x+1];
	r += M4(1.497e-01, 6.038e-02, -2.383e-02, 7.690e-02, -8.489e-01, 1.626e+00, -1.022e+00, -1.972e-01, 1.106e-02, -3.417e-03, -1.026e-01, 2.712e-02, 2.436e-01, 3.161e-03, -1.411e-01, -9.260e-02) * s1[y+1][x+2];
	r += M4(-4.857e-02, 4.805e-03, -5.701e-02, 2.575e-02, -5.308e-01, 3.129e-01, -4.791e-02, 1.286e-01, -1.557e-02, 1.180e-01, 4.114e-04, -5.289e-02, -2.617e-01, 3.860e-02, 2.945e-02, 9.775e-02) * s1[y+2][x+0];
	r += M4(-2.466e-01, -5.810e-02, 7.251e-02, -8.216e-02, -1.590e+00, 1.204e+00, 5.765e-01, 3.018e-01, -1.108e-01, -7.862e-02, -5.928e-04, -1.470e-01, -1.271e-01, 2.550e-01, 6.436e-03, 1.086e-01) * s1[y+2][x+1];
	r += M4(-1.083e-02, 4.628e-02, -1.051e-01, -6.302e-02, -7.028e-02, 9.878e-01, 7.252e-02, 3.275e-01, -2.578e-01, -5.240e-02, -1.516e-02, 1.267e-01, 9.644e-02, 1.106e-01, -4.048e-02, -2.038e-02) * s1[y+2][x+2];
	r += M4(6.037e-02, -8.210e-02, -1.388e-01, 9.085e-02, -1.786e-01, 2.582e-02, 4.187e-03, 5.064e-02, -2.777e-02, -6.395e-02, 9.672e-02, -1.466e-01, -6.115e-02, 4.560e-02, 7.016e-02, 1.545e-01) * s2[y+0][x+0];
	r += M4(6.075e-01, 5.322e-02, -2.163e-01, 1.502e-02, 6.240e-03, 7.216e-02, -3.918e-02, 9.518e-02, -4.649e-02, 7.143e-03, -5.687e-02, -7.464e-02, 9.694e-02, 2.040e-01, -7.590e-02, -1.737e-01) * s2[y+0][x+1];
	r += M4(1.788e-01, -1.451e-01, -2.121e-01, -1.989e-02, -8.908e-02, -4.746e-03, -2.642e-03, -1.869e-02, 1.218e-01, 1.299e-01, 5.364e-02, -1.886e-01, 1.738e-02, 7.551e-02, 1.823e-03, -4.286e-02) * s2[y+0][x+2];
	r += M4(6.143e-02, 2.337e-01, -1.504e-01, 6.831e-02, -2.204e-01, 1.709e-01, 1.154e-02, 1.874e-01, -7.503e-02, 9.645e-02, 1.346e-02, -2.141e-01, -9.625e-02, -2.752e-01, 3.440e-02, 2.314e-01) * s2[y+1][x+0];
	r += M4(-5.395e-01, 4.659e-01, -3.704e-02, -3.749e-01, -3.160e-01, -9.622e-02, 7.971e-02, 2.099e-02, -3.997e-01, -5.257e-02, 4.096e-02, -7.305e-02, -2.790e-02, -2.815e-02, -6.400e-02, -2.446e-02) * s2[y+1][x+1];
	r += M4(-1.979e-01, -2.566e-01, -7.215e-02, 1.636e-01, -3.303e-01, -4.822e-02, 8.242e-02, 6.660e-02, -6.594e-02, 2.804e-02, 1.896e-01, -9.886e-02, 9.068e-03, -1.079e-02, 3.193e-02, 1.644e-02) * s2[y+1][x+2];
	r += M4(7.113e-02, -2.090e-01, -1.030e-01, 1.245e-01, -2.286e-01, -1.479e-02, 5.125e-02, 1.856e-01, 1.283e-02, 1.323e-01, -4.406e-03, -1.265e-01, -1.194e-01, -4.632e-02, 5.586e-02, 1.753e-02) * s2[y+2][x+0];
	r += M4(-2.862e-01, -3.257e-02, -1.342e-01, -1.363e-01, 1.441e-01, 1.610e-01, 7.854e-03, 3.687e-02, 2.611e-01, -5.373e-02, -3.291e-02, -1.733e-01, 6.258e-02, 2.092e-02, 1.181e-02, -6.583e-02) * s2[y+2][x+1];
	r += M4(2.041e-01, 7.881e-02, -1.979e-01, -9.185e-02, 9.879e-02, 3.611e-02, -1.067e-01, -9.585e-02, 1.353e-01, -5.261e-02, 1.804e-02, -4.361e-02, 4.437e-02, 2.542e-02, -4.792e-02, -7.104e-02) * s2[y+2][x+2];
	r += M4(-9.350e-02, 2.572e-02, -5.645e-02, 1.401e-02, 1.636e-02, -4.229e-02, -5.371e-02, 1.598e-03, 3.012e-01, -1.463e-01, -1.685e-02, -2.631e-02, 1.987e-01, -7.550e-02, -1.201e-01, 8.314e-03) * s3[y+0][x+0];
	r += M4(1.919e-01, -2.385e-02, -7.984e-02, 9.016e-02, 2.139e-02, 4.623e-02, 1.179e-02, 2.658e-02, -1.019e-02, 9.301e-02, 1.204e-01, -2.041e-01, 5.494e-01, -2.913e-02, -2.090e-02, -2.002e-01) * s3[y+0][x+1];
	r += M4(3.633e-02, -4.411e-02, -1.591e-01, 3.261e-02, 2.827e-02, -6.197e-02, 1.526e-03, 1.926e-02, 1.263e-01, -4.429e-03, -4.389e-02, -2.149e-02, 2.919e-01, 2.045e-01, -4.751e-02, -1.065e-01) * s3[y+0][x+2];
	r += M4(6.739e-02, 2.774e-02, -2.567e-02, 1.470e-01, -1.326e-01, 3.671e-02, 1.302e-01, -1.784e-01, 3.400e-03, -2.355e-02, -7.836e-02, 1.451e-01, 3.815e-01, -1.270e-01, -1.096e-02, 5.464e-02) * s3[y+1][x+0];
	r += M4(2.797e-02, 2.492e-01, 2.491e-02, -2.676e-02, -8.669e-02, -5.799e-02, 1.670e-01, -1.127e-01, -1.994e-01, 8.682e-02, 3.823e-02, -2.380e-01, 4.129e-01, -2.654e-01, -2.543e-01, 5.771e-02) * s3[y+1][x+1];
	r += M4(-1.056e-01, -4.718e-02, 1.101e-01, 6.079e-02, 6.607e-02, -9.730e-02, -4.935e-02, 4.306e-02, -1.665e-01, -7.154e-02, 1.517e-01, 6.806e-02, 4.516e-01, 6.277e-02, 8.659e-02, -6.970e-02) * s3[y+1][x+2];
	r += M4(3.270e-02, -6.626e-02, -8.718e-02, 5.114e-02, -1.000e-01, -8.643e-02, 4.725e-02, -1.993e-02, 6.192e-02, -2.697e-03, -4.763e-03, -3.791e-02, 7.939e-02, -1.939e-01, 1.977e-02, -8.263e-02) * s3[y+2][x+0];
	r += M4(-3.967e-02, -2.547e-02, -1.559e-03, -4.247e-02, 1.636e-01, -1.693e-01, 4.454e-02, -4.226e-02, 3.869e-01, -6.930e-02, -1.297e-01, -1.120e-01, -1.121e-02, -3.277e-02, 2.159e-02, 9.621e-02) * s3[y+2][x+1];
	r += M4(2.371e-02, 3.645e-03, -1.038e-01, -4.792e-02, 1.765e-01, 4.297e-02, -8.028e-02, -7.430e-02, 8.499e-02, 5.042e-02, 1.275e-03, -8.965e-02, -4.131e-01, 5.973e-02, -7.421e-02, -3.334e-02) * s3[y+2][x+2];
	r += V4(4.211e-02, 2.998e-02, 2.746e-01, 7.247e-02);
	return vec4(r);
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv1_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
			s2[ay][ax] = l1(x - 1, y - 1);
			s1[ay][ax] = -max(-s0[ay][ax], V4(0.0));
			s0[ay][ax] = max(s0[ay][ax], V4(0.0));
			s3[ay][ax] = -max(-s2[ay][ax], V4(0.0));
			s2[ay][ax] = max(s2[ay][ax], V4(0.0));
		}
	}
	barrier();
	imageStore(out_image, opos + ivec2(0, 0), f0(xy.x, xy.y));
	imageStore(out_image, opos + ivec2(1, 0), f1(xy.x, xy.y));
}


//!DESC CuNNy-4x8C-conv3
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv2
//!BIND LUMA
//!SAVE conv3
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
	#define V4 f16vec4
	#define M4 f16mat4
	#define F float16_t
#else
	#define V4 vec4
	#define M4 mat4
	#define F float
#endif
#define l0(x, y) V4(texelFetch(conv2_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv2_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 s0[10][10];
shared V4 s1[10][10];
shared V4 s2[10][10];
shared V4 s3[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-8.811e-03, 9.453e-02, 3.366e-02, -4.841e-03, -8.774e-04, 6.395e-02, -9.955e-02, 2.629e-02, 6.514e-02, 1.510e-01, -1.759e-01, 2.951e-02, 2.577e-02, -6.722e-02, 9.737e-02, 4.019e-02) * s0[y+0][x+0];
	r += M4(-9.287e-03, 1.128e-01, 1.501e-01, 2.434e-03, 3.910e-02, -7.482e-02, -9.019e-02, 8.452e-02, 1.257e-02, -1.284e-01, -1.206e-01, 1.424e-01, -1.548e-01, -4.805e-03, 1.015e-01, -4.821e-02) * s0[y+0][x+1];
	r += M4(-7.861e-02, 1.240e-01, 1.740e-01, -1.019e-01, -9.016e-02, -4.781e-02, 2.964e-02, -1.212e-01, -1.680e-02, -1.588e-01, -1.362e-02, -6.171e-02, 1.731e-03, -1.706e-02, 1.712e-02, -5.604e-02) * s0[y+0][x+2];
	r += M4(-6.032e-02, -9.691e-02, -1.329e-01, -4.762e-03, -5.310e-02, 3.933e-02, 1.026e-01, -6.735e-03, 1.077e-01, 2.369e-02, -2.194e-01, 1.480e-01, -3.215e-02, 1.285e-01, -2.403e-02, 1.353e-01) * s0[y+1][x+0];
	r += M4(-2.146e-01, 2.586e-01, -1.565e-01, 4.132e-02, 3.284e-01, -1.588e-01, -7.946e-02, -2.568e-01, 2.013e-01, -5.088e-03, 6.712e-02, 1.857e-01, 1.254e-01, -1.359e-02, -1.435e-01, -1.772e-01) * s0[y+1][x+1];
	r += M4(-2.431e-01, -1.741e-02, 3.416e-01, -1.080e-01, -1.632e-01, 5.640e-02, -4.693e-02, -2.110e-01, -4.111e-01, -2.550e-01, 4.219e-01, -7.349e-02, 6.820e-02, -3.616e-02, 2.896e-02, -6.739e-02) * s0[y+1][x+2];
	r += M4(-6.229e-02, 5.820e-02, -8.217e-02, -1.239e-02, -4.231e-02, -1.805e-01, 9.310e-03, 7.507e-02, 1.846e-01, -6.593e-01, 2.612e-01, -1.089e-01, -8.189e-02, 2.926e-02, -1.384e-02, 1.189e-01) * s0[y+2][x+0];
	r += M4(-9.500e-02, 1.025e-01, 4.653e-02, -1.627e-01, 5.659e-02, -2.169e-02, 2.760e-02, -6.812e-02, -1.470e-01, -4.540e-01, -3.887e-01, -9.189e-01, -4.596e-02, -2.239e-02, -5.799e-02, -5.771e-02) * s0[y+2][x+1];
	r += M4(-6.005e-02, 1.804e-01, 8.352e-04, -8.180e-02, -7.447e-03, -1.158e-01, 2.218e-02, 1.346e-02, -4.012e-01, -4.110e-01, 3.006e-03, -2.338e-01, -1.132e-03, -1.815e-02, 3.602e-03, 7.201e-03) * s0[y+2][x+2];
	r += M4(2.356e-02, 5.177e-02, 6.145e-02, -4.093e-02, -2.665e-02, 2.425e-01, -2.968e-01, 1.207e-02, 1.564e-02, 7.227e-02, -1.304e-01, 1.867e-02, -1.923e-01, 2.185e-01, 2.135e-01, 1.132e-01) * s1[y+0][x+0];
	r += M4(-1.480e-02, 7.634e-03, 1.633e-01, 1.479e-01, 1.502e-02, 1.949e-01, -2.515e-01, 1.884e-01, 4.350e-02, -3.689e-02, -7.599e-02, 1.183e-01, 9.876e-02, -1.178e-01, -2.444e-02, -3.545e-01) * s1[y+0][x+1];
	r += M4(-9.482e-02, -8.363e-02, 7.732e-02, -5.588e-02, -1.370e-01, 8.863e-02, 1.109e-01, -6.721e-02, -1.195e-01, 4.987e-02, 3.837e-02, -3.380e-02, -9.112e-02, 5.699e-03, 2.881e-01, 2.523e-01) * s1[y+0][x+2];
	r += M4(1.061e-01, -2.099e-01, -1.733e-01, 3.458e-02, 1.085e-01, 5.658e-01, -2.194e-01, -1.934e-01, 9.029e-02, 1.468e-02, -1.548e-01, -6.446e-02, -1.405e-01, 1.053e-01, 4.118e-01, 1.304e-02) * s1[y+1][x+0];
	r += M4(-3.622e-01, 2.630e-02, -8.776e-02, 4.593e-01, 2.242e-01, 9.327e-02, -2.143e-01, 9.830e-02, 7.486e-02, 1.454e-01, -1.880e-01, 1.081e-01, 3.531e-01, 9.979e-01, 1.776e-01, -3.298e-01) * s1[y+1][x+1];
	r += M4(1.844e-01, -2.141e-01, 1.852e-01, -2.700e-01, -4.639e-01, 2.718e-01, -3.193e-01, -2.514e-02, -1.240e-01, 5.410e-02, 5.955e-02, -9.077e-02, 1.468e-03, 9.003e-02, 2.905e-01, -3.129e-02) * s1[y+1][x+2];
	r += M4(6.119e-02, 1.445e-01, 3.456e-02, 2.026e-02, 5.940e-02, -2.395e-02, 7.188e-02, -1.520e-01, 7.004e-02, -1.084e-01, -3.308e-03, -8.987e-03, -2.472e-02, 2.807e-01, 2.118e-02, 1.194e-02) * s1[y+2][x+0];
	r += M4(6.265e-02, -2.465e-01, -9.292e-03, 1.023e-01, 2.440e-01, -2.895e-01, -4.745e-01, 6.578e-02, -8.960e-02, 8.091e-02, -6.073e-02, -4.124e-03, -4.826e-02, 6.190e-01, 9.241e-02, 4.574e-02) * s1[y+2][x+1];
	r += M4(-7.095e-02, 3.936e-02, -1.305e-01, -1.284e-01, -2.478e-01, 1.940e-01, -2.174e-01, -1.725e-01, -1.496e-01, 4.196e-02, -5.219e-02, -1.646e-03, 4.451e-02, -5.452e-02, 2.836e-02, -4.997e-02) * s1[y+2][x+2];
	r += M4(1.726e-02, 2.664e-01, -9.398e-02, 1.647e-01, 5.775e-02, -4.104e-02, -5.352e-02, 7.162e-02, 6.611e-02, 5.233e-03, -3.601e-02, -4.362e-02, -1.945e-02, -3.953e-04, 3.670e-03, -4.769e-02) * s2[y+0][x+0];
	r += M4(-3.338e-01, 1.640e-01, -4.609e-01, -1.931e-01, 4.813e-02, 9.687e-02, 1.090e-02, 4.913e-02, -7.986e-02, 3.920e-02, -1.443e-02, 3.276e-02, -4.212e-02, 1.600e-02, 4.000e-02, -5.342e-02) * s2[y+0][x+1];
	r += M4(-4.984e-02, 1.694e-01, -2.261e-01, 1.393e-01, 5.830e-02, -4.678e-02, 1.911e-01, -1.869e-02, 5.761e-02, 5.733e-03, 1.964e-02, 1.115e-01, -9.523e-02, -1.573e-01, 2.501e-01, -1.249e-01) * s2[y+0][x+2];
	r += M4(-4.396e-01, -3.338e-01, -2.614e-02, 1.219e-01, -2.327e-02, -4.487e-02, -9.203e-02, -2.210e-03, 1.211e-01, -3.127e-02, 1.409e-01, 6.620e-02, 1.038e-01, -2.782e-02, -1.547e-01, -1.282e-01) * s2[y+1][x+0];
	r += M4(-4.535e-01, 4.436e-01, 6.340e-01, -1.961e-01, -1.261e-01, -6.140e-02, -3.698e-02, 4.111e-01, -3.675e-03, -7.092e-02, -7.768e-02, -1.401e-01, 6.307e-02, -4.225e-02, -3.663e-01, 7.715e-01) * s2[y+1][x+1];
	r += M4(1.135e-01, -3.259e-02, 2.747e-02, 3.111e-01, -1.706e-01, -8.204e-02, 3.483e-02, 4.061e-02, -1.407e-01, 1.625e-02, -1.821e-01, -3.285e-02, -2.089e-01, -9.607e-02, -1.255e-01, -4.306e-01) * s2[y+1][x+2];
	r += M4(-2.885e-02, -1.686e-01, -3.477e-01, 7.757e-02, 1.106e-01, 6.526e-02, 7.965e-02, -3.047e-02, 2.418e-02, 6.647e-03, -7.752e-02, 5.667e-02, 8.667e-02, 5.755e-03, -5.147e-02, 2.520e-02) * s2[y+2][x+0];
	r += M4(-1.968e-01, 2.427e-01, -2.733e-01, -1.529e-01, 9.575e-02, -7.450e-02, 3.811e-03, 1.926e-01, -2.035e-01, 1.297e-01, 1.914e-01, -1.429e-02, -5.937e-02, -3.374e-01, -2.839e-02, -3.436e-02) * s2[y+2][x+1];
	r += M4(5.689e-02, -2.513e-02, -2.640e-02, -7.894e-03, -7.022e-02, 3.962e-02, -3.106e-02, -1.485e-01, 1.581e-01, -4.728e-02, 5.941e-02, -5.533e-02, -1.576e-01, 3.699e-02, -1.720e-01, -3.277e-01) * s2[y+2][x+2];
	r += M4(-4.123e-02, -2.071e-02, 1.517e-02, -5.563e-02, 6.522e-02, -1.009e-01, 4.144e-03, 2.328e-02, 3.350e-02, 4.395e-02, -1.773e-02, 2.454e-01, -3.220e-03, 6.193e-03, 6.699e-03, 5.836e-03) * s3[y+0][x+0];
	r += M4(2.241e-02, 4.795e-02, 6.275e-02, -5.900e-03, 4.027e-03, 1.880e-01, 2.327e-01, 3.341e-02, 1.009e-01, -1.071e-01, -1.901e-01, -6.517e-02, -2.083e-02, 3.254e-02, -9.597e-02, 3.659e-02) * s3[y+0][x+1];
	r += M4(5.187e-02, -6.290e-03, -9.532e-03, 8.379e-02, 6.367e-02, -1.058e-01, 1.713e-01, -7.607e-02, -5.739e-02, 1.031e-01, 2.576e-02, 1.082e-01, 2.904e-02, -1.042e-01, 8.911e-02, -4.803e-02) * s3[y+0][x+2];
	r += M4(4.919e-02, -6.396e-02, 3.950e-02, 2.034e-02, -7.742e-02, -1.111e-01, -9.897e-03, 3.895e-02, 3.028e-01, 4.943e-02, 9.211e-02, -6.288e-03, 4.246e-02, 2.294e-02, 8.503e-02, 1.387e-02) * s3[y+1][x+0];
	r += M4(-9.742e-02, 1.102e-01, 3.398e-01, -2.006e-01, -1.939e-01, 8.415e-01, 2.157e-02, 3.908e-01, 3.544e-01, 1.676e-01, 3.798e-01, -1.105e-01, 1.052e-01, -3.194e-02, 1.527e-01, -1.295e-02) * s3[y+1][x+1];
	r += M4(6.862e-02, -1.859e-03, 5.092e-02, 1.485e-01, 1.354e-01, -8.129e-02, 1.171e-02, 3.057e-02, -3.594e-01, 2.980e-01, 1.066e-01, -1.787e-01, -1.879e-01, 3.485e-02, 5.067e-02, 1.244e-01) * s3[y+1][x+2];
	r += M4(-1.128e-02, 8.268e-02, 2.481e-02, 3.204e-03, -2.570e-02, 6.011e-02, 3.219e-02, -3.805e-02, 7.147e-02, 9.837e-02, -7.863e-02, -9.754e-02, 8.677e-02, 8.842e-02, 2.699e-02, 2.079e-03) * s3[y+2][x+0];
	r += M4(-1.123e-01, 1.281e-01, 9.550e-02, -6.228e-02, -5.779e-02, 4.454e-02, -8.724e-02, 1.029e-01, -1.173e-01, 3.128e-01, -4.338e-02, 2.096e-01, -5.579e-02, -1.091e-01, 1.402e-01, -8.988e-02) * s3[y+2][x+1];
	r += M4(7.143e-02, 1.268e-01, -2.580e-02, 6.665e-02, 1.721e-01, -1.536e-02, 3.774e-02, -2.971e-02, 5.337e-03, -1.161e-01, -2.499e-02, -2.132e-01, -5.036e-02, -8.724e-02, 8.732e-02, -8.042e-02) * s3[y+2][x+2];
	r += V4(-7.150e-03, -3.780e-02, -2.161e-02, -1.175e-02);
	return vec4(r);
}
vec4 f1(int x, int y) {
	V4 r = V4(0.0);
	r += M4(3.237e-02, -3.001e-03, 2.771e-02, -1.628e-02, 1.848e-02, -4.382e-02, 4.062e-02, 2.299e-02, -6.478e-03, 8.770e-03, -1.951e-02, 5.433e-02, 1.544e-02, -2.412e-03, 6.670e-02, -6.823e-02) * s0[y+0][x+0];
	r += M4(4.122e-03, 5.776e-02, 8.616e-02, 5.424e-02, -2.120e-02, 2.297e-02, -4.705e-02, -1.141e-01, 2.261e-02, 3.080e-02, -2.251e-01, 2.323e-01, -1.072e-01, 1.410e-02, 6.696e-02, -1.455e-02) * s0[y+0][x+1];
	r += M4(6.813e-02, 4.259e-02, 2.028e-01, 3.152e-02, 7.902e-03, -2.145e-02, -6.143e-02, -2.807e-02, 6.874e-02, -3.026e-02, -9.247e-02, 1.050e-01, -5.289e-02, 7.147e-03, 5.281e-03, 3.054e-02) * s0[y+0][x+2];
	r += M4(-1.499e-01, -3.901e-02, -1.001e-02, 4.285e-02, -5.858e-02, -6.234e-03, 8.231e-02, 8.366e-02, 4.337e-02, -6.486e-03, 1.792e-01, -1.561e-01, -1.484e-01, 9.628e-02, 1.599e-03, 1.821e-01) * s0[y+1][x+0];
	r += M4(-5.413e-01, -1.396e-01, -3.094e-01, -1.237e-02, -7.210e-02, -1.144e-01, 8.630e-02, 8.352e-02, -4.340e-01, -7.823e-02, 4.248e-01, -1.971e-01, 1.002e-02, 8.162e-02, 1.468e-02, 9.289e-02) * s0[y+1][x+1];
	r += M4(1.985e-02, 1.145e-01, 1.263e-01, 6.431e-02, 6.056e-02, -1.090e-02, 1.231e-01, 2.494e-02, 1.967e-01, -3.239e-02, 3.599e-01, 4.951e-01, -8.858e-02, 1.512e-02, -4.852e-02, 2.026e-02) * s0[y+1][x+2];
	r += M4(1.891e-03, -1.003e-02, 2.324e-02, -3.758e-02, 2.775e-02, -5.043e-02, -9.704e-02, -1.201e-02, 1.291e-01, 4.212e-02, -2.635e-01, 4.919e-01, -2.461e-02, -3.577e-02, 1.599e-02, -2.529e-01) * s0[y+2][x+0];
	r += M4(1.312e-01, -8.720e-02, -8.388e-02, -1.077e-01, -1.869e-01, -7.282e-03, -2.026e-02, 1.203e-01, -2.272e-01, -1.617e-02, -2.675e-01, 1.796e-01, 5.081e-03, 2.170e-02, -1.436e-01, -8.009e-02) * s0[y+2][x+1];
	r += M4(-7.391e-02, -5.148e-02, 1.502e-02, -3.135e-01, 5.964e-02, -4.127e-03, -3.636e-02, 3.538e-02, -5.590e-01, -3.720e-02, -2.016e-01, -1.732e-01, -1.219e-02, -3.581e-02, 4.784e-02, -3.874e-02) * s0[y+2][x+2];
	r += M4(-3.311e-02, 3.303e-02, 9.327e-02, 1.082e-02, -6.153e-02, -2.212e-02, -3.641e-02, 1.869e-02, 7.043e-02, -5.226e-03, -3.632e-03, -4.697e-03, -2.886e-01, 4.157e-02, 3.065e-01, 9.748e-02) * s1[y+0][x+0];
	r += M4(5.574e-02, 6.498e-02, 1.826e-01, -1.208e-01, 4.438e-02, 4.353e-02, -2.080e-01, -6.080e-02, -5.451e-02, -6.194e-03, -3.561e-02, -9.059e-02, -2.075e-01, 9.479e-03, -2.647e-01, 3.449e-02) * s1[y+0][x+1];
	r += M4(5.639e-02, 3.485e-03, -4.541e-02, -4.433e-02, -1.271e-02, -3.639e-02, 8.111e-03, 2.158e-02, -3.159e-03, -9.393e-03, 2.973e-03, 4.521e-02, 2.559e-01, 5.124e-02, 1.435e-01, 1.006e-01) * s1[y+0][x+2];
	r += M4(-6.853e-02, 5.095e-02, -7.234e-02, -1.175e-01, -8.435e-02, 5.076e-02, 1.759e-01, -3.509e-01, -4.942e-02, -3.049e-02, 4.706e-02, -1.983e-02, -4.443e-01, 1.314e-01, -1.800e-01, -5.743e-02) * s1[y+1][x+0];
	r += M4(-2.584e-01, -1.133e-01, 1.152e-01, 8.316e-02, -2.365e-01, -2.758e-02, 1.354e-01, -5.332e-01, -8.149e-02, -2.669e-02, -3.090e-01, 1.417e-01, 4.638e-01, -2.260e-02, -9.212e-02, 1.606e-01) * s1[y+1][x+1];
	r += M4(1.898e-01, 5.775e-02, 8.679e-02, -1.829e-02, -1.639e-01, 8.911e-02, -4.457e-01, -3.436e-01, 8.640e-03, 4.741e-02, -1.071e-02, 2.680e-02, -9.279e-02, -1.356e-01, 4.456e-01, 1.974e-02) * s1[y+1][x+2];
	r += M4(1.044e-01, 7.102e-03, 1.989e-02, 8.425e-03, 8.635e-02, 3.208e-02, 6.638e-02, 2.725e-01, 2.470e-02, -1.011e-03, -6.242e-03, 2.077e-01, 4.132e-02, -6.518e-03, -4.721e-02, -3.890e-01) * s1[y+2][x+0];
	r += M4(1.255e-02, -7.930e-02, -4.757e-02, -1.519e-01, -4.459e-01, -6.564e-02, 2.458e-02, 1.486e-01, 4.691e-02, 9.428e-02, 9.082e-02, -1.343e-01, 2.593e-01, -6.272e-03, -2.794e-02, -5.051e-01) * s1[y+2][x+1];
	r += M4(-6.182e-02, -9.956e-03, -6.458e-02, -2.690e-02, -1.089e-01, 9.779e-03, -9.416e-02, 1.174e-02, 8.949e-03, 6.820e-04, -4.533e-03, 3.012e-03, -3.076e-01, 2.699e-02, -2.074e-02, -2.956e-01) * s1[y+2][x+2];
	r += M4(-8.598e-02, -1.819e-02, 8.549e-02, 8.494e-02, 1.140e-02, -8.314e-03, -3.192e-03, -1.180e-01, 5.374e-02, 9.207e-02, -4.018e-02, 2.361e-02, -6.127e-02, 2.207e-02, -3.732e-02, 6.234e-02) * s2[y+0][x+0];
	r += M4(-1.957e-01, -6.337e-02, -5.020e-01, 3.702e-01, -1.038e-01, 1.738e-02, -4.730e-02, -1.197e-01, -7.555e-02, 2.203e-01, -1.750e-02, -4.532e-04, -8.018e-02, 2.847e-02, -4.941e-02, 1.171e-02) * s2[y+0][x+1];
	r += M4(-4.454e-03, -4.675e-02, -1.670e-01, -3.209e-02, 1.201e-01, 1.687e-02, -1.817e-02, -2.265e-02, 6.905e-02, 8.316e-02, -8.918e-02, -9.050e-02, 1.162e-02, 1.031e-01, 3.734e-02, 1.077e-02) * s2[y+0][x+2];
	r += M4(-4.258e-01, 4.186e-02, 1.601e-01, 5.482e-02, 1.299e-01, 4.822e-02, 1.567e-01, 8.794e-02, -7.593e-02, 2.423e-01, 2.631e-02, 1.385e-02, -5.093e-02, 5.182e-02, 6.182e-02, -1.877e-01) * s2[y+1][x+0];
	r += M4(-6.289e-01, 4.568e-02, -4.093e-01, -5.960e-01, 1.125e-01, -9.955e-02, 2.343e-01, 3.984e-02, 1.247e-01, 7.107e-01, 7.640e-02, -2.529e-01, -3.372e-01, 4.060e-01, 1.100e-01, -2.890e-01) * s2[y+1][x+1];
	r += M4(-3.204e-01, -6.952e-02, -5.202e-02, -1.868e-01, 1.143e-01, 6.049e-02, -8.639e-02, -3.196e-02, -1.038e-01, 1.778e-01, -5.450e-02, 2.010e-02, 2.178e-02, 1.420e-01, -2.986e-01, -2.051e-03) * s2[y+1][x+2];
	r += M4(-2.070e-01, 7.074e-03, -5.630e-02, -3.246e-01, 7.680e-02, 5.028e-02, 8.622e-02, -3.324e-04, 7.998e-02, 1.498e-01, 2.345e-01, 2.676e-02, 1.861e-01, -2.975e-02, 1.901e-02, 1.986e-01) * s2[y+2][x+0];
	r += M4(-2.563e-02, -6.104e-02, 9.907e-02, -3.882e-01, 8.817e-02, -1.493e-02, -7.759e-02, -5.523e-02, -7.277e-02, 1.848e-01, -1.367e-02, 1.619e-01, 7.479e-02, -1.341e-03, 1.040e-01, 2.852e-01) * s2[y+2][x+1];
	r += M4(-2.339e-01, -4.948e-02, 3.267e-02, -1.794e-01, -1.218e-01, 3.637e-02, -4.251e-02, -1.376e-02, 4.230e-02, 1.432e-01, -1.322e-01, 8.811e-02, -2.132e-01, 1.169e-01, 4.929e-03, 1.694e-01) * s2[y+2][x+2];
	r += M4(-8.620e-03, 6.859e-03, 3.038e-02, 5.782e-02, 5.708e-02, 1.009e-02, -3.157e-02, -1.460e-01, 1.283e-01, 1.090e-01, -2.240e-01, 7.538e-02, -7.004e-02, 1.462e-02, 7.317e-02, 6.666e-02) * s3[y+0][x+0];
	r += M4(-6.822e-02, 4.560e-02, 7.777e-02, 9.069e-02, -1.116e-01, 5.780e-02, 4.120e-01, -1.003e-01, 1.607e-01, 2.390e-01, -5.943e-01, -5.102e-02, -1.889e-02, 4.757e-02, -2.404e-02, 3.706e-02) * s3[y+0][x+1];
	r += M4(4.872e-02, -7.582e-03, -6.330e-02, -3.534e-02, 1.107e-02, 1.264e-02, 1.238e-02, 5.018e-02, 1.156e-01, 5.423e-02, -2.271e-01, -6.552e-02, 5.052e-02, 3.739e-02, -8.289e-02, -1.346e-02) * s3[y+0][x+2];
	r += M4(4.957e-02, 5.127e-02, -3.079e-02, 1.347e-02, 6.284e-02, 6.787e-02, 2.159e-01, 1.847e-01, -1.900e-01, 2.679e-01, -4.128e-02, 3.162e-02, -1.542e-01, -6.132e-03, 3.450e-02, -1.008e-01) * s3[y+1][x+0];
	r += M4(-2.294e-02, 1.021e-01, -3.214e-02, -5.140e-02, -2.041e-01, -6.894e-02, 5.436e-01, 3.251e-01, 1.051e+00, 6.346e-01, 2.098e-02, -5.650e-01, 3.524e-03, 1.249e-01, 2.496e-01, -1.854e-01) * s3[y+1][x+1];
	r += M4(1.111e-01, -5.359e-02, 3.716e-02, -7.855e-03, 1.959e-01, 5.049e-02, -2.124e-03, 5.355e-02, 1.543e-01, 1.683e-01, 3.284e-01, -1.471e-01, 1.223e-01, 7.586e-02, -4.877e-02, 1.880e-02) * s3[y+1][x+2];
	r += M4(7.837e-02, 4.703e-03, 3.729e-02, -4.337e-02, -1.008e-01, 4.981e-02, 1.417e-01, -8.929e-03, 1.620e-01, 5.008e-02, 1.988e-01, -1.003e-02, 1.598e-01, -5.523e-02, -5.572e-02, -4.412e-02) * s3[y+2][x+0];
	r += M4(6.527e-02, -4.796e-02, -1.216e-01, -1.437e-01, 1.704e-01, -1.965e-02, -6.100e-02, -1.200e-01, -8.919e-02, 1.379e-01, -2.672e-02, -6.806e-02, 9.832e-02, -3.685e-02, -1.036e-01, 1.459e-02) * s3[y+2][x+1];
	r += M4(3.312e-02, -2.368e-02, 4.915e-02, -1.229e-01, -3.858e-02, 2.914e-02, -6.601e-02, -5.301e-02, -1.337e-01, 4.925e-02, -1.412e-01, 3.869e-02, -6.974e-02, 4.791e-02, -3.821e-02, -1.966e-02) * s3[y+2][x+2];
	r += V4(-1.417e-02, 1.497e-02, -1.086e-02, 1.632e-02);
	return vec4(r);
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv2_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
			s2[ay][ax] = l1(x - 1, y - 1);
			s1[ay][ax] = -max(-s0[ay][ax], V4(0.0));
			s0[ay][ax] = max(s0[ay][ax], V4(0.0));
			s3[ay][ax] = -max(-s2[ay][ax], V4(0.0));
			s2[ay][ax] = max(s2[ay][ax], V4(0.0));
		}
	}
	barrier();
	imageStore(out_image, opos + ivec2(0, 0), f0(xy.x, xy.y));
	imageStore(out_image, opos + ivec2(1, 0), f1(xy.x, xy.y));
}


//!DESC CuNNy-4x8C-conv4
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv3
//!BIND LUMA
//!SAVE conv4
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
	#define V4 f16vec4
	#define M4 f16mat4
	#define F float16_t
#else
	#define V4 vec4
	#define M4 mat4
	#define F float
#endif
#define l0(x, y) V4(texelFetch(conv3_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv3_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 s0[10][10];
shared V4 s1[10][10];
shared V4 s2[10][10];
shared V4 s3[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-4.133e-02, -6.346e-02, -1.432e-01, -9.307e-02, -1.517e-02, -5.047e-02, 1.570e-03, -2.589e-01, 4.211e-02, 4.974e-02, 1.421e-01, 2.154e-02, 1.821e-01, -6.132e-01, -2.919e-01, -3.760e-01) * s0[y+0][x+0];
	r += M4(-1.174e-01, -3.974e-02, 2.478e-01, 2.280e-02, 1.286e-01, -8.218e-01, -1.224e-01, -6.738e-01, 6.688e-02, 6.147e-02, -1.222e-01, -3.724e-02, 1.479e-01, 1.028e-01, -1.842e-02, 8.326e-02) * s0[y+0][x+1];
	r += M4(-1.597e-04, -3.650e-02, -6.115e-02, -1.430e-02, 4.749e-02, -1.828e-01, -1.412e-01, -1.389e-01, -1.823e-01, -6.054e-02, 2.140e-01, -8.622e-02, -6.899e-02, -1.552e-02, 4.991e-02, 1.396e-02) * s0[y+0][x+2];
	r += M4(1.803e-02, 1.047e-02, -5.752e-02, 3.154e-01, -1.468e-01, 1.067e-01, -2.644e-01, 2.822e-01, 4.120e-02, 1.184e-01, 2.358e-01, -1.323e-01, 3.682e-01, -8.974e-01, -3.417e-01, -1.127e+00) * s0[y+1][x+0];
	r += M4(-2.904e-01, 7.201e-02, 4.153e-01, 1.920e-01, -3.567e-01, -4.172e-03, -4.502e-01, -9.547e-02, 3.382e-02, -2.137e-01, -2.016e-01, -3.418e-01, 1.595e-01, 1.630e-01, -1.222e-02, -1.013e-01) * s0[y+1][x+1];
	r += M4(6.519e-02, 3.186e-02, 2.249e-02, 6.142e-02, 1.471e-02, 2.802e-01, 2.128e-01, 1.367e-01, 1.607e-02, -6.195e-02, 4.900e-02, 7.290e-02, -1.814e-01, 5.471e-02, 1.308e-01, -6.075e-03) * s0[y+1][x+2];
	r += M4(-6.574e-02, -1.430e-02, -6.237e-02, -7.751e-02, -1.774e-02, -1.021e-01, -3.349e-02, -1.809e-01, 3.396e-03, 7.953e-03, 1.318e-01, 5.865e-02, 2.280e-01, -1.475e-01, 2.210e-01, 1.126e-01) * s0[y+2][x+0];
	r += M4(-3.892e-02, -8.814e-02, 6.616e-02, -4.061e-02, -1.319e-01, -1.124e-01, -8.352e-02, -1.267e-01, -5.850e-02, 2.959e-01, 1.294e-01, 7.460e-01, 1.219e-01, -2.919e-01, -7.435e-02, -1.751e-01) * s0[y+2][x+1];
	r += M4(2.985e-02, -8.302e-02, -2.006e-02, -8.708e-02, -3.810e-02, -2.733e-02, -5.215e-02, -1.015e-01, 2.568e-02, 2.163e-01, 9.357e-02, 1.515e-01, -1.397e-01, -7.651e-03, -5.129e-02, -3.873e-02) * s0[y+2][x+2];
	r += M4(4.243e-02, -1.514e-03, -1.608e-02, -3.276e-02, -6.853e-03, -1.870e-02, -2.201e-02, -2.143e-02, -9.695e-03, -1.145e-02, 5.373e-03, 3.983e-02, -1.031e-02, -2.478e-02, 1.007e-02, -1.771e-02) * s1[y+0][x+0];
	r += M4(-6.364e-03, 3.276e-02, 2.508e-02, 4.677e-02, 1.942e-02, 2.551e-02, -6.393e-02, 5.477e-02, 4.976e-02, -6.109e-02, -1.597e-01, -5.565e-02, 2.953e-02, -1.497e-02, 8.305e-02, 2.876e-02) * s1[y+0][x+1];
	r += M4(-6.339e-02, -3.746e-02, 7.781e-02, -1.326e-02, 4.522e-04, -8.754e-02, -8.832e-02, -4.228e-02, -2.259e-04, -1.196e-01, -8.703e-02, -5.323e-02, -1.611e-02, 2.862e-02, 2.980e-02, 4.456e-02) * s1[y+0][x+2];
	r += M4(1.037e-01, 1.342e-03, -6.729e-02, 1.929e-01, -1.870e-02, 2.633e-03, -2.713e-02, -2.029e-02, 3.937e-02, 3.806e-02, -2.040e-03, 4.106e-02, -5.552e-02, -3.506e-02, -1.666e-03, -2.134e-02) * s1[y+1][x+0];
	r += M4(5.074e-02, 9.656e-02, 3.848e-01, 2.646e-01, -3.214e-03, 1.613e-01, -1.972e-02, -1.842e-01, -3.131e-02, -1.019e-02, 4.547e-02, -1.776e-01, -9.108e-02, 2.136e-01, -1.284e-01, -3.169e-02) * s1[y+1][x+1];
	r += M4(-1.566e-01, 9.246e-02, 1.490e-01, 6.303e-02, 5.799e-03, 5.046e-02, -1.193e-01, 5.896e-02, 7.681e-02, -6.622e-02, -1.093e-01, 6.212e-02, 3.625e-02, 8.513e-03, -2.604e-03, -1.950e-02) * s1[y+1][x+2];
	r += M4(-1.774e-02, -6.187e-02, -6.711e-02, -1.042e-01, 2.812e-02, -4.224e-02, 1.165e-02, -4.166e-02, -1.497e-03, 4.107e-02, -3.158e-02, 7.342e-02, 1.991e-03, -6.233e-02, 7.103e-02, 6.325e-02) * s1[y+2][x+0];
	r += M4(-7.120e-02, -3.063e-02, -3.745e-02, 2.858e-02, -7.313e-03, -1.096e-01, 2.213e-02, -8.973e-02, -1.447e-02, 1.232e-01, 5.481e-02, 1.661e-01, -1.122e-01, -9.439e-02, 8.423e-02, -2.095e-02) * s1[y+2][x+1];
	r += M4(-7.041e-03, -4.921e-02, -2.711e-02, -2.366e-02, 7.507e-02, -9.008e-02, -6.938e-02, -1.004e-01, 7.183e-02, 1.529e-02, -4.081e-02, -5.161e-03, 9.592e-03, -7.689e-03, -2.788e-02, -1.568e-02) * s1[y+2][x+2];
	r += M4(-7.458e-02, 1.476e-01, -1.612e-01, 7.392e-02, -4.414e-03, -6.551e-03, 4.464e-02, -2.550e-03, 7.798e-03, -1.123e-03, -1.914e-02, -4.741e-02, -8.271e-03, -5.492e-03, 1.712e-02, -4.993e-02) * s2[y+0][x+0];
	r += M4(5.313e-03, -3.333e-01, 5.059e-01, -2.827e-01, 2.413e-03, 6.203e-02, -4.122e-02, 6.283e-03, -6.369e-02, 6.020e-02, 8.456e-02, 2.718e-02, -2.202e-02, -2.747e-03, -1.210e-02, -9.366e-02) * s2[y+0][x+1];
	r += M4(8.829e-02, 1.132e-01, -9.779e-02, -3.108e-02, -1.999e-02, -4.310e-02, -2.412e-02, -4.138e-02, -3.674e-02, 4.899e-02, 5.959e-02, 1.890e-02, 8.224e-02, -1.692e-02, -9.016e-02, 3.588e-02) * s2[y+0][x+2];
	r += M4(-1.178e-01, -6.713e-02, 2.311e-02, -1.474e-01, -1.979e-02, 1.454e-02, -9.593e-02, -4.418e-03, -2.228e-02, -8.305e-02, 2.862e-02, -7.025e-03, 1.126e-02, 1.755e-02, 3.555e-02, -2.096e-02) * s2[y+1][x+0];
	r += M4(5.982e-01, -5.510e-02, 3.706e-01, -1.686e-01, 4.492e-02, -1.214e-02, 5.824e-02, 1.095e-01, 1.343e-01, -3.185e-02, -1.462e-02, -2.728e-03, -1.482e-01, 8.903e-02, -7.970e-02, -2.510e-01) * s2[y+1][x+1];
	r += M4(2.053e-01, 2.593e-02, 3.244e-02, 9.946e-03, 3.908e-02, 7.725e-02, 9.773e-03, 2.854e-02, -2.566e-01, 4.873e-02, 8.133e-02, -9.280e-02, 1.054e-01, -4.158e-02, -8.638e-02, -5.290e-02) * s2[y+1][x+2];
	r += M4(4.385e-02, -1.685e-01, 8.275e-02, -2.470e-01, 6.901e-03, -4.175e-02, 1.065e-02, -4.796e-02, 7.218e-03, -4.102e-02, 2.883e-02, -5.015e-02, 4.596e-02, -3.349e-02, -4.022e-04, 3.088e-02) * s2[y+2][x+0];
	r += M4(-1.873e-02, -1.173e-01, 1.274e-01, -3.137e-01, -2.753e-02, -4.106e-02, 4.868e-02, -1.608e-04, 1.507e-02, 2.074e-02, -3.182e-02, -1.278e-01, -3.749e-02, -1.270e-01, 6.873e-02, -3.299e-02) * s2[y+2][x+1];
	r += M4(1.395e-01, -8.189e-02, 6.980e-02, 7.442e-03, -1.788e-02, -5.855e-03, -1.679e-02, -5.025e-02, -7.559e-02, -3.392e-02, 6.069e-04, -5.435e-02, -1.886e-02, -5.225e-02, -1.876e-02, -7.224e-02) * s2[y+2][x+2];
	r += M4(-2.667e-02, -3.390e-03, 7.048e-02, -3.894e-02, -2.477e-02, 3.449e-01, -4.157e-01, 5.831e-01, 8.291e-04, 2.075e-02, 3.148e-02, -1.410e-02, -1.411e-02, -3.460e-02, 3.741e-02, 4.463e-02) * s3[y+0][x+0];
	r += M4(-2.494e-02, 7.888e-02, -1.039e-01, -8.018e-02, -3.739e-01, 2.844e-01, 9.478e-02, 9.697e-01, 4.209e-02, 1.083e-01, -3.141e-02, 6.469e-02, -2.496e-02, -2.007e-01, 1.022e-01, -1.497e-01) * s3[y+0][x+1];
	r += M4(7.155e-02, 2.775e-02, 4.072e-02, 1.120e-02, -5.070e-01, 1.780e-01, 1.035e+00, 4.595e-01, -1.361e-02, 8.981e-02, 1.380e-01, 5.155e-02, 2.806e-01, 2.555e-02, -2.002e-01, 1.349e-02) * s3[y+0][x+2];
	r += M4(-3.985e-02, 3.605e-02, -1.382e-02, 4.224e-02, -2.535e-01, 1.993e-02, -3.165e-01, 8.747e-01, -3.002e-02, -2.287e-02, 5.916e-02, -3.890e-02, 8.224e-02, 3.059e-02, 3.420e-02, -3.715e-02) * s3[y+1][x+0];
	r += M4(9.195e-02, 7.118e-02, 1.039e-01, 2.806e-01, 4.402e-01, -1.635e+00, 1.336e+00, 5.775e-01, 1.447e-01, -1.015e-01, -1.681e-01, 2.594e-02, -1.174e-01, 8.568e-02, -3.335e-02, 4.926e-01) * s3[y+1][x+1];
	r += M4(-5.593e-02, 6.595e-02, 1.479e-01, 2.860e-02, -7.211e-01, -6.295e-01, 7.586e-01, -7.915e-02, -1.683e-01, 8.129e-02, 2.804e-02, -8.569e-02, 2.032e-01, 1.566e-02, -1.568e-01, -1.627e-01) * s3[y+1][x+2];
	r += M4(-9.818e-04, -1.991e-02, 1.482e-03, -4.241e-02, -3.876e-02, 1.481e-01, -1.187e-01, 6.173e-02, -1.859e-02, 6.166e-02, -2.829e-02, 1.008e-01, 6.555e-02, -5.948e-02, 2.751e-03, -5.710e-02) * s3[y+2][x+0];
	r += M4(4.045e-02, -3.252e-02, 8.906e-03, -1.724e-01, -3.588e-02, -1.028e-01, 4.813e-01, -9.244e-01, 4.334e-02, 1.763e-01, -3.957e-02, 7.935e-02, -5.171e-04, -8.274e-02, 3.425e-03, -1.070e-01) * s3[y+2][x+1];
	r += M4(-1.828e-02, -4.040e-02, 3.025e-02, -1.932e-02, -2.829e-01, -5.216e-01, -1.113e-01, -1.969e-01, -1.353e-01, 1.108e-01, -2.503e-02, 7.550e-02, 4.094e-02, -3.606e-02, -3.383e-02, 2.009e-02) * s3[y+2][x+2];
	r += V4(-6.760e-03, -5.822e-04, 3.818e-03, -8.626e-03);
	return vec4(r);
}
vec4 f1(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-3.136e-02, 5.025e-02, -3.011e-02, -1.341e-01, 1.027e-01, 7.179e-02, 1.539e-02, 1.002e-01, -1.982e-01, 1.948e-02, 9.052e-02, 9.675e-03, 3.047e-02, 1.879e-01, 2.576e-01, -1.155e-01) * s0[y+0][x+0];
	r += M4(8.911e-02, -8.264e-03, -1.698e-01, 2.197e-02, 6.360e-02, 1.184e-01, -3.109e-02, 1.547e-01, -1.313e-01, -1.426e-01, 3.556e-01, -2.477e-02, -1.517e-02, -7.228e-02, 2.648e-01, -1.553e-01) * s0[y+0][x+1];
	r += M4(-2.746e-02, 3.682e-02, 6.014e-02, -1.123e-02, -3.016e-02, 9.679e-02, -3.094e-02, -1.335e-01, 1.174e-01, 7.896e-02, -9.795e-02, -1.775e-02, -7.871e-02, -1.010e-02, 1.258e-01, 4.204e-03) * s0[y+0][x+2];
	r += M4(7.564e-03, -1.293e-01, 2.427e-01, -5.271e-01, -1.025e-03, 1.609e-01, 1.738e-01, -1.801e-01, -1.448e-01, -9.200e-03, -2.365e-02, 2.043e-01, 8.814e-02, 2.863e-01, -4.278e-02, 2.567e-01) * s0[y+1][x+0];
	r += M4(-7.086e-02, -2.290e-01, -1.602e-01, 1.558e-01, 1.765e-01, 1.130e-01, -4.830e-01, 2.280e-01, 1.265e-01, 6.767e-02, -4.027e-02, -6.001e-01, 4.325e-01, -1.504e-01, -2.683e-01, -6.189e-02) * s0[y+1][x+1];
	r += M4(1.086e-01, -4.249e-02, -1.283e-01, -3.236e-02, 1.324e-01, -1.431e-01, -1.609e-01, 4.067e-02, -1.997e-01, -4.539e-02, 3.147e-03, -4.653e-02, 8.847e-02, -7.168e-02, -1.338e-01, 1.699e-02) * s0[y+1][x+2];
	r += M4(-4.005e-02, 6.946e-02, -1.100e-01, -1.083e-01, 6.734e-02, 1.632e-01, -1.170e-01, 1.080e-01, 4.598e-02, -2.008e-02, -1.271e-01, -6.530e-03, -8.174e-02, -1.944e-01, -2.306e-01, -2.790e-01) * s0[y+2][x+0];
	r += M4(-2.726e-02, 4.769e-02, -6.546e-02, 1.890e-02, -5.279e-03, 2.486e-01, -9.251e-02, -4.707e-02, -3.060e-01, -4.363e-01, 1.752e-01, -5.918e-02, -2.926e-01, 4.731e-01, 4.833e-01, -5.989e-02) * s0[y+2][x+1];
	r += M4(-7.671e-02, 1.253e-01, 7.362e-02, 1.796e-02, -4.880e-02, 1.733e-01, 2.508e-02, 8.797e-02, 6.643e-03, -1.632e-01, -7.974e-02, 5.607e-02, -4.673e-02, 6.324e-02, 4.184e-02, 6.434e-02) * s0[y+2][x+2];
	r += M4(4.100e-02, -6.774e-03, 1.445e-02, -1.739e-02, 1.637e-02, 3.136e-02, -2.687e-03, -2.223e-02, -2.961e-02, 1.513e-02, -5.948e-02, 2.470e-02, 1.233e-03, -1.810e-02, 2.142e-02, -1.041e-02) * s1[y+0][x+0];
	r += M4(-8.369e-02, 9.519e-03, -7.827e-02, 3.213e-02, -2.071e-02, -2.047e-02, -7.356e-02, 4.473e-02, -4.468e-02, 7.416e-02, -3.219e-03, -8.320e-03, -5.483e-02, -4.675e-02, 6.417e-02, -4.060e-02) * s1[y+0][x+1];
	r += M4(-5.140e-02, 2.804e-02, 1.127e-02, -1.689e-02, -5.350e-02, 7.453e-02, 2.527e-02, -1.079e-02, -9.347e-03, 6.714e-02, 2.437e-02, -1.903e-02, -4.912e-02, -6.242e-02, 5.921e-02, 1.801e-02) * s1[y+0][x+2];
	r += M4(-1.051e-01, -1.351e-01, -3.921e-02, -2.369e-01, 1.332e-02, -7.331e-03, -1.166e-02, -5.823e-02, -2.131e-02, -3.728e-02, 6.703e-02, 1.036e-01, 5.801e-02, -4.369e-02, -7.172e-02, -1.100e-01) * s1[y+1][x+0];
	r += M4(2.414e-02, -2.319e-01, -1.109e-01, 8.297e-02, 1.372e-02, 2.017e-03, 2.403e-01, 2.235e-01, 1.319e-02, 8.650e-03, -9.312e-03, 4.171e-03, 1.972e-01, -1.342e-01, -6.959e-02, -3.422e-02) * s1[y+1][x+1];
	r += M4(1.062e-01, -7.598e-02, -1.945e-01, 4.118e-03, 1.566e-01, -4.952e-02, -5.570e-02, -9.987e-02, 4.289e-03, -2.684e-02, -1.075e-01, -3.885e-02, 6.140e-02, -2.851e-02, -7.446e-02, -2.519e-02) * s1[y+1][x+2];
	r += M4(9.269e-02, 4.216e-02, -6.815e-02, -1.087e-01, -4.216e-02, 3.120e-02, -3.350e-02, -7.934e-02, -1.121e-02, -6.381e-02, 2.991e-02, -1.455e-03, -5.951e-02, -5.951e-03, -2.095e-02, -1.890e-01) * s1[y+2][x+0];
	r += M4(8.481e-03, -2.948e-02, 9.174e-02, -1.050e-01, -4.088e-02, 1.411e-01, 2.021e-02, 1.137e-01, -8.171e-02, -1.616e-01, 1.252e-01, 4.024e-02, -1.326e-01, 1.878e-01, 1.235e-01, 7.847e-02) * s1[y+2][x+1];
	r += M4(-6.067e-02, 2.679e-02, 3.185e-02, 4.894e-02, -1.864e-02, 1.164e-01, -5.471e-03, -6.648e-04, 5.118e-02, -1.278e-02, -7.462e-02, 2.837e-03, -5.202e-02, 7.631e-02, 5.800e-02, 4.186e-03) * s1[y+2][x+2];
	r += M4(-1.155e-01, 1.041e-02, 1.943e-01, -3.388e-01, 3.595e-03, -1.727e-02, 2.865e-02, -1.876e-02, 9.263e-03, -7.717e-03, 1.165e-01, -1.119e-02, -3.731e-03, 5.624e-02, -1.629e-02, 3.264e-02) * s2[y+0][x+0];
	r += M4(4.170e-01, -2.035e-01, 4.767e-01, -4.218e-02, -1.424e-02, -5.459e-03, -1.656e-03, 2.756e-02, 4.484e-02, -1.876e-02, 1.342e-02, -2.160e-02, 3.316e-02, 7.327e-02, -6.052e-02, 4.081e-02) * s2[y+0][x+1];
	r += M4(1.169e-01, 3.745e-03, -3.071e-02, 8.847e-02, -2.063e-02, 5.359e-02, 1.328e-02, -8.585e-03, -3.300e-02, -1.389e-02, -5.371e-03, 1.076e-02, 1.841e-02, 1.137e-02, -3.130e-02, -3.020e-02) * s2[y+0][x+2];
	r += M4(1.422e-01, 1.097e-01, -1.358e-01, -3.511e-02, 2.896e-02, 2.425e-02, 6.517e-03, 1.057e-02, -4.160e-02, -3.581e-02, 1.607e-01, -1.681e-01, -8.380e-02, 1.462e-02, 6.011e-02, -1.991e-02) * s2[y+1][x+0];
	r += M4(3.833e-03, 1.039e-01, -6.131e-01, 3.002e-01, 3.261e-02, -7.230e-02, 2.263e-02, 3.412e-03, -1.415e-02, 7.888e-02, 1.497e-01, 4.566e-02, 1.260e-01, 8.763e-02, 2.708e-01, 1.106e-01) * s2[y+1][x+1];
	r += M4(-5.775e-02, 1.773e-01, 2.479e-01, -1.887e-03, -2.728e-02, -3.693e-02, 8.907e-03, 2.227e-02, 9.317e-03, 8.047e-02, 4.580e-02, 4.504e-02, 6.255e-02, 8.592e-02, -8.336e-02, -5.359e-02) * s2[y+1][x+2];
	r += M4(9.700e-02, 2.550e-01, -1.113e-01, 4.394e-02, -4.059e-03, 4.505e-02, -6.308e-02, -3.574e-02, 4.784e-02, 6.373e-02, 1.035e-01, -1.542e-02, -3.806e-03, -2.494e-02, -8.832e-03, -1.020e-01) * s2[y+2][x+0];
	r += M4(1.621e-01, 2.134e-01, 1.674e-01, -1.084e-01, 3.824e-03, -1.569e-02, -9.765e-02, -1.889e-02, -1.390e-02, 4.927e-02, 3.878e-01, -5.963e-02, -8.115e-02, 1.401e-01, 1.566e-02, 2.055e-02) * s2[y+2][x+1];
	r += M4(-1.233e-01, 1.857e-02, 3.019e-01, -1.174e-01, -3.925e-03, 2.642e-02, 8.195e-02, 1.402e-02, -4.406e-02, 5.897e-02, 1.782e-01, 1.186e-03, -3.235e-02, 1.134e-01, 4.782e-02, 2.141e-02) * s2[y+2][x+2];
	r += M4(-5.943e-02, 3.808e-02, 5.485e-02, 2.714e-02, 8.044e-02, -4.773e-01, -3.681e-01, -1.100e-01, -2.191e-02, 3.074e-02, 2.648e-03, 6.309e-02, 1.133e-01, 6.073e-02, -8.499e-02, 7.679e-02) * s3[y+0][x+0];
	r += M4(2.769e-02, 1.936e-02, 8.019e-02, 1.914e-02, -2.767e-01, -9.647e-02, -1.033e+00, 5.633e-02, -7.914e-02, -4.966e-02, 8.277e-02, 1.601e-02, 2.686e-01, 2.578e-01, -3.291e-01, -1.682e-02) * s3[y+0][x+1];
	r += M4(-3.743e-02, 1.693e-02, -9.516e-04, 1.806e-02, 3.950e-01, 7.372e-02, -6.965e-01, 1.143e-01, 4.506e-02, -7.645e-02, -2.645e-02, 3.795e-03, 9.840e-02, 1.225e-01, -1.398e-01, -6.545e-02) * s3[y+0][x+2];
	r += M4(9.077e-02, 2.181e-02, -6.848e-02, 4.964e-02, 6.178e-01, 7.315e-02, -1.101e+00, -2.994e-01, -3.648e-02, 1.825e-02, 5.569e-02, 5.797e-02, -2.764e-01, 4.109e-02, 2.608e-01, -1.729e-01) * s3[y+1][x+0];
	r += M4(-1.415e-01, -2.937e-02, -1.718e-01, 8.657e-02, -1.224e+00, 8.408e-01, -2.486e+00, -7.647e-01, -3.826e-02, 5.626e-02, 2.064e-02, -1.226e-01, -2.725e-01, 1.038e-01, 6.032e-01, 4.440e-01) * s3[y+1][x+1];
	r += M4(-2.702e-03, 2.845e-03, 7.321e-02, 3.505e-02, -5.065e-01, 4.125e-02, -8.774e-01, 5.431e-01, -5.357e-02, 2.767e-02, 8.862e-02, 5.854e-02, -1.190e-02, 2.476e-01, 2.355e-01, -3.793e-02) * s3[y+1][x+2];
	r += M4(1.030e-02, 5.911e-02, 5.242e-02, 4.587e-02, -6.367e-02, -1.019e-01, -1.576e-01, 2.589e-01, 8.476e-02, -4.277e-02, -3.865e-02, 1.247e-01, 1.354e-02, 3.480e-02, -2.487e-02, -1.393e-02) * s3[y+2][x+0];
	r += M4(1.078e-02, 6.346e-02, 4.002e-02, -1.554e-02, 6.791e-01, -2.731e-01, -1.373e+00, -6.606e-01, 3.951e-03, -1.204e-01, 2.626e-01, -2.355e-02, -1.193e-02, 8.920e-02, 9.400e-02, 6.277e-02) * s3[y+2][x+1];
	r += M4(-3.889e-03, -1.640e-02, -2.449e-02, -5.003e-04, 1.933e-01, 2.253e-01, -9.569e-01, 3.374e-01, -2.008e-02, -7.192e-02, 1.418e-01, -1.811e-02, -2.565e-02, 1.279e-02, 4.821e-02, -4.700e-02) * s3[y+2][x+2];
	r += V4(3.132e-03, 4.258e-03, -6.189e-03, -1.428e-03);
	return vec4(r);
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv3_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
			s2[ay][ax] = l1(x - 1, y - 1);
			s1[ay][ax] = -max(-s0[ay][ax], V4(0.0));
			s0[ay][ax] = max(s0[ay][ax], V4(0.0));
			s3[ay][ax] = -max(-s2[ay][ax], V4(0.0));
			s2[ay][ax] = max(s2[ay][ax], V4(0.0));
		}
	}
	barrier();
	imageStore(out_image, opos + ivec2(0, 0), f0(xy.x, xy.y));
	imageStore(out_image, opos + ivec2(1, 0), f1(xy.x, xy.y));
}


//!DESC CuNNy-4x8C-out
//!HOOK LUMA
//!COMPUTE 8 8 8 8
//!BIND conv4
//!BIND LUMA
//!SAVE out
//!WIDTH LUMA.w
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
	#define V4 f16vec4
	#define M4 f16mat4
	#define F float16_t
#else
	#define V4 vec4
	#define M4 mat4
	#define F float
#endif
#define l0(x, y) V4(texelFetch(conv4_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv4_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 s0[10][10];
shared V4 s1[10][10];
shared V4 s2[10][10];
shared V4 s3[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-2.742e-02, 4.599e-02, -3.101e-02, -3.937e-02, 1.906e-01, 8.370e-02, -8.038e-02, -4.060e-02, -4.726e-03, 2.298e-02, -1.334e-02, 1.962e-03, 1.252e-01, 4.513e-02, -8.683e-02, 2.032e-02) * s0[y+0][x+0];
	r += M4(3.194e-02, -2.229e-01, 3.287e-02, -2.264e-02, 1.396e-01, 3.350e-01, -1.256e-01, -8.150e-02, -4.770e-02, -5.388e-03, -8.026e-03, 1.064e-02, 2.464e-01, 2.388e-01, -4.199e-02, -2.113e-01) * s0[y+0][x+1];
	r += M4(1.396e-02, 3.363e-02, -1.539e-03, 8.196e-04, 1.698e-02, 2.951e-02, -2.104e-02, -9.118e-02, 2.040e-02, -2.386e-02, 2.006e-02, 5.083e-03, 1.108e-02, 1.325e-02, 3.821e-02, 1.706e-02) * s0[y+0][x+2];
	r += M4(4.138e-01, -2.189e-02, 2.378e-01, 3.529e-02, 1.900e-01, -4.938e-02, -7.897e-02, -1.594e-02, 2.417e-02, 9.177e-03, -2.464e-03, 4.382e-02, 9.814e-02, -4.215e-02, 9.749e-02, -3.866e-02) * s0[y+1][x+0];
	r += M4(-1.081e-02, -1.607e-01, 1.023e-02, -3.522e-01, -1.358e-02, 1.812e-01, 2.353e-01, 1.088e-01, 1.435e-02, 4.928e-03, -4.104e-02, -7.383e-02, -2.095e-01, 1.274e-01, -3.133e-01, 6.860e-02) * s0[y+1][x+1];
	r += M4(-4.576e-02, 1.124e-02, -3.523e-02, 1.483e-02, -1.537e-02, 1.108e-01, -1.469e-01, 9.618e-02, -9.354e-03, -6.831e-04, 1.711e-03, -4.217e-03, 4.036e-02, -1.725e-01, 2.364e-02, -2.401e-01) * s0[y+1][x+2];
	r += M4(-2.655e-03, -2.968e-02, 1.821e-01, -1.007e-02, 5.098e-02, 3.598e-02, 2.046e-01, -1.451e-02, 2.919e-02, -2.155e-02, 7.618e-02, -1.400e-02, -3.480e-02, 1.140e-02, -3.052e-02, -1.163e-02) * s0[y+2][x+0];
	r += M4(-4.579e-02, -3.622e-02, -6.777e-02, -8.014e-02, -6.702e-02, -6.367e-02, -2.598e-01, -3.027e-02, -6.233e-02, -9.177e-03, -2.994e-02, 5.620e-02, -3.138e-02, -6.043e-02, -5.707e-02, -5.209e-02) * s0[y+2][x+1];
	r += M4(1.567e-02, -1.500e-02, 2.255e-03, 1.855e-03, -8.537e-03, -1.959e-02, 3.438e-02, 1.198e-02, -1.903e-02, -5.910e-03, -4.320e-02, -4.683e-02, 3.308e-02, 3.204e-02, 4.821e-02, 4.851e-03) * s0[y+2][x+2];
	r += M4(-1.070e-01, 3.329e-02, -8.337e-02, -2.239e-02, -3.979e-02, -1.284e-02, -2.597e-03, -4.399e-02, 8.197e-02, 6.520e-03, -3.944e-02, -2.083e-02, -2.134e-02, -5.143e-03, 7.408e-04, 4.722e-02) * s1[y+0][x+0];
	r += M4(-2.827e-02, -7.512e-02, 1.067e-02, 7.815e-04, -1.271e-01, -6.942e-02, 6.889e-03, 7.594e-02, 1.284e-02, 2.071e-02, -3.181e-02, -5.820e-02, 1.831e-01, 1.928e-01, -2.015e-02, -9.009e-02) * s1[y+0][x+1];
	r += M4(1.639e-02, -1.172e-02, 5.888e-03, -2.583e-03, 3.359e-02, -5.132e-02, 4.332e-03, -3.282e-02, -9.693e-03, 3.003e-02, 2.447e-02, 5.802e-03, -7.863e-03, 6.562e-03, 4.212e-02, 4.512e-02) * s1[y+0][x+2];
	r += M4(6.792e-02, 1.169e-01, 2.046e-02, 1.922e-01, 2.822e-01, -7.536e-02, 3.025e-03, -1.432e-03, -2.687e-01, 1.123e-01, 1.353e-01, 1.245e-01, 6.114e-02, -6.995e-02, 1.688e-01, -9.288e-02) * s1[y+1][x+0];
	r += M4(5.406e-02, 2.821e-02, 6.458e-02, -6.470e-02, 8.640e-02, 3.596e-01, 8.085e-02, 5.827e-02, 1.315e-01, -4.921e-01, 1.854e-02, -1.433e-01, -4.847e-01, -5.245e-02, -1.054e-01, 4.399e-01) * s1[y+1][x+1];
	r += M4(-3.107e-02, -1.079e-02, -3.016e-02, -2.873e-02, 1.465e-03, 1.062e-01, -5.046e-02, 2.645e-02, -7.673e-02, 9.985e-02, -6.265e-02, 6.688e-02, 6.655e-02, -2.162e-01, 3.781e-02, -2.030e-01) * s1[y+1][x+2];
	r += M4(-3.940e-02, -1.523e-02, 7.147e-04, -1.378e-02, 2.875e-02, 2.318e-02, 1.987e-01, -4.355e-02, 5.877e-02, 3.495e-02, -2.466e-01, 2.956e-02, -9.807e-03, -7.666e-03, -2.963e-02, -8.339e-03) * s1[y+2][x+0];
	r += M4(-5.180e-02, -7.052e-02, -7.686e-02, -5.320e-02, -1.265e-01, -1.241e-01, -2.256e-01, -2.797e-02, 2.886e-02, 6.763e-02, 1.489e-01, -2.381e-01, 1.267e-02, 1.075e-02, -1.521e-01, -1.209e-01) * s1[y+2][x+1];
	r += M4(-2.026e-04, 4.786e-03, -8.080e-04, 7.494e-03, 6.993e-03, -4.435e-02, 2.054e-02, 1.172e-02, -4.184e-02, -6.024e-04, -9.155e-02, 2.791e-02, 2.765e-02, 4.107e-02, 5.233e-02, -2.202e-03) * s1[y+2][x+2];
	r += M4(2.404e-02, 8.715e-03, -4.927e-02, -9.781e-03, -1.187e-01, 4.001e-03, -1.831e-02, 3.138e-02, 5.605e-02, -7.883e-03, 1.055e-03, 2.691e-02, 7.995e-03, 4.787e-02, -1.604e-02, 1.432e-02) * s2[y+0][x+0];
	r += M4(9.587e-02, 9.246e-02, 4.755e-04, -4.892e-02, 1.123e-01, 7.065e-02, 1.831e-02, -3.362e-02, 8.806e-03, 1.365e-01, -3.647e-02, -5.166e-02, 2.675e-01, -1.145e-02, -1.404e-02, -3.946e-02) * s2[y+0][x+1];
	r += M4(-7.023e-03, 1.629e-02, -5.624e-03, 8.552e-03, 4.943e-02, 1.573e-02, 4.995e-02, 3.145e-02, 2.253e-02, -1.800e-02, 2.908e-02, 1.725e-02, -4.592e-01, 5.098e-01, -2.136e-01, 1.014e-01) * s2[y+0][x+2];
	r += M4(1.348e-01, -3.136e-03, 1.286e-01, -1.081e-02, 1.264e-01, -1.880e-01, 1.385e-01, -5.118e-02, -6.469e-02, -3.696e-02, 1.693e-01, -7.356e-02, -9.586e-02, 4.401e-02, 4.168e-04, 5.406e-02) * s2[y+1][x+0];
	r += M4(4.828e-03, 1.242e-01, 3.434e-02, 2.306e-01, -3.332e-01, 1.641e-01, -5.266e-02, 3.660e-01, 1.793e-01, 1.907e-01, 1.287e-01, 4.600e-01, -1.684e-02, -2.075e-01, 3.706e-01, -8.019e-02) * s2[y+1][x+1];
	r += M4(-5.389e-02, -1.372e-01, 1.283e-03, -8.619e-02, 1.350e-02, -1.166e-01, 7.744e-03, -1.193e-01, -1.702e-02, -5.297e-02, 3.566e-02, -4.629e-02, -1.341e-01, 1.627e-01, -3.509e-01, 6.309e-01) * s2[y+1][x+2];
	r += M4(-1.800e-02, 1.222e-02, 6.083e-02, 3.708e-02, 5.187e-02, 3.699e-02, 4.061e-02, -9.792e-02, 2.645e-02, -6.115e-03, -8.767e-02, -4.677e-03, -3.159e-02, -1.603e-02, -9.464e-02, 1.502e-02) * s2[y+2][x+0];
	r += M4(4.286e-03, -8.863e-02, 3.631e-02, -7.676e-02, -3.063e-02, -4.704e-02, -2.310e-01, -1.046e-01, 2.940e-02, 2.365e-02, 1.010e-01, -2.078e-02, -2.108e-03, 3.971e-02, -1.199e-01, -6.414e-02) * s2[y+2][x+1];
	r += M4(-2.699e-02, 4.604e-02, -7.178e-02, 1.830e-02, 2.422e-03, 7.118e-03, 1.167e-02, -1.504e-02, -1.608e-02, 2.189e-02, -4.630e-02, -1.666e-02, -6.437e-04, 7.542e-02, -1.701e-02, 3.229e-02) * s2[y+2][x+2];
	r += M4(-4.443e-02, 3.854e-02, 2.281e-02, -4.289e-03, -3.109e-02, 8.301e-03, -6.075e-02, -6.675e-02, 1.615e-02, 1.704e-02, -1.371e-02, 2.116e-02, 3.651e-02, 9.506e-03, 2.241e-02, 1.740e-02) * s3[y+0][x+0];
	r += M4(1.419e-02, -9.951e-02, 9.626e-02, 1.152e-01, 9.575e-02, 1.962e-01, 1.550e-01, 1.469e-01, 1.242e-01, 1.499e-01, -7.169e-02, -8.590e-02, 2.370e-01, 1.106e-01, 3.485e-03, 2.705e-02) * s3[y+0][x+1];
	r += M4(-1.023e-02, 7.621e-02, -1.773e-02, 1.431e-02, 1.390e-02, -6.214e-02, 2.449e-02, 3.107e-02, 2.012e-02, 5.643e-03, 3.857e-02, 2.895e-03, -3.258e-02, 4.929e-02, -7.972e-02, -6.290e-02) * s3[y+0][x+2];
	r += M4(3.569e-01, -1.313e-01, 1.740e-01, -4.497e-02, 1.829e-01, -1.742e-01, -1.038e-01, -1.314e-01, 1.630e-02, -1.016e-02, 8.820e-02, -2.948e-02, -6.909e-02, 3.845e-02, 2.176e-02, 1.336e-02) * s3[y+1][x+0];
	r += M4(2.697e-01, 8.285e-01, -5.911e-01, -5.450e-02, -5.669e-02, 4.241e-01, -1.901e-01, 1.166e-01, 7.074e-02, 7.754e-02, 1.961e-01, 3.467e-01, 8.819e-02, -2.112e-01, 3.767e-01, 1.423e-02) * s3[y+1][x+1];
	r += M4(2.383e-02, -1.461e-01, 8.305e-02, -2.347e-01, 1.539e-02, -7.738e-02, -6.126e-02, -2.179e-01, -1.156e-02, -3.879e-02, 3.108e-02, -1.283e-02, -1.077e-01, -8.471e-02, 1.039e-02, 9.724e-02) * s3[y+1][x+2];
	r += M4(8.950e-02, 4.919e-02, -7.723e-02, 1.167e-02, -2.206e-02, 3.503e-02, 6.201e-02, -6.274e-02, 7.868e-03, -5.288e-03, 7.581e-04, 2.406e-02, -3.751e-02, -3.119e-02, -8.677e-02, -9.223e-03) * s3[y+2][x+0];
	r += M4(-1.704e-01, -1.704e-01, 2.397e-01, -1.064e-01, -4.651e-02, -9.885e-02, -1.492e-01, -3.484e-02, 1.927e-02, -6.719e-03, 7.941e-02, -1.003e-02, -2.870e-02, 2.389e-02, -8.418e-02, -8.536e-02) * s3[y+2][x+1];
	r += M4(-4.303e-02, 5.345e-03, -5.817e-02, 1.620e-01, -6.384e-03, -6.282e-03, 1.204e-02, -8.435e-04, -1.081e-02, 2.399e-02, -3.574e-02, 1.174e-02, 3.609e-02, 4.498e-02, 1.730e-03, -4.787e-03) * s3[y+2][x+2];
	r += V4(2.864e-03, 2.130e-03, 4.809e-03, 3.651e-03);
	return tanh(vec4(r));
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(1, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv4_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
			s2[ay][ax] = l1(x - 1, y - 1);
			s1[ay][ax] = -max(-s0[ay][ax], V4(0.0));
			s0[ay][ax] = max(s0[ay][ax], V4(0.0));
			s3[ay][ax] = -max(-s2[ay][ax], V4(0.0));
			s2[ay][ax] = max(s2[ay][ax], V4(0.0));
		}
	}
	barrier();
	imageStore(out_image, opos + ivec2(0, 0), f0(xy.x, xy.y));
}


//!DESC CuNNy-4x8C-shuffle
//!HOOK LUMA
//!BIND out
//!BIND easu
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 1
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
	#define V4 f16vec4
	#define M4 f16mat4
	#define F float16_t
#else
	#define V4 vec4
	#define M4 mat4
	#define F float
#endif
vec4 hook() {
	vec4 r = vec4(0.0);
	vec2 f = fract(out_pos * out_size);
	ivec2 i = ivec2(f * vec2(2.0));
	r.r = out_tex((vec2(0.5) - f) * out_pt + out_pos)[2*i.y + i.x];
	r.r += easu_tex(easu_pos).r;
	r.a = 1.0;
	return clamp(r, 0.0, 1.0);
}
