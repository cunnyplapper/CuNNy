// CuNNy 8x8C RCAS DS
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

// FSR mpv | modified
// Copyright (c) 2021 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// FidelityFX FSR v1.0.2 by AMD
// ported to mpv by agyild

//!DESC CuNNy-EASU
//!HOOK LUMA
//!BIND LUMA
//!SAVE easu
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
//!COMPONENTS 1

float APrxLoRcpF1(float a) {
	return uintBitsToFloat(uint(0x7ef07ebb) - floatBitsToUint(a));
}

float APrxLoRsqF1(float a) {
	return uintBitsToFloat(uint(0x5f347d74) - (floatBitsToUint(a) >> uint(1)));
}

float AMin3F1(float x, float y, float z) {
	return min(x, min(y, z));
}

float AMax3F1(float x, float y, float z) {
	return max(x, max(y, z));
}

void tap(inout float aC, inout float aW, vec2 off, vec2 dir, vec2 len,
         float lob, float clp, float c){
	vec2 v;
	v.x = (off.x * ( dir.x)) + (off.y * dir.y);
	v.y = (off.x * (-dir.y)) + (off.y * dir.x);
	v *= len;
	float d2 = v.x * v.x + v.y * v.y;
	d2 = min(d2, clp);
	float wB = float(2.0 / 5.0) * d2 + -1.0;
	float wA = lob * d2 + -1.0;
	wB *= wB;
	wA *= wA;
	wB = float(25.0 / 16.0) * wB + float(-(25.0 / 16.0 - 1.0));
	float w = wB * wA;
	aC += c * w;
	aW += w;
}

void set(inout vec2 dir, inout float len, vec2 pp, bool biS, bool biT,
         bool biU, bool biV, float lA, float lB, float lC, float lD, float lE){
	float w = 0.0;
	if (biS)
		w = (1.0 - pp.x) * (1.0 - pp.y);
	if (biT)
		w =        pp.x  * (1.0 - pp.y);
	if (biU)
		w = (1.0 - pp.x) *        pp.y;
	if (biV)
		w =        pp.x  *        pp.y;
	float dc = lD - lC;
	float cb = lC - lB;
	float lenX = max(abs(dc), abs(cb));
	lenX = APrxLoRcpF1(lenX);
	float dirX = lD - lB;
	lenX = clamp(abs(dirX) * lenX, 0.0, 1.0);
	lenX *= lenX;
	float ec = lE - lC;
	float ca = lC - lA;
	float lenY = max(abs(ec), abs(ca));
	lenY = APrxLoRcpF1(lenY);
	float dirY = lE - lA;
	lenY = clamp(abs(dirY) * lenY, 0.0, 1.0);
	lenY *= lenY;
	dir += vec2(dirX, dirY) * w;
	len += dot(vec2(w), vec2(lenX, lenY));
}

vec4 hook() {
	vec4 pix = vec4(0.0, 0.0, 0.0, 1.0);
	vec2 pp = LUMA_pos * LUMA_size - vec2(0.5);
	vec2 fp = floor(pp);
	pp -= fp;
#if (defined(LUMA_gather) && (__VERSION__ >= 400 || (GL_ES && __VERSION__ >= 310)))
	vec4 bczzL = LUMA_gather(vec2((fp + vec2(1.0, -1.0)) * LUMA_pt), 0);
	vec4 ijfeL = LUMA_gather(vec2((fp + vec2(0.0,  1.0)) * LUMA_pt), 0);
	vec4 klhgL = LUMA_gather(vec2((fp + vec2(2.0,  1.0)) * LUMA_pt), 0);
	vec4 zzonL = LUMA_gather(vec2((fp + vec2(1.0,  3.0)) * LUMA_pt), 0);
#else
	float b = LUMA_tex(vec2((fp + vec2(0.5, -0.5)) * LUMA_pt)).r;
	float c = LUMA_tex(vec2((fp + vec2(1.5, -0.5)) * LUMA_pt)).r;
	float e = LUMA_tex(vec2((fp + vec2(-0.5, 0.5)) * LUMA_pt)).r;
	float f = LUMA_tex(vec2((fp + vec2( 0.5, 0.5)) * LUMA_pt)).r;
	float g = LUMA_tex(vec2((fp + vec2( 1.5, 0.5)) * LUMA_pt)).r;
	float h = LUMA_tex(vec2((fp + vec2( 2.5, 0.5)) * LUMA_pt)).r;
	float i = LUMA_tex(vec2((fp + vec2(-0.5, 1.5)) * LUMA_pt)).r;
	float j = LUMA_tex(vec2((fp + vec2( 0.5, 1.5)) * LUMA_pt)).r;
	float k = LUMA_tex(vec2((fp + vec2( 1.5, 1.5)) * LUMA_pt)).r;
	float l = LUMA_tex(vec2((fp + vec2( 2.5, 1.5)) * LUMA_pt)).r;
	float n = LUMA_tex(vec2((fp + vec2(0.5, 2.5) ) * LUMA_pt)).r;
	float o = LUMA_tex(vec2((fp + vec2(1.5, 2.5) ) * LUMA_pt)).r;
	vec4 bczzL = vec4(b, c, 0.0, 0.0);
	vec4 ijfeL = vec4(i, j, f, e);
	vec4 klhgL = vec4(k, l, h, g);
	vec4 zzonL = vec4(0.0, 0.0, o, n);
#endif
	float bL = bczzL.x;
	float cL = bczzL.y;
	float iL = ijfeL.x;
	float jL = ijfeL.y;
	float fL = ijfeL.z;
	float eL = ijfeL.w;
	float kL = klhgL.x;
	float lL = klhgL.y;
	float hL = klhgL.z;
	float gL = klhgL.w;
	float oL = zzonL.z;
	float nL = zzonL.w;
	vec2 dir = vec2(0.0);
	float len = 0.0;
	set(dir, len, pp, true, false, false, false, bL, eL, fL, gL, jL);
	set(dir, len, pp, false, true, false, false, cL, fL, gL, hL, kL);
	set(dir, len, pp, false, false, true, false, fL, iL, jL, kL, nL);
	set(dir, len, pp, false, false, false, true, gL, jL, kL, lL, oL);
	vec2 dir2 = dir * dir;
	float dirR = dir2.x + dir2.y;
	bool zro = dirR < float(1.0 / 32768.0);
	dirR = APrxLoRsqF1(dirR);
	dirR = zro ? 1.0 : dirR;
	dir.x = zro ? 1.0 : dir.x;
	dir *= vec2(dirR);
	len = len * 0.5;
	len *= len;
	float stretch = (dir.x * dir.x + dir.y * dir.y) * APrxLoRcpF1(max(abs(dir.x), abs(dir.y)));
	vec2 len2 = vec2(1.0 + (stretch - 1.0) * len, 1.0 + -0.5 * len);
	float lob = 0.5 + float((1.0 / 4.0 - 0.04) - 0.5) * len;
	float clp = APrxLoRcpF1(lob);
	float aC = 0.0;
	float aW = 0.0;
	tap(aC, aW, vec2( 0.0,-1.0) - pp, dir, len2, lob, clp, bL);
	tap(aC, aW, vec2( 1.0,-1.0) - pp, dir, len2, lob, clp, cL);
	tap(aC, aW, vec2(-1.0, 1.0) - pp, dir, len2, lob, clp, iL);
	tap(aC, aW, vec2( 0.0, 1.0) - pp, dir, len2, lob, clp, jL);
	tap(aC, aW, vec2( 0.0, 0.0) - pp, dir, len2, lob, clp, fL);
	tap(aC, aW, vec2(-1.0, 0.0) - pp, dir, len2, lob, clp, eL);
	tap(aC, aW, vec2( 1.0, 1.0) - pp, dir, len2, lob, clp, kL);
	tap(aC, aW, vec2( 2.0, 1.0) - pp, dir, len2, lob, clp, lL);
	tap(aC, aW, vec2( 2.0, 0.0) - pp, dir, len2, lob, clp, hL);
	tap(aC, aW, vec2( 1.0, 0.0) - pp, dir, len2, lob, clp, gL);
	tap(aC, aW, vec2( 1.0, 2.0) - pp, dir, len2, lob, clp, oL);
	tap(aC, aW, vec2( 0.0, 2.0) - pp, dir, len2, lob, clp, nL);
	pix.r = aC / aW;
	float min1 = min(AMin3F1(fL, gL, jL), kL);
	float max1 = max(AMax3F1(fL, gL, jL), kL);
	pix.r = clamp(pix.r, min1, max1);
	pix.r = clamp(pix.r, 0.0, 1.0);
	return pix;
}

//!DESC CuNNy-RCAS
//!HOOK LUMA
//!BIND easu
//!SAVE rcas
//!WIDTH easu.w
//!HEIGHT easu.h
//!COMPONENTS 1

// CuNNy: do not change unless changed during training as well
#define SHARPNESS 2.0
#define FSR_RCAS_LIMIT (0.25 - (1.0 / 16.0))

float APrxMedRcpF1(float a) {
	float b = uintBitsToFloat(uint(0x7ef19fff) - floatBitsToUint(a));
	return b * (-b * a + 2.0);
}

float AMax3F1(float x, float y, float z) {
	return max(x, max(y, z)); 
}


float AMin3F1(float x, float y, float z) {
	return min(x, min(y, z));
}

vec4 hook() {
#if (defined(easu_gather) && (__VERSION__ >= 400 || (GL_ES && __VERSION__ >= 310)))
	vec3 bde = easu_gather(easu_pos + easu_pt * vec2(-0.5), 0).xyz;
	float b = bde.z;
	float d = bde.x;
	float e = bde.y;
	vec2 fh = easu_gather(easu_pos + easu_pt * vec2(0.5), 0).zx;
	float f = fh.x;
	float h = fh.y;
#else
	float b = easu_texOff(vec2( 0.0, -1.0)).r;
	float d = easu_texOff(vec2(-1.0,  0.0)).r;
	float e = easu_tex(easu_pos).r;
	float f = easu_texOff(vec2(1.0, 0.0)).r;
	float h = easu_texOff(vec2(0.0, 1.0)).r;
#endif
	float mn1L = min(AMin3F1(b, d, f), h);
	float mx1L = max(AMax3F1(b, d, f), h);
	vec2 peakC = vec2(1.0, -1.0 * 4.0);
	float hitMinL = min(mn1L, e) / (4.0 * mx1L);
	float hitMaxL = (peakC.x - max(mx1L, e)) / (4.0 * mn1L + peakC.y);
	float lobeL = max(-hitMinL, hitMaxL);
	float lobe = max(float(-FSR_RCAS_LIMIT), min(lobeL, 0.0)) * exp2(-clamp(float(SHARPNESS), 0.0, 2.0));
	float nz = 0.25 * b + 0.25 * d + 0.25 * f + 0.25 * h - e;
	nz = clamp(abs(nz) * APrxMedRcpF1(AMax3F1(AMax3F1(b, d, e), f, h) - AMin3F1(AMin3F1(b, d, e), f, h)), 0.0, 1.0);
	nz = -0.5 * nz + 1.0;
	lobe *= nz;
	float rcpL = APrxMedRcpF1(4.0 * lobe + 1.0);
	vec4 pix = vec4(0.0, 0.0, 0.0, 1.0);
	pix.r = float((lobe * b + lobe * d + lobe * h + lobe * f + e) * rcpL);
	return pix;
}


//!DESC CuNNy-8x8C-RCAS-DS-in
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND LUMA
//!SAVE in
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
	#define V4 f16vec4
	#define M4 f16mat4
	#define F float16_t
#else
	#define V4 vec4
	#define M4 mat4
	#define F float
#endif
#define l0(x, y) F(texelFetch(LUMA_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(1, 1) + ivec2(0, 0), 0).r)
shared F s0[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += V4(-1.456e-01, 4.285e-02, 7.490e-02, 1.166e-02) * s0[y+0][x+0];
	r += V4(-2.573e-02, -2.693e-02, 1.992e-02, -4.866e-02) * s0[y+0][x+1];
	r += V4(1.977e-01, -3.288e-02, -9.618e-02, 2.057e-02) * s0[y+0][x+2];
	r += V4(-1.016e-01, -1.130e-01, 1.665e-01, -3.187e-02) * s0[y+1][x+0];
	r += V4(-1.523e-02, -3.878e-01, -3.162e-01, -2.145e-01) * s0[y+1][x+1];
	r += V4(1.223e-01, 1.440e-02, -1.587e-01, -2.144e-01) * s0[y+1][x+2];
	r += V4(-1.533e-01, 2.709e-02, -8.521e-04, 1.002e-02) * s0[y+2][x+0];
	r += V4(-1.226e-01, 3.850e-01, -1.076e-01, 4.346e-01) * s0[y+2][x+1];
	r += V4(-1.960e-01, 8.058e-02, 1.007e-01, 2.395e-02) * s0[y+2][x+2];
	r += V4(2.465e-02, 2.490e-02, 8.688e-03, -1.639e-02);
	return vec4(r);
}
vec4 f1(int x, int y) {
	V4 r = V4(0.0);
	r += V4(-3.348e-02, 7.203e-02, -7.446e-02, -2.888e-02) * s0[y+0][x+0];
	r += V4(3.468e-02, -2.578e-01, 1.961e-01, 7.943e-02) * s0[y+0][x+1];
	r += V4(1.274e-01, 6.682e-02, 2.089e-01, -4.158e-02) * s0[y+0][x+2];
	r += V4(6.653e-02, 7.155e-02, -2.456e-01, 4.419e-02) * s0[y+1][x+0];
	r += V4(-5.913e-01, 1.185e-01, -1.792e-01, 4.482e-01) * s0[y+1][x+1];
	r += V4(3.590e-01, 8.158e-02, 1.023e-01, -4.925e-01) * s0[y+1][x+2];
	r += V4(9.241e-03, 1.937e-02, 1.293e-01, 5.316e-03) * s0[y+2][x+0];
	r += V4(-1.287e-02, 2.854e-02, -5.013e-02, -3.597e-02) * s0[y+2][x+1];
	r += V4(2.776e-02, -6.372e-02, -8.172e-02, 1.665e-02) * s0[y+2][x+2];
	r += V4(7.269e-05, -3.792e-03, -7.625e-03, 4.514e-03);
	return vec4(r);
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = LUMA_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
		}
	}
	barrier();
	imageStore(out_image, opos + ivec2(0, 0), f0(xy.x, xy.y));
	imageStore(out_image, opos + ivec2(1, 0), f1(xy.x, xy.y));
}


//!DESC CuNNy-8x8C-RCAS-DS-conv1
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND in
//!BIND LUMA
//!SAVE conv1
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
	#define V4 f16vec4
	#define M4 f16mat4
	#define F float16_t
#else
	#define V4 vec4
	#define M4 mat4
	#define F float
#endif
#define l0(x, y) V4(texelFetch(in_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(in_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 s0[10][10];
shared V4 s1[10][10];
shared V4 s2[10][10];
shared V4 s3[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-3.330e-03, 2.191e-01, 2.577e-02, 1.658e-01, 1.881e-01, 9.743e-03, 6.345e-02, -7.153e-02, 6.043e-02, -8.708e-02, 2.953e-01, 3.380e-02, -5.308e-02, -3.308e-01, -8.195e-02, 3.837e-02) * s0[y+0][x+0];
	r += M4(-3.517e-02, -9.372e-02, 1.394e-01, -2.960e-02, -4.665e-02, 2.447e-01, -1.530e-01, -4.563e-01, -4.330e-02, 4.870e-02, -2.137e-02, -6.848e-02, -1.470e-01, -1.339e-01, -2.796e-01, 3.450e-01) * s0[y+0][x+1];
	r += M4(6.525e-02, -4.796e-01, 1.608e-01, -7.988e-02, 1.399e-01, -1.854e-01, -2.539e-02, 1.302e-02, -1.695e-01, 8.623e-02, 9.655e-02, -7.609e-02, 4.502e-02, -9.078e-02, 1.049e-01, -1.690e-01) * s0[y+0][x+2];
	r += M4(3.016e-03, -2.360e-02, 1.563e-01, -9.236e-02, -3.408e-01, -2.388e-02, -8.081e-02, -1.740e-01, -1.328e-02, -3.056e-01, 3.059e-01, -1.348e-01, -1.849e-01, -1.823e-01, 1.366e-01, 3.090e-01) * s0[y+1][x+0];
	r += M4(-7.685e-02, -3.428e-02, 8.274e-02, 1.028e-01, 1.938e-01, -2.157e-01, 3.107e-01, -2.811e-01, -1.289e-01, -1.135e-01, 3.504e-01, 7.958e-02, 8.618e-02, -3.825e-01, -2.248e-02, 6.804e-02) * s0[y+1][x+1];
	r += M4(-1.186e-02, 1.275e-01, 1.262e-01, 1.756e-01, -6.744e-02, -5.921e-02, 9.071e-02, -1.422e-01, -4.128e-01, -2.950e-03, 1.287e-02, 1.407e-01, -1.210e-01, -3.585e-02, 3.336e-02, 2.844e-02) * s0[y+1][x+2];
	r += M4(9.968e-02, 9.719e-02, -6.132e-02, -3.394e-02, 5.192e-02, 1.336e-01, -9.881e-02, -1.779e-02, -3.951e-02, 2.978e-01, 4.711e-02, 1.609e-01, -5.271e-02, -1.042e-01, 1.533e-01, 1.133e-01) * s0[y+2][x+0];
	r += M4(6.558e-03, -8.120e-02, 7.883e-02, 3.809e-02, -8.822e-03, 2.340e-02, 4.284e-02, 2.923e-02, 3.808e-01, -4.920e-02, 2.599e-02, 9.041e-02, 7.601e-03, 2.114e-02, 7.314e-02, -4.743e-02) * s0[y+2][x+1];
	r += M4(-2.232e-02, -2.182e-02, 2.696e-02, 3.106e-02, -8.882e-02, -2.569e-02, -8.231e-02, 1.123e-01, 8.216e-02, -4.640e-02, 1.589e-01, 1.901e-01, -2.269e-05, 8.828e-02, 9.943e-02, 1.179e-01) * s0[y+2][x+2];
	r += M4(-2.832e-02, 1.133e-01, 6.905e-02, 2.957e-02, 8.236e-02, 1.739e-01, -5.369e-04, -1.261e-01, 1.115e-01, 1.095e-02, 2.725e-01, 6.503e-03, 1.810e-01, 1.039e-01, 1.220e-02, -4.308e-02) * s1[y+0][x+0];
	r += M4(4.532e-02, 4.567e-02, 1.525e-01, -9.323e-02, 3.664e-02, 2.902e-01, -1.048e-01, 2.234e-01, 1.430e-01, 2.989e-02, -6.312e-02, -1.662e-01, 1.264e-01, 4.500e-01, -4.103e-02, -2.278e-01) * s1[y+0][x+1];
	r += M4(-1.296e-01, -5.118e-02, 1.474e-01, -2.900e-04, 2.790e-03, 9.538e-02, 4.879e-02, 1.384e-01, 1.464e-02, 2.755e-02, 1.039e-01, 4.637e-02, 1.298e-02, 3.607e-02, 1.586e-01, 7.022e-02) * s1[y+0][x+2];
	r += M4(3.527e-02, -1.710e-01, 1.168e-01, -5.283e-02, 6.666e-02, 6.561e-02, -8.016e-02, 1.216e-01, -1.052e-01, 3.008e-02, 1.331e-01, -7.456e-02, -2.028e-02, 6.846e-02, 9.133e-02, -1.898e-01) * s1[y+1][x+0];
	r += M4(-4.872e-02, 2.624e-02, 5.703e-02, 8.858e-04, 3.721e-01, -2.205e-01, 3.028e-01, 2.102e-01, -4.245e-03, -1.809e-01, 1.663e-01, 4.168e-02, -8.990e-02, 7.788e-02, 2.499e-02, -2.134e-02) * s1[y+1][x+1];
	r += M4(-7.867e-03, 4.144e-02, 1.194e-01, -5.368e-02, -3.303e-01, -1.700e-01, 9.919e-02, -1.827e-02, -1.907e-02, -9.678e-02, -2.777e-02, 3.699e-04, 2.556e-02, 6.500e-02, -4.583e-03, 5.648e-02) * s1[y+1][x+2];
	r += M4(4.408e-02, 6.811e-02, 7.774e-03, 2.767e-02, 1.074e-01, 9.985e-02, -4.189e-02, -7.256e-02, 5.291e-03, 1.009e-02, 3.200e-02, 5.496e-02, -3.505e-02, -3.094e-03, 1.731e-02, 4.704e-02) * s1[y+2][x+0];
	r += M4(1.716e-02, 2.248e-02, 9.654e-02, 1.037e-01, 2.435e-01, -1.626e-01, 2.001e-02, -2.571e-02, 2.456e-01, -9.186e-02, 1.098e-01, -2.158e-02, -2.532e-01, 1.006e-02, 6.094e-02, -2.771e-03) * s1[y+2][x+1];
	r += M4(-5.834e-02, -4.637e-02, 3.266e-02, 4.124e-02, 4.968e-04, -5.942e-02, -9.546e-02, 1.261e-01, 4.871e-02, 2.853e-02, 1.009e-01, 8.937e-02, 4.822e-02, 6.461e-02, 7.732e-02, 4.930e-02) * s1[y+2][x+2];
	r += M4(1.218e-01, -1.616e-01, 1.080e-02, -1.118e-02, -2.056e-02, 6.704e-02, -1.802e-02, -3.105e-03, -6.143e-02, 4.225e-02, 9.026e-02, -5.269e-02, -1.880e-02, -1.376e-01, -1.061e-02, -1.588e-01) * s2[y+0][x+0];
	r += M4(4.957e-02, 2.457e-01, -2.405e-02, 5.835e-02, 9.057e-02, -1.055e-01, -4.897e-02, -6.324e-02, -1.127e-01, -3.004e-01, -5.087e-02, -1.442e-01, 2.925e-02, -4.631e-01, 4.843e-03, 1.270e-02) * s2[y+0][x+1];
	r += M4(-3.324e-02, 1.311e-01, -1.147e-02, -1.272e-01, 4.111e-02, -2.052e-03, -7.330e-03, -1.318e-01, 1.970e-01, 1.090e-01, -7.803e-02, 1.367e-01, -1.067e-01, -1.820e-01, -9.233e-03, -1.890e-04) * s2[y+0][x+2];
	r += M4(-1.287e-01, 1.670e-01, -9.721e-02, -3.796e-01, 7.623e-02, 3.042e-02, -2.095e-01, 6.869e-02, -6.178e-02, -4.912e-02, 7.702e-02, -3.533e-02, 4.136e-02, -1.709e-01, 3.599e-01, 1.868e-02) * s2[y+1][x+0];
	r += M4(3.915e-01, 2.335e-01, 7.370e-02, 3.405e-01, 7.972e-02, 1.995e-01, 7.120e-02, 5.005e-03, -3.465e-02, -3.148e-01, 1.788e-02, -2.149e-01, 5.259e-02, 1.819e-01, -1.104e-01, -4.873e-01) * s2[y+1][x+1];
	r += M4(-1.208e-01, 7.134e-03, 3.946e-02, 1.810e-01, 8.112e-02, 5.391e-02, 1.506e-02, 6.717e-02, 1.624e-01, -2.496e-01, 1.126e-01, 7.652e-02, 8.013e-03, 1.091e-01, -4.335e-02, -2.570e-02) * s2[y+1][x+2];
	r += M4(-2.433e-02, 2.152e-01, -9.786e-02, 4.509e-01, 1.898e-01, -1.353e-01, 4.680e-02, -1.651e-02, -3.268e-02, 8.547e-02, 4.378e-02, 2.093e-01, 9.307e-02, 1.389e-01, -5.094e-02, 9.359e-02) * s2[y+2][x+0];
	r += M4(1.959e-01, 1.428e-01, 3.523e-02, -7.506e-02, -1.651e-02, -9.160e-02, 9.514e-02, -7.307e-03, 2.534e-01, 1.163e-01, -1.392e-01, 4.887e-01, 5.823e-02, 9.551e-02, -7.779e-02, 1.292e-01) * s2[y+2][x+1];
	r += M4(4.007e-02, 6.028e-02, -6.220e-02, -2.982e-02, 1.137e-01, -2.033e-01, -1.612e-01, -4.863e-02, -2.085e-02, -1.473e-02, -6.512e-02, 1.630e-01, -4.053e-02, -8.256e-02, -1.645e-01, -1.833e-02) * s2[y+2][x+2];
	r += M4(5.158e-02, -5.616e-02, 2.867e-02, 2.082e-01, -3.229e-01, 2.140e-01, -7.034e-02, -1.034e-01, 7.682e-03, 6.155e-02, 3.810e-02, -6.397e-02, -8.174e-03, -4.241e-02, 7.224e-03, 1.377e-01) * s3[y+0][x+0];
	r += M4(8.102e-02, -1.032e-01, -4.665e-02, -1.263e-01, 7.962e-02, 4.443e-02, -1.077e-01, 2.510e-02, -1.266e-02, -8.276e-02, -6.097e-02, -1.712e-01, -2.872e-01, 1.831e-01, 7.642e-02, 1.891e-01) * s3[y+0][x+1];
	r += M4(-9.813e-02, 7.964e-03, 1.417e-02, -1.189e-01, -2.015e-01, 3.227e-01, -6.643e-02, 1.261e-01, 6.458e-02, 8.571e-02, -1.032e-01, 1.074e-01, -1.915e-01, 3.514e-02, 6.497e-03, -4.842e-02) * s3[y+0][x+2];
	r += M4(-1.487e-01, 2.251e-01, -1.184e-01, -3.805e-02, 1.490e-02, 3.796e-01, -3.314e-01, 1.065e-01, 1.342e-01, -5.908e-02, 9.975e-02, 8.415e-02, -5.282e-02, -2.776e-01, -4.954e-02, 3.939e-01) * s3[y+1][x+0];
	r += M4(8.385e-02, -5.131e-01, 3.693e-01, 5.307e-02, 2.131e-01, -4.446e-02, -3.731e-03, -4.942e-01, 3.820e-02, -4.713e-02, 1.073e-01, -2.352e-01, -4.305e-01, -4.586e-02, -2.257e-01, 3.152e-01) * s3[y+1][x+1];
	r += M4(1.450e-01, -8.387e-02, -6.384e-02, -9.927e-03, -5.932e-02, -9.299e-02, -3.206e-01, -1.301e-01, -2.076e-04, -3.857e-01, 5.895e-02, 4.058e-02, -1.057e-03, 1.340e-01, -9.464e-03, 5.279e-02) * s3[y+1][x+2];
	r += M4(-1.133e-01, -1.031e-01, -4.827e-02, -1.158e-01, 7.626e-02, -1.007e-01, 7.060e-02, 8.245e-02, -1.305e-01, -5.721e-02, 2.011e-03, 6.384e-02, -1.695e-01, -1.026e-01, -1.526e-01, -4.563e-01) * s3[y+2][x+0];
	r += M4(2.431e-02, 3.668e-03, -3.658e-03, 5.824e-02, 1.867e-01, -8.017e-02, 2.570e-01, -1.349e-01, -3.037e-01, 2.913e-01, -9.751e-02, 1.360e-01, -1.880e-01, -1.140e-01, -3.195e-02, -9.332e-02) * s3[y+2][x+1];
	r += M4(1.317e-02, -4.643e-02, -5.863e-02, -1.873e-02, 4.741e-02, 2.575e-01, -1.937e-01, 4.030e-02, -9.801e-02, 2.790e-01, -2.782e-02, 1.635e-01, -1.443e-03, 8.693e-02, -1.587e-01, 7.062e-02) * s3[y+2][x+2];
	r += V4(-3.353e-02, 2.991e-03, -1.625e-02, 1.569e-02);
	return vec4(r);
}
vec4 f1(int x, int y) {
	V4 r = V4(0.0);
	r += M4(1.538e-01, 6.550e-02, 1.122e-01, 3.178e-03, -1.550e-01, -2.165e-02, 1.186e-01, 1.306e-01, 2.819e-01, 1.775e-01, 2.653e-01, 2.371e-02, -3.052e-01, -5.120e-03, -1.101e-01, 8.163e-02) * s0[y+0][x+0];
	r += M4(1.293e-01, 2.045e-01, 5.451e-02, -4.232e-01, -4.298e-01, 2.420e-01, 2.504e-01, -1.180e-01, 4.222e-02, 6.450e-02, -2.037e-03, -4.406e-03, -1.710e-01, -7.485e-02, -1.827e-01, 2.497e-01) * s0[y+0][x+1];
	r += M4(-8.530e-02, 9.972e-02, 2.070e-01, -1.242e-01, -4.420e-01, -1.415e-01, 1.624e-01, 7.272e-02, 3.491e-01, 2.180e-01, 1.565e-02, -3.424e-01, 1.386e-01, 5.130e-02, -5.545e-02, -7.983e-02) * s0[y+0][x+2];
	r += M4(5.125e-02, -7.985e-02, -1.964e-01, -1.089e-01, -6.118e-03, -1.314e-01, 2.353e-01, -3.271e-02, -3.321e-01, -8.735e-02, -3.011e-01, 6.626e-02, -1.703e-01, 2.503e-01, -2.338e-01, -9.020e-02) * s0[y+1][x+0];
	r += M4(5.089e-02, 1.496e-01, 8.507e-02, 1.401e-01, 1.331e-01, 1.454e-01, 9.194e-02, -2.674e-01, -3.908e-02, -2.962e-01, -3.104e-01, -3.222e-01, 4.158e-01, 6.576e-02, -4.655e-01, -2.551e-01) * s0[y+1][x+1];
	r += M4(-1.101e-01, -2.552e-01, 1.780e-01, 6.454e-02, -4.396e-02, -1.795e-01, 1.326e-01, 1.556e-01, 1.542e-01, 4.189e-02, 1.476e-01, -1.240e-01, -1.791e-02, 1.305e-02, -1.053e-01, -1.303e-01) * s0[y+1][x+2];
	r += M4(-3.336e-02, -5.501e-02, -1.713e-01, 4.525e-02, -2.952e-02, 6.057e-02, 2.857e-02, 1.394e-01, -4.010e-02, 6.106e-02, 1.312e-01, 7.503e-02, 8.364e-02, -1.059e-01, -1.211e-02, -2.567e-01) * s0[y+2][x+0];
	r += M4(8.617e-03, -3.370e-02, 1.296e-01, -1.528e-02, -1.399e-01, -2.614e-01, -5.178e-02, 2.235e-01, -7.083e-02, -1.857e-01, 7.215e-01, 6.351e-02, -8.001e-03, -3.109e-01, 1.549e-01, -9.637e-02) * s0[y+2][x+1];
	r += M4(-1.803e-01, -1.621e-01, 3.840e-02, -6.416e-02, 2.825e-02, -1.362e-04, -2.445e-02, -7.604e-02, -1.046e-01, 4.678e-02, -1.778e-01, 3.771e-02, -7.496e-02, -1.587e-01, -4.918e-02, -3.919e-02) * s0[y+2][x+2];
	r += M4(5.164e-02, 4.593e-02, 1.831e-01, 6.705e-02, 3.686e-02, -5.053e-02, -1.430e-01, -8.419e-02, 7.314e-02, 4.224e-02, 4.383e-02, 2.243e-02, 9.639e-02, -9.555e-02, 2.827e-01, 1.057e-02) * s1[y+0][x+0];
	r += M4(1.010e-01, 1.275e-01, -5.565e-02, -1.640e-01, 1.933e-02, 4.239e-03, -1.009e-01, 3.883e-01, -1.556e-01, -1.978e-01, 1.559e-01, -1.082e-01, -5.196e-01, 9.819e-02, 2.882e-01, 1.028e-01) * s1[y+0][x+1];
	r += M4(-3.715e-02, -1.391e-02, 2.291e-02, -5.530e-02, -1.249e-01, 6.083e-02, -2.073e-01, -1.829e-01, 1.625e-01, 1.570e-01, 1.805e-02, -2.164e-02, -3.154e-01, -2.470e-01, 1.112e-01, 8.343e-02) * s1[y+0][x+2];
	r += M4(-6.262e-02, -1.113e-01, -1.677e-01, 5.345e-02, -5.465e-02, -3.896e-02, -3.323e-02, 2.893e-02, -1.275e-01, 9.445e-04, -6.862e-02, -1.163e-01, 3.063e-02, 4.934e-02, -3.248e-01, 3.578e-02) * s1[y+1][x+0];
	r += M4(1.113e-01, 3.654e-02, -1.065e-01, 5.366e-02, -6.254e-02, 2.386e-01, -5.948e-01, -6.943e-02, 1.080e-01, -1.101e-01, 1.123e-01, -1.239e-02, 1.218e-01, 9.645e-02, 9.406e-02, -6.396e-02) * s1[y+1][x+1];
	r += M4(-6.208e-02, -2.066e-01, 3.869e-02, 1.002e-01, -3.895e-02, 9.704e-02, -1.897e-01, -5.188e-02, 1.098e-01, 1.036e-01, 7.543e-02, 9.694e-03, -9.789e-02, -9.463e-02, 9.230e-02, -2.051e-01) * s1[y+1][x+2];
	r += M4(1.097e-02, 7.865e-02, -5.042e-02, 2.205e-02, -1.458e-01, 2.472e-02, 1.753e-03, 4.049e-02, -1.209e-02, 6.396e-02, -1.302e-01, 3.222e-02, 1.009e-01, 3.001e-02, -1.242e-02, -1.238e-01) * s1[y+2][x+0];
	r += M4(-3.020e-02, -1.574e-02, 3.425e-02, -7.812e-02, 7.111e-02, 8.794e-02, -1.520e-01, -7.440e-02, -2.887e-02, -1.280e-01, 5.310e-02, 1.096e-01, -9.671e-02, -6.595e-03, 2.144e-01, 2.563e-02) * s1[y+2][x+1];
	r += M4(-7.998e-02, -4.328e-02, -4.226e-02, -9.948e-02, 8.613e-02, 1.241e-02, -8.431e-02, 2.667e-02, 2.279e-02, 1.250e-02, -6.000e-02, 3.706e-02, -9.595e-02, -5.358e-02, -2.172e-02, -3.533e-02) * s1[y+2][x+2];
	r += M4(-1.210e-01, 6.790e-02, -5.868e-02, 1.251e-01, -4.824e-02, 2.707e-02, 4.972e-02, 7.152e-02, -6.086e-02, 9.822e-02, 5.579e-02, -1.234e-01, -1.889e-01, 1.507e-02, 8.733e-02, -6.240e-02) * s2[y+0][x+0];
	r += M4(-5.421e-02, 8.617e-02, 1.223e-01, -5.260e-02, 5.053e-02, -2.827e-02, 6.495e-02, -4.054e-02, 6.565e-03, 3.254e-02, 1.624e-01, -2.055e-02, -8.555e-02, -1.529e-01, -1.477e-01, 2.339e-01) * s2[y+0][x+1];
	r += M4(1.058e-01, 1.851e-01, 9.692e-02, -1.609e-01, 1.550e-01, 9.024e-02, 1.369e-01, 3.482e-02, -9.459e-02, -1.459e-01, -7.831e-02, 1.438e-01, 1.850e-01, -5.009e-02, 1.841e-01, -5.963e-02) * s2[y+0][x+2];
	r += M4(-2.064e-01, 1.129e-01, 2.514e-01, 1.776e-01, -1.155e-02, 5.671e-03, -6.077e-03, -3.938e-02, -1.327e-01, -1.029e-01, -4.077e-02, 9.364e-02, 4.149e-01, 2.046e-01, -1.150e-01, -6.434e-01) * s2[y+1][x+0];
	r += M4(4.895e-02, -7.700e-02, -4.943e-01, 1.125e-01, -1.141e-01, 5.846e-02, -3.724e-02, -1.268e-01, 2.115e-02, -1.338e-02, -3.910e-01, 1.220e-01, 2.645e-01, 1.111e-01, 2.083e-01, 7.775e-02) * s2[y+1][x+1];
	r += M4(-2.110e-01, -1.183e-01, -1.058e-01, 1.587e-01, 1.603e-01, 1.290e-01, -8.822e-02, -8.566e-02, -3.024e-01, -1.279e-01, 2.530e-01, -8.087e-02, 2.736e-02, 2.322e-02, -5.402e-02, 4.479e-02) * s2[y+1][x+2];
	r += M4(7.863e-02, 1.679e-01, -9.224e-02, -1.617e-01, -4.355e-02, -1.209e-01, 5.063e-02, 1.508e-01, -4.803e-03, 1.332e-01, -1.108e-01, -1.108e-01, 1.947e-01, 2.680e-01, 1.059e-01, -4.711e-02) * s2[y+2][x+0];
	r += M4(-3.584e-02, -2.237e-02, -5.772e-01, -1.416e-01, -1.030e-01, -2.117e-01, -8.863e-02, -6.055e-02, 7.068e-02, 4.978e-02, -2.278e-01, -9.407e-02, 4.711e-02, 3.247e-02, 3.205e-01, -1.162e-02) * s2[y+2][x+1];
	r += M4(2.501e-02, -4.870e-02, -2.705e-01, 1.302e-01, 1.026e-01, 4.750e-03, 4.688e-02, -6.182e-02, -6.467e-02, -5.700e-02, -1.869e-01, 2.747e-01, 9.092e-02, 9.686e-03, 4.706e-02, -2.716e-02) * s2[y+2][x+2];
	r += M4(4.380e-02, 2.146e-02, -5.998e-02, 7.579e-02, -5.456e-02, 3.406e-02, 1.499e-01, -2.862e-01, 9.393e-02, -5.057e-02, 3.825e-03, -1.517e-01, 1.175e-01, 1.779e-01, 3.977e-02, 5.319e-02) * s3[y+0][x+0];
	r += M4(-4.056e-01, 5.486e-03, 2.822e-01, 7.311e-02, 1.132e-01, -4.021e-01, 3.620e-01, 3.860e-01, -3.272e-02, 4.049e-02, -1.494e-03, 6.750e-02, 4.365e-01, -1.333e-01, -1.426e-02, 2.506e-02) * s3[y+0][x+1];
	r += M4(2.647e-01, 1.656e-01, 8.667e-02, -1.444e-02, 2.133e-01, 1.508e-01, -2.525e-02, -3.230e-01, -2.589e-02, -1.647e-01, 8.656e-03, 7.334e-02, -1.781e-01, -5.279e-02, 1.119e-01, -1.788e-01) * s3[y+0][x+2];
	r += M4(-2.983e-01, -2.258e-02, 1.153e-01, 6.695e-01, 9.990e-02, -2.027e-01, -1.538e-01, -2.959e-01, -7.311e-02, -1.670e-02, -1.057e-01, 2.227e-01, -2.959e-01, -3.146e-01, 9.742e-02, 1.505e-01) * s3[y+1][x+0];
	r += M4(6.184e-02, -2.684e-01, 1.313e-01, -1.048e-01, 2.513e-01, 4.596e-01, -1.463e-01, -3.207e-01, 3.886e-01, 6.236e-02, 3.219e-01, -1.420e-01, -1.880e-01, -6.557e-02, 2.483e-01, 2.150e-01) * s3[y+1][x+1];
	r += M4(1.606e-01, 5.099e-02, 1.181e-01, -3.312e-02, -1.056e-01, 3.696e-01, 3.454e-01, -6.944e-01, -1.188e-01, -7.941e-02, -2.421e-03, 4.978e-02, -2.378e-01, -1.178e-01, -2.602e-01, 5.180e-02) * s3[y+1][x+2];
	r += M4(4.235e-03, -3.646e-03, 8.179e-02, 3.629e-01, 8.048e-02, -1.073e-01, -2.347e-01, 5.994e-03, 3.988e-02, 6.307e-02, 2.477e-02, -9.997e-02, -2.234e-02, -9.868e-04, -4.501e-01, -5.173e-02) * s3[y+2][x+0];
	r += M4(-8.198e-02, -1.169e-01, 3.229e-01, 6.481e-02, 1.099e-01, -3.865e-01, -9.710e-02, 2.599e-01, 2.673e-01, 9.695e-02, -1.623e-01, 1.793e-01, -2.584e-01, 8.810e-02, -6.490e-01, -1.202e-01) * s3[y+2][x+1];
	r += M4(-9.474e-03, -2.762e-02, -6.462e-02, -8.190e-02, 4.435e-01, 3.702e-01, -1.512e-01, 5.269e-02, 9.920e-02, 5.764e-02, 2.340e-02, 6.341e-03, 7.259e-02, 2.565e-02, -1.892e-01, 8.464e-02) * s3[y+2][x+2];
	r += V4(2.036e-02, -1.186e-02, 1.008e-02, -7.976e-03);
	return vec4(r);
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = in_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
			s2[ay][ax] = l1(x - 1, y - 1);
			s1[ay][ax] = -max(-s0[ay][ax], V4(0.0));
			s0[ay][ax] = max(s0[ay][ax], V4(0.0));
			s3[ay][ax] = -max(-s2[ay][ax], V4(0.0));
			s2[ay][ax] = max(s2[ay][ax], V4(0.0));
		}
	}
	barrier();
	imageStore(out_image, opos + ivec2(0, 0), f0(xy.x, xy.y));
	imageStore(out_image, opos + ivec2(1, 0), f1(xy.x, xy.y));
}


//!DESC CuNNy-8x8C-RCAS-DS-conv2
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv1
//!BIND LUMA
//!SAVE conv2
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
	#define V4 f16vec4
	#define M4 f16mat4
	#define F float16_t
#else
	#define V4 vec4
	#define M4 mat4
	#define F float
#endif
#define l0(x, y) V4(texelFetch(conv1_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv1_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 s0[10][10];
shared V4 s1[10][10];
shared V4 s2[10][10];
shared V4 s3[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-6.857e-02, 5.357e-04, -1.178e-03, 2.334e-01, 7.547e-03, -2.220e-01, -1.722e-02, 1.723e-01, -4.636e-01, 8.554e-01, 2.687e-01, 7.899e-01, 1.457e-03, 5.642e-02, -2.332e-05, -1.057e-01) * s0[y+0][x+0];
	r += M4(5.939e-02, 9.739e-02, 1.894e-01, -1.317e-01, -1.029e-01, 1.114e-01, -8.191e-02, -1.572e-02, 3.450e-02, -8.301e-02, 9.350e-01, -3.370e-01, 1.267e-01, -1.367e-01, 1.052e-01, 2.596e-01) * s0[y+0][x+1];
	r += M4(-7.311e-02, 9.722e-03, 5.448e-02, 1.578e-01, -2.155e-02, 4.257e-02, 1.065e-01, -3.864e-02, 7.568e-01, 8.827e-01, 7.689e-01, -3.393e-01, 8.194e-02, 7.924e-03, -1.166e-01, 4.458e-02) * s0[y+0][x+2];
	r += M4(-6.801e-02, -1.693e-02, -4.064e-02, -5.455e-02, -1.473e-02, 2.696e-01, -3.328e-02, -4.547e-02, 9.170e-01, 6.807e-01, 4.720e-01, 2.089e-01, 1.372e-01, -6.631e-02, 9.890e-02, 1.385e-02) * s0[y+1][x+0];
	r += M4(-2.270e-01, -5.541e-02, -1.293e-01, -6.899e-02, -2.904e-02, 1.821e-01, -8.366e-02, -4.173e-01, 2.312e+00, 1.884e+00, 2.128e+00, -6.850e-02, 3.760e-01, -3.733e-02, 7.778e-02, 6.653e-01) * s0[y+1][x+1];
	r += M4(9.498e-02, 2.789e-02, -1.432e-01, -1.179e-01, -9.183e-03, -6.649e-02, -4.383e-02, -4.716e-02, 4.502e-01, 8.524e-01, 1.819e+00, 1.490e-02, 1.439e-01, 4.719e-02, 2.262e-01, 4.401e-02) * s0[y+1][x+2];
	r += M4(1.982e-02, -7.132e-02, 1.774e-01, 8.715e-02, 5.368e-02, 3.353e-02, -8.140e-02, -1.007e-01, 4.597e-01, 4.757e-01, 2.054e-01, -2.692e-01, -1.980e-02, 1.610e-02, 6.027e-02, 1.018e-01) * s0[y+2][x+0];
	r += M4(2.039e-01, -3.248e-02, -1.313e-01, 1.042e-01, 7.318e-02, -5.543e-03, 1.456e-01, -4.844e-02, -3.831e-01, 6.499e-01, -6.541e-02, 3.211e-01, -5.189e-02, 2.883e-02, -2.285e-01, -1.618e-02) * s0[y+2][x+1];
	r += M4(8.979e-02, 7.111e-02, -8.602e-02, -6.623e-02, -1.747e-01, 3.381e-02, -3.295e-02, -9.611e-02, -4.681e-01, 1.616e-01, 4.897e-01, -4.449e-02, -8.440e-03, -1.406e-02, -4.650e-02, 1.395e-02) * s0[y+2][x+2];
	r += M4(5.452e-02, 9.142e-02, -4.264e-02, 2.336e-01, 8.277e-02, -8.729e-02, 3.615e-03, 7.391e-02, 2.551e-02, 6.859e-02, 4.014e-02, -1.571e-01, 4.884e-02, 4.335e-02, -4.702e-02, -5.440e-02) * s1[y+0][x+0];
	r += M4(3.225e-02, -1.086e-01, 2.163e-01, -2.933e-01, 2.157e-02, 1.027e-01, -5.623e-02, -1.428e-01, 1.023e-01, -1.754e-01, -9.106e-02, -2.553e-02, -1.854e-01, 4.702e-02, -1.022e-01, 2.427e-02) * s1[y+0][x+1];
	r += M4(-1.455e-01, 6.375e-03, 8.236e-02, 2.780e-01, -1.272e-01, 1.142e-02, 3.972e-02, -1.068e-01, 7.692e-02, 1.614e-02, 7.552e-02, 7.642e-02, 4.066e-02, -4.371e-02, -4.873e-02, 1.186e-01) * s1[y+0][x+2];
	r += M4(-7.256e-02, 1.069e-01, -1.999e-02, -1.189e-01, -1.499e-01, -1.821e-01, 4.213e-02, -5.347e-02, 7.055e-02, -9.908e-02, 1.454e-02, 4.897e-03, 1.172e-01, -8.937e-02, 2.188e-02, 2.236e-01) * s1[y+1][x+0];
	r += M4(9.985e-02, 1.083e-01, 3.155e-01, -2.306e-01, -4.007e-01, -1.773e-01, -1.672e-01, -2.015e-01, 9.050e-03, -7.818e-02, 7.215e-02, 1.792e-02, 1.228e-01, -5.353e-04, -2.391e-01, 1.819e-01) * s1[y+1][x+1];
	r += M4(6.132e-03, -5.776e-02, -7.174e-02, -2.977e-02, -9.212e-03, -5.081e-02, -9.289e-02, -6.833e-02, -1.129e-01, 6.447e-04, 1.289e-02, -5.625e-02, -1.988e-01, 2.412e-02, 1.987e-02, 5.847e-02) * s1[y+1][x+2];
	r += M4(5.914e-02, -7.364e-02, 2.983e-02, -6.996e-02, 2.564e-02, -2.150e-01, 1.687e-01, 3.063e-02, 1.873e-03, -7.712e-02, 1.058e-01, 2.156e-02, 3.136e-02, 4.248e-02, -4.655e-02, 8.022e-02) * s1[y+2][x+0];
	r += M4(1.806e-01, -3.473e-02, -1.536e-01, 8.877e-03, 1.160e-01, 8.366e-02, 1.238e-01, -3.095e-02, -1.012e-01, 2.443e-02, -2.085e-01, 2.733e-02, 1.530e-01, 1.003e-01, -1.531e-01, 1.228e-02) * s1[y+2][x+1];
	r += M4(2.196e-02, -1.781e-03, -3.272e-03, -3.153e-02, -2.125e-02, 1.056e-01, 1.907e-01, 1.512e-02, -8.497e-02, -3.860e-02, -1.190e-01, 2.389e-02, 1.748e-01, -6.870e-02, -1.054e-01, -7.242e-03) * s1[y+2][x+2];
	r += M4(-2.054e-02, 8.459e-02, 5.579e-02, -7.626e-03, 4.142e-02, 3.276e-02, -1.691e-02, 2.264e-01, -1.169e-01, 8.748e-02, 2.991e-02, -6.125e-02, 1.058e-01, 1.585e-01, -7.420e-02, 6.075e-02) * s2[y+0][x+0];
	r += M4(-8.207e-02, 1.474e-01, 8.461e-02, -3.446e-01, -3.821e-02, 1.034e-01, 2.953e-03, 3.194e-01, -1.033e-01, -1.216e-01, -9.941e-02, -3.271e-01, -8.126e-02, -1.578e-01, -2.516e-02, 2.808e-03) * s2[y+0][x+1];
	r += M4(-1.372e-01, 1.427e-02, 5.873e-02, 1.252e-01, 6.263e-02, 1.220e-01, -1.186e-01, -2.681e-01, 2.359e-02, 4.896e-02, 1.549e-02, 6.655e-02, 4.430e-02, 1.373e-02, -6.389e-02, -1.853e-01) * s2[y+0][x+2];
	r += M4(-3.353e-01, -2.566e-01, -2.490e-02, -2.856e-01, 3.201e-02, 5.079e-03, 4.660e-03, 8.866e-02, 1.587e-01, 4.351e-02, -1.652e-01, 1.781e-01, 4.601e-02, 6.241e-02, -1.501e-01, -8.743e-02) * s2[y+1][x+0];
	r += M4(-2.261e-01, -2.979e-01, 1.511e-02, -3.771e-02, -2.911e-01, 1.553e-01, -4.682e-04, -2.153e-01, -1.929e-01, 1.420e-01, -2.481e-01, -1.167e-01, -9.610e-02, 1.301e-01, 1.436e-01, -1.888e-01) * s2[y+1][x+1];
	r += M4(-1.606e-01, 7.382e-02, 3.508e-02, 1.889e-01, -8.223e-02, -5.487e-02, 4.295e-02, -5.710e-02, 8.378e-02, -5.965e-02, -6.261e-02, 1.175e-01, 1.732e-01, 2.574e-02, -1.186e-01, -2.293e-01) * s2[y+1][x+2];
	r += M4(-2.117e-01, -3.264e-02, -5.125e-02, -2.215e-02, -6.913e-02, 1.257e-03, -5.993e-02, -7.121e-02, 9.547e-02, 6.961e-02, -1.243e-01, -3.413e-04, -1.117e-01, 4.398e-02, -8.911e-02, 3.429e-02) * s2[y+2][x+0];
	r += M4(-6.940e-01, 1.326e-01, -1.719e-01, -1.257e-01, 1.213e-01, -4.155e-03, -2.071e-02, -9.122e-02, 3.280e-02, -1.736e-01, 3.705e-02, 3.387e-02, 6.793e-04, 6.463e-02, 8.978e-02, -8.278e-02) * s2[y+2][x+1];
	r += M4(-4.678e-02, 5.043e-02, 7.581e-02, 4.694e-02, -1.134e-01, -4.523e-02, -2.085e-01, -4.398e-02, 1.380e-02, 5.087e-02, 1.607e-01, 7.047e-03, 1.360e-01, -3.860e-02, 5.185e-02, -2.620e-02) * s2[y+2][x+2];
	r += M4(-8.892e-02, -1.732e-02, -2.694e-02, -1.531e-02, 3.203e-01, -1.408e-01, 1.421e-01, 1.583e-01, -8.771e-02, -3.795e-02, -1.125e-02, -1.554e-01, 2.211e-02, -6.056e-03, 8.556e-02, 4.955e-02) * s3[y+0][x+0];
	r += M4(5.521e-02, 3.799e-02, 6.758e-02, -1.719e-01, -6.533e-04, 2.020e-02, 2.288e-01, 3.613e-03, -9.684e-02, -7.754e-02, -4.499e-02, -3.282e-01, -6.315e-02, -7.626e-02, 1.047e-03, -1.463e-01) * s3[y+0][x+1];
	r += M4(-1.192e-01, 3.301e-02, -2.564e-02, 3.424e-03, 1.278e-01, 2.867e-02, -2.238e-01, -5.639e-02, -1.498e-01, -8.769e-03, -4.667e-03, -6.076e-02, -5.271e-02, -1.071e-02, -3.718e-02, -1.116e-01) * s3[y+0][x+2];
	r += M4(-1.103e-01, -8.806e-02, -6.654e-02, -1.462e-01, 1.468e-01, 1.772e-01, -3.967e-03, 1.645e-01, -1.793e-01, -1.401e-01, 4.319e-02, 1.928e-02, -5.262e-02, -7.560e-02, -6.196e-02, -7.817e-02) * s3[y+1][x+0];
	r += M4(-2.880e-02, -3.621e-02, -1.233e-01, 3.252e-01, -6.397e-01, -1.626e-01, -4.573e-01, -2.369e-01, -2.788e-01, -1.710e-01, -8.043e-03, -1.911e-02, -2.646e-01, -3.315e-02, -1.850e-01, 2.436e-02) * s3[y+1][x+1];
	r += M4(1.430e-01, 4.187e-02, 6.916e-02, 2.081e-01, 9.331e-02, -2.904e-02, -5.456e-02, -1.126e-01, -1.737e-02, -1.226e-02, -1.586e-01, -3.074e-02, 1.843e-01, -3.102e-02, -1.584e-01, -9.252e-02) * s3[y+1][x+2];
	r += M4(-6.364e-02, 1.992e-01, 3.035e-02, 1.433e-01, -1.785e-01, 2.045e-02, -3.557e-02, 2.542e-02, 5.311e-02, 5.522e-03, -7.627e-03, 4.473e-02, -9.764e-02, -3.880e-02, -1.677e-02, 4.438e-03) * s3[y+2][x+0];
	r += M4(-1.113e-01, 1.450e-01, -8.905e-02, -4.352e-02, 1.579e-01, -1.719e-02, 1.590e-01, -5.237e-02, -2.168e-01, -1.210e-01, -1.321e-02, -5.441e-02, -1.289e-01, -6.072e-02, 1.342e-01, -6.162e-02) * s3[y+2][x+1];
	r += M4(2.660e-01, 1.875e-04, -2.180e-01, -3.560e-02, 5.488e-02, 1.030e-02, 5.489e-03, 1.383e-02, -4.271e-03, 1.280e-01, 1.098e-01, -2.218e-02, -1.297e-02, 2.239e-02, 1.428e-01, -4.166e-02) * s3[y+2][x+2];
	r += V4(4.333e-02, -2.417e-01, -4.318e-02, 1.140e-02);
	return vec4(r);
}
vec4 f1(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-4.719e-02, -4.876e-02, -2.544e-02, -9.282e-02, -1.905e-02, 1.226e-01, 7.477e-02, -4.928e-02, -9.695e-02, -1.120e+00, 3.776e-01, -4.217e-01, -3.778e-02, 1.151e-02, 6.799e-02, 3.755e-02) * s0[y+0][x+0];
	r += M4(-1.338e-01, 5.325e-02, 4.569e-02, -9.548e-03, -8.784e-03, -2.043e-01, 1.655e-01, -9.864e-02, 3.841e-01, -2.045e+00, -6.879e-01, -1.410e-01, 9.016e-02, 2.568e-01, 5.201e-02, -1.382e-01) * s0[y+0][x+1];
	r += M4(-2.139e-02, 8.129e-02, -1.278e-02, 2.125e-03, 1.312e-02, 8.085e-03, 9.382e-02, 8.306e-02, -3.056e-01, 4.272e-01, -5.527e-01, -7.323e-01, -1.880e-02, 1.516e-02, 3.117e-01, -7.290e-04) * s0[y+0][x+2];
	r += M4(-6.402e-02, 3.757e-02, -1.398e-02, 8.498e-02, -1.102e-01, -3.097e-02, -1.425e-01, 2.679e-01, 1.228e-01, -4.607e-01, 3.488e-01, -1.366e+00, -7.050e-02, 5.241e-02, 6.216e-02, -6.052e-02) * s0[y+1][x+0];
	r += M4(-1.369e-01, -2.687e-01, -1.662e-01, 2.536e-01, -2.593e-01, 3.698e-01, -6.022e-02, -1.273e-01, 6.311e-01, -3.356e+00, 9.136e-01, -1.710e+00, -5.072e-02, 1.802e-01, -1.885e-01, -2.403e-01) * s0[y+1][x+1];
	r += M4(5.692e-03, -5.945e-02, 3.005e-02, 2.872e-02, -1.509e-01, -1.907e-02, -1.197e-01, 1.818e-02, -4.534e-01, 7.920e-01, 5.757e-02, -7.864e-01, -2.927e-01, 3.027e-01, -1.328e-01, -2.935e-01) * s0[y+1][x+2];
	r += M4(-7.971e-02, 1.328e-01, 1.205e-01, -3.479e-02, 7.190e-02, -1.068e-01, 3.659e-02, -4.351e-02, 2.326e-01, 6.781e-01, -1.235e-01, 1.260e-01, -4.471e-02, 1.106e-01, -3.433e-02, 9.056e-02) * s0[y+2][x+0];
	r += M4(5.654e-02, -1.304e-01, -3.549e-02, -1.366e-01, 6.073e-01, -3.694e-02, 8.763e-02, 1.313e-02, -3.185e-01, -1.975e-01, -8.989e-02, -4.341e-01, -2.278e-01, 1.439e-01, -3.860e-03, -1.938e-01) * s0[y+2][x+1];
	r += M4(-9.106e-03, -2.598e-02, -2.197e-02, -4.500e-02, -3.426e-02, -2.178e-02, -8.560e-02, 4.534e-03, -4.171e-01, 1.637e-03, 5.742e-02, -5.245e-01, 9.756e-04, 1.268e-01, -1.723e-03, -3.898e-02) * s0[y+2][x+2];
	r += M4(-3.003e-02, 3.059e-02, -1.079e-01, 3.626e-02, 4.500e-02, 1.926e-01, 6.083e-02, -3.447e-02, 3.851e-02, 1.229e-01, 9.991e-02, -3.373e-02, 5.602e-02, 2.893e-02, -1.925e-02, 6.980e-02) * s1[y+0][x+0];
	r += M4(-8.728e-02, -7.139e-02, -7.427e-02, 7.880e-02, -2.142e-02, 7.173e-02, 1.754e-02, -8.780e-02, 7.211e-02, -2.085e-01, -1.028e-01, 1.170e-01, -2.409e-03, -1.367e-01, 3.791e-02, -9.249e-02) * s1[y+0][x+1];
	r += M4(7.861e-03, 5.371e-02, -2.468e-02, -4.789e-02, -9.132e-02, -1.059e-03, -4.578e-02, -2.827e-02, 4.200e-02, 3.239e-02, -2.502e-01, -2.718e-02, 1.089e-02, -1.026e-01, 1.667e-01, -4.445e-02) * s1[y+0][x+2];
	r += M4(-8.714e-02, 1.858e-01, 2.931e-02, -6.703e-02, 9.888e-02, 8.694e-02, -1.519e-01, 1.314e-01, 1.014e-01, -9.868e-02, 1.665e-02, -3.881e-02, 7.648e-02, -6.781e-02, 7.473e-02, 1.802e-01) * s1[y+1][x+0];
	r += M4(-2.170e-01, -2.955e-01, -5.714e-02, 1.266e-01, -3.123e-01, 1.989e-01, 2.285e-03, -3.074e-02, -5.421e-02, -5.344e-02, -1.884e-01, -9.812e-02, -3.728e-02, -7.134e-02, -2.277e-02, 2.276e-02) * s1[y+1][x+1];
	r += M4(1.371e-01, -3.582e-02, 2.022e-01, 2.178e-01, 8.450e-02, 3.576e-02, -3.341e-02, 5.175e-02, 5.049e-02, 7.344e-02, -1.881e-01, 1.388e-01, -2.395e-02, -2.708e-02, 5.687e-02, -1.896e-01) * s1[y+1][x+2];
	r += M4(5.124e-02, 1.785e-01, 2.154e-02, -8.125e-03, 1.243e-01, -2.553e-04, 3.083e-02, -3.999e-01, -1.091e-01, 2.041e-02, 9.305e-02, -1.222e-01, 6.732e-03, -4.724e-02, -1.052e-01, 1.753e-01) * s1[y+2][x+0];
	r += M4(-7.416e-02, 3.607e-02, -4.630e-02, -2.250e-01, 2.344e-01, -3.726e-02, 4.860e-02, 1.294e-01, -8.011e-02, -1.688e-02, -2.222e-01, 1.836e-02, -1.601e-01, 3.498e-02, -2.598e-02, -3.980e-02) * s1[y+2][x+1];
	r += M4(4.298e-02, 6.211e-03, -5.357e-02, 5.334e-02, 3.427e-02, 1.606e-02, 1.015e-01, 1.828e-02, -1.021e-01, 1.232e-02, -1.518e-02, 2.771e-02, 3.647e-02, -6.930e-02, -5.885e-03, 1.835e-02) * s1[y+2][x+2];
	r += M4(-4.618e-02, -2.862e-02, -2.565e-02, -6.396e-02, -2.960e-02, -5.186e-03, -4.327e-02, 7.125e-02, 1.708e-02, -2.388e-01, -4.209e-02, -2.660e-02, -1.271e-03, -4.115e-02, -1.718e-01, 1.522e-01) * s2[y+0][x+0];
	r += M4(-1.261e-01, -7.584e-02, -1.015e-01, 1.845e-02, -1.227e-02, -5.271e-02, 2.875e-02, -1.929e-01, 1.746e-02, -1.220e-01, -1.062e-01, 1.715e-02, -2.677e-02, -2.415e-01, 2.872e-02, -2.113e-02) * s2[y+0][x+1];
	r += M4(-4.957e-02, 2.116e-02, -1.366e-01, -9.881e-02, -4.796e-02, -1.260e-01, -2.962e-02, -3.018e-02, -6.935e-02, 6.987e-02, -7.468e-02, -6.466e-03, 1.071e-01, -5.389e-02, -7.709e-02, 9.073e-02) * s2[y+0][x+2];
	r += M4(-9.390e-02, -5.718e-02, 5.463e-02, -1.785e-01, 2.754e-02, 5.816e-02, -9.741e-02, -7.719e-02, 4.176e-02, -8.935e-02, 1.034e-01, 4.520e-02, -1.135e-01, 9.484e-02, -3.688e-02, 2.816e-01) * s2[y+1][x+0];
	r += M4(1.350e-01, 1.630e-02, 1.247e-01, 8.141e-02, -1.268e-01, -9.313e-02, 5.577e-02, 1.661e-01, 6.077e-01, 1.272e-01, 8.486e-02, 2.527e-01, -6.009e-02, 1.114e-01, 2.211e-01, -6.478e-01) * s2[y+1][x+1];
	r += M4(8.237e-02, 6.023e-02, 5.703e-02, 3.193e-01, -1.446e-01, -4.993e-02, -1.211e-01, -2.953e-01, -8.588e-02, -4.795e-02, 5.603e-03, -9.469e-02, -3.460e-01, -1.723e-04, -8.950e-04, -1.343e-01) * s2[y+1][x+2];
	r += M4(1.162e-01, 3.679e-04, 2.027e-02, -8.472e-02, 8.028e-03, 1.085e-01, 6.142e-02, -6.176e-02, -3.604e-02, -7.143e-02, -2.437e-02, -1.001e-01, -1.401e-02, 8.734e-02, -1.443e-01, 3.352e-01) * s2[y+2][x+0];
	r += M4(-1.586e-01, 1.558e-01, 2.265e-02, -3.406e-01, 1.606e-01, 2.366e-02, -4.990e-02, 8.450e-02, 2.548e-01, -3.978e-02, -8.567e-02, 3.111e-02, -2.772e-01, -1.818e-01, 2.468e-01, -5.958e-02) * s2[y+2][x+1];
	r += M4(-1.083e-01, -2.795e-02, -1.216e-01, 4.085e-02, 3.157e-02, -1.514e-02, -7.651e-02, -1.544e-01, -8.501e-03, 8.762e-02, 1.097e-01, 8.699e-02, -2.253e-02, 6.645e-02, 5.355e-02, -5.621e-03) * s2[y+2][x+2];
	r += M4(-9.955e-03, -1.411e-01, -4.027e-02, -9.357e-02, -1.937e-01, 3.567e-01, 9.715e-02, -6.842e-02, 1.154e-01, -4.903e-02, -1.111e-02, -1.244e-01, 4.029e-02, -5.896e-02, -1.416e-02, -5.319e-02) * s3[y+0][x+0];
	r += M4(-8.139e-02, 1.221e-02, -2.869e-02, -1.743e-02, 4.893e-02, 2.614e-01, -2.982e-01, 5.333e-02, -1.601e-02, 5.599e-02, -5.827e-02, -6.079e-03, -4.039e-02, -6.860e-02, -5.023e-02, -1.193e-01) * s3[y+0][x+1];
	r += M4(-3.778e-02, 7.269e-02, -1.856e-02, 6.063e-02, 8.649e-02, -1.929e-01, -4.146e-02, -3.109e-01, -5.485e-02, -7.883e-02, 4.058e-02, 5.213e-02, 2.466e-02, -1.156e-01, -2.541e-02, -7.061e-02) * s3[y+0][x+2];
	r += M4(-1.682e-01, -6.766e-03, 7.404e-02, -1.708e-01, -3.638e-01, 1.941e-01, -2.071e-01, 2.172e-01, 2.179e-02, -1.244e-01, 2.191e-01, -1.893e-01, -1.497e-01, 1.921e-02, -9.031e-02, 1.039e-01) * s3[y+1][x+0];
	r += M4(1.430e-01, -4.338e-02, 5.986e-02, 3.643e-01, -1.838e-01, -5.163e-02, -1.889e-01, 5.791e-02, 9.722e-02, 7.020e-02, -1.022e-01, -2.024e-01, -1.555e-01, -7.948e-02, 1.834e-01, -1.196e-01) * s3[y+1][x+1];
	r += M4(5.407e-02, -3.547e-02, -9.369e-03, -2.116e-02, -1.763e-01, 4.239e-02, -1.893e-01, -3.454e-01, -4.336e-02, -4.297e-02, 5.643e-02, -5.131e-02, 5.876e-02, -1.516e-01, 4.342e-02, 1.606e-02) * s3[y+1][x+2];
	r += M4(3.326e-02, -1.199e-01, -8.152e-02, 1.325e-01, -4.056e-02, 3.340e-03, -9.265e-02, -5.213e-02, -1.105e-02, 1.218e-01, -1.317e-01, -1.282e-01, 2.636e-02, 1.224e-02, 5.417e-02, 1.079e-01) * s3[y+2][x+0];
	r += M4(4.735e-02, 6.043e-03, 3.280e-02, 4.531e-02, 1.391e-01, -6.065e-02, 2.223e-01, 3.401e-01, -1.193e-01, -1.882e-01, -8.620e-02, 9.333e-02, 9.929e-02, -6.678e-03, 9.829e-02, -1.416e-02) * s3[y+2][x+1];
	r += M4(-2.477e-01, 5.346e-02, -1.936e-01, -9.216e-02, 1.958e-02, 6.210e-02, -3.459e-02, -1.249e-01, 1.687e-02, -4.689e-03, 2.048e-01, 1.312e-02, -1.242e-01, -3.907e-02, 7.164e-02, -6.323e-02) * s3[y+2][x+2];
	r += V4(-2.589e-02, -1.118e-02, -1.562e-01, 1.433e-02);
	return vec4(r);
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv1_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
			s2[ay][ax] = l1(x - 1, y - 1);
			s1[ay][ax] = -max(-s0[ay][ax], V4(0.0));
			s0[ay][ax] = max(s0[ay][ax], V4(0.0));
			s3[ay][ax] = -max(-s2[ay][ax], V4(0.0));
			s2[ay][ax] = max(s2[ay][ax], V4(0.0));
		}
	}
	barrier();
	imageStore(out_image, opos + ivec2(0, 0), f0(xy.x, xy.y));
	imageStore(out_image, opos + ivec2(1, 0), f1(xy.x, xy.y));
}


//!DESC CuNNy-8x8C-RCAS-DS-conv3
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv2
//!BIND LUMA
//!SAVE conv3
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
	#define V4 f16vec4
	#define M4 f16mat4
	#define F float16_t
#else
	#define V4 vec4
	#define M4 mat4
	#define F float
#endif
#define l0(x, y) V4(texelFetch(conv2_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv2_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 s0[10][10];
shared V4 s1[10][10];
shared V4 s2[10][10];
shared V4 s3[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += M4(6.015e-02, 4.273e-03, 7.610e-03, -6.566e-02, 4.245e-03, -7.000e-02, 1.858e-03, 4.955e-02, 3.793e-02, 1.019e-01, -7.572e-03, -3.266e-02, 6.414e-02, -1.417e-01, -6.486e-02, 1.459e-01) * s0[y+0][x+0];
	r += M4(-3.187e-01, 1.411e-01, -2.088e-01, -1.161e-01, -1.932e-01, 2.031e-01, 1.834e-02, -9.079e-02, 3.777e-01, 2.326e-02, 4.864e-03, -4.646e-02, 1.548e-01, 4.051e-02, 8.694e-02, -4.336e-02) * s0[y+0][x+1];
	r += M4(-1.152e-01, -2.225e-02, -1.123e-01, -1.727e-01, -2.242e-01, 7.264e-02, 1.283e-01, -1.092e-01, -8.348e-02, -3.614e-02, -5.957e-02, -4.630e-02, -5.188e-02, 4.090e-02, -4.020e-02, 1.246e-02) * s0[y+0][x+2];
	r += M4(1.395e-01, 6.842e-02, 3.424e-02, -3.861e-01, -9.234e-02, 1.575e-01, 1.465e-02, 2.731e-01, 1.003e-02, 1.038e-01, 7.364e-02, -3.844e-02, 1.284e-01, 1.119e-01, -6.011e-02, -1.191e-02) * s0[y+1][x+0];
	r += M4(4.262e-01, 2.445e-01, -3.753e-01, 5.449e-01, 1.916e-01, 3.479e-01, 1.531e-01, 4.805e-02, 1.501e-01, 1.251e-01, -1.338e-01, 1.930e-03, -9.250e-02, -1.730e-01, 1.822e-01, 2.590e-01) * s0[y+1][x+1];
	r += M4(6.387e-02, -1.779e-01, 4.136e-02, 4.888e-02, 3.163e-02, -2.963e-02, -2.544e-01, -4.153e-02, -2.020e-02, -1.718e-02, 1.584e-01, -7.878e-02, 1.200e-01, -1.101e-02, 2.864e-01, 1.509e-01) * s0[y+1][x+2];
	r += M4(-5.568e-02, -3.656e-02, -3.036e-02, -1.847e-02, -4.841e-02, -6.412e-02, -1.348e-01, 3.516e-02, 3.363e-02, -5.608e-02, -1.573e-01, -8.627e-02, 1.323e-02, 6.421e-02, 3.537e-02, 1.538e-01) * s0[y+2][x+0];
	r += M4(1.972e-01, -7.350e-02, -6.307e-02, -9.518e-02, -1.906e-01, 1.382e-01, 2.290e-01, -1.103e-01, -1.172e-01, 2.168e-01, 2.915e-02, 2.619e-02, 1.865e-01, -4.540e-03, 1.343e-01, -1.731e-01) * s0[y+2][x+1];
	r += M4(7.294e-02, 2.368e-02, 1.441e-01, -2.725e-02, -1.242e-01, -5.062e-03, 9.657e-02, 1.660e-01, 5.932e-02, -1.318e-02, 5.536e-03, -1.356e-02, 1.250e-01, 4.652e-02, -1.677e-01, 1.414e-02) * s0[y+2][x+2];
	r += M4(-1.754e-01, 1.427e-01, 6.694e-02, -2.015e-01, 5.020e-02, -6.541e-03, 4.105e-02, 8.375e-02, -2.074e-03, 8.383e-02, -9.779e-03, -5.221e-02, -1.603e-01, -3.323e-02, -6.032e-03, 8.968e-03) * s1[y+0][x+0];
	r += M4(4.503e-04, 1.373e-01, 2.375e-01, -1.055e-01, -2.996e-02, 6.205e-02, -2.848e-02, -4.668e-02, -1.967e-02, 9.078e-02, -1.597e-01, -2.346e-02, -3.515e-02, 9.704e-02, 9.727e-02, 8.645e-03) * s1[y+0][x+1];
	r += M4(6.190e-03, 1.029e-01, -8.020e-03, -2.628e-02, -4.230e-02, 1.817e-02, 1.777e-01, -3.711e-02, 3.889e-02, 2.581e-01, 4.449e-02, -2.355e-03, 7.058e-02, 5.534e-02, -8.530e-02, 1.110e-01) * s1[y+0][x+2];
	r += M4(-1.661e-01, 1.221e-01, -4.040e-02, -1.422e-01, -6.282e-02, 4.770e-02, 1.266e-01, 3.137e-01, 3.592e-04, 7.085e-02, 2.225e-02, 9.312e-02, 8.707e-02, -6.987e-02, -1.301e-01, -9.750e-02) * s1[y+1][x+0];
	r += M4(-1.497e-01, 1.459e-02, -1.902e-01, 5.761e-02, 5.148e-02, 6.330e-02, 9.291e-02, -9.119e-03, 3.169e-02, 2.244e-01, -3.115e-01, 2.192e-01, 1.188e-01, -5.142e-02, 1.428e-01, -6.446e-02) * s1[y+1][x+1];
	r += M4(-1.890e-01, -1.217e-02, 3.161e-02, -1.459e-01, 5.746e-02, -4.413e-02, -2.041e-01, -1.367e-03, -1.390e-01, 1.236e-01, -5.821e-02, -4.254e-02, -5.356e-02, 2.832e-02, 2.175e-01, -1.112e-01) * s1[y+1][x+2];
	r += M4(-1.548e-01, 1.804e-01, 4.530e-02, -7.870e-02, -4.840e-02, -1.332e-01, -1.230e-01, 2.464e-02, 8.100e-02, -5.113e-02, -1.034e-01, -1.762e-01, -7.443e-02, 5.538e-02, -2.204e-02, -2.241e-01) * s1[y+2][x+0];
	r += M4(-1.782e-01, 2.973e-01, -4.602e-02, -1.636e-01, -1.023e-01, 1.321e-01, 1.818e-01, -1.599e-01, -1.816e-02, 5.175e-02, 1.042e-01, 1.837e-01, 2.913e-02, -4.705e-02, 1.492e-01, -1.147e-01) * s1[y+2][x+1];
	r += M4(-1.102e-01, -3.034e-02, -1.192e-01, 4.428e-02, -1.300e-01, 1.874e-01, 4.670e-02, 1.645e-01, 5.349e-03, -1.131e-02, 1.030e-01, 3.409e-02, -1.731e-01, 2.147e-01, -5.174e-02, -1.318e-01) * s1[y+2][x+2];
	r += M4(1.313e-02, -7.010e-02, -3.994e-02, -8.531e-03, 2.654e-02, 6.894e-02, 2.254e-02, -7.773e-02, 1.559e-02, 6.020e-02, -3.328e-02, -1.336e-01, 7.261e-02, 9.503e-02, 4.411e-02, -7.209e-02) * s2[y+0][x+0];
	r += M4(-2.914e-01, -1.281e-01, 1.446e-01, 3.904e-02, -1.681e-01, -6.701e-02, -1.698e-01, -7.774e-02, 4.827e-02, -2.685e-02, 4.039e-02, 4.863e-03, -1.993e-01, 2.227e-01, 5.235e-02, -8.607e-02) * s2[y+0][x+1];
	r += M4(-1.130e-01, 4.185e-02, 5.854e-02, -9.187e-02, -3.089e-02, 2.037e-02, 3.422e-02, -2.328e-02, -8.867e-02, -6.269e-02, -7.337e-02, -1.816e-02, 3.615e-02, 9.859e-02, -8.375e-02, 5.422e-02) * s2[y+0][x+2];
	r += M4(-2.317e-01, -7.606e-02, 5.618e-02, -1.768e-02, 6.165e-02, -8.870e-02, -1.693e-02, 7.998e-02, -1.646e-01, 6.039e-02, -3.943e-02, -3.287e-02, -8.394e-02, -1.480e-01, -9.202e-02, -4.678e-02) * s2[y+1][x+0];
	r += M4(-2.295e-01, -1.028e-01, 1.333e-01, -7.227e-02, -1.082e-01, -1.324e-01, -1.421e-01, -3.987e-01, 6.645e-02, -9.746e-02, 2.160e-01, -5.410e-03, -4.032e-01, 2.709e-01, 2.202e-01, 6.550e-02) * s2[y+1][x+1];
	r += M4(4.068e-03, 1.339e-01, 2.638e-02, 8.193e-02, 2.658e-02, 8.394e-02, -1.307e-01, -1.140e-01, 9.544e-02, -1.492e-01, -2.310e-01, 1.489e-01, -2.233e-01, -2.529e-01, 3.857e-01, -1.232e-01) * s2[y+1][x+2];
	r += M4(5.671e-03, -3.408e-02, -3.700e-02, 7.450e-02, 3.682e-02, -8.050e-02, 1.615e-01, 1.021e-01, -6.243e-02, 4.927e-02, 1.238e-01, 6.093e-02, -8.284e-02, 5.126e-02, -5.002e-03, 4.735e-02) * s2[y+2][x+0];
	r += M4(-2.257e-01, -4.178e-02, 5.965e-02, 1.141e-01, -9.974e-03, 1.079e-01, 2.656e-02, 3.925e-02, 8.612e-02, -5.818e-02, 7.592e-02, -1.551e-01, -9.250e-02, 9.960e-02, -8.084e-02, -1.425e-01) * s2[y+2][x+1];
	r += M4(5.887e-02, -1.595e-02, 2.018e-03, -8.308e-02, 2.089e-02, -1.453e-01, -2.074e-01, -1.189e-02, 5.938e-02, -8.718e-02, -1.793e-01, 5.999e-03, -7.993e-02, -1.329e-01, -2.545e-02, -2.791e-02) * s2[y+2][x+2];
	r += M4(3.842e-02, 2.403e-01, 3.606e-02, 1.174e-01, 7.093e-02, 9.451e-02, 7.977e-02, -1.722e-02, 2.851e-02, 2.021e-01, 5.299e-02, -2.568e-01, -1.046e-01, -5.267e-02, 2.263e-03, -2.033e-03) * s3[y+0][x+0];
	r += M4(2.601e-01, -4.604e-02, -5.379e-03, 4.096e-01, -1.174e-01, 1.566e-01, -1.206e-02, 8.978e-02, 1.558e-02, -4.308e-02, 5.824e-02, -3.380e-02, -3.809e-02, 8.440e-02, 1.177e-01, 1.626e-01) * s3[y+0][x+1];
	r += M4(6.469e-02, -2.441e-01, -1.489e-01, 1.933e-02, -2.776e-02, 3.680e-02, 1.128e-01, 4.909e-02, -8.814e-02, -1.196e-01, -1.597e-01, 5.277e-03, 3.662e-02, 8.727e-02, -2.244e-01, 1.662e-01) * s3[y+0][x+2];
	r += M4(-9.546e-02, 1.417e-01, 2.440e-01, 1.298e-01, -9.002e-02, 1.578e-01, -9.348e-02, 2.987e-01, -9.952e-02, 6.083e-02, -4.932e-02, 2.363e-02, -1.279e-01, -3.536e-02, -2.821e-02, 3.406e-02) * s3[y+1][x+0];
	r += M4(8.557e-02, 6.907e-02, -4.699e-02, 1.626e-01, -3.480e-01, -4.199e-01, -3.560e-02, -5.840e-01, 9.109e-02, 5.060e-02, 4.114e-02, -2.252e-02, -1.169e-01, -2.190e-01, 3.299e-01, 3.139e-01) * s3[y+1][x+1];
	r += M4(1.136e-01, 6.276e-02, -1.374e-01, 7.437e-02, 6.762e-02, -5.436e-02, -2.229e-01, -2.359e-01, 6.181e-02, -2.164e-01, -8.889e-02, 1.859e-01, -1.360e-01, -4.383e-01, 1.399e-01, -2.373e-02) * s3[y+1][x+2];
	r += M4(8.833e-02, -1.798e-02, -3.427e-02, 2.212e-02, 2.266e-03, -1.285e-01, 8.189e-02, 1.350e-01, -1.243e-01, 5.826e-02, 1.488e-01, 7.942e-02, -4.943e-02, -9.832e-03, 6.692e-02, 7.619e-02) * s3[y+2][x+0];
	r += M4(-4.402e-02, -2.756e-02, 1.437e-01, 9.084e-02, -5.022e-01, -2.967e-01, -2.634e-01, 5.922e-03, 1.269e-03, -2.024e-01, 1.323e-01, -1.172e-01, 9.608e-02, -4.733e-02, -1.144e-01, 2.736e-02) * s3[y+2][x+1];
	r += M4(6.520e-02, 3.130e-02, -8.174e-02, -2.797e-02, -2.297e-01, 1.507e-01, 2.173e-01, -2.393e-02, 7.585e-02, 4.108e-03, -1.782e-01, -3.716e-02, -1.357e-01, -2.588e-01, -1.225e-01, 1.600e-01) * s3[y+2][x+2];
	r += V4(-1.776e-02, 4.469e-02, 4.358e-02, 7.299e-02);
	return vec4(r);
}
vec4 f1(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-4.384e-02, 1.927e-01, -2.267e-02, 5.972e-03, -1.284e-01, -2.025e-01, 7.322e-02, -3.169e-02, -1.608e-02, -6.906e-02, 5.186e-02, 3.893e-02, -6.369e-02, 1.627e-04, 7.852e-02, 4.582e-02) * s0[y+0][x+0];
	r += M4(-4.298e-02, 1.597e-01, 5.346e-02, 4.455e-02, 5.610e-02, -2.441e-02, 2.653e-02, -6.043e-02, 3.100e-02, 1.550e-01, 1.649e-01, -9.817e-03, -5.517e-02, 2.228e-02, 2.306e-02, -8.329e-02) * s0[y+0][x+1];
	r += M4(-4.526e-02, -1.432e-01, -2.190e-02, -2.734e-02, 1.442e-01, 1.170e-01, -1.858e-01, -6.611e-02, -4.451e-02, -6.332e-02, 1.872e-02, -4.771e-04, 8.778e-02, 8.776e-03, -5.865e-02, 6.440e-02) * s0[y+0][x+2];
	r += M4(3.895e-02, 9.438e-02, 1.534e-01, 5.715e-02, -3.400e-02, 1.192e-01, -4.798e-02, -1.041e-01, -7.185e-02, -5.825e-02, -1.194e-01, -1.453e-01, -4.423e-03, 2.604e-02, 4.173e-02, 4.336e-02) * s0[y+1][x+0];
	r += M4(1.437e-01, 4.028e-02, -1.153e-01, -5.583e-02, 6.135e-02, 3.825e-01, 5.208e-02, -2.247e-01, 1.245e-02, -2.243e-01, -9.090e-02, -2.088e-01, 1.741e-01, 7.847e-02, -5.756e-02, 1.343e-03) * s0[y+1][x+1];
	r += M4(9.434e-02, 5.340e-02, -2.041e-02, -8.524e-03, -9.003e-02, 3.566e-01, 1.756e-01, -6.005e-02, 2.631e-02, -1.229e-01, -9.877e-02, -3.490e-02, -4.757e-02, 1.539e-01, 3.350e-01, 7.343e-02) * s0[y+1][x+2];
	r += M4(-2.345e-02, -7.585e-02, 1.757e-04, 3.692e-03, 2.212e-01, 1.996e-01, -8.080e-02, -3.585e-02, 9.643e-02, 3.286e-02, -6.389e-04, 1.587e-01, -6.115e-02, 1.004e-01, 3.023e-02, 3.390e-02) * s0[y+2][x+0];
	r += M4(-1.212e-01, 3.305e-03, 1.557e-01, 1.229e-01, -1.572e-01, -2.874e-01, -3.490e-02, -2.605e-01, 5.221e-03, 9.351e-02, -2.291e-01, 5.616e-02, 1.363e-01, 2.455e-01, 3.628e-01, -1.101e-01) * s0[y+2][x+1];
	r += M4(-5.010e-02, 9.269e-02, -1.986e-01, -3.690e-02, 1.934e-02, -4.329e-02, -5.435e-02, -1.629e-01, 1.104e-01, -6.122e-02, -5.695e-02, 3.668e-02, -6.688e-02, 9.112e-02, -1.510e-01, -5.441e-02) * s0[y+2][x+2];
	r += M4(4.277e-01, -2.210e-02, -2.112e-01, -1.764e-03, -3.233e-02, -1.528e-01, 4.041e-02, -2.968e-02, -3.137e-02, -1.706e-01, -5.402e-02, -2.429e-02, 4.444e-02, 7.119e-02, -9.741e-02, 1.067e-02) * s1[y+0][x+0];
	r += M4(1.394e-01, 2.772e-01, -1.019e-01, -3.223e-02, 2.285e-02, -1.028e-01, 6.901e-02, -3.241e-02, -1.786e-01, -4.160e-02, 5.250e-03, 6.607e-02, 1.921e-01, 1.465e-01, -1.285e-01, -4.015e-02) * s1[y+0][x+1];
	r += M4(2.058e-02, 1.332e-01, -2.919e-02, -2.237e-03, 1.471e-01, 1.187e-01, -1.339e-01, 1.186e-02, -1.742e-01, -8.142e-02, 1.506e-01, 2.119e-02, 1.616e-01, 5.155e-02, 4.554e-02, 1.366e-02) * s1[y+0][x+2];
	r += M4(-1.284e-01, 1.784e-01, -3.362e-02, 6.068e-02, -9.010e-03, 1.575e-02, -5.885e-02, -1.859e-02, 1.824e-01, -1.323e-02, -1.042e-01, -2.318e-02, 2.084e-01, 1.268e-01, 1.050e-02, 4.171e-02) * s1[y+1][x+0];
	r += M4(2.237e-01, -2.369e-01, -4.771e-01, 3.209e-02, 2.553e-02, 2.822e-01, -8.545e-02, -3.414e-02, -1.398e-01, 2.768e-02, 7.921e-04, -1.206e-01, 2.191e-01, -1.091e-01, -3.857e-01, 4.064e-02) * s1[y+1][x+1];
	r += M4(3.536e-02, 1.118e-01, -2.682e-01, 1.174e-02, -5.571e-02, 3.105e-01, 1.458e-01, 2.359e-01, 1.195e-01, -2.485e-01, 1.912e-01, -2.772e-02, 2.421e-01, 2.340e-01, -6.512e-02, 1.089e-01) * s1[y+1][x+2];
	r += M4(1.309e-01, 1.420e-01, -1.166e-02, -6.423e-02, 2.485e-01, 3.580e-02, -5.637e-02, 1.216e-01, 6.036e-03, -8.598e-02, -1.698e-02, 2.902e-02, 1.091e-01, -9.914e-02, -1.229e-01, -1.589e-02) * s1[y+2][x+0];
	r += M4(1.507e-01, 1.483e-01, -1.464e-01, 1.062e-01, -7.128e-02, -1.625e-01, -1.841e-01, -8.789e-02, -1.406e-01, 1.039e-02, -1.193e-01, 5.920e-02, -1.887e-01, 3.697e-02, -3.493e-01, -1.672e-01) * s1[y+2][x+1];
	r += M4(-1.291e-03, -6.421e-02, -2.068e-01, -5.171e-02, 1.708e-01, 6.267e-02, -1.723e-02, 6.809e-02, 2.873e-02, -7.731e-02, 7.785e-02, -4.583e-02, -1.919e-01, -1.192e-01, -3.428e-01, -2.676e-01) * s1[y+2][x+2];
	r += M4(-2.371e-01, -3.817e-02, -4.389e-02, -3.248e-02, 8.973e-02, -4.170e-02, -5.641e-02, -3.300e-02, 5.555e-02, -7.493e-02, 1.095e-01, -2.628e-02, -2.640e-03, 8.878e-02, -7.612e-02, -4.140e-02) * s2[y+0][x+0];
	r += M4(-2.627e-01, -4.053e-02, -4.545e-03, 6.169e-02, 4.773e-02, -3.546e-02, -2.149e-01, 2.913e-03, -8.572e-02, 1.407e-01, 1.126e-01, -2.063e-02, 3.762e-02, 2.312e-02, 7.105e-02, 1.538e-02) * s2[y+0][x+1];
	r += M4(-1.210e-01, -9.827e-02, 5.646e-02, -1.002e-02, 3.369e-02, 3.762e-02, 1.187e-01, 1.696e-02, 1.654e-02, -1.074e-01, -8.181e-02, -3.507e-02, -3.994e-02, -5.841e-02, 8.228e-02, 2.282e-02) * s2[y+0][x+2];
	r += M4(-9.892e-02, -2.523e-01, -1.031e-01, 2.948e-02, 1.730e-01, -2.822e-02, 5.337e-02, -5.398e-02, 5.807e-02, -2.774e-02, 3.247e-02, -1.395e-01, 6.557e-02, 1.912e-02, -5.499e-03, 1.058e-02) * s2[y+1][x+0];
	r += M4(-1.358e-01, -2.154e-01, -1.914e-01, -5.991e-03, 7.687e-02, 1.937e-01, 1.536e-03, 2.301e-02, -1.222e-01, 1.690e-01, 9.242e-02, -1.046e-01, -2.111e-01, 2.467e-02, -1.944e-01, 1.764e-02) * s2[y+1][x+1];
	r += M4(-9.157e-02, -1.353e-02, 1.164e-01, 1.012e-02, -4.888e-02, -1.098e-01, -2.604e-01, -1.135e-01, -2.735e-02, -1.108e-01, -1.336e-01, -1.063e-01, 7.853e-02, 7.530e-02, -2.033e-03, 5.994e-02) * s2[y+1][x+2];
	r += M4(8.605e-02, 1.540e-03, -6.462e-03, 2.074e-01, -3.139e-03, 5.782e-02, 1.718e-02, 2.876e-02, -1.062e-01, -4.418e-02, -3.698e-02, -1.147e-01, -8.010e-02, 1.089e-01, -3.382e-02, -1.170e-01) * s2[y+2][x+0];
	r += M4(8.304e-03, -1.065e-01, 1.079e-02, -5.132e-04, -1.126e-01, -1.670e-03, -4.344e-01, -2.656e-02, -1.387e-01, 2.013e-02, -3.338e-02, -2.536e-01, 1.442e-01, 1.006e-01, -1.744e-01, 1.092e-01) * s2[y+2][x+1];
	r += M4(1.731e-01, 5.578e-02, 1.385e-01, 1.613e-02, 1.849e-02, -3.070e-02, -1.330e-01, 3.854e-02, -9.507e-02, -6.195e-03, 1.996e-01, 6.757e-02, 5.489e-02, 6.201e-03, -2.428e-01, -7.367e-02) * s2[y+2][x+2];
	r += M4(2.511e-01, 1.333e-01, 1.347e-01, -6.989e-02, -2.330e-02, -9.413e-02, -3.545e-02, 2.305e-02, 1.329e-01, -8.066e-02, 8.847e-02, -9.467e-03, -2.144e-03, -2.933e-02, 3.399e-02, -8.288e-02) * s3[y+0][x+0];
	r += M4(8.491e-02, 2.980e-01, 4.905e-02, -2.904e-02, 1.302e-02, 1.416e-01, -4.768e-02, -4.902e-03, -1.625e-01, 2.105e-01, 1.363e-02, -5.032e-02, -7.908e-02, 3.032e-01, -2.312e-02, -3.311e-02) * s3[y+0][x+1];
	r += M4(3.527e-02, 3.760e-02, -8.626e-02, -8.929e-02, 7.361e-03, 2.186e-02, 5.205e-02, 4.214e-02, -1.170e-01, -1.401e-01, -3.958e-02, -7.618e-02, -7.227e-02, -2.746e-02, 2.117e-01, -5.061e-03) * s3[y+0][x+2];
	r += M4(-6.459e-02, -2.117e-01, -1.204e-01, 3.692e-02, 2.080e-01, 1.773e-01, 4.690e-02, -1.603e-02, 1.636e-01, 2.830e-03, 1.995e-02, -6.425e-02, -2.847e-02, -2.838e-03, -1.516e-02, -5.378e-04) * s3[y+1][x+0];
	r += M4(-1.870e-01, -8.242e-02, 8.287e-03, -1.577e-01, -2.007e-01, -6.903e-03, -4.454e-02, 1.071e-02, -4.584e-02, 7.503e-02, 5.189e-02, -1.306e-01, -3.190e-01, 9.831e-02, -8.224e-02, -2.494e-02) * s3[y+1][x+1];
	r += M4(-6.941e-02, 1.817e-03, -1.367e-01, 3.368e-02, 8.327e-03, -8.605e-02, -1.606e-01, -2.255e-01, 1.114e-01, -1.200e-01, -1.545e-01, -2.361e-02, 4.146e-02, 1.275e-01, 1.687e-01, 1.329e-01) * s3[y+1][x+2];
	r += M4(2.253e-02, 1.518e-01, -4.126e-02, 8.374e-02, 1.636e-01, 2.286e-02, -5.449e-03, -9.875e-02, -1.359e-01, -2.240e-03, -8.393e-02, -2.500e-01, -7.269e-02, 2.099e-02, 4.257e-02, -7.397e-02) * s3[y+2][x+0];
	r += M4(-5.714e-02, 9.641e-03, -1.362e-01, -7.132e-02, -7.739e-02, -4.005e-01, -1.245e-01, -3.528e-01, -2.053e-01, -5.267e-02, 8.075e-02, -3.013e-01, 2.847e-02, -5.400e-02, 7.705e-02, 2.445e-01) * s3[y+2][x+1];
	r += M4(7.496e-02, 3.261e-02, -1.127e-02, 5.861e-02, -1.180e-01, -1.116e-01, 7.827e-02, -8.417e-03, -1.057e-01, 3.899e-02, 1.925e-01, 6.179e-02, -1.079e-01, -4.675e-02, -1.233e-01, -6.350e-02) * s3[y+2][x+2];
	r += V4(9.301e-02, 3.306e-02, -1.861e-02, 2.251e-01);
	return vec4(r);
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv2_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
			s2[ay][ax] = l1(x - 1, y - 1);
			s1[ay][ax] = -max(-s0[ay][ax], V4(0.0));
			s0[ay][ax] = max(s0[ay][ax], V4(0.0));
			s3[ay][ax] = -max(-s2[ay][ax], V4(0.0));
			s2[ay][ax] = max(s2[ay][ax], V4(0.0));
		}
	}
	barrier();
	imageStore(out_image, opos + ivec2(0, 0), f0(xy.x, xy.y));
	imageStore(out_image, opos + ivec2(1, 0), f1(xy.x, xy.y));
}


//!DESC CuNNy-8x8C-RCAS-DS-conv4
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv3
//!BIND LUMA
//!SAVE conv4
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
	#define V4 f16vec4
	#define M4 f16mat4
	#define F float16_t
#else
	#define V4 vec4
	#define M4 mat4
	#define F float
#endif
#define l0(x, y) V4(texelFetch(conv3_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv3_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 s0[10][10];
shared V4 s1[10][10];
shared V4 s2[10][10];
shared V4 s3[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += M4(2.914e-02, -5.847e-02, -8.583e-02, -6.967e-02, -6.304e-02, 4.987e-04, 1.045e-02, 7.266e-02, 5.672e-02, -2.257e-02, 2.869e-02, -1.359e-01, -4.726e-02, 7.560e-02, 5.690e-02, 5.632e-02) * s0[y+0][x+0];
	r += M4(-7.492e-02, 5.443e-02, -8.070e-02, -1.540e-01, 8.287e-02, -1.703e-01, 2.858e-01, -2.775e-02, 3.630e-02, -1.303e-01, -9.562e-03, 1.105e-01, 2.938e-02, -1.127e-01, 1.073e-01, 2.783e-01) * s0[y+0][x+1];
	r += M4(1.361e-02, 6.205e-02, -4.745e-02, -8.983e-03, 2.887e-02, 6.500e-02, -1.008e-01, -1.103e-01, 1.075e-01, -9.261e-02, -5.620e-03, 5.185e-02, 2.307e-02, -1.688e-01, 2.605e-02, 9.498e-02) * s0[y+0][x+2];
	r += M4(4.237e-02, -1.767e-02, -2.104e-02, -9.024e-02, -1.303e-01, -8.877e-02, -1.491e-01, -6.412e-02, 5.053e-02, 9.325e-02, -1.695e-01, -3.319e-01, -3.400e-02, -6.343e-05, -7.624e-02, -6.055e-02) * s0[y+1][x+0];
	r += M4(2.125e-01, 3.041e-01, 2.072e-01, -4.994e-02, -3.193e-01, 7.012e-02, 2.759e-01, -1.342e-01, 2.003e-01, -1.347e-01, -2.311e-01, 1.726e-01, -3.956e-01, 8.722e-02, 5.303e-02, -3.604e-01) * s0[y+1][x+1];
	r += M4(-2.748e-01, 8.578e-02, -2.173e-01, 9.623e-03, 5.876e-02, -3.593e-03, -3.413e-02, -1.324e-02, -3.528e-02, -7.789e-02, 9.594e-02, -2.452e-02, -1.755e-02, -3.012e-01, -9.175e-02, 1.695e-01) * s0[y+1][x+2];
	r += M4(9.114e-02, -1.384e-03, -8.255e-02, -5.169e-02, -5.492e-02, -5.660e-02, 7.923e-02, 2.062e-02, 2.093e-01, -5.486e-02, 5.483e-02, 8.555e-02, -5.494e-02, -1.731e-02, 1.073e-01, 1.720e-01) * s0[y+2][x+0];
	r += M4(3.416e-01, 3.108e-03, -1.989e-02, 9.754e-02, -1.126e-01, 2.378e-02, 1.977e-01, 7.596e-02, -2.940e-01, -1.083e-01, -5.876e-02, 1.088e-02, 1.144e-01, 1.627e-01, -3.213e-02, 1.636e-01) * s0[y+2][x+1];
	r += M4(-1.025e-02, -1.155e-01, -3.191e-02, 5.721e-02, 3.253e-02, -1.899e-01, 7.462e-03, -6.193e-02, -1.431e-02, -1.503e-01, -1.126e-02, -5.209e-02, -2.743e-01, 4.137e-02, -1.641e-01, -5.034e-03) * s0[y+2][x+2];
	r += M4(5.822e-02, -3.981e-03, -3.307e-02, -9.598e-02, 3.526e-02, 7.571e-02, -7.231e-02, -5.725e-02, -2.597e-02, -3.649e-02, 1.050e-01, 5.747e-02, 3.360e-02, 9.414e-02, -1.275e-02, 8.854e-03) * s1[y+0][x+0];
	r += M4(4.524e-02, -2.029e-02, -4.565e-02, -9.553e-03, 5.046e-02, -7.023e-02, 8.848e-02, 6.331e-03, -8.183e-02, -1.613e-01, 2.591e-01, 9.427e-02, -6.557e-03, 1.966e-02, -1.249e-01, 3.765e-02) * s1[y+0][x+1];
	r += M4(-3.513e-02, 6.422e-02, 6.511e-02, -2.232e-02, -4.185e-02, 8.240e-02, -4.770e-04, -5.421e-02, -5.106e-02, 1.392e-01, 5.326e-02, 4.657e-02, -1.027e-01, 9.219e-03, -1.337e-01, -1.005e-01) * s1[y+0][x+2];
	r += M4(-2.881e-02, 1.002e-01, -6.838e-03, -7.851e-02, -1.363e-01, 3.602e-02, 3.093e-03, 2.266e-01, -1.063e-01, 7.295e-02, -1.611e-01, -3.138e-01, 6.013e-02, -1.388e-02, 3.842e-02, 1.003e-01) * s1[y+1][x+0];
	r += M4(3.656e-02, 1.623e-01, 5.484e-01, 8.264e-02, -2.073e-01, 1.263e-01, 9.782e-02, 6.231e-03, 5.203e-02, -3.873e-01, 9.686e-02, 7.226e-02, 1.081e-03, 1.649e-01, 3.792e-01, -3.457e-01) * s1[y+1][x+1];
	r += M4(-3.103e-01, 1.788e-01, -2.517e-02, 1.783e-02, 8.681e-02, -1.703e-01, 9.467e-03, 7.934e-02, 1.038e-01, 1.127e-01, 2.104e-01, -5.944e-02, 2.466e-01, -4.647e-01, 1.062e-01, -6.449e-02) * s1[y+1][x+2];
	r += M4(1.769e-01, 4.477e-02, -1.876e-01, -1.401e-01, 1.242e-02, -1.809e-02, 3.950e-02, -2.271e-02, 8.117e-02, -3.293e-02, 6.939e-02, -3.404e-02, 7.514e-02, -3.291e-02, -1.011e-02, 6.746e-03) * s1[y+2][x+0];
	r += M4(-2.008e-01, 8.683e-02, -8.064e-02, -5.422e-02, 1.026e-01, 1.431e-01, 6.468e-02, -8.962e-02, -1.637e-01, 5.040e-02, 1.850e-01, 7.812e-03, 1.221e-01, 5.811e-02, -3.084e-02, -7.591e-02) * s1[y+2][x+1];
	r += M4(1.961e-01, -1.715e-01, -6.667e-03, -6.478e-02, -6.374e-02, 1.657e-02, -1.419e-02, 1.019e-02, 2.655e-02, -1.042e-01, 4.703e-02, -1.409e-01, -1.144e-01, -1.096e-01, -2.196e-02, -3.547e-02) * s1[y+2][x+2];
	r += M4(-5.157e-02, -1.099e-01, 1.049e-03, -3.269e-02, -2.333e-02, 3.646e-02, 4.327e-02, -5.034e-02, -8.673e-03, 6.114e-02, 8.198e-02, 3.197e-02, -9.320e-02, 1.138e-01, -2.399e-02, 1.163e-01) * s2[y+0][x+0];
	r += M4(-5.462e-02, 5.506e-02, -6.082e-02, -1.828e-02, 5.686e-03, 1.229e-01, -1.127e-01, -2.315e-01, -7.529e-02, -1.098e-01, -6.502e-02, -2.071e-01, 3.499e-02, 1.883e-02, 1.438e-01, 3.366e-02) * s2[y+0][x+1];
	r += M4(-5.604e-02, -6.858e-02, -2.717e-02, -1.138e-02, -1.531e-01, 3.718e-02, -5.544e-02, -7.303e-02, 2.882e-03, 1.141e-01, -1.223e-01, 7.645e-02, 5.106e-02, -6.808e-03, 6.429e-02, -3.834e-02) * s2[y+0][x+2];
	r += M4(1.635e-02, 7.476e-03, 3.110e-02, -1.330e-01, 5.180e-02, 1.751e-02, 3.124e-02, -1.593e-01, 3.618e-03, 5.116e-02, -9.240e-02, -4.958e-02, -7.330e-02, 8.179e-02, 1.211e-01, -2.819e-02) * s2[y+1][x+0];
	r += M4(-6.471e-02, 9.841e-02, -2.868e-02, -4.433e-01, 3.479e-01, -2.929e-01, -5.534e-02, 3.727e-01, 1.983e-01, -1.873e-01, -2.988e-01, 3.108e-01, 4.257e-02, -1.330e-01, -5.318e-02, 2.368e-01) * s2[y+1][x+1];
	r += M4(-1.291e-01, -2.276e-01, -8.212e-02, 7.883e-03, 1.239e-01, 1.145e-01, -3.336e-02, 1.986e-01, 4.152e-03, 2.064e-01, 1.147e-01, -2.271e-02, 6.666e-02, -1.749e-03, 1.165e-01, -2.531e-02) * s2[y+1][x+2];
	r += M4(-7.957e-02, 4.432e-02, -4.588e-02, 2.658e-02, -1.202e-01, 2.488e-02, 9.152e-02, 8.255e-02, -5.936e-02, -9.333e-02, 6.649e-02, 3.087e-02, 3.735e-02, 2.341e-02, 5.734e-02, -8.196e-02) * s2[y+2][x+0];
	r += M4(3.357e-01, -5.935e-02, 3.976e-03, 7.246e-02, 7.098e-02, -2.108e-02, 7.491e-02, -9.159e-02, 2.067e-01, 9.763e-03, 1.352e-01, -1.731e-02, -1.274e-01, -6.237e-02, 5.838e-02, -8.639e-02) * s2[y+2][x+1];
	r += M4(-1.323e-01, -2.764e-01, 6.296e-02, -3.534e-02, -9.439e-02, 1.335e-01, -8.911e-02, -1.453e-02, 4.600e-02, 6.395e-02, -4.702e-02, -3.583e-02, 9.000e-02, 9.548e-02, 4.677e-03, 1.457e-02) * s2[y+2][x+2];
	r += M4(-1.023e-01, 1.028e-02, 3.721e-02, -5.467e-02, -6.684e-02, -2.378e-02, -1.549e-01, -2.823e-02, 1.675e-01, 1.121e-01, -2.010e-01, -3.245e-01, 7.900e-02, 1.148e-01, 9.109e-03, -6.819e-02) * s3[y+0][x+0];
	r += M4(9.182e-02, 9.700e-02, -1.700e-01, 1.146e-02, -3.588e-02, -5.476e-02, 5.836e-02, -5.858e-02, 1.302e-02, -1.130e-01, -1.790e-01, -9.707e-02, -2.238e-01, 2.059e-01, 4.300e-01, 1.638e-01) * s3[y+0][x+1];
	r += M4(3.400e-02, -1.248e-01, 2.946e-02, 5.420e-02, -8.400e-02, 9.986e-02, -1.068e-01, -4.498e-02, 1.257e-01, -1.453e-01, 8.258e-02, 2.106e-01, 2.451e-01, -4.002e-01, 3.168e-01, 3.637e-02) * s3[y+0][x+2];
	r += M4(9.647e-02, 1.559e-02, -4.751e-02, -2.124e-02, 7.551e-02, 8.373e-02, 4.002e-02, -3.080e-01, 7.008e-02, 9.125e-02, -6.263e-02, 1.830e-01, 3.359e-01, 1.773e-01, 1.410e-01, -1.024e-01) * s3[y+1][x+0];
	r += M4(-1.572e-01, 8.443e-02, 1.688e-01, 1.047e-01, 1.955e-02, -3.994e-02, -3.679e-02, 3.077e-01, 2.226e-01, -2.978e-01, -1.642e-01, -3.100e-01, -1.034e-01, -2.890e-02, 3.687e-02, 7.541e-02) * s3[y+1][x+1];
	r += M4(-4.798e-02, -1.233e-01, -1.744e-02, -3.608e-02, 4.078e-02, 2.319e-01, 2.323e-01, 4.034e-01, 3.425e-03, -1.107e-01, 4.587e-02, -6.397e-02, 6.560e-02, -1.233e-01, 3.204e-01, 1.754e-01) * s3[y+1][x+2];
	r += M4(-1.087e-01, 2.635e-02, -8.618e-02, -8.970e-04, -3.195e-01, -9.588e-03, 8.455e-02, 9.276e-02, -8.995e-02, -9.414e-02, 2.116e-02, 1.391e-01, -1.481e-01, 8.099e-02, 1.375e-01, 4.193e-02) * s3[y+2][x+0];
	r += M4(2.493e-01, -5.038e-03, -8.303e-02, -1.519e-01, 1.403e-01, -5.723e-02, 7.205e-02, -1.682e-01, 2.486e-01, -5.401e-02, 1.236e-01, -1.079e-01, -2.901e-02, 1.946e-02, 1.537e-01, 1.930e-01) * s3[y+2][x+1];
	r += M4(3.144e-02, -2.223e-01, -4.286e-02, -6.360e-02, -1.491e-01, 1.647e-01, -1.274e-01, 6.799e-02, -3.332e-02, 2.853e-02, 9.048e-02, 1.242e-01, 2.439e-01, 8.915e-02, 1.437e-01, 1.458e-01) * s3[y+2][x+2];
	r += V4(-2.326e-02, 1.420e-03, 3.771e-02, -1.727e-02);
	return vec4(r);
}
vec4 f1(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-3.301e-02, 5.980e-02, 4.663e-03, -6.081e-02, 5.681e-03, 1.183e-01, -5.150e-02, 1.003e-01, -5.665e-02, 1.709e-01, 1.321e-01, -6.172e-02, -1.761e-02, 4.021e-02, 1.018e-01, -1.492e-02) * s0[y+0][x+0];
	r += M4(-7.449e-02, -1.349e-01, 6.732e-02, -2.136e-02, 2.086e-01, 3.188e-01, 1.258e-01, -6.862e-02, 7.485e-02, -1.392e-01, 2.075e-02, 3.925e-03, -4.612e-02, -5.717e-03, -1.017e-02, 8.626e-02) * s0[y+0][x+1];
	r += M4(6.818e-02, -3.020e-02, -1.672e-02, 2.925e-02, -1.816e-02, -6.332e-02, 4.954e-02, -1.574e-02, 6.191e-02, 1.092e-02, 1.516e-02, -6.440e-02, 4.014e-02, 5.447e-02, 1.567e-01, 5.115e-03) * s0[y+0][x+2];
	r += M4(-1.357e-02, -1.561e-01, 4.829e-02, -1.695e-01, -1.413e-01, 1.271e-02, -1.645e-01, 2.686e-01, -6.995e-02, 1.121e-01, 3.056e-01, 3.958e-02, -2.331e-02, 5.691e-02, -3.490e-03, 2.363e-01) * s0[y+1][x+0];
	r += M4(7.840e-02, -8.359e-02, 2.050e-01, -2.785e-02, -1.151e-02, 4.414e-01, 4.848e-01, -3.022e-01, -8.569e-03, -1.215e-01, -4.585e-02, -9.444e-02, -7.646e-01, -1.227e-01, -7.477e-03, -8.509e-02) * s0[y+1][x+1];
	r += M4(-3.247e-02, -1.818e-01, -3.164e-02, -7.920e-02, -3.381e-02, -2.594e-01, -1.729e-03, -4.822e-02, 9.887e-02, -2.017e-01, 6.930e-02, -1.936e-01, 1.136e-01, -2.856e-01, 2.460e-01, 1.793e-01) * s0[y+1][x+2];
	r += M4(6.244e-02, 4.724e-02, -2.364e-02, 5.580e-02, 1.096e-01, 1.050e-01, 2.490e-02, -7.239e-02, 7.162e-02, 4.779e-02, 2.116e-01, -8.969e-02, -1.929e-02, -3.348e-02, 5.014e-02, -8.387e-02) * s0[y+2][x+0];
	r += M4(-9.471e-02, -1.778e-03, 3.403e-01, -4.013e-02, 6.129e-03, -8.166e-03, 2.608e-01, -1.303e-01, -7.718e-02, 9.573e-02, 1.920e-01, 1.165e-01, -1.347e-01, -8.046e-02, 1.325e-01, -5.746e-01) * s0[y+2][x+1];
	r += M4(4.142e-02, 1.162e-02, 3.811e-02, 7.956e-02, 3.196e-02, 7.266e-02, 2.636e-01, -6.478e-02, -3.006e-02, 2.319e-01, 5.383e-02, 8.065e-02, 9.776e-02, -1.161e-01, 1.861e-01, 3.264e-02) * s0[y+2][x+2];
	r += M4(6.102e-03, 6.588e-02, -4.089e-02, -1.006e-01, 5.868e-02, -5.759e-02, 4.552e-02, 6.173e-02, -3.915e-02, 1.087e-01, 2.967e-02, -7.848e-02, -3.732e-02, -3.512e-03, -2.748e-02, -1.962e-02) * s1[y+0][x+0];
	r += M4(-1.234e-01, -3.453e-02, 8.393e-02, 9.495e-02, 9.668e-02, 5.963e-02, 6.781e-02, -3.336e-02, 3.194e-02, -3.423e-01, -1.163e-01, 7.975e-02, 1.550e-02, -9.406e-02, -4.777e-02, 3.055e-02) * s1[y+0][x+1];
	r += M4(8.241e-03, 8.263e-02, 4.691e-02, -6.801e-02, -1.149e-03, 9.098e-03, -1.080e-02, 1.661e-02, -3.068e-02, -1.696e-01, -1.245e-01, -1.097e-02, 6.658e-02, -8.023e-03, -4.582e-02, -1.190e-02) * s1[y+0][x+2];
	r += M4(3.017e-01, 2.462e-02, 1.883e-02, -3.922e-01, -4.265e-02, -2.089e-02, -1.224e-01, -9.637e-04, -5.539e-02, -1.078e-01, -1.990e-01, -6.542e-02, 9.784e-04, 3.914e-02, -1.224e-01, 2.259e-02) * s1[y+1][x+0];
	r += M4(-8.576e-02, 1.237e-01, -1.341e-01, 2.839e-02, 3.378e-02, 1.242e-01, -5.242e-03, -2.920e-01, -9.859e-02, -1.547e-01, -2.181e-01, 1.819e-01, -1.845e-01, 1.925e-01, 1.302e-01, -1.667e-01) * s1[y+1][x+1];
	r += M4(-8.670e-02, -1.799e-01, 2.108e-02, -1.383e-01, -6.295e-02, 6.160e-03, -4.201e-02, -5.994e-02, 1.110e-01, -1.595e-01, 3.448e-02, -6.381e-02, 1.724e-02, 3.877e-01, 1.320e-02, -8.130e-03) * s1[y+1][x+2];
	r += M4(6.013e-03, 1.646e-01, -1.635e-02, -1.033e-01, -5.254e-03, 3.376e-02, -9.080e-02, -2.528e-02, -3.605e-03, -5.053e-02, 1.274e-01, 1.551e-01, 9.409e-02, 3.494e-02, -9.993e-03, -5.615e-02) * s1[y+2][x+0];
	r += M4(3.277e-02, -7.078e-02, 1.668e-01, -2.127e-01, -1.386e-01, -8.365e-02, 2.003e-02, -2.175e-01, -9.204e-02, -7.234e-02, -2.695e-02, -7.150e-02, -1.563e-01, -1.490e-01, -2.329e-01, -2.207e-01) * s1[y+2][x+1];
	r += M4(6.285e-02, 2.434e-01, 3.884e-02, 1.063e-01, 5.960e-02, -1.399e-01, 7.808e-02, 9.553e-02, 4.408e-02, -3.284e-03, -2.608e-02, -2.185e-02, 5.896e-02, 2.121e-01, -2.688e-02, -1.106e-01) * s1[y+2][x+2];
	r += M4(6.133e-02, -8.591e-03, 3.960e-04, 2.891e-02, -5.935e-02, -2.683e-02, -4.116e-02, -6.186e-02, -3.976e-02, -1.286e-01, -2.321e-01, 7.788e-02, -2.720e-02, -2.862e-02, 1.185e-01, -6.394e-03) * s2[y+0][x+0];
	r += M4(-2.111e-01, -2.561e-01, -1.803e-02, 1.130e-01, -1.933e-01, -1.883e-01, 2.534e-02, -6.777e-02, -7.303e-02, 2.637e-03, 1.267e-01, -6.841e-02, -1.495e-01, 1.132e-01, -7.709e-02, -1.349e-01) * s2[y+0][x+1];
	r += M4(5.359e-02, 5.593e-02, 1.041e-01, 4.442e-02, -1.676e-03, -2.926e-01, -5.043e-02, 1.698e-03, -1.726e-02, -1.611e-02, -2.285e-02, -3.055e-02, -3.162e-02, -1.294e-01, -6.150e-02, 2.704e-02) * s2[y+0][x+2];
	r += M4(-9.387e-02, -1.399e-01, -1.083e-01, -3.431e-02, -3.231e-02, 7.754e-02, 6.201e-02, -7.656e-03, -7.632e-02, -4.599e-02, -1.217e-01, 1.227e-01, -1.547e-01, 1.797e-02, -7.999e-02, 1.741e-01) * s2[y+1][x+0];
	r += M4(-8.676e-02, 6.354e-02, 5.955e-02, 1.608e-01, 1.481e-01, 5.012e-02, -1.638e-01, 1.863e-01, 9.757e-02, 1.802e-01, -1.068e-01, 4.301e-01, -2.238e-02, -6.754e-02, -1.062e-01, -6.456e-02) * s2[y+1][x+1];
	r += M4(-1.782e-02, 1.352e-01, 7.544e-02, 2.877e-02, 2.105e-02, -1.855e-01, -1.548e-01, 4.205e-02, -9.959e-02, -4.265e-02, -8.976e-02, -8.933e-02, -1.094e-01, 9.539e-02, 1.432e-01, 2.762e-02) * s2[y+1][x+2];
	r += M4(-2.893e-04, -6.435e-02, -2.102e-02, -7.670e-02, -4.866e-02, 3.113e-02, 1.017e-01, 6.026e-02, -4.034e-03, 6.973e-02, 1.654e-03, -1.897e-01, -7.889e-02, -5.116e-02, 3.273e-02, -5.351e-02) * s2[y+2][x+0];
	r += M4(-8.082e-02, 1.358e-01, -5.230e-03, 3.202e-01, 1.401e-01, -7.008e-02, -1.561e-01, -2.725e-01, -9.213e-02, -1.981e-01, 3.405e-02, 1.000e-01, 2.003e-02, 4.624e-02, -2.241e-02, 2.449e-02) * s2[y+2][x+1];
	r += M4(2.890e-02, 1.985e-01, 5.048e-02, -1.323e-01, -7.789e-02, -1.267e-01, -3.641e-02, -1.196e-01, -9.466e-04, -4.541e-02, 2.373e-02, -1.983e-02, -5.467e-02, -4.607e-02, 1.036e-01, -6.535e-03) * s2[y+2][x+2];
	r += M4(8.670e-02, -1.810e-02, -2.855e-02, 3.718e-02, -4.288e-02, -5.270e-02, -8.413e-02, -3.473e-03, 7.232e-02, 9.724e-02, 1.092e-01, -1.284e-01, -3.754e-01, -2.679e-01, 1.290e-01, 1.306e-01) * s3[y+0][x+0];
	r += M4(-1.515e-01, -1.716e-02, -4.793e-02, 1.688e-02, -5.099e-02, -2.887e-02, 8.288e-02, -7.242e-02, -1.469e-01, 2.272e-02, -1.846e-01, -1.250e-01, -6.972e-01, 1.264e-01, 2.736e-01, -5.277e-01) * s3[y+0][x+1];
	r += M4(7.158e-02, 1.068e-01, 4.987e-02, -2.787e-02, -5.343e-02, -1.027e-01, 2.636e-02, 2.380e-02, 8.218e-02, 4.680e-01, 6.860e-02, 2.344e-02, -2.953e-01, 4.799e-01, 3.416e-01, 3.310e-02) * s3[y+0][x+2];
	r += M4(-8.654e-02, -1.771e-01, -1.096e-01, -4.700e-02, -1.272e-01, -1.599e-01, -6.236e-03, 9.520e-02, 1.205e-01, 1.548e-01, 2.475e-01, -8.568e-02, -4.027e-01, 2.212e-01, 1.087e-01, 1.721e-01) * s3[y+1][x+0];
	r += M4(-1.051e-01, -7.682e-02, 1.733e-01, 3.255e-01, 1.419e-01, 8.442e-02, -2.728e-01, -2.484e-01, 2.761e-01, 7.406e-02, -1.295e-01, 4.772e-01, -4.914e-01, -8.325e-02, 9.496e-02, 1.872e-01) * s3[y+1][x+1];
	r += M4(2.286e-02, 9.405e-02, -7.697e-02, 6.260e-03, -4.399e-02, -1.294e-01, -2.900e-01, 6.440e-02, -8.431e-02, 1.689e-01, -1.713e-01, 5.637e-02, -4.610e-01, 9.232e-02, 4.645e-01, 1.049e-01) * s3[y+1][x+2];
	r += M4(3.001e-02, -1.595e-02, -3.712e-02, 3.897e-02, -2.155e-02, 1.337e-01, 8.080e-02, 4.482e-02, 6.487e-02, 1.065e-01, -3.271e-02, 1.624e-02, -3.651e-02, -5.013e-02, 7.671e-02, -3.287e-02) * s3[y+2][x+0];
	r += M4(-9.433e-02, 1.655e-01, 2.537e-02, 2.325e-01, 1.257e-01, -2.759e-01, -2.940e-01, -7.825e-02, -7.036e-02, -5.685e-02, 1.479e-01, 9.952e-02, -1.281e-02, 2.169e-01, 2.268e-01, 2.606e-01) * s3[y+2][x+1];
	r += M4(-1.688e-02, 1.210e-01, 1.625e-01, 1.973e-02, -1.770e-02, 6.275e-02, -1.488e-02, 6.873e-02, 3.718e-02, -1.314e-01, -2.239e-02, -7.416e-02, -5.345e-02, 6.298e-02, 3.711e-01, -6.034e-02) * s3[y+2][x+2];
	r += V4(-3.852e-02, 1.690e-02, 4.775e-02, -2.576e-02);
	return vec4(r);
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv3_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
			s2[ay][ax] = l1(x - 1, y - 1);
			s1[ay][ax] = -max(-s0[ay][ax], V4(0.0));
			s0[ay][ax] = max(s0[ay][ax], V4(0.0));
			s3[ay][ax] = -max(-s2[ay][ax], V4(0.0));
			s2[ay][ax] = max(s2[ay][ax], V4(0.0));
		}
	}
	barrier();
	imageStore(out_image, opos + ivec2(0, 0), f0(xy.x, xy.y));
	imageStore(out_image, opos + ivec2(1, 0), f1(xy.x, xy.y));
}


//!DESC CuNNy-8x8C-RCAS-DS-conv5
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv4
//!BIND LUMA
//!SAVE conv5
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
	#define V4 f16vec4
	#define M4 f16mat4
	#define F float16_t
#else
	#define V4 vec4
	#define M4 mat4
	#define F float
#endif
#define l0(x, y) V4(texelFetch(conv4_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv4_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 s0[10][10];
shared V4 s1[10][10];
shared V4 s2[10][10];
shared V4 s3[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-2.065e-01, -2.207e-01, 1.402e-02, 2.881e-01, -4.332e-02, 1.142e-01, -3.952e-02, 1.237e-01, 1.110e-01, 1.772e-02, 9.156e-02, -6.729e-02, -6.476e-02, 1.334e-02, -1.796e-02, -1.058e-01) * s0[y+0][x+0];
	r += M4(1.248e-01, 1.677e-01, 1.155e-01, -1.233e-01, 5.595e-03, 2.094e-01, -1.011e-01, -7.886e-02, 4.815e-02, 2.407e-02, 2.614e-02, 4.586e-02, -1.217e-01, 4.738e-02, -5.776e-02, -6.518e-02) * s0[y+0][x+1];
	r += M4(-2.708e-02, 4.137e-02, 7.628e-02, 7.516e-02, 4.390e-02, -2.542e-02, -5.753e-02, -4.386e-02, -4.259e-02, 1.217e-04, 4.262e-02, -2.533e-02, -3.776e-03, -1.466e-01, -1.827e-02, -3.142e-02) * s0[y+0][x+2];
	r += M4(-1.921e-01, -8.068e-02, 3.485e-02, 5.210e-02, -4.222e-02, 6.416e-02, -4.551e-02, -1.559e-01, -8.813e-02, 4.321e-02, 1.600e-02, 2.652e-01, -2.802e-03, -1.775e-02, -2.816e-02, -1.321e-01) * s0[y+1][x+0];
	r += M4(-2.380e-01, -1.239e-02, -3.309e-02, -1.797e-01, 1.407e-01, -1.458e-01, 8.117e-02, 8.696e-03, 3.526e-01, 4.154e-01, 1.512e-01, 1.656e-01, -3.565e-01, -3.453e-01, -3.601e-02, 1.302e-02) * s0[y+1][x+1];
	r += M4(-1.374e-01, 2.251e-02, 1.978e-01, -3.771e-02, 1.004e-01, 3.057e-01, -2.167e-01, 1.193e-03, 7.296e-02, 2.758e-01, -1.557e-01, -1.159e-01, -2.973e-01, -2.257e-01, 2.124e-01, 3.958e-01) * s0[y+1][x+2];
	r += M4(1.217e-02, 2.609e-02, 1.478e-02, 8.663e-02, 1.255e-01, 6.420e-02, -1.152e-02, 1.744e-01, -4.276e-02, -7.959e-02, 4.858e-02, 9.746e-03, -3.549e-02, -1.092e-01, -2.893e-02, 3.066e-02) * s0[y+2][x+0];
	r += M4(-6.572e-02, -2.048e-02, 4.139e-02, 1.949e-02, 8.383e-02, -1.273e-02, 2.890e-02, 1.272e-01, -4.760e-02, -5.060e-02, 2.023e-02, 4.211e-02, -6.833e-02, -1.224e-01, -4.861e-02, 2.407e-01) * s0[y+2][x+1];
	r += M4(-9.906e-02, -4.250e-02, -4.637e-02, -8.505e-03, -4.316e-04, -1.958e-02, -4.557e-02, -7.773e-03, -7.686e-02, -1.265e-01, 4.994e-02, -2.188e-02, -7.590e-02, -9.597e-02, 6.790e-02, 2.445e-01) * s0[y+2][x+2];
	r += M4(-9.050e-02, -1.785e-01, 5.235e-02, -1.956e-01, 6.120e-02, -1.206e-01, 1.248e-01, 1.653e-01, 3.658e-02, -5.990e-02, 1.747e-02, 9.233e-02, -1.789e-01, 3.259e-02, 3.155e-02, -7.827e-02) * s1[y+0][x+0];
	r += M4(3.027e-01, 2.099e-01, 3.098e-02, -3.268e-01, 3.171e-02, 4.095e-02, 4.007e-02, 1.170e-01, 2.589e-03, 2.125e-01, 1.314e-01, -5.034e-02, -1.459e-01, 2.465e-01, 1.937e-02, -1.561e-01) * s1[y+0][x+1];
	r += M4(-2.254e-02, -1.220e-01, -6.747e-02, 4.236e-02, 1.292e-02, -1.631e-02, 7.876e-02, -1.861e-02, -1.265e-01, 2.436e-04, 8.136e-02, 1.169e-01, 2.840e-02, 9.769e-02, -7.556e-02, -2.842e-01) * s1[y+0][x+2];
	r += M4(-1.024e-01, 7.868e-02, -3.621e-02, 4.891e-02, 6.813e-02, 1.036e-01, 2.135e-01, -3.138e-01, -1.175e-02, 2.303e-02, -5.288e-02, -1.043e-02, -1.437e-01, 5.926e-02, -7.369e-02, -1.625e-01) * s1[y+1][x+0];
	r += M4(-3.112e-02, 5.683e-02, -1.617e-01, 3.100e-01, 4.052e-01, 1.709e-01, 2.102e-01, -1.430e-01, 2.819e-01, 4.492e-01, 7.512e-02, 2.473e-01, -3.164e-01, 1.897e-01, 2.873e-02, -3.910e-02) * s1[y+1][x+1];
	r += M4(-3.468e-02, -1.662e-02, -2.795e-02, 3.739e-02, 8.314e-03, 1.635e-01, 1.039e-01, 9.373e-02, 1.654e-01, 3.037e-02, -2.873e-01, -3.240e-02, -2.408e-01, 5.676e-02, 2.928e-01, 8.509e-02) * s1[y+1][x+2];
	r += M4(-9.486e-03, 2.889e-02, -5.115e-02, -6.800e-03, 2.607e-02, -8.633e-02, 2.002e-04, 1.341e-01, 5.777e-02, -1.557e-02, -5.645e-03, -2.580e-02, -9.710e-02, 9.814e-02, 1.505e-02, 1.590e-02) * s1[y+2][x+0];
	r += M4(-5.169e-02, -1.345e-01, -1.320e-02, -1.449e-01, -4.809e-02, -2.596e-01, -5.127e-02, -7.274e-02, -1.298e-01, -9.167e-02, 2.883e-02, 8.488e-02, -1.658e-01, 1.924e-01, -3.252e-02, 4.469e-01) * s1[y+2][x+1];
	r += M4(-9.715e-02, -2.152e-01, 1.376e-03, 1.447e-01, 3.065e-02, -1.347e-01, 5.848e-03, 9.616e-02, -4.222e-02, -6.862e-02, 3.278e-02, -1.503e-03, -8.330e-02, 2.161e-01, -1.656e-02, 1.129e-01) * s1[y+2][x+2];
	r += M4(4.272e-03, -1.703e-02, -1.001e-01, 1.754e-01, 1.874e-02, -9.661e-02, -1.733e-01, 1.332e-02, -2.474e-02, 1.622e-01, 6.338e-02, -1.938e-01, 4.593e-04, -5.287e-02, 7.640e-02, -1.013e-02) * s2[y+0][x+0];
	r += M4(-6.471e-02, 2.146e-01, 2.244e-02, -4.255e-01, -2.266e-01, -9.846e-02, 2.349e-01, 1.276e-04, 2.901e-02, -2.659e-02, 1.422e-01, -2.875e-02, -2.537e-01, -1.986e-01, 4.449e-02, -1.575e-02) * s2[y+0][x+1];
	r += M4(-5.534e-02, -1.519e-01, 7.698e-02, 1.218e-01, 7.553e-02, 3.956e-02, 2.118e-01, 1.044e-01, 1.283e-04, 1.532e-01, 2.773e-01, 4.918e-02, -8.700e-02, -7.379e-02, 4.644e-02, 2.488e-04) * s2[y+0][x+2];
	r += M4(1.623e-02, 8.127e-02, 3.809e-02, 1.381e-01, 1.534e-01, 9.853e-02, 7.027e-02, -7.782e-02, 5.470e-02, -1.931e-01, 2.044e-02, 1.633e-01, 9.123e-02, -2.987e-02, 3.276e-02, -2.020e-01) * s2[y+1][x+0];
	r += M4(-1.936e-01, 1.249e-02, -1.264e-01, -1.098e-01, -1.162e-01, -1.491e-01, 2.627e-01, -1.111e-01, 1.653e-01, 1.361e-01, 1.302e-01, -9.658e-03, 4.028e-02, 7.975e-02, 1.069e-01, -9.839e-02) * s2[y+1][x+1];
	r += M4(-6.983e-02, 1.147e-02, 9.968e-02, -3.510e-02, 6.829e-03, 3.141e-02, 9.239e-02, 1.720e-01, 1.373e-02, -9.743e-02, 2.284e-01, 1.945e-01, -5.931e-02, 3.953e-03, 8.019e-03, -7.930e-02) * s2[y+1][x+2];
	r += M4(5.257e-02, 1.700e-01, 2.201e-02, -1.012e-01, 2.846e-01, 9.936e-02, -7.998e-02, 3.018e-01, 4.036e-02, 1.116e-02, 1.744e-02, -8.436e-02, 3.226e-02, -2.190e-02, 5.460e-02, 2.670e-02) * s2[y+2][x+0];
	r += M4(1.084e-02, -1.173e-01, -4.787e-02, 1.482e-01, -2.213e-01, -2.141e-01, 3.580e-01, 1.287e-01, 8.246e-02, 6.372e-02, 5.878e-02, -5.674e-02, -6.877e-02, 1.283e-02, -1.046e-03, -9.106e-02) * s2[y+2][x+1];
	r += M4(-5.299e-02, 1.226e-01, 2.388e-01, 2.467e-01, -2.311e-02, -3.862e-02, -1.093e-01, 1.276e-01, 7.177e-03, -4.946e-02, 3.549e-02, -1.057e-01, -1.451e-02, 5.290e-02, -4.043e-02, -7.275e-02) * s2[y+2][x+2];
	r += M4(1.059e-01, 6.457e-02, -2.578e-02, 7.631e-02, 6.389e-02, -1.389e-01, -3.650e-02, -2.771e-02, -6.362e-02, 4.311e-01, -4.915e-02, 2.533e-01, -1.024e-01, 1.320e-02, -6.761e-02, 7.161e-02) * s3[y+0][x+0];
	r += M4(9.956e-02, 1.642e-01, -4.634e-02, -1.043e-01, -3.217e-02, -1.280e-01, 6.726e-02, 4.558e-03, 2.197e-01, 2.040e-01, -2.621e-02, -1.396e-01, -2.150e-01, 1.879e-01, -9.356e-02, 5.730e-02) * s3[y+0][x+1];
	r += M4(-1.466e-02, -1.445e-02, 8.408e-03, 4.602e-02, -7.358e-03, -8.462e-02, -5.471e-02, -2.686e-02, 8.460e-02, 4.562e-01, 1.022e-01, 1.257e-01, -1.114e-01, -4.524e-03, 2.018e-01, 7.915e-02) * s3[y+0][x+2];
	r += M4(1.818e-01, -1.025e-01, 2.001e-01, 9.958e-03, 4.326e-02, -1.294e-01, -2.802e-02, 1.514e-01, 1.682e-01, -2.238e-01, 4.889e-02, 2.278e-01, -1.030e-01, -3.733e-02, 6.688e-02, -1.889e-01) * s3[y+1][x+0];
	r += M4(-1.169e-01, 8.327e-02, -1.937e-02, 2.786e-02, 5.099e-02, -9.457e-02, -7.484e-02, -1.842e-02, 5.219e-01, -4.688e-03, -9.611e-02, -1.665e-01, -1.617e-01, 7.702e-02, 1.479e-01, -2.656e-01) * s3[y+1][x+1];
	r += M4(-6.225e-02, 1.491e-01, 3.478e-01, 1.382e-02, -2.729e-02, 8.562e-02, 2.040e-02, 7.691e-02, 2.287e-01, -2.286e-01, 9.513e-02, 4.652e-02, 1.294e-01, -1.878e-01, 9.681e-02, -1.827e-01) * s3[y+1][x+2];
	r += M4(6.111e-02, 7.075e-03, 9.985e-04, -2.410e-02, 4.167e-02, -1.409e-01, -1.793e-02, 1.342e-01, 9.491e-02, -1.001e-01, -1.584e-02, 4.500e-03, 2.118e-02, 5.442e-02, 2.753e-03, 9.338e-02) * s3[y+2][x+0];
	r += M4(5.538e-03, 2.671e-02, -7.692e-02, 1.345e-01, -5.188e-02, -1.533e-01, 1.333e-01, -4.528e-02, 4.257e-01, -2.829e-01, 3.503e-01, -5.222e-01, -9.271e-02, -1.728e-03, -3.000e-02, 1.985e-01) * s3[y+2][x+1];
	r += M4(-1.506e-02, 4.920e-02, 1.846e-01, 7.328e-02, 1.063e-02, -6.812e-02, -3.485e-02, 1.436e-02, -1.612e-02, -1.262e-02, 1.770e-01, -3.943e-01, 4.670e-02, 1.198e-01, -9.064e-02, 3.350e-02) * s3[y+2][x+2];
	r += V4(-1.005e-01, 5.382e-02, -5.525e-03, -1.312e-02);
	return vec4(r);
}
vec4 f1(int x, int y) {
	V4 r = V4(0.0);
	r += M4(7.539e-02, -6.021e-02, 4.506e-02, 2.037e-02, 4.635e-02, -8.830e-02, -1.046e-01, 5.838e-02, -1.427e-01, -8.965e-02, 6.777e-02, 6.476e-02, 4.695e-02, 8.498e-02, 5.630e-02, 1.740e-03) * s0[y+0][x+0];
	r += M4(-1.022e-01, 3.037e-01, -1.166e-01, 5.037e-02, -7.233e-02, -1.263e-01, -4.978e-02, -5.227e-02, -1.296e-01, -8.359e-02, -1.975e-01, 1.636e-01, 1.894e-02, 1.133e-01, 8.574e-02, -1.638e-01) * s0[y+0][x+1];
	r += M4(3.370e-02, -8.734e-03, 2.004e-01, -1.328e-01, 1.908e-01, -2.861e-02, -2.859e-01, 4.995e-02, -6.856e-02, -1.653e-02, -7.233e-02, 2.862e-03, 8.424e-02, 1.969e-03, 5.355e-02, 1.198e-02) * s0[y+0][x+2];
	r += M4(-7.528e-02, -1.655e-01, -2.457e-02, 1.584e-01, -5.368e-02, -4.855e-02, 6.892e-02, 8.171e-03, -2.562e-02, -1.469e-01, 6.039e-02, -2.740e-02, 4.004e-04, 1.500e-01, 2.106e-02, 4.162e-02) * s0[y+1][x+0];
	r += M4(-1.158e-01, 6.031e-02, -3.058e-02, 2.086e-01, 2.829e-02, -2.708e-01, -2.315e-01, -1.733e-01, 4.146e-02, 5.243e-02, -2.971e-01, -6.730e-02, -1.351e-03, 3.209e-02, 2.093e-01, 3.947e-01) * s0[y+1][x+1];
	r += M4(-3.625e-04, 8.908e-02, -1.681e-01, 4.257e-02, -8.069e-02, -9.188e-02, -1.292e-01, 1.041e-01, 1.292e-02, 1.249e-02, 3.960e-01, -2.004e-03, -6.011e-02, -1.850e-01, 5.087e-02, -1.240e-01) * s0[y+1][x+2];
	r += M4(2.356e-02, 3.862e-02, 1.493e-02, 1.160e-02, 9.617e-03, -1.607e-01, 6.863e-02, -8.146e-02, 2.762e-02, -8.446e-02, 8.708e-03, 1.487e-01, 2.383e-02, 5.969e-02, -9.561e-03, -5.358e-02) * s0[y+2][x+0];
	r += M4(-8.215e-03, -4.649e-02, 1.249e-02, -1.448e-02, 6.218e-02, -1.325e-01, -1.064e-01, -5.323e-02, -8.071e-02, 9.947e-03, -8.448e-03, 1.425e-01, -3.537e-03, -9.262e-02, -2.314e-02, -1.088e-01) * s0[y+2][x+1];
	r += M4(-1.481e-02, -2.049e-02, -4.722e-02, -1.247e-02, -2.526e-02, -3.174e-02, 5.562e-02, -8.004e-02, 3.072e-02, -6.085e-02, 1.315e-01, 3.656e-02, 4.008e-02, -3.397e-03, -1.250e-01, 1.556e-02) * s0[y+2][x+2];
	r += M4(1.033e-01, 1.249e-01, -2.568e-01, -5.217e-02, 5.484e-02, 2.335e-01, -8.138e-03, -1.138e-01, 4.780e-03, -1.489e-01, 2.869e-02, 1.342e-01, 6.737e-02, 8.130e-02, -3.270e-02, -6.836e-02) * s1[y+0][x+0];
	r += M4(-1.726e-01, 3.940e-01, 8.748e-02, -3.981e-01, 3.486e-02, 2.167e-01, 1.814e-01, -3.103e-02, 1.497e-01, 1.006e-01, -1.177e-01, 7.549e-02, -6.674e-02, 1.867e-01, -8.950e-03, -3.374e-01) * s1[y+0][x+1];
	r += M4(1.474e-01, -3.302e-02, -3.613e-02, 2.347e-02, 2.486e-02, -3.442e-02, 1.033e-01, 7.930e-02, 3.602e-02, -6.213e-02, -5.732e-02, -2.998e-02, -5.749e-02, -4.197e-02, 8.170e-02, -7.722e-02) * s1[y+0][x+2];
	r += M4(5.797e-03, -1.451e-01, 4.710e-02, 1.272e-02, -9.149e-03, 6.821e-01, 7.401e-02, -6.323e-02, 2.439e-02, -2.099e-01, -4.491e-03, 9.193e-02, 8.401e-02, -7.771e-02, -1.954e-02, -3.993e-03) * s1[y+1][x+0];
	r += M4(9.649e-03, 3.235e-01, 6.229e-02, 1.207e-01, 1.409e-01, 8.670e-02, 3.456e-01, 1.388e-01, 1.401e-01, -1.667e-01, -2.329e-01, 2.797e-01, -1.506e-02, -1.126e-01, 1.855e-01, 2.058e-01) * s1[y+1][x+1];
	r += M4(1.995e-02, 1.084e-01, -4.796e-02, 1.087e-01, -5.892e-02, 6.833e-02, 7.599e-02, -1.100e-01, 1.212e-01, 2.195e-02, 1.178e-01, 1.204e-01, 6.776e-03, -1.450e-01, -8.337e-02, -2.218e-01) * s1[y+1][x+2];
	r += M4(-1.411e-02, -8.627e-03, -2.263e-02, 2.967e-02, 1.137e-01, 6.093e-02, 1.533e-01, -6.617e-02, 7.640e-02, -1.402e-01, 4.948e-02, 1.144e-01, 1.243e-02, -8.491e-02, 1.431e-02, -5.384e-02) * s1[y+2][x+0];
	r += M4(-2.331e-03, 1.482e-01, -8.244e-03, -2.046e-01, 1.183e-01, -3.741e-02, 6.054e-02, 2.002e-01, 8.803e-03, -4.670e-02, -6.140e-02, 8.100e-02, 3.154e-02, -6.242e-02, -1.593e-02, -1.254e-01) * s1[y+2][x+1];
	r += M4(-6.317e-03, 4.732e-02, -1.464e-02, -9.919e-02, -3.255e-02, -2.525e-02, 1.760e-01, -2.949e-02, 1.777e-02, -9.664e-02, 5.596e-03, -1.772e-03, 6.027e-02, -5.684e-02, 1.468e-01, -4.922e-02) * s1[y+2][x+2];
	r += M4(-8.179e-02, 1.258e-02, -7.914e-02, 2.728e-03, -2.062e-02, -2.916e-01, 2.350e-01, 1.106e-01, -1.425e-02, 8.895e-02, 5.666e-02, -7.343e-02, -4.573e-03, 1.034e-01, -1.553e-01, 1.251e-01) * s2[y+0][x+0];
	r += M4(-3.499e-01, 2.356e-01, 5.789e-02, -3.687e-01, 1.202e-01, 2.961e-01, -4.328e-02, -1.817e-01, 1.345e-01, 9.740e-02, 3.940e-02, -5.166e-02, -9.263e-02, -4.205e-01, 9.711e-02, -7.087e-02) * s2[y+0][x+1];
	r += M4(-3.084e-01, -1.397e-01, -3.430e-02, -2.790e-02, -1.380e-01, 1.211e-01, 2.408e-01, -6.427e-02, 1.675e-01, 1.135e-01, 4.696e-02, -8.715e-02, -4.819e-02, -1.531e-01, -2.315e-01, 9.827e-02) * s2[y+0][x+2];
	r += M4(-1.162e-01, -3.990e-02, 2.140e-02, -8.202e-02, -8.930e-02, 8.388e-02, 6.678e-02, -2.154e-01, 8.802e-02, 5.462e-02, 9.253e-02, -8.358e-02, 4.128e-02, -5.408e-02, -9.508e-02, 6.168e-02) * s2[y+1][x+0];
	r += M4(-3.184e-01, 6.363e-01, 4.704e-01, 3.272e-01, 1.312e-01, 1.975e-01, -5.012e-01, 1.224e-01, 1.016e-01, -2.760e-01, -1.955e-01, -1.255e-01, 1.738e-02, -1.926e-01, -9.538e-02, 2.826e-01) * s2[y+1][x+1];
	r += M4(-3.168e-01, -7.589e-02, 3.669e-01, -4.338e-01, -2.091e-01, -1.642e-02, 3.439e-01, -1.743e-01, -4.715e-02, -1.081e-02, 2.196e-01, -7.497e-03, 3.894e-02, -1.323e-01, -3.839e-02, 2.009e-01) * s2[y+1][x+2];
	r += M4(-1.562e-02, 1.243e-03, -1.453e-02, -9.735e-02, 7.940e-03, -1.896e-01, 4.600e-01, 6.369e-02, -3.631e-02, 4.541e-02, -8.263e-03, 7.747e-03, -6.651e-03, -2.716e-03, -3.636e-02, -1.317e-02) * s2[y+2][x+0];
	r += M4(-1.175e-01, -1.329e-01, -7.398e-03, -8.448e-02, 3.188e-02, -7.445e-02, -4.071e-01, -1.166e-01, 3.282e-02, 9.845e-02, 4.924e-02, 3.333e-02, 4.576e-02, -2.143e-02, -1.941e-02, 1.113e-02) * s2[y+2][x+1];
	r += M4(-9.515e-02, -1.773e-01, -6.742e-02, -5.574e-02, 1.870e-02, 2.813e-02, -5.105e-02, -1.612e-02, 1.655e-02, 6.221e-02, 3.336e-02, -2.855e-02, -1.225e-02, 6.793e-03, -4.684e-02, 2.076e-03) * s2[y+2][x+2];
	r += M4(-8.014e-02, -2.304e-02, 5.018e-02, 1.021e-02, -2.028e-02, 2.126e-02, -1.265e-01, 1.935e-02, 6.956e-02, -2.058e-01, 3.165e-01, 8.091e-02, 8.562e-02, -8.455e-02, -1.089e-01, 1.118e-01) * s3[y+0][x+0];
	r += M4(-1.241e-01, -1.669e-02, -6.304e-02, 4.957e-02, 3.727e-02, 1.069e-01, 6.155e-02, -1.729e-01, -1.384e-01, 4.391e-01, 2.434e-01, -1.629e-02, 6.455e-02, -3.723e-02, -1.558e-01, 1.193e-01) * s3[y+0][x+1];
	r += M4(-1.966e-01, -1.077e-01, 4.759e-02, 3.528e-02, -7.228e-02, -4.097e-02, -3.274e-02, 5.349e-02, -3.009e-01, -1.389e-01, 4.484e-01, -2.114e-01, -4.096e-02, -7.781e-02, 3.077e-02, 9.284e-02) * s3[y+0][x+2];
	r += M4(-3.015e-03, 8.460e-02, 1.192e-01, -1.166e-03, -3.811e-02, -1.538e-01, -1.705e-02, 4.977e-02, 2.716e-01, 6.504e-02, 2.607e-01, -8.548e-02, 7.614e-02, -2.646e-03, -1.079e-01, 3.258e-02) * s3[y+1][x+0];
	r += M4(-6.861e-02, -2.055e-03, -4.170e-03, 2.616e-01, 3.600e-02, 1.467e-01, -3.850e-01, 7.872e-02, -1.705e-01, -4.233e-01, -1.451e-01, -3.121e-01, -1.292e-01, 1.910e-02, 4.469e-02, 1.083e-01) * s3[y+1][x+1];
	r += M4(-4.076e-02, 8.705e-03, -1.011e-01, -1.714e-01, 3.916e-02, -6.392e-02, 6.076e-02, -8.667e-02, -6.347e-02, 2.108e-01, 1.753e-01, 1.252e-01, 1.288e-03, 1.798e-02, 2.007e-01, 1.342e-01) * s3[y+1][x+2];
	r += M4(3.638e-02, 8.415e-03, 5.559e-02, -2.998e-02, 2.614e-03, -1.388e-02, -4.232e-02, -1.002e-01, 2.432e-02, 3.897e-01, 3.261e-02, 9.931e-02, 4.938e-02, 3.563e-03, 4.650e-02, -8.850e-03) * s3[y+2][x+0];
	r += M4(-1.016e-01, -5.264e-02, 6.190e-02, 6.518e-02, -4.456e-03, -3.068e-02, -2.204e-01, -1.126e-01, -3.832e-02, 6.745e-01, -1.759e-02, -1.918e-01, 1.330e-01, -8.251e-02, 9.779e-02, 4.773e-02) * s3[y+2][x+1];
	r += M4(-5.104e-02, -5.531e-02, 8.796e-03, 5.730e-02, -1.765e-02, 3.593e-02, 5.122e-02, -3.168e-03, 3.337e-02, -2.670e-03, 3.250e-01, -6.319e-02, 3.539e-02, 5.190e-02, 1.218e-01, -6.370e-02) * s3[y+2][x+2];
	r += V4(5.440e-02, 2.603e-02, 2.435e-02, -1.836e-02);
	return vec4(r);
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv4_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
			s2[ay][ax] = l1(x - 1, y - 1);
			s1[ay][ax] = -max(-s0[ay][ax], V4(0.0));
			s0[ay][ax] = max(s0[ay][ax], V4(0.0));
			s3[ay][ax] = -max(-s2[ay][ax], V4(0.0));
			s2[ay][ax] = max(s2[ay][ax], V4(0.0));
		}
	}
	barrier();
	imageStore(out_image, opos + ivec2(0, 0), f0(xy.x, xy.y));
	imageStore(out_image, opos + ivec2(1, 0), f1(xy.x, xy.y));
}


//!DESC CuNNy-8x8C-RCAS-DS-conv6
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv5
//!BIND LUMA
//!SAVE conv6
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
	#define V4 f16vec4
	#define M4 f16mat4
	#define F float16_t
#else
	#define V4 vec4
	#define M4 mat4
	#define F float
#endif
#define l0(x, y) V4(texelFetch(conv5_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv5_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 s0[10][10];
shared V4 s1[10][10];
shared V4 s2[10][10];
shared V4 s3[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-2.851e-02, 1.073e-01, -1.475e-01, -8.471e-02, 4.795e-02, 8.761e-03, -5.581e-02, -5.141e-02, 4.970e-02, 3.416e-02, 3.871e-02, -1.885e-02, -1.775e-02, 2.732e-02, -6.714e-02, -1.180e-04) * s0[y+0][x+0];
	r += M4(6.720e-02, 6.847e-02, 7.892e-02, -1.323e-01, 1.054e-01, 6.119e-02, 9.555e-02, -1.079e-01, 1.151e-02, 1.429e-01, -8.122e-02, -1.444e-02, 4.702e-02, -1.956e-01, 1.037e-01, 2.051e-01) * s0[y+0][x+1];
	r += M4(-4.475e-02, 2.077e-02, 8.254e-03, -4.595e-02, -4.437e-02, 1.295e-02, 3.060e-02, 6.775e-02, -5.825e-02, -3.184e-02, 1.260e-02, 1.592e-02, 2.375e-03, -5.061e-03, -1.233e-01, 1.043e-01) * s0[y+0][x+2];
	r += M4(6.745e-03, 7.971e-02, 1.479e-01, -3.385e-02, 2.799e-02, 2.420e-02, 1.086e-01, -3.067e-02, -5.164e-02, 5.400e-02, 3.772e-03, -3.803e-02, 1.502e-01, 2.180e-01, 6.743e-03, 5.040e-02) * s0[y+1][x+0];
	r += M4(7.600e-01, 4.621e-01, 2.531e-02, 5.489e-01, 3.350e-01, 1.800e-02, -3.728e-02, 6.296e-02, 2.646e-02, 3.912e-01, 2.608e-01, -1.585e-01, 2.018e-01, -1.965e-01, -3.178e-01, 1.307e-01) * s0[y+1][x+1];
	r += M4(-3.643e-01, 4.329e-01, -9.421e-02, 5.176e-02, 1.764e-01, -6.874e-02, -4.813e-02, -3.201e-02, -1.053e-01, 9.303e-03, 2.394e-02, -1.413e-02, -1.541e-01, -3.627e-03, 1.359e-02, 1.831e-01) * s0[y+1][x+2];
	r += M4(5.479e-03, -1.793e-02, -3.117e-03, -1.101e-01, 1.127e-02, -2.436e-02, 8.820e-02, -2.261e-02, 3.374e-02, -1.331e-01, -2.468e-02, 6.170e-02, -6.830e-02, -2.150e-03, 7.082e-02, -9.692e-02) * s0[y+2][x+0];
	r += M4(-1.231e-01, -9.400e-02, 4.223e-02, 7.852e-02, -7.293e-02, -2.801e-02, -2.723e-02, 2.406e-01, 1.543e-01, -6.543e-02, -3.384e-02, 1.288e-01, -3.312e-01, 1.447e-01, -1.010e-01, -7.451e-02) * s0[y+2][x+1];
	r += M4(4.784e-02, -6.618e-02, 4.541e-02, -4.073e-02, 2.418e-03, 4.880e-02, -7.085e-02, 1.288e-01, -1.480e-02, 2.497e-02, 2.332e-02, 9.768e-03, 1.092e-01, -8.328e-02, -5.202e-02, -1.233e-01) * s0[y+2][x+2];
	r += M4(-7.715e-02, -5.305e-02, 2.732e-02, -1.103e-02, -8.719e-02, -1.090e-02, 2.030e-01, 5.191e-02, -1.381e-01, 4.453e-02, -1.577e-01, -2.529e-02, 1.661e-02, -3.916e-02, -3.348e-03, -9.315e-03) * s1[y+0][x+0];
	r += M4(6.290e-02, 1.085e-02, -8.511e-02, -5.504e-02, 3.226e-02, 5.339e-02, 2.048e-01, 7.744e-02, 1.551e-01, -9.815e-02, -4.726e-02, 3.971e-02, 1.502e-01, -3.845e-02, -1.641e-01, 7.548e-02) * s1[y+0][x+1];
	r += M4(-3.779e-02, 3.073e-03, -5.147e-02, -2.131e-04, 7.051e-02, -6.310e-02, 5.079e-02, 1.734e-01, -4.828e-02, -7.944e-02, -6.734e-02, -2.509e-03, 2.499e-02, 5.505e-03, -1.008e-01, 1.642e-02) * s1[y+0][x+2];
	r += M4(7.302e-02, -5.042e-02, 2.351e-02, -1.457e-02, 9.391e-02, -9.575e-02, -2.454e-02, -1.160e-01, -3.143e-01, 2.558e-01, 1.389e-01, -9.903e-02, 3.211e-02, -4.580e-03, -6.172e-02, -3.642e-02) * s1[y+1][x+0];
	r += M4(2.308e-01, 2.272e-01, 1.081e-01, 3.897e-01, 4.606e-01, 7.769e-02, 3.555e-01, -2.704e-02, 4.797e-02, 2.038e-01, 2.355e-03, -1.073e-01, 2.068e-01, -1.151e-01, -1.658e-01, 7.462e-02) * s1[y+1][x+1];
	r += M4(-7.939e-02, 5.861e-02, 3.119e-02, 4.302e-02, 1.910e-01, -1.997e-01, -7.670e-02, -4.150e-02, -1.434e-01, 8.365e-02, 7.307e-02, -1.594e-02, 5.720e-02, -9.534e-02, 5.239e-02, -5.721e-02) * s1[y+1][x+2];
	r += M4(5.635e-02, -4.546e-02, -3.711e-02, -4.056e-02, -8.465e-02, -3.911e-02, 1.159e-01, 1.090e-01, -2.611e-02, -5.127e-03, 9.351e-02, -8.788e-02, -2.820e-03, -1.995e-02, -1.548e-02, 2.251e-02) * s1[y+2][x+0];
	r += M4(-1.219e-01, -2.101e-02, -5.164e-02, -5.947e-02, 6.332e-02, -3.742e-02, -9.203e-02, 2.821e-01, 1.612e-01, -1.106e-01, -1.110e-01, 1.309e-02, -3.531e-02, 4.702e-02, 3.142e-03, 9.322e-02) * s1[y+2][x+1];
	r += M4(6.026e-02, -4.409e-02, 4.252e-02, 2.332e-02, -1.727e-01, 1.772e-01, 1.001e-01, 1.500e-02, 9.861e-02, 1.497e-02, -2.090e-03, 8.169e-03, 2.186e-02, -2.974e-02, -5.769e-03, -2.164e-02) * s1[y+2][x+2];
	r += M4(1.009e-02, -2.367e-02, -1.093e-03, 3.124e-02, 3.973e-02, -1.797e-02, -2.373e-02, -6.642e-02, 1.147e-02, 9.554e-03, 1.204e-01, 8.951e-02, -5.699e-02, -3.998e-02, -3.364e-02, -2.427e-03) * s2[y+0][x+0];
	r += M4(-4.923e-02, 1.295e-02, 2.119e-02, -2.074e-02, -6.813e-02, -2.689e-02, 2.187e-02, -8.371e-02, -3.495e-02, -2.020e-02, 1.267e-02, 1.098e-01, 3.182e-02, 1.339e-01, 8.298e-03, -6.585e-02) * s2[y+0][x+1];
	r += M4(1.627e-03, -1.663e-02, 2.761e-02, -1.616e-02, 8.501e-02, 5.448e-02, 2.200e-02, -9.005e-02, -1.081e-02, -1.701e-02, 2.346e-02, 1.106e-02, -2.062e-02, 8.247e-03, 4.286e-02, -5.911e-02) * s2[y+0][x+2];
	r += M4(7.658e-02, -4.256e-02, -1.306e-01, -1.401e-01, 3.917e-02, 5.166e-02, 9.343e-02, -4.239e-02, 6.938e-02, 1.164e-02, 2.459e-02, 9.874e-02, 4.401e-02, -2.659e-02, -7.255e-02, -1.684e-01) * s2[y+1][x+0];
	r += M4(7.429e-02, 9.883e-03, -4.459e-02, 3.527e-02, 2.131e-01, -2.834e-01, -1.812e-01, -2.211e-01, -1.130e-01, -6.642e-02, 1.705e-01, -1.666e-02, 1.523e-01, 1.589e-02, 1.372e-01, -1.825e-01) * s2[y+1][x+1];
	r += M4(-1.145e-01, 6.806e-02, 2.808e-02, 1.841e-02, 2.602e-01, -4.246e-02, -1.255e-01, -1.344e-01, -6.146e-03, -3.489e-02, -5.825e-02, -3.952e-02, 2.880e-01, -7.886e-02, -8.221e-02, -2.050e-01) * s2[y+1][x+2];
	r += M4(5.870e-02, 2.140e-03, 1.872e-02, 5.633e-02, -3.616e-02, 2.539e-03, 7.655e-02, 3.568e-02, -9.587e-02, -1.445e-02, -8.366e-02, -3.591e-02, -1.013e-02, -4.099e-02, 6.049e-02, -9.137e-02) * s2[y+2][x+0];
	r += M4(9.385e-03, -5.416e-02, -2.671e-02, 6.998e-03, 2.459e-02, -4.090e-02, 1.421e-01, 2.112e-01, 1.235e-01, -4.215e-02, 8.784e-03, 8.434e-02, -2.362e-01, 1.360e-01, 3.734e-02, -1.432e-02) * s2[y+2][x+1];
	r += M4(-9.160e-03, 1.851e-02, 1.485e-02, -8.287e-03, -1.421e-01, 8.348e-02, -1.215e-01, 2.055e-03, -9.403e-04, -1.316e-02, 1.345e-02, -6.783e-03, 6.984e-02, -4.300e-02, -3.033e-02, -1.265e-01) * s2[y+2][x+2];
	r += M4(9.021e-02, 1.530e-01, 1.864e-01, 6.559e-02, -4.951e-02, 3.746e-02, -6.346e-02, -9.721e-02, 1.296e-01, -5.305e-02, 1.950e-01, 4.036e-02, 4.447e-02, -3.380e-02, 2.922e-02, -2.129e-02) * s3[y+0][x+0];
	r += M4(1.077e-01, 1.422e-01, -2.745e-01, -9.595e-02, 4.738e-02, -4.230e-02, 1.031e-03, -7.479e-02, 1.137e-01, -1.706e-01, 3.031e-02, 1.806e-02, -1.501e-01, 5.807e-02, 1.816e-01, -2.603e-02) * s3[y+0][x+1];
	r += M4(1.144e-01, 5.097e-02, -4.332e-02, -1.499e-02, 3.456e-02, 3.575e-02, -5.374e-02, -1.284e-01, 1.931e-02, -9.895e-02, 3.563e-03, -1.505e-02, -4.430e-02, -3.584e-02, 2.692e-02, -2.276e-02) * s3[y+0][x+2];
	r += M4(6.555e-01, 2.491e-01, -8.430e-02, 4.570e-03, -9.653e-02, -1.467e-01, -1.700e-02, -3.831e-02, -5.702e-02, 2.742e-02, 3.304e-01, 1.497e-01, -5.732e-02, -5.981e-02, -6.421e-02, -8.261e-02) * s3[y+1][x+0];
	r += M4(1.389e-01, 4.979e-01, -3.011e-01, 3.057e-01, -9.595e-03, -1.716e-01, -4.511e-01, -3.007e-03, 1.166e-01, -5.698e-01, -1.359e-01, -1.747e-01, -6.740e-02, 9.836e-02, 9.522e-02, -1.683e-01) * s3[y+1][x+1];
	r += M4(-4.854e-02, 1.536e-02, 4.360e-02, 3.014e-01, -1.087e-01, 2.822e-01, -1.065e-01, 1.222e-01, -1.438e-01, 6.563e-02, 1.256e-01, 4.608e-02, 1.321e-01, -7.937e-02, -8.099e-02, -3.055e-01) * s3[y+1][x+2];
	r += M4(1.455e-01, 2.427e-01, 9.532e-02, -1.306e-01, -3.812e-02, -9.740e-03, -5.015e-02, -2.256e-02, -1.097e-01, -1.479e-01, -1.026e-01, 7.995e-03, 8.887e-03, -6.609e-02, 1.423e-02, -4.396e-02) * s3[y+2][x+0];
	r += M4(-4.046e-01, 6.958e-01, 2.557e-01, -3.082e-01, -8.029e-02, 3.641e-02, -1.635e-01, 1.238e-01, 2.920e-01, -1.193e-01, 1.220e-01, -1.223e-02, 3.769e-02, 3.864e-02, 3.058e-03, 2.377e-02) * s3[y+2][x+1];
	r += M4(2.013e-01, 5.834e-03, -2.503e-02, 2.281e-01, -8.360e-02, 6.902e-02, -1.014e-01, 3.480e-02, 3.385e-02, -3.364e-02, 4.957e-03, -6.248e-02, -1.467e-02, 4.520e-03, -1.085e-02, -4.909e-03) * s3[y+2][x+2];
	r += V4(7.969e-04, 3.010e-02, 2.512e-02, 1.195e-02);
	return vec4(r);
}
vec4 f1(int x, int y) {
	V4 r = V4(0.0);
	r += M4(1.043e-02, 2.542e-02, -2.703e-02, -4.493e-02, -6.735e-02, 7.849e-02, -1.179e-01, -1.364e-01, -4.296e-02, 5.320e-02, -5.327e-02, 6.576e-03, 2.215e-02, 3.722e-02, -2.378e-02, 1.122e-02) * s0[y+0][x+0];
	r += M4(8.484e-02, -3.709e-02, 2.530e-01, -1.203e-01, -6.015e-02, 4.271e-02, -2.021e-02, -1.545e-01, 5.076e-02, -2.091e-02, 8.769e-02, 1.353e-04, -4.484e-02, 5.822e-02, 5.174e-02, 1.014e-01) * s0[y+0][x+1];
	r += M4(-1.264e-02, 6.114e-02, 5.780e-02, -8.436e-02, 1.810e-03, 1.898e-02, -7.191e-02, 2.375e-02, 1.715e-02, -7.476e-02, 2.002e-02, 2.938e-02, -2.697e-02, -6.650e-02, 1.989e-01, 6.116e-02) * s0[y+0][x+2];
	r += M4(-5.660e-02, 1.483e-02, 3.288e-02, -1.548e-01, -2.023e-01, 9.393e-02, 1.798e-02, -3.051e-02, -5.970e-02, -1.026e-02, 1.562e-01, 8.564e-02, 1.411e-01, 1.125e-01, 5.298e-02, 4.818e-02) * s0[y+1][x+0];
	r += M4(3.129e-01, -7.034e-02, 3.018e-01, -5.691e-01, -1.239e-01, 3.274e-02, 5.602e-02, -8.767e-02, 1.679e-01, -8.673e-02, 1.572e-01, -1.463e-01, 2.213e-01, 6.937e-01, 2.496e-01, 1.733e-01) * s0[y+1][x+1];
	r += M4(-8.097e-04, 1.453e-01, 1.831e-01, 4.717e-03, 4.661e-02, -8.378e-02, 1.632e-03, -4.893e-02, -5.607e-02, -6.860e-02, 1.206e-02, 2.198e-02, -1.018e-01, 2.547e-01, 1.575e-02, 1.023e-01) * s0[y+1][x+2];
	r += M4(6.741e-03, 4.846e-02, 5.624e-02, 2.319e-02, -2.313e-02, -5.027e-03, 2.750e-02, 3.120e-02, -1.717e-02, -3.108e-02, -8.650e-03, -7.680e-02, -1.591e-01, -5.397e-02, 3.656e-02, 1.344e-01) * s0[y+2][x+0];
	r += M4(-1.933e-03, 3.869e-02, 1.041e-01, 1.122e-02, 1.213e-02, 6.168e-02, 1.291e-01, 5.326e-02, 3.523e-02, -1.972e-01, -8.863e-02, -3.435e-02, 3.537e-02, -1.695e-01, 4.550e-02, 1.336e-01) * s0[y+2][x+1];
	r += M4(-2.212e-02, -3.763e-02, 2.493e-02, -5.828e-02, 2.470e-02, -8.981e-02, 1.096e-02, 8.792e-02, -8.230e-02, -1.033e-01, -9.791e-03, -6.354e-03, -4.825e-02, 4.007e-02, 3.625e-02, 3.552e-02) * s0[y+2][x+2];
	r += M4(-4.334e-02, -1.480e-02, -6.950e-02, -2.262e-02, 2.067e-03, 1.757e-02, 1.982e-02, -4.627e-02, 7.857e-02, 1.045e-01, 3.235e-01, 1.184e-01, -3.581e-02, 3.463e-02, 5.014e-02, -1.209e-02) * s1[y+0][x+0];
	r += M4(-6.419e-02, -4.883e-02, 1.790e-01, -5.312e-03, -7.861e-02, 1.460e-01, -8.366e-02, -1.618e-01, 4.565e-02, 1.360e-01, -1.533e-02, 3.145e-03, -1.603e-01, 9.827e-02, 1.972e-01, 4.534e-02) * s1[y+0][x+1];
	r += M4(-2.498e-02, -2.740e-02, 3.848e-02, -7.436e-02, -1.556e-02, -2.604e-02, -8.870e-02, -4.122e-02, -1.325e-02, -3.390e-03, 9.745e-02, -2.709e-02, 1.873e-02, -8.463e-02, 6.534e-02, 5.529e-02) * s1[y+0][x+2];
	r += M4(-8.374e-02, 4.427e-03, -6.757e-02, 3.993e-02, -1.637e-01, 6.630e-02, 1.306e-02, -6.777e-02, 7.563e-02, 3.725e-02, 2.713e-01, -9.250e-02, -9.386e-02, 8.952e-02, 3.963e-02, 9.977e-02) * s1[y+1][x+0];
	r += M4(3.232e-01, -1.416e-01, -3.740e-02, 1.188e-02, -4.258e-01, -2.910e-03, 1.027e-01, -1.482e-01, 2.137e-01, -6.789e-02, 2.487e-02, 2.975e-02, 5.225e-02, 8.954e-02, 1.276e-01, 6.619e-02) * s1[y+1][x+1];
	r += M4(1.928e-02, -1.812e-01, 3.501e-02, 4.917e-02, 1.909e-01, -1.805e-01, -7.438e-02, 5.027e-02, -1.308e-02, 1.170e-01, -2.606e-02, 2.794e-02, 4.829e-02, -1.553e-02, -1.338e-02, 9.404e-02) * s1[y+1][x+2];
	r += M4(-1.503e-02, 6.304e-02, -1.857e-02, 2.863e-02, 2.728e-02, 1.925e-02, 6.337e-02, 9.428e-02, 9.847e-02, 3.714e-02, -5.165e-02, -1.622e-01, -7.014e-02, 4.454e-03, 2.629e-02, 7.425e-02) * s1[y+2][x+0];
	r += M4(-5.150e-02, -7.074e-02, -1.106e-02, -1.794e-04, 8.957e-02, 1.239e-01, 7.790e-02, 8.125e-02, 3.423e-02, 1.806e-02, -7.969e-02, -1.384e-01, -1.703e-02, -9.841e-02, 6.849e-02, -5.089e-03) * s1[y+2][x+1];
	r += M4(-5.302e-02, -7.695e-02, 5.900e-03, -1.390e-02, -9.002e-03, 1.775e-01, 3.994e-02, 4.860e-02, -7.972e-02, -9.290e-02, -3.686e-02, -5.154e-02, -2.134e-02, 4.132e-02, 1.605e-02, 4.591e-02) * s1[y+2][x+2];
	r += M4(-5.220e-02, 9.646e-02, -6.213e-02, 1.912e-02, 2.992e-02, 6.839e-04, -1.899e-02, -7.100e-02, 2.946e-03, 8.621e-03, -3.078e-02, 1.421e-01, 3.689e-02, -3.217e-02, -5.749e-02, 1.810e-02) * s2[y+0][x+0];
	r += M4(7.421e-02, -1.703e-01, 4.869e-03, 8.921e-03, -1.294e-01, 6.612e-02, -1.527e-01, -1.616e-01, 4.538e-02, -1.300e-01, -1.829e-01, 1.362e-01, 1.174e-02, -9.226e-02, -1.915e-01, -1.539e-01) * s2[y+0][x+1];
	r += M4(2.227e-02, 1.493e-02, -6.835e-02, 3.687e-02, 2.058e-02, -6.872e-02, -1.349e-02, -1.370e-01, -4.027e-03, -1.676e-02, -9.869e-02, 2.132e-02, -8.962e-02, 5.647e-02, -5.205e-02, -4.820e-02) * s2[y+0][x+2];
	r += M4(-1.106e-01, 2.346e-02, 1.938e-02, -1.950e-02, -9.290e-02, 6.254e-02, 8.625e-03, -2.821e-02, 6.036e-02, -5.213e-02, 5.192e-02, 6.714e-02, -1.457e-03, 9.709e-02, 4.631e-02, 1.214e-01) * s2[y+1][x+0];
	r += M4(4.714e-02, -1.679e-01, 9.938e-02, -8.181e-02, -4.223e-01, 1.138e-01, -6.374e-02, 1.626e-01, -1.480e-01, -9.605e-02, -1.362e-02, 6.876e-02, -2.004e-01, -1.727e-01, 3.144e-02, 4.804e-01) * s2[y+1][x+1];
	r += M4(-1.103e-02, 1.027e-01, 4.395e-02, -3.100e-02, 1.733e-01, -4.236e-02, 3.080e-03, -4.674e-03, 3.811e-02, 1.011e-01, -5.564e-02, 1.343e-02, 2.560e-01, -2.377e-01, 2.085e-02, 1.454e-01) * s2[y+1][x+2];
	r += M4(-8.687e-02, 1.061e-01, 6.401e-02, 2.013e-01, -5.867e-02, 3.830e-02, 1.649e-02, 8.573e-02, 5.825e-02, -1.737e-02, -3.401e-02, -1.297e-02, -1.022e-01, 4.560e-02, 9.497e-02, 1.543e-01) * s2[y+2][x+0];
	r += M4(1.250e-01, 1.377e-01, 3.224e-02, -4.814e-02, -1.261e-01, -7.466e-02, 1.343e-01, 1.230e-01, -2.867e-02, 8.430e-02, -3.536e-02, 4.581e-02, -3.128e-02, -2.399e-01, 5.219e-02, 2.073e-01) * s2[y+2][x+1];
	r += M4(-6.825e-02, -4.763e-03, -2.910e-02, -1.638e-02, 6.503e-02, -1.133e-01, 3.555e-02, 7.079e-02, 2.288e-02, 3.527e-02, 2.635e-02, 1.840e-02, -1.450e-02, -2.138e-02, 1.049e-01, 8.570e-02) * s2[y+2][x+2];
	r += M4(-2.430e-01, 2.369e-01, -2.936e-02, 6.096e-02, -5.019e-02, -3.445e-03, -4.784e-02, -4.272e-02, -1.362e-01, 1.503e-01, 1.134e-01, 7.673e-02, -4.029e-03, 5.029e-02, -2.471e-02, -3.285e-02) * s3[y+0][x+0];
	r += M4(-4.847e-02, -1.223e-01, -1.177e-01, -5.562e-02, -8.196e-02, 2.413e-02, -2.440e-01, -1.386e-01, 1.167e-01, -2.117e-01, 5.917e-02, 1.479e-01, 6.680e-02, -9.631e-02, -2.028e-01, -1.553e-01) * s3[y+0][x+1];
	r += M4(-6.985e-03, 7.422e-02, -6.366e-02, 2.868e-03, 2.682e-02, -6.302e-02, 9.686e-02, -5.544e-02, 3.557e-02, -6.863e-02, 1.099e-01, 6.153e-02, 1.444e-02, -9.297e-02, -1.209e-01, -1.235e-02) * s3[y+0][x+2];
	r += M4(-2.690e-01, 8.186e-02, 4.252e-02, 1.159e-01, -1.304e-01, 7.727e-02, 7.283e-02, 6.092e-02, -1.325e-01, 9.802e-02, 1.549e-01, 2.867e-02, -1.152e-01, 1.374e-01, 1.843e-02, 8.212e-02) * s3[y+1][x+0];
	r += M4(1.537e-01, -2.379e-01, 2.256e-01, -3.512e-03, -5.964e-01, -1.647e-01, 8.713e-02, 1.258e-01, 8.299e-02, -2.900e-01, 2.154e-01, -3.306e-02, -3.323e-01, -2.078e-01, -1.252e-02, 2.850e-01) * s3[y+1][x+1];
	r += M4(-7.942e-02, -8.057e-02, -6.348e-02, 1.401e-01, 1.091e-01, -1.883e-01, -1.923e-02, 9.252e-02, -1.890e-01, 8.957e-02, 2.412e-02, -1.393e-02, 1.894e-01, 1.016e-03, -3.197e-02, 2.736e-02) * s3[y+1][x+2];
	r += M4(4.052e-02, 2.182e-01, 1.243e-01, 1.278e-04, -5.949e-02, 4.932e-02, 1.000e-02, 9.740e-02, -1.960e-02, 2.825e-02, -6.276e-02, 3.275e-02, -5.028e-02, 7.837e-02, 5.867e-02, 8.599e-02) * s3[y+2][x+0];
	r += M4(2.351e-01, -3.539e-01, -2.849e-01, -7.583e-02, -5.266e-02, 5.473e-02, 8.142e-03, 9.843e-02, 2.112e-02, -5.202e-02, 2.350e-02, -9.177e-02, 1.687e-03, -1.596e-01, -2.800e-02, 7.228e-02) * s3[y+2][x+1];
	r += M4(-3.003e-01, -4.099e-01, -2.581e-01, 2.661e-01, 4.940e-02, -9.426e-02, 5.066e-02, -7.737e-02, -3.159e-02, -3.530e-02, 1.635e-02, 1.579e-02, 4.871e-02, -2.471e-02, 6.140e-02, -2.663e-02) * s3[y+2][x+2];
	r += V4(2.370e-02, -7.766e-02, -2.032e-02, 6.161e-04);
	return vec4(r);
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv5_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
			s2[ay][ax] = l1(x - 1, y - 1);
			s1[ay][ax] = -max(-s0[ay][ax], V4(0.0));
			s0[ay][ax] = max(s0[ay][ax], V4(0.0));
			s3[ay][ax] = -max(-s2[ay][ax], V4(0.0));
			s2[ay][ax] = max(s2[ay][ax], V4(0.0));
		}
	}
	barrier();
	imageStore(out_image, opos + ivec2(0, 0), f0(xy.x, xy.y));
	imageStore(out_image, opos + ivec2(1, 0), f1(xy.x, xy.y));
}


//!DESC CuNNy-8x8C-RCAS-DS-conv7
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv6
//!BIND LUMA
//!SAVE conv7
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
	#define V4 f16vec4
	#define M4 f16mat4
	#define F float16_t
#else
	#define V4 vec4
	#define M4 mat4
	#define F float
#endif
#define l0(x, y) V4(texelFetch(conv6_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv6_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 s0[10][10];
shared V4 s1[10][10];
shared V4 s2[10][10];
shared V4 s3[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += M4(1.810e-02, -1.928e-02, 2.296e-02, 5.503e-03, -5.737e-02, -1.618e-02, -1.476e-02, -2.706e-02, 7.760e-02, -3.749e-02, -3.986e-02, -2.744e-03, -3.017e-03, 6.125e-02, 4.915e-02, -6.758e-02) * s0[y+0][x+0];
	r += M4(-2.902e-02, -6.849e-02, 2.719e-02, 1.551e-01, 2.799e-02, -8.823e-02, 5.917e-02, -9.706e-03, 7.869e-03, -5.408e-02, 1.733e-02, -4.929e-02, 1.166e-01, 1.050e-01, -3.520e-02, 1.228e-01) * s0[y+0][x+1];
	r += M4(-6.303e-02, -3.809e-02, -9.507e-04, 2.036e-03, 2.022e-02, 1.749e-02, -1.699e-02, 2.690e-02, -4.767e-03, -3.171e-02, -3.308e-02, -3.963e-02, -1.240e-02, -1.550e-02, 5.953e-02, -4.542e-02) * s0[y+0][x+2];
	r += M4(3.405e-02, -4.636e-02, -1.134e-01, 7.795e-02, -1.526e-02, 1.682e-02, -6.702e-02, 3.202e-02, 6.315e-02, 2.925e-03, 3.578e-02, -3.126e-02, 6.864e-02, 1.206e-01, 2.037e-02, -4.742e-03) * s0[y+1][x+0];
	r += M4(-2.625e-02, 1.912e-01, -1.906e-01, -4.911e-02, 1.489e-01, 1.625e-01, -5.051e-01, -1.107e-01, 1.560e-02, 1.539e-01, 7.999e-02, -2.396e-01, 1.181e-01, 1.853e-01, -8.929e-02, -1.115e-01) * s0[y+1][x+1];
	r += M4(-1.017e-01, -1.351e-02, -2.082e-02, 5.058e-02, -1.223e-01, -5.751e-02, -4.473e-02, 2.411e-02, 5.678e-02, 9.106e-02, 1.107e-02, -8.570e-02, -2.514e-02, 1.695e-02, 2.950e-02, 2.501e-02) * s0[y+1][x+2];
	r += M4(-3.407e-02, -2.657e-03, -1.244e-02, 1.336e-02, 8.650e-03, 6.298e-03, 3.233e-02, 4.772e-02, 2.851e-02, 9.736e-03, 1.871e-02, 6.824e-04, -1.017e-02, -2.822e-02, 2.000e-02, -2.313e-02) * s0[y+2][x+0];
	r += M4(-6.612e-02, -2.039e-02, -1.001e-03, 3.199e-02, 1.702e-02, 6.016e-02, -1.351e-01, -1.238e-01, -7.255e-02, -3.643e-02, 1.507e-01, 3.866e-02, -2.380e-02, -4.333e-02, 5.859e-02, 9.155e-02) * s0[y+2][x+1];
	r += M4(-2.754e-02, 2.740e-02, -1.382e-02, -1.880e-02, -2.770e-02, 3.993e-02, -1.897e-02, 2.805e-02, 8.287e-02, -2.926e-02, -1.726e-02, -5.514e-02, -1.487e-02, -3.340e-02, -2.033e-02, -1.147e-02) * s0[y+2][x+2];
	r += M4(-2.335e-02, -2.082e-01, 5.985e-02, 6.750e-02, -1.019e-02, 4.767e-02, -4.691e-02, -1.459e-01, -3.126e-02, -1.501e-01, 3.666e-02, 2.860e-02, -7.213e-02, 1.217e-01, -2.643e-02, -1.400e-02) * s1[y+0][x+0];
	r += M4(-1.037e-02, -3.799e-01, -4.452e-02, 1.713e-01, 9.811e-02, -9.147e-02, -1.059e-01, -2.260e-02, -1.011e-02, 1.387e-02, 1.819e-02, -1.275e-01, -2.410e-02, 6.849e-02, -1.854e-02, 4.440e-01) * s1[y+0][x+1];
	r += M4(-8.249e-02, -7.167e-02, 1.856e-03, -3.820e-02, 5.344e-02, 8.271e-02, -9.112e-02, 4.491e-03, 2.223e-01, 3.140e-02, -8.113e-02, -9.343e-02, 2.859e-02, 5.887e-02, 2.186e-02, -4.895e-02) * s1[y+0][x+2];
	r += M4(-3.407e-02, 2.772e-01, -7.251e-02, -1.371e-01, -7.186e-02, -2.033e-01, -6.577e-02, 2.116e-01, -1.079e-02, -2.844e-02, -7.517e-02, -2.942e-02, 4.700e-02, -2.310e-01, -6.309e-02, 1.185e-01) * s1[y+1][x+0];
	r += M4(-2.882e-01, 5.334e-01, -1.312e-01, -1.003e-01, -2.141e-02, -1.267e-01, -4.679e-01, -1.306e-01, -2.013e-01, -2.655e-01, 1.048e-01, -3.668e-01, 2.075e-01, -1.224e-02, -1.802e-01, -6.180e-02) * s1[y+1][x+1];
	r += M4(6.246e-02, 3.676e-02, -2.980e-02, -4.681e-02, 4.579e-02, -2.192e-02, -2.511e-02, -6.632e-02, -1.645e-01, 1.434e-01, 3.078e-01, -1.044e-01, -3.763e-02, 1.539e-02, -8.359e-03, -1.037e-02) * s1[y+1][x+2];
	r += M4(-4.072e-02, -1.572e-01, -4.564e-02, 4.716e-02, 1.600e-01, -1.653e-02, 2.919e-02, -2.713e-02, -1.554e-02, 6.150e-02, -6.514e-03, 5.818e-02, 9.080e-03, 9.131e-03, 1.683e-02, -7.906e-02) * s1[y+2][x+0];
	r += M4(-8.477e-02, -2.117e-01, -8.101e-02, 1.479e-01, 4.891e-02, 1.631e-02, -2.323e-01, 4.186e-02, -8.507e-02, 1.322e-02, 2.112e-01, -2.784e-01, -4.630e-02, -1.222e-02, 7.572e-02, -4.672e-02) * s1[y+2][x+1];
	r += M4(2.125e-03, -3.105e-02, 2.539e-02, -5.911e-02, 4.987e-02, 3.820e-02, -2.649e-02, -2.925e-02, 1.096e-01, -2.405e-01, -6.029e-02, -8.812e-02, 1.374e-02, -6.137e-03, -1.453e-02, 1.654e-02) * s1[y+2][x+2];
	r += M4(-3.392e-02, 6.827e-02, 4.947e-02, 7.733e-04, 2.429e-02, 2.511e-02, -2.420e-02, 9.102e-02, -1.141e-02, 8.032e-03, 2.906e-02, -2.940e-02, 8.667e-02, 8.218e-02, -8.398e-02, 3.937e-02) * s2[y+0][x+0];
	r += M4(-1.082e-01, 8.571e-02, 7.642e-02, -8.735e-02, -5.485e-02, -9.846e-02, -6.261e-02, 8.375e-02, 7.700e-02, 6.222e-02, -8.284e-03, -5.229e-02, -1.826e-02, -1.444e-02, -7.215e-02, 2.528e-02) * s2[y+0][x+1];
	r += M4(8.697e-02, 3.122e-02, 4.409e-02, -1.265e-02, -6.337e-02, 1.300e-02, 9.623e-03, -3.207e-02, -3.600e-02, -1.476e-02, 3.873e-02, 4.973e-03, 6.028e-02, 1.057e-01, -1.117e-01, -2.598e-02) * s2[y+0][x+2];
	r += M4(-9.409e-02, -1.275e-01, 7.428e-02, 7.079e-02, 1.010e-01, 1.577e-01, 3.705e-01, -1.613e-02, -2.052e-02, 6.963e-02, -3.746e-02, -1.088e-01, 8.635e-02, -1.685e-01, 5.612e-02, 8.728e-02) * s2[y+1][x+0];
	r += M4(-5.258e-01, -2.672e-01, -1.003e-01, -1.394e-01, 3.994e-02, 2.339e-01, 2.265e-02, -2.971e-02, -3.571e-02, -5.568e-02, -5.072e-03, -3.769e-02, 4.227e-01, -2.053e-01, -9.904e-02, 1.078e-01) * s2[y+1][x+1];
	r += M4(3.094e-01, -8.354e-04, -1.090e-01, -1.020e-01, 1.776e-02, -5.950e-02, -3.096e-02, 6.958e-02, 1.515e-02, 2.832e-02, 1.549e-02, -4.527e-02, -7.320e-02, -1.936e-01, 7.641e-02, -2.803e-02) * s2[y+1][x+2];
	r += M4(2.788e-02, 2.298e-02, 2.293e-02, -1.867e-02, 4.029e-02, -3.615e-02, 4.236e-02, 2.483e-02, 6.024e-02, -1.279e-01, 1.353e-02, 4.956e-03, 6.033e-02, 7.830e-02, -1.514e-02, -1.496e-03) * s2[y+2][x+0];
	r += M4(-2.844e-02, 1.837e-02, 6.542e-02, 1.861e-01, 8.676e-02, 5.349e-02, 1.651e-03, 5.265e-02, -9.069e-02, -1.076e-01, -4.859e-01, -8.429e-02, 5.042e-03, -9.149e-02, 1.117e-01, 9.160e-02) * s2[y+2][x+1];
	r += M4(6.510e-02, -4.249e-02, -3.391e-02, 2.862e-02, -3.196e-02, -3.787e-02, -3.342e-02, 5.131e-03, 7.610e-03, -1.179e-01, 3.409e-03, -1.702e-02, 2.938e-02, -6.557e-02, -6.767e-02, 7.889e-03) * s2[y+2][x+2];
	r += M4(1.369e-02, 5.446e-02, 2.016e-02, -3.175e-02, -2.209e-02, -5.293e-02, 6.358e-02, -2.336e-02, -7.318e-03, -3.952e-02, 1.851e-02, -5.780e-03, 1.292e-02, 2.054e-02, -1.058e-01, -5.932e-03) * s3[y+0][x+0];
	r += M4(-1.300e-01, 4.391e-02, 9.389e-02, -1.284e-01, -8.492e-02, -1.740e-01, 6.091e-02, -1.498e-02, 5.391e-02, 1.662e-02, 3.055e-02, -5.570e-02, -1.367e-01, -2.913e-01, 9.113e-02, 1.002e-01) * s3[y+0][x+1];
	r += M4(1.278e-02, 2.960e-02, 2.507e-03, -7.468e-02, 7.362e-02, 7.788e-02, 1.970e-02, -8.615e-02, -1.141e-03, -2.811e-02, 2.751e-02, 1.124e-03, 4.744e-02, 1.274e-01, -9.993e-02, -1.118e-01) * s3[y+0][x+2];
	r += M4(-9.527e-02, -2.406e-01, 1.134e-01, 2.259e-01, 7.962e-03, 1.049e-01, 2.379e-01, -4.316e-02, 5.659e-02, 3.356e-02, -1.101e-01, 4.658e-02, -3.112e-02, -1.004e-01, -4.942e-02, 8.644e-02) * s3[y+1][x+0];
	r += M4(3.493e-03, -4.875e-01, -1.819e-01, -1.796e-01, -3.443e-02, 6.517e-02, 2.438e-02, -2.072e-01, -5.063e-02, 1.225e-02, -7.311e-02, -8.663e-02, 4.693e-02, 2.975e-01, 8.818e-02, -1.938e-01) * s3[y+1][x+1];
	r += M4(2.783e-02, -3.307e-02, 2.828e-02, -4.489e-02, 7.511e-02, -3.701e-02, 1.129e-02, -2.135e-02, -5.385e-03, -1.316e-02, -3.791e-02, 4.201e-03, -4.793e-02, -8.619e-02, 3.164e-02, 1.281e-02) * s3[y+1][x+2];
	r += M4(8.032e-02, 5.305e-02, -9.967e-03, -2.359e-02, -3.882e-02, -4.161e-02, 5.997e-02, -1.177e-02, 1.216e-01, -4.931e-03, -1.220e-01, -1.293e-01, 4.656e-02, 2.867e-02, -3.516e-03, -3.602e-02) * s3[y+2][x+0];
	r += M4(-8.575e-02, 3.740e-02, 3.625e-02, 8.189e-02, 1.580e-02, -5.468e-02, 4.426e-02, 1.884e-02, -1.292e-01, 9.743e-02, -8.731e-04, 3.814e-03, -5.545e-02, 8.188e-02, 8.620e-03, -1.870e-02) * s3[y+2][x+1];
	r += M4(-4.833e-02, -2.509e-03, 2.373e-03, -9.254e-03, 5.133e-02, 5.481e-02, -1.129e-02, -5.456e-02, -8.771e-03, -6.239e-02, -2.550e-02, 1.860e-03, 6.099e-03, -3.586e-02, -5.972e-02, -1.043e-02) * s3[y+2][x+2];
	r += V4(5.051e-03, 1.383e-02, -4.878e-03, -1.073e-03);
	return vec4(r);
}
vec4 f1(int x, int y) {
	V4 r = V4(0.0);
	r += M4(8.014e-02, -8.136e-03, -2.488e-02, -2.479e-02, 5.514e-02, -2.467e-02, -2.771e-02, -5.904e-02, 9.692e-02, -1.692e-02, -2.520e-02, -4.303e-02, 1.001e-01, 1.355e-02, 3.677e-03, 1.280e-01) * s0[y+0][x+0];
	r += M4(3.733e-03, -5.262e-02, 5.088e-03, -1.771e-03, -2.206e-01, 5.149e-02, 2.628e-02, 1.418e-01, -1.173e-01, 2.481e-02, -2.012e-02, -7.570e-02, 1.001e-01, -6.526e-03, 8.972e-02, 4.381e-02) * s0[y+0][x+1];
	r += M4(-4.992e-02, -2.907e-03, 4.189e-02, -5.412e-02, 7.172e-02, -4.157e-02, 3.023e-02, -1.770e-02, 9.875e-02, 2.798e-02, -5.613e-03, -6.214e-03, -9.308e-02, -2.246e-03, -4.307e-02, 2.177e-02) * s0[y+0][x+2];
	r += M4(3.990e-02, 7.815e-02, 8.235e-02, -8.426e-02, -1.640e-02, 1.466e-02, -4.651e-02, 8.136e-02, 1.123e-01, -4.157e-02, 2.765e-02, 2.466e-02, 5.334e-02, 5.630e-02, 7.130e-02, 5.891e-02) * s0[y+1][x+0];
	r += M4(1.183e-01, -4.152e-02, -1.233e-01, 6.169e-02, -1.072e-01, -9.237e-02, 2.751e-02, -5.091e-02, -4.868e-03, -1.529e-01, -1.047e-01, -2.363e-02, 5.838e-02, 3.617e-02, -2.517e-03, 1.795e-01) * s0[y+1][x+1];
	r += M4(1.211e-02, 2.084e-02, -6.071e-02, -6.036e-02, 4.319e-02, -5.553e-03, -3.330e-02, -1.272e-01, 4.456e-02, 4.190e-02, 6.320e-02, 5.398e-02, -6.357e-02, 7.825e-02, -5.424e-02, -6.086e-02) * s0[y+1][x+2];
	r += M4(-4.460e-02, -7.937e-03, -1.053e-01, 4.439e-02, -4.177e-02, -7.137e-02, -6.948e-02, 9.599e-02, -5.225e-03, 8.685e-02, 4.277e-02, -9.712e-03, 2.363e-02, -2.873e-02, -2.921e-04, 3.084e-02) * s0[y+2][x+0];
	r += M4(-2.685e-02, -1.119e-01, -1.239e-01, -1.478e-01, -5.684e-02, 3.931e-02, -1.060e-01, -1.676e-01, -5.496e-02, -1.334e-01, 4.066e-02, -1.539e-02, 3.808e-03, -9.762e-02, -5.834e-02, -7.418e-03) * s0[y+2][x+1];
	r += M4(-1.767e-02, -7.527e-02, -4.041e-03, -6.681e-03, 3.210e-02, -1.540e-03, 5.623e-02, 9.020e-02, -2.064e-02, 2.133e-02, 1.510e-02, -8.912e-02, 1.527e-02, -2.961e-02, 3.911e-03, 8.920e-03) * s0[y+2][x+2];
	r += M4(-1.920e-01, 4.464e-02, 6.800e-02, 2.372e-02, 2.901e-01, -8.335e-03, 2.045e-02, -6.616e-02, -1.343e-01, -4.502e-03, -2.197e-02, -6.198e-02, 8.480e-02, -9.484e-02, 1.466e-01, 1.929e-01) * s1[y+0][x+0];
	r += M4(3.052e-01, -7.218e-02, 1.029e-01, -2.145e-01, -1.870e-01, 1.427e-01, 1.279e-01, 1.656e-01, 9.403e-02, 2.530e-02, 6.805e-02, 5.450e-03, -1.849e-01, -1.555e-01, -1.451e-01, -8.520e-03) * s1[y+0][x+1];
	r += M4(-1.969e-01, -2.610e-02, 1.128e-01, 1.147e-02, 6.698e-02, -7.786e-02, 9.592e-03, 5.390e-02, 1.751e-01, 3.029e-04, -7.225e-02, 1.010e-01, -1.528e-01, 6.232e-02, -8.783e-02, -2.503e-02) * s1[y+0][x+2];
	r += M4(-8.765e-02, -7.585e-02, 9.364e-02, -1.532e-01, 1.371e-01, -6.931e-02, 4.776e-02, 1.548e-01, 1.266e-01, 9.300e-02, 1.764e-01, -3.328e-02, 5.770e-02, -9.988e-02, -4.505e-02, 7.372e-02) * s1[y+1][x+0];
	r += M4(8.885e-02, 4.935e-02, -2.919e-01, 5.053e-02, -2.152e-02, 1.789e-01, 2.610e-02, -3.429e-01, -2.033e-02, 7.322e-02, -4.452e-01, -4.894e-01, -2.873e-02, -5.083e-01, 6.222e-02, 1.091e-01) * s1[y+1][x+1];
	r += M4(1.078e-01, 6.190e-02, -2.358e-01, -3.891e-02, 6.996e-02, -3.334e-02, -7.277e-02, -2.773e-02, -8.047e-02, -2.284e-01, 1.520e-01, -2.061e-01, -3.384e-02, 7.650e-02, -1.972e-04, -7.034e-03) * s1[y+1][x+2];
	r += M4(-5.345e-02, 2.903e-02, -1.713e-01, -7.075e-03, -2.067e-02, -2.566e-02, 4.322e-02, 8.167e-02, 5.317e-02, -1.519e-01, 2.899e-02, -2.642e-02, 8.757e-03, 8.093e-02, 1.244e-02, -3.135e-02) * s1[y+2][x+0];
	r += M4(-1.760e-02, -1.505e-01, -1.956e-01, -1.031e-01, 6.293e-02, -1.935e-01, -2.846e-01, 4.111e-02, 1.010e-01, 2.619e-01, 4.443e-01, -2.939e-01, -2.838e-02, 7.559e-02, -7.379e-02, -1.531e-02) * s1[y+2][x+1];
	r += M4(3.995e-02, -7.254e-02, 4.500e-02, -7.584e-02, 4.036e-02, -7.901e-02, -7.193e-03, 1.179e-02, -6.046e-02, 2.878e-01, -2.817e-01, -1.580e-01, -2.843e-03, -7.741e-03, -3.830e-02, 3.971e-02) * s1[y+2][x+2];
	r += M4(-1.352e-01, -4.068e-02, 1.380e-03, -8.135e-03, -1.348e-01, -6.487e-02, -3.799e-02, 1.428e-02, -1.183e-02, 7.194e-03, 2.678e-02, -7.057e-03, 1.719e-01, -5.667e-02, -1.160e-02, -3.498e-02) * s2[y+0][x+0];
	r += M4(1.055e-02, 2.486e-02, 4.341e-02, 7.802e-03, 2.510e-01, -9.665e-02, 1.002e-02, -9.800e-02, 7.927e-02, -4.422e-02, -1.318e-02, -1.115e-03, -1.294e-01, 1.899e-01, -3.002e-02, 3.423e-02) * s2[y+0][x+1];
	r += M4(-1.898e-01, 2.139e-02, -3.514e-02, 6.897e-02, -8.966e-02, 3.518e-02, 2.905e-02, 2.843e-02, -1.074e-02, 1.734e-02, 1.083e-02, 7.711e-03, 1.831e-01, -1.997e-02, -5.322e-02, 7.856e-02) * s2[y+0][x+2];
	r += M4(-8.868e-02, 4.270e-02, -1.677e-02, -1.510e-02, -2.188e-02, -1.407e-02, -2.188e-01, 3.348e-02, 1.858e-01, 1.115e-01, 9.797e-03, -1.600e-01, 8.698e-02, -1.163e-02, 4.843e-02, 1.007e-01) * s2[y+1][x+0];
	r += M4(3.772e-03, 1.827e-01, -4.226e-03, -2.902e-01, 8.766e-02, 2.058e-01, 1.206e-01, 1.701e-01, 5.388e-05, -1.310e-01, -2.142e-01, -6.699e-02, 1.133e-01, -1.104e-01, -1.689e-01, 1.254e-01) * s2[y+1][x+1];
	r += M4(-1.373e-01, 1.771e-02, -1.151e-01, -1.211e-03, -3.136e-02, 9.210e-02, -5.083e-02, 2.323e-02, 7.474e-02, -3.334e-02, 1.185e-01, 3.778e-02, -4.467e-02, 7.626e-02, 1.792e-01, -9.778e-02) * s2[y+1][x+2];
	r += M4(1.662e-02, 5.753e-02, 5.813e-02, 1.934e-03, -2.046e-02, 2.434e-02, 3.545e-03, 9.017e-03, -1.012e-02, -8.180e-02, -2.850e-01, -5.574e-02, 5.710e-02, 9.831e-02, 1.902e-01, 4.648e-02) * s2[y+2][x+0];
	r += M4(3.359e-02, -1.102e-01, -6.452e-02, 2.127e-01, 4.224e-02, -2.355e-01, 1.102e-01, 1.230e-02, 3.015e-02, 2.635e-01, -4.311e-01, 2.468e-02, 1.141e-01, -6.381e-02, 6.067e-02, -1.344e-01) * s2[y+2][x+1];
	r += M4(1.004e-02, 1.158e-03, -1.694e-01, -9.596e-02, 1.001e-02, -4.564e-02, -1.813e-02, -1.204e-02, -7.400e-02, 1.703e-01, -2.845e-02, -9.856e-04, 6.831e-03, -4.738e-03, 3.953e-02, 2.628e-02) * s2[y+2][x+2];
	r += M4(1.624e-01, -1.064e-01, -1.528e-02, -3.202e-02, -2.364e-01, -1.059e-01, -8.747e-02, 1.669e-02, -2.925e-02, 1.535e-02, -4.468e-03, -9.377e-03, 1.624e-01, 2.488e-02, 2.072e-02, -6.449e-02) * s3[y+0][x+0];
	r += M4(-4.029e-01, 1.502e-01, 8.586e-02, -5.804e-02, 2.790e-02, -7.140e-02, 2.901e-02, -1.537e-01, -8.655e-02, -2.101e-02, -2.993e-02, -1.231e-03, -2.129e-01, -3.168e-02, 5.956e-02, -8.632e-02) * s3[y+0][x+1];
	r += M4(-3.865e-02, 9.874e-02, -1.398e-01, -4.426e-03, -8.341e-03, -1.725e-02, 8.903e-03, 7.737e-02, -1.214e-02, 9.226e-03, -2.294e-02, -5.843e-03, -3.723e-02, 1.312e-02, 7.398e-02, 7.003e-02) * s3[y+0][x+2];
	r += M4(1.017e-01, 1.077e-01, 1.074e-02, 1.063e-01, -1.659e-01, 1.423e-02, 8.001e-04, 4.472e-02, -3.346e-02, 1.470e-01, 1.333e-02, -9.252e-02, -2.248e-02, 2.498e-02, -6.059e-02, 2.410e-02) * s3[y+1][x+0];
	r += M4(-1.773e-01, 6.250e-01, -1.157e-02, -2.497e-01, -6.753e-04, 3.424e-01, 9.601e-02, 2.587e-02, 9.086e-02, -1.620e-02, -1.256e-01, -4.587e-02, -2.433e-03, 3.348e-01, 2.203e-02, 8.380e-02) * s3[y+1][x+1];
	r += M4(-5.980e-02, 5.789e-02, 5.732e-02, -5.042e-02, 5.070e-02, 1.316e-01, -2.414e-02, -1.019e-02, 8.455e-02, -4.757e-02, 1.483e-01, 5.370e-02, 1.083e-02, 6.614e-02, 1.789e-03, -6.438e-02) * s3[y+1][x+2];
	r += M4(8.886e-02, 8.852e-02, 1.927e-02, 7.148e-02, -4.109e-02, -2.793e-02, 5.266e-02, 9.137e-03, -2.780e-02, 6.746e-02, -9.232e-02, -1.199e-01, -2.647e-02, 4.380e-02, -7.986e-02, 4.748e-02) * s3[y+2][x+0];
	r += M4(9.503e-02, -8.514e-02, 4.844e-02, 4.353e-03, -2.056e-02, -1.643e-01, -4.034e-03, -8.979e-02, -1.510e-02, 3.041e-01, 3.279e-02, 1.300e-01, 2.938e-02, 3.889e-02, 4.777e-02, -8.115e-02) * s3[y+2][x+1];
	r += M4(-4.245e-02, -4.685e-03, -8.016e-02, -5.485e-02, 1.352e-02, -9.631e-02, 3.472e-02, -3.756e-02, -2.925e-02, 1.303e-01, -6.450e-02, -8.748e-02, 2.015e-02, 2.356e-02, -6.362e-02, -2.548e-02) * s3[y+2][x+2];
	r += V4(1.349e-02, 2.525e-03, 1.175e-02, 1.444e-02);
	return vec4(r);
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv6_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
			s2[ay][ax] = l1(x - 1, y - 1);
			s1[ay][ax] = -max(-s0[ay][ax], V4(0.0));
			s0[ay][ax] = max(s0[ay][ax], V4(0.0));
			s3[ay][ax] = -max(-s2[ay][ax], V4(0.0));
			s2[ay][ax] = max(s2[ay][ax], V4(0.0));
		}
	}
	barrier();
	imageStore(out_image, opos + ivec2(0, 0), f0(xy.x, xy.y));
	imageStore(out_image, opos + ivec2(1, 0), f1(xy.x, xy.y));
}


//!DESC CuNNy-8x8C-RCAS-DS-conv8
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv7
//!BIND LUMA
//!SAVE conv8
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
	#define V4 f16vec4
	#define M4 f16mat4
	#define F float16_t
#else
	#define V4 vec4
	#define M4 mat4
	#define F float
#endif
#define l0(x, y) V4(texelFetch(conv7_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv7_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 s0[10][10];
shared V4 s1[10][10];
shared V4 s2[10][10];
shared V4 s3[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += M4(1.196e-02, 1.025e-02, 2.595e-04, -6.753e-03, -9.989e-03, 3.286e-04, 2.948e-02, 2.092e-02, 3.167e-02, 7.408e-02, -1.400e-03, 9.406e-02, -3.884e-02, -3.139e-02, 2.945e-02, 2.565e-02) * s0[y+0][x+0];
	r += M4(-4.475e-02, 6.956e-02, 2.726e-02, 2.885e-02, 8.887e-03, 5.876e-02, 3.050e-02, 1.969e-02, 2.150e-02, -8.543e-02, -4.708e-02, -1.596e-01, 5.152e-03, -2.314e-02, 1.888e-03, 4.769e-02) * s0[y+0][x+1];
	r += M4(-5.760e-03, -3.191e-02, 1.345e-02, 1.874e-02, -1.998e-02, 5.685e-03, -2.678e-02, -7.455e-02, 1.365e-02, 1.466e-02, 1.425e-02, 9.013e-03, 4.262e-02, 7.960e-02, 1.407e-02, 4.166e-02) * s0[y+0][x+2];
	r += M4(-1.013e-01, -9.776e-02, -3.175e-02, -9.607e-02, 2.924e-02, 6.040e-02, 8.108e-02, 2.177e-02, -1.113e-01, -1.886e-02, 2.207e-02, -9.214e-02, -7.162e-02, 4.817e-02, 9.227e-02, 2.306e-03) * s0[y+1][x+0];
	r += M4(-7.203e-02, -3.838e-01, 1.505e-01, -1.315e-01, 5.071e-02, -1.718e-02, -5.032e-02, -1.301e-01, 2.587e-02, -4.906e-01, -2.569e-02, 1.410e-01, 2.510e-01, -1.131e-01, 1.324e-01, -3.990e-02) * s0[y+1][x+1];
	r += M4(3.159e-02, -3.211e-02, -1.040e-02, -7.213e-02, 1.843e-02, 5.949e-02, 1.247e-03, 8.569e-02, -4.480e-02, 1.249e-01, 3.820e-02, -6.469e-02, -1.851e-02, 2.061e-02, -4.323e-02, 1.569e-02) * s0[y+1][x+2];
	r += M4(-8.111e-02, 2.119e-02, -5.080e-02, 3.281e-02, -1.766e-02, 1.041e-01, 5.414e-04, -1.765e-02, 6.570e-02, -6.931e-02, -1.838e-02, 3.194e-02, 1.984e-02, 7.252e-02, 2.924e-02, 2.859e-02) * s0[y+2][x+0];
	r += M4(-5.250e-02, 3.907e-03, -6.097e-02, 1.176e-02, 1.150e-03, -7.271e-02, 1.076e-02, 8.661e-02, -7.694e-02, 6.731e-02, -1.247e-01, -2.100e-02, 6.171e-02, -1.023e-01, 2.215e-02, 4.045e-02) * s0[y+2][x+1];
	r += M4(-4.697e-02, -4.115e-02, 5.111e-05, 9.844e-05, -1.797e-02, 1.153e-02, -3.651e-02, -2.364e-02, -1.030e-02, 6.418e-03, 7.024e-02, 1.747e-02, -5.057e-02, -1.425e-02, -1.142e-01, -1.878e-02) * s0[y+2][x+2];
	r += M4(1.507e-02, -3.216e-02, 2.170e-02, -5.315e-02, -3.585e-02, 6.141e-02, 4.309e-02, 5.277e-02, -4.113e-02, 2.799e-02, -2.415e-02, 6.470e-02, -8.667e-02, 6.473e-02, -1.961e-03, 8.777e-02) * s1[y+0][x+0];
	r += M4(1.104e-02, 6.658e-02, 1.122e-03, 1.160e-01, 4.872e-02, 2.774e-01, 2.972e-02, 6.649e-02, 5.239e-02, -1.728e-02, 1.599e-02, -6.265e-02, -1.777e-02, -1.272e-01, -1.612e-02, -1.489e-01) * s1[y+0][x+1];
	r += M4(-1.697e-02, -8.751e-02, -4.133e-02, -6.274e-02, -2.900e-02, 1.208e-01, 4.803e-02, -1.096e-01, 2.176e-02, 2.137e-02, 2.860e-02, 4.928e-03, -2.622e-03, 3.165e-02, 2.155e-02, 5.855e-02) * s1[y+0][x+2];
	r += M4(-1.314e-01, 1.446e-01, 9.115e-02, 6.532e-02, 1.154e-01, 6.823e-02, 5.147e-02, -8.337e-02, -8.569e-02, -3.396e-02, 2.651e-02, -4.132e-02, -1.179e-01, 7.983e-02, 1.073e-01, -6.895e-02) * s1[y+1][x+0];
	r += M4(-1.646e-01, -1.375e-01, 3.669e-01, -1.081e-01, 6.141e-01, 5.899e-01, 2.738e-01, -2.248e-01, 8.564e-02, -1.672e-01, -4.219e-03, 1.291e-01, 1.082e-01, -6.999e-02, 4.027e-02, 3.592e-01) * s1[y+1][x+1];
	r += M4(8.289e-02, -1.151e-01, -1.165e-01, 2.766e-02, 9.417e-03, 2.841e-01, 3.081e-02, -4.225e-02, -2.541e-02, 7.739e-02, -1.579e-02, -5.584e-02, -3.145e-02, 8.130e-02, 3.714e-02, 2.234e-02) * s1[y+1][x+2];
	r += M4(-6.714e-02, -2.049e-02, 1.996e-02, -1.487e-02, 4.213e-02, 9.376e-02, -2.348e-02, -2.566e-02, 7.405e-02, -7.350e-02, -2.059e-04, 2.926e-02, 4.506e-02, 2.269e-02, 7.691e-02, 3.945e-02) * s1[y+2][x+0];
	r += M4(4.995e-02, -4.521e-02, -2.008e-02, 7.891e-02, -6.884e-02, 2.286e-02, 5.823e-02, 5.331e-02, 1.156e-02, 5.920e-02, -6.136e-02, -3.003e-02, 1.304e-02, -2.452e-02, 4.680e-02, -1.635e-01) * s1[y+2][x+1];
	r += M4(-3.406e-02, -1.053e-01, -9.728e-03, -4.051e-02, -7.646e-02, 7.023e-02, -2.405e-02, 1.042e-02, 3.313e-02, -4.392e-03, -2.470e-03, 1.471e-02, -7.435e-02, 8.604e-02, -6.723e-02, 7.898e-04) * s1[y+2][x+2];
	r += M4(6.600e-03, -2.840e-02, -6.262e-03, 1.593e-02, -2.489e-02, 6.868e-02, -4.622e-03, 1.057e-01, 2.136e-01, 5.056e-02, 1.204e-01, -6.049e-03, 2.627e-02, -2.792e-02, -4.774e-02, -3.239e-02) * s2[y+0][x+0];
	r += M4(-9.625e-03, -4.059e-02, -3.265e-02, -3.677e-03, -6.334e-03, 4.408e-02, -3.968e-02, -1.332e-01, -1.044e-01, -9.617e-02, -5.099e-02, -2.614e-01, 5.766e-03, -2.444e-02, -1.446e-02, -1.311e-03) * s2[y+0][x+1];
	r += M4(-1.270e-03, 5.363e-03, -2.695e-03, 2.707e-02, 1.935e-02, 2.122e-02, -7.342e-03, -8.611e-03, -1.466e-03, 2.040e-03, -3.702e-02, 3.363e-03, 2.624e-02, 8.129e-03, 2.170e-02, 1.898e-02) * s2[y+0][x+2];
	r += M4(-3.740e-02, 4.014e-02, 2.110e-02, 8.586e-03, 1.270e-01, 4.469e-02, 1.490e-01, 3.317e-02, -1.178e-01, 1.176e-01, -8.818e-02, -5.271e-02, 2.463e-02, -7.983e-02, -9.535e-02, -4.850e-02) * s2[y+1][x+0];
	r += M4(8.179e-02, -1.684e-02, 6.745e-02, 1.036e-01, -1.420e-01, -6.134e-02, -9.822e-01, -5.917e-01, 1.513e-02, 5.788e-02, 1.434e-01, 1.616e-01, 1.571e-01, -1.191e-01, -1.472e-01, -6.241e-02) * s2[y+1][x+1];
	r += M4(-2.473e-02, -1.098e-01, -3.579e-02, -7.099e-02, -9.516e-02, 8.692e-02, 1.164e-01, 1.654e-01, -6.244e-02, -1.039e-01, -6.535e-03, -1.041e-01, -2.316e-02, -2.807e-02, 1.333e-02, -1.851e-02) * s2[y+1][x+2];
	r += M4(5.604e-02, -3.186e-02, 7.417e-03, 1.433e-02, -1.278e-02, 9.053e-02, -6.987e-02, -5.141e-02, 3.740e-04, 7.616e-03, 2.962e-02, 2.157e-02, 2.072e-02, -2.388e-02, 1.345e-03, 7.963e-04) * s2[y+2][x+0];
	r += M4(-4.893e-02, 6.166e-02, -1.216e-01, -3.599e-02, -7.250e-02, -8.227e-02, 6.326e-02, 1.853e-01, -9.848e-03, -4.519e-02, 3.553e-02, -1.681e-02, -7.771e-02, 9.790e-02, -6.483e-02, -1.685e-02) * s2[y+2][x+1];
	r += M4(6.132e-02, -6.814e-02, -1.313e-02, 9.735e-03, -4.341e-02, 2.135e-02, -7.604e-02, 3.830e-02, -7.402e-03, 1.607e-02, -4.833e-02, -2.184e-02, 3.218e-03, -1.256e-03, 1.159e-01, -3.537e-03) * s2[y+2][x+2];
	r += M4(-4.814e-02, -2.628e-02, -1.024e-02, 1.806e-02, -9.017e-03, -2.997e-03, -9.046e-03, 3.969e-02, 7.543e-02, 5.001e-02, 6.009e-02, 2.411e-02, -2.640e-01, -1.424e-02, -5.662e-02, -1.412e-01) * s3[y+0][x+0];
	r += M4(3.329e-02, -6.520e-02, 4.518e-02, -3.194e-03, 6.373e-02, -6.526e-02, -4.278e-03, -4.871e-02, -8.848e-02, 8.863e-02, -4.448e-02, -6.220e-02, 1.826e-01, -1.488e-01, 6.549e-05, -3.124e-02) * s3[y+0][x+1];
	r += M4(1.955e-02, 2.190e-02, -2.075e-02, 2.766e-02, 1.737e-02, -2.517e-02, -9.676e-03, -2.398e-02, -1.474e-02, 1.420e-02, 5.924e-03, -2.683e-03, 5.382e-02, -2.790e-02, 1.511e-02, 9.030e-02) * s3[y+0][x+2];
	r += M4(-1.982e-01, 5.590e-02, 2.098e-02, -2.654e-03, 1.613e-02, 2.447e-02, 3.431e-02, 5.658e-03, -4.763e-02, 1.148e-02, -6.511e-02, -2.157e-02, 4.619e-02, -5.502e-03, -2.744e-01, -1.848e-01) * s3[y+1][x+0];
	r += M4(3.918e-01, -2.970e-01, 3.093e-01, 9.009e-02, -3.863e-02, 1.899e-02, -9.891e-02, -1.207e-02, -1.201e-02, 1.254e-01, 1.733e-01, 1.994e-01, 1.711e-01, -8.311e-02, 3.527e-01, -4.872e-01) * s3[y+1][x+1];
	r += M4(7.203e-02, -1.775e-01, -6.902e-02, -9.969e-02, -5.078e-02, -1.701e-02, 4.929e-02, 1.671e-02, -1.118e-02, -6.777e-02, 1.143e-02, 2.125e-03, 7.242e-02, -8.249e-02, 6.265e-02, -4.177e-02) * s3[y+1][x+2];
	r += M4(-5.095e-02, -3.795e-02, 3.362e-03, 1.606e-02, 4.927e-02, 1.263e-02, 1.450e-02, -1.069e-02, -3.626e-02, -2.452e-02, 5.212e-02, 1.511e-02, -3.516e-03, 2.239e-01, -2.731e-02, -1.171e-01) * s3[y+2][x+0];
	r += M4(4.274e-01, -1.966e-01, -3.284e-01, 1.763e-01, -6.244e-02, -2.282e-02, -2.857e-02, 2.972e-02, -4.560e-02, -2.678e-02, 4.179e-02, -4.609e-02, -1.387e-01, 8.395e-02, 1.356e-01, 4.398e-02) * s3[y+2][x+1];
	r += M4(1.030e-01, -1.386e-01, 4.340e-02, 4.308e-02, 1.443e-02, -5.060e-03, -7.673e-03, -2.509e-03, 2.360e-02, 4.471e-03, 1.674e-02, -9.853e-03, 1.714e-01, -2.663e-02, -5.407e-03, -1.557e-01) * s3[y+2][x+2];
	r += V4(1.346e-03, -9.087e-03, -1.075e-02, -6.993e-03);
	return vec4(r);
}
vec4 f1(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-5.604e-03, -2.074e-02, 5.958e-02, 4.406e-02, 1.158e-03, 1.467e-03, 2.595e-02, 1.921e-02, 3.462e-02, 4.975e-02, -6.604e-04, -6.544e-02, 3.690e-02, -1.902e-02, 4.562e-02, 1.389e-02) * s0[y+0][x+0];
	r += M4(8.679e-04, 1.673e-02, 1.112e-03, -2.046e-02, 1.853e-02, 2.766e-02, -4.486e-02, 1.624e-03, 9.351e-02, -1.192e-01, -2.235e-02, 4.935e-02, 1.140e-01, 3.114e-03, 4.626e-02, -2.013e-02) * s0[y+0][x+1];
	r += M4(1.818e-02, -3.796e-02, 3.802e-02, -2.889e-02, -5.410e-02, -4.531e-02, -6.717e-03, -3.875e-02, 4.679e-03, -1.167e-03, -4.240e-02, -3.443e-02, 2.747e-02, 1.714e-02, -3.530e-02, -6.165e-02) * s0[y+0][x+2];
	r += M4(6.203e-04, -1.476e-01, 2.685e-02, -1.808e-02, -2.647e-02, 5.652e-02, -3.284e-02, 1.278e-01, -4.280e-03, 4.455e-02, 4.459e-01, -8.796e-02, -3.209e-02, 8.299e-03, -4.470e-02, 5.592e-02) * s0[y+1][x+0];
	r += M4(-1.198e-01, -1.097e-01, 1.879e-01, 8.082e-02, -1.909e-01, -6.488e-02, 9.527e-02, -1.175e-01, -2.650e-01, 1.122e-01, 5.657e-01, 1.575e-01, -1.474e-01, -3.294e-02, 8.486e-02, -1.315e-01) * s0[y+1][x+1];
	r += M4(-1.521e-02, -2.529e-02, -1.206e-01, -6.395e-02, 5.323e-02, -3.491e-02, 1.167e-02, -1.534e-02, 1.393e-01, 4.114e-02, -7.775e-02, 1.651e-02, -7.678e-02, -4.310e-02, 6.485e-02, -6.550e-02) * s0[y+1][x+2];
	r += M4(4.746e-03, -6.245e-02, -6.923e-02, 3.008e-02, -1.480e-03, 5.846e-02, 7.673e-02, 8.784e-02, 1.194e-02, 4.677e-03, -2.239e-01, -6.492e-02, -2.957e-02, 3.951e-02, -1.412e-02, 6.813e-02) * s0[y+2][x+0];
	r += M4(1.392e-01, -3.617e-02, -7.038e-02, 1.487e-02, 3.735e-02, -2.166e-02, -4.097e-02, -7.734e-02, -3.212e-02, -7.557e-02, 6.668e-02, 3.314e-02, 1.625e-01, -1.652e-02, -2.760e-02, -1.530e-01) * s0[y+2][x+1];
	r += M4(2.400e-02, 1.790e-03, 2.189e-02, 2.373e-02, 4.326e-02, 9.978e-03, 2.911e-02, 4.854e-02, -3.006e-02, -1.435e-02, 4.530e-02, -1.020e-02, 7.767e-02, -1.192e-02, 3.111e-02, 1.087e-04) * s0[y+2][x+2];
	r += M4(5.442e-02, -5.770e-02, 8.803e-02, 6.416e-02, 5.692e-02, 6.957e-02, -3.007e-02, 3.968e-02, 3.206e-02, 5.188e-02, 4.455e-02, -5.074e-02, -3.570e-02, 2.343e-02, -4.462e-03, -5.762e-02) * s1[y+0][x+0];
	r += M4(6.490e-02, -1.391e-02, -5.044e-02, -1.451e-01, 1.347e-02, 2.171e-01, -1.561e-01, 7.844e-03, 7.885e-02, -3.126e-02, -2.740e-02, 4.359e-02, 5.636e-02, -3.829e-02, 1.190e-02, 4.701e-02) * s1[y+0][x+1];
	r += M4(-2.159e-02, -8.299e-02, 4.685e-03, -3.265e-02, -3.389e-02, 3.492e-02, -1.772e-01, -2.208e-02, -8.594e-03, 1.728e-02, -4.546e-02, 9.085e-04, -3.997e-02, 2.528e-02, 3.088e-02, -3.273e-02) * s1[y+0][x+2];
	r += M4(-9.836e-02, 2.017e-03, -2.170e-02, 1.067e-01, 6.626e-02, 9.836e-02, -3.135e-02, 8.144e-02, -3.189e-02, -1.430e-02, 2.055e-01, -1.112e-01, -2.332e-02, 6.276e-02, 7.657e-02, -2.843e-03) * s1[y+1][x+0];
	r += M4(-1.580e-01, -2.167e-01, 1.914e-01, -2.636e-01, -3.508e-01, 1.074e-02, 1.317e-01, -1.102e-01, -1.295e-01, 1.519e-01, 2.284e-01, 8.285e-02, -1.053e-01, 1.629e-01, -4.683e-02, 4.189e-02) * s1[y+1][x+1];
	r += M4(5.992e-02, -7.466e-02, -3.804e-02, -9.443e-02, 1.353e-01, 3.833e-02, -2.309e-01, 4.824e-02, 1.255e-01, 2.729e-02, -4.658e-02, 3.356e-02, -1.009e-01, 1.113e-02, -5.757e-02, -5.042e-02) * s1[y+1][x+2];
	r += M4(6.036e-02, 2.101e-02, 2.172e-02, 2.877e-03, -2.703e-02, 4.062e-02, 8.108e-02, 6.322e-02, 4.620e-03, -1.477e-02, -1.451e-01, -6.600e-02, 4.747e-02, 1.001e-01, -1.255e-01, 1.130e-01) * s1[y+2][x+0];
	r += M4(3.091e-02, -1.205e-01, -2.365e-01, -6.857e-02, -2.849e-02, 5.746e-02, 3.485e-01, -2.203e-02, 3.180e-02, -3.047e-02, 1.960e-02, 1.169e-03, 2.732e-01, 1.145e-01, 3.140e-01, -8.455e-02) * s1[y+2][x+1];
	r += M4(5.512e-04, 2.823e-03, -9.757e-02, -6.050e-03, 2.559e-02, -2.143e-02, 1.548e-01, 4.517e-02, -4.300e-03, -2.184e-02, 3.439e-02, -2.241e-02, 3.365e-02, -2.802e-02, 2.632e-02, 2.992e-02) * s1[y+2][x+2];
	r += M4(2.093e-02, 6.302e-03, -8.577e-03, -2.316e-02, 5.919e-03, 8.330e-02, -2.559e-02, -4.561e-02, 9.367e-03, -4.446e-02, 2.646e-02, 1.378e-01, 2.346e-02, 7.198e-04, -4.702e-02, -1.721e-02) * s2[y+0][x+0];
	r += M4(1.878e-02, -2.017e-02, 1.803e-02, 4.209e-03, 1.331e-01, -4.258e-02, -1.284e-01, 9.257e-02, -1.381e-01, -2.268e-01, -1.242e-01, -1.013e-01, 3.903e-02, 6.366e-03, -1.756e-02, 3.226e-04) * s2[y+0][x+1];
	r += M4(-1.393e-02, 2.388e-02, -8.801e-04, -1.340e-02, 1.953e-02, 4.054e-02, -3.821e-04, -1.060e-01, -4.706e-02, -4.964e-02, 1.418e-03, -6.514e-02, 4.175e-02, 7.123e-02, -2.980e-02, 6.174e-02) * s2[y+0][x+2];
	r += M4(9.624e-03, 2.048e-02, 4.039e-02, -2.768e-02, -2.151e-01, 9.124e-02, -9.077e-02, -4.905e-02, 5.840e-02, -4.901e-02, 2.609e-01, 1.027e-01, 1.342e-01, -7.941e-02, 8.865e-02, -1.452e-01) * s2[y+1][x+0];
	r += M4(-8.852e-02, 4.527e-02, 4.661e-02, -2.521e-02, -5.878e-01, 4.201e-03, 4.139e-01, 7.534e-02, -1.411e-01, -1.726e-02, -1.428e-01, -1.086e-02, 1.894e-01, -6.628e-02, 1.378e-01, 7.992e-02) * s2[y+1][x+1];
	r += M4(-2.472e-02, -1.460e-01, 4.326e-02, -6.325e-02, -1.801e-01, 7.573e-02, 9.324e-02, -7.525e-02, 4.150e-03, -4.487e-02, 7.455e-02, -1.822e-02, 5.880e-02, -8.351e-03, 1.639e-02, 6.903e-02) * s2[y+1][x+2];
	r += M4(-2.435e-02, 3.098e-02, -4.796e-02, -1.959e-02, -7.800e-02, 8.794e-03, 2.300e-01, 4.520e-02, 4.195e-02, -4.331e-02, -1.602e-01, -2.390e-02, -1.032e-02, -4.681e-02, -2.165e-02, -7.229e-02) * s2[y+2][x+0];
	r += M4(5.653e-02, -1.072e-01, -7.445e-02, -3.550e-02, -2.019e-01, 4.358e-02, 4.664e-02, -3.510e-03, -1.907e-02, 2.510e-02, 3.178e-02, -2.231e-03, -9.778e-02, -8.126e-02, -9.671e-02, 8.830e-02) * s2[y+2][x+1];
	r += M4(-7.374e-03, -3.085e-02, -4.457e-02, -1.009e-01, -7.401e-02, -4.957e-02, 5.166e-02, 3.206e-02, 2.469e-03, 1.455e-02, -6.477e-02, 2.675e-02, -5.741e-02, 3.201e-02, -1.752e-02, -4.994e-04) * s2[y+2][x+2];
	r += M4(2.356e-02, -8.673e-03, 1.343e-01, -3.357e-02, -8.430e-03, 5.971e-03, 2.983e-03, -5.343e-02, -5.799e-02, 5.585e-02, -7.739e-02, 7.534e-02, -1.403e-01, 8.677e-02, 3.682e-02, -1.182e-01) * s3[y+0][x+0];
	r += M4(6.293e-02, 3.328e-02, 4.238e-03, -3.239e-02, 7.515e-02, -5.589e-02, 2.071e-02, 8.486e-02, -4.359e-02, -2.263e-02, -3.004e-02, -9.051e-03, 1.417e-01, 3.264e-02, 1.792e-01, 1.109e-01) * s3[y+0][x+1];
	r += M4(3.821e-03, 3.151e-02, -1.946e-02, -5.052e-02, -2.849e-02, -6.323e-02, -1.682e-02, -7.339e-02, -1.337e-02, 4.235e-02, -1.214e-02, -2.009e-02, 3.945e-02, 1.134e-02, 1.741e-02, 2.957e-02) * s3[y+0][x+2];
	r += M4(-2.093e-03, -1.236e-02, 2.709e-01, -5.732e-02, 2.576e-02, 2.844e-02, -1.765e-03, -4.700e-02, 1.835e-02, 5.305e-02, 1.125e-01, 7.528e-02, 1.906e-01, -2.838e-03, 3.828e-01, 1.309e-01) * s3[y+1][x+0];
	r += M4(-6.470e-02, 1.433e-01, 1.725e-01, 6.444e-02, -1.353e-01, 2.281e-02, 7.833e-02, 1.045e-01, -6.405e-02, 1.394e-01, 3.115e-01, 3.552e-02, 7.442e-02, 7.019e-01, -1.247e+00, -5.205e-03) * s3[y+1][x+1];
	r += M4(-1.802e-02, -2.093e-01, 4.453e-02, -4.357e-02, 3.673e-02, -4.172e-02, 1.847e-02, -2.568e-02, -8.110e-02, -8.185e-02, -2.634e-02, -1.893e-02, -4.484e-02, -8.398e-02, -1.757e-01, 2.300e-02) * s3[y+1][x+2];
	r += M4(-1.334e-02, 4.001e-02, -2.382e-01, -4.359e-02, -1.321e-02, 3.290e-02, 1.249e-02, 3.955e-03, 1.931e-02, 1.784e-02, -3.974e-02, 1.868e-02, -6.752e-02, -7.732e-02, 5.022e-01, 1.014e-02) * s3[y+2][x+0];
	r += M4(-4.798e-06, -2.176e-02, -8.475e-01, -7.055e-02, 2.568e-02, -4.749e-02, 6.350e-03, -3.504e-02, 6.233e-03, 3.553e-02, 9.165e-02, 4.269e-02, -1.445e-01, -2.200e-01, 1.971e-01, -8.986e-02) * s3[y+2][x+1];
	r += M4(-6.315e-02, 2.732e-02, -9.451e-02, -5.049e-02, 5.396e-02, 1.405e-02, 4.469e-03, 4.668e-03, 3.461e-03, 1.266e-02, -1.162e-01, 2.872e-03, 7.608e-02, 9.170e-02, -1.852e-01, 4.059e-02) * s3[y+2][x+2];
	r += V4(1.028e-02, -1.212e-03, 3.743e-04, -6.896e-03);
	return vec4(r);
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv7_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
			s2[ay][ax] = l1(x - 1, y - 1);
			s1[ay][ax] = -max(-s0[ay][ax], V4(0.0));
			s0[ay][ax] = max(s0[ay][ax], V4(0.0));
			s3[ay][ax] = -max(-s2[ay][ax], V4(0.0));
			s2[ay][ax] = max(s2[ay][ax], V4(0.0));
		}
	}
	barrier();
	imageStore(out_image, opos + ivec2(0, 0), f0(xy.x, xy.y));
	imageStore(out_image, opos + ivec2(1, 0), f1(xy.x, xy.y));
}


//!DESC CuNNy-8x8C-RCAS-DS-out
//!HOOK LUMA
//!COMPUTE 8 8 8 8
//!BIND conv8
//!BIND LUMA
//!SAVE out
//!WIDTH LUMA.w
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
	#define V4 f16vec4
	#define M4 f16mat4
	#define F float16_t
#else
	#define V4 vec4
	#define M4 mat4
	#define F float
#endif
#define l0(x, y) V4(texelFetch(conv8_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv8_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 s0[10][10];
shared V4 s1[10][10];
shared V4 s2[10][10];
shared V4 s3[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-4.450e-02, -3.563e-02, -4.518e-02, -1.235e-02, 9.199e-02, 4.809e-02, 4.180e-02, 3.951e-02, -2.632e-01, 1.238e-01, -7.639e-03, -9.253e-02, -1.803e-02, 3.463e-02, 4.979e-02, 7.809e-03) * s0[y+0][x+0];
	r += M4(-5.944e-02, -3.019e-02, -9.485e-02, -8.935e-02, 1.855e-01, 1.139e-02, 6.483e-02, 6.025e-02, 4.433e-02, -3.037e-01, 6.017e-03, 7.684e-02, -2.078e-01, -3.173e-01, 1.793e-01, 1.432e-01) * s0[y+0][x+1];
	r += M4(1.564e-02, 5.424e-02, -2.277e-02, -5.565e-02, -2.525e-03, 1.145e-01, -2.438e-02, -5.858e-02, -5.634e-02, 4.892e-02, -3.871e-02, 3.658e-02, -5.187e-02, 6.234e-02, -6.246e-02, -2.441e-02) * s0[y+0][x+2];
	r += M4(9.514e-03, -1.654e-03, 4.166e-02, -1.282e-02, 2.660e-01, -1.769e-02, 1.791e-01, -3.266e-02, -1.971e-01, 4.686e-02, -6.369e-01, 3.575e-01, 1.901e-01, -6.707e-02, 2.256e-01, -4.260e-02) * s0[y+1][x+0];
	r += M4(-8.545e-02, -4.045e-02, 1.581e-01, 1.617e-01, -2.172e-01, -5.849e-01, 1.951e-01, -2.861e-01, 6.567e-02, 2.667e-01, 1.471e-01, -8.318e-02, 2.881e-01, 6.015e-01, -6.892e-01, -1.316e-02) * s0[y+1][x+1];
	r += M4(2.375e-02, 5.157e-02, 2.968e-02, 1.522e-01, -2.647e-02, -4.326e-02, 1.529e-02, 2.242e-01, 8.366e-02, 2.573e-02, 4.870e-02, 1.721e-02, 2.742e-02, 1.973e-02, 5.692e-02, -2.335e-01) * s0[y+1][x+2];
	r += M4(-2.766e-03, 4.472e-03, -7.109e-03, 2.140e-03, -1.181e-03, -1.159e-02, 1.233e-01, -2.968e-02, -3.337e-02, -4.208e-02, 6.746e-02, -9.543e-02, -5.675e-02, -5.414e-02, 1.078e-01, 1.691e-02) * s0[y+2][x+0];
	r += M4(6.811e-02, 2.078e-02, 2.952e-02, 2.368e-02, 1.415e-02, -2.015e-02, -8.319e-02, -2.886e-01, 3.092e-03, 1.843e-02, -6.015e-02, 1.112e-01, -7.834e-02, -8.863e-02, 9.313e-02, 9.580e-02) * s0[y+2][x+1];
	r += M4(-5.086e-02, -1.313e-02, -1.497e-02, 1.983e-02, -1.517e-02, 4.960e-03, 9.747e-04, -3.100e-02, -3.128e-02, -3.584e-02, 6.231e-03, 2.963e-04, -4.211e-02, -5.462e-02, -1.285e-02, 1.546e-03) * s0[y+2][x+2];
	r += M4(-7.300e-02, -4.669e-02, -3.332e-02, -7.106e-03, 8.032e-02, 3.522e-02, 2.772e-02, 2.831e-02, -1.465e-01, -1.358e-03, -4.461e-02, -4.527e-02, 9.171e-02, 1.691e-02, 3.796e-02, 1.255e-02) * s1[y+0][x+0];
	r += M4(5.768e-03, -9.778e-03, -9.759e-02, -1.235e-01, 1.808e-01, 2.107e-02, 4.311e-02, 4.361e-02, -5.210e-02, -1.636e-01, 6.138e-02, 4.827e-02, -1.347e-01, -1.820e-02, -4.797e-02, -2.121e-02) * s1[y+0][x+1];
	r += M4(1.102e-02, 9.985e-02, -2.177e-02, -3.186e-02, -9.196e-03, 1.159e-01, -3.199e-02, -3.870e-02, -8.681e-03, -1.794e-03, 3.605e-03, 3.156e-02, -3.795e-03, -8.716e-02, -3.386e-03, 2.155e-03) * s1[y+0][x+2];
	r += M4(1.607e-01, -4.083e-02, 9.562e-02, -8.415e-02, 3.563e-02, 6.109e-02, 9.288e-02, 5.644e-02, -1.233e-01, 4.147e-02, -2.075e-01, 8.569e-02, 2.833e-01, -6.365e-02, 1.114e-01, -1.845e-02) * s1[y+1][x+0];
	r += M4(-4.149e-01, 1.369e-01, 1.295e-01, 4.008e-01, -3.593e-01, -3.728e-01, 1.165e-01, -1.517e-01, 3.779e-01, -1.175e-02, 2.086e-01, -2.234e-01, 3.561e-03, 4.428e-01, -2.725e-01, -5.351e-02) * s1[y+1][x+1];
	r += M4(1.067e-01, -3.623e-02, 7.442e-02, 1.480e-01, -1.827e-03, -1.079e-01, 3.841e-02, 1.918e-01, 6.143e-03, 1.135e-01, 9.881e-03, 1.084e-01, -2.309e-02, -3.064e-02, 1.130e-02, -9.334e-02) * s1[y+1][x+2];
	r += M4(-1.646e-03, -1.491e-02, 6.576e-02, 1.004e-02, 8.840e-04, -2.842e-02, 9.603e-05, -1.255e-02, -1.582e-02, -1.146e-02, -6.300e-03, -4.041e-03, -9.914e-02, -5.872e-02, 1.908e-01, -1.054e-02) * s1[y+2][x+0];
	r += M4(7.204e-02, 4.993e-02, -8.180e-02, 5.487e-02, -8.071e-03, 2.247e-02, -1.718e-01, -1.107e-01, -2.142e-02, 1.123e-03, 9.351e-02, 7.538e-02, -2.916e-02, -7.861e-02, -1.194e-02, 2.030e-01) * s1[y+2][x+1];
	r += M4(-5.018e-02, -1.379e-02, 2.152e-02, 2.079e-02, 6.226e-03, 3.233e-03, 8.510e-03, -5.346e-02, -2.541e-02, -3.159e-02, -1.501e-02, -1.733e-02, -2.464e-02, -1.553e-02, -6.216e-03, -2.934e-02) * s1[y+2][x+2];
	r += M4(-1.674e-02, 1.977e-02, -1.079e-03, -2.165e-02, -2.401e-01, 6.804e-03, -1.575e-01, 2.635e-02, -3.884e-02, -3.301e-03, -2.079e-02, -6.073e-03, 1.814e-01, -4.236e-02, 5.509e-02, -3.011e-03) * s2[y+0][x+0];
	r += M4(-2.537e-03, -1.673e-02, 7.886e-02, 8.488e-02, -1.189e+00, 5.059e-01, -9.239e-01, 3.728e-01, 1.534e-01, -4.605e-04, 3.528e-02, 2.364e-02, -1.413e-01, 1.355e-01, 3.514e-03, 5.897e-02) * s2[y+0][x+1];
	r += M4(2.867e-02, -2.576e-02, -1.566e-03, 1.410e-02, 5.091e-01, -1.140e-01, 1.268e-01, -3.815e-01, 3.855e-03, 7.744e-02, -3.423e-03, -2.127e-03, 1.969e-02, -5.921e-04, -2.848e-02, -7.437e-02) * s2[y+0][x+2];
	r += M4(7.590e-02, 5.164e-03, 6.370e-02, 6.666e-02, 3.037e-01, -2.158e-01, 3.240e-01, -2.290e-01, 5.629e-02, -2.130e-02, -1.974e-02, -1.135e-02, -1.288e-01, -1.476e-01, 1.080e-01, -1.033e-01) * s2[y+1][x+0];
	r += M4(-8.453e-02, 2.346e-03, -2.573e-01, -2.164e-01, -5.215e-01, 4.193e-01, -8.171e-01, 9.494e-01, 1.308e-01, 1.754e-01, 3.408e-01, 7.934e-02, -5.581e-01, 5.528e-01, -5.106e-01, 2.173e-01) * s2[y+1][x+1];
	r += M4(5.056e-02, -1.746e-02, 4.985e-02, -4.330e-02, 6.514e-02, 1.801e-02, 2.348e-01, -1.475e-01, 3.085e-02, 3.695e-02, 1.199e-02, 1.403e-01, 2.115e-02, -2.058e-02, 2.478e-02, 5.844e-02) * s2[y+1][x+2];
	r += M4(-2.904e-02, -4.349e-02, 1.189e-02, -2.879e-02, 1.758e-02, -6.914e-03, -1.060e-01, -4.199e-02, -2.118e-02, -1.497e-02, 3.957e-02, -2.297e-03, 6.006e-02, 2.326e-02, -3.997e-02, -3.583e-02) * s2[y+2][x+0];
	r += M4(7.290e-02, 5.602e-02, 4.393e-02, 8.350e-02, -2.638e-01, 1.562e-01, -4.044e-01, -1.053e-01, 2.693e-02, -6.178e-03, 2.790e-02, 6.372e-02, -3.137e-02, 1.530e-01, -1.821e-01, 5.856e-01) * s2[y+2][x+1];
	r += M4(-3.068e-02, -3.206e-03, -1.073e-02, -3.055e-02, 4.999e-02, -3.132e-02, 5.192e-03, 1.820e-02, -1.638e-02, 7.175e-04, -3.183e-03, 1.970e-02, -2.460e-02, -3.741e-02, 7.392e-02, -4.619e-02) * s2[y+2][x+2];
	r += M4(5.112e-02, 6.823e-03, -2.966e-03, 9.900e-04, -1.331e-01, -6.489e-02, -7.902e-02, -5.041e-02, -4.914e-02, -1.087e-02, -1.754e-02, -1.331e-02, 1.240e-01, 1.719e-02, 5.098e-02, 1.891e-02) * s3[y+0][x+0];
	r += M4(6.681e-02, 7.898e-02, 8.052e-02, 6.189e-02, -1.935e-03, 5.066e-02, 5.869e-03, -3.762e-02, 2.141e-01, -8.899e-03, 2.384e-02, 2.935e-02, -3.184e-02, 7.349e-02, -5.865e-02, 1.333e-02) * s3[y+0][x+1];
	r += M4(1.515e-02, 1.190e-03, 1.516e-02, 1.788e-02, 1.369e-02, -3.028e-02, 3.905e-03, 8.345e-03, -1.075e-02, 1.326e-01, -1.040e-02, -3.384e-02, -6.391e-03, -2.678e-02, 3.713e-03, -3.543e-02) * s3[y+0][x+2];
	r += M4(1.772e-01, 3.024e-02, -2.274e-02, 7.303e-02, 1.128e-01, 4.326e-02, 8.144e-02, 1.364e-02, 5.170e-02, -1.911e-02, -9.104e-03, -6.221e-03, -1.028e-01, -1.357e-01, 2.965e-02, -7.349e-02) * s3[y+1][x+0];
	r += M4(1.460e-01, 3.094e-01, -6.201e-01, -5.570e-01, 5.510e-03, 1.776e-01, 4.434e-02, 3.702e-01, 4.463e-02, 1.197e-01, 2.912e-01, 7.328e-02, -3.006e-02, -3.472e-02, -2.475e-02, -4.997e-02) * s3[y+1][x+1];
	r += M4(7.847e-02, 7.258e-02, 3.252e-02, -1.284e-01, 9.735e-02, -2.578e-02, 5.559e-02, -6.491e-02, 2.344e-02, -6.340e-03, 8.209e-03, 1.837e-01, -7.922e-02, 8.341e-02, -6.683e-02, 5.979e-02) * s3[y+1][x+2];
	r += M4(-5.366e-02, -3.082e-02, 4.823e-02, -2.685e-02, -2.243e-02, -1.517e-02, -3.763e-02, -3.611e-02, -1.908e-02, -1.130e-02, 3.915e-02, -1.191e-04, 1.502e-02, 1.885e-02, -6.134e-03, -1.374e-02) * s3[y+2][x+0];
	r += M4(1.159e-02, -1.730e-02, 1.245e-01, 1.718e-01, -6.801e-02, -4.148e-02, -1.964e-01, -1.323e-01, 2.711e-02, -8.185e-03, 1.545e-02, 4.371e-02, 6.609e-02, 6.762e-02, 1.286e-01, 1.720e-01) * s3[y+2][x+1];
	r += M4(-3.967e-02, -3.679e-02, -1.473e-02, -3.649e-03, 5.940e-02, 3.878e-02, 2.095e-02, -8.099e-02, -1.836e-02, 1.063e-03, -2.024e-03, 1.036e-02, -4.469e-02, -4.000e-02, -1.930e-02, 1.877e-02) * s3[y+2][x+2];
	r += V4(8.590e-04, 7.415e-04, 3.497e-03, 2.696e-03);
	return tanh(vec4(r));
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(1, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv8_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
			s2[ay][ax] = l1(x - 1, y - 1);
			s1[ay][ax] = -max(-s0[ay][ax], V4(0.0));
			s0[ay][ax] = max(s0[ay][ax], V4(0.0));
			s3[ay][ax] = -max(-s2[ay][ax], V4(0.0));
			s2[ay][ax] = max(s2[ay][ax], V4(0.0));
		}
	}
	barrier();
	imageStore(out_image, opos + ivec2(0, 0), f0(xy.x, xy.y));
}


//!DESC CuNNy-8x8C-RCAS-DS-shuffle
//!HOOK LUMA
//!BIND out
//!BIND rcas
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 1
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
	#define V4 f16vec4
	#define M4 f16mat4
	#define F float16_t
#else
	#define V4 vec4
	#define M4 mat4
	#define F float
#endif
vec4 hook() {
	vec4 r = vec4(0.0);
	vec2 f = fract(out_pos * out_size);
	ivec2 i = ivec2(f * vec2(2.0));
	r.r = out_tex((vec2(0.5) - f) * out_pt + out_pos)[2*i.y + i.x];
	r.r += rcas_tex(rcas_pos).r;
	r.a = 1.0;
	return clamp(r, 0.0, 1.0);
}
