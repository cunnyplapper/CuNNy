// CuNNy 6x8C RCAS
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

// FSR mpv | modified
// Copyright (c) 2021 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// FidelityFX FSR v1.0.2 by AMD
// ported to mpv by agyild

//!DESC CuNNy-6x8C-RCAS-EASU
//!HOOK LUMA
//!BIND LUMA
//!SAVE easu
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
//!COMPONENTS 1

float APrxLoRcpF1(float a) {
	return uintBitsToFloat(uint(0x7ef07ebb) - floatBitsToUint(a));
}

float APrxLoRsqF1(float a) {
	return uintBitsToFloat(uint(0x5f347d74) - (floatBitsToUint(a) >> uint(1)));
}

float AMin3F1(float x, float y, float z) {
	return min(x, min(y, z));
}

float AMax3F1(float x, float y, float z) {
	return max(x, max(y, z));
}

void tap(inout float aC, inout float aW, vec2 off, vec2 dir, vec2 len,
         float lob, float clp, float c){
	vec2 v;
	v.x = (off.x * ( dir.x)) + (off.y * dir.y);
	v.y = (off.x * (-dir.y)) + (off.y * dir.x);
	v *= len;
	float d2 = v.x * v.x + v.y * v.y;
	d2 = min(d2, clp);
	float wB = float(2.0 / 5.0) * d2 + -1.0;
	float wA = lob * d2 + -1.0;
	wB *= wB;
	wA *= wA;
	wB = float(25.0 / 16.0) * wB + float(-(25.0 / 16.0 - 1.0));
	float w = wB * wA;
	aC += c * w;
	aW += w;
}

void set(inout vec2 dir, inout float len, vec2 pp, bool biS, bool biT,
         bool biU, bool biV, float lA, float lB, float lC, float lD, float lE){
	float w = 0.0;
	if (biS)
		w = (1.0 - pp.x) * (1.0 - pp.y);
	if (biT)
		w =        pp.x  * (1.0 - pp.y);
	if (biU)
		w = (1.0 - pp.x) *        pp.y;
	if (biV)
		w =        pp.x  *        pp.y;
	float dc = lD - lC;
	float cb = lC - lB;
	float lenX = max(abs(dc), abs(cb));
	lenX = APrxLoRcpF1(lenX);
	float dirX = lD - lB;
	lenX = clamp(abs(dirX) * lenX, 0.0, 1.0);
	lenX *= lenX;
	float ec = lE - lC;
	float ca = lC - lA;
	float lenY = max(abs(ec), abs(ca));
	lenY = APrxLoRcpF1(lenY);
	float dirY = lE - lA;
	lenY = clamp(abs(dirY) * lenY, 0.0, 1.0);
	lenY *= lenY;
	dir += vec2(dirX, dirY) * w;
	len += dot(vec2(w), vec2(lenX, lenY));
}

vec4 hook() {
	vec4 pix = vec4(0.0, 0.0, 0.0, 1.0);
	vec2 pp = LUMA_pos * LUMA_size - vec2(0.5);
	vec2 fp = floor(pp);
	pp -= fp;
#if (defined(LUMA_gather) && (__VERSION__ >= 400 || (GL_ES && __VERSION__ >= 310)))
	vec4 bczzL = LUMA_gather(vec2((fp + vec2(1.0, -1.0)) * LUMA_pt), 0);
	vec4 ijfeL = LUMA_gather(vec2((fp + vec2(0.0,  1.0)) * LUMA_pt), 0);
	vec4 klhgL = LUMA_gather(vec2((fp + vec2(2.0,  1.0)) * LUMA_pt), 0);
	vec4 zzonL = LUMA_gather(vec2((fp + vec2(1.0,  3.0)) * LUMA_pt), 0);
#else
	float b = LUMA_tex(vec2((fp + vec2(0.5, -0.5)) * LUMA_pt)).r;
	float c = LUMA_tex(vec2((fp + vec2(1.5, -0.5)) * LUMA_pt)).r;
	float e = LUMA_tex(vec2((fp + vec2(-0.5, 0.5)) * LUMA_pt)).r;
	float f = LUMA_tex(vec2((fp + vec2( 0.5, 0.5)) * LUMA_pt)).r;
	float g = LUMA_tex(vec2((fp + vec2( 1.5, 0.5)) * LUMA_pt)).r;
	float h = LUMA_tex(vec2((fp + vec2( 2.5, 0.5)) * LUMA_pt)).r;
	float i = LUMA_tex(vec2((fp + vec2(-0.5, 1.5)) * LUMA_pt)).r;
	float j = LUMA_tex(vec2((fp + vec2( 0.5, 1.5)) * LUMA_pt)).r;
	float k = LUMA_tex(vec2((fp + vec2( 1.5, 1.5)) * LUMA_pt)).r;
	float l = LUMA_tex(vec2((fp + vec2( 2.5, 1.5)) * LUMA_pt)).r;
	float n = LUMA_tex(vec2((fp + vec2(0.5, 2.5) ) * LUMA_pt)).r;
	float o = LUMA_tex(vec2((fp + vec2(1.5, 2.5) ) * LUMA_pt)).r;
	vec4 bczzL = vec4(b, c, 0.0, 0.0);
	vec4 ijfeL = vec4(i, j, f, e);
	vec4 klhgL = vec4(k, l, h, g);
	vec4 zzonL = vec4(0.0, 0.0, o, n);
#endif
	float bL = bczzL.x;
	float cL = bczzL.y;
	float iL = ijfeL.x;
	float jL = ijfeL.y;
	float fL = ijfeL.z;
	float eL = ijfeL.w;
	float kL = klhgL.x;
	float lL = klhgL.y;
	float hL = klhgL.z;
	float gL = klhgL.w;
	float oL = zzonL.z;
	float nL = zzonL.w;
	vec2 dir = vec2(0.0);
	float len = 0.0;
	set(dir, len, pp, true, false, false, false, bL, eL, fL, gL, jL);
	set(dir, len, pp, false, true, false, false, cL, fL, gL, hL, kL);
	set(dir, len, pp, false, false, true, false, fL, iL, jL, kL, nL);
	set(dir, len, pp, false, false, false, true, gL, jL, kL, lL, oL);
	vec2 dir2 = dir * dir;
	float dirR = dir2.x + dir2.y;
	bool zro = dirR < float(1.0 / 32768.0);
	dirR = APrxLoRsqF1(dirR);
	dirR = zro ? 1.0 : dirR;
	dir.x = zro ? 1.0 : dir.x;
	dir *= vec2(dirR);
	len = len * 0.5;
	len *= len;
	float stretch = (dir.x * dir.x + dir.y * dir.y) * APrxLoRcpF1(max(abs(dir.x), abs(dir.y)));
	vec2 len2 = vec2(1.0 + (stretch - 1.0) * len, 1.0 + -0.5 * len);
	float lob = 0.5 + float((1.0 / 4.0 - 0.04) - 0.5) * len;
	float clp = APrxLoRcpF1(lob);
	float aC = 0.0;
	float aW = 0.0;
	tap(aC, aW, vec2( 0.0,-1.0) - pp, dir, len2, lob, clp, bL);
	tap(aC, aW, vec2( 1.0,-1.0) - pp, dir, len2, lob, clp, cL);
	tap(aC, aW, vec2(-1.0, 1.0) - pp, dir, len2, lob, clp, iL);
	tap(aC, aW, vec2( 0.0, 1.0) - pp, dir, len2, lob, clp, jL);
	tap(aC, aW, vec2( 0.0, 0.0) - pp, dir, len2, lob, clp, fL);
	tap(aC, aW, vec2(-1.0, 0.0) - pp, dir, len2, lob, clp, eL);
	tap(aC, aW, vec2( 1.0, 1.0) - pp, dir, len2, lob, clp, kL);
	tap(aC, aW, vec2( 2.0, 1.0) - pp, dir, len2, lob, clp, lL);
	tap(aC, aW, vec2( 2.0, 0.0) - pp, dir, len2, lob, clp, hL);
	tap(aC, aW, vec2( 1.0, 0.0) - pp, dir, len2, lob, clp, gL);
	tap(aC, aW, vec2( 1.0, 2.0) - pp, dir, len2, lob, clp, oL);
	tap(aC, aW, vec2( 0.0, 2.0) - pp, dir, len2, lob, clp, nL);
	pix.r = aC / aW;
	float min1 = min(AMin3F1(fL, gL, jL), kL);
	float max1 = max(AMax3F1(fL, gL, jL), kL);
	pix.r = clamp(pix.r, min1, max1);
	pix.r = clamp(pix.r, 0.0, 1.0);
	return pix;
}

//!DESC CuNNy-6x8C-RCAS-RCAS
//!HOOK LUMA
//!BIND easu
//!SAVE rcas
//!WIDTH easu.w
//!HEIGHT easu.h
//!COMPONENTS 1

// CuNNy: do not change unless changed during training as well
#define SHARPNESS 2.0
#define FSR_RCAS_LIMIT (0.25 - (1.0 / 16.0))

float APrxMedRcpF1(float a) {
	float b = uintBitsToFloat(uint(0x7ef19fff) - floatBitsToUint(a));
	return b * (-b * a + 2.0);
}

float AMax3F1(float x, float y, float z) {
	return max(x, max(y, z)); 
}


float AMin3F1(float x, float y, float z) {
	return min(x, min(y, z));
}

vec4 hook() {
#if (defined(easu_gather) && (__VERSION__ >= 400 || (GL_ES && __VERSION__ >= 310)))
	vec3 bde = easu_gather(easu_pos + easu_pt * vec2(-0.5), 0).xyz;
	float b = bde.z;
	float d = bde.x;
	float e = bde.y;
	vec2 fh = easu_gather(easu_pos + easu_pt * vec2(0.5), 0).zx;
	float f = fh.x;
	float h = fh.y;
#else
	float b = easu_texOff(vec2( 0.0, -1.0)).r;
	float d = easu_texOff(vec2(-1.0,  0.0)).r;
	float e = easu_tex(easu_pos).r;
	float f = easu_texOff(vec2(1.0, 0.0)).r;
	float h = easu_texOff(vec2(0.0, 1.0)).r;
#endif
	float mn1L = min(AMin3F1(b, d, f), h);
	float mx1L = max(AMax3F1(b, d, f), h);
	vec2 peakC = vec2(1.0, -1.0 * 4.0);
	float hitMinL = min(mn1L, e) / (4.0 * mx1L);
	float hitMaxL = (peakC.x - max(mx1L, e)) / (4.0 * mn1L + peakC.y);
	float lobeL = max(-hitMinL, hitMaxL);
	float lobe = max(float(-FSR_RCAS_LIMIT), min(lobeL, 0.0)) * exp2(-clamp(float(SHARPNESS), 0.0, 2.0));
	float nz = 0.25 * b + 0.25 * d + 0.25 * f + 0.25 * h - e;
	nz = clamp(abs(nz) * APrxMedRcpF1(AMax3F1(AMax3F1(b, d, e), f, h) - AMin3F1(AMin3F1(b, d, e), f, h)), 0.0, 1.0);
	nz = -0.5 * nz + 1.0;
	lobe *= nz;
	float rcpL = APrxMedRcpF1(4.0 * lobe + 1.0);
	vec4 pix = vec4(0.0, 0.0, 0.0, 1.0);
	pix.r = float((lobe * b + lobe * d + lobe * h + lobe * f + e) * rcpL);
	return pix;
}


//!DESC CuNNy-6x8C-RCAS-in
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND LUMA
//!SAVE in
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) F(texelFetch(LUMA_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(1, 1) + ivec2(0, 0), 0).r)
shared F g[1][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = LUMA_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			g[0][ay][ax] = l0(x - 1, y - 1);
		}
	}
	barrier();
	F s[3][3][1];
	V4 r0 = V4(0.0);
	V4 r1 = V4(0.0);
	s[0][0][0] = g[0][xy.y+0][xy.x+0];
	s[0][1][0] = g[0][xy.y+0][xy.x+1];
	s[0][2][0] = g[0][xy.y+0][xy.x+2];
	s[1][0][0] = g[0][xy.y+1][xy.x+0];
	s[1][1][0] = g[0][xy.y+1][xy.x+1];
	s[1][2][0] = g[0][xy.y+1][xy.x+2];
	s[2][0][0] = g[0][xy.y+2][xy.x+0];
	s[2][1][0] = g[0][xy.y+2][xy.x+1];
	s[2][2][0] = g[0][xy.y+2][xy.x+2];
	r0 += V4(3.663e-02, -2.037e-01, -2.639e-02, 2.022e-02) * s[0][0][0];
	r1 += V4(-1.499e-02, -4.012e-02, 1.516e-02, -1.058e-01) * s[0][0][0];
	r0 += V4(1.550e-01, -4.957e-02, 1.645e-02, 1.528e-01) * s[0][1][0];
	r1 += V4(-2.409e-02, 1.070e-01, -1.566e-02, 2.964e-01) * s[0][1][0];
	r0 += V4(6.274e-02, -5.230e-02, 1.648e-02, -6.210e-03) * s[0][2][0];
	r1 += V4(2.106e-01, -1.578e-01, -8.194e-03, 2.360e-01) * s[0][2][0];
	r0 += V4(9.009e-02, 9.175e-03, -1.609e-02, -6.120e-02) * s[1][0][0];
	r1 += V4(3.318e-03, 1.840e-02, -1.405e-02, -2.283e-02) * s[1][0][0];
	r0 += V4(1.561e-01, 3.729e-01, 4.129e-01, -2.114e-01) * s[1][1][0];
	r1 += V4(-4.253e-01, 1.274e-02, 3.021e-02, -3.045e-01) * s[1][1][0];
	r0 += V4(-8.194e-02, 6.189e-02, -7.348e-02, 1.585e-02) * s[1][2][0];
	r1 += V4(2.452e-01, -6.683e-02, 2.087e-01, -4.755e-02) * s[1][2][0];
	r0 += V4(-2.315e-02, -2.300e-01, 3.123e-02, -2.074e-02) * s[2][0][0];
	r1 += V4(2.594e-02, -4.325e-02, -1.758e-02, 8.813e-02) * s[2][0][0];
	r0 += V4(-2.266e-02, 1.138e-01, -1.010e-01, 3.144e-01) * s[2][1][0];
	r1 += V4(-2.164e-03, -1.009e-01, -4.298e-01, -7.304e-02) * s[2][1][0];
	r0 += V4(-5.803e-02, 1.384e-02, -2.568e-01, -1.323e-01) * s[2][2][0];
	r1 += V4(-2.049e-02, -1.618e-01, 2.189e-01, -6.274e-02) * s[2][2][0];
	r0 += V4(-1.465e-01, -4.348e-02, -1.223e-04, -4.645e-03);
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-4.946e-03, 8.862e-02, 2.716e-02, 3.883e-03);
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-6x8C-RCAS-conv1
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND in
//!BIND LUMA
//!SAVE conv1
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 g[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = in_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			g[0][ay][ax] = l0(x - 1, y - 1);
			g[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s[3][3][2];
	V4 r0 = V4(0.0);
	V4 r1 = V4(0.0);
	s[0][0][0] = max(g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[0][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[0][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[0][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[0][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[0][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[0][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(-1.797e-01, -5.442e-02, -4.589e-02, -1.704e-01, -1.385e-04, -2.537e-02, -2.534e-02, -1.094e-02, -5.268e-01, 2.034e-01, -1.020e-01, -6.916e-02, 2.205e-02, 1.176e-01, -1.199e-01, -1.128e-01) * s[0][0][0];
	r1 += M4(-3.646e-02, -1.836e-02, 3.145e-02, -6.570e-02, -6.411e-02, 1.674e-02, -4.206e-03, -8.576e-02, 2.396e-01, -4.932e-02, 1.779e-02, 6.278e-02, -1.460e-01, -1.090e-01, 9.878e-02, -1.116e-01) * s[0][0][0];
	r0 += M4(-9.594e-02, -1.066e-02, -1.029e-01, -1.372e-01, -1.275e-01, -5.069e-03, -5.892e-02, 1.895e-02, -5.809e-02, 2.025e-01, 1.366e-01, -1.004e-01, 9.949e-02, -3.516e-02, -1.425e-01, -7.376e-02) * s[0][0][1];
	r1 += M4(6.003e-02, -1.740e-02, 8.420e-02, -4.961e-02, -6.921e-02, -2.880e-03, 2.149e-02, -1.343e-01, -5.763e-02, -7.921e-02, -7.589e-02, 3.745e-01, -8.841e-02, -9.838e-02, 7.732e-02, -3.027e-02) * s[0][0][1];
	r0 += M4(-1.078e-01, -5.011e-03, 5.899e-02, 5.847e-02, 2.286e-02, -1.744e-02, 6.443e-02, -1.711e-02, -2.397e-01, -2.615e-01, 6.749e-03, -9.685e-02, 1.378e-01, 1.779e-01, 1.435e-01, 2.120e-01) * s[0][1][0];
	r1 += M4(2.135e-01, -5.558e-02, 1.035e-01, -4.965e-02, 2.839e-01, -2.705e-01, -4.385e-02, 1.285e-01, 3.335e-01, 1.408e-01, 2.340e-01, -1.325e-01, -1.441e-01, -6.475e-02, -2.384e-01, 1.756e-01) * s[0][1][0];
	r0 += M4(-2.141e-01, -1.507e-01, 9.333e-02, 5.857e-02, -1.068e-01, 2.268e-02, 9.432e-02, -5.129e-02, -1.561e-01, -1.580e-01, 4.424e-02, -9.648e-02, 5.878e-01, 7.587e-02, 6.665e-02, 3.243e-01) * s[0][1][1];
	r1 += M4(8.148e-02, -7.074e-02, -8.961e-02, 8.777e-02, 1.231e-01, -2.310e-01, 5.920e-02, -1.211e-01, -3.605e-01, 1.083e-01, 2.840e-01, 3.395e-01, -3.749e-01, -1.277e-01, 8.252e-02, -6.400e-01) * s[0][1][1];
	r0 += M4(-1.258e-01, -1.069e-02, 5.504e-02, -1.588e-01, -1.085e-01, -1.333e-01, -5.146e-02, -1.213e-01, 9.983e-02, 2.409e-01, -3.272e-02, -7.727e-02, -1.616e-01, -1.531e-01, -1.399e-01, -9.635e-02) * s[0][2][0];
	r1 += M4(2.357e-02, -1.452e-01, 9.696e-03, -2.436e-02, -2.534e-02, 7.682e-02, -7.640e-02, -1.607e-01, 3.945e-01, 4.775e-02, -2.244e-01, 1.011e-01, -4.308e-01, 2.449e-02, 1.171e-01, 7.255e-02) * s[0][2][0];
	r0 += M4(-7.554e-02, 2.960e-02, -7.001e-03, -1.986e-01, -4.896e-02, -2.069e-01, -1.004e-01, -9.294e-02, 2.927e-02, 1.913e-02, 1.873e-02, -6.263e-02, -1.791e-01, -2.240e-01, -6.374e-02, -1.836e-02) * s[0][2][1];
	r1 += M4(5.301e-02, -1.148e-01, -1.128e-02, -1.127e-02, -1.187e-01, 1.026e-01, 9.589e-02, -3.454e-03, -3.146e-02, 2.322e-02, -3.914e-02, 3.133e-01, -4.171e-01, -6.084e-02, 2.837e-01, 7.553e-02) * s[0][2][1];
	r0 += M4(2.246e-02, 8.235e-02, 3.629e-02, 2.941e-02, 1.085e-02, 3.013e-02, 2.054e-02, -1.342e-01, -1.731e-02, -6.997e-02, -3.165e-01, 5.456e-02, -5.365e-03, 1.675e-02, 9.397e-02, 1.025e-01) * s[1][0][0];
	r1 += M4(-4.854e-02, -6.873e-02, 3.279e-02, 1.096e-01, -1.277e-02, -1.606e-02, -7.233e-02, 5.893e-02, 6.102e-02, 9.889e-02, 2.603e-01, -3.314e-01, 8.305e-02, -9.856e-03, -5.526e-02, 1.550e-02) * s[1][0][0];
	r0 += M4(-4.902e-02, 5.788e-02, 1.174e-01, 2.021e-03, 1.275e-01, 4.333e-02, 5.542e-03, -7.560e-02, -3.485e-02, -1.180e-01, -1.333e-01, 8.470e-02, 1.319e-01, -2.233e-01, 8.469e-03, 1.303e-01) * s[1][0][1];
	r1 += M4(-1.054e-01, -8.969e-02, 7.769e-02, 1.583e-01, 3.769e-02, 7.563e-02, 6.063e-02, -1.549e-02, -5.908e-01, 5.079e-02, 6.321e-02, -5.422e-02, 5.155e-02, 7.855e-02, -4.435e-02, 8.577e-02) * s[1][0][1];
	r0 += M4(-4.854e-02, 1.688e-01, 1.694e-01, 4.511e-01, 2.017e-01, 1.439e-01, 2.711e-01, 1.549e-01, 1.601e-01, 8.872e-02, 7.313e-01, 7.137e-03, -1.905e-01, -8.572e-02, -3.125e-01, 1.866e-02) * s[1][1][0];
	r1 += M4(1.066e-01, 2.999e-02, -1.666e-01, -7.495e-02, -1.679e-01, -3.035e-02, -1.371e-01, 9.188e-02, 5.376e-01, -2.679e-01, -4.658e-01, -1.230e-01, -1.870e-02, 1.590e-01, 1.672e-01, -2.926e-01) * s[1][1][0];
	r0 += M4(-1.863e-01, 3.113e-01, 1.260e-01, 3.784e-01, 1.125e-01, 3.360e-01, 1.707e-01, 5.846e-02, -1.032e-01, 6.186e-01, 3.063e-01, 3.376e-01, 3.937e-01, -4.316e-01, -3.634e-01, -1.020e-01) * s[1][1][1];
	r1 += M4(1.482e-01, 9.319e-02, -6.082e-02, -3.442e-01, 3.441e-02, -8.977e-02, 1.406e-02, -7.137e-02, -4.834e-01, -4.714e-03, -5.321e-02, 3.349e-01, -7.924e-02, 5.208e-02, 4.962e-01, -8.840e-02) * s[1][1][1];
	r0 += M4(-2.237e-02, 4.943e-02, 1.264e-01, 2.253e-01, -1.986e-01, -2.127e-01, 2.020e-01, -3.605e-02, 1.927e-01, -2.769e-01, -2.865e-03, -2.580e-01, -4.295e-02, -1.006e-01, 1.102e-01, 3.910e-02) * s[1][2][0];
	r1 += M4(-4.826e-02, -1.322e-01, 2.075e-01, -1.730e-01, -1.511e-01, 5.809e-02, 2.595e-01, -2.182e-01, -1.167e-01, 4.222e-02, 1.322e-01, -9.445e-02, 1.484e-01, 1.116e-02, -8.945e-02, 7.178e-03) * s[1][2][0];
	r0 += M4(6.538e-02, -9.076e-02, 2.600e-01, 1.318e-01, -2.153e-03, -3.325e-01, 1.489e-01, -9.839e-02, 1.157e-02, -1.595e-01, -4.135e-02, -1.985e-01, -1.631e-01, 4.659e-01, -5.179e-02, 5.454e-02) * s[1][2][1];
	r1 += M4(-8.499e-02, -1.587e-01, 1.985e-01, -1.428e-01, 1.635e-02, 5.008e-02, 1.266e-01, 8.310e-02, -2.634e-01, 8.420e-02, 4.959e-01, 2.992e-02, 1.420e-01, 8.616e-02, -1.242e-01, -1.808e-01) * s[1][2][1];
	r0 += M4(3.295e-02, -3.416e-02, 1.014e-01, -1.508e-02, 5.296e-02, -2.846e-02, -2.636e-03, 3.860e-02, 1.043e-01, 5.565e-02, 2.918e-02, 6.181e-02, -7.699e-02, 1.504e-02, 2.799e-02, -3.267e-02) * s[2][0][0];
	r1 += M4(1.336e-01, -1.077e-01, -1.703e-02, 3.632e-02, 1.308e-03, -5.456e-02, 7.966e-02, 4.633e-02, 3.482e-02, -4.958e-03, -1.646e-02, -6.464e-02, 1.305e-01, -3.752e-02, 4.536e-02, 1.218e-01) * s[2][0][0];
	r0 += M4(3.623e-02, -1.242e-01, 8.271e-02, -3.979e-02, 4.041e-02, -7.874e-04, 3.343e-02, 5.299e-02, 6.931e-03, 7.688e-02, -1.145e-01, 6.428e-02, -9.980e-03, -1.193e-01, -4.129e-02, 1.923e-02) * s[2][0][1];
	r1 += M4(3.625e-02, -6.104e-02, -5.468e-02, 6.178e-02, 3.369e-02, -6.438e-02, 3.689e-03, 6.664e-02, -7.084e-02, -3.758e-02, 6.909e-02, 2.839e-01, 7.195e-02, -5.016e-02, 3.490e-02, -7.889e-02) * s[2][0][1];
	r0 += M4(1.182e-01, 1.707e-01, -2.889e-02, 2.055e-01, -1.034e-01, -2.659e-02, -3.587e-01, -5.797e-02, 1.188e-01, -6.617e-02, -3.581e-01, 3.836e-02, 5.754e-03, -2.738e-02, 2.295e-01, -9.432e-02) * s[2][1][0];
	r1 += M4(-5.821e-02, -1.360e-01, 7.140e-03, 5.566e-02, -2.094e-01, -7.445e-02, 2.191e-01, -9.625e-02, -1.120e-01, 1.564e-02, -5.964e-02, -1.144e-01, 1.584e-01, 2.881e-02, -1.386e-01, 2.358e-02) * s[2][1][0];
	r0 += M4(3.090e-01, 3.377e-01, -1.682e-01, 3.319e-01, -4.782e-02, -8.899e-04, -6.137e-01, -1.076e-01, 2.544e-02, -9.230e-03, -4.003e-01, 4.112e-02, -6.182e-02, -1.423e-01, 4.034e-01, 2.160e-02) * s[2][1][1];
	r1 += M4(2.752e-02, -2.982e-01, 1.043e-01, -1.137e-01, -2.017e-01, -6.150e-02, 2.288e-01, 3.381e-02, -1.193e-01, 1.100e-01, 2.974e-02, -1.931e-01, 4.405e-01, 7.486e-02, -5.731e-02, -1.318e-01) * s[2][1][1];
	r0 += M4(-7.805e-02, 1.017e-01, -1.460e-01, 1.972e-01, -1.192e-01, -3.069e-01, 2.028e-02, -9.567e-02, 1.822e-02, -1.047e-01, 9.157e-02, -8.410e-03, 2.011e-02, 1.466e-01, 6.131e-02, 7.200e-02) * s[2][2][0];
	r1 += M4(-1.800e-01, -8.946e-02, 1.308e-01, -4.781e-02, -2.117e-01, 2.251e-01, -1.529e-02, 7.531e-02, 1.622e-01, -1.081e-01, -1.582e-01, 3.830e-02, 2.089e-01, -1.494e-02, -3.117e-02, 9.233e-02) * s[2][2][0];
	r0 += M4(-2.536e-01, 1.290e-01, -7.500e-02, 1.734e-01, -6.512e-03, -4.048e-01, -5.244e-02, -7.235e-02, -3.893e-03, -1.910e-01, 1.125e-01, -1.503e-02, 1.453e-02, 1.929e-01, 6.158e-02, 1.573e-01) * s[2][2][1];
	r1 += M4(-1.120e-01, -2.174e-01, 2.418e-02, 2.298e-01, -4.191e-02, 1.578e-01, 1.019e-01, -1.251e-01, 8.500e-02, -1.028e-01, -9.646e-02, -1.205e-01, 2.831e-01, 1.262e-02, 2.521e-02, 2.370e-01) * s[2][2][1];
	s[0][0][0] = max(g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[1][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[1][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[1][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[1][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[1][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[1][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(-1.984e-01, 1.359e-01, -3.916e-02, -1.230e-01, -5.934e-02, -1.932e-01, -2.102e-01, -2.731e-01, -1.380e-01, -9.178e-02, -2.467e-02, 9.365e-03, -1.470e-01, -8.005e-02, 1.948e-02, 6.447e-02) * s[0][0][0];
	r1 += M4(3.943e-02, 4.654e-03, 3.864e-01, 9.253e-02, -2.322e-01, -4.441e-02, 2.438e-01, -1.474e-01, -1.815e-02, 5.262e-02, -1.401e-01, 9.019e-02, -3.118e-02, -5.668e-02, -1.967e-02, 2.639e-02) * s[0][0][0];
	r0 += M4(1.487e-01, 6.705e-02, -8.283e-02, -6.940e-02, -6.910e-02, 9.565e-03, -8.250e-02, -7.783e-02, 7.129e-02, -4.153e-02, -1.053e-01, 5.312e-02, -7.973e-02, -6.541e-02, 9.644e-02, 7.949e-02) * s[0][0][1];
	r1 += M4(1.507e-01, 9.937e-03, -4.116e-02, 1.780e-01, 4.839e-02, 2.566e-02, 2.080e-01, -1.551e-02, -1.083e-01, 7.234e-02, -3.949e-04, -2.140e-01, 1.189e-01, -3.481e-02, -5.787e-02, 1.004e-01) * s[0][0][1];
	r0 += M4(-9.502e-03, -1.323e-01, 5.165e-02, 2.453e-02, -3.136e-01, 2.133e-03, -1.106e-01, -2.101e-01, -1.328e-01, -4.967e-01, -2.073e-01, -1.086e-01, -5.094e-02, -9.989e-02, -5.432e-02, -1.724e-01) * s[0][1][0];
	r1 += M4(-1.265e-01, -1.218e-01, 1.809e-01, 3.406e-02, 9.060e-02, -1.366e-01, -8.594e-03, 5.192e-02, -5.384e-04, 2.115e-01, 3.596e-01, 7.771e-03, -9.663e-02, 1.095e-01, 1.028e-01, -1.771e-01) * s[0][1][0];
	r0 += M4(9.925e-02, 9.326e-02, -3.263e-02, 1.829e-02, -2.002e-01, -3.167e-02, -7.503e-02, -1.782e-01, -2.075e-01, 1.266e-01, -5.033e-02, 2.825e-01, -1.095e-01, -1.290e-01, -8.881e-02, -1.370e-01) * s[0][1][1];
	r1 += M4(1.819e-01, -3.353e-02, -1.245e-01, 1.421e-01, -1.530e-02, 7.059e-02, 4.119e-03, -1.210e-02, 3.408e-01, 3.764e-03, -3.708e-01, 2.229e-02, 6.182e-03, 1.346e-01, -4.020e-02, 3.118e-02) * s[0][1][1];
	r0 += M4(5.870e-02, -2.533e-01, -1.540e-02, -8.615e-02, -2.913e-02, 6.231e-02, 1.105e-01, -1.043e-02, 7.231e-02, 2.014e-02, 3.153e-02, -3.235e-02, -4.094e-03, 1.473e-01, -2.048e-02, 9.362e-02) * s[0][2][0];
	r1 += M4(-1.390e-01, 3.991e-02, 1.587e-01, 1.190e-01, 1.784e-01, -3.120e-03, -4.343e-03, -4.415e-02, 2.656e-01, -5.527e-02, 4.308e-02, -6.921e-02, 6.129e-02, 2.214e-02, -4.553e-02, -7.606e-03) * s[0][2][0];
	r0 += M4(-5.186e-03, -1.409e-01, -2.223e-02, -8.450e-02, 3.872e-02, 8.486e-02, 5.114e-02, -5.436e-03, -1.189e-01, 1.035e-01, 1.620e-02, -8.209e-02, 3.364e-02, 1.239e-01, 4.336e-02, 1.014e-01) * s[0][2][1];
	r1 += M4(5.667e-02, 4.087e-02, 2.249e-02, 5.169e-02, 1.294e-01, -6.857e-03, 4.645e-03, -1.156e-01, 1.957e-01, -7.896e-03, 1.897e-01, -2.933e-02, 1.507e-01, 1.607e-02, -1.272e-02, -2.063e-01) * s[0][2][1];
	r0 += M4(2.693e-01, -9.192e-03, 6.093e-02, 1.580e-01, 2.327e-02, 4.554e-02, 2.335e-01, 1.117e-01, -5.818e-02, -4.464e-02, 1.302e-01, 1.162e-01, 6.176e-03, -6.728e-02, 4.377e-04, -7.673e-02) * s[1][0][0];
	r1 += M4(-3.388e-01, -4.965e-02, 2.220e-01, 3.330e-01, 2.233e-01, -1.294e-01, -2.127e-01, 9.792e-02, -1.264e-01, 3.085e-02, -3.840e-02, 5.469e-02, -2.113e-01, 1.683e-02, 6.209e-02, 8.392e-02) * s[1][0][0];
	r0 += M4(2.312e-01, 7.584e-03, 3.264e-01, 6.360e-02, 1.657e-02, -3.728e-03, 1.113e-01, 8.581e-02, 5.255e-02, -8.849e-02, -2.519e-01, 9.524e-02, 1.521e-01, 6.270e-02, 3.579e-02, -1.620e-02) * s[1][0][1];
	r1 += M4(1.415e-01, -1.175e-01, -2.668e-01, -4.615e-02, 3.331e-02, 7.328e-02, -8.231e-02, -3.766e-02, 3.179e-02, 1.974e-01, 1.986e-01, -3.603e-02, 1.217e-01, 4.900e-02, -4.879e-02, 1.021e-01) * s[1][0][1];
	r0 += M4(1.583e-01, 1.162e-01, -2.838e-01, -1.528e-01, 1.166e-01, 1.410e-01, -9.006e-02, -3.666e-01, 1.660e-02, -1.570e-01, 4.069e-01, 6.082e-02, -1.856e-01, -1.986e-01, -5.770e-03, -4.911e-02) * s[1][1][0];
	r1 += M4(-3.528e-01, 4.958e-01, 4.118e-01, 2.505e-01, -2.842e-01, 2.723e-01, 2.750e-01, -1.482e-02, -2.170e-01, -6.800e-03, 6.650e-03, 1.315e-01, -1.320e-01, 1.729e-01, 1.401e-01, -3.180e-01) * s[1][1][0];
	r0 += M4(-1.820e-01, -2.853e-01, -1.768e-01, -1.305e-01, 1.030e-02, -5.066e-02, -6.075e-02, -3.237e-01, 1.342e-01, 1.843e-01, 2.219e-01, 8.584e-02, -1.932e-01, -2.160e-01, 1.330e-03, 1.004e-01) * s[1][1][1];
	r1 += M4(-2.617e-02, 1.944e-01, 2.668e-01, -1.953e-01, -9.299e-02, 1.091e-01, 1.327e-01, 1.156e-03, -5.179e-02, 4.667e-02, 1.813e-01, -2.448e-02, 4.985e-02, 2.284e-01, 2.276e-03, 1.450e-01) * s[1][1][1];
	r0 += M4(-1.091e-01, 7.435e-03, 8.112e-02, -6.567e-02, 4.506e-02, 1.137e-01, -6.046e-02, -1.338e-03, -1.023e-01, 1.318e-01, -7.647e-02, 6.189e-02, -2.123e-01, 4.216e-01, -3.514e-02, 7.805e-02) * s[1][2][0];
	r1 += M4(1.159e-01, 1.645e-02, -1.824e-01, 1.094e-01, -1.596e-01, -2.580e-02, 6.795e-03, 3.642e-02, -2.192e-01, -1.517e-02, 2.298e-01, -2.420e-02, -4.116e-01, -9.589e-02, -1.253e-01, -9.773e-02) * s[1][2][0];
	r0 += M4(1.686e-01, 7.098e-02, 1.700e-02, 4.209e-02, -1.237e-02, 1.431e-01, 1.969e-02, -2.395e-02, -9.140e-02, -9.936e-03, -4.172e-03, -1.147e-03, 8.031e-02, 1.713e-01, 5.239e-02, 5.343e-02) * s[1][2][1];
	r1 += M4(1.978e-01, 3.806e-02, -2.451e-01, 5.319e-02, -1.063e-01, -3.106e-03, -8.508e-02, -2.937e-02, -2.311e-01, 9.877e-03, 1.170e-01, -9.663e-02, -1.363e-01, -7.162e-02, -2.378e-01, -7.691e-02) * s[1][2][1];
	r0 += M4(2.022e-01, 5.845e-02, -3.828e-01, -1.395e-02, 1.500e-01, -1.268e-01, -2.341e-02, -1.531e-01, 3.550e-03, -6.821e-03, 1.852e-01, 5.436e-02, 8.714e-02, -9.632e-02, 2.544e-01, 1.671e-02) * s[2][0][0];
	r1 += M4(-2.173e-01, -3.386e-02, 3.304e-01, -1.089e-02, 8.549e-02, 2.787e-01, 1.382e-01, -8.130e-02, 1.277e-01, -5.079e-02, -9.380e-02, 1.216e-01, 1.381e-01, -1.106e-01, -4.903e-03, 9.159e-02) * s[2][0][0];
	r0 += M4(-2.445e-01, 2.509e-02, 7.714e-02, 4.797e-02, -5.630e-02, -1.985e-02, 2.557e-02, -9.539e-02, 3.106e-02, -5.316e-02, 2.202e-01, 1.085e-01, 9.091e-02, -5.706e-02, 1.523e-03, 2.041e-02) * s[2][0][1];
	r1 += M4(-1.053e-01, -6.943e-02, -2.285e-01, -7.249e-02, 1.845e-01, 1.008e-01, -1.580e-02, -4.724e-02, 1.324e-01, -5.092e-02, -1.392e-01, 1.029e-01, 5.857e-01, -5.295e-02, -3.242e-02, 3.244e-02) * s[2][0][1];
	r0 += M4(2.977e-01, -1.458e-01, -1.698e-01, 5.283e-02, -9.490e-02, 1.994e-01, 3.800e-01, -1.209e-01, -2.474e-02, 4.467e-02, 1.656e-01, 2.115e-02, 7.407e-02, 1.541e-01, 3.697e-01, 8.234e-02) * s[2][1][0];
	r1 += M4(2.390e-01, -1.152e-01, 1.955e-01, 2.628e-01, 1.151e-01, 2.706e-03, -6.268e-02, 9.937e-03, 3.691e-02, -8.768e-02, 3.988e-02, -1.034e-01, 6.509e-02, -1.791e-01, 1.712e-02, 2.723e-01) * s[2][1][0];
	r0 += M4(-2.607e-01, -1.640e-01, 2.982e-01, 1.335e-01, -5.741e-03, 1.185e-01, 2.972e-01, -1.647e-01, 2.333e-02, 1.217e-01, 1.422e-01, -2.180e-02, -8.176e-02, 1.850e-01, 4.121e-01, 7.880e-02) * s[2][1][1];
	r1 += M4(-9.932e-03, -3.134e-02, -1.148e-01, -2.549e-01, -1.238e-01, 8.423e-02, -3.966e-02, 2.568e-02, 1.236e-01, -6.945e-02, -1.313e-01, 4.457e-02, 4.823e-01, -2.267e-01, -3.461e-02, 3.887e-01) * s[2][1][1];
	r0 += M4(-1.088e-01, 3.537e-01, -2.615e-02, -1.995e-01, -2.339e-01, 7.017e-02, -5.091e-02, -5.447e-02, -6.441e-02, -1.294e-02, 9.894e-02, 4.926e-02, 3.006e-02, -3.270e-01, -1.921e-02, 4.376e-03) * s[2][2][0];
	r1 += M4(-2.338e-01, 1.233e-02, -2.756e-02, -1.218e-01, 8.080e-03, 1.447e-01, -5.406e-03, -4.309e-02, 1.534e-01, -2.638e-02, 7.898e-03, 1.234e-01, -1.491e-01, 8.428e-02, 2.407e-01, 6.982e-02) * s[2][2][0];
	r0 += M4(5.569e-02, 7.162e-02, -2.873e-02, -1.594e-01, -1.182e-01, 7.636e-02, -6.068e-02, -4.793e-02, 2.650e-02, 3.578e-02, 5.897e-02, 5.183e-02, -5.237e-02, -6.702e-02, -1.710e-02, 7.247e-03) * s[2][2][1];
	r1 += M4(1.573e-02, -1.838e-02, -2.205e-01, 2.059e-02, -1.066e-02, 1.468e-01, 1.150e-01, 6.891e-02, 7.609e-02, -3.405e-02, 8.657e-02, 1.067e-01, -1.736e-02, 1.208e-01, 8.557e-02, 8.780e-03) * s[2][2][1];
	r0 += V4(-2.900e-02, 2.904e-02, 1.998e-03, 1.724e-01);
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-6.713e-03, 3.238e-01, 4.754e-02, -4.397e-02);
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-6x8C-RCAS-conv2
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv1
//!BIND LUMA
//!SAVE conv2
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 g[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv1_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			g[0][ay][ax] = l0(x - 1, y - 1);
			g[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s[3][3][2];
	V4 r0 = V4(0.0);
	V4 r1 = V4(0.0);
	s[0][0][0] = max(g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[0][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[0][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[0][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[0][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[0][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[0][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(8.024e-02, 1.081e-02, -8.176e-02, -4.866e-02, -2.244e-01, 1.504e-01, 4.967e-02, 1.277e-02, -2.980e-02, -7.790e-02, 8.340e-02, -5.742e-02, 1.200e-02, 6.356e-02, -9.936e-02, -7.382e-02) * s[0][0][0];
	r1 += M4(-2.227e-02, -2.555e-02, 7.203e-02, 4.997e-02, 8.765e-02, -7.508e-02, 1.893e-01, 3.793e-02, -8.678e-02, -9.669e-03, -4.901e-02, 9.168e-02, -2.435e-02, 1.030e-02, 4.257e-02, 4.868e-04) * s[0][0][0];
	r0 += M4(2.223e-02, 7.806e-02, 4.554e-02, -5.660e-02, -1.025e-01, -6.074e-03, -1.829e-01, -8.463e-02, 4.863e-02, -2.032e-01, 1.180e-01, -1.704e-01, 9.278e-02, 6.049e-01, -1.601e-01, -5.725e-02) * s[0][0][1];
	r1 += M4(-1.038e-01, 1.862e-02, -3.688e-04, -3.401e-03, 5.216e-03, -9.110e-02, 2.805e-01, -8.885e-02, 2.114e-02, -9.106e-02, -4.968e-02, 3.630e-02, -8.309e-01, -3.820e-01, -9.398e-01, 1.539e-01) * s[0][0][1];
	r0 += M4(-6.628e-02, -1.628e-01, -1.560e-01, 2.112e-01, 3.122e-01, -1.812e-01, 1.396e-01, 4.622e-02, 1.636e-01, -3.723e-02, 4.580e-01, 1.393e-01, 1.264e-01, -8.906e-02, 2.612e-02, 9.495e-02) * s[0][1][0];
	r1 += M4(-5.041e-02, -7.165e-03, -8.886e-02, 8.117e-02, -4.911e-02, -1.538e-01, -7.759e-02, 3.412e-01, -1.360e-01, -3.725e-01, -8.845e-02, 5.954e-01, -3.936e-02, 2.667e-02, 2.057e-03, 1.091e-02) * s[0][1][0];
	r0 += M4(1.112e-01, -3.641e-01, 1.955e-01, -3.964e-02, 8.192e-02, 1.111e-01, -3.073e-01, 3.727e-01, -1.721e-01, 1.020e-01, -3.421e-01, 3.548e-02, 1.466e+00, -8.299e-01, -4.772e-01, -4.793e-01) * s[0][1][1];
	r1 += M4(5.781e-02, 8.110e-03, -1.157e-01, -6.586e-02, -1.900e-01, -7.989e-02, -1.540e-01, -5.044e-02, 6.316e-02, -1.426e-01, -1.641e-01, 2.565e-02, -6.321e-01, -4.740e-01, -2.371e+00, 5.910e-01) * s[0][1][1];
	r0 += M4(1.102e-02, 5.947e-03, -1.331e-02, -4.348e-02, 7.138e-03, -7.113e-02, 3.760e-05, -7.011e-02, -1.724e-01, 2.280e-02, 1.766e-02, 3.189e-03, -1.879e-02, 2.910e-02, -6.069e-02, 5.807e-02) * s[0][2][0];
	r1 += M4(-3.152e-02, -4.356e-02, -2.815e-02, 8.455e-02, -5.917e-02, -4.854e-03, -6.215e-02, 1.284e-01, -2.902e-01, -9.960e-02, 3.603e-02, -3.898e-02, -5.899e-03, -1.821e-02, -3.884e-02, 4.542e-02) * s[0][2][0];
	r0 += M4(1.391e-02, 2.390e-02, 5.350e-02, -1.147e-01, -1.208e-02, -9.156e-02, -3.320e-02, 8.456e-02, -9.073e-04, 6.238e-01, -5.668e-01, 2.212e-01, -4.210e-01, -4.079e-01, -8.383e-01, 4.314e-01) * s[0][2][1];
	r1 += M4(1.072e-01, 2.022e-03, -7.237e-02, -2.222e-02, -6.462e-02, 3.976e-02, -4.655e-02, 2.321e-01, -1.205e-01, -6.056e-02, 3.374e-02, 5.766e-03, 2.669e-03, -9.066e-01, -8.184e-01, 5.393e-02) * s[0][2][1];
	r0 += M4(-1.573e-01, -1.476e-01, 3.164e-02, 7.615e-03, -1.805e-01, 4.009e-01, 5.231e-01, -4.615e-02, -4.044e-02, -1.617e-01, -1.219e-03, 2.183e-01, -5.524e-03, -1.212e-02, 9.177e-02, -8.704e-02) * s[1][0][0];
	r1 += M4(-1.645e-01, -5.514e-02, -3.787e-02, 1.736e-01, 4.468e-03, 6.688e-02, 9.563e-03, 1.708e-01, 6.795e-02, 1.860e-02, -4.382e-02, 1.080e-01, -6.373e-02, 5.437e-02, 1.813e-02, -1.100e-01) * s[1][0][0];
	r0 += M4(-1.135e-02, 3.422e-02, 4.796e-02, -2.635e-03, -2.099e-01, 1.716e-02, 6.915e-02, 1.714e-01, 1.207e-01, -2.218e-01, 3.332e-02, 8.962e-02, 3.710e-01, 1.767e-01, -5.665e-02, -3.902e-01) * s[1][0][1];
	r1 += M4(-2.804e-02, 9.475e-02, -4.108e-02, -3.422e-02, -1.304e-01, -5.788e-02, 1.452e-01, 1.008e-01, 6.908e-02, -9.685e-02, -2.992e-02, 1.028e-01, -8.316e-01, 6.537e-01, -1.131e+00, -2.705e-01) * s[1][0][1];
	r0 += M4(4.648e-01, -1.271e-01, 2.113e-01, 4.783e-02, 2.322e-01, -9.881e-02, 3.540e-01, 2.732e-02, 3.809e-02, -3.063e-02, 3.248e-01, 2.114e-01, 2.464e-02, 1.619e-02, -1.174e-01, 9.060e-02) * s[1][1][0];
	r1 += M4(-3.716e-03, 1.173e-01, -5.955e-02, 3.405e-02, -1.116e-01, 2.685e-01, -3.823e-01, 1.172e-01, 1.871e-01, 2.859e-01, 3.434e-02, 4.365e-02, -9.505e-02, -4.264e-02, -2.702e-02, 1.548e-01) * s[1][1][0];
	r0 += M4(2.352e-01, -1.847e-02, 2.704e-01, -8.623e-03, 3.683e-02, -3.250e-01, -8.092e-02, 4.086e-01, 4.665e-02, -4.860e-01, -5.821e-01, -5.707e-02, 2.727e+00, -9.804e-01, -1.304e+00, 1.551e+00) * s[1][1][1];
	r1 += M4(-1.276e-01, 2.780e-01, -1.152e-01, -5.068e-03, 1.735e-01, 7.656e-02, -1.014e-01, -6.847e-02, 5.176e-01, 2.668e-01, 1.391e-01, -1.606e-01, 2.099e+00, 1.699e+00, -4.007e+00, -1.221e+00) * s[1][1][1];
	r0 += M4(1.753e-02, 1.265e-01, 9.118e-02, -1.656e-01, 2.613e-02, -1.206e-01, 4.651e-02, -9.601e-02, 1.405e-01, 1.724e-01, 1.471e-01, -1.725e-01, 1.031e-01, -4.962e-02, 8.348e-02, -8.694e-02) * s[1][2][0];
	r1 += M4(-1.072e-01, -7.170e-02, -9.354e-02, -2.892e-01, -3.583e-03, -5.213e-02, -1.283e-02, 1.635e-01, -2.593e-01, 4.015e-02, -1.016e-03, -3.760e-01, 3.462e-02, -4.410e-02, -8.761e-02, -4.040e-02) * s[1][2][0];
	r0 += M4(-9.789e-02, 6.920e-02, -1.963e-01, 1.655e-01, -2.684e-04, -4.749e-02, 7.051e-02, 7.078e-03, -1.646e-02, 9.611e-02, -2.211e-01, 8.804e-02, 1.039e+00, -1.416e+00, -1.359e+00, 1.904e+00) * s[1][2][1];
	r1 += M4(-5.546e-01, 2.167e-03, -1.630e-01, -3.894e-01, -1.806e-01, -7.500e-02, -4.801e-03, -1.329e-01, -3.530e-02, 2.134e-02, -1.025e-01, -2.507e-01, -1.105e+00, -2.501e-01, -9.463e-01, -1.744e+00) * s[1][2][1];
	r0 += M4(1.434e-03, 8.072e-02, -8.229e-02, -3.051e-03, 2.938e-02, 8.762e-02, 9.565e-02, 6.067e-02, -8.090e-02, -5.244e-04, -6.417e-02, 8.905e-03, 5.853e-02, -7.227e-02, 5.670e-02, 6.810e-02) * s[2][0][0];
	r1 += M4(1.376e-01, -6.175e-02, 6.658e-02, -1.032e-01, -8.983e-02, -1.152e-03, -9.483e-02, -6.393e-03, -6.216e-02, 3.025e-02, -6.316e-03, -3.113e-02, 8.984e-02, 6.220e-02, -2.618e-02, 4.309e-02) * s[2][0][0];
	r0 += M4(2.033e-02, 8.891e-02, 3.846e-02, 7.302e-02, 6.177e-02, -4.018e-02, 3.246e-02, 1.223e-01, 4.508e-02, 5.370e-02, -2.038e-02, -1.948e-02, -1.433e-01, 2.157e-01, 8.221e-01, -1.002e+00) * s[2][0][1];
	r1 += M4(7.045e-02, -4.108e-03, 4.186e-02, 3.546e-02, -5.872e-02, -2.165e-02, -8.621e-02, -1.415e-02, -4.356e-02, -5.133e-02, 2.056e-02, 2.647e-02, -1.830e-01, 6.875e-01, -1.108e+00, -5.252e-02) * s[2][0][1];
	r0 += M4(-2.782e-01, -1.376e-01, -2.688e-01, -1.524e-01, -3.967e-04, -3.511e-02, 3.127e-01, 1.600e-01, -2.042e-02, -1.070e-04, 5.279e-02, -6.496e-02, -3.327e-02, -2.265e-02, -2.025e-02, -4.840e-02) * s[2][1][0];
	r1 += M4(1.967e-01, 4.901e-02, -2.912e-02, 1.372e-01, -7.404e-02, -1.922e-02, -1.456e-02, 7.953e-02, 4.980e-02, 1.666e-02, 5.518e-03, 5.974e-02, 9.651e-03, 5.221e-02, 1.448e-01, -2.396e-02) * s[2][1][0];
	r0 += M4(-1.012e-01, -3.920e-02, 2.158e-01, 1.911e-01, -1.401e-01, 3.583e-02, 8.668e-02, 1.185e-01, 2.581e-02, -1.330e-02, 1.495e-02, -9.840e-02, -3.022e-01, 4.354e-01, -1.398e+00, -1.050e+00) * s[2][1][1];
	r1 += M4(-2.441e-01, 3.163e-02, 1.153e-01, -6.715e-02, -8.320e-02, 2.402e-02, 5.710e-02, 4.971e-02, 9.024e-02, -1.110e-01, 1.071e-01, -3.411e-02, 1.438e-01, 1.292e-01, -1.382e+00, -1.138e-01) * s[2][1][1];
	r0 += M4(3.320e-02, 9.129e-02, -1.258e-01, 2.812e-02, 2.422e-02, -3.608e-02, 7.414e-02, 4.117e-02, 5.840e-02, 3.917e-02, -6.448e-02, 2.034e-02, -4.887e-02, 9.357e-02, -6.278e-02, 2.569e-02) * s[2][2][0];
	r1 += M4(1.684e-01, 4.426e-02, 7.793e-03, 4.701e-02, 8.819e-02, -2.261e-02, 4.696e-02, 1.240e-02, 7.429e-02, 5.313e-02, 3.549e-02, -3.741e-03, -1.284e-02, 7.030e-02, 5.203e-02, -7.160e-02) * s[2][2][0];
	r0 += M4(-4.837e-02, 1.046e-01, 2.174e-01, 4.323e-02, -5.117e-02, 4.278e-02, 1.569e-02, 5.861e-03, -1.226e-02, 3.610e-02, 4.448e-02, -6.129e-02, 9.920e-02, 1.058e+00, -7.363e-01, -5.286e-01) * s[2][2][1];
	r1 += M4(1.224e-01, 6.732e-02, -6.456e-02, -8.193e-02, 4.322e-02, 4.206e-02, -2.497e-02, -8.099e-02, 2.380e-01, 4.069e-02, 6.606e-03, 3.243e-02, 1.293e+00, -5.722e-01, -7.113e-01, 1.107e+00) * s[2][2][1];
	s[0][0][0] = max(g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[1][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[1][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[1][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[1][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[1][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[1][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(1.472e-01, -2.686e-01, -8.973e-03, 1.523e-02, 3.595e-02, -1.539e-01, -1.169e-01, -8.434e-02, 8.168e-02, -8.373e-02, -6.593e-02, -1.496e-01, -6.357e-02, 1.225e-01, -2.071e-02, 1.309e-02) * s[0][0][0];
	r1 += M4(2.341e-01, 5.431e-02, -7.081e-02, -3.185e-02, 8.895e-03, -1.415e-01, -5.416e-02, 4.342e-02, -1.282e-02, 2.392e-02, 6.033e-03, -2.662e-02, -4.105e-03, 9.518e-04, 4.686e-02, -1.409e-01) * s[0][0][0];
	r0 += M4(5.268e-02, -5.688e-02, 6.725e-02, 1.600e-02, 1.658e-01, -4.541e-01, -2.866e-01, 2.292e-01, 1.503e-01, -1.783e-01, -3.592e-02, -2.829e-01, -3.267e-02, 4.312e-02, -1.000e-01, -2.152e-01) * s[0][0][1];
	r1 += M4(-3.534e-02, 3.266e-02, -6.953e-02, -1.631e-02, 3.909e-01, -1.085e+00, -4.452e-01, 4.921e-01, 3.090e-02, -2.141e-01, 2.153e-02, 1.206e-01, 2.737e-02, -2.580e-02, 2.201e-02, -8.082e-02) * s[0][0][1];
	r0 += M4(3.665e-02, 5.371e-01, 2.389e-02, 3.208e-02, 2.149e-02, 2.233e-01, -2.990e-02, -1.249e-01, 1.521e-01, -6.726e-02, 8.115e-02, 9.547e-02, 9.130e-02, -6.237e-02, -9.362e-02, -1.288e-01) * s[0][1][0];
	r1 += M4(5.348e-01, 2.394e-01, 3.893e-03, -3.869e-02, 1.438e-02, -1.664e-01, 9.692e-02, -5.987e-03, -5.023e-02, -2.204e-02, -1.162e-01, 5.287e-02, -5.622e-02, 1.464e-01, 8.964e-02, -2.427e-03) * s[0][1][0];
	r0 += M4(-5.760e-02, -1.746e-01, 2.324e-01, -2.860e-01, -1.024e+00, 7.357e-01, -1.942e-01, -1.519e+00, 3.154e-01, -1.444e-01, 1.906e-01, -8.348e-02, 6.544e-02, 5.430e-03, -3.067e-02, 3.877e-03) * s[0][1][1];
	r1 += M4(-3.387e-02, 1.277e-02, -8.500e-02, -1.228e-01, 1.399e+00, -1.102e+00, 2.486e-01, -1.307e+00, 4.425e-02, 1.630e-03, -9.933e-02, 4.306e-01, -8.943e-02, -5.643e-02, 4.149e-02, 2.567e-01) * s[0][1][1];
	r0 += M4(-3.454e-02, -2.373e-03, 4.218e-01, -3.372e-01, 3.911e-02, 2.459e-01, -1.485e-01, 2.294e-01, -3.044e-02, -6.030e-03, 1.121e-01, -1.873e-01, 5.659e-03, 2.168e-01, -7.236e-02, 8.121e-02) * s[0][2][0];
	r1 += M4(3.125e-01, -3.316e-02, -5.618e-02, -1.862e-01, -4.754e-02, -3.767e-02, -7.976e-02, -1.675e-01, -8.634e-03, 4.557e-02, -9.523e-02, 1.071e-01, -2.186e-01, 2.054e-02, -4.727e-02, -9.624e-03) * s[0][2][0];
	r0 += M4(1.717e-01, 5.341e-02, 5.507e-02, -1.791e-01, -7.418e-02, 5.850e-01, 3.338e-01, -3.757e-01, 9.522e-02, 2.245e-01, 1.125e-01, -3.342e-01, 1.507e-02, 9.510e-02, -1.016e-02, 7.699e-02) * s[0][2][1];
	r1 += M4(-4.335e-02, 7.050e-02, -7.146e-03, 1.646e-01, -7.572e-02, -3.491e-01, -8.732e-01, -6.939e-01, -2.350e-02, -2.123e-03, 3.447e-02, 3.037e-01, -1.133e-01, 1.508e-03, -7.244e-03, 4.631e-02) * s[0][2][1];
	r0 += M4(3.734e-01, 2.448e-01, 5.289e-02, 3.294e-02, -6.218e-02, -1.763e-01, -4.512e-02, 1.327e-02, -3.079e-02, 5.722e-03, -3.224e-02, 3.468e-01, 1.413e-01, 1.312e-01, 2.494e-01, -3.379e-02) * s[1][0][0];
	r1 += M4(7.095e-01, -9.753e-02, -2.210e-01, 1.572e-02, -8.960e-02, -1.577e-01, 3.359e-02, -7.008e-02, 1.291e-01, 2.282e-03, -2.578e-01, -1.707e-03, 1.751e-02, 3.727e-02, -2.778e-02, -3.189e-02) * s[1][0][0];
	r0 += M4(5.705e-03, 1.364e-01, 2.180e-02, 1.051e-01, -3.640e-01, 1.095e-01, -1.196e+00, -8.386e-01, 1.294e-02, 1.801e-02, -6.311e-01, 3.722e-01, -1.355e-01, -1.922e-01, 2.290e-01, 6.238e-02) * s[1][0][1];
	r1 += M4(-1.334e-02, 2.354e-02, -1.743e-02, -1.440e-01, -4.044e-01, -1.256e+00, -2.967e-01, -2.689e-01, 2.670e-01, -3.388e-01, -2.273e-01, 9.868e-02, -8.021e-02, 1.047e-01, -8.929e-02, -8.943e-02) * s[1][0][1];
	r0 += M4(1.730e-01, 5.726e-01, -3.844e-02, 1.353e-01, -1.536e-01, -2.144e-01, -4.278e-02, -1.932e-01, 2.007e-02, -1.415e-01, 3.272e-01, 3.174e-01, -2.921e-01, 4.705e-01, -4.467e-01, 2.827e-01) * s[1][1][0];
	r1 += M4(6.624e-01, 6.275e-02, 6.072e-02, -1.088e-02, -3.129e-02, 9.003e-02, 1.559e-01, -2.817e-02, -3.407e-01, -7.766e-02, 8.728e-02, -1.689e-01, 1.489e-01, -1.116e-01, 4.813e-01, -2.270e-01) * s[1][1][0];
	r0 += M4(-1.296e-01, 9.058e-02, 1.377e-01, -1.204e-01, -2.302e+00, 9.016e-01, 3.436e-01, -1.697e+00, 1.026e-01, 2.066e-01, 2.206e-01, 3.549e-01, 9.508e-02, 2.764e-02, 8.754e-02, 1.068e-01) * s[1][1][1];
	r1 += M4(1.425e-01, -1.255e-01, -2.551e-01, -1.135e-02, -1.274e+00, -2.352e+00, 3.498e-01, 2.175e-01, 2.836e-01, 7.252e-02, 3.018e-01, 1.984e-01, -1.535e-01, 1.135e-01, 6.972e-02, 1.022e-01) * s[1][1][1];
	r0 += M4(1.476e-02, 1.885e-01, 3.122e-01, -1.981e-01, -2.500e-02, 9.976e-02, 8.746e-02, 2.650e-02, 1.894e-02, -7.409e-02, -1.919e-04, 2.171e-02, -2.102e-01, -4.996e-02, 1.175e-02, -2.959e-01) * s[1][2][0];
	r1 += M4(4.873e-01, -4.940e-02, 1.595e-01, -1.044e-01, 1.603e-01, 1.567e-01, 5.256e-03, 2.717e-01, -2.577e-01, 5.975e-02, 3.414e-02, 7.895e-02, 2.098e-01, -5.232e-02, -8.450e-02, -2.406e-01) * s[1][2][0];
	r0 += M4(-3.981e-02, 6.616e-02, 2.261e-01, 1.108e-02, -1.264e+00, 1.642e+00, -1.710e+00, 1.223e-01, -1.381e-02, -1.476e-01, 2.248e-03, -2.066e-01, 6.063e-02, 6.044e-02, 1.358e-01, -1.002e-01) * s[1][2][1];
	r1 += M4(-7.898e-03, 5.248e-02, 7.670e-02, 9.113e-02, 1.815e-01, -1.296e-01, -3.360e-01, 7.761e-01, -2.013e-01, -1.014e-01, 2.138e-02, 1.089e-01, 8.537e-05, -2.704e-02, 1.047e-01, -9.763e-03) * s[1][2][1];
	r0 += M4(7.396e-02, -1.339e-01, 7.846e-02, 2.792e-02, 4.412e-02, 1.184e-01, 2.406e-02, 1.079e-01, 9.277e-02, 1.613e-01, -2.974e-02, -2.145e-02, 6.141e-02, -1.730e-02, 9.507e-02, 1.099e-01) * s[2][0][0];
	r1 += M4(2.289e-01, -4.543e-02, 4.064e-02, 1.926e-02, 2.893e-02, -1.052e-01, -1.936e-02, 5.040e-03, 4.067e-02, 7.983e-02, 1.207e-02, 3.494e-02, 6.643e-02, -7.176e-02, -8.353e-02, -1.334e-01) * s[2][0][0];
	r0 += M4(8.638e-03, 3.314e-02, 1.239e-01, -1.055e-02, -8.860e-02, 7.753e-02, 3.018e-01, -9.664e-02, 9.136e-02, 2.371e-01, -1.992e-01, -1.863e-01, 5.959e-02, 5.285e-02, 6.812e-02, 6.648e-02) * s[2][0][1];
	r1 += M4(6.883e-02, 4.110e-02, -1.049e-02, 5.108e-02, -1.067e-01, -6.442e-01, -4.457e-01, 4.729e-01, -1.575e-01, 1.893e-01, 1.027e-01, 5.197e-02, -8.554e-02, 1.251e-03, 7.999e-03, -7.452e-02) * s[2][0][1];
	r0 += M4(-9.078e-02, -1.247e-01, -1.025e-01, 2.389e-01, -5.354e-03, -3.789e-02, 2.216e-02, 5.357e-02, 2.426e-01, -1.737e-01, 8.486e-02, -2.375e-02, -2.048e-01, -3.338e-01, 2.769e-01, 2.306e-02) * s[2][1][0];
	r1 += M4(4.580e-01, 1.194e-02, 1.545e-02, 9.484e-02, -2.307e-03, -8.130e-02, -6.210e-02, -3.163e-02, 9.359e-02, -1.026e-01, -4.035e-02, -1.288e-02, -1.942e-01, 5.443e-02, -1.130e-01, -5.654e-02) * s[2][1][0];
	r0 += M4(4.790e-02, 3.572e-02, -5.032e-02, 8.007e-02, 4.029e-01, 2.471e-01, 1.791e-01, 2.397e-01, 5.450e-01, -3.004e-02, -2.769e-02, -1.548e-02, 4.397e-02, -9.356e-02, 3.913e-02, -8.740e-02) * s[2][1][1];
	r1 += M4(1.772e-01, 7.573e-02, 4.311e-02, 2.909e-02, -3.887e-01, -1.103e+00, -1.421e-01, -7.081e-01, -3.374e-01, -1.080e-01, 2.020e-02, -3.139e-01, -1.864e-01, -5.722e-02, -1.378e-01, -7.883e-02) * s[2][1][1];
	r0 += M4(-9.521e-02, 2.700e-02, -3.364e-01, -1.523e-02, 7.454e-02, -1.471e-01, 1.318e-01, -4.359e-03, -1.281e-02, -1.689e-01, -1.430e-01, -5.708e-02, -5.798e-02, 6.540e-02, -4.485e-02, 1.338e-01) * s[2][2][0];
	r1 += M4(3.475e-01, -1.003e-01, 4.510e-02, 8.982e-02, -1.833e-01, -6.956e-02, -6.951e-03, -4.938e-03, -1.140e-01, -5.914e-02, -1.006e-02, 5.552e-03, -8.183e-02, -1.129e-02, -5.042e-03, -8.655e-03) * s[2][2][0];
	r0 += M4(1.202e-02, -5.690e-02, -5.804e-02, -1.840e-01, 4.475e-01, -5.323e-01, -3.572e-01, -2.191e-01, 2.232e-02, 6.067e-03, 8.266e-02, -1.424e-01, 1.952e-02, -3.292e-03, -9.455e-02, 3.992e-02) * s[2][2][1];
	r1 += M4(-1.329e-02, -3.126e-02, -3.706e-02, 5.040e-02, -9.806e-01, -7.394e-01, -1.532e-01, -1.019e+00, 1.910e-01, -1.397e-01, 7.445e-02, 1.585e-01, -6.830e-02, -5.847e-02, -2.116e-02, 4.233e-02) * s[2][2][1];
	r0 += V4(-5.209e-03, 4.279e-02, 3.830e-02, -4.219e-03);
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(6.724e-02, -1.167e-01, -4.385e-02, -1.053e-02);
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-6x8C-RCAS-conv3
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv2
//!BIND LUMA
//!SAVE conv3
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(texelFetch(conv2_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv2_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 g[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv2_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			g[0][ay][ax] = l0(x - 1, y - 1);
			g[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s[3][3][2];
	V4 r0 = V4(0.0);
	V4 r1 = V4(0.0);
	s[0][0][0] = max(g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[0][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[0][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[0][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[0][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[0][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[0][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(4.545e-03, 1.754e-01, 8.093e-02, 8.211e-02, -2.089e-02, 2.240e-02, 4.796e-02, 5.201e-02, 1.620e-02, -3.706e-02, -1.625e-02, 1.154e-02, -1.322e-03, 2.051e-01, -2.823e-02, 7.699e-02) * s[0][0][0];
	r1 += M4(-4.831e-03, 7.855e-02, -1.171e-02, -1.143e-01, 2.017e-02, -1.116e-01, 4.853e-03, -1.348e-03, 1.689e-02, 5.069e-02, -4.771e-02, -9.705e-04, 1.601e-01, -3.635e-02, -4.018e-04, -8.521e-02) * s[0][0][0];
	r0 += M4(-1.860e-01, -3.630e-02, -4.523e-02, -4.199e-02, -3.169e-02, 7.294e-02, 1.982e-02, 3.540e-02, 9.215e-02, 1.071e-02, 7.931e-02, -1.848e-01, 5.905e-02, -3.713e-03, 3.533e-02, 4.184e-02) * s[0][0][1];
	r1 += M4(5.373e-03, 8.939e-03, 5.203e-02, -1.211e-01, -6.010e-02, -2.419e-02, -1.543e-01, -1.090e-01, -9.288e-03, -5.173e-02, -1.496e-01, -5.211e-02, -1.616e-03, 5.506e-02, -8.129e-02, 4.308e-02) * s[0][0][1];
	r0 += M4(5.270e-02, 3.975e-02, -1.456e-04, -1.874e-01, -1.278e-01, 9.227e-02, 8.356e-02, -7.510e-02, -7.691e-02, 5.860e-02, 1.061e-01, 1.313e-01, -4.170e-02, 2.185e-01, -4.064e-02, -8.507e-02) * s[0][1][0];
	r1 += M4(8.049e-02, -2.369e-01, -7.953e-02, -2.808e-02, -5.989e-02, 3.501e-02, 3.420e-02, 2.793e-01, 2.495e-01, -8.296e-02, -4.866e-02, 8.325e-02, 7.003e-02, -1.463e-01, -1.925e-01, 3.001e-02) * s[0][1][0];
	r0 += M4(3.720e-02, 5.434e-02, -1.479e-01, -2.320e-01, -1.317e-01, 5.483e-02, -5.773e-02, -1.531e-02, -7.621e-03, 1.763e-01, 4.034e-03, -1.970e-01, -1.171e-01, 4.292e-01, -9.417e-02, 1.192e-01) * s[0][1][1];
	r1 += M4(7.870e-03, -1.997e-01, -1.611e-01, -2.037e-01, 5.257e-02, 5.295e-02, -5.358e-02, 2.085e-01, 9.167e-02, -7.815e-02, -2.410e-01, 8.974e-02, 1.033e-01, 6.076e-02, -2.362e-01, -1.154e-01) * s[0][1][1];
	r0 += M4(1.324e-01, -7.965e-02, -5.879e-02, -7.710e-02, -8.164e-02, 1.276e-01, -3.721e-02, -1.466e-02, -1.143e-01, 8.611e-02, -2.790e-01, -6.159e-02, -1.391e-01, 8.168e-02, 1.557e-02, -1.460e-01) * s[0][2][0];
	r1 += M4(7.787e-02, 5.006e-03, 7.554e-03, 9.885e-02, -7.757e-02, 1.272e-01, -4.513e-02, 4.646e-02, -9.510e-02, 1.500e-01, 6.368e-02, 5.791e-02, 8.310e-02, 5.815e-02, 3.973e-02, 6.706e-02) * s[0][2][0];
	r0 += M4(4.269e-01, -1.180e-01, 1.672e-01, -1.052e-01, -1.407e-01, 1.398e-02, -7.101e-02, -8.644e-02, 9.566e-02, 1.623e-02, -2.747e-01, -2.735e-01, 3.712e-02, -1.959e-02, -2.754e-02, -1.726e-03) * s[0][2][1];
	r1 += M4(-4.276e-03, 5.639e-02, -1.955e-01, -9.522e-02, -9.614e-03, 1.022e-01, 5.617e-02, 1.497e-02, -1.430e-01, 1.543e-01, 1.682e-02, -6.367e-03, -1.503e-02, 8.017e-02, -3.733e-02, 6.272e-02) * s[0][2][1];
	r0 += M4(-7.773e-02, -3.445e-02, -2.098e-02, 1.756e-01, 4.881e-02, -3.145e-02, -1.690e-01, -7.818e-02, -1.000e-01, -1.558e-01, 1.027e-01, 9.924e-02, -1.144e-01, 1.907e-01, -3.814e-02, -8.225e-02) * s[1][0][0];
	r1 += M4(1.191e-01, 2.652e-02, -1.012e-02, -3.434e-02, 7.837e-02, 3.044e-02, 2.345e-02, 7.549e-02, -8.612e-02, 8.178e-02, 9.192e-02, 9.476e-03, 1.070e-01, -8.277e-02, -6.465e-02, -5.730e-02) * s[1][0][0];
	r0 += M4(3.099e-02, -9.171e-02, -2.434e-03, 2.591e-01, -1.455e-01, -1.316e-01, 3.168e-02, -2.812e-02, 9.359e-03, -6.224e-02, 9.178e-02, 1.741e-01, -1.866e-01, -8.912e-02, -5.715e-03, 1.076e-02) * s[1][0][1];
	r1 += M4(-1.821e-01, 8.223e-02, -4.705e-02, 2.668e-02, 2.923e-02, 5.509e-02, 1.650e-01, -9.066e-02, -3.272e-02, 1.921e-01, -4.400e-02, 1.638e-01, 7.188e-02, 4.070e-03, 2.079e-02, -1.832e-01) * s[1][0][1];
	r0 += M4(1.704e-02, 9.952e-02, 1.543e-01, 3.147e-01, 8.587e-02, 3.249e-02, 1.509e-01, 1.509e-02, 1.734e-01, 1.789e-01, -3.055e-01, -6.769e-02, -1.645e-01, -1.809e-02, -3.672e-02, -1.150e-01) * s[1][1][0];
	r1 += M4(-3.319e-01, -1.274e-01, -1.108e-01, 3.789e-01, 4.094e-03, -9.914e-02, 2.878e-01, -1.164e-01, 3.196e-01, 1.893e-01, -1.071e-01, 1.395e-01, -2.177e-01, 3.766e-03, 1.698e-01, -1.646e-01) * s[1][1][0];
	r0 += M4(-4.362e-02, 4.484e-01, 2.642e-01, -5.609e-02, 3.642e-01, 6.420e-02, -2.477e-01, -2.267e-01, 2.963e-01, -8.963e-02, -6.474e-01, -7.476e-02, -2.893e-01, 1.150e-01, -2.462e-01, -4.319e-01) * s[1][1][1];
	r1 += M4(1.521e-01, -1.358e-01, 2.072e-01, 5.407e-01, 1.512e-01, -4.458e-02, 2.213e-01, -1.611e-01, -1.678e-01, 4.620e-01, -4.003e-02, 3.573e-01, 8.395e-02, 1.668e-02, -6.652e-02, -8.208e-02) * s[1][1][1];
	r0 += M4(2.350e-01, 1.746e-02, -8.774e-02, 9.790e-02, 2.597e-01, 2.914e-02, 1.599e-01, 7.480e-02, 1.168e-01, 6.192e-02, 1.742e-01, -2.477e-02, 1.781e-01, -1.168e-01, 2.229e-01, 2.936e-02) * s[1][2][0];
	r1 += M4(-4.267e-02, -2.097e-01, 1.548e-01, -9.050e-02, -2.084e-01, -5.001e-02, 2.600e-02, -7.475e-02, -5.474e-02, -4.897e-02, -6.649e-03, -9.805e-02, -8.659e-02, -1.041e-01, -2.646e-01, 8.276e-02) * s[1][2][0];
	r0 += M4(-2.990e-01, -2.216e-01, -4.964e-01, 2.365e-03, 1.915e-01, -6.514e-02, 2.240e-02, -1.256e-01, 4.251e-01, -1.246e-01, 7.657e-02, -1.604e-01, 7.212e-02, -1.264e-01, 1.146e-01, -2.403e-01) * s[1][2][1];
	r1 += M4(5.224e-02, -1.111e-01, 2.077e-01, 4.006e-01, -1.053e-01, 4.466e-02, 1.588e-01, 8.313e-02, -3.126e-01, 4.453e-01, 3.972e-02, -3.134e-01, -4.608e-02, 6.762e-02, -2.807e-01, 4.949e-04) * s[1][2][1];
	r0 += M4(-2.248e-02, -1.342e-01, -9.401e-02, -7.610e-02, -2.210e-02, 4.725e-02, 2.214e-02, -8.482e-02, -1.781e-03, 3.313e-02, -3.938e-02, -4.923e-02, -2.714e-02, -4.026e-02, 4.266e-02, 1.645e-01) * s[2][0][0];
	r1 += M4(2.001e-02, 8.992e-02, -3.893e-02, -2.277e-02, -2.839e-02, 5.021e-03, 5.202e-02, 1.013e-01, 8.970e-02, -2.167e-02, -4.244e-02, -1.075e-02, 9.288e-02, 3.915e-02, 1.272e-01, 3.108e-02) * s[2][0][0];
	r0 += M4(1.285e-01, -5.301e-02, -9.105e-02, -1.107e-01, -5.966e-02, -1.204e-01, 9.599e-03, 9.051e-02, 1.083e-01, -9.807e-03, -3.186e-02, -8.321e-02, -3.625e-02, -9.685e-02, -3.746e-02, 1.337e-02) * s[2][0][1];
	r1 += M4(-8.043e-02, -2.707e-02, 3.011e-02, 3.416e-02, 5.116e-02, 2.595e-02, 3.207e-02, -3.596e-02, -8.328e-02, -1.833e-01, -3.440e-02, 7.395e-02, 1.605e-01, -7.009e-02, 6.911e-02, -1.163e-01) * s[2][0][1];
	r0 += M4(1.586e-01, 1.829e-01, 1.668e-01, -2.635e-02, -2.647e-01, -8.906e-02, 7.330e-02, 1.674e-01, 3.693e-02, 5.840e-02, -2.486e-01, 1.590e-03, -3.453e-01, -8.145e-02, 1.243e-01, 2.341e-01) * s[2][1][0];
	r1 += M4(-5.502e-02, 1.223e-01, -1.476e-01, 3.033e-02, 1.462e-01, -1.812e-01, -1.734e-02, -2.782e-01, -8.277e-02, -5.688e-02, 2.061e-02, 1.821e-01, -6.017e-02, -1.686e-01, 1.138e-01, -2.238e-01) * s[2][1][0];
	r0 += M4(1.548e-01, 1.654e-01, 1.235e-03, -5.960e-03, 1.784e-02, 7.482e-02, 1.177e-02, 1.354e-01, 2.107e-01, 7.687e-02, -2.152e-01, -2.744e-01, -1.902e-01, -4.503e-02, 1.647e-02, 8.850e-02) * s[2][1][1];
	r1 += M4(-3.535e-01, 1.741e-01, -3.152e-01, 7.458e-02, 1.947e-01, -3.474e-01, 1.602e-01, -8.179e-02, -1.309e-02, 2.306e-01, -1.618e-01, 2.537e-01, 9.608e-03, -2.166e-01, 2.051e-01, -3.179e-02) * s[2][1][1];
	r0 += M4(-6.586e-02, -9.789e-02, 5.339e-02, 2.647e-02, 1.741e-01, 7.637e-03, 1.362e-01, 1.480e-01, -1.467e-01, -5.724e-02, 7.981e-02, 1.138e-01, -1.615e-02, 4.810e-02, 1.136e-01, 3.905e-02) * s[2][2][0];
	r1 += M4(8.101e-02, 1.721e-02, 1.899e-02, -2.425e-01, -3.654e-02, -4.542e-02, 1.617e-01, -2.742e-02, 7.659e-02, -2.215e-02, 4.255e-02, -1.304e-01, 5.792e-02, -2.940e-01, 1.124e-01, 6.594e-02) * s[2][2][0];
	r0 += M4(-4.242e-01, -2.847e-01, -3.373e-02, 1.365e-01, 8.502e-02, -2.929e-02, -6.153e-02, 9.251e-02, 7.501e-02, 1.363e-01, 5.889e-02, -1.240e-01, 2.045e-01, 1.460e-02, 1.613e-01, 5.619e-02) * s[2][2][1];
	r1 += M4(2.464e-01, -1.240e-01, -5.857e-02, -1.642e-01, -2.635e-02, -5.647e-02, 8.092e-02, 2.734e-02, 9.201e-02, 3.075e-01, 8.238e-02, -2.892e-04, -4.822e-02, 1.266e-02, 8.540e-02, -1.058e-02) * s[2][2][1];
	s[0][0][0] = max(g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[1][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[1][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[1][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[1][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[1][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[1][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(-1.689e-02, -2.509e-02, -3.331e-02, 1.587e-02, 1.868e-01, 2.237e-01, 2.430e-02, 2.852e-01, 2.327e-02, 1.001e-01, 3.440e-02, -5.830e-04, 1.215e-02, -3.470e-02, 1.064e-01, -2.444e-02) * s[0][0][0];
	r1 += M4(-6.238e-02, -6.079e-04, 1.245e-01, 1.719e-02, -2.359e-01, 1.593e-01, 1.486e-01, 3.503e-01, -1.172e-01, 1.732e-01, -1.725e-01, 5.597e-02, -7.035e-02, -4.475e-02, -3.333e-02, 2.157e-02) * s[0][0][0];
	r0 += M4(2.620e-02, 3.351e-02, -3.496e-01, -2.457e-02, -1.004e-02, 1.200e-01, -8.457e-03, 1.234e-01, 8.800e-02, 2.594e-01, 9.219e-02, -2.304e-02, 1.554e-02, -1.171e-01, -1.440e-01, 9.213e-02) * s[0][0][1];
	r1 += M4(3.415e-02, -1.634e-01, -5.250e-02, -2.784e-01, -2.582e-02, 6.729e-02, -1.004e-02, 9.090e-02, -1.396e-01, 4.104e-02, -8.930e-02, -6.782e-02, 2.908e-02, 2.673e-02, -5.138e-02, 2.412e-02) * s[0][0][1];
	r0 += M4(1.831e-01, -1.365e-01, -1.948e-01, -7.831e-02, 2.181e-01, -1.221e-01, 4.401e-02, -2.280e-01, 3.474e-02, -2.180e-01, -4.408e-02, -4.192e-03, -1.311e-02, 8.143e-02, 3.494e-02, 2.657e-02) * s[0][1][0];
	r1 += M4(-1.908e-01, 5.213e-02, -3.906e-02, -1.675e-01, -7.960e-01, 6.154e-03, 2.995e-01, 1.713e-01, 1.757e-01, 1.167e-01, 2.881e-02, -1.176e-01, -8.925e-02, 9.153e-02, 8.965e-03, 8.730e-02) * s[0][1][0];
	r0 += M4(8.507e-02, -1.343e-01, -5.475e-02, -1.626e-01, -1.787e-02, -3.017e-01, -4.727e-02, -6.967e-02, 1.054e-01, 5.080e-03, 1.325e-01, -2.038e-01, 9.999e-02, 1.499e-03, 4.802e-02, 2.057e-01) * s[0][1][1];
	r1 += M4(7.514e-02, -2.387e-01, -3.501e-01, 1.096e-03, 3.512e-02, -1.886e-01, 5.142e-02, -6.958e-02, -1.548e-01, -7.286e-02, -1.840e-01, -7.087e-02, 4.496e-02, 6.913e-02, -1.746e-03, 2.082e-02) * s[0][1][1];
	r0 += M4(-1.102e-01, -7.521e-02, 1.872e-01, -8.538e-02, 1.100e-01, 4.178e-01, 4.127e-01, -1.010e-01, 7.531e-02, -3.096e-02, -7.896e-02, 1.502e-01, -1.346e-01, 1.305e-02, -3.212e-03, -1.790e-03) * s[0][2][0];
	r1 += M4(9.940e-02, -3.377e-01, 6.644e-02, -1.712e-01, -5.854e-01, -3.300e-01, -2.064e-01, 1.689e-01, -4.173e-02, -6.735e-02, 5.025e-02, 8.059e-02, 1.851e-02, 2.661e-02, -2.343e-02, -4.681e-02) * s[0][2][0];
	r0 += M4(1.833e-01, -2.066e-01, -3.073e-02, 5.648e-02, -4.401e-02, 1.315e-01, 4.309e-02, -7.349e-02, 1.249e-01, -7.205e-02, 5.737e-03, 5.449e-02, 2.084e-02, 1.255e-01, -4.555e-02, 1.012e-01) * s[0][2][1];
	r1 += M4(-6.955e-02, -5.814e-02, 9.233e-02, -1.238e-01, -2.857e-02, -1.431e-02, 5.738e-02, -1.232e-01, -1.639e-01, 1.249e-01, -9.429e-02, 5.401e-02, -3.986e-02, 9.091e-02, 8.088e-02, -3.612e-02) * s[0][2][1];
	r0 += M4(5.802e-03, 1.333e-02, 2.778e-02, -1.370e-02, 6.430e-02, 1.154e-01, -2.639e-01, -4.865e-02, -1.481e-01, -8.674e-03, -1.125e-01, 2.863e-01, 7.346e-02, 2.476e-01, -6.751e-02, -1.892e-01) * s[1][0][0];
	r1 += M4(1.063e-01, -3.977e-02, -5.499e-02, -9.816e-03, -6.656e-02, -5.193e-02, -2.447e-01, 4.277e-02, -5.148e-03, -6.968e-02, 2.802e-01, 3.006e-02, -1.752e-01, -1.053e-01, -4.643e-02, 5.240e-02) * s[1][0][0];
	r0 += M4(-1.142e-02, -1.245e-01, -2.422e-01, 2.277e-02, 4.139e-02, 7.683e-05, -4.241e-02, 2.780e-03, -1.284e-01, -4.804e-02, -2.805e-02, 1.617e-01, 1.550e-01, 1.748e-01, 1.667e-01, -1.960e-01) * s[1][0][1];
	r1 += M4(2.276e-01, -1.743e-01, 3.223e-01, -1.899e-01, 1.709e-02, -3.607e-02, -1.346e-01, -1.550e-01, -8.939e-03, 6.510e-03, 1.077e-01, -4.150e-02, 1.655e-01, 1.211e-01, -4.305e-01, 2.395e-01) * s[1][0][1];
	r0 += M4(-7.154e-02, -4.238e-02, 1.652e-01, 2.878e-01, -7.560e-02, 4.197e-02, 4.121e-01, 5.036e-01, 5.012e-01, 6.373e-01, -3.603e-01, 7.615e-02, 1.721e-01, 4.786e-03, -5.098e-02, -4.699e-01) * s[1][1][0];
	r1 += M4(-3.971e-01, 2.081e-01, 2.395e-01, 1.158e-01, -1.379e+00, 1.044e+00, 6.441e-01, 5.716e-01, 5.682e-01, -3.113e-01, 9.996e-02, -1.141e-01, -2.138e-01, 2.513e-01, 1.198e-01, -1.619e-01) * s[1][1][0];
	r0 += M4(-1.427e-01, -1.526e-01, -9.834e-02, 2.665e-01, -1.080e-01, 3.643e-02, 1.605e-01, -8.529e-02, -1.471e-01, 2.784e-01, 8.094e-02, -9.102e-02, 3.432e-01, -1.469e-01, -2.920e-01, -4.268e-02) * s[1][1][1];
	r1 += M4(6.356e-02, 2.444e-01, 4.836e-01, 2.002e-02, -3.663e-02, 1.225e-01, 2.065e-01, 1.888e-01, 1.917e-01, -2.292e-01, 4.047e-02, 8.556e-02, -3.930e-02, 5.605e-01, -2.420e-01, -7.209e-01) * s[1][1][1];
	r0 += M4(3.613e-02, -6.149e-02, -8.003e-02, -3.174e-02, -7.097e-01, -4.095e-01, -1.937e-02, 9.421e-01, 4.862e-01, 5.684e-01, 3.185e-01, -1.947e-01, -5.071e-02, 7.788e-02, 2.365e-01, 3.504e-02) * s[1][2][0];
	r1 += M4(4.613e-02, -3.300e-02, 1.493e-01, 1.756e-01, -6.988e-01, -9.126e-01, 7.682e-02, 6.176e-01, -2.376e-01, -1.747e-02, -1.664e-01, -5.189e-01, 9.694e-03, -5.588e-02, -1.226e-01, -3.725e-02) * s[1][2][0];
	r0 += M4(7.107e-02, -4.686e-02, -3.731e-01, -2.818e-02, 4.036e-02, -1.923e-02, -9.645e-02, -3.802e-02, -2.612e-04, 1.217e-01, 1.199e-01, 2.846e-02, -9.587e-02, 1.156e-01, 1.914e-01, 2.718e-01) * s[1][2][1];
	r1 += M4(-1.250e-01, -3.837e-02, 2.262e-01, 1.128e-01, 1.180e-01, 9.506e-02, 4.901e-02, 1.579e-01, -1.515e-01, 2.082e-01, 1.299e-01, -2.863e-01, 3.021e-02, -8.052e-02, -4.316e-02, -3.110e-01) * s[1][2][1];
	r0 += M4(-5.554e-02, -6.321e-02, 5.182e-03, 1.996e-02, 2.381e-01, 5.258e-02, 1.317e-01, 1.258e-01, 1.554e-01, -1.607e-01, 3.834e-02, 3.741e-03, 2.078e-01, -5.084e-02, -3.418e-02, 2.766e-02) * s[2][0][0];
	r1 += M4(-3.453e-03, 7.254e-03, 3.525e-02, -9.443e-03, -6.725e-02, 1.544e-01, -4.214e-02, 5.345e-02, -8.357e-03, 1.203e-01, -1.409e-01, 1.212e-01, -2.013e-01, -7.207e-02, -7.277e-02, 7.957e-03) * s[2][0][0];
	r0 += M4(-9.401e-02, -9.013e-02, -2.764e-02, 6.912e-02, -2.794e-02, 1.473e-02, 9.586e-02, 3.466e-02, -1.990e-02, -2.172e-01, -1.009e-01, -9.069e-02, 5.302e-02, -6.351e-02, 1.070e-02, 2.341e-01) * s[2][0][1];
	r1 += M4(1.798e-02, 5.336e-02, -1.482e-02, 2.207e-02, -3.062e-02, 6.947e-02, 6.288e-03, 2.837e-03, -7.587e-02, 8.146e-02, -6.227e-02, -2.778e-02, 6.726e-02, 1.168e-01, 5.083e-02, 6.251e-02) * s[2][0][1];
	r0 += M4(3.155e-02, 3.305e-02, -1.423e-01, -1.150e-01, 1.524e-01, 1.782e-01, -2.705e-01, -5.146e-01, 1.853e-01, 2.296e-01, 1.201e-01, -5.528e-02, 2.999e-01, 6.121e-02, 2.970e-01, 7.690e-02) * s[2][1][0];
	r1 += M4(5.587e-02, -4.681e-02, 8.919e-02, -3.297e-02, -1.605e-01, -1.057e-01, -4.983e-01, -3.103e-01, 5.251e-03, 2.435e-01, 1.205e-01, 1.164e-01, -1.384e-01, 1.042e-01, 7.531e-02, 2.040e-01) * s[2][1][0];
	r0 += M4(-4.461e-02, 2.659e-02, -2.529e-01, -2.792e-02, 2.334e-02, -5.732e-02, -2.609e-02, -1.600e-02, 7.645e-02, 1.396e-01, 2.335e-02, -1.851e-01, -1.001e-01, 1.187e-03, 2.633e-01, 3.370e-01) * s[2][1][1];
	r1 += M4(-3.239e-02, -9.643e-02, 7.573e-02, 4.324e-02, 1.071e-02, -7.399e-03, 3.310e-02, -6.321e-02, -1.722e-01, 5.642e-02, 8.465e-03, 2.076e-01, 1.267e-01, -1.083e-01, 1.611e-01, -2.667e-01) * s[2][1][1];
	r0 += M4(2.210e-02, 3.644e-02, -1.650e-02, 1.385e-02, 4.441e-01, -6.072e-02, -2.726e-01, 1.670e-01, 8.698e-02, -1.378e-01, 3.026e-01, 1.466e-01, -6.132e-02, -3.270e-02, -8.862e-02, -8.056e-02) * s[2][2][0];
	r1 += M4(-2.537e-02, 2.085e-03, 6.798e-02, 7.903e-02, -1.709e-01, -3.520e-03, -4.628e-02, 5.750e-01, -2.521e-02, -7.292e-02, -8.383e-02, -1.115e-01, -1.912e-02, 7.773e-02, 1.130e-01, -2.693e-02) * s[2][2][0];
	r0 += M4(-2.862e-02, 4.285e-02, -9.854e-02, -1.489e-03, -5.517e-02, -3.977e-03, -1.297e-01, 2.436e-02, -2.261e-02, -7.051e-02, 2.134e-01, -3.215e-02, -1.506e-01, -5.149e-02, -1.367e-01, 8.554e-02) * s[2][2][1];
	r1 += M4(2.021e-02, -1.244e-01, 7.691e-02, 4.743e-02, -2.982e-02, 1.087e-02, -1.577e-01, -3.551e-02, -3.581e-02, -1.313e-01, -3.531e-03, -7.446e-02, -1.122e-02, -1.166e-01, 1.165e-01, -2.910e-02) * s[2][2][1];
	r0 += V4(-5.684e-02, -2.147e-02, -2.245e-02, -2.399e-02);
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-2.014e-03, 4.334e-02, 2.532e-02, -1.427e-02);
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-6x8C-RCAS-conv4
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv3
//!BIND LUMA
//!SAVE conv4
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(texelFetch(conv3_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv3_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 g[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv3_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			g[0][ay][ax] = l0(x - 1, y - 1);
			g[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s[3][3][2];
	V4 r0 = V4(0.0);
	V4 r1 = V4(0.0);
	s[0][0][0] = max(g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[0][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[0][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[0][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[0][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[0][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[0][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(-7.310e-02, 1.918e-03, -4.943e-02, -1.958e-02, -5.539e-03, 5.619e-02, 5.708e-03, -5.917e-02, -1.808e-02, -2.595e-02, 4.118e-02, 1.180e-01, -4.240e-02, -6.925e-02, -6.088e-02, 5.026e-02) * s[0][0][0];
	r1 += M4(5.108e-02, -5.669e-02, 3.604e-02, 4.103e-02, 6.656e-02, 9.546e-02, 7.332e-02, -8.070e-02, -1.029e-01, 3.137e-02, 6.031e-02, 8.456e-02, -7.495e-02, -2.606e-02, -1.029e-01, 1.537e-01) * s[0][0][0];
	r0 += M4(-3.498e-02, -1.040e-01, 1.853e-01, -1.902e-01, 3.321e-02, 3.437e-02, 5.962e-02, 4.254e-02, -1.458e-01, -1.165e-01, 1.066e-01, 1.601e-01, -9.831e-02, 4.001e-02, -1.716e-01, 2.983e-02) * s[0][0][1];
	r1 += M4(4.533e-02, -1.085e-01, -1.924e-01, -3.735e-01, 4.543e-02, 3.795e-02, 5.896e-02, -1.373e-01, 3.151e-02, 2.062e-02, 5.935e-02, 1.538e-02, 5.635e-02, -1.372e-01, -9.707e-02, 2.446e-01) * s[0][0][1];
	r0 += M4(2.463e-01, -3.497e-02, -2.004e-01, -1.101e-01, 9.853e-03, 4.949e-02, -7.755e-02, -3.910e-02, -8.985e-03, -8.175e-02, 1.095e-01, 9.046e-02, -6.403e-02, -1.033e-01, 8.083e-02, -1.643e-02) * s[0][1][0];
	r1 += M4(3.385e-02, -1.255e-01, -1.738e-01, 1.910e-02, -2.549e-02, -3.411e-02, -5.291e-02, 1.269e-01, -5.977e-02, 2.304e-03, 1.570e-02, 3.911e-03, -3.097e-01, -4.706e-02, -1.022e-01, 1.467e-01) * s[0][1][0];
	r0 += M4(1.622e-01, -1.274e-01, -7.569e-02, -1.883e-01, 2.219e-02, 5.469e-02, 3.915e-03, -5.810e-02, 3.177e-02, -3.648e-02, 1.772e-01, 4.006e-01, -1.153e-01, 1.227e-01, 1.156e-01, -6.231e-03) * s[0][1][1];
	r1 += M4(-1.383e-02, -1.150e-01, -1.725e-01, -1.648e-01, 1.034e-01, -4.309e-02, 1.447e-02, 8.949e-02, 3.523e-02, 1.886e-02, 4.702e-02, 4.120e-02, 1.274e-01, -2.233e-01, -8.785e-02, -2.104e-01) * s[0][1][1];
	r0 += M4(2.390e-02, -2.079e-02, 6.567e-02, 6.578e-02, -1.537e-02, -1.225e-02, 7.891e-02, 3.391e-02, -6.503e-02, -5.909e-03, -4.157e-02, 1.704e-02, -6.119e-03, -5.924e-02, 5.300e-02, 8.020e-02) * s[0][2][0];
	r1 += M4(2.562e-02, -2.612e-02, 3.167e-03, -8.322e-02, -2.038e-02, 2.525e-02, 7.390e-02, -1.511e-02, 7.076e-02, 5.688e-04, 4.165e-02, -6.530e-02, 5.447e-02, 6.180e-02, 5.342e-02, -9.646e-02) * s[0][2][0];
	r0 += M4(1.284e-01, -5.937e-03, 3.304e-02, 5.973e-02, 8.004e-02, 3.432e-02, -2.153e-02, 5.873e-02, -1.084e-01, -8.733e-02, -5.312e-02, 2.474e-01, 9.333e-03, -8.475e-03, -3.843e-02, 1.105e-01) * s[0][2][1];
	r1 += M4(3.784e-02, 3.537e-02, -1.414e-03, 1.151e-02, -1.387e-01, 8.554e-03, -2.670e-02, 1.626e-01, -2.583e-02, 1.859e-03, 5.765e-02, 2.946e-02, -8.682e-02, -1.704e-01, -3.670e-02, 7.398e-02) * s[0][2][1];
	r0 += M4(5.018e-02, 1.033e-01, -6.172e-02, 8.320e-02, -5.255e-03, -9.573e-02, -7.419e-04, 7.496e-02, 1.004e-01, 1.821e-01, 7.298e-02, -1.249e-03, 1.164e-01, 1.260e-01, -3.836e-02, -2.833e-03) * s[1][0][0];
	r1 += M4(7.323e-02, -1.750e-02, 7.568e-02, -1.552e-02, -2.240e-02, -1.286e-01, 3.513e-02, -5.014e-02, -6.849e-02, 3.412e-02, 1.449e-01, 1.379e-01, -1.321e-01, 7.919e-02, -4.793e-02, 2.371e-01) * s[1][0][0];
	r0 += M4(-1.433e-01, -6.406e-02, 3.796e-02, -6.080e-02, -9.502e-02, -1.153e-01, 1.913e-01, -5.885e-04, 1.876e-01, 2.430e-01, 8.383e-02, 6.397e-01, 4.790e-02, 2.419e-01, -2.110e-01, -3.534e-02) * s[1][0][1];
	r1 += M4(1.791e-01, -9.763e-02, -2.017e-01, -4.280e-01, 7.961e-02, -2.084e-01, -5.092e-02, -2.951e-01, -3.713e-01, 4.964e-02, 7.466e-02, 4.562e-01, -3.088e-01, -1.477e-02, -2.414e-01, 1.218e-01) * s[1][0][1];
	r0 += M4(1.665e-01, 2.012e-01, -1.186e-01, 7.138e-02, -9.396e-02, 2.848e-03, -2.029e-02, -8.052e-02, 6.726e-02, 4.719e-02, -2.874e-01, -1.682e-01, 4.917e-02, 3.919e-01, 6.894e-02, -2.240e-01) * s[1][1][0];
	r1 += M4(8.696e-02, -4.560e-01, 1.555e-01, 1.169e-01, 1.551e-01, -2.368e-01, -2.168e-01, 4.169e-03, 7.745e-02, 2.320e-01, -1.355e-01, 5.780e-02, -1.177e-03, 1.667e-01, 8.031e-02, 2.353e-02) * s[1][1][0];
	r0 += M4(-5.153e-02, -3.936e-02, 2.102e-01, 5.586e-04, 4.257e-01, -3.548e-03, 1.939e-02, -5.042e-01, -6.412e-01, 1.510e-02, 1.553e-01, 5.455e-01, -2.333e-01, 1.382e-01, 1.391e-01, -1.575e-01) * s[1][1][1];
	r1 += M4(2.885e-01, -2.679e-01, 9.531e-03, -8.768e-02, 1.481e-01, 7.368e-02, -3.636e-01, -6.298e-01, 1.553e-01, 5.159e-01, 1.175e-01, -2.199e-01, -6.248e-01, 2.789e-01, 1.153e-02, -1.627e-01) * s[1][1][1];
	r0 += M4(-5.949e-02, -1.980e-02, 6.618e-02, -7.793e-03, 1.135e-01, -2.602e-02, -1.480e-01, -9.468e-02, -8.547e-03, 1.595e-01, 7.802e-02, 6.843e-02, 1.440e-02, -7.462e-03, -6.495e-02, 6.220e-02) * s[1][2][0];
	r1 += M4(-1.166e-02, -1.594e-03, 7.437e-02, -1.251e-01, -2.488e-01, -9.878e-02, -1.392e-01, 1.872e-01, 2.336e-01, -2.066e-02, 1.004e-01, -6.145e-02, -7.125e-02, -3.563e-02, -1.973e-01, 2.345e-02) * s[1][2][0];
	r0 += M4(3.178e-02, -8.061e-02, 2.377e-02, 4.348e-03, 2.286e-01, -1.717e-01, 3.398e-02, -1.248e-01, -8.268e-02, 3.048e-01, -2.182e-01, 3.036e-02, 5.647e-02, 1.310e-01, -1.390e-01, -1.406e-01) * s[1][2][1];
	r1 += M4(-4.805e-02, -9.161e-02, -3.958e-02, -2.096e-02, -4.380e-01, 1.120e-01, -2.727e-02, 3.410e-01, 4.430e-02, -5.042e-02, -1.213e-02, 1.412e-01, -1.143e-02, -2.137e-01, -3.022e-01, 6.188e-02) * s[1][2][1];
	r0 += M4(-5.064e-02, -4.891e-02, -3.190e-02, -5.174e-03, 1.105e-01, 7.936e-02, 3.388e-02, 1.023e-01, -9.655e-03, -3.854e-02, -8.984e-03, -5.995e-02, 3.700e-02, 1.329e-01, 3.025e-02, 1.617e-02) * s[2][0][0];
	r1 += M4(2.320e-02, -2.611e-02, -1.442e-02, -1.981e-02, -6.693e-02, 9.287e-02, 1.726e-02, 3.796e-02, 7.098e-03, -2.486e-02, -2.162e-02, -4.859e-02, 4.780e-02, 1.210e-02, 2.332e-02, 1.180e-02) * s[2][0][0];
	r0 += M4(2.370e-02, 9.319e-03, -1.192e-01, -8.897e-02, 2.072e-02, -3.328e-02, -4.787e-02, 7.314e-02, 1.145e-02, 3.016e-01, 1.844e-01, 2.075e-01, 1.258e-01, 5.099e-02, 2.352e-01, -5.166e-02) * s[2][0][1];
	r1 += M4(2.312e-02, -3.951e-02, -1.853e-02, -5.996e-03, 1.222e-01, 3.271e-01, -1.084e-01, -9.418e-02, 5.600e-02, -3.807e-02, 1.467e-01, 2.770e-01, -2.057e-01, 6.671e-02, -2.103e-03, -2.172e-01) * s[2][0][1];
	r0 += M4(-2.990e-02, -5.331e-02, 4.067e-03, -5.334e-02, -1.973e-01, -1.529e-01, -1.037e-01, -4.375e-02, 1.124e-02, -9.133e-03, 1.101e-01, 1.100e-01, -1.861e-01, 1.422e-01, -2.271e-01, 7.920e-02) * s[2][1][0];
	r1 += M4(6.004e-02, -3.940e-02, 8.703e-02, -8.030e-02, 9.352e-02, -7.728e-02, -1.799e-01, -8.234e-02, 5.342e-02, -1.124e-02, -1.004e-02, -6.294e-03, 2.980e-01, 1.683e-02, -4.071e-02, -1.395e-01) * s[2][1][0];
	r0 += M4(-2.023e-02, 4.660e-02, -3.176e-02, -4.962e-02, 9.244e-02, -4.598e-01, -3.560e-03, 2.568e-01, -1.031e-01, 2.193e-01, 3.006e-02, 1.616e-01, 1.181e-01, -1.946e-01, -5.325e-02, -2.556e-01) * s[2][1][1];
	r1 += M4(-4.343e-02, -1.138e-01, 3.513e-02, -8.669e-02, 3.223e-01, -1.635e-01, 1.971e-02, -8.025e-02, 1.207e-01, 9.272e-02, 7.342e-02, -1.916e-02, 1.141e-03, -2.881e-01, -1.458e-01, -1.439e-01) * s[2][1][1];
	r0 += M4(-4.176e-02, 4.461e-02, -1.929e-02, 2.196e-02, 8.903e-02, 4.921e-02, 1.507e-02, -7.791e-02, -5.759e-02, 6.816e-02, -8.911e-02, -3.107e-02, 1.468e-02, 1.501e-01, -3.001e-02, 6.234e-02) * s[2][2][0];
	r1 += M4(1.024e-01, -2.284e-02, 4.550e-03, -9.690e-02, -7.451e-02, -3.129e-02, 5.076e-02, 1.174e-01, -1.130e-01, -4.157e-03, -2.512e-02, -1.203e-03, -3.881e-02, -9.499e-02, 2.813e-02, 2.593e-02) * s[2][2][0];
	r0 += M4(4.567e-02, 7.284e-02, 1.088e-01, 1.358e-01, 1.685e-02, -5.316e-02, 6.904e-03, 1.511e-01, -6.693e-02, -7.881e-02, 3.726e-02, 1.574e-02, 1.563e-01, 2.090e-01, 3.818e-02, 1.160e-01) * s[2][2][1];
	r1 += M4(1.207e-01, 6.251e-02, -2.082e-02, 1.702e-02, -2.548e-01, 5.906e-02, 3.286e-01, 1.675e-01, -1.371e-01, 5.558e-02, -1.608e-03, 2.997e-02, 8.594e-02, -5.706e-02, 3.672e-02, 6.908e-02) * s[2][2][1];
	s[0][0][0] = max(g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[1][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[1][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[1][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[1][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[1][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[1][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(-4.899e-02, -1.180e-02, 3.262e-02, 1.307e-02, 1.227e-01, 6.036e-02, 1.512e-01, 6.024e-02, 1.989e-02, 9.261e-04, 4.619e-02, -7.313e-03, 2.148e-02, 1.124e-01, -8.100e-04, -3.160e-02) * s[0][0][0];
	r1 += M4(1.759e-03, 1.128e-02, 1.548e-02, -9.274e-02, -9.757e-02, -8.287e-04, -1.095e-01, 5.304e-02, 9.156e-02, 9.693e-02, 1.543e-01, -1.736e-01, 5.763e-02, -2.943e-02, 8.795e-03, -2.359e-02) * s[0][0][0];
	r0 += M4(3.920e-02, -4.591e-02, -5.256e-03, 2.504e-02, -1.606e-02, -1.532e-02, 2.481e-02, 6.700e-02, 9.543e-03, -6.611e-02, 8.370e-02, -1.212e-01, -3.301e-02, 1.636e-02, 1.081e-01, -1.137e-01) * s[0][0][1];
	r1 += M4(-1.072e-02, 4.998e-02, 4.273e-02, -1.899e-02, 4.410e-02, 5.099e-02, 8.423e-02, 5.847e-02, 1.111e-01, 8.572e-02, -4.138e-02, -2.687e-01, 5.669e-02, -5.173e-02, -9.614e-02, -2.368e-01) * s[0][0][1];
	r0 += M4(5.569e-03, -2.728e-02, -6.731e-02, -1.462e-01, -2.767e-02, -7.354e-02, 1.738e-01, 3.087e-02, 3.960e-02, -3.769e-02, -2.131e-02, 4.734e-02, 8.259e-02, 2.883e-03, 1.021e-02, -1.381e-01) * s[0][1][0];
	r1 += M4(-1.610e-01, 3.711e-02, 1.361e-02, -1.566e-01, 8.618e-02, 1.409e-01, 4.623e-02, -2.010e-01, -7.348e-02, -7.837e-02, -1.129e-01, 1.886e-01, 6.907e-02, -1.580e-01, -1.546e-01, -2.072e-01) * s[0][1][0];
	r0 += M4(-8.086e-02, -5.082e-02, -1.773e-01, -2.204e-02, 1.075e-02, 3.682e-02, -8.553e-03, -4.747e-02, -2.428e-01, -5.433e-02, -1.400e-01, -1.506e-01, 4.679e-02, 3.361e-02, -6.440e-02, -1.824e-01) * s[0][1][1];
	r1 += M4(-8.207e-03, 1.278e-01, 9.580e-02, -3.969e-02, -2.184e-02, -4.250e-03, -4.197e-02, 2.319e-02, -5.597e-03, -1.296e-01, -3.021e-02, 1.965e-01, -7.984e-02, -1.439e-01, -2.048e-01, -2.034e-03) * s[0][1][1];
	r0 += M4(3.070e-02, -1.922e-02, 6.582e-02, -3.317e-02, -1.280e-03, -4.947e-02, -4.759e-02, -1.345e-02, -1.046e-01, -1.568e-01, -1.277e-02, -2.475e-02, 1.997e-01, 8.244e-03, -1.049e-01, 9.073e-03) * s[0][2][0];
	r1 += M4(-2.005e-02, 3.674e-02, 8.466e-02, -1.630e-03, -6.161e-02, 6.985e-02, 2.769e-03, 2.182e-02, -1.156e-01, -5.107e-02, -2.431e-02, -9.557e-02, -2.646e-02, 1.439e-03, -8.621e-02, 1.423e-01) * s[0][2][0];
	r0 += M4(-4.516e-02, -9.922e-02, 1.612e-02, 8.110e-02, -2.228e-02, 1.866e-02, 5.691e-02, 3.423e-02, -6.018e-02, 6.954e-02, -9.235e-02, -3.633e-02, -1.939e-02, -6.316e-02, -6.040e-02, 9.594e-03) * s[0][2][1];
	r1 += M4(5.704e-03, 1.188e-02, 4.858e-02, 8.162e-02, 7.438e-02, 3.135e-02, -8.675e-03, -8.715e-02, 3.874e-02, -1.483e-02, 6.822e-02, 7.080e-02, -1.113e-01, -9.316e-02, -6.153e-02, 8.816e-02) * s[0][2][1];
	r0 += M4(-1.360e-01, 1.594e-02, 2.047e-03, -9.702e-02, -3.166e-01, 1.611e-01, 1.978e-01, -1.696e-01, 2.223e-02, -3.112e-02, -2.415e-02, 2.167e-03, -1.519e-01, -2.231e-01, 5.482e-03, -1.025e-01) * s[1][0][0];
	r1 += M4(4.776e-02, -8.324e-02, -1.083e-01, -1.762e-02, 5.298e-01, -4.120e-01, -1.231e-01, -1.221e-01, 2.285e-02, -1.548e-01, 1.004e-01, -3.097e-02, 1.586e-01, 6.667e-03, -1.215e-01, -1.672e-01) * s[1][0][0];
	r0 += M4(-7.026e-03, 5.554e-02, 1.299e-02, -1.989e-02, -4.249e-02, 1.353e-01, 1.008e-01, -5.487e-03, 1.452e-03, -3.259e-02, -5.478e-02, -8.836e-02, -7.367e-02, -3.528e-01, 5.339e-02, -2.521e-01) * s[1][0][1];
	r1 += M4(2.765e-02, -1.029e-02, -1.732e-03, -6.649e-02, -1.617e-01, -1.860e-01, -1.366e-02, 9.607e-02, 1.691e-01, -2.382e-02, -4.862e-02, -2.413e-01, 1.493e-01, -1.304e-01, -2.298e-01, -3.573e-01) * s[1][0][1];
	r0 += M4(5.493e-02, 1.034e-01, 4.426e-01, 3.650e-01, 4.000e-01, -7.642e-02, 2.215e-01, 1.529e-01, 5.303e-03, 3.037e-01, -5.891e-02, 7.473e-02, -1.935e-01, -2.529e-01, 1.519e-01, 8.228e-02) * s[1][1][0];
	r1 += M4(2.515e-01, -1.247e-01, 3.742e-01, -1.795e-01, 4.182e-01, -4.112e-02, -1.348e-01, -5.636e-02, 1.856e-01, 8.684e-02, 6.382e-03, 1.939e-01, 2.725e-01, 2.960e-01, -1.380e-01, -1.814e-01) * s[1][1][0];
	r0 += M4(1.968e-01, 1.171e-01, 4.462e-01, 2.251e-01, 6.217e-02, -2.849e-02, -5.918e-03, -6.178e-02, 1.206e-01, 3.335e-02, -2.271e-01, -7.213e-03, 1.062e-01, -8.143e-02, 1.166e-01, 2.995e-02) * s[1][1][1];
	r1 += M4(2.048e-01, -2.956e-01, 3.791e-01, -1.265e-01, 4.876e-02, 9.538e-02, -3.432e-02, 1.307e-01, 1.699e-01, 2.926e-01, 6.885e-02, 2.036e-01, 1.544e-01, 8.624e-02, -2.014e-01, -3.040e-01) * s[1][1][1];
	r0 += M4(3.151e-02, 3.999e-02, 2.596e-02, -1.252e-01, -2.698e-02, 4.070e-02, -1.549e-01, 8.039e-02, 8.372e-02, 2.416e-01, -1.149e-01, 2.324e-02, 1.013e-01, 1.092e-01, -5.721e-02, 2.381e-02) * s[1][2][0];
	r1 += M4(-2.508e-01, 1.348e-01, 1.029e-01, -3.075e-02, -2.694e-02, -1.539e-01, 9.505e-03, 8.972e-02, 2.470e-02, -1.725e-02, 8.540e-02, 8.668e-02, 7.663e-02, -3.611e-02, 3.874e-02, 1.718e-01) * s[1][2][0];
	r0 += M4(-8.326e-02, 1.089e-01, -2.206e-01, -1.923e-01, -1.341e-01, 3.902e-02, -2.256e-03, 9.140e-02, -2.975e-02, 1.112e-01, 6.790e-02, -2.140e-02, -3.369e-02, 1.941e-01, -3.340e-02, 1.619e-02) * s[1][2][1];
	r1 += M4(-1.606e-01, -7.635e-02, -1.155e-01, 6.660e-02, 8.347e-02, 2.295e-02, 5.576e-02, -8.881e-02, -1.024e-01, -8.031e-02, 9.242e-02, -1.136e-01, 2.282e-02, -4.485e-02, 4.534e-02, 1.516e-02) * s[1][2][1];
	r0 += M4(-1.156e-01, 5.845e-02, -1.252e-02, -4.528e-02, -2.533e-01, -1.327e-01, -1.116e-01, -2.987e-02, 5.702e-02, -1.419e-01, -1.096e-02, -6.943e-02, -3.949e-02, -1.185e-02, 4.410e-02, 1.647e-02) * s[2][0][0];
	r1 += M4(-3.031e-02, -1.082e-01, 2.171e-02, 4.099e-02, -1.082e-01, -4.021e-02, -1.042e-01, -2.234e-02, 4.585e-03, -8.582e-04, -5.444e-02, 3.803e-02, -6.790e-02, -1.137e-01, 9.100e-02, 7.679e-02) * s[2][0][0];
	r0 += M4(-8.979e-02, -2.434e-02, 4.702e-02, -1.899e-02, -7.052e-02, -1.550e-01, 8.363e-02, -7.010e-02, -5.421e-02, -5.781e-02, -6.394e-02, -2.718e-02, -1.028e-01, 1.332e-01, -1.017e-01, 9.111e-02) * s[2][0][1];
	r1 += M4(-3.495e-02, -1.079e-01, 2.973e-02, 2.407e-02, -3.828e-02, -1.020e-01, -8.343e-02, 3.876e-02, 7.674e-02, -6.726e-02, -2.606e-02, -3.269e-02, 8.128e-02, -1.092e-01, -2.779e-02, 1.504e-02) * s[2][0][1];
	r0 += M4(-3.606e-02, -8.706e-02, 9.480e-02, -8.693e-02, -2.828e-02, -1.264e-01, 2.821e-01, 2.683e-01, -3.645e-02, -8.146e-02, 3.758e-02, 1.965e-03, -9.146e-02, 1.506e-01, 5.216e-02, 1.249e-01) * s[2][1][0];
	r1 += M4(-1.254e-01, -6.347e-02, 4.591e-04, -1.005e-02, -1.854e-01, 1.516e-01, 1.281e-02, -9.083e-02, -1.300e-01, -6.858e-03, 1.147e-01, 3.850e-02, 8.321e-02, 4.134e-02, 1.255e-01, -8.442e-03) * s[2][1][0];
	r0 += M4(-8.147e-02, -1.055e-01, 1.357e-01, -7.701e-02, 9.402e-02, 2.600e-02, 5.258e-02, 5.351e-02, 1.589e-01, 9.585e-03, 9.053e-02, -2.466e-01, -7.307e-02, 2.895e-01, -2.078e-02, 1.435e-01) * s[2][1][1];
	r1 += M4(1.134e-01, -1.666e-01, 1.070e-01, -2.193e-02, 5.466e-02, 6.256e-02, -4.956e-02, 4.463e-02, -2.383e-01, 8.421e-02, -1.089e-03, 1.673e-01, 1.381e-01, -6.536e-02, 1.164e-01, 2.571e-02) * s[2][1][1];
	r0 += M4(1.034e-01, 4.206e-02, 1.204e-01, 9.948e-02, -8.617e-03, 1.195e-01, 5.575e-02, 8.040e-02, -1.201e-02, -1.184e-01, 2.567e-02, -5.651e-02, -1.765e-02, -2.603e-02, 2.888e-02, 4.981e-02) * s[2][2][0];
	r1 += M4(-1.978e-02, 1.168e-01, 3.182e-02, 1.536e-03, -8.553e-02, 1.082e-01, -4.225e-03, 2.401e-02, -4.615e-02, 2.663e-02, -3.108e-02, -8.814e-02, 1.437e-03, 6.550e-02, 2.033e-02, -3.914e-04) * s[2][2][0];
	r0 += M4(-2.942e-02, 1.304e-01, 7.054e-02, 1.016e-01, -3.358e-02, 8.146e-02, -7.544e-02, -5.181e-03, -9.555e-02, 1.197e-01, -1.102e-01, 1.577e-02, -6.811e-02, 1.265e-01, -6.497e-02, -2.161e-02) * s[2][2][1];
	r1 += M4(8.259e-02, 1.389e-01, 5.776e-02, -6.128e-02, -3.552e-02, -1.983e-03, 5.275e-02, 3.725e-03, 2.020e-02, 2.588e-02, -7.526e-02, -8.909e-02, 3.347e-02, -7.330e-03, -3.279e-02, -1.260e-03) * s[2][2][1];
	r0 += V4(5.507e-03, 7.145e-03, -2.538e-02, 9.964e-03);
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(4.286e-02, -9.603e-03, 3.735e-02, -7.931e-03);
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-6x8C-RCAS-conv5
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv4
//!BIND LUMA
//!SAVE conv5
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(texelFetch(conv4_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv4_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 g[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv4_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			g[0][ay][ax] = l0(x - 1, y - 1);
			g[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s[3][3][2];
	V4 r0 = V4(0.0);
	V4 r1 = V4(0.0);
	s[0][0][0] = max(g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[0][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[0][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[0][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[0][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[0][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[0][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(5.041e-02, -7.382e-03, 1.131e-02, -7.536e-03, 5.355e-02, -2.651e-02, 3.631e-02, -8.207e-03, 1.215e-01, -1.072e-01, -4.838e-02, 2.019e-01, 3.215e-02, -1.443e-02, -1.257e-02, 4.725e-02) * s[0][0][0];
	r1 += M4(2.767e-02, 7.496e-02, 3.031e-02, 1.364e-02, -6.812e-02, -2.341e-02, 2.461e-02, 2.094e-02, 2.430e-01, -1.135e-01, 7.790e-02, 3.835e-02, -1.071e-01, -1.425e-02, -7.214e-03, -4.063e-02) * s[0][0][0];
	r0 += M4(6.588e-02, -4.117e-02, -6.899e-02, 7.504e-02, -4.374e-02, -8.614e-03, -2.622e-02, -1.184e-01, -6.130e-02, -8.668e-02, -1.666e-01, -1.711e-02, 7.362e-02, -5.997e-02, 7.104e-02, 4.242e-02) * s[0][0][1];
	r1 += M4(4.244e-02, 9.253e-02, -6.222e-02, 5.286e-02, 1.888e-01, -6.940e-02, -2.729e-03, 7.970e-02, 8.028e-02, 5.172e-03, -7.761e-02, 3.555e-02, 2.050e-02, -4.836e-02, 7.882e-02, -1.916e-02) * s[0][0][1];
	r0 += M4(-5.900e-02, -1.943e-02, -2.369e-02, -3.360e-03, 8.615e-02, -5.008e-02, 1.128e-01, -1.621e-01, 1.355e-01, 5.090e-02, -7.370e-02, 2.744e-01, 8.408e-02, 6.175e-03, 4.641e-02, 5.143e-03) * s[0][1][0];
	r1 += M4(4.324e-02, -5.280e-02, -3.146e-04, 1.229e-02, 1.090e-01, 1.044e-01, -6.309e-02, 5.400e-02, -3.361e-01, 3.881e-02, 8.057e-02, 4.346e-01, 5.390e-02, 9.140e-02, 1.702e-02, -8.504e-02) * s[0][1][0];
	r0 += M4(1.221e-01, -1.630e-01, -2.113e-01, 6.377e-02, 1.683e-01, 3.502e-01, 4.422e-04, -1.873e-02, -2.668e-02, -9.623e-02, -1.275e-01, 3.950e-02, 1.482e-01, 8.725e-02, -8.578e-02, -2.454e-02) * s[0][1][1];
	r1 += M4(-1.214e-01, -2.264e-02, -3.248e-02, 1.723e-01, -3.159e-01, -2.115e-01, -1.954e-01, 8.682e-02, 2.593e-05, -1.391e-02, 8.225e-02, 1.100e-01, -1.749e-01, -2.099e-02, -9.372e-02, -2.310e-02) * s[0][1][1];
	r0 += M4(6.714e-02, 1.933e-02, 1.125e-01, 3.000e-02, -1.761e-02, 2.910e-02, 4.889e-02, -1.268e-02, -1.997e-02, -6.911e-02, 4.377e-03, 9.512e-03, 2.933e-02, -4.242e-02, -7.150e-02, 3.272e-02) * s[0][2][0];
	r1 += M4(1.265e-02, 3.637e-02, 8.110e-02, 1.632e-02, 1.043e-02, -2.180e-02, -3.677e-02, -7.679e-02, 4.678e-02, 7.387e-03, 2.963e-03, 6.017e-02, 1.165e-01, -6.295e-02, -7.153e-02, -4.566e-02) * s[0][2][0];
	r0 += M4(2.731e-02, 1.982e-02, -3.046e-02, 4.120e-02, 6.714e-02, -1.360e-02, 1.543e-01, 2.958e-02, -2.097e-02, -3.028e-02, 6.434e-02, 1.878e-02, 8.139e-02, -2.206e-01, 1.194e-01, -4.270e-02) * s[0][2][1];
	r1 += M4(6.249e-02, 1.150e-01, -8.184e-02, 2.063e-02, 1.051e-01, -7.199e-02, -1.300e-01, 4.111e-02, -3.541e-02, -2.551e-02, 6.047e-02, 1.380e-02, 1.887e-01, 8.442e-02, -4.903e-03, 1.018e-01) * s[0][2][1];
	r0 += M4(1.446e-01, 4.525e-02, 5.435e-02, -1.465e-02, 1.223e-01, 1.031e-01, 3.520e-02, 1.443e-01, -8.523e-03, 9.548e-02, 4.747e-02, -3.232e-02, -8.386e-03, -4.036e-02, -2.148e-02, 4.674e-02) * s[1][0][0];
	r1 += M4(-2.346e-02, 4.202e-02, -1.390e-01, 6.275e-02, 3.470e-02, 2.890e-03, 2.336e-04, 3.164e-02, -3.650e-02, 1.233e-01, -5.016e-02, -2.085e-01, 4.826e-02, -1.209e-01, -7.044e-02, -3.095e-02) * s[1][0][0];
	r0 += M4(1.409e-01, 3.481e-03, 8.134e-02, 9.680e-02, 1.349e-01, 1.000e-01, -8.286e-02, 4.503e-02, 1.950e-01, 3.852e-02, 6.331e-02, -1.015e-01, -8.129e-02, -2.339e-01, 7.203e-02, -5.075e-02) * s[1][0][1];
	r1 += M4(4.099e-02, -1.197e-01, -7.114e-02, 4.588e-02, 4.073e-01, 2.478e-01, 7.967e-02, -2.450e-02, -3.977e-02, 1.116e-01, 1.242e-01, -8.959e-02, 3.315e-02, -9.097e-02, 6.302e-02, -2.672e-02) * s[1][0][1];
	r0 += M4(2.137e-01, -7.132e-03, 3.604e-01, 1.687e-02, -1.430e-01, -7.079e-02, -9.198e-02, -1.494e-02, -2.097e-01, -2.206e-01, 2.153e-01, -3.716e-01, -9.724e-02, -6.720e-02, 5.506e-04, -7.560e-02) * s[1][1][0];
	r1 += M4(-4.753e-02, 1.529e-01, -2.416e-01, 1.785e-02, 6.868e-02, 5.816e-02, 1.373e-02, 9.122e-02, 9.989e-02, -5.833e-01, 6.515e-02, -2.523e-01, -3.694e-02, -2.030e-01, -4.849e-03, 3.637e-02) * s[1][1][0];
	r0 += M4(5.010e-01, -3.272e-01, 4.385e-01, -7.036e-02, -2.040e-01, -2.971e-01, -1.968e-01, 1.703e-01, -2.360e-01, 1.016e-01, 1.744e-01, 4.067e-02, -6.990e-03, -1.503e-01, -1.177e-01, 3.742e-01) * s[1][1][1];
	r1 += M4(-1.978e-01, -1.194e-01, 2.335e-01, -5.320e-03, 4.639e-01, 3.138e-01, 3.964e-01, 3.504e-01, 1.099e-02, -2.729e-01, 3.684e-02, -1.759e-01, 2.550e-01, -2.526e-01, 4.741e-01, -1.551e-01) * s[1][1][1];
	r0 += M4(3.439e-03, -8.040e-02, -1.133e-02, -6.458e-02, 7.332e-03, -7.225e-03, 1.057e-01, -1.104e-03, 4.118e-02, 3.746e-04, -8.562e-02, 1.555e-01, 1.077e-01, -9.649e-02, 8.427e-02, -5.390e-02) * s[1][2][0];
	r1 += M4(6.840e-02, 3.209e-03, -9.822e-02, -2.089e-02, 5.139e-02, -3.298e-02, 3.829e-03, 5.153e-02, 8.363e-02, 1.018e-01, 6.867e-02, 2.970e-01, 1.130e-01, 1.520e-02, 5.157e-02, -4.950e-02) * s[1][2][0];
	r0 += M4(-6.768e-02, -9.367e-02, -7.767e-02, -1.081e-01, 6.144e-03, 4.444e-02, 3.536e-02, -7.982e-02, 5.417e-02, -4.982e-02, 2.477e-02, 1.447e-01, 1.204e-01, -1.494e-01, -3.353e-02, -5.719e-02) * s[1][2][1];
	r1 += M4(-3.057e-02, 1.299e-01, 8.922e-02, 6.953e-02, 1.331e-01, 1.686e-03, 3.500e-02, 1.249e-01, -6.642e-02, 1.228e-01, 5.573e-02, 1.952e-01, 8.122e-03, 6.768e-02, 2.191e-01, 5.097e-03) * s[1][2][1];
	r0 += M4(3.629e-02, -1.349e-02, -1.013e-02, 1.299e-01, 2.449e-02, 3.235e-03, -2.939e-02, -4.142e-02, -4.710e-02, -2.679e-02, -2.418e-02, -9.446e-02, -3.748e-02, -6.811e-02, 3.213e-03, 3.945e-02) * s[2][0][0];
	r1 += M4(-2.988e-02, 7.404e-02, -8.770e-02, 1.898e-02, -1.532e-02, 9.225e-03, -4.257e-02, 4.480e-02, 5.378e-02, -9.616e-02, -2.149e-02, 7.426e-02, 7.035e-02, -3.445e-02, 5.146e-02, 1.582e-02) * s[2][0][0];
	r0 += M4(-1.367e-02, 1.022e-02, -8.398e-03, 9.307e-02, 2.510e-01, -1.092e-02, 2.963e-02, 1.763e-01, 2.477e-02, -7.802e-02, -4.477e-02, -1.138e-01, -5.305e-02, 4.743e-02, 1.633e-03, 1.949e-01) * s[2][0][1];
	r1 += M4(2.447e-02, 3.579e-02, -1.305e-01, -2.686e-02, 1.157e-01, -3.881e-02, 2.515e-02, 8.995e-02, 5.352e-02, 4.043e-02, 7.045e-02, 5.356e-02, -1.579e-02, -1.466e-01, -1.037e-01, -7.266e-02) * s[2][0][1];
	r0 += M4(4.187e-03, -2.245e-01, -1.372e-01, 1.478e-02, 4.433e-03, 6.284e-02, 4.976e-02, -6.463e-03, 4.938e-02, 1.164e-01, 1.763e-01, 4.322e-02, 1.734e-02, 1.656e-02, -8.646e-02, -9.427e-03) * s[2][1][0];
	r1 += M4(1.103e-01, 1.568e-01, 9.443e-02, -3.763e-02, -4.376e-02, -9.237e-02, -7.496e-02, 2.528e-02, 3.879e-01, -2.705e-01, 1.375e-01, 8.781e-02, -7.288e-03, 8.367e-02, 4.653e-02, -1.569e-02) * s[2][1][0];
	r0 += M4(1.268e-01, -1.601e-01, -9.301e-02, 1.146e-01, 1.802e-02, -1.909e-02, 1.297e-01, -1.624e-01, -2.071e-02, 7.529e-02, 8.491e-02, -8.371e-02, 1.655e-01, 5.239e-02, -9.976e-02, -7.928e-03) * s[2][1][1];
	r1 += M4(4.292e-03, -6.099e-02, 1.309e-01, -1.007e-01, 2.203e-01, -1.280e-01, -1.584e-01, 1.399e-01, -4.954e-03, -1.128e-01, -2.641e-02, 2.155e-02, 2.665e-03, 2.549e-02, -2.066e-01, 4.708e-02) * s[2][1][1];
	r0 += M4(-1.782e-02, 5.170e-02, 4.926e-02, -5.195e-02, -3.938e-02, -5.067e-02, -6.274e-02, 7.487e-03, 1.382e-01, -9.631e-02, -1.512e-01, 2.426e-01, -1.236e-03, -5.920e-02, 3.551e-02, -6.807e-02) * s[2][2][0];
	r1 += M4(3.285e-03, -3.650e-02, -2.471e-02, -9.888e-02, 6.991e-02, 5.296e-02, -4.975e-02, 7.824e-02, -3.391e-02, -8.682e-02, 3.187e-02, 2.291e-02, -7.079e-03, -5.413e-02, -2.283e-02, -8.027e-02) * s[2][2][0];
	r0 += M4(4.599e-02, -6.074e-03, 9.126e-02, -1.402e-02, -2.664e-02, -3.788e-02, -2.266e-02, 2.696e-02, -4.604e-03, -6.518e-02, -1.130e-01, 6.466e-02, 5.213e-02, -7.893e-02, 5.081e-02, 3.052e-03) * s[2][2][1];
	r1 += M4(-3.370e-02, -8.211e-04, 1.918e-01, -1.037e-01, 1.559e-01, 1.563e-02, -6.102e-02, 6.620e-03, 3.802e-02, 7.466e-02, -4.895e-02, 8.076e-02, 1.560e-01, -1.609e-01, -8.701e-02, -8.911e-02) * s[2][2][1];
	s[0][0][0] = max(g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[1][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[1][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[1][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[1][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[1][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[1][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(1.683e-02, -1.452e-01, -1.211e-01, -5.922e-02, 3.659e-03, 1.178e-02, 2.352e-02, -9.980e-02, -2.561e-02, 8.720e-02, 5.318e-02, 9.056e-02, -2.611e-02, -4.633e-02, -8.839e-02, -5.661e-02) * s[0][0][0];
	r1 += M4(1.694e-02, 1.348e-02, 5.730e-02, 4.920e-02, 2.316e-02, 5.050e-02, 2.538e-03, 4.089e-02, 9.353e-03, 6.074e-03, 1.275e-03, -2.812e-04, 2.296e-02, 1.032e-02, 4.176e-02, 1.144e-02) * s[0][0][0];
	r0 += M4(3.645e-02, -1.864e-01, -2.134e-01, 8.724e-02, 1.679e-02, -3.333e-02, -5.508e-02, 1.383e-02, 2.211e-02, 1.391e-01, 3.954e-02, 4.946e-02, 7.271e-02, -5.699e-02, -1.956e-01, 1.316e-01) * s[0][0][1];
	r1 += M4(2.513e-02, -6.461e-02, 6.124e-02, -4.875e-02, -9.704e-03, 4.553e-03, 1.026e-02, 1.888e-02, 2.565e-02, -2.187e-02, -3.147e-02, -2.430e-02, 1.389e-02, 2.289e-02, -4.402e-02, 9.235e-02) * s[0][0][1];
	r0 += M4(-4.411e-02, -1.445e-02, -2.895e-01, 1.866e-02, -5.922e-02, 2.867e-02, -1.489e-01, -6.123e-02, -3.971e-02, 3.060e-03, 1.179e-01, 1.440e-01, -2.839e-02, -4.932e-02, -9.986e-02, 1.761e-02) * s[0][1][0];
	r1 += M4(6.487e-02, -9.422e-02, -2.466e-01, -2.341e-02, -1.665e-02, 2.790e-02, -8.812e-02, -4.424e-02, -9.151e-02, -6.933e-02, 9.249e-02, 2.934e-02, 2.281e-02, -2.424e-02, 1.713e-02, 5.595e-02) * s[0][1][0];
	r0 += M4(-5.661e-03, 4.350e-02, -9.999e-02, 1.340e-01, 1.674e-03, -4.456e-02, -1.798e-01, 1.087e-02, -1.024e-02, 2.925e-02, 1.365e-01, 5.054e-02, -1.800e-02, -1.788e-01, -2.713e-02, 7.931e-02) * s[0][1][1];
	r1 += M4(7.284e-02, -1.208e-01, -1.801e-01, -7.287e-02, 1.544e-02, 5.894e-02, -1.826e-01, -5.232e-02, -1.725e-01, -3.883e-02, 7.526e-04, 5.730e-02, 7.135e-02, 1.239e-01, 4.713e-02, 3.811e-02) * s[0][1][1];
	r0 += M4(-6.019e-02, -1.093e-01, -1.644e-01, 2.768e-02, -6.571e-03, -1.973e-02, 2.077e-02, -4.932e-02, 3.268e-02, 1.325e-02, 1.183e-01, 1.324e-02, -6.294e-02, -4.182e-02, -6.235e-02, -1.768e-02) * s[0][2][0];
	r1 += M4(7.643e-04, -2.138e-02, -2.767e-02, 1.757e-01, 4.379e-03, -4.494e-02, 7.351e-02, -4.376e-02, -2.606e-02, 7.536e-02, 7.240e-02, 1.112e-02, -6.043e-02, -3.432e-02, 6.074e-04, 8.569e-02) * s[0][2][0];
	r0 += M4(-4.373e-02, -1.329e-01, -1.889e-01, 4.402e-02, 8.913e-03, -4.546e-02, -1.102e-02, -1.133e-02, 6.441e-03, 1.244e-02, 6.222e-02, 5.962e-03, -1.146e-01, -9.779e-03, -5.669e-02, 4.207e-02) * s[0][2][1];
	r1 += M4(-1.458e-02, -2.751e-02, 2.017e-03, 1.382e-01, 5.907e-02, -9.705e-03, -1.459e-02, 1.027e-02, -4.050e-02, 7.682e-02, -1.491e-02, 4.484e-03, -1.659e-02, 2.221e-02, 3.493e-02, 1.151e-02) * s[0][2][1];
	r0 += M4(-2.081e-02, -1.150e-02, -1.265e-02, -2.701e-01, -6.172e-02, -9.237e-02, 6.868e-04, -4.043e-01, -3.504e-02, -1.305e-01, -4.603e-02, 6.452e-02, 2.970e-02, 9.117e-02, 6.040e-03, -5.178e-02) * s[1][0][0];
	r1 += M4(1.789e-02, -3.818e-02, 1.100e-01, -7.320e-03, -6.315e-02, 1.455e-01, 1.627e-01, 3.414e-02, -7.431e-03, -6.465e-02, 5.491e-02, 5.122e-02, -7.863e-02, 5.282e-02, -2.903e-03, -7.515e-02) * s[1][0][0];
	r0 += M4(1.593e-01, -1.164e-02, -2.788e-02, -1.610e-02, -2.582e-02, 1.202e-02, -4.979e-02, -2.361e-01, -6.402e-02, -1.778e-01, -1.375e-02, -1.162e-01, 9.775e-02, 1.569e-02, -5.868e-02, -3.982e-01) * s[1][0][1];
	r1 += M4(2.647e-02, 3.360e-02, 1.583e-01, -8.325e-02, -1.024e-01, 9.845e-02, 8.957e-02, -5.792e-02, -2.625e-01, 6.914e-03, 6.257e-02, 8.092e-02, 8.406e-03, 1.301e-01, 9.841e-02, -1.629e-02) * s[1][0][1];
	r0 += M4(1.690e-01, -2.960e-01, 9.710e-02, -1.129e-01, 1.763e-01, 3.013e-01, 3.454e-02, -2.207e-01, -4.590e-02, -8.550e-02, -5.069e-02, 2.791e-02, -5.523e-02, 1.948e-01, 4.688e-02, 1.204e-01) * s[1][1][0];
	r1 += M4(1.634e-01, 5.080e-02, 4.218e-01, -1.081e-01, 6.168e-02, 2.339e-01, 4.158e-02, -1.765e-01, -2.238e-02, 1.045e-01, -1.780e-01, -8.345e-02, -1.161e-01, -4.654e-02, -7.091e-02, -1.665e-01) * s[1][1][0];
	r0 += M4(8.560e-02, -1.249e-01, 2.440e-02, -4.150e-02, 3.691e-01, 3.233e-01, 2.370e-02, -2.998e-01, -3.718e-01, -1.609e-01, -1.438e-01, 1.320e-01, 1.314e-01, -5.722e-01, 9.659e-03, -8.838e-02) * s[1][1][1];
	r1 += M4(-3.758e-02, -1.370e-01, 7.433e-02, -2.341e-02, 1.364e-01, 2.591e-01, 1.743e-01, -2.510e-01, 1.912e-01, 1.702e-01, -1.483e-01, -3.023e-01, -4.190e-01, 1.878e-01, -9.544e-02, -2.500e-01) * s[1][1][1];
	r0 += M4(2.368e-02, -2.336e-02, -6.984e-02, 5.047e-03, -8.240e-02, 8.727e-03, 2.284e-02, -6.502e-02, -5.897e-02, -1.080e-01, -2.727e-02, -5.819e-02, 6.830e-03, 1.038e-02, -1.034e-01, 1.607e-01) * s[1][2][0];
	r1 += M4(-1.150e-01, 3.845e-02, 1.802e-01, -4.235e-02, 4.607e-02, -1.524e-01, -1.120e-01, -4.971e-02, 4.700e-02, -1.076e-01, -1.513e-01, 2.355e-02, -6.785e-02, 1.194e-01, 3.033e-02, 7.146e-02) * s[1][2][0];
	r0 += M4(-3.909e-02, 7.163e-02, -5.776e-02, -7.563e-02, -6.324e-02, -6.836e-02, -2.364e-03, -7.647e-02, -1.073e-01, 5.147e-02, -9.035e-02, -5.716e-02, -2.437e-01, -1.760e-01, -3.731e-01, -1.069e-02) * s[1][2][1];
	r1 += M4(-2.671e-02, -4.138e-02, 7.849e-02, -1.006e-01, 2.551e-02, -4.399e-02, -1.294e-01, -1.033e-01, -4.207e-02, -6.563e-02, 1.691e-02, -2.988e-02, 4.563e-02, -8.432e-04, -1.195e-01, -6.749e-02) * s[1][2][1];
	r0 += M4(-1.444e-02, 9.281e-02, 6.753e-03, -1.213e-01, -3.865e-02, -2.789e-02, -1.954e-02, -1.508e-01, 7.889e-02, 7.202e-02, 4.532e-02, 2.032e-02, -2.604e-02, 7.976e-03, -2.214e-02, -1.099e-03) * s[2][0][0];
	r1 += M4(-6.653e-02, 7.879e-02, 1.316e-02, -2.454e-02, 2.581e-03, -1.992e-03, 5.359e-02, -1.197e-02, -6.910e-02, -1.524e-02, 1.512e-02, -1.820e-02, 2.400e-02, -1.968e-02, 8.952e-02, -1.470e-02) * s[2][0][0];
	r0 += M4(6.411e-02, 3.822e-02, 1.190e-02, 6.484e-03, -4.528e-02, -3.777e-02, -6.534e-02, -6.806e-02, 5.359e-02, 2.339e-02, 5.750e-02, -3.052e-01, -5.545e-03, 1.957e-01, 1.756e-02, -2.607e-02) * s[2][0][1];
	r1 += M4(5.891e-02, 6.314e-02, 9.501e-02, -4.747e-02, -8.173e-03, 7.673e-03, 3.662e-02, -1.328e-02, -8.409e-02, 4.706e-02, 2.898e-02, -2.085e-02, -4.539e-02, 1.024e-01, 6.964e-02, 2.186e-02) * s[2][0][1];
	r0 += M4(5.108e-02, 2.395e-02, 1.248e-01, -3.098e-03, -3.856e-02, -1.393e-02, 1.174e-02, -1.016e-01, -1.035e-01, -1.702e-01, -1.460e-01, -1.120e-03, 7.635e-02, 4.357e-02, 5.725e-02, 1.663e-01) * s[2][1][0];
	r1 += M4(-2.377e-02, -5.603e-02, -1.520e-01, -8.338e-02, -3.244e-02, 9.196e-02, 8.280e-02, 1.000e-02, 1.238e-01, 8.293e-02, 5.551e-02, 4.674e-02, 7.481e-02, -3.260e-02, -1.288e-01, 1.192e-01) * s[2][1][0];
	r0 += M4(-3.612e-02, -7.930e-02, -1.308e-02, -6.843e-02, -2.216e-02, -3.638e-04, -2.920e-02, -3.705e-02, -2.699e-01, -1.901e-01, -7.337e-02, -4.632e-02, 2.789e-02, -2.036e-01, 2.451e-02, -4.249e-01) * s[2][1][1];
	r1 += M4(9.547e-02, -1.159e-01, 1.948e-01, -2.761e-02, -2.637e-02, 7.992e-02, 7.109e-02, -3.335e-03, 9.123e-02, 3.190e-02, 3.954e-02, 7.891e-02, -1.959e-01, 2.632e-01, -1.449e-02, 6.368e-02) * s[2][1][1];
	r0 += M4(7.204e-02, 3.933e-02, 6.504e-02, 2.775e-02, -6.477e-02, 3.602e-02, -2.444e-02, -6.149e-02, -2.231e-03, -5.022e-02, -2.004e-04, -6.772e-02, 3.587e-02, 4.169e-02, 3.472e-02, 5.925e-02) * s[2][2][0];
	r1 += M4(-2.177e-02, 2.120e-02, -2.673e-02, -4.521e-02, -7.016e-02, 2.197e-02, 1.672e-01, 9.021e-03, 2.864e-02, -4.040e-02, 7.591e-02, -3.854e-03, -6.787e-03, -6.242e-02, -1.040e-02, -4.277e-03) * s[2][2][0];
	r0 += M4(5.326e-02, 2.657e-02, 2.621e-02, -2.831e-02, -7.541e-03, -5.480e-02, 2.995e-02, -3.370e-02, -8.814e-03, 7.223e-02, 4.626e-02, -1.178e-01, -1.552e-01, -1.075e-01, 5.168e-02, -1.631e-01) * s[2][2][1];
	r1 += M4(-8.711e-02, -8.193e-02, 1.333e-01, -7.837e-03, 6.412e-02, -7.493e-03, 1.090e-01, 6.080e-02, 7.063e-03, -1.444e-02, 6.554e-02, -6.948e-02, 9.440e-02, -7.602e-02, 1.475e-01, 9.982e-02) * s[2][2][1];
	r0 += V4(4.557e-03, 5.427e-03, 9.166e-03, -1.784e-03);
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(1.457e-02, -1.119e-02, -7.194e-03, 1.582e-02);
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-6x8C-RCAS-conv6
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv5
//!BIND LUMA
//!SAVE conv6
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(texelFetch(conv5_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv5_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 g[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv5_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			g[0][ay][ax] = l0(x - 1, y - 1);
			g[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s[3][3][2];
	V4 r0 = V4(0.0);
	V4 r1 = V4(0.0);
	s[0][0][0] = max(g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[0][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[0][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[0][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[0][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[0][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[0][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(-4.764e-02, -8.472e-02, 4.627e-02, 3.106e-02, 4.284e-03, -5.937e-03, 1.831e-02, -8.237e-03, 2.325e-02, 5.782e-03, -4.318e-02, -4.029e-02, 2.152e-02, -6.673e-02, -5.395e-02, -3.896e-02) * s[0][0][0];
	r1 += M4(-8.162e-02, -1.035e-03, -7.937e-03, -5.409e-02, -2.559e-02, -7.667e-03, 1.436e-02, 9.424e-03, 7.188e-02, 6.851e-03, 9.011e-03, 3.754e-02, -6.956e-02, -1.220e-02, -4.857e-02, 4.879e-03) * s[0][0][0];
	r0 += M4(-1.205e-02, -4.939e-02, 5.628e-02, 4.914e-02, -2.215e-02, 6.063e-03, 8.090e-02, -1.151e-02, 3.031e-02, 3.377e-02, -8.350e-03, -2.395e-02, -2.248e-02, -2.947e-02, -1.180e-02, -3.867e-02) * s[0][0][1];
	r1 += M4(-5.340e-03, 1.245e-02, 6.343e-03, -2.539e-02, -1.263e-01, -6.921e-03, 5.338e-02, -1.828e-02, 1.052e-01, -1.005e-02, -1.825e-02, 7.114e-03, -6.519e-02, -2.400e-02, -9.070e-03, -2.866e-02) * s[0][0][1];
	r0 += M4(1.726e-02, -1.855e-02, -1.419e-02, 7.676e-02, 2.262e-02, -7.654e-03, 2.896e-02, 5.844e-02, 4.929e-02, -6.665e-02, -3.601e-02, -3.137e-02, -2.553e-02, 1.923e-01, 4.658e-03, 8.972e-02) * s[0][1][0];
	r1 += M4(-5.067e-02, -3.530e-02, -1.342e-02, -3.564e-03, 1.977e-02, -1.027e-02, -3.511e-02, -9.813e-03, 1.061e-02, -9.386e-04, -1.962e-02, 1.635e-02, 3.031e-02, -1.202e-02, 9.454e-04, -3.178e-02) * s[0][1][0];
	r0 += M4(1.883e-02, -4.937e-03, 3.266e-02, 9.253e-02, 2.183e-02, -7.884e-02, -1.555e-02, -5.213e-03, -4.111e-02, 4.765e-03, 1.017e-02, -1.317e-02, -1.763e-02, -5.629e-03, 3.913e-02, 3.261e-02) * s[0][1][1];
	r1 += M4(2.533e-04, -1.337e-02, -2.607e-02, -1.357e-02, -9.617e-02, -7.927e-03, 1.163e-02, -3.699e-02, -2.386e-02, 2.426e-02, -5.300e-03, 7.919e-03, 5.981e-02, 1.101e-02, 3.229e-03, -1.578e-02) * s[0][1][1];
	r0 += M4(2.646e-02, -4.386e-02, -1.890e-02, -1.807e-02, 2.166e-02, -1.287e-03, -1.498e-02, 5.889e-02, 1.647e-02, 1.915e-02, 3.039e-03, -1.095e-02, -6.323e-03, -1.352e-02, 3.002e-03, 4.824e-04) * s[0][2][0];
	r1 += M4(3.222e-02, 7.498e-03, -1.110e-02, -1.625e-02, -2.173e-03, -4.112e-02, -8.799e-03, 1.214e-02, -5.422e-02, -5.718e-03, 2.069e-02, -3.658e-02, 6.912e-02, 4.528e-02, -4.035e-02, 9.397e-02) * s[0][2][0];
	r0 += M4(2.207e-02, -1.147e-02, -2.092e-02, 6.595e-02, 1.912e-03, 2.863e-02, 1.437e-02, 4.847e-02, -4.472e-02, 2.195e-02, 2.937e-02, 6.941e-03, -1.277e-02, -2.612e-02, 2.135e-02, -2.616e-02) * s[0][2][1];
	r1 += M4(9.375e-02, 5.798e-02, -7.472e-02, -4.736e-03, -4.589e-02, -6.709e-02, 4.896e-02, -3.777e-02, -2.300e-02, 6.289e-03, 1.548e-02, -1.614e-02, -2.545e-02, -3.161e-02, 6.061e-03, -1.221e-02) * s[0][2][1];
	r0 += M4(2.544e-02, 5.155e-02, 7.656e-02, -2.918e-02, 8.611e-03, -1.691e-01, -1.372e-01, 9.307e-02, -1.170e-01, 7.877e-03, 2.093e-01, -3.999e-02, 6.441e-03, -1.078e-01, -1.313e-01, 4.351e-02) * s[1][0][0];
	r1 += M4(1.330e-01, -9.956e-03, -2.695e-02, 5.944e-02, 2.986e-02, 2.542e-02, -1.397e-01, -2.588e-03, -2.873e-01, 5.249e-02, 1.784e-01, -1.032e-01, 2.455e-02, -3.632e-02, -2.133e-01, -1.403e-01) * s[1][0][0];
	r0 += M4(-2.800e-02, 4.443e-02, 4.110e-02, -1.696e-02, 2.003e-02, -5.624e-02, 3.695e-03, -5.135e-03, -5.799e-02, 6.357e-02, 1.026e-01, -6.055e-02, 4.040e-02, -7.301e-02, 4.576e-02, 3.972e-03) * s[1][0][1];
	r1 += M4(2.905e-02, 5.416e-03, 8.688e-02, 4.905e-02, 3.137e-02, -1.178e-02, -1.348e-01, -6.228e-02, -2.449e-01, -3.148e-02, 1.807e-01, -2.103e-02, -4.264e-02, -2.180e-02, -5.189e-02, -3.666e-02) * s[1][0][1];
	r0 += M4(2.603e-02, -5.482e-02, 1.373e-01, 3.122e-01, -1.116e-01, 2.653e-01, -8.423e-02, 4.443e-01, 3.617e-02, -2.163e-01, -6.100e-02, -1.111e-01, -1.183e-01, 2.030e-01, -7.322e-01, 6.683e-04) * s[1][1][0];
	r1 += M4(1.479e-01, 1.704e-01, -1.768e-01, -1.661e-01, 3.210e-02, 3.919e-02, 1.970e-01, 3.850e-03, -1.428e-01, 1.761e-03, -6.793e-02, 6.355e-03, 2.998e-01, 2.314e-02, 3.515e-02, 4.249e-01) * s[1][1][0];
	r0 += M4(7.308e-02, -9.206e-02, 8.562e-02, 1.599e-01, 4.460e-02, 1.745e-02, -8.875e-02, 3.877e-01, 1.534e-01, -8.797e-02, -1.194e-01, 7.665e-02, -1.378e-01, 6.224e-02, -2.926e-01, 1.612e-02) * s[1][1][1];
	r1 += M4(1.109e-01, 8.845e-02, -1.871e-01, -8.592e-02, 1.294e-01, 4.390e-02, 9.727e-02, 4.306e-02, 1.560e-01, 3.481e-02, -1.622e-01, 1.392e-01, 2.074e-02, -4.692e-03, 4.957e-02, 1.577e-01) * s[1][1][1];
	r0 += M4(-1.844e-02, -1.817e-03, 2.423e-02, 1.654e-01, -8.549e-03, -7.100e-02, 1.051e-01, 5.937e-02, 4.543e-02, 3.923e-02, -1.363e-02, -2.849e-02, -1.435e-02, -5.335e-02, 3.106e-03, 2.975e-04) * s[1][2][0];
	r1 += M4(1.422e-02, -2.245e-01, -1.220e-02, 4.489e-03, 3.301e-02, -8.683e-02, 1.414e-02, -5.789e-02, 4.924e-03, -4.040e-03, 4.010e-02, -4.613e-02, 2.238e-02, -9.813e-02, 1.276e-01, -7.904e-02) * s[1][2][0];
	r0 += M4(-3.398e-02, 1.674e-01, -1.529e-01, 3.232e-01, 1.956e-02, -4.451e-04, 3.546e-02, -2.988e-02, 2.412e-02, -1.497e-02, -2.631e-02, -3.281e-02, 3.080e-02, -9.124e-02, 5.722e-02, -3.676e-02) * s[1][2][1];
	r1 += M4(7.414e-02, -3.281e-02, -6.109e-02, -2.165e-03, 1.809e-02, -4.561e-02, 8.574e-02, -6.156e-02, 9.008e-02, 6.212e-02, 3.312e-03, -1.711e-02, -1.077e-02, -1.089e-01, 3.743e-02, -2.983e-02) * s[1][2][1];
	r0 += M4(-3.186e-02, 2.863e-02, 1.115e-02, 6.799e-03, 1.529e-02, -3.640e-02, 9.802e-02, -3.460e-02, -1.645e-02, 1.597e-01, -8.306e-02, 5.967e-02, 1.899e-02, -9.497e-02, 6.804e-02, -1.568e-02) * s[2][0][0];
	r1 += M4(-6.425e-02, 2.116e-02, 2.539e-02, 3.659e-02, -3.639e-02, -1.345e-02, 2.766e-02, -2.846e-02, 7.761e-02, 3.363e-02, 9.504e-03, -4.015e-03, -7.094e-03, -3.694e-02, -2.127e-02, -1.449e-02) * s[2][0][0];
	r0 += M4(-2.179e-03, -4.821e-02, 6.759e-02, 1.636e-02, -1.448e-02, 4.424e-02, -2.538e-02, -1.648e-02, -1.264e-02, 7.977e-02, 3.740e-01, 1.499e-01, 1.535e-02, -1.018e-01, 2.052e-02, -3.282e-03) * s[2][0][1];
	r1 += M4(-5.746e-02, 3.011e-02, 2.238e-02, 1.205e-02, 4.173e-02, -1.318e-02, -4.699e-02, -1.942e-02, -4.086e-02, -3.867e-02, 2.083e-01, -1.605e-01, 3.846e-02, -3.546e-02, -1.058e-02, 1.628e-02) * s[2][0][1];
	r0 += M4(2.572e-04, -9.748e-02, 5.089e-02, -1.679e-02, 1.121e-02, -2.997e-02, 7.214e-02, 9.141e-04, -2.181e-02, -1.013e-01, -2.440e-02, 3.967e-02, 6.030e-02, 3.368e-02, -1.116e-01, 2.178e-02) * s[2][1][0];
	r1 += M4(-1.266e-01, 7.378e-02, 7.817e-02, 9.357e-02, -6.118e-03, 2.813e-02, 5.152e-02, 3.650e-02, -8.360e-03, 5.889e-02, -8.960e-02, -8.168e-02, 3.387e-02, -2.659e-02, -1.211e-01, 2.446e-03) * s[2][1][0];
	r0 += M4(-5.365e-02, 1.787e-02, 4.016e-02, 1.760e-02, 5.348e-03, -8.079e-02, 1.555e-01, -4.251e-02, -2.125e-01, -4.587e-01, 6.131e-02, 4.580e-02, 3.449e-02, -6.225e-04, 1.728e-02, 5.578e-02) * s[2][1][1];
	r1 += M4(-6.438e-02, 2.748e-02, 7.593e-02, 4.538e-02, -1.035e-01, 2.135e-02, 1.003e-01, -3.784e-02, 3.091e-01, 1.431e-02, -1.549e-01, -3.113e-01, 5.493e-03, -3.307e-02, -3.462e-02, -1.866e-02) * s[2][1][1];
	r0 += M4(6.695e-03, 7.163e-02, 3.151e-02, 3.894e-02, 2.167e-02, -3.033e-02, -2.657e-02, 5.306e-02, -2.195e-02, -2.654e-02, 2.981e-02, -3.002e-02, -4.739e-03, -2.681e-02, 2.947e-02, -9.447e-02) * s[2][2][0];
	r1 += M4(-4.474e-02, -9.631e-03, -4.044e-02, 1.744e-02, 2.265e-02, -1.016e-01, -4.555e-02, 4.295e-02, 3.346e-02, -1.114e-01, 2.458e-02, -3.859e-02, 1.340e-02, 1.469e-03, 7.317e-02, 6.424e-02) * s[2][2][0];
	r0 += M4(-8.667e-03, 1.597e-01, -4.483e-02, 8.082e-02, -4.869e-03, 4.065e-02, -6.793e-03, 3.131e-02, -9.986e-02, -1.118e-02, 1.073e-01, 1.255e-01, 1.486e-02, -6.627e-02, 4.744e-02, -4.782e-02) * s[2][2][1];
	r1 += M4(-1.244e-03, 6.224e-02, -3.591e-02, 9.753e-03, 6.498e-03, -7.105e-02, -5.927e-02, 4.552e-02, 1.418e-02, -1.851e-01, 1.165e-01, -8.061e-02, 1.245e-02, -4.006e-02, 4.241e-02, 3.652e-02) * s[2][2][1];
	s[0][0][0] = max(g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[1][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[1][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[1][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[1][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[1][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[1][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(4.631e-03, -2.144e-05, 1.889e-02, 2.659e-03, 3.949e-02, 8.485e-04, 3.084e-02, -5.550e-02, -9.608e-04, -1.036e-01, -1.364e-01, -4.029e-02, -1.038e-01, -4.744e-02, -3.801e-02, -6.737e-02) * s[0][0][0];
	r1 += M4(3.065e-02, -5.984e-03, 4.450e-04, 2.450e-03, -7.407e-02, -4.458e-02, -2.935e-02, -1.351e-02, -8.012e-02, -7.984e-02, -3.191e-02, 4.280e-02, 3.673e-02, -4.088e-02, 1.364e-02, -5.704e-02) * s[0][0][0];
	r0 += M4(2.467e-02, 3.988e-02, -7.060e-03, 7.840e-02, 6.407e-02, -7.130e-02, 2.042e-02, -4.837e-02, -3.647e-02, -3.726e-02, -9.577e-03, -1.763e-02, -9.006e-02, -5.972e-02, -7.745e-02, -5.831e-02) * s[0][0][1];
	r1 += M4(-2.319e-03, 4.170e-02, -5.711e-03, 1.286e-02, -1.578e-01, -1.662e-03, -1.392e-02, 5.033e-02, -1.456e-01, -5.273e-03, 3.973e-02, -1.568e-02, -1.323e-01, 3.200e-02, -3.565e-02, -4.695e-03) * s[0][0][1];
	r0 += M4(1.190e-01, 3.919e-02, -4.797e-02, 3.336e-02, -9.517e-03, 2.273e-02, 1.517e-02, -4.264e-02, -9.777e-03, 1.572e-02, -1.128e-01, -2.285e-02, -7.387e-02, -1.362e-01, 4.042e-02, -1.090e-01) * s[0][1][0];
	r1 += M4(1.356e-01, -5.768e-03, -6.579e-02, 5.654e-02, 4.095e-02, 1.745e-02, -5.532e-02, -1.213e-02, 1.269e-01, -2.716e-02, 3.476e-02, 3.284e-02, 2.640e-03, -7.965e-02, 5.085e-02, -4.528e-02) * s[0][1][0];
	r0 += M4(1.330e-01, -5.025e-02, -1.479e-01, 8.958e-02, 9.325e-02, 6.032e-02, -4.010e-02, -4.590e-02, 6.881e-03, -5.432e-02, -3.847e-02, 3.839e-02, 3.974e-03, -3.880e-02, 4.028e-03, 1.664e-02) * s[0][1][1];
	r1 += M4(3.369e-01, -1.167e-02, -1.181e-01, 1.530e-01, -2.291e-01, -6.622e-02, 5.112e-02, -6.587e-03, -1.267e-02, -4.244e-02, 1.433e-02, -1.536e-02, -2.502e-01, -7.344e-02, 3.605e-02, 3.436e-03) * s[0][1][1];
	r0 += M4(8.140e-03, 2.535e-02, -2.814e-02, 2.413e-02, -4.044e-02, -5.496e-02, 6.683e-02, -1.235e-02, 2.361e-02, -1.895e-02, -1.470e-02, -2.809e-02, -1.148e-03, 4.854e-02, -2.046e-02, 5.355e-02) * s[0][2][0];
	r1 += M4(3.360e-02, 2.207e-02, -4.967e-03, 2.821e-02, 2.499e-02, -1.722e-02, -2.499e-02, 3.122e-04, 7.055e-02, -1.604e-02, 1.476e-02, 2.428e-02, 3.455e-02, -1.041e-02, -7.465e-04, 1.544e-02) * s[0][2][0];
	r0 += M4(7.536e-02, 9.726e-03, -7.885e-02, 4.125e-02, 2.274e-02, -3.058e-02, 7.485e-03, -6.335e-02, 4.185e-02, 8.942e-03, -8.308e-03, 4.185e-03, -2.727e-02, 1.936e-02, -4.502e-03, 6.013e-02) * s[0][2][1];
	r1 += M4(2.041e-01, 2.333e-02, 1.239e-03, 7.947e-02, -6.534e-02, 1.979e-02, 3.506e-02, -3.636e-02, 2.442e-02, -3.155e-02, 3.291e-02, -1.127e-03, 3.855e-02, -5.595e-02, -1.363e-02, -2.418e-02) * s[0][2][1];
	r0 += M4(-4.643e-02, 8.458e-02, -2.992e-02, 8.665e-03, 1.716e-02, -1.593e-01, -8.139e-02, 5.897e-02, 1.724e-01, -1.703e-01, 3.545e-01, 8.658e-02, -9.911e-03, 6.993e-02, 1.016e-01, -9.437e-03) * s[1][0][0];
	r1 += M4(4.858e-03, 3.270e-02, 1.198e-02, 1.280e-02, 7.748e-02, -2.638e-02, -1.485e-01, -8.669e-02, -6.627e-02, -6.159e-02, -7.162e-02, -1.815e-02, -1.623e-01, -2.472e-02, 7.495e-02, 1.024e-01) * s[1][0][0];
	r0 += M4(-6.671e-02, 1.425e-01, 9.398e-02, -8.087e-02, -1.135e-01, 6.017e-02, -1.416e-01, 1.086e-01, 1.048e-01, -2.218e-01, 2.403e-02, 5.216e-03, 5.651e-02, -1.602e-03, -1.372e-01, -4.593e-02) * s[1][0][1];
	r1 += M4(1.363e-01, -1.203e-02, -3.796e-02, -1.033e-01, -3.179e-02, 2.137e-02, -1.703e-01, -3.291e-01, 7.757e-02, -5.206e-02, -1.282e-01, -1.271e-02, -8.646e-02, 8.468e-03, -7.866e-02, 1.819e-01) * s[1][0][1];
	r0 += M4(-1.832e-01, 1.592e-01, 4.375e-03, 1.905e-01, -8.902e-02, 2.900e-01, -4.094e-02, 1.862e-02, -5.041e-01, 4.098e-02, 2.966e-01, -2.424e-02, -1.317e-01, -1.841e-01, 5.675e-02, -6.700e-02) * s[1][1][0];
	r1 += M4(-2.042e-01, 1.059e-01, 2.570e-01, -1.071e-01, 7.104e-02, -1.062e-01, 1.744e-01, 1.160e-01, -1.884e-01, -9.117e-02, 3.525e-01, -2.310e-01, 1.304e-01, 5.496e-02, 9.532e-02, 1.812e-01) * s[1][1][0];
	r0 += M4(-1.724e-01, -3.927e-02, -8.612e-04, -9.185e-03, -2.633e-01, 1.053e-01, 6.824e-01, -4.166e-01, -4.298e-02, -7.350e-02, 4.451e-02, 1.792e-01, 3.923e-02, -3.383e-01, 8.630e-02, -1.111e-02) * s[1][1][1];
	r1 += M4(-1.794e-01, 1.704e-01, 3.255e-01, -1.147e-01, 7.470e-04, -1.323e-01, 3.008e-01, -3.074e-01, -1.297e-01, -5.191e-02, 1.120e-01, -4.178e-02, 3.265e-03, 1.384e-01, -3.201e-02, 1.157e-01) * s[1][1][1];
	r0 += M4(-6.787e-02, -3.057e-02, 5.131e-02, 3.824e-02, -2.773e-02, 7.556e-02, -4.922e-02, 2.460e-02, -2.274e-02, -6.377e-02, 1.143e-01, 5.478e-02, 3.094e-02, 8.210e-02, -1.077e-01, 3.537e-02) * s[1][2][0];
	r1 += M4(2.109e-02, -3.733e-02, 2.110e-02, -1.946e-02, 1.775e-02, 1.210e-01, 2.943e-02, 8.827e-02, -5.524e-02, -7.298e-02, -2.749e-02, 3.851e-02, 2.097e-02, 4.514e-02, -1.461e-02, -4.806e-02) * s[1][2][0];
	r0 += M4(-5.381e-02, -1.989e-03, 1.896e-02, 8.538e-02, -1.072e-01, -5.481e-03, 1.026e-01, -4.534e-02, 6.443e-03, -3.971e-02, 4.044e-02, -2.730e-02, -3.910e-03, 1.352e-01, -9.553e-02, 8.837e-02) * s[1][2][1];
	r1 += M4(3.130e-02, -1.056e-01, -4.217e-02, 7.283e-02, -7.050e-02, 1.570e-01, 3.107e-03, 6.716e-02, -1.141e-02, -1.033e-01, 4.579e-02, -2.627e-02, 1.874e-02, -9.350e-02, -2.366e-02, 3.996e-02) * s[1][2][1];
	r0 += M4(7.925e-03, 1.260e-01, -1.135e-01, 2.707e-02, 5.116e-02, -1.440e-01, 3.853e-02, -6.431e-03, -3.728e-02, -2.726e-02, -2.101e-01, -1.999e-02, 4.445e-02, -2.590e-03, -6.332e-02, -2.980e-03) * s[2][0][0];
	r1 += M4(7.098e-02, 1.935e-02, -1.324e-02, 4.549e-02, 3.727e-02, -5.473e-02, -1.759e-02, 5.058e-02, 1.042e-01, -3.862e-02, -1.469e-01, -1.108e-01, 1.106e-01, -4.261e-02, -4.726e-02, 8.109e-02) * s[2][0][0];
	r0 += M4(7.062e-02, 1.221e-01, -1.326e-01, 6.678e-02, 4.064e-02, -2.697e-03, -3.821e-02, 2.488e-02, 6.824e-03, -1.215e-01, 2.362e-02, -3.141e-02, 1.987e-02, -1.396e-01, 3.335e-01, -2.301e-02) * s[2][0][1];
	r1 += M4(1.091e-01, 3.371e-02, 1.072e-02, 2.370e-01, 6.903e-02, 3.469e-03, 5.212e-03, 8.617e-02, -2.222e-03, -3.889e-02, -3.991e-02, -5.603e-02, -1.665e-01, -4.338e-02, 2.036e-01, 3.408e-02) * s[2][0][1];
	r0 += M4(1.553e-02, 2.250e-02, 2.864e-03, 4.696e-02, 2.618e-02, 1.200e-01, 1.306e-02, 7.300e-02, 5.837e-02, 5.891e-02, -8.268e-02, 6.122e-02, 1.415e-02, -8.321e-02, 7.439e-02, 5.393e-03) * s[2][1][0];
	r1 += M4(7.047e-02, -3.101e-04, 1.151e-01, 1.556e-01, -3.079e-02, -1.054e-02, 1.044e-02, 9.925e-02, 8.567e-02, -2.986e-04, -7.660e-02, -7.448e-02, -1.056e-01, 8.981e-02, 5.335e-02, -5.882e-03) * s[2][1][0];
	r0 += M4(3.542e-02, -5.869e-02, 1.165e-01, -2.249e-02, 5.472e-02, 6.679e-02, 4.768e-02, -2.549e-02, 3.332e-02, 1.376e-02, -5.484e-02, 3.811e-02, 1.771e-02, -1.480e-01, 2.161e-02, 8.555e-02) * s[2][1][1];
	r1 += M4(-3.388e-02, -3.217e-02, 6.377e-02, 8.520e-02, -3.043e-03, -7.048e-02, 3.186e-02, 2.145e-01, 1.679e-02, 2.595e-02, -2.905e-02, 1.003e-02, -1.988e-02, 2.127e-02, -6.959e-02, -3.644e-02) * s[2][1][1];
	r0 += M4(1.879e-02, -5.534e-02, 5.636e-02, 5.306e-02, -1.916e-03, -3.415e-02, -1.909e-03, 1.532e-02, 3.945e-02, -3.018e-02, -6.551e-02, -8.277e-02, -3.795e-02, 2.021e-02, 3.468e-03, 1.391e-02) * s[2][2][0];
	r1 += M4(-3.308e-02, -7.060e-02, 5.863e-03, 3.110e-02, 4.225e-03, -1.996e-03, -2.117e-02, -2.793e-02, 4.214e-02, 2.879e-02, 6.989e-02, 6.059e-02, 1.277e-02, -7.240e-02, -4.664e-02, -1.305e-02) * s[2][2][0];
	r0 += M4(1.278e-02, -4.585e-02, 2.229e-02, 3.256e-02, 5.088e-02, 3.186e-02, -3.135e-02, 2.195e-03, -7.039e-03, -2.499e-02, 6.012e-02, -3.229e-02, 5.249e-03, 9.247e-02, -2.213e-02, 5.562e-02) * s[2][2][1];
	r1 += M4(8.935e-03, -6.474e-02, 2.058e-02, 5.195e-02, -4.100e-02, 7.602e-02, 3.389e-02, 5.512e-02, 1.200e-02, -7.110e-02, 4.626e-02, 2.666e-02, -3.100e-03, -3.427e-02, -1.590e-02, 3.193e-02) * s[2][2][1];
	r0 += V4(-5.334e-03, -1.441e-03, -1.656e-02, -6.546e-03);
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(2.464e-03, -3.589e-03, -1.070e-02, -3.418e-04);
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-6x8C-RCAS-out-shuffle
//!HOOK LUMA
//!COMPUTE 16 16 8 8
//!BIND LUMA
//!BIND conv6
//!BIND rcas
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 1
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(texelFetch(conv6_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv6_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 g[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv6_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			g[0][ay][ax] = l0(x - 1, y - 1);
			g[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s[3][3][2];
	V4 r0 = V4(0.0);
	s[0][0][0] = max(g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[0][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[0][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[0][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[0][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[0][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[0][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[0][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[0][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[0][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[0][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[0][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[0][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(-4.111e-01, -2.172e-01, 1.884e-01, 9.817e-02, -1.710e-02, 2.842e-02, 1.712e-02, -3.080e-03, -4.340e-03, 4.593e-02, -2.395e-02, -2.465e-02, 5.336e-03, 1.789e-02, -7.251e-02, -3.077e-02) * s[0][0][0];
	r0 += M4(-2.112e-01, -1.438e-01, 1.250e-02, 1.154e-02, 1.233e-01, -7.038e-02, 2.993e-02, -1.792e-02, -2.375e-02, 4.415e-02, -3.772e-02, -2.544e-02, -4.697e-02, -1.903e-02, -5.756e-02, -3.328e-02) * s[0][0][1];
	r0 += M4(2.510e-01, -2.312e-02, -1.652e-02, 1.386e-01, -1.320e-01, -1.102e-01, -9.182e-02, -2.018e-02, 1.878e-01, 7.486e-02, 6.031e-02, 8.272e-02, 1.366e-03, 1.745e-02, 4.181e-02, -3.425e-02) * s[0][1][0];
	r0 += M4(6.882e-02, -4.236e-02, 3.498e-02, 3.780e-02, -4.077e-01, 5.147e-02, -5.872e-02, 8.365e-03, 2.725e-01, 6.921e-02, 2.101e-02, 5.634e-02, 3.041e-02, 6.661e-03, 8.572e-03, -2.385e-02) * s[0][1][1];
	r0 += M4(-4.139e-02, 1.176e-01, 1.116e-02, -2.018e-02, -7.040e-02, -2.441e-02, 1.757e-02, 8.134e-03, -3.623e-02, 4.715e-02, -6.472e-03, -3.478e-02, 3.982e-02, -3.107e-02, -3.679e-02, -1.211e-02) * s[0][2][0];
	r0 += M4(-1.841e-02, 5.817e-02, -2.671e-02, -2.179e-02, -4.046e-02, -4.526e-02, 9.199e-03, 1.043e-02, -5.848e-02, 7.417e-02, -3.961e-03, -3.932e-02, 2.301e-02, -1.556e-03, -1.798e-02, -5.238e-03) * s[0][2][1];
	r0 += M4(8.102e-01, 3.080e-01, -2.979e-01, -5.553e-02, 7.448e-02, 1.388e-02, -4.722e-02, 4.184e-02, -2.369e-01, -9.986e-02, -4.693e-02, 7.571e-02, 2.063e-01, -1.417e-01, 3.332e-01, 6.273e-02) * s[1][0][0];
	r0 += M4(3.883e-01, 2.544e-01, 3.096e-02, -6.200e-02, 1.172e-01, -1.693e-01, 1.763e-01, -1.961e-01, -1.280e-01, -9.693e-02, -1.126e-01, 4.187e-02, 4.325e-02, -1.138e-01, 7.669e-02, 8.393e-03) * s[1][0][1];
	r0 += M4(3.598e-01, 1.042e+00, -4.367e-01, -7.940e-01, 3.164e-01, 1.160e-01, 3.058e-01, 2.521e-02, 3.079e-01, 1.035e-01, 7.832e-01, 2.300e-01, 1.355e-02, 6.700e-01, -1.711e-01, 4.521e-01) * s[1][1][0];
	r0 += M4(6.883e-02, 1.346e-01, 3.166e-02, -4.795e-02, -3.028e-01, 8.123e-01, -4.931e-01, 6.067e-01, 3.050e-01, 1.816e-01, 4.515e-01, 3.334e-02, 6.962e-03, 3.565e-01, -1.343e-01, 1.440e-01) * s[1][1][1];
	r0 += M4(1.764e-02, -3.951e-02, 3.143e-02, 5.398e-02, -7.713e-02, 6.576e-02, -1.374e-01, 1.126e-01, -1.446e-01, -1.698e-01, -8.443e-02, 3.404e-01, 8.313e-02, -1.094e-01, 1.451e-01, -1.544e-01) * s[1][2][0];
	r0 += M4(-2.128e-02, 1.251e-02, -3.293e-02, 1.028e-01, 5.375e-02, -2.091e-02, 3.306e-03, 3.479e-02, -1.049e-01, -3.797e-02, -8.289e-02, 1.575e-01, 6.091e-02, -9.363e-02, 9.759e-02, -1.067e-01) * s[1][2][1];
	r0 += M4(6.042e-02, -2.590e-02, -1.487e-01, -6.159e-02, 5.707e-03, 1.898e-02, -1.083e-02, -8.948e-03, 5.657e-02, 4.443e-02, -5.443e-03, -1.538e-02, 3.783e-03, 1.072e-01, -7.139e-02, -2.800e-02) * s[2][0][0];
	r0 += M4(2.383e-02, -8.665e-02, -8.957e-02, -2.254e-02, 1.083e-02, 3.645e-02, -6.678e-02, -2.003e-02, 1.383e-02, 4.139e-02, 9.757e-03, -3.497e-03, -2.962e-02, 6.522e-02, -4.695e-02, -1.104e-03) * s[2][0][1];
	r0 += M4(-1.323e-01, 9.298e-02, 8.184e-02, 1.030e-01, -6.500e-02, 4.090e-02, -8.417e-02, -2.800e-02, -4.709e-03, -7.499e-02, 4.578e-02, -3.626e-03, 2.899e-03, -1.947e-01, 1.151e-01, 2.704e-02) * s[2][1][0];
	r0 += M4(-1.113e-01, 2.005e-01, -1.723e-02, 6.442e-02, -3.637e-02, -3.414e-02, -1.929e-01, 1.731e-01, -4.554e-02, -1.323e-01, 1.077e-01, 1.026e-02, -1.176e-02, -1.589e-01, 5.290e-02, -3.674e-02) * s[2][1][1];
	r0 += M4(-5.105e-02, -1.411e-01, -5.846e-02, -7.052e-02, 9.945e-03, -4.552e-02, 3.254e-02, -4.677e-02, -7.496e-02, 4.095e-03, -5.965e-02, -2.720e-02, -1.031e-02, 4.373e-02, -4.273e-02, 1.550e-02) * s[2][2][0];
	r0 += M4(-5.182e-02, -1.767e-01, -1.735e-02, -8.391e-02, 4.633e-03, -2.297e-02, 5.388e-02, -6.488e-02, -5.863e-02, -8.087e-03, -5.557e-02, 1.652e-02, -7.684e-03, 3.094e-02, -3.058e-02, 2.218e-02) * s[2][2][1];
	s[0][0][0] = max(g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][0][1] = -max(-g[1][xy.y+0][xy.x+0], V4(0.0));
	s[0][1][0] = max(g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][1][1] = -max(-g[1][xy.y+0][xy.x+1], V4(0.0));
	s[0][2][0] = max(g[1][xy.y+0][xy.x+2], V4(0.0));
	s[0][2][1] = -max(-g[1][xy.y+0][xy.x+2], V4(0.0));
	s[1][0][0] = max(g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][0][1] = -max(-g[1][xy.y+1][xy.x+0], V4(0.0));
	s[1][1][0] = max(g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][1][1] = -max(-g[1][xy.y+1][xy.x+1], V4(0.0));
	s[1][2][0] = max(g[1][xy.y+1][xy.x+2], V4(0.0));
	s[1][2][1] = -max(-g[1][xy.y+1][xy.x+2], V4(0.0));
	s[2][0][0] = max(g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][0][1] = -max(-g[1][xy.y+2][xy.x+0], V4(0.0));
	s[2][1][0] = max(g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][1][1] = -max(-g[1][xy.y+2][xy.x+1], V4(0.0));
	s[2][2][0] = max(g[1][xy.y+2][xy.x+2], V4(0.0));
	s[2][2][1] = -max(-g[1][xy.y+2][xy.x+2], V4(0.0));
	r0 += M4(3.541e-02, -1.118e-02, 6.671e-03, 3.166e-02, 3.988e-02, -1.887e-02, 8.912e-02, 7.204e-02, 3.316e-02, -7.483e-02, 2.843e-02, 7.784e-02, 1.429e-01, 1.685e-01, -5.097e-02, -2.854e-02) * s[0][0][0];
	r0 += M4(6.712e-02, -6.286e-03, 7.885e-03, 3.013e-02, 4.955e-01, -5.059e-01, 1.915e-01, 9.588e-02, 4.565e-02, -1.008e-01, -3.849e-02, 7.442e-02, 1.595e-01, 1.028e-01, 1.253e-02, -1.875e-02) * s[0][0][1];
	r0 += M4(-4.251e-02, 7.894e-03, -2.525e-03, -3.752e-02, 1.433e-01, -1.954e-02, 1.837e-04, 2.745e-03, 2.842e-01, -3.210e-02, 4.676e-02, -1.082e-01, 2.345e-01, 1.073e-01, 2.130e-02, -1.692e-02) * s[0][1][0];
	r0 += M4(-1.190e-01, -4.714e-02, 4.473e-02, 5.637e-04, 1.021e-02, 9.021e-02, -4.092e-02, 8.059e-03, 6.803e-02, 2.049e-01, 3.416e-02, -8.233e-02, -1.898e-01, 1.005e-01, 2.137e-01, 1.292e-01) * s[0][1][1];
	r0 += M4(-3.778e-02, -2.808e-03, -1.194e-02, -3.307e-03, 9.108e-03, 4.807e-04, -1.952e-03, -4.300e-02, 1.417e-02, -4.645e-02, -1.636e-02, -5.211e-02, 4.199e-02, 7.759e-02, -3.948e-03, -1.111e-02) * s[0][2][0];
	r0 += M4(-5.056e-02, -1.499e-01, 7.696e-03, 2.875e-02, 3.938e-02, -8.303e-03, 2.513e-03, -5.066e-02, 9.921e-03, -3.543e-03, -2.282e-02, -5.136e-02, 4.742e-02, -9.292e-02, 1.038e-02, 7.886e-02) * s[0][2][1];
	r0 += M4(-2.889e-01, -9.708e-02, 3.695e-02, -1.206e-01, -1.738e-01, 4.250e-02, -3.449e-01, -2.645e-01, 2.781e-02, 8.245e-02, 1.537e-01, -1.382e-01, -9.102e-02, -7.028e-02, -1.124e-01, 1.211e-01) * s[1][0][0];
	r0 += M4(-2.597e-01, -1.170e-01, 2.624e-02, -5.705e-02, 2.376e-01, -1.055e-01, 2.920e-01, -1.028e+00, -3.597e-02, 7.254e-02, 2.166e-01, -2.013e-01, -1.019e-01, -6.900e-02, -9.687e-02, 1.451e-01) * s[1][0][1];
	r0 += M4(1.723e-01, -6.783e-02, 1.117e-01, 2.620e-01, 2.121e-01, 2.030e-01, 2.722e-01, 2.063e-02, -3.135e-01, -2.124e-01, 7.887e-02, -1.329e-02, -7.834e-02, -2.050e-02, -1.977e-01, -3.213e-01) * s[1][1][0];
	r0 += M4(6.958e-01, 1.304e-01, -1.823e-02, -1.644e-01, 1.529e-01, 1.816e-01, 9.656e-02, 1.189e-01, -3.479e-01, -1.520e-01, -1.958e-01, 3.783e-01, 1.645e-01, 6.421e-02, -2.510e-01, -4.349e-01) * s[1][1][1];
	r0 += M4(-5.731e-02, 4.832e-02, -3.932e-02, 4.304e-03, -5.672e-03, -6.064e-02, 7.238e-04, -3.360e-02, 8.444e-02, -2.047e-01, 2.216e-02, -1.594e-01, -4.414e-02, -1.021e-01, 4.700e-02, -3.361e-02) * s[1][2][0];
	r0 += M4(-1.065e-01, 1.611e-01, 5.596e-03, 4.747e-02, 2.297e-02, -6.764e-02, 6.677e-02, -5.555e-02, 5.590e-02, -1.633e-01, 5.809e-02, -9.594e-02, -1.018e-01, -1.832e-02, 1.039e-02, 2.921e-02) * s[1][2][1];
	r0 += M4(3.930e-02, -4.334e-02, 3.289e-02, 1.812e-02, 1.421e-03, -1.097e-01, 1.005e-01, 8.119e-02, 4.729e-02, -6.539e-02, 9.031e-03, 2.246e-02, -2.748e-02, 5.973e-02, -4.486e-02, 3.203e-03) * s[2][0][0];
	r0 += M4(-4.939e-02, -7.930e-02, 1.674e-01, -1.701e-02, 2.293e-02, -1.867e-01, 1.789e-01, 1.223e-01, 5.970e-02, -6.095e-02, 3.817e-03, 4.404e-02, -1.895e-02, 5.735e-02, -2.334e-02, -1.143e-02) * s[2][0][1];
	r0 += M4(-1.106e-01, -2.052e-02, 1.928e-01, 8.239e-02, -4.014e-02, -6.643e-02, -1.609e-02, 5.890e-04, 2.913e-02, 1.217e-01, -1.224e-01, 8.321e-02, 7.440e-02, -1.064e-01, 1.495e-01, -4.798e-02) * s[2][1][0];
	r0 += M4(-1.416e-01, -1.284e-01, 1.013e-01, 2.842e-01, 1.187e-02, -6.161e-02, 5.153e-02, -3.134e-02, 3.092e-02, 1.884e-01, -5.922e-02, 7.215e-02, 4.403e-02, -1.323e-01, 1.294e-01, -1.787e-02) * s[2][1][1];
	r0 += M4(-5.484e-02, -5.867e-02, -5.166e-02, 4.485e-02, -3.861e-02, 3.205e-02, -3.295e-02, 4.779e-02, 1.929e-02, 5.424e-02, 6.108e-02, -4.872e-02, -3.982e-02, 3.038e-02, -6.054e-02, 5.567e-02) * s[2][2][0];
	r0 += M4(3.006e-02, 2.802e-02, -7.143e-02, -1.371e-01, -4.346e-02, 1.517e-02, -4.782e-02, 4.782e-02, 5.176e-02, 6.232e-02, 4.530e-02, -3.545e-02, -2.572e-02, 4.176e-02, -4.284e-02, 4.529e-02) * s[2][2][1];
	r0 += V4(4.013e-03, 4.528e-03, 3.671e-03, 3.866e-03);
	r0 = tanh(r0);
	vec2 opt = 0.5 * LUMA_pt;
	vec2 fpos = (vec2(opos) + vec2(0.5)) * opt;
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0.x + rcas_tex(fpos + vec2(0.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r0.y + rcas_tex(fpos + vec2(1.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(0, 1), vec4(r0.z + rcas_tex(fpos + vec2(0.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 1), vec4(r0.w + rcas_tex(fpos + vec2(1.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
}
