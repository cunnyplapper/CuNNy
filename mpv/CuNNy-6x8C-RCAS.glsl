// CuNNy 6x8C RCAS
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

// FSR mpv | modified
// Copyright (c) 2021 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// FidelityFX FSR v1.0.2 by AMD
// ported to mpv by agyild

//!DESC CuNNy-EASU
//!HOOK LUMA
//!BIND LUMA
//!SAVE easu
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
//!COMPONENTS 1

float APrxLoRcpF1(float a) {
	return uintBitsToFloat(uint(0x7ef07ebb) - floatBitsToUint(a));
}

float APrxLoRsqF1(float a) {
	return uintBitsToFloat(uint(0x5f347d74) - (floatBitsToUint(a) >> uint(1)));
}

float AMin3F1(float x, float y, float z) {
	return min(x, min(y, z));
}

float AMax3F1(float x, float y, float z) {
	return max(x, max(y, z));
}

void tap(inout float aC, inout float aW, vec2 off, vec2 dir, vec2 len,
         float lob, float clp, float c){
	vec2 v;
	v.x = (off.x * ( dir.x)) + (off.y * dir.y);
	v.y = (off.x * (-dir.y)) + (off.y * dir.x);
	v *= len;
	float d2 = v.x * v.x + v.y * v.y;
	d2 = min(d2, clp);
	float wB = float(2.0 / 5.0) * d2 + -1.0;
	float wA = lob * d2 + -1.0;
	wB *= wB;
	wA *= wA;
	wB = float(25.0 / 16.0) * wB + float(-(25.0 / 16.0 - 1.0));
	float w = wB * wA;
	aC += c * w;
	aW += w;
}

void set(inout vec2 dir, inout float len, vec2 pp, bool biS, bool biT,
         bool biU, bool biV, float lA, float lB, float lC, float lD, float lE){
	float w = 0.0;
	if (biS)
		w = (1.0 - pp.x) * (1.0 - pp.y);
	if (biT)
		w =        pp.x  * (1.0 - pp.y);
	if (biU)
		w = (1.0 - pp.x) *        pp.y;
	if (biV)
		w =        pp.x  *        pp.y;
	float dc = lD - lC;
	float cb = lC - lB;
	float lenX = max(abs(dc), abs(cb));
	lenX = APrxLoRcpF1(lenX);
	float dirX = lD - lB;
	lenX = clamp(abs(dirX) * lenX, 0.0, 1.0);
	lenX *= lenX;
	float ec = lE - lC;
	float ca = lC - lA;
	float lenY = max(abs(ec), abs(ca));
	lenY = APrxLoRcpF1(lenY);
	float dirY = lE - lA;
	lenY = clamp(abs(dirY) * lenY, 0.0, 1.0);
	lenY *= lenY;
	dir += vec2(dirX, dirY) * w;
	len += dot(vec2(w), vec2(lenX, lenY));
}

vec4 hook() {
	vec4 pix = vec4(0.0, 0.0, 0.0, 1.0);
	vec2 pp = LUMA_pos * LUMA_size - vec2(0.5);
	vec2 fp = floor(pp);
	pp -= fp;
#if (defined(LUMA_gather) && (__VERSION__ >= 400 || (GL_ES && __VERSION__ >= 310)))
	vec4 bczzL = LUMA_gather(vec2((fp + vec2(1.0, -1.0)) * LUMA_pt), 0);
	vec4 ijfeL = LUMA_gather(vec2((fp + vec2(0.0,  1.0)) * LUMA_pt), 0);
	vec4 klhgL = LUMA_gather(vec2((fp + vec2(2.0,  1.0)) * LUMA_pt), 0);
	vec4 zzonL = LUMA_gather(vec2((fp + vec2(1.0,  3.0)) * LUMA_pt), 0);
#else
	float b = LUMA_tex(vec2((fp + vec2(0.5, -0.5)) * LUMA_pt)).r;
	float c = LUMA_tex(vec2((fp + vec2(1.5, -0.5)) * LUMA_pt)).r;
	float e = LUMA_tex(vec2((fp + vec2(-0.5, 0.5)) * LUMA_pt)).r;
	float f = LUMA_tex(vec2((fp + vec2( 0.5, 0.5)) * LUMA_pt)).r;
	float g = LUMA_tex(vec2((fp + vec2( 1.5, 0.5)) * LUMA_pt)).r;
	float h = LUMA_tex(vec2((fp + vec2( 2.5, 0.5)) * LUMA_pt)).r;
	float i = LUMA_tex(vec2((fp + vec2(-0.5, 1.5)) * LUMA_pt)).r;
	float j = LUMA_tex(vec2((fp + vec2( 0.5, 1.5)) * LUMA_pt)).r;
	float k = LUMA_tex(vec2((fp + vec2( 1.5, 1.5)) * LUMA_pt)).r;
	float l = LUMA_tex(vec2((fp + vec2( 2.5, 1.5)) * LUMA_pt)).r;
	float n = LUMA_tex(vec2((fp + vec2(0.5, 2.5) ) * LUMA_pt)).r;
	float o = LUMA_tex(vec2((fp + vec2(1.5, 2.5) ) * LUMA_pt)).r;
	vec4 bczzL = vec4(b, c, 0.0, 0.0);
	vec4 ijfeL = vec4(i, j, f, e);
	vec4 klhgL = vec4(k, l, h, g);
	vec4 zzonL = vec4(0.0, 0.0, o, n);
#endif
	float bL = bczzL.x;
	float cL = bczzL.y;
	float iL = ijfeL.x;
	float jL = ijfeL.y;
	float fL = ijfeL.z;
	float eL = ijfeL.w;
	float kL = klhgL.x;
	float lL = klhgL.y;
	float hL = klhgL.z;
	float gL = klhgL.w;
	float oL = zzonL.z;
	float nL = zzonL.w;
	vec2 dir = vec2(0.0);
	float len = 0.0;
	set(dir, len, pp, true, false, false, false, bL, eL, fL, gL, jL);
	set(dir, len, pp, false, true, false, false, cL, fL, gL, hL, kL);
	set(dir, len, pp, false, false, true, false, fL, iL, jL, kL, nL);
	set(dir, len, pp, false, false, false, true, gL, jL, kL, lL, oL);
	vec2 dir2 = dir * dir;
	float dirR = dir2.x + dir2.y;
	bool zro = dirR < float(1.0 / 32768.0);
	dirR = APrxLoRsqF1(dirR);
	dirR = zro ? 1.0 : dirR;
	dir.x = zro ? 1.0 : dir.x;
	dir *= vec2(dirR);
	len = len * 0.5;
	len *= len;
	float stretch = (dir.x * dir.x + dir.y * dir.y) * APrxLoRcpF1(max(abs(dir.x), abs(dir.y)));
	vec2 len2 = vec2(1.0 + (stretch - 1.0) * len, 1.0 + -0.5 * len);
	float lob = 0.5 + float((1.0 / 4.0 - 0.04) - 0.5) * len;
	float clp = APrxLoRcpF1(lob);
	float aC = 0.0;
	float aW = 0.0;
	tap(aC, aW, vec2( 0.0,-1.0) - pp, dir, len2, lob, clp, bL);
	tap(aC, aW, vec2( 1.0,-1.0) - pp, dir, len2, lob, clp, cL);
	tap(aC, aW, vec2(-1.0, 1.0) - pp, dir, len2, lob, clp, iL);
	tap(aC, aW, vec2( 0.0, 1.0) - pp, dir, len2, lob, clp, jL);
	tap(aC, aW, vec2( 0.0, 0.0) - pp, dir, len2, lob, clp, fL);
	tap(aC, aW, vec2(-1.0, 0.0) - pp, dir, len2, lob, clp, eL);
	tap(aC, aW, vec2( 1.0, 1.0) - pp, dir, len2, lob, clp, kL);
	tap(aC, aW, vec2( 2.0, 1.0) - pp, dir, len2, lob, clp, lL);
	tap(aC, aW, vec2( 2.0, 0.0) - pp, dir, len2, lob, clp, hL);
	tap(aC, aW, vec2( 1.0, 0.0) - pp, dir, len2, lob, clp, gL);
	tap(aC, aW, vec2( 1.0, 2.0) - pp, dir, len2, lob, clp, oL);
	tap(aC, aW, vec2( 0.0, 2.0) - pp, dir, len2, lob, clp, nL);
	pix.r = aC / aW;
	float min1 = min(AMin3F1(fL, gL, jL), kL);
	float max1 = max(AMax3F1(fL, gL, jL), kL);
	pix.r = clamp(pix.r, min1, max1);
	pix.r = clamp(pix.r, 0.0, 1.0);
	return pix;
}

//!DESC CuNNy-RCAS
//!HOOK LUMA
//!BIND easu
//!SAVE rcas
//!WIDTH easu.w
//!HEIGHT easu.h
//!COMPONENTS 1

// CuNNy: do not change unless changed during training as well
#define SHARPNESS 2.0
#define FSR_RCAS_LIMIT (0.25 - (1.0 / 16.0))

float APrxMedRcpF1(float a) {
	float b = uintBitsToFloat(uint(0x7ef19fff) - floatBitsToUint(a));
	return b * (-b * a + 2.0);
}

float AMax3F1(float x, float y, float z) {
	return max(x, max(y, z)); 
}


float AMin3F1(float x, float y, float z) {
	return min(x, min(y, z));
}

vec4 hook() {
#if (defined(easu_gather) && (__VERSION__ >= 400 || (GL_ES && __VERSION__ >= 310)))
	vec3 bde = easu_gather(easu_pos + easu_pt * vec2(-0.5), 0).xyz;
	float b = bde.z;
	float d = bde.x;
	float e = bde.y;
	vec2 fh = easu_gather(easu_pos + easu_pt * vec2(0.5), 0).zx;
	float f = fh.x;
	float h = fh.y;
#else
	float b = easu_texOff(vec2( 0.0, -1.0)).r;
	float d = easu_texOff(vec2(-1.0,  0.0)).r;
	float e = easu_tex(easu_pos).r;
	float f = easu_texOff(vec2(1.0, 0.0)).r;
	float h = easu_texOff(vec2(0.0, 1.0)).r;
#endif
	float mn1L = min(AMin3F1(b, d, f), h);
	float mx1L = max(AMax3F1(b, d, f), h);
	vec2 peakC = vec2(1.0, -1.0 * 4.0);
	float hitMinL = min(mn1L, e) / (4.0 * mx1L);
	float hitMaxL = (peakC.x - max(mx1L, e)) / (4.0 * mn1L + peakC.y);
	float lobeL = max(-hitMinL, hitMaxL);
	float lobe = max(float(-FSR_RCAS_LIMIT), min(lobeL, 0.0)) * exp2(-clamp(float(SHARPNESS), 0.0, 2.0));
	float nz = 0.25 * b + 0.25 * d + 0.25 * f + 0.25 * h - e;
	nz = clamp(abs(nz) * APrxMedRcpF1(AMax3F1(AMax3F1(b, d, e), f, h) - AMin3F1(AMin3F1(b, d, e), f, h)), 0.0, 1.0);
	nz = -0.5 * nz + 1.0;
	lobe *= nz;
	float rcpL = APrxMedRcpF1(4.0 * lobe + 1.0);
	vec4 pix = vec4(0.0, 0.0, 0.0, 1.0);
	pix.r = float((lobe * b + lobe * d + lobe * h + lobe * f + e) * rcpL);
	return pix;
}


//!DESC CuNNy-6x8C-RCAS-in
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND LUMA
//!SAVE in
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
	#define V4 f16vec4
	#define M4 f16mat4
	#define F float16_t
#else
	#define V4 vec4
	#define M4 mat4
	#define F float
#endif
#define l0(x, y) F(texelFetch(LUMA_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(1, 1) + ivec2(0, 0), 0).r)
vec4 f0(F s0_0, F s0_1, F s0_2, F s0_3, F s0_4, F s0_5, F s0_6, F s0_7, F s0_8) {
	V4 r = V4(0.0);
	r += V4(-1.477e-02, 9.133e-02, -4.655e-02, -1.555e-02) * s0_0;
	r += V4(2.851e-03, 2.670e-02, -1.467e-01, -5.870e-03) * s0_1;
	r += V4(-6.262e-03, -2.489e-02, -6.419e-02, -6.987e-03) * s0_2;
	r += V4(1.301e-02, 1.278e-01, 1.740e-01, 5.068e-02) * s0_3;
	r += V4(3.126e-01, -4.463e-01, -4.077e-02, -3.470e-01) * s0_4;
	r += V4(-7.891e-03, -1.361e-02, -7.386e-02, 7.181e-03) * s0_5;
	r += V4(1.818e-01, 1.102e-01, -1.635e-01, 3.257e-02) * s0_6;
	r += V4(-2.640e-02, 8.368e-02, 6.473e-02, 3.229e-01) * s0_7;
	r += V4(-1.003e-03, 3.192e-02, -1.184e-02, -4.177e-03) * s0_8;
	r += V4(-3.604e-03, 1.878e-02, 5.712e-03, 2.111e-03);
	return vec4(r);
	
}
vec4 f1(F s0_0, F s0_1, F s0_2, F s0_3, F s0_4, F s0_5, F s0_6, F s0_7, F s0_8) {
	V4 r = V4(0.0);
	r += V4(-1.932e-02, -3.447e-01, 5.017e-04, 1.131e-02) * s0_0;
	r += V4(-1.458e-01, -8.335e-02, -1.107e-02, 1.432e-01) * s0_1;
	r += V4(1.202e-01, 2.069e-02, 2.742e-02, -2.197e-01) * s0_2;
	r += V4(7.958e-02, 7.184e-02, 3.599e-02, 1.117e-01) * s0_3;
	r += V4(-2.529e-01, 4.033e-01, -6.323e-02, 1.036e-01) * s0_4;
	r += V4(-7.480e-02, -4.040e-02, -2.139e-02, 2.380e-01) * s0_5;
	r += V4(2.558e-01, -7.266e-04, 1.757e-01, -1.140e-01) * s0_6;
	r += V4(9.503e-02, -2.235e-02, -2.056e-01, 1.499e-01) * s0_7;
	r += V4(-5.873e-02, 5.159e-04, 1.654e-02, -1.287e-01) * s0_8;
	r += V4(-3.960e-03, -7.372e-04, 8.100e-04, -2.787e-01);
	return vec4(r);
	
}
void hook() {
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + ivec2(gl_LocalInvocationID.xy);
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = LUMA_pt;
	F s0_0 = l0(-1, -1);
	F s0_1 = l0(0, -1);
	F s0_2 = l0(1, -1);
	F s0_3 = l0(-1, 0);
	F s0_4 = l0(0, 0);
	F s0_5 = l0(1, 0);
	F s0_6 = l0(-1, 1);
	F s0_7 = l0(0, 1);
	F s0_8 = l0(1, 1);
	imageStore(out_image, opos + ivec2(0, 0), f0(s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8));
	imageStore(out_image, opos + ivec2(1, 0), f1(s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8));
}


//!DESC CuNNy-6x8C-RCAS-conv1
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND in
//!BIND LUMA
//!SAVE conv1
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
	#define V4 f16vec4
	#define M4 f16mat4
	#define F float16_t
#else
	#define V4 vec4
	#define M4 mat4
	#define F float
#endif
#define l0(x, y) V4(texelFetch(in_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(in_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
vec4 f0(V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8, V4 s2_0, V4 s2_1, V4 s2_2, V4 s2_3, V4 s2_4, V4 s2_5, V4 s2_6, V4 s2_7, V4 s2_8, V4 s3_0, V4 s3_1, V4 s3_2, V4 s3_3, V4 s3_4, V4 s3_5, V4 s3_6, V4 s3_7, V4 s3_8) {
	V4 r = V4(0.0);
	r += M4(5.116e-02, 3.017e-02, 2.478e-02, 1.126e-01, 1.450e-01, -3.796e-02, 6.133e-02, -2.396e-01, 1.932e-02, -4.515e-01, -1.696e-01, 2.634e-01, 1.937e-01, -1.208e-01, -1.205e-02, -7.747e-02) * s0_0;
	r += M4(1.251e-01, -8.113e-02, -4.913e-03, -4.055e-03, 1.192e-01, -6.063e-02, -1.732e-01, -2.037e-01, -6.146e-02, -3.511e-01, 1.969e-01, -4.528e-02, 7.625e-02, 6.697e-02, -4.179e-01, -4.376e-01) * s0_1;
	r += M4(-9.985e-02, 1.185e-01, -3.575e-02, -3.871e-02, 8.948e-03, 1.384e-03, -5.546e-02, 1.601e-01, 6.771e-02, 4.379e-02, 3.615e-01, -5.992e-01, 1.073e-01, -3.625e-02, -1.806e-01, 2.493e-01) * s0_2;
	r += M4(1.855e-01, 3.225e-02, 3.942e-02, 1.336e-01, -1.265e-01, -1.200e-02, -6.189e-02, 2.084e-01, 6.652e-01, -3.105e-01, 9.786e-01, -8.449e-02, -4.079e-01, 2.953e-03, -8.149e-02, -1.068e-01) * s0_3;
	r += M4(-3.113e-02, -2.695e-02, -8.401e-02, -5.800e-02, 4.353e-01, -7.613e-02, 1.242e-01, 4.858e-01, 4.907e-01, -2.027e-01, 4.666e-01, 1.670e-01, 3.053e-01, -1.106e-01, 1.330e-01, 1.574e-01) * s0_4;
	r += M4(-2.580e-02, -2.269e-01, 1.002e-02, 6.386e-02, 1.585e-02, 4.774e-01, 9.723e-02, -1.102e-01, -4.456e-01, -7.932e-01, -4.978e-01, 3.700e-01, -2.281e-01, 1.663e-01, 4.655e-02, 5.026e-02) * s0_5;
	r += M4(1.731e-01, -2.336e-02, -1.824e-02, -1.214e-01, 2.203e-01, 1.313e-01, 3.066e-02, -1.618e-01, 1.755e-01, 4.897e-01, 2.378e-01, 2.470e-01, -4.075e-02, -1.591e-02, -9.009e-03, -3.436e-02) * s0_6;
	r += M4(-1.124e-01, 8.720e-02, -1.126e-01, -1.292e-02, -1.322e-01, 2.950e-04, -5.303e-02, -4.967e-02, 3.439e-01, 5.761e-01, -1.347e-01, 6.108e-01, 4.320e-02, 3.495e-02, 1.072e-02, -7.844e-03) * s0_7;
	r += M4(6.139e-02, -1.846e-01, -6.100e-02, -7.126e-02, -2.431e-02, -2.089e-01, 6.819e-02, 9.645e-02, -1.788e-02, -7.255e-01, 1.906e-01, 1.528e-01, -2.485e-02, -1.586e-03, 1.165e-01, 1.144e-03) * s0_8;
	r += M4(-1.193e-01, 7.497e-01, -1.536e+00, -2.321e-01, 2.018e-01, 1.457e-03, -4.379e-02, -1.786e-01, 1.758e-01, 1.075e-01, -1.028e-01, -1.166e-01, 3.242e-01, -1.771e-01, -4.757e-03, -1.987e-01) * s1_0;
	r += M4(8.186e-01, 6.762e-01, 7.116e-01, 1.477e+00, 2.105e-01, -7.699e-02, -5.195e-01, -1.255e-01, -6.472e-02, -1.114e-01, -1.383e-01, 5.206e-02, -2.558e-01, 1.311e-01, -3.292e-01, -2.378e-01) * s1_1;
	r += M4(-1.960e+00, 9.302e-01, -1.522e+00, -5.566e-02, -1.382e-01, -1.290e-01, -7.858e-02, 4.806e-02, 1.274e-01, 2.449e-01, -5.334e-02, -6.592e-03, 1.116e-01, 2.405e-01, 3.758e-01, -3.872e-01) * s1_2;
	r += M4(9.382e-01, 3.660e-01, -3.296e-01, 5.223e-01, -2.562e-01, -5.043e-02, -1.751e-01, -4.293e-02, 3.472e-02, -9.117e-02, -5.310e-02, 7.517e-02, -4.469e-01, 9.744e-02, -8.432e-02, -2.442e-02) * s1_3;
	r += M4(-2.401e+00, 8.463e-01, -1.834e+00, -4.542e-01, 3.968e-01, 1.029e-01, 7.618e-01, 8.982e-02, 1.387e-01, 1.070e-01, 1.966e-02, 1.515e-01, 2.900e-01, -2.586e-01, -1.111e-01, 4.122e-01) * s1_4;
	r += M4(-7.567e-01, 5.785e-02, 1.622e+00, -1.883e-01, -7.139e-02, 3.879e-01, 4.407e-01, -4.904e-01, -1.324e-01, 1.272e-01, -1.627e-01, 1.357e-02, -1.711e-01, 5.857e-02, 2.154e-01, 1.598e-01) * s1_5;
	r += M4(-4.182e-01, 1.773e-01, -1.034e+00, -6.098e-02, 8.080e-02, 1.528e-01, 6.465e-02, -5.726e-02, 1.065e-01, 1.134e-02, 9.980e-03, -7.638e-02, -1.293e-01, -4.178e-04, 6.825e-02, 1.682e-01) * s1_6;
	r += M4(-1.674e+00, 3.469e-01, 9.490e-01, 1.226e+00, -1.886e-01, 5.969e-02, 1.337e-02, 1.006e-01, 2.825e-02, 1.319e-01, 1.887e-01, 7.470e-02, 6.582e-02, 3.769e-02, -1.041e-02, 2.830e-02) * s1_7;
	r += M4(-6.713e-01, -2.028e-01, 4.892e-01, 2.166e+00, 2.496e-02, -1.295e-01, 2.758e-02, 2.016e-02, 1.844e-02, -9.272e-03, 1.306e-01, -3.705e-02, -5.592e-02, 2.558e-02, 7.373e-02, -2.497e-02) * s1_8;
	r += M4(1.081e-01, 5.072e-02, 7.238e-02, -7.180e-02, 4.666e-02, 5.593e-03, 4.403e-03, 2.185e-02, -5.937e-02, 7.450e-02, -6.893e-02, 3.998e-01, 8.158e-02, -3.869e-02, 5.994e-02, 3.173e-01) * s2_0;
	r += M4(-6.128e-02, 1.062e-01, 2.647e-01, 1.606e-01, -1.010e-01, -1.305e-01, 9.869e-02, 5.690e-02, -3.986e-01, -8.834e-03, -5.090e-01, -7.144e-02, -1.868e-02, -1.140e-01, 5.253e-02, -3.406e-01) * s2_1;
	r += M4(-3.417e-02, -1.349e-01, 1.964e-02, 8.944e-02, -4.891e-02, -2.365e-02, 3.525e-02, -2.379e-03, -1.312e-01, -1.592e-01, 2.923e-04, 4.895e-01, -4.286e-02, -1.137e-01, 1.638e-01, 1.886e-01) * s2_2;
	r += M4(-2.644e-01, -5.467e-02, -1.285e-02, 3.578e-02, 1.401e-01, 3.041e-03, 2.982e-02, -2.520e-02, 1.471e-01, -1.254e-01, -5.622e-02, -7.593e-03, 3.174e-01, -3.276e-02, 1.656e-01, -2.858e-01) * s2_3;
	r += M4(2.349e-01, 1.326e-01, 2.159e-01, -2.153e-01, -2.213e-01, 9.380e-02, -6.626e-02, -5.784e-01, -1.002e-01, 1.871e-01, -2.571e-02, 4.311e-01, -1.740e-01, -8.016e-02, 7.544e-02, 2.126e-02) * s2_4;
	r += M4(2.724e-02, 2.085e-01, 2.342e-01, 2.376e-01, 1.088e-01, -3.223e-01, -1.632e-01, -1.225e-01, -3.193e-02, 1.782e-01, -4.502e-01, -1.180e-01, -1.138e-01, -2.920e-01, -9.727e-03, 2.845e-02) * s2_5;
	r += M4(-6.448e-02, 5.591e-02, 7.041e-02, 2.924e-01, -6.329e-02, -1.934e-03, -3.024e-02, -8.251e-02, 4.431e-02, -1.208e-01, 2.722e-02, -1.528e-01, 2.182e-01, -4.424e-02, 1.026e-01, 4.917e-03) * s2_6;
	r += M4(2.244e-02, -8.029e-02, 8.371e-02, -5.277e-03, -2.376e-01, 1.094e-01, 4.728e-02, -6.541e-01, -2.460e-02, -3.313e-02, 5.266e-03, -7.968e-02, -2.261e-01, -7.011e-02, 3.207e-02, -3.587e-02) * s2_7;
	r += M4(-9.445e-03, 1.672e-01, -8.565e-02, -1.479e-01, 8.838e-02, 9.115e-02, 3.195e-01, -1.879e-01, 3.423e-02, -4.721e-02, 2.078e-01, 1.081e-01, 2.471e-02, -1.659e-01, -9.519e-02, -5.417e-03) * s2_8;
	r += M4(1.137e-01, 9.407e-02, -4.082e-02, -7.604e-02, 2.575e-03, -6.167e-03, 6.011e-02, -1.520e-02, -5.718e-02, 4.719e-03, 1.508e-01, 8.131e-02, 5.263e-02, -5.922e-02, 8.079e-02, 2.324e-01) * s3_0;
	r += M4(1.092e-01, 3.618e-02, -4.506e-01, -2.936e-01, -8.325e-02, -1.222e-01, 8.276e-02, 1.361e-01, 3.026e-01, -8.032e-02, 1.311e-01, 1.911e-02, -3.928e-02, -4.774e-02, 1.089e-02, -1.410e-01) * s3_1;
	r += M4(1.966e-02, -1.886e-01, 7.292e-02, -1.448e-01, -8.316e-02, 1.610e-01, 2.243e-01, -5.024e-02, -6.314e-02, 1.608e-01, 2.203e-01, 7.321e-02, -2.860e-02, -1.709e-01, -3.295e-02, -5.289e-02) * s3_2;
	r += M4(-1.093e-01, -8.707e-02, -7.049e-02, 8.733e-02, 2.349e-01, 5.164e-02, -2.770e-02, 5.459e-02, 1.761e-02, -8.467e-02, -3.697e-02, 7.059e-02, 1.065e-01, 6.180e-02, -1.269e-02, 2.535e-04) * s3_3;
	r += M4(4.034e-01, 9.889e-02, -3.448e-01, -2.616e-02, -4.392e-01, 1.819e-01, -2.458e-01, 3.945e-01, 1.486e-01, 8.301e-02, -7.024e-02, -1.649e-01, -1.603e-01, 7.500e-02, 2.175e-01, 1.415e-01) * s3_4;
	r += M4(-4.203e-02, 1.067e-01, 5.052e-02, 1.685e-03, -2.605e-01, -2.716e-01, -4.421e-01, 3.126e-01, 5.662e-02, -2.518e-02, 2.823e-03, -7.641e-02, -9.565e-03, -3.870e-02, -2.550e-02, -1.053e-02) * s3_5;
	r += M4(5.712e-02, 1.203e-03, 1.472e-02, 5.830e-02, 1.247e-01, 2.459e-02, -9.056e-02, 1.538e-01, -1.028e-01, -6.255e-02, 4.566e-02, -3.811e-02, 1.589e-01, -3.516e-02, 4.989e-02, -6.050e-03) * s3_6;
	r += M4(8.475e-02, -1.596e-01, 8.269e-02, -5.054e-02, -2.968e-01, 1.216e-01, -2.135e-01, 4.705e-01, -1.304e-01, 3.360e-02, -2.817e-02, 6.056e-03, -1.390e-01, -5.086e-02, 7.488e-02, -5.289e-02) * s3_7;
	r += M4(7.390e-04, 8.450e-02, -6.251e-02, -1.254e-01, 6.035e-02, 2.445e-02, -2.161e-01, 2.594e-01, 2.562e-02, 4.533e-02, 6.747e-02, 7.228e-02, 6.805e-02, -1.165e-01, -4.117e-02, 3.821e-02) * s3_8;
	r += V4(-5.079e-03, 2.849e-01, 8.925e-02, 5.579e-02);
	return vec4(r);
	
}
vec4 f1(V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8, V4 s2_0, V4 s2_1, V4 s2_2, V4 s2_3, V4 s2_4, V4 s2_5, V4 s2_6, V4 s2_7, V4 s2_8, V4 s3_0, V4 s3_1, V4 s3_2, V4 s3_3, V4 s3_4, V4 s3_5, V4 s3_6, V4 s3_7, V4 s3_8) {
	V4 r = V4(0.0);
	r += M4(3.992e-02, 2.401e-02, -6.017e-03, 1.188e-01, -8.800e-02, -8.410e-03, 4.329e-02, 1.301e-03, 1.838e-03, 2.894e-02, 2.174e-01, -4.672e-02, -8.883e-03, -4.712e-02, -4.894e-02, -4.405e-02) * s0_0;
	r += M4(-9.609e-02, 7.087e-02, -1.977e-01, 4.157e-02, -1.272e-01, -4.978e-02, -4.005e-02, -1.130e-01, -1.142e-01, 1.320e-01, -2.423e-01, -3.993e-01, 1.725e-01, -1.133e-01, -1.255e-01, -1.209e-01) * s0_1;
	r += M4(-4.987e-02, 4.963e-03, -6.016e-02, 6.586e-02, -1.212e-01, -6.443e-02, -3.506e-01, 1.890e-03, 3.023e-01, 3.693e-01, 1.946e-01, 1.001e-01, 8.321e-02, -7.671e-02, -8.479e-02, -4.962e-02) * s0_2;
	r += M4(-4.491e-02, 2.827e-02, 9.135e-03, 2.643e-02, 6.821e-02, -2.825e-01, 1.480e-02, 4.098e-02, 2.546e-01, -1.363e-02, -1.193e-01, -3.355e-02, 3.654e-02, -1.163e-01, -4.167e-02, -1.023e-01) * s0_3;
	r += M4(1.130e-01, 1.440e-01, 1.908e-02, 2.209e-02, -2.958e-01, 2.394e-01, 4.492e-01, -2.309e-03, -1.787e-01, -1.734e-01, 9.842e-03, -7.104e-01, -1.414e-01, 5.131e-02, 2.469e-01, -3.403e-01) * s0_4;
	r += M4(-2.548e-01, -7.999e-02, -2.739e-03, -1.152e-01, -1.824e-01, -1.234e-01, -1.292e-01, 2.546e-01, 1.340e-01, -5.736e-01, -3.226e-01, -8.058e-01, -9.016e-02, -6.627e-02, -2.467e-02, 2.389e-01) * s0_5;
	r += M4(-2.108e-02, -1.090e-01, 1.130e-01, -7.146e-03, -9.087e-02, -6.157e-02, -8.881e-02, -5.139e-02, -2.605e-02, 1.088e-01, 5.456e-01, -4.957e-01, 5.527e-02, -1.085e-01, 3.577e-02, 1.405e-01) * s0_6;
	r += M4(-6.686e-02, 4.694e-02, -3.306e-02, -9.541e-03, 3.299e-01, 5.938e-01, -1.169e-01, 2.039e-01, 4.074e-01, -5.793e-01, 5.861e-01, 8.830e-02, -1.674e-02, -2.605e-02, -1.309e-01, 2.431e-02) * s0_7;
	r += M4(-2.066e-01, 7.767e-02, 2.488e-02, -1.857e-01, -1.136e-01, -3.938e-01, 1.645e-01, -6.669e-02, -6.895e-01, -2.027e-01, 2.614e-01, 5.925e-02, 3.193e-02, 7.968e-02, 5.705e-02, -6.455e-02) * s0_8;
	r += M4(3.159e-02, 2.028e+00, 2.590e-02, 2.109e-01, -7.200e-02, 2.172e-01, 9.835e-02, 9.301e-03, -6.882e-02, 2.255e-02, 1.840e-01, -1.450e-01, -4.108e-02, -2.724e-01, 2.121e-02, 8.970e-02) * s1_0;
	r += M4(-4.015e-01, 4.039e-01, -4.606e-01, 1.057e+00, -8.735e-02, -2.763e-01, 2.242e-01, -3.239e-01, -8.789e-02, -1.521e-01, 1.804e-02, 1.666e-01, -2.385e-03, 2.348e-01, -9.592e-03, 8.254e-02) * s1_1;
	r += M4(-7.200e-01, 7.707e-01, -1.684e+00, 9.943e-01, -7.505e-02, -1.156e-02, 9.240e-02, 1.652e-01, 6.574e-02, 8.520e-02, -2.203e-03, 7.691e-02, -2.525e-03, -1.007e-01, -2.105e-01, -8.404e-02) * s1_2;
	r += M4(-2.006e-01, 9.981e-01, 2.648e-01, -3.367e-01, 9.181e-03, 2.952e-02, -1.203e-01, -6.156e-02, -8.912e-02, -5.600e-03, 3.898e-02, 1.419e-02, -3.483e-02, -2.431e-01, 1.009e-01, -1.822e-01) * s1_3;
	r += M4(-9.706e-01, -8.460e-01, -2.053e+00, 7.334e-01, -2.163e-01, 4.632e-01, 1.937e-01, -1.889e-01, 1.409e-01, -3.068e-02, 9.178e-02, -9.315e-02, 7.397e-02, 4.027e-01, 3.563e-01, 2.186e-01) * s1_4;
	r += M4(-1.529e+00, 1.654e-02, -4.180e-01, -3.729e-01, -9.104e-02, 3.066e-02, -2.752e-02, -1.767e-01, 1.108e-01, -9.151e-02, -4.217e-02, -4.063e-02, -9.062e-02, -2.301e-01, -1.638e-01, 2.083e-01) * s1_5;
	r += M4(-2.145e-01, -2.669e-01, 1.160e+00, 6.335e-01, 4.363e-02, -5.788e-02, 4.764e-02, -6.597e-02, -1.854e-02, 1.380e-01, -2.984e-02, -1.103e-01, -2.453e-02, 4.803e-03, -1.220e-01, -2.475e-02) * s1_6;
	r += M4(-1.314e+00, 2.369e+00, 1.743e-01, -5.739e-02, 1.655e-01, 1.822e-01, -2.564e-01, 1.008e-01, 1.457e-01, 8.465e-02, 1.754e-01, 4.407e-02, 1.466e-01, -1.112e-01, 1.096e-02, -3.362e-02) * s1_7;
	r += M4(-8.285e-01, 8.494e-01, 3.658e-01, -5.348e-01, -3.430e-01, -1.142e-01, -1.973e-02, -2.039e-01, -4.529e-02, 9.932e-02, 3.153e-02, 6.898e-02, 2.169e-02, 6.859e-02, 1.463e-01, 1.069e-02) * s1_8;
	r += M4(9.635e-03, -6.111e-02, -1.357e-01, -9.546e-02, 1.475e-02, 5.551e-02, -1.249e-02, 3.945e-02, -7.420e-02, 2.461e-01, 2.956e-01, -2.292e-01, -1.762e-02, 1.527e-01, 6.922e-03, 7.994e-02) * s2_0;
	r += M4(9.606e-03, 4.511e-01, -3.290e-01, -4.440e-01, -3.221e-02, -1.023e-01, -1.505e-01, 2.384e-02, 5.864e-02, -8.674e-02, 4.348e-01, -2.933e-01, -3.241e-02, 1.643e-01, -1.488e-01, -2.380e-01) * s2_1;
	r += M4(3.163e-02, 9.028e-02, -6.007e-02, -5.185e-01, 2.340e-02, 4.293e-02, 6.445e-02, -1.382e-01, -1.217e-01, 1.491e-01, 2.755e-01, 6.737e-02, 4.695e-02, 2.341e-02, -1.343e-01, -8.712e-02) * s2_2;
	r += M4(-1.048e-01, 7.799e-02, -1.723e-01, -2.276e-01, -6.399e-02, 1.293e-01, 1.106e-01, -1.152e-01, 2.695e-01, 2.498e-01, 3.292e-02, 7.392e-02, 1.690e-01, 4.110e-01, -4.117e-02, 7.839e-03) * s2_3;
	r += M4(-9.447e-02, -1.276e-01, 3.190e-02, -3.140e-01, 1.294e-01, 1.579e-01, -1.497e-01, 2.607e-01, 4.149e-01, -5.293e-01, 1.591e-02, 3.445e-01, 9.597e-02, 2.783e-01, -3.186e-02, 1.179e-01) * s2_4;
	r += M4(-7.252e-02, -6.224e-02, -1.846e-01, -2.881e-01, -1.304e-01, 5.741e-02, 8.120e-02, 1.439e-02, -3.622e-01, 2.876e-01, -4.513e-01, -3.052e-01, -1.260e-01, -1.298e-01, 9.151e-02, -6.183e-03) * s2_5;
	r += M4(-3.858e-02, 8.378e-02, 9.392e-02, -1.668e-01, -7.229e-02, -1.255e-01, -7.372e-02, 3.434e-02, 1.101e-01, 6.326e-02, -1.071e-01, 1.472e-02, -1.502e-01, 1.038e-01, 1.509e-01, 1.172e-01) * s2_6;
	r += M4(-3.728e-02, -1.371e-02, 5.852e-02, -4.988e-02, 8.229e-02, -7.012e-01, 5.578e-02, 2.750e-01, 1.681e-01, 2.238e-01, -2.650e-01, 1.547e-01, -5.941e-02, -1.859e-01, -1.911e-01, -6.390e-02) * s2_7;
	r += M4(1.079e-01, 7.132e-02, -8.579e-02, -2.441e-02, 7.330e-02, -2.381e-01, 1.448e-01, 2.997e-02, 1.776e-01, 2.445e-01, 2.194e-01, 1.257e-01, -2.998e-01, 5.291e-02, -1.839e-02, -7.002e-04) * s2_8;
	r += M4(5.578e-02, -4.343e-02, -2.755e-02, 2.628e-02, -6.968e-03, -5.134e-02, -4.748e-02, -2.051e-02, -1.252e-01, -3.988e-02, 1.252e-01, -1.208e-01, -5.735e-03, 7.510e-02, -5.876e-02, 1.595e-02) * s3_0;
	r += M4(3.305e-02, -9.204e-02, 8.126e-02, 1.020e-01, -4.832e-02, 3.432e-02, -2.764e-01, 1.578e-01, -1.146e-01, 2.134e-02, -4.115e-02, 2.966e-02, -3.404e-02, -7.719e-03, -1.205e-01, -1.394e-01) * s3_1;
	r += M4(2.119e-02, -1.061e-01, 1.093e-01, 9.994e-02, 2.200e-02, -1.192e-01, -1.132e-01, -1.293e-01, -7.331e-02, 2.578e-02, -1.455e-02, 1.749e-01, 2.698e-02, -6.294e-04, 9.053e-02, -4.341e-02) * s3_2;
	r += M4(-5.304e-02, 1.311e-01, -1.211e-01, 7.444e-02, -5.377e-02, 4.198e-02, 6.290e-02, -8.182e-02, -5.066e-02, -1.423e-01, -3.836e-02, 5.995e-02, 5.848e-02, 1.543e-02, -7.992e-02, -4.358e-02) * s3_3;
	r += M4(2.121e-02, 6.275e-02, 8.913e-05, 9.165e-02, 1.114e-01, 1.199e-01, 1.794e-01, 6.892e-02, -1.649e-01, 2.464e-01, 1.010e-01, 3.876e-02, 1.179e-01, 1.558e-01, -9.021e-02, 1.969e-01) * s3_4;
	r += M4(-2.586e-01, -5.483e-02, -4.501e-02, 2.705e-01, -1.155e-01, 3.564e-01, 2.748e-01, -4.032e-01, -4.370e-02, 2.690e-02, 2.198e-02, -9.594e-02, -1.073e-01, 1.537e-02, -1.091e-01, -7.137e-02) * s3_5;
	r += M4(-5.708e-02, -4.912e-02, 1.243e-01, 1.262e-02, -2.798e-02, 8.878e-02, 7.159e-02, -1.111e-02, 5.763e-02, 1.252e-01, -2.266e-02, -4.815e-02, -2.129e-02, -1.907e-01, 1.616e-01, 4.680e-02) * s3_6;
	r += M4(5.913e-02, 8.441e-02, 1.958e-01, 1.318e-01, 5.370e-03, 1.119e-01, 1.318e-01, -4.254e-01, 2.095e-01, 2.123e-02, -1.305e-01, 2.588e-01, 1.055e-02, -4.395e-02, -2.386e-01, 1.564e-01) * s3_7;
	r += M4(1.480e-01, -1.489e-01, -1.081e-01, 2.202e-01, 1.705e-01, 3.145e-02, 3.683e-01, 1.573e-01, -1.039e-02, 6.582e-03, 7.386e-02, -2.220e-01, 2.354e-02, -5.412e-04, 6.817e-02, -1.545e-02) * s3_8;
	r += V4(3.037e-02, 2.070e-02, 1.958e-01, 1.715e-02);
	return vec4(r);
	
}
void hook() {
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + ivec2(gl_LocalInvocationID.xy);
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = in_pt;
	V4 s0_0 = l0(-1, -1);
	V4 s2_0 = l1(-1, -1);
	V4 s0_1 = l0(0, -1);
	V4 s2_1 = l1(0, -1);
	V4 s0_2 = l0(1, -1);
	V4 s2_2 = l1(1, -1);
	V4 s0_3 = l0(-1, 0);
	V4 s2_3 = l1(-1, 0);
	V4 s0_4 = l0(0, 0);
	V4 s2_4 = l1(0, 0);
	V4 s0_5 = l0(1, 0);
	V4 s2_5 = l1(1, 0);
	V4 s0_6 = l0(-1, 1);
	V4 s2_6 = l1(-1, 1);
	V4 s0_7 = l0(0, 1);
	V4 s2_7 = l1(0, 1);
	V4 s0_8 = l0(1, 1);
	V4 s2_8 = l1(1, 1);
	V4 s1_0 = -max(-s0_0, V4(0.0));
	V4 s1_1 = -max(-s0_1, V4(0.0));
	V4 s1_2 = -max(-s0_2, V4(0.0));
	V4 s1_3 = -max(-s0_3, V4(0.0));
	V4 s1_4 = -max(-s0_4, V4(0.0));
	V4 s1_5 = -max(-s0_5, V4(0.0));
	V4 s1_6 = -max(-s0_6, V4(0.0));
	V4 s1_7 = -max(-s0_7, V4(0.0));
	V4 s1_8 = -max(-s0_8, V4(0.0));
	s0_0 = max(s0_0, V4(0.0));
	s0_1 = max(s0_1, V4(0.0));
	s0_2 = max(s0_2, V4(0.0));
	s0_3 = max(s0_3, V4(0.0));
	s0_4 = max(s0_4, V4(0.0));
	s0_5 = max(s0_5, V4(0.0));
	s0_6 = max(s0_6, V4(0.0));
	s0_7 = max(s0_7, V4(0.0));
	s0_8 = max(s0_8, V4(0.0));
	V4 s3_0 = -max(-s2_0, V4(0.0));
	V4 s3_1 = -max(-s2_1, V4(0.0));
	V4 s3_2 = -max(-s2_2, V4(0.0));
	V4 s3_3 = -max(-s2_3, V4(0.0));
	V4 s3_4 = -max(-s2_4, V4(0.0));
	V4 s3_5 = -max(-s2_5, V4(0.0));
	V4 s3_6 = -max(-s2_6, V4(0.0));
	V4 s3_7 = -max(-s2_7, V4(0.0));
	V4 s3_8 = -max(-s2_8, V4(0.0));
	s2_0 = max(s2_0, V4(0.0));
	s2_1 = max(s2_1, V4(0.0));
	s2_2 = max(s2_2, V4(0.0));
	s2_3 = max(s2_3, V4(0.0));
	s2_4 = max(s2_4, V4(0.0));
	s2_5 = max(s2_5, V4(0.0));
	s2_6 = max(s2_6, V4(0.0));
	s2_7 = max(s2_7, V4(0.0));
	s2_8 = max(s2_8, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0(s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8, s2_0, s2_1, s2_2, s2_3, s2_4, s2_5, s2_6, s2_7, s2_8, s3_0, s3_1, s3_2, s3_3, s3_4, s3_5, s3_6, s3_7, s3_8));
	imageStore(out_image, opos + ivec2(1, 0), f1(s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8, s2_0, s2_1, s2_2, s2_3, s2_4, s2_5, s2_6, s2_7, s2_8, s3_0, s3_1, s3_2, s3_3, s3_4, s3_5, s3_6, s3_7, s3_8));
}


//!DESC CuNNy-6x8C-RCAS-conv2
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv1
//!BIND LUMA
//!SAVE conv2
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
	#define V4 f16vec4
	#define M4 f16mat4
	#define F float16_t
#else
	#define V4 vec4
	#define M4 mat4
	#define F float
#endif
#define l0(x, y) V4(texelFetch(conv1_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv1_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
vec4 f0(V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8, V4 s2_0, V4 s2_1, V4 s2_2, V4 s2_3, V4 s2_4, V4 s2_5, V4 s2_6, V4 s2_7, V4 s2_8, V4 s3_0, V4 s3_1, V4 s3_2, V4 s3_3, V4 s3_4, V4 s3_5, V4 s3_6, V4 s3_7, V4 s3_8) {
	V4 r = V4(0.0);
	r += M4(6.744e-02, 3.531e-02, -2.353e-02, -5.773e-02, -1.992e-02, -1.355e-02, -1.992e-01, -8.484e-03, 1.769e-02, -6.320e-02, 7.255e-02, 2.748e-02, -3.682e-02, -1.938e-01, 9.747e-02, -1.349e-01) * s0_0;
	r += M4(4.005e-02, 2.980e-01, -1.175e-01, 4.736e-02, -1.198e-02, -1.654e-01, 1.444e-01, -6.049e-02, 3.186e-03, 3.268e-02, 3.797e-02, -3.378e-02, 3.813e-02, 9.375e-02, 1.303e-01, -1.026e-01) * s0_1;
	r += M4(6.536e-02, 1.475e-01, 9.195e-02, 1.132e-01, -2.948e-02, 4.361e-02, -1.722e-02, -4.893e-02, -2.200e-02, 2.991e-02, -7.394e-02, 3.243e-03, 3.877e-02, 7.715e-02, -1.250e-01, 8.525e-02) * s0_2;
	r += M4(-6.732e-02, 4.118e-02, 2.029e-02, -1.513e-02, 3.991e-02, 2.032e-01, -5.839e-03, 2.400e-02, 1.527e-02, 2.578e-01, -1.314e-01, 5.272e-02, -3.042e-02, -5.348e-02, 3.185e-02, 2.970e-02) * s0_3;
	r += M4(-1.076e-01, 6.362e-01, -2.613e-01, 1.040e-01, 3.320e-02, 1.372e-01, 1.637e-01, -1.432e-01, -2.044e-02, 1.203e-01, -3.397e-01, 1.856e-02, 2.670e-01, -1.762e-01, -7.661e-02, -1.895e-02) * s0_4;
	r += M4(-2.721e-02, 5.066e-02, -3.106e-01, 8.233e-02, 4.616e-02, 1.645e-02, -1.184e-01, 2.178e-02, 7.485e-02, -1.236e-01, 1.273e-02, -1.325e-02, 1.600e-01, -1.571e-02, -1.107e-01, 1.177e-01) * s0_5;
	r += M4(7.281e-02, -7.926e-03, -4.041e-02, 7.478e-03, 3.716e-02, 1.349e-01, -1.309e-02, -1.523e-02, 5.102e-02, 8.807e-02, -9.155e-02, 2.859e-03, -6.537e-02, 2.689e-02, 7.776e-02, 8.120e-03) * s0_6;
	r += M4(-6.542e-02, 1.682e-02, -2.079e-02, 1.820e-02, 6.085e-02, -7.753e-02, 5.215e-03, -1.011e-01, -1.388e-01, 1.492e-01, -1.359e-01, -4.716e-02, -2.693e-01, 9.908e-02, -2.315e-02, -2.302e-01) * s0_7;
	r += M4(2.920e-02, 1.407e-02, 1.703e-01, 2.521e-02, 6.282e-02, -1.776e-02, 5.487e-02, 5.762e-02, -5.238e-02, -6.212e-02, 9.406e-02, 7.786e-03, 1.130e-01, 1.053e-01, -1.424e-01, -1.433e-01) * s0_8;
	r += M4(1.029e-02, -6.207e-02, -5.016e-02, -2.832e-02, -1.239e-01, -3.664e-01, 1.172e-01, -5.863e-02, 3.204e-02, 1.568e-01, 2.531e-02, -8.061e-04, -8.397e-02, -1.313e-01, -8.180e-02, -7.301e-02) * s1_0;
	r += M4(-1.737e-02, -2.775e-01, -8.363e-02, -1.310e-01, 1.353e-01, -1.060e-01, -1.206e-01, -2.009e-01, -2.247e-02, -1.172e-02, 1.490e-01, -8.298e-02, -4.709e-02, -1.597e-01, -3.486e-02, 8.547e-02) * s1_1;
	r += M4(1.082e-01, 1.326e-02, -1.944e-02, 2.297e-02, -5.312e-02, 5.325e-02, -5.092e-02, -6.818e-02, -2.323e-02, 3.456e-02, 2.014e-02, 3.863e-02, -8.234e-03, 7.111e-02, 4.241e-02, 9.475e-02) * s1_2;
	r += M4(-4.080e-02, -6.453e-02, 8.564e-02, 4.620e-03, -4.629e-02, -4.957e-01, -5.499e-01, -5.299e-01, 1.165e-01, -2.845e-03, 2.408e-02, 5.073e-03, -6.986e-02, -2.120e-01, 1.664e-01, 1.333e-01) * s1_3;
	r += M4(4.434e-02, -8.229e-02, 2.017e-01, 1.901e-01, 6.130e-01, -5.513e-02, -7.041e-01, -1.520e-01, -7.349e-02, 3.236e-01, -2.899e-01, 3.807e-01, -3.034e-02, 3.056e-01, 8.312e-02, -5.039e-02) * s1_4;
	r += M4(1.702e-01, 6.160e-02, -2.773e-01, -1.648e-02, 1.993e-01, 5.896e-02, 4.323e-02, -5.680e-02, 9.006e-02, 3.914e-02, -1.254e-01, -3.716e-02, -1.701e-02, -4.640e-02, 5.845e-02, 2.777e-02) * s1_5;
	r += M4(-3.134e-02, 8.959e-02, -6.874e-02, -7.789e-04, -7.287e-01, 9.636e-02, -6.864e-01, -3.346e-01, -1.284e-01, 1.115e-01, -1.402e-01, -3.707e-03, -1.292e-01, 1.943e-01, -1.489e-01, 2.740e-02) * s1_6;
	r += M4(-1.199e-01, -1.891e-02, -1.672e-01, 4.025e-02, -2.108e-01, -2.224e-01, -5.210e-01, -2.315e-01, -3.552e-01, -3.221e-02, 1.166e-01, 3.110e-02, -3.252e-01, 5.478e-02, -2.534e-01, -1.179e-02) * s1_7;
	r += M4(8.680e-01, -1.126e-02, -4.548e-02, 2.445e-02, -3.139e-01, 1.120e-01, -4.529e-01, 1.002e-01, -7.367e-02, 5.993e-02, -5.806e-02, -5.215e-02, 4.476e-02, -6.506e-02, -8.223e-02, 7.338e-02) * s1_8;
	r += M4(-5.141e-01, -3.758e-01, 1.515e-01, 1.233e+00, 9.816e-03, -6.676e-02, -4.546e-02, -4.329e-02, 2.112e-02, -9.403e-02, 7.049e-02, 8.603e-04, 7.693e-02, -5.586e-02, 9.590e-02, -6.827e-02) * s2_0;
	r += M4(-3.056e-01, 3.867e-01, -3.075e-02, 1.447e+00, 1.541e-01, 3.503e-01, -7.661e-04, -3.281e-01, -1.110e-02, -1.055e-01, 8.709e-02, -1.342e-02, -7.631e-02, -1.030e-01, 3.595e-02, -1.171e-01) * s2_1;
	r += M4(1.206e-01, -1.471e-01, 3.158e-01, -1.614e-01, -1.164e-01, 4.089e-02, -7.998e-02, 6.233e-02, -1.414e-02, 8.990e-02, -4.052e-02, 6.168e-02, -1.002e-02, -9.313e-02, 5.604e-02, 1.883e-01) * s2_2;
	r += M4(3.595e-01, 2.295e-01, 6.644e-02, 3.775e-02, 6.468e-02, 1.181e-01, -1.462e-01, 1.818e-01, 4.328e-02, -1.606e-01, 2.943e-02, 1.904e-01, 3.443e-03, -3.783e-02, -5.208e-02, 2.231e-01) * s2_3;
	r += M4(-6.791e-02, 2.604e-01, 3.287e-01, 2.707e-01, 1.078e-01, 2.226e-01, -9.844e-02, -1.425e-01, 1.557e-01, 3.270e-01, -5.057e-02, 4.216e-01, 7.701e-02, -1.827e-01, -5.373e-02, -1.529e-01) * s2_4;
	r += M4(-5.473e-02, -4.030e-01, 4.000e-01, -1.187e-01, 1.327e-01, 9.096e-02, -1.865e-01, -1.557e-01, 7.337e-02, -1.707e-02, -9.377e-03, -8.962e-02, -1.254e-01, 1.675e-01, 1.707e-01, 5.312e-02) * s2_5;
	r += M4(-1.343e-01, -6.176e-02, -1.097e-01, -9.243e-02, -1.233e-01, 2.307e-02, -5.576e-02, 4.402e-02, -2.484e-01, -1.455e-01, 1.343e-01, -7.146e-02, 1.105e-02, 1.829e-01, 1.282e-01, -3.304e-02) * s2_6;
	r += M4(1.837e-01, 2.670e-02, 4.857e-02, 1.285e-01, -9.522e-02, -3.772e-02, -7.250e-02, 1.436e-01, 5.317e-02, 4.460e-02, 3.137e-03, 1.174e-01, 5.605e-01, 6.325e-02, 3.806e-02, 5.201e-02) * s2_7;
	r += M4(3.146e-01, 8.464e-02, 8.475e-02, -2.999e-02, 3.880e-02, -1.251e-01, -3.622e-03, 1.287e-02, -4.168e-02, -8.644e-02, -3.350e-02, 8.823e-02, 9.121e-02, 1.178e-01, -1.210e-01, 3.286e-02) * s2_8;
	r += M4(-6.392e-02, -3.114e-02, 2.646e-02, 6.647e-02, 3.684e-03, 1.019e-01, -8.827e-02, -1.839e-02, 7.971e-03, -1.062e-01, 6.895e-02, -1.379e-03, -1.486e-02, -5.663e-02, 6.881e-02, -6.665e-02) * s3_0;
	r += M4(-6.964e-02, -8.193e-02, -3.410e-02, -1.808e-01, -1.054e-01, 1.800e-01, -8.754e-03, -1.910e-01, -2.800e-02, -4.516e-02, 4.344e-02, -6.724e-02, -5.004e-02, 9.906e-02, -6.867e-02, -7.012e-02) * s3_1;
	r += M4(8.552e-03, 1.679e-01, 1.308e-03, -5.852e-02, -1.335e-01, -8.759e-02, 1.606e-01, 2.632e-02, -1.359e-02, 1.255e-01, -5.676e-02, 5.082e-02, 1.872e-02, -1.634e-02, -2.088e-02, 2.757e-02) * s3_2;
	r += M4(1.337e-02, 5.562e-02, -2.410e-01, 1.109e-01, 1.646e-02, -1.016e-01, -8.314e-02, 4.307e-03, 1.232e-01, -2.040e-01, 9.843e-03, 1.689e-01, 4.826e-02, 2.957e-01, -5.539e-02, 4.349e-02) * s3_3;
	r += M4(-1.669e-01, 5.648e-02, -1.055e-01, 1.174e-01, 4.266e-02, 1.021e-01, 9.524e-02, -1.292e-01, 3.057e-01, 1.189e-01, 4.560e-02, 2.206e-01, 1.406e-01, 9.486e-02, -1.624e-01, -2.214e-02) * s3_4;
	r += M4(-9.043e-02, -1.524e-01, -6.360e-02, 3.413e-02, 4.403e-01, 1.355e-01, -4.460e-02, -1.042e-01, 7.983e-02, -5.798e-02, -1.758e-01, -6.245e-02, 2.073e-02, 5.747e-02, -5.416e-02, 1.211e-01) * s3_5;
	r += M4(9.253e-02, -1.538e-01, 2.735e-02, 4.749e-02, 1.872e-02, -3.013e-02, 3.623e-02, -4.232e-02, -2.495e-01, -1.405e-01, 1.503e-01, -2.854e-02, -6.068e-02, 6.099e-02, 3.479e-03, -3.576e-02) * s3_6;
	r += M4(-1.241e-01, -4.002e-02, -1.840e-02, 1.514e-01, -3.731e-02, 4.914e-02, -1.629e-01, -6.324e-02, -1.811e-01, -3.616e-02, -5.237e-02, -2.085e-02, -2.668e-01, 5.634e-02, -2.149e-01, -1.864e-01) * s3_7;
	r += M4(-1.564e-02, -7.222e-03, 5.159e-02, 3.068e-02, 9.834e-02, -1.864e-02, 7.515e-02, -9.625e-02, 1.983e-02, -1.156e-02, -2.167e-01, 8.375e-02, 7.986e-02, -2.053e-02, -8.873e-02, -8.093e-02) * s3_8;
	r += V4(-9.311e-02, -6.110e-02, -4.516e-02, -1.184e-01);
	return vec4(r);
	
}
vec4 f1(V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8, V4 s2_0, V4 s2_1, V4 s2_2, V4 s2_3, V4 s2_4, V4 s2_5, V4 s2_6, V4 s2_7, V4 s2_8, V4 s3_0, V4 s3_1, V4 s3_2, V4 s3_3, V4 s3_4, V4 s3_5, V4 s3_6, V4 s3_7, V4 s3_8) {
	V4 r = V4(0.0);
	r += M4(-5.900e-02, -1.153e-01, 7.605e-02, -3.035e-03, -7.760e-02, -3.139e-02, -5.924e-02, 2.462e-03, 2.113e-02, 1.062e-01, -1.897e-02, 1.392e-02, 1.038e-01, 4.774e-02, -1.333e-01, -1.398e-01) * s0_0;
	r += M4(-4.208e-01, 2.380e-01, -1.551e-01, -3.662e-01, -1.259e-01, 9.219e-02, -3.540e-02, 6.515e-02, -3.584e-01, 1.721e-01, 2.280e-02, -9.531e-02, -1.180e-01, 7.070e-02, -1.337e-01, 3.024e-01) * s0_1;
	r += M4(-5.598e-02, 1.065e-01, 2.290e-03, -1.133e-01, 9.888e-02, -8.484e-02, -7.592e-02, 4.131e-02, 1.363e-03, -7.984e-02, -1.244e-01, -7.266e-04, 7.130e-02, -1.073e-01, -1.368e-03, -2.096e-02) * s0_2;
	r += M4(-7.731e-02, 1.770e-01, 8.117e-02, 4.110e-02, 6.745e-02, -1.379e-01, 5.091e-01, 1.474e-01, 2.669e-01, -2.929e-01, -2.001e-01, 1.059e-01, -6.490e-04, 2.524e-01, 1.727e-01, -3.818e-02) * s0_3;
	r += M4(6.748e-02, -3.550e-01, 3.275e-01, -3.017e-01, -1.240e-01, -8.143e-02, 2.262e-02, -5.840e-02, 6.143e-01, -1.861e-01, 1.599e-01, -9.502e-04, 3.495e-01, -3.460e-01, -7.465e-02, -1.682e-01) * s0_4;
	r += M4(3.210e-02, 1.695e-01, -9.352e-02, 3.760e-01, -1.411e-01, -1.103e-02, -5.171e-02, 3.051e-03, 1.323e-01, -6.740e-02, 1.347e-01, 9.985e-02, 1.607e-01, 2.022e-01, 1.336e-01, 2.246e-01) * s0_5;
	r += M4(9.015e-02, -1.261e-01, -3.362e-02, 2.007e-02, 2.548e-02, -7.753e-02, 7.211e-02, 1.104e-01, -1.212e-02, 1.201e-02, -8.845e-02, 4.011e-02, -1.144e-01, -4.358e-02, 5.416e-02, 9.884e-02) * s0_6;
	r += M4(1.865e-01, -1.028e-01, 3.624e-03, 1.489e-01, -1.232e-01, -3.776e-02, -1.714e-01, -7.593e-02, -3.289e-02, -5.527e-02, 2.828e-02, 1.678e-01, -1.174e-01, 2.120e-01, -1.200e-02, -2.240e-02) * s0_7;
	r += M4(1.655e-02, 6.294e-02, -5.674e-02, 2.803e-01, 4.171e-02, 2.024e-02, 8.387e-03, -2.823e-02, 2.482e-02, -1.221e-03, 3.183e-02, 1.466e-01, -3.225e-02, 8.115e-02, 9.126e-02, 2.031e-02) * s0_8;
	r += M4(-1.223e-02, -1.529e-01, -9.963e-02, -7.648e-03, -3.863e-01, 5.320e-01, -4.564e-01, -1.037e-01, -1.683e-02, 5.174e-02, -1.566e-02, -1.498e-01, 1.067e-03, -1.277e-01, 1.093e-01, 7.780e-02) * s1_0;
	r += M4(-9.767e-02, 1.143e-02, 4.993e-02, 2.023e-02, 9.202e-02, 1.072e-01, -2.094e-01, 4.814e-01, -2.919e-01, 3.304e-01, 8.895e-03, -2.184e-03, 7.789e-02, -1.351e-01, -1.497e-02, 1.009e-01) * s1_1;
	r += M4(8.522e-02, -7.258e-02, 8.689e-02, 2.547e-01, 1.604e-01, -1.065e-01, -1.871e-01, -3.257e-02, 3.070e-02, -1.601e-02, 1.914e-03, 7.273e-02, 2.629e-03, -2.056e-01, 3.705e-02, -1.167e-02) * s1_2;
	r += M4(-6.519e-02, 1.883e-01, 7.830e-02, -3.031e-02, -7.272e-02, -4.860e-01, -3.679e-01, 4.035e-02, 1.261e-01, -1.654e-01, -6.583e-02, 4.262e-02, 4.446e-02, 3.093e-01, 2.456e-01, -1.405e-02) * s1_3;
	r += M4(5.723e-02, 2.192e-01, 1.924e-01, -1.398e-01, -6.719e-01, 2.216e-01, -2.042e-01, -4.085e-01, 1.514e-01, 3.770e-02, -4.507e-02, 2.156e-01, 3.232e-01, -2.860e-01, -1.068e-01, 4.758e-02) * s1_4;
	r += M4(-1.616e-01, 2.470e-01, 1.354e-01, -6.112e-02, -1.123e-01, -5.682e-04, 6.416e-02, 3.202e-02, 1.043e-01, 1.228e-01, 1.116e-01, 1.086e-01, -1.100e-01, -1.718e-02, 1.676e-02, -4.119e-02) * s1_5;
	r += M4(6.952e-02, -3.495e-02, 7.107e-02, 9.690e-02, 2.025e-01, 3.770e-01, -1.031e-01, -9.025e-02, -2.192e-01, 4.742e-02, 1.534e-01, -2.303e-02, 2.482e-02, 5.529e-02, 1.721e-01, 1.016e-01) * s1_6;
	r += M4(2.285e-02, 1.793e-01, 5.305e-02, 6.903e-02, -2.103e-01, 3.377e-01, -3.289e-01, -3.911e-01, -4.065e-02, 1.821e-01, 1.052e-01, -2.852e-01, -1.418e-01, -5.954e-02, -2.547e-02, -1.842e-02) * s1_7;
	r += M4(-1.038e-02, 1.085e-01, -2.187e-02, -3.662e-01, 2.078e-02, -1.643e-01, -1.512e-01, -5.548e-01, 1.023e-02, 1.631e-01, 5.909e-02, -8.039e-02, 1.779e-02, -9.296e-02, 3.397e-02, -5.816e-02) * s1_8;
	r += M4(8.154e-01, 9.753e-01, -9.502e-01, -3.435e-02, 1.606e-01, 4.829e-02, 9.043e-02, -7.544e-02, 5.434e-02, 1.047e-01, 2.871e-02, -1.063e-01, 1.649e-01, 2.341e-01, -1.399e-01, 1.009e-01) * s2_0;
	r += M4(1.097e+00, 2.267e-01, 7.708e-01, 8.353e-01, 6.932e-02, -2.647e-01, -1.023e-01, 3.369e-01, -4.209e-01, 5.223e-02, -8.399e-03, 1.462e-01, -6.587e-02, -3.228e-02, 8.811e-02, 2.307e-01) * s2_1;
	r += M4(-5.661e-01, 1.422e-01, -2.538e-01, -3.331e-01, 1.429e-01, -1.697e-01, -2.767e-02, 9.505e-02, 5.734e-03, -1.206e-01, -9.694e-02, -4.549e-02, 7.702e-02, 1.308e-01, -2.836e-02, 1.334e-01) * s2_2;
	r += M4(-3.018e-01, -2.286e-01, 5.100e-01, 1.516e-01, 2.846e-02, 8.232e-02, 4.499e-02, 3.321e-02, 6.350e-02, 1.618e-01, -4.215e-01, -1.023e-01, 2.660e-01, 5.536e-01, -8.756e-02, -1.202e-01) * s2_3;
	r += M4(-9.799e-02, 2.632e-01, 2.491e-02, 1.798e-01, 5.646e-02, -5.409e-03, 1.072e-01, 1.840e-01, 1.814e-01, -3.446e-01, 4.425e-01, 3.893e-02, -3.234e-02, -4.561e-02, 1.024e-01, 1.345e-01) * s2_4;
	r += M4(-1.915e-01, -2.493e-01, -1.252e-01, 1.810e-02, -1.415e-01, 5.507e-02, 1.133e-01, -1.233e-01, -3.519e-02, 2.031e-01, 1.042e-01, -1.168e-01, 1.997e-01, -1.907e-01, -4.861e-02, 3.432e-01) * s2_5;
	r += M4(1.683e-01, 1.841e-01, 1.296e-01, -2.949e-01, -2.215e-02, 1.118e-01, -6.507e-02, -3.778e-02, -5.869e-02, 5.063e-02, -3.402e-01, -1.866e-03, 4.450e-02, 4.186e-01, 1.949e-01, 2.088e-01) * s2_6;
	r += M4(-1.196e-01, -1.851e-01, 1.560e-01, -7.567e-02, 2.994e-02, -5.657e-02, 1.196e-01, -1.343e-01, 1.382e-01, 1.653e-01, 7.091e-02, -1.465e-01, 1.015e-02, 4.262e-01, -2.017e-01, 7.094e-02) * s2_7;
	r += M4(-3.577e-03, -6.060e-02, 3.171e-02, 1.685e-01, 3.186e-02, -9.057e-02, -5.853e-02, 4.163e-02, 8.688e-02, 4.172e-02, 2.505e-01, -1.559e-02, -1.146e-01, 2.186e-01, -4.297e-04, -1.543e-01) * s2_8;
	r += M4(8.585e-02, 2.060e-02, 2.135e-03, 1.736e-01, 1.289e-01, -1.620e-01, 1.193e-01, -7.614e-03, 5.454e-02, -1.563e-02, -1.177e-01, -8.338e-02, -5.867e-02, 5.733e-02, -1.080e-02, -5.232e-02) * s3_0;
	r += M4(2.987e-01, -1.616e-01, -4.770e-02, 2.376e-01, -1.731e-01, 3.100e-03, -2.129e-01, -3.070e-02, -3.711e-01, 5.851e-02, 2.602e-02, 1.207e-01, 3.018e-01, -1.506e-01, 2.299e-03, 2.290e-01) * s3_1;
	r += M4(-7.202e-02, 5.718e-02, -2.056e-02, -1.575e-01, 1.348e-01, -2.227e-01, -2.481e-01, 2.183e-01, 5.164e-02, -1.232e-01, -1.089e-01, -5.870e-02, 1.637e-02, 2.461e-03, 1.176e-01, -1.209e-01) * s3_2;
	r += M4(1.440e-01, 2.712e-02, -5.528e-02, -1.577e-01, 7.621e-02, -3.076e-01, -2.896e-01, 7.198e-03, 3.865e-02, 1.519e-01, -2.082e-01, -3.834e-02, 1.476e-01, -6.883e-02, 4.181e-02, 1.487e-01) * s3_3;
	r += M4(-8.407e-02, 1.577e-01, -5.946e-02, 1.394e-01, 3.100e-01, -1.956e-01, 2.061e-01, 3.092e-01, 1.236e-01, -2.024e-01, 4.457e-02, -1.874e-01, 3.074e-01, 5.736e-02, -1.379e-01, -4.406e-02) * s3_4;
	r += M4(1.140e-01, -2.936e-02, 1.061e-01, -2.772e-02, 4.916e-02, -4.082e-01, 5.442e-03, 7.533e-02, -6.159e-02, 1.984e-01, 9.396e-02, -1.318e-01, -7.312e-03, -1.134e-02, 5.855e-02, 4.613e-02) * s3_5;
	r += M4(6.930e-02, -3.194e-02, -1.513e-01, -2.581e-02, -8.983e-02, 9.487e-02, -4.998e-02, -2.668e-02, -5.209e-02, 9.969e-02, -2.514e-01, -6.531e-02, -7.766e-02, 5.691e-02, 5.599e-02, 4.574e-02) * s3_6;
	r += M4(3.862e-02, 9.461e-02, 7.595e-03, -4.742e-02, 5.284e-02, -3.200e-02, 4.137e-03, -1.173e-01, 1.042e-01, 1.012e-01, -6.087e-02, -3.523e-02, -2.172e-02, 4.454e-02, -1.466e-01, -4.964e-02) * s3_7;
	r += M4(-3.007e-02, 1.342e-02, -5.809e-02, 1.610e-02, 2.752e-02, -3.129e-02, 4.470e-02, 4.004e-02, 7.986e-02, 6.908e-02, 1.430e-01, 7.695e-02, -5.679e-02, 3.703e-02, 3.210e-02, -2.830e-03) * s3_8;
	r += V4(1.296e-01, 5.957e-02, -9.821e-02, 2.010e-02);
	return vec4(r);
	
}
void hook() {
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + ivec2(gl_LocalInvocationID.xy);
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv1_pt;
	V4 s0_0 = l0(-1, -1);
	V4 s2_0 = l1(-1, -1);
	V4 s0_1 = l0(0, -1);
	V4 s2_1 = l1(0, -1);
	V4 s0_2 = l0(1, -1);
	V4 s2_2 = l1(1, -1);
	V4 s0_3 = l0(-1, 0);
	V4 s2_3 = l1(-1, 0);
	V4 s0_4 = l0(0, 0);
	V4 s2_4 = l1(0, 0);
	V4 s0_5 = l0(1, 0);
	V4 s2_5 = l1(1, 0);
	V4 s0_6 = l0(-1, 1);
	V4 s2_6 = l1(-1, 1);
	V4 s0_7 = l0(0, 1);
	V4 s2_7 = l1(0, 1);
	V4 s0_8 = l0(1, 1);
	V4 s2_8 = l1(1, 1);
	V4 s1_0 = -max(-s0_0, V4(0.0));
	V4 s1_1 = -max(-s0_1, V4(0.0));
	V4 s1_2 = -max(-s0_2, V4(0.0));
	V4 s1_3 = -max(-s0_3, V4(0.0));
	V4 s1_4 = -max(-s0_4, V4(0.0));
	V4 s1_5 = -max(-s0_5, V4(0.0));
	V4 s1_6 = -max(-s0_6, V4(0.0));
	V4 s1_7 = -max(-s0_7, V4(0.0));
	V4 s1_8 = -max(-s0_8, V4(0.0));
	s0_0 = max(s0_0, V4(0.0));
	s0_1 = max(s0_1, V4(0.0));
	s0_2 = max(s0_2, V4(0.0));
	s0_3 = max(s0_3, V4(0.0));
	s0_4 = max(s0_4, V4(0.0));
	s0_5 = max(s0_5, V4(0.0));
	s0_6 = max(s0_6, V4(0.0));
	s0_7 = max(s0_7, V4(0.0));
	s0_8 = max(s0_8, V4(0.0));
	V4 s3_0 = -max(-s2_0, V4(0.0));
	V4 s3_1 = -max(-s2_1, V4(0.0));
	V4 s3_2 = -max(-s2_2, V4(0.0));
	V4 s3_3 = -max(-s2_3, V4(0.0));
	V4 s3_4 = -max(-s2_4, V4(0.0));
	V4 s3_5 = -max(-s2_5, V4(0.0));
	V4 s3_6 = -max(-s2_6, V4(0.0));
	V4 s3_7 = -max(-s2_7, V4(0.0));
	V4 s3_8 = -max(-s2_8, V4(0.0));
	s2_0 = max(s2_0, V4(0.0));
	s2_1 = max(s2_1, V4(0.0));
	s2_2 = max(s2_2, V4(0.0));
	s2_3 = max(s2_3, V4(0.0));
	s2_4 = max(s2_4, V4(0.0));
	s2_5 = max(s2_5, V4(0.0));
	s2_6 = max(s2_6, V4(0.0));
	s2_7 = max(s2_7, V4(0.0));
	s2_8 = max(s2_8, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0(s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8, s2_0, s2_1, s2_2, s2_3, s2_4, s2_5, s2_6, s2_7, s2_8, s3_0, s3_1, s3_2, s3_3, s3_4, s3_5, s3_6, s3_7, s3_8));
	imageStore(out_image, opos + ivec2(1, 0), f1(s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8, s2_0, s2_1, s2_2, s2_3, s2_4, s2_5, s2_6, s2_7, s2_8, s3_0, s3_1, s3_2, s3_3, s3_4, s3_5, s3_6, s3_7, s3_8));
}


//!DESC CuNNy-6x8C-RCAS-conv3
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv2
//!BIND LUMA
//!SAVE conv3
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
	#define V4 f16vec4
	#define M4 f16mat4
	#define F float16_t
#else
	#define V4 vec4
	#define M4 mat4
	#define F float
#endif
#define l0(x, y) V4(texelFetch(conv2_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv2_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
vec4 f0(V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8, V4 s2_0, V4 s2_1, V4 s2_2, V4 s2_3, V4 s2_4, V4 s2_5, V4 s2_6, V4 s2_7, V4 s2_8, V4 s3_0, V4 s3_1, V4 s3_2, V4 s3_3, V4 s3_4, V4 s3_5, V4 s3_6, V4 s3_7, V4 s3_8) {
	V4 r = V4(0.0);
	r += M4(3.378e-02, 1.401e-03, 3.111e-01, -3.100e-01, 1.569e-02, 4.542e-02, 2.791e-02, 6.484e-02, -2.759e-02, -3.046e-03, -2.072e-02, 1.479e-01, -9.675e-02, 8.541e-03, 1.303e-01, -1.573e-01) * s0_0;
	r += M4(-2.036e-01, -1.287e-01, 1.272e-01, -2.628e-01, -1.866e-02, 1.010e-01, -1.066e-01, 7.202e-02, -2.446e-01, -3.554e-02, -7.431e-02, -2.923e-02, 6.574e-01, 2.648e-01, -3.648e-02, -1.686e-01) * s0_1;
	r += M4(-4.433e-02, 5.437e-01, 7.634e-03, 3.245e-02, -9.279e-02, -6.019e-02, 3.737e-02, 2.599e-02, -1.048e-01, -5.564e-03, 4.666e-02, -3.318e-02, 2.898e-01, 7.719e-02, 1.031e-01, -3.703e-02) * s0_2;
	r += M4(1.592e-01, 1.313e-01, 2.437e-01, 1.829e-02, -6.978e-02, -1.022e-01, -2.306e-01, 1.121e-01, -1.673e-01, -2.497e-01, -2.154e-01, 4.511e-02, -3.220e-01, 1.605e-02, -1.181e-01, 2.845e-01) * s0_3;
	r += M4(1.628e-01, -2.452e-01, 1.628e-01, -3.561e-01, -8.977e-02, -1.116e-01, -1.468e-01, 1.735e-01, -4.739e-02, 4.191e-01, 1.094e-01, 1.727e-01, 2.453e-01, 1.803e-01, -1.932e-01, -7.411e-01) * s0_4;
	r += M4(8.731e-02, -9.944e-02, -1.222e-01, -8.663e-02, -2.080e-02, -2.603e-01, -9.687e-02, -4.917e-02, 1.511e-01, 7.452e-03, -8.187e-03, -7.325e-03, 1.930e-02, 4.965e-01, 1.609e-01, 2.054e-01) * s0_5;
	r += M4(-3.582e-02, -4.747e-02, -1.354e-02, 2.656e-02, -8.045e-02, 2.908e-02, -4.684e-02, -3.625e-02, 2.302e-02, -2.513e-02, 3.539e-02, -8.668e-02, -2.722e-02, 4.224e-02, 1.483e-03, 2.478e-01) * s0_6;
	r += M4(-6.535e-02, -2.904e-02, 3.378e-02, 3.281e-02, 5.615e-02, -2.955e-02, -2.242e-01, 5.257e-03, 1.411e-01, 2.806e-02, -3.814e-02, 2.362e-03, -7.943e-02, -1.338e-01, -2.835e-02, 3.015e-01) * s0_7;
	r += M4(-6.840e-03, 1.334e-01, 2.442e-02, 1.849e-02, 3.167e-02, -5.031e-02, 7.577e-03, -1.445e-02, -1.143e-01, -8.785e-02, 6.517e-02, -4.859e-02, -1.106e-01, -3.916e-01, 1.423e-01, -4.313e-02) * s0_8;
	r += M4(8.215e-02, 1.921e-03, 3.955e-01, -9.531e-02, 5.725e-02, 4.098e-02, 2.020e-01, -5.808e-02, 3.075e-03, 3.681e-02, -2.264e-01, 5.493e-02, 2.398e-03, 9.073e-02, 1.841e-01, 4.563e-02) * s1_0;
	r += M4(7.481e-02, 1.237e-01, -2.928e-02, -5.821e-02, -5.658e-02, 5.622e-02, 5.412e-02, -1.528e-01, -1.609e-01, -1.488e-01, -2.510e-01, -2.981e-03, -2.942e-02, -9.770e-03, -3.942e-02, -8.469e-03) * s1_1;
	r += M4(1.009e-01, 4.554e-03, -2.772e-02, 4.138e-02, -4.378e-02, 1.288e-01, -8.808e-03, -6.602e-02, -1.223e-01, -2.306e-01, -6.567e-02, -1.298e-01, 6.315e-02, -1.978e-03, -1.679e-02, 5.970e-03) * s1_2;
	r += M4(7.123e-02, -2.586e-02, 4.958e-02, 5.260e-02, -4.747e-02, -1.548e-01, -1.456e-01, 9.846e-02, -1.384e-01, -2.650e-01, -2.694e-01, 2.465e-01, 6.411e-03, 1.835e-01, -3.209e-02, -1.477e-01) * s1_3;
	r += M4(6.162e-02, -1.441e-01, 2.014e-01, -5.968e-02, -3.721e-01, 3.834e-02, 1.447e-01, 1.984e-02, -5.304e-02, 3.639e-01, -1.513e-02, 2.875e-01, 3.352e-01, 1.050e-01, 6.800e-02, -1.141e-01) * s1_4;
	r += M4(1.293e-01, -6.133e-02, 3.738e-02, -1.152e-01, 8.568e-02, 4.045e-02, -3.066e-02, 4.509e-02, 1.627e-01, 3.269e-02, 1.630e-02, 3.079e-02, 6.282e-02, -8.117e-02, -5.213e-02, -1.127e-01) * s1_5;
	r += M4(-3.374e-02, -1.011e-02, -9.349e-03, 6.922e-02, 5.530e-02, -5.793e-02, -1.634e-01, -6.846e-03, 3.910e-02, 2.736e-02, -2.425e-03, -1.109e-01, -6.575e-02, 1.402e-01, -7.151e-02, 1.365e-01) * s1_6;
	r += M4(-8.569e-02, -3.752e-02, -2.071e-02, -6.520e-02, 3.535e-01, 6.494e-03, -2.412e-01, 3.413e-01, 9.794e-02, 3.243e-02, -5.534e-02, 1.848e-01, -2.061e-01, -1.829e-01, -5.262e-02, 1.587e-01) * s1_7;
	r += M4(-7.397e-02, 1.885e-02, 5.801e-03, 4.502e-02, 1.809e-01, 6.966e-03, -8.937e-02, 1.973e-01, -8.179e-02, 1.795e-02, 7.270e-02, -3.231e-02, -1.366e-01, -2.741e-01, 2.748e-02, 5.384e-02) * s1_8;
	r += M4(-5.145e-03, -2.088e-02, -5.314e-02, -2.781e-02, -2.434e-02, 4.958e-02, 5.065e-02, -8.569e-02, -3.970e-02, -4.712e-02, -2.816e-02, -4.108e-02, -2.161e-02, 4.733e-02, -2.417e-02, -5.295e-02) * s2_0;
	r += M4(1.639e-01, 6.732e-02, 1.941e-02, 4.339e-02, -1.370e-01, -1.354e-01, 1.750e-01, 1.569e-01, -2.397e-01, 3.861e-02, -2.169e-01, 1.266e-01, -4.393e-02, -7.593e-02, 5.725e-02, -8.204e-03) * s2_1;
	r += M4(6.211e-02, -5.170e-04, 1.284e-02, -5.290e-02, -4.951e-02, -6.272e-02, -1.811e-02, 3.637e-02, -1.072e-01, -6.003e-02, -9.758e-02, 2.872e-02, 5.791e-02, -9.573e-02, -2.010e-02, 4.846e-02) * s2_2;
	r += M4(4.304e-02, -8.607e-03, -1.146e-02, 3.932e-02, 1.032e-01, -1.769e-02, 8.770e-02, -2.869e-01, 5.967e-02, 2.352e-02, 8.834e-02, -8.045e-02, -4.140e-02, -6.611e-02, 1.337e-01, -2.493e-01) * s2_3;
	r += M4(4.287e-01, 6.611e-02, -2.550e-01, 4.698e-01, -3.800e-01, -4.465e-01, 1.626e-01, -2.950e-02, -1.234e-01, 2.071e-01, -9.921e-02, -4.913e-01, -6.804e-02, -3.829e-03, 2.772e-01, -2.357e-01) * s2_4;
	r += M4(2.783e-01, 1.899e-02, 1.826e-02, 1.305e-01, -1.809e-01, 3.266e-01, 2.802e-02, -1.915e-05, -1.941e-02, -1.859e-02, -4.555e-02, -9.130e-02, 7.293e-02, -1.142e-01, 5.839e-02, -3.332e-02) * s2_5;
	r += M4(7.230e-02, 6.347e-02, -1.864e-02, -3.361e-02, 4.423e-03, -2.318e-02, -7.067e-02, -3.500e-02, 7.292e-02, -3.204e-02, -3.359e-02, -4.917e-02, -1.126e-02, 4.970e-02, 3.589e-02, 6.657e-02) * s2_6;
	r += M4(9.731e-03, -2.418e-02, 1.343e-02, 2.351e-01, 2.583e-01, 3.388e-02, -1.729e-02, 8.051e-03, 1.522e-01, 9.311e-02, 1.646e-01, 1.180e-02, -1.496e-01, 1.500e-02, 1.046e-01, -8.065e-02) * s2_7;
	r += M4(9.966e-02, -9.753e-03, -7.779e-02, 2.988e-02, 1.019e-02, 1.489e-02, 4.361e-02, -9.650e-02, -7.446e-02, -8.264e-02, 1.011e-02, 8.054e-02, -6.844e-02, 6.159e-02, 9.892e-02, 1.925e-02) * s2_8;
	r += M4(-7.179e-02, -6.860e-02, 1.015e-01, -7.480e-02, 5.639e-03, 4.119e-02, -9.556e-02, -7.889e-02, -7.287e-02, -3.927e-02, -1.117e-01, -4.184e-02, 2.073e-02, 4.603e-03, -2.672e-01, 1.560e-01) * s3_0;
	r += M4(-9.851e-02, -4.164e-02, 7.799e-03, 7.104e-04, -4.591e-02, -2.700e-01, -1.223e-01, 3.520e-01, -5.830e-02, 4.783e-02, -1.221e-01, 7.699e-02, 8.223e-02, -1.051e-02, -3.173e-02, 2.978e-01) * s3_1;
	r += M4(-6.295e-02, -1.217e-02, 2.479e-02, 2.818e-03, -3.165e-02, -2.368e-01, -9.327e-02, -6.567e-02, 6.535e-02, 8.700e-02, -6.439e-02, -6.443e-02, -6.805e-02, -2.871e-01, -1.362e-01, 8.790e-02) * s3_2;
	r += M4(-5.722e-02, -1.254e-01, 4.048e-01, -1.045e-01, 9.970e-02, -4.626e-02, 7.692e-02, -2.161e-01, -1.020e-02, -6.477e-02, 8.622e-02, -5.531e-02, 6.585e-02, -9.936e-02, -2.266e-01, -5.242e-02) * s3_3;
	r += M4(-3.187e-01, -6.610e-02, 3.976e-01, 1.651e-01, -1.226e-01, -1.489e-01, 2.371e-02, 7.975e-02, -6.841e-03, 5.803e-02, 9.221e-02, -1.744e-01, -1.964e-01, -8.003e-02, -2.706e-01, 3.022e-01) * s3_4;
	r += M4(-1.768e-01, 2.582e-01, 4.083e-02, 1.114e-02, -1.675e-01, 6.256e-02, -7.773e-03, 7.492e-02, -7.176e-02, -1.264e-01, 1.620e-02, -3.560e-02, -1.419e-02, -2.290e-01, 5.594e-02, 1.216e-01) * s3_5;
	r += M4(1.815e-01, 5.528e-02, 1.481e-01, -8.860e-02, -6.023e-03, -1.032e-01, -1.198e-01, -1.534e-02, 5.946e-02, 2.054e-02, 5.659e-02, 2.873e-02, -3.000e-02, -3.662e-02, -1.132e-01, 5.704e-02) * s3_6;
	r += M4(-1.081e-01, 6.572e-03, 2.604e-01, 3.016e-02, 3.027e-01, 1.467e-02, -1.613e-02, -1.145e-01, 1.042e-01, 2.797e-01, 1.591e-02, 1.693e-02, -1.366e-01, -1.957e-01, 5.511e-02, -1.402e-01) * s3_7;
	r += M4(-5.720e-02, 1.071e-01, -3.504e-02, -1.714e-01, -1.431e-02, 1.204e-01, 3.703e-03, -4.167e-03, -2.257e-02, 1.558e-01, -8.228e-03, 9.846e-02, -9.803e-02, 1.041e-01, 4.912e-02, 9.853e-02) * s3_8;
	r += V4(4.775e-03, 1.108e-02, 1.686e-02, 5.113e-03);
	return vec4(r);
	
}
vec4 f1(V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8, V4 s2_0, V4 s2_1, V4 s2_2, V4 s2_3, V4 s2_4, V4 s2_5, V4 s2_6, V4 s2_7, V4 s2_8, V4 s3_0, V4 s3_1, V4 s3_2, V4 s3_3, V4 s3_4, V4 s3_5, V4 s3_6, V4 s3_7, V4 s3_8) {
	V4 r = V4(0.0);
	r += M4(-3.744e-02, 2.680e-01, -1.856e-01, -1.844e-01, -6.819e-02, 5.008e-02, 6.024e-02, -5.763e-03, -2.727e-01, -2.337e-02, 6.665e-02, -9.231e-02, -2.892e-02, -9.402e-02, 1.495e-01, 2.469e-01) * s0_0;
	r += M4(-3.997e-01, 6.975e-02, -2.457e-01, 9.485e-02, -3.473e-02, -2.486e-02, 6.166e-02, -1.308e-01, -1.363e-01, 1.759e-01, 1.527e-01, -1.375e-01, -1.389e-01, -6.046e-01, 7.095e-02, -8.139e-02) * s0_1;
	r += M4(-7.198e-02, 7.944e-02, 1.087e-01, -5.103e-03, 1.862e-02, 1.102e-01, 3.586e-02, -7.811e-02, -4.421e-02, 1.460e-01, -5.788e-02, -6.184e-02, 5.751e-02, -3.730e-01, 1.967e-02, 1.355e-01) * s0_2;
	r += M4(1.671e-01, -8.315e-02, -1.475e-01, -4.805e-02, 1.162e-02, -7.360e-02, 1.437e-01, 5.314e-02, -1.935e-01, -5.325e-02, 7.214e-02, 1.137e-01, 1.254e-01, -1.283e-01, 2.531e-01, 1.571e-01) * s0_3;
	r += M4(-1.590e-01, 2.313e-01, -7.541e-03, -2.439e-01, -5.691e-02, 1.873e-01, 1.027e-01, -1.771e-01, -2.818e-01, -3.958e-02, 1.659e-01, -8.413e-02, -1.250e+00, -8.648e-01, -8.930e-01, -6.364e-01) * s0_4;
	r += M4(3.579e-02, 9.777e-02, -1.020e-01, -8.860e-02, -1.410e-01, 1.665e-01, -4.850e-02, 1.069e-01, 6.536e-02, 1.269e-01, -6.514e-02, -1.263e-01, -5.351e-02, -9.186e-01, -4.889e-01, -3.293e-01) * s0_5;
	r += M4(1.506e-02, -3.177e-02, 4.101e-02, -4.287e-02, -1.223e-02, -4.307e-02, -6.650e-03, -2.713e-02, -1.481e-01, 8.880e-03, -5.432e-02, 3.847e-02, -8.617e-02, -2.510e-01, -1.707e-01, 8.065e-02) * s0_6;
	r += M4(-4.107e-02, -7.112e-02, -4.649e-02, 5.483e-02, -1.007e-02, -1.914e-01, 1.421e-01, 7.035e-02, 5.067e-02, -7.124e-04, 1.524e-01, -8.567e-02, 2.641e-02, 9.696e-02, 3.474e-01, -8.981e-02) * s0_7;
	r += M4(-2.288e-02, -3.538e-02, 5.123e-02, -1.825e-02, -3.834e-02, 9.930e-02, 1.216e-01, 4.749e-04, 1.529e-02, -1.696e-02, -1.067e-01, -1.139e-01, -1.722e-01, -1.514e-01, 4.673e-02, -1.643e-01) * s0_8;
	r += M4(-6.023e-02, -5.963e-03, -2.196e-01, -2.668e-01, 1.123e-02, -3.872e-02, 5.116e-02, 6.385e-02, -1.289e-01, -1.182e-01, 1.735e-01, 2.222e-01, 4.643e-02, 1.899e-02, -1.088e-01, -5.610e-04) * s1_0;
	r += M4(6.609e-02, 1.959e-01, 1.477e-01, 1.221e-01, -3.959e-02, -1.838e-01, -1.102e-01, 1.144e-01, -1.773e-01, 1.834e-01, 2.686e-01, 7.180e-02, 2.748e-02, 4.567e-02, 9.296e-02, -1.560e-01) * s1_1;
	r += M4(-3.338e-02, 9.592e-02, 2.971e-02, -1.390e-02, 1.076e-02, -1.073e-01, -6.082e-02, 1.534e-01, -5.194e-02, 1.248e-01, -1.194e-01, 6.012e-02, 1.507e-01, 8.418e-02, 2.765e-02, -4.578e-02) * s1_2;
	r += M4(6.711e-02, 9.774e-02, -7.944e-02, -1.398e-01, -1.540e-02, 6.685e-02, 8.333e-02, 1.413e-01, -1.703e-01, -2.205e-02, 2.641e-01, 4.042e-01, -2.550e-02, 2.026e-02, -4.220e-02, -3.132e-02) * s1_3;
	r += M4(-2.449e-01, 2.058e-01, 2.920e-03, -3.862e-02, -1.755e-01, 2.813e-01, -2.200e-01, 1.859e-01, -2.977e-01, 2.300e-01, -6.939e-02, -3.576e-02, -1.981e-01, -7.007e-02, -6.339e-02, -8.534e-02) * s1_4;
	r += M4(2.289e-02, 4.823e-03, -1.352e-01, -2.201e-02, -2.337e-01, 2.721e-01, -1.243e-01, 3.550e-01, -3.715e-02, 1.344e-01, -1.718e-02, 1.213e-01, 1.629e-03, -3.259e-02, -9.625e-02, 1.560e-02) * s1_5;
	r += M4(4.844e-02, -2.252e-02, 2.987e-02, -5.752e-02, 1.162e-01, -6.537e-03, 3.249e-02, 1.871e-01, -7.464e-02, 5.229e-02, 3.251e-03, 1.096e-01, 6.435e-02, -1.017e-01, -1.881e-01, 1.526e-01) * s1_6;
	r += M4(3.739e-03, 7.415e-03, -8.595e-02, -1.074e-01, 2.883e-01, 6.815e-02, 6.400e-03, 2.441e-01, 2.994e-02, -5.002e-02, 1.104e-01, -1.682e-02, 1.486e-01, -5.481e-03, 2.868e-01, -9.498e-03) * s1_7;
	r += M4(-4.689e-02, -3.785e-03, -2.277e-03, 2.596e-03, 1.503e-02, 1.632e-01, -9.751e-02, 2.434e-01, -6.346e-02, 8.857e-02, -3.792e-02, -3.540e-03, -1.614e-03, -4.767e-02, 9.580e-02, 7.471e-02) * s1_8;
	r += M4(-1.145e-02, 3.858e-02, 4.194e-02, 2.788e-02, 8.263e-02, -1.677e-02, 2.739e-02, -5.468e-02, -4.427e-02, -3.381e-02, -4.243e-02, 1.337e-01, -3.436e-02, -4.095e-02, 3.328e-02, -1.017e-01) * s2_0;
	r += M4(9.730e-04, 1.082e-01, -2.812e-03, 2.905e-03, 6.025e-02, 7.919e-02, -1.903e-01, -1.019e-01, -1.275e-01, -2.661e-03, -3.826e-02, -1.127e-01, 8.662e-02, 5.824e-02, 3.453e-02, -6.246e-02) * s2_1;
	r += M4(1.813e-02, 1.101e-02, 6.008e-03, -4.240e-02, -3.723e-02, -3.102e-02, -7.545e-02, 2.427e-02, -1.651e-02, 4.667e-02, -3.831e-02, 4.961e-02, -1.149e-01, 1.212e-01, -3.630e-02, 5.344e-02) * s2_2;
	r += M4(-2.162e-01, -1.185e-01, 9.179e-03, 7.466e-02, 1.692e-01, 4.399e-02, -2.087e-01, 9.453e-02, 1.354e-01, 1.602e-01, -4.829e-02, 2.985e-02, 1.112e-02, 5.644e-02, 1.554e-02, -1.602e-02) * s2_3;
	r += M4(9.632e-02, 1.052e-01, 4.931e-02, -3.193e-01, -1.287e-01, 1.448e-01, 2.101e-01, -3.290e-01, -1.788e-01, -6.522e-02, -2.237e-01, -1.919e-01, -9.538e-03, 7.243e-02, -2.634e-01, 1.474e-01) * s2_4;
	r += M4(1.067e-01, -1.864e-03, -8.708e-02, -1.953e-01, -8.137e-03, 7.595e-02, 1.671e-02, -1.323e-01, 1.673e-01, 1.187e-01, 1.582e-01, 2.145e-01, 2.340e-02, -9.766e-02, -6.653e-02, 2.787e-02) * s2_5;
	r += M4(-3.482e-02, -1.956e-02, -5.414e-02, -2.998e-02, 4.831e-02, 6.616e-02, 1.223e-01, -1.012e-03, -3.845e-02, 4.590e-02, -1.532e-02, -2.198e-02, 1.360e-01, 8.665e-02, 7.995e-02, 4.062e-02) * s2_6;
	r += M4(-6.231e-02, 6.652e-03, 2.281e-01, 2.579e-01, 7.485e-02, 1.236e-01, -9.098e-02, -1.504e-01, 8.516e-02, -3.870e-02, -1.354e-01, -7.018e-02, -1.260e-01, 6.764e-02, -1.336e-01, 8.398e-02) * s2_7;
	r += M4(1.029e-01, -3.361e-03, 1.409e-02, 8.281e-02, 3.442e-02, 9.700e-02, -4.189e-02, 6.411e-02, 3.929e-02, -7.008e-02, 5.829e-02, 2.648e-02, -2.950e-02, 4.016e-03, -4.246e-02, 7.982e-02) * s2_8;
	r += M4(4.588e-03, -8.455e-02, 4.334e-02, 2.809e-02, 9.212e-02, 4.276e-02, -7.793e-03, -4.603e-02, 1.307e-02, 8.858e-02, 2.871e-02, -4.215e-02, 8.550e-03, 5.379e-02, -9.771e-02, -1.760e-01) * s3_0;
	r += M4(6.952e-02, -4.136e-02, -1.569e-01, -2.930e-02, 5.069e-02, -7.795e-02, -1.918e-02, -1.949e-01, -1.008e-01, 8.580e-02, 3.197e-03, -3.650e-02, 1.482e-01, -3.755e-02, 7.999e-02, -1.458e-01) * s3_1;
	r += M4(1.663e-02, -5.286e-02, 1.434e-02, -3.970e-02, 6.376e-02, 1.226e-01, -1.079e-02, 7.577e-03, -3.912e-02, -5.417e-02, -8.568e-02, -4.560e-02, -9.473e-02, 2.141e-03, -1.014e-01, -1.199e-01) * s3_2;
	r += M4(-1.466e-01, 3.464e-02, -1.608e-01, 1.225e-01, 1.104e-01, 6.748e-02, -2.001e-01, -2.322e-01, -1.061e-01, 7.809e-03, -2.109e-02, -1.426e-02, 1.223e-01, -2.846e-02, -2.479e-01, -4.031e-01) * s3_3;
	r += M4(-1.390e-01, 5.324e-01, -1.946e-01, -4.734e-01, -2.106e-01, -1.853e-01, 2.813e-01, -2.007e-01, -6.175e-01, 2.426e-01, -2.740e-01, 5.534e-03, -5.884e-02, -3.735e-01, 1.052e-01, -2.802e-01) * s3_4;
	r += M4(8.013e-02, 7.686e-02, -4.202e-03, -2.152e-01, 8.356e-02, 5.072e-02, 6.021e-02, -3.535e-01, -2.095e-01, -1.959e-02, 5.201e-02, 8.784e-02, 1.993e-02, -7.322e-02, -8.198e-02, -2.940e-01) * s3_5;
	r += M4(-6.074e-02, 1.958e-01, -5.063e-02, 5.272e-03, 3.976e-02, -6.877e-02, 6.212e-02, -1.674e-01, -1.269e-01, 2.939e-02, 4.198e-02, -9.422e-02, 7.893e-02, -1.438e-01, -1.132e-01, -1.784e-01) * s3_6;
	r += M4(-4.023e-01, 1.855e-02, 1.108e-01, -4.749e-02, 1.575e-01, 8.313e-02, 8.247e-03, -1.243e-01, -2.966e-01, 3.840e-02, -9.880e-02, 9.712e-03, -1.411e-01, -1.869e-01, -1.508e-01, -1.387e-01) * s3_7;
	r += M4(6.666e-02, 1.509e-01, 9.149e-02, -6.311e-02, -4.392e-02, 2.940e-02, 3.760e-02, -5.610e-02, 4.643e-02, -5.755e-02, -4.962e-02, -7.746e-02, 1.011e-01, -1.127e-01, -1.540e-02, -1.037e-01) * s3_8;
	r += V4(1.223e-01, -2.526e-02, -2.149e-02, -3.822e-03);
	return vec4(r);
	
}
void hook() {
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + ivec2(gl_LocalInvocationID.xy);
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv2_pt;
	V4 s0_0 = l0(-1, -1);
	V4 s2_0 = l1(-1, -1);
	V4 s0_1 = l0(0, -1);
	V4 s2_1 = l1(0, -1);
	V4 s0_2 = l0(1, -1);
	V4 s2_2 = l1(1, -1);
	V4 s0_3 = l0(-1, 0);
	V4 s2_3 = l1(-1, 0);
	V4 s0_4 = l0(0, 0);
	V4 s2_4 = l1(0, 0);
	V4 s0_5 = l0(1, 0);
	V4 s2_5 = l1(1, 0);
	V4 s0_6 = l0(-1, 1);
	V4 s2_6 = l1(-1, 1);
	V4 s0_7 = l0(0, 1);
	V4 s2_7 = l1(0, 1);
	V4 s0_8 = l0(1, 1);
	V4 s2_8 = l1(1, 1);
	V4 s1_0 = -max(-s0_0, V4(0.0));
	V4 s1_1 = -max(-s0_1, V4(0.0));
	V4 s1_2 = -max(-s0_2, V4(0.0));
	V4 s1_3 = -max(-s0_3, V4(0.0));
	V4 s1_4 = -max(-s0_4, V4(0.0));
	V4 s1_5 = -max(-s0_5, V4(0.0));
	V4 s1_6 = -max(-s0_6, V4(0.0));
	V4 s1_7 = -max(-s0_7, V4(0.0));
	V4 s1_8 = -max(-s0_8, V4(0.0));
	s0_0 = max(s0_0, V4(0.0));
	s0_1 = max(s0_1, V4(0.0));
	s0_2 = max(s0_2, V4(0.0));
	s0_3 = max(s0_3, V4(0.0));
	s0_4 = max(s0_4, V4(0.0));
	s0_5 = max(s0_5, V4(0.0));
	s0_6 = max(s0_6, V4(0.0));
	s0_7 = max(s0_7, V4(0.0));
	s0_8 = max(s0_8, V4(0.0));
	V4 s3_0 = -max(-s2_0, V4(0.0));
	V4 s3_1 = -max(-s2_1, V4(0.0));
	V4 s3_2 = -max(-s2_2, V4(0.0));
	V4 s3_3 = -max(-s2_3, V4(0.0));
	V4 s3_4 = -max(-s2_4, V4(0.0));
	V4 s3_5 = -max(-s2_5, V4(0.0));
	V4 s3_6 = -max(-s2_6, V4(0.0));
	V4 s3_7 = -max(-s2_7, V4(0.0));
	V4 s3_8 = -max(-s2_8, V4(0.0));
	s2_0 = max(s2_0, V4(0.0));
	s2_1 = max(s2_1, V4(0.0));
	s2_2 = max(s2_2, V4(0.0));
	s2_3 = max(s2_3, V4(0.0));
	s2_4 = max(s2_4, V4(0.0));
	s2_5 = max(s2_5, V4(0.0));
	s2_6 = max(s2_6, V4(0.0));
	s2_7 = max(s2_7, V4(0.0));
	s2_8 = max(s2_8, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0(s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8, s2_0, s2_1, s2_2, s2_3, s2_4, s2_5, s2_6, s2_7, s2_8, s3_0, s3_1, s3_2, s3_3, s3_4, s3_5, s3_6, s3_7, s3_8));
	imageStore(out_image, opos + ivec2(1, 0), f1(s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8, s2_0, s2_1, s2_2, s2_3, s2_4, s2_5, s2_6, s2_7, s2_8, s3_0, s3_1, s3_2, s3_3, s3_4, s3_5, s3_6, s3_7, s3_8));
}


//!DESC CuNNy-6x8C-RCAS-conv4
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv3
//!BIND LUMA
//!SAVE conv4
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
	#define V4 f16vec4
	#define M4 f16mat4
	#define F float16_t
#else
	#define V4 vec4
	#define M4 mat4
	#define F float
#endif
#define l0(x, y) V4(texelFetch(conv3_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv3_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
vec4 f0(V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8, V4 s2_0, V4 s2_1, V4 s2_2, V4 s2_3, V4 s2_4, V4 s2_5, V4 s2_6, V4 s2_7, V4 s2_8, V4 s3_0, V4 s3_1, V4 s3_2, V4 s3_3, V4 s3_4, V4 s3_5, V4 s3_6, V4 s3_7, V4 s3_8) {
	V4 r = V4(0.0);
	r += M4(2.075e-03, -3.970e-02, -8.146e-02, -7.165e-02, 4.842e-02, 4.040e-02, 7.877e-03, -2.733e-02, -5.333e-02, -2.970e-02, 8.093e-02, 1.661e-01, 4.737e-02, 2.463e-02, -9.679e-03, 7.229e-02) * s0_0;
	r += M4(1.059e-01, 8.350e-02, -1.414e-01, 1.411e-01, -1.489e-01, -1.298e-01, 5.406e-02, -3.011e-01, 8.525e-03, 6.274e-02, -5.585e-02, 6.747e-02, -2.252e-01, 2.251e-02, -1.263e-01, -1.375e-01) * s0_1;
	r += M4(-9.155e-02, -7.256e-02, -1.315e-01, -1.282e-01, 4.405e-03, -3.211e-02, 2.941e-02, 9.036e-02, -8.001e-03, -3.957e-02, 6.184e-04, 6.239e-02, -1.375e-01, 4.976e-02, -3.830e-02, -8.269e-02) * s0_2;
	r += M4(-9.152e-02, -1.727e-02, 5.868e-02, -1.713e-01, -5.457e-02, -3.517e-02, 1.852e-01, 3.320e-01, -5.570e-02, -5.546e-02, 5.488e-02, 1.431e-01, -2.080e-01, 1.127e-01, -2.248e-01, 1.702e-02) * s0_3;
	r += M4(1.222e-01, -8.929e-02, 7.001e-01, -1.455e-01, -5.164e-02, 1.719e-01, -2.053e-01, -1.084e-01, -1.282e-01, -1.667e-01, 1.176e-01, 4.194e-02, -6.753e-02, -1.297e-01, -7.701e-01, -7.741e-02) * s0_4;
	r += M4(1.934e-01, -5.901e-02, 1.133e-01, 1.705e-01, 2.069e-01, -7.093e-02, 2.686e-01, 1.413e-01, 5.289e-02, -9.273e-02, 8.830e-02, 5.646e-02, -8.031e-02, 1.010e-01, -1.207e-01, 4.976e-02) * s0_5;
	r += M4(2.404e-01, -2.042e-02, 1.314e-01, 4.265e-02, 7.559e-02, -1.874e-01, 3.313e-02, 9.456e-02, 1.861e-02, -2.399e-02, 5.824e-02, 2.696e-01, -1.023e-01, 3.837e-02, -1.391e-01, -1.922e-01) * s0_6;
	r += M4(5.437e-02, 3.405e-01, -9.518e-02, 4.039e-02, 1.854e-01, 9.114e-02, 1.336e-02, -1.123e-03, 3.405e-01, -1.722e-02, 3.486e-01, 2.273e-01, -5.338e-02, -5.913e-02, -5.319e-02, -1.125e-01) * s0_7;
	r += M4(1.080e-01, -3.164e-02, 2.026e-01, 3.449e-02, -3.822e-02, -3.868e-02, 1.009e-02, -1.423e-02, 1.333e-01, 1.469e-01, 8.230e-02, 2.349e-01, -1.783e-01, -3.877e-02, -8.446e-02, -6.734e-03) * s0_8;
	r += M4(1.196e-01, 4.973e-02, 1.431e-02, 6.743e-02, -8.786e-02, 1.151e-01, -2.004e-01, -1.434e-01, 7.437e-02, -5.118e-02, 3.793e-02, 9.089e-02, -1.545e-02, 9.759e-02, 8.530e-03, 4.058e-02) * s1_0;
	r += M4(-1.771e-02, 1.382e-01, 2.269e-01, 1.903e-01, -1.902e-01, 1.334e-02, -3.076e-01, -2.960e-01, 1.056e-01, 7.205e-02, -2.842e-02, 3.195e-02, 9.371e-02, -1.130e-02, 1.111e-02, -1.252e-01) * s1_1;
	r += M4(8.955e-02, 1.362e-03, 9.251e-02, 3.438e-02, -8.061e-02, -3.563e-02, -1.332e-01, -5.721e-02, 1.204e-01, -6.161e-04, 1.210e-01, 2.986e-02, -5.322e-02, 1.479e-02, 6.345e-03, -5.555e-02) * s1_2;
	r += M4(1.356e-01, 2.471e-02, 3.647e-02, -1.468e-01, -4.834e-01, 8.162e-03, 2.144e-01, 5.578e-02, 1.935e-01, -2.399e-02, -1.812e-03, -8.551e-02, -9.161e-02, 8.664e-02, 3.894e-02, 2.358e-01) * s1_3;
	r += M4(-1.413e-01, -2.636e-02, -1.504e-01, -1.410e-01, 1.128e-02, 2.892e-01, 2.479e-01, -1.077e-01, 9.542e-04, -1.549e-01, -4.358e-03, -6.642e-02, 2.155e-02, -1.612e-01, -2.306e-01, -7.163e-02) * s1_4;
	r += M4(9.964e-02, -1.883e-02, 5.374e-02, 1.576e-01, -1.935e-02, -1.184e-02, -3.786e-02, -9.434e-03, 4.152e-02, -3.951e-02, -1.461e-01, 1.968e-03, 9.484e-02, 1.245e-01, -1.265e-01, -1.414e-02) * s1_5;
	r += M4(1.150e-01, -8.292e-02, 6.709e-02, -8.684e-02, -1.259e-01, 1.440e-02, -8.555e-02, 2.114e-01, 3.991e-02, -1.508e-02, -4.281e-02, 6.739e-03, 1.732e-01, 4.087e-03, -3.464e-02, 1.191e-01) * s1_6;
	r += M4(-6.899e-02, 1.824e-01, -7.446e-02, 1.311e-02, -1.692e-02, 1.144e-01, 2.483e-02, 3.528e-02, 3.054e-01, -8.715e-02, 1.027e-01, -5.090e-02, 2.490e-01, -1.015e-02, 1.980e-01, 1.909e-01) * s1_7;
	r += M4(1.034e-01, 6.965e-02, 3.875e-02, 8.573e-04, -7.212e-02, -5.832e-02, -1.243e-01, -5.416e-02, 8.390e-02, 4.680e-02, 5.196e-02, 3.359e-02, 1.662e-02, 3.917e-02, -1.906e-02, -2.811e-02) * s1_8;
	r += M4(-5.708e-02, 3.424e-02, 5.939e-02, -4.648e-03, 5.733e-02, 2.498e-02, -4.640e-02, -1.996e-02, 4.625e-02, 1.339e-02, 3.626e-02, 9.648e-02, 8.056e-03, 5.894e-04, -7.419e-02, -1.264e-01) * s2_0;
	r += M4(4.316e-02, 2.175e-02, 9.280e-02, 2.558e-02, -6.247e-02, 1.908e-02, 4.187e-02, 3.091e-02, 4.256e-02, 8.728e-02, 1.694e-01, 2.980e-02, -8.960e-02, 8.374e-02, -2.949e-01, -2.588e-02) * s2_1;
	r += M4(-9.156e-03, -2.757e-02, -6.141e-02, -7.685e-02, 7.650e-02, -4.178e-02, 1.656e-02, 6.726e-03, 3.689e-02, -2.764e-03, 1.585e-01, 3.325e-02, -6.858e-02, -2.603e-02, -7.960e-03, -2.877e-03) * s2_2;
	r += M4(-3.762e-03, 9.082e-03, -5.696e-02, 8.645e-03, -2.603e-02, 7.733e-02, 5.663e-02, 1.184e-03, 3.464e-01, -1.005e-01, 5.134e-02, -7.410e-02, -8.529e-02, -4.686e-02, 1.047e-02, 5.117e-02) * s2_3;
	r += M4(-6.245e-02, -6.272e-02, 1.963e-02, -1.879e-01, 1.282e-01, -2.225e-01, 1.535e-01, -1.742e-01, 4.420e-01, -3.290e-01, -1.027e-01, -4.164e-02, 2.695e-01, -1.671e-01, 4.043e-01, 3.545e-01) * s2_4;
	r += M4(-7.278e-02, 2.182e-02, -1.064e-01, -9.363e-02, 1.463e-01, -1.158e-02, -1.446e-02, 1.278e-01, 2.357e-02, 5.486e-02, 2.280e-01, 1.164e-01, 9.599e-02, 8.609e-02, -1.091e-01, -5.987e-02) * s2_5;
	r += M4(7.175e-02, -1.304e-02, 4.383e-02, 7.035e-02, -1.069e-01, -4.212e-02, -1.741e-02, 2.917e-02, 4.222e-02, -8.864e-02, 1.451e-02, 8.949e-03, 2.889e-02, 1.696e-02, -5.349e-02, -1.071e-02) * s2_6;
	r += M4(-8.833e-02, -1.255e-01, 3.347e-03, -4.846e-03, 3.160e-02, -2.462e-01, 1.711e-01, -4.884e-02, 2.058e-01, -2.233e-01, -1.119e-01, -5.178e-02, -2.301e-02, 1.345e-01, -4.518e-02, -7.461e-02) * s2_7;
	r += M4(6.552e-02, 2.519e-02, 5.951e-02, 7.220e-02, -5.994e-02, -1.025e-01, -1.164e-01, -1.069e-01, 1.062e-01, 1.408e-01, 6.956e-02, 4.889e-02, -1.474e-01, -8.325e-02, -9.759e-02, -1.212e-01) * s2_8;
	r += M4(-1.606e-01, -2.130e-01, 8.711e-02, -2.069e-01, -1.078e-01, 2.883e-02, 6.403e-02, -1.013e-02, 1.182e-01, -1.118e-01, 2.916e-02, 1.106e-01, -5.902e-02, 1.040e-02, -3.815e-02, -8.954e-02) * s3_0;
	r += M4(1.023e-01, 1.507e-01, 6.684e-01, 2.089e-01, 1.167e-02, 4.459e-02, 1.126e-01, 3.240e-02, 1.910e-01, 7.242e-02, 9.284e-02, 1.715e-01, -3.287e-02, 2.842e-02, -2.083e-02, -3.394e-02) * s3_1;
	r += M4(3.847e-02, -2.418e-01, 4.718e-01, 1.578e-01, -1.089e-02, 1.143e-03, -5.833e-02, 1.289e-02, -4.938e-02, -7.957e-02, 1.026e-02, -1.055e-01, -9.058e-02, 1.999e-02, -6.145e-02, -8.437e-02) * s3_2;
	r += M4(-4.647e-01, 6.323e-02, -1.640e-01, -1.103e-01, -3.189e-02, -2.848e-02, 1.243e-01, 4.403e-02, 1.558e-01, -4.048e-02, 1.213e-01, 8.877e-02, -1.647e-02, -9.044e-03, -2.815e-02, -1.673e-01) * s3_3;
	r += M4(8.534e-02, -7.103e-01, -1.411e-01, -1.050e-01, 2.041e-01, -1.080e-01, 1.820e-01, -2.761e-01, 1.328e-01, -2.809e-01, 1.254e-01, 2.802e-01, -1.218e-02, -3.276e-01, 2.870e-01, 2.417e-02) * s3_4;
	r += M4(-2.501e-01, -1.846e-01, 2.443e-01, 6.262e-02, 6.276e-02, -4.189e-02, 1.052e-01, 1.958e-01, -5.512e-02, -3.391e-02, -1.277e-01, 2.073e-01, 7.683e-03, -1.935e-02, 2.462e-02, -5.897e-02) * s3_5;
	r += M4(1.368e-01, -1.201e-01, 1.276e-01, 4.254e-01, -7.089e-02, 9.363e-03, -5.351e-02, 1.996e-03, -9.234e-04, -1.618e-01, 7.728e-02, 1.588e-02, -4.726e-02, 5.320e-04, -3.209e-02, -4.338e-02) * s3_6;
	r += M4(1.194e-01, -2.763e-01, -2.206e-01, -3.295e-02, 1.077e-01, -2.711e-01, 3.026e-01, 1.372e-01, -7.754e-02, -1.719e-01, 5.312e-02, 1.893e-01, -9.930e-02, 5.735e-03, -1.510e-01, -1.209e-01) * s3_7;
	r += M4(-1.614e-01, -1.396e-02, 1.474e-01, 2.571e-01, -2.300e-02, 2.607e-03, -5.508e-02, 4.646e-02, 1.428e-01, 5.516e-02, 2.491e-02, 1.331e-01, -7.619e-03, -4.190e-02, -3.412e-02, -8.645e-03) * s3_8;
	r += V4(1.813e-02, -9.982e-03, -7.991e-03, 3.227e-02);
	return vec4(r);
	
}
vec4 f1(V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8, V4 s2_0, V4 s2_1, V4 s2_2, V4 s2_3, V4 s2_4, V4 s2_5, V4 s2_6, V4 s2_7, V4 s2_8, V4 s3_0, V4 s3_1, V4 s3_2, V4 s3_3, V4 s3_4, V4 s3_5, V4 s3_6, V4 s3_7, V4 s3_8) {
	V4 r = V4(0.0);
	r += M4(-9.396e-02, 4.479e-03, -8.165e-02, 1.236e-02, 1.237e-01, -2.838e-02, -1.515e-02, -3.053e-02, 1.089e-02, 3.920e-02, 8.945e-02, 7.964e-04, 2.529e-01, -2.635e-02, 6.520e-02, -1.569e-02) * s0_0;
	r += M4(-1.789e-02, -1.284e-01, -8.815e-02, 1.252e-02, 9.035e-02, 1.324e-01, 2.095e-01, 2.643e-02, -3.492e-02, -7.128e-03, 1.538e-02, -1.954e-02, -3.691e-02, 2.961e-02, 9.139e-02, -1.704e-01) * s0_1;
	r += M4(3.164e-02, -1.043e-01, 8.915e-02, -3.842e-02, 1.950e-02, 1.778e-01, -8.186e-02, -9.796e-02, -5.194e-02, -2.608e-01, 1.902e-02, 3.910e-02, 6.426e-03, 5.079e-02, -8.179e-02, -8.217e-02) * s0_2;
	r += M4(-2.259e-02, -8.160e-02, -2.647e-01, 6.555e-02, 2.790e-01, 2.603e-02, -6.890e-02, -8.705e-02, -1.442e-01, -8.816e-02, -2.692e-02, 1.579e-01, 9.635e-02, 2.042e-02, 1.128e-01, -4.191e-02) * s0_3;
	r += M4(-1.143e-01, 3.989e-01, -2.940e-02, 1.199e-01, 1.920e-02, 3.055e-01, 3.444e-01, 1.161e-01, -6.682e-02, -4.632e-01, -1.209e-01, 6.901e-02, 4.623e-01, -7.611e-02, -1.519e-01, -8.108e-02) * s0_4;
	r += M4(-6.557e-02, -8.935e-03, -5.668e-02, 1.862e-02, -1.224e-02, 5.420e-02, -1.212e-01, 3.702e-04, -1.844e-01, -2.073e-01, 2.003e-01, 1.391e-01, 4.332e-02, -1.406e-01, -1.555e-01, -1.667e-01) * s0_5;
	r += M4(5.433e-03, 1.259e-01, -2.702e-02, -6.576e-02, 1.445e-01, -5.171e-02, -2.186e-02, 5.676e-02, -7.236e-02, -1.365e-01, 8.846e-02, 7.549e-02, -2.638e-02, -2.045e-02, -6.865e-02, -3.590e-05) * s0_6;
	r += M4(-1.215e-01, -1.489e-01, -8.209e-02, 1.124e-01, 1.501e-01, -5.501e-02, 1.867e-01, 1.772e-01, 2.552e-01, -2.379e-01, -2.386e-01, 1.114e-01, -6.321e-02, 1.508e-03, -1.072e-01, -1.312e-01) * s0_7;
	r += M4(-1.011e-01, -6.821e-02, -1.843e-02, -1.613e-02, -9.942e-03, -6.457e-03, -1.910e-02, -1.780e-02, 1.598e-01, -8.991e-02, -8.018e-02, 1.900e-01, -5.665e-02, -6.479e-02, -7.622e-02, -3.566e-02) * s0_8;
	r += M4(2.592e-02, 6.624e-02, 6.594e-02, -1.070e-01, -8.178e-03, -8.477e-02, -1.149e-01, 2.260e-02, 2.939e-02, -2.447e-02, 4.699e-02, 8.421e-03, 5.895e-02, -4.521e-02, -3.749e-02, -4.943e-02) * s1_0;
	r += M4(-4.142e-03, 1.659e-01, -1.274e-01, -1.040e-01, 1.029e-01, -1.605e-01, 2.211e-01, 4.842e-02, -1.950e-02, -5.037e-03, 4.781e-02, 1.210e-03, -6.273e-02, 6.206e-02, 2.225e-01, 4.407e-02) * s1_1;
	r += M4(-4.623e-04, -7.905e-03, 1.459e-01, 4.801e-02, 1.090e-02, -8.349e-02, -6.908e-02, -1.887e-02, -6.079e-03, 4.583e-02, 6.344e-02, -6.065e-02, 4.700e-02, 6.250e-02, 6.080e-02, -4.801e-03) * s1_2;
	r += M4(-8.851e-02, -4.153e-03, 9.776e-02, 6.584e-03, 2.407e-01, -4.170e-01, -3.666e-01, -1.334e-01, 4.634e-02, 7.840e-03, -7.606e-02, -1.728e-02, -6.340e-02, -7.678e-02, 6.613e-02, -5.929e-02) * s1_3;
	r += M4(-1.522e-02, 3.924e-01, 6.472e-02, 1.278e-01, -9.298e-02, 1.678e-02, 1.205e-01, -2.633e-02, 1.496e-01, -3.796e-02, 6.780e-02, 7.723e-03, 1.947e-02, 3.544e-02, 1.643e-01, 2.646e-01) * s1_4;
	r += M4(3.093e-02, -7.788e-02, -1.333e-01, 8.450e-03, 4.470e-02, -8.605e-03, -1.727e-02, 1.942e-02, -5.116e-03, 3.720e-02, -7.758e-02, -4.572e-03, 4.698e-02, -7.740e-02, 1.486e-01, -1.009e-02) * s1_5;
	r += M4(3.930e-02, 9.337e-02, -2.849e-02, 1.448e-02, 9.862e-02, -1.499e-01, -6.760e-02, 8.744e-03, 3.013e-02, 1.822e-03, 5.539e-02, -6.950e-03, -1.461e-01, -1.080e-02, 1.181e-02, 7.082e-03) * s1_6;
	r += M4(-2.523e-02, 1.323e-03, -3.788e-02, -2.922e-02, 1.509e-01, -1.973e-01, -1.961e-02, 3.568e-02, -5.386e-02, 1.203e-01, -4.303e-02, 4.423e-04, 5.205e-02, -8.925e-02, -7.535e-02, -1.294e-01) * s1_7;
	r += M4(-1.387e-01, 8.583e-03, 5.355e-02, 3.149e-02, 5.616e-02, -2.929e-04, -5.383e-02, -4.141e-03, -4.359e-02, 4.284e-02, 1.205e-01, 4.214e-02, 1.534e-02, -4.214e-02, 8.435e-02, -4.222e-02) * s1_8;
	r += M4(4.975e-02, -1.391e-01, -1.881e-02, 6.452e-02, -1.935e-02, 1.426e-01, 8.210e-02, -8.915e-02, 1.254e-02, 6.567e-02, 1.648e-02, 9.876e-03, -5.970e-02, -3.577e-03, -5.392e-04, 1.942e-03) * s2_0;
	r += M4(1.413e-02, 2.700e-01, -2.385e-02, 6.676e-02, 1.664e-01, -1.565e-01, -6.191e-02, 7.780e-03, 4.114e-02, -1.720e-02, 1.464e-02, -5.306e-02, 7.492e-02, -9.206e-02, 3.154e-01, 5.773e-03) * s2_1;
	r += M4(-2.549e-02, -1.750e-02, 6.089e-02, 8.034e-02, -3.016e-03, 7.199e-02, -1.010e-01, 1.244e-01, -1.008e-01, 1.428e-01, 6.170e-02, 2.261e-02, 4.870e-02, -4.734e-02, -2.684e-01, 9.293e-02) * s2_2;
	r += M4(8.571e-03, 1.758e-02, 5.455e-02, 3.432e-02, -1.222e-02, 1.128e-01, 4.152e-02, -1.362e-01, 5.073e-02, 7.127e-02, 2.471e-02, -7.312e-02, -6.250e-02, 2.048e-02, -3.032e-02, 8.601e-02) * s2_3;
	r += M4(-3.301e-02, 2.007e-01, 3.534e-02, 6.595e-02, -1.481e-01, -8.015e-02, 2.686e-01, -4.448e-02, 2.767e-01, -1.538e-01, -3.520e-01, 4.103e-02, -6.626e-02, -3.406e-01, 5.494e-02, -1.658e-01) * s2_4;
	r += M4(2.551e-03, 8.532e-02, 7.794e-02, 6.304e-03, 6.962e-03, -6.225e-02, -9.156e-02, -2.481e-02, 7.922e-02, 1.759e-01, -3.760e-02, 5.019e-02, -3.880e-02, -7.852e-02, 5.402e-02, -1.085e-02) * s2_5;
	r += M4(1.413e-02, 1.547e-02, -2.538e-02, 5.749e-02, -9.855e-02, -8.029e-02, 5.430e-02, 4.762e-03, 1.289e-01, -3.341e-03, 1.580e-01, -5.018e-02, -3.089e-02, -3.267e-02, -2.711e-02, 2.888e-02) * s2_6;
	r += M4(6.917e-02, -1.659e-02, -3.054e-02, -2.306e-03, 1.979e-03, -1.055e-01, 6.958e-02, -2.083e-01, 1.333e-01, 7.276e-02, 1.520e-01, -1.486e-02, -5.862e-02, 9.698e-02, 1.142e-04, 1.815e-03) * s2_7;
	r += M4(8.510e-02, -6.097e-02, 2.105e-02, 1.070e-01, 1.203e-01, 6.981e-03, -9.415e-03, -9.531e-02, -3.531e-02, 4.344e-02, 6.133e-02, -1.328e-01, -1.282e-02, 3.537e-04, 5.109e-02, 5.757e-02) * s2_8;
	r += M4(8.645e-02, -2.465e-01, -1.874e-01, 3.584e-01, -8.177e-02, -1.409e-02, -4.110e-02, -2.975e-02, -7.435e-02, 7.211e-02, -3.430e-02, -7.122e-03, 3.365e-03, -4.435e-02, -4.102e-02, -1.028e-02) * s3_0;
	r += M4(7.865e-02, 2.580e-01, 2.227e-02, 2.344e-01, 1.567e-01, 9.120e-02, -3.417e-02, 1.406e-02, 1.244e-06, -2.702e-01, 5.555e-02, -4.707e-02, 1.943e-02, 4.529e-02, 1.362e-01, -7.637e-02) * s3_1;
	r += M4(-2.833e-01, 5.285e-02, 7.927e-02, 3.158e-01, 4.676e-03, 2.722e-02, -1.103e-02, 4.703e-02, 8.191e-03, -1.906e-01, 1.584e-01, 5.483e-02, -6.236e-04, -5.262e-02, 5.451e-02, 6.778e-03) * s3_2;
	r += M4(3.243e-01, -4.120e-01, -3.770e-01, 2.241e-01, -1.293e-01, -2.478e-02, -3.843e-02, -3.143e-02, -7.840e-02, 2.597e-02, -1.502e-01, -7.062e-02, -2.448e-01, 7.158e-03, 5.385e-02, -4.386e-04) * s3_3;
	r += M4(-4.933e-01, 8.094e-01, 2.604e-01, 9.942e-01, 4.076e-02, -2.929e-01, 3.099e-01, 1.488e-02, 2.318e-02, 6.958e-02, -3.701e-01, -1.271e-01, -3.875e-01, -1.009e-01, -3.235e-02, -6.565e-01) * s3_4;
	r += M4(-2.737e-02, -1.479e-01, -1.458e-01, 2.264e-01, -3.086e-03, 9.415e-02, -6.588e-02, 3.670e-02, -1.030e-01, -8.600e-02, 1.807e-01, 9.987e-02, 2.409e-02, 1.231e-01, 2.232e-01, -5.349e-02) * s3_5;
	r += M4(1.568e-01, -3.290e-02, -1.448e-02, 2.383e-01, -6.976e-02, -1.492e-02, 3.677e-02, -5.275e-02, -9.199e-02, 2.147e-02, 3.532e-03, -6.040e-02, -1.919e-01, 4.481e-02, 6.209e-02, 1.125e-02) * s3_6;
	r += M4(6.936e-02, -2.344e-01, -5.906e-02, 1.408e-01, 1.463e-01, -1.159e-02, 1.083e-02, -2.348e-01, -8.131e-02, -1.246e-01, -3.173e-02, 3.791e-02, -1.186e-01, 1.240e-01, 1.424e-01, 8.125e-02) * s3_7;
	r += M4(8.294e-02, -2.189e-01, 8.633e-02, 3.468e-01, 6.831e-02, -2.262e-02, -6.304e-05, -1.733e-01, 5.126e-03, -1.087e-02, 3.314e-02, 6.899e-02, 2.023e-02, -1.159e-01, -5.823e-02, 1.025e-02) * s3_8;
	r += V4(-2.061e-02, -5.486e-02, -3.114e-02, 1.127e-02);
	return vec4(r);
	
}
void hook() {
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + ivec2(gl_LocalInvocationID.xy);
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv3_pt;
	V4 s0_0 = l0(-1, -1);
	V4 s2_0 = l1(-1, -1);
	V4 s0_1 = l0(0, -1);
	V4 s2_1 = l1(0, -1);
	V4 s0_2 = l0(1, -1);
	V4 s2_2 = l1(1, -1);
	V4 s0_3 = l0(-1, 0);
	V4 s2_3 = l1(-1, 0);
	V4 s0_4 = l0(0, 0);
	V4 s2_4 = l1(0, 0);
	V4 s0_5 = l0(1, 0);
	V4 s2_5 = l1(1, 0);
	V4 s0_6 = l0(-1, 1);
	V4 s2_6 = l1(-1, 1);
	V4 s0_7 = l0(0, 1);
	V4 s2_7 = l1(0, 1);
	V4 s0_8 = l0(1, 1);
	V4 s2_8 = l1(1, 1);
	V4 s1_0 = -max(-s0_0, V4(0.0));
	V4 s1_1 = -max(-s0_1, V4(0.0));
	V4 s1_2 = -max(-s0_2, V4(0.0));
	V4 s1_3 = -max(-s0_3, V4(0.0));
	V4 s1_4 = -max(-s0_4, V4(0.0));
	V4 s1_5 = -max(-s0_5, V4(0.0));
	V4 s1_6 = -max(-s0_6, V4(0.0));
	V4 s1_7 = -max(-s0_7, V4(0.0));
	V4 s1_8 = -max(-s0_8, V4(0.0));
	s0_0 = max(s0_0, V4(0.0));
	s0_1 = max(s0_1, V4(0.0));
	s0_2 = max(s0_2, V4(0.0));
	s0_3 = max(s0_3, V4(0.0));
	s0_4 = max(s0_4, V4(0.0));
	s0_5 = max(s0_5, V4(0.0));
	s0_6 = max(s0_6, V4(0.0));
	s0_7 = max(s0_7, V4(0.0));
	s0_8 = max(s0_8, V4(0.0));
	V4 s3_0 = -max(-s2_0, V4(0.0));
	V4 s3_1 = -max(-s2_1, V4(0.0));
	V4 s3_2 = -max(-s2_2, V4(0.0));
	V4 s3_3 = -max(-s2_3, V4(0.0));
	V4 s3_4 = -max(-s2_4, V4(0.0));
	V4 s3_5 = -max(-s2_5, V4(0.0));
	V4 s3_6 = -max(-s2_6, V4(0.0));
	V4 s3_7 = -max(-s2_7, V4(0.0));
	V4 s3_8 = -max(-s2_8, V4(0.0));
	s2_0 = max(s2_0, V4(0.0));
	s2_1 = max(s2_1, V4(0.0));
	s2_2 = max(s2_2, V4(0.0));
	s2_3 = max(s2_3, V4(0.0));
	s2_4 = max(s2_4, V4(0.0));
	s2_5 = max(s2_5, V4(0.0));
	s2_6 = max(s2_6, V4(0.0));
	s2_7 = max(s2_7, V4(0.0));
	s2_8 = max(s2_8, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0(s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8, s2_0, s2_1, s2_2, s2_3, s2_4, s2_5, s2_6, s2_7, s2_8, s3_0, s3_1, s3_2, s3_3, s3_4, s3_5, s3_6, s3_7, s3_8));
	imageStore(out_image, opos + ivec2(1, 0), f1(s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8, s2_0, s2_1, s2_2, s2_3, s2_4, s2_5, s2_6, s2_7, s2_8, s3_0, s3_1, s3_2, s3_3, s3_4, s3_5, s3_6, s3_7, s3_8));
}


//!DESC CuNNy-6x8C-RCAS-conv5
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv4
//!BIND LUMA
//!SAVE conv5
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
	#define V4 f16vec4
	#define M4 f16mat4
	#define F float16_t
#else
	#define V4 vec4
	#define M4 mat4
	#define F float
#endif
#define l0(x, y) V4(texelFetch(conv4_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv4_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
vec4 f0(V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8, V4 s2_0, V4 s2_1, V4 s2_2, V4 s2_3, V4 s2_4, V4 s2_5, V4 s2_6, V4 s2_7, V4 s2_8, V4 s3_0, V4 s3_1, V4 s3_2, V4 s3_3, V4 s3_4, V4 s3_5, V4 s3_6, V4 s3_7, V4 s3_8) {
	V4 r = V4(0.0);
	r += M4(-3.064e-02, 1.873e-02, -6.714e-02, -7.918e-02, -9.743e-02, 4.086e-02, 1.087e-01, -1.051e-01, -1.188e-01, -8.725e-03, 1.204e-01, 6.942e-02, -5.258e-02, 9.747e-03, -2.207e-02, 5.106e-02) * s0_0;
	r += M4(-4.830e-03, -8.356e-02, -1.015e-01, -5.535e-02, -2.439e-01, -9.667e-02, -2.267e-01, -4.849e-02, -1.433e-01, -6.433e-02, -1.208e-01, 6.140e-02, 1.680e-01, 7.811e-02, 8.435e-02, 1.003e-01) * s0_1;
	r += M4(-1.077e-01, -7.693e-02, -3.980e-02, 3.208e-02, -1.298e-02, 9.730e-02, 1.094e-01, -5.108e-03, 5.267e-02, 1.139e-02, -1.396e-02, 3.730e-02, 3.667e-02, 9.548e-02, 2.206e-01, 9.286e-02) * s0_2;
	r += M4(4.399e-03, -3.135e-02, -3.477e-02, 8.913e-02, 2.284e-01, 9.561e-03, 8.454e-02, -1.587e-01, 1.616e-01, -3.739e-02, 2.028e-01, -8.688e-02, 6.260e-02, 8.089e-03, -1.431e-02, -8.758e-02) * s0_3;
	r += M4(-2.340e-01, 8.756e-02, -9.244e-02, 3.786e-01, 6.369e-02, 2.358e-01, -3.429e-01, -2.549e-01, -1.998e-02, 1.734e-01, -6.948e-01, -3.623e-01, -1.315e-01, -2.292e-01, 2.232e-01, -1.457e-01) * s0_4;
	r += M4(5.299e-02, -9.975e-02, 6.086e-02, 3.407e-02, -1.256e-01, 1.431e-01, -1.515e-01, 2.134e-02, -3.462e-02, -2.258e-02, -7.175e-02, -1.905e-02, -3.954e-02, -1.406e-03, 2.439e-03, -1.222e-01) * s0_5;
	r += M4(2.176e-03, -7.556e-02, 3.711e-03, -1.598e-01, 1.767e-02, -7.182e-03, 3.929e-02, 5.917e-02, 1.758e-02, 2.003e-02, 2.166e-02, 1.585e-01, 3.460e-02, 4.666e-02, -2.337e-02, -8.247e-02) * s0_6;
	r += M4(-5.842e-03, -1.607e-01, -2.999e-02, -7.205e-02, -6.404e-02, 6.274e-03, 1.198e-01, 1.658e-01, 2.211e-02, -1.066e-01, 5.562e-02, 1.671e-01, -2.123e-02, 1.184e-01, -8.381e-02, -8.228e-02) * s0_7;
	r += M4(-7.630e-02, -1.929e-02, -7.251e-02, -2.816e-02, 3.820e-02, -6.349e-02, 6.480e-03, -9.822e-02, 3.646e-02, 1.115e-02, 1.058e-01, 1.083e-01, 7.458e-02, -1.740e-02, -2.018e-03, -9.681e-03) * s0_8;
	r += M4(1.145e-02, 4.440e-02, -6.828e-02, -2.126e-02, -8.875e-02, -1.149e-02, 1.246e-01, 4.722e-02, -1.604e-01, 5.014e-02, 5.278e-02, 1.118e-01, -1.876e-01, -6.023e-03, -2.244e-02, 1.011e-02) * s1_0;
	r += M4(3.354e-02, 1.088e-01, 1.186e-01, 4.521e-02, 8.197e-02, -6.522e-02, -3.024e-01, 9.415e-02, -1.338e-01, 6.636e-02, -1.191e-01, 1.590e-01, 3.726e-02, 1.779e-03, -9.632e-02, 2.282e-02) * s1_1;
	r += M4(-3.778e-02, 3.331e-02, 8.311e-02, -5.840e-02, 9.653e-02, 6.492e-02, 5.823e-02, 1.825e-02, 1.296e-01, 7.506e-04, -7.380e-02, 2.906e-03, -8.500e-02, -3.837e-02, -5.959e-02, 9.024e-02) * s1_2;
	r += M4(1.016e-01, -8.132e-03, -3.301e-02, -1.196e-02, 1.273e-01, -1.978e-01, -2.444e-02, 1.413e-01, 2.572e-02, -1.009e-02, 1.631e-01, -2.024e-01, -3.547e-02, 5.109e-03, 7.750e-02, -1.170e-01) * s1_3;
	r += M4(9.711e-02, -7.820e-02, 9.478e-02, 2.460e-01, 1.471e-01, -8.810e-02, -9.616e-02, 6.765e-02, 1.532e-01, 1.030e-01, -4.346e-01, -3.291e-01, -4.084e-01, -2.597e-01, -1.526e-01, -1.182e-01) * s1_4;
	r += M4(2.497e-01, -9.287e-02, 6.298e-02, 1.594e-01, -1.289e-02, -5.655e-02, -1.010e-01, 2.296e-02, -9.408e-02, -8.863e-02, 5.953e-02, -6.614e-02, -2.970e-01, 1.214e-01, -2.046e-01, -1.491e-01) * s1_5;
	r += M4(2.522e-02, 4.873e-03, -1.848e-02, -7.556e-02, 1.087e-03, -7.762e-02, 4.321e-02, 3.775e-02, 1.929e-02, 8.526e-03, 1.290e-02, 2.627e-01, -6.201e-02, 7.073e-02, -2.234e-02, 8.926e-02) * s1_6;
	r += M4(-4.760e-02, -5.589e-02, 5.548e-02, 1.344e-01, 5.367e-02, -1.897e-01, 1.060e-02, 8.382e-02, 8.320e-02, -2.058e-02, 3.388e-02, 1.496e-01, -1.092e-01, -4.441e-02, -6.373e-02, -1.776e-01) * s1_7;
	r += M4(-1.056e-02, -9.238e-02, -4.356e-02, -5.156e-02, 9.772e-02, -7.235e-02, 1.158e-03, -1.436e-02, 6.897e-02, 4.237e-02, 6.260e-02, 1.052e-01, 6.517e-03, 8.034e-02, -1.358e-01, 1.729e-02) * s1_8;
	r += M4(3.176e-02, -1.948e-02, 1.993e-02, 1.402e-02, 6.639e-02, 8.683e-03, 5.577e-02, 3.972e-02, -4.204e-02, -3.125e-03, -2.413e-02, -1.234e-01, -1.789e-02, -4.578e-02, -1.514e-02, 3.195e-02) * s2_0;
	r += M4(-1.092e-01, 5.129e-02, -7.495e-02, -7.015e-02, -1.712e-01, 1.713e-01, 2.518e-01, 9.865e-02, -1.500e-02, -4.410e-02, 1.984e-03, -1.329e-02, 1.069e-01, -1.134e-01, -5.064e-02, -9.331e-02) * s2_1;
	r += M4(-9.348e-02, -1.916e-02, -3.400e-02, -3.334e-02, 7.190e-02, 2.940e-02, -6.514e-02, -3.591e-02, -1.932e-01, -5.355e-02, -1.836e-02, 7.659e-02, -9.256e-02, -1.724e-02, -4.990e-02, -3.557e-03) * s2_2;
	r += M4(-3.890e-02, 2.110e-02, 2.410e-02, -2.437e-02, -2.538e-01, -7.375e-02, -8.536e-02, 4.694e-02, -3.760e-03, 9.865e-02, 1.271e-01, -6.812e-02, 7.012e-02, 6.271e-03, 3.988e-02, 5.662e-02) * s2_3;
	r += M4(-1.951e-01, 2.750e-01, 5.274e-02, -2.315e-01, 2.429e-01, -8.451e-02, 6.292e-02, 1.503e-01, -1.723e-01, 2.482e-01, 5.668e-02, -2.292e-02, -2.184e-02, 1.246e-01, 1.316e-01, -2.361e-02) * s2_4;
	r += M4(1.312e-02, 9.439e-02, -1.678e-01, -1.361e-02, 1.654e-01, -6.369e-02, 8.962e-02, 3.533e-02, -1.565e-01, 6.891e-02, -1.397e-01, -2.509e-01, -1.743e-02, 3.719e-02, -8.115e-02, -2.562e-02) * s2_5;
	r += M4(1.447e-02, 1.293e-02, 6.804e-03, 1.294e-01, -1.133e-01, -3.473e-02, -1.206e-01, 1.319e-02, 1.798e-02, 8.569e-02, 7.388e-03, 1.845e-01, 2.824e-02, -9.493e-03, -2.848e-02, -3.116e-02) * s2_6;
	r += M4(3.361e-02, -8.386e-02, 8.497e-02, 8.748e-02, -2.306e-01, -2.449e-01, -9.777e-03, 9.340e-02, 1.401e-01, -1.211e-01, 1.219e-01, -1.305e-01, 2.242e-02, 7.150e-02, 1.074e-01, 1.166e-02) * s2_7;
	r += M4(-2.462e-02, 4.282e-02, -3.055e-02, -5.773e-02, 8.130e-02, -7.034e-02, 7.930e-02, -1.838e-02, 3.925e-02, 1.421e-01, -8.672e-02, 3.348e-02, -3.449e-02, -6.938e-02, -2.182e-02, 4.362e-02) * s2_8;
	r += M4(5.326e-02, -2.555e-02, -4.044e-02, -1.665e-02, 9.959e-02, 1.035e-02, 4.648e-02, -9.095e-02, 8.107e-05, -4.872e-02, 4.852e-02, -5.432e-02, 1.118e-01, -1.149e-01, -3.910e-02, 7.974e-03) * s3_0;
	r += M4(8.951e-02, 1.175e-01, 1.466e-01, -1.433e-02, -6.107e-03, -2.721e-03, 7.629e-02, -4.341e-02, -9.499e-02, -7.195e-02, 5.410e-03, -6.710e-02, -2.913e-03, -7.600e-02, -4.288e-01, -1.059e-01) * s3_1;
	r += M4(1.072e-02, 1.210e-02, 5.216e-02, -1.008e-01, -6.714e-02, 7.054e-02, -3.630e-02, -4.203e-02, -1.168e-02, -3.458e-02, 7.663e-02, 6.090e-02, -1.639e-01, -8.167e-03, 3.412e-02, 1.522e-03) * s3_2;
	r += M4(-2.443e-02, -1.420e-02, -6.993e-02, 6.514e-02, -8.991e-02, 6.165e-04, 6.392e-02, 2.266e-01, -3.572e-02, 1.126e-01, 2.237e-01, -7.759e-02, 1.420e-03, 3.195e-02, 3.460e-02, -2.288e-02) * s3_3;
	r += M4(-1.083e-02, -1.740e-01, 2.426e-01, 1.814e-01, 1.820e-01, 6.097e-02, 3.389e-01, 2.104e-01, -2.017e-01, 2.532e-01, -1.737e-02, -4.121e-02, 3.261e-01, 2.435e-01, 2.315e-01, 2.319e-01) * s3_4;
	r += M4(2.507e-02, -1.459e-01, 3.214e-01, 2.074e-01, 6.191e-03, -3.620e-02, -2.834e-02, 3.165e-02, 1.744e-03, -1.045e-02, -1.345e-01, -7.738e-02, -9.836e-02, 3.487e-02, -1.924e-01, -1.035e-01) * s3_5;
	r += M4(-4.827e-02, -1.289e-02, 2.461e-02, 6.729e-03, 2.633e-02, -1.859e-02, -3.308e-02, -1.302e-01, 5.974e-02, 5.538e-02, 8.672e-02, 1.691e-01, 4.585e-02, -1.495e-01, -3.757e-03, 5.066e-02) * s3_6;
	r += M4(1.514e-01, -3.478e-02, -1.865e-01, -9.387e-03, -7.736e-02, -1.303e-01, 3.419e-02, 1.330e-01, 8.351e-02, -1.001e-01, 2.968e-02, -5.410e-02, -5.180e-02, -7.507e-02, -5.623e-02, -8.094e-03) * s3_7;
	r += M4(-3.055e-02, -7.593e-02, 4.995e-02, 6.033e-02, 3.100e-02, -2.922e-02, -3.165e-02, -1.142e-02, -4.382e-02, 2.610e-02, -5.316e-02, 7.292e-03, 2.685e-02, -1.401e-01, -2.314e-02, 1.185e-02) * s3_8;
	r += V4(-1.282e-02, 9.729e-03, -1.303e-02, -1.099e-03);
	return vec4(r);
	
}
vec4 f1(V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8, V4 s2_0, V4 s2_1, V4 s2_2, V4 s2_3, V4 s2_4, V4 s2_5, V4 s2_6, V4 s2_7, V4 s2_8, V4 s3_0, V4 s3_1, V4 s3_2, V4 s3_3, V4 s3_4, V4 s3_5, V4 s3_6, V4 s3_7, V4 s3_8) {
	V4 r = V4(0.0);
	r += M4(-1.268e-02, -1.975e-03, -3.614e-03, -2.847e-02, -7.574e-02, 1.635e-01, 7.436e-04, -9.482e-02, 1.758e-02, 3.685e-02, 2.160e-02, -3.985e-02, -4.232e-02, -7.953e-03, -3.506e-02, 1.176e-03) * s0_0;
	r += M4(5.977e-03, 3.988e-02, 8.650e-03, -7.152e-03, -2.032e-01, 2.416e-01, -1.469e-01, 1.062e-01, 1.176e-02, 1.323e-02, -1.325e-01, 9.200e-02, -1.163e-01, -1.642e-01, -2.349e-02, 2.312e-02) * s0_1;
	r += M4(-7.677e-02, -2.669e-03, -2.240e-02, -1.471e-02, -2.187e-01, 5.615e-02, -2.236e-01, 3.647e-02, 7.055e-02, 2.309e-02, -5.730e-02, 2.484e-02, -1.146e-02, -4.869e-03, 1.290e-02, -7.482e-02) * s0_2;
	r += M4(1.867e-02, 1.441e-01, 1.262e-02, -3.377e-02, -2.458e-01, 3.407e-01, -2.735e-02, 1.980e-01, -5.217e-02, 8.345e-02, 8.363e-02, -9.049e-03, 4.807e-02, -4.111e-02, 8.488e-02, -2.009e-02) * s0_3;
	r += M4(1.319e-01, -1.168e-01, -1.290e-01, -1.555e-01, -2.985e-01, 3.402e-01, 8.062e-02, 2.900e-01, -4.419e-03, 4.617e-02, 1.235e-01, 1.571e-01, 1.246e-01, 1.331e-01, -1.169e-01, -2.787e-01) * s0_4;
	r += M4(-1.283e-01, -6.467e-02, 8.488e-02, -6.662e-02, -1.199e-01, -2.197e-01, 6.177e-02, -6.812e-02, 7.502e-02, 1.042e-01, 1.522e-02, 5.505e-03, -8.964e-02, 7.697e-02, -1.275e-01, 1.033e-01) * s0_5;
	r += M4(-2.236e-02, 4.735e-02, 2.791e-02, 4.603e-02, 5.134e-02, -1.670e-02, 3.226e-02, 1.940e-03, 2.578e-02, 3.084e-02, -6.179e-02, 1.166e-02, -9.764e-03, -8.888e-02, 3.802e-02, -3.486e-02) * s0_6;
	r += M4(-6.162e-02, -2.080e-02, 8.903e-02, -2.998e-02, -3.138e-02, -1.668e-02, -1.297e-01, 3.559e-02, -3.307e-02, 2.213e-02, 5.418e-02, 9.894e-02, 5.845e-03, -3.658e-03, -7.348e-02, -4.953e-02) * s0_7;
	r += M4(-7.095e-02, -2.185e-02, 4.459e-02, 4.770e-02, -2.098e-02, -3.224e-02, 5.308e-02, 5.836e-03, 1.591e-03, -6.757e-02, 4.219e-03, 1.761e-02, -8.804e-05, -2.628e-02, -1.080e-02, -4.254e-02) * s0_8;
	r += M4(9.948e-04, 2.840e-03, 1.008e-01, 1.217e-01, 2.668e-02, 1.635e-02, 6.529e-02, -8.248e-02, 1.330e-02, 4.571e-02, -4.394e-02, -3.987e-02, -7.194e-02, -1.901e-01, 5.002e-02, 4.737e-03) * s1_0;
	r += M4(-4.184e-02, 2.261e-01, 2.934e-02, 5.353e-02, 1.269e-01, 2.013e-01, -9.207e-02, -1.898e-02, 6.667e-02, -4.565e-02, -1.320e-01, 1.805e-01, -8.502e-02, -1.723e-01, 6.768e-02, -4.236e-02) * s1_1;
	r += M4(2.240e-02, 6.203e-02, 5.005e-02, 9.668e-03, 1.828e-02, -2.268e-02, -9.632e-02, -1.725e-02, 4.524e-02, 6.203e-03, -3.484e-02, 2.269e-02, -4.226e-02, -5.750e-02, -2.665e-02, -5.656e-02) * s1_2;
	r += M4(-1.419e-02, 2.153e-02, 1.028e-03, 7.844e-03, -6.868e-02, 9.012e-02, 9.010e-02, 7.799e-02, 1.455e-02, 1.304e-01, -8.156e-03, 2.963e-04, 7.678e-02, -1.655e-01, 1.432e-01, -5.334e-02) * s1_3;
	r += M4(-1.435e-02, -8.754e-02, 2.114e-01, 1.052e-01, -2.854e-02, -2.493e-03, -1.192e-01, 4.320e-02, 9.254e-02, -2.456e-01, -3.357e-03, 1.375e-01, 1.845e-02, 3.098e-02, -1.975e-01, -2.488e-01) * s1_4;
	r += M4(-1.709e-01, -4.094e-01, 1.047e-01, -5.225e-02, -7.993e-03, 2.343e-02, 9.665e-03, -8.848e-02, 1.873e-01, 2.184e-01, -7.863e-02, 1.300e-02, -6.942e-02, 2.176e-02, 3.472e-02, 1.449e-01) * s1_5;
	r += M4(2.110e-02, 2.142e-02, 8.162e-02, 6.762e-02, 1.531e-02, -2.372e-02, -1.971e-02, -2.451e-02, -6.530e-03, 1.294e-02, -4.091e-02, 6.868e-04, -3.010e-02, -6.838e-02, -2.296e-02, -7.688e-02) * s1_6;
	r += M4(-1.172e-01, 1.799e-01, -7.790e-02, 7.139e-03, 8.374e-02, -1.580e-02, -1.884e-02, -3.721e-03, 1.220e-01, -7.958e-02, 3.860e-02, 7.688e-02, -3.022e-02, -1.883e-01, 6.153e-02, -7.333e-02) * s1_7;
	r += M4(-1.655e-01, -1.485e-01, 1.209e-01, 2.165e-02, -1.915e-02, 3.680e-03, 7.389e-02, 7.598e-02, 6.565e-02, 2.315e-02, -1.608e-02, 2.989e-02, -7.012e-04, 1.793e-01, -3.339e-02, -1.795e-02) * s1_8;
	r += M4(2.617e-02, 3.757e-02, 4.040e-02, 1.320e-02, 5.195e-02, 1.284e-01, -1.705e-01, -4.541e-02, 1.640e-03, -1.777e-02, -1.954e-03, 7.630e-02, 1.936e-02, 1.194e-02, 3.264e-02, -6.205e-02) * s2_0;
	r += M4(2.052e-04, -3.886e-02, -1.134e-01, 1.082e-01, 1.044e-01, -1.176e-01, -1.417e-02, -9.107e-02, 9.158e-02, -7.840e-02, 6.332e-02, 6.191e-02, 7.622e-02, 2.766e-02, 8.504e-02, -1.509e-02) * s2_1;
	r += M4(1.050e-02, -4.629e-03, 3.442e-02, 2.142e-02, 8.726e-02, 3.702e-02, 1.168e-01, -3.753e-02, 6.154e-02, -6.204e-02, 3.307e-02, 1.113e-01, 8.316e-03, -2.802e-02, 3.795e-02, -3.981e-02) * s2_2;
	r += M4(-5.890e-02, 5.242e-02, 1.015e-02, 4.532e-02, -1.059e-02, -3.789e-01, -1.190e-01, -5.207e-02, 7.901e-02, -2.799e-03, -2.571e-02, 9.648e-02, -5.758e-02, -2.472e-03, 7.466e-02, 7.802e-02) * s2_3;
	r += M4(1.187e-01, 7.733e-02, -1.217e-01, -1.753e-01, -3.385e-01, -3.407e-01, -4.599e-01, 1.305e-01, -5.703e-02, 1.997e-01, -3.215e-01, 2.806e-01, -1.419e-01, 2.614e-01, -1.255e-01, 1.899e-01) * s2_4;
	r += M4(7.109e-03, 1.593e-01, 8.344e-02, 8.931e-02, -3.423e-02, -5.532e-02, 1.642e-01, 2.775e-02, 3.243e-02, 1.425e-01, 7.521e-03, 3.224e-01, -6.695e-03, -1.419e-01, -6.674e-02, -6.850e-03) * s2_5;
	r += M4(2.833e-02, 3.312e-02, -7.448e-02, -2.410e-02, 8.636e-02, -8.572e-02, -8.227e-02, -1.198e-01, 1.929e-02, -7.240e-02, 2.805e-03, 2.754e-02, 2.166e-02, -5.479e-02, -1.273e-02, 2.662e-02) * s2_6;
	r += M4(-3.943e-02, -6.178e-02, 1.004e-02, 3.032e-02, -4.664e-02, -2.171e-01, -2.746e-02, 9.543e-03, 1.512e-01, -3.065e-01, 1.915e-01, -1.045e-02, -3.038e-02, 3.545e-02, -6.506e-02, -2.071e-02) * s2_7;
	r += M4(5.219e-02, -1.037e-01, 5.231e-02, 4.455e-03, 3.095e-02, 1.747e-01, -4.270e-02, 3.955e-02, 1.880e-02, -2.453e-02, -8.849e-02, 8.497e-02, 5.023e-02, -5.840e-03, -5.536e-03, -7.299e-02) * s2_8;
	r += M4(1.155e-01, -1.304e-02, -7.134e-04, 2.072e-02, -5.684e-03, 5.054e-02, -1.285e-02, -4.346e-02, 1.275e-02, -2.195e-02, 2.909e-02, -2.900e-03, 9.885e-02, -5.765e-02, 2.173e-01, 1.847e-01) * s3_0;
	r += M4(2.458e-01, -1.705e-01, -8.594e-02, -1.668e-01, -1.251e-02, 6.269e-02, 6.660e-02, -4.965e-02, -1.499e-03, -2.704e-03, 6.720e-02, -7.152e-02, 1.633e-01, 4.234e-01, -5.155e-02, 3.918e-01) * s3_1;
	r += M4(2.290e-02, -1.522e-01, 6.184e-02, -4.463e-03, 4.309e-02, -3.860e-03, -1.038e-02, -4.578e-02, -4.337e-02, -5.530e-02, -7.079e-03, 2.109e-03, 1.708e-01, -4.031e-02, -4.115e-02, 1.303e-01) * s3_2;
	r += M4(3.583e-03, -4.682e-01, 4.420e-03, -1.213e-02, -5.562e-02, 5.161e-02, -1.474e-01, -3.035e-02, -1.098e-02, 1.898e-01, -1.019e-01, 2.883e-02, -1.471e-02, 1.695e-01, -1.355e-01, 3.275e-01) * s3_3;
	r += M4(2.142e-01, 2.845e-01, -8.691e-02, -7.387e-02, -9.381e-02, -3.891e-01, -1.899e-01, 9.007e-02, -4.711e-01, 2.855e-01, -2.193e-01, 2.666e-01, -4.248e-01, -2.176e-02, -6.233e-01, 1.243e+00) * s3_4;
	r += M4(-5.909e-02, -1.431e-01, -1.076e-01, 1.019e-01, -4.202e-02, -9.947e-02, 4.715e-02, 7.305e-03, -5.494e-03, -2.458e-02, -6.939e-03, 4.056e-02, -7.150e-02, 1.585e-01, -1.217e-01, 2.309e-01) * s3_5;
	r += M4(-1.141e-02, -1.226e-01, -2.582e-02, 1.058e-02, 1.314e-02, -4.001e-02, 3.185e-02, -5.776e-02, -5.656e-03, 1.250e-02, -8.669e-02, -1.415e-02, 2.723e-02, 5.034e-02, 1.092e-02, 1.158e-01) * s3_6;
	r += M4(3.351e-02, 1.059e-01, 1.228e-01, 1.138e-01, -2.648e-02, -6.853e-02, 3.652e-04, -7.612e-02, 8.758e-02, -1.661e-01, 7.666e-02, -1.143e-02, 1.147e-01, 7.446e-02, -1.102e-01, 2.271e-01) * s3_7;
	r += M4(7.303e-03, -3.130e-02, -1.363e-02, 2.704e-02, -4.166e-04, -4.876e-03, 4.654e-02, 8.886e-03, 2.817e-02, -1.328e-01, -4.294e-02, -2.865e-02, 1.554e-01, -1.042e-01, 3.752e-02, 1.161e-01) * s3_8;
	r += V4(-3.228e-03, 5.335e-03, -1.926e-02, 2.863e-03);
	return vec4(r);
	
}
void hook() {
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + ivec2(gl_LocalInvocationID.xy);
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv4_pt;
	V4 s0_0 = l0(-1, -1);
	V4 s2_0 = l1(-1, -1);
	V4 s0_1 = l0(0, -1);
	V4 s2_1 = l1(0, -1);
	V4 s0_2 = l0(1, -1);
	V4 s2_2 = l1(1, -1);
	V4 s0_3 = l0(-1, 0);
	V4 s2_3 = l1(-1, 0);
	V4 s0_4 = l0(0, 0);
	V4 s2_4 = l1(0, 0);
	V4 s0_5 = l0(1, 0);
	V4 s2_5 = l1(1, 0);
	V4 s0_6 = l0(-1, 1);
	V4 s2_6 = l1(-1, 1);
	V4 s0_7 = l0(0, 1);
	V4 s2_7 = l1(0, 1);
	V4 s0_8 = l0(1, 1);
	V4 s2_8 = l1(1, 1);
	V4 s1_0 = -max(-s0_0, V4(0.0));
	V4 s1_1 = -max(-s0_1, V4(0.0));
	V4 s1_2 = -max(-s0_2, V4(0.0));
	V4 s1_3 = -max(-s0_3, V4(0.0));
	V4 s1_4 = -max(-s0_4, V4(0.0));
	V4 s1_5 = -max(-s0_5, V4(0.0));
	V4 s1_6 = -max(-s0_6, V4(0.0));
	V4 s1_7 = -max(-s0_7, V4(0.0));
	V4 s1_8 = -max(-s0_8, V4(0.0));
	s0_0 = max(s0_0, V4(0.0));
	s0_1 = max(s0_1, V4(0.0));
	s0_2 = max(s0_2, V4(0.0));
	s0_3 = max(s0_3, V4(0.0));
	s0_4 = max(s0_4, V4(0.0));
	s0_5 = max(s0_5, V4(0.0));
	s0_6 = max(s0_6, V4(0.0));
	s0_7 = max(s0_7, V4(0.0));
	s0_8 = max(s0_8, V4(0.0));
	V4 s3_0 = -max(-s2_0, V4(0.0));
	V4 s3_1 = -max(-s2_1, V4(0.0));
	V4 s3_2 = -max(-s2_2, V4(0.0));
	V4 s3_3 = -max(-s2_3, V4(0.0));
	V4 s3_4 = -max(-s2_4, V4(0.0));
	V4 s3_5 = -max(-s2_5, V4(0.0));
	V4 s3_6 = -max(-s2_6, V4(0.0));
	V4 s3_7 = -max(-s2_7, V4(0.0));
	V4 s3_8 = -max(-s2_8, V4(0.0));
	s2_0 = max(s2_0, V4(0.0));
	s2_1 = max(s2_1, V4(0.0));
	s2_2 = max(s2_2, V4(0.0));
	s2_3 = max(s2_3, V4(0.0));
	s2_4 = max(s2_4, V4(0.0));
	s2_5 = max(s2_5, V4(0.0));
	s2_6 = max(s2_6, V4(0.0));
	s2_7 = max(s2_7, V4(0.0));
	s2_8 = max(s2_8, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0(s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8, s2_0, s2_1, s2_2, s2_3, s2_4, s2_5, s2_6, s2_7, s2_8, s3_0, s3_1, s3_2, s3_3, s3_4, s3_5, s3_6, s3_7, s3_8));
	imageStore(out_image, opos + ivec2(1, 0), f1(s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8, s2_0, s2_1, s2_2, s2_3, s2_4, s2_5, s2_6, s2_7, s2_8, s3_0, s3_1, s3_2, s3_3, s3_4, s3_5, s3_6, s3_7, s3_8));
}


//!DESC CuNNy-6x8C-RCAS-conv6
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv5
//!BIND LUMA
//!SAVE conv6
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
	#define V4 f16vec4
	#define M4 f16mat4
	#define F float16_t
#else
	#define V4 vec4
	#define M4 mat4
	#define F float
#endif
#define l0(x, y) V4(texelFetch(conv5_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv5_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
vec4 f0(V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8, V4 s2_0, V4 s2_1, V4 s2_2, V4 s2_3, V4 s2_4, V4 s2_5, V4 s2_6, V4 s2_7, V4 s2_8, V4 s3_0, V4 s3_1, V4 s3_2, V4 s3_3, V4 s3_4, V4 s3_5, V4 s3_6, V4 s3_7, V4 s3_8) {
	V4 r = V4(0.0);
	r += M4(4.942e-02, -1.216e-01, -1.121e-01, 9.988e-02, -9.285e-03, 2.322e-02, 7.986e-03, 1.653e-02, 1.057e-01, -6.518e-03, -1.097e-01, -2.459e-02, 6.224e-02, -2.034e-01, -2.872e-02, 4.970e-02) * s0_0;
	r += M4(-3.362e-02, -1.499e-01, -4.795e-01, -8.116e-02, 4.549e-02, 2.538e-02, 1.700e-02, 1.368e-02, 7.946e-02, -8.046e-02, 2.219e-01, 1.531e-01, -9.154e-02, -6.101e-02, 3.650e-02, 8.589e-03) * s0_1;
	r += M4(-7.357e-02, -3.370e-02, -8.717e-02, 6.815e-02, -1.173e-02, 1.030e-01, 6.138e-03, 3.574e-03, -2.377e-02, -7.398e-02, -6.697e-02, -3.461e-02, 6.073e-03, -6.454e-02, 2.428e-01, 5.187e-02) * s0_2;
	r += M4(2.623e-02, -6.219e-05, -7.954e-02, 1.716e-01, -1.280e-02, -6.633e-02, 1.153e-01, 5.827e-02, 1.554e-01, -1.005e-01, -1.662e-01, 2.269e-01, 1.131e-01, 4.177e-02, -5.433e-02, 9.796e-03) * s0_3;
	r += M4(8.125e-02, 8.348e-01, 1.106e-01, 6.076e-01, 9.784e-02, 3.447e-02, -1.194e-01, 2.112e-02, 2.588e-01, -3.917e-01, 5.098e-01, -1.218e-01, -2.399e-01, -2.087e-01, 2.615e-01, -7.309e-01) * s0_4;
	r += M4(-1.888e-01, 3.217e-02, -2.337e-02, 1.319e-01, 3.742e-02, -5.786e-02, -1.352e-01, 2.698e-02, -4.924e-02, -5.819e-02, -2.457e-01, 9.354e-02, 7.826e-03, -2.565e-01, -1.582e-01, -1.430e-01) * s0_5;
	r += M4(4.207e-02, 6.726e-02, 6.612e-03, -4.434e-02, 6.941e-02, 6.341e-03, -8.138e-02, -3.079e-02, -9.602e-02, -5.606e-02, 5.714e-02, -1.493e-01, -2.459e-02, 6.917e-03, 8.048e-02, 1.332e-02) * s0_6;
	r += M4(-2.456e-01, -5.645e-02, -3.212e-01, 4.488e-01, -7.101e-02, -4.920e-02, 6.663e-02, 3.586e-02, -5.604e-02, 1.244e-01, 1.983e-01, 7.469e-02, 9.929e-02, -2.854e-03, 1.102e-01, -1.590e-01) * s0_7;
	r += M4(-4.165e-02, -1.694e-01, -2.382e-01, 1.234e-01, 2.001e-02, -3.340e-03, -2.667e-02, 1.856e-02, 1.907e-01, -5.354e-02, -8.666e-02, 1.289e-02, -1.225e-01, -9.077e-03, 1.676e-03, -1.860e-01) * s0_8;
	r += M4(3.893e-02, -4.403e-02, -2.216e-02, 2.203e-02, -3.485e-02, 7.201e-02, -9.015e-02, -1.382e-01, 9.918e-03, -3.057e-03, -3.661e-02, -3.841e-02, -2.226e-02, 2.050e-03, 1.355e-02, 1.889e-02) * s1_0;
	r += M4(7.359e-03, -1.938e-01, -3.053e-02, 8.000e-02, 3.223e-02, -3.467e-01, 8.745e-02, -6.690e-02, 7.682e-03, 7.769e-02, 5.132e-02, -3.234e-03, -4.962e-02, -2.490e-02, 1.247e-01, 3.080e-02) * s1_1;
	r += M4(5.505e-03, -4.976e-02, 1.519e-02, 2.959e-03, 4.262e-02, 1.167e-01, 6.723e-03, -2.082e-02, -3.346e-02, 2.425e-02, 1.429e-02, -1.051e-02, -1.171e-02, 8.534e-02, 5.651e-02, -9.566e-03) * s1_2;
	r += M4(1.561e-02, 5.823e-02, -2.964e-02, 1.700e-02, 4.164e-02, -1.827e-01, 4.932e-02, -3.626e-02, 3.600e-02, -3.670e-02, 4.039e-02, -2.322e-02, 4.472e-02, 1.051e-02, -7.844e-02, 2.952e-03) * s1_3;
	r += M4(8.604e-02, -3.058e-02, 1.056e-01, 5.132e-02, 1.795e-01, -5.763e-01, -3.403e-01, -4.886e-01, 9.975e-02, -4.773e-02, 6.100e-02, 6.150e-02, -8.876e-02, -5.328e-02, 1.754e-01, -4.304e-02) * s1_4;
	r += M4(-4.724e-02, -9.448e-02, -1.354e-01, 3.205e-02, 3.228e-02, -1.470e-01, -1.715e-01, -1.134e-02, 1.419e-01, -5.383e-03, -3.061e-02, -1.322e-02, -8.598e-05, 5.647e-02, -5.956e-03, -2.588e-02) * s1_5;
	r += M4(5.737e-03, 1.922e-02, -2.235e-02, 5.773e-03, -5.945e-02, 8.540e-02, 8.392e-03, -1.624e-01, -4.998e-02, 2.707e-03, 8.667e-02, -9.022e-03, -7.189e-03, 4.182e-03, 1.470e-02, -3.288e-03) * s1_6;
	r += M4(1.223e-01, -7.667e-02, -1.616e-01, 8.955e-03, -3.929e-03, 2.417e-01, 2.007e-01, -6.773e-02, 2.995e-02, 1.165e-01, 6.544e-02, 3.828e-02, -2.411e-02, 1.597e-02, 8.014e-02, -2.579e-02) * s1_7;
	r += M4(-2.823e-02, 2.203e-02, 1.423e-02, -3.862e-03, 9.738e-02, -2.324e-02, -8.630e-02, -3.991e-02, 1.086e-03, 3.753e-02, 4.797e-02, 1.438e-02, 2.940e-02, 1.325e-02, -1.444e-02, -2.235e-02) * s1_8;
	r += M4(3.802e-02, 7.677e-02, 1.511e-02, -2.200e-02, -1.242e-02, 9.015e-02, 4.897e-02, -4.854e-04, -2.442e-03, 2.433e-02, 4.190e-02, -6.949e-03, -6.455e-02, -4.184e-02, -9.104e-03, -2.418e-02) * s2_0;
	r += M4(4.229e-02, 4.526e-02, -5.528e-02, 7.533e-03, -2.794e-02, 1.619e-01, 6.297e-02, -1.581e-02, -1.029e-01, 3.579e-02, -2.406e-01, -7.050e-02, 1.067e-01, -7.585e-02, 7.613e-02, 1.109e-04) * s2_1;
	r += M4(-2.549e-02, 1.419e-02, 3.113e-02, -1.121e-02, 2.703e-03, 8.911e-02, 2.171e-02, -2.310e-02, -2.413e-02, 1.044e-01, -6.476e-02, -1.840e-02, -5.191e-02, -7.118e-02, -2.352e-02, 9.480e-03) * s2_2;
	r += M4(9.599e-02, -1.515e-01, -1.245e-01, 8.712e-02, -7.213e-03, -4.937e-02, -1.954e-02, -1.876e-02, 2.207e-02, -1.153e-01, -1.137e-01, -6.461e-02, -9.369e-02, 8.072e-02, 6.802e-02, -2.544e-02) * s2_3;
	r += M4(-1.475e-01, -2.081e-01, 7.702e-02, 1.735e-02, -1.890e-01, -9.415e-02, -1.614e-01, -2.051e-02, -1.760e-01, 5.653e-02, -1.601e-01, 3.232e-02, 2.450e-02, 2.823e-01, 1.382e-01, -1.697e-01) * s2_4;
	r += M4(-4.931e-05, -9.032e-02, -2.687e-02, 4.657e-03, 3.035e-02, -3.014e-02, -9.072e-02, 7.691e-03, 1.167e-01, 5.741e-02, -1.529e-01, 1.166e-02, 8.187e-02, 7.791e-02, -1.208e-01, -2.510e-02) * s2_5;
	r += M4(1.338e-02, 1.745e-02, 7.314e-02, -6.313e-02, -3.417e-02, 1.189e-02, 1.736e-02, -3.239e-02, 4.577e-02, 2.451e-02, 4.658e-02, -8.793e-02, -4.809e-02, -1.782e-02, 8.962e-02, -2.500e-02) * s2_6;
	r += M4(-2.472e-02, 8.117e-02, 4.191e-02, 5.537e-03, -2.199e-02, 2.522e-02, 3.469e-02, -1.883e-02, -1.009e-01, 1.900e-02, 1.940e-01, 1.742e-02, -1.786e-02, 3.356e-02, -5.033e-02, 7.475e-02) * s2_7;
	r += M4(3.867e-02, -2.648e-03, 4.635e-02, -2.031e-02, -2.905e-02, 3.821e-02, 3.114e-02, 1.911e-03, 7.050e-02, 3.654e-02, 8.049e-02, -3.087e-03, 5.307e-02, -4.673e-02, 4.335e-02, -4.932e-03) * s2_8;
	r += M4(-1.907e-02, 5.098e-02, -2.028e-03, -2.783e-02, 7.849e-02, 1.727e-03, 5.956e-02, 1.096e-01, -3.206e-02, 5.684e-02, 4.121e-02, 1.155e-02, -2.439e-02, 5.881e-02, -1.416e-02, -5.103e-02) * s3_0;
	r += M4(1.838e-02, 8.680e-02, -6.273e-02, 9.806e-03, -1.060e-01, 1.054e-01, 2.206e-02, 1.752e-02, -2.640e-02, -3.476e-02, 1.601e-04, -1.815e-02, 1.047e-01, -6.342e-02, 5.269e-02, 3.182e-02) * s3_1;
	r += M4(2.353e-02, 4.309e-02, 4.192e-02, 1.358e-03, 1.941e-02, 8.106e-02, -9.081e-02, -9.347e-03, -7.207e-03, -3.672e-02, -1.008e-02, 1.654e-02, -6.279e-02, 3.427e-03, -3.905e-02, -4.299e-03) * s3_2;
	r += M4(1.084e-01, -1.275e-01, -6.471e-02, 5.156e-03, 1.988e-01, -2.034e-01, -2.057e-01, 1.274e-01, -1.008e-02, -1.136e-01, -2.363e-02, -5.382e-02, -2.260e-02, 1.607e-02, 2.306e-02, 1.384e-01) * s3_3;
	r += M4(-2.172e-01, -5.164e-01, 2.301e-01, 1.580e-01, -6.223e-01, -2.630e-01, -1.437e-01, 2.861e-01, 2.443e-02, -3.723e-02, -1.095e-01, 3.396e-02, -1.269e-02, 3.216e-01, 6.403e-02, 2.420e-03) * s3_4;
	r += M4(5.097e-02, -9.961e-02, -8.211e-02, 3.299e-02, 1.917e-02, -1.228e-01, -7.278e-02, 3.428e-02, 1.499e-01, 1.327e-02, -5.354e-03, -4.537e-02, 5.551e-02, 2.887e-02, -1.056e-01, -1.263e-02) * s3_5;
	r += M4(-1.704e-02, -5.187e-02, 1.762e-02, -1.397e-02, 1.256e-01, -9.599e-02, -6.804e-02, 7.065e-03, 3.659e-03, 2.738e-02, 5.064e-02, -1.962e-02, 7.202e-02, -5.199e-02, 1.397e-02, -1.435e-02) * s3_6;
	r += M4(2.176e-02, 1.445e-02, 2.931e-02, 8.269e-03, -1.733e-01, -5.793e-02, -6.910e-03, -6.526e-02, -5.698e-02, -1.379e-02, 2.214e-01, 1.457e-01, -7.384e-02, -1.284e-01, -1.116e-01, 9.216e-02) * s3_7;
	r += M4(3.495e-02, -3.951e-02, 5.629e-02, 7.417e-03, 1.862e-02, 6.513e-02, 3.925e-02, 1.563e-03, -1.500e-02, -1.787e-02, 5.249e-02, 9.726e-03, 1.155e-02, -3.539e-02, 8.727e-02, 7.118e-03) * s3_8;
	r += V4(4.491e-04, 6.208e-03, 2.887e-03, -3.688e-03);
	return vec4(r);
	
}
vec4 f1(V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8, V4 s2_0, V4 s2_1, V4 s2_2, V4 s2_3, V4 s2_4, V4 s2_5, V4 s2_6, V4 s2_7, V4 s2_8, V4 s3_0, V4 s3_1, V4 s3_2, V4 s3_3, V4 s3_4, V4 s3_5, V4 s3_6, V4 s3_7, V4 s3_8) {
	V4 r = V4(0.0);
	r += M4(-1.817e-02, 2.620e-01, 2.822e-01, 1.916e-01, -3.994e-02, -6.061e-02, -4.483e-02, 1.752e-02, -8.164e-03, -7.319e-03, -2.063e-01, 8.380e-03, 2.052e-02, 7.517e-02, 1.440e-01, 1.061e-01) * s0_0;
	r += M4(5.298e-02, 1.910e-01, 6.039e-02, -7.149e-02, -2.740e-02, -4.316e-03, -1.183e-01, 3.444e-02, 5.177e-02, -8.483e-02, 1.613e-01, 1.874e-01, 9.930e-02, -1.774e-01, 3.447e-01, -2.416e-01) * s0_1;
	r += M4(-8.532e-02, -3.271e-02, 1.162e-01, 6.274e-02, -9.494e-03, 1.764e-02, 3.845e-02, 7.821e-03, 5.680e-02, 6.420e-02, -9.887e-03, 1.133e-01, 2.753e-01, -6.864e-02, -3.361e-01, -1.328e-01) * s0_2;
	r += M4(1.267e-02, 1.801e-01, -1.208e-01, 1.097e-03, 3.163e-02, -1.130e-01, -6.170e-02, -2.079e-02, -5.624e-02, -1.790e-01, -5.957e-01, 2.685e-01, 5.176e-02, -1.028e-01, -1.926e-01, 2.820e-02) * s0_3;
	r += M4(1.990e-02, -4.125e-01, 1.048e-01, -3.214e-02, -2.225e-02, 1.948e-01, 4.480e-02, 1.348e-01, 3.218e-01, 4.317e-01, 3.226e-01, 4.728e-01, 9.965e-02, 5.312e-01, 6.271e-01, -2.494e-01) * s0_4;
	r += M4(4.639e-01, -7.626e-02, 1.095e-01, -2.222e-02, -5.810e-02, 2.886e-02, -2.281e-02, -7.081e-02, -2.553e-02, -5.362e-02, -1.778e-02, -3.363e-01, 2.223e-01, 2.370e-01, -3.780e-01, 9.546e-02) * s0_5;
	r += M4(3.606e-02, -1.086e-02, 2.099e-02, 6.482e-02, 1.361e-02, -2.693e-03, -4.635e-02, 6.738e-02, 3.942e-02, -7.251e-02, -5.799e-02, 2.701e-03, 2.998e-02, -9.597e-02, -1.633e-02, -2.021e-02) * s0_6;
	r += M4(3.670e-02, 5.258e-01, 2.916e-01, -2.402e-01, 3.951e-02, 2.244e-02, 4.492e-02, 1.727e-02, -2.666e-01, -1.295e-01, 3.305e-01, -1.226e-02, -2.448e-02, -5.137e-02, -2.396e-02, 6.488e-02) * s0_7;
	r += M4(2.119e-01, 1.478e-01, -4.499e-01, -8.999e-02, 1.120e-02, 1.589e-03, -6.084e-02, -1.626e-02, 3.455e-03, 1.147e-02, -2.255e-01, 2.017e-01, -5.051e-02, -1.933e-03, 2.818e-01, 1.938e-01) * s0_8;
	r += M4(1.519e-02, 1.629e-02, 3.016e-02, 2.867e-02, -4.479e-02, 4.172e-02, -1.519e-01, -1.792e-01, -1.278e-02, 1.126e-02, -3.451e-02, -2.729e-02, 1.371e-02, 1.017e-02, 3.655e-02, 1.928e-02) * s1_0;
	r += M4(8.227e-02, 2.861e-02, -3.297e-02, 1.204e-01, 1.189e-01, 5.186e-02, -5.021e-01, 3.411e-02, -2.157e-02, -3.537e-02, 7.007e-02, -4.831e-02, 3.112e-02, -1.226e-01, 7.913e-02, -1.416e-02) * s1_1;
	r += M4(7.201e-02, -2.233e-02, -2.704e-02, 3.033e-02, 8.263e-03, 9.929e-03, -8.771e-02, -1.146e-01, 4.829e-02, 4.138e-02, 5.021e-02, 9.957e-04, 3.878e-02, 6.206e-02, -5.109e-02, -1.737e-02) * s1_2;
	r += M4(1.956e-02, -8.657e-02, -1.155e-01, -3.142e-02, 7.027e-02, 1.749e-02, -1.815e-01, -6.412e-02, 7.119e-03, -1.013e-01, -6.734e-02, 1.301e-02, -9.333e-03, 3.557e-02, -1.154e-01, -1.680e-03) * s1_3;
	r += M4(5.065e-02, 1.074e-01, -7.122e-02, 2.167e-01, 1.100e-01, 5.019e-01, 1.599e-01, 6.506e-01, -6.739e-02, -3.559e-02, 7.639e-02, 7.295e-02, 5.310e-02, -1.290e-01, 1.900e-01, 6.835e-02) * s1_4;
	r += M4(-8.527e-03, -2.177e-02, -1.428e-02, 6.337e-03, 5.882e-02, 9.536e-02, -5.208e-02, -6.836e-02, -1.145e-01, -5.876e-03, -4.907e-02, -2.710e-02, -3.982e-02, 1.386e-01, 8.868e-03, -8.046e-02) * s1_5;
	r += M4(-1.224e-02, -3.789e-02, -3.820e-02, -2.741e-02, 2.986e-02, -8.061e-02, -7.395e-02, 4.571e-02, -9.302e-03, -8.081e-02, 4.110e-02, -1.641e-02, 8.336e-03, -8.982e-03, -8.866e-03, 1.593e-02) * s1_6;
	r += M4(-1.223e-02, 1.869e-01, -9.576e-02, 1.363e-01, -6.863e-02, -1.734e-01, 1.550e-01, -1.204e-01, -8.265e-02, -5.981e-02, -3.336e-02, -1.576e-01, 3.448e-02, -7.082e-02, 4.271e-02, -1.971e-02) * s1_7;
	r += M4(1.918e-02, -4.138e-02, 3.183e-02, 1.062e-03, -2.929e-02, 8.670e-02, -2.452e-02, 7.748e-02, -5.878e-03, -1.715e-02, 1.647e-02, 4.760e-05, -3.456e-02, 3.773e-02, 5.968e-03, -3.059e-02) * s1_8;
	r += M4(2.487e-02, 3.279e-02, 2.094e-02, -1.871e-02, 1.629e-02, -5.663e-02, 3.187e-02, -6.149e-02, -3.222e-02, 5.613e-02, 1.213e-01, 9.889e-03, -1.488e-02, -1.425e-02, -9.348e-02, 2.752e-02) * s2_0;
	r += M4(-2.607e-02, -2.653e-02, -8.487e-02, 1.992e-02, -1.344e-02, -2.958e-02, 2.455e-02, -3.456e-02, -1.199e-01, 7.872e-02, 8.766e-02, -1.822e-01, -4.704e-02, -7.690e-02, 6.565e-02, -2.289e-02) * s2_1;
	r += M4(1.926e-02, 7.405e-04, -1.547e-03, 3.458e-02, 2.197e-02, 3.130e-02, 2.233e-02, -4.048e-02, -7.534e-02, 8.379e-02, 5.406e-02, -5.712e-02, 4.331e-02, 2.115e-02, 4.010e-02, -3.322e-03) * s2_2;
	r += M4(-5.702e-02, 1.623e-01, 7.284e-03, 5.071e-02, -1.503e-02, 1.055e-01, 9.776e-02, -1.406e-02, -6.977e-02, 2.349e-01, 1.035e-01, -9.865e-02, 5.858e-03, -8.571e-02, -5.935e-02, -4.419e-02) * s2_3;
	r += M4(8.178e-02, 3.571e-02, 1.601e-01, -6.634e-02, 1.304e-02, 1.451e-01, 9.245e-02, -1.270e-01, 1.321e-01, 1.219e-01, 1.148e-01, -3.759e-01, -1.864e-02, -1.252e-01, 1.319e-01, -6.249e-02) * s2_4;
	r += M4(1.262e-02, 1.436e-02, 7.630e-03, -3.142e-02, -1.411e-01, -7.033e-03, 1.418e-02, -8.568e-02, -1.450e-01, 6.089e-02, -7.270e-02, -2.315e-01, -2.241e-02, 7.788e-02, -1.291e-03, -1.962e-02) * s2_5;
	r += M4(1.234e-02, -4.344e-02, 3.721e-02, -2.365e-02, -1.061e-02, 2.753e-02, 7.150e-02, -1.642e-02, 2.457e-02, -7.917e-02, 4.352e-02, 2.465e-02, 2.992e-02, 1.241e-02, 6.350e-02, -5.489e-02) * s2_6;
	r += M4(-6.916e-03, -7.249e-02, 6.931e-02, -1.293e-02, -1.906e-02, -4.510e-02, 6.927e-02, -1.008e-01, -1.631e-02, -1.284e-01, 1.174e-01, -1.856e-01, -2.798e-02, 7.476e-03, 3.828e-02, 5.774e-03) * s2_7;
	r += M4(5.678e-02, -2.017e-02, -7.800e-02, -1.330e-02, 4.278e-02, -4.129e-02, -2.437e-02, 1.484e-02, -8.445e-03, -1.674e-02, -7.009e-02, 2.619e-02, 2.371e-02, 4.575e-03, -4.285e-02, -1.252e-02) * s2_8;
	r += M4(7.942e-03, 4.743e-02, -7.311e-03, -7.086e-02, 7.793e-02, 2.584e-02, 7.500e-02, 4.162e-02, -1.050e-02, -2.993e-02, 3.680e-02, -5.294e-03, -6.850e-03, 1.496e-02, -5.970e-02, 1.049e-02) * s3_0;
	r += M4(-8.825e-02, -4.986e-02, -6.559e-02, 5.141e-02, 1.976e-02, -5.960e-03, 8.091e-02, 1.242e-01, -8.078e-02, -1.091e-02, 6.854e-02, -4.416e-02, -1.436e-03, -4.158e-02, 1.899e-02, -4.104e-02) * s3_1;
	r += M4(1.134e-03, -2.045e-02, 5.041e-02, -2.257e-02, 1.003e-02, 1.326e-02, -2.627e-02, -7.206e-02, -3.906e-03, 2.529e-02, 2.780e-02, -3.162e-02, 4.320e-02, 3.308e-02, -1.457e-02, 3.077e-02) * s3_2;
	r += M4(-3.949e-03, 1.392e-01, 1.144e-01, 5.213e-02, -6.366e-02, 2.507e-01, 7.882e-02, 1.599e-01, -3.056e-02, 1.509e-01, 1.201e-01, -3.672e-03, -3.422e-02, -4.161e-02, -2.147e-01, 1.011e-02) * s3_3;
	r += M4(2.322e-01, -2.011e-01, -1.552e-01, -3.068e-01, 1.030e-01, 3.778e-01, 5.025e-02, 1.407e-02, 7.112e-02, -1.363e-01, 2.618e-01, -6.260e-03, -8.836e-02, 1.085e-01, 3.023e-01, 4.283e-01) * s3_4;
	r += M4(1.859e-02, 3.184e-02, -3.711e-02, -1.158e-02, -9.115e-02, -1.593e-01, -8.178e-02, -1.015e-01, -5.191e-02, 3.653e-02, -7.389e-02, 5.495e-02, -1.349e-01, 2.838e-02, -3.616e-03, 2.740e-03) * s3_5;
	r += M4(-1.290e-02, 7.653e-02, 1.039e-01, 1.056e-02, -1.416e-02, 8.261e-02, 1.217e-02, 9.400e-02, 1.946e-02, -5.796e-02, 6.417e-02, 1.167e-02, 2.503e-02, 1.801e-02, -1.586e-02, 3.646e-02) * s3_6;
	r += M4(-8.941e-03, -1.181e-01, 8.424e-03, 4.336e-02, 4.651e-02, -4.369e-02, 8.408e-02, -1.157e-01, -3.067e-03, -1.388e-01, 7.875e-02, -1.232e-01, 2.900e-02, 1.205e-01, 8.558e-02, 2.392e-01) * s3_7;
	r += M4(3.279e-02, -7.617e-03, -7.561e-02, 1.217e-02, 4.353e-02, -8.570e-02, -9.155e-02, 1.037e-02, 4.974e-02, 2.051e-02, -3.141e-02, 2.302e-02, 4.837e-02, -7.461e-02, -7.447e-02, -1.747e-02) * s3_8;
	r += V4(-7.730e-03, 6.854e-04, 7.965e-03, -9.900e-03);
	return vec4(r);
	
}
void hook() {
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + ivec2(gl_LocalInvocationID.xy);
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv5_pt;
	V4 s0_0 = l0(-1, -1);
	V4 s2_0 = l1(-1, -1);
	V4 s0_1 = l0(0, -1);
	V4 s2_1 = l1(0, -1);
	V4 s0_2 = l0(1, -1);
	V4 s2_2 = l1(1, -1);
	V4 s0_3 = l0(-1, 0);
	V4 s2_3 = l1(-1, 0);
	V4 s0_4 = l0(0, 0);
	V4 s2_4 = l1(0, 0);
	V4 s0_5 = l0(1, 0);
	V4 s2_5 = l1(1, 0);
	V4 s0_6 = l0(-1, 1);
	V4 s2_6 = l1(-1, 1);
	V4 s0_7 = l0(0, 1);
	V4 s2_7 = l1(0, 1);
	V4 s0_8 = l0(1, 1);
	V4 s2_8 = l1(1, 1);
	V4 s1_0 = -max(-s0_0, V4(0.0));
	V4 s1_1 = -max(-s0_1, V4(0.0));
	V4 s1_2 = -max(-s0_2, V4(0.0));
	V4 s1_3 = -max(-s0_3, V4(0.0));
	V4 s1_4 = -max(-s0_4, V4(0.0));
	V4 s1_5 = -max(-s0_5, V4(0.0));
	V4 s1_6 = -max(-s0_6, V4(0.0));
	V4 s1_7 = -max(-s0_7, V4(0.0));
	V4 s1_8 = -max(-s0_8, V4(0.0));
	s0_0 = max(s0_0, V4(0.0));
	s0_1 = max(s0_1, V4(0.0));
	s0_2 = max(s0_2, V4(0.0));
	s0_3 = max(s0_3, V4(0.0));
	s0_4 = max(s0_4, V4(0.0));
	s0_5 = max(s0_5, V4(0.0));
	s0_6 = max(s0_6, V4(0.0));
	s0_7 = max(s0_7, V4(0.0));
	s0_8 = max(s0_8, V4(0.0));
	V4 s3_0 = -max(-s2_0, V4(0.0));
	V4 s3_1 = -max(-s2_1, V4(0.0));
	V4 s3_2 = -max(-s2_2, V4(0.0));
	V4 s3_3 = -max(-s2_3, V4(0.0));
	V4 s3_4 = -max(-s2_4, V4(0.0));
	V4 s3_5 = -max(-s2_5, V4(0.0));
	V4 s3_6 = -max(-s2_6, V4(0.0));
	V4 s3_7 = -max(-s2_7, V4(0.0));
	V4 s3_8 = -max(-s2_8, V4(0.0));
	s2_0 = max(s2_0, V4(0.0));
	s2_1 = max(s2_1, V4(0.0));
	s2_2 = max(s2_2, V4(0.0));
	s2_3 = max(s2_3, V4(0.0));
	s2_4 = max(s2_4, V4(0.0));
	s2_5 = max(s2_5, V4(0.0));
	s2_6 = max(s2_6, V4(0.0));
	s2_7 = max(s2_7, V4(0.0));
	s2_8 = max(s2_8, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0(s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8, s2_0, s2_1, s2_2, s2_3, s2_4, s2_5, s2_6, s2_7, s2_8, s3_0, s3_1, s3_2, s3_3, s3_4, s3_5, s3_6, s3_7, s3_8));
	imageStore(out_image, opos + ivec2(1, 0), f1(s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8, s2_0, s2_1, s2_2, s2_3, s2_4, s2_5, s2_6, s2_7, s2_8, s3_0, s3_1, s3_2, s3_3, s3_4, s3_5, s3_6, s3_7, s3_8));
}


//!DESC CuNNy-6x8C-RCAS-out
//!HOOK LUMA
//!COMPUTE 8 8 8 8
//!BIND conv6
//!BIND LUMA
//!SAVE out
//!WIDTH LUMA.w
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
	#define V4 f16vec4
	#define M4 f16mat4
	#define F float16_t
#else
	#define V4 vec4
	#define M4 mat4
	#define F float
#endif
#define l0(x, y) V4(texelFetch(conv6_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv6_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
vec4 f0(V4 s0_0, V4 s0_1, V4 s0_2, V4 s0_3, V4 s0_4, V4 s0_5, V4 s0_6, V4 s0_7, V4 s0_8, V4 s1_0, V4 s1_1, V4 s1_2, V4 s1_3, V4 s1_4, V4 s1_5, V4 s1_6, V4 s1_7, V4 s1_8, V4 s2_0, V4 s2_1, V4 s2_2, V4 s2_3, V4 s2_4, V4 s2_5, V4 s2_6, V4 s2_7, V4 s2_8, V4 s3_0, V4 s3_1, V4 s3_2, V4 s3_3, V4 s3_4, V4 s3_5, V4 s3_6, V4 s3_7, V4 s3_8) {
	V4 r = V4(0.0);
	r += M4(-5.767e-02, 7.165e-02, 1.844e-02, 9.231e-02, -3.129e-02, -5.859e-03, -2.196e-02, -7.717e-03, -7.208e-02, -1.034e-02, 6.917e-02, 6.189e-02, 1.551e-01, -8.870e-03, -3.075e-02, -5.169e-02) * s0_0;
	r += M4(3.441e-01, -2.679e-01, 6.921e-02, 4.450e-02, 2.289e-02, -4.496e-02, -1.307e-02, -1.672e-02, 1.382e-01, 2.485e-01, -6.028e-02, 4.480e-02, 8.091e-02, 2.615e-01, 2.057e-01, 9.326e-02) * s0_1;
	r += M4(-4.181e-02, 9.015e-02, 2.908e-02, 2.249e-02, 3.127e-03, 5.302e-02, 9.105e-03, 8.967e-03, 2.998e-02, -4.931e-02, 9.158e-03, -2.719e-02, 1.285e-01, 1.180e-01, -2.400e-02, 1.045e-01) * s0_2;
	r += M4(-3.791e-02, 1.810e-01, -2.132e-01, -4.653e-02, 6.953e-02, 1.194e-01, -4.926e-02, -4.868e-02, 7.837e-02, -7.251e-02, -2.010e-01, -1.706e-01, -1.442e-01, 4.391e-02, 1.499e-01, -1.740e-02) * s0_3;
	r += M4(2.767e-01, -3.061e-01, 5.021e-01, -5.729e-01, -4.172e-01, -3.955e-01, -9.317e-02, -1.123e-01, -5.605e-01, 3.474e-01, -6.434e-02, 6.250e-01, -2.452e-01, -4.063e-01, -9.342e-03, 4.601e-01) * s0_4;
	r += M4(-1.164e-01, -1.296e-02, -8.332e-02, 1.747e-01, 4.302e-02, 1.517e-02, 3.674e-02, 8.410e-02, 1.351e-01, -6.810e-02, 9.595e-02, -2.245e-01, -1.528e-01, -2.836e-02, -7.462e-02, -2.381e-01) * s0_5;
	r += M4(-5.319e-02, -2.095e-02, 1.151e-03, 1.174e-01, -6.954e-02, -2.069e-02, -5.270e-02, 3.821e-02, -6.677e-02, -5.471e-02, 7.423e-02, -2.556e-02, 2.841e-03, -6.581e-03, 2.202e-02, -6.280e-03) * s0_6;
	r += M4(8.874e-03, 5.511e-02, 8.862e-02, 1.756e-02, 1.062e-01, 4.381e-02, 6.508e-02, -8.037e-02, 5.203e-02, 6.384e-02, -1.627e-01, 8.382e-02, 1.248e-01, 1.430e-01, -1.221e-01, -3.721e-02) * s0_7;
	r += M4(9.107e-02, 3.093e-02, 2.623e-02, -3.834e-02, 1.137e-02, 1.488e-02, 7.300e-03, 4.896e-02, -3.299e-02, 4.072e-02, 5.050e-03, 2.073e-01, -3.078e-02, -2.510e-02, 9.332e-02, -1.451e-02) * s0_8;
	r += M4(1.877e-02, 2.723e-03, 1.648e-02, 2.401e-02, -1.837e-02, -5.143e-03, -2.144e-02, -1.600e-02, -4.787e-03, -7.686e-03, 7.999e-02, 4.323e-02, 2.642e-02, -4.899e-02, -2.369e-03, 3.855e-03) * s1_0;
	r += M4(5.290e-02, -7.490e-02, 7.439e-02, 4.323e-02, 2.086e-02, -5.220e-02, -1.485e-02, -3.019e-02, 9.038e-02, 1.036e-01, 4.844e-02, 8.414e-02, 2.842e-01, 2.313e-01, 5.171e-02, 2.431e-02) * s1_1;
	r += M4(-1.411e-02, 1.112e-01, -5.120e-03, 4.515e-02, -4.087e-03, 4.546e-02, 5.617e-03, 2.178e-02, -1.763e-02, -1.396e-02, 8.449e-03, 2.767e-02, 7.935e-02, 1.582e-01, 3.817e-02, 4.306e-02) * s1_2;
	r += M4(-1.008e-01, 7.609e-02, -1.739e-01, -7.679e-02, 5.280e-02, 1.358e-01, -1.520e-02, -1.348e-02, 4.496e-02, -3.649e-03, -2.244e-01, -1.607e-01, 4.386e-02, -1.476e-02, 1.627e-01, -3.477e-02) * s1_3;
	r += M4(-3.650e-02, 1.155e-01, -9.745e-02, -1.062e-01, -4.092e-01, -4.326e-01, -7.365e-02, -1.071e-01, 8.677e-02, 1.179e-01, -3.031e-02, 3.618e-02, -4.580e-01, -1.316e-01, 1.570e-01, 3.431e-01) * s1_4;
	r += M4(4.890e-03, -1.466e-01, 6.427e-02, 7.514e-02, 4.484e-02, 2.434e-02, 4.912e-02, 9.908e-02, 2.883e-03, 4.328e-02, -3.838e-02, -9.399e-02, -1.469e-01, -3.407e-01, -6.668e-02, -1.458e-03) * s1_5;
	r += M4(-3.713e-03, -1.566e-02, 7.285e-03, 2.960e-02, 2.737e-02, -1.740e-02, -1.353e-01, 3.009e-02, -1.173e-01, -6.601e-02, 5.364e-02, 6.535e-03, -1.033e-02, -8.386e-03, -1.682e-02, 1.363e-02) * s1_6;
	r += M4(7.506e-03, 3.320e-02, -3.034e-02, 8.105e-02, 3.818e-01, 3.330e-01, -4.131e-01, -3.773e-01, -6.222e-02, -9.206e-02, 6.418e-02, 4.838e-02, 5.325e-02, 3.211e-02, -4.929e-02, -3.675e-02) * s1_7;
	r += M4(6.681e-02, 7.348e-02, 4.822e-02, -6.107e-02, 3.069e-02, 1.181e-01, 9.938e-03, -1.953e-01, -6.252e-03, -3.800e-04, 1.177e-02, 9.204e-02, 5.006e-02, 3.708e-02, -1.979e-02, -7.977e-02) * s1_8;
	r += M4(-9.775e-02, 1.426e-02, -6.323e-02, -4.829e-02, -4.975e-02, -4.419e-02, 1.554e-02, 2.545e-02, 4.206e-02, 1.145e-02, -1.455e-02, -6.009e-03, -1.178e-01, 5.164e-02, -1.043e-01, 8.411e-02) * s2_0;
	r += M4(-1.304e-01, -3.020e-01, -1.350e-03, -4.596e-02, 1.431e-01, 1.221e-01, 1.657e-01, 7.239e-02, -9.571e-02, -4.780e-04, 9.843e-03, -1.770e-03, 1.211e-02, -3.975e-01, 5.229e-02, -3.864e-02) * s2_1;
	r += M4(3.747e-03, 6.893e-02, -1.075e-02, 3.060e-02, 9.767e-03, 1.754e-02, 8.223e-03, 1.063e-01, 2.261e-02, -3.454e-02, 1.319e-02, 2.545e-02, -3.448e-02, 8.787e-02, -8.636e-03, -1.527e-02) * s2_2;
	r += M4(4.828e-01, 1.198e-03, 1.526e-01, 3.432e-03, 1.635e-01, 4.842e-02, -7.981e-02, -1.274e-01, -1.093e-01, 2.298e-02, 5.795e-02, 7.397e-02, 2.278e-01, -9.435e-02, -1.122e-02, -1.045e-01) * s2_3;
	r += M4(-2.489e-03, 5.638e-01, -3.463e-01, -2.221e-01, -6.085e-02, 1.044e-01, -4.369e-01, -1.139e-01, -1.088e-01, -1.383e-01, -1.980e-01, -1.054e-01, -5.941e-01, 2.822e-01, -1.180e-01, -3.968e-01) * s2_4;
	r += M4(5.256e-02, -1.414e-01, 7.592e-02, 2.405e-02, -3.467e-02, 3.137e-02, -7.045e-02, -2.072e-01, -2.087e-02, -1.262e-01, 5.011e-02, -6.664e-02, -1.296e-02, 1.504e-01, -1.128e-01, 2.067e-01) * s2_5;
	r += M4(1.313e-01, 1.010e-01, -2.379e-01, -1.045e-01, -1.181e-01, -6.365e-02, 5.575e-02, 2.442e-02, 5.806e-02, 2.163e-02, -5.327e-02, 1.661e-03, -8.654e-02, 2.286e-02, -3.940e-02, -5.329e-02) * s2_6;
	r += M4(1.510e-01, 1.103e-01, -7.664e-02, -1.558e-01, -1.183e-01, -1.121e-01, 1.390e-01, 7.764e-02, 2.036e-02, 5.755e-02, -5.218e-02, -3.407e-02, 8.302e-02, 2.832e-02, -2.097e-01, 2.646e-01) * s2_7;
	r += M4(3.876e-02, 8.028e-02, 3.319e-02, -8.081e-02, -1.654e-02, -1.634e-02, 1.514e-02, 1.597e-01, 5.106e-02, 4.871e-02, 5.969e-03, -8.120e-02, 8.203e-02, -6.932e-02, 9.085e-02, -7.502e-02) * s2_8;
	r += M4(-1.475e-02, 3.634e-02, -9.671e-02, -6.184e-02, -3.396e-02, -6.041e-02, 4.649e-03, 1.150e-02, 3.549e-02, -5.847e-04, -3.089e-02, -1.108e-02, -8.735e-02, 5.457e-02, 5.271e-03, 1.475e-02) * s3_0;
	r += M4(-6.862e-02, -1.805e-01, -6.883e-02, -9.489e-02, 1.088e-02, 2.371e-01, 1.264e-01, 1.012e-01, -1.333e-01, 1.208e-02, 9.162e-03, 4.455e-04, -1.199e-01, -2.624e-01, -5.358e-02, -4.798e-02) * s3_1;
	r += M4(-1.900e-02, 5.893e-02, 1.766e-02, 2.366e-02, 3.699e-02, -5.257e-02, 4.718e-02, 1.787e-01, 7.651e-02, -7.791e-02, 1.046e-02, 3.111e-02, 3.520e-02, 5.111e-02, 6.119e-03, -1.405e-02) * s3_2;
	r += M4(2.131e-01, 2.184e-02, 2.290e-01, 3.323e-02, 1.577e-01, 3.236e-03, -6.517e-02, -1.646e-01, -7.824e-02, 1.057e-02, 8.715e-02, 3.380e-02, 8.960e-02, 5.361e-02, -1.333e-01, 2.943e-02) * s3_3;
	r += M4(-2.368e-01, 1.356e-01, -1.830e-01, 4.192e-02, -1.793e-01, 2.826e-01, -7.521e-01, 6.957e-02, -1.042e-01, -8.759e-02, -2.215e-01, -4.656e-02, -1.646e-01, -1.707e-01, -1.038e-01, -3.594e-01) * s3_4;
	r += M4(5.296e-02, -8.863e-02, 9.647e-02, 6.560e-02, -8.667e-02, 2.750e-01, -8.400e-03, -2.959e-01, 1.547e-01, -3.297e-01, 1.827e-01, -2.441e-01, -5.388e-03, -2.924e-02, -1.428e-02, 3.243e-02) * s3_5;
	r += M4(-1.879e-02, -2.886e-04, 1.242e-02, 2.460e-02, -1.333e-01, -5.414e-02, 5.694e-02, 1.936e-02, 5.603e-02, 2.550e-02, -5.945e-02, 1.299e-02, -4.471e-02, -3.434e-03, -1.439e-02, -2.329e-03) * s3_6;
	r += M4(1.218e-02, -6.456e-03, 8.345e-02, 1.048e-01, -1.606e-01, -1.077e-01, 1.292e-01, 1.577e-01, 1.268e-02, 4.189e-02, -5.219e-02, -4.110e-02, 9.341e-02, 1.848e-02, 1.878e-02, -2.124e-02) * s3_7;
	r += M4(4.786e-02, 4.713e-02, 3.241e-02, -1.309e-02, -1.364e-02, -2.057e-02, -7.935e-02, 2.529e-01, 5.863e-02, 1.872e-02, 9.595e-02, -1.899e-01, -1.838e-02, 6.682e-03, -3.673e-04, 1.146e-02) * s3_8;
	r += V4(7.562e-04, 8.720e-06, 1.462e-03, 4.257e-04);
	return vec4(tanh(r));
	
}
void hook() {
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + ivec2(gl_LocalInvocationID.xy);
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(1, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv6_pt;
	V4 s0_0 = l0(-1, -1);
	V4 s2_0 = l1(-1, -1);
	V4 s0_1 = l0(0, -1);
	V4 s2_1 = l1(0, -1);
	V4 s0_2 = l0(1, -1);
	V4 s2_2 = l1(1, -1);
	V4 s0_3 = l0(-1, 0);
	V4 s2_3 = l1(-1, 0);
	V4 s0_4 = l0(0, 0);
	V4 s2_4 = l1(0, 0);
	V4 s0_5 = l0(1, 0);
	V4 s2_5 = l1(1, 0);
	V4 s0_6 = l0(-1, 1);
	V4 s2_6 = l1(-1, 1);
	V4 s0_7 = l0(0, 1);
	V4 s2_7 = l1(0, 1);
	V4 s0_8 = l0(1, 1);
	V4 s2_8 = l1(1, 1);
	V4 s1_0 = -max(-s0_0, V4(0.0));
	V4 s1_1 = -max(-s0_1, V4(0.0));
	V4 s1_2 = -max(-s0_2, V4(0.0));
	V4 s1_3 = -max(-s0_3, V4(0.0));
	V4 s1_4 = -max(-s0_4, V4(0.0));
	V4 s1_5 = -max(-s0_5, V4(0.0));
	V4 s1_6 = -max(-s0_6, V4(0.0));
	V4 s1_7 = -max(-s0_7, V4(0.0));
	V4 s1_8 = -max(-s0_8, V4(0.0));
	s0_0 = max(s0_0, V4(0.0));
	s0_1 = max(s0_1, V4(0.0));
	s0_2 = max(s0_2, V4(0.0));
	s0_3 = max(s0_3, V4(0.0));
	s0_4 = max(s0_4, V4(0.0));
	s0_5 = max(s0_5, V4(0.0));
	s0_6 = max(s0_6, V4(0.0));
	s0_7 = max(s0_7, V4(0.0));
	s0_8 = max(s0_8, V4(0.0));
	V4 s3_0 = -max(-s2_0, V4(0.0));
	V4 s3_1 = -max(-s2_1, V4(0.0));
	V4 s3_2 = -max(-s2_2, V4(0.0));
	V4 s3_3 = -max(-s2_3, V4(0.0));
	V4 s3_4 = -max(-s2_4, V4(0.0));
	V4 s3_5 = -max(-s2_5, V4(0.0));
	V4 s3_6 = -max(-s2_6, V4(0.0));
	V4 s3_7 = -max(-s2_7, V4(0.0));
	V4 s3_8 = -max(-s2_8, V4(0.0));
	s2_0 = max(s2_0, V4(0.0));
	s2_1 = max(s2_1, V4(0.0));
	s2_2 = max(s2_2, V4(0.0));
	s2_3 = max(s2_3, V4(0.0));
	s2_4 = max(s2_4, V4(0.0));
	s2_5 = max(s2_5, V4(0.0));
	s2_6 = max(s2_6, V4(0.0));
	s2_7 = max(s2_7, V4(0.0));
	s2_8 = max(s2_8, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0(s0_0, s0_1, s0_2, s0_3, s0_4, s0_5, s0_6, s0_7, s0_8, s1_0, s1_1, s1_2, s1_3, s1_4, s1_5, s1_6, s1_7, s1_8, s2_0, s2_1, s2_2, s2_3, s2_4, s2_5, s2_6, s2_7, s2_8, s3_0, s3_1, s3_2, s3_3, s3_4, s3_5, s3_6, s3_7, s3_8));
}


//!DESC CuNNy-6x8C-RCAS-shuffle
//!HOOK LUMA
//!BIND out
//!BIND rcas
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 1
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
	#define V4 f16vec4
	#define M4 f16mat4
	#define F float16_t
#else
	#define V4 vec4
	#define M4 mat4
	#define F float
#endif
vec4 hook() {
	vec4 r = vec4(0.0);
	vec2 f = fract(out_pos * out_size);
	ivec2 i = ivec2(f * vec2(2.0));
	r.r = out_tex((vec2(0.5) - f) * out_pt + out_pos)[2*i.y + i.x];
	r.r += rcas_tex(rcas_pos).r;
	r.a = 1.0;
	return clamp(r, 0.0, 1.0);
}
