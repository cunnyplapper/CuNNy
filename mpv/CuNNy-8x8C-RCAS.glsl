// CuNNy 8x8C RCAS
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

// FSR mpv | modified
// Copyright (c) 2021 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// FidelityFX FSR v1.0.2 by AMD
// ported to mpv by agyild

//!DESC CuNNy-EASU
//!HOOK LUMA
//!BIND LUMA
//!SAVE easu
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
//!COMPONENTS 1

float APrxLoRcpF1(float a) {
	return uintBitsToFloat(uint(0x7ef07ebb) - floatBitsToUint(a));
}

float APrxLoRsqF1(float a) {
	return uintBitsToFloat(uint(0x5f347d74) - (floatBitsToUint(a) >> uint(1)));
}

float AMin3F1(float x, float y, float z) {
	return min(x, min(y, z));
}

float AMax3F1(float x, float y, float z) {
	return max(x, max(y, z));
}

void tap(inout float aC, inout float aW, vec2 off, vec2 dir, vec2 len,
         float lob, float clp, float c){
	vec2 v;
	v.x = (off.x * ( dir.x)) + (off.y * dir.y);
	v.y = (off.x * (-dir.y)) + (off.y * dir.x);
	v *= len;
	float d2 = v.x * v.x + v.y * v.y;
	d2 = min(d2, clp);
	float wB = float(2.0 / 5.0) * d2 + -1.0;
	float wA = lob * d2 + -1.0;
	wB *= wB;
	wA *= wA;
	wB = float(25.0 / 16.0) * wB + float(-(25.0 / 16.0 - 1.0));
	float w = wB * wA;
	aC += c * w;
	aW += w;
}

void set(inout vec2 dir, inout float len, vec2 pp, bool biS, bool biT,
         bool biU, bool biV, float lA, float lB, float lC, float lD, float lE){
	float w = 0.0;
	if (biS)
		w = (1.0 - pp.x) * (1.0 - pp.y);
	if (biT)
		w =        pp.x  * (1.0 - pp.y);
	if (biU)
		w = (1.0 - pp.x) *        pp.y;
	if (biV)
		w =        pp.x  *        pp.y;
	float dc = lD - lC;
	float cb = lC - lB;
	float lenX = max(abs(dc), abs(cb));
	lenX = APrxLoRcpF1(lenX);
	float dirX = lD - lB;
	lenX = clamp(abs(dirX) * lenX, 0.0, 1.0);
	lenX *= lenX;
	float ec = lE - lC;
	float ca = lC - lA;
	float lenY = max(abs(ec), abs(ca));
	lenY = APrxLoRcpF1(lenY);
	float dirY = lE - lA;
	lenY = clamp(abs(dirY) * lenY, 0.0, 1.0);
	lenY *= lenY;
	dir += vec2(dirX, dirY) * w;
	len += dot(vec2(w), vec2(lenX, lenY));
}

vec4 hook() {
	vec4 pix = vec4(0.0, 0.0, 0.0, 1.0);
	vec2 pp = LUMA_pos * LUMA_size - vec2(0.5);
	vec2 fp = floor(pp);
	pp -= fp;
#if (defined(LUMA_gather) && (__VERSION__ >= 400 || (GL_ES && __VERSION__ >= 310)))
	vec4 bczzL = LUMA_gather(vec2((fp + vec2(1.0, -1.0)) * LUMA_pt), 0);
	vec4 ijfeL = LUMA_gather(vec2((fp + vec2(0.0,  1.0)) * LUMA_pt), 0);
	vec4 klhgL = LUMA_gather(vec2((fp + vec2(2.0,  1.0)) * LUMA_pt), 0);
	vec4 zzonL = LUMA_gather(vec2((fp + vec2(1.0,  3.0)) * LUMA_pt), 0);
#else
	float b = LUMA_tex(vec2((fp + vec2(0.5, -0.5)) * LUMA_pt)).r;
	float c = LUMA_tex(vec2((fp + vec2(1.5, -0.5)) * LUMA_pt)).r;
	float e = LUMA_tex(vec2((fp + vec2(-0.5, 0.5)) * LUMA_pt)).r;
	float f = LUMA_tex(vec2((fp + vec2( 0.5, 0.5)) * LUMA_pt)).r;
	float g = LUMA_tex(vec2((fp + vec2( 1.5, 0.5)) * LUMA_pt)).r;
	float h = LUMA_tex(vec2((fp + vec2( 2.5, 0.5)) * LUMA_pt)).r;
	float i = LUMA_tex(vec2((fp + vec2(-0.5, 1.5)) * LUMA_pt)).r;
	float j = LUMA_tex(vec2((fp + vec2( 0.5, 1.5)) * LUMA_pt)).r;
	float k = LUMA_tex(vec2((fp + vec2( 1.5, 1.5)) * LUMA_pt)).r;
	float l = LUMA_tex(vec2((fp + vec2( 2.5, 1.5)) * LUMA_pt)).r;
	float n = LUMA_tex(vec2((fp + vec2(0.5, 2.5) ) * LUMA_pt)).r;
	float o = LUMA_tex(vec2((fp + vec2(1.5, 2.5) ) * LUMA_pt)).r;
	vec4 bczzL = vec4(b, c, 0.0, 0.0);
	vec4 ijfeL = vec4(i, j, f, e);
	vec4 klhgL = vec4(k, l, h, g);
	vec4 zzonL = vec4(0.0, 0.0, o, n);
#endif
	float bL = bczzL.x;
	float cL = bczzL.y;
	float iL = ijfeL.x;
	float jL = ijfeL.y;
	float fL = ijfeL.z;
	float eL = ijfeL.w;
	float kL = klhgL.x;
	float lL = klhgL.y;
	float hL = klhgL.z;
	float gL = klhgL.w;
	float oL = zzonL.z;
	float nL = zzonL.w;
	vec2 dir = vec2(0.0);
	float len = 0.0;
	set(dir, len, pp, true, false, false, false, bL, eL, fL, gL, jL);
	set(dir, len, pp, false, true, false, false, cL, fL, gL, hL, kL);
	set(dir, len, pp, false, false, true, false, fL, iL, jL, kL, nL);
	set(dir, len, pp, false, false, false, true, gL, jL, kL, lL, oL);
	vec2 dir2 = dir * dir;
	float dirR = dir2.x + dir2.y;
	bool zro = dirR < float(1.0 / 32768.0);
	dirR = APrxLoRsqF1(dirR);
	dirR = zro ? 1.0 : dirR;
	dir.x = zro ? 1.0 : dir.x;
	dir *= vec2(dirR);
	len = len * 0.5;
	len *= len;
	float stretch = (dir.x * dir.x + dir.y * dir.y) * APrxLoRcpF1(max(abs(dir.x), abs(dir.y)));
	vec2 len2 = vec2(1.0 + (stretch - 1.0) * len, 1.0 + -0.5 * len);
	float lob = 0.5 + float((1.0 / 4.0 - 0.04) - 0.5) * len;
	float clp = APrxLoRcpF1(lob);
	float aC = 0.0;
	float aW = 0.0;
	tap(aC, aW, vec2( 0.0,-1.0) - pp, dir, len2, lob, clp, bL);
	tap(aC, aW, vec2( 1.0,-1.0) - pp, dir, len2, lob, clp, cL);
	tap(aC, aW, vec2(-1.0, 1.0) - pp, dir, len2, lob, clp, iL);
	tap(aC, aW, vec2( 0.0, 1.0) - pp, dir, len2, lob, clp, jL);
	tap(aC, aW, vec2( 0.0, 0.0) - pp, dir, len2, lob, clp, fL);
	tap(aC, aW, vec2(-1.0, 0.0) - pp, dir, len2, lob, clp, eL);
	tap(aC, aW, vec2( 1.0, 1.0) - pp, dir, len2, lob, clp, kL);
	tap(aC, aW, vec2( 2.0, 1.0) - pp, dir, len2, lob, clp, lL);
	tap(aC, aW, vec2( 2.0, 0.0) - pp, dir, len2, lob, clp, hL);
	tap(aC, aW, vec2( 1.0, 0.0) - pp, dir, len2, lob, clp, gL);
	tap(aC, aW, vec2( 1.0, 2.0) - pp, dir, len2, lob, clp, oL);
	tap(aC, aW, vec2( 0.0, 2.0) - pp, dir, len2, lob, clp, nL);
	pix.r = aC / aW;
	float min1 = min(AMin3F1(fL, gL, jL), kL);
	float max1 = max(AMax3F1(fL, gL, jL), kL);
	pix.r = clamp(pix.r, min1, max1);
	pix.r = clamp(pix.r, 0.0, 1.0);
	return pix;
}

//!DESC CuNNy-RCAS
//!HOOK LUMA
//!BIND easu
//!SAVE rcas
//!WIDTH easu.w
//!HEIGHT easu.h
//!COMPONENTS 1

// CuNNy: do not change unless changed during training as well
#define SHARPNESS 2.0
#define FSR_RCAS_LIMIT (0.25 - (1.0 / 16.0))

float APrxMedRcpF1(float a) {
	float b = uintBitsToFloat(uint(0x7ef19fff) - floatBitsToUint(a));
	return b * (-b * a + 2.0);
}

float AMax3F1(float x, float y, float z) {
	return max(x, max(y, z)); 
}


float AMin3F1(float x, float y, float z) {
	return min(x, min(y, z));
}

vec4 hook() {
#if (defined(easu_gather) && (__VERSION__ >= 400 || (GL_ES && __VERSION__ >= 310)))
	vec3 bde = easu_gather(easu_pos + easu_pt * vec2(-0.5), 0).xyz;
	float b = bde.z;
	float d = bde.x;
	float e = bde.y;
	vec2 fh = easu_gather(easu_pos + easu_pt * vec2(0.5), 0).zx;
	float f = fh.x;
	float h = fh.y;
#else
	float b = easu_texOff(vec2( 0.0, -1.0)).r;
	float d = easu_texOff(vec2(-1.0,  0.0)).r;
	float e = easu_tex(easu_pos).r;
	float f = easu_texOff(vec2(1.0, 0.0)).r;
	float h = easu_texOff(vec2(0.0, 1.0)).r;
#endif
	float mn1L = min(AMin3F1(b, d, f), h);
	float mx1L = max(AMax3F1(b, d, f), h);
	vec2 peakC = vec2(1.0, -1.0 * 4.0);
	float hitMinL = min(mn1L, e) / (4.0 * mx1L);
	float hitMaxL = (peakC.x - max(mx1L, e)) / (4.0 * mn1L + peakC.y);
	float lobeL = max(-hitMinL, hitMaxL);
	float lobe = max(float(-FSR_RCAS_LIMIT), min(lobeL, 0.0)) * exp2(-clamp(float(SHARPNESS), 0.0, 2.0));
	float nz = 0.25 * b + 0.25 * d + 0.25 * f + 0.25 * h - e;
	nz = clamp(abs(nz) * APrxMedRcpF1(AMax3F1(AMax3F1(b, d, e), f, h) - AMin3F1(AMin3F1(b, d, e), f, h)), 0.0, 1.0);
	nz = -0.5 * nz + 1.0;
	lobe *= nz;
	float rcpL = APrxMedRcpF1(4.0 * lobe + 1.0);
	vec4 pix = vec4(0.0, 0.0, 0.0, 1.0);
	pix.r = float((lobe * b + lobe * d + lobe * h + lobe * f + e) * rcpL);
	return pix;
}


//!DESC CuNNy-8x8C-RCAS-in
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND LUMA
//!SAVE in
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) F(texelFetch(LUMA_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(1, 1) + ivec2(0, 0), 0).r)
shared F s0[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += V4(7.066e-02, -3.321e-03, 5.744e-03, 1.251e-01) * s0[y+0][x+0];
	r += V4(-4.982e-02, 1.492e-02, -6.292e-02, 1.223e-01) * s0[y+0][x+1];
	r += V4(-1.348e-01, -5.717e-04, 6.566e-02, -1.963e-01) * s0[y+0][x+2];
	r += V4(-8.462e-03, 1.717e-02, -4.287e-01, -1.122e-02) * s0[y+1][x+0];
	r += V4(-2.439e-01, -5.168e-01, 4.247e-01, 1.577e-01) * s0[y+1][x+1];
	r += V4(2.387e-01, 9.409e-03, -5.435e-03, 1.196e-01) * s0[y+1][x+2];
	r += V4(-4.275e-02, -2.056e-03, 1.172e-02, -1.189e-01) * s0[y+2][x+0];
	r += V4(-3.724e-02, 9.504e-03, -3.632e-02, -3.058e-01) * s0[y+2][x+1];
	r += V4(1.909e-01, -5.279e-04, 3.625e-02, 3.912e-02) * s0[y+2][x+2];
	r += V4(8.360e-04, 5.542e-03, -2.903e-02, 6.386e-02);
	return vec4(r);
}
vec4 f1(int x, int y) {
	V4 r = V4(0.0);
	r += V4(4.065e-02, 2.839e-01, 2.425e-03, 5.545e-02) * s0[y+0][x+0];
	r += V4(4.060e-02, -1.110e-01, -4.377e-02, 4.754e-01) * s0[y+0][x+1];
	r += V4(-9.041e-02, 2.326e-02, -2.106e-01, -3.056e-03) * s0[y+0][x+2];
	r += V4(-1.250e-02, 2.181e-01, -1.260e-01, -3.444e-01) * s0[y+1][x+0];
	r += V4(3.571e-01, -3.232e-01, -2.634e-01, -2.067e-01) * s0[y+1][x+1];
	r += V4(-3.818e-01, -7.154e-02, 3.771e-02, -1.902e-03) * s0[y+1][x+2];
	r += V4(-5.114e-03, -1.135e-01, 1.874e-02, 3.696e-02) * s0[y+2][x+0];
	r += V4(7.202e-02, 9.704e-02, 1.591e-01, 8.666e-04) * s0[y+2][x+1];
	r += V4(-1.968e-02, -1.089e-03, -8.329e-02, -5.460e-03) * s0[y+2][x+2];
	r += V4(-2.704e-02, -1.085e-02, 1.349e-01, -1.631e-02);
	return vec4(r);
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = LUMA_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
		}
	}
	barrier();
	vec4 r0 = f0(xy.x, xy.y);
	vec4 r1 = f1(xy.x, xy.y);
	imageStore(out_image, opos + ivec2(0, 0), r0);
	imageStore(out_image, opos + ivec2(1, 0), r1);
}

//!DESC CuNNy-8x8C-RCAS-conv1
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND in
//!BIND LUMA
//!SAVE conv1
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(texelFetch(in_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(in_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 s0[10][10];
shared V4 s1[10][10];
shared V4 s2[10][10];
shared V4 s3[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += M4(3.698e-02, 1.486e-01, -1.463e-01, -9.085e-02, -1.023e+00, -1.001e+00, 1.968e+00, -2.022e-02, -6.463e-02, -3.454e-01, 5.154e-03, 1.661e-02, 1.930e-01, 2.838e-02, -2.764e-02, -9.163e-02) * s0[y+0][x+0];
	r += M4(-2.741e-01, -1.145e-01, 1.705e-01, 1.968e-01, -8.312e-01, -9.366e-01, 3.137e-01, 2.834e-01, -2.744e-02, -5.145e-03, -4.659e-03, -1.792e-03, 4.517e-01, 4.582e-02, 3.388e-02, -1.274e-01) * s0[y+0][x+1];
	r += M4(-2.728e-01, -8.232e-02, -9.448e-02, -1.009e-01, 1.194e+00, -7.680e-01, 1.133e+00, 1.407e+00, -1.999e-01, -1.942e-01, 2.290e-02, -1.936e-02, 3.409e-01, -9.839e-02, 7.580e-02, 9.262e-02) * s0[y+0][x+2];
	r += M4(-9.568e-02, -2.017e-01, -2.126e-01, -1.905e-02, -6.514e-01, -2.092e+00, -2.087e+00, -2.690e-01, -5.631e-02, 3.992e-01, 1.937e-01, 1.479e-01, -1.853e-01, 8.401e-02, 2.248e-01, 9.989e-02) * s0[y+1][x+0];
	r += M4(7.308e-02, -3.285e-02, -2.684e-02, -2.679e-01, 3.425e+00, -1.244e+00, -8.945e-01, -1.184e+00, -8.290e-01, -2.717e-01, 2.933e-01, 2.045e-01, -8.354e-02, -2.154e-01, -1.822e-01, -3.133e-02) * s0[y+1][x+1];
	r += M4(4.261e-02, -2.443e-01, 1.882e-01, -7.522e-02, -1.629e+00, -6.851e-01, 2.001e+00, -2.619e-01, -1.340e-01, 1.071e-01, -5.451e-01, 1.523e-01, 2.445e-02, -1.016e-01, 5.375e-02, 1.416e-01) * s0[y+1][x+2];
	r += M4(1.590e-02, 7.603e-02, -1.920e-01, -1.453e-01, -3.605e-02, -2.086e+00, -4.448e-01, 6.733e-01, 1.677e-01, -1.257e-01, -1.566e-01, -8.458e-03, -4.480e-02, 3.036e-02, 1.116e-02, 9.579e-05) * s0[y+2][x+0];
	r += M4(1.703e-01, 4.624e-02, 2.323e-01, 8.422e-02, 5.391e-01, -2.299e+00, -5.394e-01, 1.086e+00, 1.259e-02, -2.210e-02, -2.736e-01, 4.630e-02, 6.228e-02, -7.546e-02, -1.238e-01, 6.678e-03) * s0[y+2][x+1];
	r += M4(-2.114e-02, -1.564e-01, -2.571e-01, 2.046e-03, 5.691e-01, -1.591e+00, 7.764e-01, 1.913e+00, -2.973e-01, 1.108e-01, -8.873e-02, 1.366e-01, -9.153e-02, 6.196e-02, -1.537e-02, 1.056e-01) * s0[y+2][x+2];
	r += M4(-4.404e-02, 8.863e-02, 6.712e-02, 2.435e-02, 9.813e-03, 1.188e-01, -1.769e-01, -2.170e-01, -8.130e-02, -1.436e-01, -1.194e-01, 1.200e-01, 3.422e-01, 7.849e-02, 1.144e-01, -3.809e-02) * s1[y+0][x+0];
	r += M4(-1.921e-01, -3.948e-02, 1.047e-01, 1.697e-01, 2.219e-02, -1.180e-01, 2.757e-03, -5.335e-02, 1.658e-01, 2.783e-01, -2.138e-02, 7.166e-03, 3.943e-01, 2.414e-01, -1.149e-01, -1.530e-02) * s1[y+0][x+1];
	r += M4(-9.181e-02, 3.320e-02, -6.579e-02, 8.308e-02, -9.573e-02, -3.626e-02, 1.545e-01, -2.099e-02, 1.137e-01, 3.207e-02, -4.096e-02, -1.125e-01, 2.556e-01, -2.657e-02, 2.369e-01, -1.011e-01) * s1[y+0][x+2];
	r += M4(-7.366e-02, -1.458e-01, 1.822e-01, 8.702e-02, 1.448e-01, -6.619e-02, -5.077e-02, 1.845e-03, 5.477e-02, 1.863e-01, 1.788e-02, 3.814e-02, -8.480e-02, 1.312e-01, 4.398e-01, -3.504e-02) * s1[y+1][x+0];
	r += M4(3.814e-01, 4.304e-02, -1.758e-01, 1.686e-01, 4.604e-02, 5.989e-02, -2.431e-02, 1.917e-01, 7.381e-02, -6.217e-01, 2.628e-02, -1.831e-01, -1.449e-01, -3.222e-02, -3.975e-02, 9.249e-02) * s1[y+1][x+1];
	r += M4(1.069e-01, 6.697e-02, 6.959e-02, -2.090e-01, -1.725e-01, 2.090e-01, -8.407e-02, -2.618e-01, 3.876e-01, -5.047e-02, -1.458e-01, 3.505e-01, -6.678e-02, -3.367e-02, 5.243e-02, 1.262e-01) * s1[y+1][x+2];
	r += M4(-9.917e-02, -9.799e-02, 3.430e-02, -1.002e-01, 1.380e-02, -7.038e-03, 6.050e-02, 4.009e-02, 4.761e-02, -1.279e-01, -1.526e-01, -1.009e-02, 4.933e-02, -1.785e-02, -1.008e-02, -4.132e-02) * s1[y+2][x+0];
	r += M4(1.024e-01, 1.102e-01, -7.564e-02, -2.133e-02, 1.899e-01, 6.163e-02, -1.366e-01, 1.155e-01, -6.164e-02, 3.307e-01, 2.169e-01, -1.211e-01, 5.822e-02, 8.919e-02, -7.172e-02, 7.590e-02) * s1[y+2][x+1];
	r += M4(2.991e-02, -3.370e-02, -7.976e-02, -9.773e-03, 1.142e-01, 1.140e-01, -3.420e-03, 1.324e-01, -1.100e-01, 2.879e-02, -3.900e-02, -1.077e-01, -4.302e-02, 4.870e-02, 1.001e-01, 5.564e-02) * s1[y+2][x+2];
	r += M4(-3.429e-01, 2.629e-01, -5.200e-02, -5.106e-02, -1.332e-01, -3.414e-02, -5.821e-02, 1.166e-01, -1.103e-01, 1.347e-01, 1.987e-01, 7.184e-02, -6.153e-02, 1.907e-01, -9.881e-03, 2.979e-02) * s2[y+0][x+0];
	r += M4(8.036e-02, 1.539e-01, -7.536e-02, -7.095e-02, -6.556e-02, -3.289e-01, 2.320e-01, 1.018e-01, -2.183e-01, -9.219e-02, 6.526e-02, 2.280e-03, 8.182e-02, 3.539e-03, -3.571e-02, 1.351e-01) * s2[y+0][x+1];
	r += M4(-7.231e-03, -1.705e-02, -1.106e-01, 5.215e-02, -3.343e-01, 2.498e-02, 2.146e-02, -3.617e-02, -6.988e-02, 1.198e-01, -7.814e-02, 2.929e-04, -1.741e-01, 1.560e-02, -9.929e-02, -4.287e-02) * s2[y+0][x+2];
	r += M4(3.797e-01, -1.402e-01, -2.562e-01, -9.529e-02, 2.694e-02, -1.274e-02, -6.673e-02, 7.270e-02, 1.135e-01, -1.539e-01, -3.326e-01, 9.734e-02, 3.397e-03, -2.302e-01, -1.612e-01, -2.659e-02) * s2[y+1][x+0];
	r += M4(2.998e-01, -1.221e-01, 2.651e-01, 3.902e-01, 3.138e-01, 8.418e-02, -2.309e-01, -8.133e-02, 1.367e-01, -2.064e-01, -2.839e-01, -4.037e-02, 2.345e-01, 6.619e-02, -3.335e-01, 3.881e-02) * s2[y+1][x+1];
	r += M4(2.588e-01, -2.102e-03, -6.522e-03, 1.275e-01, -5.790e-02, 1.248e-01, -2.667e-02, -1.296e-01, -1.456e-01, -2.757e-02, 2.421e-01, -7.517e-02, 1.378e-01, -2.131e-01, -2.823e-02, -6.074e-02) * s2[y+1][x+2];
	r += M4(-6.473e-02, -4.654e-02, 3.350e-01, 2.476e-02, 1.100e-01, -1.269e-01, 3.875e-02, 6.689e-02, 5.726e-02, -7.296e-02, -2.280e-01, 3.144e-02, -9.579e-02, -2.489e-02, 2.313e-02, -3.241e-02) * s2[y+2][x+0];
	r += M4(5.579e-03, -1.018e-01, 1.775e-01, -2.774e-01, -8.365e-02, -2.808e-01, -9.267e-02, -1.611e-01, -1.227e-03, -1.177e-01, 8.697e-02, -9.404e-02, 1.201e-01, 5.515e-02, -9.725e-02, 2.969e-02) * s2[y+2][x+1];
	r += M4(2.761e-02, -5.850e-02, -3.336e-03, -9.585e-02, -2.627e-01, -2.710e-02, 5.697e-02, -7.482e-02, -2.623e-01, 4.335e-02, -1.979e-02, 7.069e-02, 2.385e-01, -1.441e-03, -2.637e-01, -1.324e-01) * s2[y+2][x+2];
	r += M4(-2.084e-01, -1.496e-01, 3.349e-02, -2.095e-01, -7.761e-02, 1.307e-03, -3.378e-02, 1.705e-02, -5.593e-02, 3.167e-02, 2.163e-01, 5.091e-02, -7.511e-02, -4.169e-03, 8.671e-02, 1.968e-02) * s3[y+0][x+0];
	r += M4(4.329e-02, -2.834e-03, -7.669e-02, -3.285e-02, -7.156e-02, -2.468e-02, -1.722e-02, 9.432e-02, -8.935e-02, -4.004e-02, -1.604e-01, -7.954e-03, 1.546e-02, -2.864e-03, -8.892e-02, -9.108e-03) * s3[y+0][x+1];
	r += M4(8.732e-02, 2.658e-02, -8.353e-02, 2.144e-02, -6.919e-02, 8.224e-02, 2.185e-02, -1.049e-01, -1.298e-01, 3.640e-02, 3.322e-02, 1.525e-02, -1.440e-01, -3.160e-02, -1.320e-02, -5.659e-03) * s3[y+0][x+2];
	r += M4(-1.490e-01, -5.878e-02, 1.005e-01, 4.414e-02, 2.026e-02, -1.335e-01, -1.096e-01, 8.902e-02, 6.372e-02, -3.955e-02, -1.727e-01, 4.144e-02, 2.658e-02, -1.122e-01, -4.911e-02, -4.815e-02) * s3[y+1][x+0];
	r += M4(-4.854e-01, 5.569e-02, -2.225e-02, -2.808e-01, -1.328e-04, 1.524e-01, -2.243e-01, -8.928e-02, 1.796e-01, 3.204e-03, -1.370e-01, -2.712e-02, 2.811e-01, -1.468e-01, 1.290e-01, -6.433e-02) * s3[y+1][x+1];
	r += M4(1.025e-01, 7.986e-02, -1.089e-01, 2.401e-01, -1.324e-01, -3.844e-02, 1.774e-01, -2.756e-01, 1.704e-02, 8.023e-02, -2.341e-02, -1.006e-01, -6.760e-02, 1.099e-01, -1.104e-01, -2.798e-01) * s3[y+1][x+2];
	r += M4(1.292e-02, -4.180e-02, 5.629e-03, -1.819e-02, 9.716e-02, 7.482e-02, 1.237e-01, 4.715e-02, 3.669e-03, 4.253e-03, -7.140e-02, -2.517e-02, -7.958e-03, 8.207e-02, -2.280e-02, 1.215e-02) * s3[y+2][x+0];
	r += M4(-3.512e-02, -2.358e-02, 1.086e-01, 2.186e-01, 1.344e-01, 6.244e-03, -1.377e-01, 1.110e-01, -1.125e-01, 4.486e-02, -1.341e-01, 1.594e-02, 2.046e-01, -4.717e-02, 1.076e-01, 2.320e-01) * s3[y+2][x+1];
	r += M4(-6.183e-02, -6.812e-02, 1.663e-02, 1.685e-01, 3.774e-04, -6.302e-02, -5.154e-02, 4.289e-01, -1.851e-01, 9.277e-02, -5.957e-02, 8.090e-02, 9.058e-02, -4.062e-02, 1.162e-02, 8.416e-01) * s3[y+2][x+2];
	r += V4(-1.285e-02, 2.240e-01, -8.531e-02, 1.116e-02);
	return vec4(r);
}
vec4 f1(int x, int y) {
	V4 r = V4(0.0);
	r += M4(8.691e-02, 9.774e-02, 1.918e-02, -2.121e-01, -9.389e-02, 2.300e-01, 8.937e-01, -5.369e-02, 4.740e-02, 9.470e-02, -1.070e-01, 6.286e-02, 1.524e-01, 4.165e-01, -4.854e-02, -9.848e-02) * s0[y+0][x+0];
	r += M4(6.411e-02, -1.209e-01, -2.438e-01, 4.086e-02, -2.619e-01, -2.671e+00, 6.796e-01, 1.613e+00, 7.450e-02, 2.064e-01, 4.095e-02, 1.275e-01, 1.881e-01, 2.323e-01, 9.329e-04, 2.193e-01) * s0[y+0][x+1];
	r += M4(2.803e-02, -5.829e-02, 6.769e-02, 4.003e-02, -7.351e-01, 3.955e-01, 9.393e-01, -6.400e-01, 9.552e-03, -6.725e-02, 6.004e-02, 1.520e-02, 7.755e-02, 1.343e-01, -1.915e-01, 9.351e-02) * s0[y+0][x+2];
	r += M4(-3.480e-03, -3.760e-02, -3.171e-01, -5.144e-01, -4.093e-01, 4.149e-01, 1.737e+00, -2.894e-01, 6.763e-02, -1.527e-01, -2.383e-02, 5.595e-02, 5.027e-02, -2.950e-02, -2.283e-01, 1.064e-01) * s0[y+1][x+0];
	r += M4(1.531e-01, 2.164e-01, 1.694e-01, 3.886e-02, 2.188e+00, 7.725e-01, 3.891e+00, 3.011e+00, -1.202e-01, 4.887e-02, -8.459e-02, -1.876e-01, -2.414e-02, -6.518e-02, -1.159e-01, -2.270e-01) * s0[y+1][x+1];
	r += M4(4.792e-02, 1.380e-01, 5.723e-02, 7.003e-02, -1.089e+00, -3.745e-01, 1.860e+00, 1.105e+00, -3.953e-01, 4.979e-01, 2.608e-01, 9.399e-02, 2.252e-03, -2.825e-02, -7.922e-02, 2.540e-02) * s0[y+1][x+2];
	r += M4(1.736e-01, -1.104e-01, -3.599e-02, -3.458e-01, -1.909e+00, 1.230e-02, 4.918e-01, -6.591e-01, -9.717e-02, -8.581e-03, 1.928e-02, -6.809e-02, 7.185e-02, -7.188e-02, 7.072e-02, 4.214e-03) * s0[y+2][x+0];
	r += M4(5.568e-02, -9.966e-02, 5.161e-02, -1.303e-01, -1.112e+00, -3.958e-02, 1.563e+00, 1.526e+00, -2.633e-01, 1.003e-02, 1.564e-01, 2.692e-01, -4.956e-02, 1.061e-01, -3.750e-04, -2.545e-03) * s0[y+2][x+1];
	r += M4(1.304e-02, -2.358e-02, 3.568e-02, 1.756e-02, -4.780e-01, -1.651e+00, 2.096e-01, -1.790e-01, 6.505e-02, -1.066e-01, 2.190e-01, -1.121e-01, 7.772e-02, -2.149e-02, -7.483e-03, -6.265e-02) * s0[y+2][x+2];
	r += M4(5.331e-02, -4.361e-01, 7.284e-02, 6.916e-02, 7.139e-02, -1.340e-01, 1.724e-02, -5.775e-02, -8.478e-02, 1.374e-02, -5.279e-02, -2.443e-02, 2.768e-02, 2.672e-01, -8.932e-02, -9.370e-02) * s1[y+0][x+0];
	r += M4(1.101e-01, -7.713e-02, -1.919e-01, 1.587e-01, -1.271e-01, 1.471e-02, -3.062e-02, 7.464e-02, -6.115e-02, -9.891e-02, -1.422e-02, 3.335e-02, 5.430e-02, 1.717e-01, 1.521e-01, -2.178e-03) * s1[y+0][x+1];
	r += M4(2.110e-02, 2.421e-02, 5.336e-02, 2.996e-03, 8.867e-02, 1.507e-01, 5.290e-02, 1.448e-01, -2.361e-01, 1.551e-01, 5.458e-02, -7.217e-02, 1.738e-01, 1.247e-02, -2.503e-02, 4.992e-02) * s1[y+0][x+2];
	r += M4(-1.253e-01, -9.182e-02, -1.206e-01, -2.038e-02, 9.442e-02, -9.519e-02, 6.275e-02, -4.034e-02, 9.721e-02, -6.813e-02, 2.410e-02, 9.350e-02, 8.812e-02, -1.603e-01, -2.212e-01, -8.871e-02) * s1[y+1][x+0];
	r += M4(1.118e-01, 1.958e-01, 5.653e-02, 1.939e-01, 1.165e-01, -1.024e-02, 4.321e-02, 1.128e-01, -1.704e-01, -4.822e-01, -1.662e-01, -4.006e-01, -2.509e-02, -1.268e-02, -2.125e-02, -2.709e-01) * s1[y+1][x+1];
	r += M4(-3.985e-02, 1.361e-01, -8.910e-02, 9.579e-02, -1.309e-03, -8.650e-03, -4.822e-02, -5.549e-02, 2.503e-01, -4.118e-02, 4.886e-02, 2.237e-02, 7.960e-02, -2.211e-01, -1.372e-01, -8.765e-02) * s1[y+1][x+2];
	r += M4(-1.656e-02, 2.463e-02, -6.413e-02, 1.350e-01, -1.330e-02, -3.599e-02, 2.681e-03, -6.127e-02, -7.834e-02, 4.733e-02, 4.334e-02, -9.958e-02, 7.551e-02, -9.301e-02, 4.367e-02, -2.564e-02) * s1[y+2][x+0];
	r += M4(-1.832e-02, 1.695e-02, -3.273e-02, 7.143e-02, 8.087e-02, 1.239e-01, -2.921e-02, -9.793e-02, 1.679e-02, 1.051e-01, 3.618e-02, 3.710e-01, -1.786e-02, 5.114e-02, -1.243e-01, -4.274e-03) * s1[y+2][x+1];
	r += M4(2.492e-02, 2.101e-02, 1.627e-02, -1.190e-01, 7.825e-02, 9.901e-02, 2.010e-01, -2.959e-02, 1.407e-01, 1.135e-01, 2.050e-01, 1.781e-01, 4.056e-02, 5.679e-02, 4.130e-02, -3.886e-02) * s1[y+2][x+2];
	r += M4(5.172e-02, -3.702e-01, -1.351e-01, 2.528e-01, -9.988e-02, -2.379e-01, 9.782e-02, 3.690e-02, 7.813e-02, -1.634e-01, -6.373e-02, 1.301e-01, 1.586e-02, -1.010e-01, 5.104e-02, 2.359e-02) * s2[y+0][x+0];
	r += M4(-1.601e-01, -2.378e-01, 1.168e-01, -2.011e-01, -1.673e-01, -6.473e-02, 3.924e-03, -5.167e-02, -1.342e-01, -3.431e-01, -4.883e-02, -3.346e-02, -8.546e-03, -1.192e-01, -7.763e-02, -8.340e-05) * s2[y+0][x+1];
	r += M4(-6.657e-03, -1.504e-01, 1.475e-02, 1.458e-02, 4.342e-02, 1.434e-01, 1.046e-01, 7.076e-03, -1.525e-01, -1.374e-01, 3.300e-02, -8.032e-02, -1.836e-01, -5.465e-02, 2.654e-02, -3.175e-03) * s2[y+0][x+2];
	r += M4(-1.151e-01, -1.220e-01, -9.537e-03, 6.766e-02, -6.698e-03, -5.520e-03, 9.344e-02, 8.309e-03, 5.390e-02, 9.818e-02, 8.193e-02, 7.391e-03, -6.764e-02, 9.462e-02, 9.741e-02, 7.723e-02) * s2[y+1][x+0];
	r += M4(-2.101e-01, -5.218e-02, -8.592e-02, -3.963e-01, -1.470e-01, 7.026e-01, 2.197e-01, 1.578e-02, -2.246e-01, 4.416e-02, 4.901e-02, 2.116e-01, -2.211e-01, 7.949e-02, 3.079e-02, 2.041e-01) * s2[y+1][x+1];
	r += M4(-4.548e-02, 1.587e-01, -5.736e-02, -7.637e-02, -1.273e-01, -1.608e-01, -7.309e-02, 7.803e-02, 4.494e-02, 2.458e-01, 1.868e-01, -8.972e-02, -5.615e-01, 3.908e-01, 2.410e-01, 1.614e-01) * s2[y+1][x+2];
	r += M4(-1.101e-01, -1.293e-01, -1.019e-02, -1.671e-01, -1.857e-01, -1.083e-01, -6.979e-02, 4.961e-02, 1.707e-01, 5.475e-02, 1.011e-01, -3.639e-01, 1.539e-03, -2.100e-02, 3.372e-03, 1.281e-02) * s2[y+2][x+0];
	r += M4(-1.008e-01, 1.003e-01, 5.849e-02, -3.398e-02, 1.717e-01, 1.591e-01, 2.669e-02, -2.893e-01, -8.282e-02, 1.035e-01, -7.013e-03, 1.650e-01, -8.006e-02, -1.715e-01, -1.407e-01, -1.265e-01) * s2[y+2][x+1];
	r += M4(2.902e-02, 7.910e-02, -6.501e-05, 5.139e-02, 1.693e-01, 9.155e-02, 1.195e-02, -7.640e-02, 2.656e-01, -6.843e-02, -9.876e-02, 8.231e-02, -3.322e-01, 1.367e-01, 2.899e-02, 1.582e-02) * s2[y+2][x+2];
	r += M4(6.120e-02, 4.209e-01, -2.281e-02, 1.763e-01, -5.362e-02, -2.004e-01, 3.264e-02, 2.206e-02, -1.599e-03, -1.380e-01, 3.382e-02, 1.052e-01, -1.300e-02, -1.363e-01, 3.894e-02, 5.852e-02) * s3[y+0][x+0];
	r += M4(-1.163e-01, 5.849e-02, 2.500e-02, -1.057e-01, -1.046e-01, -1.929e-01, -1.798e-02, -6.835e-02, -9.188e-02, -2.308e-01, 2.409e-02, -5.715e-02, -1.238e-02, 6.605e-02, -1.321e-01, -8.958e-02) * s3[y+0][x+1];
	r += M4(-7.427e-03, -2.134e-01, 3.322e-02, 1.777e-02, 9.375e-02, 1.756e-01, 5.330e-02, 2.606e-02, -1.982e-01, -5.657e-02, 3.044e-02, -9.223e-02, -9.155e-02, -1.047e-01, 7.310e-04, -1.039e-02) * s3[y+0][x+2];
	r += M4(1.732e-01, 3.556e-01, 2.732e-02, 7.643e-02, 7.563e-02, 6.930e-02, 1.730e-02, 1.464e-01, 2.933e-02, 7.912e-02, 2.991e-02, 1.544e-01, 9.453e-02, -1.406e-02, 8.588e-02, 1.206e-02) * s3[y+1][x+0];
	r += M4(-2.024e-01, -1.275e-01, 2.970e-02, -1.661e-01, 9.544e-02, -1.840e-02, 5.612e-02, 3.307e-01, 4.193e-02, 5.321e-02, -1.863e-02, 6.384e-02, 6.706e-02, 1.440e-01, -3.424e-02, -5.262e-02) * s3[y+1][x+1];
	r += M4(-5.373e-02, 1.650e-01, 1.953e-03, 7.187e-02, -1.178e-01, 3.476e-01, -8.677e-02, 1.662e-02, 5.259e-02, 9.278e-02, 1.323e-01, -2.380e-02, 1.649e-02, -1.343e-01, 2.271e-01, 1.012e-04) * s3[y+1][x+2];
	r += M4(-3.240e-02, -9.169e-02, 7.599e-02, 2.161e-01, 1.270e-03, -3.263e-02, -2.622e-02, -1.501e-02, 1.198e-01, -3.390e-02, 1.708e-01, -1.682e-01, -5.139e-02, -8.138e-02, 3.349e-03, 3.521e-02) * s3[y+2][x+0];
	r += M4(-1.349e-02, -1.190e-01, -3.468e-02, -5.192e-03, -1.229e-01, -6.485e-02, -6.863e-03, 7.425e-02, 1.622e-01, 2.309e-02, 8.416e-02, -2.850e-02, 2.820e-02, 9.106e-02, -6.296e-02, -2.127e-01) * s3[y+2][x+1];
	r += M4(-1.720e-02, -1.438e-02, 7.532e-02, 8.691e-05, -1.117e-01, 8.453e-02, 1.107e-01, -7.139e-02, 2.001e-01, 2.896e-02, 6.184e-02, 9.302e-02, 6.417e-02, -3.798e-03, 2.957e-02, -3.021e-01) * s3[y+2][x+2];
	r += V4(2.666e-01, -1.486e-02, 1.666e-02, -1.251e-03);
	return vec4(r);
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = in_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
			s2[ay][ax] = l1(x - 1, y - 1);
			s1[ay][ax] = -max(-s0[ay][ax], V4(0.0));
			s0[ay][ax] = max(s0[ay][ax], V4(0.0));
			s3[ay][ax] = -max(-s2[ay][ax], V4(0.0));
			s2[ay][ax] = max(s2[ay][ax], V4(0.0));
		}
	}
	barrier();
	vec4 r0 = f0(xy.x, xy.y);
	vec4 r1 = f1(xy.x, xy.y);
	imageStore(out_image, opos + ivec2(0, 0), r0);
	imageStore(out_image, opos + ivec2(1, 0), r1);
}

//!DESC CuNNy-8x8C-RCAS-conv2
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv1
//!BIND LUMA
//!SAVE conv2
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(texelFetch(conv1_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv1_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 s0[10][10];
shared V4 s1[10][10];
shared V4 s2[10][10];
shared V4 s3[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-1.580e-01, 2.028e-01, 2.307e-01, -8.834e-02, -4.798e-02, -5.549e-02, 4.362e-02, 3.174e-02, 5.260e-03, -2.594e-02, -1.035e-01, 1.062e-02, 8.527e-02, 3.192e-02, -3.928e-01, 1.813e-01) * s0[y+0][x+0];
	r += M4(-4.592e-02, -5.059e-02, 1.221e-01, 3.212e-02, -8.899e-02, 8.220e-03, -3.876e-02, -8.094e-02, -2.087e-01, -5.894e-03, 6.070e-02, -4.250e-02, 1.261e-01, 2.564e-01, 1.064e-01, 3.360e-02) * s0[y+0][x+1];
	r += M4(-1.069e-01, 2.619e-02, 8.492e-02, -3.391e-02, 1.774e-02, 4.955e-02, 3.931e-02, 2.415e-03, -1.732e-02, -6.291e-02, -3.682e-02, -1.248e-01, 8.554e-03, 2.949e-02, -2.702e-03, 4.403e-03) * s0[y+0][x+2];
	r += M4(5.998e-02, 3.956e-01, 5.957e-02, -1.557e-01, 1.061e-01, 1.205e-01, -2.397e-01, 9.687e-02, -7.531e-02, -7.655e-02, -3.820e-02, 2.028e-02, -2.685e-01, -2.082e-01, -2.986e-02, -9.222e-02) * s0[y+1][x+0];
	r += M4(-4.098e-02, -9.252e-02, 1.162e-01, 4.388e-01, 7.799e-02, 1.545e-01, 2.963e-02, -2.839e-02, -3.246e-01, 1.088e-01, 4.219e-02, -1.336e-01, 5.386e-01, -4.208e-02, 2.411e-02, -2.266e-01) * s0[y+1][x+1];
	r += M4(-4.096e-02, 8.216e-02, -4.626e-02, 9.366e-02, -2.751e-01, -1.323e-01, 5.198e-02, -8.741e-02, 5.014e-02, -5.043e-02, 1.133e-02, -2.510e-01, 1.470e-01, -3.909e-02, -8.010e-02, -1.943e-02) * s0[y+1][x+2];
	r += M4(8.600e-03, 7.203e-02, 2.998e-01, 3.528e-02, 7.842e-02, 1.795e-02, -1.020e-01, 7.919e-02, 6.760e-02, -1.116e-01, -9.286e-02, -3.227e-03, 1.830e-02, -8.686e-02, -9.508e-02, -9.294e-02) * s0[y+2][x+0];
	r += M4(-9.338e-02, 7.520e-02, 9.651e-02, -7.140e-02, -2.706e-02, -1.166e-01, 1.287e-01, -4.088e-02, 8.767e-02, 2.069e-02, -9.913e-02, 7.482e-02, -3.727e-02, 8.172e-02, 1.794e-02, -6.838e-02) * s0[y+2][x+1];
	r += M4(-9.015e-02, 7.207e-02, 5.485e-02, -6.121e-02, -2.020e-01, -4.974e-02, 3.919e-02, -6.083e-02, 1.664e-01, 2.170e-02, 5.520e-02, -4.877e-02, 6.811e-02, -3.003e-02, 5.335e-02, 5.422e-03) * s0[y+2][x+2];
	r += M4(-5.381e-02, 2.807e-02, 1.475e-01, -6.014e-02, -8.874e-02, -1.264e-01, -1.513e-01, 5.270e-02, -1.725e-01, -7.543e-02, -1.812e-02, 7.700e-02, 1.729e-01, 3.483e-01, 9.378e-02, 1.609e-01) * s1[y+0][x+0];
	r += M4(3.198e-03, -8.227e-02, 2.588e-02, 9.036e-03, -1.202e-01, -7.315e-02, 6.878e-02, 8.252e-02, -1.916e-02, 1.776e-01, 1.422e-02, -1.937e-01, 3.757e-02, 9.229e-02, -1.970e-01, 1.102e-01) * s1[y+0][x+1];
	r += M4(-1.308e-01, 2.727e-02, 2.352e-02, -3.171e-02, -2.893e-02, 3.581e-02, -7.466e-02, 6.825e-02, -2.427e-02, -1.265e-01, 1.742e-02, -3.331e-02, 1.062e-02, -1.145e-02, -2.346e-03, -2.108e-02) * s1[y+0][x+2];
	r += M4(7.152e-02, -2.685e-01, 1.343e-01, -5.992e-02, -7.765e-02, 1.596e-01, -2.815e-01, 2.521e-01, -2.224e-01, 2.920e-02, 7.432e-02, 1.671e-01, -3.289e-02, -6.261e-02, 2.167e-01, 1.540e-01) * s1[y+1][x+0];
	r += M4(2.126e-01, -2.262e-01, -2.117e-01, 2.622e-01, 1.452e-02, 2.056e-01, -2.547e-01, 4.426e-02, -1.016e-01, 7.844e-02, -5.571e-02, -1.177e-01, 2.371e-01, 3.821e-02, -4.885e-02, 1.112e-01) * s1[y+1][x+1];
	r += M4(1.449e-01, -1.235e-01, -8.955e-02, 1.157e-01, -2.644e-01, -1.781e-01, -9.541e-02, -2.318e-01, 2.511e-01, -5.031e-03, 4.669e-02, -2.407e-01, 1.121e-01, 1.455e-02, -1.838e-02, -2.425e-02) * s1[y+1][x+2];
	r += M4(7.504e-02, -4.563e-02, 1.077e-01, -4.553e-02, 1.890e-02, 5.206e-02, -2.017e-01, 1.622e-01, 4.283e-02, -1.043e-01, -6.706e-02, 1.114e-02, 5.474e-02, -1.903e-01, 5.192e-02, -9.266e-02) * s1[y+2][x+0];
	r += M4(4.235e-02, -4.797e-02, -1.227e-02, 1.932e-02, -4.078e-02, -1.220e-01, 2.636e-01, 2.905e-01, 3.262e-02, -8.452e-02, -1.626e-01, 2.379e-02, -1.977e-01, 9.454e-02, 1.631e-02, -2.504e-02) * s1[y+2][x+1];
	r += M4(2.349e-01, 6.616e-02, -3.965e-02, -3.551e-02, -3.213e-01, -6.103e-02, -5.636e-03, -1.526e-01, -9.216e-02, 2.962e-02, 5.179e-02, 1.419e-02, 1.365e-01, -2.749e-02, -2.918e-02, 4.791e-02) * s1[y+2][x+2];
	r += M4(7.264e-04, -2.075e-01, 4.823e-02, 6.838e-02, 7.869e-02, -1.332e-01, -1.133e-01, 2.896e-02, -6.236e-02, 6.548e-02, -1.184e-01, -2.428e-01, 1.372e-01, -9.726e-02, -1.751e-01, -8.953e-02) * s2[y+0][x+0];
	r += M4(-1.625e-01, 4.638e-02, -6.732e-02, -1.166e-01, -7.706e-03, -1.036e-03, -8.764e-02, 4.843e-02, -1.111e-01, 2.258e-01, 5.693e-01, 6.158e-02, 5.544e-02, 1.659e-01, 9.575e-02, -1.207e-01) * s2[y+0][x+1];
	r += M4(6.177e-02, -9.193e-02, -4.220e-02, -2.337e-02, 9.741e-02, -9.840e-02, -6.830e-02, 3.441e-02, -9.673e-02, 8.618e-02, 3.485e-01, -5.898e-02, 7.516e-02, 3.947e-02, 1.824e-02, 7.598e-02) * s2[y+0][x+2];
	r += M4(-3.641e-02, -3.054e-01, 3.694e-01, -2.105e-01, 6.115e-02, 7.069e-02, -6.936e-02, -1.271e-03, -2.825e-01, -2.662e-01, 6.490e-02, -3.682e-01, 2.669e-02, 1.352e-01, -5.777e-02, -3.020e-01) * s2[y+1][x+0];
	r += M4(6.345e-04, 3.571e-01, -7.581e-02, 1.072e-01, 1.000e-02, 3.269e-02, -1.973e-01, 9.188e-02, -3.271e-01, 5.877e-01, -1.285e-01, 9.483e-01, -1.805e-01, 4.774e-01, 2.449e-01, 4.867e-01) * s2[y+1][x+1];
	r += M4(1.181e-01, 1.119e-02, -2.631e-02, -1.416e-01, 9.802e-02, 6.600e-02, -1.726e-01, -9.857e-02, -2.705e-01, -3.440e-01, -4.877e-02, 3.000e-01, 1.149e-01, 1.236e-01, 1.031e-01, -8.043e-02) * s2[y+1][x+2];
	r += M4(-1.645e-01, 2.696e-02, 2.663e-02, -4.081e-02, -1.253e-02, -4.155e-02, -2.803e-01, -4.101e-04, -5.599e-02, -4.726e-02, 2.540e-02, 1.421e-01, -1.259e-01, -8.823e-02, 1.334e-01, -1.536e-01) * s2[y+2][x+0];
	r += M4(9.677e-02, 4.941e-02, -1.595e-01, 8.953e-02, 3.356e-02, 8.821e-03, -1.589e-01, -5.615e-02, -1.211e-01, 9.617e-02, 1.266e-01, -8.104e-02, -1.532e-02, -4.326e-03, -1.028e-01, 1.013e-01) * s2[y+2][x+1];
	r += M4(1.791e-01, -2.413e-02, -2.343e-02, -1.851e-03, 9.435e-03, -5.170e-02, 8.575e-02, -1.214e-01, -9.495e-02, 1.048e-01, -4.070e-02, 3.295e-02, 2.844e-02, -9.590e-02, -5.075e-02, 8.514e-02) * s2[y+2][x+2];
	r += M4(-4.535e-02, -1.322e-01, 8.936e-03, 1.208e-01, -3.339e-02, 5.773e-02, -6.167e-02, 1.887e-02, 7.276e-02, -1.297e-01, -2.169e-02, 6.150e-02, 1.474e-02, -1.690e-01, 4.705e-02, 2.938e-02) * s3[y+0][x+0];
	r += M4(1.042e-01, 1.500e-01, -2.524e-01, 1.054e-01, -9.483e-02, 1.192e-01, -1.208e-01, -6.134e-02, 1.393e-01, 1.692e-01, 3.477e-02, 1.141e-01, 2.305e-01, -5.183e-02, 1.084e-01, -4.838e-02) * s3[y+0][x+1];
	r += M4(1.434e-01, -8.184e-02, -7.789e-02, 1.733e-01, 8.424e-02, 8.195e-02, 1.359e-01, 3.766e-02, -1.451e-01, -8.316e-02, 1.475e-02, 5.416e-02, -1.185e-01, -9.632e-02, 3.454e-02, -6.047e-03) * s3[y+0][x+2];
	r += M4(-4.277e-02, -5.133e-01, 2.704e-02, -5.516e-03, -4.110e-02, 3.553e-01, 8.566e-02, -2.205e-02, -4.125e-02, -1.083e-01, 6.628e-02, 4.856e-02, -6.266e-02, 3.128e-02, -1.844e-02, -6.465e-02) * s3[y+1][x+0];
	r += M4(4.020e-01, 2.227e-01, -3.837e-01, 3.935e-01, -9.544e-02, 2.965e-01, -2.386e-01, -4.921e-03, -1.610e-02, 1.100e-01, -1.283e-01, 1.376e-02, 2.209e-01, 1.714e-01, -1.365e-01, 3.550e-02) * s3[y+1][x+1];
	r += M4(-2.907e-01, -3.112e-02, -8.134e-02, 3.064e-01, -2.138e-01, 5.809e-02, 1.241e-01, 5.926e-03, -1.322e-01, -5.456e-02, -2.300e-01, 1.412e-01, -1.196e-01, -2.813e-02, -5.736e-02, -2.547e-03) * s3[y+1][x+2];
	r += M4(-1.698e-01, -4.400e-02, 5.705e-02, -1.038e-01, 1.189e-01, 3.330e-01, 8.726e-02, 9.736e-03, 6.545e-02, 1.171e-01, -1.433e-01, 3.808e-02, -4.549e-02, -6.886e-02, -4.387e-03, -4.703e-02) * s3[y+2][x+0];
	r += M4(2.103e-01, 4.921e-02, -2.377e-01, 1.760e-01, -4.715e-02, 1.696e-01, -7.678e-03, 1.102e-01, 9.356e-03, 1.293e-02, 1.052e-01, 1.285e-01, -8.554e-02, -5.006e-02, -2.319e-01, 4.494e-02) * s3[y+2][x+1];
	r += M4(-1.617e-02, 6.743e-02, 4.103e-02, 7.092e-02, 1.496e-01, 2.232e-01, 2.032e-01, 5.263e-02, -9.121e-02, 2.131e-02, -1.887e-02, -3.103e-02, -1.233e-01, 1.470e-02, -2.325e-02, -7.711e-02) * s3[y+2][x+2];
	r += V4(4.662e-02, 7.290e-02, -8.175e-03, 1.023e-01);
	return vec4(r);
}
vec4 f1(int x, int y) {
	V4 r = V4(0.0);
	r += M4(4.472e-03, 6.825e-02, 1.882e-02, 1.555e-01, -4.419e-02, -5.044e-02, -5.667e-02, -1.022e-01, 2.023e-02, -1.124e-01, 8.327e-02, 6.382e-02, 5.416e-02, -4.269e-02, -1.550e-01, 4.884e-01) * s0[y+0][x+0];
	r += M4(4.167e-02, 7.876e-02, 4.977e-02, -1.082e-01, -8.063e-03, 8.137e-02, -6.850e-02, -9.814e-02, 3.082e-02, 4.442e-02, 1.031e-01, 2.771e-01, 3.017e-02, 7.903e-02, -5.002e-02, 2.652e-01) * s0[y+0][x+1];
	r += M4(-1.362e-01, 6.954e-02, -1.609e-02, 6.665e-02, -6.936e-02, 5.229e-02, 1.132e-02, 1.904e-01, -2.540e-01, 4.072e-02, -7.853e-03, 1.880e-01, 1.606e-01, 3.011e-02, 7.995e-02, 3.940e-02) * s0[y+0][x+2];
	r += M4(-1.104e-01, 2.029e-01, -1.074e-01, -1.905e-01, 2.464e-02, 3.290e-02, 5.405e-02, 6.341e-02, 6.125e-02, -4.144e-02, 6.563e-03, -1.452e-02, 7.741e-02, 1.342e-01, 5.304e-02, -1.375e-01) * s0[y+1][x+0];
	r += M4(-4.423e-01, 4.566e-01, 3.370e-01, 2.032e-01, 1.030e-01, -2.872e-01, 1.835e-01, 1.371e-01, 7.325e-02, -1.997e-01, 2.928e-01, -1.746e-01, -3.033e-01, -1.126e-01, -9.944e-02, -1.331e-01) * s0[y+1][x+1];
	r += M4(-1.393e-01, 2.861e-02, -5.342e-03, -9.153e-02, 8.947e-02, -1.279e-01, 1.231e-01, -3.161e-01, -2.171e-01, 7.518e-03, -1.020e-01, -6.430e-02, 1.765e-01, -2.732e-02, 2.464e-02, 2.772e-02) * s0[y+1][x+2];
	r += M4(-1.372e-01, 2.321e-02, 9.813e-02, 6.561e-02, -6.786e-02, 7.761e-02, 3.370e-03, 1.766e-02, -9.062e-02, -1.639e-01, 9.400e-02, -1.452e-02, 1.524e-02, 1.092e-01, 1.419e-01, 1.594e-02) * s0[y+2][x+0];
	r += M4(-1.135e-01, 4.486e-03, -1.930e-02, -1.015e-01, -8.723e-02, 2.176e-01, -5.585e-02, -5.321e-02, 8.371e-02, -4.590e-02, 1.238e-01, -2.249e-02, 3.817e-02, -1.424e-02, 1.180e-01, 7.593e-02) * s0[y+2][x+1];
	r += M4(4.102e-03, 1.485e-01, -8.130e-02, -1.141e-01, -1.895e-01, -3.660e-02, -7.347e-02, -2.910e-02, 1.129e-01, -7.653e-02, -1.340e-02, -6.521e-02, -1.092e-01, 5.997e-02, -2.079e-02, -2.232e-02) * s0[y+2][x+2];
	r += M4(-3.013e-02, -4.114e-02, 8.763e-02, 9.562e-02, -2.176e-02, -3.367e-02, -1.599e-01, -3.340e-02, 7.035e-03, -7.655e-02, -5.662e-02, 1.373e-01, 7.925e-02, -2.476e-01, -5.257e-02, -1.667e-02) * s1[y+0][x+0];
	r += M4(1.043e-01, -1.329e-01, 2.517e-03, -1.024e-01, 1.225e-01, 1.035e-02, -1.506e-01, -1.498e-01, 9.695e-02, -2.658e-02, 1.597e-01, 7.847e-02, 1.899e-01, -9.516e-03, -8.914e-02, 3.059e-02) * s1[y+0][x+1];
	r += M4(-2.143e-02, 8.220e-02, 1.272e-02, 1.946e-02, -5.404e-02, -3.842e-02, -5.223e-02, 1.466e-01, -2.292e-01, 1.239e-02, 5.646e-02, 1.460e-01, -7.446e-02, 3.531e-02, 7.160e-03, 6.662e-02) * s1[y+0][x+2];
	r += M4(1.409e-01, 1.095e-01, -1.084e-01, -9.815e-02, 5.383e-04, 1.732e-01, -1.478e-01, 1.674e-01, 3.200e-02, -8.597e-02, 1.463e-01, -7.944e-02, -7.074e-02, 5.521e-02, -1.164e-01, -1.280e-01) * s1[y+1][x+0];
	r += M4(-3.992e-02, -1.932e-01, 2.978e-01, 6.901e-01, 5.993e-02, 1.090e-02, -1.340e-01, 1.666e-01, -1.458e-02, -1.873e-02, -7.194e-02, 4.484e-02, -3.369e-01, -8.422e-02, -3.210e-02, -6.408e-02) * s1[y+1][x+1];
	r += M4(-1.983e-01, -8.400e-02, -5.641e-02, -4.288e-02, -6.007e-02, 1.192e-01, -1.347e-02, -1.174e-01, -8.160e-02, 2.997e-02, -1.278e-01, -4.438e-02, 6.611e-02, 3.581e-03, -9.382e-04, 1.047e-01) * s1[y+1][x+2];
	r += M4(4.713e-03, -1.390e-01, 2.479e-01, 4.844e-02, 5.426e-03, 1.655e-01, 8.067e-04, -8.383e-04, -4.322e-02, -2.265e-01, -1.914e-03, 1.007e-02, 9.938e-03, -7.937e-02, -2.664e-02, -9.254e-03) * s1[y+2][x+0];
	r += M4(1.348e-01, -1.784e-01, 1.460e-01, -1.212e-01, 2.309e-02, 2.791e-01, -2.364e-01, -1.774e-01, 8.817e-02, -3.187e-02, 1.548e-01, -4.556e-02, 5.532e-02, 3.595e-02, 4.242e-02, 4.958e-03) * s1[y+2][x+1];
	r += M4(9.081e-02, 2.891e-02, -2.134e-02, -2.828e-02, -1.093e-01, -1.235e-01, -2.270e-01, -3.282e-02, 3.256e-02, -5.413e-02, 5.194e-02, -8.831e-02, -1.420e-01, 3.031e-02, -6.457e-03, -6.613e-03) * s1[y+2][x+2];
	r += M4(-1.952e-02, -6.609e-02, 2.801e-01, 2.413e-02, 1.752e-02, -4.743e-02, -7.345e-02, -3.651e-02, -1.296e-02, 3.512e-01, 3.498e-01, 8.822e-02, -5.397e-02, -1.679e-01, 6.904e-02, -4.705e-02) * s2[y+0][x+0];
	r += M4(2.027e-01, -6.935e-02, -7.820e-02, -1.530e-02, 8.087e-02, -6.690e-02, 2.816e-02, -1.037e-01, -1.204e-01, 3.268e-01, 6.887e-01, -2.471e-01, -4.080e-01, -3.350e-01, 1.551e-01, -2.959e-01) * s2[y+0][x+1];
	r += M4(-5.055e-03, -4.535e-02, -1.770e-02, 2.341e-02, 2.717e-02, 5.514e-02, -3.675e-03, 1.513e-01, 4.025e-02, -4.959e-02, 7.173e-02, -9.412e-02, 2.720e-02, 2.714e-02, 3.518e-04, -4.589e-02) * s2[y+0][x+2];
	r += M4(6.245e-03, -6.532e-02, -2.347e-01, -5.790e-02, 5.211e-02, 1.072e-01, -2.516e-02, 7.593e-02, -8.743e-02, -5.708e-01, 9.873e-01, -5.232e-02, -1.943e-01, -7.651e-02, -7.164e-02, -6.364e-02) * s2[y+1][x+0];
	r += M4(-1.741e-01, -1.569e-01, 2.087e-01, 3.057e-01, 4.879e-02, -4.366e-01, 6.379e-02, 2.693e-01, 3.035e-01, 4.078e-01, 1.067e+00, 2.475e-01, -5.372e-01, -1.727e-01, 1.274e-01, -9.801e-02) * s2[y+1][x+1];
	r += M4(2.823e-02, 3.844e-02, 1.399e-02, 3.737e-02, 4.269e-01, 6.593e-02, 7.736e-03, 1.921e-01, 3.149e-01, -1.053e-01, 1.572e-01, -2.526e-01, 2.624e-01, -9.993e-02, 5.400e-02, 7.638e-02) * s2[y+1][x+2];
	r += M4(8.239e-02, -1.587e-01, 2.364e-02, -5.334e-02, 8.960e-02, -2.571e-01, 6.944e-02, 3.618e-02, 1.633e-01, -2.191e-01, 2.044e-01, -7.615e-02, -2.803e-02, 5.583e-02, -9.087e-02, -5.294e-02) * s2[y+2][x+0];
	r += M4(5.163e-02, 8.073e-03, -5.035e-02, 6.957e-02, -1.937e-01, -2.705e-01, 4.353e-03, -8.194e-03, -2.447e-01, -9.758e-02, 2.457e-01, -5.858e-02, -8.024e-02, 5.757e-02, 1.504e-02, -1.728e-02) * s2[y+2][x+1];
	r += M4(5.149e-03, 2.027e-02, 6.896e-02, -5.236e-02, -3.393e-01, 8.128e-03, -3.469e-02, 3.422e-02, 2.251e-01, -1.529e-01, 4.045e-02, 1.161e-03, -1.143e-01, -4.656e-02, 1.041e-01, -8.875e-02) * s2[y+2][x+2];
	r += M4(-1.693e-01, 3.293e-02, -8.930e-02, 2.026e-02, -3.023e-02, 3.009e-02, -4.396e-02, 1.353e-02, -7.001e-03, 7.505e-02, -1.442e-01, -1.127e-01, -4.710e-02, 3.686e-02, -6.491e-02, -8.810e-02) * s3[y+0][x+0];
	r += M4(3.414e-01, -1.437e-02, 4.052e-03, -1.624e-01, -7.323e-03, 1.512e-02, -1.471e-02, 1.143e-01, 1.118e-02, 5.916e-02, 2.202e-01, -1.832e-01, -8.436e-03, -1.410e-06, 1.518e-01, -5.064e-01) * s3[y+0][x+1];
	r += M4(6.310e-02, 1.438e-02, 1.238e-01, 1.432e-01, -1.393e-01, 5.871e-02, -5.286e-02, 6.125e-02, -1.086e-01, 7.837e-02, -3.255e-03, -1.183e-01, 1.019e-01, -3.426e-02, -4.912e-02, -1.300e-01) * s3[y+0][x+2];
	r += M4(1.784e-02, 2.247e-01, -1.259e-01, -1.517e-02, -9.802e-02, 1.432e-01, -2.164e-02, -2.677e-02, -3.844e-02, -9.351e-02, 1.438e-01, 1.219e-01, -2.529e-02, 2.593e-02, 8.051e-02, 9.350e-02) * s3[y+1][x+0];
	r += M4(-6.458e-02, 1.582e-01, -3.505e-02, 3.038e-01, -1.531e-02, 2.084e-02, 1.894e-01, 5.284e-01, -1.342e-01, -9.301e-04, 1.095e-01, 8.846e-02, 1.724e-02, -5.731e-03, -2.850e-02, 2.042e-01) * s3[y+1][x+1];
	r += M4(2.499e-01, 2.915e-01, 2.660e-01, 2.766e-02, -1.484e-01, -1.839e-02, 1.545e-01, 2.310e-01, 7.253e-02, -1.304e-02, 3.074e-02, -3.395e-02, -8.429e-02, -1.129e-02, -1.048e-01, 8.909e-04) * s3[y+1][x+2];
	r += M4(-1.155e-01, -1.885e-01, -2.106e-01, -9.483e-02, -3.106e-02, 2.745e-01, -4.830e-04, 5.035e-02, 1.298e-01, -3.210e-02, -7.778e-02, 1.323e-01, -3.675e-02, 3.639e-02, -6.985e-02, -3.105e-02) * s3[y+2][x+0];
	r += M4(2.232e-01, -1.767e-02, 4.443e-02, 1.704e-02, -7.578e-03, 4.641e-01, -3.591e-01, -8.366e-02, -1.510e-01, 5.139e-02, 2.583e-01, 8.130e-02, -7.252e-02, 2.498e-01, 3.407e-02, 9.788e-02) * s3[y+2][x+1];
	r += M4(-7.761e-02, -1.131e-01, 9.664e-02, -3.800e-02, -4.115e-02, 1.137e-01, 4.422e-02, -3.764e-02, 7.317e-02, 4.657e-02, 2.887e-02, 5.202e-02, -9.865e-02, 1.595e-02, -2.264e-02, -8.975e-04) * s3[y+2][x+2];
	r += V4(8.070e-03, 1.852e-01, -8.363e-02, -2.690e-02);
	return vec4(r);
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv1_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
			s2[ay][ax] = l1(x - 1, y - 1);
			s1[ay][ax] = -max(-s0[ay][ax], V4(0.0));
			s0[ay][ax] = max(s0[ay][ax], V4(0.0));
			s3[ay][ax] = -max(-s2[ay][ax], V4(0.0));
			s2[ay][ax] = max(s2[ay][ax], V4(0.0));
		}
	}
	barrier();
	vec4 r0 = f0(xy.x, xy.y);
	vec4 r1 = f1(xy.x, xy.y);
	imageStore(out_image, opos + ivec2(0, 0), r0);
	imageStore(out_image, opos + ivec2(1, 0), r1);
}

//!DESC CuNNy-8x8C-RCAS-conv3
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv2
//!BIND LUMA
//!SAVE conv3
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(texelFetch(conv2_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv2_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 s0[10][10];
shared V4 s1[10][10];
shared V4 s2[10][10];
shared V4 s3[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += M4(1.054e-01, 7.116e-02, -1.448e-01, -7.925e-02, -4.038e-02, -1.928e-02, 4.262e-02, 8.912e-02, -2.777e-03, -2.925e-02, -8.961e-02, -3.060e-02, 1.191e-02, 1.758e-02, 3.001e-02, 9.129e-02) * s0[y+0][x+0];
	r += M4(8.419e-02, -1.052e-01, 2.415e-02, 2.893e-01, 2.050e-01, -1.313e-01, 1.979e-02, -4.943e-03, 3.342e-02, 4.598e-02, -5.268e-02, -1.046e-02, 1.924e-02, -6.557e-02, -3.000e-03, -7.899e-02) * s0[y+0][x+1];
	r += M4(-7.311e-03, 1.053e-02, 9.210e-03, 2.604e-02, -7.509e-02, 7.454e-02, -5.984e-02, 3.270e-03, -6.444e-02, -1.396e-01, 2.403e-02, 1.011e-01, -1.201e-01, 1.087e-01, -3.718e-02, 9.163e-02) * s0[y+0][x+2];
	r += M4(7.014e-02, -7.865e-02, 2.233e-02, 2.631e-01, 4.689e-02, -8.148e-03, -1.118e-01, 2.712e-02, 1.598e-01, 2.643e-02, 9.850e-02, 2.728e-02, -3.662e-01, -1.027e-01, -2.759e-01, -4.679e-02) * s0[y+1][x+0];
	r += M4(1.202e-01, -5.170e-01, -2.004e-02, -5.097e-02, -4.252e-02, -8.790e-03, 2.478e-01, -1.444e-01, 3.040e-02, -1.508e-01, -2.468e-01, 5.668e-02, -1.310e-01, -3.399e-01, 2.173e-01, 2.471e-02) * s0[y+1][x+1];
	r += M4(-3.046e-02, 3.276e-02, -4.322e-02, 1.021e-02, 3.991e-02, 4.554e-01, 2.203e-01, 1.051e-01, 1.100e-02, -3.487e-01, -3.170e-02, 4.823e-02, -2.606e-01, 2.831e-02, 2.291e-02, -3.006e-01) * s0[y+1][x+2];
	r += M4(-3.281e-02, 5.218e-02, -4.022e-03, -5.875e-02, -2.263e-04, 3.997e-02, 1.115e-01, 1.344e-01, -4.864e-02, 4.110e-02, 5.163e-02, 1.040e-01, -2.733e-01, 3.627e-02, -4.512e-02, 7.004e-02) * s0[y+2][x+0];
	r += M4(-8.981e-02, 1.239e-02, 8.656e-02, -1.968e-02, 5.859e-02, 8.513e-02, 7.723e-02, -1.267e-01, -1.918e-01, -2.275e-02, -1.688e-01, 2.905e-02, -1.326e-01, 4.834e-02, -9.888e-02, 1.411e-01) * s0[y+2][x+1];
	r += M4(-2.626e-02, 7.886e-02, 1.023e-01, -2.749e-02, -1.114e-01, 1.274e-01, -9.597e-02, 1.839e-01, 9.330e-02, -2.075e-01, -5.114e-02, 9.412e-03, 1.551e-01, -1.248e-01, -1.122e-02, 1.710e-02) * s0[y+2][x+2];
	r += M4(2.682e-01, 9.594e-02, -1.796e-01, 1.616e-01, 2.339e-02, 1.326e-02, 6.062e-03, -1.117e-01, 3.464e-02, -1.709e-02, -2.303e-02, 8.399e-02, -1.204e-01, 8.727e-02, 1.788e-02, 1.032e-01) * s1[y+0][x+0];
	r += M4(-2.064e-02, -4.951e-02, -1.760e-02, 4.963e-02, 1.726e-01, -1.636e-01, 6.635e-02, 2.430e-01, -8.229e-02, -8.012e-02, -1.912e-01, -2.657e-01, -1.383e-01, -9.253e-02, 5.802e-02, -1.794e-01) * s1[y+0][x+1];
	r += M4(5.303e-02, -1.479e-01, 1.253e-03, 2.622e-02, -4.159e-02, 1.400e-01, 6.502e-02, 1.489e-01, 2.963e-02, -2.235e-01, -1.618e-01, 9.842e-02, 6.174e-02, 6.559e-02, -3.525e-03, -5.355e-03) * s1[y+0][x+2];
	r += M4(1.709e-01, 1.431e-01, -7.858e-02, -1.697e-01, 1.375e-02, -4.244e-02, 1.412e-01, -8.943e-03, 1.481e-01, 8.549e-02, 1.160e-01, 8.603e-02, -9.892e-02, -9.358e-02, -1.470e-01, -1.263e-01) * s1[y+1][x+0];
	r += M4(-7.837e-02, 3.633e-03, 3.453e-02, -2.828e-01, -3.395e-01, 2.116e-01, 1.669e-01, -7.289e-02, -1.026e-02, -1.199e-01, -1.964e-01, 1.294e-01, 9.736e-03, -2.888e-01, 6.532e-02, -1.503e-02) * s1[y+1][x+1];
	r += M4(1.492e-02, -7.191e-02, -9.199e-02, 1.969e-02, -2.001e-01, -1.024e-02, -1.053e-01, -1.130e-01, -1.128e-01, -2.437e-01, -1.253e-01, 4.562e-02, -5.410e-02, 2.779e-02, 2.191e-02, -2.627e-02) * s1[y+1][x+2];
	r += M4(1.703e-01, 8.779e-02, 1.818e-01, 1.588e-02, 1.604e-01, 5.132e-02, 8.665e-02, 3.134e-01, -2.779e-02, 6.576e-02, 1.392e-01, -8.303e-02, -1.140e-01, 5.025e-02, 5.468e-02, -2.627e-02) * s1[y+2][x+0];
	r += M4(1.186e-01, 2.379e-03, 1.201e-01, -1.235e-01, -1.090e-01, 9.959e-02, 7.399e-02, -3.300e-02, -1.590e-01, -4.414e-02, -1.858e-01, 1.636e-01, -1.181e-01, 7.583e-03, 1.070e-02, 2.029e-01) * s1[y+2][x+1];
	r += M4(-2.301e-03, -1.679e-02, -4.061e-02, 8.575e-02, -1.544e-01, 7.529e-02, 8.067e-02, 1.263e-01, 2.630e-02, -1.760e-01, 2.355e-02, 2.595e-02, 2.882e-02, -7.432e-02, -1.144e-02, -2.868e-02) * s1[y+2][x+2];
	r += M4(7.673e-03, -1.224e-01, 5.314e-03, 1.905e-01, 7.224e-02, 4.487e-02, -7.791e-02, -1.404e-01, 1.363e-01, -2.776e-02, -2.252e-01, -1.099e-01, -1.255e-02, 2.427e-02, -8.646e-02, -5.130e-02) * s2[y+0][x+0];
	r += M4(-9.490e-02, 5.672e-02, 9.349e-02, -4.901e-02, -2.678e-03, 1.508e-02, 3.085e-02, 2.052e-01, -1.052e-01, 4.875e-02, 1.391e-01, -1.178e-01, -9.022e-02, -5.167e-02, 1.325e-02, -1.872e-02) * s2[y+0][x+1];
	r += M4(8.778e-02, -7.154e-02, -2.523e-03, 3.790e-02, 8.449e-02, -4.374e-02, 6.770e-02, 7.365e-02, -1.831e-01, 3.452e-02, 8.526e-02, -9.063e-02, 7.082e-03, 3.344e-03, 1.880e-04, -1.002e-01) * s2[y+0][x+2];
	r += M4(1.955e-01, 9.833e-02, -2.321e-01, -2.926e-01, -9.318e-02, 3.748e-02, -8.294e-02, -1.392e-01, -2.066e-01, 1.835e-02, -7.443e-03, -2.100e-03, -1.003e-01, 4.960e-02, 8.170e-02, 1.182e-01) * s2[y+1][x+0];
	r += M4(-1.779e-01, 6.615e-01, -1.850e-01, 1.279e-01, 1.640e-01, 1.785e-01, -2.239e-01, 3.663e-01, -6.625e-01, -6.578e-01, 6.360e-01, -2.270e-01, -6.659e-01, -5.201e-01, -1.785e-02, -4.399e-01) * s2[y+1][x+1];
	r += M4(7.162e-02, -6.269e-02, -1.046e-01, 5.304e-02, 3.453e-02, -1.662e-01, -9.416e-03, 1.086e-01, 1.457e-01, -2.965e-01, -2.348e-01, 1.292e-01, -3.396e-01, 1.556e-01, -1.103e-01, -8.581e-02) * s2[y+1][x+2];
	r += M4(1.428e-01, 5.856e-02, -1.033e-01, 5.533e-02, -9.810e-03, -2.173e-02, -1.104e-01, 4.944e-02, -1.191e-01, -2.081e-02, -2.185e-01, 6.164e-02, 9.739e-02, -1.142e-02, 2.989e-01, -4.104e-02) * s2[y+2][x+0];
	r += M4(-2.432e-02, -9.582e-02, 6.417e-02, 1.386e-01, -9.103e-02, -9.817e-03, 2.043e-02, -8.274e-03, -3.514e-01, -2.163e-02, -8.302e-02, -2.414e-02, 1.114e-01, -4.937e-03, -1.475e-01, 1.608e-02) * s2[y+2][x+1];
	r += M4(1.483e-01, -1.191e-01, 3.330e-03, 3.862e-02, 5.836e-03, -4.948e-02, 1.965e-02, 7.406e-02, 8.016e-02, -2.264e-02, 1.338e-01, 7.541e-02, -2.565e-02, -5.563e-02, -3.568e-02, -2.581e-02) * s2[y+2][x+2];
	r += M4(-2.216e-02, -3.638e-02, 6.738e-02, -5.554e-02, 9.763e-02, -3.654e-02, -3.040e-02, 2.557e-02, 7.737e-02, 9.749e-03, -1.680e-01, -2.238e-01, 9.884e-03, -1.142e-02, -2.190e-02, -1.987e-02) * s3[y+0][x+0];
	r += M4(-2.724e-02, 1.530e-02, 5.903e-02, -7.835e-02, -2.143e-02, 5.576e-02, 6.623e-02, -1.980e-01, -3.837e-02, -7.395e-02, 1.122e-01, 4.472e-03, 1.563e-02, -9.157e-03, 3.964e-02, 7.736e-02) * s3[y+0][x+1];
	r += M4(-1.942e-02, -1.538e-01, -4.675e-02, -5.737e-02, 1.288e-01, -1.795e-01, -4.527e-02, 3.899e-01, 5.157e-02, -9.276e-02, -3.207e-02, 4.051e-02, -4.892e-03, 2.430e-03, 1.402e-02, -7.934e-02) * s3[y+0][x+2];
	r += M4(-2.389e-01, 8.512e-02, 1.448e-01, 4.800e-03, 3.930e-02, 4.669e-02, 3.308e-02, 1.241e-01, 1.972e-02, 6.803e-02, 4.863e-02, -3.832e-02, 7.396e-02, 1.002e-01, -4.005e-02, 2.159e-02) * s3[y+1][x+0];
	r += M4(-1.703e-01, 4.315e-01, 1.242e-01, -1.680e-01, -2.435e-02, 1.135e-01, 2.366e-02, 4.304e-01, -7.979e-02, 9.983e-03, 3.883e-01, -1.655e-01, 1.051e-01, -2.942e-01, 1.689e-01, -4.373e-02) * s3[y+1][x+1];
	r += M4(1.627e-02, -1.381e-01, 4.136e-02, -9.120e-02, -2.858e-01, -1.640e-01, -9.555e-02, -3.259e-02, 1.053e-01, 1.659e-01, -2.227e-01, 1.117e-01, 1.349e-01, 1.193e-01, 3.370e-02, -1.016e-02) * s3[y+1][x+2];
	r += M4(7.086e-02, 1.972e-02, -5.726e-02, -1.527e-01, -3.819e-02, -1.940e-02, -1.729e-01, -9.743e-02, -3.586e-02, 2.182e-02, -5.138e-03, 1.908e-01, 2.440e-01, 1.090e-02, 5.795e-02, -7.578e-02) * s3[y+2][x+0];
	r += M4(-4.040e-02, -1.298e-02, -3.249e-02, -1.836e-01, -1.757e-01, 8.076e-03, 1.378e-01, -1.282e-02, 5.542e-02, 6.280e-02, -6.750e-02, 9.989e-02, 6.008e-01, 1.784e-01, 2.377e-01, 1.484e-01) * s3[y+2][x+1];
	r += M4(1.082e-01, -4.504e-02, 9.085e-02, -8.631e-02, 2.801e-02, -3.198e-02, 3.681e-02, -2.994e-02, 1.059e-02, 1.275e-02, 3.370e-02, 8.558e-03, 1.251e-01, -1.242e-01, 6.319e-02, -3.987e-02) * s3[y+2][x+2];
	r += V4(-7.306e-02, 2.011e-03, 2.343e-02, -3.112e-02);
	return vec4(r);
}
vec4 f1(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-2.590e-01, -2.174e-03, -1.675e-01, 1.197e-01, 3.280e-02, 1.769e-01, -5.211e-02, 5.663e-02, -8.110e-02, 3.786e-02, 3.744e-02, 3.611e-02, 6.889e-03, 5.871e-02, 3.332e-02, 1.997e-01) * s0[y+0][x+0];
	r += M4(1.600e-01, 8.001e-02, -2.869e-01, 2.322e-01, 1.465e-01, -9.274e-02, -3.009e-02, -1.376e-01, -1.301e-01, -1.151e-01, -3.396e-01, -1.167e-01, 1.925e-01, 2.674e-02, -3.873e-01, -9.304e-02) * s0[y+0][x+1];
	r += M4(-2.097e-02, -4.434e-02, -2.951e-02, -3.957e-03, 3.176e-02, -3.706e-02, 1.937e-02, -1.940e-01, 6.861e-02, 6.164e-03, -6.377e-02, 3.268e-02, -5.393e-02, 9.086e-02, 8.510e-02, -3.186e-02) * s0[y+0][x+2];
	r += M4(-1.218e-01, -3.170e-02, -1.093e-01, -2.725e-03, -2.387e-03, -2.979e-02, -1.602e-01, 1.007e-01, -1.590e-01, -7.596e-02, -6.898e-02, 1.077e-02, -5.093e-02, 3.589e-01, -4.678e-03, 9.801e-02) * s0[y+1][x+0];
	r += M4(2.221e-01, 1.677e-01, 1.452e-01, -2.655e-02, 2.849e-01, 2.556e-02, -7.824e-02, -1.796e-01, -2.126e-01, 6.560e-02, 6.241e-02, -2.291e-02, -1.221e-01, 5.551e-01, -2.962e-01, 1.700e-01) * s0[y+1][x+1];
	r += M4(-1.811e-01, 3.957e-03, 6.016e-02, -4.238e-02, -7.226e-02, 1.485e-01, -2.072e-01, 5.428e-02, -4.550e-02, -3.733e-02, 1.052e-01, 2.885e-01, -5.635e-02, -9.685e-02, 9.354e-02, -4.680e-02) * s0[y+1][x+2];
	r += M4(2.235e-01, 1.244e-01, -7.116e-02, 2.987e-02, 4.949e-02, 9.508e-02, 6.199e-02, 1.178e-01, -2.347e-02, -4.241e-03, -5.414e-02, 4.121e-02, 1.905e-01, -1.545e-02, -8.338e-02, -1.194e-02) * s0[y+2][x+0];
	r += M4(-7.015e-02, 1.233e-01, 5.943e-02, 4.263e-02, -7.528e-02, -1.042e-01, -2.655e-02, 1.168e-02, 1.409e-01, -4.603e-02, -4.987e-02, -1.704e-02, 3.425e-02, -1.081e-02, 6.060e-02, -1.588e-02) * s0[y+2][x+1];
	r += M4(8.199e-02, -6.038e-02, -7.977e-02, 2.814e-02, -7.168e-04, -5.710e-02, -7.124e-02, 4.390e-02, -1.051e-01, -1.262e-01, 5.592e-02, 1.199e-01, -5.466e-02, -7.822e-03, 1.009e-01, 1.766e-02) * s0[y+2][x+2];
	r += M4(-3.208e-02, -7.669e-02, -3.989e-02, -1.885e-01, -3.022e-03, 3.960e-02, -1.316e-02, 5.047e-02, 8.598e-03, 3.176e-02, -3.703e-02, -9.680e-02, 1.151e-01, 1.930e-01, 6.607e-02, -3.641e-02) * s1[y+0][x+0];
	r += M4(-1.094e-01, -7.789e-02, -3.269e-01, 3.498e-02, 9.353e-02, -1.410e-01, 9.477e-02, 1.636e-01, -6.905e-02, -6.935e-02, -1.517e-02, -1.927e-01, -6.511e-02, 2.216e-01, 3.203e-02, 1.230e-01) * s1[y+0][x+1];
	r += M4(1.233e-01, -2.605e-02, 3.849e-02, 2.838e-02, -1.655e-01, -1.514e-01, -1.333e-01, 3.680e-02, 1.156e-01, -2.078e-01, 4.439e-02, -8.359e-03, 6.071e-02, 7.623e-02, 9.328e-02, -1.273e-01) * s1[y+0][x+2];
	r += M4(1.331e-01, 2.524e-01, 2.264e-01, -1.506e-01, -1.617e-01, -1.203e-01, 1.024e-01, 3.650e-02, 2.171e-01, 7.344e-02, -2.027e-02, -6.436e-02, 2.571e-01, 2.313e-01, 8.345e-03, 6.094e-02) * s1[y+1][x+0];
	r += M4(6.109e-02, -3.925e-03, 1.964e-01, -1.104e-02, 5.207e-01, 6.590e-02, 6.164e-03, -1.841e-01, -5.284e-02, 2.623e-02, 9.313e-02, 4.302e-01, -5.486e-03, 1.804e-01, -2.207e-01, 1.638e-01) * s1[y+1][x+1];
	r += M4(3.786e-02, -1.238e-02, 4.059e-02, -5.932e-02, -1.803e-01, -2.894e-01, -1.595e-01, -1.483e-01, -1.765e-01, 5.284e-03, 7.384e-02, 8.236e-02, -6.527e-02, 6.649e-03, 6.408e-02, 6.938e-02) * s1[y+1][x+2];
	r += M4(-3.382e-02, 5.314e-02, 1.969e-02, -8.899e-02, -8.973e-02, -5.541e-02, 2.301e-02, 2.905e-01, -6.920e-02, 4.970e-02, 7.786e-03, -4.788e-02, 1.992e-02, 6.013e-02, -1.097e-01, 5.221e-03) * s1[y+2][x+0];
	r += M4(2.855e-02, 1.258e-01, 9.833e-02, 1.802e-02, 1.741e-01, -2.316e-01, -1.085e-01, 3.179e-02, 3.291e-02, -1.829e-01, -6.598e-02, -4.789e-02, -1.916e-02, 1.561e-02, -1.079e-02, -1.101e-01) * s1[y+2][x+1];
	r += M4(-2.372e-02, -9.448e-02, 1.465e-02, 7.360e-02, 1.544e-01, -1.008e-01, -5.878e-02, -3.232e-02, -1.461e-01, -2.843e-01, 9.943e-02, -1.424e-02, -5.035e-02, -5.043e-03, 9.080e-02, 7.571e-02) * s1[y+2][x+2];
	r += M4(3.699e-01, -5.434e-03, -9.802e-03, 5.749e-02, -7.669e-02, 1.026e-01, -9.410e-03, -1.360e-02, -3.538e-03, 1.740e-01, -6.099e-02, -2.222e-02, -9.475e-02, -7.183e-02, -7.525e-03, -8.321e-02) * s2[y+0][x+0];
	r += M4(-4.198e-01, -1.712e-01, -1.583e-02, -1.347e-02, -2.614e-01, -1.149e-01, -2.540e-02, 2.266e-01, -3.994e-02, -1.908e-01, -1.520e-01, 1.026e-01, 2.569e-03, -7.835e-02, 6.536e-02, 7.512e-02) * s2[y+0][x+1];
	r += M4(7.869e-02, 2.194e-02, -2.236e-01, 2.445e-02, 4.678e-02, 3.912e-02, -1.344e-01, 2.105e-01, 1.122e-02, -1.709e-02, 2.421e-01, 1.126e-02, -6.775e-02, -7.628e-02, -1.072e-02, 9.463e-03) * s2[y+0][x+2];
	r += M4(-1.884e-02, 2.317e-01, -2.018e-01, 8.824e-02, -1.298e-01, -6.903e-03, 1.458e-01, 2.402e-02, -2.696e-01, -1.924e-01, 2.105e-01, -1.147e-01, 4.391e-03, 4.417e-02, -1.190e-01, -1.437e-01) * s2[y+1][x+0];
	r += M4(8.982e-02, 1.371e-01, 9.035e-02, -1.199e-01, -2.321e-01, -1.618e-02, 2.073e-01, 5.029e-02, -2.562e-01, 2.477e-01, -6.148e-01, -1.215e-03, -5.306e-02, -1.191e-01, 1.633e-01, 1.685e-01) * s2[y+1][x+1];
	r += M4(9.665e-02, 8.432e-02, -1.616e-01, -3.156e-02, -1.024e-01, 1.252e-01, -6.188e-02, 2.612e-03, 5.538e-02, -8.929e-02, -2.690e-01, -1.473e-01, -1.333e-01, -8.583e-02, 2.142e-01, -5.369e-02) * s2[y+1][x+2];
	r += M4(-2.375e-01, -4.058e-02, 4.666e-02, 3.690e-02, -8.447e-02, -1.420e-02, 3.139e-02, -3.800e-03, 5.959e-02, 9.754e-02, 9.918e-03, -2.829e-02, 1.414e-02, -2.814e-02, 4.763e-02, -2.106e-01) * s2[y+2][x+0];
	r += M4(6.100e-02, 2.384e-01, 1.040e-01, -1.391e-01, -1.790e-01, -4.720e-02, -6.943e-02, -2.793e-02, 7.011e-02, -1.160e-01, -2.193e-01, 2.861e-01, -2.693e-01, -4.506e-02, 2.084e-01, -1.564e-01) * s2[y+2][x+1];
	r += M4(-1.905e-02, 7.351e-03, -8.229e-03, 1.584e-02, -1.175e-02, 2.323e-01, -2.934e-02, -6.459e-02, 1.859e-02, -7.485e-02, -1.656e-01, -1.151e-01, -6.542e-02, -9.396e-02, 1.574e-01, -2.368e-02) * s2[y+2][x+2];
	r += M4(4.270e-02, -6.398e-02, 1.145e-02, -1.177e-02, 5.383e-02, 2.595e-02, -3.791e-02, 6.458e-02, -1.201e-01, 8.855e-02, -1.656e-01, 2.457e-04, -2.307e-02, -5.208e-02, 4.908e-02, -3.618e-02) * s3[y+0][x+0];
	r += M4(1.494e-02, -5.839e-02, -1.569e-01, -2.217e-01, -1.945e-01, -1.395e-02, -3.055e-02, -8.280e-02, 5.945e-02, 4.502e-02, 6.381e-02, 9.340e-02, -3.591e-02, -3.774e-02, -8.992e-02, 4.359e-02) * s3[y+0][x+1];
	r += M4(-1.712e-03, -1.172e-01, -9.588e-02, 6.224e-02, -3.163e-03, 1.874e-01, -1.342e-02, 2.790e-01, 6.819e-02, 2.345e-02, 1.570e-02, -2.400e-02, -1.894e-02, -2.742e-02, -8.791e-02, -6.134e-02) * s3[y+0][x+2];
	r += M4(4.800e-02, -9.569e-02, 9.464e-02, 2.239e-01, 2.195e-02, 4.166e-02, 5.297e-02, 9.030e-02, -4.055e-02, -2.146e-02, 1.459e-01, 1.724e-01, -1.390e-02, 1.540e-01, -6.531e-02, -1.073e-01) * s3[y+1][x+0];
	r += M4(-2.277e-01, -7.836e-02, 4.409e-02, 4.524e-02, 1.300e-01, 7.645e-02, 1.635e-01, 2.180e-01, -1.563e-01, -7.799e-02, 4.214e-02, -1.215e-01, 9.859e-02, 2.705e-01, -4.873e-01, 1.531e-01) * s3[y+1][x+1];
	r += M4(7.676e-02, 7.513e-02, -8.541e-02, 4.847e-02, 3.368e-02, -5.199e-02, 1.478e-01, 2.897e-01, 2.211e-01, 1.399e-02, -5.187e-02, -1.561e-01, -5.135e-02, 1.215e-01, 5.523e-03, -9.583e-03) * s3[y+1][x+2];
	r += M4(2.570e-02, -8.706e-02, 3.541e-02, -3.399e-02, -1.831e-01, -6.564e-02, -2.515e-02, -1.130e-01, -1.811e-02, 9.821e-02, -6.281e-02, -7.984e-02, 1.108e-01, -8.498e-02, -3.316e-02, -3.755e-02) * s3[y+2][x+0];
	r += M4(-1.142e-01, 1.674e-02, 8.174e-02, 8.925e-02, -1.379e-01, 1.219e-01, 8.524e-02, 6.804e-02, 2.048e-02, -6.753e-02, 1.942e-03, 9.082e-02, -1.144e-01, 1.305e-01, -1.377e-01, -3.986e-01) * s3[y+2][x+1];
	r += M4(8.003e-02, -1.963e-02, 3.885e-02, -4.174e-03, -7.608e-02, 1.647e-02, -6.751e-02, -1.900e-03, -5.206e-02, -4.760e-02, 1.994e-02, -7.919e-02, 1.135e-01, -2.922e-02, 6.998e-02, 5.236e-02) * s3[y+2][x+2];
	r += V4(3.411e-02, 1.314e-01, 1.773e-02, 3.428e-03);
	return vec4(r);
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv2_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
			s2[ay][ax] = l1(x - 1, y - 1);
			s1[ay][ax] = -max(-s0[ay][ax], V4(0.0));
			s0[ay][ax] = max(s0[ay][ax], V4(0.0));
			s3[ay][ax] = -max(-s2[ay][ax], V4(0.0));
			s2[ay][ax] = max(s2[ay][ax], V4(0.0));
		}
	}
	barrier();
	vec4 r0 = f0(xy.x, xy.y);
	vec4 r1 = f1(xy.x, xy.y);
	imageStore(out_image, opos + ivec2(0, 0), r0);
	imageStore(out_image, opos + ivec2(1, 0), r1);
}

//!DESC CuNNy-8x8C-RCAS-conv4
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv3
//!BIND LUMA
//!SAVE conv4
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(texelFetch(conv3_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv3_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 s0[10][10];
shared V4 s1[10][10];
shared V4 s2[10][10];
shared V4 s3[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-1.213e-05, 1.769e-01, -1.024e-01, -7.236e-02, -7.056e-02, 7.020e-02, 1.553e-01, -1.487e-01, -8.969e-02, -5.491e-02, -1.561e-01, -4.892e-02, -5.289e-02, -9.921e-02, -9.535e-02, 8.347e-03) * s0[y+0][x+0];
	r += M4(-8.482e-02, 1.541e-01, -2.903e-01, 2.628e-01, 1.949e-01, -9.692e-02, -6.616e-02, -1.033e-01, -1.633e-01, -2.732e-01, -3.027e-01, 1.586e-01, -1.036e-01, -4.668e-02, -9.341e-02, 2.811e-02) * s0[y+0][x+1];
	r += M4(-2.762e-01, 5.783e-02, 1.309e-02, 7.100e-02, 1.116e-02, 3.038e-02, 1.058e-02, -7.808e-02, -2.881e-01, -5.674e-02, -3.604e-03, -1.185e-01, 4.764e-02, -5.069e-02, -3.555e-02, 6.712e-02) * s0[y+0][x+2];
	r += M4(5.761e-02, -6.677e-03, 7.319e-02, 2.700e-01, -2.960e-01, -5.261e-01, -2.418e-01, 4.895e-02, -1.636e-01, -9.324e-02, 4.387e-02, 1.431e-01, -2.413e-01, -2.928e-02, 8.030e-02, 1.602e-01) * s0[y+1][x+0];
	r += M4(2.532e-01, 2.405e-01, 6.124e-02, -4.579e-01, 2.445e-01, 1.555e-01, -1.673e-01, -9.630e-02, -6.411e-02, -1.656e-02, -1.405e-01, -4.662e-02, 8.392e-02, 2.036e-01, 2.842e-01, -2.186e-01) * s0[y+1][x+1];
	r += M4(5.613e-02, 1.798e-01, -3.231e-02, 2.248e-02, 1.917e-02, 3.519e-02, -3.436e-02, 7.690e-02, -3.122e-01, -4.640e-02, 5.926e-02, -4.874e-01, -1.198e-01, 7.219e-06, -9.186e-02, -1.870e-01) * s0[y+1][x+2];
	r += M4(-4.366e-04, 3.783e-02, 8.260e-02, 7.026e-02, -4.827e-01, -6.791e-02, -7.645e-03, 3.722e-02, 9.580e-02, -1.066e-02, -7.385e-02, -2.298e-02, 1.410e-01, -8.093e-03, -1.072e-01, 6.652e-02) * s0[y+2][x+0];
	r += M4(1.338e-01, 1.462e-01, 5.396e-02, 4.776e-02, 1.708e-02, -1.948e-02, 6.192e-02, -4.017e-02, 5.967e-02, -8.584e-02, 3.809e-02, -4.836e-03, 5.580e-02, -1.582e-02, -1.857e-02, 1.780e-01) * s0[y+2][x+1];
	r += M4(-1.431e-02, 8.125e-02, 2.693e-02, -1.389e-01, 3.316e-03, 1.140e-03, 1.269e-02, 2.506e-02, -1.218e-01, 2.413e-02, 4.538e-02, -3.633e-02, -2.138e-02, -2.425e-02, 9.398e-03, 9.921e-02) * s0[y+2][x+2];
	r += M4(-1.421e-02, 1.003e-01, 5.415e-04, -7.689e-02, -4.955e-02, -5.762e-03, -1.589e-01, 1.028e-01, -6.889e-03, 1.667e-02, -3.387e-02, 1.555e-02, -4.591e-02, -8.369e-02, 5.408e-02, 5.667e-02) * s1[y+0][x+0];
	r += M4(9.433e-02, 4.678e-02, -1.082e-01, 1.156e-01, -6.157e-02, -1.178e-01, -9.704e-03, 1.395e-01, -1.077e-01, 7.356e-02, -3.909e-01, 1.056e-01, -2.373e-01, -8.262e-02, 5.825e-02, -1.149e-01) * s1[y+0][x+1];
	r += M4(-1.138e-01, 5.262e-02, 4.627e-02, 1.744e-02, -7.109e-02, -1.538e-02, 4.459e-02, -7.247e-02, -2.123e-01, -3.729e-02, -7.192e-03, -2.052e-02, -8.795e-02, 1.186e-02, -1.004e-01, 1.278e-02) * s1[y+0][x+2];
	r += M4(4.333e-02, 5.716e-02, 1.133e-01, 7.634e-02, 9.118e-03, 2.890e-02, -2.893e-01, 3.018e-01, 8.726e-02, -4.971e-02, 1.313e-01, 6.060e-02, -2.934e-01, -5.456e-02, -2.942e-01, 1.651e-01) * s1[y+1][x+0];
	r += M4(3.850e-02, 2.842e-01, -1.078e-01, -1.589e-01, 5.521e-01, 4.536e-01, 5.084e-02, -1.217e-01, 7.239e-02, -1.304e-01, -1.502e-01, 1.305e-01, -3.931e-01, -1.145e-01, -1.744e-03, -1.774e-01) * s1[y+1][x+1];
	r += M4(-7.153e-02, 9.701e-02, 5.160e-02, 1.381e-01, -5.416e-02, -4.639e-02, 1.362e-02, 3.037e-02, -2.366e-03, -1.004e-02, -4.274e-02, -3.820e-01, -2.320e-02, 2.281e-02, 1.131e-01, -3.622e-01) * s1[y+1][x+2];
	r += M4(-2.183e-02, 1.340e-02, 6.573e-02, -1.091e-01, 3.931e-02, -8.092e-02, -9.242e-03, -3.622e-02, 6.446e-02, 1.716e-02, -9.114e-02, 5.183e-03, -2.017e-01, -1.390e-02, 7.723e-02, 8.480e-02) * s1[y+2][x+0];
	r += M4(3.139e-01, 6.722e-02, 9.814e-02, 4.904e-02, 4.014e-01, -4.053e-02, 9.885e-02, 1.917e-01, -2.368e-01, -4.268e-02, -1.076e-01, -1.686e-01, -1.929e-01, -4.603e-02, 3.554e-03, -2.278e-02) * s1[y+2][x+1];
	r += M4(1.064e-01, 4.229e-02, 4.840e-02, -5.359e-02, -3.673e-02, 6.895e-04, 2.156e-02, 9.497e-02, -2.680e-02, 4.464e-02, -1.241e-03, -3.022e-02, -1.445e-01, -9.791e-03, 4.401e-02, -1.489e-01) * s1[y+2][x+2];
	r += M4(1.169e-01, 6.021e-03, 2.312e-01, -9.366e-02, -1.791e-03, -2.091e-02, -2.218e-01, 7.214e-02, 1.624e-02, -3.467e-02, -1.091e-01, 2.214e-02, -3.937e-03, 7.828e-03, 3.648e-02, -6.714e-02) * s2[y+0][x+0];
	r += M4(2.592e-01, 2.824e-02, 2.934e-01, 5.092e-02, -1.739e-01, -1.262e-01, 1.984e-01, 7.496e-02, 7.019e-03, -1.164e-02, -9.304e-02, 9.693e-02, 1.750e-01, 9.359e-04, -5.954e-02, -5.740e-02) * s2[y+0][x+1];
	r += M4(4.425e-01, -1.106e-01, 2.431e-01, -2.425e-01, 4.281e-02, -3.602e-02, 2.634e-02, -6.498e-03, -5.995e-02, -6.976e-02, -7.497e-02, 2.544e-02, 2.007e-02, 3.785e-02, 1.467e-01, -6.878e-02) * s2[y+0][x+2];
	r += M4(9.860e-02, 1.691e-01, 1.961e-02, -6.303e-02, 1.444e-02, -2.782e-01, 7.682e-02, 8.497e-02, 4.714e-02, -4.349e-02, -1.191e-01, 9.276e-02, -3.259e-02, 7.860e-02, 1.106e-01, -5.749e-02) * s2[y+1][x+0];
	r += M4(4.136e-01, -5.912e-01, 4.347e-01, -7.582e-02, 7.020e-02, 1.211e-02, 1.924e-01, 8.174e-02, 9.175e-02, -3.299e-02, 1.591e-01, -3.417e-01, -1.231e-01, -8.439e-02, 2.760e-01, -5.384e-02) * s2[y+1][x+1];
	r += M4(-2.891e-01, -1.521e-01, -2.439e-01, -1.334e-01, 1.099e-01, -1.457e-01, 1.126e-02, 1.440e-01, -3.017e-03, -1.553e-02, 3.477e-02, 8.740e-02, -1.440e-01, -5.082e-02, -6.783e-03, -5.539e-03) * s2[y+1][x+2];
	r += M4(1.338e-01, -2.833e-02, -1.689e-01, 5.141e-02, 7.729e-02, -4.920e-02, -2.797e-02, -5.034e-02, 8.679e-02, -1.238e-01, -1.048e-02, 9.795e-02, 7.123e-02, 3.301e-03, 3.039e-02, -9.727e-02) * s2[y+2][x+0];
	r += M4(2.449e-01, 7.456e-02, 2.999e-01, 4.303e-02, 6.337e-02, -3.445e-02, -1.705e-01, -2.205e-01, 7.837e-02, -9.477e-02, -1.076e-01, 2.672e-01, -2.695e-02, 3.559e-02, -9.020e-02, -2.747e-01) * s2[y+2][x+1];
	r += M4(5.581e-02, -4.934e-02, 2.245e-01, -5.371e-02, -4.628e-02, -1.734e-01, -3.640e-02, -1.480e-02, -1.137e-01, -3.743e-02, 1.700e-02, -4.718e-02, -7.210e-05, 2.808e-02, 5.269e-02, -1.490e-01) * s2[y+2][x+2];
	r += M4(4.157e-02, 7.399e-02, 1.472e-01, -3.164e-02, -5.872e-02, -7.331e-03, -2.208e-01, 7.222e-02, -4.506e-02, -4.071e-03, -3.176e-02, -6.631e-02, 1.430e-03, 1.368e-02, -6.841e-02, -4.199e-02) * s3[y+0][x+0];
	r += M4(8.140e-02, 4.977e-02, 2.529e-01, -1.736e-02, -7.141e-02, -2.110e-01, 1.052e-01, 7.220e-03, -6.721e-02, -5.754e-03, -2.177e-01, -4.238e-02, 2.178e-01, -4.542e-02, -1.179e-02, 3.363e-02) * s3[y+0][x+1];
	r += M4(9.209e-02, 3.412e-02, 4.285e-02, -9.577e-02, -2.632e-02, -6.990e-02, -5.050e-02, 2.401e-02, -7.529e-02, -4.489e-02, -1.487e-02, 2.120e-02, 4.137e-02, 8.495e-02, 1.091e-01, -6.852e-02) * s3[y+0][x+2];
	r += M4(2.430e-02, 3.577e-02, -3.856e-02, -1.080e-02, 6.049e-03, -2.299e-01, 1.298e-01, 9.327e-03, -1.979e-02, -1.822e-02, -1.294e-02, -1.072e-01, 5.097e-02, 7.200e-02, -1.320e-02, 6.272e-02) * s3[y+1][x+0];
	r += M4(-9.059e-02, -1.893e-01, -2.116e-01, 2.849e-02, 1.357e-01, -2.252e-01, 2.685e-01, -3.198e-02, 1.142e-02, -5.456e-02, 1.968e-01, -3.799e-01, -9.742e-02, -3.770e-01, 1.434e-01, -1.587e-02) * s3[y+1][x+1];
	r += M4(-9.199e-04, -5.875e-02, -1.235e-01, 6.987e-03, 7.822e-02, -2.598e-01, -4.801e-02, 1.114e-01, 4.136e-02, 9.206e-02, 7.915e-02, -1.125e-02, -4.832e-02, -3.386e-03, -6.027e-02, 5.850e-02) * s3[y+1][x+2];
	r += M4(-1.426e-02, 6.227e-02, -3.517e-03, 5.200e-02, 8.147e-02, -6.312e-02, -8.177e-02, -1.550e-02, 2.388e-02, 1.283e-02, -4.056e-02, 1.812e-01, 1.974e-01, -2.671e-03, 1.663e-01, 4.860e-02) * s3[y+2][x+0];
	r += M4(1.304e-01, 1.986e-02, -7.937e-02, 1.213e-01, 2.840e-02, -1.250e-01, -2.142e-01, -9.316e-02, -1.561e-01, -1.107e-01, -1.132e-01, 2.623e-01, -1.429e-01, -6.025e-02, -1.348e-01, -1.211e-01) * s3[y+2][x+1];
	r += M4(-4.949e-02, -5.369e-03, -3.616e-02, 6.843e-02, -1.142e-02, -1.184e-01, 8.230e-02, 6.122e-02, -1.526e-01, 3.242e-02, -3.093e-02, -1.184e-02, -2.613e-03, -8.489e-03, -4.644e-03, 2.504e-02) * s3[y+2][x+2];
	r += V4(1.935e-02, -1.751e-01, -9.253e-03, 7.227e-03);
	return vec4(r);
}
vec4 f1(int x, int y) {
	V4 r = V4(0.0);
	r += M4(7.609e-02, 2.237e-01, 3.389e-03, 1.720e-01, -1.975e-01, 1.427e-01, 1.616e-01, 1.545e-02, -8.451e-03, 1.424e-01, -1.436e-02, -1.848e-02, -2.107e-02, -1.193e-02, -4.557e-02, -2.092e-01) * s0[y+0][x+0];
	r += M4(2.091e-01, 4.236e-02, -8.090e-02, 5.987e-02, -9.275e-02, 1.906e-01, -1.186e-02, 9.423e-02, -7.667e-02, 3.407e-02, -2.023e-02, -3.046e-01, 3.534e-02, 8.978e-02, -1.106e-01, 6.662e-03) * s0[y+0][x+1];
	r += M4(-8.965e-02, 6.037e-02, 7.671e-02, 1.209e-01, 2.736e-02, 2.789e-02, 2.106e-02, -6.602e-02, -7.882e-02, 7.801e-02, 6.127e-02, 2.746e-01, -3.079e-03, -4.981e-02, 8.922e-02, 7.966e-02) * s0[y+0][x+2];
	r += M4(-1.494e-01, -1.703e-01, 3.194e-01, 2.033e-02, -7.102e-02, 1.447e-01, -9.480e-02, 1.159e-01, 1.705e-02, -3.279e-02, -4.593e-02, -1.305e-01, 3.476e-02, 5.414e-02, -5.342e-02, -6.153e-02) * s0[y+1][x+0];
	r += M4(-1.420e-02, -2.775e-02, 4.151e-01, 4.123e-02, -1.698e-01, -4.151e-01, -2.321e-01, -8.063e-02, 2.556e-01, 1.023e-01, -4.193e-02, -4.549e-02, -8.750e-02, -6.457e-02, -1.163e-01, -3.266e-02) * s0[y+1][x+1];
	r += M4(7.334e-02, 1.175e-02, 3.650e-01, -1.571e-01, 7.133e-02, -4.706e-02, -9.070e-02, -3.668e-02, -8.868e-02, -1.027e-01, 1.504e-01, -2.754e-01, -1.720e-03, -6.155e-02, 1.197e-01, 2.007e-02) * s0[y+1][x+2];
	r += M4(-5.884e-02, -2.493e-01, 5.691e-02, -5.571e-02, -1.262e-01, 5.395e-02, -9.374e-02, 2.629e-01, 5.757e-02, 1.025e-01, 6.232e-02, -7.944e-02, 1.751e-02, -7.363e-02, -1.806e-02, 5.370e-02) * s0[y+2][x+0];
	r += M4(1.660e-01, 6.101e-02, 1.325e-01, -4.366e-02, 9.442e-02, -1.160e-01, -1.306e-01, -6.711e-02, 2.046e-01, 3.605e-02, 2.368e-02, -2.338e-02, 2.646e-01, 6.824e-02, 4.563e-02, 8.012e-03) * s0[y+2][x+1];
	r += M4(-3.871e-02, -6.552e-02, 2.450e-03, 6.315e-02, -4.654e-02, 3.461e-02, 5.737e-02, -7.737e-02, 2.855e-02, -4.477e-02, -1.763e-01, 7.226e-02, -6.702e-02, -8.954e-02, 1.667e-01, 1.561e-01) * s0[y+2][x+2];
	r += M4(2.689e-02, 4.945e-02, -1.845e-02, 1.549e-01, -1.734e-01, 8.049e-02, -1.157e-01, -2.227e-01, 6.977e-02, -3.575e-02, -9.393e-02, -2.677e-02, -7.786e-02, 4.675e-02, -1.941e-02, -1.583e-01) * s1[y+0][x+0];
	r += M4(7.299e-02, -1.230e-01, 5.257e-03, -1.315e-02, 1.223e-01, -1.580e-02, -2.068e-01, 3.731e-02, 9.587e-03, 1.553e-01, -1.323e-01, -1.428e-01, -2.135e-01, 1.373e-01, -9.675e-02, 9.702e-03) * s1[y+0][x+1];
	r += M4(-7.759e-02, 2.400e-02, 3.212e-02, -4.839e-02, -2.899e-02, -6.224e-02, 3.082e-02, -2.366e-02, -9.406e-02, 7.980e-02, 9.150e-02, 2.234e-01, 1.145e-01, -1.633e-02, -1.238e-01, 1.549e-01) * s1[y+0][x+2];
	r += M4(-5.159e-02, -1.342e-01, 9.668e-03, 2.210e-02, 3.325e-01, 2.933e-01, -1.729e-01, 2.105e-01, -5.494e-02, -1.685e-01, 4.377e-02, -1.182e-01, -3.306e-02, 3.408e-01, -1.634e-01, -4.101e-01) * s1[y+1][x+0];
	r += M4(3.244e-01, -1.807e-01, 9.495e-02, 2.616e-01, 6.297e-01, -1.471e-01, 2.348e-01, -1.606e-01, 1.055e-01, -1.260e-01, -5.778e-02, 1.661e-01, -1.175e-01, 4.612e-03, 3.870e-02, -3.973e-02) * s1[y+1][x+1];
	r += M4(6.278e-02, -4.541e-02, 2.595e-01, -1.178e-01, 8.173e-02, 1.218e-01, 3.309e-01, 6.887e-02, -1.885e-01, 2.312e-03, -1.735e-02, 1.461e-01, -8.943e-02, 1.864e-02, -1.478e-01, -1.517e-01) * s1[y+1][x+2];
	r += M4(-4.100e-02, -1.035e-01, -5.351e-02, -9.741e-02, 1.762e-01, 2.770e-01, 7.264e-02, -3.578e-02, 1.069e-02, 5.115e-02, -4.773e-02, -5.895e-02, 8.071e-02, 1.155e-01, -4.653e-02, 7.899e-02) * s1[y+2][x+0];
	r += M4(2.505e-01, 1.680e-01, 7.640e-02, -2.577e-02, 3.785e-01, 2.463e-01, 1.324e-01, -1.581e-01, -1.086e-02, -2.026e-01, -1.624e-01, 4.423e-02, 2.924e-02, 3.177e-01, 3.368e-01, 3.717e-01) * s1[y+2][x+1];
	r += M4(-1.085e-01, 1.428e-01, 9.438e-02, -1.401e-01, -8.274e-02, 1.829e-01, 2.282e-01, 6.937e-02, 4.658e-02, -6.762e-02, -2.677e-02, 1.534e-01, 2.490e-02, -3.871e-02, -2.009e-02, -1.502e-01) * s1[y+2][x+2];
	r += M4(-3.815e-02, -6.415e-02, 1.005e-03, 5.259e-02, 6.476e-02, -8.931e-02, -9.567e-02, -1.360e-01, 1.738e-02, -1.892e-02, -1.473e-02, -5.165e-03, -4.531e-02, 1.552e-01, 3.305e-02, 1.019e-01) * s2[y+0][x+0];
	r += M4(2.619e-01, -2.150e-01, 1.611e-01, 2.275e-01, 2.868e-02, -1.984e-03, 1.424e-01, 1.265e-01, 5.818e-02, -2.023e-02, -3.643e-02, -1.187e-02, -1.127e-02, 3.341e-02, 8.857e-02, 2.469e-01) * s2[y+0][x+1];
	r += M4(-3.467e-01, 3.035e-02, 3.608e-01, -2.371e-01, -4.267e-02, -8.229e-02, -9.985e-02, -8.660e-02, -4.697e-02, 2.977e-02, -1.094e-02, 4.182e-02, -2.020e-02, 6.665e-02, 1.300e-02, -1.519e-04) * s2[y+0][x+2];
	r += M4(6.417e-02, -2.229e-01, 8.304e-02, -3.377e-03, 8.319e-02, -3.720e-01, -1.139e-01, -4.450e-02, 2.560e-02, -6.969e-02, -1.964e-04, -2.212e-01, -1.553e-02, 6.656e-02, -2.229e-02, 9.759e-02) * s2[y+1][x+0];
	r += M4(-4.343e-01, -1.326e-02, 6.634e-04, -2.962e-01, 9.673e-02, 1.699e-01, 6.729e-02, 1.871e-02, -2.974e-02, -2.818e-02, 9.813e-02, 2.022e-02, 2.004e-02, 4.645e-02, 9.908e-02, 1.961e-01) * s2[y+1][x+1];
	r += M4(2.144e-01, -6.527e-01, 3.593e-02, -3.507e-02, 7.786e-02, -2.848e-02, 9.811e-02, -1.003e-01, 7.082e-02, -3.041e-04, 1.252e-01, -8.795e-02, 1.264e-01, 1.032e-01, 5.471e-02, 1.134e-01) * s2[y+1][x+2];
	r += M4(-1.170e-02, -3.369e-01, -9.602e-02, -3.198e-01, 5.317e-03, 2.831e-02, 1.324e-02, 2.125e-02, -9.013e-02, -6.504e-02, 1.241e-01, -1.136e-01, 8.513e-02, 9.207e-02, -4.315e-02, -1.469e-01) * s2[y+2][x+0];
	r += M4(-4.064e-01, 2.103e-01, 1.021e-01, -2.471e-01, 1.015e-02, 1.037e-01, 1.769e-02, 2.492e-03, -2.567e-01, -6.393e-02, 1.835e-01, 1.261e-02, 1.307e-01, 1.621e-01, 6.769e-02, 1.042e-01) * s2[y+2][x+1];
	r += M4(-1.062e-01, -3.515e-01, -1.299e-01, 1.643e-01, -1.956e-01, 6.485e-02, 7.234e-02, 3.132e-02, -6.212e-03, -4.253e-03, -8.407e-02, -4.938e-02, -9.251e-02, 1.838e-01, 2.002e-01, -4.349e-02) * s2[y+2][x+2];
	r += M4(-5.442e-02, 1.365e-02, 4.965e-02, 7.784e-02, -2.787e-02, -9.246e-02, 5.885e-03, -1.988e-01, 8.541e-04, 5.934e-02, -2.607e-02, 9.505e-02, 1.088e-02, 5.235e-02, 8.963e-03, 4.835e-02) * s3[y+0][x+0];
	r += M4(1.241e-02, 4.814e-02, 4.272e-02, 5.955e-02, 9.100e-03, 5.263e-04, -1.417e-02, 7.385e-02, 1.618e-01, 1.202e-01, 7.137e-02, -1.216e-01, 7.398e-02, -1.127e-01, 1.913e-02, 2.104e-01) * s3[y+0][x+1];
	r += M4(2.296e-02, 5.202e-02, -2.607e-02, 7.936e-02, 5.311e-03, -1.465e-01, 4.409e-03, -1.111e-01, -2.085e-01, 1.749e-02, -3.963e-02, -7.489e-03, 1.193e-01, 1.053e-02, -1.897e-02, -2.552e-03) * s3[y+0][x+2];
	r += M4(1.127e-02, 4.597e-02, 4.519e-02, 8.011e-02, 4.490e-02, -1.702e-01, -2.920e-04, 3.593e-02, -2.964e-02, -8.090e-02, 9.857e-02, 1.350e-01, 6.277e-03, -3.336e-02, 1.082e-01, 8.310e-02) * s3[y+1][x+0];
	r += M4(1.027e-01, -3.867e-02, -6.121e-02, -1.312e-02, 2.108e-02, 1.293e-01, -3.746e-02, 6.671e-02, -1.375e-01, -2.152e-01, 5.706e-01, -6.887e-02, -1.646e-01, 2.223e-02, 6.828e-02, 2.447e-01) * s3[y+1][x+1];
	r += M4(5.579e-04, 3.893e-02, -4.380e-02, 1.007e-01, 1.274e-01, -5.576e-02, -4.103e-02, -4.980e-02, 2.490e-01, 5.316e-02, 1.677e-01, 1.084e-02, -1.383e-01, -1.612e-01, -1.138e-01, -8.808e-02) * s3[y+1][x+2];
	r += M4(-2.142e-02, -7.877e-02, -5.221e-02, 6.831e-02, -4.717e-02, -1.395e-02, 2.329e-02, 5.319e-02, -1.406e-01, -1.032e-01, 3.896e-02, 2.567e-02, 3.689e-02, -7.638e-02, 3.864e-02, -2.554e-02) * s3[y+2][x+0];
	r += M4(-1.388e-02, 1.083e-02, -2.985e-02, 6.069e-02, 3.254e-02, 6.368e-02, 1.703e-01, 7.779e-02, -2.696e-01, -1.272e-01, 2.359e-01, -1.003e-02, -1.172e-01, -1.630e-01, 1.390e-01, 2.702e-01) * s3[y+2][x+1];
	r += M4(-1.160e-01, -7.045e-03, 8.714e-02, 9.753e-02, -8.823e-02, 2.056e-02, 1.467e-02, 2.302e-02, -8.145e-02, -1.368e-01, -6.280e-03, 8.723e-02, -1.742e-01, -5.231e-02, 2.410e-01, -1.778e-01) * s3[y+2][x+2];
	r += V4(3.116e-02, 7.534e-03, 1.292e-02, -4.692e-03);
	return vec4(r);
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv3_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
			s2[ay][ax] = l1(x - 1, y - 1);
			s1[ay][ax] = -max(-s0[ay][ax], V4(0.0));
			s0[ay][ax] = max(s0[ay][ax], V4(0.0));
			s3[ay][ax] = -max(-s2[ay][ax], V4(0.0));
			s2[ay][ax] = max(s2[ay][ax], V4(0.0));
		}
	}
	barrier();
	vec4 r0 = f0(xy.x, xy.y);
	vec4 r1 = f1(xy.x, xy.y);
	imageStore(out_image, opos + ivec2(0, 0), r0);
	imageStore(out_image, opos + ivec2(1, 0), r1);
}

//!DESC CuNNy-8x8C-RCAS-conv5
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv4
//!BIND LUMA
//!SAVE conv5
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(texelFetch(conv4_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv4_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 s0[10][10];
shared V4 s1[10][10];
shared V4 s2[10][10];
shared V4 s3[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-1.445e-01, 4.404e-02, 3.059e-02, -3.869e-02, -3.198e-01, 3.642e-01, 1.103e-01, -1.077e-01, 2.036e-02, -2.896e-03, -1.609e-02, -2.607e-02, 3.074e-02, -8.859e-02, 1.279e-01, -7.178e-02) * s0[y+0][x+0];
	r += M4(2.327e-01, 4.390e-02, 2.150e-01, 1.081e-01, 3.957e-01, 5.704e-01, 1.582e-01, 2.987e-01, 1.217e-02, 1.746e-01, -3.265e-02, 4.147e-02, 2.482e-02, 4.382e-02, 6.953e-02, -5.730e-02) * s0[y+0][x+1];
	r += M4(-7.487e-03, -8.588e-02, -2.574e-02, -6.326e-02, 1.025e-01, 2.773e-01, -3.911e-01, 2.038e-02, 1.232e-02, 6.765e-02, -1.027e-01, -7.157e-03, 7.627e-02, -9.340e-02, 1.091e-01, 8.082e-03) * s0[y+0][x+2];
	r += M4(-2.023e-01, -1.112e-01, -4.259e-02, -1.022e-01, -1.314e-01, 2.926e-01, -5.747e-01, -3.132e-01, 1.280e-01, -7.461e-02, -2.890e-02, -3.841e-02, -8.282e-02, -1.069e-01, 2.142e-01, 1.811e-02) * s0[y+1][x+0];
	r += M4(2.056e-01, 1.874e-01, -1.247e-01, 1.528e-01, 4.782e-01, 1.440e+00, -1.421e+00, 1.330e+00, 2.539e-01, 3.430e-01, -1.144e-01, -1.236e-02, -3.184e-01, -2.188e-01, 7.466e-02, 1.335e-01) * s0[y+1][x+1];
	r += M4(7.216e-02, 4.831e-02, 1.811e-02, 2.811e-02, 3.734e-01, 4.829e-01, 1.395e-01, 4.545e-01, 2.360e-02, 1.003e-01, 3.324e-02, -1.500e-01, 5.169e-02, 1.112e-01, 6.318e-02, 2.122e-01) * s0[y+1][x+2];
	r += M4(2.104e-02, -3.331e-02, 6.138e-02, -1.013e-01, 3.260e-01, 1.583e-01, -9.003e-02, -4.622e-02, 3.612e-02, 6.670e-03, 3.392e-02, 2.084e-02, -8.878e-02, 1.701e-02, 4.855e-02, -1.623e-02) * s0[y+2][x+0];
	r += M4(1.195e-01, -1.113e-01, 7.396e-02, 5.881e-02, -2.228e-01, 3.256e-01, 3.846e-02, -2.682e-01, 1.452e-01, -4.050e-04, -8.113e-02, -3.100e-02, -2.056e-01, -1.976e-02, -5.867e-02, 1.472e-02) * s0[y+2][x+1];
	r += M4(4.398e-02, -8.674e-02, -5.504e-02, -1.753e-02, -2.639e-01, 3.106e-01, -5.128e-01, 2.378e-01, -6.372e-02, -8.330e-03, -3.057e-01, -1.217e-02, -4.569e-03, -1.172e-02, 2.319e-01, 1.119e-02) * s0[y+2][x+2];
	r += M4(-1.522e-01, -1.358e-02, 4.637e-02, 6.823e-02, -4.993e-02, -5.557e-03, -7.962e-03, -3.306e-02, -9.344e-02, -3.718e-02, 5.072e-02, -4.746e-02, 8.489e-02, 1.782e-02, 8.978e-02, -1.283e-01) * s1[y+0][x+0];
	r += M4(1.665e-01, 4.224e-02, 7.654e-02, 1.324e-01, -2.147e-02, 5.048e-02, -2.204e-02, 3.967e-02, -1.563e-01, 1.090e-02, 9.109e-02, -5.822e-02, 2.068e-02, 1.893e-01, 5.325e-03, 3.131e-02) * s1[y+0][x+1];
	r += M4(-7.397e-02, -3.695e-02, -1.728e-02, -1.787e-02, 8.931e-02, 2.511e-02, -6.327e-04, -1.356e-02, 3.977e-03, -1.017e-01, 1.123e-01, -2.903e-02, 2.946e-03, -7.391e-03, 4.464e-02, -2.448e-02) * s1[y+0][x+2];
	r += M4(-2.895e-01, -1.820e-01, -1.121e-01, -7.397e-02, 3.177e-02, -1.327e-02, -6.642e-02, -3.033e-03, 1.836e-02, -1.470e-01, 3.049e-02, -6.969e-02, -3.061e-02, -2.501e-02, 2.787e-02, 1.505e-02) * s1[y+1][x+0];
	r += M4(2.590e-02, -1.183e-01, -4.016e-01, 1.210e-01, -1.415e-01, 9.365e-03, -3.436e-02, 1.412e-01, -2.184e-02, -4.080e-03, 5.724e-02, -6.873e-02, -2.952e-01, -2.112e-01, 2.487e-01, -1.510e-01) * s1[y+1][x+1];
	r += M4(3.287e-02, -4.555e-02, -5.899e-02, -1.176e-02, -4.300e-02, -1.476e-01, -4.486e-02, 5.886e-02, -1.286e-01, -8.905e-02, 1.263e-01, -3.910e-02, -6.291e-02, 1.753e-01, -3.436e-02, -2.064e-02) * s1[y+1][x+2];
	r += M4(-9.302e-02, 2.851e-03, -3.815e-03, -3.464e-03, 1.703e-01, 8.446e-02, 8.970e-02, 7.943e-03, 1.062e-01, -3.650e-02, 9.500e-02, 7.780e-02, -2.800e-03, -1.317e-02, -3.840e-02, 3.703e-03) * s1[y+2][x+0];
	r += M4(3.771e-02, 2.760e-02, 4.172e-02, -8.443e-03, -1.192e-01, -7.607e-02, 1.375e-01, -1.909e-01, 1.881e-01, -6.496e-02, 7.318e-02, -3.074e-03, 5.238e-02, 6.665e-02, -7.333e-02, 2.746e-02) * s1[y+2][x+1];
	r += M4(1.024e-01, -7.720e-02, -5.104e-02, -5.155e-02, 5.511e-02, 5.676e-02, -5.664e-02, -2.833e-04, 4.199e-02, -2.781e-02, -1.901e-03, 3.094e-02, 1.365e-02, 6.652e-02, 9.207e-03, 1.848e-02) * s1[y+2][x+2];
	r += M4(-2.505e-01, -4.605e-02, -1.399e-01, 1.876e-02, -4.172e-02, 1.044e-02, -7.392e-02, -8.667e-02, -7.779e-02, -2.046e-02, 9.603e-02, -5.332e-02, 1.557e-01, -2.437e-01, 1.440e-02, 1.090e-01) * s2[y+0][x+0];
	r += M4(-2.959e-01, -1.200e-01, 8.156e-04, 2.398e-01, -8.012e-02, 1.438e-01, 8.460e-03, -6.640e-02, -5.770e-02, -8.597e-02, 8.275e-02, 1.783e-01, 2.152e-01, -7.453e-02, -2.994e-02, 9.582e-02) * s2[y+0][x+1];
	r += M4(-2.914e-02, -7.541e-02, 9.500e-02, 1.259e-01, 6.508e-02, 9.672e-02, 5.102e-02, 3.750e-02, 2.843e-02, -2.149e-01, 2.125e-02, 5.504e-02, 5.685e-02, -6.695e-02, 1.074e-01, 3.052e-02) * s2[y+0][x+2];
	r += M4(-1.961e-01, -5.181e-02, 4.784e-02, 5.433e-02, -5.853e-02, -5.652e-02, 7.381e-02, -3.837e-02, -9.618e-02, 5.066e-03, -2.171e-02, 1.819e-01, -6.196e-02, -2.188e-01, -2.129e-01, -6.817e-02) * s2[y+1][x+0];
	r += M4(-1.646e-02, -3.330e-01, -3.192e-01, 1.302e-01, -3.320e-01, -2.013e-01, 2.224e-01, 6.510e-02, 3.017e-02, -3.491e-02, -2.029e-01, 3.740e-01, 6.309e-01, -4.217e-02, 1.087e-01, 2.306e-02) * s2[y+1][x+1];
	r += M4(2.305e-02, -1.487e-01, -6.784e-02, 2.027e-02, 1.454e-01, 5.322e-02, 2.664e-02, -1.020e-01, -2.414e-02, -1.009e-01, -1.526e-01, 1.385e-01, 2.509e-01, 5.350e-02, -5.581e-02, -3.054e-01) * s2[y+1][x+2];
	r += M4(-9.174e-02, 2.000e-02, -1.662e-01, 3.117e-02, 1.566e-02, -4.268e-02, 5.992e-02, 2.299e-02, 4.648e-02, -4.400e-02, 1.204e-02, -1.144e-01, 6.370e-02, -1.706e-01, -5.004e-03, 1.301e-01) * s2[y+2][x+0];
	r += M4(-8.663e-02, -1.415e-01, -7.172e-02, -1.405e-02, -6.206e-02, 1.729e-01, -2.607e-01, -8.485e-02, 1.015e-01, -1.338e-02, 1.319e-02, -6.761e-02, 2.050e-01, -6.661e-02, -4.730e-02, 7.658e-02) * s2[y+2][x+1];
	r += M4(-1.118e-02, -1.005e-01, 6.965e-02, 7.367e-03, -2.368e-02, -1.950e-03, -1.660e-02, -5.445e-02, 6.493e-02, -5.404e-02, -9.401e-02, 2.600e-02, 4.336e-01, -3.315e-01, 2.011e-01, -2.527e-01) * s2[y+2][x+2];
	r += M4(-8.519e-02, -2.243e-02, -1.087e-01, -2.076e-02, -1.685e-01, 1.824e-03, -1.165e-01, -9.055e-02, 4.465e-02, -4.045e-03, 5.565e-03, -4.642e-03, 2.316e-02, 2.794e-02, -1.311e-03, 5.715e-02) * s3[y+0][x+0];
	r += M4(-6.806e-02, 3.724e-02, -2.127e-03, 7.787e-02, -8.978e-02, 2.357e-01, -7.738e-02, -5.602e-03, 1.039e-01, -2.631e-02, 7.960e-02, -4.387e-02, 8.724e-03, -1.424e-01, -1.035e-02, -1.426e-02) * s3[y+0][x+1];
	r += M4(-3.907e-05, -3.370e-03, -5.588e-02, 5.269e-02, -8.986e-02, 1.604e-01, 3.214e-03, -5.712e-02, 1.023e-02, -6.999e-02, 1.481e-02, 6.051e-03, 5.962e-02, 1.707e-02, 3.485e-02, -6.888e-02) * s3[y+0][x+2];
	r += M4(6.457e-02, 1.304e-01, -7.274e-02, -4.320e-02, 3.309e-02, 4.864e-02, 8.131e-02, -9.964e-02, 2.410e-01, 8.913e-02, 1.154e-01, 3.690e-02, 1.006e-01, 3.463e-03, 1.040e-02, -3.334e-02) * s3[y+1][x+0];
	r += M4(9.002e-02, -4.136e-02, -1.769e-01, 1.114e-01, -2.132e-01, 2.465e-01, 2.411e-01, -1.265e-01, 5.769e-02, 2.212e-01, -8.791e-02, 2.622e-02, -1.577e-01, -2.114e-01, 1.006e-01, 1.043e-01) * s3[y+1][x+1];
	r += M4(4.780e-02, 3.052e-02, -1.112e-02, 6.170e-02, -1.516e-02, 6.335e-02, 2.497e-02, -7.791e-02, -8.466e-03, -6.967e-02, -1.280e-02, 7.783e-02, -2.030e-02, 1.685e-02, 9.946e-02, 9.373e-04) * s3[y+1][x+2];
	r += M4(4.271e-02, 8.374e-04, -5.449e-03, -4.257e-02, -1.682e-02, 1.236e-01, 3.669e-02, 6.854e-02, 9.475e-03, -2.976e-02, 2.834e-02, -6.317e-03, -9.507e-02, -1.277e-02, 3.363e-02, 5.390e-02) * s3[y+2][x+0];
	r += M4(-8.269e-02, -3.797e-02, 2.301e-02, -1.227e-02, 3.308e-02, 2.365e-01, 7.843e-02, -2.084e-02, -6.678e-02, -9.798e-02, 1.086e-01, -5.332e-02, 1.831e-01, -9.071e-02, 8.186e-02, 2.861e-02) * s3[y+2][x+1];
	r += M4(-2.602e-02, 5.896e-02, 9.676e-02, 7.340e-02, -6.123e-02, 4.452e-02, 5.493e-02, -2.755e-02, 3.732e-03, -4.686e-02, -7.070e-02, 5.401e-04, 4.300e-02, -7.992e-02, 8.388e-02, -3.889e-02) * s3[y+2][x+2];
	r += V4(-2.075e-02, 6.771e-03, 3.315e-03, -3.104e-02);
	return vec4(r);
}
vec4 f1(int x, int y) {
	V4 r = V4(0.0);
	r += M4(2.395e-02, 5.925e-03, -1.605e-02, 3.929e-02, -3.836e-02, 2.043e-01, 2.145e-01, 6.190e-01, -1.005e-02, -1.177e-01, 4.044e-02, 1.159e-02, 3.418e-02, 1.827e-01, -5.806e-02, 1.790e-01) * s0[y+0][x+0];
	r += M4(7.952e-02, -1.392e-01, -2.021e-02, -1.141e-01, -4.538e-01, 3.788e-01, -4.175e-01, -2.220e-02, -4.908e-03, -7.472e-02, -1.214e-01, -4.040e-02, 1.901e-01, 1.820e-01, -1.131e-01, 2.946e-01) * s0[y+0][x+1];
	r += M4(8.125e-02, -1.208e-01, 4.211e-02, 6.003e-02, 2.094e-01, 1.338e-01, 2.165e-01, -1.762e-01, -1.527e-02, -5.773e-02, -1.957e-02, -3.196e-02, 4.518e-02, 3.081e-02, -2.417e-01, 1.647e-01) * s0[y+0][x+2];
	r += M4(9.673e-02, -2.112e-01, 2.026e-01, -3.980e-01, -1.163e-01, 8.425e-01, -2.962e-02, -4.107e-01, 1.180e-02, -6.624e-02, 7.903e-02, 9.576e-02, -3.682e-02, -7.434e-02, -1.374e-01, 3.335e-01) * s0[y+1][x+0];
	r += M4(-9.109e-02, -3.944e-01, 2.152e-01, -8.176e-02, 4.982e-01, -1.206e-01, -2.674e-01, -8.970e-01, 1.398e-01, -1.843e-01, 6.542e-02, 1.601e-01, -2.156e-01, -1.003e-01, 1.706e-01, -6.337e-02) * s0[y+1][x+1];
	r += M4(-4.963e-02, 4.306e-02, -1.693e-01, 4.366e-02, -3.420e-04, 2.231e-01, -3.475e-02, 2.670e-01, -3.201e-03, -1.571e-01, 5.744e-03, 4.140e-02, -2.390e-02, 2.221e-01, 4.623e-02, 4.916e-02) * s0[y+1][x+2];
	r += M4(1.533e-01, 9.837e-02, 2.037e-01, 5.557e-03, -3.939e-03, 4.645e-01, -4.660e-02, 1.006e-01, -4.144e-02, 1.307e-02, -5.850e-02, -1.864e-02, 3.682e-02, 2.341e-02, -9.404e-02, 2.027e-01) * s0[y+2][x+0];
	r += M4(4.994e-02, -7.547e-02, 3.807e-01, 3.635e-03, 3.546e-01, 5.243e-01, 6.643e-01, 8.377e-01, -3.229e-02, 4.481e-02, -2.010e-02, 5.491e-03, 4.341e-02, 6.964e-02, 6.994e-02, -5.734e-02) * s0[y+2][x+1];
	r += M4(5.141e-02, 7.085e-02, 2.144e-01, 8.429e-02, -1.163e-01, 4.540e-01, -3.904e-02, -7.463e-02, 6.870e-02, -1.528e-01, 3.093e-02, 7.177e-02, -2.900e-04, -1.784e-02, -9.301e-02, -1.962e-02) * s0[y+2][x+2];
	r += M4(-7.017e-02, 9.840e-02, 1.437e-02, 2.087e-01, -7.566e-04, 4.223e-02, 1.236e-04, -1.748e-02, -6.119e-02, -4.558e-02, -4.063e-02, -3.529e-02, -1.903e-03, 3.686e-02, -1.429e-02, 1.432e-01) * s1[y+0][x+0];
	r += M4(-6.616e-02, 5.544e-02, -1.384e-02, 1.057e-01, 1.412e-03, 2.413e-02, -1.174e-01, 9.293e-02, -4.997e-02, -1.078e-01, -3.233e-02, -1.118e-01, 5.536e-02, 7.239e-02, 2.321e-02, 1.213e-01) * s1[y+0][x+1];
	r += M4(9.250e-03, -4.370e-02, 1.117e-01, 3.189e-02, -4.487e-02, -3.494e-02, -5.420e-03, -1.225e-02, 5.831e-03, -3.986e-02, 5.069e-02, -9.691e-03, -2.435e-02, -2.621e-02, -9.185e-03, -8.083e-03) * s1[y+0][x+2];
	r += M4(1.536e-01, -3.127e-02, 1.688e-01, -1.412e-01, -6.756e-02, 2.637e-02, 1.012e-03, -9.971e-02, 1.256e-01, -1.865e-01, 6.186e-02, -2.129e-01, 2.394e-02, -3.826e-02, 2.057e-02, 2.432e-01) * s1[y+1][x+0];
	r += M4(2.263e-02, -6.837e-02, 2.513e-01, 1.497e-03, 1.634e-01, -1.052e-01, -7.824e-02, -1.831e-01, 3.079e-01, -4.991e-01, -8.471e-02, -2.132e-01, -1.285e-01, -1.868e-01, 3.816e-01, 1.187e-01) * s1[y+1][x+1];
	r += M4(-1.368e-02, -9.911e-02, -9.864e-02, 7.626e-02, -4.886e-02, 9.747e-02, 9.985e-02, 1.016e-01, 1.396e-01, -2.190e-01, -1.941e-01, -1.019e-01, 4.424e-02, 5.988e-04, 5.216e-02, 1.422e-02) * s1[y+1][x+2];
	r += M4(1.067e-01, 9.431e-03, 7.797e-02, -1.642e-02, -7.625e-02, 2.221e-02, 2.712e-02, 1.708e-01, -3.998e-02, 4.438e-03, -1.504e-01, -5.166e-02, -6.067e-02, -8.641e-02, 8.396e-04, 1.228e-01) * s1[y+2][x+0];
	r += M4(-3.923e-02, -9.242e-02, 8.086e-02, -8.985e-03, 3.309e-02, -4.103e-02, 9.574e-02, 4.602e-02, 6.998e-02, -1.382e-04, -1.543e-01, -4.730e-02, -2.192e-01, -2.715e-02, -7.626e-02, -2.857e-01) * s1[y+2][x+1];
	r += M4(2.984e-02, 3.547e-02, 1.093e-01, 9.619e-02, -1.080e-02, -2.562e-03, -9.813e-02, -9.593e-02, 4.138e-02, -1.348e-01, -5.340e-02, -7.390e-02, -3.414e-02, 2.907e-02, -9.683e-02, -5.694e-02) * s1[y+2][x+2];
	r += M4(-1.167e-01, 4.899e-02, 1.123e-01, -4.228e-01, -4.076e-02, 3.600e-02, 2.817e-02, -6.120e-02, 7.386e-02, 7.537e-02, -6.202e-02, 1.510e-01, 1.122e-01, -2.057e-02, 6.130e-02, -9.248e-02) * s2[y+0][x+0];
	r += M4(-1.056e-01, -7.451e-02, 8.878e-02, -3.921e-01, -7.953e-02, -6.872e-02, -1.303e-01, 9.270e-02, 1.611e-03, 2.266e-01, 3.303e-02, 1.583e-01, 2.861e-03, -4.223e-02, -2.379e-01, 4.805e-02) * s2[y+0][x+1];
	r += M4(-7.948e-02, -1.809e-01, -1.247e-01, -1.148e-01, -9.252e-03, -9.368e-02, -1.142e-02, -6.520e-02, 2.719e-03, 2.256e-02, 7.233e-02, -3.306e-02, -6.627e-02, -9.002e-02, -3.616e-01, -1.497e-01) * s2[y+0][x+2];
	r += M4(1.963e-01, -3.129e-01, 7.775e-02, -1.268e-01, -9.129e-03, -2.001e-01, 7.641e-02, -4.730e-03, 1.609e-02, 1.597e-02, 7.925e-02, 3.842e-02, -1.048e-01, 3.262e-03, 1.120e-01, -4.080e-01) * s2[y+1][x+0];
	r += M4(1.512e-01, -2.189e-01, 1.947e-01, -2.116e-01, 1.423e-01, -2.589e-01, 3.508e-01, 1.294e-01, 2.494e-01, 1.804e-03, 8.843e-02, 6.184e-03, -3.259e-01, -3.252e-01, -4.832e-01, 1.163e-02) * s2[y+1][x+1];
	r += M4(2.162e-02, -5.748e-02, -2.463e-03, -8.511e-02, 1.100e-01, -3.976e-02, 2.436e-01, 8.169e-03, -1.139e-01, 1.036e-01, -1.301e-01, -1.989e-02, 1.364e-01, -6.780e-02, -1.342e-01, -2.790e-01) * s2[y+1][x+2];
	r += M4(-9.557e-02, -3.200e-02, 8.395e-02, -1.568e-01, 9.419e-02, -5.933e-03, 4.833e-02, -1.111e-01, 1.587e-01, -1.413e-01, 3.034e-01, 1.589e-01, 9.581e-02, -2.807e-01, -4.739e-02, -1.875e-01) * s2[y+2][x+0];
	r += M4(1.178e-01, 2.300e-02, 9.260e-02, 4.964e-02, 1.647e-02, -8.035e-03, 1.468e-01, -2.911e-02, -8.182e-02, 2.540e-01, 1.138e-02, 3.507e-01, 7.254e-02, -9.384e-02, -1.851e-01, -1.580e-01) * s2[y+2][x+1];
	r += M4(7.234e-02, -1.085e-01, 7.428e-02, -1.482e-02, 3.058e-02, -1.998e-03, 8.063e-02, 1.221e-01, -1.438e-02, -4.182e-02, 2.782e-01, -5.804e-02, 6.909e-02, -4.317e-02, 2.264e-01, -1.403e-01) * s2[y+2][x+2];
	r += M4(1.057e-01, -2.505e-04, 4.966e-03, -4.463e-02, -2.755e-02, 5.652e-02, 1.064e-01, -1.965e-01, 4.800e-02, 5.566e-03, -4.950e-02, 8.922e-02, 2.300e-02, 3.126e-02, 1.037e-02, -1.485e-02) * s3[y+0][x+0];
	r += M4(1.137e-02, -5.986e-02, 2.215e-02, -1.548e-01, -4.605e-02, -2.786e-02, -2.919e-01, 2.916e-02, 1.509e-01, 2.180e-01, -2.281e-02, 1.193e-01, -3.992e-02, -7.096e-02, 5.819e-02, 3.189e-02) * s3[y+0][x+1];
	r += M4(-2.636e-02, -9.558e-02, -3.038e-02, -4.206e-02, 1.528e-02, -1.139e-01, 7.263e-03, -5.182e-02, 2.680e-02, -4.739e-03, 5.259e-02, 1.010e-02, -1.481e-02, 6.541e-03, 3.765e-04, 5.298e-02) * s3[y+0][x+2];
	r += M4(2.549e-01, 1.612e-02, -5.411e-02, -2.142e-02, 1.472e-01, -2.764e-01, 6.062e-02, 3.857e-02, 1.272e-01, 1.581e-01, -3.701e-02, 4.153e-02, -1.221e-01, 4.510e-02, 5.990e-02, 4.100e-02) * s3[y+1][x+0];
	r += M4(3.527e-01, -1.556e-01, 2.863e-01, -1.515e-01, -2.072e-01, -1.687e-01, 9.643e-02, 1.316e-01, 2.235e-01, 2.052e-01, -1.316e-01, -6.757e-02, -3.123e-02, 1.148e-02, 5.504e-02, -1.354e-01) * s3[y+1][x+1];
	r += M4(7.804e-02, 3.644e-03, -6.281e-02, -7.203e-02, 8.386e-02, 1.254e-01, 2.231e-01, 9.346e-02, -5.476e-02, 2.333e-02, -1.526e-02, -2.128e-02, -6.922e-02, 5.259e-03, 8.359e-02, -2.023e-02) * s3[y+1][x+2];
	r += M4(-1.980e-01, 7.826e-02, -1.317e-01, -7.533e-02, 3.586e-02, -1.619e-01, 2.797e-02, -9.401e-02, -2.239e-02, -1.491e-01, -8.131e-02, 8.127e-03, 4.602e-02, 2.643e-02, -1.668e-02, -9.946e-04) * s3[y+2][x+0];
	r += M4(4.603e-02, 2.747e-02, -1.020e-01, 1.022e-01, 7.362e-02, -2.734e-02, -3.842e-02, -7.002e-02, 2.079e-01, 1.106e-01, 2.892e-02, 3.307e-02, 5.556e-02, -9.454e-02, 1.174e-01, 7.439e-02) * s3[y+2][x+1];
	r += M4(-7.364e-02, -7.983e-03, 1.838e-02, -1.005e-01, -5.526e-03, -2.939e-02, -1.117e-01, 1.038e-01, 4.845e-02, -1.069e-01, 9.615e-03, -5.529e-02, 1.125e-01, -1.199e-01, 1.360e-01, 5.884e-02) * s3[y+2][x+2];
	r += V4(3.198e-02, 9.426e-03, -1.975e-02, -1.957e-02);
	return vec4(r);
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv4_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
			s2[ay][ax] = l1(x - 1, y - 1);
			s1[ay][ax] = -max(-s0[ay][ax], V4(0.0));
			s0[ay][ax] = max(s0[ay][ax], V4(0.0));
			s3[ay][ax] = -max(-s2[ay][ax], V4(0.0));
			s2[ay][ax] = max(s2[ay][ax], V4(0.0));
		}
	}
	barrier();
	vec4 r0 = f0(xy.x, xy.y);
	vec4 r1 = f1(xy.x, xy.y);
	imageStore(out_image, opos + ivec2(0, 0), r0);
	imageStore(out_image, opos + ivec2(1, 0), r1);
}

//!DESC CuNNy-8x8C-RCAS-conv6
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv5
//!BIND LUMA
//!SAVE conv6
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(texelFetch(conv5_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv5_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 s0[10][10];
shared V4 s1[10][10];
shared V4 s2[10][10];
shared V4 s3[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-1.085e-02, -3.175e-02, -2.737e-02, -1.078e-01, 6.623e-02, 2.040e-02, -6.040e-02, 8.524e-02, -7.635e-02, -1.114e-01, -1.640e-01, -1.372e-01, 5.985e-02, -1.566e-02, -3.308e-02, -8.538e-02) * s0[y+0][x+0];
	r += M4(-1.481e-01, -1.612e-01, -1.325e-01, -1.176e-01, 9.010e-02, -6.228e-03, 4.463e-02, 5.087e-02, -1.493e-01, -9.818e-02, 8.447e-02, 6.067e-02, -5.520e-02, -1.871e-01, -4.786e-02, 5.980e-02) * s0[y+0][x+1];
	r += M4(8.452e-02, -5.458e-02, -1.568e-01, 1.445e-01, -6.894e-02, 1.226e-03, 6.180e-02, -5.118e-02, 2.437e-02, -1.078e-01, 2.920e-01, 1.302e-02, 6.143e-03, -3.319e-02, -7.122e-02, -6.494e-02) * s0[y+0][x+2];
	r += M4(2.138e-01, 1.502e-02, 8.442e-02, 2.022e-01, -2.147e-01, -1.460e-01, -1.666e-01, -5.029e-02, -3.307e-01, -5.220e-02, 8.468e-02, 1.782e-01, -1.191e-01, 2.340e-01, 1.202e-01, 2.730e-01) * s0[y+1][x+0];
	r += M4(1.256e-02, -6.498e-02, -2.766e-01, -1.286e-01, -5.007e-03, 1.159e-01, -2.134e-02, 3.935e-01, -1.413e-02, -3.073e-01, 5.444e-02, 9.160e-02, -2.206e-01, 3.331e-01, 1.373e-01, 3.448e-01) * s0[y+1][x+1];
	r += M4(1.402e-01, -7.881e-02, -1.610e-01, 1.667e-03, 4.965e-02, -7.788e-02, -1.487e-04, 4.124e-03, -9.555e-02, -1.957e-01, 1.065e-01, 6.224e-02, -9.583e-02, -1.646e-01, -7.635e-03, 1.033e-01) * s0[y+1][x+2];
	r += M4(-1.218e-02, -1.042e-01, -2.121e-02, 2.575e-02, -6.793e-02, 3.035e-02, -1.962e-02, -6.910e-02, -7.538e-02, -6.990e-02, -1.043e-01, -1.082e-01, -9.348e-02, 2.829e-03, -8.962e-02, 1.553e-01) * s0[y+2][x+0];
	r += M4(2.250e-01, -2.194e-01, -6.479e-02, -1.461e-02, 2.235e-02, -4.370e-02, 2.146e-01, 1.066e-01, -5.630e-02, -1.252e-01, 1.763e-01, 6.815e-02, 1.320e-02, 6.042e-02, 5.589e-01, 2.018e-01) * s0[y+2][x+1];
	r += M4(4.714e-02, -6.649e-02, -2.281e-01, 6.294e-02, -3.857e-03, 2.228e-02, -3.130e-02, 1.216e-03, -2.884e-02, -6.107e-02, -6.369e-02, -1.432e-01, -2.695e-03, 2.358e-02, -1.093e-01, 3.948e-02) * s0[y+2][x+2];
	r += M4(-5.059e-02, 3.991e-02, -3.951e-02, -5.217e-02, 7.213e-02, -9.168e-02, 4.427e-02, 8.166e-02, -5.479e-02, -1.714e-01, -3.143e-02, -2.442e-02, -1.365e-02, 2.175e-04, -4.423e-02, 2.058e-02) * s1[y+0][x+0];
	r += M4(-1.087e-01, -6.772e-02, 2.237e-02, -5.376e-02, 1.012e-01, -1.246e-01, -3.864e-04, -6.129e-02, -5.413e-02, -1.233e-01, 4.649e-02, -7.966e-02, 1.824e-02, 2.142e-02, 2.036e-02, 1.180e-01) * s1[y+0][x+1];
	r += M4(2.455e-02, -4.759e-02, -2.148e-02, 1.995e-02, -7.882e-02, -5.853e-02, 4.377e-02, 6.973e-03, -1.643e-02, -5.546e-02, 3.533e-02, -4.195e-02, 2.299e-02, -1.126e-02, -4.398e-02, -5.230e-02) * s1[y+0][x+2];
	r += M4(7.656e-02, -5.181e-02, 2.809e-02, 5.956e-02, -1.303e-01, 2.407e-02, -1.016e-01, -1.204e-01, -1.315e-01, -2.312e-02, -7.348e-02, 2.089e-02, -7.055e-02, -4.309e-03, 1.662e-02, 2.711e-02) * s1[y+1][x+0];
	r += M4(-1.175e-01, 1.663e-01, -5.079e-02, 1.172e-02, -2.544e-02, -1.808e-02, 1.171e-01, 1.570e-01, -2.276e-02, -1.414e-01, -2.070e-02, -1.931e-01, 2.891e-01, 2.241e-01, 1.460e-01, 1.233e-01) * s1[y+1][x+1];
	r += M4(1.451e-01, 8.952e-02, -4.251e-02, 6.768e-02, 3.105e-02, -8.525e-02, 4.362e-02, -7.592e-02, -3.221e-02, -5.109e-02, 1.468e-01, 4.767e-02, 1.149e-02, 5.841e-03, 2.438e-01, -8.452e-03) * s1[y+1][x+2];
	r += M4(-1.225e-01, -9.029e-02, -6.598e-02, -1.058e-02, -1.537e-01, -2.259e-02, -6.201e-02, -1.092e-01, -3.172e-02, -1.945e-02, -2.834e-02, -2.068e-02, -1.820e-02, -6.204e-02, -2.013e-01, -2.784e-02) * s1[y+2][x+0];
	r += M4(7.620e-02, -3.059e-02, -7.580e-02, 4.510e-03, 2.018e-01, 1.227e-01, 4.142e-02, 5.902e-02, -1.551e-03, 7.339e-02, 3.153e-02, 1.888e-02, -1.527e-02, -8.670e-03, 1.281e-01, 6.007e-02) * s1[y+2][x+1];
	r += M4(-1.288e-02, 4.251e-02, 1.552e-02, 6.725e-02, 9.310e-02, 3.254e-02, -8.931e-02, 3.259e-02, -5.598e-02, -9.969e-03, 1.858e-02, -1.498e-02, 5.003e-02, 6.366e-02, -7.078e-02, -4.028e-02) * s1[y+2][x+2];
	r += M4(2.188e-02, 8.143e-03, -1.441e-02, 4.649e-02, -4.429e-02, -6.074e-02, -1.096e-01, 1.150e-01, 3.170e-02, 8.399e-02, 6.943e-02, 9.941e-02, 6.601e-02, 2.151e-01, 5.761e-02, -5.031e-02) * s2[y+0][x+0];
	r += M4(1.318e-02, 9.911e-02, 2.609e-02, 3.235e-02, -3.969e-02, 9.341e-02, 1.403e-01, -1.663e-01, -5.145e-02, -1.706e-02, 5.411e-02, 3.452e-02, 1.173e-01, -1.086e-01, 1.727e-02, 1.006e-01) * s2[y+0][x+1];
	r += M4(8.620e-02, -2.378e-02, 7.955e-02, -1.728e-02, -2.012e-02, 3.119e-02, 3.799e-02, -9.907e-02, -1.067e-01, -4.625e-02, -1.304e-02, -3.221e-02, -8.401e-02, 2.510e-02, 1.481e-02, 3.635e-03) * s2[y+0][x+2];
	r += M4(2.299e-02, -1.081e-01, -2.542e-02, 3.833e-02, 3.354e-03, -3.429e-02, 9.253e-02, -4.575e-02, -1.888e-01, -8.916e-02, -2.223e-01, -1.440e-01, 1.714e-01, 2.543e-01, 1.078e-01, -2.250e-01) * s2[y+1][x+0];
	r += M4(-7.427e-02, 8.251e-02, -1.117e-01, 4.878e-02, -1.622e-01, -1.732e-01, -2.949e-01, -2.588e-02, 6.120e-02, -1.073e-01, 1.280e-01, -3.685e-03, 9.849e-02, 2.288e-01, 4.126e-02, -2.603e-01) * s2[y+1][x+1];
	r += M4(-8.764e-02, -1.268e-01, 1.959e-03, 1.400e-02, -7.935e-02, -4.119e-03, 1.401e-01, 1.021e-01, 3.578e-02, -8.733e-02, 1.067e-01, 5.908e-02, 1.387e-01, 7.504e-02, -9.493e-03, -1.578e-01) * s2[y+1][x+2];
	r += M4(1.706e-02, -6.741e-02, 4.421e-02, 4.229e-03, -3.093e-02, -5.092e-02, 9.937e-03, 7.007e-02, 2.253e-02, 3.005e-02, 1.229e-01, 5.842e-02, 1.925e-01, 6.790e-02, 4.902e-03, 9.363e-02) * s2[y+2][x+0];
	r += M4(8.161e-02, 9.790e-02, 2.785e-01, 2.951e-02, 2.645e-01, -1.819e-02, 2.305e-02, -7.752e-03, -1.915e-02, -4.796e-02, -1.392e-01, -4.996e-02, 2.958e-01, 1.013e-01, 9.546e-03, 1.401e-01) * s2[y+2][x+1];
	r += M4(-4.147e-03, 1.596e-02, -7.561e-02, 1.548e-02, 4.067e-02, 1.512e-02, 1.979e-01, -7.008e-03, -9.553e-03, 2.735e-02, -9.080e-04, -4.852e-03, 8.037e-02, 3.773e-02, 3.583e-02, 1.963e-02) * s2[y+2][x+2];
	r += M4(5.601e-02, -2.423e-02, -2.600e-02, 1.975e-01, -9.843e-02, -9.988e-02, -4.974e-02, 1.008e-02, 2.550e-01, 5.249e-02, 2.125e-02, 2.446e-01, 8.997e-02, 5.939e-02, -3.333e-02, -1.959e-03) * s3[y+0][x+0];
	r += M4(5.342e-02, 1.726e-01, -4.015e-02, 2.896e-01, 3.618e-02, -3.455e-03, 3.427e-02, 1.497e-03, 9.407e-03, 1.343e-01, 2.984e-02, 5.003e-02, 8.631e-02, -1.006e-01, -8.374e-02, 1.372e-02) * s3[y+0][x+1];
	r += M4(2.323e-02, -2.842e-02, 7.254e-02, -1.732e-02, 3.504e-02, 7.733e-02, 8.471e-02, 2.454e-02, 5.505e-02, -5.995e-02, -8.085e-02, -5.489e-03, -1.509e-01, -2.233e-02, -5.037e-02, -7.645e-02) * s3[y+0][x+2];
	r += M4(-5.039e-03, -1.432e-01, 6.976e-02, 1.806e-01, -1.034e-01, -1.460e-01, 2.187e-02, -6.238e-02, 1.857e-01, 1.112e-01, 5.034e-02, 1.258e-01, -2.061e-02, 1.005e-01, 1.236e-01, -9.062e-02) * s3[y+1][x+0];
	r += M4(-2.733e-01, 2.737e-01, 4.229e-02, 1.136e-01, -1.498e-01, -3.327e-01, -3.111e-01, -7.174e-02, 2.012e-01, -2.083e-01, 1.858e-01, 1.892e-01, 1.621e-01, 3.200e-02, 1.908e-01, -1.018e-01) * s3[y+1][x+1];
	r += M4(-1.031e-01, -1.607e-01, 8.048e-03, -6.656e-02, -8.253e-02, 3.149e-02, 2.255e-02, -2.649e-02, 1.339e-01, -4.625e-02, 2.199e-03, 6.125e-02, 1.288e-01, 4.299e-02, -5.603e-02, -3.237e-02) * s3[y+1][x+2];
	r += M4(4.952e-03, -1.661e-02, 2.341e-02, 1.386e-02, 4.349e-02, -8.613e-02, -1.430e-02, 2.169e-02, 1.411e-01, -2.057e-02, -8.919e-02, 3.806e-02, 7.335e-02, 9.763e-02, 3.747e-02, -3.759e-02) * s3[y+2][x+0];
	r += M4(-7.333e-02, -2.661e-02, 2.906e-01, 1.136e-01, 1.325e-01, -6.227e-02, -2.192e-01, -4.170e-02, 2.589e-01, -1.899e-02, -2.549e-01, -6.445e-03, 1.875e-01, -1.764e-02, -5.976e-02, 7.862e-02) * s3[y+2][x+1];
	r += M4(1.238e-02, -6.392e-02, -1.440e-01, -5.794e-02, 1.217e-01, -1.002e-03, -9.894e-03, -2.402e-03, 2.629e-02, 7.203e-02, -6.940e-02, 2.917e-02, -8.894e-03, 8.161e-03, -2.535e-02, 2.661e-02) * s3[y+2][x+2];
	r += V4(2.654e-02, 2.882e-02, 1.523e-02, -3.847e-02);
	return vec4(r);
}
vec4 f1(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-1.387e-02, -2.021e-02, -1.874e-02, 2.614e-02, -6.121e-02, -6.664e-02, -1.639e-02, 8.561e-03, 9.067e-02, -1.717e-01, -7.302e-02, 9.546e-02, -1.998e-02, 5.788e-02, -2.553e-02, -6.032e-02) * s0[y+0][x+0];
	r += M4(-6.672e-02, 1.018e-01, 8.836e-02, 5.432e-02, 6.223e-02, -3.272e-02, 3.382e-02, 1.604e-02, -6.077e-02, 4.248e-02, -4.409e-01, -4.394e-01, -1.103e-01, -4.950e-02, -1.426e-01, 1.489e-01) * s0[y+0][x+1];
	r += M4(-3.532e-02, 1.035e-01, 3.116e-02, -1.788e-03, -4.122e-02, 1.133e-01, -3.615e-02, -4.237e-02, -8.257e-02, 1.863e-01, -1.778e-01, -8.394e-02, -4.111e-02, -3.263e-02, -4.254e-02, 5.592e-02) * s0[y+0][x+2];
	r += M4(1.469e-01, -1.020e-01, 1.148e-01, -1.039e-02, -7.757e-02, 7.521e-02, 2.054e-01, 4.906e-02, 8.925e-02, -1.984e-01, -1.023e-01, 1.153e-01, 3.445e-01, -1.849e-02, -1.580e-04, -7.727e-02) * s0[y+1][x+0];
	r += M4(-8.672e-02, -8.365e-01, -1.679e-01, 1.480e-02, 4.518e-02, -2.169e-01, -1.018e-01, 2.706e-02, -2.341e-01, -8.601e-03, -6.234e-02, 9.439e-02, -2.071e-01, -1.396e-02, -8.506e-03, -1.930e-01) * s0[y+1][x+1];
	r += M4(6.741e-02, 3.049e-01, -1.271e-01, -8.026e-02, 1.840e-02, 1.493e-01, -1.413e-01, -9.690e-03, -6.207e-02, -1.041e-02, -2.099e-01, 2.763e-02, -7.720e-02, 1.753e-01, -2.940e-01, 7.602e-02) * s0[y+1][x+2];
	r += M4(-9.748e-02, -7.461e-02, 9.357e-02, 5.999e-02, -6.825e-02, 5.970e-03, -7.068e-02, 1.442e-02, -2.625e-01, 7.966e-03, 2.038e-03, -3.480e-02, -2.081e-01, 7.937e-02, 2.116e-02, -9.743e-02) * s0[y+2][x+0];
	r += M4(8.293e-02, -1.563e-01, 1.812e-01, 1.941e-01, 3.190e-02, -3.573e-02, 1.013e-01, 7.234e-02, 1.147e-01, 1.220e-01, 5.790e-02, -5.864e-02, 7.714e-02, -6.891e-02, 1.402e-01, -1.068e-01) * s0[y+2][x+1];
	r += M4(-2.908e-02, 5.772e-02, 1.535e-01, 1.034e-01, -5.804e-03, -2.219e-02, 9.360e-02, 2.829e-02, -8.303e-02, -2.283e-02, 3.529e-02, -1.722e-02, -4.672e-02, -2.827e-02, -9.301e-02, 4.738e-02) * s0[y+2][x+2];
	r += M4(-6.307e-02, 4.058e-02, -4.096e-02, -6.483e-03, 2.514e-02, -1.231e-01, -1.657e-01, -1.531e-02, -1.098e-01, 8.694e-02, 5.716e-03, -1.580e-02, 6.180e-02, 4.954e-03, -9.815e-03, -4.417e-02) * s1[y+0][x+0];
	r += M4(-6.663e-02, 1.636e-01, 3.713e-02, -2.642e-02, 2.454e-02, -8.983e-02, -1.040e-01, 7.833e-02, 2.636e-02, -1.003e-01, -6.744e-02, -9.855e-02, 8.284e-02, -7.601e-02, 4.094e-02, -3.324e-02) * s1[y+0][x+1];
	r += M4(-1.597e-02, 2.786e-02, -8.800e-03, -5.432e-02, -9.046e-02, -3.472e-02, -1.510e-01, 4.481e-02, -4.117e-02, -6.292e-02, -4.637e-02, 3.857e-03, 1.681e-02, -1.127e-01, 3.948e-02, 4.225e-03) * s1[y+0][x+2];
	r += M4(4.022e-02, -7.363e-03, 4.529e-02, -1.056e-01, -2.240e-01, 1.007e-01, 3.151e-03, 2.428e-01, -2.222e-02, -2.802e-02, -6.934e-02, 8.877e-02, -1.968e-01, -2.010e-02, 3.278e-02, -2.338e-01) * s1[y+1][x+0];
	r += M4(-1.225e-01, -2.519e-01, -2.875e-01, 7.445e-02, -4.069e-03, -1.421e-01, 7.055e-02, 3.749e-01, -1.188e-01, 9.114e-02, 1.276e-01, -4.493e-04, -2.095e-01, -7.284e-02, -6.561e-03, 5.824e-02) * s1[y+1][x+1];
	r += M4(1.558e-02, 8.515e-02, 1.144e-01, 1.974e-01, -2.227e-02, 6.309e-02, -1.755e-01, -6.872e-02, -5.889e-03, -1.147e-01, 4.518e-02, 1.779e-02, 1.178e-02, -6.685e-02, -1.235e-03, -3.464e-02) * s1[y+1][x+2];
	r += M4(-3.369e-02, -1.383e-02, 2.811e-03, 1.261e-02, -6.704e-02, -5.285e-02, -1.254e-01, 5.732e-02, 6.788e-02, 1.619e-02, -6.817e-02, 1.078e-02, -6.149e-02, -4.759e-02, 7.328e-02, -1.344e-02) * s1[y+2][x+0];
	r += M4(1.624e-02, -4.204e-03, 6.742e-02, -4.545e-03, 9.915e-02, 5.134e-02, -2.543e-02, 3.316e-02, 6.360e-03, 2.033e-03, -5.454e-02, -7.280e-03, 5.891e-02, -7.128e-02, 9.637e-02, 1.513e-02) * s1[y+2][x+1];
	r += M4(-3.667e-02, 7.202e-02, 1.248e-01, -4.313e-03, 6.836e-03, -4.021e-04, -1.059e-02, 5.864e-02, -3.861e-02, -2.257e-02, -1.613e-02, -2.398e-02, 2.999e-02, -1.584e-03, -5.774e-02, -1.700e-02) * s1[y+2][x+2];
	r += M4(-8.811e-03, -1.901e-02, 2.253e-02, 8.330e-03, 2.204e-02, 8.451e-03, 1.110e-01, -5.236e-03, 7.532e-03, -5.570e-02, -6.654e-02, -3.357e-02, 2.759e-02, 1.018e-03, -1.989e-02, -6.793e-02) * s2[y+0][x+0];
	r += M4(8.957e-03, -1.074e-01, -8.538e-02, -4.117e-02, 9.988e-02, 6.528e-02, -8.258e-02, -1.769e-01, 6.538e-02, -1.522e-01, 4.983e-02, -7.807e-02, -2.062e-02, -6.670e-02, 4.791e-02, 6.770e-02) * s2[y+0][x+1];
	r += M4(4.701e-02, 6.584e-03, 1.121e-01, 4.878e-02, 5.264e-02, 4.784e-02, 2.076e-03, -2.318e-02, -4.872e-02, 4.770e-04, -1.093e-01, -3.223e-02, -4.382e-02, -1.965e-01, -1.627e-02, -6.453e-02) * s2[y+0][x+2];
	r += M4(1.970e-01, -3.407e-02, 1.227e-02, -6.273e-02, 1.610e-02, -1.786e-01, -4.988e-02, 6.862e-02, -2.525e-01, -7.429e-03, 3.894e-02, 8.392e-02, 1.381e-01, -1.279e-02, 1.152e-02, -2.469e-01) * s2[y+1][x+0];
	r += M4(5.751e-02, -3.843e-02, -2.323e-01, -2.137e-01, 1.404e-01, -1.040e-01, -3.765e-01, -4.420e-02, -4.854e-02, 1.812e-01, 2.534e-01, 7.741e-02, -7.521e-02, -3.938e-02, -3.668e-01, 3.797e-01) * s2[y+1][x+1];
	r += M4(-3.043e-02, 4.029e-02, 5.932e-02, 9.864e-02, -6.345e-03, 4.764e-02, -1.049e-01, 3.269e-02, -3.428e-02, 6.164e-02, -1.626e-01, -4.359e-02, 2.179e-02, -1.507e-01, -3.192e-01, -2.861e-01) * s2[y+1][x+2];
	r += M4(-2.568e-01, -4.456e-02, -4.455e-03, 8.261e-02, 1.728e-01, -9.347e-02, 1.027e-01, 1.309e-01, 1.510e-01, 3.409e-02, -2.289e-02, -3.971e-02, 8.815e-02, -4.041e-02, 6.173e-02, -4.186e-02) * s2[y+2][x+0];
	r += M4(1.501e-02, 3.651e-02, -3.172e-02, 8.045e-02, -4.171e-02, 2.893e-02, 2.151e-02, -5.205e-02, -7.610e-03, -1.646e-01, -1.256e-01, 1.303e-01, 4.322e-01, -1.250e-01, 1.053e-02, -1.568e-02) * s2[y+2][x+1];
	r += M4(2.182e-02, -4.304e-02, 1.312e-02, 5.496e-02, -2.402e-02, -3.752e-03, 5.086e-02, -7.154e-02, -1.246e-02, 4.576e-02, -3.001e-02, -7.347e-03, 6.922e-02, -3.272e-03, 3.944e-02, 8.619e-03) * s2[y+2][x+2];
	r += M4(-4.122e-03, -4.162e-02, 3.084e-02, -4.302e-03, -1.787e-01, -3.095e-02, -2.801e-02, 1.606e-01, 1.537e-01, -5.809e-02, -8.012e-02, 1.144e-02, 1.299e-01, -2.649e-02, 4.787e-02, -6.732e-03) * s3[y+0][x+0];
	r += M4(1.177e-02, -1.622e-01, 4.246e-02, -5.376e-02, -4.496e-02, 7.446e-02, -1.218e-02, 4.885e-02, 4.874e-02, -5.976e-02, 2.539e-01, -1.458e-01, 4.160e-02, 5.908e-02, 1.211e-02, -4.327e-02) * s3[y+0][x+1];
	r += M4(2.030e-02, 3.560e-02, 8.241e-02, 1.775e-02, 1.574e-03, 4.535e-02, 3.280e-02, 5.347e-02, 1.044e-02, 7.899e-02, 9.402e-02, 3.097e-02, -4.266e-02, 2.829e-02, -9.593e-02, -1.122e-01) * s3[y+0][x+2];
	r += M4(-1.698e-02, 1.322e-02, 8.328e-02, -1.783e-01, 4.128e-02, -1.183e-01, 5.128e-02, -3.080e-02, -1.538e-01, -1.767e-02, 4.371e-02, -5.287e-02, -1.379e-01, 7.489e-02, -3.806e-02, -7.978e-02) * s3[y+1][x+0];
	r += M4(3.282e-02, 1.479e-01, -8.844e-02, -4.512e-01, 3.284e-02, 2.442e-04, -3.824e-01, 5.141e-02, 4.808e-02, 3.485e-01, 9.949e-02, -4.380e-01, 1.384e-02, -4.802e-02, -2.339e-02, 1.322e-01) * s3[y+1][x+1];
	r += M4(-2.288e-02, -4.458e-02, -3.845e-02, -5.369e-04, 4.717e-02, -5.360e-02, -1.563e-01, -4.805e-02, 3.530e-02, 1.715e-01, 6.992e-02, 2.961e-02, -6.138e-02, 8.129e-02, -1.843e-01, -7.722e-02) * s3[y+1][x+2];
	r += M4(-1.914e-01, 6.964e-03, -1.907e-02, -3.570e-03, 1.718e-01, 5.581e-02, 5.310e-02, 5.446e-02, 1.623e-01, 2.566e-02, 8.579e-02, 1.715e-02, 3.561e-02, 4.139e-02, -4.206e-02, -1.691e-02) * s3[y+2][x+0];
	r += M4(6.811e-02, -1.317e-02, -5.336e-02, 7.570e-02, 1.250e-01, -3.950e-03, -1.388e-02, 1.511e-01, 3.066e-02, 3.503e-02, -1.482e-01, 1.956e-02, 7.762e-02, -7.236e-02, 4.307e-02, 1.122e-01) * s3[y+2][x+1];
	r += M4(-2.995e-02, -4.281e-02, -2.623e-02, 1.127e-01, 3.108e-02, 1.431e-01, -1.742e-02, -4.293e-02, 1.988e-02, 7.833e-02, 6.823e-02, -6.465e-02, 2.433e-02, -2.388e-02, -1.348e-02, 5.785e-02) * s3[y+2][x+2];
	r += V4(8.295e-03, 1.743e-02, 1.567e-02, -1.690e-02);
	return vec4(r);
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv5_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
			s2[ay][ax] = l1(x - 1, y - 1);
			s1[ay][ax] = -max(-s0[ay][ax], V4(0.0));
			s0[ay][ax] = max(s0[ay][ax], V4(0.0));
			s3[ay][ax] = -max(-s2[ay][ax], V4(0.0));
			s2[ay][ax] = max(s2[ay][ax], V4(0.0));
		}
	}
	barrier();
	vec4 r0 = f0(xy.x, xy.y);
	vec4 r1 = f1(xy.x, xy.y);
	imageStore(out_image, opos + ivec2(0, 0), r0);
	imageStore(out_image, opos + ivec2(1, 0), r1);
}

//!DESC CuNNy-8x8C-RCAS-conv7
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv6
//!BIND LUMA
//!SAVE conv7
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(texelFetch(conv6_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv6_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 s0[10][10];
shared V4 s1[10][10];
shared V4 s2[10][10];
shared V4 s3[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-3.070e-02, 2.436e-02, -2.778e-02, 3.078e-02, 4.323e-02, 3.829e-02, 6.656e-02, 2.737e-02, -5.291e-02, -6.719e-02, -1.722e-01, -1.030e-01, -5.736e-03, -1.084e-02, 2.101e-02, -2.216e-02) * s0[y+0][x+0];
	r += M4(-1.148e-01, 1.368e-01, -2.434e-01, -7.799e-02, -6.297e-02, 4.897e-02, 4.311e-02, 9.286e-02, 1.883e-01, 4.531e-02, 6.274e-02, -1.343e-01, 6.390e-03, -1.466e-01, -3.913e-03, 8.247e-04) * s0[y+0][x+1];
	r += M4(-1.459e-01, -8.435e-02, 4.687e-02, -6.748e-02, -2.003e-02, 3.217e-03, -1.397e-02, 1.183e-02, -8.148e-02, -1.054e-01, 2.311e-02, -6.010e-02, -1.901e-02, -2.809e-02, 1.863e-02, 7.646e-02) * s0[y+0][x+2];
	r += M4(-7.577e-02, -4.375e-02, 8.057e-02, -1.395e-03, 1.047e-02, -1.380e-02, -2.550e-02, 3.771e-02, -1.513e-01, -6.641e-03, -1.381e-01, 9.314e-03, -1.036e-01, -1.909e-01, -8.784e-03, 3.538e-02) * s0[y+1][x+0];
	r += M4(-1.976e-01, 2.298e-01, -1.013e-01, 3.449e-01, 2.299e-01, -8.976e-02, -6.190e-02, -5.443e-02, -1.348e-01, 1.307e-01, 9.349e-03, 1.524e-01, -5.977e-02, -1.791e-01, -2.728e-02, 1.709e-01) * s0[y+1][x+1];
	r += M4(1.362e-01, 9.270e-02, 3.095e-02, 3.729e-02, -3.256e-02, 1.432e-01, -5.554e-02, 6.382e-02, 2.020e-03, 3.453e-02, -3.751e-02, -2.569e-03, 6.406e-02, -1.460e-01, 3.708e-02, -3.880e-02) * s0[y+1][x+2];
	r += M4(1.895e-02, -1.147e-03, -1.059e-02, 8.964e-02, -3.612e-02, 7.349e-02, 8.161e-02, -3.058e-02, 3.533e-02, -4.355e-03, -3.694e-02, 5.765e-04, -7.735e-02, -6.075e-02, 8.869e-02, -7.891e-03) * s0[y+2][x+0];
	r += M4(3.528e-02, -7.832e-03, -1.067e-02, -6.913e-02, -8.636e-03, -5.658e-02, -5.516e-02, -4.361e-04, 2.235e-02, -4.939e-03, 5.529e-02, -7.065e-02, 9.293e-02, -1.961e-01, -5.635e-02, -2.150e-01) * s0[y+2][x+1];
	r += M4(-2.973e-02, -3.380e-02, 2.257e-02, -3.796e-02, 2.210e-02, 6.347e-02, -3.119e-04, 3.238e-02, 6.742e-03, 2.410e-02, -2.251e-02, -8.015e-04, -8.704e-03, -8.765e-02, -3.724e-03, -6.720e-02) * s0[y+2][x+2];
	r += M4(-2.387e-02, 4.879e-03, 1.053e-01, -1.266e-02, 1.073e-01, 7.770e-02, 2.646e-02, 4.399e-02, -2.007e-01, -1.473e-02, -2.282e-01, -1.421e-01, -2.639e-02, -9.848e-03, -7.629e-03, -4.675e-02) * s1[y+0][x+0];
	r += M4(-1.088e-01, 4.456e-02, 1.148e-01, 6.554e-02, -7.432e-02, -3.429e-03, -1.204e-01, -2.622e-02, 1.660e-01, 9.937e-02, -1.343e-01, -5.092e-02, 3.090e-02, -1.748e-02, -6.801e-02, -5.590e-02) * s1[y+0][x+1];
	r += M4(-7.544e-02, -1.131e-02, -1.009e-02, 3.879e-02, 7.441e-02, 1.447e-02, 2.382e-02, -6.589e-02, -1.039e-01, -1.579e-01, 8.938e-02, -7.411e-02, -5.571e-03, -4.500e-02, 6.182e-02, -1.285e-02) * s1[y+0][x+2];
	r += M4(-6.368e-02, -5.838e-02, 1.156e-01, 1.404e-02, 9.667e-02, 2.284e-01, -2.685e-01, -6.097e-02, -1.383e-01, -2.800e-02, -2.153e-01, -2.777e-02, -3.424e-02, -5.502e-02, -5.137e-02, 8.663e-02) * s1[y+1][x+0];
	r += M4(1.316e-01, 1.042e-01, 2.212e-01, 9.342e-02, 3.297e-01, -2.185e-01, -1.906e-01, 2.017e-01, -1.587e-01, 1.371e-01, -9.940e-02, 2.425e-01, -1.987e-01, -2.948e-01, 4.066e-02, 1.786e-01) * s1[y+1][x+1];
	r += M4(5.349e-02, -8.921e-02, -8.373e-02, -2.398e-01, -1.211e-01, 1.605e-01, 5.684e-02, 1.467e-02, -3.504e-02, 1.849e-01, -2.274e-02, 1.134e-01, 1.240e-01, -1.697e-02, 1.002e-02, 6.846e-02) * s1[y+1][x+2];
	r += M4(4.181e-02, 7.206e-02, -3.078e-02, 2.595e-02, -3.795e-01, -1.083e-01, 9.948e-02, -4.260e-02, 2.886e-02, 1.795e-02, -6.654e-02, -5.283e-03, -2.685e-02, -5.431e-02, 7.007e-02, -3.959e-02) * s1[y+2][x+0];
	r += M4(-4.348e-02, -6.184e-03, -6.342e-03, -5.452e-02, 1.743e-01, 1.837e-02, 3.936e-02, -1.215e-02, 8.794e-04, 1.175e-02, 7.285e-02, 6.201e-03, 9.388e-02, -6.481e-02, 4.227e-03, -1.010e-01) * s1[y+2][x+1];
	r += M4(1.231e-02, 3.423e-02, -5.170e-02, 4.088e-02, 1.128e-02, 7.010e-02, 1.143e-01, 5.053e-03, 1.459e-02, 6.752e-02, -6.502e-03, -6.488e-03, -8.667e-02, -1.288e-01, -7.637e-03, -2.315e-02) * s1[y+2][x+2];
	r += M4(-4.611e-02, -6.281e-02, 6.453e-03, 5.579e-02, -7.280e-03, -4.108e-02, -4.143e-02, -6.655e-02, 4.028e-02, 8.245e-02, -2.446e-03, -1.409e-02, -6.690e-02, -9.692e-02, -4.443e-02, -3.048e-02) * s2[y+0][x+0];
	r += M4(8.934e-02, -4.916e-02, -9.408e-02, 2.656e-04, 6.357e-02, -1.689e-03, -7.168e-02, -4.478e-02, -1.188e-02, -1.336e-01, -6.080e-03, -1.142e-01, 6.796e-02, -1.938e-01, -6.243e-02, -4.953e-02) * s2[y+0][x+1];
	r += M4(5.239e-02, -4.012e-02, 1.131e-01, 1.433e-01, -2.208e-03, 3.805e-02, 4.874e-04, 4.674e-02, 1.142e-02, 6.275e-02, 6.272e-03, 3.678e-02, -3.428e-02, -4.749e-02, 2.627e-02, 7.906e-03) * s2[y+0][x+2];
	r += M4(4.736e-02, 4.789e-02, 5.199e-02, -8.161e-02, -1.600e-01, 1.302e-01, -1.805e-01, 1.508e-01, 1.426e-01, 1.548e-01, -3.479e-02, 1.045e-01, -2.108e-02, -3.256e-02, 1.205e-01, -1.247e-02) * s2[y+1][x+0];
	r += M4(3.112e-02, 3.071e-02, -1.616e-01, -1.595e-01, -1.701e-01, 3.129e-02, -2.466e-01, -3.574e-02, -3.105e-03, 2.281e-01, 2.982e-02, 4.626e-01, -3.969e-01, 1.852e-01, -4.717e-01, 5.692e-02) * s2[y+1][x+1];
	r += M4(-8.129e-02, -5.514e-02, 5.148e-02, 7.941e-02, -8.344e-02, 4.884e-03, -8.866e-03, -9.734e-02, 1.086e-02, 1.410e-02, 1.222e-02, 3.134e-03, -6.809e-02, 4.698e-02, -3.937e-02, 2.484e-02) * s2[y+1][x+2];
	r += M4(2.625e-02, 1.476e-02, -6.427e-03, -1.447e-02, 4.952e-02, -9.763e-02, -8.561e-02, -2.963e-02, -4.981e-03, 1.070e-01, 4.853e-02, 3.249e-02, -3.255e-02, -6.066e-02, 1.284e-02, 2.299e-02) * s2[y+2][x+0];
	r += M4(-2.497e-02, 3.993e-02, -5.792e-02, 3.317e-02, 4.869e-02, 1.831e-01, -9.608e-02, 4.033e-01, -7.845e-02, 3.779e-02, -4.691e-02, 1.973e-01, -7.557e-02, -8.696e-02, -3.184e-02, -1.639e-02) * s2[y+2][x+1];
	r += M4(-2.819e-02, 3.909e-02, 2.787e-02, 4.831e-02, 1.363e-02, 1.607e-01, 7.664e-03, 9.269e-02, 4.658e-02, 3.188e-02, 7.627e-03, 3.933e-02, 9.969e-02, 6.002e-02, 3.176e-02, 1.427e-02) * s2[y+2][x+2];
	r += M4(-6.394e-03, -6.668e-02, 1.138e-02, 5.361e-02, 2.157e-02, -3.587e-02, 2.918e-02, -3.588e-02, 2.106e-02, 8.076e-02, 6.208e-02, 1.281e-02, 1.034e-02, -8.129e-02, -1.875e-02, -1.908e-02) * s3[y+0][x+0];
	r += M4(-7.533e-02, -3.450e-02, -9.114e-02, 2.321e-02, -1.890e-02, 3.241e-03, -2.549e-02, 2.492e-02, 3.790e-02, 9.173e-03, -5.235e-02, -7.014e-02, 1.447e-01, -1.654e-01, 3.134e-02, -4.622e-03) * s3[y+0][x+1];
	r += M4(8.719e-02, -1.233e-01, -1.688e-02, -9.291e-03, -2.684e-03, 2.592e-03, 2.837e-02, 1.745e-02, 8.218e-03, -2.235e-02, 5.555e-02, -2.742e-02, 9.350e-02, 4.153e-02, -6.327e-02, -3.472e-03) * s3[y+0][x+2];
	r += M4(6.617e-02, 1.558e-02, 5.841e-02, 5.007e-04, -1.220e-01, -4.563e-02, 9.348e-02, 9.595e-02, 1.733e-01, 1.880e-01, -2.588e-01, 1.983e-02, 8.545e-02, 7.531e-02, 7.372e-02, -2.994e-03) * s3[y+1][x+0];
	r += M4(-1.060e-02, 2.877e-02, -1.439e-01, -6.804e-02, -4.439e-02, 1.373e-01, -1.888e-01, -9.058e-02, -1.508e-02, 2.040e-01, 6.507e-02, 3.062e-01, -1.071e-01, -3.551e-02, -1.100e-01, -1.235e-01) * s3[y+1][x+1];
	r += M4(-2.333e-01, 8.973e-02, -2.668e-02, 4.034e-01, -9.447e-02, -3.340e-02, 3.346e-02, -1.014e-01, 4.100e-02, 7.776e-03, 1.879e-02, 2.950e-02, -4.019e-02, -6.048e-02, 1.367e-02, -8.428e-02) * s3[y+1][x+2];
	r += M4(2.729e-03, -6.240e-02, -1.816e-02, -3.621e-02, 1.688e-02, 3.311e-02, 1.403e-02, -8.893e-03, -6.116e-02, -4.763e-02, 1.310e-02, -2.208e-02, -3.306e-02, 6.362e-02, -1.011e-02, 2.564e-02) * s3[y+2][x+0];
	r += M4(1.469e-02, 8.580e-04, -6.701e-02, 9.410e-02, -1.354e-01, 4.127e-02, -8.348e-02, 2.271e-01, 2.463e-02, 1.413e-01, -8.443e-02, 1.995e-01, -1.265e-02, -2.437e-02, 6.297e-02, 7.018e-02) * s3[y+2][x+1];
	r += M4(6.909e-02, 4.030e-03, -2.082e-02, -7.680e-02, -4.738e-05, 4.701e-02, 2.177e-02, 2.263e-02, 3.996e-02, 2.327e-02, 2.622e-02, 6.788e-02, 6.578e-02, 4.105e-02, -1.818e-02, -6.156e-02) * s3[y+2][x+2];
	r += V4(-5.639e-04, 1.630e-02, 9.919e-03, 2.755e-03);
	return vec4(r);
}
vec4 f1(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-3.890e-02, 4.380e-02, 6.065e-02, 1.155e-02, -1.497e-02, 6.796e-02, 1.296e-02, -3.670e-02, -4.081e-02, 1.369e-01, 4.324e-02, 9.578e-03, 3.920e-02, 1.355e-02, -1.289e-02, 5.012e-02) * s0[y+0][x+0];
	r += M4(-1.169e-01, -1.361e-01, 1.137e-01, 2.229e-02, 1.010e-01, -1.940e-02, 3.713e-02, -9.157e-02, -8.749e-02, -2.311e-01, -3.397e-02, 2.556e-01, 2.442e-02, -1.538e-02, -3.239e-02, 6.997e-02) * s0[y+0][x+1];
	r += M4(-7.172e-02, -1.417e-02, -4.849e-02, 1.024e-01, 2.370e-02, -5.086e-03, -1.803e-02, -3.149e-02, -4.615e-02, -1.092e-01, -1.704e-01, 1.439e-01, 2.522e-02, 2.319e-02, 6.152e-02, -4.495e-02) * s0[y+0][x+2];
	r += M4(-6.405e-02, 5.997e-02, 3.411e-02, 8.755e-02, -9.824e-03, 1.220e-01, -7.332e-04, -3.476e-02, -3.578e-02, 1.519e-01, 6.516e-02, -9.110e-02, -7.054e-02, 7.216e-02, -8.433e-02, -5.895e-02) * s0[y+1][x+0];
	r += M4(-3.571e-02, -1.303e-01, -1.637e-01, -1.456e-01, 5.032e-02, -4.665e-01, 1.355e-02, 1.524e-01, 5.116e-02, -8.008e-02, -9.184e-02, -7.492e-02, -2.404e-01, -4.505e-01, 5.892e-02, 4.292e-02) * s0[y+1][x+1];
	r += M4(-1.877e-02, 1.823e-01, 8.245e-02, -6.730e-02, 1.836e-01, -5.142e-02, -1.134e-01, 3.983e-02, 4.299e-02, -5.802e-02, -6.604e-02, -5.396e-02, -8.564e-02, -2.948e-02, 6.704e-02, 2.121e-02) * s0[y+1][x+2];
	r += M4(1.034e-02, 1.644e-02, 2.150e-02, -5.899e-02, 1.307e-02, -3.905e-05, 5.168e-02, -2.793e-04, 3.565e-02, 7.851e-02, 1.710e-02, 3.861e-02, -1.873e-02, 9.488e-03, 4.209e-02, -4.301e-02) * s0[y+2][x+0];
	r += M4(-2.846e-02, 3.359e-02, 8.575e-03, 1.232e-01, -5.163e-02, -4.022e-02, -1.854e-01, -1.137e-01, 1.329e-02, -2.232e-02, -2.540e-02, 2.193e-02, 8.834e-03, -1.304e-02, -1.102e-01, 5.697e-02) * s0[y+2][x+1];
	r += M4(4.501e-02, -2.016e-02, 1.127e-02, -1.988e-02, -1.776e-02, -1.443e-02, 1.711e-02, 6.104e-02, 1.430e-02, -1.072e-02, -3.235e-02, -2.523e-03, 1.484e-02, 7.398e-02, -5.919e-02, -1.017e-02) * s0[y+2][x+2];
	r += M4(1.857e-02, -1.259e-02, 1.095e-02, 8.724e-02, -5.549e-02, 8.570e-02, 5.763e-02, -8.709e-02, 3.212e-02, -4.690e-02, 8.368e-04, 1.249e-02, 9.382e-03, 6.820e-02, 8.946e-03, 7.920e-03) * s1[y+0][x+0];
	r += M4(-7.650e-02, -2.338e-02, -8.033e-02, -1.566e-01, 1.432e-01, -7.598e-02, 2.722e-02, 1.000e-04, -2.072e-01, -2.151e-01, -1.338e-02, 9.397e-02, -3.775e-03, -6.836e-02, -1.728e-02, 9.399e-02) * s1[y+0][x+1];
	r += M4(-4.087e-02, 4.804e-03, 1.116e-02, -7.011e-02, -1.723e-02, -1.977e-02, -5.774e-02, 2.750e-02, -3.252e-02, 6.650e-02, -1.136e-01, 1.096e-01, -4.266e-02, -4.517e-03, -1.266e-02, 1.141e-02) * s1[y+0][x+2];
	r += M4(-5.081e-02, 4.099e-02, 5.699e-02, 3.971e-02, -5.234e-02, 8.523e-02, 1.343e-01, 5.645e-03, 1.753e-01, 9.786e-02, -9.590e-02, -6.773e-02, -1.796e-02, 8.576e-02, -3.467e-02, -5.590e-02) * s1[y+1][x+0];
	r += M4(1.108e-01, -1.486e-02, -3.899e-02, -9.249e-02, 5.666e-02, -2.537e-01, -7.427e-02, 8.869e-02, 1.469e-01, -1.381e-01, -3.408e-01, 5.402e-02, -2.780e-01, -2.930e-01, 1.208e-01, -8.814e-02) * s1[y+1][x+1];
	r += M4(3.177e-03, 1.292e-01, -1.071e-01, -2.679e-02, 4.017e-02, 4.321e-03, 9.578e-02, -2.858e-01, -1.089e-02, 1.792e-02, 1.156e-02, -8.115e-02, -7.811e-02, -2.014e-02, 6.696e-02, 9.621e-03) * s1[y+1][x+2];
	r += M4(-3.005e-02, -5.411e-02, 5.050e-02, -3.238e-02, -7.693e-02, -8.280e-02, -8.666e-02, -5.757e-02, 5.474e-02, 9.749e-02, -3.059e-02, 4.181e-02, 5.808e-02, 7.231e-02, 4.346e-02, 2.039e-02) * s1[y+2][x+0];
	r += M4(-8.183e-03, 4.520e-02, 1.025e-01, 7.604e-03, 8.668e-02, 6.595e-02, -2.429e-01, -1.436e-01, 1.894e-02, -9.948e-02, -1.136e-01, -6.581e-02, -5.805e-02, -2.485e-02, -6.475e-02, 1.005e-01) * s1[y+2][x+1];
	r += M4(2.356e-02, 1.020e-02, 7.056e-02, -6.713e-02, 2.917e-02, -4.092e-02, 3.170e-02, 1.198e-01, 3.501e-03, -3.118e-02, -9.863e-03, 1.606e-02, 9.065e-02, 1.101e-01, 3.305e-02, -1.742e-02) * s1[y+2][x+2];
	r += M4(3.252e-02, -2.288e-02, -7.202e-02, -4.020e-02, -1.527e-02, 1.583e-02, -1.180e-02, 2.745e-02, -1.093e-01, -5.854e-02, -1.873e-02, -1.788e-02, -3.865e-02, 3.406e-02, -7.841e-02, 1.657e-02) * s2[y+0][x+0];
	r += M4(3.529e-02, 6.034e-02, 1.210e-01, -3.618e-02, 7.932e-03, -5.469e-03, -1.172e-02, 7.902e-02, -1.704e-02, -1.315e-02, -5.593e-02, 2.861e-01, -7.358e-02, -3.476e-02, 4.484e-02, 5.949e-02) * s2[y+0][x+1];
	r += M4(7.985e-03, -2.197e-01, 5.401e-02, -9.528e-02, 3.674e-02, -2.341e-02, -3.636e-02, 1.185e-02, 3.983e-02, 4.265e-02, 8.690e-03, 1.799e-02, -2.750e-02, -6.882e-02, -2.684e-02, 1.068e-01) * s2[y+0][x+2];
	r += M4(5.030e-02, -9.491e-02, 3.334e-02, -5.244e-03, -8.812e-02, -1.558e-01, 4.752e-03, -1.646e-02, 1.027e-01, 2.055e-01, 1.275e-01, -2.716e-02, -3.778e-02, 9.706e-02, 5.269e-02, -3.286e-02) * s2[y+1][x+0];
	r += M4(7.353e-02, 2.047e-01, 9.101e-02, -5.305e-02, 3.528e-01, -1.785e-01, -9.889e-02, 3.067e-01, 2.552e-01, -2.250e-01, -1.978e-01, 2.324e-01, -2.252e-01, -2.979e-01, -2.304e-01, 1.160e-02) * s2[y+1][x+1];
	r += M4(-4.440e-02, -1.417e-01, -3.290e-03, 1.190e-01, -4.969e-02, 8.620e-02, -5.071e-02, 4.279e-02, -6.947e-02, 8.748e-02, 4.401e-02, 1.939e-01, -2.199e-02, 6.135e-02, 1.086e-01, -5.656e-02) * s2[y+1][x+2];
	r += M4(-1.922e-03, -4.342e-02, -4.630e-03, 6.869e-03, 4.165e-02, 1.420e-01, -2.876e-03, 4.476e-02, 1.329e-02, 3.405e-02, 1.112e-01, -1.597e-02, -9.480e-03, 5.489e-02, 1.353e-02, 6.857e-02) * s2[y+2][x+0];
	r += M4(5.529e-02, 5.772e-02, 6.138e-02, -5.113e-02, 3.056e-01, -9.558e-02, -2.306e-01, -1.839e-01, 2.932e-02, -7.797e-02, -6.925e-02, -9.233e-02, 2.784e-03, -7.636e-02, -2.360e-01, 1.043e-02) * s2[y+2][x+1];
	r += M4(-5.529e-02, -5.811e-02, -1.995e-02, -5.247e-02, -1.861e-02, 3.802e-03, -3.253e-02, 2.626e-02, -4.897e-02, 6.573e-02, 2.684e-02, 1.122e-01, -6.686e-03, 8.238e-02, -8.269e-02, 8.729e-02) * s2[y+2][x+2];
	r += M4(1.769e-03, -1.540e-02, -3.300e-02, -5.438e-02, 3.122e-02, 1.306e-02, 6.950e-04, 7.983e-02, -1.524e-01, -1.233e-02, 2.292e-02, -1.353e-01, -2.359e-02, 3.684e-02, -4.611e-02, 4.639e-02) * s3[y+0][x+0];
	r += M4(-2.114e-01, 1.503e-01, 1.197e-01, -1.873e-01, -2.960e-02, 2.715e-02, 5.308e-02, -3.137e-02, -7.884e-02, 7.360e-03, 2.049e-02, 7.063e-02, 2.342e-02, -8.272e-03, 1.748e-02, 2.206e-02) * s3[y+0][x+1];
	r += M4(-4.234e-02, -1.264e-01, 2.095e-01, -3.463e-02, 1.678e-02, -3.147e-02, 2.275e-02, -2.929e-02, 8.685e-03, 2.650e-02, -1.691e-02, 1.955e-02, 5.975e-02, -1.447e-02, 3.994e-04, 5.474e-02) * s3[y+0][x+2];
	r += M4(5.762e-02, -1.039e-01, -5.822e-02, 4.354e-02, -1.392e-01, -3.889e-02, -2.256e-02, -7.489e-03, 1.325e-01, 1.469e-01, 1.809e-01, 5.603e-03, -6.559e-02, 8.821e-02, 7.398e-02, -6.471e-02) * s3[y+1][x+0];
	r += M4(-2.345e-02, 3.975e-01, 2.288e-01, -8.712e-02, 4.354e-02, -2.791e-01, -9.011e-02, 3.797e-01, 2.146e-01, -1.113e-01, -3.455e-02, 2.569e-01, -1.836e-01, 5.704e-02, -1.681e-02, -7.846e-03) * s3[y+1][x+1];
	r += M4(-2.896e-03, -2.463e-01, 1.215e-01, -1.333e-01, -8.416e-02, 3.282e-02, 4.234e-04, 2.115e-02, -5.501e-02, -2.220e-02, -9.224e-03, 1.774e-01, -5.400e-02, 1.988e-01, 1.590e-02, -8.078e-02) * s3[y+1][x+2];
	r += M4(-6.482e-03, 4.061e-03, -6.866e-02, 3.057e-02, -9.435e-03, 8.649e-02, 1.439e-01, 2.925e-02, 1.490e-02, -3.238e-02, -3.406e-02, -3.069e-02, -7.718e-02, 6.213e-02, 1.187e-01, 2.230e-02) * s3[y+2][x+0];
	r += M4(9.402e-02, 1.078e-01, 3.929e-02, 1.112e-02, 1.727e-01, -5.411e-02, -1.103e-01, -8.911e-02, 6.327e-03, 4.353e-02, -6.541e-02, -5.244e-02, 5.205e-02, -1.455e-01, -1.178e-01, -9.226e-02) * s3[y+2][x+1];
	r += M4(-1.460e-01, -8.937e-02, -8.791e-02, 6.491e-02, -5.235e-02, 3.162e-02, 2.016e-03, 2.715e-02, -2.729e-02, 7.962e-03, 3.042e-02, -3.421e-02, -4.606e-02, 1.268e-01, 8.693e-02, 5.650e-02) * s3[y+2][x+2];
	r += V4(-4.326e-03, -6.605e-03, -1.733e-02, 1.133e-02);
	return vec4(r);
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv6_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
			s2[ay][ax] = l1(x - 1, y - 1);
			s1[ay][ax] = -max(-s0[ay][ax], V4(0.0));
			s0[ay][ax] = max(s0[ay][ax], V4(0.0));
			s3[ay][ax] = -max(-s2[ay][ax], V4(0.0));
			s2[ay][ax] = max(s2[ay][ax], V4(0.0));
		}
	}
	barrier();
	vec4 r0 = f0(xy.x, xy.y);
	vec4 r1 = f1(xy.x, xy.y);
	imageStore(out_image, opos + ivec2(0, 0), r0);
	imageStore(out_image, opos + ivec2(1, 0), r1);
}

//!DESC CuNNy-8x8C-RCAS-conv8
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv7
//!BIND LUMA
//!SAVE conv8
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(texelFetch(conv7_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv7_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 s0[10][10];
shared V4 s1[10][10];
shared V4 s2[10][10];
shared V4 s3[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += M4(3.435e-02, -6.504e-02, 4.703e-02, 3.342e-02, -6.296e-02, 1.862e-02, -9.289e-03, -6.911e-03, -2.538e-02, 8.637e-03, -3.411e-02, 1.190e-02, 1.605e-02, -1.076e-02, -2.234e-02, 4.944e-02) * s0[y+0][x+0];
	r += M4(9.735e-02, -7.744e-02, -2.854e-02, 2.096e-02, 3.219e-02, 2.389e-02, 2.974e-02, -1.323e-02, 1.558e-01, -9.204e-02, 3.183e-02, 3.208e-02, -2.559e-03, -1.375e-02, 7.567e-02, -1.785e-02) * s0[y+0][x+1];
	r += M4(3.552e-02, -1.421e-01, -5.141e-02, -8.574e-02, 5.004e-02, 1.673e-02, 2.008e-02, 2.617e-02, 2.889e-02, 4.270e-03, -8.096e-03, 1.385e-02, -6.875e-02, 4.578e-02, -6.884e-02, -1.721e-02) * s0[y+0][x+2];
	r += M4(-4.530e-02, 3.200e-03, -7.852e-03, 5.570e-03, 1.588e-02, -3.092e-02, 6.908e-02, 4.414e-02, -1.823e-02, -2.140e-02, 4.695e-02, -1.012e-01, -4.266e-02, 3.159e-02, -1.024e-01, -7.093e-02) * s0[y+1][x+0];
	r += M4(-1.123e-01, 1.115e-02, 4.770e-02, -6.221e-02, 7.020e-02, 6.471e-02, -2.864e-02, 1.266e-03, -1.416e-01, -5.934e-02, 1.725e-01, -2.883e-01, -3.173e-02, -8.130e-02, 1.729e-01, 9.106e-02) * s0[y+1][x+1];
	r += M4(-5.275e-02, -1.058e-01, 1.625e-02, -1.078e-01, -5.586e-02, 9.717e-02, -1.482e-01, 8.467e-02, 7.745e-02, 1.217e-01, -3.678e-01, 2.652e-01, 3.168e-03, -6.936e-02, 8.182e-02, -6.762e-02) * s0[y+1][x+2];
	r += M4(1.932e-02, -1.853e-02, -4.680e-03, 1.247e-02, 1.506e-02, 2.800e-03, 1.660e-02, -1.373e-02, 8.578e-03, 6.311e-03, 1.991e-03, 3.268e-02, 2.236e-02, 4.643e-02, -5.746e-02, 6.132e-02) * s0[y+2][x+0];
	r += M4(3.564e-02, 2.894e-03, 9.586e-03, -2.088e-02, -5.489e-03, 8.034e-03, -4.093e-02, -9.453e-03, 3.399e-02, 3.482e-02, 1.477e-01, 1.367e-01, 1.600e-02, -2.960e-02, 1.042e-01, 1.023e-01) * s0[y+2][x+1];
	r += M4(-7.225e-03, 1.269e-02, -1.876e-02, 2.316e-02, 1.622e-02, -4.530e-02, 6.458e-02, -1.154e-02, -2.429e-02, -7.654e-02, -1.047e-01, -3.177e-02, -2.339e-02, 3.686e-02, -6.576e-02, -2.409e-02) * s0[y+2][x+2];
	r += M4(7.120e-02, -2.173e-02, 3.189e-02, 1.532e-02, -5.902e-02, -1.321e-02, -2.458e-02, -7.406e-03, -1.721e-02, 9.956e-03, -2.061e-02, 1.718e-02, -7.708e-02, 5.834e-03, 9.786e-03, 1.014e-02) * s1[y+0][x+0];
	r += M4(8.515e-03, 4.464e-02, -3.084e-02, 6.274e-02, 7.085e-02, -2.731e-02, 7.657e-03, -5.822e-04, 6.458e-02, -2.461e-02, -1.696e-02, -3.812e-03, 6.052e-02, 8.661e-02, 3.385e-02, 3.827e-02) * s1[y+0][x+1];
	r += M4(-2.815e-02, 3.573e-03, -3.364e-02, 2.984e-02, 5.130e-02, -3.046e-02, 5.367e-02, -1.946e-03, -5.429e-03, -2.753e-02, 9.730e-02, -1.096e-02, -5.942e-02, -6.193e-02, -4.767e-02, -7.837e-02) * s1[y+0][x+2];
	r += M4(-4.269e-02, 4.703e-02, 8.985e-03, 5.560e-02, 1.413e-02, -6.357e-02, 1.304e-01, 3.046e-02, -9.008e-02, -1.691e-02, 7.858e-02, -2.364e-02, -2.411e-01, 7.162e-03, -4.608e-02, -7.436e-02) * s1[y+1][x+0];
	r += M4(-6.344e-02, 1.567e-01, 4.182e-02, 1.431e-01, 1.199e-01, -3.091e-02, -1.002e-01, -1.401e-01, -2.271e-01, 1.964e-02, 9.645e-02, -1.549e-01, -2.493e-01, -4.066e-01, 4.636e-02, 1.821e-01) * s1[y+1][x+1];
	r += M4(-1.357e-02, 2.641e-01, -8.362e-02, 7.501e-02, -8.115e-02, 9.954e-02, -1.068e-01, 1.783e-01, -2.399e-02, 1.766e-02, -1.998e-01, 4.492e-02, -2.152e-02, -2.486e-01, 1.168e-01, -1.447e-01) * s1[y+1][x+2];
	r += M4(2.127e-02, 3.540e-02, -6.157e-03, -6.294e-03, 2.596e-02, -3.604e-02, 1.732e-04, 5.437e-02, 2.455e-02, 1.787e-02, -2.210e-02, 6.165e-02, 3.788e-02, 1.937e-02, -5.489e-02, 9.110e-02) * s1[y+2][x+0];
	r += M4(3.509e-02, 5.603e-02, 4.142e-02, -1.487e-02, 2.411e-02, 1.782e-02, -5.071e-02, -1.918e-02, 4.111e-02, -2.584e-02, 3.513e-02, 1.362e-01, -2.188e-03, -5.805e-02, 7.858e-02, 1.100e-01) * s1[y+2][x+1];
	r += M4(-2.469e-02, 1.968e-02, -1.984e-02, 1.293e-02, 1.144e-02, 1.022e-03, 6.055e-02, 6.808e-03, -5.115e-03, -1.657e-02, 6.619e-02, 1.668e-02, -5.303e-02, 7.197e-02, -7.114e-02, -1.689e-03) * s1[y+2][x+2];
	r += M4(-2.429e-02, -2.125e-02, -3.323e-02, -2.749e-02, -6.385e-02, 1.085e-02, -9.975e-02, 9.761e-02, 9.590e-02, -5.663e-02, 2.657e-02, -4.684e-02, 4.804e-02, 1.418e-02, -7.835e-02, 4.456e-02) * s2[y+0][x+0];
	r += M4(-7.584e-03, -5.064e-02, 3.341e-02, 1.855e-02, -7.319e-02, -7.642e-02, -7.977e-02, -6.153e-02, 6.269e-03, -1.172e-02, 3.187e-02, -1.441e-01, 4.768e-02, -1.499e-01, 1.163e-01, -4.145e-02) * s2[y+0][x+1];
	r += M4(-8.882e-03, -5.903e-02, 1.514e-02, -3.401e-03, -6.297e-02, -2.479e-02, -4.513e-02, 1.193e-02, 1.755e-02, 3.389e-03, -7.871e-02, 6.210e-02, -2.989e-03, 6.513e-02, -2.653e-02, -1.894e-03) * s2[y+0][x+2];
	r += M4(1.583e-02, 3.888e-02, -6.482e-02, -2.506e-02, 1.199e-01, 1.020e-02, -5.219e-02, 2.809e-01, 2.521e-02, -4.511e-02, -1.352e-01, 4.072e-01, 3.794e-02, 1.836e-02, -5.747e-02, -1.298e-01) * s2[y+1][x+0];
	r += M4(-3.164e-02, 5.879e-02, 1.359e-01, -6.521e-02, -2.871e-02, 2.329e-01, 2.566e-01, -5.560e-01, 1.141e-01, -1.749e-01, 2.026e-01, -1.291e-02, 8.003e-02, -7.203e-02, 9.276e-02, 2.974e-02) * s2[y+1][x+1];
	r += M4(-3.412e-03, 8.214e-03, 5.006e-02, 3.797e-02, 2.318e-02, 7.313e-04, -2.606e-04, -4.697e-02, 1.158e-02, -4.081e-02, -6.586e-02, -2.865e-02, 1.578e-02, -4.731e-02, -6.347e-02, 1.927e-02) * s2[y+1][x+2];
	r += M4(-3.472e-02, -1.919e-02, -3.629e-02, -5.596e-02, -7.748e-02, 1.436e-01, -1.051e-02, 2.887e-02, -3.082e-03, 7.653e-02, -2.327e-02, 3.617e-02, -5.407e-03, 3.657e-02, 4.109e-03, 1.194e-02) * s2[y+2][x+0];
	r += M4(-1.465e-02, -6.396e-03, -2.548e-02, -6.664e-02, 1.642e-02, -2.082e-01, -1.694e-01, -1.254e-01, 3.305e-03, 1.103e-01, -4.662e-03, 3.141e-02, -2.264e-02, 8.525e-03, -2.008e-02, -7.123e-03) * s2[y+2][x+1];
	r += M4(-3.340e-03, -2.174e-02, 1.929e-02, 3.042e-02, -1.215e-02, 4.319e-02, -7.041e-02, 3.698e-02, 1.062e-02, 3.990e-02, 3.966e-02, 6.235e-02, -8.618e-04, 1.573e-02, -4.409e-02, 1.959e-02) * s2[y+2][x+2];
	r += M4(-6.958e-02, 2.397e-02, -3.874e-03, -7.494e-02, -6.862e-02, -5.627e-03, 2.093e-02, 2.227e-02, 9.271e-02, 4.185e-02, -1.091e-01, -2.413e-02, 3.019e-01, -3.190e-02, -6.763e-02, 3.081e-02) * s3[y+0][x+0];
	r += M4(4.815e-02, -6.890e-02, 6.091e-02, -3.682e-02, -3.005e-02, -6.305e-02, -3.113e-03, 1.890e-02, 1.330e-01, -9.065e-02, 6.676e-02, -2.361e-02, -1.617e-02, -9.884e-02, 1.220e-01, -8.946e-02) * s3[y+0][x+1];
	r += M4(-6.119e-03, -5.783e-02, -3.082e-02, -1.853e-02, -2.425e-02, -1.807e-02, -3.102e-03, 1.344e-04, 1.022e-02, 3.129e-02, 7.768e-03, -1.384e-02, 4.563e-02, -3.795e-02, 1.350e-02, -3.871e-02) * s3[y+0][x+2];
	r += M4(4.414e-02, 3.521e-02, -7.862e-02, -1.408e-01, 4.775e-02, 3.775e-02, -8.082e-02, 2.368e-02, -4.384e-02, 6.178e-03, -5.081e-02, -1.121e-01, 1.783e-01, 1.775e-02, -4.629e-02, -2.398e-01) * s3[y+1][x+0];
	r += M4(-1.431e-01, 5.779e-02, 1.568e-01, -1.749e-01, -2.045e-02, 1.933e-01, 2.959e-02, 3.298e-02, -1.636e-02, -1.519e-01, -5.305e-03, -1.381e-02, 5.897e-02, 1.196e-01, -1.991e-02, 3.623e-01) * s3[y+1][x+1];
	r += M4(2.574e-02, 2.944e-02, -3.382e-04, 5.961e-03, -1.630e-02, -1.309e-02, -4.401e-03, -7.619e-03, -7.748e-03, -3.390e-02, -2.114e-01, 8.667e-02, 3.144e-02, 5.196e-02, -2.844e-02, 5.988e-02) * s3[y+1][x+2];
	r += M4(-3.198e-02, -5.639e-03, -1.768e-03, -9.495e-02, -3.730e-04, -3.660e-02, -5.983e-02, 4.610e-03, -3.126e-02, 4.454e-02, 3.882e-02, -1.072e-02, -1.447e-02, 5.564e-02, -2.030e-02, 1.494e-01) * s3[y+2][x+0];
	r += M4(2.245e-04, 6.458e-02, 7.834e-02, -1.240e-01, -1.183e-02, -2.032e-02, -3.836e-03, 2.526e-02, 5.526e-03, 5.227e-02, -4.390e-02, -1.225e-02, 5.403e-02, 1.085e-02, -1.740e-02, -8.346e-02) * s3[y+2][x+1];
	r += M4(-1.167e-02, 3.179e-02, -8.721e-03, 2.149e-02, 1.849e-02, -1.910e-02, 5.650e-02, -6.704e-02, 8.673e-04, 4.521e-02, -1.322e-02, 5.153e-02, -4.362e-03, 5.621e-02, -8.344e-02, 7.980e-02) * s3[y+2][x+2];
	r += V4(-3.908e-03, -5.321e-03, 2.616e-03, -7.645e-03);
	return vec4(r);
}
vec4 f1(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-2.013e-02, 3.494e-02, -4.840e-02, 2.110e-02, 3.479e-03, -1.422e-02, 4.821e-02, -1.313e-02, 5.644e-03, 2.368e-02, 4.816e-02, 1.198e-02, 1.338e-02, -2.394e-02, -4.462e-02, -1.678e-02) * s0[y+0][x+0];
	r += M4(-5.486e-02, -2.042e-02, 3.136e-02, -3.839e-02, 4.626e-03, 2.764e-02, -4.534e-02, -2.478e-02, 6.330e-03, 4.578e-02, -1.314e-01, 4.635e-02, -2.377e-02, -1.594e-02, 4.818e-02, -1.159e-02) * s0[y+0][x+1];
	r += M4(-1.170e-01, 8.923e-02, -1.343e-02, -8.482e-02, -3.481e-03, -1.741e-02, 2.241e-02, -1.589e-03, -4.902e-02, 1.843e-02, -5.283e-02, -1.666e-02, 7.918e-03, -6.003e-02, -2.288e-02, 2.368e-02) * s0[y+0][x+2];
	r += M4(-1.293e-03, 2.674e-03, 1.056e-01, -5.823e-02, 3.966e-02, 8.762e-03, -1.084e-01, 5.530e-02, -2.756e-02, 5.743e-02, -5.642e-02, 1.595e-02, 3.219e-02, 1.052e-02, 2.286e-02, -5.746e-02) * s0[y+1][x+0];
	r += M4(1.782e-01, 2.080e-01, -5.631e-03, 9.351e-03, -1.849e-01, -2.939e-01, -1.754e-02, 6.909e-02, -3.062e-01, -5.019e-02, 1.972e-01, -1.765e-01, -4.122e-02, 7.347e-02, 7.696e-02, 5.127e-03) * s0[y+1][x+1];
	r += M4(-1.970e-01, -7.050e-03, -1.335e-03, -4.200e-02, 1.119e-02, -3.085e-02, -3.499e-02, -5.647e-03, 1.563e-01, 4.673e-02, 2.482e-01, -1.230e-02, -6.576e-03, -2.202e-02, -3.789e-04, 3.940e-03) * s0[y+1][x+2];
	r += M4(-2.773e-02, -2.283e-03, -2.401e-02, 3.650e-02, -2.788e-02, -3.086e-02, 2.837e-02, -5.642e-02, 7.484e-03, -3.167e-02, -1.155e-02, -1.203e-02, 6.503e-02, 5.702e-06, -3.891e-02, 7.075e-02) * s0[y+2][x+0];
	r += M4(-3.604e-02, -7.063e-03, -1.169e-02, 5.764e-02, -6.141e-02, 1.266e-02, -1.556e-02, -5.801e-02, 2.358e-02, -4.505e-02, -2.604e-02, 6.650e-02, 3.556e-02, -3.809e-02, 4.407e-02, 5.041e-02) * s0[y+2][x+1];
	r += M4(-7.985e-02, -2.618e-02, -1.460e-02, -2.423e-04, 5.861e-04, -6.425e-03, -2.334e-03, 2.832e-03, -4.243e-02, -8.567e-02, -7.542e-02, -1.588e-02, 2.295e-02, 1.083e-02, -1.259e-02, -1.569e-02) * s0[y+2][x+2];
	r += M4(6.270e-03, -9.869e-03, -8.722e-02, 2.193e-02, 2.153e-02, 2.327e-02, 7.969e-02, -1.500e-03, 2.038e-02, 8.666e-03, 1.701e-02, 2.881e-03, 4.722e-02, -2.062e-03, 5.259e-02, -1.079e-01) * s1[y+0][x+0];
	r += M4(4.854e-02, -1.166e-03, -1.799e-02, -9.545e-03, -9.020e-02, 3.841e-02, -2.164e-01, 5.071e-02, -1.014e-02, 6.817e-02, -1.833e-02, 5.905e-03, -9.719e-02, -1.073e-02, 2.368e-02, 1.189e-02) * s1[y+0][x+1];
	r += M4(-1.102e-01, 1.713e-02, -6.090e-03, -4.895e-02, -5.108e-02, -5.967e-05, 6.782e-03, -8.820e-03, -4.628e-02, 4.285e-02, 7.359e-03, -1.694e-02, 1.308e-01, -2.362e-02, 8.505e-03, 7.251e-02) * s1[y+0][x+2];
	r += M4(7.656e-02, -1.931e-02, 1.623e-01, -1.046e-01, -3.506e-02, 8.423e-02, -1.161e-01, 1.249e-01, -1.320e-03, 4.163e-02, 3.041e-02, 1.376e-03, 3.024e-02, -6.771e-03, 7.106e-02, -7.164e-02) * s1[y+1][x+0];
	r += M4(4.311e-01, 2.399e-01, 1.896e-02, -1.314e-01, -5.100e-01, -2.908e-01, 2.081e-01, 4.739e-02, -1.623e-01, -3.769e-02, 2.465e-02, -4.663e-02, -4.284e-02, 6.534e-02, 1.348e-01, 2.663e-01) * s1[y+1][x+1];
	r += M4(-7.980e-02, -7.029e-02, 3.419e-03, -2.837e-02, -8.773e-02, 8.606e-03, -4.027e-02, -2.368e-02, 2.825e-02, -8.321e-03, -3.881e-02, 5.010e-02, 3.261e-02, 2.249e-02, 6.897e-02, 1.338e-02) * s1[y+1][x+2];
	r += M4(-7.651e-03, 1.395e-02, -3.000e-02, 5.035e-02, -2.658e-02, -2.811e-02, -2.014e-02, 2.284e-02, 1.201e-02, -4.174e-02, -1.154e-02, 2.162e-02, -1.086e-02, -4.043e-02, -7.644e-02, 1.575e-01) * s1[y+2][x+0];
	r += M4(2.013e-03, 1.929e-02, 1.930e-02, 4.990e-02, -8.326e-02, 3.261e-02, -1.389e-02, -1.003e-01, 1.360e-02, -2.362e-02, -3.259e-02, 6.161e-02, 4.648e-02, -7.029e-02, 2.831e-02, 1.062e-01) * s1[y+2][x+1];
	r += M4(-6.851e-02, -4.357e-02, -2.190e-02, 9.542e-03, 2.280e-02, 3.800e-02, 2.688e-02, 3.538e-02, -3.363e-02, -2.989e-02, 4.533e-02, -4.913e-02, 3.033e-02, 7.168e-03, -7.876e-03, -2.206e-02) * s1[y+2][x+2];
	r += M4(-2.273e-02, 5.905e-02, 5.621e-03, 1.962e-02, -5.861e-02, -8.926e-02, 2.586e-01, -5.728e-02, -4.381e-02, 7.791e-02, -3.130e-02, -3.783e-02, -3.666e-02, -6.112e-02, -3.800e-02, 2.246e-02) * s2[y+0][x+0];
	r += M4(-7.468e-03, 8.082e-02, -1.256e-02, -5.789e-03, 1.225e-01, 7.104e-02, -2.365e-01, 3.259e-02, -2.461e-01, -1.310e-01, -3.886e-01, 5.905e-02, 4.869e-02, 6.262e-02, 1.605e-02, 6.099e-03) * s2[y+0][x+1];
	r += M4(-3.603e-02, 6.663e-02, -9.833e-03, -1.666e-02, 1.002e-01, 2.909e-02, -8.463e-02, 1.596e-02, 4.877e-02, -4.081e-02, 1.427e-02, 1.818e-02, -2.229e-03, -2.833e-02, -6.590e-03, -8.887e-03) * s2[y+0][x+2];
	r += M4(-3.052e-02, 9.829e-03, -7.628e-02, 4.253e-02, 7.989e-02, 2.080e-02, -7.011e-02, 1.028e-01, -1.393e-01, -1.173e-02, 2.134e-01, 2.355e-01, -7.413e-02, 2.196e-02, -3.053e-02, -5.448e-02) * s2[y+1][x+0];
	r += M4(-1.263e-01, -6.370e-02, 1.964e-02, -3.078e-02, -1.868e-01, -3.831e-01, -1.106e+00, 1.364e-01, 3.618e-01, 4.502e-01, 1.796e-01, -1.203e-01, -6.033e-02, 6.666e-02, 3.636e-02, -6.351e-02) * s2[y+1][x+1];
	r += M4(-8.963e-02, 7.788e-02, -2.374e-02, -3.009e-02, 3.825e-02, -4.725e-02, 6.679e-02, 3.350e-02, -1.279e-01, -5.214e-03, -3.857e-02, -5.847e-02, -3.592e-02, 5.017e-02, -4.065e-02, -3.275e-02) * s2[y+1][x+2];
	r += M4(-6.181e-02, 1.492e-02, 2.694e-02, 1.291e-02, 2.991e-02, -1.408e-02, 2.219e-01, -5.012e-02, -2.138e-02, -1.819e-02, 4.265e-02, 5.414e-02, 1.584e-03, 1.195e-02, -1.238e-02, 8.515e-04) * s2[y+2][x+0];
	r += M4(-8.631e-03, 5.616e-02, -6.320e-02, 9.967e-02, -1.573e-02, -8.415e-02, -3.271e-01, -9.729e-03, 6.814e-02, 1.241e-02, 4.246e-02, 1.248e-01, 3.269e-02, 1.893e-02, 1.201e-02, 5.415e-02) * s2[y+2][x+1];
	r += M4(-4.827e-03, -3.786e-03, -1.520e-03, 8.982e-02, -3.474e-02, 3.438e-03, -1.578e-02, -6.968e-02, 1.878e-02, -4.946e-02, 3.734e-02, 4.144e-02, 3.040e-02, 4.944e-04, 7.016e-03, 3.246e-02) * s2[y+2][x+2];
	r += M4(2.402e-02, 5.350e-02, -8.410e-02, 4.958e-03, -2.693e-02, -4.542e-02, 1.477e-02, -3.119e-02, 1.824e-02, 1.990e-03, -5.471e-02, 2.606e-02, -7.327e-03, -3.196e-02, -9.572e-02, 4.360e-02) * s3[y+0][x+0];
	r += M4(-3.615e-02, 9.760e-02, 1.331e-01, -9.446e-02, 2.525e-03, 5.314e-02, -1.582e-03, -3.401e-02, -4.189e-02, 1.349e-02, 1.099e-03, -1.435e-02, -1.158e-01, -2.339e-02, -6.339e-02, 3.796e-02) * s3[y+0][x+1];
	r += M4(-3.182e-03, 9.373e-02, 6.172e-02, -4.721e-02, 1.646e-02, 7.345e-03, 7.305e-03, 8.449e-03, 6.830e-03, -1.082e-02, -1.658e-02, -1.132e-02, 2.781e-02, -1.795e-03, 8.174e-02, -1.653e-02) * s3[y+0][x+2];
	r += M4(3.916e-02, -3.013e-02, -2.187e-01, -3.771e-02, -1.736e-02, -3.845e-02, -8.809e-02, -8.140e-03, -7.809e-02, 3.469e-02, 7.869e-02, -7.978e-02, -6.339e-02, 1.669e-01, -5.599e-02, -1.004e-02) * s3[y+1][x+0];
	r += M4(-2.035e-01, -1.354e-01, 3.337e-01, -1.071e-01, -1.321e-01, -1.805e-01, 2.338e-02, 5.969e-02, 1.124e-01, 2.628e-01, -2.643e-02, -1.334e-01, -3.511e-01, 9.757e-02, 5.982e-03, -3.428e-01) * s3[y+1][x+1];
	r += M4(-1.168e-01, 4.810e-02, 3.678e-02, -1.013e-01, 3.550e-02, -2.219e-02, -1.540e-02, 3.926e-02, 7.462e-04, 6.077e-02, -2.306e-02, -2.789e-02, -7.579e-02, 5.703e-02, -3.597e-02, -9.833e-02) * s3[y+1][x+2];
	r += M4(-4.496e-03, 3.967e-02, 6.217e-02, -6.421e-02, -1.404e-02, -2.608e-02, -4.666e-03, -6.688e-02, 5.356e-02, 4.035e-02, 1.739e-02, 6.372e-02, 2.364e-02, 2.206e-02, 8.440e-03, 1.528e-01) * s3[y+2][x+0];
	r += M4(2.408e-02, 5.317e-02, 2.177e-02, 7.961e-03, 7.946e-03, -3.796e-03, 2.772e-02, -5.658e-02, -1.750e-02, -2.537e-02, -3.728e-02, 6.299e-02, 1.357e-02, 3.199e-02, -1.526e-02, 2.058e-01) * s3[y+2][x+1];
	r += M4(-2.711e-02, -1.546e-02, 5.061e-02, 1.872e-02, 5.399e-03, 1.002e-02, 7.840e-03, -1.721e-02, 4.100e-04, 3.158e-03, 3.009e-02, 1.140e-02, 2.547e-02, -1.426e-02, -2.634e-02, 4.603e-02) * s3[y+2][x+2];
	r += V4(1.419e-02, 1.681e-02, 8.219e-03, -3.860e-03);
	return vec4(r);
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv7_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
			s2[ay][ax] = l1(x - 1, y - 1);
			s1[ay][ax] = -max(-s0[ay][ax], V4(0.0));
			s0[ay][ax] = max(s0[ay][ax], V4(0.0));
			s3[ay][ax] = -max(-s2[ay][ax], V4(0.0));
			s2[ay][ax] = max(s2[ay][ax], V4(0.0));
		}
	}
	barrier();
	vec4 r0 = f0(xy.x, xy.y);
	vec4 r1 = f1(xy.x, xy.y);
	imageStore(out_image, opos + ivec2(0, 0), r0);
	imageStore(out_image, opos + ivec2(1, 0), r1);
}

//!DESC CuNNy-8x8C-RCAS-out
//!HOOK LUMA
//!COMPUTE 8 8 8 8
//!BIND conv8
//!BIND LUMA
//!SAVE out
//!WIDTH LUMA.w
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(texelFetch(conv8_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv8_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 s0[10][10];
shared V4 s1[10][10];
shared V4 s2[10][10];
shared V4 s3[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-1.415e-02, 1.128e-02, -1.657e-02, -2.399e-02, -2.051e-02, -9.357e-03, -7.985e-02, 1.091e-02, -6.942e-02, -1.710e-03, -6.310e-03, -1.051e-03, -5.797e-03, -1.517e-02, -3.882e-02, 1.257e-02) * s0[y+0][x+0];
	r += M4(8.306e-02, 6.682e-02, -6.733e-02, -4.265e-03, 1.405e-01, 9.417e-02, -5.060e-02, -1.343e-01, 2.049e-02, -6.817e-02, 1.288e-02, -3.062e-02, 2.463e-01, 8.165e-02, 8.482e-02, -7.447e-02) * s0[y+0][x+1];
	r += M4(6.218e-02, 2.751e-02, 2.739e-02, -1.604e-02, 4.588e-02, 7.062e-02, -1.886e-02, -2.045e-02, -9.785e-03, -7.110e-04, 3.150e-03, 1.984e-02, 1.184e-01, -2.590e-01, 3.052e-02, 5.141e-02) * s0[y+0][x+2];
	r += M4(9.301e-02, -3.622e-02, 9.731e-03, 2.097e-02, -3.375e-01, 2.581e-02, 1.352e-01, -2.265e-02, -8.031e-03, 5.421e-02, -1.072e-01, 1.037e-02, -2.859e-02, -7.739e-02, 3.078e-02, -5.596e-02) * s0[y+1][x+0];
	r += M4(-2.799e-01, 5.431e-02, 1.238e-01, 6.473e-02, -3.762e-01, -7.207e-01, 5.399e-01, 5.868e-01, 1.330e-01, -1.195e-01, 1.147e-01, -1.552e-01, -2.804e-01, -3.309e-02, 4.420e-02, 3.019e-01) * s0[y+1][x+1];
	r += M4(-2.045e-02, -6.392e-02, -9.496e-02, -4.240e-03, -9.529e-02, -3.088e-02, 6.563e-02, 2.475e-01, -4.080e-02, 5.036e-02, 1.989e-03, 2.384e-02, 8.327e-02, -1.509e-01, 1.488e-01, -4.873e-01) * s0[y+1][x+2];
	r += M4(-4.869e-02, 1.819e-02, 5.429e-04, 1.206e-02, 1.969e-02, -4.666e-02, 2.779e-02, -2.504e-02, 1.656e-02, -2.045e-02, 2.035e-02, 7.962e-03, 1.571e-02, 9.020e-03, -1.497e-03, -2.504e-02) * s0[y+2][x+0];
	r += M4(5.909e-02, -2.990e-02, -6.514e-02, -4.786e-03, 7.133e-02, 1.112e-01, -1.636e-01, -4.269e-02, -4.436e-03, 4.436e-02, -6.903e-03, -1.212e-02, 1.509e-01, 5.789e-02, -3.459e-03, -6.199e-02) * s0[y+2][x+1];
	r += M4(-7.591e-02, -2.077e-02, 3.586e-02, 7.711e-02, 4.097e-02, 5.117e-02, 1.652e-03, -6.089e-02, 5.992e-02, 2.693e-02, -2.802e-02, -3.145e-02, 1.448e-02, 3.235e-02, -4.784e-02, 8.478e-03) * s0[y+2][x+2];
	r += M4(-1.798e-02, -2.152e-03, -2.113e-02, -6.944e-03, -7.631e-02, 7.302e-03, -6.337e-02, 9.479e-03, -1.328e-01, 7.007e-02, 1.805e-02, 5.451e-03, 2.244e-02, -3.802e-02, -5.437e-02, 3.174e-02) * s1[y+0][x+0];
	r += M4(6.862e-02, 3.464e-02, -7.495e-02, -4.628e-02, 2.033e-01, 5.974e-02, -8.374e-02, -1.047e-01, 3.868e-01, -4.110e-01, 5.390e-02, -2.729e-02, 1.653e-02, 1.704e-01, 1.230e-01, -5.582e-02) * s1[y+0][x+1];
	r += M4(4.766e-02, 7.316e-02, 1.432e-02, -2.105e-02, 5.025e-02, 1.323e-01, -3.918e-02, -6.184e-02, -4.138e-02, -1.293e-02, -1.919e-02, 4.141e-02, 3.111e-02, -1.112e-01, 2.856e-02, 8.304e-02) * s1[y+0][x+2];
	r += M4(9.936e-02, -1.163e-02, 2.300e-02, 2.932e-02, -6.984e-02, 2.885e-02, -9.400e-02, -3.188e-02, -2.963e-02, 3.555e-02, -2.076e-01, 1.039e-01, -9.443e-02, -3.265e-02, 8.225e-02, -6.517e-02) * s1[y+1][x+0];
	r += M4(-3.647e-01, 4.548e-02, 3.877e-01, 9.421e-02, -7.233e-02, -2.143e-01, 2.044e-01, 6.478e-02, 3.068e-01, -3.315e-01, 6.777e-01, -6.855e-01, -8.975e-02, -6.819e-02, -1.329e-01, 2.881e-01) * s1[y+1][x+1];
	r += M4(-8.279e-02, -4.200e-01, 9.374e-03, 2.851e-01, -7.680e-02, 5.105e-05, 9.666e-02, 1.980e-01, -1.082e-01, 7.204e-02, -6.935e-02, 3.063e-02, -2.710e-02, -5.598e-02, 1.180e-02, -2.088e-01) * s1[y+1][x+2];
	r += M4(-5.168e-02, 1.659e-02, -2.951e-02, 1.336e-02, 3.674e-02, -1.538e-02, -1.893e-02, 9.994e-03, -4.344e-03, -6.902e-03, 5.113e-02, -5.213e-03, 1.787e-02, 1.092e-02, -2.211e-02, -7.718e-03) * s1[y+2][x+0];
	r += M4(4.456e-01, 7.321e-02, -4.128e-01, -2.209e-01, -2.356e-02, 4.877e-02, -2.768e-02, -1.150e-01, 5.582e-02, 2.606e-02, -1.110e-02, -1.807e-02, 8.447e-02, 4.237e-02, 7.532e-03, -1.708e-02) * s1[y+2][x+1];
	r += M4(-1.253e-01, 2.441e-01, 9.114e-02, -2.130e-01, 2.289e-02, -2.736e-02, 1.924e-02, 4.128e-02, 5.170e-02, 2.700e-02, -4.034e-02, -1.243e-02, 3.338e-02, 5.392e-02, -3.781e-02, -3.041e-02) * s1[y+2][x+2];
	r += M4(-9.769e-03, -2.162e-02, 6.087e-03, -1.256e-02, -1.127e-02, 1.215e-02, -7.344e-02, -6.475e-03, -2.251e-02, 3.025e-02, -2.937e-03, -5.968e-03, -3.475e-02, 6.172e-02, -1.529e-03, 1.861e-03) * s2[y+0][x+0];
	r += M4(2.669e-02, -9.273e-04, 1.783e-02, 1.109e-03, 1.324e-01, 8.017e-02, -6.989e-02, -7.064e-02, 3.254e-03, -6.371e-02, 3.119e-02, 6.371e-03, -7.114e-02, -1.778e-01, 3.354e-02, 1.848e-02) * s2[y+0][x+1];
	r += M4(-8.356e-02, -5.717e-02, 5.217e-03, 2.923e-02, 1.317e-01, 1.733e-01, -2.813e-02, -6.025e-02, 9.409e-02, 5.063e-02, -1.360e-02, 1.751e-02, 2.406e-01, 2.124e-01, -4.139e-02, -3.993e-02) * s2[y+0][x+2];
	r += M4(2.442e-01, 2.031e-02, 1.560e-01, 3.141e-02, 9.617e-03, -1.467e-01, 9.000e-02, -8.219e-02, 7.349e-02, -1.855e-03, 2.704e-03, 3.706e-02, 4.431e-02, 3.455e-02, 3.125e-03, 5.763e-02) * s2[y+1][x+0];
	r += M4(1.297e-01, 4.405e-01, 1.091e-01, 2.825e-01, -5.426e-02, 7.794e-02, 2.081e-01, 3.154e-01, -2.705e-01, 2.180e-01, -3.005e-01, -3.017e-02, 4.120e-02, 1.150e-01, -2.448e-01, -2.243e-01) * s2[y+1][x+1];
	r += M4(1.497e-01, 8.518e-02, -6.274e-02, -7.592e-02, -2.549e-01, -2.100e-01, 1.181e-01, 2.031e-01, 2.685e-01, 6.932e-03, 2.258e-01, -8.811e-02, -2.290e-01, -2.113e-01, 2.435e-01, 2.244e-01) * s2[y+1][x+2];
	r += M4(-5.473e-02, 2.353e-02, 1.313e-03, 2.336e-02, 2.302e-02, 8.658e-04, 1.203e-03, -4.918e-02, -2.699e-02, 1.343e-02, 1.889e-02, 5.192e-03, 3.539e-03, 9.714e-04, 1.781e-02, 2.052e-02) * s2[y+2][x+0];
	r += M4(-4.389e-02, -9.866e-02, -1.994e-02, 2.896e-02, 2.519e-02, 7.350e-02, -2.334e-02, 2.154e-02, 4.527e-02, -4.382e-02, -2.089e-02, 8.705e-02, -7.404e-02, -4.299e-02, 1.549e-02, 5.256e-02) * s2[y+2][x+1];
	r += M4(-4.317e-02, -1.357e-02, 6.996e-02, 4.081e-02, 8.526e-02, 4.492e-02, -8.344e-02, -8.495e-02, -3.545e-02, -2.244e-02, 1.061e-01, 3.839e-02, 1.320e-02, 7.026e-03, -3.107e-02, -3.180e-02) * s2[y+2][x+2];
	r += M4(-4.028e-02, -3.755e-03, 1.544e-02, -1.831e-03, -6.005e-02, 9.747e-03, -1.119e-01, -3.629e-03, -2.814e-02, 3.576e-02, 1.568e-03, -9.254e-03, -6.352e-02, 8.281e-02, 1.830e-02, -2.289e-02) * s3[y+0][x+0];
	r += M4(1.062e-02, -5.125e-02, 3.381e-02, -1.827e-03, 1.539e-01, 1.872e-02, -4.851e-02, -1.145e-01, 4.482e-02, -9.662e-02, 1.266e-03, 2.864e-02, -6.207e-01, -5.997e-01, 5.215e-01, 2.972e-01) * s3[y+0][x+1];
	r += M4(-9.497e-02, -6.881e-02, 1.786e-02, 4.183e-02, 1.227e-01, 1.646e-01, -3.928e-02, -8.640e-02, 2.066e-02, 5.872e-02, -5.549e-03, -1.156e-02, 2.176e-01, 5.179e-02, -8.379e-02, 2.146e-01) * s3[y+0][x+2];
	r += M4(1.625e-01, 1.422e-02, 5.997e-02, 2.837e-02, 5.216e-03, -1.304e-01, 9.167e-02, -5.573e-02, 1.051e-01, -1.875e-02, -5.254e-03, 2.546e-02, 2.809e-03, 3.950e-03, 8.032e-02, 5.152e-02) * s3[y+1][x+0];
	r += M4(5.660e-02, 9.595e-02, 1.220e-02, -5.874e-02, 3.096e-01, 3.430e-01, 5.918e-01, 5.456e-01, -3.404e-01, 2.747e-01, -2.627e-01, -3.254e-02, 1.309e-01, 8.735e-02, -2.397e-01, -1.424e-01) * s3[y+1][x+1];
	r += M4(1.625e-01, 6.603e-02, -7.250e-02, -1.216e-01, -2.646e-01, -1.976e-01, 1.219e-01, 2.569e-01, 7.344e-02, 1.464e-02, 5.138e-02, 7.153e-02, -2.163e-01, -9.033e-02, 1.818e-01, 1.353e-01) * s3[y+1][x+2];
	r += M4(-6.811e-02, 1.636e-02, 2.941e-02, 2.766e-02, 4.765e-02, 1.506e-02, -4.390e-02, -5.847e-02, -2.884e-02, 1.367e-02, 1.215e-02, 1.717e-02, 1.702e-02, 7.436e-04, 2.050e-02, 1.107e-02) * s3[y+2][x+0];
	r += M4(-3.800e-02, -1.172e-01, -1.374e-02, 2.031e-02, 5.863e-02, 1.120e-01, 8.934e-03, 3.616e-03, 8.084e-04, -4.846e-02, -4.518e-02, 1.049e-01, -6.371e-02, -2.737e-02, 4.591e-02, 3.868e-02) * s3[y+2][x+1];
	r += M4(-3.021e-02, -1.247e-02, 6.468e-02, 1.316e-02, 7.935e-02, 4.125e-02, -8.465e-02, -8.279e-02, -3.686e-02, -4.823e-02, 3.175e-02, 3.538e-03, -1.439e-03, 6.735e-04, -3.459e-02, 6.689e-03) * s3[y+2][x+2];
	r += V4(-3.195e-04, 8.303e-05, 7.540e-04, 1.873e-03);
	return tanh(vec4(r));
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(1, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv8_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
			s2[ay][ax] = l1(x - 1, y - 1);
			s1[ay][ax] = -max(-s0[ay][ax], V4(0.0));
			s0[ay][ax] = max(s0[ay][ax], V4(0.0));
			s3[ay][ax] = -max(-s2[ay][ax], V4(0.0));
			s2[ay][ax] = max(s2[ay][ax], V4(0.0));
		}
	}
	barrier();
	vec4 r0 = f0(xy.x, xy.y);
	imageStore(out_image, opos + ivec2(0, 0), r0);
}

//!DESC CuNNy-8x8C-RCAS-shuffle
//!HOOK LUMA
//!BIND out
//!BIND rcas
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 1
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
vec4 hook() {
	vec4 r = vec4(0.0);
	vec2 f = fract(out_pos * out_size);
	ivec2 i = ivec2(f * vec2(2.0));
	r.r = out_tex((vec2(0.5) - f) * out_pt + out_pos)[2*i.y + i.x];
	r.r += rcas_tex(rcas_pos).r;
	r.a = 1.0;
	return clamp(r, 0.0, 1.0);
}
