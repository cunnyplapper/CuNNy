// CuNNy 4x8C RCAS
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

// FSR mpv | modified
// Copyright (c) 2021 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// FidelityFX FSR v1.0.2 by AMD
// ported to mpv by agyild

//!DESC CuNNy-EASU
//!HOOK LUMA
//!BIND LUMA
//!SAVE easu
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
//!COMPONENTS 1

float APrxLoRcpF1(float a) {
	return uintBitsToFloat(uint(0x7ef07ebb) - floatBitsToUint(a));
}

float APrxLoRsqF1(float a) {
	return uintBitsToFloat(uint(0x5f347d74) - (floatBitsToUint(a) >> uint(1)));
}

float AMin3F1(float x, float y, float z) {
	return min(x, min(y, z));
}

float AMax3F1(float x, float y, float z) {
	return max(x, max(y, z));
}

void tap(inout float aC, inout float aW, vec2 off, vec2 dir, vec2 len,
         float lob, float clp, float c){
	vec2 v;
	v.x = (off.x * ( dir.x)) + (off.y * dir.y);
	v.y = (off.x * (-dir.y)) + (off.y * dir.x);
	v *= len;
	float d2 = v.x * v.x + v.y * v.y;
	d2 = min(d2, clp);
	float wB = float(2.0 / 5.0) * d2 + -1.0;
	float wA = lob * d2 + -1.0;
	wB *= wB;
	wA *= wA;
	wB = float(25.0 / 16.0) * wB + float(-(25.0 / 16.0 - 1.0));
	float w = wB * wA;
	aC += c * w;
	aW += w;
}

void set(inout vec2 dir, inout float len, vec2 pp, bool biS, bool biT,
         bool biU, bool biV, float lA, float lB, float lC, float lD, float lE){
	float w = 0.0;
	if (biS)
		w = (1.0 - pp.x) * (1.0 - pp.y);
	if (biT)
		w =        pp.x  * (1.0 - pp.y);
	if (biU)
		w = (1.0 - pp.x) *        pp.y;
	if (biV)
		w =        pp.x  *        pp.y;
	float dc = lD - lC;
	float cb = lC - lB;
	float lenX = max(abs(dc), abs(cb));
	lenX = APrxLoRcpF1(lenX);
	float dirX = lD - lB;
	lenX = clamp(abs(dirX) * lenX, 0.0, 1.0);
	lenX *= lenX;
	float ec = lE - lC;
	float ca = lC - lA;
	float lenY = max(abs(ec), abs(ca));
	lenY = APrxLoRcpF1(lenY);
	float dirY = lE - lA;
	lenY = clamp(abs(dirY) * lenY, 0.0, 1.0);
	lenY *= lenY;
	dir += vec2(dirX, dirY) * w;
	len += dot(vec2(w), vec2(lenX, lenY));
}

vec4 hook() {
	vec4 pix = vec4(0.0, 0.0, 0.0, 1.0);
	vec2 pp = LUMA_pos * LUMA_size - vec2(0.5);
	vec2 fp = floor(pp);
	pp -= fp;
#if (defined(LUMA_gather) && (__VERSION__ >= 400 || (GL_ES && __VERSION__ >= 310)))
	vec4 bczzL = LUMA_gather(vec2((fp + vec2(1.0, -1.0)) * LUMA_pt), 0);
	vec4 ijfeL = LUMA_gather(vec2((fp + vec2(0.0,  1.0)) * LUMA_pt), 0);
	vec4 klhgL = LUMA_gather(vec2((fp + vec2(2.0,  1.0)) * LUMA_pt), 0);
	vec4 zzonL = LUMA_gather(vec2((fp + vec2(1.0,  3.0)) * LUMA_pt), 0);
#else
	float b = LUMA_tex(vec2((fp + vec2(0.5, -0.5)) * LUMA_pt)).r;
	float c = LUMA_tex(vec2((fp + vec2(1.5, -0.5)) * LUMA_pt)).r;
	float e = LUMA_tex(vec2((fp + vec2(-0.5, 0.5)) * LUMA_pt)).r;
	float f = LUMA_tex(vec2((fp + vec2( 0.5, 0.5)) * LUMA_pt)).r;
	float g = LUMA_tex(vec2((fp + vec2( 1.5, 0.5)) * LUMA_pt)).r;
	float h = LUMA_tex(vec2((fp + vec2( 2.5, 0.5)) * LUMA_pt)).r;
	float i = LUMA_tex(vec2((fp + vec2(-0.5, 1.5)) * LUMA_pt)).r;
	float j = LUMA_tex(vec2((fp + vec2( 0.5, 1.5)) * LUMA_pt)).r;
	float k = LUMA_tex(vec2((fp + vec2( 1.5, 1.5)) * LUMA_pt)).r;
	float l = LUMA_tex(vec2((fp + vec2( 2.5, 1.5)) * LUMA_pt)).r;
	float n = LUMA_tex(vec2((fp + vec2(0.5, 2.5) ) * LUMA_pt)).r;
	float o = LUMA_tex(vec2((fp + vec2(1.5, 2.5) ) * LUMA_pt)).r;
	vec4 bczzL = vec4(b, c, 0.0, 0.0);
	vec4 ijfeL = vec4(i, j, f, e);
	vec4 klhgL = vec4(k, l, h, g);
	vec4 zzonL = vec4(0.0, 0.0, o, n);
#endif
	float bL = bczzL.x;
	float cL = bczzL.y;
	float iL = ijfeL.x;
	float jL = ijfeL.y;
	float fL = ijfeL.z;
	float eL = ijfeL.w;
	float kL = klhgL.x;
	float lL = klhgL.y;
	float hL = klhgL.z;
	float gL = klhgL.w;
	float oL = zzonL.z;
	float nL = zzonL.w;
	vec2 dir = vec2(0.0);
	float len = 0.0;
	set(dir, len, pp, true, false, false, false, bL, eL, fL, gL, jL);
	set(dir, len, pp, false, true, false, false, cL, fL, gL, hL, kL);
	set(dir, len, pp, false, false, true, false, fL, iL, jL, kL, nL);
	set(dir, len, pp, false, false, false, true, gL, jL, kL, lL, oL);
	vec2 dir2 = dir * dir;
	float dirR = dir2.x + dir2.y;
	bool zro = dirR < float(1.0 / 32768.0);
	dirR = APrxLoRsqF1(dirR);
	dirR = zro ? 1.0 : dirR;
	dir.x = zro ? 1.0 : dir.x;
	dir *= vec2(dirR);
	len = len * 0.5;
	len *= len;
	float stretch = (dir.x * dir.x + dir.y * dir.y) * APrxLoRcpF1(max(abs(dir.x), abs(dir.y)));
	vec2 len2 = vec2(1.0 + (stretch - 1.0) * len, 1.0 + -0.5 * len);
	float lob = 0.5 + float((1.0 / 4.0 - 0.04) - 0.5) * len;
	float clp = APrxLoRcpF1(lob);
	float aC = 0.0;
	float aW = 0.0;
	tap(aC, aW, vec2( 0.0,-1.0) - pp, dir, len2, lob, clp, bL);
	tap(aC, aW, vec2( 1.0,-1.0) - pp, dir, len2, lob, clp, cL);
	tap(aC, aW, vec2(-1.0, 1.0) - pp, dir, len2, lob, clp, iL);
	tap(aC, aW, vec2( 0.0, 1.0) - pp, dir, len2, lob, clp, jL);
	tap(aC, aW, vec2( 0.0, 0.0) - pp, dir, len2, lob, clp, fL);
	tap(aC, aW, vec2(-1.0, 0.0) - pp, dir, len2, lob, clp, eL);
	tap(aC, aW, vec2( 1.0, 1.0) - pp, dir, len2, lob, clp, kL);
	tap(aC, aW, vec2( 2.0, 1.0) - pp, dir, len2, lob, clp, lL);
	tap(aC, aW, vec2( 2.0, 0.0) - pp, dir, len2, lob, clp, hL);
	tap(aC, aW, vec2( 1.0, 0.0) - pp, dir, len2, lob, clp, gL);
	tap(aC, aW, vec2( 1.0, 2.0) - pp, dir, len2, lob, clp, oL);
	tap(aC, aW, vec2( 0.0, 2.0) - pp, dir, len2, lob, clp, nL);
	pix.r = aC / aW;
	float min1 = min(AMin3F1(fL, gL, jL), kL);
	float max1 = max(AMax3F1(fL, gL, jL), kL);
	pix.r = clamp(pix.r, min1, max1);
	pix.r = clamp(pix.r, 0.0, 1.0);
	return pix;
}

//!DESC CuNNy-RCAS
//!HOOK LUMA
//!BIND easu
//!SAVE rcas
//!WIDTH easu.w
//!HEIGHT easu.h
//!COMPONENTS 1

// CuNNy: do not change unless changed during training as well
#define SHARPNESS 2.0
#define FSR_RCAS_LIMIT (0.25 - (1.0 / 16.0))

float APrxMedRcpF1(float a) {
	float b = uintBitsToFloat(uint(0x7ef19fff) - floatBitsToUint(a));
	return b * (-b * a + 2.0);
}

float AMax3F1(float x, float y, float z) {
	return max(x, max(y, z)); 
}


float AMin3F1(float x, float y, float z) {
	return min(x, min(y, z));
}

vec4 hook() {
#if (defined(easu_gather) && (__VERSION__ >= 400 || (GL_ES && __VERSION__ >= 310)))
	vec3 bde = easu_gather(easu_pos + easu_pt * vec2(-0.5), 0).xyz;
	float b = bde.z;
	float d = bde.x;
	float e = bde.y;
	vec2 fh = easu_gather(easu_pos + easu_pt * vec2(0.5), 0).zx;
	float f = fh.x;
	float h = fh.y;
#else
	float b = easu_texOff(vec2( 0.0, -1.0)).r;
	float d = easu_texOff(vec2(-1.0,  0.0)).r;
	float e = easu_tex(easu_pos).r;
	float f = easu_texOff(vec2(1.0, 0.0)).r;
	float h = easu_texOff(vec2(0.0, 1.0)).r;
#endif
	float mn1L = min(AMin3F1(b, d, f), h);
	float mx1L = max(AMax3F1(b, d, f), h);
	vec2 peakC = vec2(1.0, -1.0 * 4.0);
	float hitMinL = min(mn1L, e) / (4.0 * mx1L);
	float hitMaxL = (peakC.x - max(mx1L, e)) / (4.0 * mn1L + peakC.y);
	float lobeL = max(-hitMinL, hitMaxL);
	float lobe = max(float(-FSR_RCAS_LIMIT), min(lobeL, 0.0)) * exp2(-clamp(float(SHARPNESS), 0.0, 2.0));
	float nz = 0.25 * b + 0.25 * d + 0.25 * f + 0.25 * h - e;
	nz = clamp(abs(nz) * APrxMedRcpF1(AMax3F1(AMax3F1(b, d, e), f, h) - AMin3F1(AMin3F1(b, d, e), f, h)), 0.0, 1.0);
	nz = -0.5 * nz + 1.0;
	lobe *= nz;
	float rcpL = APrxMedRcpF1(4.0 * lobe + 1.0);
	vec4 pix = vec4(0.0, 0.0, 0.0, 1.0);
	pix.r = float((lobe * b + lobe * d + lobe * h + lobe * f + e) * rcpL);
	return pix;
}


//!DESC CuNNy-4x8C-RCAS-in
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND LUMA
//!SAVE in
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) F(texelFetch(LUMA_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(1, 1) + ivec2(0, 0), 0).r)
shared F s0[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += V4(-1.616e-01, -2.339e-01, -6.544e-03, -3.094e-01) * s0[y+0][x+0];
	r += V4(-1.421e-01, -6.140e-02, 6.106e-02, -8.474e-02) * s0[y+0][x+1];
	r += V4(6.371e-03, 2.998e-01, -5.026e-02, 9.106e-02) * s0[y+0][x+2];
	r += V4(3.951e-01, 3.818e-01, 1.319e-02, -7.326e-03) * s0[y+1][x+0];
	r += V4(-1.490e-01, -1.414e-01, -1.181e-01, 1.812e-01) * s0[y+1][x+1];
	r += V4(4.626e-02, -2.236e-01, -2.550e-01, 1.168e-01) * s0[y+1][x+2];
	r += V4(-1.034e-02, 1.180e-02, -6.200e-03, 3.677e-02) * s0[y+2][x+0];
	r += V4(6.984e-02, -1.418e-01, 5.714e-02, 3.169e-02) * s0[y+2][x+1];
	r += V4(-3.918e-02, 1.103e-01, -3.894e-02, -5.917e-02) * s0[y+2][x+2];
	r += V4(-2.061e-02, 2.335e-03, 3.362e-01, -6.198e-03);
	return vec4(r);
}
vec4 f1(int x, int y) {
	V4 r = V4(0.0);
	r += V4(-3.265e-02, 2.296e-02, 1.398e-01, 1.123e-02) * s0[y+0][x+0];
	r += V4(1.084e-01, -1.116e-01, -5.530e-02, -4.271e-02) * s0[y+0][x+1];
	r += V4(-2.593e-02, 6.793e-02, -2.378e-02, 1.109e-03) * s0[y+0][x+2];
	r += V4(2.568e-01, -3.287e-01, -1.818e-01, 3.404e-02) * s0[y+1][x+0];
	r += V4(-2.586e-01, -5.402e-02, 2.969e-02, 1.293e-01) * s0[y+1][x+1];
	r += V4(3.344e-02, -2.374e-02, 2.534e-01, 8.063e-02) * s0[y+1][x+2];
	r += V4(1.464e-01, 1.685e-02, 1.104e-02, 1.136e-01) * s0[y+2][x+0];
	r += V4(-2.433e-01, 1.826e-02, -3.991e-02, -3.143e-01) * s0[y+2][x+1];
	r += V4(1.838e-02, 4.010e-03, -1.723e-02, -1.367e-01) * s0[y+2][x+2];
	r += V4(-1.060e-02, 8.293e-03, -4.260e-02, 9.268e-03);
	return vec4(r);
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = LUMA_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
		}
	}
	barrier();
	vec4 r0 = f0(xy.x, xy.y);
	vec4 r1 = f1(xy.x, xy.y);
	imageStore(out_image, opos + ivec2(0, 0), r0);
	imageStore(out_image, opos + ivec2(1, 0), r1);
}

//!DESC CuNNy-4x8C-RCAS-conv1
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND in
//!BIND LUMA
//!SAVE conv1
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(texelFetch(in_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(in_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 s0[10][10];
shared V4 s1[10][10];
shared V4 s2[10][10];
shared V4 s3[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-1.116e-01, 1.288e-02, 7.967e-02, -1.146e-01, -1.515e-01, -1.401e-01, -1.099e-01, -1.397e-02, 8.925e-02, -9.865e-02, -1.717e-01, -2.819e-02, -1.870e-02, 1.421e-01, 1.160e-01, 2.235e-02) * s0[y+0][x+0];
	r += M4(3.539e-01, -1.617e-01, 3.245e-01, 1.903e-01, 1.339e-01, 1.839e-01, -1.055e-01, 8.202e-02, -2.193e-02, -5.973e-02, -2.286e-01, 3.857e-01, -2.294e-01, -8.955e-02, -3.142e-01, -3.274e-01) * s0[y+0][x+1];
	r += M4(8.388e-03, -2.912e-04, 7.599e-02, 1.201e-01, 1.052e-01, -5.194e-02, -3.675e-02, -2.054e-02, 3.890e-02, -1.303e-01, -9.298e-03, 2.269e-01, -1.672e-02, 8.087e-02, -1.851e-01, 5.299e-02) * s0[y+0][x+2];
	r += M4(-6.056e-03, -1.675e-01, -1.070e-02, 4.502e-02, -3.816e-01, 3.367e-02, 2.185e-01, -1.615e-01, 6.180e-02, 3.064e-01, 3.215e-01, 2.778e-02, -1.314e-01, -1.261e-01, -6.681e-02, -8.567e-02) * s0[y+1][x+0];
	r += M4(-2.414e-01, 3.716e-01, 1.886e-01, 5.308e-02, 3.432e-01, -6.281e-02, -7.779e-02, -6.323e-02, -9.928e-02, 3.574e-01, 2.627e-03, -1.752e-01, 1.964e-01, -1.435e-01, -3.496e-01, -3.404e-01) * s0[y+1][x+1];
	r += M4(-2.001e-02, -1.870e-01, 3.920e-01, 4.435e-01, -1.472e-01, -1.522e-01, -1.217e-01, 3.717e-01, -1.144e-02, 9.589e-02, 1.460e-02, -9.033e-02, 1.688e-01, 2.744e-01, -1.367e-01, -4.501e-01) * s0[y+1][x+2];
	r += M4(1.483e-01, 1.278e-01, -1.074e-01, -3.682e-02, -1.132e-02, -4.805e-02, 1.525e-01, -1.815e-01, -1.545e-02, -1.767e-02, -3.529e-02, -2.422e-03, -2.275e-02, -2.310e-01, -1.363e-01, 2.346e-02) * s0[y+2][x+0];
	r += M4(-1.956e-01, -7.788e-02, 4.234e-02, -1.352e-01, -6.514e-03, -6.106e-02, 1.346e-01, -2.229e-01, 4.007e-02, -1.149e-01, 9.191e-02, -7.741e-02, -2.485e-02, 1.067e-01, -2.055e-01, 2.684e-01) * s0[y+2][x+1];
	r += M4(-3.712e-02, -1.876e-02, 2.862e-01, -8.627e-02, -1.840e-02, -9.570e-02, -2.187e-02, -5.403e-02, -4.505e-02, -5.307e-02, 8.842e-02, 8.184e-03, -7.004e-02, 9.777e-02, 2.133e-01, -2.346e-01) * s0[y+2][x+2];
	r += M4(-7.113e-02, 2.447e-02, -1.734e-01, -1.937e-01, -1.294e-01, -5.043e-02, -5.119e-02, -4.032e-02, 4.791e-01, 1.293e-01, -6.301e-01, 8.596e-01, -4.898e-02, 1.494e-01, 3.779e-01, 1.764e-01) * s1[y+0][x+0];
	r += M4(5.458e-01, -1.667e-01, -8.650e-02, 5.164e-02, 9.758e-02, 1.875e-01, -1.650e-01, 2.450e-01, 2.748e-01, -1.277e+00, -6.133e-01, 8.269e-01, -3.223e-01, -1.545e-01, -1.522e-01, -9.112e-02) * s1[y+0][x+1];
	r += M4(-2.000e-01, 3.357e-02, 5.007e-02, 1.840e-01, 7.812e-02, -5.184e-02, -2.509e-02, 5.879e-02, 1.684e-02, 1.359e-01, -2.543e-01, 6.587e-01, -1.082e-01, 1.441e-01, 3.477e-02, 1.792e-01) * s1[y+0][x+2];
	r += M4(6.164e-02, -5.676e-02, -9.290e-02, -9.781e-02, -4.021e-01, 6.670e-02, 1.751e-01, -1.404e-01, -1.572e-01, 1.480e-01, -2.049e-01, -3.702e-01, -4.129e-02, 2.657e-02, 1.533e-01, -1.857e-02) * s1[y+1][x+0];
	r += M4(8.587e-02, 1.939e-01, -3.946e-01, 5.096e-02, 2.893e-01, 7.524e-02, -1.576e-01, 4.574e-02, -5.094e-01, 2.238e-02, 1.891e-01, -2.883e-02, -1.269e-01, -2.577e-01, -6.027e-02, 2.105e-01) * s1[y+1][x+1];
	r += M4(3.503e-01, -5.023e-01, -2.978e-01, 2.281e-01, -5.082e-02, -9.256e-02, -4.074e-02, 3.718e-01, -1.562e-02, 1.871e-02, 5.114e-01, 4.070e-01, 4.385e-03, -3.402e-02, 9.722e-02, 6.969e-02) * s1[y+1][x+2];
	r += M4(3.061e-02, 1.740e-01, -7.460e-03, 2.046e-02, 1.674e-02, 2.094e-02, 2.007e-01, -1.538e-01, -2.569e-02, -5.472e-01, 1.733e-01, -1.948e-01, 1.149e-01, -3.908e-02, 9.519e-03, 2.371e-02) * s1[y+2][x+0];
	r += M4(-2.151e-01, 4.312e-02, -1.975e-02, -5.456e-02, 6.844e-02, 1.406e-01, -8.720e-03, -8.058e-02, 1.088e-01, -1.040e+00, 4.848e-01, 4.733e-02, 4.943e-03, 1.005e-01, 1.382e-01, 8.417e-02) * s1[y+2][x+1];
	r += M4(-1.714e-01, 7.981e-02, -1.178e-01, -1.015e-01, 6.616e-03, 9.702e-03, 1.558e-01, 4.558e-02, 2.672e-02, -1.464e-01, 4.500e-01, 1.926e-01, 5.090e-02, 1.194e-02, 1.803e-01, -6.900e-02) * s1[y+2][x+2];
	r += M4(-1.782e-01, 1.229e-01, -4.072e-02, -2.289e-02, 1.088e-01, -5.209e-01, -5.279e-01, -6.735e-02, -3.486e-01, 6.363e-02, 1.856e-01, -3.513e-01, 1.515e-01, 2.677e-01, -4.073e-02, -1.345e-01) * s2[y+0][x+0];
	r += M4(-2.818e-01, 1.500e-01, 1.128e-01, -1.214e-01, 2.475e-01, -1.521e-01, -4.695e-02, 7.364e-01, -1.007e-01, 1.088e-01, 1.807e-01, 7.979e-02, -7.343e-02, 3.828e-01, 3.495e-01, -3.020e-01) * s2[y+0][x+1];
	r += M4(4.900e-02, -7.207e-02, 5.816e-02, 2.355e-01, 6.493e-02, -4.385e-01, 7.524e-01, 4.435e-01, 7.975e-02, -1.150e-01, 1.101e-01, -3.527e-02, -2.373e-02, -3.450e-02, -2.040e-01, -3.857e-01) * s2[y+0][x+2];
	r += M4(-1.026e-02, -1.135e-01, 2.837e-01, -3.662e-03, -6.560e-02, 2.783e-01, -2.300e-02, -6.467e-01, -1.416e-01, -7.781e-02, 1.837e-01, 1.511e-01, -1.241e-01, -4.275e-01, -6.718e-02, 4.838e-02) * s2[y+1][x+0];
	r += M4(-6.504e-01, 4.919e-01, -7.324e-02, 1.010e-01, 3.323e-01, -5.063e-02, 7.573e-01, -2.576e-01, 7.505e-02, 1.135e-01, 9.684e-02, -5.913e-03, 4.385e-01, -1.081e-01, 6.006e-02, -3.877e-02) * s2[y+1][x+1];
	r += M4(-3.042e-02, 1.381e-02, -3.565e-01, 6.211e-02, 1.764e-01, 2.607e-01, 1.294e-01, -4.539e-02, -6.875e-02, -1.322e-02, -1.301e-01, -4.007e-02, -1.266e-02, 1.349e-01, -1.860e-01, 1.457e-01) * s2[y+1][x+2];
	r += M4(1.938e-02, 5.595e-02, -2.819e-02, 3.273e-03, 2.310e-01, -6.065e-01, -2.287e-01, 7.269e-02, 9.447e-02, 7.086e-02, -1.001e-01, -9.694e-02, -4.722e-02, -7.737e-02, -6.425e-02, -2.112e-02) * s2[y+2][x+0];
	r += M4(-1.726e-01, -3.350e-01, -1.669e-02, 5.478e-02, -4.955e-01, 1.333e+00, 3.989e-01, 4.179e-01, -3.983e-02, -2.936e-02, -5.051e-02, 1.507e-01, 7.151e-02, 2.037e-01, 8.308e-03, -7.441e-02) * s2[y+2][x+1];
	r += M4(2.936e-02, -9.155e-02, -1.964e-01, -1.744e-01, 6.569e-02, -2.350e-01, 1.211e-01, -9.913e-02, -5.506e-03, -1.599e-02, -6.564e-02, -9.682e-02, 9.702e-03, -1.040e-01, 5.368e-02, 1.203e-01) * s2[y+2][x+2];
	r += M4(-2.991e-01, 6.622e-02, 3.310e-01, 1.778e-01, -8.726e-03, -4.403e-02, -2.805e-02, 2.098e-01, -3.679e-01, 1.820e-01, 4.284e-01, -1.636e-01, -7.023e-02, 1.117e-03, 1.760e-01, -2.460e-02) * s3[y+0][x+0];
	r += M4(6.421e-01, 2.107e-01, -2.937e-01, -1.383e-01, 9.977e-02, -1.251e-01, -1.486e-01, 1.224e-01, -1.487e-01, 9.193e-02, 1.193e-01, 1.899e-02, -1.350e-01, 1.416e-01, -1.711e-01, -2.987e-01) * s3[y+0][x+1];
	r += M4(-6.330e-02, -3.799e-01, 2.303e-01, 2.665e-01, 5.979e-02, 1.916e-02, -7.338e-02, 2.046e-02, 7.383e-02, -3.637e-02, 1.434e-02, -1.202e-02, 1.869e-01, 4.840e-02, -2.639e-02, -2.021e-01) * s3[y+0][x+2];
	r += M4(2.007e-01, -1.186e-01, -3.868e-02, 1.053e-02, -2.814e-01, 6.484e-02, 1.799e-01, -2.116e-01, -3.443e-01, -2.750e-01, 1.759e-01, 4.070e-01, -1.996e-01, -2.433e-01, -5.917e-02, -5.494e-02) * s3[y+1][x+0];
	r += M4(-3.441e-01, 2.162e-01, 5.934e-02, -1.602e-01, 9.749e-03, 4.412e-02, 9.540e-04, -1.974e-01, 2.510e-01, 3.762e-02, 1.205e-01, -3.299e-01, 2.180e-01, -3.029e-01, -3.051e-02, 1.633e-02) * s3[y+1][x+1];
	r += M4(1.934e-01, -2.752e-01, -4.371e-02, -1.710e-01, 2.727e-02, -5.479e-02, 6.953e-02, 1.013e-01, 6.478e-03, 5.555e-02, -4.397e-02, 2.467e-02, -1.493e-02, 1.377e-01, -1.338e-02, 1.329e-01) * s3[y+1][x+2];
	r += M4(4.479e-02, -1.597e-02, -7.929e-02, 2.965e-02, -3.287e-02, -4.448e-02, 6.023e-02, -1.617e-01, 1.437e-01, 2.004e-02, 6.219e-02, -6.952e-02, -8.682e-02, -2.328e-02, 3.109e-02, 6.273e-02) * s3[y+2][x+0];
	r += M4(-1.441e-01, -2.084e-01, 6.824e-02, -7.754e-03, -4.864e-02, -6.940e-02, -2.692e-03, 8.459e-03, 1.236e-02, 3.296e-02, -1.168e-01, 1.029e-01, 1.805e-02, 3.468e-01, 5.912e-02, -2.154e-01) * s3[y+2][x+1];
	r += M4(-5.794e-02, -3.278e-02, 6.427e-03, -1.342e-01, 3.700e-02, -1.433e-02, -2.989e-02, -4.320e-02, -7.712e-02, 1.273e-02, 1.773e-02, 5.599e-02, 4.325e-02, -1.102e-01, -2.868e-04, 1.846e-01) * s3[y+2][x+2];
	r += V4(-2.556e-02, -9.377e-02, -4.191e-02, -9.421e-02);
	return vec4(r);
}
vec4 f1(int x, int y) {
	V4 r = V4(0.0);
	r += M4(5.167e-02, 6.490e-02, -1.243e-01, -1.071e-01, -2.262e-02, -2.069e-02, 4.643e-02, 2.084e-01, 7.211e-03, 1.620e-01, -1.296e-01, 8.472e-02, 4.139e-03, -2.163e-02, 4.951e-02, -1.594e-01) * s0[y+0][x+0];
	r += M4(4.074e-02, -1.411e-01, -2.597e-02, 5.410e-01, 3.710e-02, 1.035e-01, -2.355e-02, -1.548e-01, 6.110e-02, -2.169e-02, 6.397e-03, 1.786e-01, -1.085e-01, -1.192e-01, 2.057e-02, -6.099e-02) * s0[y+0][x+1];
	r += M4(-2.199e-02, -5.723e-02, -7.687e-02, -1.797e-01, 2.412e-02, 1.291e-01, -1.904e-02, -5.017e-02, 6.095e-03, 2.183e-01, 1.778e-01, 5.921e-02, -4.784e-02, 1.802e-01, 1.389e-01, -9.656e-04) * s0[y+0][x+2];
	r += M4(-8.309e-02, 4.256e-02, 2.040e-01, 1.770e-01, -4.885e-02, -1.208e-01, -1.607e-01, -1.985e-01, 1.371e-03, -1.107e-01, 2.024e-01, -3.501e-02, 1.820e-01, -2.345e-01, -1.680e-02, 1.616e-01) * s0[y+1][x+0];
	r += M4(-1.402e-01, 1.281e-01, -2.908e-01, -1.743e-01, 5.891e-02, -6.885e-02, -2.672e-01, 2.708e-01, -2.021e-01, -1.750e-01, 3.043e-01, -2.537e-01, 1.932e-01, 1.070e-01, -4.819e-03, 8.635e-02) * s0[y+1][x+1];
	r += M4(-3.339e-03, -2.556e-01, -2.491e-02, -3.250e-01, 1.994e-01, -2.613e-02, 9.168e-02, 1.107e-01, 8.857e-04, -1.400e-01, -4.145e-02, -5.464e-02, 8.214e-02, 1.690e-01, 3.447e-02, 1.559e-01) * s0[y+1][x+2];
	r += M4(-8.532e-02, 9.886e-02, -2.602e-01, -1.220e-02, -1.111e-01, 1.449e-02, 1.709e-01, 1.865e-01, 1.135e-01, -9.648e-02, 2.042e-01, -3.156e-02, 4.974e-02, -8.828e-02, 1.373e-02, 6.980e-02) * s0[y+2][x+0];
	r += M4(5.723e-02, 2.813e-02, 8.131e-02, 6.948e-02, -3.401e-02, -4.884e-02, 1.864e-01, -1.388e-01, -7.788e-02, -1.255e-02, 5.579e-02, 1.710e-02, -3.731e-02, 1.000e-01, -6.699e-01, -1.829e-01) * s0[y+2][x+1];
	r += M4(2.732e-02, 1.892e-01, -1.391e-01, -1.541e-01, -8.200e-03, -9.926e-02, 2.537e-02, -2.398e-02, 5.192e-02, 6.036e-02, 8.593e-02, 2.551e-02, -2.762e-02, 1.286e-01, 6.719e-02, 1.935e-02) * s0[y+2][x+2];
	r += M4(3.144e-02, -6.629e-03, -3.332e-02, -1.193e-01, -3.019e-02, -4.091e-02, 9.542e-02, 1.918e-01, -7.452e-01, 1.517e+00, 1.445e-01, 8.919e-01, 6.385e-02, 1.976e-02, -9.467e-02, -8.266e-02) * s1[y+0][x+0];
	r += M4(7.093e-02, -1.000e-01, 1.594e-01, 5.215e-01, 5.726e-02, 1.180e-01, -1.143e-02, 7.436e-03, -3.257e-01, 1.069e+00, 7.106e-02, -7.395e-02, -5.918e-02, -1.061e-01, 2.537e-02, -2.562e-01) * s1[y+0][x+1];
	r += M4(2.525e-02, -4.811e-02, -1.585e-01, -1.900e-01, 3.617e-02, -7.018e-03, 2.043e-02, -2.414e-02, 4.813e-01, 4.176e-01, 4.698e-01, 1.191e-01, -2.964e-02, 1.954e-01, 3.244e-02, 4.360e-02) * s1[y+0][x+2];
	r += M4(-2.747e-02, 1.061e-01, 2.060e-01, 1.845e-01, -5.493e-03, -2.979e-01, -6.678e-02, -3.545e-01, -8.529e-01, 1.043e+00, 1.391e-02, -2.295e-01, 1.794e-01, -2.807e-02, -9.897e-03, 6.319e-02) * s1[y+1][x+0];
	r += M4(-4.047e-01, 3.005e-01, -1.514e-01, 7.077e-02, 1.121e-01, -1.971e-01, -8.941e-02, -6.400e-02, -9.498e-01, 4.468e-01, -5.338e-01, -9.845e-01, 1.055e-01, -1.163e-01, 1.117e-01, 5.263e-01) * s1[y+1][x+1];
	r += M4(2.863e-01, -4.235e-01, 6.563e-02, 2.777e-01, 1.419e-01, 1.820e-01, 1.602e-01, 1.024e-01, -8.320e-02, -2.323e-01, 2.928e-02, -1.427e-01, -2.275e-02, 1.008e-01, 9.295e-02, 2.750e-01) * s1[y+1][x+2];
	r += M4(-1.047e-01, 5.825e-02, -1.483e-01, -1.870e-02, -8.707e-02, 1.222e-01, 7.022e-02, 8.210e-02, -6.210e-01, 3.228e-01, 6.921e-01, -1.849e-01, 1.079e-01, -3.195e-02, 3.433e-02, 1.480e-02) * s1[y+2][x+0];
	r += M4(1.802e-02, 2.680e-02, 1.233e-01, -3.421e-02, -7.019e-03, -3.205e-02, 5.107e-03, -1.220e-01, -4.872e-03, -1.044e-01, 1.829e-01, 4.713e-02, -4.210e-02, -1.821e-01, 2.650e-01, -1.974e-02) * s1[y+2][x+1];
	r += M4(-8.202e-02, 9.370e-02, 4.819e-02, 8.566e-02, 3.883e-02, 4.098e-03, 6.617e-02, -4.174e-02, 4.449e-01, -5.329e-02, 2.897e-01, -5.016e-02, 2.022e-02, -6.199e-02, -5.725e-02, -7.895e-02) * s1[y+2][x+2];
	r += M4(1.101e-01, -1.540e-01, 2.802e-01, 2.723e-03, -6.433e-02, 1.147e-01, 7.026e-02, 5.284e-01, 1.028e-01, 1.438e-03, 3.602e-02, -2.417e-01, -3.637e-01, 4.076e-02, 1.155e-01, -3.814e-01) * s2[y+0][x+0];
	r += M4(-1.338e-01, -2.174e-01, -6.420e-02, 9.324e-02, -1.988e-01, 1.687e+00, -9.196e-01, 6.933e-01, 8.853e-02, 1.167e-02, -4.946e-02, 1.053e-01, -2.416e-01, 2.038e-01, 3.848e-01, -4.053e-01) * s2[y+0][x+1];
	r += M4(-8.820e-02, -1.043e-01, -1.182e-01, 3.669e-01, -2.875e-01, 7.361e-01, -2.952e-02, 8.755e-01, -3.127e-02, 2.515e-03, 1.012e-01, -1.507e-01, -4.842e-02, -2.580e-01, -1.287e-01, 9.279e-02) * s2[y+0][x+2];
	r += M4(1.423e-01, -4.936e-02, 3.414e-02, 9.813e-02, -3.999e-01, -4.642e-01, -9.865e-02, 8.013e-02, 2.402e-01, -1.027e-01, 1.489e-02, -3.796e-02, 2.138e-01, 1.129e-01, -2.914e-02, 9.294e-02) * s2[y+1][x+0];
	r += M4(-2.736e-01, -3.671e-02, -3.427e-01, -5.487e-01, -3.835e-01, 9.211e-01, -1.370e+00, -4.390e-01, -5.335e-02, 8.476e-02, 2.001e-02, 5.859e-02, 1.667e-01, -1.169e-01, -1.061e-01, 3.818e-01) * s2[y+1][x+1];
	r += M4(-1.537e-01, -2.418e-01, -1.225e-01, -4.633e-02, -9.762e-01, 3.282e-01, -2.382e-02, -6.771e-01, 1.153e-01, -7.484e-03, -4.306e-02, -1.672e-01, -1.045e-01, -1.755e-01, -3.357e-02, -3.203e-02) * s2[y+1][x+2];
	r += M4(-7.940e-04, -7.629e-02, -1.023e-01, -1.243e-01, -2.405e-01, 4.929e-01, -9.004e-02, 2.213e-01, -2.402e-02, -9.868e-02, -1.041e-01, 2.238e-01, -4.281e-02, 9.693e-02, 1.237e-01, 6.089e-02) * s2[y+2][x+0];
	r += M4(7.586e-02, 9.058e-02, 4.345e-02, 2.372e-01, -3.601e-01, 3.052e-01, -1.924e+00, 1.785e-01, 8.886e-02, 3.522e-02, 6.689e-02, 1.137e-01, -1.927e-01, -2.253e-02, -9.400e-02, -1.621e-01) * s2[y+2][x+1];
	r += M4(-1.586e-02, 9.340e-02, -1.323e-02, 1.338e-01, -4.630e-01, -4.527e-01, -8.656e-01, -6.726e-01, 4.553e-02, -6.821e-02, 1.345e-01, 4.249e-02, -7.150e-03, -3.097e-02, 4.998e-02, -1.981e-02) * s2[y+2][x+2];
	r += M4(8.857e-02, -1.938e-01, 1.077e-01, 1.437e-02, -5.639e-02, -3.364e-02, 6.293e-02, 3.033e-02, 1.911e-01, -2.367e-02, -6.652e-02, -8.674e-02, 1.284e-01, -1.503e-01, 6.879e-02, -3.201e-01) * s3[y+0][x+0];
	r += M4(-1.413e-01, 2.078e-01, -2.549e-01, 1.780e-02, -8.495e-02, 2.735e-01, -2.011e-02, 6.665e-02, -1.269e-01, -7.788e-02, 6.357e-02, -3.223e-02, 1.871e-02, -1.679e-01, 5.153e-02, -4.145e-01) * s3[y+0][x+1];
	r += M4(-4.993e-02, -3.854e-01, -2.962e-02, -1.102e-01, -1.586e-01, 1.166e-01, -1.485e-02, 2.214e-01, 3.652e-02, 1.514e-01, 2.342e-02, -1.362e-01, 8.357e-02, 5.637e-02, -8.093e-02, -6.376e-02) * s3[y+0][x+2];
	r += M4(8.896e-03, 6.380e-02, 6.310e-02, 2.042e-01, -1.150e-01, -1.623e-01, 1.128e-01, -4.822e-02, 1.972e-01, 2.804e-02, 1.065e-01, -5.050e-03, 1.047e-01, 3.640e-02, 7.511e-02, 8.762e-03) * s3[y+1][x+0];
	r += M4(-3.406e-01, -8.201e-02, 4.529e-02, -3.475e-01, -3.128e-02, 4.802e-02, 1.279e-01, 1.362e-01, -2.609e-02, 6.131e-02, -9.619e-02, -6.546e-02, 2.359e-03, -5.847e-02, 1.115e-01, 1.964e-01) * s3[y+1][x+1];
	r += M4(1.120e-01, 4.050e-02, 1.106e-02, -1.226e-02, -1.878e-01, 4.818e-02, -2.821e-02, -6.921e-02, 1.616e-02, -3.582e-02, 8.403e-02, -2.233e-01, -3.990e-03, -4.210e-02, 6.994e-02, -1.553e-02) * s3[y+1][x+2];
	r += M4(5.572e-02, -7.525e-02, -4.039e-02, -9.889e-02, -1.169e-01, 6.655e-02, 7.442e-02, -3.873e-02, 1.292e-01, -1.257e-01, -3.143e-01, 3.623e-01, -1.624e-02, 5.446e-02, 7.204e-02, 3.470e-02) * s3[y+2][x+0];
	r += M4(1.312e-01, 1.162e-01, 1.686e-01, 6.566e-02, -1.330e-01, 8.419e-02, 1.241e-01, -8.442e-02, 4.285e-02, -4.487e-02, 1.635e-01, 1.232e-01, -1.244e-01, -1.387e-02, -1.434e-01, -8.735e-02) * s3[y+2][x+1];
	r += M4(4.994e-02, 9.812e-02, -4.266e-02, 1.112e-01, 2.629e-02, -6.483e-03, -5.506e-02, 2.462e-02, 5.529e-02, -8.524e-02, 2.336e-02, 1.438e-01, 1.829e-02, -4.706e-02, -7.568e-03, -1.716e-02) * s3[y+2][x+2];
	r += V4(5.036e-02, 2.668e-02, 1.686e-01, 1.827e-02);
	return vec4(r);
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = in_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
			s2[ay][ax] = l1(x - 1, y - 1);
			s1[ay][ax] = -max(-s0[ay][ax], V4(0.0));
			s0[ay][ax] = max(s0[ay][ax], V4(0.0));
			s3[ay][ax] = -max(-s2[ay][ax], V4(0.0));
			s2[ay][ax] = max(s2[ay][ax], V4(0.0));
		}
	}
	barrier();
	vec4 r0 = f0(xy.x, xy.y);
	vec4 r1 = f1(xy.x, xy.y);
	imageStore(out_image, opos + ivec2(0, 0), r0);
	imageStore(out_image, opos + ivec2(1, 0), r1);
}

//!DESC CuNNy-4x8C-RCAS-conv2
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv1
//!BIND LUMA
//!SAVE conv2
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(texelFetch(conv1_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv1_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 s0[10][10];
shared V4 s1[10][10];
shared V4 s2[10][10];
shared V4 s3[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-6.037e-02, -1.529e-01, 6.122e-02, -5.542e-04, 2.864e-02, 5.235e-02, -9.481e-02, -1.382e-02, -6.232e-02, 7.341e-03, 6.398e-02, 5.844e-02, 1.305e-01, 5.736e-02, -7.640e-02, -1.583e-01) * s0[y+0][x+0];
	r += M4(1.235e-01, 5.562e-02, 4.870e-02, -2.208e-02, 5.719e-02, -1.179e-01, -3.609e-02, -8.807e-02, 2.586e-01, -1.063e-01, 3.322e-02, -1.552e-02, 1.111e-01, 1.284e-01, -6.614e-02, -1.807e-02) * s0[y+0][x+1];
	r += M4(-1.001e-01, 2.152e-01, -9.302e-02, -4.182e-02, 1.377e-01, -2.251e-01, 1.304e-01, 1.360e-01, 1.113e-01, 2.927e-01, -1.756e-01, -1.543e-01, -6.139e-02, -7.852e-02, -1.624e-02, -1.123e-02) * s0[y+0][x+2];
	r += M4(8.499e-02, 9.234e-02, 1.228e-01, 3.492e-02, -3.972e-02, -1.973e-01, 5.412e-02, 9.121e-03, 5.175e-02, 1.460e-01, -1.768e-02, -6.355e-02, 7.733e-02, 5.519e-01, 8.391e-02, -8.615e-02) * s0[y+1][x+0];
	r += M4(-1.249e-01, 5.990e-01, 4.955e-01, 6.418e-02, 1.415e-02, -2.301e-01, 6.416e-02, 5.707e-02, 3.735e-03, 1.882e-01, 1.883e-01, -5.012e-01, -2.376e-01, 1.556e-01, 3.486e-01, 2.510e-01) * s0[y+1][x+1];
	r += M4(-3.659e-01, 2.095e-01, -1.531e-01, 1.417e-01, -2.792e-01, 1.522e-01, 1.341e-02, 2.001e-01, 8.943e-02, 2.329e-01, -1.951e-01, -3.297e-01, -3.469e-02, 1.240e-01, 8.962e-02, -2.019e-01) * s0[y+1][x+2];
	r += M4(4.073e-02, 6.161e-02, 1.083e-01, -9.061e-02, -1.177e-01, -5.503e-02, 4.727e-02, 4.686e-02, 7.498e-02, 1.878e-02, -1.798e-03, -1.028e-01, -1.640e-01, 2.748e-01, 9.969e-02, -5.095e-02) * s0[y+2][x+0];
	r += M4(2.111e-01, 6.052e-02, 2.242e-01, -7.454e-03, -1.112e-01, -5.603e-02, -4.581e-02, 8.644e-03, 3.502e-02, 1.295e-01, -1.079e-01, -4.730e-02, -2.359e-01, 4.106e-01, 1.440e-01, -3.211e-01) * s0[y+2][x+1];
	r += M4(1.302e-01, 5.679e-02, 3.233e-01, 2.774e-01, 3.881e-02, 8.566e-03, 4.875e-02, 3.656e-02, 1.335e-01, 4.694e-01, 1.657e-01, -3.308e-01, 8.829e-03, 2.184e-01, 1.894e-01, -3.485e-03) * s0[y+2][x+2];
	r += M4(-2.593e-02, -1.164e-01, 3.384e-02, 6.321e-02, -7.204e-02, 1.212e-01, -5.561e-02, -4.967e-02, 1.107e-02, 1.481e-02, 9.741e-02, 5.264e-02, 6.337e-02, -2.183e-01, 6.980e-03, -1.801e-02) * s1[y+0][x+0];
	r += M4(2.876e-01, -2.699e-02, 1.514e-02, 6.246e-03, -3.042e-01, -4.963e-02, 3.939e-02, -1.313e-01, 9.844e-02, -9.020e-02, 3.074e-02, -1.507e-02, 1.804e-01, 1.655e-01, 7.166e-02, -2.672e-03) * s1[y+0][x+1];
	r += M4(2.621e-02, 7.836e-02, -2.468e-01, -5.239e-02, 2.997e-02, -2.266e-01, 3.232e-02, 3.196e-02, -4.149e-02, 1.931e-01, -1.304e-01, -2.898e-02, 3.975e-03, -1.296e-01, 1.446e-02, 1.058e-01) * s1[y+0][x+2];
	r += M4(1.608e-01, 1.035e-01, 5.594e-02, 3.452e-03, 3.621e-03, -8.851e-02, -6.099e-02, 5.558e-02, 7.472e-02, 1.075e-01, -1.837e-02, 1.118e-02, -5.676e-02, -1.200e-01, -2.526e-02, 6.978e-03) * s1[y+1][x+0];
	r += M4(-4.406e-02, 1.632e-01, 1.023e-01, 1.803e-02, 1.233e-01, -1.584e-01, -2.637e-01, 4.587e-02, 1.022e-02, 8.277e-02, 2.705e-01, -1.495e-01, -3.782e-01, -1.189e-01, 2.437e-01, 2.430e-01) * s1[y+1][x+1];
	r += M4(-5.807e-02, 2.581e-03, -4.270e-01, -1.586e-01, -1.112e-01, 2.744e-01, 7.345e-02, 1.246e-01, 1.456e-02, -1.330e-01, -2.544e-01, 1.245e-01, -2.296e-02, -3.256e-02, 4.816e-02, 4.421e-03) * s1[y+1][x+2];
	r += M4(9.440e-02, 4.075e-02, 8.295e-02, -4.310e-03, -1.709e-01, -2.712e-02, 1.290e-02, -9.094e-04, -1.475e-02, -1.674e-02, -5.776e-02, 9.855e-03, -4.957e-02, 1.001e-01, -1.672e-02, 1.247e-01) * s1[y+2][x+0];
	r += M4(-7.160e-02, -2.689e-02, 1.131e-01, -1.115e-01, 2.490e-02, -1.254e-01, -2.109e-02, 1.333e-01, 8.704e-02, -6.225e-02, 1.013e-01, 3.057e-02, 1.050e-01, -1.747e-01, -2.811e-02, 6.090e-02) * s1[y+2][x+1];
	r += M4(2.121e-03, 6.574e-02, -8.815e-02, -2.265e-02, -6.283e-02, 1.508e-01, 2.007e-02, 2.277e-02, -4.454e-02, 7.455e-02, 5.110e-02, 6.292e-02, -3.271e-02, -9.954e-03, 2.793e-02, 1.144e-01) * s1[y+2][x+2];
	r += M4(-1.195e-02, -5.850e-02, -1.010e-01, -5.079e-02, 8.914e-02, 1.710e-01, 4.836e-02, -7.465e-02, 8.654e-02, -9.422e-03, -4.358e-02, -5.481e-03, -9.039e-02, -2.114e-02, 9.007e-02, 3.996e-03) * s2[y+0][x+0];
	r += M4(-1.282e-01, -4.917e-02, 3.481e-02, 6.548e-02, -1.914e-01, 9.699e-02, -2.392e-01, -6.682e-02, 2.453e-01, -6.354e-02, 4.506e-02, -6.425e-02, -1.067e-01, 2.324e-02, -4.305e-02, 9.980e-02) * s2[y+0][x+1];
	r += M4(1.383e-02, 7.124e-02, 3.562e-02, 8.036e-02, -3.826e-03, -5.293e-02, 1.554e-01, 3.915e-02, -3.386e-02, 7.079e-02, -7.876e-02, -5.176e-02, -1.314e-01, -3.593e-02, -1.238e-01, -2.920e-02) * s2[y+0][x+2];
	r += M4(1.605e-01, 8.600e-02, 7.737e-02, -7.388e-02, -1.420e-01, -5.014e-02, 3.403e-02, -2.815e-02, -4.063e-02, -2.515e-02, 1.651e-02, -6.028e-03, 7.053e-03, -5.212e-02, -1.068e-01, -5.897e-02) * s2[y+1][x+0];
	r += M4(5.456e-02, -5.128e-03, 3.747e-02, -1.450e-02, 1.673e-01, -7.887e-02, -1.891e-01, -1.199e-01, -2.831e-02, 2.202e-01, 1.843e-01, -1.528e-01, -9.976e-02, -2.037e-01, 1.424e-02, 4.222e-01) * s2[y+1][x+1];
	r += M4(-1.248e-02, 1.201e-02, -6.125e-02, -1.013e-01, 8.171e-03, -4.648e-02, -1.043e-01, 9.699e-02, 1.874e-02, 4.740e-03, 3.295e-02, 1.763e-01, -5.713e-03, -2.070e-01, -1.250e-03, 2.401e-01) * s2[y+1][x+2];
	r += M4(-1.086e-01, 5.017e-02, 7.740e-02, 5.024e-03, -4.963e-02, -6.979e-02, -9.404e-02, 8.679e-02, -9.517e-02, -6.464e-02, 1.289e-02, 5.565e-02, 7.916e-02, -2.077e-02, -2.237e-01, 4.693e-02) * s2[y+2][x+0];
	r += M4(7.105e-02, 9.790e-02, -2.504e-02, -9.721e-02, -9.579e-03, 2.011e-01, 1.885e-01, -1.337e-01, -5.263e-02, 2.986e-02, -5.955e-03, 3.960e-02, 6.717e-01, -5.126e-01, -7.459e-02, 2.480e-01) * s2[y+2][x+1];
	r += M4(2.450e-02, -1.091e-01, -1.634e-02, 8.618e-02, 1.346e-01, 5.031e-02, -2.412e-01, -4.782e-03, 2.530e-02, -4.993e-02, -1.850e-02, 3.218e-02, 1.820e-01, -1.561e-01, 7.738e-02, 3.540e-02) * s2[y+2][x+2];
	r += M4(-2.763e-01, 4.634e-01, -5.248e-01, -1.211e-01, 1.116e-01, 1.037e-01, 4.729e-02, -6.716e-02, 7.634e-02, 2.319e-02, -9.924e-02, -3.408e-02, 5.382e-02, 4.390e-02, 5.062e-02, -1.324e-02) * s3[y+0][x+0];
	r += M4(-2.092e+00, -6.673e-01, 1.937e-01, -1.014e+00, -1.214e-01, 1.041e-01, -2.421e-01, -1.009e-01, 4.721e-01, -5.367e-01, -3.124e-01, -1.784e-01, -3.953e-02, -4.575e-02, -6.507e-02, -5.455e-03) * s3[y+0][x+1];
	r += M4(-3.250e-01, -2.118e-02, -8.395e-02, -1.103e+00, -3.062e-02, -4.226e-02, 1.468e-01, 1.952e-02, -4.731e-01, -1.173e-01, 2.722e-01, -3.355e-01, 5.151e-02, -1.673e-02, 5.080e-02, -9.143e-02) * s3[y+0][x+2];
	r += M4(3.407e-01, 6.554e-01, -5.449e-01, -3.289e-01, -8.305e-02, 1.025e-01, 1.520e-01, 3.338e-02, -2.053e-01, 1.705e-01, 7.805e-03, 9.218e-02, -9.885e-02, -8.445e-02, 1.199e-01, -1.272e-01) * s3[y+1][x+0];
	r += M4(-3.266e+00, -7.919e-01, -6.115e-01, -9.528e-01, -1.134e-01, -1.613e-01, -2.191e-01, -1.904e-01, -2.542e-01, 1.428e-01, 4.268e-01, -3.092e-01, -2.231e-01, -3.192e-03, -6.384e-02, -2.494e-01) * s3[y+1][x+1];
	r += M4(-3.490e-03, 2.726e-03, 5.097e-01, -2.528e+00, -8.523e-02, 1.120e-02, -9.435e-04, -1.564e-02, 2.816e-01, -6.275e-01, 2.503e-03, 1.682e-01, 1.353e-01, 9.772e-02, 8.132e-02, -6.165e-02) * s3[y+1][x+2];
	r += M4(-1.478e-01, -6.499e-01, -2.063e-01, 1.928e-01, 5.955e-02, -2.759e-01, 2.203e-02, -1.640e-02, -2.169e-02, -4.030e-01, -1.412e-01, 2.078e-01, -1.786e-02, -1.126e-01, 9.475e-02, -1.509e-01) * s3[y+2][x+0];
	r += M4(4.246e-01, -2.743e-01, -2.262e-01, -1.035e-01, -3.783e-02, 1.322e-01, -2.804e-01, -1.293e-01, 2.148e-02, -5.052e-01, 1.312e-01, -2.951e-02, -6.141e-02, 1.277e-01, 1.373e-01, -1.741e-01) * s3[y+2][x+1];
	r += M4(-3.345e-02, -1.930e-01, 9.174e-03, -2.449e-01, 9.192e-02, -2.835e-02, 1.110e-01, 3.455e-02, 3.085e-02, -1.598e-01, 2.730e-02, 1.006e-02, -4.335e-02, 1.475e-01, 1.144e-01, -1.041e-02) * s3[y+2][x+2];
	r += V4(-4.667e-02, -3.466e-02, -6.612e-02, -2.734e-02);
	return vec4(r);
}
vec4 f1(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-8.223e-03, 2.350e-01, 1.618e-02, -1.829e-01, -1.323e-01, 1.563e-03, -1.222e-02, 2.273e-01, 3.426e-02, -2.669e-02, -8.032e-02, 2.247e-02, 4.508e-02, 1.436e-01, 1.858e-01, -2.465e-01) * s0[y+0][x+0];
	r += M4(-2.334e-02, 2.565e-01, 9.719e-02, -2.865e-01, -8.700e-02, 3.460e-02, 4.547e-02, 5.060e-01, 2.498e-02, 6.994e-02, -5.857e-02, -8.078e-02, -9.709e-02, 9.886e-02, 2.830e-02, 1.449e-01) * s0[y+0][x+1];
	r += M4(-5.762e-02, -3.567e-02, -4.711e-02, 4.502e-02, -1.075e-01, -2.549e-01, -6.513e-02, -4.003e-02, -2.751e-02, -3.725e-02, -1.129e-01, -6.250e-02, 7.407e-02, 2.762e-03, 2.635e-02, 9.449e-02) * s0[y+0][x+2];
	r += M4(1.140e-01, 1.038e-01, -7.678e-02, -3.435e-02, 1.063e-01, 5.861e-02, 4.511e-02, 2.816e-02, 1.228e-01, -2.370e-03, 9.384e-03, 1.960e-01, 1.629e-01, 3.947e-01, 4.217e-01, -1.160e-01) * s0[y+1][x+0];
	r += M4(-1.476e-01, 1.862e-01, 8.080e-02, -1.334e-01, 5.137e-01, -9.769e-02, -3.154e-01, -7.839e-02, -1.980e-01, 1.217e-01, 2.037e-01, 1.073e-01, -3.238e-01, 2.438e-01, -1.020e-01, -2.732e-01) * s0[y+1][x+1];
	r += M4(8.691e-02, 1.733e-01, -3.504e-01, -3.714e-01, -1.072e-01, 6.893e-02, -1.975e-02, 4.550e-02, 2.433e-01, 2.165e-01, 2.251e-01, 1.052e-01, -5.790e-02, 3.530e-01, 8.869e-02, -6.132e-02) * s0[y+1][x+2];
	r += M4(-1.905e-01, 1.439e-01, -6.141e-02, 9.631e-03, -3.398e-02, -1.893e-02, 7.391e-02, 1.240e-02, -2.738e-02, 1.102e-01, -4.636e-02, -1.760e-02, 1.737e-01, 1.164e-01, 1.041e-01, 1.058e-02) * s0[y+2][x+0];
	r += M4(1.022e-01, -4.279e-02, -4.469e-01, 1.408e-01, 1.095e-01, -1.394e-01, -2.258e-02, 9.901e-02, -9.540e-02, -1.105e-02, -1.606e-01, 2.055e-03, 1.477e-01, -1.366e-01, -1.351e-01, 7.493e-03) * s0[y+2][x+1];
	r += M4(-1.368e-01, -1.574e-01, -1.335e-01, 9.591e-02, -1.669e-03, -1.218e-01, 4.734e-02, 7.055e-02, 1.519e-01, 3.265e-01, -1.783e-02, -2.134e-01, 3.272e-01, 1.204e-01, 1.018e-01, -1.796e-02) * s0[y+2][x+2];
	r += M4(-5.651e-03, 3.338e-03, -2.395e-02, -1.311e-01, -8.925e-03, -7.064e-03, 5.494e-02, 3.037e-01, 1.932e-02, -9.203e-02, -3.334e-02, -2.158e-03, 2.503e-02, -5.591e-02, -1.726e-02, 2.442e-02) * s1[y+0][x+0];
	r += M4(5.977e-02, -2.197e-02, 4.935e-02, -1.372e-01, -1.703e-01, 1.128e-01, -2.124e-01, 5.224e-01, 9.788e-02, 1.335e-01, 4.902e-02, -3.638e-01, -1.150e-01, -7.261e-02, 7.046e-03, 1.438e-01) * s1[y+0][x+1];
	r += M4(-1.723e-02, -2.003e-01, -8.110e-02, 1.637e-01, -1.747e-02, -1.684e-01, 2.665e-02, 2.566e-02, -2.806e-02, 1.068e-02, 6.290e-03, -1.039e-01, 6.571e-03, -1.795e-01, -9.939e-04, -1.100e-02) * s1[y+0][x+2];
	r += M4(4.715e-02, -1.495e-01, -3.318e-02, -2.731e-03, 3.266e-02, 1.099e-01, -6.466e-03, -6.071e-02, -7.100e-02, -6.617e-04, -6.395e-03, -7.035e-02, 4.100e-02, -1.977e-02, -1.667e-03, 4.373e-02) * s1[y+1][x+0];
	r += M4(-8.259e-02, 5.010e-03, 7.012e-01, -1.941e-01, 1.173e-01, -1.899e-01, -5.618e-01, -1.089e-01, -7.643e-02, 1.886e-01, 1.728e-01, -2.173e-01, -7.055e-02, 1.230e-01, 2.807e-01, 7.102e-02) * s1[y+1][x+1];
	r += M4(3.922e-02, 1.243e-01, 8.440e-02, -1.255e-01, -2.143e-01, -9.754e-02, 3.027e-01, -1.059e-02, -1.089e-01, -1.796e-02, -4.326e-01, 5.469e-02, -1.044e-01, 1.662e-01, 6.067e-02, -4.877e-02) * s1[y+1][x+2];
	r += M4(-2.274e-02, 1.904e-02, 4.158e-03, 3.346e-02, -1.922e-02, -1.063e-03, 6.611e-02, -9.387e-03, -6.990e-02, 1.543e-02, 8.521e-02, 7.100e-02, 1.309e-01, 2.335e-02, 3.476e-02, -1.398e-01) * s1[y+2][x+0];
	r += M4(6.541e-02, -1.377e-01, 1.942e-01, -1.991e-01, 2.546e-02, 3.138e-02, -1.957e-01, 9.337e-02, -6.992e-02, 1.018e-01, 1.312e-02, -3.439e-02, -6.002e-03, -4.941e-02, -1.484e-01, 3.399e-02) * s1[y+2][x+1];
	r += M4(-1.430e-02, -7.686e-02, 1.837e-01, -9.849e-02, 8.320e-02, 9.017e-02, 2.114e-01, -1.229e-02, -1.150e-03, -3.237e-01, -1.265e-01, -3.837e-03, -3.483e-02, -5.793e-02, 2.780e-02, 6.629e-02) * s1[y+2][x+2];
	r += M4(-1.116e-01, 1.439e-01, -3.984e-02, -1.151e-02, -5.168e-03, 3.250e-02, -1.254e-02, 1.440e-01, -2.039e-02, -4.419e-02, -2.089e-02, 5.404e-02, -5.652e-02, 4.252e-02, 6.928e-03, -5.907e-02) * s2[y+0][x+0];
	r += M4(3.151e-02, -1.885e-01, 8.012e-02, -3.030e-02, 9.013e-02, 2.754e-02, -1.666e-01, 1.124e-01, -6.954e-02, -1.492e-02, -2.456e-02, -1.469e-01, -3.548e-02, -2.433e-02, -3.557e-02, -2.933e-01) * s2[y+0][x+1];
	r += M4(1.061e-01, 1.526e-03, 3.190e-02, 1.136e-01, -1.104e-01, 2.094e-01, 4.202e-03, 3.304e-02, 1.109e-01, 2.625e-02, 9.544e-02, 7.982e-02, 5.405e-02, 9.988e-02, -7.196e-02, -2.792e-01) * s2[y+0][x+2];
	r += M4(-3.014e-02, -7.067e-02, -9.058e-02, -7.369e-02, -1.543e-01, 4.015e-02, 5.472e-02, -2.471e-02, 3.350e-02, -2.539e-02, -4.014e-02, 6.280e-02, -1.499e-01, 1.810e-01, 1.790e-01, 5.152e-02) * s2[y+1][x+0];
	r += M4(-3.256e-01, -6.486e-02, 3.751e-02, 3.969e-03, 2.348e-01, -1.109e-01, -3.249e-02, 5.270e-02, -7.360e-02, 1.743e-01, -2.301e-02, -1.363e-01, -2.941e-01, 2.403e-02, -1.586e-01, -2.625e-01) * s2[y+1][x+1];
	r += M4(-5.824e-02, 9.498e-02, -7.890e-02, -7.934e-02, 1.169e-01, 4.578e-02, 1.174e-01, 1.884e-01, -9.998e-02, 2.667e-02, -2.215e-02, -8.821e-04, 5.519e-02, -5.063e-01, -4.307e-01, -1.161e-01) * s2[y+1][x+2];
	r += M4(4.400e-02, -2.464e-02, -3.895e-02, 5.265e-02, 8.599e-02, 2.106e-01, 1.588e-01, -3.306e-02, 5.302e-02, -1.882e-02, 4.992e-02, -3.820e-02, -1.431e-01, 1.439e-02, 2.246e-01, -6.110e-03) * s2[y+2][x+0];
	r += M4(-9.717e-03, 1.485e-01, 6.861e-02, -1.107e-01, 1.910e-01, -9.674e-02, 3.947e-02, 1.935e-02, 3.649e-02, -9.017e-03, -3.253e-02, -3.019e-02, 6.937e-02, -2.236e-01, -2.031e-01, -1.565e-02) * s2[y+2][x+1];
	r += M4(8.314e-02, 3.688e-02, -1.237e-03, 3.489e-02, 2.334e-01, 3.095e-01, 2.427e-02, -1.821e-01, 4.853e-02, -4.235e-02, 3.010e-02, 7.090e-02, -8.060e-02, -3.117e-01, 3.883e-02, 1.254e-01) * s2[y+2][x+2];
	r += M4(3.375e-02, -2.477e-01, -5.805e-01, -1.882e+00, 9.413e-03, -2.290e-02, 3.772e-02, 4.483e-02, 2.036e-01, 2.015e-04, -2.017e-01, -1.203e-01, -8.081e-02, 5.806e-02, 3.559e-02, 1.516e-02) * s3[y+0][x+0];
	r += M4(7.645e-01, 1.928e-01, -5.595e-01, -2.852e+00, 2.624e-02, -3.075e-02, -9.839e-02, 8.804e-02, 5.361e-01, -2.487e-01, 2.424e-01, -2.725e-01, -9.380e-03, -4.997e-02, -1.004e-01, 8.902e-02) * s3[y+0][x+1];
	r += M4(5.409e-01, 1.255e-01, 4.379e-01, -4.917e-01, -7.433e-02, 1.042e-01, 1.149e-01, 5.922e-02, 5.043e-01, -2.024e-01, -2.423e-01, 4.166e-01, 3.751e-02, 3.166e-02, -1.219e-01, -5.919e-02) * s3[y+0][x+2];
	r += M4(-1.068e-01, -5.183e-02, -2.240e-01, 5.199e-01, 5.964e-03, 3.122e-02, 4.870e-03, 5.068e-02, -6.154e-02, -1.946e-01, 1.995e-01, 4.116e-01, -1.889e-01, 1.794e-01, 5.628e-02, 3.895e-02) * s3[y+1][x+0];
	r += M4(-2.108e+00, -5.959e-01, 1.561e+00, 3.568e-01, 1.454e-01, -1.514e-01, -1.967e-01, -7.806e-02, -5.548e-02, 3.259e-01, 7.058e-01, -3.069e-03, -2.651e-01, 3.936e-01, 5.849e-02, -1.103e-02) * s3[y+1][x+1];
	r += M4(-3.801e-01, 2.512e-01, 9.028e-01, -6.948e-01, 5.744e-02, 1.228e-02, 9.052e-02, 1.224e-01, 6.901e-01, -1.108e-02, -3.947e-01, -1.802e-02, 9.930e-02, 9.612e-03, -6.121e-02, 1.937e-02) * s3[y+1][x+2];
	r += M4(2.809e-01, -1.679e-01, 3.513e-02, -2.727e-01, 2.494e-02, -2.186e-02, -7.955e-02, -5.166e-02, 1.283e-01, -2.516e-02, 1.484e-01, -1.020e-01, -1.309e-01, 4.282e-02, 3.841e-02, 1.312e-01) * s3[y+2][x+0];
	r += M4(1.499e-01, 5.916e-01, 5.112e-01, 9.881e-02, 2.623e-01, -1.739e-01, -1.281e-01, -2.067e-01, 7.839e-02, 1.468e-01, 3.419e-02, -3.509e-01, 1.518e-01, 1.657e-01, -9.248e-02, 2.571e-02) * s3[y+2][x+1];
	r += M4(6.978e-01, 6.424e-01, 1.617e-01, -4.627e-01, 1.061e-01, 1.485e-01, 3.939e-02, -1.426e-01, 4.005e-01, 1.213e-01, -3.561e-02, 2.583e-01, 5.707e-02, 1.109e-01, -2.326e-04, -1.911e-02) * s3[y+2][x+2];
	r += V4(1.544e-01, -2.327e-02, -2.651e-03, 3.088e-02);
	return vec4(r);
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv1_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
			s2[ay][ax] = l1(x - 1, y - 1);
			s1[ay][ax] = -max(-s0[ay][ax], V4(0.0));
			s0[ay][ax] = max(s0[ay][ax], V4(0.0));
			s3[ay][ax] = -max(-s2[ay][ax], V4(0.0));
			s2[ay][ax] = max(s2[ay][ax], V4(0.0));
		}
	}
	barrier();
	vec4 r0 = f0(xy.x, xy.y);
	vec4 r1 = f1(xy.x, xy.y);
	imageStore(out_image, opos + ivec2(0, 0), r0);
	imageStore(out_image, opos + ivec2(1, 0), r1);
}

//!DESC CuNNy-4x8C-RCAS-conv3
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv2
//!BIND LUMA
//!SAVE conv3
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(texelFetch(conv2_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv2_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 s0[10][10];
shared V4 s1[10][10];
shared V4 s2[10][10];
shared V4 s3[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-9.597e-02, 5.819e-02, -3.176e-02, -5.057e-02, 9.785e-02, 1.499e-02, -1.940e-03, 5.809e-03, 5.130e-03, 1.048e-01, 1.857e-01, -3.907e-02, 1.284e-01, -3.659e-02, -7.122e-02, 7.102e-02) * s0[y+0][x+0];
	r += M4(-1.977e-01, 3.075e-01, -1.417e-01, -5.160e-02, 1.603e-02, 3.332e-02, 6.237e-02, 9.239e-02, -8.517e-02, 1.711e-01, 1.460e-01, -3.418e-02, 2.401e-02, 1.277e-01, 1.841e-02, 1.033e-01) * s0[y+0][x+1];
	r += M4(-1.724e-01, 1.269e-01, 2.257e-02, -2.172e-02, 6.543e-02, -6.234e-02, -3.556e-02, 4.872e-02, -1.031e-02, 3.828e-03, 1.861e-02, 7.193e-03, 1.672e-03, -5.366e-02, 1.403e-02, -1.903e-02) * s0[y+0][x+2];
	r += M4(-1.062e-02, 4.250e-02, 9.825e-02, -8.320e-02, -1.849e-03, 1.702e-01, 8.113e-02, 6.733e-03, -1.288e-01, 2.903e-02, -1.826e-01, -1.382e-01, 1.977e-01, 7.942e-02, -2.054e-01, 3.565e-01) * s0[y+1][x+0];
	r += M4(-3.561e-02, 2.042e-01, 2.325e-01, 8.520e-02, -1.956e-02, -6.393e-02, -3.504e-01, -4.211e-01, -3.090e-01, 4.705e-01, -7.608e-01, 1.215e-01, 1.983e-01, 6.385e-02, -1.801e-01, -6.582e-01) * s0[y+1][x+1];
	r += M4(-6.805e-02, 5.414e-02, 1.259e-01, -8.889e-02, -1.392e-01, 1.343e-03, 2.385e-01, -6.704e-02, 6.812e-02, 8.248e-02, -1.990e-01, -7.269e-02, -2.150e-01, 1.821e-01, -2.604e-02, -1.176e-02) * s0[y+1][x+2];
	r += M4(-1.556e-02, 1.449e-02, 6.644e-03, 3.876e-02, -1.712e-03, 1.442e-02, -6.813e-02, 5.160e-02, -1.771e-01, 1.154e-02, 1.675e-01, -1.127e-02, 6.783e-02, 8.571e-02, -1.359e-01, -3.960e-02) * s0[y+2][x+0];
	r += M4(-5.582e-02, 9.105e-02, -5.768e-02, 2.537e-01, 4.346e-03, 8.786e-03, -3.748e-04, -1.312e-01, -1.981e-01, 5.401e-03, 1.803e-01, -1.975e-01, 2.008e-01, 8.075e-02, -9.003e-02, -1.819e-01) * s0[y+2][x+1];
	r += M4(-1.619e-02, 2.738e-02, 2.871e-02, -6.756e-02, 7.811e-03, 7.231e-02, 6.268e-03, -4.049e-02, -7.374e-02, 6.199e-02, -6.689e-02, 1.583e-01, 9.955e-02, -1.848e-02, -8.898e-04, 2.286e-04) * s0[y+2][x+2];
	r += M4(5.492e-02, -6.703e-02, 7.720e-02, 7.453e-02, -3.223e-02, -1.323e-01, 8.652e-02, 6.363e-02, -8.006e-03, 1.689e-01, 2.787e-02, -1.041e-01, 1.617e-01, 1.385e-01, -1.278e-01, -6.032e-02) * s1[y+0][x+0];
	r += M4(-1.388e-01, 1.525e-01, 6.512e-02, -6.808e-02, 5.565e-02, 7.155e-02, -1.445e-01, 1.728e-01, -1.333e-01, 4.651e-02, 1.138e-01, -4.700e-02, 2.413e-02, 1.251e-01, 1.063e-01, 1.645e-01) * s1[y+0][x+1];
	r += M4(-8.406e-02, 1.080e-01, 2.693e-02, -2.579e-02, -3.139e-03, -1.072e-01, -1.098e-02, 1.714e-01, -3.385e-02, -6.767e-03, 3.650e-02, 7.186e-02, -3.707e-02, -1.180e-04, -2.801e-02, -2.262e-02) * s1[y+0][x+2];
	r += M4(1.870e-02, -7.892e-02, 1.157e-01, -1.421e-01, -1.645e-01, 1.321e-01, 2.017e-01, -7.360e-02, 5.584e-02, -6.638e-02, -4.524e-02, 1.475e-02, 6.387e-02, 9.984e-02, 4.731e-02, 8.617e-02) * s1[y+1][x+0];
	r += M4(1.697e-01, 3.693e-01, 2.415e-02, 8.812e-02, 2.703e-01, 1.843e-01, 2.397e-01, 9.106e-02, -7.502e-02, 2.396e-02, -2.759e-01, -3.682e-01, -1.220e-01, 1.204e-01, 3.514e-01, -4.415e-02) * s1[y+1][x+1];
	r += M4(-2.686e-01, 1.579e-01, -1.376e-01, -2.144e-01, -3.409e-01, 7.333e-02, 3.926e-01, 3.554e-02, -4.736e-02, 4.892e-02, -1.480e-01, 2.157e-01, -1.208e-01, 1.441e-01, 3.695e-02, -1.266e-01) * s1[y+1][x+2];
	r += M4(1.442e-01, -7.110e-02, -6.134e-02, -1.717e-01, 5.010e-02, 5.610e-02, -6.358e-02, 1.843e-01, 1.879e-02, 1.085e-02, 5.046e-03, -4.269e-02, 4.214e-02, 6.794e-02, -7.370e-02, -2.887e-02) * s1[y+2][x+0];
	r += M4(-2.012e-01, -2.019e-01, -2.008e-02, -1.544e-01, -9.779e-02, 7.907e-02, -1.457e-01, 1.779e-01, -4.083e-02, -4.243e-02, 2.117e-01, 4.506e-03, -1.426e-01, 5.707e-02, 1.861e-01, -3.682e-01) * s1[y+2][x+1];
	r += M4(2.359e-01, 1.029e-01, 8.943e-02, -3.082e-01, -1.351e-01, 4.799e-03, -4.676e-02, -1.877e-02, -1.095e-01, 7.885e-03, 2.863e-01, 1.259e-02, -2.743e-02, -2.119e-02, 1.836e-01, 1.000e-02) * s1[y+2][x+2];
	r += M4(-9.834e-02, -6.010e-02, -2.813e-02, -3.845e-02, 4.793e-02, 1.192e-01, -8.207e-02, -5.714e-03, -6.348e-02, -4.125e-02, 1.482e-02, 6.339e-02, 1.043e-01, 1.132e-01, 5.637e-02, -3.517e-02) * s2[y+0][x+0];
	r += M4(4.800e-02, 7.199e-02, 6.991e-02, -6.959e-02, -1.434e-01, 7.908e-03, 2.441e-01, -6.660e-02, -8.374e-02, -2.731e-01, -9.834e-02, 1.277e-01, -6.348e-02, -9.307e-02, 5.759e-02, 1.447e-02) * s2[y+0][x+1];
	r += M4(-3.701e-02, -1.552e-02, 1.210e-01, -3.683e-02, -9.844e-02, 8.096e-02, 5.775e-04, -3.862e-02, 1.628e-01, -1.185e-01, -8.442e-03, -5.838e-02, 6.394e-02, -1.724e-01, 1.111e-01, 3.476e-03) * s2[y+0][x+2];
	r += M4(-3.366e-02, -2.126e-03, -3.412e-02, -7.738e-02, 8.266e-02, -4.861e-02, -8.627e-02, 1.117e-01, -4.978e-02, 2.959e-02, 1.595e-01, -3.070e-01, 8.859e-02, 5.824e-02, 2.446e-02, -5.627e-03) * s2[y+1][x+0];
	r += M4(4.383e-02, 7.030e-02, -1.166e-01, 2.677e-01, -7.634e-03, -1.653e-01, -1.629e-01, -2.918e-02, -4.033e-01, 1.868e-01, 1.078e-01, -2.588e-01, 1.682e-01, 1.369e-01, -1.009e-01, 4.894e-02) * s2[y+1][x+1];
	r += M4(1.265e-01, -3.135e-01, -1.792e-01, 1.479e-01, -1.054e-02, -7.198e-02, -1.754e-01, -8.130e-02, -4.399e-02, 1.426e-01, 4.955e-02, 9.735e-02, 4.164e-02, -8.025e-02, -4.324e-01, 1.578e-02) * s2[y+1][x+2];
	r += M4(1.801e-02, 1.023e-02, 4.296e-03, -4.077e-02, -6.246e-02, -2.749e-02, 1.048e-03, -9.445e-02, 7.744e-02, 7.449e-02, 7.433e-02, -2.093e-01, -3.393e-02, 3.947e-02, 7.954e-02, -8.099e-03) * s2[y+2][x+0];
	r += M4(-2.467e-02, -7.909e-02, 8.119e-02, -1.033e-01, 1.562e-01, -1.357e-01, -1.634e-01, 2.105e-01, 9.935e-02, 7.218e-02, 1.601e-01, -1.022e-01, 2.899e-01, 8.644e-02, -2.805e-01, 3.135e-01) * s2[y+2][x+1];
	r += M4(1.280e-02, 4.169e-02, 2.523e-02, -3.468e-02, 9.596e-02, -1.376e-01, -1.456e-01, 8.699e-02, 1.101e-02, 5.462e-02, 1.338e-02, -1.392e-01, 1.084e-02, 5.509e-02, -1.488e-01, 9.001e-02) * s2[y+2][x+2];
	r += M4(-6.270e-03, 3.735e-02, -1.498e-02, 8.578e-02, -2.016e-02, 7.594e-02, -1.640e-01, 5.187e-02, -5.017e-02, 2.900e-02, -4.342e-03, 4.292e-02, 2.144e-02, 2.098e-02, 1.062e-01, -7.725e-02) * s3[y+0][x+0];
	r += M4(7.441e-02, 2.663e-01, -8.426e-03, 8.042e-02, -1.304e-01, 1.666e-01, 1.650e-01, -2.169e-01, 6.082e-02, -7.501e-02, 2.445e-02, 8.562e-04, -1.175e-01, 6.071e-02, 5.442e-02, 1.176e-02) * s3[y+0][x+1];
	r += M4(-2.745e-02, -8.579e-02, 7.459e-02, 2.232e-02, -1.360e-01, 1.912e-01, 9.385e-02, -1.923e-01, 4.965e-02, -1.177e-01, 1.057e-01, -4.598e-02, -1.431e-02, -4.280e-02, 1.396e-02, -4.024e-02) * s3[y+0][x+2];
	r += M4(-1.913e-02, 2.908e-02, -6.236e-02, 1.442e-01, 9.186e-02, -4.140e-02, -1.133e-01, 2.291e-01, -2.308e-02, -5.183e-02, -7.778e-02, 4.743e-02, 7.210e-02, 1.316e-01, -7.843e-02, -9.819e-02) * s3[y+1][x+0];
	r += M4(7.451e-02, 3.145e-01, 3.257e-01, 3.043e-01, -1.345e-01, -1.584e-01, 2.616e-02, -1.718e-01, 3.277e-02, -1.870e-01, -2.350e-01, -7.611e-02, -5.020e-02, 7.047e-02, 3.797e-02, -2.180e-01) * s3[y+1][x+1];
	r += M4(-1.440e-02, -4.608e-02, 3.494e-02, 9.367e-02, 8.862e-02, 1.323e-01, -1.098e-01, -1.763e-01, 1.617e-01, -5.814e-02, -1.423e-01, 7.114e-02, 4.724e-02, -5.541e-02, 3.492e-02, -5.733e-02) * s3[y+1][x+2];
	r += M4(-2.142e-02, 2.634e-02, -6.777e-02, -7.431e-03, -1.597e-01, 1.599e-02, 5.014e-02, -5.485e-02, 2.847e-02, -6.668e-02, -1.199e-02, 9.051e-02, -9.056e-02, -9.766e-03, -1.747e-01, -1.847e-01) * s3[y+2][x+0];
	r += M4(1.741e-01, -1.176e-02, 1.597e-01, -3.480e-02, -2.683e-01, -5.803e-02, 1.584e-01, -2.322e-03, 2.640e-01, -5.692e-02, -1.033e-01, 2.604e-01, -4.464e-03, 5.747e-04, -4.197e-01, 6.464e-02) * s3[y+2][x+1];
	r += M4(1.704e-02, -7.680e-02, 1.087e-01, 1.002e-02, 1.420e-02, 1.410e-01, 1.453e-01, -7.684e-02, 8.756e-02, -1.146e-01, -1.547e-01, 5.503e-02, -1.667e-01, 4.475e-02, -1.427e-01, 1.589e-03) * s3[y+2][x+2];
	r += V4(-7.976e-04, -8.386e-03, -8.347e-03, 4.502e-03);
	return vec4(r);
}
vec4 f1(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-1.400e-03, 3.874e-03, -4.378e-02, 4.966e-02, 9.194e-03, 5.569e-02, 1.861e-03, -9.004e-02, -1.489e-01, 4.197e-02, -5.828e-02, -3.615e-02, 1.316e-01, -2.485e-02, 6.259e-02, -1.250e-02) * s0[y+0][x+0];
	r += M4(-9.690e-02, -3.744e-02, -1.614e-01, -3.467e-02, -5.721e-02, 9.565e-02, 3.725e-02, 1.153e-02, -3.534e-02, -1.031e-01, -9.161e-02, 1.370e-01, -2.430e-01, -6.377e-02, 1.105e-01, -5.755e-02) * s0[y+0][x+1];
	r += M4(6.617e-02, 1.159e-01, -5.795e-02, 5.612e-02, -2.475e-02, -7.412e-02, -6.529e-02, 3.650e-02, 1.673e-02, 4.396e-03, -6.008e-02, 4.668e-02, -1.348e-02, -8.973e-02, -1.080e-02, -9.149e-03) * s0[y+0][x+2];
	r += M4(-5.192e-02, -1.169e-02, 4.246e-02, 2.596e-02, -1.233e-01, -6.261e-02, -1.177e-01, -5.090e-02, -1.791e-01, 8.682e-02, -2.350e-02, -7.361e-02, 1.247e-01, 7.743e-02, -7.792e-03, -3.114e-02) * s0[y+1][x+0];
	r += M4(9.561e-03, 8.890e-02, 1.223e-01, -1.410e-02, 5.638e-01, 2.477e-02, -1.291e-01, 7.909e-02, -3.466e-01, -2.111e-01, -1.016e-01, 9.822e-02, 3.918e-02, 5.667e-02, 3.544e-02, 2.803e-01) * s0[y+1][x+1];
	r += M4(1.435e-01, 6.966e-02, -1.920e-01, 1.560e-01, -1.895e-01, -1.792e-01, 7.718e-02, -7.004e-02, 1.516e-01, 2.595e-01, -6.052e-02, 6.957e-02, -4.085e-02, -7.700e-02, 6.400e-02, 2.195e-01) * s0[y+1][x+2];
	r += M4(-5.883e-02, -2.648e-02, 3.190e-02, -2.384e-02, -2.914e-02, -6.222e-02, -3.743e-02, -2.936e-02, -1.838e-01, 1.604e-02, -1.661e-01, 4.190e-02, 1.633e-01, -6.477e-02, 1.915e-01, 3.229e-02) * s0[y+2][x+0];
	r += M4(7.894e-02, 1.744e-02, -2.054e-01, -2.634e-02, 2.407e-01, 2.091e-01, -5.057e-01, 1.305e-01, -2.219e-02, -4.493e-02, -3.379e-01, 3.687e-02, -2.251e-02, 1.452e-01, 2.966e-01, 2.276e-02) * s0[y+2][x+1];
	r += M4(1.567e-02, 8.764e-02, -1.016e-01, -2.648e-02, -1.248e-01, -1.426e-02, 7.222e-02, 7.589e-03, 4.458e-02, -7.873e-03, -6.198e-02, 3.571e-02, 6.194e-02, 3.993e-02, -2.722e-02, 1.135e-01) * s0[y+2][x+2];
	r += M4(1.219e-02, 6.379e-03, -2.429e-02, -3.178e-02, -2.478e-01, -1.764e-02, 5.841e-02, -1.083e-01, -2.306e-02, 9.622e-02, -2.910e-02, -8.148e-03, 4.026e-02, 1.166e-01, 2.846e-02, -5.308e-02) * s1[y+0][x+0];
	r += M4(-1.312e-01, -5.623e-02, -2.349e-02, -2.349e-02, 3.946e-02, 7.114e-02, 7.447e-02, -5.019e-02, -9.355e-02, -7.409e-03, 7.072e-02, 9.316e-02, -2.861e-01, -1.023e-01, 3.069e-01, -1.409e-01) * s1[y+0][x+1];
	r += M4(6.784e-02, 3.793e-02, -1.421e-02, -3.458e-03, -9.242e-02, 4.214e-03, 1.326e-03, -1.195e-02, -5.011e-02, -1.175e-01, -5.123e-02, -5.965e-03, 1.081e-01, -1.342e-01, -2.411e-02, -3.761e-02) * s1[y+0][x+2];
	r += M4(1.533e-01, -1.223e-01, 1.153e-01, 3.922e-02, -3.349e-01, -2.706e-02, -3.773e-02, -4.253e-02, -4.254e-02, 1.436e-02, 2.452e-01, -1.676e-02, 5.301e-02, 1.366e-01, -1.712e-01, -5.574e-03) * s1[y+1][x+0];
	r += M4(1.570e-01, -2.219e-01, 6.073e-02, 1.663e-02, 9.593e-02, 1.285e-01, 1.418e-01, 1.933e-02, 8.454e-02, -3.702e-01, -1.153e-01, 4.532e-02, -2.549e-01, -2.962e-01, 2.047e-01, 1.063e-01) * s1[y+1][x+1];
	r += M4(-5.198e-02, 4.390e-02, -5.818e-02, 1.363e-01, -3.612e-01, -2.504e-01, 9.351e-02, 1.102e-02, -8.373e-02, -8.198e-02, 2.141e-02, -1.678e-01, 4.347e-02, -2.766e-01, 1.018e-01, 1.622e-01) * s1[y+1][x+2];
	r += M4(7.505e-02, 8.562e-03, 1.650e-01, 1.463e-02, -1.334e-01, -2.027e-03, 1.375e-01, 2.975e-02, 4.407e-02, 2.139e-02, -9.914e-02, -4.945e-02, -4.623e-03, 2.164e-02, 8.250e-02, -5.314e-02) * s1[y+2][x+0];
	r += M4(-9.074e-02, 8.766e-02, 9.372e-02, 6.512e-02, 9.043e-02, 1.643e-01, -2.522e-01, 3.421e-02, -3.525e-02, 5.723e-02, 2.600e-02, -9.424e-02, -2.507e-02, 5.235e-02, -1.088e-01, 1.876e-03) * s1[y+2][x+1];
	r += M4(1.577e-02, 2.348e-02, -7.784e-02, 5.939e-02, 5.029e-02, 5.316e-02, -7.322e-02, -3.875e-02, -7.943e-03, -7.991e-02, -2.448e-03, 4.446e-02, 3.492e-02, -2.510e-01, -6.050e-02, 1.056e-02) * s1[y+2][x+2];
	r += M4(-1.228e-01, -5.615e-02, 4.590e-03, 8.931e-03, 7.810e-02, -7.448e-02, -2.159e-02, -1.110e-03, -4.709e-02, 8.114e-02, 4.292e-03, -3.431e-02, 1.839e-02, -2.963e-02, -2.131e-02, -1.768e-02) * s2[y+0][x+0];
	r += M4(2.631e-02, -7.927e-02, 4.450e-02, 4.432e-02, -3.376e-01, 4.392e-02, 5.567e-02, 3.097e-02, 6.455e-02, -1.552e-02, -2.003e-03, 1.054e-03, -4.318e-03, -4.333e-02, 1.056e-01, 2.808e-02) * s2[y+0][x+1];
	r += M4(-1.753e-02, 4.328e-02, 1.608e-02, 5.360e-02, 7.725e-02, -1.323e-01, -2.455e-02, -1.987e-02, 8.422e-03, 1.228e-01, 4.796e-02, 1.885e-02, 6.103e-02, -1.729e-02, -1.006e-02, 1.099e-02) * s2[y+0][x+2];
	r += M4(1.228e-01, -2.780e-02, -4.991e-02, 8.956e-03, 8.519e-02, 8.090e-03, -1.710e-02, 6.866e-02, 4.890e-02, 2.751e-02, 2.469e-01, 1.757e-02, -2.136e-02, 2.502e-02, 7.058e-02, -5.907e-02) * s2[y+1][x+0];
	r += M4(-1.589e-03, 1.575e-01, 1.515e-02, 1.232e-01, -6.066e-02, 1.549e-01, 5.252e-02, 1.038e-01, 2.207e-01, -3.682e-01, -3.460e-02, -1.061e-01, 1.880e-01, 2.227e-02, -6.430e-02, 3.094e-02) * s2[y+1][x+1];
	r += M4(1.837e-02, 4.409e-02, 3.201e-02, -1.302e-01, 1.325e-01, 1.290e-01, -5.466e-02, -3.751e-02, 1.423e-02, -1.506e-01, 1.116e-01, 7.456e-02, 8.728e-03, 1.595e-01, 6.388e-02, -1.190e-01) * s2[y+1][x+2];
	r += M4(8.667e-02, 1.000e-01, -5.485e-02, 3.474e-02, 7.108e-02, 9.732e-02, -1.533e-02, 5.834e-02, -1.772e-01, 1.529e-01, 1.472e-03, -1.147e-01, -1.531e-01, 4.921e-03, 7.790e-02, -2.486e-02) * s2[y+2][x+0];
	r += M4(-5.505e-02, -4.505e-02, -5.596e-02, 1.033e-01, -3.819e-02, -8.492e-02, 2.753e-02, 7.531e-02, -3.881e-02, -2.088e-01, 1.705e-01, 1.914e-02, 1.369e-01, -2.247e-01, -1.779e-01, 1.908e-02) * s2[y+2][x+1];
	r += M4(-2.180e-02, -5.315e-02, 1.043e-02, 9.173e-02, 1.072e-01, 2.018e-01, -1.201e-01, -1.794e-02, 2.466e-02, -5.907e-03, -4.885e-02, 6.795e-02, 6.309e-03, -1.276e-02, -8.892e-03, -3.233e-02) * s2[y+2][x+2];
	r += M4(-1.178e-01, -4.004e-02, -2.287e-03, -1.819e-03, 2.277e-02, -2.721e-02, -3.001e-02, 1.016e-02, 9.089e-03, 3.506e-02, -3.499e-02, 4.162e-02, -1.123e-02, 4.368e-02, -1.511e-02, 5.590e-03) * s3[y+0][x+0];
	r += M4(1.466e-02, 3.516e-02, -1.335e-01, 9.454e-02, -3.701e-01, 1.586e-02, 9.332e-02, 2.888e-02, 1.717e-01, -2.992e-02, -1.064e-01, -7.357e-03, -1.411e-01, -1.084e-01, 3.399e-02, -7.553e-03) * s3[y+0][x+1];
	r += M4(1.396e-02, 4.447e-02, 1.556e-02, 1.773e-01, 5.698e-02, -5.551e-02, -7.512e-02, 1.679e-02, -1.050e-01, 6.535e-02, 4.586e-02, -6.120e-03, -1.902e-02, -3.507e-02, -4.299e-02, -3.005e-02) * s3[y+0][x+2];
	r += M4(-1.035e-01, -1.972e-02, -2.874e-02, 3.508e-02, 4.324e-01, 2.300e-01, 1.954e-02, 6.372e-02, 8.200e-02, -5.578e-02, 3.669e-02, 9.076e-03, -1.062e-01, -2.732e-02, 1.145e-01, -5.622e-02) * s3[y+1][x+0];
	r += M4(-4.801e-01, 2.317e-01, 2.835e-01, 2.552e-01, -4.559e-01, 1.113e-01, -1.000e-01, 1.403e-01, 1.636e-01, -1.565e-01, -2.549e-01, 5.646e-03, -1.003e-01, 7.979e-02, -4.317e-02, 9.951e-02) * s3[y+1][x+1];
	r += M4(3.455e-02, -2.301e-01, 6.619e-02, 6.092e-01, 3.779e-01, 1.725e-01, -1.798e-01, -1.855e-01, 2.351e-02, 2.168e-01, -2.646e-02, 3.244e-02, -7.300e-02, 3.071e-02, 3.126e-02, -5.335e-02) * s3[y+1][x+2];
	r += M4(1.004e-01, 7.534e-02, -6.562e-03, 3.229e-02, 2.640e-01, 2.007e-01, 6.728e-02, 1.207e-02, -1.749e-03, -1.675e-02, -2.549e-02, -1.662e-02, -1.053e-01, 7.725e-02, -3.781e-02, 3.301e-02) * s3[y+2][x+0];
	r += M4(1.594e-02, -7.914e-02, 5.946e-02, 1.270e-01, -3.544e-01, -2.368e-02, 1.948e-01, -1.265e-03, 2.281e-01, 7.251e-02, -9.182e-03, 2.082e-03, -3.874e-01, -1.111e-01, -1.889e-01, -2.222e-02) * s3[y+2][x+1];
	r += M4(1.087e-02, -1.112e-01, -3.668e-02, 1.713e-01, 7.113e-02, -6.544e-02, -1.803e-01, 7.375e-02, -1.878e-02, 1.079e-01, 1.387e-01, 3.084e-02, -2.020e-02, 6.894e-02, 2.946e-03, 8.178e-03) * s3[y+2][x+2];
	r += V4(3.853e-03, -3.356e-03, 4.049e-03, 3.873e-02);
	return vec4(r);
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv2_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
			s2[ay][ax] = l1(x - 1, y - 1);
			s1[ay][ax] = -max(-s0[ay][ax], V4(0.0));
			s0[ay][ax] = max(s0[ay][ax], V4(0.0));
			s3[ay][ax] = -max(-s2[ay][ax], V4(0.0));
			s2[ay][ax] = max(s2[ay][ax], V4(0.0));
		}
	}
	barrier();
	vec4 r0 = f0(xy.x, xy.y);
	vec4 r1 = f1(xy.x, xy.y);
	imageStore(out_image, opos + ivec2(0, 0), r0);
	imageStore(out_image, opos + ivec2(1, 0), r1);
}

//!DESC CuNNy-4x8C-RCAS-conv4
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv3
//!BIND LUMA
//!SAVE conv4
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(texelFetch(conv3_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv3_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 s0[10][10];
shared V4 s1[10][10];
shared V4 s2[10][10];
shared V4 s3[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += M4(4.164e-03, -8.869e-03, -3.013e-02, 6.082e-03, -2.662e-02, -6.700e-03, 8.417e-03, -1.088e-03, -2.990e-02, 1.359e-01, 1.211e-02, 9.413e-02, 1.364e-02, -7.597e-03, -6.621e-02, 4.414e-02) * s0[y+0][x+0];
	r += M4(-2.209e-02, -1.558e-01, 2.239e-01, -4.676e-03, 9.730e-03, 1.005e-01, -2.069e-01, -7.300e-02, -5.947e-02, 3.233e-01, 5.967e-03, 2.675e-02, 1.283e-02, 3.732e-03, -2.815e-02, -2.141e-02) * s0[y+0][x+1];
	r += M4(1.606e-03, -1.255e-01, 8.667e-02, -4.784e-02, -2.083e-02, -1.702e-02, 1.669e-02, 3.919e-02, 7.372e-02, 1.017e-01, 5.289e-02, 8.563e-02, -5.603e-02, 5.306e-02, 1.095e-02, -4.320e-02) * s0[y+0][x+2];
	r += M4(-1.040e-02, -3.177e-02, 3.910e-02, 3.470e-03, -1.296e-02, 4.060e-02, -4.094e-02, -9.792e-02, -9.807e-02, -4.371e-03, 1.159e-01, -1.802e-01, 5.673e-04, -6.893e-05, -2.149e-02, 7.120e-02) * s0[y+1][x+0];
	r += M4(-1.575e-01, 9.914e-03, 8.360e-02, 1.393e-02, 3.176e-01, 4.752e-02, -6.030e-01, 3.789e-01, -1.353e-02, 1.134e-02, 8.494e-01, 2.355e-02, 1.567e-01, -9.188e-02, -4.788e-02, 2.018e-01) * s0[y+1][x+1];
	r += M4(1.495e-01, -5.351e-03, -9.636e-02, -8.954e-02, -4.056e-02, 5.139e-03, -9.651e-02, -1.542e-02, 5.809e-02, 4.802e-02, -7.716e-02, -2.693e-02, -5.382e-02, -6.057e-02, -1.519e-01, -4.453e-02) * s0[y+1][x+2];
	r += M4(-1.794e-02, 8.310e-03, 1.918e-02, 2.517e-02, -2.383e-02, -3.593e-02, 1.187e-01, -1.067e-01, 5.626e-02, -4.631e-02, 1.676e-01, 2.700e-01, -2.491e-02, 7.925e-03, 1.584e-02, 2.559e-03) * s0[y+2][x+0];
	r += M4(-5.988e-02, 1.277e-02, 7.838e-02, -9.583e-02, 1.347e-01, -6.403e-02, -6.797e-04, -4.730e-02, -1.428e-01, -1.047e-01, -4.250e-02, -2.495e-01, 2.809e-02, -4.051e-03, 1.155e-01, 5.858e-02) * s0[y+2][x+1];
	r += M4(3.547e-02, 2.059e-03, 4.304e-02, 2.525e-02, -3.993e-02, -1.491e-02, 9.520e-02, 1.032e-02, 5.321e-03, -1.038e-01, 3.036e-02, -8.181e-02, 1.617e-02, -2.031e-02, 6.121e-02, 3.061e-02) * s0[y+2][x+2];
	r += M4(4.708e-02, -7.752e-02, -5.407e-02, -4.934e-03, 3.440e-04, 2.362e-02, -4.190e-02, -2.493e-02, -4.568e-03, 3.036e-02, -4.278e-02, -6.004e-02, 2.363e-02, 3.093e-02, -9.313e-02, 7.726e-02) * s1[y+0][x+0];
	r += M4(4.770e-02, 6.819e-03, 9.347e-02, -3.097e-02, 2.456e-03, 8.051e-02, -9.587e-03, -6.729e-02, -2.894e-02, 3.416e-02, -4.437e-02, -3.247e-02, -4.931e-02, -1.006e-02, 2.124e-01, 7.867e-03) * s1[y+0][x+1];
	r += M4(-7.872e-03, -4.853e-02, -1.731e-02, -8.654e-03, -6.340e-03, 7.442e-03, 2.397e-02, 2.372e-02, 2.544e-02, 4.015e-02, -4.035e-02, 4.705e-03, -1.886e-02, 4.081e-02, 1.537e-01, -5.272e-02) * s1[y+0][x+2];
	r += M4(-1.922e-02, 1.255e-01, 1.787e-01, -7.485e-02, -1.539e-02, 7.544e-02, 4.229e-02, -4.668e-03, -5.619e-02, 1.178e-03, -7.782e-02, -3.211e-02, -5.653e-02, 1.991e-02, -1.363e-01, 1.479e-01) * s1[y+1][x+0];
	r += M4(3.641e-02, -1.685e-01, -2.778e-01, -1.076e-01, 1.538e-01, 4.801e-02, -3.148e-01, 1.085e-01, 4.427e-02, -3.528e-02, 7.163e-02, 4.525e-02, 6.107e-02, -1.333e-01, 1.203e-01, 3.156e-01) * s1[y+1][x+1];
	r += M4(1.951e-01, -7.975e-02, -3.998e-02, 9.631e-03, -4.236e-02, 6.255e-02, -1.570e-01, -2.586e-02, -2.262e-02, 1.464e-02, 1.652e-02, 1.540e-02, -5.509e-02, -6.777e-02, -1.023e-01, -1.425e-01) * s1[y+1][x+2];
	r += M4(-1.258e-01, -2.887e-02, -1.063e-01, 1.611e-02, 1.198e-02, -3.507e-02, 3.267e-02, -5.889e-02, -3.942e-02, 1.132e-03, 1.636e-02, 8.513e-02, 4.362e-02, 2.829e-02, 6.171e-04, 1.035e-01) * s1[y+2][x+0];
	r += M4(1.940e-01, 1.124e-01, -2.445e-02, 1.371e-01, -1.571e-02, -5.725e-02, 4.715e-02, -1.407e-01, -1.975e-02, 7.105e-03, 5.347e-02, -9.098e-02, -9.957e-02, 5.355e-02, 9.031e-02, 9.760e-02) * s1[y+2][x+1];
	r += M4(-1.242e-02, 3.309e-02, 3.763e-02, -7.007e-03, 8.990e-03, -2.027e-02, 5.792e-02, 4.847e-02, 1.825e-02, -2.321e-02, 1.856e-02, -1.159e-03, 2.605e-02, 1.616e-02, -3.427e-02, -8.454e-02) * s1[y+2][x+2];
	r += M4(-3.168e-03, 3.277e-02, -5.446e-02, -2.569e-02, 5.355e-02, -2.058e-02, 7.788e-03, -1.831e-02, 5.796e-02, -2.503e-02, -4.228e-02, -5.987e-02, -6.665e-03, 4.460e-02, -6.248e-02, -4.163e-02) * s2[y+0][x+0];
	r += M4(1.133e-02, 3.020e-02, -1.043e-01, 1.024e-02, -5.150e-02, 8.239e-02, -7.699e-02, 5.207e-02, 4.822e-03, 4.624e-02, 4.606e-01, -4.646e-02, 4.602e-02, 1.009e-02, -7.825e-02, -1.072e-02) * s2[y+0][x+1];
	r += M4(9.409e-03, -6.391e-03, -3.914e-03, 1.326e-02, -3.284e-03, 3.691e-02, 3.925e-02, 1.938e-02, 7.252e-02, -2.008e-02, -1.682e-01, 4.876e-02, 5.385e-03, 2.138e-02, -1.388e-02, -2.107e-02) * s2[y+0][x+2];
	r += M4(-6.045e-03, 2.618e-02, -5.259e-02, 5.575e-02, -9.742e-02, 3.288e-02, 6.995e-02, -8.445e-02, 4.406e-02, -5.472e-03, 4.065e-02, 1.214e-01, -5.220e-02, 2.333e-02, 7.617e-02, 9.356e-02) * s2[y+1][x+0];
	r += M4(4.780e-02, 1.314e-01, -1.425e-01, 3.917e-02, 1.558e-01, -2.911e-02, 1.599e-01, 1.419e-01, 1.436e-01, 5.100e-02, -2.847e-01, -2.238e-02, 2.334e-02, 3.192e-02, -1.365e-02, 5.507e-02) * s2[y+1][x+1];
	r += M4(3.401e-02, 8.648e-02, -2.209e-02, 4.353e-02, -6.470e-02, -3.379e-02, -1.676e-02, -6.187e-02, 6.846e-02, 4.336e-02, 3.862e-01, 2.610e-01, 2.784e-02, -5.608e-02, -2.874e-02, -2.511e-02) * s2[y+1][x+2];
	r += M4(3.097e-02, -5.525e-03, 2.248e-02, 5.050e-02, -6.288e-02, -5.680e-03, 1.502e-03, -5.432e-02, 5.705e-02, 9.891e-03, 1.479e-03, -1.260e-01, 1.884e-02, -2.743e-02, -1.979e-02, 7.916e-04) * s2[y+2][x+0];
	r += M4(-5.601e-02, 1.302e-02, 9.619e-02, 1.160e-01, -1.290e-02, 2.196e-02, -6.660e-02, -1.725e-01, 3.145e-02, 5.888e-03, 1.023e-01, 4.733e-01, 2.906e-03, 4.139e-02, -7.788e-02, 5.625e-02) * s2[y+2][x+1];
	r += M4(-1.053e-02, -8.180e-03, -1.342e-03, -3.431e-03, 1.309e-02, 5.169e-03, -8.448e-03, -2.456e-02, 3.993e-02, -4.923e-02, -6.044e-02, -2.744e-01, -7.890e-03, 2.167e-02, -5.657e-03, -1.515e-02) * s2[y+2][x+2];
	r += M4(-1.431e-01, 1.389e-01, 2.084e-01, 1.082e-01, 4.002e-02, -1.157e-01, 2.383e-01, -6.739e-02, -2.488e-02, 3.079e-03, 4.221e-02, -4.175e-02, 4.351e-02, 5.119e-01, -4.245e-01, 6.937e-02) * s3[y+0][x+0];
	r += M4(-3.448e-02, 1.544e-01, -1.100e-01, -2.028e-01, 1.160e-02, 3.803e-02, 2.622e-01, -1.943e-02, 3.427e-02, 1.957e-01, -1.685e-01, -6.677e-02, 1.077e-01, 2.787e-02, -2.279e-02, 2.057e-01) * s3[y+0][x+1];
	r += M4(1.394e-01, 5.873e-02, -7.961e-02, -1.061e-01, 6.065e-02, 8.725e-02, -4.260e-02, 7.222e-03, -3.212e-02, 1.440e-02, 2.275e-02, 6.394e-02, 1.620e-02, 1.700e-02, 1.441e-01, -7.098e-02) * s3[y+0][x+2];
	r += M4(-3.934e-01, 1.626e-01, 2.909e-02, -1.530e-01, -3.699e-01, -3.593e-02, 5.020e-01, -1.850e-01, -1.185e-03, 3.225e-02, 3.672e-02, -9.492e-02, 9.458e-02, -3.932e-01, -6.077e-01, 4.854e-01) * s3[y+1][x+0];
	r += M4(-1.019e+00, 3.848e-02, -8.066e-01, 1.873e-01, 3.678e-01, -1.907e-02, -5.069e-01, -7.606e-01, -3.551e-02, 2.185e-03, -6.879e-02, -5.493e-02, -3.612e-01, -2.541e-02, -5.548e-01, 3.176e-01) * s3[y+1][x+1];
	r += M4(3.229e-01, 2.427e-01, 5.767e-02, -7.856e-03, 5.213e-02, 4.426e-02, 1.769e-02, 7.233e-02, -9.013e-02, 2.143e-02, 4.387e-02, 8.587e-02, 2.215e-02, -4.728e-02, 2.994e-01, -1.419e-01) * s3[y+1][x+2];
	r += M4(-1.990e-01, -6.043e-02, -4.539e-02, -2.815e-02, -3.604e-01, 8.853e-02, 1.366e-01, -4.976e-01, 3.503e-02, -1.242e-02, -2.253e-02, 1.205e-02, -1.255e-02, 1.245e-02, 3.574e-01, -2.907e-01) * s3[y+2][x+0];
	r += M4(-2.015e-01, -7.417e-02, 9.679e-02, 3.704e-01, 2.467e-01, -2.755e-02, -4.306e-02, -2.342e-01, -5.311e-02, -7.732e-03, 1.702e-02, 4.232e-02, -2.837e-01, 3.491e-02, 1.559e-01, 2.280e-01) * s3[y+2][x+1];
	r += M4(4.542e-02, -7.959e-02, -2.773e-02, -4.333e-01, 1.018e-01, 2.147e-02, -3.062e-02, -7.813e-02, 1.952e-02, -1.678e-04, -4.259e-02, -4.735e-02, -8.210e-03, -9.994e-02, -1.090e-01, -5.788e-01) * s3[y+2][x+2];
	r += V4(2.021e-03, -8.710e-03, -1.086e-03, -7.437e-03);
	return vec4(r);
}
vec4 f1(int x, int y) {
	V4 r = V4(0.0);
	r += M4(1.186e-02, 6.733e-03, -2.649e-02, 7.181e-05, 3.899e-02, -1.784e-02, -5.318e-03, -1.256e-02, 2.309e-02, -1.481e-01, 1.323e-01, 2.205e-02, 1.659e-02, 2.747e-02, 1.243e-02, -2.254e-02) * s0[y+0][x+0];
	r += M4(-4.508e-02, -3.501e-02, 6.944e-02, -7.194e-03, 7.285e-02, -6.812e-02, -3.487e-02, 1.070e-02, -1.519e-01, 6.613e-02, -1.033e-01, -9.776e-02, -3.686e-02, -3.308e-02, -6.341e-03, 2.576e-03) * s0[y+0][x+1];
	r += M4(-3.883e-02, -2.176e-02, -3.044e-03, 1.827e-02, 1.374e-02, 4.232e-03, -7.891e-03, 1.379e-02, 4.158e-03, -5.476e-02, 6.977e-02, 1.310e-01, 8.465e-02, -2.549e-02, -6.116e-02, -6.460e-03) * s0[y+0][x+2];
	r += M4(1.258e-02, 8.305e-03, -6.766e-02, -1.714e-02, 2.827e-02, -2.238e-01, 2.144e-01, 7.215e-02, -1.154e-01, 1.962e-01, -9.709e-02, 2.783e-02, -1.304e-01, 3.384e-02, 6.187e-02, -6.651e-02) * s0[y+1][x+0];
	r += M4(1.261e-01, 4.151e-02, -2.071e-01, -1.608e-01, 4.541e-02, 3.034e-01, 1.860e-01, -7.802e-02, -2.176e-01, 1.590e+00, 3.256e-01, 1.895e-01, 7.391e-02, 3.771e-02, 1.855e-01, 1.118e-01) * s0[y+1][x+1];
	r += M4(3.028e-02, -1.033e-01, -1.493e-01, 1.072e-01, 2.310e-02, -1.335e-02, 2.815e-02, -8.366e-02, 9.526e-02, 1.821e-01, -1.075e-02, -1.589e-02, -7.422e-02, 5.179e-03, 1.059e-01, -1.220e-01) * s0[y+1][x+2];
	r += M4(6.005e-02, 1.635e-02, -1.157e-01, -4.140e-02, 1.037e-02, 1.035e-01, -1.165e-01, 1.947e-02, -3.283e-01, 1.250e-01, 5.100e-02, 1.465e-02, -7.130e-03, 2.574e-02, -6.475e-02, -1.864e-02) * s0[y+2][x+0];
	r += M4(1.470e-02, -5.400e-02, -5.164e-02, 2.416e-02, 1.324e-01, 1.768e-02, -1.761e-01, 6.468e-02, -4.455e-02, 1.091e-01, 8.082e-02, -2.603e-02, 3.690e-02, 4.484e-02, -1.892e-01, -2.186e-02) * s0[y+2][x+1];
	r += M4(-1.035e-02, 2.717e-03, 5.075e-03, 3.478e-02, 6.507e-02, 2.110e-02, -4.196e-02, -1.943e-03, 3.534e-03, 8.316e-02, -1.765e-02, 1.526e-01, 3.718e-03, 6.999e-03, -1.017e-01, -3.378e-02) * s0[y+2][x+2];
	r += M4(-8.592e-02, -3.701e-02, 6.108e-02, 2.110e-02, 2.178e-02, 3.729e-03, -4.981e-02, -4.857e-03, -6.467e-02, -3.261e-02, 1.039e-01, 1.922e-02, -2.519e-02, 7.754e-02, -2.852e-03, -4.840e-02) * s1[y+0][x+0];
	r += M4(-6.864e-02, 4.123e-03, 1.170e-02, 1.726e-01, 2.700e-02, -4.785e-02, -3.070e-02, 6.203e-02, -9.294e-03, -4.760e-02, 5.200e-02, -1.239e-02, -8.025e-02, 2.217e-02, -4.210e-02, 1.443e-03) * s1[y+0][x+1];
	r += M4(2.781e-02, -1.493e-02, 2.450e-02, 2.387e-02, -2.318e-02, 2.194e-02, -9.315e-03, -2.886e-02, -4.706e-02, -4.202e-03, -6.923e-03, 2.437e-02, 2.732e-02, -4.117e-02, 1.383e-02, 3.070e-02) * s1[y+0][x+2];
	r += M4(8.210e-02, -2.970e-02, -1.904e-01, -6.371e-02, -8.032e-02, -1.014e-01, 1.670e-01, 4.322e-02, -6.963e-02, -3.419e-02, 1.110e-01, -3.323e-02, -2.568e-01, 8.230e-02, -4.117e-02, -1.150e-01) * s1[y+1][x+0];
	r += M4(2.301e-01, -1.630e-01, -1.338e-01, -7.313e-02, 2.951e-02, 1.713e-01, 1.597e-01, 1.694e-02, 4.124e-02, 3.020e-03, 8.359e-02, 1.646e-01, 6.352e-01, 2.202e-01, 9.987e-02, 1.925e-01) * s1[y+1][x+1];
	r += M4(1.708e-02, 2.282e-02, -7.270e-02, 9.256e-02, -6.811e-03, -4.650e-02, 1.346e-02, -3.825e-02, -4.982e-02, 6.093e-03, 1.529e-02, -3.975e-02, 9.422e-02, -5.500e-02, 6.944e-02, -1.284e-01) * s1[y+1][x+2];
	r += M4(1.438e-02, -5.131e-02, 1.518e-01, -3.508e-02, -9.782e-02, 1.485e-02, -2.478e-03, 3.718e-04, -8.912e-03, 2.260e-02, 1.141e-04, -4.767e-02, -1.137e-01, 2.521e-02, -2.580e-02, -4.906e-02) * s1[y+2][x+0];
	r += M4(-1.201e-01, -8.860e-02, -4.391e-02, 1.444e-01, 1.415e-01, 2.656e-03, -1.242e-01, 4.918e-02, -5.457e-02, -7.379e-03, -7.987e-02, 4.600e-02, 1.939e-01, 3.866e-02, -1.091e-01, -2.647e-02) * s1[y+2][x+1];
	r += M4(2.248e-02, -1.234e-02, -3.897e-02, 1.976e-02, -2.895e-02, 4.745e-02, -1.729e-02, -2.056e-02, 1.639e-02, 4.514e-03, -7.538e-03, 3.210e-02, 3.720e-02, -3.211e-02, -3.998e-02, 2.265e-02) * s1[y+2][x+2];
	r += M4(1.322e-02, -2.667e-02, 5.534e-02, -3.363e-03, -9.646e-02, -7.420e-03, 2.059e-01, 6.418e-02, 4.731e-02, 3.977e-02, -1.072e-01, 6.971e-02, 2.315e-02, -2.429e-02, -4.601e-02, 6.115e-03) * s2[y+0][x+0];
	r += M4(-3.540e-02, -1.016e-02, 4.442e-02, -1.516e-02, -8.747e-02, 4.822e-04, 4.872e-02, -4.928e-02, 6.278e-02, -2.339e-01, 2.351e-02, 1.302e-01, -4.696e-02, 1.211e-02, 2.249e-02, 2.145e-04) * s2[y+0][x+1];
	r += M4(-1.733e-02, -2.008e-02, 8.840e-03, 4.441e-02, -4.119e-02, -7.691e-03, -1.760e-02, 2.372e-03, -2.046e-01, -5.740e-02, 1.284e-01, -3.664e-03, 2.168e-02, -4.283e-03, -2.124e-03, 2.782e-02) * s2[y+0][x+2];
	r += M4(-2.031e-02, 1.716e-02, 1.290e-02, -1.858e-02, 7.417e-02, 5.969e-02, -2.429e-01, -7.739e-02, 5.802e-03, -2.114e-01, 2.579e-02, 1.308e-02, -1.983e-02, 2.606e-02, -6.540e-02, -7.496e-02) * s2[y+1][x+0];
	r += M4(-5.391e-02, 9.107e-02, -1.911e-02, 6.165e-02, 4.308e-02, 5.208e-02, -3.688e-02, 1.431e-01, 8.021e-01, 4.395e-01, -3.795e-01, 8.502e-02, 1.310e-02, -3.006e-02, -9.300e-02, 1.132e-02) * s2[y+1][x+1];
	r += M4(-7.669e-02, 2.359e-03, 6.237e-03, -1.491e-03, 1.820e-03, 4.189e-03, 7.922e-02, -5.161e-02, -1.324e-01, 4.328e-02, -8.667e-02, -1.836e-01, 3.391e-02, 1.007e-02, 7.120e-02, 5.356e-02) * s2[y+1][x+2];
	r += M4(-9.513e-02, 3.251e-02, 6.164e-02, 6.362e-03, -3.174e-02, -6.201e-02, 9.667e-02, 2.664e-02, 1.115e-01, -1.755e-02, -4.878e-02, 3.081e-02, 1.481e-02, -8.471e-02, 1.141e-01, 1.800e-02) * s2[y+2][x+0];
	r += M4(-8.563e-02, 3.122e-02, 4.328e-02, -4.712e-02, 6.496e-02, -1.793e-02, 5.261e-02, 9.746e-02, -3.727e-01, -2.130e-02, 2.521e-01, -1.047e-01, -1.925e-02, 7.142e-02, 1.325e-01, -5.505e-02) * s2[y+2][x+1];
	r += M4(7.512e-03, 5.142e-02, 4.194e-02, 8.201e-03, 2.592e-02, -4.074e-02, -2.696e-02, 3.440e-02, 5.787e-02, 5.037e-02, -2.357e-02, 1.518e-01, 1.007e-02, 2.455e-03, -6.435e-02, -1.070e-02) * s2[y+2][x+2];
	r += M4(-7.946e-02, -1.033e-01, 8.351e-02, -7.886e-02, -7.643e-02, 1.752e-01, -5.474e-02, 6.542e-02, 5.817e-02, -5.472e-02, 2.732e-02, 2.963e-02, 8.599e-01, -5.508e-01, 1.799e-01, -2.870e-02) * s3[y+0][x+0];
	r += M4(-1.151e-01, 1.558e-01, 1.572e-01, -1.253e-01, -7.515e-02, 5.651e-02, 8.276e-03, 1.136e-01, -6.870e-02, -4.107e-02, 1.177e-01, 4.976e-02, 2.066e-01, 4.726e-02, -1.174e-01, -1.752e-01) * s3[y+0][x+1];
	r += M4(1.298e-01, -1.406e-01, 4.941e-02, 3.517e-01, -1.173e-02, 1.123e-02, -1.320e-02, 2.863e-02, -6.906e-02, 2.690e-03, -1.375e-02, -5.384e-02, 1.057e-01, -1.266e-01, 5.557e-02, 8.393e-02) * s3[y+0][x+2];
	r += M4(-1.027e-01, -1.713e-01, 8.919e-02, -2.175e-01, 1.752e-01, -7.704e-02, -8.092e-02, -2.498e-01, 1.711e-02, -6.021e-02, -1.723e-02, 4.766e-02, 1.953e+00, 8.637e-01, -1.837e-01, 4.725e-01) * s3[y+1][x+0];
	r += M4(2.554e-01, 1.460e-01, 1.539e-01, -1.887e-02, 3.876e-01, -2.431e-01, 6.430e-02, 9.792e-01, 1.357e-01, 1.058e-01, 3.920e-02, 5.887e-03, 5.142e-01, 2.013e-01, -7.070e-02, -3.860e-01) * s3[y+1][x+1];
	r += M4(-5.193e-02, 4.924e-02, 6.447e-02, 3.338e-01, -1.683e-02, 9.045e-02, 9.347e-02, 1.450e-01, -1.570e-02, -1.857e-02, 4.333e-02, -4.551e-02, 5.168e-02, -1.353e-01, 3.317e-02, 3.329e-01) * s3[y+1][x+2];
	r += M4(-6.299e-02, 8.176e-02, 2.590e-02, -1.362e-01, 2.832e-01, -9.340e-02, -1.271e-01, 8.138e-02, -2.335e-02, 1.098e-03, 4.818e-02, 1.515e-02, 1.256e+00, 1.348e-01, -1.160e-01, 2.133e-01) * s3[y+2][x+0];
	r += M4(-3.511e-01, -6.661e-02, 1.013e-01, -1.116e-01, -1.824e-01, -1.906e-01, 6.315e-04, 1.996e-01, 2.104e-03, 8.504e-03, 4.001e-02, -4.739e-02, 4.601e-01, -1.610e-02, 1.011e-01, -3.457e-01) * s3[y+2][x+1];
	r += M4(2.640e-01, 1.173e-01, 5.684e-02, 2.586e-01, 7.017e-02, 4.118e-02, -7.650e-03, 1.194e-01, -1.479e-02, -1.239e-02, 1.758e-02, 2.179e-02, 3.154e-01, -1.827e-01, -2.731e-02, 1.863e-01) * s3[y+2][x+2];
	r += V4(-2.202e-03, 5.325e-04, -3.052e-03, 1.644e-03);
	return vec4(r);
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv3_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
			s2[ay][ax] = l1(x - 1, y - 1);
			s1[ay][ax] = -max(-s0[ay][ax], V4(0.0));
			s0[ay][ax] = max(s0[ay][ax], V4(0.0));
			s3[ay][ax] = -max(-s2[ay][ax], V4(0.0));
			s2[ay][ax] = max(s2[ay][ax], V4(0.0));
		}
	}
	barrier();
	vec4 r0 = f0(xy.x, xy.y);
	vec4 r1 = f1(xy.x, xy.y);
	imageStore(out_image, opos + ivec2(0, 0), r0);
	imageStore(out_image, opos + ivec2(1, 0), r1);
}

//!DESC CuNNy-4x8C-RCAS-out
//!HOOK LUMA
//!COMPUTE 8 8 8 8
//!BIND conv4
//!BIND LUMA
//!SAVE out
//!WIDTH LUMA.w
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(texelFetch(conv4_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv4_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 s0[10][10];
shared V4 s1[10][10];
shared V4 s2[10][10];
shared V4 s3[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += M4(3.206e-01, -4.088e-02, 3.480e-02, -3.654e-02, -7.889e-02, -6.558e-03, 6.811e-02, 3.921e-02, 3.687e-02, 7.695e-03, -1.516e-02, 2.024e-02, -4.127e-02, 7.765e-02, -2.342e-02, 2.171e-02) * s0[y+0][x+0];
	r += M4(-1.968e-01, 2.095e-01, -1.598e-02, 6.470e-02, -8.044e-02, -6.000e-02, 5.250e-02, 6.209e-02, -4.175e-02, 5.508e-02, -1.423e-02, -2.894e-02, 1.951e-01, 1.277e-01, -1.069e-01, -9.226e-02) * s0[y+0][x+1];
	r += M4(1.897e-02, 7.056e-02, -1.163e-02, -2.474e-03, 1.493e-02, -6.324e-02, -2.272e-02, 1.595e-02, 1.716e-02, -3.368e-02, -2.873e-02, -4.286e-02, 9.084e-03, -4.239e-02, 3.470e-02, -4.309e-02) * s0[y+0][x+2];
	r += M4(1.658e-01, -1.291e-01, 2.672e-01, -1.606e-01, 6.113e-01, -1.258e-01, -2.206e-02, -1.881e-01, 1.743e-01, -7.029e-02, 1.450e-01, -1.101e-01, -7.121e-02, 1.480e-01, -3.331e-02, 1.313e-01) * s0[y+1][x+0];
	r += M4(-5.332e-01, 1.629e-01, -5.098e-01, 2.394e-01, 3.683e-01, 1.025e+00, -4.896e-01, -1.843e-01, 7.103e-03, 3.547e-01, -2.036e-01, 2.083e-01, -1.140e-01, -3.703e-01, 8.994e-02, -9.348e-02) * s0[y+1][x+1];
	r += M4(8.702e-02, 3.252e-03, 3.015e-02, 3.084e-02, -1.103e-02, 8.586e-02, 4.139e-02, -3.871e-02, 1.706e-02, -1.626e-02, 4.919e-02, -5.115e-02, 3.179e-02, -3.340e-03, -4.344e-02, -7.302e-02) * s0[y+1][x+2];
	r += M4(5.333e-02, -1.202e-02, 1.067e-01, -8.320e-02, -1.266e-01, -1.146e-01, -6.075e-02, -1.986e-01, 5.933e-02, 4.873e-02, 2.071e-02, -5.925e-03, -1.898e-02, 1.571e-02, -4.339e-02, 1.066e-01) * s0[y+2][x+0];
	r += M4(3.210e-04, -2.796e-02, -8.761e-02, 1.490e-01, -5.058e-02, -9.648e-02, -1.147e-01, 1.024e-01, -8.227e-02, -1.474e-02, 3.168e-03, 1.393e-01, 3.677e-02, 4.686e-03, 9.302e-02, -5.021e-02) * s0[y+2][x+1];
	r += M4(-6.087e-03, -8.342e-03, 3.850e-02, -2.093e-02, 4.390e-02, 3.884e-02, 3.904e-02, -3.921e-02, 1.328e-02, -1.150e-02, -1.602e-02, -3.535e-02, -1.699e-02, -7.577e-03, 1.487e-02, 1.294e-02) * s0[y+2][x+2];
	r += M4(-2.843e-01, 3.468e-01, -1.225e-01, 4.075e-02, 8.918e-03, 7.481e-04, -2.648e-02, 3.414e-02, 2.520e-02, -1.501e-03, 1.027e-02, 4.993e-03, 5.009e-02, 5.269e-02, -2.136e-02, 3.562e-03) * s1[y+0][x+0];
	r += M4(-8.464e-02, 2.551e-01, 3.496e-03, 8.999e-02, 5.388e-03, 1.372e-01, -4.300e-02, -7.305e-02, -7.603e-02, 5.530e-02, -1.781e-02, 4.306e-03, -5.816e-04, 6.148e-02, 2.192e-02, -1.300e-02) * s1[y+0][x+1];
	r += M4(5.695e-02, -2.982e-05, 3.637e-03, -1.840e-02, 1.289e-02, -9.200e-02, 1.952e-03, -2.399e-02, 3.672e-02, -4.254e-02, -2.967e-03, -2.533e-02, -2.863e-02, 2.837e-03, 1.037e-02, -2.787e-02) * s1[y+0][x+2];
	r += M4(4.122e-02, -4.608e-02, -3.271e-01, 3.506e-01, 8.315e-02, -1.169e-01, 4.773e-02, -1.388e-01, 3.627e-01, -1.591e-01, 9.073e-02, -1.400e-01, -2.016e-02, 6.361e-02, 3.331e-02, 7.302e-02) * s1[y+1][x+0];
	r += M4(-3.018e-01, 1.234e-01, -1.828e-01, 1.835e-01, 1.383e-01, 2.665e-01, -1.167e-01, 1.977e-01, -1.135e-01, 6.621e-01, -2.968e-01, 1.897e-01, -2.551e-01, 1.314e-02, -2.960e-01, 2.032e-02) * s1[y+1][x+1];
	r += M4(1.611e-02, 3.725e-02, 4.292e-02, 5.100e-02, -2.959e-02, 8.169e-02, -2.103e-03, -7.209e-02, 6.009e-02, -5.900e-02, 6.457e-02, -6.556e-02, -1.658e-02, -1.092e-01, -7.405e-02, 9.217e-03) * s1[y+1][x+2];
	r += M4(5.974e-03, 1.991e-02, 8.261e-02, -1.493e-01, -9.344e-02, -1.700e-01, 5.381e-02, -9.567e-02, 3.460e-02, 1.441e-02, 2.628e-01, -9.985e-03, -1.211e-02, 3.027e-02, -1.054e-02, 8.289e-02) * s1[y+2][x+0];
	r += M4(-5.248e-02, -1.957e-02, -1.235e-01, 1.941e-01, -1.106e-01, 1.097e-02, -4.112e-02, 7.778e-02, -8.472e-02, -5.934e-02, -2.826e-02, 3.585e-01, 4.030e-03, 5.118e-03, 4.765e-03, 5.910e-02) * s1[y+2][x+1];
	r += M4(7.407e-03, -3.490e-02, -2.620e-03, -5.468e-02, 2.847e-02, -4.546e-02, 7.067e-03, 4.094e-02, 1.432e-02, 3.993e-03, -1.688e-03, -6.639e-02, 1.543e-02, 5.412e-03, 4.696e-02, -1.528e-02) * s1[y+2][x+2];
	r += M4(-9.723e-03, 2.484e-02, 1.649e-02, 4.947e-02, -1.470e-01, 8.615e-03, 2.952e-02, 4.167e-02, -7.540e-02, -6.619e-03, -1.200e-02, 1.025e-01, -1.784e-01, 4.815e-02, -3.937e-02, -2.225e-02) * s2[y+0][x+0];
	r += M4(-4.414e-02, 5.056e-02, 6.809e-02, 2.765e-02, -1.118e-01, -2.409e-01, 1.519e-01, 9.105e-02, 2.169e-01, 7.154e-02, -1.423e-01, -1.793e-01, -9.141e-02, -5.615e-03, 3.655e-02, -1.916e-02) * s2[y+0][x+1];
	r += M4(7.920e-02, -2.926e-02, 1.232e-03, -2.124e-02, 3.823e-03, -3.602e-02, 1.992e-02, 5.571e-02, -2.140e-02, 8.634e-02, -1.452e-02, -7.033e-02, 1.024e-02, -4.833e-02, -1.677e-02, 1.621e-02) * s2[y+0][x+2];
	r += M4(4.870e-02, -7.578e-02, -3.901e-02, -9.551e-02, 1.015e-01, 1.612e-02, -1.724e-01, 1.007e-02, 8.647e-02, -1.150e-01, 5.943e-02, -9.788e-02, -4.465e-01, 1.433e-01, -2.208e-01, 2.519e-01) * s2[y+1][x+0];
	r += M4(-2.485e-01, -7.528e-02, -3.723e-01, -8.427e-02, 1.973e-01, 1.913e-01, -2.183e-01, -4.072e-01, -9.438e-01, -3.845e-01, 9.443e-01, 4.816e-01, 1.287e-01, 2.061e-01, -3.905e-01, 1.274e-01) * s2[y+1][x+1];
	r += M4(3.258e-02, 3.892e-02, -9.680e-03, -1.278e-01, 3.427e-02, 6.519e-02, 8.580e-03, -4.823e-02, -1.423e-01, -3.748e-01, -7.429e-03, 7.168e-01, 7.697e-02, -2.618e-01, 1.473e-01, -2.519e-01) * s2[y+1][x+2];
	r += M4(2.571e-02, 1.212e-02, 6.879e-02, -2.217e-02, -6.730e-02, -7.153e-02, -2.337e-02, -5.116e-02, 7.000e-02, -1.608e-02, 1.869e-01, -7.100e-02, -4.311e-02, -2.109e-02, -2.125e-01, 1.218e-01) * s2[y+2][x+0];
	r += M4(1.778e-02, 3.769e-02, -6.763e-02, 5.403e-02, -4.771e-02, -6.734e-02, 4.681e-02, -3.996e-04, 1.496e-01, 1.296e-01, -1.336e-01, 2.157e-01, -4.579e-02, 3.846e-02, 3.025e-01, 5.253e-02) * s2[y+2][x+1];
	r += M4(-1.520e-02, -4.114e-02, 3.119e-02, -3.415e-02, -1.655e-02, -2.192e-02, 3.661e-02, 6.811e-02, 4.370e-03, 1.314e-01, -5.218e-02, -1.115e-01, 9.030e-03, 2.236e-02, -3.339e-02, 1.537e-02) * s2[y+2][x+2];
	r += M4(6.909e-03, 2.018e-02, 4.781e-02, 2.791e-02, -9.352e-02, 3.057e-03, 1.655e-02, 6.469e-02, -5.173e-02, 2.412e-02, 3.235e-02, 6.763e-02, -1.081e-01, 5.530e-02, -1.585e-02, -5.203e-02) * s3[y+0][x+0];
	r += M4(-1.665e-01, -1.048e-01, 5.140e-02, 5.700e-02, -1.668e-02, 6.492e-02, 3.440e-02, 2.080e-02, 8.075e-02, -7.116e-03, 4.814e-02, -1.637e-02, 1.163e-01, -2.007e-01, 1.982e-02, -3.742e-02) * s3[y+0][x+1];
	r += M4(3.590e-02, -6.743e-02, 9.796e-03, -3.184e-03, 9.072e-02, -7.984e-02, 4.321e-02, 2.236e-02, -2.094e-02, 2.278e-02, 1.566e-02, 4.178e-02, -3.210e-02, -1.117e-02, 1.958e-02, -2.588e-04) * s3[y+0][x+2];
	r += M4(2.680e-02, -4.095e-02, -1.235e-01, -7.358e-02, 1.470e-01, -3.616e-02, -2.988e-04, -6.237e-02, 1.800e-01, -1.616e-02, -4.407e-02, -9.790e-02, -3.940e-01, 2.407e-01, -3.112e-01, 3.240e-01) * s3[y+1][x+0];
	r += M4(-2.294e-01, -1.483e-01, -4.015e-01, -3.389e-01, -4.870e-01, 1.404e-01, -4.032e-01, 2.502e-01, -4.499e-02, 5.067e-02, -1.108e-01, -9.321e-02, 4.194e-01, -1.355e-01, 1.521e-01, -4.267e-01) * s3[y+1][x+1];
	r += M4(6.263e-02, 7.007e-02, 2.242e-02, -6.193e-02, 1.516e-01, 1.407e-01, 7.695e-02, -3.916e-01, -4.105e-02, 1.155e-01, -3.959e-02, 4.205e-02, -1.885e-02, -3.458e-02, -4.052e-02, -4.236e-02) * s3[y+1][x+2];
	r += M4(2.678e-02, 1.092e-02, 8.040e-02, -1.093e-02, -3.775e-02, -4.756e-02, -4.458e-02, -9.886e-02, 3.413e-02, -1.575e-02, 6.617e-02, -5.228e-02, -7.450e-02, -4.142e-02, -8.887e-02, 1.415e-01) * s3[y+2][x+0];
	r += M4(-1.437e-02, 1.896e-02, -4.448e-02, 8.896e-02, 9.476e-02, 6.715e-03, -7.252e-02, -2.039e-01, 1.478e-03, 5.760e-02, -2.284e-02, 9.809e-02, 2.116e-02, -3.145e-02, 2.750e-01, -2.750e-02) * s3[y+2][x+1];
	r += M4(-2.129e-02, -4.855e-02, 2.948e-02, -1.304e-02, -1.233e-01, -1.555e-02, -3.335e-02, 2.761e-01, -3.309e-02, -4.626e-02, -4.054e-02, -6.945e-04, 1.301e-03, -1.732e-03, 1.670e-03, 2.021e-02) * s3[y+2][x+2];
	r += V4(2.245e-03, 1.808e-03, -4.879e-04, -6.142e-04);
	return tanh(vec4(r));
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(1, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv4_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
			s2[ay][ax] = l1(x - 1, y - 1);
			s1[ay][ax] = -max(-s0[ay][ax], V4(0.0));
			s0[ay][ax] = max(s0[ay][ax], V4(0.0));
			s3[ay][ax] = -max(-s2[ay][ax], V4(0.0));
			s2[ay][ax] = max(s2[ay][ax], V4(0.0));
		}
	}
	barrier();
	vec4 r0 = f0(xy.x, xy.y);
	imageStore(out_image, opos + ivec2(0, 0), r0);
}

//!DESC CuNNy-4x8C-RCAS-shuffle
//!HOOK LUMA
//!BIND out
//!BIND rcas
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 1
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
vec4 hook() {
	vec4 r = vec4(0.0);
	vec2 f = fract(out_pos * out_size);
	ivec2 i = ivec2(f * vec2(2.0));
	r.r = out_tex((vec2(0.5) - f) * out_pt + out_pos)[2*i.y + i.x];
	r.r += rcas_tex(rcas_pos).r;
	r.a = 1.0;
	return clamp(r, 0.0, 1.0);
}
