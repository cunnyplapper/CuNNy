// CuNNy 4x8C RCAS
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */

// FSR mpv | modified
// Copyright (c) 2021 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// FidelityFX FSR v1.0.2 by AMD
// ported to mpv by agyild

//!DESC CuNNy-EASU
//!HOOK LUMA
//!BIND LUMA
//!SAVE easu
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
//!COMPONENTS 1

float APrxLoRcpF1(float a) {
	return uintBitsToFloat(uint(0x7ef07ebb) - floatBitsToUint(a));
}

float APrxLoRsqF1(float a) {
	return uintBitsToFloat(uint(0x5f347d74) - (floatBitsToUint(a) >> uint(1)));
}

float AMin3F1(float x, float y, float z) {
	return min(x, min(y, z));
}

float AMax3F1(float x, float y, float z) {
	return max(x, max(y, z));
}

void tap(inout float aC, inout float aW, vec2 off, vec2 dir, vec2 len,
         float lob, float clp, float c){
	vec2 v;
	v.x = (off.x * ( dir.x)) + (off.y * dir.y);
	v.y = (off.x * (-dir.y)) + (off.y * dir.x);
	v *= len;
	float d2 = v.x * v.x + v.y * v.y;
	d2 = min(d2, clp);
	float wB = float(2.0 / 5.0) * d2 + -1.0;
	float wA = lob * d2 + -1.0;
	wB *= wB;
	wA *= wA;
	wB = float(25.0 / 16.0) * wB + float(-(25.0 / 16.0 - 1.0));
	float w = wB * wA;
	aC += c * w;
	aW += w;
}

void set(inout vec2 dir, inout float len, vec2 pp, bool biS, bool biT,
         bool biU, bool biV, float lA, float lB, float lC, float lD, float lE){
	float w = 0.0;
	if (biS)
		w = (1.0 - pp.x) * (1.0 - pp.y);
	if (biT)
		w =        pp.x  * (1.0 - pp.y);
	if (biU)
		w = (1.0 - pp.x) *        pp.y;
	if (biV)
		w =        pp.x  *        pp.y;
	float dc = lD - lC;
	float cb = lC - lB;
	float lenX = max(abs(dc), abs(cb));
	lenX = APrxLoRcpF1(lenX);
	float dirX = lD - lB;
	lenX = clamp(abs(dirX) * lenX, 0.0, 1.0);
	lenX *= lenX;
	float ec = lE - lC;
	float ca = lC - lA;
	float lenY = max(abs(ec), abs(ca));
	lenY = APrxLoRcpF1(lenY);
	float dirY = lE - lA;
	lenY = clamp(abs(dirY) * lenY, 0.0, 1.0);
	lenY *= lenY;
	dir += vec2(dirX, dirY) * w;
	len += dot(vec2(w), vec2(lenX, lenY));
}

vec4 hook() {
	vec4 pix = vec4(0.0, 0.0, 0.0, 1.0);
	vec2 pp = LUMA_pos * LUMA_size - vec2(0.5);
	vec2 fp = floor(pp);
	pp -= fp;
#if (defined(LUMA_gather) && (__VERSION__ >= 400 || (GL_ES && __VERSION__ >= 310)))
	vec4 bczzL = LUMA_gather(vec2((fp + vec2(1.0, -1.0)) * LUMA_pt), 0);
	vec4 ijfeL = LUMA_gather(vec2((fp + vec2(0.0,  1.0)) * LUMA_pt), 0);
	vec4 klhgL = LUMA_gather(vec2((fp + vec2(2.0,  1.0)) * LUMA_pt), 0);
	vec4 zzonL = LUMA_gather(vec2((fp + vec2(1.0,  3.0)) * LUMA_pt), 0);
#else
	float b = LUMA_tex(vec2((fp + vec2(0.5, -0.5)) * LUMA_pt)).r;
	float c = LUMA_tex(vec2((fp + vec2(1.5, -0.5)) * LUMA_pt)).r;
	float e = LUMA_tex(vec2((fp + vec2(-0.5, 0.5)) * LUMA_pt)).r;
	float f = LUMA_tex(vec2((fp + vec2( 0.5, 0.5)) * LUMA_pt)).r;
	float g = LUMA_tex(vec2((fp + vec2( 1.5, 0.5)) * LUMA_pt)).r;
	float h = LUMA_tex(vec2((fp + vec2( 2.5, 0.5)) * LUMA_pt)).r;
	float i = LUMA_tex(vec2((fp + vec2(-0.5, 1.5)) * LUMA_pt)).r;
	float j = LUMA_tex(vec2((fp + vec2( 0.5, 1.5)) * LUMA_pt)).r;
	float k = LUMA_tex(vec2((fp + vec2( 1.5, 1.5)) * LUMA_pt)).r;
	float l = LUMA_tex(vec2((fp + vec2( 2.5, 1.5)) * LUMA_pt)).r;
	float n = LUMA_tex(vec2((fp + vec2(0.5, 2.5) ) * LUMA_pt)).r;
	float o = LUMA_tex(vec2((fp + vec2(1.5, 2.5) ) * LUMA_pt)).r;
	vec4 bczzL = vec4(b, c, 0.0, 0.0);
	vec4 ijfeL = vec4(i, j, f, e);
	vec4 klhgL = vec4(k, l, h, g);
	vec4 zzonL = vec4(0.0, 0.0, o, n);
#endif
	float bL = bczzL.x;
	float cL = bczzL.y;
	float iL = ijfeL.x;
	float jL = ijfeL.y;
	float fL = ijfeL.z;
	float eL = ijfeL.w;
	float kL = klhgL.x;
	float lL = klhgL.y;
	float hL = klhgL.z;
	float gL = klhgL.w;
	float oL = zzonL.z;
	float nL = zzonL.w;
	vec2 dir = vec2(0.0);
	float len = 0.0;
	set(dir, len, pp, true, false, false, false, bL, eL, fL, gL, jL);
	set(dir, len, pp, false, true, false, false, cL, fL, gL, hL, kL);
	set(dir, len, pp, false, false, true, false, fL, iL, jL, kL, nL);
	set(dir, len, pp, false, false, false, true, gL, jL, kL, lL, oL);
	vec2 dir2 = dir * dir;
	float dirR = dir2.x + dir2.y;
	bool zro = dirR < float(1.0 / 32768.0);
	dirR = APrxLoRsqF1(dirR);
	dirR = zro ? 1.0 : dirR;
	dir.x = zro ? 1.0 : dir.x;
	dir *= vec2(dirR);
	len = len * 0.5;
	len *= len;
	float stretch = (dir.x * dir.x + dir.y * dir.y) * APrxLoRcpF1(max(abs(dir.x), abs(dir.y)));
	vec2 len2 = vec2(1.0 + (stretch - 1.0) * len, 1.0 + -0.5 * len);
	float lob = 0.5 + float((1.0 / 4.0 - 0.04) - 0.5) * len;
	float clp = APrxLoRcpF1(lob);
	float aC = 0.0;
	float aW = 0.0;
	tap(aC, aW, vec2( 0.0,-1.0) - pp, dir, len2, lob, clp, bL);
	tap(aC, aW, vec2( 1.0,-1.0) - pp, dir, len2, lob, clp, cL);
	tap(aC, aW, vec2(-1.0, 1.0) - pp, dir, len2, lob, clp, iL);
	tap(aC, aW, vec2( 0.0, 1.0) - pp, dir, len2, lob, clp, jL);
	tap(aC, aW, vec2( 0.0, 0.0) - pp, dir, len2, lob, clp, fL);
	tap(aC, aW, vec2(-1.0, 0.0) - pp, dir, len2, lob, clp, eL);
	tap(aC, aW, vec2( 1.0, 1.0) - pp, dir, len2, lob, clp, kL);
	tap(aC, aW, vec2( 2.0, 1.0) - pp, dir, len2, lob, clp, lL);
	tap(aC, aW, vec2( 2.0, 0.0) - pp, dir, len2, lob, clp, hL);
	tap(aC, aW, vec2( 1.0, 0.0) - pp, dir, len2, lob, clp, gL);
	tap(aC, aW, vec2( 1.0, 2.0) - pp, dir, len2, lob, clp, oL);
	tap(aC, aW, vec2( 0.0, 2.0) - pp, dir, len2, lob, clp, nL);
	pix.r = aC / aW;
	float min1 = min(AMin3F1(fL, gL, jL), kL);
	float max1 = max(AMax3F1(fL, gL, jL), kL);
	pix.r = clamp(pix.r, min1, max1);
	pix.r = clamp(pix.r, 0.0, 1.0);
	return pix;
}

//!DESC CuNNy-RCAS
//!HOOK LUMA
//!BIND easu
//!SAVE rcas
//!WIDTH easu.w
//!HEIGHT easu.h
//!COMPONENTS 1

// CuNNy: do not change unless changed during training as well
#define SHARPNESS 2.0
#define FSR_RCAS_LIMIT (0.25 - (1.0 / 16.0))

float APrxMedRcpF1(float a) {
	float b = uintBitsToFloat(uint(0x7ef19fff) - floatBitsToUint(a));
	return b * (-b * a + 2.0);
}

float AMax3F1(float x, float y, float z) {
	return max(x, max(y, z)); 
}


float AMin3F1(float x, float y, float z) {
	return min(x, min(y, z));
}

vec4 hook() {
#if (defined(easu_gather) && (__VERSION__ >= 400 || (GL_ES && __VERSION__ >= 310)))
	vec3 bde = easu_gather(easu_pos + easu_pt * vec2(-0.5), 0).xyz;
	float b = bde.z;
	float d = bde.x;
	float e = bde.y;
	vec2 fh = easu_gather(easu_pos + easu_pt * vec2(0.5), 0).zx;
	float f = fh.x;
	float h = fh.y;
#else
	float b = easu_texOff(vec2( 0.0, -1.0)).r;
	float d = easu_texOff(vec2(-1.0,  0.0)).r;
	float e = easu_tex(easu_pos).r;
	float f = easu_texOff(vec2(1.0, 0.0)).r;
	float h = easu_texOff(vec2(0.0, 1.0)).r;
#endif
	float mn1L = min(AMin3F1(b, d, f), h);
	float mx1L = max(AMax3F1(b, d, f), h);
	vec2 peakC = vec2(1.0, -1.0 * 4.0);
	float hitMinL = min(mn1L, e) / (4.0 * mx1L);
	float hitMaxL = (peakC.x - max(mx1L, e)) / (4.0 * mn1L + peakC.y);
	float lobeL = max(-hitMinL, hitMaxL);
	float lobe = max(float(-FSR_RCAS_LIMIT), min(lobeL, 0.0)) * exp2(-clamp(float(SHARPNESS), 0.0, 2.0));
	float nz = 0.25 * b + 0.25 * d + 0.25 * f + 0.25 * h - e;
	nz = clamp(abs(nz) * APrxMedRcpF1(AMax3F1(AMax3F1(b, d, e), f, h) - AMin3F1(AMin3F1(b, d, e), f, h)), 0.0, 1.0);
	nz = -0.5 * nz + 1.0;
	lobe *= nz;
	float rcpL = APrxMedRcpF1(4.0 * lobe + 1.0);
	vec4 pix = vec4(0.0, 0.0, 0.0, 1.0);
	pix.r = float((lobe * b + lobe * d + lobe * h + lobe * f + e) * rcpL);
	return pix;
}


//!DESC CuNNy-4x8C-RCAS-in
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND LUMA
//!SAVE in
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
	#define V4 f16vec4
	#define M4 f16mat4
	#define F float16_t
#else
	#define V4 vec4
	#define M4 mat4
	#define F float
#endif
#define l0(x, y) F(texelFetch(LUMA_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(1, 1) + ivec2(0, 0), 0).r)
shared F s0[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += V4(3.445e-03, 3.545e-02, -1.015e-01, -1.134e-01) * s0[y+0][x+0];
	r += V4(1.065e-02, 3.169e-03, -1.081e-01, 1.791e-01) * s0[y+0][x+1];
	r += V4(-3.647e-04, -1.627e-02, 2.285e-01, -1.581e-02) * s0[y+0][x+2];
	r += V4(1.103e-02, -9.692e-02, 2.161e-01, -4.391e-02) * s0[y+1][x+0];
	r += V4(-4.500e-01, -5.557e-03, -3.414e-01, 2.725e-01) * s0[y+1][x+1];
	r += V4(3.870e-02, 4.802e-02, -1.531e-01, 1.714e-01) * s0[y+1][x+2];
	r += V4(-1.095e-03, -3.447e-01, 1.772e-01, -8.944e-02) * s0[y+2][x+0];
	r += V4(2.528e-02, 4.022e-01, 1.018e-01, -1.993e-01) * s0[y+2][x+1];
	r += V4(-5.341e-03, -2.794e-02, -2.807e-02, -1.216e-01) * s0[y+2][x+2];
	r += V4(4.828e-03, -1.055e-03, 2.182e-03, -5.119e-02);
	return vec4(r);
}
vec4 f1(int x, int y) {
	V4 r = V4(0.0);
	r += V4(2.429e-02, 8.447e-02, 4.303e-03, -8.967e-02) * s0[y+0][x+0];
	r += V4(-3.525e-01, -2.706e-01, -5.091e-01, -4.982e-02) * s0[y+0][x+1];
	r += V4(5.413e-02, -1.792e-01, 1.370e-01, 5.583e-02) * s0[y+0][x+2];
	r += V4(1.692e-01, -1.145e-01, 3.920e-02, 8.906e-02) * s0[y+1][x+0];
	r += V4(3.954e-02, 2.334e-01, 2.104e-01, 9.265e-02) * s0[y+1][x+1];
	r += V4(2.662e-01, 2.401e-01, -1.587e-01, 4.587e-02) * s0[y+1][x+2];
	r += V4(-2.536e-02, 4.602e-02, -4.290e-02, 1.067e-01) * s0[y+2][x+0];
	r += V4(-1.172e-01, -3.146e-02, 2.993e-01, 1.068e-01) * s0[y+2][x+1];
	r += V4(-6.018e-02, -1.910e-02, 2.214e-02, 1.298e-01) * s0[y+2][x+2];
	r += V4(3.138e-03, 2.585e-03, -1.369e-03, -2.489e-01);
	return vec4(r);
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = LUMA_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
		}
	}
	barrier();
	memoryBarrierShared();
	imageStore(out_image, opos + ivec2(0, 0), f0(xy.x, xy.y));
	imageStore(out_image, opos + ivec2(1, 0), f1(xy.x, xy.y));
}


//!DESC CuNNy-4x8C-RCAS-conv1
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND in
//!BIND LUMA
//!SAVE conv1
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
	#define V4 f16vec4
	#define M4 f16mat4
	#define F float16_t
#else
	#define V4 vec4
	#define M4 mat4
	#define F float
#endif
#define l0(x, y) V4(texelFetch(in_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(in_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 s0[10][10];
shared V4 s1[10][10];
shared V4 s2[10][10];
shared V4 s3[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-1.516e+00, 6.901e-01, -1.768e-01, -4.147e-01, 8.023e-03, 1.740e-01, 2.144e-02, -5.041e-02, 5.166e-02, -1.170e-01, 3.625e-02, 6.383e-03, -5.279e-02, -2.880e-01, -2.214e-02, 3.071e-02) * s0[y+0][x+0];
	r += M4(-2.304e-01, 1.058e-01, -3.842e-01, 1.115e+00, 3.664e-01, 8.039e-02, 1.221e-01, -2.852e-02, 1.589e-01, -3.183e-01, -1.068e-01, 5.304e-03, -9.915e-02, 2.406e-02, 1.192e-01, -2.695e-02) * s0[y+0][x+1];
	r += M4(1.115e+00, -1.461e-02, 9.191e-02, 5.555e-01, -4.352e-01, 3.761e-01, -4.052e-01, 6.693e-01, 1.273e-01, 5.199e-02, -7.821e-02, -8.958e-02, 2.161e-02, -1.841e-01, -8.644e-02, -2.302e-01) * s0[y+0][x+2];
	r += M4(-1.994e+00, 4.918e-01, 8.941e-01, 3.963e-01, -1.947e-01, 1.439e-01, 1.246e-01, -7.486e-02, 4.630e-02, -1.703e-01, 1.086e-02, 1.268e-01, 8.199e-02, 1.669e-01, 1.019e-01, 1.131e-01) * s0[y+1][x+0];
	r += M4(-3.051e+00, -2.634e+00, -3.008e+00, 4.801e+00, 5.688e-02, 2.040e-01, -3.810e-02, -2.814e-02, -2.153e-01, -3.576e-01, 9.103e-02, -1.008e-01, -6.811e-02, -6.092e-03, 7.522e-02, 1.230e-02) * s0[y+1][x+1];
	r += M4(3.665e-01, -1.123e+00, -8.069e-02, 2.457e+00, 5.153e-01, 1.918e-01, -9.499e-02, -1.880e-01, 1.442e-01, -1.942e-01, 1.719e-01, 2.748e-01, -1.418e-01, -2.770e-01, -7.745e-02, -6.362e-02) * s0[y+1][x+2];
	r += M4(2.012e-01, -6.145e-01, -1.200e-01, 2.036e-01, -8.183e-02, 4.378e-02, -5.777e-02, -7.402e-02, -1.013e-01, -1.363e-01, -2.925e-01, -3.172e-02, 8.622e-02, -2.300e-02, -1.068e-01, 2.765e-02) * s0[y+2][x+0];
	r += M4(-6.801e-01, 6.097e-01, 8.747e-01, 2.303e+00, -1.948e-02, -6.823e-02, 5.307e-02, -4.095e-03, 3.873e-02, -1.388e-01, 3.490e-02, -1.289e-01, -2.866e-01, -1.435e-01, -8.561e-03, 7.522e-02) * s0[y+2][x+1];
	r += M4(-2.127e+00, 9.365e-01, 1.254e+00, 4.652e-01, -3.939e-02, -1.335e-01, -2.013e-01, -2.073e-01, 1.421e-01, -1.760e-01, -6.875e-03, 1.192e-01, 5.371e-02, -2.619e-01, -1.563e-02, -1.358e-01) * s0[y+2][x+2];
	r += M4(-1.183e-01, 5.138e-02, -5.529e-02, -9.560e-02, 2.423e-01, 8.364e-02, 1.758e-02, -1.900e-02, 3.339e-02, 1.638e-01, 6.092e-02, 3.414e-02, -2.854e-02, -2.137e-01, -1.526e-01, 6.233e-02) * s1[y+0][x+0];
	r += M4(-3.904e-02, -1.460e-01, -1.567e-01, -1.475e-01, -4.003e-02, -3.310e-01, 2.055e-01, 4.040e-02, 1.324e-01, 1.480e-01, 7.826e-02, -3.085e-02, -2.388e-01, 2.500e-01, -1.970e-02, 3.972e-02) * s1[y+0][x+1];
	r += M4(1.612e-01, -7.232e-02, 7.004e-02, 1.525e-01, -1.061e-01, -5.847e-01, -8.872e-01, -1.837e-01, -4.738e-02, 2.319e-01, 6.445e-02, 1.427e-02, -7.322e-02, 7.100e-03, -2.305e-01, -1.061e-01) * s1[y+0][x+2];
	r += M4(-6.170e-02, -1.022e-01, -4.586e-02, -9.326e-02, -1.698e-02, -1.069e-01, -3.374e-02, 1.576e-02, -1.729e-01, 2.012e-01, 9.494e-02, 5.994e-02, 9.411e-02, 6.179e-04, 1.189e-01, 4.793e-02) * s1[y+1][x+0];
	r += M4(-6.838e-02, -1.458e-01, -1.357e-01, -1.520e-01, -4.305e-02, -2.370e-01, -1.146e-01, -4.369e-02, -2.171e-01, 1.052e-01, -1.194e-01, -4.410e-03, 2.839e-01, 2.634e-01, 1.881e-01, -1.831e-01) * s1[y+1][x+1];
	r += M4(2.885e-01, 2.114e-01, 1.085e-01, 1.537e-01, 3.516e-01, 1.994e-01, -1.112e-01, 1.497e-02, 1.093e-01, 1.801e-01, 3.394e-01, 2.601e-01, -3.569e-02, -1.286e-01, -2.604e-01, 2.306e-02) * s1[y+1][x+2];
	r += M4(5.908e-03, -9.795e-02, -1.554e-02, -8.011e-02, -3.138e-02, 1.205e-01, -1.460e-01, -7.075e-02, -8.488e-02, 1.005e-01, -1.446e-01, -1.272e-01, -2.220e-01, -4.776e-02, -9.056e-02, 3.097e-02) * s1[y+2][x+0];
	r += M4(7.248e-02, 1.118e-01, 3.557e-03, -2.901e-02, -2.579e-03, -4.263e-04, 2.169e-02, 2.046e-02, 2.549e-01, 1.437e-01, 7.769e-02, -9.179e-02, 3.011e-02, -2.554e-02, -1.744e-01, -9.895e-02) * s1[y+2][x+1];
	r += M4(-3.966e-02, 6.295e-02, 4.027e-03, 4.339e-02, 1.854e-02, -1.074e-01, -1.499e-01, -1.472e-01, 1.833e-01, 2.358e-02, -8.022e-02, 4.239e-02, 3.208e-02, -2.194e-01, 6.808e-02, 1.754e-02) * s1[y+2][x+2];
	r += M4(-9.968e-03, -8.823e-02, -8.787e-02, -7.073e-02, -8.868e-02, -6.053e-03, 2.128e-02, 5.340e-03, 4.136e-02, -2.897e-02, 4.289e-02, 8.669e-02, 6.121e-02, -6.096e-03, -2.825e-02, -6.029e-02) * s2[y+0][x+0];
	r += M4(-9.058e-02, 6.794e-02, -5.014e-02, 1.218e-01, -3.459e-02, 1.257e-01, 5.934e-02, -1.890e-01, 1.100e-02, 1.034e-02, -5.134e-02, -2.181e-02, -3.060e-02, 3.958e-02, 1.984e-02, -1.773e-02) * s2[y+0][x+1];
	r += M4(2.011e-02, -3.002e-02, -2.067e-01, -7.001e-02, 2.805e-02, 8.940e-02, 1.520e-01, 2.982e-02, 6.281e-02, -1.594e-01, -2.188e-02, 9.036e-02, -3.145e-02, -3.337e-03, 7.724e-02, 5.594e-02) * s2[y+0][x+2];
	r += M4(-1.240e-01, 2.390e-02, 6.219e-02, 8.676e-02, -1.368e-01, 5.116e-02, 2.378e-01, 2.950e-02, -7.004e-02, -3.708e-02, -2.782e-01, 1.602e-02, 2.793e-02, 2.070e-02, 1.216e-01, -1.341e-01) * s2[y+1][x+0];
	r += M4(1.926e-01, 9.668e-02, -2.756e-01, -2.534e-01, -5.263e-02, 1.746e-01, 2.727e-01, -3.736e-02, 4.775e-01, 2.993e-01, 3.448e-01, -1.256e-02, 1.038e-01, -4.980e-02, -5.536e-02, -6.584e-02) * s2[y+1][x+1];
	r += M4(-8.961e-02, 5.337e-02, 2.387e-01, -7.016e-02, -1.235e-01, -2.077e-01, -1.118e-01, 1.975e-01, -3.061e-02, -1.150e-01, -2.476e-01, 8.028e-02, 5.667e-02, -2.228e-02, -1.793e-01, 3.347e-02) * s2[y+1][x+2];
	r += M4(-1.425e-01, 2.466e-01, 6.786e-02, -1.136e-01, -3.116e-01, 1.201e-01, 1.274e-01, -3.272e-01, -1.282e-01, -1.455e-01, 9.721e-02, 4.864e-02, -1.036e-01, -2.178e-02, 2.224e-02, 4.477e-02) * s2[y+2][x+0];
	r += M4(-1.082e-01, 1.847e-01, -1.584e-01, -4.058e-02, -3.116e-01, -2.782e-01, -4.331e-02, 4.816e-03, -1.039e-01, -9.715e-02, -4.365e-01, -2.843e-01, 8.779e-02, 7.884e-02, -1.173e-02, -7.418e-03) * s2[y+2][x+1];
	r += M4(1.392e-02, 1.836e-01, 2.204e-01, 1.698e-01, -2.999e-02, 1.220e-01, 2.112e-01, 1.263e-01, -2.346e-02, -6.782e-02, 3.670e-01, 1.861e-01, -5.691e-03, -1.212e-01, -7.490e-02, -2.092e-02) * s2[y+2][x+2];
	r += M4(6.493e-02, -1.578e-01, -2.291e-02, -1.651e-02, -1.166e-01, 1.475e-01, -7.536e-02, -2.445e-03, 1.398e-01, -2.038e-02, 7.288e-02, 4.240e-02, 2.222e-02, 3.743e-02, -3.106e-02, -1.377e-02) * s3[y+0][x+0];
	r += M4(-1.046e-01, -1.005e-01, -5.163e-02, 1.139e-01, -2.606e-02, 1.582e-01, -5.051e-02, 5.797e-03, -8.424e-02, 3.179e-03, 4.298e-02, 5.218e-03, 1.095e-01, 1.703e-02, 3.916e-02, 1.425e-02) * s3[y+0][x+1];
	r += M4(-4.803e-02, -5.602e-02, -1.784e-01, -1.797e-01, 7.693e-02, 3.770e-02, 7.206e-02, 3.580e-02, -2.397e-02, -1.285e-01, 1.776e-03, 3.138e-02, -1.176e-01, 3.692e-02, 6.372e-02, 2.384e-02) * s3[y+0][x+2];
	r += M4(-3.157e-02, 3.391e-02, 1.632e-01, -2.095e-02, 9.690e-02, -2.118e-01, -8.044e-02, -2.721e-02, 6.900e-02, 5.067e-02, -3.394e-01, 1.735e-01, 8.855e-02, -4.646e-02, 1.770e-01, -8.052e-02) * s3[y+1][x+0];
	r += M4(-8.573e-02, -4.309e-01, 4.665e-03, 1.204e-01, 5.677e-02, -1.573e-01, 1.811e-01, -1.441e-01, 1.963e-03, 4.878e-02, 3.331e-01, -2.588e-03, 1.296e-01, -5.544e-02, -1.120e-01, -9.587e-02) * s3[y+1][x+1];
	r += M4(-7.255e-02, 8.501e-02, 2.746e-01, -3.479e-02, -2.192e-01, -1.908e-01, -4.232e-01, -2.102e-01, -2.305e-01, -1.629e-01, -6.283e-02, -2.435e-01, 9.906e-02, 9.767e-03, -2.352e-01, -4.335e-02) * s3[y+1][x+2];
	r += M4(-9.393e-02, -2.025e-04, -5.798e-02, -1.008e-03, 8.007e-02, -1.636e-01, -1.045e-01, 2.344e-01, -9.671e-02, -7.338e-02, 3.594e-02, 1.079e-01, -1.680e-01, 3.798e-02, -1.808e-03, -3.330e-03) * s3[y+2][x+0];
	r += M4(-1.900e-01, -1.230e-01, 5.183e-02, -1.234e-01, -1.822e-01, -3.104e-02, 2.411e-02, 3.281e-02, -2.832e-01, -1.929e-01, -2.380e-01, -8.287e-02, 3.628e-03, 1.121e-01, 2.044e-02, 2.688e-02) * s3[y+2][x+1];
	r += M4(4.327e-02, 9.514e-02, 9.000e-02, 9.469e-02, 3.263e-02, 4.204e-02, 5.236e-02, 2.123e-01, -8.699e-02, 5.734e-02, 3.154e-01, 1.099e-01, -1.280e-02, -2.154e-01, -5.137e-02, 3.627e-02) * s3[y+2][x+2];
	r += V4(2.604e-02, -4.356e-02, -4.870e-02, -6.067e-02);
	return vec4(r);
}
vec4 f1(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-1.787e-01, -2.908e-02, 5.368e-02, 5.223e-01, -6.434e-02, -5.155e-02, -1.497e-01, -8.281e-03, -1.804e-01, 2.015e-02, 5.205e-02, -2.043e-02, 5.952e-03, 4.510e-02, 1.973e-03, -6.813e-02) * s0[y+0][x+0];
	r += M4(8.855e-01, 6.453e-01, 8.195e-01, -5.170e-01, 1.520e-01, -3.268e-02, -3.346e-01, 9.963e-02, 2.739e-01, -8.633e-02, 1.241e-01, -4.959e-02, -5.141e-02, -7.816e-03, 1.113e-01, -8.821e-02) * s0[y+0][x+1];
	r += M4(7.386e-01, -2.447e-01, 6.217e-01, -5.281e-02, 6.255e-01, 5.558e-01, 8.088e-02, -5.566e-02, -2.339e-01, -2.796e-04, -2.372e-02, 9.094e-03, 8.448e-02, -1.222e-01, 3.207e-02, 1.289e-02) * s0[y+0][x+2];
	r += M4(-2.678e-01, -1.397e+00, 5.889e-01, -2.868e-01, -7.985e-02, -5.317e-02, -1.566e-01, 7.273e-02, 5.239e-03, -1.363e-01, 4.946e-03, -1.100e-01, 1.775e-01, 9.085e-03, -1.278e-01, 5.788e-02) * s0[y+1][x+0];
	r += M4(-1.544e-01, 2.511e+00, 2.776e+00, -4.982e+00, -3.661e-01, 2.785e-01, -1.572e-02, 6.203e-02, -1.173e-01, 3.241e-01, 4.926e-02, 3.089e-03, -1.304e-01, 9.526e-03, -3.154e-01, 8.483e-02) * s0[y+1][x+1];
	r += M4(-2.700e-01, -3.624e-01, 2.709e-01, -4.736e-01, 1.919e-01, 1.324e-01, 1.077e-01, 2.003e-01, -1.081e-01, -1.880e-02, 1.932e-02, -3.833e-02, 1.238e-01, 9.661e-02, 4.510e-02, -6.362e-02) * s0[y+1][x+2];
	r += M4(-7.546e-01, -5.749e-01, 9.450e-01, 4.041e-01, 1.247e-03, 6.117e-02, -4.938e-02, 3.366e-03, -5.987e-02, 6.686e-02, 1.638e-02, 6.737e-02, -5.721e-02, -6.385e-02, -7.547e-02, 9.943e-02) * s0[y+2][x+0];
	r += M4(7.953e-01, -1.299e+00, 3.361e+00, -7.340e-01, -5.304e-02, -3.892e-02, 8.298e-02, 1.013e-01, 5.755e-02, -6.243e-01, 5.038e-03, 1.210e-01, 9.929e-02, 7.597e-02, -9.809e-03, 9.441e-02) * s0[y+2][x+1];
	r += M4(-3.880e-01, -9.725e-01, -3.420e-01, -6.568e-03, 3.030e-02, -2.436e-01, -6.092e-03, -3.980e-02, -4.819e-02, 2.401e-02, -3.929e-02, -9.110e-02, -4.417e-03, -6.336e-02, -8.325e-02, -8.575e-02) * s0[y+2][x+2];
	r += M4(7.085e-02, 1.548e-02, 9.258e-02, -1.487e-01, -1.232e-01, 1.070e-01, -1.876e-01, -1.735e-01, -4.412e-02, 8.980e-03, 2.728e-02, 7.540e-03, -3.251e-02, 2.494e-02, 8.846e-02, -1.011e-02) * s1[y+0][x+0];
	r += M4(2.033e-01, 1.540e-01, -1.128e-01, -7.842e-02, 3.690e-02, 1.157e-01, -5.435e-02, 1.491e-01, 1.670e-01, 5.446e-02, 9.964e-03, -3.747e-02, -2.380e-02, -3.034e-01, 5.222e-02, -3.730e-02) * s1[y+0][x+1];
	r += M4(-2.080e-02, 2.289e-01, -5.879e-02, 4.323e-02, 1.163e-01, -1.804e-01, 1.368e-01, -5.972e-02, -1.301e-01, 1.841e-01, -1.160e-01, -1.076e-03, 2.365e-02, 1.767e-02, 7.600e-02, 8.299e-02) * s1[y+0][x+2];
	r += M4(6.655e-03, -4.004e-02, -2.152e-02, -6.284e-02, -1.292e-01, 5.084e-02, -2.568e-01, 9.909e-02, -1.601e-02, -1.470e-01, 2.717e-02, -1.313e-01, 1.375e-01, 1.189e-02, -3.362e-02, 1.497e-01) * s1[y+1][x+0];
	r += M4(-1.743e-01, 8.209e-03, 1.896e-01, -6.730e-02, -6.101e-02, -4.868e-02, 1.626e-01, 1.587e-02, -2.584e-01, 1.866e-01, 6.773e-02, -1.032e-01, 2.997e-01, 5.594e-03, 1.863e-01, 1.272e-01) * s1[y+1][x+1];
	r += M4(-5.195e-02, -8.883e-02, 9.569e-02, -6.039e-02, 3.624e-01, -3.227e-01, 3.424e-01, 1.317e-02, 4.067e-03, -5.358e-02, 6.771e-03, -8.998e-02, 1.647e-01, 3.087e-01, 6.384e-02, -4.638e-02) * s1[y+1][x+2];
	r += M4(3.070e-02, -8.297e-02, 1.309e-01, -2.456e-02, -3.005e-02, 1.500e-02, 6.856e-02, 1.079e-02, -9.672e-04, 8.517e-02, -8.826e-02, 4.031e-02, 1.602e-03, -2.098e-01, 1.448e-01, 7.924e-02) * s1[y+2][x+0];
	r += M4(6.207e-02, -8.780e-02, -8.011e-02, -2.396e-02, 2.751e-02, 8.728e-02, 1.543e-02, 9.490e-02, -1.360e-01, -2.320e-01, -7.943e-02, 1.352e-01, -4.378e-02, 7.405e-02, -3.099e-02, 4.718e-02) * s1[y+2][x+1];
	r += M4(-3.443e-02, -9.077e-02, 9.015e-02, 7.128e-02, 1.289e-01, -2.552e-02, 7.374e-02, -7.754e-02, 1.324e-01, 9.043e-02, -1.408e-01, -4.066e-02, -1.715e-02, 8.994e-02, -1.205e-02, -6.317e-02) * s1[y+2][x+2];
	r += M4(3.944e-02, -4.354e-02, -1.227e-01, 3.418e-02, -8.900e-02, -1.783e-01, 7.633e-02, -2.044e-02, -4.795e-02, 5.609e-02, 6.087e-02, -1.659e-02, 4.534e-02, -5.176e-02, -2.061e-01, 4.123e-03) * s2[y+0][x+0];
	r += M4(-4.449e-02, -4.586e-02, 5.108e-02, -1.803e-01, -6.337e-03, -1.662e-01, -4.232e-02, 1.127e-01, 1.594e-02, 1.989e-01, -6.597e-02, 2.721e-02, 2.307e-02, 6.959e-02, -1.146e-01, 1.965e-01) * s2[y+0][x+1];
	r += M4(1.489e-01, 1.177e-01, 8.521e-02, -5.821e-02, -1.372e-01, 9.504e-02, -3.526e-02, -4.161e-03, 1.696e-01, -5.774e-02, 4.764e-02, -6.257e-03, -1.700e-03, 5.401e-02, 1.112e-01, 9.411e-02) * s2[y+0][x+2];
	r += M4(2.572e-02, -3.685e-02, -7.792e-02, 2.454e-01, 1.555e-01, 2.800e-02, 1.986e-01, -4.743e-02, 7.137e-02, -7.511e-02, -4.819e-02, -1.099e-01, -5.125e-03, 6.955e-02, -7.358e-02, 2.179e-01) * s2[y+1][x+0];
	r += M4(-3.590e-02, -1.359e-01, 2.912e-02, -4.952e-02, 3.644e-01, -5.736e-01, 1.669e-01, 1.786e-01, -6.943e-01, 9.663e-02, -2.560e-01, 1.799e-01, -4.845e-02, 2.051e-02, -7.557e-03, 1.753e-01) * s2[y+1][x+1];
	r += M4(-1.628e-01, -5.771e-02, -4.398e-02, 1.054e-02, -7.205e-02, 1.470e-01, 1.675e-01, -3.234e-02, 1.035e-01, 2.085e-01, -5.007e-02, -4.123e-02, 6.062e-02, -1.153e-01, -3.762e-02, 1.268e-01) * s2[y+1][x+2];
	r += M4(-8.348e-02, 6.048e-02, 2.340e-02, 8.860e-02, -1.529e-01, 3.255e-01, 1.132e-02, -3.550e-02, 5.119e-02, 1.045e-01, 1.664e-01, 1.095e-01, -2.181e-02, -8.497e-02, -3.917e-02, 7.914e-02) * s2[y+2][x+0];
	r += M4(3.943e-02, 1.994e-01, 1.781e-01, -1.169e-01, 1.548e-02, 6.217e-01, 2.076e-01, 8.210e-02, 7.439e-02, 5.098e-01, 1.586e-01, -2.351e-01, -8.822e-02, 1.857e-01, -6.597e-02, 2.806e-02) * s2[y+2][x+1];
	r += M4(-4.341e-02, 1.814e-02, 1.886e-02, 2.508e-02, 2.411e-01, 2.258e-01, 8.176e-02, 6.322e-02, -8.402e-02, 4.634e-01, -1.443e-01, 1.700e-01, 5.568e-02, -1.233e-01, 5.804e-02, -1.146e-01) * s2[y+2][x+2];
	r += M4(6.388e-02, 5.962e-03, -1.736e-01, 3.199e-02, -7.844e-02, -5.554e-02, 7.598e-02, -3.861e-02, 3.396e-03, 4.001e-02, 7.849e-03, -4.051e-02, 5.696e-02, -3.674e-02, -1.631e-01, -7.619e-02) * s3[y+0][x+0];
	r += M4(-6.022e-02, -1.626e-01, 7.251e-02, -2.549e-01, 6.996e-02, 1.218e-01, -3.542e-02, 1.528e-01, -2.798e-02, 3.479e-02, -1.250e-01, -5.907e-02, 4.725e-02, 1.322e-01, 1.190e-01, 7.328e-02) * s3[y+0][x+1];
	r += M4(5.979e-02, 5.752e-02, -3.542e-02, -5.526e-02, -9.747e-02, 1.106e-01, -6.673e-02, -9.482e-03, 1.404e-01, -7.155e-02, 1.519e-01, -1.017e-02, -8.346e-03, 2.922e-02, 6.093e-03, 3.293e-02) * s3[y+0][x+2];
	r += M4(-1.202e-01, -6.223e-02, -2.965e-01, 1.184e-01, 1.325e-01, -1.030e-01, -4.436e-02, -5.190e-02, 9.157e-02, 7.352e-02, -5.910e-02, -3.089e-02, -9.780e-02, 1.344e-01, -7.217e-03, 9.012e-02) * s3[y+1][x+0];
	r += M4(5.688e-02, 1.817e-01, 6.458e-02, 1.958e-03, 1.890e-01, -1.874e-01, -2.183e-01, 1.679e-01, 6.152e-01, -2.783e-01, -4.260e-01, 1.238e-01, 3.390e-02, -3.092e-02, 5.588e-02, 1.146e-01) * s3[y+1][x+1];
	r += M4(-7.865e-03, -1.402e-02, 5.203e-02, -1.817e-02, -2.479e-01, -1.260e-01, -5.549e-02, -9.216e-02, -1.613e-01, 4.521e-02, 3.062e-02, -5.946e-02, 4.643e-02, -1.367e-01, -5.264e-02, 9.960e-02) * s3[y+1][x+2];
	r += M4(-4.826e-02, 7.905e-02, -3.894e-01, 1.215e-01, 2.027e-01, 7.397e-02, 8.691e-02, -6.470e-02, 5.770e-02, 5.250e-02, 2.016e-01, 6.143e-02, -7.345e-04, -5.287e-02, 1.087e-02, 1.360e-01) * s3[y+2][x+0];
	r += M4(3.448e-02, 1.460e-01, 2.114e-01, -1.853e-01, -1.537e-01, 3.112e-01, -4.536e-02, -6.704e-02, 3.708e-02, 2.435e-02, 2.283e-01, -1.877e-01, -6.664e-02, 7.586e-02, -1.463e-01, -4.806e-02) * s3[y+2][x+1];
	r += M4(-1.809e-03, -3.992e-03, -8.426e-03, -1.195e-02, -1.788e-01, 1.961e-01, -1.174e-01, 1.409e-02, -8.735e-02, 1.976e-01, -1.332e-01, 1.318e-01, 9.637e-03, -8.976e-02, 1.204e-01, -8.451e-02) * s3[y+2][x+2];
	r += V4(3.358e-02, -1.478e-02, 9.403e-03, -3.131e-01);
	return vec4(r);
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = in_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
			s2[ay][ax] = l1(x - 1, y - 1);
			s1[ay][ax] = -max(-s0[ay][ax], V4(0.0));
			s0[ay][ax] = max(s0[ay][ax], V4(0.0));
			s3[ay][ax] = -max(-s2[ay][ax], V4(0.0));
			s2[ay][ax] = max(s2[ay][ax], V4(0.0));
		}
	}
	barrier();
	memoryBarrierShared();
	imageStore(out_image, opos + ivec2(0, 0), f0(xy.x, xy.y));
	imageStore(out_image, opos + ivec2(1, 0), f1(xy.x, xy.y));
}


//!DESC CuNNy-4x8C-RCAS-conv2
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv1
//!BIND LUMA
//!SAVE conv2
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
	#define V4 f16vec4
	#define M4 f16mat4
	#define F float16_t
#else
	#define V4 vec4
	#define M4 mat4
	#define F float
#endif
#define l0(x, y) V4(texelFetch(conv1_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv1_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 s0[10][10];
shared V4 s1[10][10];
shared V4 s2[10][10];
shared V4 s3[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += M4(1.070e-01, -2.925e-02, 1.860e-01, 9.354e-03, -3.187e-02, 1.923e-03, 1.365e-01, 9.278e-02, -4.872e-02, 7.096e-02, -1.623e-01, -8.558e-02, 9.348e-02, -1.070e-01, 7.524e-02, 8.114e-02) * s0[y+0][x+0];
	r += M4(-2.679e-02, -1.783e-01, 2.123e-01, -7.788e-02, -1.600e-01, 2.345e-01, -2.124e-02, -5.017e-02, 4.098e-02, -7.156e-03, -1.359e-01, 6.097e-02, 4.181e-02, 1.446e-01, 1.311e-01, 1.159e-01) * s0[y+0][x+1];
	r += M4(7.447e-02, -7.978e-02, 1.313e-01, 2.959e-03, -1.039e-01, 1.016e-01, 6.213e-02, -4.765e-02, -8.326e-02, 5.076e-02, -3.747e-02, 1.730e-02, 1.707e-01, -3.304e-02, -6.763e-02, 5.445e-02) * s0[y+0][x+2];
	r += M4(7.544e-02, -1.703e-02, 6.274e-02, 7.144e-03, -4.943e-02, 1.414e-01, 4.796e-02, -1.034e-01, -2.842e-01, -1.796e-01, 2.267e-01, 5.773e-02, -1.870e-01, 1.366e-02, 2.729e-02, 6.489e-02) * s0[y+1][x+0];
	r += M4(6.495e-02, -1.670e-01, -3.996e-01, 1.762e-03, 1.411e-01, 3.686e-01, -2.194e-01, -1.530e-01, 4.486e-01, 1.578e-02, 8.164e-02, -3.524e-03, 1.220e-03, 1.450e-01, 5.568e-01, -8.021e-03) * s0[y+1][x+1];
	r += M4(-8.043e-02, -2.219e-01, 1.289e-02, -8.880e-02, 1.399e-02, 1.463e-01, -2.193e-01, 4.795e-02, -2.919e-02, -1.167e-02, 1.643e-01, -2.884e-01, 8.955e-02, 2.741e-01, 1.580e-02, 2.028e-01) * s0[y+1][x+2];
	r += M4(7.089e-02, 4.870e-02, -1.665e-03, 4.967e-02, -1.684e-02, -1.295e-02, 1.191e-01, 3.154e-02, -8.781e-02, -3.231e-02, -9.023e-02, 2.582e-02, 1.510e-01, 1.024e-01, 6.984e-03, -5.833e-02) * s0[y+2][x+0];
	r += M4(-1.657e-01, -1.684e-01, 1.120e-02, -2.715e-02, -2.053e-02, 1.455e-01, -2.064e-02, -3.986e-02, 3.701e-02, -7.991e-02, 2.064e-01, 2.280e-01, 1.477e-01, -1.846e-02, -2.605e-02, -2.145e-01) * s0[y+2][x+1];
	r += M4(3.860e-02, 1.109e-03, 2.664e-01, 1.017e-01, -2.393e-02, 1.700e-01, -1.947e-01, -4.487e-02, 3.358e-02, -5.151e-02, 1.238e-01, 1.957e-01, 5.119e-02, 1.881e-01, -6.288e-03, -6.415e-02) * s0[y+2][x+2];
	r += M4(-2.802e-02, -1.711e-02, 1.261e-01, 9.364e-02, 5.167e-02, 5.732e-03, -7.603e-03, -5.564e-02, 1.516e-01, 2.011e-01, 3.043e-02, -1.162e-01, -5.268e-02, -9.764e-02, -8.067e-02, -1.462e-02) * s1[y+0][x+0];
	r += M4(1.220e-01, -8.278e-02, 4.834e-01, 1.098e-01, 1.772e-02, 9.336e-02, 1.132e-01, 2.113e-02, 4.174e-02, 5.204e-01, -1.357e-02, -4.212e-02, -1.897e-02, -9.144e-02, -1.732e-01, 4.144e-02) * s1[y+0][x+1];
	r += M4(9.858e-02, 2.118e-01, 3.292e-01, 2.099e-01, -4.423e-02, -6.562e-03, 1.400e-01, 1.022e-01, -1.852e-01, 4.978e-02, -1.321e-01, 3.072e-04, 8.658e-02, -2.231e-02, 4.015e-03, -1.298e-01) * s1[y+0][x+2];
	r += M4(4.397e-03, 2.631e-02, -1.645e-01, 1.962e-02, -1.619e-01, -6.877e-02, 2.508e-01, -7.038e-02, 7.970e-02, -3.369e-02, -1.582e-02, 1.407e-02, -5.575e-02, -8.104e-02, 4.000e-02, -1.204e-01) * s1[y+1][x+0];
	r += M4(7.222e-02, 3.194e-02, -2.337e-01, 3.279e-01, 1.580e-02, -1.996e-02, 1.292e-01, 3.232e-01, 1.942e-01, 1.694e-01, -1.142e-01, -3.486e-01, -2.111e-02, 3.581e-01, -2.049e-01, 1.538e-01) * s1[y+1][x+1];
	r += M4(1.495e-01, -3.850e-01, 4.091e-02, -1.714e-01, 7.890e-02, 1.793e-01, -1.908e-01, 8.816e-02, -1.890e-01, 7.024e-02, 5.213e-02, -1.611e-01, -3.150e-02, -1.662e-01, -9.873e-02, 7.900e-02) * s1[y+1][x+2];
	r += M4(-4.306e-02, 7.495e-02, -1.132e-01, 2.485e-02, -1.018e-02, -5.243e-02, 8.202e-02, 4.138e-02, 5.952e-02, 1.470e-01, -1.233e-01, 5.557e-03, 1.162e-01, -2.572e-02, 5.047e-02, 6.331e-02) * s1[y+2][x+0];
	r += M4(-1.499e-01, -4.636e-02, -5.796e-02, -4.258e-02, 1.805e-01, 6.493e-02, -2.033e-01, -1.070e-01, 1.564e-01, -1.509e-01, 1.149e-01, 1.465e-01, 8.338e-02, -5.764e-02, -1.491e-01, -6.417e-02) * s1[y+2][x+1];
	r += M4(-1.904e-02, -4.437e-02, 6.236e-02, 1.317e-01, 4.405e-02, 2.138e-02, 1.011e-01, -1.620e-01, 4.387e-02, -1.008e-01, 8.162e-02, 8.295e-02, -5.727e-02, -6.765e-02, -5.268e-02, -9.447e-02) * s1[y+2][x+2];
	r += M4(6.362e-02, -1.864e-02, -4.445e-02, -1.283e-02, 9.407e-02, -1.053e-01, -4.092e-02, 3.236e-02, 7.516e-04, 2.423e-02, 2.122e-01, 2.111e-02, 1.102e-01, 1.690e-01, -3.198e-01, 1.839e-01) * s2[y+0][x+0];
	r += M4(-1.143e-01, -1.782e-01, 1.064e-01, 1.699e-02, -7.595e-02, -2.623e-01, -1.264e-01, -2.301e-01, 6.952e-02, 2.107e-01, 4.581e-02, -8.516e-03, 5.763e-01, -2.051e-01, 1.118e-01, 5.183e-01) * s2[y+0][x+1];
	r += M4(1.550e-02, 1.710e-01, 3.210e-02, 1.277e-01, -1.097e-01, 1.945e-01, 9.428e-02, 6.976e-02, -1.684e-01, 6.919e-02, -4.390e-02, 8.286e-02, 4.856e-01, -7.897e-01, 1.587e-01, 9.016e-01) * s2[y+0][x+2];
	r += M4(-8.384e-02, -1.634e-01, -1.452e-01, -3.615e-02, 4.808e-03, 1.109e-01, -5.159e-02, 1.959e-02, -1.718e-01, 7.516e-03, -7.547e-02, 8.569e-02, 5.103e-01, -5.266e-01, 6.582e-02, 2.888e-01) * s2[y+1][x+0];
	r += M4(-1.297e-01, -2.475e-01, -1.616e-01, -1.858e-01, -2.881e-01, 1.825e-01, 3.043e-02, -7.792e-03, -6.715e-02, -4.111e-01, -2.315e-01, 1.817e-01, 1.536e+00, 6.099e-02, -1.641e+00, 1.785e-01) * s2[y+1][x+1];
	r += M4(-1.334e-01, -1.307e-01, -1.335e-01, -1.353e-01, 7.886e-02, 6.982e-02, 2.264e-02, 4.868e-02, -3.370e-01, -1.344e-01, 1.269e-01, 1.524e-02, 6.124e-01, -1.433e+00, -1.245e-02, -9.819e-01) * s2[y+1][x+2];
	r += M4(-1.314e-03, 1.181e-01, -2.026e-01, -1.180e-02, -2.400e-02, -2.877e-02, 4.070e-03, -4.550e-03, -9.667e-02, 8.020e-03, 7.812e-02, 4.154e-02, 1.312e-01, -6.182e-02, 8.418e-02, 3.449e-01) * s2[y+2][x+0];
	r += M4(-2.986e-02, -4.496e-02, -1.545e-02, 8.179e-02, 2.916e-02, 1.174e-01, -9.473e-02, 3.504e-02, -1.671e-01, 1.547e-01, 1.153e-01, 7.481e-02, 6.146e-01, -2.357e-01, 3.856e-01, -1.058e-01) * s2[y+2][x+1];
	r += M4(-7.868e-02, 3.803e-02, -3.829e-02, 4.147e-02, -2.842e-02, -3.987e-02, 1.559e-03, 2.729e-03, 4.983e-02, 1.634e-01, -2.868e-02, 1.358e-01, 4.328e-01, 5.454e-02, -8.652e-02, 3.425e-01) * s2[y+2][x+2];
	r += M4(-6.123e-02, 6.199e-02, 1.098e-01, 3.274e-03, 1.177e-01, 8.849e-02, 6.524e-02, -4.366e-02, 1.180e-02, -3.922e-02, 7.996e-03, -5.700e-03, -7.712e-02, -4.564e-02, -1.231e-01, -6.424e-03) * s3[y+0][x+0];
	r += M4(9.810e-02, 2.772e-01, 2.006e-01, 1.294e-01, 1.373e-02, 2.082e-01, -1.959e-01, -6.514e-01, 7.284e-02, -3.576e-02, 5.038e-02, -9.484e-02, 1.090e-02, -1.323e-01, 1.171e-01, -6.093e-02) * s3[y+0][x+1];
	r += M4(-1.034e-01, 3.333e-02, 9.029e-02, 1.631e-01, 9.876e-02, 4.241e-02, 9.643e-02, -2.842e-01, -8.689e-02, -2.067e-02, -6.022e-02, -2.199e-01, 7.544e-02, 2.488e-02, -1.356e-02, 5.627e-02) * s3[y+0][x+2];
	r += M4(1.323e-01, -2.674e-02, 1.027e-01, -7.435e-02, -1.946e-01, -4.999e-02, 1.323e-01, 2.663e-02, -8.745e-02, 4.266e-04, -1.740e-01, 1.883e-02, -5.702e-03, 4.885e-02, -5.707e-02, 1.172e-02) * s3[y+1][x+0];
	r += M4(-1.059e-02, 3.362e-01, 5.527e-02, 1.540e-02, 1.965e-02, -2.036e-01, 6.993e-01, -6.067e-02, -3.104e-01, -2.480e-01, 2.881e-01, 8.797e-02, -1.841e-01, 1.019e-01, 6.925e-02, 1.907e-02) * s3[y+1][x+1];
	r += M4(1.045e-01, 1.072e-01, 2.711e-02, -1.614e-01, 1.959e-01, 1.096e-01, 1.461e-01, 1.213e-01, 3.223e-02, -4.674e-02, 1.719e-01, -1.333e-01, 1.966e-02, -1.319e-01, 1.558e-01, -9.909e-02) * s3[y+1][x+2];
	r += M4(8.404e-02, -1.126e-02, 4.323e-02, 2.533e-02, -1.213e-01, -7.011e-02, 7.881e-02, 3.797e-02, -4.906e-02, 5.576e-02, 1.740e-02, 3.410e-02, -5.053e-02, -2.408e-02, 2.740e-02, 3.900e-03) * s3[y+2][x+0];
	r += M4(6.180e-02, -6.687e-02, 1.528e-01, -4.292e-02, 5.286e-02, 3.515e-02, 1.683e-01, 7.108e-03, -1.328e-01, 7.932e-02, -7.082e-02, 8.311e-03, -1.017e-02, -3.138e-02, 9.044e-02, -2.687e-03) * s3[y+2][x+1];
	r += M4(2.855e-02, -5.193e-03, 1.530e-02, -6.033e-03, 2.684e-02, 4.069e-02, -5.894e-02, 3.533e-03, 1.018e-01, 6.702e-02, 1.030e-01, 2.429e-01, 2.859e-02, 9.878e-02, -8.805e-02, 7.292e-02) * s3[y+2][x+2];
	r += V4(-9.221e-02, -2.456e-02, 5.286e-02, 5.201e-03);
	return vec4(r);
}
vec4 f1(int x, int y) {
	V4 r = V4(0.0);
	r += M4(2.273e-02, 1.592e-02, -4.917e-02, -1.298e-01, 1.332e-01, -1.751e-02, -2.105e-01, 8.999e-02, -1.774e-02, 9.499e-02, -2.713e-02, 8.934e-02, 5.344e-02, -1.137e-01, -7.016e-02, -7.187e-02) * s0[y+0][x+0];
	r += M4(-3.964e-02, -2.142e-01, 1.966e-01, -1.521e-01, -2.122e-01, 1.583e-01, -1.235e-02, 2.135e-01, 2.805e-02, 9.869e-02, -1.955e-02, 2.605e-02, 3.299e-02, 1.598e-03, -4.394e-02, 1.581e-01) * s0[y+0][x+1];
	r += M4(-7.875e-03, 7.491e-02, -9.946e-02, 1.156e-02, 1.249e-01, 1.426e-01, -1.067e-01, 4.792e-02, -6.422e-02, -6.010e-02, 8.459e-02, 2.683e-02, -6.390e-02, -2.089e-01, 1.242e-02, -9.587e-02) * s0[y+0][x+2];
	r += M4(-4.032e-02, 1.857e-01, -6.930e-02, -7.872e-02, -6.890e-02, 1.433e-01, -2.943e-01, -1.684e-01, 4.420e-02, 2.825e-02, 5.667e-01, 1.133e-01, -2.627e-01, 2.305e-01, 1.588e-01, 3.129e-02) * s0[y+1][x+0];
	r += M4(2.026e-01, -1.323e-01, 3.599e-01, -1.054e-01, 7.288e-02, 4.514e-01, -5.384e-01, -6.578e-02, 7.495e-01, -2.056e-01, 1.513e-01, -1.108e-01, -1.072e+00, -5.019e-01, 4.840e-02, -1.867e-01) * s0[y+1][x+1];
	r += M4(-3.417e-02, -8.869e-02, 1.927e-01, -1.113e-01, 6.471e-02, 6.477e-02, 3.833e-02, 1.267e-01, -6.703e-02, -6.016e-02, -3.186e-02, -1.118e-01, -7.564e-02, -1.825e-01, -8.748e-02, 4.544e-02) * s0[y+1][x+2];
	r += M4(4.101e-02, 2.818e-03, 8.718e-02, 6.487e-02, -3.307e-02, 1.825e-01, -2.697e-01, -1.276e-01, 7.983e-02, 5.147e-02, 1.793e-01, 1.868e-01, 8.016e-04, -6.328e-02, 3.194e-01, -2.682e-01) * s0[y+2][x+0];
	r += M4(9.230e-02, 6.797e-03, 1.980e-01, -9.145e-02, -5.720e-02, -4.813e-02, -2.593e-01, 1.656e-01, 2.315e-01, 3.669e-02, 3.249e-02, 1.239e-03, -1.014e-01, -8.148e-02, 5.794e-02, 8.216e-02) * s0[y+2][x+1];
	r += M4(9.644e-02, -7.188e-02, -1.330e-02, 8.840e-03, -5.990e-02, 2.280e-02, -5.925e-02, -1.144e-03, 1.190e-01, 7.105e-02, 2.343e-02, -5.427e-02, -7.008e-02, -6.572e-02, 8.124e-02, -6.855e-02) * s0[y+2][x+2];
	r += M4(4.098e-02, 5.791e-03, 9.284e-02, -3.484e-03, 2.942e-02, -5.746e-02, -8.358e-02, -1.169e-01, 3.269e-02, 2.006e-01, -1.753e-01, 1.007e-01, -6.954e-02, 1.475e-01, -1.382e-01, -6.721e-02) * s1[y+0][x+0];
	r += M4(1.467e-01, 9.787e-03, 7.643e-02, -3.177e-01, -1.551e-01, -1.343e-01, 6.698e-02, -4.912e-02, 3.211e-02, 1.626e-01, -5.653e-02, 2.693e-01, -1.538e-01, 1.826e-01, 1.356e-01, -4.233e-02) * s1[y+0][x+1];
	r += M4(-7.799e-03, 5.653e-02, -9.893e-03, -6.488e-02, 7.297e-02, 5.394e-02, -1.135e-01, -3.474e-02, -7.776e-03, -4.089e-02, 1.053e-01, 1.471e-01, -1.019e-01, 1.132e-01, -5.183e-02, 3.755e-02) * s1[y+0][x+2];
	r += M4(2.871e-03, 1.105e-01, 1.147e-01, -1.782e-02, 5.554e-02, -3.951e-02, -2.439e-02, 8.770e-02, -4.073e-02, 3.881e-01, 5.366e-03, 1.563e-01, 6.608e-02, -3.161e-02, 1.964e-02, -1.525e-01) * s1[y+1][x+0];
	r += M4(2.054e-01, -9.076e-02, 4.950e-02, 4.170e-03, 2.922e-01, 5.174e-02, -5.380e-02, 3.296e-02, -3.334e-01, 1.930e-01, -2.513e-01, 8.056e-02, 2.967e-01, -4.015e-02, 1.790e-01, -2.221e-01) * s1[y+1][x+1];
	r += M4(1.050e-01, -1.372e-01, -1.057e-01, -4.791e-01, -3.080e-02, 6.849e-02, 3.468e-02, -6.179e-03, -1.433e-01, 7.270e-02, -7.863e-02, 1.177e-01, -1.326e-02, 9.776e-02, 4.723e-03, -1.006e-01) * s1[y+1][x+2];
	r += M4(1.040e-02, 3.489e-04, 6.567e-02, 4.688e-02, -4.174e-02, -6.905e-03, -1.293e-01, 3.949e-03, 4.115e-02, 9.827e-02, 8.473e-02, 5.836e-02, 9.085e-02, -7.172e-02, 6.185e-02, -1.740e-02) * s1[y+2][x+0];
	r += M4(4.635e-02, -4.518e-02, 5.602e-02, -2.877e-01, -3.590e-02, 2.348e-02, -1.165e-01, 1.351e-01, 1.146e-01, 2.231e-01, -1.022e-01, -1.626e-01, 2.441e-02, 9.800e-02, 1.561e-01, 4.357e-03) * s1[y+2][x+1];
	r += M4(7.028e-02, -6.335e-02, 4.713e-02, -4.030e-02, -4.818e-02, -3.450e-02, -1.871e-01, -1.067e-01, 4.332e-02, 1.293e-01, -6.497e-02, 7.617e-02, -2.226e-02, -6.962e-02, 7.896e-02, 3.239e-02) * s1[y+2][x+2];
	r += M4(-6.837e-02, 2.201e-02, -1.805e-02, -6.756e-02, -9.521e-02, -9.758e-02, 1.314e-01, 3.708e-03, 8.607e-02, -1.124e-01, 3.657e-02, -8.807e-03, -1.203e-01, -4.409e-02, 2.078e-01, 4.581e-02) * s2[y+0][x+0];
	r += M4(-1.146e-01, 4.688e-02, -8.915e-03, -8.791e-02, -8.458e-02, -2.277e-01, -8.923e-02, -1.096e-01, -6.640e-02, 1.096e-01, -1.049e-02, -4.329e-02, 1.929e-02, -1.352e-01, -2.019e-01, -5.928e-01) * s2[y+0][x+1];
	r += M4(9.388e-03, -1.538e-02, 2.855e-03, 4.225e-02, 1.645e-01, -6.374e-02, -1.145e-01, 1.527e-01, 3.003e-02, -7.099e-02, -3.022e-02, 2.861e-01, -1.858e-01, -3.609e-01, -3.501e-01, -6.364e-01) * s2[y+0][x+2];
	r += M4(6.002e-02, 4.621e-02, 8.240e-02, 2.260e-02, -2.606e-02, 1.343e-01, -9.937e-02, -5.408e-02, 4.613e-02, 3.352e-02, 6.662e-02, 5.628e-02, 7.768e-01, -2.331e-01, 7.020e-01, 1.258e-01) * s2[y+1][x+0];
	r += M4(9.739e-02, 4.267e-01, -1.651e-01, -6.003e-02, -2.589e-01, 2.838e-01, -1.710e-01, -1.084e-01, -4.513e-01, -6.202e-02, 2.150e-01, -2.474e-01, -8.191e-02, -1.543e+00, -1.659e-02, 5.293e-01) * s2[y+1][x+1];
	r += M4(-1.104e-01, 1.353e-01, -9.134e-03, -8.187e-02, 1.577e-01, 7.119e-02, -5.094e-02, 8.956e-02, 2.181e-03, 7.934e-02, -9.959e-02, -2.040e-01, -1.211e+00, -2.674e-01, -3.176e-01, -2.443e-01) * s2[y+1][x+2];
	r += M4(-5.556e-03, 1.238e-01, -1.212e-01, -1.054e-01, 5.169e-02, -5.359e-02, -1.072e-01, 6.553e-02, -2.530e-02, -2.649e-02, 9.748e-03, 1.372e-01, -1.402e-01, 2.499e-01, -6.987e-02, 7.750e-02) * s2[y+2][x+0];
	r += M4(1.948e-03, 1.883e-01, -3.808e-02, 5.745e-02, -3.106e-02, 3.416e-02, 2.521e-02, 1.251e-02, -4.059e-02, -2.485e-02, -2.942e-01, -7.345e-02, -7.852e-02, 1.303e-01, -2.811e-01, 2.967e-01) * s2[y+2][x+1];
	r += M4(-3.060e-02, 3.435e-02, -5.376e-02, 1.338e-01, -1.108e-02, -2.662e-02, -3.236e-02, -4.553e-03, 8.059e-03, 1.208e-01, -3.280e-02, -1.507e-01, -1.956e-01, 3.547e-01, -5.119e-02, -6.340e-02) * s2[y+2][x+2];
	r += M4(8.567e-02, 5.983e-02, -7.687e-02, 5.003e-02, 1.025e-01, 4.154e-02, -9.333e-02, -1.464e-01, -5.470e-02, -2.972e-02, 1.326e-01, 5.806e-03, -2.955e-02, 9.107e-02, 1.361e-01, 1.100e-02) * s3[y+0][x+0];
	r += M4(1.044e-02, -1.031e-01, 1.467e-01, 1.480e-01, 7.506e-02, -2.442e-01, -3.414e-01, -1.070e-02, -5.721e-02, -1.420e-01, -1.262e-01, 3.060e-02, -4.997e-02, -1.767e-01, -2.354e-02, -9.775e-02) * s3[y+0][x+1];
	r += M4(-1.597e-02, -5.724e-02, 6.099e-02, -2.645e-02, 3.666e-02, -1.421e-01, -4.863e-02, -2.569e-01, 3.368e-02, -1.995e-01, -7.287e-02, 1.128e-01, 5.849e-02, -4.744e-02, -7.095e-02, -1.266e-02) * s3[y+0][x+2];
	r += M4(7.252e-02, -2.809e-01, -1.724e-01, 7.275e-02, -1.462e-02, -9.980e-02, -2.635e-01, 2.472e-04, -4.309e-02, 2.927e-03, 1.538e-02, -1.815e-03, -5.904e-02, 4.696e-02, 7.544e-02, -2.846e-02) * s3[y+1][x+0];
	r += M4(-1.998e-01, 4.155e-02, -1.652e-01, 5.443e-01, -2.871e-01, 1.715e-01, -1.055e-01, 2.421e-01, -1.180e-01, -1.435e-02, -7.614e-02, -2.330e-01, 2.033e-01, -1.321e-01, -1.131e-01, -9.364e-02) * s3[y+1][x+1];
	r += M4(-4.888e-02, 1.050e-01, -4.588e-02, 1.010e-01, 1.348e-01, 1.903e-01, -1.047e-01, -1.817e-02, 2.018e-01, 3.506e-03, 4.255e-02, -4.048e-01, -1.809e-01, 1.927e-02, -3.614e-02, -7.501e-02) * s3[y+1][x+2];
	r += M4(6.336e-02, -1.211e-01, -1.523e-01, -2.493e-03, 2.788e-02, -5.228e-02, -6.150e-02, 1.709e-02, -2.457e-02, 1.337e-01, 4.973e-02, 8.820e-02, 4.143e-03, 1.427e-03, -4.076e-03, 1.350e-02) * s3[y+2][x+0];
	r += M4(-9.633e-02, 4.100e-02, -5.882e-02, 2.550e-01, -2.860e-02, 3.032e-02, -2.231e-01, 4.114e-02, 8.455e-03, -2.182e-02, -3.247e-02, -6.337e-02, -6.096e-02, -8.137e-03, -4.974e-03, -6.034e-02) * s3[y+2][x+1];
	r += M4(-7.436e-02, 7.421e-03, -2.890e-02, 1.040e-01, 5.581e-02, -6.612e-02, 1.875e-02, -9.662e-02, 4.588e-02, 1.713e-02, -4.005e-03, -1.712e-01, 1.054e-01, 6.422e-02, 5.766e-03, 7.314e-02) * s3[y+2][x+2];
	r += V4(2.046e-03, -5.521e-02, -3.574e-02, -1.069e-01);
	return vec4(r);
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv1_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
			s2[ay][ax] = l1(x - 1, y - 1);
			s1[ay][ax] = -max(-s0[ay][ax], V4(0.0));
			s0[ay][ax] = max(s0[ay][ax], V4(0.0));
			s3[ay][ax] = -max(-s2[ay][ax], V4(0.0));
			s2[ay][ax] = max(s2[ay][ax], V4(0.0));
		}
	}
	barrier();
	memoryBarrierShared();
	imageStore(out_image, opos + ivec2(0, 0), f0(xy.x, xy.y));
	imageStore(out_image, opos + ivec2(1, 0), f1(xy.x, xy.y));
}


//!DESC CuNNy-4x8C-RCAS-conv3
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv2
//!BIND LUMA
//!SAVE conv3
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
	#define V4 f16vec4
	#define M4 f16mat4
	#define F float16_t
#else
	#define V4 vec4
	#define M4 mat4
	#define F float
#endif
#define l0(x, y) V4(texelFetch(conv2_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv2_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 s0[10][10];
shared V4 s1[10][10];
shared V4 s2[10][10];
shared V4 s3[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += M4(2.699e-01, -1.760e-01, -6.912e-02, -1.164e-01, -4.508e-02, 5.389e-02, 6.173e-02, 1.052e-02, 9.940e-02, 7.749e-02, -2.046e-01, -7.756e-02, 9.786e-02, -7.479e-03, -4.952e-02, -1.036e-01) * s0[y+0][x+0];
	r += M4(-1.912e-01, 2.365e-01, 5.513e-02, -1.185e-01, 1.482e-02, -1.538e-01, -4.360e-02, 5.470e-02, 4.634e-02, -3.833e-02, -2.199e-01, 5.866e-02, 2.401e-02, -2.362e-02, 5.436e-02, -2.214e-02) * s0[y+0][x+1];
	r += M4(1.693e-02, -1.101e-01, -2.229e-02, -3.406e-02, -7.309e-02, 3.240e-02, 2.748e-02, -2.189e-02, -7.155e-02, -1.058e-01, -4.946e-02, 5.462e-02, 6.763e-02, -3.528e-02, -6.560e-02, -1.806e-02) * s0[y+0][x+2];
	r += M4(1.364e-01, -5.025e-02, 3.071e-02, -1.145e-01, -2.596e-01, 1.647e-01, 6.958e-02, 1.903e-01, 1.294e-01, -2.001e-01, -3.482e-02, -1.096e-01, -1.173e-01, -2.045e-02, -9.636e-03, -4.847e-02) * s0[y+1][x+0];
	r += M4(1.259e-01, 4.307e-01, -4.457e-01, -6.382e-01, -2.083e-01, 2.555e-01, 2.077e-01, 1.499e-01, -2.628e-01, -2.747e-01, 3.419e-01, -1.756e-02, -2.195e-02, 5.579e-02, 1.301e-01, -4.993e-02) * s0[y+1][x+1];
	r += M4(1.891e-01, -1.175e-01, -3.927e-02, -9.820e-02, 3.844e-02, -3.804e-02, 1.116e-02, 3.729e-02, 2.304e-02, 4.441e-02, -1.900e-01, -8.141e-02, -1.041e-02, -3.405e-02, -1.042e-02, -4.327e-02) * s0[y+1][x+2];
	r += M4(1.518e-01, 1.831e-01, 1.676e-01, -2.176e-01, -2.017e-01, 4.208e-03, -1.689e-02, -1.360e-01, -5.856e-02, -1.359e-01, 3.753e-02, -1.964e-01, -9.712e-02, -1.171e-02, 7.632e-02, 7.981e-02) * s0[y+2][x+0];
	r += M4(3.769e-02, -1.840e-01, -2.541e-01, -4.759e-01, -1.236e-01, -8.177e-02, -9.056e-02, 9.823e-02, 4.520e-02, -1.046e-01, 1.322e-01, 7.205e-02, -6.966e-02, -8.753e-02, 7.094e-02, 1.254e-02) * s0[y+2][x+1];
	r += M4(8.006e-02, 1.385e-02, 2.695e-02, -1.661e-01, 4.789e-02, 6.069e-02, 1.214e-03, 7.245e-02, 4.665e-02, 2.364e-01, -1.119e-01, -1.031e-01, 6.736e-02, 6.918e-02, -9.791e-03, -2.789e-02) * s0[y+2][x+2];
	r += M4(2.839e-02, 2.533e-02, -2.551e-02, -1.329e-02, -6.029e-02, -2.860e-02, 2.490e-02, 4.433e-02, 9.700e-02, 5.578e-03, -1.022e-02, -6.365e-02, -9.820e-02, 1.712e-01, 1.312e-01, -1.312e-02) * s1[y+0][x+0];
	r += M4(7.367e-02, 2.386e-01, -2.344e-02, -1.646e-01, 5.238e-02, -6.212e-02, -4.724e-02, 3.239e-02, 3.207e-02, -6.064e-02, -5.652e-02, -4.988e-02, -6.596e-02, -1.395e-02, 1.172e-01, 1.421e-01) * s1[y+0][x+1];
	r += M4(3.024e-02, -9.026e-02, 1.333e-02, -3.621e-02, 2.862e-03, -4.308e-02, -6.251e-03, -2.362e-02, -3.475e-02, 4.749e-02, -5.204e-04, 3.433e-02, 1.666e-02, -4.247e-02, -4.494e-02, -9.855e-03) * s1[y+0][x+2];
	r += M4(-2.669e-03, -6.240e-02, 3.230e-02, -8.710e-03, -2.389e-01, 2.415e-02, 2.378e-01, 3.899e-03, 1.657e-02, -3.653e-02, -2.955e-02, 9.556e-02, 1.488e-01, -4.346e-01, 4.150e-01, -2.129e-01) * s1[y+1][x+0];
	r += M4(4.633e-02, 1.872e-01, -2.205e-01, -2.506e-01, -9.706e-02, -4.112e-03, 2.647e-01, 2.462e-01, -4.375e-01, -2.418e-01, 2.946e-01, 1.783e-01, 1.301e-01, 4.256e-02, 1.430e-01, -2.107e-01) * s1[y+1][x+1];
	r += M4(-4.382e-02, 1.147e-02, 9.402e-02, -4.723e-02, -1.212e-02, -5.384e-02, 1.011e-01, 5.863e-02, 5.407e-02, 1.306e-01, -5.161e-02, 8.418e-02, 9.234e-03, -2.083e-02, 7.967e-03, -6.011e-02) * s1[y+1][x+2];
	r += M4(-2.434e-02, 5.851e-02, 4.498e-02, -1.367e-01, -8.908e-03, -1.814e-01, 5.532e-02, 3.196e-02, -5.151e-03, -8.676e-02, -3.551e-03, -2.866e-02, 3.504e-02, 2.740e-01, -1.142e-01, -6.178e-02) * s1[y+2][x+0];
	r += M4(-8.312e-02, -3.493e-02, -2.588e-03, -1.419e-01, -1.241e-01, -1.844e-01, -3.684e-02, 3.617e-02, 1.904e-02, 9.197e-02, 5.407e-03, 2.433e-01, -1.418e-01, -2.322e-01, 9.522e-02, -6.056e-03) * s1[y+2][x+1];
	r += M4(6.372e-02, 1.641e-02, 2.529e-02, -9.376e-02, 4.199e-02, 3.150e-03, -2.251e-02, 3.422e-02, 8.959e-02, 4.724e-02, -3.770e-02, 3.832e-03, 4.403e-03, -6.356e-02, 1.864e-02, 1.828e-02) * s1[y+2][x+2];
	r += M4(4.680e-02, 2.905e-02, -2.864e-02, -9.737e-02, -1.884e-02, 1.322e-02, 3.431e-02, 4.829e-02, 1.523e-02, 1.280e-01, -3.017e-02, 4.697e-02, 1.090e-01, -1.705e-02, 1.266e-03, -6.950e-02) * s2[y+0][x+0];
	r += M4(1.204e-02, -2.418e-01, 1.626e-02, -8.221e-03, 1.051e-01, 4.895e-02, -4.134e-02, -8.536e-02, -2.218e-01, -1.763e-02, 6.761e-02, 5.962e-03, -1.127e-01, 1.923e-01, 1.001e-01, 1.420e-02) * s2[y+0][x+1];
	r += M4(2.862e-03, 1.328e-02, -2.926e-02, -1.560e-02, 2.993e-03, 6.685e-02, -1.874e-02, -5.015e-02, -4.848e-02, 1.219e-01, 9.162e-02, 7.262e-02, 2.119e-02, 2.493e-02, -1.303e-03, 5.626e-02) * s2[y+0][x+2];
	r += M4(-7.053e-02, -1.787e-01, 1.284e-01, -5.656e-02, -1.246e-02, -1.923e-02, -6.057e-02, 6.908e-02, -3.070e-02, -3.596e-02, 3.019e-02, -1.766e-02, 1.273e-02, 2.050e-01, -1.986e-02, 7.533e-02) * s2[y+1][x+0];
	r += M4(3.673e-01, -1.968e-01, -2.031e-01, 2.938e-04, -1.784e-01, 7.287e-02, -2.881e-03, 1.708e-01, -1.956e-01, 3.233e-01, -3.479e-02, 3.528e-02, 1.490e-01, -3.749e-02, -2.324e-01, -2.314e-01) * s2[y+1][x+1];
	r += M4(-2.667e-02, 4.313e-02, -7.793e-03, -5.489e-02, 7.755e-02, 1.092e-01, 1.684e-01, 3.567e-02, 2.543e-01, 1.154e-01, -7.967e-02, -5.391e-03, 5.187e-02, 8.039e-02, -5.124e-02, -7.986e-02) * s2[y+1][x+2];
	r += M4(-6.634e-03, -6.569e-02, 6.020e-02, 1.093e-01, 4.888e-02, 1.536e-01, -1.284e-01, -6.824e-04, -3.081e-04, -1.476e-02, 2.145e-02, 2.208e-02, 3.176e-02, -2.722e-02, -7.768e-02, -1.521e-02) * s2[y+2][x+0];
	r += M4(1.111e-02, -6.319e-02, 1.259e-01, 7.869e-02, -1.221e-01, -6.790e-02, -3.037e-02, -1.623e-01, -3.269e-03, 1.668e-01, 6.885e-03, 8.338e-02, -3.221e-02, -9.066e-02, 3.364e-03, 7.026e-03) * s2[y+2][x+1];
	r += M4(-1.057e-01, 1.146e-02, 3.478e-02, 6.210e-02, 4.940e-02, 2.975e-02, 1.395e-02, 4.960e-02, 5.168e-03, 6.045e-02, -2.269e-02, -5.331e-02, -5.103e-02, -2.209e-02, 9.006e-03, -1.595e-02) * s2[y+2][x+2];
	r += M4(-2.751e-02, 9.016e-02, 6.495e-02, 3.022e-02, 2.437e-02, 1.248e-02, 2.552e-02, 2.874e-02, -1.912e-02, 1.926e-01, 6.297e-02, 3.207e-02, -2.526e-02, -1.353e-01, 3.033e-02, 1.024e-02) * s3[y+0][x+0];
	r += M4(8.373e-03, -9.136e-03, -1.200e-01, -3.786e-04, 7.501e-02, -2.374e-01, -1.264e-01, -9.785e-02, 1.594e-01, -1.262e-01, -5.949e-02, -7.622e-02, -1.112e-01, 8.022e-02, 1.117e-01, -4.456e-02) * s3[y+0][x+1];
	r += M4(-2.131e-02, 8.475e-02, -3.271e-02, 1.446e-02, -4.701e-02, 3.664e-02, 3.564e-02, -8.412e-02, -5.285e-02, 2.681e-01, 8.151e-02, -1.208e-03, -8.143e-03, -2.782e-02, 6.992e-02, 1.871e-02) * s3[y+0][x+2];
	r += M4(-9.849e-02, -5.384e-02, -1.329e-01, -8.479e-02, 1.795e-01, -5.140e-02, -1.104e-01, -8.308e-02, 2.398e-01, 1.330e-01, -3.681e-02, -3.618e-02, -3.221e-01, 3.360e-02, 6.562e-02, -1.226e-01) * s3[y+1][x+0];
	r += M4(5.176e-01, 2.998e-01, -6.696e-01, 7.594e-02, -1.598e-01, -1.365e-01, 4.419e-03, 1.457e-02, -8.324e-01, -1.313e-01, 3.158e-01, 3.457e-01, 1.694e-01, 1.962e-01, -2.050e-01, -3.990e-01) * s3[y+1][x+1];
	r += M4(-8.434e-02, -5.692e-02, -1.371e-02, 1.703e-02, -5.179e-03, -2.658e-02, -2.218e-02, -9.481e-02, 9.000e-02, -2.943e-02, 6.529e-02, -8.020e-02, 1.044e-01, -3.059e-02, -4.647e-02, -9.444e-02) * s3[y+1][x+2];
	r += M4(1.587e-02, 3.369e-02, -1.097e-01, -5.662e-02, 4.597e-02, -9.528e-02, -3.871e-02, 2.316e-02, 1.592e-02, 2.881e-02, 2.490e-02, 4.468e-02, -8.385e-02, 1.077e-01, -9.583e-02, -7.988e-03) * s3[y+2][x+0];
	r += M4(3.924e-02, 1.295e-03, -2.422e-01, -2.508e-01, -9.101e-02, 2.031e-02, 1.400e-02, 1.451e-01, 1.180e-01, 1.293e-01, -1.676e-01, -2.086e-01, -5.700e-02, -1.025e-01, -7.963e-02, -2.107e-02) * s3[y+2][x+1];
	r += M4(-1.918e-01, -1.437e-02, -3.283e-02, 9.012e-02, 1.950e-02, -3.605e-02, 3.900e-02, 5.042e-02, 9.106e-03, -1.612e-03, -1.825e-02, -1.897e-01, -5.069e-02, -5.663e-02, 7.739e-02, 1.886e-02) * s3[y+2][x+2];
	r += V4(-1.270e-02, 9.025e-03, -3.687e-03, 4.792e-02);
	return vec4(r);
}
vec4 f1(int x, int y) {
	V4 r = V4(0.0);
	r += M4(-1.856e-01, -1.323e-01, -5.383e-02, 5.631e-02, 2.150e-03, 6.658e-02, 6.298e-02, -9.947e-02, -6.384e-02, 1.126e-01, -1.145e-01, 9.464e-02, -7.807e-02, 1.129e-02, 1.717e-01, -1.292e-01) * s0[y+0][x+0];
	r += M4(1.262e-01, 9.836e-02, -1.030e-01, -2.489e-01, -1.921e-01, 1.416e-01, 1.906e-01, -1.258e-02, 4.011e-03, -6.395e-02, 5.497e-02, -3.279e-02, 2.419e-02, -1.339e-02, -2.076e-01, 9.548e-02) * s0[y+0][x+1];
	r += M4(-1.516e-03, 2.302e-02, -2.800e-02, 2.356e-02, -2.239e-02, 8.761e-02, 2.768e-02, -1.488e-01, -8.288e-02, -5.550e-02, 1.432e-01, -1.045e-01, -1.090e-01, -4.313e-02, 1.372e-01, -2.053e-02) * s0[y+0][x+2];
	r += M4(-1.755e-02, 6.276e-02, -1.690e-02, 4.431e-01, 4.387e-01, -2.979e-01, 1.894e-01, -1.827e-02, -1.824e-01, 2.876e-01, -1.434e-01, 9.707e-02, 1.675e-01, -1.613e-01, 3.175e-01, -4.352e-02) * s0[y+1][x+0];
	r += M4(3.922e-01, 5.430e-02, 6.085e-03, -5.549e-01, 6.029e-01, 2.757e-01, 2.871e-01, 1.785e-01, -5.176e-01, 8.213e-02, -3.205e-01, -2.846e-02, 6.666e-02, -1.028e-01, -1.864e-02, 1.708e-01) * s0[y+1][x+1];
	r += M4(1.024e-01, 8.889e-02, 5.630e-02, 8.058e-02, 5.934e-02, 1.889e-02, 1.304e-01, 1.341e-01, -2.994e-01, 1.307e-02, -1.925e-01, -4.191e-01, -2.541e-03, 1.967e-02, -9.149e-02, 6.657e-02) * s0[y+1][x+2];
	r += M4(-1.101e-01, -7.902e-02, -1.550e-01, -4.408e-02, 1.763e-01, -1.787e-01, 1.574e-01, -6.018e-02, -7.614e-02, 5.969e-02, 3.804e-02, -3.237e-02, 1.718e-01, 2.310e-01, -4.051e-02, -2.427e-02) * s0[y+2][x+0];
	r += M4(-2.151e-01, -6.058e-02, 1.551e-01, 7.091e-03, -3.474e-02, 5.477e-02, 1.580e-01, 1.480e-01, -2.468e-01, 4.047e-01, 5.681e-03, -1.257e-01, 4.928e-03, 5.285e-02, 8.700e-02, -3.321e-01) * s0[y+2][x+1];
	r += M4(-1.886e-01, 6.321e-02, -1.831e-01, -2.121e-02, 3.820e-02, 2.887e-02, -3.030e-03, -3.473e-02, 8.261e-02, 5.138e-02, -1.919e-01, -1.565e-01, 1.329e-02, 1.239e-01, 1.388e-02, -8.228e-02) * s0[y+2][x+2];
	r += M4(-7.285e-02, -9.046e-02, 1.723e-02, -1.448e-02, 1.161e-01, -1.641e-02, -6.821e-02, 2.968e-02, -1.760e-01, 7.011e-02, -6.354e-02, -1.432e-02, 3.772e-01, 6.220e-02, -1.292e-01, 6.686e-02) * s1[y+0][x+0];
	r += M4(-7.260e-02, 6.491e-02, 2.799e-02, -1.146e-01, -1.811e-01, -1.229e-02, -5.219e-04, 2.185e-02, -2.470e-01, 3.105e-02, 1.287e-01, -2.289e-01, 1.602e-01, 3.623e-02, -1.858e-01, 5.598e-02) * s1[y+0][x+1];
	r += M4(-1.054e-01, 5.870e-02, 4.782e-04, -5.493e-04, -1.760e-02, -4.066e-02, 2.409e-02, 1.081e-02, 2.874e-02, 5.463e-02, -1.275e-01, 8.038e-02, -3.685e-02, -7.120e-03, 1.566e-01, -9.366e-02) * s1[y+0][x+2];
	r += M4(3.782e-02, -7.963e-02, -1.996e-02, 3.276e-02, 1.724e-01, -2.693e-01, -2.246e-02, 1.734e-01, 9.358e-02, -1.081e-02, -7.227e-02, 4.204e-02, -1.342e-01, -2.241e-02, 5.473e-01, -2.223e-01) * s1[y+1][x+0];
	r += M4(2.372e-01, -9.986e-02, 8.089e-02, -7.876e-02, 2.453e-01, 1.798e-01, -2.447e-01, 2.828e-01, 8.705e-02, -9.734e-02, -1.714e-01, 5.306e-02, 3.861e-02, 6.327e-02, 7.759e-02, 1.131e-02) * s1[y+1][x+1];
	r += M4(1.501e-01, -2.502e-02, -4.644e-04, 1.456e-01, -1.488e-02, -1.055e-01, 7.500e-02, -5.173e-02, 2.099e-02, 5.571e-02, 1.577e-01, -1.009e-01, -1.666e-02, 4.486e-02, -2.222e-01, 8.725e-02) * s1[y+1][x+2];
	r += M4(-1.001e-02, -7.400e-02, 4.160e-02, -6.561e-02, 4.261e-02, -7.500e-02, -3.684e-02, -3.026e-02, 4.366e-02, -5.518e-02, -1.783e-03, 3.850e-03, 2.570e-01, -2.640e-02, 1.018e-01, 1.227e-01) * s1[y+2][x+0];
	r += M4(-5.482e-02, -4.635e-02, 1.598e-01, 8.359e-02, -1.112e-01, 4.776e-02, 1.856e-01, -1.621e-02, -1.526e-02, 1.472e-01, -4.756e-02, -1.015e-02, 2.242e-01, 9.799e-02, -2.083e-01, 1.400e-01) * s1[y+2][x+1];
	r += M4(-5.489e-02, 7.813e-02, -1.889e-01, -1.760e-02, -1.358e-01, -5.279e-03, -6.105e-02, -1.008e-01, -4.886e-02, -1.612e-02, -8.880e-02, -4.116e-02, 2.278e-01, 5.264e-02, 2.247e-01, -1.030e-01) * s1[y+2][x+2];
	r += M4(7.506e-02, -1.700e-02, -8.537e-02, 5.143e-02, -2.140e-02, -8.715e-02, 5.558e-02, -2.159e-02, 2.965e-02, -3.421e-02, -5.420e-02, 3.402e-02, -2.469e-01, 5.600e-02, 3.637e-02, -1.635e-01) * s2[y+0][x+0];
	r += M4(-3.117e-02, -9.938e-02, 3.104e-03, -2.152e-02, -1.537e-01, 2.169e-01, 3.286e-01, -1.894e-01, -3.039e-03, 6.469e-02, -5.421e-02, -2.146e-02, 1.813e-01, 1.751e-01, -1.987e-01, -1.813e-02) * s2[y+0][x+1];
	r += M4(7.293e-02, -6.240e-02, 1.134e-02, 1.652e-02, 5.600e-02, -6.635e-02, -4.017e-02, 2.622e-02, 1.113e-01, 1.373e-01, -4.008e-02, 2.409e-02, 2.691e-03, 1.022e-01, 6.637e-02, 5.648e-02) * s2[y+0][x+2];
	r += M4(5.109e-04, -7.153e-02, -8.817e-02, 6.471e-02, 1.239e-01, -4.992e-02, -1.238e-02, -1.971e-02, -4.575e-02, -2.954e-02, -8.906e-02, 4.417e-02, 1.722e-01, 1.339e-01, 7.418e-03, -1.945e-02) * s2[y+1][x+0];
	r += M4(-3.984e-01, -7.514e-03, -1.762e-01, -2.896e-01, 2.603e-01, 3.018e-01, 6.123e-01, -7.622e-02, 3.458e-01, -1.508e-01, -8.694e-02, 7.983e-02, -1.202e-01, 9.527e-02, 1.719e-01, 6.398e-02) * s2[y+1][x+1];
	r += M4(-7.253e-02, -3.116e-02, -7.689e-02, -1.275e-01, 2.497e-01, 1.515e-01, 1.261e-01, -1.217e-02, 4.578e-02, 1.178e-01, 8.205e-02, 8.378e-02, -4.961e-02, 8.510e-02, -1.525e-01, 6.030e-03) * s2[y+1][x+2];
	r += M4(-2.579e-03, -7.719e-02, 9.821e-03, 1.421e-01, -4.043e-03, -7.199e-02, -2.672e-03, -2.118e-02, -5.189e-03, 2.125e-02, 3.205e-02, 1.839e-02, -8.650e-02, -8.999e-02, 1.767e-01, -9.752e-03) * s2[y+2][x+0];
	r += M4(6.079e-02, -1.692e-02, 4.494e-02, -4.164e-02, 4.560e-02, -1.304e-01, 1.083e-01, 1.009e-01, 1.968e-02, 6.236e-02, -2.445e-02, 6.562e-02, -4.024e-02, -1.035e-01, 8.275e-03, 2.686e-01) * s2[y+2][x+1];
	r += M4(5.824e-02, -1.161e-01, 1.082e-01, 5.066e-02, -9.161e-02, 5.042e-02, 3.229e-02, 4.508e-02, -4.408e-02, -1.183e-02, -1.306e-01, 1.022e-01, -3.165e-03, -5.063e-02, -1.361e-02, 8.417e-02) * s2[y+2][x+2];
	r += M4(4.189e-02, 5.679e-03, 2.899e-02, -3.591e-02, -3.284e-02, -8.780e-03, 5.290e-02, 1.154e-03, 6.622e-02, 4.864e-02, -1.714e-01, 1.224e-01, -1.064e-01, 1.689e-02, 5.064e-02, -1.000e-01) * s3[y+0][x+0];
	r += M4(3.678e-02, 9.855e-02, 1.266e-01, 9.188e-03, -1.180e-01, -4.340e-02, 3.888e-02, -1.932e-02, -3.379e-01, 1.619e-01, -1.530e-01, -4.918e-02, 1.881e-01, 3.191e-02, 5.640e-02, -3.561e-02) * s3[y+0][x+1];
	r += M4(8.487e-02, 1.217e-01, 6.609e-02, 1.197e-01, 8.605e-02, -1.060e-01, -1.436e-02, 2.298e-02, -3.404e-02, 3.427e-01, -3.238e-01, -3.841e-02, -1.720e-02, 8.383e-02, -2.889e-02, 9.077e-03) * s3[y+0][x+2];
	r += M4(3.658e-02, -7.571e-03, 2.174e-02, -3.621e-02, -1.011e-01, 1.295e-01, 1.600e-02, -1.518e-01, 1.478e-02, 9.885e-02, -1.128e-01, -5.377e-02, 2.175e-01, 7.151e-02, -2.076e-02, -9.935e-02) * s3[y+1][x+0];
	r += M4(-8.787e-02, 5.763e-01, 1.471e-01, -2.390e-01, -6.465e-01, -1.323e-02, 1.721e-01, -1.038e-01, -6.416e-02, -3.768e-01, 4.068e-02, 2.633e-01, -2.767e-01, 2.998e-01, 1.925e-01, 8.564e-03) * s3[y+1][x+1];
	r += M4(3.964e-02, 1.938e-01, -2.136e-01, 9.665e-02, -1.791e-01, 5.074e-02, -8.394e-02, -2.489e-01, 1.189e-01, 2.209e-01, -7.101e-01, -7.493e-02, -4.097e-03, 1.322e-01, -1.567e-01, 9.329e-02) * s3[y+1][x+2];
	r += M4(-4.976e-02, -1.861e-02, -1.084e-02, 6.298e-02, -3.456e-02, 3.766e-02, 9.940e-02, -6.532e-02, 3.725e-02, 9.252e-02, -1.052e-01, 5.865e-03, 4.064e-02, -1.513e-01, 6.141e-02, 2.525e-02) * s3[y+2][x+0];
	r += M4(-8.951e-02, 3.072e-02, 1.966e-02, 1.399e-02, 2.379e-01, 1.048e-01, -5.865e-02, -5.984e-02, -4.275e-01, -3.826e-02, 1.224e-01, -2.895e-02, 1.399e-01, -1.165e-01, -3.572e-04, 2.062e-01) * s3[y+2][x+1];
	r += M4(1.820e-01, -9.430e-02, -1.211e-02, 1.573e-01, 1.671e-02, 5.826e-02, 9.923e-02, 1.494e-02, -2.440e-01, 4.944e-02, -4.446e-01, 3.942e-01, 6.572e-02, -2.302e-02, 1.567e-02, 4.467e-02) * s3[y+2][x+2];
	r += V4(1.155e-03, -3.081e-03, 4.648e-03, -1.341e-03);
	return vec4(r);
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv2_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
			s2[ay][ax] = l1(x - 1, y - 1);
			s1[ay][ax] = -max(-s0[ay][ax], V4(0.0));
			s0[ay][ax] = max(s0[ay][ax], V4(0.0));
			s3[ay][ax] = -max(-s2[ay][ax], V4(0.0));
			s2[ay][ax] = max(s2[ay][ax], V4(0.0));
		}
	}
	barrier();
	memoryBarrierShared();
	imageStore(out_image, opos + ivec2(0, 0), f0(xy.x, xy.y));
	imageStore(out_image, opos + ivec2(1, 0), f1(xy.x, xy.y));
}


//!DESC CuNNy-4x8C-RCAS-conv4
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv3
//!BIND LUMA
//!SAVE conv4
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
	#define V4 f16vec4
	#define M4 f16mat4
	#define F float16_t
#else
	#define V4 vec4
	#define M4 mat4
	#define F float
#endif
#define l0(x, y) V4(texelFetch(conv3_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv3_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 s0[10][10];
shared V4 s1[10][10];
shared V4 s2[10][10];
shared V4 s3[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += M4(3.399e-02, -1.197e-02, 4.955e-02, 3.190e-02, -3.818e-02, 3.532e-03, -2.216e-02, -5.041e-03, 5.209e-03, -4.812e-02, -7.414e-02, -5.950e-02, -1.346e-02, -7.343e-02, -6.916e-02, -3.287e-02) * s0[y+0][x+0];
	r += M4(8.808e-02, -5.546e-02, 1.090e-01, -7.303e-02, 7.301e-03, 2.440e-02, -1.572e-03, -5.077e-03, 4.238e-02, 8.326e-02, 3.593e-02, -1.443e-01, -2.116e-02, -9.051e-03, 2.133e-02, 1.103e-01) * s0[y+0][x+1];
	r += M4(-1.954e-02, 3.513e-02, 4.875e-02, -1.512e-02, 2.982e-02, 4.500e-02, 6.024e-03, -8.554e-03, -3.337e-02, 5.785e-02, -1.697e-03, 7.948e-02, 4.023e-02, 6.227e-02, 4.131e-02, 1.685e-02) * s0[y+0][x+2];
	r += M4(-2.542e-02, 8.420e-02, 2.780e-03, -1.922e-01, -4.723e-03, 1.083e-02, 1.848e-02, 5.835e-02, -3.214e-02, -9.961e-03, -9.942e-02, -1.508e-02, 2.243e-02, -3.299e-02, -2.696e-02, -2.783e-02) * s0[y+1][x+0];
	r += M4(-7.547e-02, -1.254e-01, 8.425e-02, 3.174e-01, -3.470e-02, 1.202e-01, -1.269e-01, 9.442e-02, -1.850e-01, 3.487e-01, -1.166e-02, -1.741e-01, -1.024e-02, -1.939e-01, 2.586e-01, -4.141e-02) * s0[y+1][x+1];
	r += M4(6.469e-02, -3.640e-03, 6.547e-02, 3.568e-01, -7.133e-02, 1.199e-01, -8.427e-02, 2.927e-02, 5.178e-02, -8.353e-02, 2.581e-03, -2.654e-01, -6.767e-02, 1.173e-01, -6.421e-02, 2.207e-02) * s0[y+1][x+2];
	r += M4(1.465e-03, 4.206e-02, 1.834e-02, -7.203e-02, 1.010e-02, -4.819e-02, 1.977e-02, 7.525e-03, 3.020e-02, -5.749e-02, -2.734e-02, -4.859e-02, 4.898e-03, 7.924e-02, -2.221e-02, 2.368e-02) * s0[y+2][x+0];
	r += M4(6.480e-02, -1.306e-01, 4.818e-02, -1.022e-01, 2.205e-02, -1.897e-02, -1.088e-01, 1.034e-01, 4.334e-02, 2.451e-02, 2.945e-02, -5.742e-02, 1.494e-02, -3.935e-02, -3.936e-02, -2.366e-02) * s0[y+2][x+1];
	r += M4(-2.617e-02, 5.405e-02, 1.467e-01, 8.415e-02, 4.979e-02, -1.107e-02, -6.247e-02, 7.508e-02, -1.077e-02, -1.182e-02, 7.368e-02, -3.013e-03, -1.570e-02, -3.095e-02, 1.393e-02, -1.068e-02) * s0[y+2][x+2];
	r += M4(2.274e-02, -5.455e-02, 2.305e-02, 8.205e-02, 1.477e-03, 8.187e-02, 7.210e-02, -1.864e-01, -1.981e-02, -4.333e-03, 1.315e-02, 7.635e-02, 6.581e-03, 4.886e-02, 1.208e-01, -1.844e-01) * s1[y+0][x+0];
	r += M4(8.457e-03, 3.769e-02, 5.860e-02, 7.675e-02, 2.813e-02, -1.968e-01, -1.723e-01, -2.699e-01, 5.090e-02, 1.670e-02, 8.266e-02, 2.313e-01, 9.200e-02, -2.326e-01, 2.728e-02, -8.846e-01) * s1[y+0][x+1];
	r += M4(-3.597e-02, 1.415e-01, 5.549e-02, 7.412e-02, 2.926e-02, 1.697e-01, 1.522e-01, 6.777e-02, -2.386e-02, 2.146e-02, -2.996e-02, 1.295e-01, 9.619e-02, -6.857e-02, -7.148e-02, -8.509e-01) * s1[y+0][x+2];
	r += M4(-1.123e-02, -2.464e-02, -1.023e-01, -1.242e-01, -1.332e-01, 4.302e-02, 1.683e-01, 2.277e-01, -4.463e-02, 5.439e-03, -4.189e-02, -1.213e-01, -4.595e-03, -1.035e-02, -3.414e-02, -2.084e-01) * s1[y+1][x+0];
	r += M4(-5.878e-02, 6.472e-02, 5.598e-02, 4.769e-02, 2.389e-02, -5.932e-02, -3.625e-01, 3.362e-01, -2.952e-02, 2.318e-01, 4.630e-02, 5.106e-02, -2.127e-01, -2.895e-02, 1.711e-01, -1.133e+00) * s1[y+1][x+1];
	r += M4(5.950e-03, 7.721e-02, 1.086e-01, 1.460e-01, 1.470e-01, 1.973e-02, 3.500e-02, 1.538e-01, 2.810e-02, -9.150e-02, -3.032e-02, -4.383e-02, 2.493e-02, 1.990e-01, -1.155e-01, -5.033e-01) * s1[y+1][x+2];
	r += M4(-9.693e-03, 5.454e-02, 2.182e-02, -2.388e-02, 1.563e-01, -1.181e-01, 8.715e-02, 3.475e-03, 4.163e-02, -4.912e-02, 2.919e-02, -2.222e-02, 7.880e-02, 1.013e-01, -2.936e-02, -9.822e-03) * s1[y+2][x+0];
	r += M4(2.964e-02, -5.006e-02, -2.712e-03, -5.910e-02, -1.446e-01, 1.981e-02, -6.738e-03, 5.847e-02, -1.007e-01, 3.927e-02, 3.770e-02, -1.503e-01, 1.075e-01, -2.471e-02, -1.593e-01, 1.238e-01) * s1[y+2][x+1];
	r += M4(-3.098e-02, 2.167e-02, 1.197e-01, 3.990e-02, -9.022e-02, -3.912e-02, -1.072e-01, -1.205e-01, -3.936e-02, 3.466e-02, 3.030e-02, -2.811e-02, -2.127e-02, 1.870e-02, -2.143e-02, 3.442e-02) * s1[y+2][x+2];
	r += M4(3.182e-02, -1.468e-02, 4.282e-02, 1.871e-02, -3.119e-02, -2.649e-02, -1.132e-02, 3.639e-02, 1.349e-02, 3.732e-02, 4.009e-02, -1.624e-01, 2.533e-02, 1.106e-01, 1.488e-01, -1.358e-02) * s2[y+0][x+0];
	r += M4(3.987e-02, 9.972e-03, 1.285e-02, -9.536e-04, -5.700e-02, 1.295e-01, 2.184e-02, 1.725e-01, -2.605e-02, 3.087e-02, -2.803e-02, -1.058e-01, -6.354e-02, 6.572e-02, -2.581e-02, -2.683e-02) * s2[y+0][x+1];
	r += M4(3.390e-03, -7.015e-02, -1.879e-02, 1.993e-02, -9.112e-03, -6.616e-02, 1.040e-02, 1.026e-01, -3.344e-03, -7.119e-03, 6.044e-03, 2.053e-02, -3.286e-02, 2.458e-03, 2.481e-03, -9.868e-02) * s2[y+0][x+2];
	r += M4(-1.950e-02, 4.347e-02, -4.703e-02, 3.620e-02, 3.991e-02, -4.060e-02, -2.131e-02, 7.800e-02, 5.270e-02, 1.412e-01, -2.449e-04, 2.549e-01, 5.132e-02, 6.765e-02, 9.444e-03, -1.279e-01) * s2[y+1][x+0];
	r += M4(-7.162e-02, 5.580e-02, -1.558e-01, 2.140e-02, -6.430e-02, 2.155e-01, -8.959e-02, -2.115e-01, 3.656e-02, 5.619e-02, -2.202e-01, 8.821e-02, 1.612e-01, -1.102e-01, 4.025e-02, -5.455e-02) * s2[y+1][x+1];
	r += M4(3.511e-02, -5.835e-02, 1.024e-01, -1.621e-02, -1.570e-02, -3.905e-02, 1.273e-01, 3.686e-03, 9.327e-03, -1.504e-02, -1.779e-03, 2.069e-02, 2.489e-02, -1.012e-01, -1.344e-01, -7.827e-02) * s2[y+1][x+2];
	r += M4(4.735e-03, -3.864e-02, 2.289e-03, -2.550e-03, -1.762e-02, -2.179e-02, -3.530e-02, 5.877e-04, -5.845e-04, 1.707e-02, 3.855e-02, -9.875e-03, 8.763e-03, 7.391e-02, -2.923e-03, -1.900e-03) * s2[y+2][x+0];
	r += M4(6.082e-02, 1.756e-03, 9.709e-03, 4.557e-03, -1.694e-02, 1.655e-01, 7.849e-02, -2.550e-02, -4.959e-02, 7.786e-02, -6.106e-02, 3.586e-03, -4.600e-02, 2.509e-02, 6.966e-02, -2.165e-03) * s2[y+2][x+1];
	r += M4(-7.629e-04, -1.856e-02, 1.846e-02, -3.489e-02, -3.383e-02, 6.270e-03, 2.072e-02, -5.775e-02, 8.252e-03, -8.942e-03, 5.577e-03, 1.311e-02, 2.587e-02, -1.900e-02, -1.753e-02, 1.012e-02) * s2[y+2][x+2];
	r += M4(-3.865e-02, -1.306e-02, 8.035e-02, 2.981e-03, -1.472e-03, -8.026e-02, -1.998e-02, 1.108e-01, -4.534e-02, 4.962e-02, -1.518e-02, -1.265e-01, -3.173e-02, 1.144e-01, 9.107e-02, -1.140e-01) * s3[y+0][x+0];
	r += M4(-1.604e-01, -1.086e-01, 4.035e-02, 3.612e-01, -2.769e-02, 5.188e-02, 6.275e-02, 2.683e-02, -2.768e-02, 3.074e-02, -2.143e-02, 1.854e-01, 7.457e-03, -4.100e-03, 4.196e-03, -6.723e-02) * s3[y+0][x+1];
	r += M4(2.491e-04, -1.513e-01, -1.992e-02, 1.196e-01, -1.154e-02, -5.248e-02, 4.575e-03, -5.186e-02, 4.519e-02, -1.277e-02, -6.630e-03, 2.444e-02, 1.474e-02, -3.406e-02, -3.086e-02, -1.470e-01) * s3[y+0][x+2];
	r += M4(-3.677e-01, -4.001e-02, 3.958e-02, -2.616e-01, -7.891e-02, -1.362e-01, -9.376e-02, 6.203e-02, 1.997e-02, 1.710e-01, 2.280e-01, 1.518e-01, 8.471e-02, 2.921e-01, 1.359e-01, 4.490e-03) * s3[y+1][x+0];
	r += M4(-1.560e+00, -8.739e-02, -1.507e-01, -8.418e-02, -2.219e-01, 6.795e-02, 2.036e-01, 1.137e-01, 6.629e-02, -9.455e-02, -3.243e-01, -1.418e-01, -2.342e-02, -1.644e-01, -2.864e-02, -1.965e-01) * s3[y+1][x+1];
	r += M4(-8.224e-02, -2.587e-02, 1.421e-01, 4.028e-02, 2.649e-02, -8.444e-02, -1.797e-02, 7.772e-02, 2.093e-02, 3.506e-02, 6.164e-02, 2.336e-01, -2.557e-02, 5.078e-02, -7.790e-03, 1.376e-01) * s3[y+1][x+2];
	r += M4(2.229e-01, -4.801e-02, 7.891e-02, -4.679e-02, 9.543e-03, -2.520e-02, -1.244e-01, -6.044e-02, 1.743e-01, -1.078e-03, 2.320e-03, -1.449e-01, 1.028e-02, 1.703e-01, 1.552e-02, -9.648e-02) * s3[y+2][x+0];
	r += M4(8.579e-02, -3.480e-02, 4.226e-02, -9.064e-02, 6.053e-02, 1.508e-01, 1.461e-01, -9.972e-02, -7.747e-02, -1.716e-02, -8.979e-02, 1.323e-01, 9.359e-02, -1.607e-02, -2.721e-02, 5.214e-02) * s3[y+2][x+1];
	r += M4(1.089e-01, -2.849e-03, 1.214e-01, -2.020e-01, -4.394e-02, 4.049e-03, -4.379e-02, -1.100e-01, -1.041e-02, 3.643e-02, -2.808e-02, 9.783e-02, 3.140e-02, -1.249e-02, 5.436e-02, 6.571e-02) * s3[y+2][x+2];
	r += V4(3.775e-03, 9.736e-03, -3.011e-03, -2.004e-03);
	return vec4(r);
}
vec4 f1(int x, int y) {
	V4 r = V4(0.0);
	r += M4(1.102e-01, -1.066e-01, -1.717e-02, 8.211e-02, 1.091e-03, 2.304e-02, -2.545e-02, 4.173e-03, 8.550e-02, 1.962e-02, -1.477e-01, 8.863e-02, 8.755e-03, -1.357e-02, -6.210e-02, -7.823e-02) * s0[y+0][x+0];
	r += M4(1.480e-01, -2.569e-01, -8.619e-02, 7.579e-02, 1.875e-02, 7.972e-02, 1.906e-02, 5.769e-02, 3.889e-03, -1.266e-02, 5.779e-02, -9.853e-02, -5.205e-03, -3.125e-02, 5.738e-02, -3.277e-02) * s0[y+0][x+1];
	r += M4(4.651e-02, 2.302e-03, 1.223e-02, -1.182e-02, 1.218e-02, -2.123e-02, 1.262e-02, -3.362e-02, -6.268e-02, 2.864e-02, 8.826e-02, -7.477e-02, -1.853e-03, -2.160e-02, 4.220e-02, -2.475e-02) * s0[y+0][x+2];
	r += M4(1.692e-01, -1.997e-01, -7.699e-02, -1.289e-01, -7.611e-02, 4.433e-02, 8.044e-02, 4.383e-02, -2.532e-02, 5.920e-04, -9.577e-02, -3.892e-02, 7.170e-02, 3.900e-02, -9.068e-02, 1.292e-01) * s0[y+1][x+0];
	r += M4(-1.748e-01, -2.947e-01, -3.892e-01, -2.526e-01, -7.299e-02, 2.244e-01, -1.063e-03, 1.224e-01, 3.281e-01, 5.786e-02, 4.595e-01, -1.578e-01, 8.338e-02, 2.771e-02, -1.686e-01, 2.832e-01) * s0[y+1][x+1];
	r += M4(3.062e-02, 1.938e-01, 1.563e-01, 2.564e-02, 1.525e-03, 6.162e-02, 8.241e-02, 6.877e-02, -1.900e-01, 5.185e-02, 1.248e-03, -1.651e-02, -3.090e-02, -3.281e-03, 1.008e-01, 9.661e-03) * s0[y+1][x+2];
	r += M4(2.153e-01, -6.758e-02, -3.344e-01, 2.328e-02, -2.755e-02, 8.804e-03, 5.393e-02, -1.990e-02, 1.209e-01, 6.888e-03, -1.837e-01, -1.816e-02, 5.088e-03, -2.306e-03, 5.728e-03, -6.814e-02) * s0[y+2][x+0];
	r += M4(1.363e-01, -4.236e-02, -1.230e-01, 6.810e-02, -1.052e-01, 8.618e-02, 4.457e-02, -9.139e-02, 3.670e-02, -4.087e-02, 7.828e-02, -1.140e-01, -3.998e-02, 1.918e-02, 4.284e-02, -8.834e-03) * s0[y+2][x+1];
	r += M4(-1.143e-01, 7.430e-03, 1.389e-01, -2.979e-02, -8.577e-02, 7.251e-02, 8.985e-02, -8.683e-02, -6.896e-02, -4.199e-02, 3.232e-02, 4.232e-02, 1.186e-02, -2.916e-03, -1.825e-02, -3.914e-02) * s0[y+2][x+2];
	r += M4(5.020e-02, -3.113e-02, -4.265e-02, 7.883e-02, 5.505e-02, -7.143e-02, -1.141e-01, 6.774e-03, 7.845e-02, -2.747e-02, -2.532e-02, 8.772e-02, -2.626e-01, -9.982e-02, 2.981e-01, -1.297e-01) * s1[y+0][x+0];
	r += M4(4.033e-02, -9.443e-02, 3.087e-02, 7.841e-02, -3.489e-01, 3.936e-01, 7.222e-02, -2.443e-01, 7.821e-02, -1.284e-01, 2.406e-02, 5.037e-02, 3.815e-01, -4.385e-04, 4.879e-01, -3.049e-03) * s1[y+0][x+1];
	r += M4(-3.109e-02, 1.388e-02, 1.086e-01, -4.154e-03, -7.017e-02, 1.351e-01, 2.349e-01, 1.627e-01, 3.795e-02, 2.889e-02, 2.164e-02, -3.764e-02, 3.650e-02, -1.302e-01, -2.452e-01, -1.584e-01) * s1[y+0][x+2];
	r += M4(1.529e-01, -1.597e-01, -1.256e-01, -2.277e-01, -5.373e-01, 2.270e-01, 7.499e-01, 1.065e-01, 1.372e-01, -7.645e-02, -1.421e-01, 6.554e-02, -1.499e-01, 8.356e-02, 2.317e-01, -1.058e-01) * s1[y+1][x+0];
	r += M4(2.841e-02, -1.679e-01, -9.357e-02, -3.975e-01, -4.326e-01, 2.832e-01, -1.987e-01, 4.464e-01, 8.841e-02, -5.958e-02, 1.672e-01, -1.038e-01, 5.404e-01, 1.823e-01, 2.005e-01, 3.846e-01) * s1[y+1][x+1];
	r += M4(-1.176e-01, 8.473e-02, 1.800e-01, -8.558e-02, -9.479e-02, 2.173e-01, 1.882e-01, 2.521e-02, -6.243e-02, 1.346e-01, 3.773e-02, 8.705e-03, -1.454e-01, -7.761e-02, -8.127e-02, -1.170e-01) * s1[y+1][x+2];
	r += M4(7.497e-02, -2.399e-02, -8.857e-02, 6.709e-02, -1.538e-01, -2.998e-02, 2.274e-01, -1.537e-01, 4.943e-02, 2.854e-02, -9.371e-02, 5.686e-03, 1.831e-03, -2.395e-02, 1.536e-01, -3.439e-02) * s1[y+2][x+0];
	r += M4(6.031e-03, -4.057e-02, -1.360e-02, 6.388e-02, -3.527e-01, 2.789e-02, 5.645e-01, -1.275e-01, 1.029e-01, -1.008e-01, 1.093e-01, -7.644e-02, -2.753e-01, 3.004e-03, 2.031e-02, -1.409e-01) * s1[y+2][x+1];
	r += M4(-6.069e-02, -2.563e-02, 6.468e-02, 2.080e-02, -1.787e-01, -1.115e-01, 2.558e-02, 2.094e-02, -1.567e-01, 2.386e-03, 1.015e-01, 8.977e-02, 1.627e-01, -4.630e-02, -9.760e-02, -5.316e-02) * s1[y+2][x+2];
	r += M4(4.848e-02, -2.886e-02, 1.629e-03, 1.723e-03, -6.121e-02, 7.364e-02, 7.008e-02, 1.237e-01, 1.690e-02, -1.626e-03, -4.425e-02, 7.403e-02, 6.694e-02, -8.908e-02, -6.092e-02, 1.885e-02) * s2[y+0][x+0];
	r += M4(-1.595e-02, -9.253e-02, 1.183e-02, -8.305e-02, 1.973e-02, -8.220e-02, -8.813e-03, 8.362e-02, 8.070e-03, -1.048e-02, 8.205e-03, 5.447e-02, -7.807e-03, 2.402e-02, 7.121e-02, -4.397e-02) * s2[y+0][x+1];
	r += M4(-2.398e-02, 2.045e-02, -2.377e-02, -8.016e-03, -6.038e-02, 2.291e-02, 3.018e-02, 1.404e-01, -2.434e-02, -4.392e-03, 1.351e-02, 2.888e-02, 7.950e-03, -3.189e-02, -3.450e-02, 1.775e-02) * s2[y+0][x+2];
	r += M4(-8.567e-02, -8.314e-03, 1.402e-01, -8.666e-02, -1.648e-01, 5.895e-02, 1.864e-01, -7.240e-02, -2.476e-01, 1.197e-01, 1.981e-01, -1.650e-01, 1.112e-01, -1.421e-01, -1.726e-01, -2.627e-01) * s2[y+1][x+0];
	r += M4(-2.618e-02, -1.134e-01, -3.752e-02, -1.574e-01, 1.101e-01, -1.548e-01, -4.462e-02, -2.163e-01, 8.631e-02, 4.549e-02, -6.616e-02, -2.915e-01, 1.568e-01, -9.012e-02, -7.350e-03, -2.956e-01) * s2[y+1][x+1];
	r += M4(3.544e-02, -5.074e-02, -4.632e-02, 7.105e-02, 4.108e-02, -8.909e-02, -3.337e-02, -8.639e-03, 2.994e-02, 1.631e-02, -8.637e-03, 1.024e-02, -4.929e-02, 1.776e-02, -5.175e-02, -1.139e-01) * s2[y+1][x+2];
	r += M4(1.956e-02, -9.557e-04, -6.726e-02, 4.843e-02, -8.227e-02, 1.250e-03, 1.365e-01, 3.262e-02, 6.536e-03, -2.707e-02, 4.099e-02, 1.112e-01, 2.884e-02, -2.699e-02, -4.082e-02, 8.965e-02) * s2[y+2][x+0];
	r += M4(-5.443e-03, 2.004e-03, 5.436e-03, -2.295e-02, 3.796e-02, -7.202e-02, -8.989e-02, 1.294e-01, -4.355e-02, -1.058e-02, 2.649e-02, -2.803e-02, 1.023e-01, -7.933e-02, -5.650e-02, 1.715e-01) * s2[y+2][x+1];
	r += M4(7.500e-02, -2.405e-02, -6.469e-02, -1.054e-02, 1.401e-01, -3.436e-02, -9.305e-02, 6.332e-02, -8.895e-03, 1.392e-02, 4.430e-03, 2.778e-02, -4.111e-02, 5.413e-04, 1.918e-02, 7.383e-02) * s2[y+2][x+2];
	r += M4(4.385e-03, -7.789e-02, -1.835e-01, -5.139e-02, 2.945e-02, -1.771e-02, -8.862e-02, 2.671e-02, -1.673e-03, 7.064e-02, -1.156e-01, -6.052e-02, 9.835e-02, -8.695e-02, -1.111e-01, 1.940e-02) * s3[y+0][x+0];
	r += M4(-2.209e-01, 2.765e-02, -1.990e-01, -3.071e-02, 1.425e-02, -7.871e-02, 1.902e-02, 4.452e-02, 2.067e-01, -1.077e-01, -5.692e-02, 5.337e-02, -6.255e-02, 6.238e-02, 3.161e-02, -5.275e-02) * s3[y+0][x+1];
	r += M4(-6.641e-02, 1.701e-01, -2.617e-02, -1.097e-02, -5.678e-03, -2.042e-02, -5.317e-02, 1.753e-03, -2.931e-02, -9.518e-03, 2.708e-02, 1.970e-02, 2.463e-02, -2.977e-02, -7.030e-02, -7.851e-02) * s3[y+0][x+2];
	r += M4(-1.377e-01, 1.367e-01, 3.174e-01, -1.022e-01, 3.408e-02, 1.438e-01, -1.040e-01, 1.978e-02, -7.394e-02, -6.268e-02, 7.881e-02, 6.450e-02, -3.508e-01, -1.652e-01, 5.996e-01, -2.529e-01) * s3[y+1][x+0];
	r += M4(4.334e-01, -5.841e-02, -1.887e-01, -6.089e-02, 4.438e-02, -3.858e-01, -4.299e-02, 1.102e-01, 4.576e-01, 2.293e-01, -5.744e-01, -1.053e-01, 3.139e-01, -1.233e-01, -4.001e-01, -1.336e-01) * s3[y+1][x+1];
	r += M4(-2.532e-01, -4.789e-02, 1.999e-01, 1.142e-02, 5.136e-02, -1.089e-02, -5.919e-02, 5.608e-02, 1.370e-01, 8.213e-02, 5.480e-02, -3.282e-02, -5.945e-02, 4.865e-02, 8.172e-02, 8.374e-02) * s3[y+1][x+2];
	r += M4(2.216e-02, -1.077e-01, -1.634e-01, -9.144e-02, 8.070e-02, 3.407e-02, -1.628e-01, 7.450e-02, 8.192e-02, -8.086e-02, -1.258e-01, 1.427e-02, 1.685e-01, -1.008e-01, -1.285e-01, 4.151e-02) * s3[y+2][x+0];
	r += M4(1.435e-02, 1.563e-01, 2.509e-01, 3.850e-02, 7.055e-02, 1.053e-02, 5.936e-02, -1.523e-01, -4.859e-02, 9.193e-02, -1.433e-01, -9.732e-02, -2.043e-02, 8.792e-03, -1.130e-01, 9.143e-02) * s3[y+2][x+1];
	r += M4(1.450e-01, -9.389e-02, -1.400e-01, -1.023e-01, 6.266e-02, -1.675e-02, -6.867e-02, -2.303e-02, 3.071e-02, 1.224e-01, 7.763e-02, 6.340e-02, 6.880e-02, 4.964e-02, -2.486e-04, -3.881e-02) * s3[y+2][x+2];
	r += V4(-8.702e-03, 3.303e-04, 1.122e-02, -1.691e-02);
	return vec4(r);
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv3_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
			s2[ay][ax] = l1(x - 1, y - 1);
			s1[ay][ax] = -max(-s0[ay][ax], V4(0.0));
			s0[ay][ax] = max(s0[ay][ax], V4(0.0));
			s3[ay][ax] = -max(-s2[ay][ax], V4(0.0));
			s2[ay][ax] = max(s2[ay][ax], V4(0.0));
		}
	}
	barrier();
	memoryBarrierShared();
	imageStore(out_image, opos + ivec2(0, 0), f0(xy.x, xy.y));
	imageStore(out_image, opos + ivec2(1, 0), f1(xy.x, xy.y));
}


//!DESC CuNNy-4x8C-RCAS-out
//!HOOK LUMA
//!COMPUTE 8 8 8 8
//!BIND conv4
//!BIND LUMA
//!SAVE out
//!WIDTH LUMA.w
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
	#define V4 f16vec4
	#define M4 f16mat4
	#define F float16_t
#else
	#define V4 vec4
	#define M4 mat4
	#define F float
#endif
#define l0(x, y) V4(texelFetch(conv4_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0))
#define l1(x, y) V4(texelFetch(conv4_raw, clamp(ipos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0))
shared V4 s0[10][10];
shared V4 s1[10][10];
shared V4 s2[10][10];
shared V4 s3[10][10];
vec4 f0(int x, int y) {
	V4 r = V4(0.0);
	r += M4(2.335e-02, 4.065e-03, 1.834e-02, -4.742e-03, -3.531e-02, -2.320e-02, -4.730e-03, 2.308e-02, 1.537e-01, -1.326e-01, -4.448e-02, 2.645e-02, 1.482e-02, 9.517e-03, -2.902e-02, -1.152e-02) * s0[y+0][x+0];
	r += M4(1.353e-01, 1.154e-01, 1.377e-02, 5.556e-02, 6.567e-02, 7.001e-02, -4.321e-02, 2.427e-02, -5.489e-01, 3.236e-01, 3.441e-02, 4.604e-02, 4.507e-02, 2.994e-02, 2.325e-02, 9.721e-03) * s0[y+0][x+1];
	r += M4(3.056e-03, 4.358e-02, 2.153e-02, -1.213e-03, 1.126e-02, -2.264e-03, -1.364e-02, -4.176e-02, 7.198e-02, 8.177e-02, -4.796e-02, 1.073e-02, -1.689e-02, 4.007e-03, -9.300e-03, -1.253e-02) * s0[y+0][x+2];
	r += M4(-1.129e-01, 2.228e-02, -4.660e-02, -1.063e-02, 2.601e-02, -4.581e-02, 2.402e-02, -3.258e-02, -8.881e-02, -9.491e-02, 9.244e-02, -2.322e-01, 1.846e-03, -2.541e-02, 4.592e-02, 3.183e-02) * s0[y+1][x+0];
	r += M4(-2.490e-01, -3.824e-01, 2.529e-01, 8.072e-02, -1.067e-01, -1.174e-01, 8.667e-02, 4.484e-04, -4.879e-01, 7.953e-01, -1.065e+00, 8.051e-01, 1.528e-01, 1.626e-01, 4.375e-02, 2.794e-02) * s0[y+1][x+1];
	r += M4(1.441e-02, 2.887e-03, -5.549e-02, 8.895e-02, 4.134e-02, 4.940e-02, 3.770e-02, 8.794e-02, 2.171e-01, -1.509e-01, 3.037e-01, -3.934e-04, -5.903e-03, 1.721e-03, 1.040e-02, 3.865e-02) * s0[y+1][x+2];
	r += M4(2.815e-03, 2.044e-02, -2.089e-02, -2.356e-02, 2.143e-02, -3.601e-02, 7.174e-02, -1.813e-02, 4.870e-02, 8.023e-04, 8.033e-05, 1.405e-02, -3.458e-02, 4.488e-02, -7.085e-02, -2.067e-02) * s0[y+2][x+0];
	r += M4(3.194e-02, 2.461e-02, -8.905e-02, -2.745e-02, -3.936e-02, -1.656e-03, -6.976e-02, -3.050e-03, -6.268e-02, -7.142e-02, -1.136e-01, 1.173e-01, 3.789e-02, -7.061e-02, 2.417e-01, 1.633e-01) * s0[y+2][x+1];
	r += M4(-1.069e-02, -1.719e-02, 1.193e-02, -5.141e-02, 1.462e-02, 3.694e-03, -2.459e-02, -5.721e-02, 7.970e-03, 1.361e-02, 2.729e-02, -8.234e-02, -1.743e-02, 1.102e-02, -5.894e-02, -3.444e-02) * s0[y+2][x+2];
	r += M4(-5.210e-02, 5.275e-02, 1.136e-01, 1.824e-03, -8.904e-02, -4.012e-02, 2.884e-02, 9.896e-03, 4.816e-02, 8.022e-03, 8.858e-03, 4.555e-03, 8.686e-03, -1.017e-02, -1.760e-03, -7.532e-03) * s1[y+0][x+0];
	r += M4(5.918e-01, 1.371e-01, -7.655e-02, 1.752e-01, 1.295e-02, 4.501e-02, -2.096e-02, 4.454e-02, -5.427e-02, -3.431e-02, 6.404e-02, -2.355e-02, 1.497e-02, 4.868e-02, 1.083e-02, 2.338e-02) * s1[y+0][x+1];
	r += M4(-8.920e-02, 2.616e-01, -1.301e-02, -1.072e-01, 2.547e-02, 3.627e-02, -2.849e-02, -6.762e-02, 2.171e-02, 1.967e-02, -2.287e-02, 5.017e-02, -1.105e-03, -1.298e-02, -8.880e-03, -1.571e-02) * s1[y+0][x+2];
	r += M4(-4.058e-02, -1.181e-02, -2.161e-01, -5.385e-02, 2.718e-01, -2.475e-01, -1.143e-02, -1.994e-01, -9.747e-02, 1.280e-03, -8.780e-02, -1.049e-02, 1.671e-03, -3.108e-02, -1.160e-02, 8.398e-03) * s1[y+1][x+0];
	r += M4(-2.689e-02, -1.028e-01, -1.828e-01, -4.444e-01, -1.036e+00, 8.577e-01, -3.967e-01, 4.255e-01, 1.495e-01, -2.650e-02, 1.692e-02, 1.827e-03, 9.763e-02, 1.568e-01, 1.744e-02, 8.085e-03) * s1[y+1][x+1];
	r += M4(1.765e-02, 5.443e-02, -9.809e-02, -4.493e-02, 1.935e-01, -8.945e-02, 9.915e-02, 1.227e-01, -2.087e-02, 2.349e-02, 6.272e-02, 9.147e-03, 1.352e-02, -5.076e-03, 4.272e-02, 4.759e-02) * s1[y+1][x+2];
	r += M4(-1.656e-02, 5.312e-02, 6.266e-03, -1.676e-02, 2.942e-02, -7.522e-02, 1.564e-01, -1.623e-01, 4.711e-02, 2.257e-02, 6.242e-02, 4.820e-02, -6.162e-02, 2.002e-02, 2.864e-02, 2.904e-03) * s1[y+2][x+0];
	r += M4(-4.958e-02, -9.350e-02, 4.823e-02, 1.227e-01, -2.510e-02, 5.983e-02, -7.180e-01, 5.062e-01, -4.901e-02, -2.063e-02, -4.374e-02, -8.622e-02, 4.952e-02, -5.667e-02, 2.274e-01, 2.861e-01) * s1[y+2][x+1];
	r += M4(-2.989e-03, -1.877e-02, -3.541e-02, -5.280e-02, 4.044e-02, -1.185e-02, 1.420e-01, -2.222e-01, 6.885e-03, 7.099e-03, -1.862e-02, 1.467e-02, -1.108e-02, 2.839e-02, -1.986e-02, -3.730e-02) * s1[y+2][x+2];
	r += M4(2.701e-02, 1.987e-03, -3.677e-02, -1.655e-02, 6.534e-02, 1.941e-03, 2.266e-02, -2.601e-03, -2.101e-03, 1.751e-02, -3.888e-03, -9.680e-03, -1.727e-01, -7.785e-02, 1.413e-01, 3.152e-02) * s2[y+0][x+0];
	r += M4(-1.674e-01, 9.398e-02, 4.096e-02, 2.948e-02, -2.926e-02, 3.380e-02, 5.326e-02, 2.765e-02, -1.551e-02, -4.839e-02, 3.765e-02, -2.732e-03, -2.910e-02, -1.092e-01, 1.234e-01, 2.578e-01) * s2[y+0][x+1];
	r += M4(4.291e-02, -5.489e-02, 1.794e-02, -6.348e-04, 2.073e-02, -3.114e-02, -1.101e-04, 1.352e-02, -3.580e-02, -7.844e-03, 2.276e-02, 2.173e-02, 1.509e-02, 5.665e-03, 1.050e-02, -9.773e-03) * s2[y+0][x+2];
	r += M4(-7.220e-02, -3.950e-02, 6.685e-03, 2.875e-02, -2.011e-01, 9.443e-02, -1.889e-01, 4.650e-02, -1.938e-03, -2.890e-03, 2.031e-03, 3.649e-02, 4.385e-01, -2.318e-02, -3.861e-01, -8.144e-02) * s2[y+1][x+0];
	r += M4(-1.258e-01, -2.416e-01, -5.528e-01, -2.478e-01, 1.108e-01, -3.533e-01, -1.210e-01, -3.313e-01, -2.900e-01, -9.464e-02, -3.115e-01, -1.393e-01, 4.455e-01, 8.575e-01, -5.959e-01, -8.177e-01) * s2[y+1][x+1];
	r += M4(-8.227e-02, 6.032e-02, -6.797e-02, -8.567e-02, 2.669e-02, 1.433e-01, 5.562e-02, 1.252e-02, 1.221e-02, -1.391e-01, -7.254e-02, -1.843e-01, 5.136e-03, 3.539e-02, 4.252e-02, -8.930e-02) * s2[y+1][x+2];
	r += M4(-2.282e-02, 6.860e-02, -5.507e-03, 1.737e-02, 8.522e-02, 9.758e-03, 8.384e-02, 6.761e-02, -2.644e-02, 3.379e-02, -1.986e-02, 1.080e-02, -9.065e-02, -5.867e-04, 1.708e-02, -6.634e-03) * s2[y+2][x+0];
	r += M4(1.885e-02, -1.781e-02, 2.768e-01, 1.745e-01, -4.694e-02, 6.346e-04, -3.578e-02, -1.228e-01, 5.992e-02, 3.798e-02, 1.205e-01, 1.195e-01, -1.847e-01, -2.144e-01, 1.119e-01, 1.476e-01) * s2[y+2][x+1];
	r += M4(3.553e-02, -3.019e-02, 4.701e-02, 8.569e-02, 1.121e-02, 1.562e-02, -3.857e-02, 4.148e-02, 1.212e-02, -2.240e-02, 1.352e-01, 1.080e-01, 2.384e-02, -4.417e-02, -8.866e-03, -5.005e-03) * s2[y+2][x+2];
	r += M4(-1.889e-02, 4.488e-02, -9.221e-03, -1.543e-02, 1.924e-02, 4.024e-03, 6.303e-03, 1.717e-02, -1.223e-02, 1.367e-03, -1.370e-02, -9.674e-03, 6.072e-03, -1.690e-02, 6.190e-03, -5.484e-03) * s3[y+0][x+0];
	r += M4(2.013e-03, -1.093e-01, 2.094e-02, 2.825e-02, -2.432e-04, 1.045e-01, -2.184e-02, 6.000e-02, 2.842e-02, -1.598e-02, 3.918e-02, -3.262e-02, -3.903e-02, 1.094e-02, -8.084e-03, 2.401e-02) * s3[y+0][x+1];
	r += M4(-9.041e-03, 2.413e-02, -2.370e-03, 1.323e-03, 2.306e-02, -1.240e-02, 3.923e-02, -5.403e-02, -4.224e-02, -6.862e-02, 1.643e-02, 3.845e-02, 2.787e-02, -1.068e-02, 1.346e-02, -1.526e-02) * s3[y+0][x+2];
	r += M4(-2.506e-02, 1.688e-02, -9.998e-02, 8.319e-02, -1.186e-01, -2.739e-02, -8.911e-02, 2.086e-03, 1.681e-03, -8.787e-03, 1.448e-02, -3.152e-03, -9.407e-03, -6.428e-02, 5.815e-02, -1.140e-02) * s3[y+1][x+0];
	r += M4(-1.856e-01, -2.363e-01, -2.423e-01, -4.254e-01, -3.643e-01, -1.560e-01, -1.375e-01, -4.702e-02, -3.004e-01, -8.374e-02, -3.818e-01, -3.036e-02, -6.267e-03, 3.050e-02, -1.595e-02, 1.222e-02) * s3[y+1][x+1];
	r += M4(9.600e-03, -3.691e-02, -1.585e-02, -5.485e-02, -9.077e-03, 1.348e-01, -3.411e-02, 1.636e-01, 1.665e-01, -1.705e-01, -6.792e-03, -4.717e-01, -4.034e-03, -6.174e-03, 6.841e-04, 2.897e-03) * s3[y+1][x+2];
	r += M4(-2.974e-02, 5.258e-02, 2.454e-02, 3.107e-02, 1.255e-01, -5.510e-03, 1.067e-01, -6.713e-03, -2.332e-02, 2.887e-02, -1.891e-02, 1.302e-02, -1.528e-02, -5.352e-03, 4.896e-03, -3.512e-02) * s3[y+2][x+0];
	r += M4(6.855e-02, -3.327e-03, 2.080e-01, 1.849e-01, -2.766e-02, 7.300e-02, -2.619e-01, -2.872e-02, 6.503e-02, 4.942e-02, 1.694e-01, 8.202e-02, -2.886e-02, -2.667e-02, 4.172e-03, 5.609e-02) * s3[y+2][x+1];
	r += M4(2.217e-02, -2.196e-02, 8.726e-02, 7.690e-02, -7.212e-02, 1.110e-01, -6.234e-02, 1.746e-01, -3.485e-02, -6.994e-02, 1.267e-01, 1.596e-01, 8.952e-03, -5.027e-03, 1.098e-02, -5.291e-03) * s3[y+2][x+2];
	r += V4(1.226e-03, 5.133e-04, 1.820e-03, 1.032e-03);
	return tanh(vec4(r));
}
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 ipos = pos;
	ivec2 opos = pos * ivec2(1, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	vec2 pt = conv4_pt;
	#pragma optionNV(unroll all)
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		#pragma optionNV(unroll all)
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			s0[ay][ax] = l0(x - 1, y - 1);
			s2[ay][ax] = l1(x - 1, y - 1);
			s1[ay][ax] = -max(-s0[ay][ax], V4(0.0));
			s0[ay][ax] = max(s0[ay][ax], V4(0.0));
			s3[ay][ax] = -max(-s2[ay][ax], V4(0.0));
			s2[ay][ax] = max(s2[ay][ax], V4(0.0));
		}
	}
	barrier();
	memoryBarrierShared();
	imageStore(out_image, opos + ivec2(0, 0), f0(xy.x, xy.y));
}


//!DESC CuNNy-4x8C-RCAS-shuffle
//!HOOK LUMA
//!BIND out
//!BIND rcas
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 1
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
	#define V4 f16vec4
	#define M4 f16mat4
	#define F float16_t
#else
	#define V4 vec4
	#define M4 mat4
	#define F float
#endif
vec4 hook() {
	vec4 r = vec4(0.0);
	vec2 f = fract(out_pos * out_size);
	ivec2 i = ivec2(f * vec2(2.0));
	r.r = out_tex((vec2(0.5) - f) * out_pt + out_pos)[2*i.y + i.x];
	r.r += rcas_tex(rcas_pos).r;
	r.a = 1.0;
	return clamp(r, 0.0, 1.0);
}
